uint64_t sub_100005BC0()
{
  uint64_t v0;
  void *v1;
  uint64_t (__cdecl *v3)();
  uint64_t v4;

  if (qword_100264628 != -1) {
    swift_once();
  }
  v3 = (uint64_t (__cdecl *)())((char *)&dword_100269048 + dword_100269048);
  v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_100033AF8;
  return v3();
}

uint64_t sub_100005F20(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

unint64_t sub_100006004()
{
  unint64_t result = qword_100264660;
  if (!qword_100264660)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100264660);
  }
  return result;
}

id sub_100006044()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for TranscriptionModelAssetService()) init];
  qword_100275560 = (uint64_t)result;
  return result;
}

uint64_t sub_100006208(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, __int16 a8, uint64_t a9, char a10)
{
  char v18 = a1 & 1;
  *(void *)(v10 + 56) = 0;
  *(unsigned char *)(v10 + 64) = 1;
  ObservationRegistrar.init()();
  *(unsigned char *)(v10 + 16) = v18;
  *(void *)(v10 + 24) = a2;
  *(unsigned char *)(v10 + 32) = a3;
  *(void *)(v10 + 40) = a4;
  *(void *)(v10 + 48) = a5;
  *(void *)(v10 + 56) = a6;
  *(unsigned char *)(v10 + 64) = a7 & 1;
  *(unsigned char *)(v10 + 65) = a8 & 1;
  *(unsigned char *)(v10 + 66) = HIBYTE(a8) & 1;
  uint64_t v19 = v10 + OBJC_IVAR____TtC10VoiceMemos23RCRecordButtonViewModel__accessibilityLabel;
  uint64_t v20 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v19, a9, v20);
  *(unsigned char *)(v10 + OBJC_IVAR____TtC10VoiceMemos23RCRecordButtonViewModel__disabled) = a10;
  return v10;
}

uint64_t sub_10000631C(Swift::UInt a1, Swift::UInt a2, int a3, unint64_t a4, Swift::UInt a5, char a6)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10001CB84(a1, a2, a3, a4, a5, a6 & 1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10000651C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  type metadata accessor for MainActor();
  v4[3] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[4] = v6;
  v4[5] = v5;
  return _swift_task_switch(sub_100005BC0, v6, v5);
}

void sub_1000065B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100269250);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    sub_10001D764(a1, (uint64_t)v6);
    uint64_t v9 = type metadata accessor for TranscriptViewModel();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v6, 1, v9) == 1)
    {

      sub_1000285F8((uint64_t)v6, &qword_100269250);
    }
    else
    {
      v11 = (void *)*((void *)v6 + 12);
      uint64_t v10 = *((void *)v6 + 13);
      id v12 = v11;
      sub_10002343C((uint64_t)v6);
      if (v11)
      {
        v13 = *(void **)(a2 + 96);
        if (v13)
        {
          id v14 = v12;
          id v15 = v13;
          sub_100167BF8(v15);
        }
        id v16 = [v12 length];
        id v17 = [v8 textStorage];
        [v17 deleteCharactersInRange:v10, v16];
      }
      else
      {
      }
    }
  }
}

uint64_t type metadata accessor for LocationManagerStateCoordinator()
{
  return self;
}

uint64_t type metadata accessor for TranscriptViewConfigurationMediator()
{
  return self;
}

uint64_t sub_10000678C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  char v8 = *(unsigned char *)(v1 + 48);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100031604;
  return sub_10000C318(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100006A5C()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[2];
  v0[3] = v2;
  if (v2)
  {
    v0[4] = 0;
    v3 = v1 + 4;
    uint64_t v4 = v1[7];
    uint64_t v5 = v1[8];
    swift_bridgeObjectRetain();
    sub_10001510C(v3, v4);
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 8) + **(int **)(v5 + 8));
    uint64_t v6 = (void *)swift_task_alloc();
    v0[5] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100007414;
    return v9(v4, v5);
  }
  else
  {
    char v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100006BAC(const void *a1)
{
  *(void *)(v1 + 16) = _Block_copy(a1);
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_100269048 + dword_100269048);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000071CC;
  return v4();
}

id sub_100006C54()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for TranscriptionAvailabilityProvider()) init];
  qword_100275388 = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for TranscriptViewContextProvider()
{
  return self;
}

void sub_100006E94(id a1, BOOL a2)
{
  BOOL v2 = a2;
  v3 = +[RCAppGroupStorage sharedInstance];
  unsigned int v4 = [v3 transcriptionIsSupported];

  if (v4 != v2)
  {
    uint64_t v5 = +[RCAppGroupStorage sharedInstance];
    [v5 setTranscriptionIsSupported:v2];

    id v6 = +[RCSSavedRecordingService sharedService];
    [v6 clearAndReloadSearchMetadataWithCompletionBlock:0];
  }
}

id sub_100006FD4(uint64_t a1)
{
  uint64_t v3 = sub_100028654(&qword_100269250);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (double *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002869C(a1, (uint64_t)v5, &qword_100269250);
  uint64_t v6 = type metadata accessor for TranscriptViewModel();
  if ((*(unsigned int (**)(double *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    sub_1000285F8((uint64_t)v5, &qword_100269250);
    char v7 = 1;
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
  }
  else
  {
    double v8 = v5[4];
    double v9 = v5[5];
    double v10 = v5[6];
    double v11 = v5[7];
    char v7 = *((unsigned char *)v5 + 64);
    sub_10002343C((uint64_t)v5);
  }
  uint64_t v12 = v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
  id result = (id)swift_beginAccess();
  if (v7)
  {
    if (*(unsigned char *)(v12 + 64)) {
      return result;
    }
    double v14 = *(double *)(v12 + 32);
    double v15 = *(double *)(v12 + 40);
    double v16 = *(double *)(v12 + 48);
    double v17 = *(double *)(v12 + 56);
    goto LABEL_21;
  }
  if (*(unsigned char *)(v12 + 64))
  {
    uint64_t v18 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
    if (qword_100264630 != -1) {
      swift_once();
    }
    double v15 = *((double *)&xmmword_100275570 + 1);
    double v14 = *(double *)&xmmword_100275570;
    double v16 = *(double *)&qword_100275580;
    double v17 = unk_100275588;
    return [v18 setTextContainerInset:v14, v15, v16, v17];
  }
  double v14 = *(double *)(v12 + 32);
  double v15 = *(double *)(v12 + 40);
  double v16 = *(double *)(v12 + 48);
  double v17 = *(double *)(v12 + 56);
  if (v8 != v14 || v9 != *(double *)(v12 + 40) || v10 != *(double *)(v12 + 48) || v11 != *(double *)(v12 + 56))
  {
LABEL_21:
    uint64_t v18 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
    return [v18 setTextContainerInset:v14, v15, v16, v17];
  }
  return result;
}

uint64_t sub_1000071CC(char a1)
{
  uint64_t v3 = *(void (***)(void, void))(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();
  v3[2](v3, a1 & 1);
  _Block_release(v3);
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_1000072F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  **(void **)(*(void *)(v1 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return _swift_continuation_resume(v1);
}

uint64_t sub_100007358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[36] = a4;
  v4[37] = type metadata accessor for MainActor();
  v4[38] = static MainActor.shared.getter();
  uint64_t v7 = (uint64_t (__cdecl *)())((char *)&dword_100269040 + dword_100269040);
  uint64_t v5 = (void *)swift_task_alloc();
  v4[39] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100007B68;
  return v7();
}

uint64_t sub_100007414()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100008F9C, 0, 0);
}

uint64_t type metadata accessor for RCUserActivityStatePublisher()
{
  return self;
}

uint64_t sub_100007740()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100007B68(char a1)
{
  uint64_t v2 = *v1;
  *(unsigned char *)(v2 + 193) = a1;
  swift_task_dealloc();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v2 + 320) = v4;
  *(void *)(v2 + 328) = v3;
  return _swift_task_switch(sub_10000A620, v4, v3);
}

uint64_t sub_100007D58()
{
  uint64_t result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ObservationRegistrar();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

unint64_t sub_1000080BC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = String.count.getter();
  unint64_t v37 = a2;
  uint64_t v9 = String.count.getter();
  if (v9 >= v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v9;
  }
  if (v10 < 1)
  {
    unint64_t v11 = 15;
LABEL_18:
    uint64_t v29 = HIBYTE(v37) & 0xF;
    if ((v37 & 0x2000000000000000) == 0) {
      uint64_t v29 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v11 >> 14 < 4 * v29)
    {
      sub_10002DF88();
      uint64_t v30 = String.Index.utf16Offset<A>(in:)();
    }
    else
    {
      uint64_t v30 = 0;
    }
    uint64_t v31 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0) {
      uint64_t v31 = a3 & 0xFFFFFFFFFFFFLL;
    }
    if (v11 >> 14 < 4 * v31)
    {
      String.subscript.getter();
      static String._fromSubstring(_:)();
      swift_bridgeObjectRelease();
    }
    return v30;
  }
  uint64_t v35 = a1;
  unint64_t v36 = 15;
  unint64_t v11 = 15;
  uint64_t v32 = a3;
  unint64_t v33 = a4;
  while (1)
  {
    unint64_t v13 = (unint64_t)v10 >> 1;
    unint64_t result = String.index(_:offsetBy:)();
    if (result >> 14 < v11 >> 14) {
      break;
    }
    uint64_t v34 = v10;
    swift_bridgeObjectRetain();
    String.index(after:)();
    unint64_t v15 = String.subscript.getter();
    unint64_t v17 = v16;
    uint64_t v19 = v18;
    uint64_t v39 = v20;
    swift_bridgeObjectRelease();
    unint64_t result = String.index(_:offsetBy:)();
    if (result >> 14 < v36 >> 14) {
      goto LABEL_29;
    }
    unint64_t v38 = v11;
    swift_bridgeObjectRetain();
    String.index(after:)();
    unint64_t v21 = String.subscript.getter();
    unint64_t v23 = v22;
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    if (v19 == v25 && v39 == v27 && v15 >> 16 == v21 >> 16 && v17 >> 16 == v23 >> 16)
    {
      swift_bridgeObjectRelease_n();
      a3 = v32;
      a4 = v33;
      uint64_t v12 = v13;
    }
    else
    {
      char v28 = _stringCompareInternal(_:_:_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a3 = v32;
      a4 = v33;
      unint64_t v11 = v38;
      uint64_t v12 = v13;
      if ((v28 & 1) == 0) {
        goto LABEL_8;
      }
    }
    unint64_t v11 = String.index(after:)();
    unint64_t v36 = String.index(after:)();
    uint64_t v12 = v34 + ~v12;
LABEL_8:
    uint64_t v10 = v12;
    a1 = v35;
    if (v12 <= 0) {
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t start(int a1, char **a2)
{
  sub_10000DBC0();
  uint64_t v5 = UIApplicationMain(a1, a2, @"RCApplication", @"RecorderAppDelegate");
  return v5;
}

uint64_t sub_10000853C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10000857C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000085BC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  swift_retain();
  return swift_release();
}

uint64_t sub_1000086F0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = a2;
  swift_retain();
  return swift_release();
}

uint64_t type metadata accessor for TranscriptView.TranscriptTextView()
{
  return self;
}

uint64_t sub_100008894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100011BF4, v6, v5);
}

uint64_t type metadata accessor for TranscriptViewController()
{
  return self;
}

void sub_100008B74(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 16))
  {
    id v2 = objc_alloc((Class)CLLocationManager);
    id v3 = [v2 initWithEffectiveBundleIdentifier:RCVoiceMemosBundleID delegate:*(void *)(a1 + 32) onQueue:*(void *)(*(void *)(a1 + 32) + 56)];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;

    *(_DWORD *)(*(void *)(a1 + 32) + 8) = 0;
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 32);
    *(void *)(v6 + 32) = &__NSArray0__struct;

    *(void *)(*(void *)(a1 + 32) + 48) = 1;
  }
}

void sub_100008C00(uint64_t a1)
{
  id v2 = +[NSUserDefaults sharedSettingsUserDefaults];
  id v3 = v2;
  if (v2)
  {
    uint64_t v8 = v2;
    unsigned __int8 v4 = [v2 rc_deletionIsNever];
    unsigned int v5 = [v8 rc_deletionIsImmediate];
    id v6 = [v8 rc_recentlyDeletedWindow];
    id v3 = v8;
    if ((v4 & 1) == 0)
    {
      if (v5)
      {
        [*(id *)(a1 + 32) eraseAllDeleted];
      }
      else
      {
        uint64_t v7 = +[NSDate dateWithTimeIntervalSinceNow:(double)(-86400 * (uint64_t)v6)];
        [*(id *)(a1 + 32) eraseRecordingsDeletedBeforeDate:v7];
      }
      id v3 = v8;
    }
  }
}

uint64_t sub_100008CD0()
{
  unint64_t v1 = self;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_100033DE4;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10003264C;
  v0[13] = &unk_100227C30;
  v0[14] = v2;
  [v1 installedLanguagesForTaskHint:1009 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

void sub_100008E50(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = (void *)qword_10026A738;
  qword_10026A738 = v1;

  id v3 = (void *)qword_10026A738;

  [v3 set_horizontalSizeClassFromSplitView:0];
}

uint64_t sub_100008F9C()
{
  uint64_t v1 = v0[4] + 1;
  if (v1 == v0[3])
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    v0[4] = v1;
    uint64_t v4 = (void *)(v0[2] + 40 * v1);
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    sub_10001510C(v4 + 4, v5);
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
    uint64_t v7 = (void *)swift_task_alloc();
    v0[5] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100007414;
    return v8(v5, v6);
  }
}

uint64_t type metadata accessor for TranscriptionAvailabilityProvider()
{
  return self;
}

void sub_100009174(id a1)
{
  id v1 = +[RCApplicationContainer sharedContainer];
}

uint64_t sub_10000919C(uint64_t a1)
{
  uint64_t v3 = sub_100028654(&qword_100269250);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002869C(a1, (uint64_t)v5, &qword_100269250);
  uint64_t v6 = type metadata accessor for TranscriptViewModel();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    sub_1000285F8((uint64_t)v5, &qword_100269250);
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unsigned __int8 v9 = 0;
    char v10 = 1;
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 9);
    uint64_t v8 = *((void *)v5 + 10);
    char v11 = v5[88];
    char v10 = v5[89];
    sub_10002343C((uint64_t)v5);
    unsigned __int8 v9 = v11 & 1;
  }
  uint64_t v12 = v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
  swift_beginAccess();
  uint64_t result = *(uint64_t *)(v12 + 72);
  uint64_t v14 = *(void *)(v12 + 80);
  __int16 v15 = *(unsigned __int8 *)(v12 + 88);
  __int16 v16 = *(unsigned __int8 *)(v12 + 89);
  if (v10)
  {
    if (v16) {
      return result;
    }
    goto LABEL_8;
  }
  if ((v16 & 1) != 0
    || (v7 == result ? (BOOL v21 = v8 == v14) : (BOOL v21 = 0),
        !v21 ? (char v22 = 0) : (char v22 = 1),
        ((v9 | v15) & 1) == 0 ? (char v23 = v22) : (char v23 = v9 & v15),
        (v15 & 1) != 0 || (v23 & 1) == 0))
  {
LABEL_8:
    *(double *)&uint64_t result = COERCE_DOUBLE(sub_100140DC8(result, v14, v15 | (unsigned __int16)(v16 << 8)));
    if ((v19 & 1) == 0)
    {
      uint64_t v20 = v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_animatedContentOffsetTarget;
      if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_animatedContentOffsetTarget + 16) & 1) != 0
        || (double v18 = *(double *)v20, *(double *)v20 != *(double *)&result)
        || (double v18 = *(double *)(v20 + 8), v18 != v17))
      {
        *(double *)uint64_t v20 = *(double *)&result;
        *(double *)(v20 + 8) = v17;
        *(unsigned char *)(v20 + 16) = 0;
        *(double *)&uint64_t result = COERCE_DOUBLE([*(id *)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView) setContentOffset:1 animated:*result]);
      }
    }
  }
  return result;
}

char *sub_1000094B4(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = *((void *)a4 + 3);
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      uint64_t v10 = *((void *)a4 + 2);
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_100028654(a5);
      char v11 = (char *)swift_allocObject();
      size_t v12 = j__malloc_size(v11);
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
      unint64_t v13 = v11 + 32;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[24 * v9 + 32]) {
          memmove(v13, a4 + 32, 24 * v9);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v11 = (char *)&_swiftEmptyArrayStorage;
      unint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100032558(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for TranscriptViewPresenter()
{
  return self;
}

void sub_100009780(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  char v3 = 1;
  unint64_t v5 = a1;
  uint64_t v6 = a1;
  uint64_t v7 = a1;
  switch(a1)
  {
    case 1u:
      uint64_t v8 = type metadata accessor for String.LocalizationValue();
      __chkstk_darwin(v8 - 8);
      String.LocalizationValue.init(stringLiteral:)();
      uint64_t v9 = type metadata accessor for Locale();
      __chkstk_darwin(v9 - 8);
      static Locale.current.getter();
      uint64_t v2 = String.init(localized:table:bundle:locale:comment:)();
      unint64_t v5 = v10;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      char v3 = 0;
      goto LABEL_5;
    case 2u:
      uint64_t v2 = 0xD000000000000011;
      uint64_t v11 = type metadata accessor for String.LocalizationValue();
      __chkstk_darwin(v11 - 8);
      String.LocalizationValue.init(stringLiteral:)();
      uint64_t v12 = type metadata accessor for Locale();
      __chkstk_darwin(v12 - 8);
      static Locale.current.getter();
      uint64_t v6 = String.init(localized:table:bundle:locale:comment:)();
      uint64_t v7 = v13;
      unint64_t v5 = 0x80000001001EA440;
      goto LABEL_5;
    case 3u:
      sub_10000E740((uint64_t)v33);
      uint64_t v2 = v33[0];
      unint64_t v5 = v33[1];
      uint64_t v6 = v33[2];
      uint64_t v7 = v33[3];
      char v3 = v34;
      goto LABEL_5;
    case 4u:
      char v22 = self;
      id v23 = [v22 sharedStyleProvider];
      id v24 = [v23 transcriptViewRecordingDefaultTextColor];

      unint64_t v14 = sub_1000257E4(v24);
      id v25 = [v22 sharedStyleProvider];
      id v26 = [v25 transcriptViewRecordingHighlightedLastWordTextColor];
      id v27 = [v25 transcriptViewRecordingHighlightedSecondToLastWordTextColor];
      unint64_t v16 = sub_1000257E4(v26);
      unint64_t v15 = sub_1000257E4(v27);

      uint64_t v2 = 0;
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      char v19 = 0;
      uint64_t v18 = 0x4008000000000000;
      char v21 = 1;
      char v3 = -1;
      char v20 = 1;
      char v17 = 1;
      goto LABEL_8;
    case 5u:
      char v28 = self;
      id v29 = [v28 sharedStyleProvider];
      id v30 = [v29 transcriptViewPlaybackDefaultTextColor];

      unint64_t v14 = sub_1000257E4(v30);
      id v31 = [v28 sharedStyleProvider];
      id v32 = [v31 transcriptViewPlaybackHighlightedTextColor];

      unint64_t v15 = sub_1000257E4(v32);
      unint64_t v16 = 0;
      char v21 = 0;
      char v20 = 0;
      uint64_t v2 = 0;
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v18 = 0;
      char v17 = 1;
      char v3 = -1;
      char v19 = 1;
      goto LABEL_8;
    default:
LABEL_5:
      unint64_t v14 = sub_100025A44((uint64_t)&_swiftEmptyArrayStorage);
      unint64_t v15 = 0;
      unint64_t v16 = 0;
      char v17 = 0;
      uint64_t v18 = 0;
      char v19 = 1;
      char v20 = 2;
      char v21 = -1;
LABEL_8:
      *(void *)a2 = v14;
      *(void *)(a2 + 8) = v15;
      *(void *)(a2 + 16) = v16;
      *(unsigned char *)(a2 + 24) = v21;
      *(void *)(a2 + 32) = 0;
      *(unsigned char *)(a2 + 40) = 1;
      *(unsigned char *)(a2 + 41) = v20;
      *(void *)(a2 + 48) = v2;
      *(void *)(a2 + 56) = v5;
      *(void *)(a2 + 64) = v6;
      *(void *)(a2 + 72) = v7;
      *(unsigned char *)(a2 + 80) = v3;
      *(unsigned char *)(a2 + 81) = 0;
      *(unsigned char *)(a2 + 82) = v17;
      *(void *)(a2 + 88) = v18;
      *(unsigned char *)(a2 + 96) = v19;
      return;
  }
}

uint64_t sub_100009CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC10VoiceMemos23RCRecordButtonViewModel__accessibilityLabel;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess();
}

void sub_100009D40()
{
  if (!qword_10026A570)
  {
    type metadata accessor for UIContentUnavailableConfiguration();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10026A570);
    }
  }
}

uint64_t sub_100009D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000285F8(a1, &qword_1002699E0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t type metadata accessor for TranscriptionModelAssetService()
{
  return self;
}

char *sub_100009FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = type metadata accessor for TranscriptViewConfigurationProvider();
  char v20 = &off_100224140;
  v18[0] = a1;
  uint64_t v16 = type metadata accessor for TranscriptViewContextProvider();
  char v17 = &off_100225ED0;
  v15[0] = a2;
  uint64_t v4 = (char *)objc_allocWithZone((Class)type metadata accessor for TranscriptViewConfigurationMediator());
  uint64_t v5 = sub_10002F368((uint64_t)v18, v19);
  __chkstk_darwin(v5);
  uint64_t v7 = (void *)((char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  uint64_t v9 = sub_10002F368((uint64_t)v15, v16);
  __chkstk_darwin(v9);
  uint64_t v11 = (void *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = sub_100016254(*v7, *v11, v4);
  sub_10002F48C((uint64_t)v15);
  sub_10002F48C((uint64_t)v18);
  return v13;
}

void sub_10000A284(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10000A368(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10000A434(uint64_t a1)
{
  [*(id *)(a1 + 32) _clearTemporaryAudioFilesOnce];
  uint64_t v1 = +[RCSSavedRecordingService sharedService];
  [v1 enableOrphanHandlingWithCompletionBlock:0];

  id v2 = +[TranscriptionModelAssetService sharedInstance];
  [v2 isAvailableWithCompletionHandler:&stru_100222038];
}

uint64_t sub_10000A620()
{
  if (*(unsigned char *)(v0 + 193))
  {
    swift_release();
    *(void *)(v0 + 264) = 2;
    *(unsigned char *)(v0 + 272) = 0x80;
    swift_retain();
    CurrentValueSubject.send(_:)();
LABEL_4:
    swift_release();
    id v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  *(void *)(v0 + 336) = OBJC_IVAR____TtC10VoiceMemos30TranscriptionModelAssetService__downloadStateValueSubject;
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  unsigned int v1 = *(unsigned __int8 *)(v0 + 208);
  if (v1 <= 0x3F) {
    goto LABEL_4;
  }
  sub_10001576C(*(void *)(v0 + 200), v1);
  uint64_t v5 = (uint64_t (*)(void))((char *)&dword_100269048 + dword_100269048);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 344) = v4;
  void *v4 = v0;
  v4[1] = sub_100033F8C;
  return v5();
}

uint64_t type metadata accessor for TranscriptViewConfigurationProvider()
{
  return self;
}

void sub_10000AB8C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_10000AEF8()
{
  uint64_t v0 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v0 - 8);
  String.LocalizationValue.init(stringLiteral:)();
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  static Locale.current.getter();
  uint64_t result = String.init(localized:table:bundle:locale:comment:)();
  qword_1002690B0 = result;
  *(void *)algn_1002690B8 = v3;
  return result;
}

void sub_10000B0EC(id a1)
{
  uint64_t v1 = [RCRecordingsModelInteractor alloc];
  id v4 = +[RCApplicationModel sharedApplicationModel];
  uint64_t v2 = [(RCRecordingsModelInteractor *)v1 initWithSavedRecordingsModel:v4];
  uint64_t v3 = (void *)qword_10026A808;
  qword_10026A808 = (uint64_t)v2;
}

uint64_t sub_10000B49C()
{
  char v1 = *(unsigned char *)(v0 + 57);
  swift_release();
  swift_retain();
  *(unsigned char *)(v0 + 56) = RCTranscriptionFeatureFlagIsEnabled() & v1;
  CurrentValueSubject.value.setter();
  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

id sub_10000B664()
{
  uint64_t v1 = OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator____lazy_storage___transcriptView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator____lazy_storage___transcriptView);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator____lazy_storage___transcriptView);
  }
  else
  {
    uint64_t v4 = *(void **)(*sub_10001510C((void *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter), *(void *)(v0+ OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter+ 24))+ 96);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

void sub_10000B7C0(id a1)
{
  uint64_t v1 = [RCApplicationContainer alloc];
  RCCloudRecordingsStoreURL();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [(RCApplicationContainer *)v1 initWithURL:v4];
  id v3 = (void *)qword_10026A840;
  qword_10026A840 = (uint64_t)v2;
}

void sub_10000B8F8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t type metadata accessor for TranscriptViewDataProvider()
{
  return self;
}

uint64_t sub_10000BEB0(double a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_contextProvider);
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 48);
  int v5 = *(unsigned __int8 *)(v2 + 49);
  int v6 = *(unsigned __int8 *)(v2 + 50);
  int v7 = *(unsigned __int8 *)(v2 + 51);
  int v8 = *(unsigned __int8 *)(v2 + 52);
  double v9 = *(double *)(v2 + 56);
  *(unsigned char *)(v2 + 49) = v5;
  *(unsigned char *)(v2 + 50) = v6;
  *(unsigned char *)(v2 + 51) = v7;
  *(unsigned char *)(v2 + 52) = v8;
  *(double *)(v2 + 56) = a1;
  uint64_t v10 = *(unsigned __int16 *)(v2 + 32);
  sub_100015758(v3, v4);
  sub_100015758(v3, v4);
  sub_100015758(v3, v4);
  swift_retain();
  sub_10001576C(v3, v4);
  uint64_t v11 = 256;
  if (!v5) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = v11 | v4;
  uint64_t v13 = 0x10000;
  if (!v6) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = 0x1000000;
  if (!v7) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v12 | v13 | v14;
  uint64_t v16 = &_mh_execute_header;
  if (!v8) {
    uint64_t v16 = 0;
  }
  sub_100015780(v10, v3, v15 | (unint64_t)v16, v9);
  sub_10001576C(v3, v4);
  sub_10001576C(v3, v4);

  return swift_release();
}

uint64_t assignWithCopy for TranscriptionModelAssetService.DownloadState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100015758(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_10001576C(v5, v6);
  return a1;
}

void sub_10000C0DC(uint64_t a1, void *a2, void *a3)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 40) = 0;
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 16);
  id v6 = a3;
  id v10 = a2;
  int v7 = [v5 location];
  int v8 = v7;
  if (!v7) {
    int v8 = *(void **)(a1 + 40);
  }
  id v9 = v8;

  [*(id *)(a1 + 32) _didFetchPlaceInferences:v10 location:v9 error:v6];
}

uint64_t sub_10000C188(uint64_t a1)
{
  char v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100031604;
  id v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100269FE0 + dword_100269FE0);
  return v6(a1, v4);
}

void sub_10000C240(uint64_t a1)
{
  uint64_t v2 = +[RCSSavedRecordingService sharedService];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000C796C;
  v6[3] = &unk_100223500;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  uint64_t v3 = [v2 observeFinalizingRecordings:v6];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 240);
  *(void *)(v4 + 240) = v3;

  objc_destroyWeak(&v7);
}

void sub_10000C304(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10000C318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 49) = a6;
  *(void *)(v6 + 56) = a4;
  *(void *)(v6 + 64) = a5;
  type metadata accessor for MainActor();
  *(void *)(v6 + 72) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100021D90, v8, v7);
}

uint64_t sub_10000C444()
{
  sub_10002F48C(v0 + 16);
  sub_10002F48C(v0 + 56);
  sub_10000C4A4(v0 + 96);
  sub_10000C4A4(v0 + 112);
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10000C4A4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000C4CC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10000C700(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1000319C8;
  return v6(a1);
}

void sub_10000D088(uint64_t a1)
{
  uint64_t v3 = sub_100028654(&qword_100269250);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002869C(a1, (uint64_t)v5, &qword_100269250);
  uint64_t v6 = type metadata accessor for TranscriptViewModel();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    sub_1000285F8((uint64_t)v5, &qword_100269250);
    uint64_t v7 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
    swift_beginAccess();
    uint64_t v8 = (int *)(v6 + 44);
  }
  else
  {
    uint64_t v9 = *(int *)(v6 + 44);
    uint64_t v8 = (int *)(v6 + 44);
    int v10 = v5[v9];
    sub_10002343C((uint64_t)v5);
    uint64_t v7 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
    uint64_t v11 = v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
    swift_beginAccess();
    if (*(unsigned __int8 *)(v11 + *v8) == v10) {
      return;
    }
  }
  sub_100022EC0();
  id v12 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                              + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView), "findInteraction"));
  if (v12)
  {
    uint64_t v13 = v12;
    if ((*(unsigned char *)(v1 + v7 + *v8) & 1) == 0)
    {
      if ([v12 isFindNavigatorVisible]) {
        [v13 dismissFindNavigator];
      }
    }
  }
}

void sub_10000D328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10000D34C(unint64_t a1)
{
  if (a1 >= 5)
  {
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    uint64_t v1 = (SEL *)(&off_1002252A8)[a1];
    id v2 = [self sharedStyleProvider];
    [v2 *v1];

    return Color.init(_:)();
  }
  return result;
}

uint64_t sub_10000D5EC(unint64_t a1)
{
  if (a1 >= 5)
  {
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    uint64_t v1 = (SEL *)(&off_1002252D0)[a1];
    id v2 = [self sharedStyleProvider];
    [v2 *v1];

    return Color.init(_:)();
  }
  return result;
}

void sub_10000DBC0()
{
  if (RCDeviceUnlockedSinceBoot())
  {
    attr = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
    uint64_t v0 = dispatch_queue_create((const char *)[@"com.apple.VoiceMemos.RCPersistentContainer-warmup" UTF8String], attr);
    dispatch_async(v0, &stru_100222DF0);
  }
}

uint64_t type metadata accessor for RecordingStatePublisher()
{
  return self;
}

void sub_10000DFD4(uint64_t a1)
{
  if (+[UIView areAnimationsEnabled] && !*(unsigned char *)(a1 + 48))
  {
    +[UIView setAnimationsEnabled:0];
    int v2 = 1;
  }
  else
  {
    int v2 = 0;
  }
  uint64_t v3 = [*(id *)(a1 + 32) splitViewController];
  [v3 showColumn:1];

  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = [*(id *)(a1 + 32) splitViewController];
    uint64_t v5 = [v4 transitionCoordinator];

    if (v5)
    {
      uint64_t v6 = [*(id *)(a1 + 32) splitViewController];
      uint64_t v7 = [v6 transitionCoordinator];
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10009FF90;
      v8[3] = &unk_100222DA8;
      id v9 = *(id *)(a1 + 40);
      [v7 animateAlongsideTransition:0 completion:v8];
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
  if (v2) {
    +[UIView setAnimationsEnabled:1];
  }
}

id sub_10000E138()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
  swift_beginAccess();
  int v2 = *(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for TranscriptViewModel() + 48));
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_topFadeView);
  if (v2 != 1)
  {
    [*(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_topFadeView) setHidden:1];
    return [*(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_bottomFadeView) setHidden:1];
  }
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_7;
  }
  uint64_t v5 = Strong;
  [Strong bounds];
  if (CGRectGetHeight(v12) <= 0.0)
  {

LABEL_7:
    BOOL v10 = 0;
    goto LABEL_8;
  }
  [v5 contentOffset];
  double v7 = v6;
  [v5 adjustedContentInset];
  double v9 = v8;

  BOOL v10 = v7 <= v9;
LABEL_8:
  [v3 setHidden:v10];
  return [*(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_bottomFadeView) setHidden:sub_100013738() & 1];
}

unint64_t sub_10000E3A4()
{
  unint64_t result = qword_100266CB8;
  if (!qword_100266CB8)
  {
    sub_100027F14(&qword_100266C10);
    sub_100027F14(&qword_100266C00);
    type metadata accessor for PlainButtonStyle();
    sub_100027F5C(&qword_100266CA8, &qword_100266C00);
    sub_100027FA0(&qword_100266CB0, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2();
    sub_100027F5C(&qword_100266CC0, &qword_100266CC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266CB8);
  }
  return result;
}

id sub_10000E740@<X0>(uint64_t a1@<X8>)
{
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v3 = result;
    MobileGestalt_get_wapiCapability();

    uint64_t v4 = type metadata accessor for String.LocalizationValue();
    __chkstk_darwin(v4 - 8);
    String.LocalizationValue.init(stringLiteral:)();
    uint64_t v5 = type metadata accessor for Locale();
    __chkstk_darwin(v5 - 8);
    static Locale.current.getter();
    id result = (id)String.init(localized:table:bundle:locale:comment:)();
    *(void *)a1 = 0xD000000000000015;
    *(void *)(a1 + 8) = 0x80000001001EA630;
    *(void *)(a1 + 16) = result;
    *(void *)(a1 + 24) = v6;
    *(unsigned char *)(a1 + 32) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000E9F4(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  id v2 = [self sharedInstance];
  [v2 setIsRecording:v1];

  type metadata accessor for ControlCenter();
  static ControlCenter.shared.getter();
  dispatch thunk of ControlCenter.reloadControls(ofKind:)();

  return swift_release();
}

void sub_10000EC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *sub_10000F358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v24[1] = a5;
  uint64_t v10 = type metadata accessor for TranscriptViewConfigurationProvider();
  v28[3] = v10;
  v28[4] = &off_100224178;
  v28[0] = a1;
  uint64_t v11 = type metadata accessor for TranscriptViewDataProvider();
  uint64_t v26 = v11;
  id v27 = &off_100228000;
  v25[0] = a2;
  type metadata accessor for TranscriptViewFactory();
  CGRect v12 = (void *)swift_allocObject();
  uint64_t v13 = sub_10002F368((uint64_t)v28, v10);
  __chkstk_darwin(v13);
  uint64_t v15 = (void *)((char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_10002F368((uint64_t)v25, v26);
  __chkstk_darwin(v17);
  uint64_t v19 = (void *)((char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = *v15;
  uint64_t v22 = *v19;
  v12[5] = v10;
  v12[6] = &off_100224178;
  v12[7] = v22;
  v12[2] = v21;
  v12[10] = v11;
  v12[11] = &off_100228000;
  v12[13] = 0;
  swift_unknownObjectWeakInit();
  v12[15] = 0;
  swift_unknownObjectWeakInit();
  v12[16] = 0;
  v12[17] = 0;
  v12[13] = a4;
  swift_unknownObjectWeakAssign();
  v12[15] = a6;
  swift_unknownObjectWeakAssign();
  sub_10002F48C((uint64_t)v25);
  sub_10002F48C((uint64_t)v28);
  return v12;
}

void sub_10000F5B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100028654(&qword_100269250);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    double v8 = (void *)Strong;
    sub_10001D764(a1, (uint64_t)v6);
    uint64_t v9 = type metadata accessor for TranscriptViewModel();
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v6, 1, v9) == 1)
    {
      sub_1000285F8((uint64_t)v6, &qword_100269250);
      uint64_t v10 = 0;
      unint64_t v11 = 0xE000000000000000;
    }
    else
    {
      uint64_t v10 = *v6;
      unint64_t v11 = v6[1];
      swift_bridgeObjectRetain();
      sub_10002343C((uint64_t)v6);
    }
    uint64_t v13 = *a2;
    unint64_t v12 = a2[1];
    unint64_t v14 = sub_1000080BC(v10, v11, *a2, v12);
    char v16 = v15;
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      id v19 = [v8 textStorage];
      uint64_t v20 = (char *)[v19 length];

      uint64_t v21 = &v20[-v14];
      if (__OFSUB__(v20, v14))
      {
        __break(1u);
        goto LABEL_22;
      }
      id v22 = [v8 textStorage];
      [v22 deleteCharactersInRange:v14, v21];
    }
    if (v18)
    {
      sub_100167400(a2[2]);
      id v23 = objc_allocWithZone((Class)NSMutableAttributedString);
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      type metadata accessor for Key(0);
      sub_10011B968();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v26 = [v23 initWithString:v24 attributes:isa];

      id v27 = [v8 textStorage];
      [v27 appendAttributedString:v26];
    }
    id v28 = [v8 text];
    if (v28)
    {
      id v29 = v28;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      if (v30 == v13 && v32 == v12)
      {

        swift_bridgeObjectRelease();
        return;
      }
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_19;
      }
    }
    if (qword_100264530 == -1)
    {
LABEL_16:
      uint64_t v34 = type metadata accessor for Logger();
      sub_10002272C(v34, (uint64_t)qword_100275340);
      os_log_type_t v35 = static os_log_type_t.error.getter();
      unint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = v35;
      if (os_log_type_enabled(v36, v35))
      {
        unint64_t v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        *(_DWORD *)unint64_t v38 = 136315138;
        uint64_t v39 = sub_10002F3B8(0xD000000000000026, 0x80000001001ED670, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s - TextView text does not match the view model. This is a serious issue and should be investigated.", v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

LABEL_19:
      return;
    }
LABEL_22:
    swift_once();
    goto LABEL_16;
  }
}

id sub_10000F9F8()
{
  uint64_t v1 = sub_100028654(&qword_1002699E0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v0[OBJC_IVAR____TtC10VoiceMemos25StereoOrientationProvider_interfaceOrientation] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10VoiceMemos25StereoOrientationProvider_deviceOrientation] = 0;
  uint64_t v4 = (objc_class *)type metadata accessor for StereoOrientationProvider();
  v11.receiver = v0;
  v11.super_class = v4;
  id v5 = [super init];
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
  type metadata accessor for MainActor();
  id v7 = v5;
  uint64_t v8 = static MainActor.shared.getter();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v8;
  v9[3] = &protocol witness table for MainActor;
  v9[4] = v7;
  sub_10001E1A8((uint64_t)v3, (uint64_t)&unk_1002695D8, (uint64_t)v9);

  swift_release();
  return v7;
}

uint64_t sub_10000FB5C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100031F50(v0, qword_100275340);
  sub_10002272C(v0, (uint64_t)qword_100275340);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = (id)OSLogForCategory();

  if (!v2)
  {
    sub_1000E9FEC();
    static OS_os_log.default.getter();
  }
  return Logger.init(_:)();
}

uint64_t sub_10000FC0C()
{
  return CurrentValueSubject.receive<A>(subscriber:)();
}

char *sub_10000FC38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100269250);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  id v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v37 - v8;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return (char *)&_swiftEmptyArrayStorage;
  }
  objc_super v11 = (void *)Strong;
  sub_10001D764(a1, (uint64_t)v9);
  uint64_t v12 = type metadata accessor for TranscriptViewModel();
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
  if (v13(v9, 1, v12) == 1)
  {
    sub_1000285F8((uint64_t)v9, &qword_100269250);
    goto LABEL_7;
  }
  uint64_t v14 = *((void *)v9 + 2);
  swift_bridgeObjectRetain();
  sub_10002343C((uint64_t)v9);
  uint64_t v15 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v16 = sub_100018514(v14, v15);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (v16)
  {
    sub_10001D764(a1, (uint64_t)v7);
    if (v13(v7, 1, v12) == 1)
    {

      sub_1000285F8((uint64_t)v7, &qword_100269250);
    }
    else
    {
      id v27 = (void *)*((void *)v7 + 3);
      swift_bridgeObjectRetain();
      sub_10002343C((uint64_t)v7);
      if (sub_100168058(v27, *(void **)(a2 + 24)))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v28 = v27[2];
        if (v28)
        {
          v37[1] = v27;
          id v29 = v27 + 6;
          id v23 = (char *)&_swiftEmptyArrayStorage;
          do
          {
            uint64_t v31 = *(v29 - 2);
            uint64_t v30 = *(v29 - 1);
            uint64_t v32 = swift_bridgeObjectRetain();
            uint64_t v33 = sub_10011ACD4(v32, v15);
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              id v23 = sub_10003244C(0, *((void *)v23 + 2) + 1, 1, v23);
            }
            unint64_t v35 = *((void *)v23 + 2);
            unint64_t v34 = *((void *)v23 + 3);
            if (v35 >= v34 >> 1) {
              id v23 = sub_10003244C((char *)(v34 > 1), v35 + 1, 1, v23);
            }
            *((void *)v23 + 2) = v35 + 1;
            unint64_t v36 = &v23[24 * v35];
            *((void *)v36 + 4) = v31;
            *((void *)v36 + 5) = v30;
            *((void *)v36 + 6) = v33;
            v29 += 3;
            --v28;
          }
          while (v28);

          swift_bridgeObjectRelease();
          return v23;
        }

        swift_bridgeObjectRelease();
      }
    }
    return (char *)&_swiftEmptyArrayStorage;
  }
LABEL_7:
  id result = (char *)[v11 text];
  if (result)
  {
    uint64_t v18 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = sub_10001DF18();
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain();
    id v23 = sub_10003244C(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
    unint64_t v25 = *((void *)v23 + 2);
    unint64_t v24 = *((void *)v23 + 3);
    if (v25 >= v24 >> 1) {
      id v23 = sub_10003244C((char *)(v24 > 1), v25 + 1, 1, v23);
    }
    *((void *)v23 + 2) = v25 + 1;
    id v26 = &v23[24 * v25];
    *((void *)v26 + 4) = v19;
    *((void *)v26 + 5) = v21;
    *((void *)v26 + 6) = v22;

    return v23;
  }
  __break(1u);
  return result;
}

id sub_10000FFD8(void *a1)
{
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC10VoiceMemos24RCRecordButtonAppFactory_recordButtonRepository] = a1;
  uint64_t v3 = type metadata accessor for RCRecordButtonPresenter();
  swift_allocObject();
  id v4 = a1;
  uint64_t v5 = v1;
  uint64_t v6 = sub_10001915C(v4);
  id v7 = &v5[OBJC_IVAR____TtC10VoiceMemos24RCRecordButtonAppFactory_recordButtonPresenter];
  *((void *)v7 + 3) = v3;
  *((void *)v7 + 4) = &off_100225228;
  *(void *)id v7 = v6;
  swift_unknownObjectWeakAssign();

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for RCRecordButtonAppFactory();
  return [super init];
}

id sub_1000102B4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UIContentUnavailableConfiguration();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v40 = &v37[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  uint64_t v39 = &v37[-v7];
  uint64_t v8 = sub_100028654(&qword_100269248);
  __chkstk_darwin(v8);
  uint64_t v10 = &v37[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_100028654(&qword_100269250);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = &v37[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = sub_100028654(&qword_100269258);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  v41 = &v37[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __chkstk_darwin(v15);
  v43 = &v37[-v18];
  __chkstk_darwin(v17);
  uint64_t v20 = &v37[-v19];
  sub_10002869C(a1, (uint64_t)v13, &qword_100269250);
  uint64_t v21 = type metadata accessor for TranscriptViewModel();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v13, 1, v21) == 1)
  {
    sub_1000285F8((uint64_t)v13, &qword_100269250);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v20, 1, 1, v3);
  }
  else
  {
    sub_10002869C((uint64_t)&v13[*(int *)(v21 + 40)], (uint64_t)v20, &qword_100269258);
    sub_10002343C((uint64_t)v13);
  }
  v42 = v1;
  uint64_t v22 = &v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel];
  swift_beginAccess();
  uint64_t v23 = (uint64_t)&v22[*(int *)(v21 + 40)];
  uint64_t v24 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10002869C((uint64_t)v20, (uint64_t)v10, &qword_100269258);
  sub_10002869C(v23, v24, &qword_100269258);
  uint64_t v44 = v4;
  unint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v25((uint64_t)v10, 1, v3) == 1)
  {
    sub_1000285F8((uint64_t)v20, &qword_100269258);
    if (v25(v24, 1, v3) == 1) {
      return (id)sub_1000285F8((uint64_t)v10, &qword_100269258);
    }
  }
  else
  {
    id v27 = v43;
    sub_10002869C((uint64_t)v10, (uint64_t)v43, &qword_100269258);
    if (v25(v24, 1, v3) != 1)
    {
      uint64_t v28 = v39;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v44 + 32))(v39, v24, v3);
      sub_100142028();
      int v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v29 = *(void (**)(unsigned char *, uint64_t))(v44 + 8);
      v29(v28, v3);
      sub_1000285F8((uint64_t)v20, &qword_100269258);
      v29(v43, v3);
      id result = (id)sub_1000285F8((uint64_t)v10, &qword_100269258);
      if (v38) {
        return result;
      }
      goto LABEL_11;
    }
    sub_1000285F8((uint64_t)v20, &qword_100269258);
    (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v27, v3);
  }
  sub_1000285F8((uint64_t)v10, &qword_100269248);
LABEL_11:
  uint64_t v30 = v41;
  sub_10002869C((uint64_t)&v22[*(int *)(v21 + 40)], (uint64_t)v41, &qword_100269258);
  if (v25((uint64_t)v30, 1, v3) == 1)
  {
    sub_1000285F8((uint64_t)v30, &qword_100269258);
    uint64_t v31 = v42;
    [*(id *)&v42[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_emptyStateView] setHidden:1];
    return [v31 setUserInteractionEnabled:1];
  }
  else
  {
    uint64_t v32 = v44;
    uint64_t v33 = v40;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v44 + 32))(v40, v30, v3);
    unint64_t v34 = v42;
    unint64_t v35 = *(void **)&v42[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_emptyStateView];
    v45[3] = v3;
    v45[4] = (uint64_t)&protocol witness table for UIContentUnavailableConfiguration;
    unint64_t v36 = sub_1000DED60(v45);
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v32 + 16))(v36, v33, v3);
    UIContentUnavailableView.configuration.setter();
    [v35 setHidden:0];
    [v34 setUserInteractionEnabled:0];
    return (id)(*(uint64_t (**)(unsigned char *, uint64_t))(v32 + 8))(v33, v3);
  }
}

uint64_t sub_100010A3C(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_100266BF0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for RecordingStatePublisher();
  v17[3] = v6;
  v17[4] = &off_100225060;
  v17[0] = a1;
  type metadata accessor for ControlCenterWidgetStateCoordinator();
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = sub_10002F368((uint64_t)v17, v6);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  uint64_t v12 = *v10;
  v16[3] = v6;
  v16[4] = &off_100225060;
  v16[0] = v12;
  *(void *)(v7 + 16) = 0;
  v15[1] = *(void *)(*sub_10001510C(v16, v6) + 32);
  sub_100028654(&qword_1002660F0);
  sub_100027F5C(&qword_1002660F8, &qword_1002660F0);
  Publisher<>.removeDuplicates()();
  sub_100027F5C(&qword_100266BF8, &qword_100266BF0);
  uint64_t v13 = Publisher<>.sink(receiveValue:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(void *)(v7 + 16) = v13;
  swift_release();
  sub_10002F48C((uint64_t)v16);
  sub_10002F48C((uint64_t)v17);
  return v7;
}

uint64_t sub_100010CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_1002660E0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100028654(&qword_1002660E8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v16[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for RecordingStatePublisher();
  v16[3] = v12;
  v16[4] = &off_100225060;
  v16[0] = a1;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v15 = *(void *)(*sub_10001510C(v16, v12) + 32);
  sub_100028654(&qword_1002660F0);
  sub_100027F5C(&qword_1002660F8, &qword_1002660F0);
  Publisher.dropFirst(_:)();
  sub_100027F5C(&qword_100266100, &qword_1002660E0);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_allocObject();
  swift_weakInit();
  sub_100027F5C(&qword_100266108, &qword_1002660E8);
  uint64_t v13 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(void *)(a2 + 32) = v13;
  swift_release();
  sub_10002F48C((uint64_t)v16);
  return a2;
}

uint64_t sub_100010FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_1002660E0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100028654(&qword_1002660E8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v16[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for RecordingStatePublisher();
  v16[3] = v12;
  v16[4] = &off_100225060;
  v16[0] = a1;
  *(void *)(a2 + 16) = UIBackgroundTaskInvalid;
  *(void *)(a2 + 24) = 0;
  uint64_t v15 = *(void *)(*sub_10001510C(v16, v12) + 32);
  sub_100028654(&qword_1002660F0);
  sub_100027F5C(&qword_1002660F8, &qword_1002660F0);
  Publisher.dropFirst(_:)();
  sub_100027F5C(&qword_100266100, &qword_1002660E0);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_allocObject();
  swift_weakInit();
  sub_100027F5C(&qword_100266108, &qword_1002660E8);
  uint64_t v13 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(void *)(a2 + 24) = v13;
  swift_release();
  sub_10002F48C((uint64_t)v16);
  return a2;
}

uint64_t sub_100011360()
{
  *(unsigned char *)(v0 + 16) = 0;
  *(void *)(v0 + 32) = 0;
  swift_unknownObjectWeakInit();
  unint64_t v33 = sub_100006004();
  uint64_t v1 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(*(void *)(v1 - 8) + 64);
  __chkstk_darwin(v1 - 8);
  unint64_t v32 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (char *)&v17 - v32;
  uint64_t v28 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v3 = *(void *)(v28 - 8);
  uint64_t v29 = *(void *)(v3 + 64);
  __chkstk_darwin(v28);
  unint64_t v30 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  unsigned int v27 = enum case for DispatchQoS.QoSClass.userInitiated(_:);
  id v26 = *(void (**)(char *))(v3 + 104);
  v26((char *)&v17 - v30);
  DispatchQoS.init(qosClass:relativePriority:)();
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  uint64_t v24 = *(void *)(*(void *)(v5 - 8) + 64);
  __chkstk_darwin(v5);
  unint64_t v25 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v34 = &_swiftEmptyArrayStorage;
  uint64_t v23 = sub_100032758(&qword_100264668, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v22 = sub_100028654(&qword_100264670);
  uint64_t v21 = sub_100027F5C(&qword_100264678, &qword_100264670);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  unint64_t v19 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
  v18((char *)&v17 - v19, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v7);
  uint64_t v11 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v0 + 40) = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  ((void (*)(char *, void, uint64_t))v26)((char *)&v17 - v30, v27, v28);
  uint64_t v13 = DispatchQoS.init(qosClass:relativePriority:)();
  __chkstk_darwin(v13);
  unint64_t v34 = &_swiftEmptyArrayStorage;
  uint64_t v14 = dispatch thunk of SetAlgebra.init<A>(_:)();
  __chkstk_darwin(v14);
  v18((char *)&v17 - v19, v10, v7);
  *(void *)(v0 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  *(_WORD *)(v0 + 80) = 0;
  *(_DWORD *)(v0 + 84) = 1065353216;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v15 = (void *)sub_1000D0E2C((unint64_t)&_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v15 = &_swiftEmptySetSingleton;
  }
  *(void *)(v0 + 88) = v15;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = &off_100223720;
  *(unsigned char *)(v0 + 112) = 0;
  return v0;
}

uint64_t sub_100011A20()
{
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(unsigned char *)(v0 + 48) = 0x80;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0xE000000000000000;
  *(void *)(v0 + 80) = &_swiftEmptyArrayStorage;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(void *)(v0 + 120) = 0;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v1 = (void *)sub_1000D0E2C((unint64_t)&_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v1 = &_swiftEmptySetSingleton;
  }
  *(void *)(v0 + 128) = v1;
  if (qword_100264628 != -1) {
    swift_once();
  }
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_100028654(&qword_100267060);
  sub_1000348F0();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100011BC4()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100011BF4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  id v2 = [self currentDevice];
  id v3 = [v2 orientation];

  *(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos25StereoOrientationProvider_deviceOrientation) = v3;
  id v4 = [self defaultCenter];
  [v4 addObserver:v1 selector:"deviceOrientationDidUpdate:" name:UIDeviceOrientationDidChangeNotification object:0];

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

void sub_100012348()
{
  uint64_t v1 = *(char **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
  [v1 setEditable:0];
  [v1 setScrollsToTop:0];
  [v1 setFindInteractionEnabled:1];
  [v1 setDelegate:v0];
  *(void *)&v1[OBJC_IVAR____TtCC10VoiceMemos14TranscriptView18TranscriptTextView_findInteractionObserver + 8] = &off_100227D38;
  swift_unknownObjectWeakAssign();
  [v1 setAdjustsFontForContentSizeCategory:1];
  sub_100013B88();
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_emptyStateView);
  id v3 = [self systemBackgroundColor];
  [v2 setBackgroundColor:v3];

  [v2 setHidden:1];

  sub_1000227B0();
}

uint64_t sub_10001246C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v2 = *((unsigned __int8 *)a1 + 8);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    BOOL v5 = (v2 & 0xC0) == 0x80 && v1 == 2;
    if (v5 && v2 == 128 && (uint64_t v6 = *(void *)(result + 120)) != 0)
    {
      uint64_t v7 = *(void *)(result + 112);
      swift_bridgeObjectRetain();
      sub_10014A2E4(v7, v6, 0);
      swift_bridgeObjectRelease();
      *(void *)(v4 + 112) = 0;
      *(void *)(v4 + 120) = 0;
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

void sub_100012940(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100028654(&qword_100269250);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v55 - v8;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  id v61 = Strong;
  id v11 = [Strong textLayoutManager];
  if (!v11)
  {
    id v14 = v61;

    return;
  }
  id v56 = v11;
  sub_10001D764(a1, (uint64_t)v9);
  uint64_t v12 = type metadata accessor for TranscriptViewModel();
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
  if (v13(v9, 1, v12) == 1)
  {
    sub_1000285F8((uint64_t)v9, &qword_100269250);
LABEL_11:
    id v20 = [v61 textStorage];
    id v21 = [v20 length];

    uint64_t v22 = 0;
LABEL_33:
    id v52 = sub_100016D2C(v22, (uint64_t)v21);
    if (v52)
    {
      v53 = v52;
      id v54 = v56;
      [v56 ensureLayoutForRange:v52];
    }
    else
    {
    }
    return;
  }
  uint64_t v15 = *((void *)v9 + 2);
  swift_bridgeObjectRetain();
  sub_10002343C((uint64_t)v9);
  uint64_t v16 = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v17 = sub_100018514(v15, v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0) {
    goto LABEL_11;
  }
  sub_10001D764(a1, (uint64_t)v7);
  if (v13((char *)v7, 1, v12) == 1)
  {
    sub_1000285F8((uint64_t)v7, &qword_100269250);
    uint64_t v18 = 0;
    unint64_t v19 = 0xE000000000000000;
  }
  else
  {
    uint64_t v18 = *v7;
    unint64_t v19 = v7[1];
    swift_bridgeObjectRetain();
    sub_10002343C((uint64_t)v7);
  }
  uint64_t v23 = *a2;
  uint64_t v24 = a2[1];
  uint64_t v25 = String.count.getter();
  uint64_t v26 = String.count.getter();
  if (v26 >= v25) {
    uint64_t v27 = v25;
  }
  else {
    uint64_t v27 = v26;
  }
  if (v27 < 1)
  {
LABEL_29:
    uint64_t v67 = v23;
    uint64_t v68 = v24;
    sub_10002DF88();
    uint64_t v48 = String.Index.utf16Offset<A>(in:)();
    swift_bridgeObjectRelease();
    id v49 = [v61 textStorage];
    id v50 = [v49 length];

    uint64_t v51 = (uint64_t)v50 - v48;
    if (__OFSUB__(v50, v48)) {
      goto LABEL_40;
    }
    id v21 = (id)(v51 & ~(v51 >> 63));
    if (v51 <= 0) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = v48;
    }
    goto LABEL_33;
  }
  unint64_t v28 = 15;
  unint64_t v29 = 15;
  uint64_t v59 = v18;
  unint64_t v60 = v19;
  uint64_t v57 = v24;
  uint64_t v58 = v23;
  while (1)
  {
    unint64_t v31 = String.index(_:offsetBy:)();
    if (v31 >> 14 < v29 >> 14) {
      break;
    }
    unint64_t v32 = v31;
    swift_bridgeObjectRetain();
    unint64_t v63 = v32;
    String.index(after:)();
    unint64_t v64 = v29;
    unint64_t v33 = String.subscript.getter();
    unint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    unint64_t v65 = (unint64_t)v27 >> 1;
    if ((unint64_t)String.index(_:offsetBy:)() >> 14 < v28 >> 14) {
      goto LABEL_39;
    }
    uint64_t v62 = v27;
    swift_bridgeObjectRetain();
    String.index(after:)();
    uint64_t v66 = v28;
    unint64_t v40 = String.subscript.getter();
    unint64_t v42 = v41;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    swift_bridgeObjectRelease();
    if (v37 == v44 && v39 == v46 && v33 >> 16 == v40 >> 16 && v35 >> 16 == v42 >> 16)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v24 = v57;
      uint64_t v23 = v58;
      uint64_t v30 = v65;
    }
    else
    {
      char v47 = _stringCompareInternal(_:_:_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v24 = v57;
      uint64_t v23 = v58;
      unint64_t v29 = v64;
      uint64_t v30 = v65;
      if ((v47 & 1) == 0) {
        goto LABEL_20;
      }
    }
    unint64_t v29 = String.index(after:)();
    uint64_t v66 = String.index(after:)();
    uint64_t v30 = v62 + ~v30;
LABEL_20:
    uint64_t v27 = v30;
    unint64_t v28 = v66;
    if (v30 <= 0) {
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

uint64_t destroy for RCRecordButton(uint64_t a1)
{
  swift_release();
  sub_10002F48C(a1 + 8);

  return swift_release();
}

uint64_t sub_100013030(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_100269290);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100013738()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (!Strong) {
      goto LABEL_8;
    }
    id v3 = Strong;
    id v4 = [Strong endOfDocument];
    [v3 caretRectForPosition:v4];
    CGFloat v6 = v5;
    CGFloat v8 = v7;
    CGFloat v10 = v9;
    CGFloat v12 = v11;

    v21.origin.x = v6;
    v21.origin.y = v8;
    v21.size.width = v10;
    v21.size.height = v12;
    double MaxY = CGRectGetMaxY(v21);
    [v3 adjustedContentInset];
    double v15 = -v14;
    [v3 bounds];
    double v16 = MaxY - CGRectGetHeight(v22);
    [v3 adjustedContentInset];
    double v18 = v17;

    if (v16 + v18 >= v15) {
      double v15 = v16 + v18;
    }
    [v1 bounds];
    if (CGRectGetHeight(v23) > 0.0)
    {
      [v1 contentOffset];
      double v20 = v19;

      return v15 < v20 || vabdd_f64(v20, v15) < 0.01;
    }
    else
    {
LABEL_8:

      return 0;
    }
  }
  return result;
}

void sub_10001393C()
{
  id v1 = [v0 searchController];
  id v2 = [v1 searchBar];

  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v3 = objc_allocWithZone((Class)type metadata accessor for UIAppIntentInteraction());
  sub_100031AD4();
  swift_retain();
  id v4 = (id)UIAppIntentInteraction.init<A>(intent:perform:)();
  [v2 addInteraction:v4];

  swift_release();
}

void sub_100013A48()
{
  id v1 = [objc_allocWithZone((Class)UITapGestureRecognizer) initWithTarget:v0 action:"didReceiveTap:"];
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewTapGestureRecognizer);
  *(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewTapGestureRecognizer) = v1;
  id v3 = v1;

  [v3 setDelegate:v0];
  id v4 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
  [v4 addGestureRecognizer:v3];
  id v5 = [objc_allocWithZone((Class)UIPanGestureRecognizer) initWithTarget:v0 action:"didReceivePan:"];
  CGFloat v6 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewPanGestureRecognizer);
  *(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewPanGestureRecognizer) = v5;
  id v7 = v5;

  [v7 setDelegate:v0];
  [v7 setAllowedScrollTypesMask:3];
  [v4 addGestureRecognizer:v7];
}

uint64_t sub_100013B88()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100028654((uint64_t *)&unk_100269278);
  __chkstk_darwin(v6 - 8);
  CGFloat v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  [*(id *)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_searchButton) addTarget:v1 action:"searchButtonTapped" forControlEvents:64];
  static UIButton.Configuration.filled()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [self systemImageNamed:v9];

  UIButton.Configuration.image.setter();
  if (qword_100264638 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  UIButton.Configuration.title.setter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v2);
  UIButton.Configuration.cornerStyle.setter();
  uint64_t v11 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 0, 1, v11);
  return UIButton.configuration.setter();
}

char *sub_100013DDC(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC10VoiceMemos28RCUserActivityStatePublisher_userActivityChangedSubject;
  sub_100028654(&qword_100266920);
  swift_allocObject();
  uint64_t v4 = v1;
  *(void *)&v1[v3] = PassthroughSubject.init()();
  *(void *)&v4[OBJC_IVAR____TtC10VoiceMemos28RCUserActivityStatePublisher_currentUserActivityKVOObservation] = 0;

  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for RCUserActivityStatePublisher();
  id v5 = [super init];
  swift_getKeyPath();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v6 = (char *)v5;
  uint64_t v7 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();

  swift_release();
  swift_release();

  CGFloat v8 = *(void **)&v6[OBJC_IVAR____TtC10VoiceMemos28RCUserActivityStatePublisher_currentUserActivityKVOObservation];
  *(void *)&v6[OBJC_IVAR____TtC10VoiceMemos28RCUserActivityStatePublisher_currentUserActivityKVOObservation] = v7;

  return v6;
}

void *sub_100013F18(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_100028654(&qword_1002660E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  CGFloat v8 = (char *)&v18[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100028654(&qword_1002660E8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  CGFloat v12 = (char *)&v18[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for RecordingStatePublisher();
  void v18[3] = v13;
  v18[4] = &off_100225060;
  v18[0] = a1;
  type metadata accessor for ActivityManager();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  a3[6] = 0;
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = v14;
  swift_unknownObjectWeakInit();
  a3[6] = &off_100225170;
  a3[7] = 0;
  swift_unknownObjectWeakAssign();
  uint64_t v17 = *(void *)(*sub_10001510C(v18, v13) + 32);
  sub_100028654(&qword_1002660F0);
  sub_100027F5C(&qword_1002660F8, &qword_1002660F0);
  Publisher.dropFirst(_:)();
  sub_100027F5C(&qword_100266100, &qword_1002660E0);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_allocObject();
  swift_weakInit();
  sub_100027F5C(&qword_100266108, &qword_1002660E8);
  uint64_t v15 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  a3[7] = v15;
  swift_release();
  sub_10002F48C((uint64_t)v18);
  return a3;
}

void sub_100014240(unsigned __int8 *a1)
{
  __int16 v1 = *a1;
  __int16 v2 = a1[1];
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = a1[16];
  int v5 = a1[17];
  int v6 = a1[18];
  int v7 = a1[19];
  int v8 = a1[20];
  double v9 = *((double *)a1 + 3);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    __int16 v12 = v1 | (v2 << 8);
    uint64_t v13 = 256;
    if (!v5) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13 | v4;
    uint64_t v15 = 0x10000;
    if (!v6) {
      uint64_t v15 = 0;
    }
    uint64_t v16 = 0x1000000;
    if (!v7) {
      uint64_t v16 = 0;
    }
    uint64_t v17 = v14 | v15 | v16;
    double v18 = &_mh_execute_header;
    if (!v8) {
      double v18 = 0;
    }
    unint64_t v19 = v17 | (unint64_t)v18;
    sub_100014B30(v12, v3, v17 | v18);
    sub_1000145EC(v9);
    CGRect v21 = sub_100014354(v12, v20, v19);
    CGRect v23 = sub_100014808((uint64_t)v21, v22, v19);
    sub_100014444((uint64_t)v23, v24, v19);
  }
}

void *sub_100014354(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_10001510C((void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider), *(void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider + 24));
  int v7 = *(unsigned __int8 *)(*result + 32);
  int v8 = *(unsigned __int8 *)(*result + 49);
  int v9 = *(unsigned __int8 *)(*result + 50);
  unsigned int v10 = *(unsigned __int8 *)(*result + 51);
  if ((a3 & 0x10100) != 0)
  {
    if (v8 & 1) != 0 || (v9)
    {
      if (v7 == a1) {
        return result;
      }
    }
    else if (v7 == a1 && ((v10 ^ 1) & 1) == 0)
    {
      return result;
    }
    goto LABEL_19;
  }
  if (((v8 | v9) & 1) == 0)
  {
    if (v7 == a1 && (((a3 >> 24) & 1 ^ v10) & 1) == 0) {
      return result;
    }
    goto LABEL_19;
  }
  if (v7 != a1 || (a3 & 0x1000000) == 0)
  {
LABEL_19:
    __int16 v12 = *(void **)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimer);
    return [v12 invalidate];
  }
  return result;
}

void *sub_100014444(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = HIDWORD(a3) & 1;
  int v5 = (void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider);
  uint64_t result = sub_10001510C((void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider), *(void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider + 24));
  uint64_t v7 = *result;
  if (v4 != *(unsigned __int8 *)(*result + 52))
  {
    uint64_t v8 = *(void *)(v7 + 40);
    char v9 = *(unsigned char *)(v7 + 48);
    int v10 = *(unsigned __int8 *)(*sub_10001510C(v5, v5[3]) + 52);
    uint64_t v11 = sub_10001510C((void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager + 24));
    uint64_t v12 = *(void *)(*v11 + 40);
    uint64_t v13 = *(void *)(*v11 + 48);
    unsigned __int8 v14 = *(unsigned char *)(*v11 + 56);
    uint64_t v15 = *(void *)(*v11 + 64);
    char v16 = *(unsigned char *)(*v11 + 72);
    char v17 = *(unsigned char *)(*v11 + 73);
    uint64_t v18 = *(void *)(*v11 + 80);
    uint64_t v19 = *(void *)(*v11 + 88);
    uint64_t v21 = *(void *)(*v11 + 96);
    uint64_t v20 = *(void *)(*v11 + 104);
    unsigned __int8 v22 = *(unsigned char *)(*v11 + 112);
    char v23 = *(unsigned char *)(*v11 + 114);
    uint64_t v24 = *(void *)(*v11 + 120);
    char v25 = *(unsigned char *)(*v11 + 128);
    if (v10 == 1)
    {
      v29[0] = *(void *)(*v11 + 32);
      char v26 = 1;
    }
    else
    {
      char v26 = 0;
      v29[0] = *(void *)(*v11 + 32);
    }
    v29[1] = v12;
    v29[2] = v13;
    unsigned __int8 v30 = v14;
    uint64_t v31 = v15;
    char v32 = v16;
    char v33 = v17;
    uint64_t v34 = v18;
    uint64_t v35 = v19;
    uint64_t v36 = v21;
    uint64_t v37 = v20;
    unsigned __int8 v38 = v22;
    char v39 = v26;
    char v40 = v23;
    uint64_t v41 = v24;
    char v42 = v25;
    uint64_t v27 = v20;
    unsigned __int8 v28 = v22;
    sub_100015758(v8, v9);
    swift_bridgeObjectRetain();
    sub_1000181E4(v12, v13, v14);
    sub_1000181FC(v18, v19, v21, v27, v28);
    sub_100017F1C((uint64_t)v29);
    return (void *)sub_10001576C(v8, v9);
  }
  return result;
}

void *sub_1000145EC(double a1)
{
  uint64_t result = sub_10001510C((void *)(v1 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider), *(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider + 24));
  uint64_t v4 = *result;
  double v5 = *(double *)(*result + 56);
  if (v5 != a1)
  {
    uint64_t v6 = *(void *)(v4 + 40);
    char v7 = *(unsigned char *)(v4 + 48);
    uint64_t v8 = self;
    sub_100015758(v6, v7);
    id v9 = [v8 sharedStyleProvider];
    if ([v9 transcriptViewShouldUseWidthMultiplier])
    {
      [v9 centerContentTranscriptViewMaxWidth];
      double v11 = v10;
      [v9 centerContentTranscriptViewWidthMultiplier];
      double v13 = v12;

      double v14 = v5 * v13;
      if (v11 < v5 * v13) {
        double v14 = v11;
      }
      double v15 = (v5 - v14) * 0.5;
    }
    else
    {
      [v9 transcriptViewHorizontalMargins];
      double v15 = v16;
    }
    char v17 = sub_10001510C((void *)(v1 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager + 24));
    uint64_t v18 = *v17;
    uint64_t v19 = *(void *)(*v17 + 40);
    uint64_t v20 = *(void *)(*v17 + 48);
    char v21 = *(unsigned char *)(*v17 + 73);
    uint64_t v22 = *(void *)(*v17 + 80);
    uint64_t v23 = *(void *)(*v17 + 88);
    uint64_t v24 = *(void *)(*v17 + 96);
    uint64_t v25 = *(void *)(*v17 + 104);
    char v26 = *(unsigned char *)(*v17 + 113);
    char v27 = *(unsigned char *)(*v17 + 114);
    uint64_t v28 = *(void *)(*v17 + 120);
    char v29 = *(unsigned char *)(*v17 + 128);
    v30[0] = *(void *)(*v17 + 32);
    v30[1] = v19;
    v30[2] = v20;
    unsigned __int8 v31 = *(unsigned char *)(v18 + 56);
    double v32 = v15;
    char v33 = 0;
    char v34 = v21;
    uint64_t v35 = v22;
    uint64_t v36 = v23;
    uint64_t v37 = v24;
    uint64_t v38 = v25;
    unsigned __int8 v39 = *(unsigned char *)(v18 + 112);
    char v40 = v26;
    char v41 = v27;
    uint64_t v42 = v28;
    char v43 = v29;
    swift_bridgeObjectRetain();
    sub_1000181E4(v19, v20, v31);
    sub_1000181FC(v22, v23, v24, v25, v39);
    sub_100017F1C((uint64_t)v30);
    return (void *)sub_10001576C(v6, v7);
  }
  return result;
}

void *sub_100014808(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_10001510C((void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider), *(void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider + 24));
  int v6 = *(unsigned __int8 *)(*result + 32);
  uint64_t v7 = *(void *)(*result + 40);
  char v8 = *(unsigned char *)(*result + 48);
  int v9 = *(unsigned __int8 *)(*result + 51);
  int v10 = *(unsigned __int8 *)(*result + 49) | *(unsigned __int8 *)(*result + 50);
  if ((a3 & 0x10100) != 0)
  {
    if ((v10 | v9)) {
      return result;
    }
    goto LABEL_3;
  }
  if (v10)
  {
    if ((a3 & 0x1000000) != 0) {
      return result;
    }
    goto LABEL_11;
  }
  if (((a3 >> 24) & 1) == v9) {
    return result;
  }
  if (v9)
  {
LABEL_11:
    char v17 = sub_10001510C((void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager + 24));
    uint64_t v18 = *v17;
    char v19 = v8;
    char v37 = v8;
    uint64_t v20 = *(void ***)(*v17 + 32);
    uint64_t v21 = *(void *)(*v17 + 40);
    uint64_t v22 = v7;
    uint64_t v36 = v7;
    uint64_t v23 = *(void *)(v18 + 48);
    uint64_t v24 = *(uint64_t (**)())(v18 + 64);
    char v25 = *(unsigned char *)(v18 + 72);
    uint64_t v26 = *(void *)(v18 + 80);
    uint64_t v27 = *(void *)(v18 + 88);
    uint64_t v28 = *(void *)(v18 + 96);
    uint64_t v29 = *(void *)(v18 + 104);
    char v30 = *(unsigned char *)(v18 + 113);
    char v31 = *(unsigned char *)(v18 + 114);
    uint64_t v32 = *(void *)(v18 + 120);
    char v33 = *(unsigned char *)(v18 + 128);
    aBlock = v20;
    uint64_t v39 = v21;
    char v40 = (void (*)(uint64_t, void *))v23;
    LOBYTE(v41) = *(unsigned char *)(v18 + 56);
    uint64_t v42 = v24;
    LOBYTE(v43) = v25;
    BYTE1(v43) = 2;
    uint64_t v44 = v26;
    uint64_t v45 = v27;
    uint64_t v46 = v28;
    uint64_t v47 = v29;
    unsigned __int8 v48 = *(unsigned char *)(v18 + 112);
    char v49 = v30;
    char v50 = v31;
    uint64_t v51 = v32;
    char v52 = v33;
    sub_100015758(v22, v19);
    swift_bridgeObjectRetain();
    sub_1000181E4(v21, v23, v41);
    sub_1000181FC(v26, v27, v28, v29, v48);
    sub_100017F1C((uint64_t)&aBlock);
    uint64_t v34 = v36;
    char v35 = v37;
LABEL_12:
    return (void *)sub_10001576C(v34, v35);
  }
LABEL_3:
  if ((a3 & 0x100) != 0 && v6 != 2)
  {
    double v11 = self;
    double v12 = *(double *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimeoutDuration);
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v42 = sub_1000F8554;
    uint64_t v43 = v13;
    aBlock = _NSConcreteStackBlock;
    uint64_t v39 = 1107296256;
    char v40 = sub_1000F83D4;
    char v41 = &unk_100225718;
    double v14 = _Block_copy(&aBlock);
    sub_100015758(v7, v8);
    swift_release();
    id v15 = [v11 scheduledTimerWithTimeInterval:0 repeats:v14 block:v12];
    _Block_release(v14);
    double v16 = *(void **)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimer);
    *(void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimer) = v15;

    return (void *)sub_10001576C(v7, v8);
  }
  if (v6 != 2)
  {
    sub_10001510C((void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager + 24));
    sub_100015758(v7, v8);
    sub_1000D25B8();
    uint64_t v34 = v7;
    char v35 = v8;
    goto LABEL_12;
  }
  return result;
}

void *sub_100014B30(__int16 a1, uint64_t a2, unsigned __int8 a3)
{
  unsigned __int8 v6 = a1;
  int v7 = HIBYTE(a1);
  uint64_t result = sub_10001510C((void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider), *(void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider + 24));
  int v9 = *(unsigned __int8 *)(*result + 32);
  int v10 = *(unsigned __int8 *)(*result + 33);
  uint64_t v11 = *(void *)(*result + 40);
  unint64_t v12 = *(unsigned __int8 *)(*result + 48);
  if (v9 != v6 || v7 != v10) {
    goto LABEL_5;
  }
  if (!(a3 >> 6))
  {
    if (v12 < 0x40) {
      return result;
    }
LABEL_5:
    if ((v12 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (a3 >> 6 == 1)
  {
    if ((v12 & 0xC0) == 0x40) {
      return result;
    }
    goto LABEL_5;
  }
  if (!(a2 | a3 ^ 0x80))
  {
    if ((v12 & 0xC0) != 0x80) {
      goto LABEL_5;
    }
    if (v11) {
      goto LABEL_6;
    }
LABEL_40:
    if (v12 == 128) {
      return result;
    }
    goto LABEL_6;
  }
  int v28 = v12 & 0xC0;
  if (a3 == 128 && a2 == 1)
  {
    if (v28 != 128) {
      goto LABEL_5;
    }
    if (v11 != 1) {
      goto LABEL_6;
    }
    goto LABEL_40;
  }
  if (v28 != 128) {
    goto LABEL_5;
  }
  if (v11 == 2) {
    goto LABEL_40;
  }
LABEL_6:
  if (__PAIR128__(v12, v11) >= __PAIR128__(128, 2))
  {
    switch(*(unsigned char *)(*result + 33))
    {
      case 1:
        uint64_t v32 = *sub_10001510C((void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(void *)(v3+ OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager+ 24));
        *(unsigned char *)(v32 + 129) = 1;
        uint64_t v16 = *(void *)(v32 + 64);
        char v17 = *(unsigned char *)(v32 + 72);
        sub_100015758(v11, v12);
        unsigned __int8 v18 = 1;
        goto LABEL_12;
      case 2:
      case 5:
        uint64_t v14 = *sub_10001510C((void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(void *)(v3+ OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager+ 24));
        if (v9) {
          goto LABEL_17;
        }
        *(unsigned char *)(v14 + 129) = 4;
        uint64_t v43 = *(void *)(v14 + 64);
        char v42 = *(unsigned char *)(v14 + 72);
        char v33 = self;
        sub_100015758(v11, v12);
        id v34 = [v33 sharedStyleProvider];
        id v35 = [v34 transcriptViewRecordingDefaultTextColor];

        unint64_t v36 = sub_1000257E4(v35);
        id v37 = [v33 sharedStyleProvider];
        id v38 = [v37 transcriptViewRecordingHighlightedLastWordTextColor];
        id v39 = [v37 transcriptViewRecordingHighlightedSecondToLastWordTextColor];
        unint64_t v40 = sub_1000257E4(v38);
        unint64_t v41 = sub_1000257E4(v39);

        unint64_t v54 = v36;
        *(void *)&long long v55 = v41;
        *((void *)&v55 + 1) = v40;
        char v56 = 1;
        uint64_t v57 = v43;
        char v58 = v42;
        char v59 = 1;
        long long v60 = 0u;
        long long v61 = 0u;
        __int16 v62 = 255;
        char v63 = 1;
        uint64_t v64 = 0x4008000000000000;
        char v65 = 0;
        break;
      case 3:
      case 4:
        uint64_t v30 = *sub_10001510C((void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(void *)(v3+ OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager+ 24));
        *(unsigned char *)(v30 + 129) = 2;
        uint64_t v16 = *(void *)(v30 + 64);
        char v17 = *(unsigned char *)(v30 + 72);
        sub_100015758(v11, v12);
        unsigned __int8 v18 = 2;
        goto LABEL_12;
      default:
        uint64_t v31 = *sub_10001510C((void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(void *)(v3+ OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager+ 24));
        *(unsigned char *)(v31 + 129) = 0;
        uint64_t v16 = *(void *)(v31 + 64);
        char v17 = *(unsigned char *)(v31 + 72);
        sub_100015758(v11, v12);
        unsigned __int8 v18 = 0;
        goto LABEL_12;
    }
    goto LABEL_18;
  }
LABEL_7:
  uint64_t v14 = *sub_10001510C((void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(void *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager + 24));
  if ((v9 - 1) <= 1 && v10 == 5)
  {
LABEL_17:
    *(unsigned char *)(v14 + 129) = 5;
    uint64_t v19 = *(void *)(v14 + 64);
    char v20 = *(unsigned char *)(v14 + 72);
    uint64_t v21 = self;
    sub_100015758(v11, v12);
    id v22 = [v21 sharedStyleProvider];
    id v23 = [v22 transcriptViewPlaybackDefaultTextColor];

    unint64_t v24 = sub_1000257E4(v23);
    id v25 = [v21 sharedStyleProvider];
    id v26 = [v25 transcriptViewPlaybackHighlightedTextColor];

    unint64_t v27 = sub_1000257E4(v26);
    unint64_t v54 = v24;
    long long v55 = v27;
    char v56 = 0;
    uint64_t v57 = v19;
    char v58 = v20;
    char v59 = 0;
    long long v60 = 0u;
    long long v61 = 0u;
    __int16 v62 = 255;
    char v63 = 1;
    uint64_t v64 = 0;
    char v65 = 1;
  }
  else
  {
    *(unsigned char *)(v14 + 129) = 3;
    uint64_t v16 = *(void *)(v14 + 64);
    char v17 = *(unsigned char *)(v14 + 72);
    sub_100015758(v11, v12);
    unsigned __int8 v18 = 3;
LABEL_12:
    sub_100009780(v18, (uint64_t)&v44);
    unint64_t v54 = v44;
    long long v55 = v45;
    char v56 = v46;
    uint64_t v57 = v16;
    char v58 = v17;
    char v59 = v47;
    long long v60 = v48;
    long long v61 = v49;
    __int16 v62 = v50;
    char v63 = v51;
    uint64_t v64 = v52;
    char v65 = v53;
  }
LABEL_18:
  sub_100017F1C((uint64_t)&v54);

  return (void *)sub_10001576C(v11, v12);
}

void *sub_10001510C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TranscriptionModelAssetService.DownloadState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100015758(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_100015604(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = *(void *)(result + 40);
    uint64_t v5 = *(unsigned __int8 *)(result + 48);
    int v6 = *(unsigned __int8 *)(result + 49);
    int v7 = *(unsigned __int8 *)(result + 50);
    int v8 = *(unsigned __int8 *)(result + 51);
    int v9 = *(unsigned __int8 *)(result + 52);
    double v10 = *(double *)(result + 56);
    *(void *)(result + 40) = v1;
    *(unsigned char *)(result + 48) = v2;
    *(unsigned char *)(result + 49) = v6;
    *(unsigned char *)(result + 50) = v7;
    *(unsigned char *)(result + 51) = v8;
    *(unsigned char *)(result + 52) = v9;
    uint64_t v11 = *(unsigned __int16 *)(result + 32);
    sub_100015758(v1, v2);
    sub_100015758(v1, v2);
    sub_100015758(v4, v5);
    sub_10001576C(v4, v5);
    uint64_t v12 = 256;
    if (!v6) {
      uint64_t v12 = 0;
    }
    uint64_t v13 = v12 | v5;
    uint64_t v14 = 0x10000;
    if (!v7) {
      uint64_t v14 = 0;
    }
    uint64_t v15 = 0x1000000;
    if (!v8) {
      uint64_t v15 = 0;
    }
    uint64_t v16 = v13 | v14 | v15;
    char v17 = &_mh_execute_header;
    if (!v9) {
      char v17 = 0;
    }
    sub_100015780(v11, v4, v16 | (unint64_t)v17, v10);
    sub_10001576C(v1, v2);
    sub_10001576C(v4, v5);
    return swift_release();
  }
  return result;
}

uint64_t sub_100015758(uint64_t a1, char a2)
{
  if ((a2 & 0xC0) == 0x40) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_10001576C(uint64_t a1, char a2)
{
  if ((a2 & 0xC0) == 0x40) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100015780(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  char v5 = a3;
  uint64_t v7 = a3 & 0x100;
  uint64_t v8 = a3 & 0x10000;
  uint64_t v9 = a3 & 0x1000000;
  unint64_t v10 = a3 & (unint64_t)&_mh_execute_header;
  uint64_t v11 = *(void *)(v4 + 40);
  unsigned int v12 = *(unsigned __int8 *)(v4 + 48);
  int v13 = *(unsigned __int8 *)(v4 + 49);
  int v14 = *(unsigned __int8 *)(v4 + 50);
  int v15 = *(unsigned __int8 *)(v4 + 51);
  int v16 = *(unsigned __int8 *)(v4 + 52);
  if (*(unsigned __int8 *)(v4 + 32) != result || BYTE1(result) != *(unsigned __int8 *)(v4 + 33)) {
    goto LABEL_5;
  }
  if (a3 >> 6)
  {
    if (a3 >> 6 == 1)
    {
      if ((v12 & 0xC0) == 0x40) {
        goto LABEL_12;
      }
    }
    else
    {
      if (a2 | a3 ^ 0x80)
      {
        int v18 = v12 & 0xC0;
        if (a3 == 128 && a2 == 1)
        {
          if (v18 != 128) {
            goto LABEL_5;
          }
          int v20 = v10 != 0;
          int v21 = v9 != 0;
          int v22 = v8 != 0;
          int v23 = v7 != 0;
          if (v11 != 1) {
            goto LABEL_5;
          }
        }
        else
        {
          if (v18 != 128) {
            goto LABEL_5;
          }
          int v20 = v10 != 0;
          int v21 = v9 != 0;
          int v22 = v8 != 0;
          int v23 = v7 != 0;
          if (v11 != 2) {
            goto LABEL_5;
          }
        }
      }
      else
      {
        if ((v12 & 0xC0) != 0x80) {
          goto LABEL_5;
        }
        int v20 = v10 != 0;
        int v21 = v9 != 0;
        int v22 = v8 != 0;
        int v23 = v7 != 0;
        if (v11) {
          goto LABEL_5;
        }
      }
      if (v12 == 128 && v23 == v13 && v22 == v14 && v21 == v15 && v20 == v16) {
        goto LABEL_36;
      }
    }
LABEL_5:
    sub_100015758(a2, v5);
    sub_100015758(v11, v12);
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    sub_10001576C(a2, v5);
    return sub_10001576C(v11, v12);
  }
  if (v12 >= 0x40) {
    goto LABEL_5;
  }
LABEL_12:
  if ((((v7 != 0) ^ v13) & 1) != 0
    || (((v8 != 0) ^ v14) & 1) != 0
    || (((v9 != 0) ^ v15) & 1) != 0
    || (((v10 != 0) ^ v16) & 1) != 0)
  {
    goto LABEL_5;
  }
LABEL_36:
  if (*(double *)(v4 + 56) != a4) {
    goto LABEL_5;
  }
  return result;
}

id sub_100015A00(id *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  char v5 = +[RCRecorderStyleProvider sharedStyleProvider];
  id v6 = [v5 recordingsCollectionViewLayoutListAppearance];
  id v7 = [objc_alloc((Class)UICollectionLayoutListConfiguration) initWithAppearance:v6];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10001EC64;
  v14[3] = &unk_1002222F8;
  v14[4] = v6;
  [v7 setItemSeparatorHandler:v14];
  a1 += 4;
  id WeakRetained = objc_loadWeakRetained(a1);
  uint64_t v9 = [WeakRetained _leadingSwipeActionsConfigurationProvider];
  [v7 setLeadingSwipeActionsConfigurationProvider:v9];

  id v10 = objc_loadWeakRetained(a1);
  uint64_t v11 = [v10 _trailingSwipeActionsConfigurationProvider];
  [v7 setTrailingSwipeActionsConfigurationProvider:v11];

  unsigned int v12 = +[NSCollectionLayoutSection sectionWithListConfiguration:v7 layoutEnvironment:v4];

  return v12;
}

uint64_t sub_100015B60()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100015D6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + OBJC_IVAR____TtC10VoiceMemos24RCAppStoreRatingPrompter____lazy_storage___gatingController;
  swift_beginAccess();
  sub_100034A1C(v4, (uint64_t)&v15);
  if (!v16)
  {
    sub_1000285F8((uint64_t)&v15, &qword_100266990);
    sub_100028654(&qword_100266998);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1001F0FB0;
    id v6 = (objc_class *)type metadata accessor for StoreReviewGatingController();
    static StoreReviewGatingController.defaultBagProfileName.getter();
    static StoreReviewGatingController.defaultBagProfileVersion.getter();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v9 = [self bagForProfile:v7 profileVersion:v8];

    id v10 = objc_allocWithZone(v6);
    uint64_t v11 = StoreReviewGatingController.init(bag:)();
    *(void *)(v5 + 56) = v6;
    *(void *)(v5 + 64) = &off_1002257C8;
    *(void *)(v5 + 32) = v11;
    uint64_t v12 = OBJC_IVAR____TtC10VoiceMemos24RCAppStoreRatingPrompter_recordingCountProvider;
    *(void *)(v5 + 96) = &type metadata for AppStoreRatingModel;
    *(void *)(v5 + 104) = &off_100225938;
    *(_OWORD *)(v5 + 72) = *(_OWORD *)(v2 + v12);
    int v16 = &type metadata for RCStoreReviewGaitingController;
    char v17 = &off_100225918;
    *(void *)&long long v15 = v5;
    sub_10002F970((uint64_t)&v15, (uint64_t)v14);
    swift_beginAccess();
    swift_unknownObjectRetain();
    sub_1000349B4((uint64_t)v14, v4);
    swift_endAccess();
  }
  return sub_10001C878(&v15, a1);
}

char *sub_100016254(uint64_t a1, uint64_t a2, char *a3)
{
  v14[3] = type metadata accessor for TranscriptViewConfigurationProvider();
  v14[4] = &off_100224140;
  v14[0] = a1;
  uint64_t v12 = type metadata accessor for TranscriptViewContextProvider();
  int v13 = &off_100225ED0;
  *(void *)&a3[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextChangedCancellable] = 0;
  v11[0] = a2;
  *(void *)&a3[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimeoutDuration] = 0x4014000000000000;
  *(void *)&a3[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimer] = 0;
  *(void *)&a3[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_timeController] = 0;
  sub_10002F970((uint64_t)v14, (uint64_t)&a3[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager]);
  sub_10002F970((uint64_t)v11, (uint64_t)&a3[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider]);
  v10.receiver = a3;
  v10.super_class = (Class)type metadata accessor for TranscriptViewConfigurationMediator();
  id v6 = [super init];
  sub_10001510C(v11, v12);
  NSString v7 = (char *)v6;
  sub_100028654(&qword_100269DA0);
  sub_100027F5C(&qword_100269DA8, &qword_100269DA0);
  Publisher.eraseToAnyPublisher()();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100028654(&qword_100269DB0);
  sub_100027F5C(&qword_100269DB8, &qword_100269DB0);
  uint64_t v8 = Publisher<>.sink(receiveValue:)();
  swift_release();

  sub_10002F48C((uint64_t)v14);
  swift_release();
  *(void *)&v7[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextChangedCancellable] = v8;
  swift_release();
  sub_10002F48C((uint64_t)v11);
  return v7;
}

uint64_t sub_100016470@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v30 = sub_100028654(&qword_100266EB8) - 8;
  __chkstk_darwin(v30);
  uint64_t v29 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v28 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v28);
  unint64_t v27 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *v1;
  swift_getKeyPath();
  *(void *)&v40[0] = v5;
  sub_100027FA0((unint64_t *)&qword_100265D40, (void (*)(uint64_t))type metadata accessor for RCRecordButtonViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v6 = *(void *)(v5 + 40);
  swift_getKeyPath();
  *(void *)&v40[0] = v5;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  BOOL v7 = *(unsigned char *)(v5 + 32) == 0;
  BOOL v26 = *(unsigned char *)(v5 + 32) == 0;
  double v8 = 24.0;
  if (v7) {
    double v9 = 0.0;
  }
  else {
    double v9 = 24.0;
  }
  swift_getKeyPath();
  *(void *)&v40[0] = v5;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v10 = *(unsigned char *)(v5 + 32) == 0;
  if (!*(unsigned char *)(v5 + 32)) {
    double v8 = 0.0;
  }
  uint64_t v11 = static Alignment.center.getter();
  sub_100032E48(0.0, 1, 0.0, 1, v9, v26, 0.0, 1, (uint64_t)v40, 0.0, 1, v8, v10, v11, v12, v6, 0, 1);
  swift_release();
  long long v36 = v40[4];
  long long v37 = v40[5];
  long long v38 = v40[6];
  long long v39 = v40[7];
  long long v32 = v40[0];
  long long v33 = v40[1];
  long long v34 = v40[2];
  long long v35 = v40[3];
  swift_getKeyPath();
  uint64_t v31 = v5;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v13 = qword_1001F2E58[*(char *)(v5 + 32)];
  int v14 = v27;
  long long v15 = &v27[*(int *)(v28 + 28)];
  uint64_t v16 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v17 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v15, v16, v17);
  *int v14 = v13;
  v14[1] = v13;
  int v18 = v29;
  sub_10001E6B4((uint64_t)v14, (uint64_t)v29, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v18[*(int *)(v30 + 44)] = 256;
  uint64_t v19 = sub_100028654(&qword_100266E58);
  sub_10002869C((uint64_t)v18, (uint64_t)a1 + *(int *)(v19 + 36), &qword_100266EB8);
  long long v20 = v37;
  a1[4] = v36;
  a1[5] = v20;
  long long v21 = v39;
  a1[6] = v38;
  a1[7] = v21;
  long long v22 = v33;
  *a1 = v32;
  a1[1] = v22;
  long long v23 = v35;
  a1[2] = v34;
  a1[3] = v23;
  sub_100033680((uint64_t)&v32);
  sub_1000285F8((uint64_t)v18, &qword_100266EB8);
  sub_10001E5F4((uint64_t)v14, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  return sub_100033654((uint64_t)&v32);
}

char *sub_100016840()
{
  uint64_t v1 = OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_deviceIsSupportedSubject;
  sub_100028654(&qword_100266BE8);
  swift_allocObject();
  uint64_t v2 = v0;
  *(void *)&v0[v1] = CurrentValueSubject.init(_:)();
  *(void *)&v2[OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_cancellable] = 0;
  uint64_t v3 = OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_observers;
  sub_100028654(&qword_100268020);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = [self weakObjectsHashTable];
  *(void *)&v2[v3] = v4;

  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for TranscriptionAvailabilityProvider();
  [super init];
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_10003382C();
  uint64_t v6 = (char *)v5;
  swift_retain();
  uint64_t v7 = Publisher<>.sink(receiveValue:)();
  swift_release();

  swift_release();
  *(void *)&v6[OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_cancellable] = v7;
  swift_release();
  return v6;
}

char *sub_1000169D4(uint64_t a1, char *a2)
{
  uint64_t v4 = sub_100028654(&qword_1002660E0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100028654(&qword_1002660E8);
  uint64_t v8 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  char v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for RecordingStatePublisher();
  void v25[3] = v11;
  unsigned char v25[4] = &off_100225060;
  v25[0] = a1;
  uint64_t v12 = OBJC_IVAR___RCLocationManagerStateCoordinator_locationManager;
  uint64_t v13 = self;
  int v14 = a2;
  *(void *)&a2[v12] = [v13 defaultManager];
  *(void *)&v14[OBJC_IVAR___RCLocationManagerStateCoordinator_cancellable] = 0;

  long long v15 = (objc_class *)type metadata accessor for LocationManagerStateCoordinator();
  v24.receiver = v14;
  v24.super_class = v15;
  id v16 = [super init];
  uint64_t v23 = *(void *)(*sub_10001510C(v25, v11) + 32);
  uint64_t v17 = (char *)v16;
  sub_100028654(&qword_1002660F0);
  sub_100027F5C(&qword_1002660F8, &qword_1002660F0);
  Publisher.dropFirst(_:)();
  sub_100027F5C(&qword_100266100, &qword_1002660E0);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100027F5C(&qword_100266108, &qword_1002660E8);
  uint64_t v18 = v22;
  uint64_t v19 = Publisher<>.sink(receiveValue:)();
  swift_release();

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v18);
  *(void *)&v17[OBJC_IVAR___RCLocationManagerStateCoordinator_cancellable] = v19;
  swift_release();
  sub_10002F48C((uint64_t)v25);
  return v17;
}

id sub_100016D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v6 = [v3 textLayoutManager];
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  id v8 = [v6 textContentManager];

  if (!v8) {
    return 0;
  }
  id v9 = [v8 documentRange];
  id v10 = [v8 locationFromLocation:[v9 location] withOffset:a1];
  swift_unknownObjectRelease();
  if (!v10)
  {

    return 0;
  }
  id v11 = [v8 locationFromLocation:v10 withOffset:a2];
  if (!v11)
  {

    swift_unknownObjectRelease();
    return 0;
  }
  id v12 = [objc_allocWithZone((Class)NSTextRange) initWithLocation:v10 endLocation:v11];

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v12;
}

id sub_100016E90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained supportsRecordingViewElevatedUserInterfaceLevelOverride])
  {
    unsigned int v5 = [v3 isUserInterfaceStyleDark];

    if (v5)
    {
      uint64_t v6 = +[UIColor systemBackgroundColor];
      goto LABEL_6;
    }
  }
  else
  {
  }
  uint64_t v6 = +[UIColor secondarySystemBackgroundColor];
LABEL_6:
  uint64_t v7 = (void *)v6;

  return v7;
}

UIColor *__cdecl sub_100016F2C(id a1, UITraitCollection *a2)
{
  if ([(UITraitCollection *)a2 isUserInterfaceStyleDark]) {
    +[UIColor labelColor];
  }
  else {
  uint64_t v2 = +[UIColor systemGrayColor];
  }

  return (UIColor *)v2;
}

uint64_t sub_100017220()
{
  uint64_t v1 = OBJC_IVAR____TtC10VoiceMemos8VMPlayer____lazy_storage___audioPlayer;
  if (*(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos8VMPlayer____lazy_storage___audioPlayer))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos8VMPlayer____lazy_storage___audioPlayer);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for AudioPlayer();
    swift_allocObject();
    uint64_t v2 = sub_100011360();
    *(void *)(v2 + 32) = &off_100226040;
    swift_unknownObjectWeakAssign();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1000177B0()
{
  if (*(unsigned char *)(v0 + 194) == 1)
  {
    *(void *)(v0 + 184) = 0;
    *(unsigned char *)(v0 + 192) = 0;
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    *(void *)(v0 + 352) = sub_10002272C(v1, (uint64_t)qword_100275340);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Initiating asset download", v4, 2u);
      swift_slowDealloc();
    }

    id v5 = objc_allocWithZone((Class)SFEntitledAssetConfig);
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 initWithLanguage:v6 taskHint:1009];
    *(void *)(v0 + 360) = v7;

    id v8 = self;
    id v9 = (void *)RCVoiceMemosBundleID;
    *(void *)(v0 + 368) = RCVoiceMemosBundleID;
    uint64_t v10 = swift_allocObject();
    swift_unknownObjectWeakInit();
    *(void *)(v0 + 112) = sub_10001E074;
    *(void *)(v0 + 120) = v10;
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 1107296256;
    *(void *)(v0 + 96) = sub_10001E014;
    *(void *)(v0 + 104) = &unk_100227BB0;
    id v11 = _Block_copy((const void *)(v0 + 80));
    *(void *)(v0 + 376) = v11;
    id v12 = v9;
    swift_release();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 168;
    *(void *)(v0 + 24) = sub_10013F360;
    uint64_t v13 = swift_continuation_init();
    *(void *)(v0 + 128) = _NSConcreteStackBlock;
    *(void *)(v0 + 136) = 0x40000000;
    *(void *)(v0 + 144) = sub_10013F800;
    *(void *)(v0 + 152) = &unk_100227BD8;
    *(void *)(v0 + 160) = v13;
    [v8 fetchAssetWithConfig:v7 clientIdentifier:v12 detailedProgress:v11 completion:v0 + 128];
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    swift_release();
    *(void *)(v0 + 216) = 1;
    *(unsigned char *)(v0 + 224) = 0x80;
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10002272C(v14, (uint64_t)qword_100275340);
    long long v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "GASR model not available for this device", v17, 2u);
      swift_slowDealloc();
    }

    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

uint64_t sub_100017D90()
{
  return _swift_task_switch(sub_100021FBC, 0, 0);
}

uint64_t sub_100017F1C(uint64_t a1)
{
  long long v2 = *(_OWORD *)(v1 + 112);
  v21[4] = *(_OWORD *)(v1 + 96);
  v21[5] = v2;
  char v22 = *(unsigned char *)(v1 + 128);
  long long v3 = *(_OWORD *)(v1 + 48);
  v21[0] = *(_OWORD *)(v1 + 32);
  v21[1] = v3;
  long long v4 = *(_OWORD *)(v1 + 80);
  v21[2] = *(_OWORD *)(v1 + 64);
  v21[3] = v4;
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 80);
  uint64_t v8 = *(void *)(v1 + 88);
  uint64_t v9 = *(void *)(v1 + 96);
  uint64_t v10 = *(void *)(v1 + 104);
  unsigned __int8 v11 = *(unsigned char *)(v1 + 56);
  unsigned __int8 v12 = *(unsigned char *)(v1 + 112);
  long long v13 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 48) = v13;
  long long v14 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 112) = v14;
  long long v15 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 80) = v15;
  *(unsigned char *)(v1 + 128) = *(unsigned char *)(a1 + 96);
  sub_10001815C((uint64_t)v21);
  swift_bridgeObjectRelease();
  sub_1000180E0(v5, v6, v11);
  sub_1000180F8(v7, v8, v9, v10, v12);
  long long v16 = *(_OWORD *)(v1 + 112);
  v23[4] = *(_OWORD *)(v1 + 96);
  v23[5] = v16;
  char v24 = *(unsigned char *)(v1 + 128);
  long long v17 = *(_OWORD *)(v1 + 48);
  v23[0] = *(_OWORD *)(v1 + 32);
  v23[1] = v17;
  long long v18 = *(_OWORD *)(v1 + 80);
  v23[2] = *(_OWORD *)(v1 + 64);
  v23[3] = v18;
  sub_10001815C((uint64_t)v23);
  BOOL v19 = sub_100018214((uint64_t)v21, (uint64_t)v23);
  sub_100018058((uint64_t)v23);
  if (!v19 && swift_unknownObjectWeakLoadStrong())
  {
    sub_100018828();
    swift_unknownObjectRelease();
  }
  return sub_100018058((uint64_t)v21);
}

uint64_t sub_100018058(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  unsigned __int8 v9 = *(unsigned char *)(a1 + 80);
  swift_bridgeObjectRelease();
  sub_1000180E0(v2, v3, v8);
  sub_1000180F8(v4, v5, v6, v7, v9);
  return a1;
}

uint64_t sub_1000180E0(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_100018110(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_1000180F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255) {
    return sub_100036148(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

uint64_t sub_100018110(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (a3)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10001815C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  unsigned __int8 v9 = *(unsigned char *)(a1 + 80);
  swift_bridgeObjectRetain();
  sub_1000181E4(v2, v3, v8);
  sub_1000181FC(v4, v5, v6, v7, v9);
  return a1;
}

uint64_t sub_1000181E4(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_1000184D8(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_1000181FC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255) {
    return sub_100036108(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

BOOL sub_100018214(uint64_t a1, uint64_t a2)
{
  if ((sub_100018514(*(void *)a1, *(void *)a2) & 1) == 0) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(a1 + 24);
  int v5 = *(unsigned __int8 *)(a2 + 24);
  if (v4 == 255)
  {
    if (v5 != 255) {
      return 0;
    }
  }
  else
  {
    if (v5 == 255) {
      return 0;
    }
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v8 = *(void *)(a2 + 16);
    if (v4)
    {
      if ((v5 & 1) == 0) {
        return 0;
      }
      sub_1000181E4(*(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
      sub_1000181E4(v7, v6, v4);
      if ((sub_100018514(v7, v9) & 1) == 0)
      {
        sub_1000180E0(v9, v8, v5);
        sub_1000180E0(v7, v6, v4);
        return 0;
      }
      uint64_t v10 = v6;
      uint64_t v11 = v8;
    }
    else
    {
      if (v5) {
        return 0;
      }
      sub_1000181E4(*(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
      sub_1000181E4(v7, v6, v4);
      uint64_t v10 = v7;
      uint64_t v11 = v9;
    }
    char v12 = sub_100018514(v10, v11);
    sub_1000180E0(v9, v8, v5);
    sub_1000180E0(v7, v6, v4);
    if ((v12 & 1) == 0) {
      return 0;
    }
  }
  char v13 = *(unsigned char *)(a2 + 40);
  if (*(unsigned char *)(a1 + 40))
  {
    if (!*(unsigned char *)(a2 + 40)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      char v13 = 1;
    }
    if (v13) {
      return 0;
    }
  }
  int v14 = *(unsigned __int8 *)(a1 + 41);
  int v15 = *(unsigned __int8 *)(a2 + 41);
  if (v14 == 2)
  {
    if (v15 != 2) {
      return 0;
    }
LABEL_24:
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v20 = *(void *)(a1 + 64);
    uint64_t v19 = *(void *)(a1 + 72);
    int v21 = *(unsigned __int8 *)(a1 + 80);
    uint64_t v23 = *(void *)(a2 + 48);
    uint64_t v22 = *(void *)(a2 + 56);
    uint64_t v25 = *(void *)(a2 + 64);
    uint64_t v24 = *(void *)(a2 + 72);
    int v26 = *(unsigned __int8 *)(a2 + 80);
    if (v21 == 255)
    {
      if (v26 == 255)
      {
LABEL_31:
        if (((*(unsigned __int8 *)(a1 + 81) ^ *(unsigned __int8 *)(a2 + 81)) & 1) != 0
          || ((*(unsigned __int8 *)(a1 + 82) ^ *(unsigned __int8 *)(a2 + 82)) & 1) != 0)
        {
          return 0;
        }
        char v32 = *(unsigned char *)(a2 + 96);
        if ((*(unsigned char *)(a1 + 96) & 1) == 0)
        {
          if (*(double *)(a1 + 88) != *(double *)(a2 + 88)) {
            char v32 = 1;
          }
          return (v32 & 1) == 0;
        }
        return (*(unsigned char *)(a2 + 96) & 1) != 0;
      }
    }
    else if (v26 != 255)
    {
      v33[0] = *(void *)(a1 + 48);
      v33[1] = v17;
      v33[2] = v20;
      v33[3] = v19;
      char v34 = v21 & 1;
      v35[0] = v23;
      v35[1] = v22;
      v35[2] = v25;
      v35[3] = v24;
      char v36 = v26 & 1;
      if ((sub_10014EFCC((uint64_t)v33, (uint64_t)v35) & 1) == 0) {
        return 0;
      }
      goto LABEL_31;
    }
    uint64_t v27 = *(void *)(a1 + 48);
    uint64_t v28 = *(void *)(a1 + 56);
    uint64_t v29 = *(void *)(a2 + 64);
    uint64_t v30 = *(void *)(a1 + 64);
    uint64_t v31 = v24;
    sub_1000181FC(v27, v28, v30, v19, v21);
    sub_1000181FC(v23, v22, v29, v31, v26);
    sub_1000180F8(v18, v17, v20, v19, v21);
    sub_1000180F8(v23, v22, v29, v31, v26);
    return 0;
  }
  BOOL result = 0;
  if (v15 != 2 && ((v15 ^ v14) & 1) == 0) {
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_1000184D8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = vars8;
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_100018514(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v20 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v21 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v9 = v8 | (v4 << 6);
LABEL_8:
      uint64_t v10 = *(void **)(*(void *)(v3 + 48) + 8 * v9);
      sub_1000D39B0(*(void *)(v3 + 56) + 40 * v9, (uint64_t)&v23 + 8);
      *(void *)&long long v23 = v10;
      id v11 = v10;
      goto LABEL_27;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v12 < v21)
    {
      unint64_t v13 = *(void *)(v20 + 8 * v12);
      if (v13) {
        goto LABEL_12;
      }
      int64_t v14 = v4 + 2;
      ++v4;
      if (v12 + 1 < v21)
      {
        unint64_t v13 = *(void *)(v20 + 8 * v14);
        if (v13) {
          goto LABEL_15;
        }
        int64_t v4 = v12 + 1;
        if (v12 + 2 < v21)
        {
          unint64_t v13 = *(void *)(v20 + 8 * (v12 + 2));
          if (v13)
          {
            v12 += 2;
            goto LABEL_12;
          }
          int64_t v14 = v12 + 3;
          int64_t v4 = v12 + 2;
          if (v12 + 3 < v21) {
            break;
          }
        }
      }
    }
LABEL_26:
    unint64_t v7 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
LABEL_27:
    sub_1000209F8((uint64_t)&v23, (uint64_t)&v26, &qword_100267FB8);
    int v15 = v26;
    if (!v26) {
      return 1;
    }
    long long v23 = v27;
    long long v24 = v28;
    *(void *)&long long v25 = v29;
    unint64_t v16 = sub_100025B80((uint64_t)v26);
    char v18 = v17;

    if ((v18 & 1) == 0)
    {
      sub_10011BA28((uint64_t)&v23);
      return 0;
    }
    sub_1000D39B0(*(void *)(a2 + 56) + 40 * v16, (uint64_t)v22);
    char v19 = static AnyHashable.== infix(_:_:)();
    sub_10011BA28((uint64_t)v22);
    BOOL result = sub_10011BA28((uint64_t)&v23);
    if ((v19 & 1) == 0) {
      return 0;
    }
  }
  unint64_t v13 = *(void *)(v20 + 8 * v14);
  if (v13)
  {
LABEL_15:
    int64_t v12 = v14;
LABEL_12:
    unint64_t v7 = (v13 - 1) & v13;
    unint64_t v9 = __clz(__rbit64(v13)) + (v12 << 6);
    int64_t v4 = v12;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v12 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v12 >= v21)
    {
      int64_t v4 = v21 - 1;
      goto LABEL_26;
    }
    unint64_t v13 = *(void *)(v20 + 8 * v12);
    ++v14;
    if (v13) {
      goto LABEL_12;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

id sub_100018788()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isDisplayingTranscriptView) == 1)
  {
    id result = *(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_timeController);
    if (!result)
    {
      if (!*(unsigned char *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isWindowSceneInForeground)) {
        return result;
      }
      goto LABEL_8;
    }
    char v2 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isWindowSceneInForeground) ^ 1;
  }
  else
  {
    id result = *(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_timeController);
    if (!result) {
      return result;
    }
    char v2 = 1;
  }
  id result = [result timeControllerState];
  if (!result && (v2 & 1) == 0)
  {
LABEL_8:
    sub_10001510C((void *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter), *(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter + 24));
    return (id)sub_1001428DC();
  }
  return result;
}

uint64_t sub_10001882C()
{
  uint64_t v0 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  __chkstk_darwin(v0);
  unint64_t v3 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  int64_t v4 = self;
  id v5 = [v4 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100142198();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6((char *)&v10 - v3, v0);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  uint64_t v7 = swift_release();
  __chkstk_darwin(v7);
  id v8 = [v4 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  swift_allocObject();
  swift_unknownObjectWeakInit();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  v6((char *)&v10 - v3, v0);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100018AD0()
{
  swift_unknownObjectWeakLoadStrong();
  uint64_t v1 = type metadata accessor for RCRecordButtonViewController();
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  uint64_t v3 = *(void *)(*sub_10001510C((void *)(v0 + OBJC_IVAR____TtC10VoiceMemos24RCRecordButtonAppFactory_recordButtonPresenter), *(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos24RCRecordButtonAppFactory_recordButtonPresenter + 24))+ 16);
  v14[4] = v1;
  void v14[5] = &off_1002261E8;
  v14[1] = v2;
  int64_t v4 = self;
  swift_retain_n();
  swift_retain();
  id v5 = [v4 sharedStyleProvider];
  id v6 = [v5 recordingControlInnerColor];

  v14[6] = Color.init(_:)();
  id v7 = [v4 sharedStyleProvider];
  [v7 recordingControlAnimationDuration];
  uint64_t v9 = v8;

  v14[7] = v9;
  v14[8] = 0x3FD3333333333333;
  v14[0] = v3;
  sub_100028118((uint64_t)v14, (uint64_t)&v13);
  id v10 = objc_allocWithZone((Class)sub_100028654(&qword_1002670E0));
  uint64_t v11 = _UIHostingView.init(rootView:)();
  dispatch thunk of _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.setter();
  swift_release();
  swift_release();
  sub_1000364A8((uint64_t)v14);
  return v11;
}

void *sub_10001915C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v28 = sub_100028654(&qword_100266520);
  uint64_t v30 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  id v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100028654(&qword_100266528);
  uint64_t v31 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  id v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100028654(&qword_100266530);
  uint64_t v8 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  id v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[4] = 0;
  v1[5] = &_swiftEmptyArrayStorage;
  v1[6] = sub_100032830((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v11 = static Color.clear.getter();
  uint64_t v12 = static Color.clear.getter();
  uint64_t v13 = v2[5];
  uint64_t v14 = type metadata accessor for AttributedString();
  __chkstk_darwin(v14 - 8);
  unint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  AttributedString.init()();
  type metadata accessor for RCRecordButtonViewModel();
  swift_allocObject();
  v2[2] = sub_100006208(0, v11, 0, v12, v13, 0, 1, 0, (uint64_t)v16, 0);
  v2[3] = a1;
  char v17 = a1;
  sub_10002DA4C();
  *(void *)&long long v32 = *(void *)&v17[OBJC_IVAR____TtC10VoiceMemos24RCRecordButtonRepository_modelSubject];
  sub_100028654(&qword_100266538);
  sub_100027F5C(&qword_100266540, &qword_100266538);
  sub_100035C9C();
  Publisher<>.removeDuplicates()();
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  char v35 = 2;
  sub_100028654(&qword_100266550);
  sub_100027F5C(&qword_100266558, &qword_100266530);
  uint64_t v18 = v27;
  Publisher.scan<A>(_:_:)();
  sub_100028654(&qword_100266560);
  sub_100027F5C(&qword_100266568, &qword_100266520);
  uint64_t v19 = v28;
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v19);
  sub_100027F5C(&qword_100266570, &qword_100266528);
  uint64_t v20 = v29;
  uint64_t v21 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v20);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v18);
  *(void *)&long long v32 = v21;
  uint64_t v22 = swift_allocObject();
  swift_weakInit();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_100035AC0;
  *(void *)(v23 + 24) = v22;
  sub_100028654(&qword_100266578);
  sub_100027F5C(&qword_100266580, &qword_100266578);
  uint64_t v24 = Publisher<>.sink(receiveValue:)();

  swift_release();
  swift_release();
  v2[4] = v24;
  swift_release();
  return v2;
}

void sub_100019E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100019F34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100028654(&qword_100267050);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    id v10 = (void *)sub_1000D0E2C((unint64_t)&_swiftEmptyArrayStorage);
  }
  else {
    id v10 = &_swiftEmptySetSingleton;
  }
  *(void *)(v2 + 16) = v10;
  sub_100028654(&qword_100269DA0);
  swift_allocObject();
  *(void *)(v2 + 24) = PassthroughSubject.init()();
  CurrentValueSubject.value.getter();
  uint64_t v11 = v16;
  char v12 = v17;
  *(_WORD *)(v2 + 32) = 2;
  *(void *)(v2 + 40) = v11;
  *(unsigned char *)(v2 + 48) = v12;
  *(void *)(v2 + 56) = 0;
  *(_DWORD *)(v2 + 49) = 0;
  sub_1000347E8(a1, (uint64_t)&v16);
  if (v18)
  {
    uint64_t v15 = *(void *)(*sub_10001510C(&v16, v18)
                    + OBJC_IVAR____TtC10VoiceMemos28RCUserActivityStatePublisher_userActivityChangedSubject);
    sub_100028654(&qword_100266920);
    sub_100027F5C(&qword_100267068, &qword_100266920);
    sub_1000326B8();
    Publisher<>.removeDuplicates()();
    sub_100027F5C(&qword_100267078, &qword_100267050);
    uint64_t v13 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v15 = v13;
    swift_allocObject();
    swift_weakInit();
    sub_100028654(&qword_100267080);
    sub_100027F5C(&qword_100267088, &qword_100267080);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    sub_10002F48C((uint64_t)&v16);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  else
  {
    sub_100034788((uint64_t)&v16);
  }
  uint64_t v16 = a2;
  swift_allocObject();
  swift_weakInit();
  sub_100028654(&qword_100267060);
  sub_100027F5C((unint64_t *)&qword_1002699B0, &qword_100267060);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  sub_100034788(a1);
  return v3;
}

uint64_t sub_10001A4B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v3 = type metadata accessor for Capsule();
  __chkstk_darwin(v3 - 8);
  unint64_t v44 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100028654(&qword_100266C80);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_100028654(&qword_100266C70);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100028654(&qword_100266C60);
  __chkstk_darwin(v12 - 8);
  uint64_t v40 = (uint64_t)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_100028654(&qword_100266C50) - 8;
  __chkstk_darwin(v42);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100028654(&qword_100266C40) - 8;
  __chkstk_darwin(v38);
  char v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100028654(&qword_100266C28) - 8;
  __chkstk_darwin(v43);
  unint64_t v41 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v7 = static Alignment.center.getter();
  v7[1] = v19;
  uint64_t v20 = (uint64_t)v7 + *(int *)(sub_100028654(&qword_100266CF0) + 44);
  long long v39 = a1;
  sub_10001FD88(a1, v20);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10002869C((uint64_t)v7, (uint64_t)v11, &qword_100266C80);
  uint64_t v21 = &v11[*(int *)(v9 + 44)];
  long long v22 = v48;
  *(_OWORD *)uint64_t v21 = v47;
  *((_OWORD *)v21 + 1) = v22;
  *((_OWORD *)v21 + 2) = v49;
  sub_1000285F8((uint64_t)v7, &qword_100266C80);
  uint64_t v23 = *a1;
  swift_getKeyPath();
  uint64_t v46 = v23;
  sub_100027FA0((unint64_t *)&qword_100265D40, (void (*)(uint64_t))type metadata accessor for RCRecordButtonViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v23 + 16)) {
    double v24 = 147.0;
  }
  else {
    double v24 = 61.0;
  }
  swift_getKeyPath();
  uint64_t v46 = v23;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v25 = *(unsigned char *)(v23 + 16);
  if (v25) {
    double v26 = 0.0;
  }
  else {
    double v26 = 61.0;
  }
  static Alignment.center.getter();
  uint64_t v27 = v40;
  sub_100032C88(v24, 0, 0.0, 1, v26, v25, 0.0, 1, v40, 0.0, 1, 0.0, 1);
  sub_1000285F8((uint64_t)v11, &qword_100266C70);
  uint64_t v28 = static Animation.easeOut(duration:)();
  swift_getKeyPath();
  uint64_t v46 = v23;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v29 = *(unsigned char *)(v23 + 16);
  sub_10002869C(v27, (uint64_t)v15, &qword_100266C60);
  uint64_t v30 = &v15[*(int *)(v42 + 44)];
  *(void *)uint64_t v30 = v28;
  v30[8] = v29;
  sub_1000285F8(v27, &qword_100266C60);
  sub_10002869C((uint64_t)v15, (uint64_t)v17, &qword_100266C50);
  *(_WORD *)&v17[*(int *)(v38 + 44)] = 257;
  sub_1000285F8((uint64_t)v15, &qword_100266C50);
  uint64_t v31 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v32 = type metadata accessor for RoundedCornerStyle();
  uint64_t v33 = (uint64_t)v44;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104))(v44, v31, v32);
  uint64_t v34 = (uint64_t)v41;
  uint64_t v35 = (uint64_t)&v41[*(int *)(v43 + 44)];
  sub_10001E6B4(v33, v35, (uint64_t (*)(void))&type metadata accessor for Capsule);
  *(unsigned char *)(v35 + *(int *)(sub_100028654(&qword_100266CA0) + 36)) = 0;
  sub_10002869C((uint64_t)v17, v34, &qword_100266C40);
  sub_10001E5F4(v33, (uint64_t (*)(void))&type metadata accessor for Capsule);
  sub_1000285F8((uint64_t)v17, &qword_100266C40);
  return sub_1000209F8(v34, v45, &qword_100266C28);
}

uint64_t sub_10001AA5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v52 = a1;
  uint64_t v3 = type metadata accessor for AccessibilityTraits();
  uint64_t v50 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  __chkstk_darwin(v3);
  long long v49 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for PlainButtonStyle();
  uint64_t v44 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100028654(&qword_100266C00);
  uint64_t v41 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_100028654(&qword_100266C08);
  uint64_t v42 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_100028654(&qword_100266C10);
  __chkstk_darwin(v46);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100028654(&qword_100266C18);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100028654(&qword_100266C20);
  __chkstk_darwin(v47);
  uint64_t v45 = (uint64_t)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100028118((uint64_t)v1, (uint64_t)v54);
  uint64_t v18 = swift_allocObject();
  long long v19 = v54[3];
  *(_OWORD *)(v18 + 48) = v54[2];
  *(_OWORD *)(v18 + 64) = v19;
  *(void *)(v18 + 80) = v55;
  long long v20 = v54[1];
  *(_OWORD *)(v18 + 16) = v54[0];
  *(_OWORD *)(v18 + 32) = v20;
  char v53 = v1;
  sub_100028654(&qword_100266C28);
  sub_100033068();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  sub_100027F5C(&qword_100266CA8, &qword_100266C00);
  sub_100027FA0(&qword_100266CB0, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  uint64_t v21 = v43;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v6, v21);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v7);
  uint64_t v22 = *v1;
  swift_getKeyPath();
  *(void *)&v54[0] = v22;
  sub_100027FA0((unint64_t *)&qword_100265D40, (void (*)(uint64_t))type metadata accessor for RCRecordButtonViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v22) = *(unsigned char *)(v22 + OBJC_IVAR____TtC10VoiceMemos23RCRecordButtonViewModel__disabled);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v24 = swift_allocObject();
  *(unsigned char *)(v24 + 16) = v22;
  uint64_t v25 = v42;
  uint64_t v26 = v48;
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v13, v11, v48);
  uint64_t v27 = (uint64_t *)&v13[*(int *)(v46 + 36)];
  *uint64_t v27 = KeyPath;
  v27[1] = (uint64_t)sub_100031BEC;
  v27[2] = v24;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v26);
  uint64_t v28 = v49;
  static AccessibilityTraits.startsMediaSession.getter();
  sub_10000E3A4();
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v28, v51);
  sub_1000285F8((uint64_t)v13, &qword_100266C10);
  uint64_t v29 = v45;
  sub_10002869C((uint64_t)v16, v45, &qword_100266C18);
  *(unsigned char *)(v29 + *(int *)(v47 + 36)) = 1;
  sub_1000285F8((uint64_t)v16, &qword_100266C18);
  uint64_t v30 = *v2;
  uint64_t v31 = type metadata accessor for AttributedString();
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v41 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  *(void *)&v54[0] = v30;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v35 = v30 + OBJC_IVAR____TtC10VoiceMemos23RCRecordButtonViewModel__accessibilityLabel;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, v35, v31);
  uint64_t v36 = Text.init(_:)();
  uint64_t v38 = v37;
  LOBYTE(v24) = v39 & 1;
  sub_1000332AC();
  View.accessibilityLabel(_:)();
  sub_100028700(v36, v38, v24);
  swift_bridgeObjectRelease();
  return sub_1000285F8(v29, &qword_100266C20);
}

void sub_10001B3D0(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  unsigned __int8 v4 = [WeakRetained isSetup];

  if ((v4 & 1) == 0)
  {
    id v5 = objc_loadWeakRetained((id *)(a1 + 56));
    uint64_t v6 = [v5 selectionDelegate];
    id v7 = objc_loadWeakRetained(v2);
    uint64_t v8 = [v7 recordingsCollectionViewController];
    [v8 setFolderSelectionDelegate:v6];

    id v9 = objc_loadWeakRetained((id *)(a1 + 56));
    uint64_t v10 = [v9 libraryActionHandler];
    id v11 = objc_loadWeakRetained(v2);
    [v11 setLibraryActionHandler:v10];

    id v12 = objc_loadWeakRetained((id *)(a1 + 56));
    uint64_t v13 = [v12 recordingViewControllerDelegate];
    id v14 = objc_loadWeakRetained(v2);
    [v14 setRecordingViewControllerDelegate:v13];

    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = objc_loadWeakRetained(v2);
    [v16 setFolderTitle:v15];

    id v17 = objc_loadWeakRetained(v2);
    id v18 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 64));
    [v17 setUndoManager:v18];

    id v19 = objc_loadWeakRetained(v2);
    [v19 setIsSetup:1];
  }
}

void sub_10001BB28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10001BBF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (![WeakRetained _isIOSMac])
  {

    goto LABEL_5;
  }
  unsigned __int8 v6 = [v3 isUserInterfaceStyleDark];

  if ((v6 & 1) == 0)
  {
LABEL_5:
    uint64_t v8 = +[UIColor separatorColor];
    id v9 = objc_loadWeakRetained(v4);
    uint64_t v10 = [v9 sidebarCollectionViewBackgroundColor];

    [v8 alphaComponent];
    id v11 = [v10 colorWithAlphaComponent:];
    id v12 = v11;
    if (v11)
    {
      id v13 = v11;
    }
    else
    {
      id v13 = +[UIColor clearColor];
    }
    id v7 = v13;

    goto LABEL_9;
  }
  id v7 = +[UIColor systemBlackColor];
LABEL_9:

  return v7;
}

char *sub_10001C1D4()
{
  *(void *)&v0[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_timeController] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator____lazy_storage___transcriptView] = 0;
  v0[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isDisplayingTranscriptView] = 0;
  v0[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isWindowSceneInForeground] = 0;
  uint64_t v1 = self;
  uint64_t v2 = v0;
  id v3 = [v1 sharedAppDelegate];
  if (!v3) {
    goto LABEL_5;
  }
  unsigned __int8 v4 = v3;
  id v5 = [v3 defaultSceneDelegate];

  if (!v5) {
    goto LABEL_5;
  }
  id v6 = [v5 mainViewController];

  id v7 = [v6 mainControllerHelper];
  id v8 = [v7 activityStatePublisher];

  if (v8)
  {
    *((void *)&v38 + 1) = type metadata accessor for RCUserActivityStatePublisher();
    char v39 = &off_100225740;
    *(void *)&long long v37 = v8;
  }
  else
  {
LABEL_5:
    id v8 = 0;
    char v39 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
  }
  uint64_t v9 = qword_100264628;
  id v32 = v8;
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v10 = *(void *)(qword_100275560
                  + OBJC_IVAR____TtC10VoiceMemos30TranscriptionModelAssetService__downloadStateValueSubject);
  uint64_t v11 = type metadata accessor for TranscriptViewContextProvider();
  swift_allocObject();
  swift_retain();
  uint64_t v12 = sub_100019F34((uint64_t)&v37, v10);
  swift_release();
  uint64_t v13 = OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_contextProvider;
  *(void *)&v2[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_contextProvider] = v12;
  type metadata accessor for TranscriptViewDataProvider();
  swift_allocObject();
  uint64_t v14 = sub_100011A20();
  uint64_t v15 = OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_dataProvider;
  *(void *)&v2[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_dataProvider] = v14;
  type metadata accessor for TranscriptViewConfigurationProvider();
  swift_allocObject();
  uint64_t v16 = sub_1000256D0();
  uint64_t v17 = OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_configurationProvider;
  *(void *)&v2[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_configurationProvider] = v16;
  uint64_t v18 = *(void *)&v2[v13];
  swift_retain();
  swift_retain();
  *(void *)&v2[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_configurationMediator] = sub_100009FF4(v16, v18);
  uint64_t v19 = *(void *)&v2[v13];
  *((void *)&v38 + 1) = v11;
  char v39 = &off_100225ED0;
  *(void *)&long long v37 = v19;
  type metadata accessor for TranscriptViewInteractionHandler();
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = sub_10002F368((uint64_t)&v37, v11);
  __chkstk_darwin(v21);
  uint64_t v23 = (uint64_t *)((char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  uint64_t v25 = *v23;
  uint64_t v35 = v11;
  uint64_t v36 = &off_100225ED0;
  *(void *)&long long v34 = v25;
  *(void *)(v20 + 56) = 0;
  swift_unknownObjectWeakInit();
  sub_10001C878(&v34, v20 + 16);
  swift_retain();
  sub_10002F48C((uint64_t)&v37);
  *(void *)&v2[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_interactionDelegate] = v20;
  uint64_t v26 = *(void *)&v2[v17];
  uint64_t v27 = *(void *)&v2[v15];
  uint64_t v28 = *(void *)&v2[v13];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000F358(v26, v27, v20, (uint64_t)&off_100224218, v28, (uint64_t)&off_100225EB0);
  swift_release();
  swift_release();
  sub_10002E41C((uint64_t *)&v37);
  sub_10001C878(&v37, (uint64_t)&v2[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter]);

  uint64_t v29 = (objc_class *)type metadata accessor for TranscriptViewCoordinator();
  v33.receiver = v2;
  v33.super_class = v29;
  uint64_t v30 = (char *)[super init];

  swift_release();
  *(void *)(*(void *)&v30[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_configurationProvider] + 24) = &off_1002284E0;
  swift_unknownObjectWeakAssign();
  *(void *)(*(void *)&v30[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_dataProvider] + 24) = &off_1002284F0;
  swift_unknownObjectWeakAssign();
  return v30;
}

uint64_t sub_10001C660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TranscriptViewConfigurationProvider();
  void v29[3] = v6;
  v29[4] = &off_100224178;
  v29[0] = a1;
  uint64_t v7 = type metadata accessor for TranscriptViewDataProvider();
  uint64_t v27 = v7;
  uint64_t v28 = &off_100228000;
  v26[0] = a2;
  type metadata accessor for TranscriptViewPresenter();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = sub_10002F368((uint64_t)v29, v6);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = sub_10002F368((uint64_t)v26, v27);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = *v11;
  uint64_t v18 = *v15;
  uint64_t v24 = v6;
  uint64_t v25 = &off_100224178;
  uint64_t v22 = &off_100228000;
  *(void *)&long long v23 = v17;
  uint64_t v21 = v7;
  *(void *)&long long v20 = v18;
  *(void *)(v8 + 104) = 0;
  sub_10001C878(&v23, v8 + 16);
  sub_10001C878(&v20, v8 + 56);
  *(void *)(v8 + 96) = a3;
  sub_10002F48C((uint64_t)v26);
  sub_10002F48C((uint64_t)v29);
  return v8;
}

uint64_t sub_10001C878(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10001CB84(Swift::UInt a1, Swift::UInt a2, int a3, unint64_t a4, Swift::UInt a5, int a6)
{
  int v38 = a6;
  long long v37 = (Swift::UInt *)a5;
  int v36 = a3;
  Swift::UInt v34 = a1;
  Swift::UInt v35 = a2;
  uint64_t v8 = *(void *)(v6 + 16);
  if (a4 >= 5)
  {
    swift_retain();
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    uint64_t v44 = v8;
    unint64_t v10 = sub_1000354A8();
    swift_retain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    uint64_t v11 = *(void *)(v6 + 16);
    swift_retain();
    sub_10000D34C(a4);
    uint64_t v12 = swift_getKeyPath();
    __chkstk_darwin(v12);
    uint64_t v44 = v11;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v13 = *(void *)(v6 + 16);
    uint64_t v14 = swift_getKeyPath();
    __chkstk_darwin(v14);
    uint64_t v44 = v13;
    swift_retain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    uint64_t v15 = *(void *)(v6 + 16);
    swift_retain();
    Swift::UInt v40 = a4;
    sub_10000D5EC(a4);
    uint64_t v16 = swift_getKeyPath();
    __chkstk_darwin(v16);
    uint64_t v44 = v15;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v17 = *(void *)(v6 + 16);
    uint64_t v18 = swift_getKeyPath();
    __chkstk_darwin(v18);
    uint64_t v44 = v17;
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v41 = v10;
    uint64_t v42 = (char *)&type metadata for () + 8;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void *)(v6 + 16);
    swift_beginAccess();
    uint64_t v20 = *(void *)(*(void *)(v6 + 48) + 16);
    uint64_t v39 = v6;
    if (v20) {
      sub_10002DE84(v40, (Swift::UInt)v37);
    }
    uint64_t v21 = (uint64_t)v37;
    uint64_t v22 = swift_getKeyPath();
    __chkstk_darwin(v22);
    uint64_t v43 = v19;
    swift_retain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    uint64_t v23 = *(void *)(v39 + 16);
    swift_retain();
    sub_100035978(v34, v35, v36, v40, (Swift::UInt)v37);
    uint64_t v24 = swift_getKeyPath();
    __chkstk_darwin(v24);
    uint64_t v43 = v23;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    uint64_t v25 = *(void *)(v39 + 16);
    uint64_t v26 = type metadata accessor for AttributedString();
    long long v37 = &v34;
    uint64_t v27 = *(void *)(v26 - 8);
    __chkstk_darwin(v26);
    uint64_t v29 = (char *)&v34 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain();
    sub_1000EC658(v40, v21, (uint64_t)v29);
    uint64_t v30 = swift_getKeyPath();
    __chkstk_darwin(v30);
    uint64_t v43 = v25;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    swift_release();
    uint64_t v31 = *(void *)(v39 + 16);
    uint64_t v32 = swift_getKeyPath();
    __chkstk_darwin(v32);
    uint64_t v43 = v31;
    swift_retain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_10001D33C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100028654(&qword_100269250);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  unint64_t v10 = (char *)&v42 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v42 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t *)((char *)&v42 - v14);
  uint64_t v43 = a1;
  sub_10001D764(a1, (uint64_t)&v42 - v14);
  uint64_t v16 = type metadata accessor for TranscriptViewModel();
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  if (v17((char *)v15, 1, v16) == 1)
  {
    sub_1000285F8((uint64_t)v15, &qword_100269250);
    int v18 = 1;
  }
  else
  {
    uint64_t v20 = *v15;
    uint64_t v19 = v15[1];
    swift_bridgeObjectRetain();
    sub_10002343C((uint64_t)v15);
    if (v20 == *a2 && v19 == a2[1])
    {
      swift_bridgeObjectRelease();
      int v18 = 0;
    }
    else
    {
      int v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      int v18 = v22 ^ 1;
    }
  }
  sub_10001D764(v43, (uint64_t)v13);
  if (v17(v13, 1, v16) == 1)
  {
    sub_1000285F8((uint64_t)v13, &qword_100269250);
    int v23 = 1;
  }
  else
  {
    uint64_t v24 = *((void *)v13 + 2);
    swift_bridgeObjectRetain();
    sub_10002343C((uint64_t)v13);
    uint64_t v25 = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v26 = sub_100018514(v24, v25);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    int v23 = v26 ^ 1;
  }
  sub_10001D764(v43, (uint64_t)v10);
  if (v17(v10, 1, v16) == 1)
  {
    sub_1000285F8((uint64_t)v10, &qword_100269250);
    char v27 = 1;
  }
  else
  {
    uint64_t v28 = (void *)*((void *)v10 + 3);
    swift_bridgeObjectRetain();
    sub_10002343C((uint64_t)v10);
    uint64_t v29 = (void *)a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v30 = sub_100168058(v28, v29);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    char v27 = v30 ^ 1;
  }
  sub_10001D764(v43, (uint64_t)v7);
  if (v17(v7, 1, v16) == 1)
  {
    sub_1000285F8((uint64_t)v7, &qword_100269250);
    uint64_t v31 = (void *)a2[12];
    goto LABEL_22;
  }
  objc_super v33 = (void *)*((void *)v7 + 12);
  uint64_t v32 = *((void *)v7 + 13);
  id v34 = v33;
  sub_10002343C((uint64_t)v7);
  uint64_t v31 = (void *)a2[12];
  if (!v33)
  {
LABEL_22:
    if (!((v31 != 0) | v27 & 1 | (v18 | v23) & 1)) {
      return;
    }
LABEL_25:
    uint64_t v39 = v43;
    sub_1000065B4(v43, (uint64_t)a2);
    Swift::UInt v40 = sub_10000FC38(v39, (uint64_t)a2);
    sub_10001D7CC((uint64_t)v40);
    swift_bridgeObjectRelease();
    sub_10000F5B0(v39, a2);
    unint64_t v41 = sub_1000344DC((uint64_t)a2);
    sub_10001D7CC((uint64_t)v41);
    swift_bridgeObjectRelease();
    sub_100034184(v39, a2);
    sub_100012940(v39, a2);
    return;
  }
  if (!v31)
  {

    goto LABEL_25;
  }
  uint64_t v35 = a2[13];
  id v36 = v34;
  id v37 = v31;
  char v38 = sub_100167BF8(v37);

  if (v18 & 1 | ((v38 & 1) == 0) | (v23 | v27) & 1 || v32 != v35) {
    goto LABEL_25;
  }
}

uint64_t sub_10001D750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100166BA4);
}

uint64_t sub_10001D764(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100269250);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10001D7CC(uint64_t a1)
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  id v50 = Strong;
  id v3 = [Strong text];
  if (!v3) {
    goto LABEL_58;
  }
  uint64_t v4 = v3;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = sub_10001DF18();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {

    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = (uint64_t *)(a1 + 48);
  unint64_t v10 = &selRef_setUpdateFidelity_;
  while (1)
  {
    uint64_t v11 = *(v9 - 2);
    uint64_t v12 = *(v9 - 1);
    uint64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12)) {
      break;
    }
    BOOL v14 = __OFSUB__(v13, 1);
    uint64_t v15 = v13 - 1;
    if (v14) {
      goto LABEL_55;
    }
    if (v11 < v5) {
      goto LABEL_28;
    }
    if (__OFSUB__(v11, v5)) {
      goto LABEL_56;
    }
    if (v11 - v5 >= v7 || v15 < v5) {
      goto LABEL_28;
    }
    BOOL v14 = __OFSUB__(v15, v5);
    uint64_t v17 = v15 - v5;
    if (v14) {
      goto LABEL_57;
    }
    if (v17 >= v7)
    {
LABEL_28:
      if (qword_100264530 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      sub_10002272C(v37, (uint64_t)qword_100275340);
      os_log_type_t v38 = static os_log_type_t.error.getter();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v39 = v38;
      if (os_log_type_enabled(v20, v38))
      {
        uint64_t v40 = swift_slowAlloc();
        v52[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136315138;
        *(void *)(v40 + 4) = sub_10002F3B8(0xD00000000000001DLL, 0x80000001001ED6A0, v52);
        _os_log_impl((void *)&_mh_execute_header, v20, v39, "%s - Unable to set attributes. Range is out of bounds.", (uint8_t *)v40, 0xCu);
        swift_arrayDestroy();
        unint64_t v10 = &selRef_setUpdateFidelity_;
        swift_slowDealloc();
        swift_slowDealloc();
      }
LABEL_32:

      goto LABEL_33;
    }
    uint64_t v18 = *v9;
    uint64_t v19 = swift_unknownObjectWeakLoadStrong();
    if (v19)
    {
      uint64_t v20 = v19;
      swift_bridgeObjectRetain_n();
      id v21 = [v20 v10[344]];
      uint64_t v22 = v18;
      if (v21)
      {
        int v23 = v21;
        uint64_t v49 = v22;
        id v24 = [v20 v10[344]];
        if (!v24)
        {
          swift_bridgeObjectRelease_n();

          goto LABEL_45;
        }
        uint64_t v25 = v24;
        id v48 = v23;
        id v26 = [v24 textContentManager];

        if (!v26)
        {
          swift_bridgeObjectRelease_n();

          goto LABEL_45;
        }
        uint64_t v46 = a1;
        id v47 = [v26 documentRange];
        id v27 = [v26 locationFromLocation:[v47 location] withOffset:v11];
        swift_unknownObjectRelease();
        if (!v27)
        {
          swift_bridgeObjectRelease_n();

          unint64_t v41 = v47;
          goto LABEL_41;
        }
        id v28 = [v26 locationFromLocation:v27 withOffset:v12];
        if (!v28)
        {
          swift_bridgeObjectRelease_n();

          swift_unknownObjectRelease();
          goto LABEL_44;
        }
        id v44 = [objc_allocWithZone((Class)NSTextRange) initWithLocation:v27 endLocation:v28];

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (!v44)
        {
          swift_bridgeObjectRelease_n();

          unint64_t v41 = v48;
LABEL_41:

LABEL_44:
          a1 = v46;
LABEL_45:
          unint64_t v10 = &selRef_setUpdateFidelity_;
          goto LABEL_33;
        }
        char v29 = *(unsigned char *)(v51 + 8);
        sub_10011BBA0(v51, (uint64_t)v52);
        if ((v29 & 1) == 0)
        {
          sub_10000C4A4((uint64_t)v52);
          uint64_t v30 = v49;
LABEL_43:
          [v48 invalidateRenderingAttributesForTextRange:v44, v44];
          id v42 = [v20 textStorage];
          sub_100167400(v30);
          type metadata accessor for Key(0);
          sub_10011B968();
          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v42 addAttributes:isa range:v11, v12];
          swift_bridgeObjectRelease_n();

          goto LABEL_44;
        }
        uint64_t v30 = v49;
        char v31 = sub_10011B434(v49);
        sub_10000C4A4((uint64_t)v52);
        if ((v31 & 1) == 0) {
          goto LABEL_43;
        }
        sub_100167400(v49);
        type metadata accessor for Key(0);
        sub_10011B968();
        Class v32 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v48 setRenderingAttributes:v32 forTextRange:v44];

        id v33 = [v48 textLayoutFragmentForLocation:[v44 location]];
        swift_unknownObjectRelease();
        if (v33)
        {
          id v34 = [v48 textViewportLayoutController];
          id v35 = [v34 renderingSurfaceForKey:v33];

          if (v35)
          {
            self;
            id v36 = (void *)swift_dynamicCastObjCClass();
            unint64_t v10 = &selRef_setUpdateFidelity_;
            if (v36)
            {
              [v36 setNeedsDisplay];
              swift_bridgeObjectRelease_n();

              swift_unknownObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease_n();
              swift_unknownObjectRelease();
            }
          }
          else
          {
            swift_bridgeObjectRelease_n();

            unint64_t v10 = &selRef_setUpdateFidelity_;
          }
        }
        else
        {
          swift_bridgeObjectRelease_n();
          unint64_t v10 = &selRef_setUpdateFidelity_;
        }
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
      goto LABEL_32;
    }
LABEL_33:
    v9 += 3;
    if (!--v8)
    {

      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
}

uint64_t sub_10001DF18()
{
  return _NSRange.init<A, B>(_:in:)();
}

unint64_t sub_10001DFB8()
{
  unint64_t result = qword_100269498;
  if (!qword_100269498)
  {
    sub_100027F14(&qword_100269490);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100269498);
  }
  return result;
}

uint64_t sub_10001E014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

uint64_t sub_10001E074(uint64_t a1, char a2)
{
  return sub_10001E07C(a1, a2, v2);
}

uint64_t sub_10001E07C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = sub_100028654(&qword_1002699E0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v10 = static MainActor.shared.getter();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = &protocol witness table for MainActor;
  *(void *)(v11 + 32) = a3;
  *(void *)(v11 + 40) = a1;
  *(unsigned char *)(v11 + 48) = a2;
  sub_10001E1A8((uint64_t)v8, (uint64_t)&unk_100269058, v11);
  return swift_release();
}

uint64_t sub_10001E1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000285F8(a1, &qword_1002699E0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10001E354@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100028654(&qword_100266EB8);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RoundedRectangle();
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (_OWORD *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *a1;
  swift_getKeyPath();
  uint64_t v32 = v12;
  sub_100027FA0((unint64_t *)&qword_100265D40, (void (*)(uint64_t))type metadata accessor for RCRecordButtonViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v13 = *(void *)(v12 + 40);
  swift_retain();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v14 = v32;
  char v15 = v33;
  uint64_t v16 = v34;
  int v31 = v35;
  uint64_t v29 = v37;
  uint64_t v30 = v36;
  uint64_t v17 = (char *)v11 + *(int *)(v9 + 28);
  uint64_t v18 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v19 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v17, v18, v19);
  __asm { FMOV            V0.2D, #2.0 }
  _OWORD *v11 = _Q0;
  sub_10001E6B4((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v7[*(int *)(v5 + 44)] = 256;
  uint64_t v25 = sub_100028654(&qword_100266E80);
  sub_10002869C((uint64_t)v7, a2 + *(int *)(v25 + 36), &qword_100266EB8);
  *(void *)a2 = v13;
  *(_WORD *)(a2 + 8) = 256;
  *(void *)(a2 + 16) = v14;
  *(unsigned char *)(a2 + 24) = v15;
  *(void *)(a2 + 32) = v16;
  *(unsigned char *)(a2 + 40) = v31;
  uint64_t v26 = v29;
  *(void *)(a2 + 48) = v30;
  *(void *)(a2 + 56) = v26;
  swift_retain();
  sub_1000285F8((uint64_t)v7, &qword_100266EB8);
  sub_10001E5F4((uint64_t)v11, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  return swift_release();
}

uint64_t sub_10001E5F4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10001E654(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10001E6B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_10001EADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, id *a12)
{
  objc_destroyWeak(v12);
  objc_destroyWeak(location);
  objc_destroyWeak(a12);
  objc_destroyWeak((id *)(v13 - 120));
  objc_destroyWeak((id *)(v13 - 112));
  _Unwind_Resume(a1);
}

id sub_10001EC64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)UIListSeparatorConfiguration) initWithListAppearance:*(void *)(a1 + 32)];
  id v5 = [v3 item];

  if (!v5) {
    [v4 setTopSeparatorVisibility:1];
  }

  return v4;
}

void sub_10001ECE4()
{
  uint64_t v1 = v0;
  uint64_t v2 = (objc_class *)type metadata accessor for UIAppIntentInteraction();
  id v3 = objc_allocWithZone(v2);
  sub_10003629C();
  id v4 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)();
  id v5 = [v1 view];
  if (!v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v6 = v5;
  [v5 addInteraction:v4];

  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v7 = objc_allocWithZone(v2);
  sub_100031520();
  swift_retain();
  uint64_t v8 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)();
  id v9 = [v1 view];
  if (!v9)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v10 = v9;
  [v9 addInteraction:v8];
  swift_release();

  id v11 = objc_allocWithZone(v2);
  sub_10003658C();
  uint64_t v12 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)();
  id v13 = [v1 view];
  if (!v13)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v14 = v13;
  [v13 addInteraction:v12];

  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v15 = objc_allocWithZone(v2);
  sub_100031754();
  swift_retain();
  uint64_t v16 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)();
  id v17 = [v1 view];
  if (!v17)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v18 = v17;
  [v17 addInteraction:v16];
  swift_release();

  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v19 = objc_allocWithZone(v2);
  sub_100031648();
  swift_retain();
  uint64_t v20 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)();
  id v21 = [v1 view];
  if (!v21)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v22 = v21;
  [v21 addInteraction:v20];
  swift_release();

  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v23 = objc_allocWithZone(v2);
  sub_100031874();
  swift_retain();
  id v24 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)();
  id v25 = [v1 view];
  if (!v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v26 = v25;
  [v25 addInteraction:v24];
  swift_release();

  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v27 = objc_allocWithZone(v2);
  sub_100031904();
  swift_retain();
  uint64_t v28 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)();
  id v29 = [v1 view];
  if (!v29)
  {
LABEL_17:
    __break(1u);
    return;
  }
  id v30 = v29;
  [v29 addInteraction:v28];
  swift_release();
}

uint64_t sub_10001F8D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v2 = sub_100028654(&qword_100266E58);
  __chkstk_darwin(v2 - 8);
  uint64_t v37 = (_OWORD *)((char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v39 = sub_100028654(&qword_100266E60) - 8;
  uint64_t v4 = __chkstk_darwin(v39);
  uint64_t v40 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v36 - v7;
  __chkstk_darwin(v6);
  uint64_t v38 = (uint64_t)&v36 - v9;
  uint64_t v10 = sub_100028654(&qword_100266E68);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100028654(&qword_100266E70);
  uint64_t v14 = v13 - 8;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v36 = (uint64_t)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  id v19 = (char *)&v36 - v18;
  __chkstk_darwin(v17);
  id v21 = (char *)&v36 - v20;
  *(void *)uint64_t v12 = static VerticalAlignment.center.getter();
  *((void *)v12 + 1) = 0x4010000000000000;
  v12[16] = 0;
  sub_100028654(&qword_100266E78);
  sub_100028118((uint64_t)v1, (uint64_t)v42);
  uint64_t v22 = swift_allocObject();
  long long v23 = v42[3];
  *(_OWORD *)(v22 + 48) = v42[2];
  *(_OWORD *)(v22 + 64) = v23;
  *(void *)(v22 + 80) = v43;
  long long v24 = v42[1];
  *(_OWORD *)(v22 + 16) = v42[0];
  *(_OWORD *)(v22 + 32) = v24;
  sub_100028654(&qword_100266E80);
  sub_100033474();
  ForEach<>.init(_:content:)();
  uint64_t v25 = *v1;
  swift_getKeyPath();
  *(void *)&v42[0] = v25;
  sub_100027FA0((unint64_t *)&qword_100265D40, (void (*)(uint64_t))type metadata accessor for RCRecordButtonViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double v26 = 0.0;
  if (*(unsigned char *)(v25 + 32) == 2) {
    double v27 = 1.0;
  }
  else {
    double v27 = 0.0;
  }
  sub_10002869C((uint64_t)v12, (uint64_t)v19, &qword_100266E68);
  *(double *)&v19[*(int *)(v14 + 44)] = v27;
  sub_1000285F8((uint64_t)v12, &qword_100266E68);
  sub_1000209F8((uint64_t)v19, (uint64_t)v21, &qword_100266E70);
  uint64_t v28 = v37;
  sub_100016470(v37);
  uint64_t v29 = *v1;
  swift_getKeyPath();
  *(void *)&v42[0] = v29;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v29 + 32) != 2) {
    double v26 = 1.0;
  }
  sub_10002869C((uint64_t)v28, (uint64_t)v8, &qword_100266E58);
  *(double *)&v8[*(int *)(v39 + 44)] = v26;
  sub_1000285F8((uint64_t)v28, &qword_100266E58);
  uint64_t v30 = v38;
  sub_1000209F8((uint64_t)v8, v38, &qword_100266E60);
  uint64_t v31 = v36;
  sub_10002869C((uint64_t)v21, v36, &qword_100266E70);
  uint64_t v32 = v40;
  sub_10002869C(v30, v40, &qword_100266E60);
  uint64_t v33 = v41;
  sub_10002869C(v31, v41, &qword_100266E70);
  uint64_t v34 = sub_100028654(&qword_100266EC0);
  sub_10002869C(v32, v33 + *(int *)(v34 + 48), &qword_100266E60);
  sub_1000285F8(v30, &qword_100266E60);
  sub_1000285F8((uint64_t)v21, &qword_100266E70);
  sub_1000285F8(v32, &qword_100266E60);
  return sub_1000285F8(v31, &qword_100266E70);
}

uint64_t sub_10001FD88@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  v94 = a1;
  uint64_t v106 = a2;
  uint64_t v105 = sub_100028654(&qword_100266CF8);
  uint64_t v104 = *(void *)(v105 - 8);
  uint64_t v3 = __chkstk_darwin(v105);
  v103 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v109 = (char *)&v91 - v5;
  uint64_t v6 = sub_100028654(&qword_100266D00);
  __chkstk_darwin(v6 - 8);
  uint64_t v98 = (uint64_t)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v99 = sub_100028654(&qword_100266D08) - 8;
  __chkstk_darwin(v99);
  uint64_t v97 = (uint64_t)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_100028654(&qword_100266D10) - 8;
  __chkstk_darwin(v101);
  uint64_t v100 = (uint64_t)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t KeyPath = sub_100028654(&qword_100266D18) - 8;
  uint64_t v10 = __chkstk_darwin(KeyPath);
  uint64_t v107 = (uint64_t)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v111 = (uint64_t)&v91 - v12;
  uint64_t v13 = type metadata accessor for RoundedCornerStyle();
  uint64_t v92 = *(void *)(v13 - 8);
  uint64_t v14 = v92;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Capsule();
  __chkstk_darwin(v17 - 8);
  id v19 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100028654(&qword_100266D20);
  uint64_t v21 = v20 - 8;
  __chkstk_darwin(v20);
  long long v23 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_100028654(&qword_100266D28) - 8;
  uint64_t v24 = __chkstk_darwin(v96);
  uint64_t v108 = (uint64_t)&v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v95 = (uint64_t)&v91 - v27;
  __chkstk_darwin(v26);
  uint64_t v110 = (uint64_t)&v91 - v28;
  uint64_t v29 = *(void (**)(char *, void, uint64_t))(v14 + 104);
  v29(v19, enum case for RoundedCornerStyle.continuous(_:), v13);
  uint64_t v30 = *a1;
  swift_getKeyPath();
  *(void *)&long long v112 = v30;
  uint64_t v93 = sub_100027FA0((unint64_t *)&qword_100265D40, (void (*)(uint64_t))type metadata accessor for RCRecordButtonViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v31 = *(void *)(v30 + 24);
  swift_retain();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  double v32 = v119;
  uint64_t v33 = v121;
  uint64_t v34 = v122;
  uint64_t v35 = v123;
  sub_10001E6B4((uint64_t)v19, (uint64_t)v23, (uint64_t (*)(void))&type metadata accessor for Capsule);
  uint64_t v36 = v120;
  v29(v16, enum case for RoundedCornerStyle.circular(_:), v13);
  LOBYTE(v14) = static RoundedCornerStyle.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v16, v13);
  unint64_t v37 = COERCE_UNSIGNED_INT64(v119 * 0.5) & 0xFFFFFFFFFFFFFFFELL | ((v14 & 1) == 0);
  uint64_t v38 = static Alignment.center.getter();
  uint64_t v39 = &v23[*(int *)(v21 + 76)];
  *(void *)uint64_t v39 = v37;
  *((double *)v39 + 1) = v32;
  *((void *)v39 + 2) = v36;
  *((void *)v39 + 3) = v33;
  *((void *)v39 + 4) = v34;
  *((void *)v39 + 5) = v35;
  *((void *)v39 + 6) = v31;
  *((_WORD *)v39 + 28) = 256;
  *((void *)v39 + 8) = v38;
  *((void *)v39 + 9) = v40;
  sub_10001E5F4((uint64_t)v19, (uint64_t (*)(void))&type metadata accessor for Capsule);
  uint64_t v41 = v94;
  uint64_t v42 = static Animation.linear(duration:)();
  uint64_t v43 = *v41;
  swift_getKeyPath();
  *(void *)&long long v112 = v43;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v44 = *(void *)(v43 + 24);
  uint64_t v45 = v95;
  sub_10002869C((uint64_t)v23, v95, &qword_100266D20);
  uint64_t v46 = (uint64_t *)(v45 + *(int *)(v96 + 44));
  *uint64_t v46 = v42;
  v46[1] = v44;
  swift_retain();
  sub_1000285F8((uint64_t)v23, &qword_100266D20);
  sub_1000209F8(v45, v110, &qword_100266D28);
  uint64_t v47 = v98;
  sub_10001F8D0(v98);
  LOBYTE(v42) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v56 = v97;
  sub_10002869C(v47, v97, &qword_100266D00);
  uint64_t v57 = v56 + *(int *)(v99 + 44);
  *(unsigned char *)uint64_t v57 = v42;
  *(void *)(v57 + 8) = v49;
  *(void *)(v57 + 16) = v51;
  *(void *)(v57 + 24) = v53;
  *(void *)(v57 + 32) = v55;
  *(unsigned char *)(v57 + 40) = 0;
  sub_1000285F8(v47, &qword_100266D00);
  uint64_t v58 = static Animation.linear(duration:)();
  uint64_t v59 = *v41;
  swift_getKeyPath();
  *(void *)&long long v112 = v59;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  LOBYTE(v44) = *(unsigned char *)(v59 + 32);
  uint64_t v60 = v100;
  sub_10002869C(v56, v100, &qword_100266D08);
  uint64_t v61 = v60 + *(int *)(v101 + 44);
  *(void *)uint64_t v61 = v58;
  *(unsigned char *)(v61 + 8) = v44;
  sub_1000285F8(v56, &qword_100266D08);
  uint64_t v62 = static Animation.linear(duration:)();
  swift_getKeyPath();
  *(void *)&long long v112 = v59;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v63 = *(void *)(v59 + 40);
  uint64_t v64 = v107;
  sub_10002869C(v60, v107, &qword_100266D10);
  char v65 = (uint64_t *)(v64 + *(int *)(KeyPath + 44));
  *char v65 = v62;
  v65[1] = v63;
  swift_retain();
  sub_1000285F8(v60, &qword_100266D10);
  sub_1000209F8(v64, v111, &qword_100266D18);
  swift_getKeyPath();
  *(void *)&long long v112 = v59;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v66 = *(void *)(*(void *)(v59 + 48) + 16);
  uint64_t v117 = 0;
  uint64_t v118 = v66;
  uint64_t KeyPath = swift_getKeyPath();
  sub_100028118((uint64_t)v41, (uint64_t)&v112);
  uint64_t v67 = swift_allocObject();
  long long v68 = v115;
  *(_OWORD *)(v67 + 48) = v114;
  *(_OWORD *)(v67 + 64) = v68;
  *(void *)(v67 + 80) = v116;
  long long v69 = v113;
  *(_OWORD *)(v67 + 16) = v112;
  *(_OWORD *)(v67 + 32) = v69;
  uint64_t v101 = sub_100028654(&qword_100266D30);
  uint64_t v100 = sub_100028654(&qword_100266D38);
  unint64_t v99 = sub_1000327B4();
  uint64_t v98 = sub_100027F14(&qword_100266D50);
  uint64_t v97 = sub_100027F14(&qword_100266D58);
  uint64_t v96 = sub_100027F14(&qword_100266D60);
  uint64_t v70 = sub_100027F14(&qword_100266D68);
  uint64_t v71 = sub_100028030(&qword_100266D70, &qword_100266D50, (void (*)(void))sub_1000333D4);
  unint64_t v72 = sub_1000280AC();
  uint64_t v73 = sub_100028030(&qword_100266DB8, &qword_100266D60, (void (*)(void))sub_10003374C);
  uint64_t v74 = sub_100027F14(&qword_100266DE0);
  uint64_t v75 = sub_100027F14(&qword_100266DE8);
  uint64_t v76 = sub_100027F5C(&qword_100266DF0, &qword_100266DE0);
  uint64_t v77 = sub_100027F5C(&qword_100266DF8, &qword_100266DE8);
  *(void *)&long long v112 = &type metadata for RCRecordButton.TextAnimationValues;
  *((void *)&v112 + 1) = v74;
  *(void *)&long long v113 = v75;
  *((void *)&v113 + 1) = v76;
  *(void *)&long long v114 = v77;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(void *)&long long v112 = v98;
  *((void *)&v112 + 1) = &type metadata for RCRecordButton.TextAnimationValues;
  *(void *)&long long v113 = v97;
  *((void *)&v113 + 1) = v96;
  *(void *)&long long v114 = v70;
  *((void *)&v114 + 1) = v71;
  *(void *)&long long v115 = v72;
  *((void *)&v115 + 1) = v73;
  uint64_t v116 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  v79 = v109;
  ForEach<>.init(_:id:content:)();
  uint64_t v80 = v108;
  sub_10002869C(v110, v108, &qword_100266D28);
  uint64_t v81 = v107;
  sub_10002869C(v111, v107, &qword_100266D18);
  uint64_t v82 = v104;
  v83 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
  v84 = v103;
  uint64_t v85 = v105;
  v83(v103, v79, v105);
  uint64_t v86 = v80;
  uint64_t v87 = v106;
  sub_10002869C(v86, v106, &qword_100266D28);
  uint64_t v88 = sub_100028654(&qword_100266E00);
  sub_10002869C(v81, v87 + *(int *)(v88 + 48), &qword_100266D18);
  v83((char *)(v87 + *(int *)(v88 + 64)), v84, v85);
  v89 = *(void (**)(char *, uint64_t))(v82 + 8);
  v89(v109, v85);
  sub_1000285F8(v111, &qword_100266D18);
  sub_1000285F8(v110, &qword_100266D28);
  v89(v84, v85);
  sub_1000285F8(v81, &qword_100266D18);
  return sub_1000285F8(v108, &qword_100266D28);
}

uint64_t sub_1000209F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100028654(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100020A5C()
{
  double v32 = v0;
  uint64_t v1 = (void *)v0[15];
  char v2 = sub_100020E5C(v0[24], v0[25], v1);
  swift_bridgeObjectRelease();
  if (v1[2])
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v6 = Array.description.getter();
      unint64_t v8 = v7;
      swift_bridgeObjectRelease();
      v0[18] = sub_10002F3B8(v6, v8, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Supported language identifiers = %s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    id v19 = (void (*)(uint64_t, uint64_t))v0[27];
    uint64_t v20 = v0[23];
    uint64_t v21 = v0[21];
    if (v18)
    {
      uint64_t v30 = (void (*)(uint64_t, uint64_t))v0[27];
      uint64_t v29 = v0[21];
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v28 = v20;
      *(_DWORD *)uint64_t v22 = 136315138;
      if (v2) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = 544501614;
      }
      char v24 = v2;
      if (v2) {
        unint64_t v25 = 0xE000000000000000;
      }
      else {
        unint64_t v25 = 0xE400000000000000;
      }
      v0[17] = sub_10002F3B8(v23, v25, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      char v2 = v24;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Transcription is %ssupported for the current language", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v30(v28, v29);
    }
    else
    {

      v19(v20, v21);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[27];
    uint64_t v13 = v0[23];
    uint64_t v14 = v0[21];
    if (v11)
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Transcription is not supported on this hardware", v15, 2u);
      swift_slowDealloc();
    }

    v12(v13, v14);
  }
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26(v2 & 1);
}

uint64_t sub_100020E5C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

id sub_100021B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (objc_class *)type metadata accessor for RCMoreActionsMenuCreator();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  unint64_t v7 = &v6[OBJC_IVAR____TtC10VoiceMemos24RCMoreActionsMenuCreator_recordingUUID];
  *(void *)unint64_t v7 = a1;
  *((void *)v7 + 1) = a2;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  sub_100021CC8((uint64_t)v12, (uint64_t)&v6[OBJC_IVAR____TtC10VoiceMemos24RCMoreActionsMenuCreator_controller]);
  v11.receiver = v6;
  v11.super_class = v5;
  unint64_t v8 = v2;
  *(void *)&v8[OBJC_IVAR____TtC10VoiceMemos36RCRecordingCardMoreButtonMenuCreator_menuCreator] = [v11 init];

  v10.receiver = v8;
  v10.super_class = (Class)type metadata accessor for RCRecordingCardMoreButtonMenuCreator();
  return [super init];
}

uint64_t type metadata accessor for RCRecordingCardMoreButtonMenuCreator()
{
  return self;
}

uint64_t sub_100021CC8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for RCMoreActionsMenuCreator()
{
  return self;
}

uint64_t sub_100021D90()
{
  swift_release();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    char v2 = (void *)Strong;
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    int v3 = *(unsigned __int8 *)(v0 + 48);
    uint64_t v4 = *(void *)(v0 + 40);
    BOOL v5 = (v3 & 0xC0) == 0x80 && v4 == 2;
    if (v5 && v3 == 128)
    {
    }
    else
    {
      char v6 = *(unsigned char *)(v0 + 49);
      uint64_t v7 = *(void *)(v0 + 64);
      sub_10001576C(v4, v3);
      *(void *)(v0 + 40) = v7;
      *(unsigned char *)(v0 + 48) = v6;
      swift_retain();
      CurrentValueSubject.send(_:)();
      swift_release();
      if (qword_100264530 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_10002272C(v8, (uint64_t)qword_100275340);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        int v11 = *(unsigned __int8 *)(v0 + 49);
        uint64_t v12 = *(void *)(v0 + 64);
        uint64_t v13 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 134218240;
        *(void *)(v0 + 40) = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v13 + 12) = 1024;
        *(_DWORD *)(v0 + 40) = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Asset downloading progress = %ld%%, stalled = %{BOOL}d", (uint8_t *)v13, 0x12u);
        swift_slowDealloc();
      }
    }
  }
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100021FBC()
{
  uint64_t v39 = v0;
  uint64_t v1 = type metadata accessor for Locale();
  v0[21] = v1;
  uint64_t v37 = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[22] = v2;
  uint64_t v3 = swift_task_alloc();
  v0[23] = v3;
  static Locale.current.getter();
  sub_100028654(&qword_100269060);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Locale.Language();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = swift_task_alloc();
  Locale.language.getter();
  Locale.Language.languageCode.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v5);
  uint64_t v8 = type metadata accessor for Locale.LanguageCode();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) == 1)
  {
    swift_task_dealloc();
    sub_10013FB80(v4);
    swift_task_dealloc();
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10002272C(v10, (uint64_t)qword_100275340);
    uint64_t v11 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v11, v3, v37);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      sub_10013FBE0();
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[16] = sub_10002F3B8(v15, v16, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v17 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
      v17(v11, v37);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "No language code for locale %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v17(v3, v37);
      swift_task_dealloc();
    }
    else
    {

      uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
      v29(v11, v37);
      swift_task_dealloc();
      v29(v3, v37);
    }
    swift_task_dealloc();
    uint64_t v30 = (uint64_t (*)(void))v0[1];
    return v30(0);
  }
  else
  {
    uint64_t v36 = v2;
    uint64_t v18 = Locale.LanguageCode.identifier.getter();
    unint64_t v20 = v19;
    uint64_t v35 = v18;
    v0[24] = v18;
    v0[25] = v19;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    v0[26] = sub_10002272C(v21, (uint64_t)qword_100275340);
    uint64_t v22 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v22, v3, v37);
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t type = v24;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315394;
      uint64_t v26 = Locale.identifier.getter();
      v0[19] = sub_10002F3B8(v26, v27, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v28(v22, v37);
      *(_WORD *)(v25 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[20] = sub_10002F3B8(v35, v20, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v23, type, "Current locale is %s, language code identifier is %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v28(v22, v37);
      swift_bridgeObjectRelease_n();
    }

    v0[27] = v28;
    swift_task_dealloc();
    double v32 = self;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100031C2C;
    uint64_t v33 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_1000072F4;
    v0[13] = &unk_100227C18;
    v0[14] = v33;
    [v32 supportedLanguagesForTaskHint:1009 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
}

uint64_t sub_10002272C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t destroy for RCRecordingEntity()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

void sub_1000227B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView];
  [v0 addSubview:v2];
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_searchButton];
  [v0 addSubview:v3];
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_emptyStateView];
  [v1 addSubview:v4];
  [v1 addSubview:*(void *)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_topFadeView]];
  [v1 addSubview:*(void *)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_bottomFadeView]];
  [v1 bringSubviewToFront:v4];
  [v2 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v4 setContentHuggingPriority:0 forAxis:0.0];
  [v4 setContentHuggingPriority:1 forAxis:0.0];
  id v52 = self;
  sub_100028654(&qword_100264998);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1001F7530;
  id v6 = [v2 leadingAnchor];
  id v7 = [v1 layoutMarginsGuide];
  id v8 = [v7 leadingAnchor];

  id v9 = [v6 constraintEqualToAnchor:v8];
  *(void *)(v5 + 32) = v9;
  id v10 = [v2 trailingAnchor];
  id v11 = [v1 layoutMarginsGuide];
  id v12 = [v11 trailingAnchor];

  id v13 = [v10 constraintEqualToAnchor:v12];
  *(void *)(v5 + 40) = v13;
  id v14 = [v2 topAnchor];
  id v15 = [v1 layoutMarginsGuide];
  id v16 = [v15 topAnchor];

  id v17 = [v14 constraintEqualToAnchor:v16];
  *(void *)(v5 + 48) = v17;
  id v18 = [v3 bottomAnchor];
  id v19 = [v1 layoutMarginsGuide];
  id v20 = [v19 bottomAnchor];

  id v21 = [v18 constraintEqualToAnchor:v20];
  *(void *)(v5 + 56) = v21;
  id v22 = [v3 centerXAnchor];
  id v23 = [v1 layoutMarginsGuide];
  id v24 = [v23 centerXAnchor];

  id v25 = [v22 constraintEqualToAnchor:v24];
  *(void *)(v5 + 64) = v25;
  id v26 = [v4 leadingAnchor];
  id v27 = [v1 layoutMarginsGuide];
  id v28 = [v27 leadingAnchor];

  id v29 = [v26 constraintEqualToAnchor:v28];
  *(void *)(v5 + 72) = v29;
  id v30 = [v4 trailingAnchor];
  id v31 = [v1 layoutMarginsGuide];
  id v32 = [v31 trailingAnchor];

  id v33 = [v30 constraintEqualToAnchor:v32];
  *(void *)(v5 + 80) = v33;
  id v34 = [v4 topAnchor];
  id v35 = [v1 layoutMarginsGuide];
  id v36 = [v35 topAnchor];

  id v37 = [v34 constraintEqualToAnchor:v36];
  *(void *)(v5 + 88) = v37;
  id v38 = [v4 bottomAnchor];
  id v39 = [v1 layoutMarginsGuide];
  id v40 = [v39 bottomAnchor];

  id v41 = [v38 constraintEqualToAnchor:v40];
  *(void *)(v5 + 96) = v41;
  specialized Array._endMutation()();
  sub_100025F4C(0, &qword_1002649A0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v52 activateConstraints:isa];

  id v43 = [v3 topAnchor];
  id v44 = [v2 bottomAnchor];
  id v45 = [v43 constraintEqualToAnchor:v44 constant:10.0];

  uint64_t v46 = *(void **)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToSearchTopAnchorConstraint];
  *(void *)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToSearchTopAnchorConstraint] = v45;

  id v47 = [v2 bottomAnchor];
  id v48 = [v1 layoutMarginsGuide];
  id v49 = [v48 bottomAnchor];

  id v50 = [v47 constraintEqualToAnchor:v49];
  uint64_t v51 = *(void **)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToLayoutMarginsBottomAnchorConstraint];
  *(void *)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToLayoutMarginsBottomAnchorConstraint] = v50;
}

id sub_100022EC0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToSearchTopAnchorConstraint);
  if (v1)
  {
    uint64_t v2 = v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
    swift_beginAccess();
    [v1 setActive:*(unsigned __int8 *)(v2 + *(int *)(type metadata accessor for TranscriptViewModel() + 44))];
  }
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToLayoutMarginsBottomAnchorConstraint);
  if (v3)
  {
    uint64_t v4 = v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
    swift_beginAccess();
    [v3 setActive:(*(unsigned char *)(v4 + *(int *)(type metadata accessor for TranscriptViewModel() + 44)) & 1) == 0];
  }
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_searchButton);
  uint64_t v6 = v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
  swift_beginAccess();
  uint64_t v7 = type metadata accessor for TranscriptViewModel();
  double v8 = 0.0;
  if (*(unsigned char *)(v6 + *(int *)(v7 + 44))) {
    double v8 = 1.0;
  }
  [v5 setAlpha:v8];
  return [v5 setHidden:(*(unsigned char *)(v6 + *(int *)(v7 + 44)) & 1) == 0];
}

id sub_100023018(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a1;
  uint64_t v30 = type metadata accessor for TranscriptViewModel();
  uint64_t v4 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100028654(&qword_100269250);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UIContentUnavailableConfiguration();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView;
  type metadata accessor for TranscriptView.TranscriptTextView();
  id v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v13 = v2;
  *(void *)&v2[v11] = [v12 init];
  uint64_t v14 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_searchButton;
  *(void *)&v13[v14] = [objc_allocWithZone((Class)UIButton) init];
  uint64_t v15 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_emptyStateView;
  sub_100025F4C(0, &qword_100269298);
  static UIContentUnavailableConfiguration.empty()();
  *(void *)&v13[v15] = UIContentUnavailableView.init(configuration:)();
  uint64_t v16 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_topFadeView;
  id v17 = (objc_class *)type metadata accessor for TranscriptView.FadeView();
  id v18 = objc_allocWithZone(v17);
  *(void *)&v13[v16] = sub_1000237D4(0);
  uint64_t v19 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_bottomFadeView;
  id v20 = objc_allocWithZone(v17);
  *(void *)&v13[v19] = sub_1000237D4(1);
  *(void *)&v13[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToLayoutMarginsBottomAnchorConstraint] = 0;
  *(void *)&v13[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToSearchTopAnchorConstraint] = 0;
  *(void *)&v13[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewTapGestureRecognizer] = 0;
  *(void *)&v13[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewPanGestureRecognizer] = 0;
  id v21 = &v13[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_animatedContentOffsetTarget];
  *(void *)id v21 = 0;
  *((void *)v21 + 1) = 0;
  v21[16] = 1;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    id v22 = (void *)sub_1000D0E2C((unint64_t)&_swiftEmptyArrayStorage);
  }
  else {
    id v22 = &_swiftEmptySetSingleton;
  }
  *(void *)&v13[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_cancellables] = v22;
  uint64_t v23 = v31;
  sub_1000235CC(v31, (uint64_t)&v13[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel]);
  id v24 = &v13[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller];
  *((void *)v24 + 3) = type metadata accessor for TranscriptViewController();
  *((void *)v24 + 4) = &off_100228148;
  *(void *)id v24 = a2;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(swift_unknownObjectWeakInit() + 8) = 1;
  swift_retain();

  id v25 = (objc_class *)type metadata accessor for TranscriptView();
  v32.receiver = v13;
  v32.super_class = v25;
  [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  sub_100012348();
  sub_10001882C();
  sub_100013A48();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v30);
  sub_1000102B4((uint64_t)v9);
  uint64_t v27 = (uint64_t)v26 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
  swift_beginAccess();
  sub_1000235CC(v27, (uint64_t)v6);
  sub_10001D33C((uint64_t)v9, v6);
  sub_10002343C((uint64_t)v6);
  sub_100006FD4((uint64_t)v9);
  sub_10000919C((uint64_t)v9);
  sub_10000D088((uint64_t)v9);
  sub_10000E138();

  sub_10002343C(v23);
  sub_1000285F8((uint64_t)v9, &qword_100269250);
  return v26;
}

uint64_t sub_10002343C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TranscriptViewModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for TranscriptViewModel()
{
  uint64_t result = qword_10026A560;
  if (!qword_10026A560) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000234E4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UIContentUnavailableConfiguration();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t sub_1000235CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TranscriptViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100023630(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  uint64_t v10 = *(void **)(a2 + 96);
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v10;
  *(void *)(a1 + 104) = v9;
  uint64_t v11 = a3[10];
  __dst = (void *)(a1 + v11);
  id v12 = (const void *)(a2 + v11);
  *(_OWORD *)(a1 + 72) = v8;
  uint64_t v13 = type metadata accessor for UIContentUnavailableConfiguration();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v15 = v10;
  if (v19(v12, 1, v13))
  {
    uint64_t v16 = sub_100028654(&qword_100269258);
    memcpy(__dst, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(__dst, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v17 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  return a1;
}

id sub_1000237D4(char a1)
{
  char v2 = a1 & 1;
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for TranscriptView.FadeView();
  id v3 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
  uint64_t v4 = self;
  id v5 = v3;
  id v6 = [v4 systemBackgroundColor];
  [v5 setBackgroundColor:v6];

  [v5 setUserInteractionEnabled:0];
  id v7 = [v5 layer];
  id v8 = sub_10002390C(v2);
  [v7 setMask:v8];

  return v5;
}

uint64_t type metadata accessor for TranscriptView.FadeView()
{
  return self;
}

id sub_10002390C(char a1)
{
  id v2 = [objc_allocWithZone((Class)CAGradientLayer) init];
  sub_100028654((uint64_t *)&unk_1002692A0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1001F0FB0;
  uint64_t v4 = self;
  id v5 = v4;
  if (a1) {
    id v6 = &selRef_clearColor;
  }
  else {
    id v6 = &selRef_whiteColor;
  }
  if (a1) {
    id v7 = &selRef_whiteColor;
  }
  else {
    id v7 = &selRef_clearColor;
  }
  id v8 = [v4 *v6];
  id v9 = [v8 CGColor];

  type metadata accessor for CGColor(0);
  uint64_t v11 = v10;
  *(void *)(v3 + 56) = v10;
  *(void *)(v3 + 32) = v9;
  id v12 = [v5 *v7];
  id v13 = [v12 CGColor];

  *(void *)(v3 + 88) = v11;
  *(void *)(v3 + 64) = v13;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 setColors:isa];

  return v2;
}

void sub_100023A6C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for EmptyStateStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void *initializeWithCopy for RCRecordingEntity(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1000256D0()
{
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v0 + 129) = 5;
  uint64_t v1 = self;
  id v2 = [v1 sharedStyleProvider];
  id v3 = [v2 transcriptViewPlaybackDefaultTextColor];

  unint64_t v4 = sub_1000257E4(v3);
  id v5 = [v1 sharedStyleProvider];
  id v6 = [v5 transcriptViewPlaybackHighlightedTextColor];

  unint64_t v7 = sub_1000257E4(v6);
  *(void *)(v0 + 32) = v4;
  *(void *)(v0 + 40) = v7;
  *(void *)(v0 + 48) = 0;
  *(unsigned char *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
  *(_WORD *)(v0 + 72) = 1;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_WORD *)(v0 + 112) = 255;
  *(unsigned char *)(v0 + 114) = 1;
  *(void *)(v0 + 120) = 0;
  *(unsigned char *)(v0 + 128) = 1;
  return v0;
}

unint64_t sub_1000257E4(void *a1)
{
  unint64_t v2 = sub_100025D8C();
  sub_100025F4C(0, &qword_100264D48);
  sub_100025F08(&qword_100264D50, &qword_100264D48);
  id v3 = NSForegroundColorAttributeName;
  id v4 = a1;
  AnyHashable.init<A>(_:)();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v9 = v2;
  sub_1000258C4((uint64_t)&v8, v3, isUniquelyReferenced_nonNull_native);
  unint64_t v6 = v9;

  swift_bridgeObjectRelease();
  return v6;
}

id sub_1000258C4(uint64_t a1, void *a2, char a3)
{
  id v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100025B80((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_18;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1000D344C();
LABEL_7:
    id v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7] + 40 * v9;
      return (id)sub_1000D3954(a1, v16);
    }
    goto LABEL_13;
  }
  sub_1000D29D4(v12, a3 & 1);
  unint64_t v18 = sub_100025B80((uint64_t)a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_19:
    type metadata accessor for Key(0);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  id v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_13:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  *(void *)(v15[6] + 8 * v9) = a2;
  uint64_t v20 = v15[7] + 40 * v9;
  long long v21 = *(_OWORD *)a1;
  long long v22 = *(_OWORD *)(a1 + 16);
  *(void *)(v20 + 32) = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v20 = v21;
  *(_OWORD *)(v20 + 16) = v22;
  uint64_t v23 = v15[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  void v15[2] = v25;

  return a2;
}

unint64_t sub_100025A44(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100028654(&qword_100267C40);
  unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  uint64_t v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10002869C(v4, (uint64_t)&v14, &qword_100267C48);
    uint64_t v5 = v14;
    unint64_t result = sub_100025B80(v14);
    if (v7) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v5;
    uint64_t v8 = v2[7] + 40 * result;
    long long v9 = v15;
    long long v10 = v16;
    *(void *)(v8 + 32) = v17;
    *(_OWORD *)uint64_t v8 = v9;
    *(_OWORD *)(v8 + 16) = v10;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 48;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100025B80(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_100025C14(a1, v2);
}

unint64_t sub_100025C14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100025D8C()
{
  sub_100028654(&qword_100264D58);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001F0FB0;
  *(void *)(inited + 32) = NSFontAttributeName;
  uint64_t v1 = self;
  uint64_t v2 = NSFontAttributeName;
  id v3 = [v1 sharedStyleProvider];
  [v3 transcriptViewFont];

  sub_100025F4C(0, (unint64_t *)&qword_100264D60);
  sub_100025F08(&qword_100264D68, (unint64_t *)&qword_100264D60);
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 80) = NSParagraphStyleAttributeName;
  uint64_t v4 = NSParagraphStyleAttributeName;
  sub_100025F88();
  sub_100025F4C(0, &qword_100264D70);
  sub_100025F08(&qword_100264D78, &qword_100264D70);
  AnyHashable.init<A>(_:)();
  return sub_100025A44(inited);
}

uint64_t sub_100025F08(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100025F4C(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100025F4C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

id sub_100025F88()
{
  uint64_t v0 = self;
  id v1 = [v0 defaultParagraphStyle];
  [v1 mutableCopy];

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_100025F4C(0, &qword_100264D80);
  if (swift_dynamicCast())
  {
    id v2 = [self sharedStyleProvider];
    [v2 transcriptViewParagraphSpacing];
    [v5 setParagraphSpacing:];

    return v5;
  }
  else
  {
    id v4 = [v0 defaultParagraphStyle];
    return v4;
  }
}

id sub_1000266C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  long long v10 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v12 = [WeakRetained reuseIdentifier];
  uint64_t v13 = [v7 dequeueReusableCellWithReuseIdentifier:v12 forIndexPath:v8];

  objc_opt_class();
  LOBYTE(v12) = objc_opt_isKindOfClass();
  id v14 = v13;
  if (v12)
  {
    id v15 = objc_loadWeakRetained(v10);
    uint64_t v16 = [v15 cellsHashTable];
    [v16 addObject:v14];

    uint64_t v17 = +[RCRecordingCellDisplayModel recordingDisplayModelWithSavedRecording:v9];
    id v18 = objc_loadWeakRetained(v10);
    [v18 _configureCell:v14 usingDisplayModel:v17];

    char v19 = [v7 indexPathForSelectedItem];
    unsigned int v20 = [v8 isEqual:v19];

    if (v20)
    {
      [v14 setSelected:1];
      id v21 = objc_loadWeakRetained(v10);
      unsigned int v22 = [v21 inDidSelect];

      if (v22)
      {
        id v23 = objc_loadWeakRetained(v10);
        BOOL v24 = [v14 UUID];
        [v23 didSelectCellWithUUID:v24];
      }
    }
  }

  return v14;
}

id sub_100026D28(void *a1)
{
  id result = [a1 UUID];
  if (!result) {
    return result;
  }
  id v4 = result;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  id v8 = [a1 recordingTitle];
  if (!v8)
  {
    return (id)swift_bridgeObjectRelease();
  }
  id v9 = v8;
  uint64_t v47 = v5;
  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v49 = v10;

  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v46 = (char *)&v43 - v14;
  id v15 = [a1 creationDate];
  uint64_t v16 = sub_100028654(&qword_100265A20);
  id v48 = &v43;
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  char v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v19, 1, 1, v11);
    goto LABEL_11;
  }
  uint64_t v43 = v13;
  id v44 = v1;
  __chkstk_darwin(v17);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  unsigned int v20 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v20(v19, (char *)&v43 - v14, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
  uint64_t v21 = v12;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v19, 1, v11) == 1)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (id)sub_1000285F8((uint64_t)v19, &qword_100265A20);
  }
  unsigned int v22 = v46;
  v20(v46, v19, v11);
  id v23 = v44;
  id v24 = [v44 recordingUUIDToEntityInteraction];
  *(void *)&long long v54 = v47;
  *((void *)&v54 + 1) = v7;
  swift_bridgeObjectRetain_n();
  id v25 = [v24 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();

  if (v25)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000285F8((uint64_t)&v54, &qword_100265A10);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v54 = 0u;
    long long v55 = 0u;
    sub_1000285F8((uint64_t)&v54, &qword_100265A10);
    uint64_t v26 = swift_bridgeObjectRelease();
    uint64_t v27 = v7;
    __chkstk_darwin(v26);
    uint64_t v29 = (char *)&v43 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v30 = v23;
    uint64_t v31 = v21;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v29, v22, v11);
    swift_bridgeObjectRetain();
    [a1 recordingDuration];
    sub_1000273E0(v47, v7, *(double *)&v45, v49, v29, &v54, v32);
    v57[0] = v54;
    long long v33 = v55;
    id v52 = &type metadata for RCRecordingEntity;
    unint64_t v53 = sub_10002738C();
    uint64_t v34 = swift_allocObject();
    uint64_t v50 = v34;
    long long v35 = v55;
    *(_OWORD *)(v34 + 16) = v54;
    *(_OWORD *)(v34 + 32) = v35;
    *(void *)(v34 + 48) = v56;
    id v36 = objc_allocWithZone((Class)type metadata accessor for UIAppEntityInteraction());
    sub_100027360((uint64_t)v57);
    uint64_t v49 = v33;
    swift_retain();
    id v48 = (uint64_t *)*((void *)&v33 + 1);
    id v37 = v30;
    swift_retain();
    swift_retain();
    id v38 = (void *)UIAppEntityInteraction.init(entity:)();
    id result = [v30 view];
    if (!result)
    {
      __break(1u);
      return result;
    }
    id v39 = result;
    id v40 = v22;
    [result addInteraction:v38];

    id v41 = [v37 recordingUUIDToEntityInteraction];
    uint64_t v50 = v47;
    uint64_t v51 = v27;
    swift_bridgeObjectRetain();
    id v42 = v38;
    [v41 __swift_setObject:v42 forKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    sub_100027334((uint64_t)v57);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v40, v11);
  }
  return (id)swift_bridgeObjectRelease();
}

uint64_t sub_100027334(uint64_t a1)
{
  return a1;
}

uint64_t sub_100027360(uint64_t a1)
{
  return a1;
}

unint64_t sub_10002738C()
{
  unint64_t result = qword_100265A28;
  if (!qword_100265A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100265A28);
  }
  return result;
}

uint64_t sub_1000273E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, void *a6@<X8>, double a7@<D0>)
{
  uint64_t v28 = a1;
  uint64_t v29 = a5;
  uint64_t v26 = a2;
  uint64_t v27 = a6;
  sub_100028654(&qword_100268478);
  uint64_t v10 = type metadata accessor for LocalizedStringResource();
  __chkstk_darwin(v10 - 8);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v11 = EntityProperty<>.init(title:)();
  uint64_t v12 = sub_100028654(&qword_100268480);
  __chkstk_darwin(v12);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v13 = EntityProperty<>.init(title:)();
  uint64_t v14 = sub_100028654(&qword_100268488);
  __chkstk_darwin(v14);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v15 = EntityProperty<>.init(title:)();
  double v30 = a3;
  uint64_t v31 = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void **)(v16 - 8);
  uint64_t v18 = v17[8];
  __chkstk_darwin(v16);
  char v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v20 = (uint64_t (*)(char *, uint64_t, uint64_t))v17[2];
  uint64_t v21 = v20(v19, (uint64_t)v29, v16);
  __chkstk_darwin(v21);
  v20(v19, (uint64_t)v19, v16);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v22 = v26;
  swift_bridgeObjectRetain();
  EntityProperty.wrappedValue.setter();
  id v23 = (void (*)(char *, uint64_t))v17[1];
  v23(v19, v16);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  double v30 = a7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v23(v29, v16);
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  id v25 = v27;
  *uint64_t v27 = v28;
  v25[1] = v22;
  v25[2] = v11;
  void v25[3] = v13;
  unsigned char v25[4] = v15;
  return result;
}

uint64_t sub_10002794C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100028654(&qword_100266DC8);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  id v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  uint64_t v12 = sub_100028654(&qword_100266DD8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v9, a1, v12);
  *(void *)&v9[*(int *)(v7 + 44)] = v10;
  static UnitPoint.center.getter();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  sub_10002869C((uint64_t)v9, a3, &qword_100266DC8);
  uint64_t v17 = (void *)(a3 + *(int *)(sub_100028654(&qword_100266D60) + 36));
  *uint64_t v17 = v11;
  v17[1] = v11;
  v17[2] = v14;
  v17[3] = v16;
  return sub_1000285F8((uint64_t)v9, &qword_100266DC8);
}

uint64_t sub_100027A78(unint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_100028654(&qword_100266D50);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = *a1;
  uint64_t v8 = *a2;
  swift_getKeyPath();
  *(void *)&long long v31 = v8;
  sub_100027FA0((unint64_t *)&qword_100265D40, (void (*)(uint64_t))type metadata accessor for RCRecordButtonViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (v7 < *(void *)(v10 + 16))
    {
      uint64_t v11 = v10 + 48 * v7;
      uint64_t v12 = *(void *)(v11 + 40);
      uint64_t v29 = *(void *)(v11 + 32);
      uint64_t v28 = v12;
      int v27 = *(unsigned __int8 *)(v11 + 48);
      uint64_t v13 = *(void *)(v11 + 56);
      uint64_t v14 = *(void *)(v11 + 64);
      uint64_t v15 = *(void *)(v11 + 72);
      v39[0] = v29;
      v39[1] = v12;
      char v40 = v27;
      uint64_t v41 = v13;
      uint64_t v42 = v14;
      uint64_t v30 = v13;
      v26[6] = v14;
      uint64_t v43 = v15;
      v26[5] = v15;
      sub_100028710(v29, v12, v27);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      sub_1000281F8((uint64_t)v39, (uint64_t)v6);
      long long v38 = xmmword_1001F2B80;
      uint64_t v16 = *a2;
      swift_getKeyPath();
      *(void *)&long long v31 = v16;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      char v17 = *(unsigned char *)(v16 + 64);
      uint64_t v36 = *(void *)(v16 + 56);
      char v37 = v17;
      sub_100028118((uint64_t)a2, (uint64_t)&v31);
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v7;
      long long v19 = v31;
      *(_OWORD *)(v18 + 40) = v32;
      long long v20 = v34;
      *(_OWORD *)(v18 + 56) = v33;
      *(_OWORD *)(v18 + 72) = v20;
      *(void *)(v18 + 88) = v35;
      *(_OWORD *)(v18 + 24) = v19;
      v26[4] = sub_100028654(&qword_100266D58);
      void v26[3] = sub_100028654(&qword_100266D60);
      v26[2] = sub_100028654(&qword_100266D68);
      v26[1] = sub_100028030(&qword_100266D70, &qword_100266D50, (void (*)(void))sub_1000333D4);
      v26[0] = sub_1000280AC();
      sub_100028030(&qword_100266DB8, &qword_100266D60, (void (*)(void))sub_10003374C);
      uint64_t v21 = (uint64_t)v6;
      uint64_t v22 = sub_100027F14(&qword_100266DE0);
      uint64_t v23 = sub_100027F14(&qword_100266DE8);
      uint64_t v24 = sub_100027F5C(&qword_100266DF0, &qword_100266DE0);
      uint64_t v25 = sub_100027F5C(&qword_100266DF8, &qword_100266DE8);
      *(void *)&long long v31 = &type metadata for RCRecordButton.TextAnimationValues;
      *((void *)&v31 + 1) = v22;
      *(void *)&long long v32 = v23;
      *((void *)&v32 + 1) = v24;
      *(void *)&long long v33 = v25;
      swift_getOpaqueTypeConformance2();
      View.keyframeAnimator<A, B, C, D>(initialValue:trigger:content:keyframes:)();
      swift_release();
      sub_100028700(v29, v28, v27);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return sub_1000285F8(v21, &qword_100266D50);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100027F14(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100027F5C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100027F14(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100027FA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100027FE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100028030(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100027F14(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000280AC()
{
  unint64_t result = qword_100267BD0;
  if (!qword_100267BD0)
  {
    sub_100027F14(&qword_100266D58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267BD0);
  }
  return result;
}

uint64_t sub_100028118(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for RCRecordButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a2 + 8;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  unint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t sub_1000281F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v3 = sub_100028654(&qword_100266DA0) - 8;
  __chkstk_darwin(v3);
  char v40 = (uint64_t *)((char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for Image.Scale();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100028654(&qword_100266D90);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_100028654(&qword_100266D80) - 8;
  __chkstk_darwin(v41);
  uint64_t v38 = a1;
  uint64_t v39 = (uint64_t)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = Text.font(_:)();
  uint64_t v16 = v15;
  uint64_t v37 = v17;
  LOBYTE(a1) = v18 & 1;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for Image.Scale.large(_:), v5);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v20 = *(int *)(v3 + 36);
  uint64_t v21 = v40;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v40 + v20, v8, v5);
  *uint64_t v21 = KeyPath;
  sub_10002869C((uint64_t)v21, (uint64_t)&v12[*(int *)(v10 + 44)], &qword_100266DA0);
  *(void *)uint64_t v12 = v14;
  *((void *)v12 + 1) = v16;
  char v12[16] = a1;
  *((void *)v12 + 3) = v37;
  swift_bridgeObjectRetain();
  sub_100028710(v14, v16, a1);
  sub_1000285F8((uint64_t)v21, &qword_100266DA0);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100028700(v14, v16, a1);
  swift_bridgeObjectRelease();
  uint64_t v22 = v39;
  uint64_t v23 = *(void *)(v38 + 40);
  sub_10002869C((uint64_t)v12, v39, &qword_100266D90);
  *(void *)(v22 + *(int *)(v41 + 44)) = v23;
  swift_retain();
  sub_1000285F8((uint64_t)v12, &qword_100266D90);
  LOBYTE(v21) = static Edge.Set.horizontal.getter();
  uint64_t v24 = *v42;
  swift_getKeyPath();
  uint64_t v44 = v24;
  sub_100027FA0((unint64_t *)&qword_100265D40, (void (*)(uint64_t))type metadata accessor for RCRecordButtonViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  EdgeInsets.init(_all:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v33 = v43;
  sub_10002869C(v22, v43, &qword_100266D80);
  uint64_t v34 = v33 + *(int *)(sub_100028654(&qword_100266D50) + 36);
  *(unsigned char *)uint64_t v34 = (_BYTE)v21;
  *(void *)(v34 + 8) = v26;
  *(void *)(v34 + 16) = v28;
  *(void *)(v34 + 24) = v30;
  *(void *)(v34 + 32) = v32;
  *(unsigned char *)(v34 + 40) = 0;
  return sub_1000285F8(v22, &qword_100266D80);
}

uint64_t sub_1000285F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100028654(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100028654(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10002869C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100028654(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100028700(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100028710(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_100029464(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_observers);
  uint64_t v4 = *(void **)(v3 + 16);
  swift_retain();
  if (([v4 containsObject:a1] & 1) == 0) {
    [*(id *)(v3 + 16) addObject:a1];
  }

  return swift_release();
}

void sub_10002B504(uint64_t a1)
{
  [*(id *)(a1 + 32) setAxis:0];
  [*(id *)(a1 + 32) setAlignment:0];
  [*(id *)(a1 + 32) setDistribution:0];
  id v2 = *(void **)(a1 + 32);
  if (*(void *)(a1 + 56) == 2)
  {
    v20[0] = v2[13];
    v20[1] = v2[20];
    v20[2] = v2[21];
    v20[3] = v2[19];
    v20[4] = v2[14];
    uint64_t v3 = v20;
    uint64_t v4 = 5;
  }
  else
  {
    v19[0] = v2[13];
    v19[1] = v2[14];
    uint64_t v3 = v19;
    uint64_t v4 = 2;
  }
  uint64_t v5 = +[NSArray arrayWithObjects:v3 count:v4];
  id v6 = [objc_alloc((Class)NUIContainerStackView) initWithArrangedSubviews:v5];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 144);
  *(void *)(v7 + 144) = v6;

  id v9 = objc_alloc((Class)NUIContainerStackView);
  uint64_t v10 = *(void *)(a1 + 32);
  v18[0] = *(void *)(a1 + 40);
  v18[1] = *(void *)(v10 + 144);
  uint64_t v11 = +[NSArray arrayWithObjects:v18 count:2];
  id v12 = [v9 initWithArrangedSubviews:v11];
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void **)(v13 + 128);
  *(void *)(v13 + 128) = v12;

  [*(id *)(*(void *)(a1 + 32) + 128) setAxis:1];
  [*(id *)(a1 + 48) descriptionViewTitleToSecondaryPadding];
  [*(id *)(*(void *)(a1 + 32) + 128) setSpacing:];
  [*(id *)(a1 + 32) _setArrangedSubviewsWithTitleDateDurationStack:*(void *)(*(void *)(a1 + 32) + 128) moreButton:*(void *)(*(void *)(a1 + 32) + 136)];
  id v15 = [*(id *)(a1 + 32) style];
  if (v15 == (id)2) {
    uint64_t v16 = 2;
  }
  else {
    uint64_t v16 = 3;
  }
  if (v15 == (id)2) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = 3;
  }
  [*(id *)(*(void *)(a1 + 32) + 144) setDistribution:v16];
  [*(id *)(*(void *)(a1 + 32) + 128) setAlignment:v17];
  [*(id *)(a1 + 32) _updateStackIfNeeded];
}

void sub_10002C9A0(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    uint64_t v4 = *(void **)(*(void *)(Strong + OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_observers)
                  + 16);
    swift_retain();
    id v5 = [v4 allObjects];
    sub_100028654(&qword_100268030);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v7)
      {
LABEL_4:
        if (v7 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            id v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            id v9 = *(void **)(v6 + 8 * i + 32);
            swift_unknownObjectRetain();
          }
          [v9 deviceTranscriptionSupportDidChange:v1];
          swift_unknownObjectRelease();
        }
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10002DA4C()
{
  unint64_t v1 = 0;
  char v40 = (void *)(v0 + 48);
  id v2 = (char *)&_swiftEmptyArrayStorage;
  while (2)
  {
    if (v1 >= 5)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
LABEL_35:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      Swift::UInt v3 = 0;
      Swift::UInt v4 = (Swift::UInt)*(&off_100223748 + v1 + 4);
      unint64_t v39 = v1 + 1;
      do
      {
        uint64_t v6 = sub_1000ED348(v4, v3);
        if (v9)
        {
          if (v4 > 4) {
            goto LABEL_34;
          }
          uint64_t v10 = v9;
          if (((1 << v4) & 0x19) != 0)
          {
            char v42 = v8;
            uint64_t v43 = v6;
            uint64_t v41 = v7;
            uint64_t v11 = self;
            id v12 = [v11 sharedStyleProvider];
            id v13 = [v12 recordingControlTextFont];

            uint64_t v14 = Font.init(_:)();
            id v15 = &selRef_recordingControlFontColorResume;
            switch(v4)
            {
              case 0uLL:
              case 3uLL:
                id v15 = &selRef_recordingControlFontColor;
                break;
              case 1uLL:
              case 2uLL:
                swift_release();
                uint64_t v6 = v43;
                uint64_t v7 = v41;
                char v5 = v42 & 1;
                goto LABEL_6;
              case 4uLL:
                break;
              default:
                goto LABEL_34;
            }
            id v16 = [v11 sharedStyleProvider];
            id v17 = [v16 *v15];

            uint64_t v18 = Color.init(_:)();
            sub_100028710(v43, v41, v42 & 1);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              id v2 = sub_10002E2D8(0, *((void *)v2 + 2) + 1, 1, v2);
            }
            unint64_t v20 = *((void *)v2 + 2);
            unint64_t v19 = *((void *)v2 + 3);
            if (v20 >= v19 >> 1) {
              id v2 = sub_10002E2D8((char *)(v19 > 1), v20 + 1, 1, v2);
            }
            *((void *)v2 + 2) = v20 + 1;
            uint64_t v21 = v2;
            uint64_t v22 = &v2[48 * v20];
            *((void *)v22 + 4) = v43;
            *((void *)v22 + 5) = v41;
            v22[48] = v42 & 1;
            *((void *)v22 + 7) = v10;
            *((void *)v22 + 8) = v14;
            *((void *)v22 + 9) = v18;
            swift_beginAccess();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v24 = (void *)*v40;
            *char v40 = 0x8000000000000000;
            unint64_t v26 = sub_10002DE84(v4, v3);
            uint64_t v27 = v24[2];
            BOOL v28 = (v25 & 1) == 0;
            uint64_t v29 = v27 + v28;
            if (__OFADD__(v27, v28))
            {
              __break(1u);
LABEL_32:
              __break(1u);
              goto LABEL_33;
            }
            char v30 = v25;
            if (v24[3] >= v29)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                sub_1000D3624();
              }
            }
            else
            {
              sub_10002DFF8(v29, isUniquelyReferenced_nonNull_native);
              unint64_t v31 = sub_10002DE84(v4, v3);
              if ((v30 & 1) != (v32 & 1)) {
                goto LABEL_35;
              }
              unint64_t v26 = v31;
            }
            id v2 = v21;
            if (v30)
            {
              *(void *)(v24[7] + 8 * v26) = v20;
            }
            else
            {
              v24[(v26 >> 6) + 8] |= 1 << v26;
              uint64_t v33 = (Swift::UInt *)(v24[6] + 16 * v26);
              *uint64_t v33 = v4;
              v33[1] = v3;
              *(void *)(v24[7] + 8 * v26) = v20;
              uint64_t v34 = v24[2];
              BOOL v35 = __OFADD__(v34, 1);
              uint64_t v36 = v34 + 1;
              if (v35) {
                goto LABEL_32;
              }
              void v24[2] = v36;
            }
            *char v40 = v24;
            swift_bridgeObjectRelease();
            swift_endAccess();
            sub_100028700(v43, v41, v42 & 1);
            swift_release();
            swift_release();
          }
          else
          {
            char v5 = v8 & 1;
LABEL_6:
            sub_100028700(v6, v7, v5);
          }
          swift_bridgeObjectRelease();
        }
        ++v3;
      }
      while (v3 != 3);
      unint64_t v1 = v39;
      if (v39 != 5) {
        continue;
      }
      *(void *)(v38 + 40) = v2;
      return swift_bridgeObjectRelease();
    }
    return result;
  }
}

unint64_t sub_10002DE84(Swift::UInt a1, Swift::UInt a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Swift::Int v4 = Hasher._finalize()();

  return sub_10002DF04(a1, a2, v4);
}

unint64_t sub_10002DF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = *(void *)(v3 + 48);
    do
    {
      if (*(void *)(v8 + 16 * result) == a1 && *(void *)(v8 + 16 * result + 8) == a2) {
        break;
      }
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_10002DF88()
{
  unint64_t result = qword_100269F70;
  if (!qword_100269F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100269F70);
  }
  return result;
}

uint64_t sub_10002DFF8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100028654(&qword_100264D88);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v32 = a2;
    int64_t v8 = 0;
    uint64_t v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v33) {
          goto LABEL_31;
        }
        unint64_t v18 = v34[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v33) {
            goto LABEL_31;
          }
          unint64_t v18 = v34[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v33)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v34 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v33) {
                  goto LABEL_31;
                }
                unint64_t v18 = v34[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      unint64_t v20 = (Swift::UInt *)(*(void *)(v5 + 48) + 16 * v16);
      Swift::UInt v22 = *v20;
      Swift::UInt v21 = v20[1];
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = (Swift::UInt *)(*(void *)(v7 + 48) + 16 * v13);
      *uint64_t v14 = v22;
      v14[1] = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v13) = v23;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

char *sub_10002E2D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100028654(&qword_10026A008);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[48 * v8 + 32]) {
          memmove(v12, a4 + 32, 48 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100032460(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002E41C@<X0>(uint64_t *a1@<X8>)
{
  id v2 = v1;
  Swift::Int v4 = (int *)type metadata accessor for TranscriptViewModel();
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v50 - v7;
  uint64_t v9 = v1[16];
  if (v9)
  {
    uint64_t v10 = type metadata accessor for TranscriptViewPresenter();
    uint64_t v11 = v9;
  }
  else
  {
    uint64_t v56 = v6;
    uint64_t v58 = v1 + 2;
    uint64_t v12 = sub_10001510C(v1 + 2, v1[5]);
    uint64_t v13 = *v12;
    uint64_t v52 = *(void *)(*v12 + 32);
    uint64_t v14 = v52;
    char v15 = *(unsigned char *)(v13 + 113);
    char v16 = *(unsigned char *)(v13 + 114);
    uint64_t v17 = v2[10];
    long long v55 = a1;
    uint64_t v57 = v2 + 7;
    unint64_t v18 = sub_10001510C(v2 + 7, v17);
    uint64_t v19 = *(void *)(*v18 + 64);
    uint64_t v54 = *(void *)(*v18 + 72);
    uint64_t v20 = v54;
    Swift::UInt v21 = &v8[v4[10]];
    uint64_t v22 = type metadata accessor for UIContentUnavailableConfiguration();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
    *(void *)uint64_t v8 = v19;
    *((void *)v8 + 1) = v20;
    *((void *)v8 + 2) = v14;
    *((void *)v8 + 3) = &_swiftEmptyArrayStorage;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    v8[64] = 1;
    *((void *)v8 + 9) = 0;
    *((void *)v8 + 10) = 0;
    *((_WORD *)v8 + 44) = 256;
    *((void *)v8 + 12) = 0;
    *((void *)v8 + 13) = 0;
    v8[v4[11]] = v15;
    v8[v4[12]] = v16;
    a1 = v55;
    sub_10002F970((uint64_t)(v2 + 7), (uint64_t)v62);
    swift_unknownObjectWeakLoadStrong();
    uint64_t v50 = v2[13];
    swift_unknownObjectWeakLoadStrong();
    uint64_t v51 = v2[15];
    uint64_t v23 = sub_10002F368((uint64_t)v62, v63);
    unint64_t v53 = &v50;
    __chkstk_darwin(v23);
    unint64_t v25 = (uint64_t *)((char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v26 + 16))(v25);
    uint64_t v27 = *v25;
    uint64_t v28 = type metadata accessor for TranscriptViewDataProvider();
    uint64_t v60 = v28;
    uint64_t v61 = &off_100228000;
    v59[0] = v27;
    type metadata accessor for TranscriptViewController();
    BOOL v29 = (void *)swift_allocObject();
    uint64_t v30 = sub_10002F368((uint64_t)v59, v28);
    __chkstk_darwin(v30);
    char v32 = (uint64_t *)((char *)&v50 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v33 + 16))(v32);
    uint64_t v34 = *v32;
    void v29[5] = v28;
    v29[6] = &off_100228000;
    v29[2] = v34;
    v29[8] = 0;
    swift_unknownObjectWeakInit();
    v29[10] = 0;
    swift_unknownObjectWeakInit();
    v29[8] = v50;
    swift_unknownObjectWeakAssign();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    v29[10] = v51;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    sub_10002F48C((uint64_t)v59);
    sub_10002F48C((uint64_t)v62);
    uint64_t v35 = v56;
    sub_1000235CC((uint64_t)v8, v56);
    id v36 = objc_allocWithZone((Class)type metadata accessor for TranscriptView());
    swift_retain();
    id v37 = sub_100023018(v35, (uint64_t)v29);
    swift_release();
    sub_10002F970((uint64_t)v58, (uint64_t)v62);
    sub_10002F970((uint64_t)v57, (uint64_t)v59);
    uint64_t v38 = sub_10002F368((uint64_t)v62, v63);
    __chkstk_darwin(v38);
    char v40 = (uint64_t *)((char *)&v50 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v41 + 16))(v40);
    uint64_t v42 = sub_10002F368((uint64_t)v59, v60);
    __chkstk_darwin(v42);
    uint64_t v44 = (uint64_t *)((char *)&v50 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v45 + 16))(v44);
    uint64_t v46 = *v40;
    uint64_t v47 = *v44;
    id v48 = v37;
    uint64_t v11 = sub_10001C660(v46, v47, (uint64_t)v48);
    sub_10002F48C((uint64_t)v59);
    sub_10002F48C((uint64_t)v62);
    v2[16] = v11;
    swift_retain();
    swift_release();

    swift_release();
    uint64_t v10 = type metadata accessor for TranscriptViewPresenter();
    sub_10002343C((uint64_t)v8);
  }
  a1[3] = v10;
  a1[4] = (uint64_t)&off_100227DF0;
  *a1 = v11;
  return swift_retain();
}

id sub_10002EA28()
{
  uint64_t v1 = sub_100028654(&qword_1002699E0);
  __chkstk_darwin(v1 - 8);
  uint64_t v67 = (char *)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = &v0[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_recordingStatePublisher];
  uint64_t v4 = type metadata accessor for RecordingStatePublisher();
  uint64_t v5 = (void *)swift_allocObject();
  uint64_t v6 = self;
  uint64_t v7 = v0;
  id v8 = [v6 sharedInstance];
  v5[2] = v8;
  v5[3] = 0;
  LOBYTE(v72[0]) = 0;
  sub_100028654(&qword_100266BE8);
  swift_allocObject();
  v5[4] = CurrentValueSubject.init(_:)();
  v72[0] = v8;
  swift_getKeyPath();
  swift_allocObject();
  swift_weakInit();
  id v9 = v8;
  uint64_t v10 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
  swift_release();
  swift_release();

  uint64_t v11 = (void *)v5[3];
  v5[3] = v10;

  *((void *)v3 + 3) = v4;
  *((void *)v3 + 4) = &off_100225060;
  *(void *)uint64_t v3 = v5;
  sub_10002F970((uint64_t)v3, (uint64_t)v72);
  uint64_t v12 = sub_10002F368((uint64_t)v72, v73);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v16 = *v14;
  uint64_t v70 = v4;
  uint64_t v71 = &off_100225060;
  v69[0] = v16;
  uint64_t v17 = (char *)objc_allocWithZone((Class)type metadata accessor for LocationManagerStateCoordinator());
  uint64_t v18 = sub_10002F368((uint64_t)v69, v70);
  __chkstk_darwin(v18);
  uint64_t v20 = (uint64_t *)((char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = sub_1000169D4(*v20, v17);
  sub_10002F48C((uint64_t)v69);
  sub_10002F48C((uint64_t)v72);
  *(void *)&v7[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_locationManagerStateCoordinator] = v22;
  sub_10002F970((uint64_t)v3, (uint64_t)v72);
  uint64_t v23 = sub_10002F368((uint64_t)v72, v73);
  __chkstk_darwin(v23);
  unint64_t v25 = (uint64_t *)((char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  uint64_t v27 = *v25;
  uint64_t v70 = v4;
  uint64_t v71 = &off_100225060;
  v69[0] = v27;
  type metadata accessor for BackgroundTaskManager();
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = sub_10002F368((uint64_t)v69, v4);
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = *(void *)(v30 + 64);
  __chkstk_darwin(v29);
  unint64_t v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v33 = *(void (**)(char *))(v30 + 16);
  v33((char *)&v66 - v32);
  uint64_t v34 = sub_100010FA4(*(uint64_t *)((char *)&v66 - v32), v28);
  sub_10002F48C((uint64_t)v69);
  sub_10002F48C((uint64_t)v72);
  *(void *)&v7[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_backgroundTaskManager] = v34;
  sub_10002F970((uint64_t)v3, (uint64_t)v72);
  uint64_t v35 = sub_10002F368((uint64_t)v72, v73);
  __chkstk_darwin(v35);
  id v37 = (uint64_t *)((char *)&v66 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v38 + 16))(v37);
  uint64_t v39 = *v37;
  uint64_t v70 = v4;
  uint64_t v71 = &off_100225060;
  v69[0] = v39;
  type metadata accessor for SecureAppAssertionManager();
  uint64_t v40 = swift_allocObject();
  uint64_t v41 = sub_10002F368((uint64_t)v69, v4);
  __chkstk_darwin(v41);
  v33((char *)&v66 - v32);
  uint64_t v42 = sub_100010CC8(*(uint64_t *)((char *)&v66 - v32), v40);
  sub_10002F48C((uint64_t)v69);
  sub_10002F48C((uint64_t)v72);
  *(void *)&v7[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_secureAppAssertionManager] = v42;
  type metadata accessor for PlatterSuccessStatePresentationCoordinator();
  uint64_t v43 = swift_allocObject();
  *(void *)&v7[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_platterSuccessStatePresentationCoordinator] = v43;
  sub_10002F970((uint64_t)v3, (uint64_t)v72);
  uint64_t v44 = sub_10002F368((uint64_t)v72, v73);
  __chkstk_darwin(v44);
  uint64_t v46 = (uint64_t *)((char *)&v66 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v47 + 16))(v46);
  uint64_t v48 = *v46;
  uint64_t v70 = v4;
  uint64_t v71 = &off_100225060;
  v69[0] = v48;
  type metadata accessor for ActivityManagerStateCoordinator();
  uint64_t v49 = (void *)swift_allocObject();
  uint64_t v50 = sub_10002F368((uint64_t)v69, v4);
  __chkstk_darwin(v50);
  v33((char *)&v66 - v32);
  uint64_t v51 = *(uint64_t *)((char *)&v66 - v32);
  swift_retain();
  uint64_t v52 = sub_100013F18(v51, v43, v49);
  sub_10002F48C((uint64_t)v69);
  sub_10002F48C((uint64_t)v72);
  *(void *)&v7[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_activityManagerStateCoordinator] = v52;
  sub_10002F970((uint64_t)v3, (uint64_t)v72);
  uint64_t v53 = sub_10002F368((uint64_t)v72, v73);
  __chkstk_darwin(v53);
  long long v55 = (uint64_t *)((char *)&v66 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v56 + 16))(v55);
  uint64_t v57 = sub_100010A3C(*v55);
  sub_10002F48C((uint64_t)v72);
  *(void *)&v7[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_controlCenterWidgetStateCoordinator] = v57;

  if (qword_100264628 != -1) {
    swift_once();
  }
  uint64_t v58 = (void *)qword_100275560;
  uint64_t v59 = type metadata accessor for TaskPriority();
  uint64_t v60 = (uint64_t)v67;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v67, 1, 1, v59);
  type metadata accessor for MainActor();
  id v61 = v58;
  uint64_t v62 = static MainActor.shared.getter();
  uint64_t v63 = (void *)swift_allocObject();
  v63[2] = v62;
  v63[3] = &protocol witness table for MainActor;
  v63[4] = v61;
  sub_10001E1A8(v60, (uint64_t)&unk_100266678, (uint64_t)v63);
  swift_release();
  uint64_t v64 = (objc_class *)type metadata accessor for RecorderAppDelegateDependencyContainer();
  v68.receiver = v7;
  v68.super_class = v64;
  return [super init];
}

uint64_t sub_10002F368(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10002F3B8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10002F538(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10002F4DC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10002F4DC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10002F48C((uint64_t)v12);
  return v7;
}

uint64_t sub_10002F48C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10002F4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10002F538(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10002F6F4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10002F6F4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10002F78C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10002F9D4(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10002F9D4(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10002F78C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10002F904(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10002F904(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100028654(&qword_10026A478);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_10002F970(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10002F9D4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100028654(&qword_10026A478);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10003002C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v20 = +[RCRecorderStyleProvider sharedStyleProvider];
  unint64_t v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int8 v6 = [WeakRetained isToggled];

  if (v6)
  {
    int64_t v7 = +[UIButtonConfiguration filledButtonConfiguration];
    id v8 = objc_loadWeakRetained(v4);
    int64_t v9 = [v8 toggleImage];

    [v7 setImage:v9];
    id v10 = objc_loadWeakRetained(v4);
    size_t v11 = [v10 imageSymbolConfiguration];
    [v7 setPreferredSymbolConfigurationForImage:v11];

    uint64_t v12 = [v20 trimButtonTintColor];
    +[UIColor whiteColor];
  }
  else
  {
    int64_t v7 = +[UIButtonConfiguration plainButtonConfiguration];
    id v13 = objc_loadWeakRetained(v4);
    int64_t v9 = [v13 defaultImage];

    [v7 setImage:v9];
    id v14 = objc_loadWeakRetained(v4);
    uint64_t v15 = [v14 imageSymbolConfiguration];
    [v7 setPreferredSymbolConfigurationForImage:v15];

    uint64_t v12 = +[UIColor clearColor];
    [v20 trimButtonTintColor];
  uint64_t v16 = };
  [v7 setBaseBackgroundColor:v12];
  id v17 = objc_loadWeakRetained(v4);
  if ([v17 isUserInteractionEnabled])
  {
    [v7 setBaseForegroundColor:v16];
  }
  else
  {
    uint64_t v18 = +[UIColor systemGrayColor];
    [v7 setBaseForegroundColor:v18];
  }
  [v20 toggleButtonContentInsets];
  [v7 setContentInsets:];
  uint64_t v19 = [v7 background];
  [v20 toggleButtonCornerRadius];
  [v19 setCornerRadius:];

  [v7 setCornerStyle:-1];
  [v3 setConfiguration:v7];
}

__n128 initializeWithTake for AudioAssetReaderOutput.SampleBuffer(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for RCRecordButton.TextAnimationValues()
{
  return &type metadata for RCRecordButton.TextAnimationValues;
}

unsigned char *initializeBufferWithCopyOfBuffer for AutoScrollStyle(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t sub_100031434@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for RCRecordButtonViewModel()
{
  uint64_t result = qword_100265AA0;
  if (!qword_100265AA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for RCRecordButtonViewModel.InnerViewType()
{
  return &type metadata for RCRecordButtonViewModel.InnerViewType;
}

ValueMetadata *type metadata accessor for RCRecordButtonModel()
{
  return &type metadata for RCRecordButtonModel;
}

uint64_t sub_1000314B8(unint64_t *a1)
{
  return sub_100027A78(a1, (uint64_t *)(v1 + 16));
}

__n128 initializeWithTake for HighlightStyle(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for RCRecordButtonViewModel.Style()
{
  return &type metadata for RCRecordButtonViewModel.Style;
}

uint64_t sub_1000314E4(uint64_t a1)
{
  unint64_t v2 = sub_100031520();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100031520()
{
  unint64_t result = qword_100265DF0;
  if (!qword_100265DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265DF0);
  }
  return result;
}

uint64_t sub_100031574(uint64_t a1)
{
  unint64_t v2 = sub_1000315B0();

  return static CustomIntentMigratedAppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_1000315B0()
{
  unint64_t result = qword_100268688;
  if (!qword_100268688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100268688);
  }
  return result;
}

uint64_t sub_10003160C(uint64_t a1)
{
  unint64_t v2 = sub_100031648();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100031648()
{
  unint64_t result = qword_100265E30;
  if (!qword_100265E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100265E30);
  }
  return result;
}

uint64_t sub_10003169C()
{
  return sub_10000FC0C();
}

uint64_t type metadata accessor for ReadOnlyCurrentValueSubject()
{
  return sub_100011BC4();
}

uint64_t getEnumTagSinglePayload for RCRecordButtonModel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_100031718(uint64_t a1)
{
  unint64_t v2 = sub_100031754();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100031754()
{
  unint64_t result = qword_100265E18;
  if (!qword_100265E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100265E18);
  }
  return result;
}

uint64_t sub_1000317A8(uint64_t a1)
{
  unint64_t v2 = sub_1000317E4();

  return static CustomIntentMigratedAppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_1000317E4()
{
  unint64_t result = qword_1002685E8;
  if (!qword_1002685E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1002685E8);
  }
  return result;
}

uint64_t sub_100031838(uint64_t a1)
{
  unint64_t v2 = sub_100031874();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100031874()
{
  unint64_t result = qword_100268A20;
  if (!qword_100268A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268A20);
  }
  return result;
}

uint64_t sub_1000318C8(uint64_t a1)
{
  unint64_t v2 = sub_100031904();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100031904()
{
  unint64_t result = qword_100265E60;
  if (!qword_100265E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265E60);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TranscriptionModelAssetService.DownloadState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 8) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 8) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

unint64_t sub_1000319AC()
{
  return 0xD000000000000015;
}

void type metadata accessor for RCUserActivityType(uint64_t a1)
{
}

uint64_t destroy for TranscriptionModelAssetService.DownloadState(uint64_t a1)
{
  return sub_10001576C(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t storeEnumTagSinglePayload for TranscriptionModelAssetService.DownloadState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(unsigned char *)(result + 8) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_100031A44(uint64_t a1)
{
  return sub_100015604(a1);
}

uint64_t sub_100031A4C(uint64_t *a1)
{
  return sub_10001246C(a1);
}

uint64_t storeEnumTagSinglePayload for RCRecordButtonModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_100031A98(uint64_t a1)
{
  unint64_t v2 = sub_100031AD4();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100031AD4()
{
  unint64_t result = qword_100265A40;
  if (!qword_100265A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265A40);
  }
  return result;
}

uint64_t sub_100031B28@<X0>(uint64_t a1@<X8>)
{
  return sub_10001E354((uint64_t *)(v1 + 16), a1);
}

unint64_t sub_100031B30()
{
  return 0xD000000000000017;
}

uint64_t initializeWithTake for TranscriptionModelAssetService.DownloadState(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

id sub_100031BD0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setNeedsUpdateConfiguration];
}

void type metadata accessor for Key(uint64_t a1)
{
}

unsigned char *sub_100031BEC(unsigned char *a1)
{
  return sub_10011454C(a1, *(unsigned char *)(v1 + 16));
}

unsigned char *sub_100031BF4(unsigned char *result)
{
  *result &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

void sub_100031C0C(unsigned __int8 *a1)
{
}

void sub_100031C14(unsigned __int8 *a1)
{
}

ValueMetadata *type metadata accessor for TranscriptionModelAssetService.DownloadState()
{
  return &type metadata for TranscriptionModelAssetService.DownloadState;
}

uint64_t sub_100031C2C()
{
  return _swift_task_switch(sub_100020A5C, 0, 0);
}

ValueMetadata *type metadata accessor for TranscriptViewContextChanged()
{
  return &type metadata for TranscriptViewContextChanged;
}

uint64_t sub_100031D1C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t sub_100031D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

ValueMetadata *type metadata accessor for RCRecordButtonViewModel.LabelConfiguration()
{
  return &type metadata for RCRecordButtonViewModel.LabelConfiguration;
}

uint64_t sub_100031D3C(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  if (*(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return *(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16) ^ 1u;
  }
  return 0;
}

unint64_t sub_100031D78()
{
  unint64_t result = qword_1002681E8;
  if (!qword_1002681E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002681E8);
  }
  return result;
}

const char *sub_100031E58()
{
  return "mode";
}

const char *sub_100031E64()
{
  return "currentUserActivity";
}

const char *sub_100031E70()
{
  return "activityType";
}

uint64_t sub_100031E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100031E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100031E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100031EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100031EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100031ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100031EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100031EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100031EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100031F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100031F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

__n128 initializeWithTake for RCRecordButton(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t *sub_100031F50(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

id sub_100031FB4(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v2 = *(void **)(a1 + 32);
  if (v1) {
    return [v2 _animateContentUnavailableUpdateWithCompletion:0];
  }
  else {
    return [v2 setNeedsUpdateContentUnavailableConfiguration];
  }
}

id sub_100031FCC(uint64_t a1)
{
  return [*(id *)(a1 + 32) __performDeferredInitialization];
}

id sub_100031FD4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _initialViewDidLoad];
}

id sub_100031FDC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleWelcomeScreenContinue:a2 == 1];
}

void sub_100031FEC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _cloudSyncPromptNeedsShowing])
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10006A0BC;
    block[3] = &unk_100221278;
    block[4] = *(void *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_10003207C(id a1)
{
  id v1 = +[NSFileManager defaultManager];
  [v1 rc_cleanUpTemporaryDirectory];
}

void sub_1000320C4(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = (void *)qword_10026A820;
  qword_10026A820 = v1;
}

void sub_100032100(id a1)
{
  uint64_t v1 = objc_alloc_init(RCApplicationModel);
  uint64_t v2 = (void *)qword_10026A870;
  qword_10026A870 = (uint64_t)v1;
}

void sub_10003213C(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = (void *)qword_10026A890;
  qword_10026A890 = v1;
}

void *sub_100032178(void *result)
{
  uint64_t v1 = result[4];
  if (!*(unsigned char *)(v1 + 41) && *(void *)(v1 + 16))
  {
    *(unsigned char *)(v1 + 41) = 1;
    __n128 result = (void *)result[4];
    if ((*((_DWORD *)result + 2) - 3) <= 1) {
      return [result _startMonitoringLocation];
    }
  }
  return result;
}

void sub_1000321B0(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = (void *)qword_10026A7F0;
  qword_10026A7F0 = v1;
}

id sub_1000321EC(uint64_t a1)
{
  [*(id *)(a1 + 32) _configureAudioSettingsIfNeeded];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _registerAudioSessionNotificationsIfNeeded];
}

void sub_100032228(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = (void *)qword_10026A838;
  qword_10026A838 = v1;
}

void sub_100032264(uint64_t a1)
{
  uint64_t v2 = +[TUCallCenter callCenterWithQueue:*(void *)(*(void *)(a1 + 32) + 24)];
  uint64_t v3 = *(void *)(a1 + 32);
  long long v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;
}

uint64_t sub_1000322B8(uint64_t a1)
{
  long long v4 = *(int **)(v1 + 16);
  int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *int v5 = v2;
  v5[1] = sub_100015B60;
  unsigned __int8 v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10026A4A0 + dword_10026A4A0);
  return v6(a1, v4);
}

uint64_t sub_100032370(uint64_t a1, int *a2)
{
  unsigned __int8 v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  long long v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_10000C4CC;
  return v6(a1);
}

char *sub_10003244C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1000094B4(a1, a2, a3, a4, &qword_100269FF8);
}

uint64_t sub_100032460(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100032558(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003264C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  **(void **)(*(void *)(v1 + 64) + 40) = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return _swift_continuation_resume(v1);
}

unint64_t sub_1000326B8()
{
  unint64_t result = qword_100267070;
  if (!qword_100267070)
  {
    type metadata accessor for RCUserActivityType(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267070);
  }
  return result;
}

uint64_t sub_100032710(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100032758(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for VMAudioMode(uint64_t a1)
{
}

unint64_t sub_1000327B4()
{
  unint64_t result = qword_100266D40;
  if (!qword_100266D40)
  {
    sub_100027F14(&qword_100266D30);
    sub_100032910();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266D40);
  }
  return result;
}

unint64_t sub_100032830(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100028654(&qword_100264D88);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (uint64_t *)(a1 + 48); ; i += 3)
    {
      Swift::UInt v5 = *(i - 2);
      Swift::UInt v6 = *(i - 1);
      uint64_t v7 = *i;
      unint64_t result = sub_10002DE84(v5, v6);
      if (v9) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      id v10 = (Swift::UInt *)(v3[6] + 16 * result);
      *id v10 = v5;
      v10[1] = v6;
      *(void *)(v3[7] + 8 * result) = v7;
      uint64_t v11 = v3[2];
      BOOL v12 = __OFADD__(v11, 1);
      uint64_t v13 = v11 + 1;
      if (v12) {
        goto LABEL_10;
      }
      v3[2] = v13;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_100032910()
{
  unint64_t result = qword_100266D48;
  if (!qword_100266D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266D48);
  }
  return result;
}

uint64_t sub_100032964()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  Swift::UInt v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *Swift::UInt v5 = v1;
  v5[1] = sub_100031604;
  Swift::UInt v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10026A490 + dword_10026A490);
  return v6(v2, v3, v4);
}

uint64_t sub_100032A24(uint64_t a1, uint64_t a2, int *a3)
{
  Swift::UInt v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_100031604;
  return v6();
}

uint64_t sub_100032AF0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  Swift::UInt v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100031604;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10026A498 + dword_10026A498);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100032BBC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100031604;
  return v7();
}

__n128 sub_100032C88@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_10002869C(v13, a9, &qword_100266C70);
  uint64_t v24 = (_OWORD *)(a9 + *(int *)(sub_100028654(&qword_100266C60) + 36));
  v24[4] = v30;
  v24[5] = v31;
  v24[6] = v32;
  *uint64_t v24 = v26;
  v24[1] = v27;
  __n128 result = v29;
  void v24[2] = v28;
  v24[3] = v29;
  return result;
}

uint64_t sub_100032E48@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, char a18)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v27 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a9 = a16;
  *(unsigned char *)(a9 + 8) = a17 & 1;
  *(unsigned char *)(a9 + 9) = a18 & 1;
  *(_OWORD *)(a9 + 80) = v33;
  *(_OWORD *)(a9 + 96) = v34;
  *(_OWORD *)(a9 + 112) = v35;
  *(_OWORD *)(a9 + 16) = v29;
  *(_OWORD *)(a9 + 32) = v30;
  *(_OWORD *)(a9 + 48) = v31;
  *(_OWORD *)(a9 + 64) = v32;

  return swift_retain();
}

unint64_t sub_100033014()
{
  unint64_t result = qword_100266CE8;
  if (!qword_100266CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266CE8);
  }
  return result;
}

unint64_t sub_100033068()
{
  unint64_t result = qword_100266C30;
  if (!qword_100266C30)
  {
    sub_100027F14(&qword_100266C28);
    sub_100028030(&qword_100266C38, &qword_100266C40, (void (*)(void))sub_1000331E0);
    sub_100027F5C(&qword_100266C98, &qword_100266CA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266C30);
  }
  return result;
}

unint64_t sub_100033134()
{
  unint64_t result = qword_100266EC8;
  if (!qword_100266EC8)
  {
    sub_100027F14(&qword_100266ED0);
    sub_1000332AC();
    sub_100027FA0(&qword_100266CE0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266EC8);
  }
  return result;
}

unint64_t sub_1000331E0()
{
  unint64_t result = qword_100266C48;
  if (!qword_100266C48)
  {
    sub_100027F14(&qword_100266C50);
    sub_100028030(&qword_100266C58, &qword_100266C60, (void (*)(void))sub_100033514);
    sub_100027F5C(&qword_100266C88, &qword_100266C90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266C48);
  }
  return result;
}

unint64_t sub_1000332AC()
{
  unint64_t result = qword_100266CD0;
  if (!qword_100266CD0)
  {
    sub_100027F14(&qword_100266C20);
    sub_100033328();
    sub_100033014();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266CD0);
  }
  return result;
}

unint64_t sub_100033328()
{
  unint64_t result = qword_100266CD8;
  if (!qword_100266CD8)
  {
    sub_100027F14(&qword_100266C18);
    sub_10000E3A4();
    sub_100027FA0(&qword_100266CE0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266CD8);
  }
  return result;
}

unint64_t sub_1000333D4()
{
  unint64_t result = qword_100266D78;
  if (!qword_100266D78)
  {
    sub_100027F14(&qword_100266D80);
    sub_1000335B4();
    sub_100027F5C(&qword_100266DA8, &qword_100266DB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266D78);
  }
  return result;
}

unint64_t sub_100033474()
{
  unint64_t result = qword_100266E88;
  if (!qword_100266E88)
  {
    sub_100027F14(&qword_100266E80);
    sub_1000336AC();
    sub_100027F5C(&qword_100266EB0, &qword_100266EB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266E88);
  }
  return result;
}

unint64_t sub_100033514()
{
  unint64_t result = qword_100266C68;
  if (!qword_100266C68)
  {
    sub_100027F14(&qword_100266C70);
    sub_100027F5C(&qword_100266C78, &qword_100266C80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266C68);
  }
  return result;
}

unint64_t sub_1000335B4()
{
  unint64_t result = qword_100266D88;
  if (!qword_100266D88)
  {
    sub_100027F14(&qword_100266D90);
    sub_100027F5C(&qword_100266D98, &qword_100266DA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266D88);
  }
  return result;
}

uint64_t sub_100033654(uint64_t a1)
{
  return a1;
}

uint64_t sub_100033680(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000336AC()
{
  unint64_t result = qword_100266E90;
  if (!qword_100266E90)
  {
    sub_100027F14(&qword_100266E98);
    sub_100027F5C(&qword_100266EA0, &qword_100266EA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266E90);
  }
  return result;
}

unint64_t sub_10003374C()
{
  unint64_t result = qword_100266DC0;
  if (!qword_100266DC0)
  {
    sub_100027F14(&qword_100266DC8);
    sub_100027F5C(&qword_100266DD0, &qword_100266DD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266DC0);
  }
  return result;
}

long long *sub_1000337EC@<X0>(long long *result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *((unsigned __int8 *)result + 40);
  if (v2 == 2)
  {
    uint64_t v3 = 0;
    long long v4 = 0uLL;
    long long v5 = 0uLL;
  }
  else
  {
    LOBYTE(v2) = v2 & 1;
    long long v5 = *(long long *)((char *)result + 24);
    uint64_t v3 = *((unsigned __int8 *)result + 16);
    long long v4 = *result;
  }
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 24) = v5;
  *(unsigned char *)(a2 + 40) = v2;
  return result;
}

unint64_t sub_10003382C()
{
  unint64_t result = qword_100268028;
  if (!qword_100268028)
  {
    sub_100027F14(&qword_100266BE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268028);
  }
  return result;
}

__n128 sub_100033888@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 40);
  unsigned int v4 = v3 == 2;
  unsigned __int8 v5 = a2[1].n128_u8[0];
  if (v3 == 2) {
    uint64_t v6 = 2;
  }
  else {
    uint64_t v6 = v3 & 1;
  }
  int32x2_t v7 = vdup_n_s32(v4);
  v8.i64[0] = v7.u32[0];
  v8.i64[1] = v7.u32[1];
  *(int8x16_t *)a3 = vandq_s8(*(int8x16_t *)(a1 + 24), (int8x16_t)vcgezq_s64(vshlq_n_s64(v8, 0x3FuLL)));
  *(void *)(a3 + 16) = v6;
  __n128 result = *a2;
  *(__n128 *)(a3 + 24) = *a2;
  *(unsigned char *)(a3 + 40) = v5;
  return result;
}

uint64_t sub_1000338D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100033918()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100031604;
  return StoreReviewGatingController.didEnterForeground()();
}

uint64_t type metadata accessor for VMPlayer()
{
  return self;
}

uint64_t type metadata accessor for PlatterSuccessStatePresentationCoordinator()
{
  return self;
}

uint64_t type metadata accessor for RecorderAppDelegateDependencyContainer()
{
  return self;
}

uint64_t type metadata accessor for ControlCenterWidgetStateCoordinator()
{
  return self;
}

uint64_t sub_100033AF8(char a1)
{
  uint64_t v2 = *v1;
  *(unsigned char *)(*v1 + 57) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = *(void *)(v2 + 32);
  return _swift_task_switch(sub_10000B49C, v4, v3);
}

uint64_t sub_100033C20(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  int32x2_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *int32x2_t v7 = v2;
  v7[1] = sub_100015B60;
  return sub_10000651C(a1, v4, v5, v6);
}

uint64_t type metadata accessor for TranscriptViewInteractionHandler()
{
  return self;
}

uint64_t type metadata accessor for ActivityManagerStateCoordinator()
{
  return self;
}

uint64_t sub_100033D78()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 120) + 16);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v2(v1 != 0);
}

uint64_t sub_100033DE4()
{
  return _swift_task_switch(sub_100033D78, 0, 0);
}

uint64_t sub_100033EC4()
{
  return _swift_task_switch(sub_100008CD0, 0, 0);
}

uint64_t sub_100033EE0()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100031604;
  uint64_t v4 = (uint64_t (*)(const void *))((char *)&dword_100269070 + dword_100269070);
  return v4(v2);
}

uint64_t sub_100033F8C(char a1)
{
  uint64_t v2 = *v1;
  *(unsigned char *)(*v1 + 194) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 328);
  uint64_t v4 = *(void *)(v2 + 320);
  return _swift_task_switch(sub_1000177B0, v4, v3);
}

uint64_t sub_1000340B4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  int32x2_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *int32x2_t v7 = v2;
  v7[1] = sub_100031604;
  return sub_100007358(a1, v4, v5, v6);
}

uint64_t destroy for HighlightConfiguration()
{
  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for TranscriptViewTextUpdateHelper.AttributeUpdateInfo()
{
  return &type metadata for TranscriptViewTextUpdateHelper.AttributeUpdateInfo;
}

void sub_100034184(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100028654(&qword_100269250);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  int32x2_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = (void *)a2[12];
    if (v11)
    {
      id v31 = Strong;
      uint64_t v12 = a2[13];
      sub_10001D764(a1, (uint64_t)v9);
      uint64_t v13 = type metadata accessor for TranscriptViewModel();
      id v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      if (v14(v9, 1, v13) == 1)
      {
        id v15 = v11;
        sub_1000285F8((uint64_t)v9, &qword_100269250);
        LODWORD(v16) = 0;
      }
      else
      {
        id v16 = (id)*((void *)v9 + 12);
        uint64_t v29 = *((void *)v9 + 13);
        uint64_t v30 = v12;
        id v28 = v16;
        id v17 = v11;
        sub_10002343C((uint64_t)v9);
        if (v16)
        {
          id v18 = v28;
          id v16 = v17;
          unsigned __int8 v19 = sub_100167BF8(v16);

          LODWORD(v16) = v19 & (v29 == v30);
        }
        uint64_t v12 = v30;
      }
      sub_10001D764(a1, (uint64_t)v7);
      if (v14(v7, 1, v13) == 1)
      {
        sub_1000285F8((uint64_t)v7, &qword_100269250);
LABEL_14:
        id v20 = [v31 textStorage];
        [v20 insertAttributedString:v11 atIndex:v12];

        id v21 = [v11 length];
        id v22 = [v31 textStorage];
        sub_100167400(a2[2]);
        type metadata accessor for Key(0);
        sub_10011B968();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v22 addAttributes:isa range:v12 v21];

        return;
      }
      uint64_t v25 = *(void *)v7;
      uint64_t v24 = *((void *)v7 + 1);
      swift_bridgeObjectRetain();
      sub_10002343C((uint64_t)v7);
      if (v25 == *a2 && v24 == a2[1])
      {
        swift_bridgeObjectRelease();
        if (!v16) {
          goto LABEL_14;
        }
      }
      else
      {
        int v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v16 & v27) != 1) {
          goto LABEL_14;
        }
      }
    }
    else
    {
    }
  }
}

char *sub_1000344DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) + 16);
  if (!v1) {
    return (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v2 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  uint64_t v3 = (char *)&_swiftEmptyArrayStorage;
  do
  {
    uint64_t v4 = *(v2 - 2);
    uint64_t v5 = *(v2 - 1);
    uint64_t v6 = *v2;
    swift_bridgeObjectRetain_n();
    id v7 = sub_10011B1EC(v4, v5);
    if (v7)
    {
      uint64_t v8 = sub_10011ACD4((uint64_t)v7, v6);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v6 = v8;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = sub_10003244C(0, *((void *)v3 + 2) + 1, 1, v3);
    }
    unint64_t v10 = *((void *)v3 + 2);
    unint64_t v9 = *((void *)v3 + 3);
    if (v10 >= v9 >> 1) {
      uint64_t v3 = sub_10003244C((char *)(v9 > 1), v10 + 1, 1, v3);
    }
    *((void *)v3 + 2) = v10 + 1;
    uint64_t v11 = &v3[24 * v10];
    *((void *)v11 + 4) = v4;
    *((void *)v11 + 5) = v5;
    *((void *)v11 + 6) = v6;
    v2 += 3;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100034630()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100031604;
  v3[2] = v2;
  return _swift_task_switch(sub_100006A5C, 0, 0);
}

unint64_t sub_1000346D8()
{
  unint64_t result = qword_100268360;
  if (!qword_100268360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268360);
  }
  return result;
}

unint64_t sub_10003472C()
{
  unint64_t result = qword_100268368;
  if (!qword_100268368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268368);
  }
  return result;
}

uint64_t sub_100034788(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_100267058);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000347E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100267058);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for RCRecordButtonViewController()
{
  return self;
}

uint64_t sub_10003489C(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000348F0()
{
  unint64_t result = qword_1002699B0;
  if (!qword_1002699B0)
  {
    sub_100027F14(&qword_100267060);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002699B0);
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelConfigurationMapperKey()
{
  return &type metadata for LabelConfigurationMapperKey;
}

unint64_t sub_100034960()
{
  unint64_t result = qword_100266518;
  if (!qword_100266518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266518);
  }
  return result;
}

uint64_t sub_1000349B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100266990);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100034A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100266990);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TranscriptViewCoordinator()
{
  return self;
}

id sub_100034B14()
{
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isWindowSceneInForeground) = 1;
  char v1 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isDisplayingTranscriptView);
  id result = *(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_timeController);
  if (!result)
  {
    if (!*(unsigned char *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isDisplayingTranscriptView)) {
      return result;
    }
    goto LABEL_6;
  }
  id result = [result timeControllerState];
  if (result) {
    char v3 = 0;
  }
  else {
    char v3 = v1;
  }
  if (v3)
  {
LABEL_6:
    sub_10001510C((void *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter), *(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter + 24));
    return (id)sub_1001428DC();
  }
  return result;
}

uint64_t type metadata accessor for StereoOrientationProvider()
{
  return self;
}

uint64_t sub_100034BE0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_100015B60;
  return sub_100008894(a1, v4, v5, v6);
}

uint64_t type metadata accessor for SecureAppAssertionManager()
{
  return self;
}

void sub_100034CB8()
{
  if (*(unsigned char *)(v0 + 24) != 1) {
    return;
  }
  uint64_t v1 = v0;
  id v2 = [self sharedAppDelegate];
  if (!v2)
  {
    char v7 = sub_100118D30();
    goto LABEL_9;
  }
  char v3 = v2;
  id v4 = [v2 defaultSceneDelegate];

  if (v4)
  {
    id v5 = [v4 window];

    id v4 = [v5 windowScene];
    if (v4)
    {
      id v6 = [v4 activationState];

      LOBYTE(v4) = v6 == 0;
    }
  }
  char v7 = sub_100118D30();
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v7 & 1) == 0) {
      return;
    }
  }
  if (!*(void *)(v1 + 16))
  {
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10002272C(v8, (uint64_t)qword_100275340);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      sub_10002F3B8(0xD000000000000023, 0x80000001001ED500, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s Acquiring secure app assertion", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_100118E44();
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    uint64_t v13 = qword_100264550;
    id v14 = SBSLockScreenContentAssertionSlotApp;
    if (v13 != -1) {
      swift_once();
    }
    NSString v15 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_1001188C8;
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100118B14;
    aBlock[3] = (uint64_t)&unk_100226ED8;
    id v16 = _Block_copy(aBlock);
    id v17 = [ObjCClassFromMetadata acquireContentProviderAssertionForType:2 slot:v14 identifier:v15 errorHandler:v16];
    _Block_release(v16);

    id v18 = *(void **)(v1 + 16);
    *(void *)(v1 + 16) = v17;
  }
}

void **initializeBufferWithCopyOfBuffer for RCIntentSceneConfigurator(void **a1, void **a2)
{
  char v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

unint64_t sub_100035058()
{
  unint64_t result = qword_100267FB0;
  if (!qword_100267FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267FB0);
  }
  return result;
}

uint64_t type metadata accessor for RCRecordButtonRepository()
{
  return self;
}

uint64_t type metadata accessor for RCRecordButtonAppFactory()
{
  return self;
}

uint64_t type metadata accessor for RCAppStoreRatingPrompter()
{
  return self;
}

uint64_t sub_100035188()
{
  sub_10002F48C(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000351E8()
{
  sub_100015D6C((uint64_t)(v0 + 2));
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  sub_10001510C(v0 + 2, v1);
  id v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v2 + 8) + **(int **)(v2 + 8));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[8] = v3;
  void *v3 = v0;
  v3[1] = sub_100035300;
  return v5(v1, v2);
}

uint64_t sub_100035300()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100035188, 0, 0);
}

uint64_t sub_1000353FC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100031604;
  v3[7] = v2;
  return _swift_task_switch(sub_1000351E8, 0, 0);
}

unint64_t sub_1000354A8()
{
  unint64_t result = qword_100265D40;
  if (!qword_100265D40)
  {
    type metadata accessor for RCRecordButtonViewModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265D40);
  }
  return result;
}

uint64_t sub_100035500()
{
  return sub_100035520(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_100035520(uint64_t result, char a2)
{
  *(unsigned char *)(result + OBJC_IVAR____TtC10VoiceMemos23RCRecordButtonViewModel__disabled) = a2;
  return result;
}

uint64_t sub_100035530()
{
  return sub_100035550(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_100035550(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

unsigned char *_s10VoiceMemos23RCRecordButtonViewModelC5StyleOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AutoScrollStyle(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1000356C0()
{
  return sub_1000356E0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_1000356E0(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(result + 56) = a2;
  *(unsigned char *)(result + 64) = a3 & 1;
  return result;
}

uint64_t sub_1000356F0()
{
  if (*(unsigned char *)(v0 + 25)) {
    __int16 v1 = 256;
  }
  else {
    __int16 v1 = 0;
  }
  return sub_10003573C(*(void *)(v0 + 16), v1 | *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_100035724()
{
  return sub_1000356F0();
}

uint64_t sub_10003573C(uint64_t result, __int16 a2)
{
  *(unsigned char *)(result + 65) = a2 & 1;
  *(unsigned char *)(result + 66) = HIBYTE(a2) & 1;
  return result;
}

ValueMetadata *type metadata accessor for RCRecordButtonViewModel.LabelAnimationConfiguration()
{
  return &type metadata for RCRecordButtonViewModel.LabelAnimationConfiguration;
}

uint64_t sub_100035760()
{
  return sub_100005F20(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10003577C()
{
  return sub_100009CA4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100035798()
{
  return sub_1000085BC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000357B4()
{
  return sub_1000086F0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000357D0()
{
  return sub_1000357F0(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1000357F0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for RCRecordButtonViewModel.InnerViewType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RCRecordButtonViewModel.InnerViewType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t type metadata accessor for RCRecordButtonPresenter()
{
  return self;
}

uint64_t sub_100035978(Swift::UInt a1, Swift::UInt a2, char a3, Swift::UInt a4, Swift::UInt a5)
{
  if (a3 == 2)
  {
    LODWORD(v8) = 0;
  }
  else
  {
    if (a1 >= 5 || a4 >= 5)
    {
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      return result;
    }
    uint64_t v11 = qword_1001F2398[a1];
    uint64_t v12 = qword_1001F2398[a4];
    uint64_t v13 = (uint64_t *)(v5 + 48);
    swift_beginAccess();
    uint64_t v14 = *(void *)(v5 + 48);
    if (*(void *)(v14 + 16) && (unint64_t v15 = sub_10002DE84(a1, a2), (v16 & 1) != 0))
    {
      char v17 = 0;
      uint64_t v18 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
    }
    else
    {
      uint64_t v18 = 0;
      char v17 = 1;
    }
    uint64_t v19 = *v13;
    uint64_t v8 = *(void *)(*v13 + 16);
    if (v8)
    {
      unint64_t v20 = sub_10002DE84(a4, a5);
      LODWORD(v8) = 0;
      char v22 = v11 == v12 ? 1 : v17;
      if (v22 & 1) == 0 && (v21) {
        LODWORD(v8) = v18 != *(void *)(*(void *)(v19 + 56) + 8 * v20);
      }
    }
  }
  if (a5 == 2 && a4 == 0) {
    int v24 = 256;
  }
  else {
    int v24 = 0;
  }
  return v24 | v8;
}

uint64_t sub_100035AC0(Swift::UInt a1, Swift::UInt a2, int a3, unint64_t a4, Swift::UInt a5, char a6)
{
  return sub_10000631C(a1, a2, a3, a4, a5, a6);
}

void destroy for AudioAssetReaderOutput.SampleBuffer(id *a1)
{
}

uint64_t type metadata accessor for TranscriptViewFactory()
{
  return self;
}

uint64_t type metadata accessor for BackgroundTaskManager()
{
  return self;
}

uint64_t sub_100035B18()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for WeakObserverRegistry()
{
  return sub_100011BC4();
}

uint64_t sub_100035B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100166C58);
}

void sub_100035B90()
{
  sub_100009D40();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100035C60(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void))(v1 + 16))(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

unint64_t sub_100035C9C()
{
  unint64_t result = qword_100266548;
  if (!qword_100266548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266548);
  }
  return result;
}

uint64_t sub_100035CF4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100035CFC()
{
  return sub_100035CF4(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t sub_100035D30()
{
  unint64_t result = qword_1002681D0;
  if (!qword_1002681D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002681D0);
  }
  return result;
}

unint64_t sub_100035D84()
{
  unint64_t result = qword_100268208;
  if (!qword_100268208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268208);
  }
  return result;
}

unint64_t sub_100035DD8()
{
  unint64_t result = qword_1002681F0;
  if (!qword_1002681F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002681F0);
  }
  return result;
}

unint64_t sub_100035E2C()
{
  unint64_t result = qword_1002681E0;
  if (!qword_1002681E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002681E0);
  }
  return result;
}

unint64_t sub_100035E80()
{
  unint64_t result = qword_1002681C8;
  if (!qword_1002681C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002681C8);
  }
  return result;
}

unint64_t sub_100035ED4()
{
  unint64_t result = qword_100267F58;
  if (!qword_100267F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267F58);
  }
  return result;
}

unint64_t sub_100035F28()
{
  unint64_t result = qword_1002681C0;
  if (!qword_1002681C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002681C0);
  }
  return result;
}

void *sub_100035F90()
{
  return &protocol witness table for String;
}

unint64_t sub_100035FA8()
{
  unint64_t result = qword_100268778;
  if (!qword_100268778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268778);
  }
  return result;
}

unint64_t sub_100035FFC()
{
  unint64_t result = qword_100268780;
  if (!qword_100268780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268780);
  }
  return result;
}

unint64_t sub_100036058()
{
  unint64_t result = qword_100268380;
  if (!qword_100268380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268380);
  }
  return result;
}

unint64_t sub_1000360AC()
{
  unint64_t result = qword_100268388;
  if (!qword_100268388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268388);
  }
  return result;
}

uint64_t sub_100036108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_100036148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (a5)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100036198()
{
  unint64_t result = qword_1002682D0;
  if (!qword_1002682D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002682D0);
  }
  return result;
}

unint64_t sub_1000361EC()
{
  unint64_t result = qword_1002682D8;
  if (!qword_1002682D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002682D8);
  }
  return result;
}

unint64_t sub_100036248()
{
  unint64_t result = qword_100268268;
  if (!qword_100268268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268268);
  }
  return result;
}

unint64_t sub_10003629C()
{
  unint64_t result = qword_1002649A8;
  if (!qword_1002649A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002649A8);
  }
  return result;
}

unint64_t sub_1000362F0()
{
  unint64_t result = qword_100268270;
  if (!qword_100268270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268270);
  }
  return result;
}

uint64_t type metadata accessor for ActivityManager()
{
  return self;
}

uint64_t sub_100036374()
{
  uint64_t result = type metadata accessor for TranscriptViewModel();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for TranscriptView()
{
  uint64_t result = qword_1002691C8;
  if (!qword_1002691C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000364A8(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for RCRecordButton()
{
  return &type metadata for RCRecordButton;
}

uint64_t sub_100036510()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003652C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001A4B4(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_100036538()
{
  unint64_t result = qword_100268408;
  if (!qword_100268408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268408);
  }
  return result;
}

unint64_t sub_10003658C()
{
  unint64_t result = qword_100265E00;
  if (!qword_100265E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100265E00);
  }
  return result;
}

unint64_t sub_1000365E0()
{
  unint64_t result = qword_100268410;
  if (!qword_100268410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268410);
  }
  return result;
}

unint64_t sub_100036640()
{
  unint64_t result = qword_100268A28;
  if (!qword_100268A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268A28);
  }
  return result;
}

unint64_t sub_100036694()
{
  unint64_t result = qword_100268A30;
  if (!qword_100268A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268A30);
  }
  return result;
}

uint64_t type metadata accessor for AudioPlayer()
{
  return self;
}

unint64_t sub_100036714()
{
  unint64_t result = qword_100268A50;
  if (!qword_100268A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268A50);
  }
  return result;
}

unint64_t sub_100036768()
{
  unint64_t result = qword_100268A58;
  if (!qword_100268A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268A58);
  }
  return result;
}

unint64_t sub_1000367C4()
{
  unint64_t result = qword_100266588;
  if (!qword_100266588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266588);
  }
  return result;
}

void sub_1000368BC(os_log_t log)
{
  int v1 = 136315138;
  int v2 = "-[RecorderAppDelegate defaultSceneDelegate]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s -- Could not find defaultSceneDelegate in list of connected scenes", (uint8_t *)&v1, 0xCu);
}

id sub_1000398C8(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) _noiseSuppressionParameters];
  int v3 = [*(id *)(a1 + 32) _reverbSuppressionParameters];
  uint64_t v4 = [v2 arrayByAddingObjectsFromArray:v3];
  uint64_t v5 = (void *)qword_10026A6D0;
  qword_10026A6D0 = v4;

  id result = [(id)qword_10026A6D0 count];
  if (result)
  {
    for (unint64_t i = 0; i < (unint64_t)result; ++i)
    {
      uint64_t v8 = [(id)qword_10026A6D0 objectAtIndexedSubscript:i];
      [v8 setAddress:i];

      id result = [(id)qword_10026A6D0 count];
    }
  }
  return result;
}

void sub_100039CE8(id a1)
{
  int v1 = +[NSBundle mainBundle];
  id v15 = [v1 URLForResource:@"voiceMemo_NS_ReverbSuppressor" withExtension:@"propstrip"];

  int v2 = +[NSBundle mainBundle];
  int v3 = [v2 pathForResource:@"aufx-drvb-appl" ofType:@"plist"];

  uint64_t v4 = +[NSMutableDictionary dictionaryWithContentsOfURL:v15];
  uint64_t v5 = [v4 objectForKeyedSubscript:@"Boxes"];
  id v6 = [v5 mutableCopy];
  [v4 setObject:v6 forKeyedSubscript:@"Boxes"];

  BOOL v7 = [v6 objectAtIndexedSubscript:0];
  id v8 = [v7 mutableCopy];
  [v6 setObject:v8 atIndexedSubscript:0];

  uint64_t v9 = [v8 objectForKeyedSubscript:@"Properties"];
  id v10 = [v9 mutableCopy];
  [v8 setObject:v10 forKeyedSubscript:@"Properties"];

  uint64_t v11 = [v10 objectAtIndexedSubscript:0];
  id v12 = [v11 mutableCopy];
  [v10 setObject:v12 atIndexedSubscript:0];

  [v12 setObject:v3 forKeyedSubscript:@"Path"];
  id v13 = [v4 copy];
  uint64_t v14 = (void *)qword_10026A6E8;
  qword_10026A6E8 = (uint64_t)v13;
}

void sub_100039F18(id a1)
{
  int v1 = +[NSBundle mainBundle];
  id v4 = [v1 URLForResource:@"voiceMemo_NS_ReverbSuppressor" withExtension:@"austrip"];

  uint64_t v2 = +[NSDictionary dictionaryWithContentsOfURL:v4];
  int v3 = (void *)qword_10026A6F8;
  qword_10026A6F8 = v2;
}

void sub_10003B42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003B448(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _performTest:*(void *)(a1 + 32) options:*(void *)(a1 + 40)];
}

void sub_10003BB10(uint64_t a1)
{
  [UIApp startedTest:qword_10026A708];
  id v2 = [*(id *)(a1 + 32) recordingViewControllerDelegate];
  [v2 performAction:3 atPosition:0 forUUID:0 sourceController:0 source:0.0];
}

void sub_10003BC40(uint64_t a1)
{
  [UIApp startedTest:qword_10026A708];
  id v2 = [*(id *)(a1 + 32) recordingViewControllerDelegate];
  [v2 performAction:3 atPosition:0 forUUID:0 sourceController:0 source:0.0];
}

void sub_10003BD74(uint64_t a1)
{
  int v1 = [*(id *)(a1 + 32) recordingViewControllerDelegate];
  [v1 performAction:4 atPosition:0 forUUID:0 sourceController:0 source:0.0];

  dispatch_time_t v2 = dispatch_time(0, 1000000000);

  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, &stru_100221298);
}

void sub_10003BDEC(id a1)
{
}

void sub_10003BE70(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) _mainViewController];
  int v1 = [v4 activeFolderViewController];
  dispatch_time_t v2 = [v1 recordingsCollectionViewController];

  int v3 = [v2 uuidOfSelectedRecording];
  [UIApp startedTest:qword_10026A708];
  [v4 performAction:23 atPosition:v3 forUUID:0 sourceController:0 source:0.0];
}

void sub_10003BFB0(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) _mainViewController];
  int v1 = [v5 activeFolderViewController];
  dispatch_time_t v2 = [v1 recordingsCollectionViewController];

  int v3 = [v2 uuidOfSelectedRecording];
  [v5 performAction:24 atPosition:v3 forUUID:0 sourceController:0 source:0.0];
  dispatch_time_t v4 = dispatch_time(0, 1000000000);
  dispatch_after(v4, (dispatch_queue_t)&_dispatch_main_q, &stru_1002212B8);
}

void sub_10003C06C(id a1)
{
}

void sub_10003C120(uint64_t a1)
{
  [UIApp startedTest:qword_10026A708];
  id v2 = [*(id *)(a1 + 32) recordingViewControllerDelegate];
  [v2 performAction:3 atPosition:0 forUUID:0 sourceController:0 source:0.0];
}

void sub_10003C250(uint64_t a1)
{
  [UIApp startedTest:qword_10026A708];
  id v2 = [*(id *)(a1 + 32) recordingViewControllerDelegate];
  [v2 performAction:4 atPosition:0 forUUID:0 sourceController:0 source:0.0];
}

void sub_10003C450(uint64_t a1)
{
  [UIApp startedTest:qword_10026A708];
  id v3 = [*(id *)(a1 + 32) cellDelegate];
  id v2 = [*(id *)(a1 + 32) UUID];
  [v3 performAction:0 atPosition:v2 forCellWithUUID:0 source:0.0];
}

void sub_10003C628(id a1, UIViewControllerTransitionCoordinatorContext *a2)
{
}

void sub_10003C6AC(uint64_t a1)
{
  int v1 = [*(id *)(a1 + 32) _mainViewController];
  id v21 = [v1 playbackViewController];

  id v2 = [v21 waveformContainerViewControllers];
  id v3 = [v2 objectAtIndexedSubscript:0];
  dispatch_time_t v4 = [v3 waveformViewController];
  id v5 = [v4 scrollView];

  if (v5)
  {
    RPTGetBoundsForView();
    double v7 = v6;
    double v9 = v8;
    double v11 = v10;
    double v13 = v12;
    [v5 bounds];
    double v15 = v14;
    if (+[RPTTestRunner isRecapAvailable])
    {
      id v16 = objc_alloc((Class)RPTPagingScrollViewTestParameters);
      id v17 = [v16 initWithTestName:qword_10026A708 scrollBounds:2 scrollContentLength:0 direction:v7 completionHandler:v9, v11, v13, v15];
      +[RPTTestRunner runTestWithParameters:v17];

      goto LABEL_7;
    }
    uint64_t v18 = (void *)UIApp;
    uint64_t v19 = qword_10026A708;
    CFStringRef v20 = @"Recap not available";
  }
  else
  {
    uint64_t v18 = (void *)UIApp;
    uint64_t v19 = qword_10026A708;
    CFStringRef v20 = @"Unable to find WaveformScrollView in the playback card";
  }
  [v18 failedTest:v19 withFailure:v20];
LABEL_7:
}

void sub_10003CBA4(id a1)
{
  id v1 = [objc_opt_new() initWithObjects:@"ScrollVoiceMemosList", @"ScrollVoiceMemosEditList", 0];
  id v2 = (void *)qword_10026A720;
  qword_10026A720 = (uint64_t)v1;
}

void sub_10003D4EC(id *a1)
{
  if (a1)
  {
    id WeakRetained = objc_loadWeakRetained(a1 + 25);
    id v2 = [a1 isRunning];
    if (v2 != [WeakRetained ioStarted]) {
      [WeakRetained setIoStarted:v2];
    }
  }
}

void sub_10003D62C(uint64_t a1)
{
  if (a1)
  {
    if (*(double *)(a1 + 216) == 0.0)
    {
      RCCurrentMediaTime();
      *(void *)(a1 + 216) = v2;
    }
    sub_10003D6DC(a1);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10003D928;
    block[3] = &unk_100221278;
    block[4] = a1;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_10003D6DC(uint64_t a1)
{
  if (!a1 || *(unsigned char *)(a1 + 145)) {
    return;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 148));
  RCCurrentMediaTime();
  double v3 = v2;
  uint64_t v4 = [*(id *)(a1 + 232) firstObject];
  if (!v4) {
    goto LABEL_19;
  }
  id v5 = (void *)v4;
  while (1)
  {
    double v6 = [v5 audioTime];
    +[AVAudioTime secondsForHostTime:](AVAudioTime, "secondsForHostTime:", [v6 hostTime]);
    double v8 = v7;

    double v9 = [v5 audioBuffer];
    double v10 = v9;
    double v11 = *(double *)(a1 + 216);
    if (v11 != 0.0) {
      break;
    }
    double v19 = (double)[v9 frameLength];
    CFStringRef v20 = [v10 format];
    [v20 sampleRate];
    double v22 = v19 / v21;

    VMAudioWriteDelay();
    if (v8 + v22 > v3 - v23) {
      goto LABEL_18;
    }
    sub_10003F650(a1, v10);
LABEL_16:
    [*(id *)(a1 + 232) removeObjectAtIndex:0];
    uint64_t v24 = [*(id *)(a1 + 232) firstObject];

    id v5 = (void *)v24;
    if (!v24) {
      goto LABEL_19;
    }
  }
  double v12 = fmax(v11 - v8, 0.0);
  double v13 = [v9 format];
  [v13 sampleRate];
  unsigned int v15 = (v12 * v14);

  unsigned int v16 = [v10 frameLength];
  unsigned int v17 = v16;
  if (v16 >= v15) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = v16;
  }
  if (v18 < [v10 frameLength]) {
    [v10 setFrameLength:v18];
  }
  sub_10003F650(a1, v10);
  if (v17 < v15) {
    goto LABEL_16;
  }
  *(unsigned char *)(a1 + 145) = 1;
LABEL_18:

LABEL_19:
  if (*(unsigned char *)(a1 + 145)) {
    [*(id *)(a1 + 232) removeAllObjects];
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 148));
}

void sub_10003D928(uint64_t a1)
{
  double v2 = OSLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315138;
    double v8 = "-[VMRecordingEngine _recordingStopped]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s -- Recording Stopped", (uint8_t *)&v7, 0xCu);
  }

  double v3 = *(void **)(*(void *)(a1 + 32) + 224);
  if (v3)
  {
    uint64_t v4 = v3;
    dispatch_group_leave(v4);
    uint64_t v5 = *(void *)(a1 + 32);
    double v6 = *(void **)(v5 + 224);
    *(void *)(v5 + 224) = 0;
  }
}

void sub_10003DC64(uint64_t a1)
{
  id v3 = +[VMAudioService sharedInstance];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 200));
  [v3 stopRecordingWithController:WeakRetained error:0];
}

void sub_10003DE04(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  if (a1)
  {
    sub_10003DEFC(a1, v12, v5);
    sub_10003D6DC(a1);
    unsigned int v6 = [v12 frameLength];
    id v7 = [v5 hostTime];
    uint64_t v8 = *(void *)(a1 + 176);
    *(void *)(a1 + 176) = v8 + v6;
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = 16;
    if (v9 != a1 + 16) {
      uint64_t v10 = -16;
    }
    double v11 = (void *)(v9 + v10);
    *(void *)(a1 + 48) = v11;
    void *v11 = v7;
    v11[1] = v8;
    if ([*(id *)(a1 + 72) state] == (id)1) {
      [*(id *)(a1 + 72) appendAveragePowerLevelsByDigestingAudioPCMBuffer:v12];
    }
  }
}

void sub_10003DEFC(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = (os_unfair_lock_s *)(a1 + 148);
    id v6 = a3;
    id v7 = a2;
    os_unfair_lock_lock(v5);
    uint64_t v8 = *(void **)(a1 + 232);
    uint64_t v9 = [[VMRecordingEngineBuffer alloc] initWithAudioBuffer:v7 audioTime:v6];

    [v8 addObject:v9];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 148));
  }
}

uint64_t sub_10003DFB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    id v8 = v6;
    [v8 rc_hostTimeInSeconds];
    double v10 = v9;
    [v5 rc_durationInSeconds];
    RCTimeRangeMake();
    double v12 = v11;
    uint64_t v14 = v13;
    [*(id *)(a1 + 112) rc_hostTimeInSeconds];
    double v16 = v15;
    unsigned int v17 = OSLogForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = 136315906;
      long long v26 = "-[VMRecordingEngine _recordTrimmedAudioBuffer:time:]";
      __int16 v27 = 2048;
      double v28 = v16;
      __int16 v29 = 2048;
      double v30 = v12;
      __int16 v31 = 2048;
      uint64_t v32 = v14;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%s -- playerBegin = %f, bufferRange = [%f - %f]", (uint8_t *)&v25, 0x2Au);
    }

    if (RCTimeRangeContainsTime())
    {
      [v8 sampleRate];
      uint64_t v19 = (uint64_t)((v16 - v10) * v18);
      CFStringRef v20 = OSLogForCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        sub_10016AAF8();
      }

      if (v19 < 1 || v19 >= (unint64_t)[v5 frameLength])
      {
        sub_10003E258(a1, v5, v8);
      }
      else
      {
        double v21 = [v5 trimmedBuffer:v19];
        if (v21)
        {
          double v22 = [v8 rc_adjustedBySamples:v19];
          sub_10003E258(a1, v21, v22);
        }
        else
        {
          double v22 = OSLogForCategory();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT)) {
            sub_10016AA74(v22);
          }
        }
      }
    }
    else
    {
      if (v16 >= v12)
      {
        a1 = 0;
LABEL_21:

        goto LABEL_22;
      }
      double v23 = OSLogForCategory();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT)) {
        sub_10016AB84(v23);
      }
    }
    a1 = 1;
    goto LABEL_21;
  }
LABEL_22:

  return a1;
}

void sub_10003E258(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1 && !*(unsigned char *)(a1 + 145))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 200));
    id v8 = [WeakRetained activityWaveformProcessor];

    id v9 = objc_loadWeakRetained((id *)(a1 + 200));
    double v10 = [v9 liveTranscription];

    if (!*(void *)(a1 + 208))
    {
      double v11 = OSLogForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = "-[VMRecordingEngine _recordAudioBuffer:time:]";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s -- First audio buffer received", (uint8_t *)&buf, 0xCu);
      }

      uint64_t v12 = +[AVAudioTime timeWithHostTime:sampleTime:atRate:](AVAudioTime, "timeWithHostTime:sampleTime:atRate:", [v6 hostTime], vcvtpd_s64_f64((double)(uint64_t)[v6 sampleTime] / *(double *)(a1 + 56) * *(double *)(a1 + 64)), *(double *)(a1 + 64));
      uint64_t v13 = *(void **)(a1 + 208);
      *(void *)(a1 + 208) = v12;

      uint64_t v14 = OSLogForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        sub_10016AC88();
      }

      double v15 = [v5 format];
      [v8 prepareToProcessWithFormat:v15 audioTime:v6 punchInTime:*(double *)(a1 + 184)];

      double v16 = [v5 format];
      [v10 prepareToProcessWithFormat:v16 audioTime:v6 punchInTime:*(double *)(a1 + 184)];
    }
    [v8 processAudioBuffer:v5];
    if (v10) {
      [v10 processAudioBuffer:v5];
    }
    if (*(void *)(a1 + 80))
    {
      double v17 = *(double *)(a1 + 56);
      double v18 = *(double *)(a1 + 64);
      id v19 = [v5 frameLength];
      LODWORD(v19) = vcvtpd_u64_f64(v18 / v17 * (double)v19);
      if ([*(id *)(a1 + 88) frameCapacity] < v19)
      {
        id v20 = objc_alloc((Class)AVAudioPCMBuffer);
        double v21 = [*(id *)(a1 + 80) outputFormat];
        id v22 = [v20 initWithPCMFormat:v21 frameCapacity:v19];
        double v23 = *(void **)(a1 + 88);
        *(void *)(a1 + 88) = v22;
      }
      if (v17 == v18)
      {
        uint64_t v24 = *(void **)(a1 + 80);
        uint64_t v25 = *(void *)(a1 + 88);
        id v39 = 0;
        [v24 convertToBuffer:v25 fromBuffer:v5 error:&v39];
        id v26 = v39;
        sub_10003DE04(a1, *(void **)(a1 + 88), v6);
      }
      else
      {
        *(void *)&long long buf = 0;
        *((void *)&buf + 1) = &buf;
        uint64_t v41 = 0x2020000000;
        BOOL v42 = 0;
        BOOL v42 = [v5 frameLength] != 0;
        [*(id *)(a1 + 88) setFrameLength:0];
        __int16 v27 = *(void **)(a1 + 80);
        uint64_t v28 = *(void *)(a1 + 88);
        uint64_t v32 = _NSConcreteStackBlock;
        uint64_t v33 = 3221225472;
        long long v34 = sub_10003ECE0;
        long long v35 = &unk_100221400;
        p_long long buf = &buf;
        id v38 = 0;
        id v36 = v5;
        id v29 = [v27 convertToBuffer:v28 error:&v38 withInputFromBlock:&v32];
        id v26 = v38;
        if (objc_msgSend(*(id *)(a1 + 88), "frameLength", v32, v33, v34, v35))
        {
          sub_10003DE04(a1, *(void **)(a1 + 88), v6);
        }
        else if (v29 == (id)3)
        {
          double v30 = +[VMAudioService sharedInstance];
          [v30 setRecordingError:v26];

          __int16 v31 = OSLogForCategory();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            sub_10016AC08();
          }
        }
        _Block_object_dispose(&buf, 8);
      }
    }
    else
    {
      sub_10003DE04(a1, v5, v6);
    }
    if (*(double *)(a1 + 216) != 0.0) {
      sub_10003D62C(a1);
    }
  }
}

void sub_10003E760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003E788(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v7 = OSLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v14 = "-[VMRecordingEngine _startPlayback:time:]";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s -- First overdub buffer received", buf, 0xCu);
    }

    id v8 = *(void **)(a1 + 120);
    id v9 = [[VMRecordingEngineBuffer alloc] initWithAudioBuffer:v6 audioTime:v5];

    [v8 addObject:v9];
    double v10 = dispatch_get_global_queue(25, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10003E930;
    block[3] = &unk_100221278;
    block[4] = a1;
    dispatch_async(v10, block);

    double v11 = *(void **)(a1 + 136);
    *(void *)(a1 + 136) = &stru_100221398;
  }
}

id sub_10003E930(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) play];
}

void sub_10003E944(id a1, VMRecordingEngine *a2, AVAudioPCMBuffer *a3, AVAudioTime *a4)
{
}

void sub_10003E954(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 148));
    id v7 = *(id *)(a1 + 112);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 148));
    id v8 = *(void **)(a1 + 120);
    if (v7)
    {
      id v9 = v8;
      double v10 = v9;
      if (*(void *)(a1 + 120))
      {
        id v29 = v5;
        double v11 = [v9 objectEnumerator];
        uint64_t v12 = *(void **)(a1 + 120);
        *(void *)(a1 + 120) = 0;

        id v13 = 0;
        do
        {
          uint64_t v14 = v13;
          id v13 = [v11 nextObject];

          if (!v13)
          {

            id v5 = v29;
            goto LABEL_17;
          }
          double v15 = [v13 audioBuffer];
          double v16 = [v13 audioTime];
          int v17 = sub_10003DFB4(a1, v15, v16);
        }
        while (!v17);
        uint64_t v28 = v10;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        id v18 = v11;
        id v19 = [v18 countByEnumeratingWithState:&v30 objects:v34 count:16];
        if (v19)
        {
          id v20 = v19;
          uint64_t v21 = *(void *)v31;
          do
          {
            id v22 = 0;
            double v23 = v13;
            do
            {
              if (*(void *)v31 != v21) {
                objc_enumerationMutation(v18);
              }
              id v13 = *(id *)(*((void *)&v30 + 1) + 8 * (void)v22);

              uint64_t v24 = [v13 audioBuffer];
              uint64_t v25 = [v13 audioTime];
              sub_10003E258(a1, v24, v25);

              id v22 = (char *)v22 + 1;
              double v23 = v13;
            }
            while (v20 != v22);
            id v20 = [v18 countByEnumeratingWithState:&v30 objects:v34 count:16];
          }
          while (v20);
        }

        id v5 = v29;
        sub_10003E258(a1, v29, v6);
        [(id)a1 _startRecording];
      }
      else
      {
LABEL_17:
        __int16 v27 = *(void **)(a1 + 136);
        *(void *)(a1 + 136) = &stru_1002213B8;

        sub_10003EC40((void *)a1, v5, v6);
      }
    }
    else
    {
      id v26 = [[VMRecordingEngineBuffer alloc] initWithAudioBuffer:v5 audioTime:v6];
      [v8 addObject:v26];
    }
  }
}

void sub_10003EC30(id a1, VMRecordingEngine *a2, AVAudioPCMBuffer *a3, AVAudioTime *a4)
{
}

void sub_10003EC40(void *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (a1 && sub_10003DFB4((uint64_t)a1, v6, v5)) {
    [a1 _startRecording];
  }
}

void sub_10003ECD0(id a1, VMRecordingEngine *a2, AVAudioPCMBuffer *a3, AVAudioTime *a4)
{
}

id sub_10003ECE0(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 0;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    uint64_t v4 = *(void **)(a1 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = v4;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;

  return v5;
}

void sub_10003F510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003F538(id a1, VMRecordingEngine *a2, AVAudioPCMBuffer *a3, AVAudioTime *a4)
{
}

void sub_10003F548(id a1, VMRecordingEngine *a2, AVAudioPCMBuffer *a3, AVAudioTime *a4)
{
}

void sub_10003F558(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    (*(void (**)(void))(WeakRetained[17] + 16))();
  }
}

void sub_10003F5E4(uint64_t a1, AudioUnit inUnit, int a3)
{
  if (a3 == 2001)
  {
    uint64_t v9 = v3;
    uint64_t v10 = v4;
    UInt32 ioDataSize = 4;
    int outData = 0;
    OSStatus Property = AudioUnitGetProperty(inUnit, 0x7D1u, 0, 0, &outData, &ioDataSize);
    if (!(Property | outData)) {
      sub_10003D62C(a1);
    }
  }
}

void sub_10003F650(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1 && [v3 frameLength])
  {
    id v5 = [*(id *)(a1 + 160) url];
    if (v5)
    {
      id v6 = +[RCSSavedRecordingService sharedService];
      [v6 writeAudioFile:v5 buffer:v4 completionBlock:&stru_1002214A8];
    }
    else
    {
      id v6 = OSLogForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10016AD08(v6);
      }
    }
  }
}

void sub_10003F714(id a1, NSError *a2)
{
  double v2 = a2;
  id v3 = v2;
  if (v2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10003F7AC;
    block[3] = &unk_100221278;
    id v5 = v2;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_10003F7AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[VMAudioService sharedInstance];
  [v2 setRecordingError:v1];
}

void sub_10003FB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003FB30(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    sub_10003FB7C(WeakRetained);
    [v2 _signalOverdubPlaybackHasStarted];
    id WeakRetained = v2;
  }
}

void sub_10003FB7C(id *a1)
{
  if (a1)
  {
    id v2 = a1[12];
    uint64_t v3 = [a1[13] nextObject];
    uint64_t v4 = (void *)v3;
    if (v2) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      objc_initWeak(&location, a1);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_10003FC8C;
      v6[3] = &unk_1002214F8;
      objc_copyWeak(&v7, &location);
      [v2 scheduleBuffer:v4 completionHandler:v6];
      objc_destroyWeak(&v7);
      objc_destroyWeak(&location);
    }
  }
}

void sub_10003FC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003FC8C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_10003FB7C();
}

void sub_10004020C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

id sub_1000411A4(uint64_t a1, void *a2)
{
  return [a2 setActiveTimeController:*(void *)(a1 + 32)];
}

id sub_100041220(uint64_t a1, void *a2)
{
  return [a2 setBlurred:*(unsigned __int8 *)(a1 + 32)];
}

void sub_10004123C(id a1, RCAVWaveformViewController *a2, unint64_t a3, BOOL *a4)
{
  id v4 = [(RCAVWaveformViewController *)a2 waveformViewController];
  [v4 resetZoomScale];
}

void sub_1000412F0(uint64_t a1, void *a2)
{
  id v3 = [a2 waveformViewController];
  [v3 setIsPlayback:*(unsigned __int8 *)(a1 + 32)];
}

id sub_1000413B4(uint64_t a1, void *a2)
{
  return [a2 setIsEditMode:*(unsigned __int8 *)(a1 + 32)];
}

void sub_100041430(uint64_t a1, void *a2)
{
  id v3 = [a2 waveformViewController];
  [v3 setIsOverview:*(unsigned __int8 *)(a1 + 32)];
}

void sub_1000414F4(uint64_t a1, void *a2)
{
  id v3 = [a2 waveformViewController];
  [v3 setIsCompactView:*(unsigned __int8 *)(a1 + 32)];
}

id sub_1000415FC(uint64_t a1, void *a2)
{
  return [a2 setCurrentTime:*(double *)(a1 + 32)];
}

id sub_1000416C8(double *a1, void *a2)
{
  return [a2 setSelectedTimeRange:a1[4] animationDuration:a1[5]];
}

id sub_100041798(uint64_t a1, void *a2)
{
  return [a2 reloadWaveformDataSource:*(void *)(a1 + 32) withActiveTimeController:*(void *)(a1 + 40)];
}

void sub_1000417B4(id a1, RCAVWaveformViewController *a2, unint64_t a3, BOOL *a4)
{
  id v4 = [(RCAVWaveformViewController *)a2 waveformDataSource];
  BOOL v5 = v4;
  if (v4)
  {
    id v7 = v4;
    unsigned __int8 v6 = [v4 finished];
    BOOL v5 = v7;
    if ((v6 & 1) == 0)
    {
      [v7 cancelLoading];
      BOOL v5 = v7;
    }
  }
}

void sub_100041824(id a1, RCAVWaveformViewController *a2, unint64_t a3, BOOL *a4)
{
  id v4 = [(RCAVWaveformViewController *)a2 waveformViewController];
  [v4 stopScrolling];
}

void sub_1000418D8(uint64_t a1, void *a2)
{
  id v3 = [a2 waveformViewController];
  [v3 enableWaveformScrolling:*(unsigned __int8 *)(a1 + 32)];
}

void sub_10004193C(id a1, RCAVWaveformViewController *a2, unint64_t a3, BOOL *a4)
{
  id v4 = [(RCAVWaveformViewController *)a2 waveformViewController];
  [v4 updateColors];
}

void sub_100041BEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[RCRecorderStyleProvider sharedStyleProvider];
  BOOL v5 = +[UIButtonConfiguration filledButtonConfiguration];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100041D60;
  void v11[3] = &unk_100221678;
  id v12 = v4;
  id v6 = v4;
  id v7 = objc_retainBlock(v11);
  [v5 setTitle:*(void *)(a1 + 32)];
  [v5 setTitleTextAttributesTransformer:v7];
  id v8 = [v6 trimDeleteButtonBackgroundColor];
  [v5 setBaseBackgroundColor:v8];

  uint64_t v9 = [v6 trimDeleteButtonTextColor];
  [v5 setBaseForegroundColor:v9];

  uint64_t v10 = [v5 background];
  [v6 trimDeleteButtonCornerRadius];
  [v10 setCornerRadius:];

  [v5 setCornerStyle:-1];
  [v3 setConfiguration:v5];
}

id sub_100041D60(uint64_t a1, void *a2)
{
  id v3 = [a2 mutableCopy];
  id v4 = [*(id *)(a1 + 32) trimDeleteButtonFont];
  [v3 setObject:v4 forKey:NSFontAttributeName];

  return v3;
}

UIColor *__cdecl sub_100043AD8(id a1, UITraitCollection *a2)
{
  if ([(UITraitCollection *)a2 isUserInterfaceStyleDark])
  {
    double v2 = 0.537;
    double v3 = 0.514;
    double v4 = 1.0;
  }
  else
  {
    double v4 = 0.6;
    double v2 = 0.137;
    double v3 = 0.114;
  }
  BOOL v5 = +[UIColor colorWithRed:v4 green:v2 blue:v3 alpha:1.0];

  return (UIColor *)v5;
}

void sub_1000450E8(id a1)
{
  uint64_t v1 = +[UIColor colorWithRed:1.0 green:0.231372549 blue:0.188235294 alpha:1.0];
  double v2 = (void *)qword_10026A748;
  qword_10026A748 = v1;
}

UIColor *__cdecl sub_1000452E4(id a1, UITraitCollection *a2)
{
  unsigned int v2 = [(UITraitCollection *)a2 isUserInterfaceStyleDark];
  double v3 = 0.129411765;
  if (v2) {
    double v3 = 1.0;
  }

  return +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", v3);
}

UIColor *__cdecl sub_100045354(id a1, UITraitCollection *a2)
{
  if ([(UITraitCollection *)a2 isUserInterfaceStyleDark])
  {
    double v2 = 0.898039216;
    double v3 = 0.917647059;
  }
  else
  {
    double v2 = 0.56;
    double v3 = 0.58;
  }
  double v4 = +[UIColor colorWithRed:v2 green:v2 blue:v3 alpha:1.0];

  return (UIColor *)v4;
}

UIColor *__cdecl sub_1000453D8(id a1, UITraitCollection *a2)
{
  if ([(UITraitCollection *)a2 isUserInterfaceStyleDark])
  {
    double v2 = 0.180392157;
    double v3 = 0.184313725;
    double v4 = 1.0;
    double v5 = 0.180392157;
  }
  else
  {
    double v2 = 0.87;
    double v4 = 1.0;
    double v5 = 0.87;
    double v3 = 0.87;
  }
  id v6 = +[UIColor colorWithRed:v2 green:v5 blue:v3 alpha:v4];

  return (UIColor *)v6;
}

UIColor *__cdecl sub_100045460(id a1, UITraitCollection *a2)
{
  if ([(UITraitCollection *)a2 isUserInterfaceStyleDark]) {
    +[UIColor whiteColor];
  }
  else {
  double v2 = +[UIColor blackColor];
  }

  return (UIColor *)v2;
}

id sub_100045540(unsigned char *a1, void *a2)
{
  if ([a2 isUserInterfaceStyleDark])
  {
    if (a1[32])
    {
      if (a1[33])
      {
        if (a1[34])
        {
          double v3 = 0.671;
          double v4 = 0.655;
          double v5 = 0.58;
        }
        else
        {
          double v3 = 0.384;
          double v4 = 0.353;
          double v5 = 0.216;
        }
        goto LABEL_22;
      }
      if (!a1[34])
      {
        double v3 = 0.435;
        double v4 = 0.408;
        double v5 = 0.282;
LABEL_22:
        double v6 = 1.0;
        goto LABEL_32;
      }
LABEL_24:
      id v7 = +[UIColor whiteColor];
      goto LABEL_33;
    }
    if (a1[33])
    {
      if (a1[34])
      {
        double v3 = 0.588;
        double v5 = 0.596;
      }
      else
      {
        double v3 = 0.231;
        double v5 = 0.247;
      }
    }
    else
    {
      if (a1[34]) {
        goto LABEL_24;
      }
      double v3 = 0.294;
      double v5 = 0.31;
    }
LABEL_31:
    double v6 = 1.0;
    double v4 = v3;
    goto LABEL_32;
  }
  if (a1[32])
  {
    if (a1[33])
    {
      if (a1[34])
      {
        double v3 = 0.482;
        double v4 = 0.463;
        double v5 = 0.384;
      }
      else
      {
        double v3 = 0.898;
        double v4 = 0.859;
        double v5 = 0.714;
      }
      goto LABEL_22;
    }
    if (!a1[34])
    {
      double v3 = 0.82;
      double v4 = 0.788;
      double v5 = 0.655;
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  if (!a1[33])
  {
    if (!a1[34])
    {
      double v3 = 0.765;
      double v5 = 0.769;
      goto LABEL_31;
    }
LABEL_26:
    id v7 = +[UIColor blackColor];
    goto LABEL_33;
  }
  if (!a1[34])
  {
    double v3 = 0.859;
    double v5 = 0.863;
    goto LABEL_31;
  }
  double v3 = 0.478;
  double v6 = 1.0;
  double v4 = 0.478;
  double v5 = 0.478;
LABEL_32:
  id v7 = +[UIColor colorWithRed:v3 green:v4 blue:v5 alpha:v6];
LABEL_33:

  return v7;
}

void sub_1000457DC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_1000457F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained _isIpadOrIOSMac])
  {
    unsigned int v5 = [v3 isUserInterfaceStyleDark];

    if (v5)
    {
      double v6 = +[UIColor tertiarySystemFillColor];
      [v6 alphaComponent];
      double v8 = v7 * 0.66;

      uint64_t v9 = +[UIColor tertiarySystemFillColor];
      goto LABEL_6;
    }
  }
  else
  {
  }
  uint64_t v10 = +[UIColor quaternarySystemFillColor];
  [v10 alphaComponent];
  double v8 = v11 * 0.33;

  uint64_t v9 = +[UIColor quaternarySystemFillColor];
LABEL_6:
  id v12 = v9;
  id v13 = [v9 colorWithAlphaComponent:v8];

  return v13;
}

void sub_1000459BC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_1000459D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained(v4);
  if ([WeakRetained _isIpadOrIOSMac])
  {
    unsigned int v6 = [v3 isUserInterfaceStyleDark];

    if (v6)
    {
      double v7 = +[UIColor tertiarySystemFillColor];
      [v7 alphaComponent];
      double v9 = v8 * 0.38;

      uint64_t v10 = +[UIColor tertiarySystemFillColor];
      goto LABEL_11;
    }
  }
  else
  {
  }
  id v11 = objc_loadWeakRetained(v4);
  if (![v11 _isCompactWidth])
  {

    goto LABEL_9;
  }
  unsigned int v12 = [v3 isUserInterfaceStyleDark];

  if (!v12)
  {
LABEL_9:
    id v13 = +[UIColor quaternarySystemFillColor];
    [v13 alphaComponent];
    double v15 = 0.67;
    goto LABEL_10;
  }
  id v13 = +[UIColor quaternarySystemFillColor];
  [v13 alphaComponent];
  double v15 = 0.65;
LABEL_10:
  double v9 = v14 * v15;

  uint64_t v10 = +[UIColor quaternarySystemFillColor];
LABEL_11:
  double v16 = v10;
  int v17 = [v10 colorWithAlphaComponent:v9];

  return v17;
}

void sub_100047378(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) playPauseButton];
  [v3 setEnabled:v2];

  uint64_t v4 = *(unsigned __int8 *)(a1 + 40);
  unsigned int v5 = [*(id *)(a1 + 32) jumpBackwardButton];
  [v5 setEnabled:v4];

  uint64_t v6 = *(unsigned __int8 *)(a1 + 40);
  id v7 = [*(id *)(a1 + 32) jumpForwardButton];
  [v7 setEnabled:v6];
}

void sub_10004809C(uint64_t a1)
{
  [*(id *)(a1 + 32) setRowSpacing:27.0];
  [*(id *)(a1 + 32) setVerticalAlignment:3];
  [*(id *)(a1 + 32) setHorizontalDistribution:5];
  uint64_t v2 = *(void **)(a1 + 32);
  v10[0] = *(void *)(a1 + 40);
  v10[1] = v10[0];
  v10[2] = v10[0];
  id v3 = +[NSArray arrayWithObjects:v10 count:3];
  id v4 = [v2 addRowWithArrangedSubviews:v3];

  [*(id *)(a1 + 32) setAlignment:0 forView:*(void *)(a1 + 40) inAxis:0];
  unsigned int v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 56);
  v9[0] = *(void *)(a1 + 48);
  v9[1] = v6;
  v9[2] = v5[18];
  id v7 = +[NSArray arrayWithObjects:v9 count:3];
  id v8 = [v5 addRowWithArrangedSubviews:v7];
}

void sub_10004969C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)RCActivityWaveformProcessor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000496CC(void *a1)
{
}

void sub_1000499A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000499FC(uint64_t a1, int a2, int a3, void *a4)
{
  sub_100049BC0(a1);
  vm_size_t v8 = (vm_page_size + 4 * a2 - 1) & -(uint64_t)vm_page_size;
  *(_DWORD *)(a1 + 32) = v8 >> 2;
  double v9 = (char *)malloc_type_calloc(3 * a3, 8uLL, 0x80040B8603338uLL);
  *(void *)a1 = &v9[8 * a3];
  *(void *)(a1 + 8) = &v9[16 * a3];
  *(void *)(a1 + 16) = v9;
  if (a3 < 1) {
    return 1;
  }
  **(void **)(a1 + 16) = sub_1000691A8(v8, 10, a4);
  uint64_t v10 = **(void **)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a3;
    uint64_t v13 = a3 - 1;
    while (1)
    {
      *(void *)(*(void *)a1 + 8 * v11) = v10;
      *(void *)(*(void *)(a1 + 8) + 8 * v11) = *(void *)(*(void *)(a1 + 16) + 8 * v11);
      *(_DWORD *)(a1 + 36) = v11 + 1;
      if (v13 == v11) {
        return v11 + 1 >= v12;
      }
      *(void *)(*(void *)(a1 + 16) + 8 * v11 + 8) = sub_1000691A8(v8, 10, a4);
      uint64_t v10 = *(void *)(*(void *)(a1 + 16) + 8 * v11++ + 8);
      if (!v10)
      {
        BOOL v14 = v11 >= v12;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v14 = 0;
LABEL_9:
    sub_100049BC0(a1);
  }
  return v14;
}

id sub_100049B54(uint64_t a1)
{
  return [*(id *)(a1 + 32) activityWaveformProcessor:*(double *)(*(void *)(a1 + 40) + 112)];
}

double sub_100049BC0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    if (*(int *)(a1 + 36) >= 1)
    {
      uint64_t v3 = 0;
      do
        sub_10006918C(*(void *)(*(void *)(a1 + 16) + 8 * v3++), 4 * *(int *)(a1 + 32));
      while (v3 < *(int *)(a1 + 36));
      uint64_t v2 = *(void **)(a1 + 16);
    }
    free(v2);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  atomic_store(0, (unsigned int *)(a1 + 40));
  return result;
}

void sub_100049E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100049E5C(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(unsigned int *)(result + 36);
  int v3 = (int)(*(_DWORD *)(result + 24) + a2) % *(_DWORD *)(result + 32);
  *(_DWORD *)(result + 24) = v3;
  if ((int)v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 8 * v2;
    do
    {
      *(void *)(*(void *)(result + 8) + v4) = *(void *)(*(void *)(result + 16) + v4) + 4 * v3;
      v4 += 8;
    }
    while (v5 != v4);
  }
  atomic_fetch_add((atomic_uint *volatile)(result + 40), a2);
  signed int v6 = atomic_load((unsigned int *)(result + 40));
  if (v6 > *(_DWORD *)(result + 32)) {
    sub_10016B100();
  }
  return result;
}

id sub_100049ED4(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 40);
  if (*(float *)&a2 != -1.0) {
    a2 = sub_100049F24(*(uint64_t **)(*(void *)(a1 + 32) + 72), *(float *)&a2);
  }
  int v3 = *(void **)(a1 + 32);

  return [v3 consumeRingBufferIfNecessary:a2];
}

double sub_100049F24(uint64_t *a1, float a2)
{
  int v2 = *((_DWORD *)a1 + 7);
  unint64_t v3 = *((int *)a1 + 6);
  if (v2 >= (int)v3)
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = *a1;
    double v6 = *((double *)a1 + 5) - *(float *)(*a1 + 4 * v4);
  }
  else
  {
    *((_DWORD *)a1 + 7) = v2 + 1;
    uint64_t v4 = a1[4];
    uint64_t v5 = *a1;
    double v6 = *((double *)a1 + 5);
  }
  *(float *)(v5 + 4 * v4) = a2;
  double result = v6 + a2;
  *((double *)a1 + 5) = result;
  a1[4] = (v4 + 1) % v3;
  return result;
}

uint64_t sub_10004A1D0(uint64_t result, int a2)
{
  int v2 = (*(_DWORD *)(result + 28) + a2) % *(_DWORD *)(result + 32);
  *(_DWORD *)(result + 28) = v2;
  uint64_t v3 = *(unsigned int *)(result + 36);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 8 * v3;
    do
    {
      *(void *)(*(void *)result + v4) = *(void *)(*(void *)(result + 16) + v4) + 4 * v2;
      v4 += 8;
    }
    while (v5 != v4);
  }
  atomic_fetch_add((atomic_uint *volatile)(result + 40), -a2);
  unsigned int v6 = atomic_load((unsigned int *)(result + 40));
  if ((v6 & 0x80000000) != 0) {
    sub_10016B12C();
  }
  return result;
}

void *sub_10004A360(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10004A3D8(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_10004A3BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10004A3D8(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_10004A41C();
  }
  double result = (char *)sub_10004A434((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_10004A41C()
{
}

void *sub_10004A434(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_10004A4FC();
  }
  return operator new(4 * a2);
}

void sub_10004A46C(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10004A4C8(exception, a1);
}

void sub_10004A4B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_10004A4C8(std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_10004A4FC()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void sub_10004A5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

NSCollectionLayoutSection *__cdecl sub_10004BC3C(id a1, int64_t a2, NSCollectionLayoutEnvironment *a3)
{
  uint64_t v4 = a3;
  id v5 = [objc_alloc((Class)UICollectionLayoutListConfiguration) initWithAppearance:2];
  [v5 setShowsSeparators:1];
  unsigned int v6 = +[UIColor clearColor];
  [v5 setBackgroundColor:v6];

  if ((a2 | 2) == 2) {
    [v5 setHeaderMode:1];
  }
  id v7 = +[NSCollectionLayoutSection sectionWithListConfiguration:v5 layoutEnvironment:v4];
  [v7 contentInsets];
  double v9 = v8;
  double v11 = v10;
  double v13 = v12;
  BOOL v14 = +[RCRecorderStyleProvider sharedStyleProvider];
  [v14 playbackSettingsCollectionViewContentInsetBottom];
  double v16 = v15;

  [v7 setContentInsets:v9, v11, v16, v13];

  return (NSCollectionLayoutSection *)v7;
}

void sub_10004D66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10004D68C(uint64_t a1, void *a2, void *a3)
{
  id v20 = a2;
  id v21 = a3;
  id v5 = +[RCRecorderStyleProvider sharedStyleProvider];
  unsigned int v6 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  double v8 = [WeakRetained folderName];

  double v9 = +[NSBundle mainBundle];
  double v23 = [v9 localizedStringForKey:@"RENAME_FOLDER" value:&stru_100228BC8 table:0];

  id v22 = [v5 renameContextMenuButtonImage];
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10004D9D8;
  v27[3] = &unk_100221910;
  objc_copyWeak(&v29, v6);
  id v10 = v8;
  id v28 = v10;
  double v11 = +[UIAction actionWithTitle:v23 image:v22 identifier:0 handler:v27];
  double v12 = +[NSBundle mainBundle];
  double v13 = [v12 localizedStringForKey:@"DELETE" value:&stru_100228BC8 table:0];

  BOOL v14 = [v5 deleteContextMenuButtonImage];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  void v24[2] = sub_10004DA38;
  v24[3] = &unk_100221910;
  objc_copyWeak(&v26, v6);
  id v15 = v10;
  id v25 = v15;
  double v16 = +[UIAction actionWithTitle:v13 image:v14 identifier:0 handler:v24];
  [v16 setAttributes:2];
  v30[0] = v11;
  v30[1] = v16;
  int v17 = +[NSArray arrayWithObjects:v30 count:2];
  id v18 = +[UIMenu menuWithTitle:&stru_100228BC8 children:v17];

  objc_destroyWeak(&v26);
  objc_destroyWeak(&v29);

  return v18;
}

void sub_10004D990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location)
{
  objc_destroyWeak(v12);
  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

void sub_10004D9D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v2 = [WeakRetained actionHandler];
  [v2 showRenamingControllerWithFolderName:*(void *)(a1 + 32)];
}

void sub_10004DA38(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v2 = [WeakRetained actionHandler];
  [v2 deleteFolderWithFolderName:*(void *)(a1 + 32)];
}

id sub_10004E914(uint64_t a1)
{
  return [*(id *)(a1 + 32) adjustConstraints:1 forDisplayMode:*(void *)(*(void *)(a1 + 32) + 80)];
}

uint64_t sub_10004E92C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 72) = 0;
  return result;
}

id sub_10004F994(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) setAlpha:1.0];
}

id sub_100050C80(uint64_t a1)
{
  return [*(id *)(a1 + 32) _registerInternalAudioUnits];
}

void sub_100050DEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 120))
  {
    long long v3 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)long long buf = *(_OWORD *)(a1 + 40);
    *(_OWORD *)&buf[16] = v3;
    uint64_t v17 = *(void *)(a1 + 72);
    long long v4 = *(_OWORD *)(v2 + 8);
    long long v5 = *(_OWORD *)(v2 + 24);
    uint64_t v15 = *(void *)(v2 + 40);
    v14[0] = v4;
    v14[1] = v5;
    BOOL v6 = sub_10009D778((uint64_t)buf, (uint64_t)v14);
    id v7 = *(_DWORD **)(a1 + 32);
    if (v6 && v7[32] == *(_DWORD *)(a1 + 80)) {
      return;
    }
    [v7 _unprepare];
    uint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 80);
  id v13 = 0;
  long long v9 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)long long buf = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&buf[16] = v9;
  uint64_t v17 = *(void *)(a1 + 72);
  unsigned __int8 v10 = [(id)v2 _prepareWithFormat:buf maxFramesPerRender:v8 error:&v13];
  id v11 = v13;
  if ((v10 & 1) == 0)
  {
    double v12 = OSLogForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[VMProcessor prepareWithFormat:maxFramesPerRender:]_block_invoke";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s -- prepareWithFormat error %@", buf, 0x16u);
    }
  }
}

id sub_100050FD4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _unprepare];
}

void sub_100051298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1000512C0(uint64_t a1)
{
  return 0;
}

uint64_t sub_1000512E0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  *(void *)&ioData.mNumberBuffers = 1;
  ioData.mBuffers[0].mNumberChannels = 1;
  long long v3 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v16.mSampleTime = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v16.mRateScalar = v3;
  long long v4 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)&v16.mSMPTETime.mSubframes = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v16.mSMPTETime.mHours = v4;
  if (!a2) {
    return 0;
  }
  uint64_t result = 0;
  unsigned int v8 = 0;
  LODWORD(v9) = *(_DWORD *)(a1 + 36);
  unsigned __int8 v10 = (uint64_t *)(a3 + 16);
  do
  {
    if (a2 - v8 >= *(_DWORD *)(a1 + 132)) {
      UInt32 v11 = *(_DWORD *)(a1 + 132);
    }
    else {
      UInt32 v11 = a2 - v8;
    }
    if (v9 && !result)
    {
      unint64_t v12 = 0;
      id v13 = v10;
      do
      {
        ioData.mBuffers[0].mDataByteSize = 4 * v11;
        uint64_t v14 = *v13;
        v13 += 2;
        ioData.mBuffers[0].mData = (void *)(v14 + 4 * v8);
        *(void *)(a1 + 112) = &ioData;
        uint64_t result = AudioUnitRender(*(AudioUnit *)(*(void *)(a1 + 120) + 8 * v12++), 0, &v16, 0, v11, &ioData);
        unint64_t v9 = *(unsigned int *)(a1 + 36);
      }
      while (v12 < v9 && result == 0);
    }
    v8 += v11;
    v16.mSampleTime = v16.mSampleTime + (double)v11;
  }
  while (v8 < a2);
  return result;
}

void sub_1000513F4(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t state64 = 0;
  if (WeakRetained && !notify_get_state(a2, &state64))
  {
    long long v4 = +[NSNumber numberWithUnsignedLongLong:state64];
    [WeakRetained _updateParameterForAddress:v4];
  }
}

void sub_100051610(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = (void *)qword_10026A758;
  qword_10026A758 = v1;

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v3 = +[VMDSPGraph parameters];
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        unsigned int v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        unint64_t v9 = (void *)qword_10026A758;
        unsigned __int8 v10 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v8 address]);
        [v9 setObject:v8 forKeyedSubscript:v10];
      }
      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }
}

uint64_t sub_100051954(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(void *)(a1 + 32) + 176));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = (pthread_mutex_t *)(*(void *)(a1 + 32) + 176);

  return pthread_mutex_unlock(v2);
}

uint64_t sub_1000519A8(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  if (*(unsigned char *)(a1 + 248) && pthread_mutex_trylock((pthread_mutex_t *)(a1 + 176))) {
    return 0;
  }
  uint64_t v8 = 0;
  if (a4 && a2 && *(void *)(a1 + 120))
  {
    int v9 = *(unsigned __int8 *)(a1 + 249);
    uint64_t v10 = *(void *)(a1 + 136);
    if (v10 == a3)
    {
      float v11 = *(float *)(a1 + 152);
    }
    else
    {
      float v11 = 0.0;
      if (*(unsigned char *)(a1 + 249)) {
        float v11 = 1.0;
      }
      *(float *)(a1 + 152) = v11;
    }
    BOOL v15 = v9 == 0;
    BOOL v12 = v9 != 0;
    if (v15) {
      BOOL v13 = v11 != 0.0;
    }
    else {
      BOOL v13 = v11 != 1.0;
    }
    uint64_t v8 = v11 != 0.0 || v12;
    BOOL v14 = v11 != 1.0 && v12;
    BOOL v15 = v10 == a3 && *(void *)(a1 + 144) == a3;
    int v16 = !v15;
    if (v8 == 1 && v16 != 0)
    {
      sub_10009D86C(a4, *(unsigned int **)(a1 + 160));
      sub_1000512E0(a1, a2, *(void *)(a1 + 160));
    }
    if (v13) {
      sub_10009D86C(a4, *(unsigned int **)(a1 + 160));
    }
    uint64_t v18 = a3 + a2;
    if (v8)
    {
      uint64_t v8 = sub_1000512E0(a1, a2, (uint64_t)a4);
      if (v16)
      {
        int v19 = *(_DWORD *)(a1 + 240) >= a2 ? a2 : *(_DWORD *)(a1 + 240);
        unsigned int v20 = a2 - v19 >= *(_DWORD *)(a1 + 244) ? *(_DWORD *)(a1 + 244) : a2 - v19;
        sub_10009DA20(a4, v19, 0);
        if (v20)
        {
          float v21 = 1.0 / (double)v20;
          sub_10009D9BC(a4, v20, v19, 0.0, v21);
        }
      }
      *(double *)(a1 + 48) = *(double *)(a1 + 48) + (double)a2;
      *(void *)(a1 + 144) = v18;
    }
    if (v13)
    {
      float v22 = *(float *)(a1 + 152);
      float v23 = *(float *)(a1 + 156);
      if (!v14) {
        float v23 = -v23;
      }
      unint64_t v24 = a4[3];
      if (v24 >= 4)
      {
        uint64_t v25 = 0;
        unint64_t v26 = v24 >> 2;
        unsigned int v29 = *a4;
        id v28 = a4 + 4;
        uint64_t v27 = v29;
        uint64_t v30 = *(void *)(a1 + 160) + 16;
        do
        {
          if (v27)
          {
            long long v31 = v28;
            long long v32 = (uint64_t *)v30;
            uint64_t v33 = v27;
            do
            {
              uint64_t v35 = *(void *)v31;
              v31 += 4;
              uint64_t v34 = v35;
              float v36 = *(float *)(v35 + 4 * v25);
              uint64_t v37 = *v32;
              v32 += 2;
              *(float *)(v34 + 4 * v25) = (float)((float)(1.0 - v22) * *(float *)(v37 + 4 * v25)) + (float)(v36 * v22);
              --v33;
            }
            while (v33);
          }
          float v22 = fminf(fmaxf(v23 + v22, 0.0), 1.0);
          ++v25;
        }
        while (v25 != v26);
      }
      *(float *)(a1 + 152) = v22;
    }
    *(void *)(a1 + 136) = v18;
  }
  if (*(unsigned char *)(a1 + 248)) {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 176));
  }
  return v8;
}

void sub_1000520A8(uint64_t a1)
{
  id v2 = +[NSFileManager defaultManager];
  [v2 removeItemAtURL:*(void *)(a1 + 32) error:0];
}

uint64_t sub_100052104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v6 = *a6;
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 16 * v6;
    do
    {
      *(_OWORD *)&a6[v7 / 4 + 2] = *(_OWORD *)(*(void *)(a1 + 112) + v7 + 8);
      v7 += 16;
    }
    while (v8 != v7);
  }
  return 0;
}

id sub_100052560(uint64_t a1)
{
  double v2 = *(double *)(a1 + 40);
  *(float *)&double v2 = v2;
  [*(id *)(*(void *)(a1 + 32) + 32) setOpacity:v2];
  long long v3 = *(_OWORD *)(a1 + 64);
  v5[0] = *(_OWORD *)(a1 + 48);
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a1 + 80);
  return [*(id *)(a1 + 32) setTransform:v5];
}

char *sub_1000525C0(char *result, int a2)
{
  if (a2)
  {
    long long v2 = *(_OWORD *)(result + 56);
    v3[0] = *(_OWORD *)(result + 40);
    v3[1] = v2;
    v3[2] = *(_OWORD *)(result + 72);
    return (char *)[*((id *)result + 4) setTransform:v3];
  }
  return result;
}

void sub_1000543A4(uint64_t a1, void *a2, void *a3, int a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  id v17 = a2;
  id v18 = a3;
  if (v18)
  {
    int v19 = [v17 animationForKey:v18];
    if (v19) {
      goto LABEL_9;
    }
  }
  else
  {
    int v19 = 0;
  }
  if (!a4)
  {
    if (*(unsigned char *)(a1 + 56)
      && ([v17 superlayer], unsigned int v20 = objc_claimAutoreleasedReturnValue(), v20, v20))
    {
      char v21 = 1;
    }
    else
    {
      +[CATransaction begin];
      +[CATransaction setDisableActions:1];
      [v17 removeAllAnimations];
      char v21 = 0;
    }
    [v17 setFrame:a5, a6, a7, a8];
    *(float *)&double v48 = a9;
    [v17 setOpacity:v48];
    uint64_t v49 = [v17 superlayer];

    if (v49)
    {
      if (v21) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v50 = [*(id *)(a1 + 32) layer];
      [v50 addSublayer:v17];

      if (v21) {
        goto LABEL_25;
      }
    }
    +[CATransaction commit];
    goto LABEL_25;
  }
LABEL_9:
  float v22 = [v17 superlayer];

  if (!v22)
  {
    float v23 = [*(id *)(a1 + 32) layer];
    [v23 addSublayer:v17];
  }
  double v54 = a9;
  double v24 = *(double *)(a1 + 40);
  if (v24 * 0.25 >= *(double *)(a1 + 48)) {
    double v25 = v24 * 0.25;
  }
  else {
    double v25 = *(double *)(a1 + 48);
  }
  if (v19)
  {
    double v26 = CACurrentMediaTime();
    [v19 beginTime];
    double v28 = v27;
    [v19 duration];
    double v30 = v26 - (v28 + v29);
    if (v30 > 0.1) {
      double v25 = v30;
    }
    else {
      double v25 = 0.1;
    }
  }
  id v31 = v17;
  id v53 = v18;
  long long v32 = [v31 presentationLayer];
  uint64_t v33 = [v32 valueForKeyPath:@"position"];

  uint64_t v34 = [v31 presentationLayer];
  uint64_t v35 = [v34 valueForKeyPath:@"bounds"];

  float v36 = [v31 presentationLayer];
  uint64_t v37 = [v36 valueForKey:@"opacity"];

  v57.origin.x = a5;
  v57.origin.y = a6;
  v57.size.width = a7;
  v57.size.height = a8;
  double MidX = CGRectGetMidX(v57);
  v58.origin.x = a5;
  v58.origin.y = a6;
  v58.size.width = a7;
  v58.size.height = a8;
  double MidY = CGRectGetMidY(v58);
  v59.origin.x = a5;
  v59.origin.y = a6;
  v59.size.width = a7;
  v59.size.height = a8;
  double Width = CGRectGetWidth(v59);
  v60.origin.x = a5;
  v60.origin.y = a6;
  v60.size.width = a7;
  v60.size.height = a8;
  double Height = CGRectGetHeight(v60);
  [v31 setPosition:MidX, MidY];
  [v31 setBounds:0.0, 0.0, Width, Height];
  HIDWORD(v42) = HIDWORD(v54);
  *(float *)&double v42 = v54;
  [v31 setOpacity:v42];
  uint64_t v43 = +[CABasicAnimation animationWithKeyPath:@"position"];
  long long v55 = (void *)v33;
  [v43 setFromValue:v33];
  uint64_t v44 = +[CABasicAnimation animationWithKeyPath:@"bounds"];
  uint64_t v52 = (void *)v35;
  [v44 setFromValue:v35];
  uint64_t v45 = +[CABasicAnimation animationWithKeyPath:@"opacity"];
  [v45 setFromValue:v37];
  id v46 = objc_alloc_init((Class)CAAnimationGroup);
  v56[0] = v43;
  v56[1] = v44;
  v56[2] = v45;
  uint64_t v47 = +[NSArray arrayWithObjects:v56 count:3];
  [v46 setAnimations:v47];

  if (v25 >= 0.0) {
    [v46 setDuration:v25];
  }
  [v46 setRemovedOnCompletion:1 v18];
  [v31 addAnimation:v46 forKey:v53];

  id v18 = v51;
LABEL_25:
}

BOOL sub_100054A74(uint64_t a1, void *a2, double a3, double a4)
{
  id v7 = a2;
  [v7 opacity];
  if (v8 < 1.0 || ([v7 isHidden] & 1) != 0)
  {
    BOOL v9 = 0;
  }
  else
  {
    uint64_t v10 = [*(id *)(a1 + 32) layer];
    [v7 frame];
    double v12 = v11;
    double v14 = v13;
    double v16 = v15;
    double v18 = v17;
    int v19 = [v7 superlayer];
    [v10 convertRect:v19 fromLayer:v12, v14, v16, v18];
    double v21 = v20;
    CGFloat v23 = v22;
    double v25 = v24;
    CGFloat v27 = v26;

    v29.origin.x = v21 - a3;
    v29.size.width = a3 + a4 + v25;
    v29.origin.y = v23;
    v29.size.height = v27;
    BOOL v9 = CGRectContainsPoint(v29, *(CGPoint *)(a1 + 40));
  }

  return v9;
}

void sub_1000550DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Block_object_dispose((const void *)(v35 - 128), 8);
  _Unwind_Resume(a1);
}

double sub_10005515C(id a1, double result, double a3, double a4, double a5, int a6)
{
  double v6 = a3 - result;
  if (a6 <= 0) {
    double v6 = result - a3;
  }
  double v7 = fmax(v6, 0.0);
  int v8 = -a6;
  BOOL v9 = v7 >= a4 || a4 <= 0.0;
  double v10 = a3 + (double)v8 * a4;
  if (!v9) {
    uint64_t result = v10;
  }
  BOOL v11 = v7 <= a5 || a5 <= 0.0;
  double v12 = a3 + (double)v8 * a5;
  if (!v11) {
    return v12;
  }
  return result;
}

void sub_1000551A0(uint64_t a1, void *a2)
{
  id v28 = a2;
  [v28 updateTrackingInfo];
  id v3 = [v28 selectionBarType];
  if (v3 == (id)2)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = 1;
    double v21 = [v28 touch];
    double v22 = [*(id *)(a1 + 32) superview];
    [v21 locationInView:v22];
    double v24 = v23;

    if (([*(id *)(a1 + 32) enableTimeTrackingInView] & 1) == 0)
    {
      [v28 trackingOffset];
      double v24 = v24 + v25;
    }
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 160));
    [WeakRetained waveformSelectionOverlay:*(void *)(a1 + 32) timeForOffset:v24];
    *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = v27;

    id v4 = v28;
  }
  else
  {
    if (v3 == (id)1)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
      double v14 = [v28 touch];
      double v15 = [*(id *)(a1 + 32) superview];
      [v14 locationInView:v15];
      double v17 = v16;
      [v28 trackingOffset];
      *(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = v17 + v18;

      id v19 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 160));
      [v19 waveformSelectionOverlay:*(void *)(a1 + 32) timeForOffset:*(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)];
      *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v20;

      (*(void (**)(double, double, double, double))(*(void *)(a1 + 40) + 16))(*(double *)(*(void *)(*(void *)(a1 + 72) + 8) + 24), *(double *)(*(void *)(*(void *)(a1 + 64) + 8) + 24), *(double *)(*(void *)(a1 + 32) + 168), *(double *)(*(void *)(a1 + 32) + 176));
      id v4 = v28;
      uint64_t v13 = *(void *)(a1 + 72);
    }
    else
    {
      id v4 = v28;
      if (v3) {
        goto LABEL_10;
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      id v5 = [v28 touch];
      double v6 = [*(id *)(a1 + 32) superview];
      [v5 locationInView:v6];
      double v8 = v7;
      [v28 trackingOffset];
      *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v8 + v9;

      id v10 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 160));
      [v10 waveformSelectionOverlay:*(void *)(a1 + 32) timeForOffset:*(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)];
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v11;

      (*(void (**)(double, double, double, double))(*(void *)(a1 + 40) + 16))(*(double *)(*(void *)(*(void *)(a1 + 64) + 8) + 24), *(double *)(*(void *)(*(void *)(a1 + 72) + 8) + 24), *(double *)(*(void *)(a1 + 32) + 168), *(double *)(*(void *)(a1 + 32) + 176));
      id v4 = v28;
      uint64_t v13 = *(void *)(a1 + 64);
    }
    *(void *)(*(void *)(v13 + 8) + 24) = v12;
  }
LABEL_10:
}

void sub_100055588(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 touch];

  if (!v5) {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

id sub_100055A74(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [*(id *)(a1 + 32) containsObject:[a2 pointerValue]];
  *a4 = (_BYTE)result;
  return result;
}

id sub_100058924(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)CALayer);
  [v2 setBounds:0.0, 0.0, *(double *)(a1 + 56), *(double *)(a1 + 40) + *(double *)(a1 + 48) * -4.0];
  [v2 setBackgroundColor:[*(id *)(a1 + 32) CGColor]];
  [v2 setOpaque:1];

  return v2;
}

id sub_1000589A8(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)CALayer);
  [v2 setBounds:0.0, 0.0, *(double *)(a1 + 40) + *(double *)(a1 + 40), *(double *)(a1 + 40) + *(double *)(a1 + 40)];
  [v2 setBackgroundColor:[*(id *)(a1 + 32) CGColor]];
  [v2 setCornerRadius:*(double *)(a1 + 40)];
  [v2 setOpaque:1];

  return v2;
}

void sub_100059160(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) durationLabel];
  [v1 setAlpha:0.0];
}

uint64_t sub_1000591B8()
{
  return UIAXTimeStringForDuration();
}

id sub_100059554(uint64_t a1)
{
  return [*(id *)(a1 + 32) setTextColor:*(void *)(a1 + 40)];
}

id sub_100059638(uint64_t a1)
{
  return [*(id *)(a1 + 32) setTextColor:*(void *)(a1 + 40)];
}

id sub_10005A618(uint64_t a1)
{
  [*(id *)(a1 + 40) frame];
  double Height = CGRectGetHeight(v7);
  id v3 = [*(id *)(a1 + 32) recordingViewBottomConstraint];
  [v3 setConstant:Height];

  id v4 = *(void **)(a1 + 32);

  return [v4 layoutIfNeeded];
}

id sub_10005A680(uint64_t a1)
{
  [*(id *)(a1 + 32) setHidden:1];
  id v2 = *(void **)(a1 + 40);

  return _[v2 didUpdateBottomLayoutForEditing];
}

void sub_10005A6C0(uint64_t a1)
{
  +[CATransaction animationDuration];
  double v3 = v2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10005A784;
  v7[3] = &unk_100221CB0;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = v6;
  +[UIView animateWithDuration:v7 animations:v3];
}

id sub_10005A784(uint64_t a1)
{
  [*(id *)(a1 + 32) setHidden:0];
  double v2 = [*(id *)(a1 + 40) recordingViewBottomConstraint];
  [v2 setConstant:0.0];

  [*(id *)(a1 + 40) layoutIfNeeded];
  double v3 = *(void **)(a1 + 48);

  return _[v3 didUpdateBottomLayoutForEditing];
}

float sub_10005BD74(float a1)
{
  return 1.0 - pow((float)(1.0 - a1), 3.0);
}

void sub_10005BEA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005BF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  id v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VMAudioOutputRenderer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_10005C1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10005C1EC(uint64_t a1, int a2, int a3, void *a4)
{
  BOOL v6 = sub_1000499FC(a1, a2, a3, a4);
  if (v6)
  {
    size_t v7 = 16 * (a3 - 1) + 24;
    *(void *)(a1 + 48) = malloc_type_malloc(v7, 0x42E4C910uLL);
    *(void *)(a1 + 56) = malloc_type_malloc(v7, 0x3C8812BAuLL);
  }
  return v6;
}

void sub_10005C480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005C4C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double v2 = *(void **)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 24);
  id v4 = [v2 outputNode];
  [v2 connect:v3];
}

void sub_10005C530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005C644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005C6E8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) delegate];
  if (v1) {
    [v1 audioRendererQueueEmpty];
  }
}

void sub_10005C73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005C7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005C848(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) delegate];
  if (v1) {
    [v1 audioRendererWasInterrupted];
  }
}

void sub_10005C89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005C9F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005CD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005CE28(uint64_t a1)
{
  id WeakRetained = (unsigned int *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    unsigned int v2 = WeakRetained[48];
    unsigned int v3 = atomic_load(WeakRetained + 20);
    unsigned int v4 = v2 - v3;
    uint64_t v5 = v4 & 0xFFFFF000;
    if ((v4 & 0xFFFFF000) != 0)
    {
      BOOL v6 = (_DWORD *)*((void *)WeakRetained + 12);
      size_t v7 = (uint64_t *)*((void *)WeakRetained + 6);
      uint64_t v8 = WeakRetained[19];
      *BOOL v6 = v8;
      if (v8)
      {
        uint64_t v9 = v6 + 4;
        do
        {
          *((_DWORD *)v9 - 2) = 1;
          *((_DWORD *)v9 - 1) = 4 * v5;
          uint64_t v10 = *v7++;
          *uint64_t v9 = v10;
          v9 += 2;
          --v8;
        }
        while (v8);
      }
      unsigned int v11 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
      sub_100049E5C((uint64_t)(WeakRetained + 10), v11);
    }
    if (*((unsigned char *)WeakRetained + 200) && !*((unsigned char *)WeakRetained + 201))
    {
      *((unsigned char *)WeakRetained + 201) = 1;
      [WeakRetained sendEmptyQueueSignal];
    }
  }
}

void sub_10005CF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10005CFA4(uint64_t a1, unsigned char *a2, AudioTimeStamp *a3, uint64_t inNumberFrames, AudioBufferList *ioData)
{
  if (*a2)
  {
    sub_10009DA20(ioData, inNumberFrames, 0);
    return 0;
  }
  else
  {
    AudioUnitRenderActionFlags ioActionFlags = 0;
    uint64_t v6 = *(void *)(a1 + 32);
    size_t v7 = *(OpaqueAudioComponentInstance **)(v6 + 232);
    if (v7) {
      return AudioUnitRender(v7, &ioActionFlags, a3, 0, inNumberFrames, ioData);
    }
    else {
      return sub_10005D010(v6, (uint64_t)a2, &a3->mSampleTime, inNumberFrames, inNumberFrames, &ioData->mNumberBuffers);
    }
  }
}

uint64_t sub_10005D010(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, unsigned int a5, unsigned int *a6)
{
  unsigned int v10 = atomic_load((unsigned int *)(a1 + 80));
  if (v10 >= a5) {
    int v11 = a5;
  }
  else {
    int v11 = v10;
  }
  if (v11 >= 1) {
    sub_10005D41C(a1 + 40, (uint64_t)a6, v11, 0);
  }
  int v12 = a5 - v11;
  if ((int)(a5 - v11) >= 1)
  {
    if (*(unsigned char *)(a1 + 160)) {
      *(void *)(a1 + 208) += v12;
    }
    else {
      *(unsigned char *)(a1 + 200) = 1;
    }
    if (*a6)
    {
      unint64_t v13 = 0;
      uint64_t v14 = 4;
      do
      {
        bzero((void *)(*(void *)&a6[v14] + 4 * v11), 4 * (a5 - v11));
        ++v13;
        v14 += 4;
      }
      while (v13 < *a6);
    }
  }
  if (!*(void *)(a1 + 144))
  {
    *(double *)(a1 + 144) = a3[1];
    *(double *)(a1 + 152) = *a3;
  }
  if ((v12 > 0 || *(double *)(a1 + 184) != a3[2]) && os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 196)))
  {
    *(double *)(a1 + 168) = a3[1];
    *(double *)(a1 + 176) = *a3;
    *(double *)(a1 + 184) = a3[2];
    *(void *)(a1 + 216) = *(void *)(a1 + 208);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 196));
  }
  uint64_t result = *(void *)(a1 + 240);
  if (result)
  {
    uint64_t v16 = (uint64_t)*a3;
    return sub_1000519A8(result, a5, v16, a6);
  }
  return result;
}

uint64_t sub_10005D41C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (*(int *)(a1 + 36) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)a1;
    uint64_t v8 = a4;
    uint64_t v9 = (uint64_t *)(a2 + 16);
    do
    {
      uint64_t v10 = *v9;
      v9 += 2;
      memcpy((void *)(v10 + 4 * v8), *(const void **)(v7 + 8 * v6++), 4 * a3);
    }
    while (v6 < *(int *)(a1 + 36));
  }

  return sub_10004A1D0(a1, a3);
}

void sub_10005D4B4(id a1)
{
  mach_timebase_info(&info);
  LODWORD(v1) = info.numer;
  LODWORD(v2) = info.denom;
  *(double *)&qword_10026A778 = (double)v1 / (double)v2 * 0.000000001;
}

id sub_10005D850(double a1)
{
  BOOL v1 = *(float *)&a1 <= 0.0;
  float v2 = *(float *)&a1 + 1.0;
  if (*(float *)&a1 >= 0.0) {
    float v2 = 1.0;
  }
  *(float *)&a1 = 1.0 - *(float *)&a1;
  if (v1)
  {
    *(float *)&a1 = 1.0;
    float v3 = v2;
  }
  else
  {
    float v3 = 1.0;
  }
  unsigned int v4 = +[NSNumber numberWithFloat:a1];
  v9[0] = v4;
  *(float *)&double v5 = v3;
  uint64_t v6 = +[NSNumber numberWithFloat:v5];
  v9[1] = v6;
  uint64_t v7 = +[NSArray arrayWithObjects:v9 count:2];

  return v7;
}

id sub_10005F628(uint64_t a1)
{
  float v2 = *(id **)(a1 + 32);
  [v2[4] currentDuration];
  [v2 setDuration:];
  id result = [*(id *)(a1 + 32) currentTime];
  if (v4 < 0.0)
  {
    double v5 = *(void **)(a1 + 32);
    return [v5 setCurrentTime:0.0];
  }
  return result;
}

id sub_100060200(uint64_t a1)
{
  [*(id *)(a1 + 32) setDuration:*(double *)(a1 + 40)];
  float v2 = *(void **)(a1 + 32);
  double v3 = *(double *)(a1 + 48);

  return [v2 _updateCurrentTimeForCapturedInputAtTime:v3];
}

id sub_1000602BC(uint64_t a1)
{
  BOOL v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10006032C;
  _OWORD v3[3] = &unk_100221278;
  v3[4] = v1;
  return [v1 _updateDisplayableTimesWithBlock:v3];
}

id sub_10006032C(uint64_t a1)
{
  float v2 = *(id **)(a1 + 32);
  [v2[4] currentTime];
  [v2 setCurrentTime:];
  double v3 = *(id **)(a1 + 32);
  [v3[4] currentDuration];

  return [v3 setDuration:];
}

id sub_1000604C4(uint64_t a1)
{
  [*(id *)(a1 + 32) setCurrentTime:*(double *)(a1 + 40)];
  float v2 = *(id **)(a1 + 32);
  [v2[8] duration];

  return [v2 setDuration:];
}

id sub_100060A2C(uint64_t a1)
{
  [*(id *)(a1 + 32) setSelectionOverlayShouldUseInsertMode:*(unsigned __int8 *)(a1 + 40)];
  float v2 = *(void **)(a1 + 32);

  return [v2 setSelectedTimeRangeEditingEnabled:1];
}

void sub_100060A70(uint64_t a1)
{
  BOOL v1 = [*(id *)(a1 + 32) _selectionOverlay];
  float v2 = [v1 accessibilityElements];
  id argument = [v2 firstObject];

  UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, argument);
  UIAccessibilityPostNotification(UIAccessibilityAnnouncementNotification, argument);
}

id sub_100060CE4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isOverview]) {
    [*(id *)(a1 + 32) updateVisibleTimeRangeToFullDuration];
  }
  float v2 = *(void **)(a1 + 32);
  RCTimeRangeMake();

  return [v2 setSelectedTimeRange:animationDuration:];
}

uint64_t sub_100060D40(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100061298(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1000612B0(uint64_t a1)
{
  float v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) recordingUUIDs];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v2 isFavoriteForUUIDs:v3];
}

uint64_t sub_1000617EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100061804(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    return (*(uint64_t (**)(void))(v1 + 16))();
  }
  else {
    return 1;
  }
}

void sub_100061820(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  if (v5)
  {
    id v6 = [v5 supportedInterfaceOrientations];
    uint64_t v7 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100061944;
    v8[3] = &unk_100221CB0;
    id v9 = v5;
    id v10 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 32);
    [v7 rc_ensureIsInterfaceOrientationMask:v6 preferredOrientation:1 doneEnsuringBlock:v8];
  }
  else if ((a3 & 1) == 0 && (*(unsigned int (**)(void))(*(void *)(a1 + 64) + 16))())
  {
  }
}

id sub_100061944(uint64_t a1)
{
  [*(id *)(a1 + 32) rc_configurePopoverControllerWithSource:*(void *)(a1 + 40)];
  float v2 = *(void **)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);

  return [v2 presentViewController:v3 animated:1 completion:&stru_100221E60];
}

id sub_1000623C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setState:*(void *)(a1 + 40)];
}

void sub_100063FEC(id a1)
{
  uint64_t v1 = objc_alloc_init(RCNoAnimateLayerHelper);
  float v2 = (void *)qword_10026A798;
  qword_10026A798 = (uint64_t)v1;
}

void sub_1000641D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100064360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000644CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006461C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000646E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000647DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100064878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100064A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100064AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100064C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100064E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100064EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)RCWaveformRenderer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100064FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100065020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000651A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100065260(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 149) = 1;
  uint64_t v1 = *(void **)(a1 + 32);
  [v1 _duration];

  return [v1 _renderVisibleTimeRangeWithDuration:];
}

void sub_100065340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000653E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void *sub_100065400(uint64_t a1)
{
  [*(id *)(a1 + 32) _clearRenderingState];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 160);
  if (v3)
  {
    [v3 removeObserver:];
    uint64_t v2 = *(void *)(a1 + 32);
  }
  *(void *)(v2 + 32) = 0;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 160), *(id *)(a1 + 40));
  uint64_t result = *(void **)(a1 + 32);
  if (result[20])
  {
    [result _updateFitToWidthUnitsPerSecond];
    [*(id *)(*(void *)(a1 + 32) + 160) addObserver:];
    *(unsigned char *)(*(void *)(a1 + 32) + 149) = 1;
    [*(id *)(a1 + 32) _setNeedsVisibleTimeRangeRendering];
    uint64_t result = [*(id *)(*(void *)(a1 + 32) + 160) duration];
    if (v5 > 0.0)
    {
      *(unsigned char *)(*(void *)(a1 + 32) + 150) = 1;
      uint64_t result = [*(id *)(a1 + 32) _renderVisibleTimeRangeWithDuration:];
      *(unsigned char *)(*(void *)(a1 + 32) + 150) = 0;
    }
  }
  return result;
}

void sub_100065694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000657A8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_100065874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100065B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100065D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_100065D40(uint64_t a1)
{
  if ([*(id *)(a1 + 32) displayMode] != (id)1
    || ([*(id *)(a1 + 32) isLiveWaveform] & 1) == 0)
  {
    if (![*(id *)(a1 + 32) displayMode])
    {
      if ([*(id *)(a1 + 32) isLiveWaveform])
      {
        [*(id *)(a1 + 40) timeRange];
        double v3 = v2;
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 168));
        [WeakRetained currentTime];
        double v6 = vabdd_f64(v3, v5);

        if (v6 > 0.25) {
          *(unsigned char *)(*(void *)(a1 + 32) + 153) = 1;
        }
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 149) = 1;
  }
  uint64_t v7 = *(void **)(a1 + 32);

  return [v7 _setNeedsVisibleTimeRangeRendering];
}

void sub_100065E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100065E94(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 149) = 1;
  return [*(id *)(a1 + 32) _setNeedsVisibleTimeRangeRendering];
}

unsigned char *sub_100065FCC(uint64_t a1)
{
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (!result[151] && !result[8]) {
    return [result _startRendering];
  }
  return result;
}

void sub_100066104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100066170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000662B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100066370(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v3 = *(void **)(v2 + 200);
  *(void *)(v2 + 200) = 0;

  *(_OWORD *)(*(void *)(a1 + 32) + 16) = RCTimeRangeZero;
  *(unsigned char *)(*(void *)(a1 + 32) + 149) = 1;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  double v4 = [*(id *)(a1 + 32) waveformSlices];
  double v5 = [v4 allValues];

  id v6 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v17;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = [*(id *)(*((void *)&v16 + 1) + 8 * (void)v8) sliceLayer];
        [v9 removeFromSuperlayer];

        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v6);
  }

  id v10 = objc_opt_new();
  [*(id *)(a1 + 32) setWaveformSlices:v10];

  id v11 = objc_opt_new();
  [*(id *)(a1 + 32) setWaveformSliceIndexes:v11];

  unint64_t v13 = *(void **)(a1 + 32);
  int v12 = (id *)(a1 + 32);
  [v13 setWaveformAmpSlicesForRendering:&__NSArray0__struct];
  *((_OWORD *)*v12 + 3) = RCTimeRangeZero;
  uint64_t v14 = (char *)*v12 + 64;
  *uint64_t v14 = 0;
  v14[1] = 0;
  *((unsigned char *)*v12 + 80) = 0;
  [*v12 _setNeedsVisibleTimeRangeRendering];
  return [*v12 _setNeedsRendering];
}

void sub_100066570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100066F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_100066FD0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) renderingQueueIsBusy]) {
    return;
  }
  [*(id *)(a1 + 32) setFailedFirstRenderCalculationAttempt:0];
  [*(id *)(a1 + 32) setRenderingQueueIsBusy:1];
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 160) waveformSegmentsIntersectingTimeRange:*(double *)(a1 + 40) *(double *)(a1 + 48)];
  double v3 = [*(id *)(a1 + 32) waveformSliceIndexes];
  id v56 = [v3 mutableCopy];
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  id v6 = [*(id *)(a1 + 32) displayMode];
  uint64_t v7 = 3;
  if (v4 > 3) {
    uint64_t v7 = v4;
  }
  uint64_t v8 = v7 - 3;
  if (v6 == (id)1) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = v4;
  }
  if (v6 == (id)1) {
    uint64_t v10 = v5 + 6;
  }
  else {
    uint64_t v10 = v5;
  }
  [v56 removeIndexesInRange:v9, v10];
  id v11 = [v2 objectEnumerator];
  long long v55 = v3;
  int v12 = [v11 nextObject];
  unint64_t v13 = [*(id *)(a1 + 32) waveformSlices];
  double v54 = v2;
  unint64_t v14 = *(void *)(a1 + 56);
  if (v14 >= *(void *)(a1 + 64) + v14) {
    goto LABEL_55;
  }
  do
  {
    unint64_t v15 = v14 + 1;
    RCTimeRangeMake();
    double v17 = v16;
    double v19 = v18;
    uint64_t v20 = +[NSNumber numberWithInteger:v14];
    double v21 = [v13 objectForKeyedSubscript:v20];

    if (v21)
    {
      int v22 = *(unsigned __int8 *)(a1 + 136);
      [v56 removeIndex:v14];
      BOOL v23 = v22 != 0;
      if (v22 || !*(unsigned char *)(a1 + 137)) {
        goto LABEL_25;
      }
      if ([*(id *)(a1 + 32) displayMode] && !*(unsigned char *)(a1 + 138))
      {
        double v24 = *(double *)(a1 + 96);
        unsigned int v25 = (v17 - v24 <= 0.0) & ~RCTimeRangeEqualToTimeRange();
        if (v17 - v24 > -0.5) {
          BOOL v23 = v25;
        }
        else {
          BOOL v23 = 0;
        }
        goto LABEL_25;
      }
    }
    else
    {
      if ([v56 count]
        && (id v26 = [v56 firstIndex],
            +[NSNumber numberWithUnsignedInteger:v26],
            uint64_t v27 = objc_claimAutoreleasedReturnValue(),
            [v13 objectForKeyedSubscript:v27],
            double v21 = objc_claimAutoreleasedReturnValue(),
            v27,
            v21))
      {
        id v28 = +[NSNumber numberWithUnsignedInteger:v26];
        [v13 setObject:0 forKeyedSubscript:v28];

        [v55 removeIndex:v26];
        [v56 removeIndex:v26];
        CGRect v29 = +[NSNumber numberWithInteger:v14];
        [v13 setObject:v21 forKeyedSubscript:v29];

        [v55 addIndex:v14];
      }
      else
      {
        uint64_t v30 = objc_opt_new();
        id v31 = +[NSNumber numberWithInteger:v14];
        [v13 setObject:v30 forKeyedSubscript:v31];

        double v21 = (void *)v30;
        [v55 addIndex:v14];
      }
      [v21 setAmplitude:*(double *)(a1 + 80)];
      [v21 setVisualAmplitudeHeightInterpolatingFrames:0];
      [v21 setVisualAmplitudeHeight:RCOnePixelInPoints()];
      [v21 setSliceIndex:v14];
      [v21 setHasProcessedSegments:0];
    }
    BOOL v23 = 1;
LABEL_25:
    if (!v12) {
      [v21 setHasProcessedSegments:0];
    }
    if (!v23 && ([v21 hasProcessedSegments] & 1) != 0) {
      goto LABEL_54;
    }
    if (!v12)
    {
      long long v32 = 0;
      goto LABEL_49;
    }
    long long v32 = v12;
    double v33 = -3.40282347e38;
    while (1)
    {
      uint64_t v34 = (uint64_t)[v32 averagePowerLevelsCount];
      uint64_t v35 = (float *)[v32 averagePowerLevels];
      [v32 timeRange];
      double v37 = v36;
      double v39 = v38;
      if (RCTimeRangeIntersectsRange()) {
        break;
      }
      if (v39 >= v17)
      {
        if (v37 > v19) {
          goto LABEL_49;
        }
        goto LABEL_46;
      }
LABEL_44:
      uint64_t v44 = [v11 nextObject];

      long long v32 = (void *)v44;
LABEL_46:
      if (!v32) {
        goto LABEL_49;
      }
    }
    if (v34 < 1) {
      goto LABEL_44;
    }
    uint64_t v40 = 0;
    double v41 = v39 - v37;
    while (1)
    {
      double v42 = v37 + v41 * (float)((float)v40 / (float)v34);
      if (v42 > v19) {
        break;
      }
      if (v42 >= v17 && v42 <= v19)
      {
        [v21 setHasProcessedSegments:1];
        if (v33 < v35[v40]) {
          double v33 = v35[v40];
        }
      }
      if (v34 == ++v40) {
        goto LABEL_44;
      }
    }
LABEL_49:
    uint64_t v45 = +[RCRecorderStyleProvider sharedStyleProvider];
    [v45 minimumDecibelDisplayRange];

    RCNormalizedDecibelValue();
    if (v46 > *(double *)(a1 + 104)) {
      double v46 = *(double *)(a1 + 104);
    }
    double v47 = *(double *)(a1 + 112) * sqrt(v46);
    if (v47 < *(double *)(a1 + 80)) {
      double v47 = *(double *)(a1 + 80);
    }
    [v21 setAmplitude:v47];
    int v12 = v32;
LABEL_54:

    unint64_t v14 = v15;
  }
  while (v15 < *(void *)(a1 + 64) + *(void *)(a1 + 56));
LABEL_55:
  if (*(unsigned char *)(a1 + 139))
  {
    double v48 = [v13 allValues];
    id v49 = [v48 count];

    if (!v49)
    {
      [*(id *)(a1 + 32) setFailedFirstRenderCalculationAttempt:1];
      uint64_t v50 = OSLogForCategory();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
        sub_10016B5C4(v50);
      }
    }
  }
  uint64_t v51 = [v13 allValues];
  [*(id *)(a1 + 32) setWaveformAmpSlicesForRendering:v51];

  *(_OWORD *)(*(void *)(a1 + 32) + 48) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(*(void *)(a1 + 32) + 64) = *(_OWORD *)(a1 + 56);
  if (*(unsigned char *)(a1 + 138)) {
    *(unsigned char *)(*(void *)(a1 + 32) + 80) = 1;
  }
  uint64_t v52 = [*(id *)(a1 + 32) nextRenderBlock];
  id v53 = *(void **)(a1 + 32);
  if (v52)
  {
    [v53 setNextRenderBlock:0];
    dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 88), v52);
    if (([*(id *)(a1 + 32) waitForFinalCalc] & 1) == 0)
    {
      id v53 = *(void **)(a1 + 32);
      goto LABEL_65;
    }
  }
  else
  {
LABEL_65:
    [v53 setRenderReadyForDraw:1];
  }
  [*(id *)(a1 + 32) setRenderingQueueIsBusy:0];
}

void sub_100067624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100067730(uint64_t a1, void *a2, void *a3, double a4)
{
  id v47 = a2;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 168));
  if ([WeakRetained isZooming]) {
    uint64_t v9 = (double *)(a1 + 48);
  }
  else {
    uint64_t v9 = (double *)(*(void *)(a1 + 32) + 240);
  }
  double v10 = *v9;

  double v11 = *(double *)(a1 + 64);
  RCTimeRangeDelta();
  double v13 = 0.0;
  if (v12 > 0.0) {
    double v13 = v10 * (v11 / v12);
  }
  [v7 bounds:v47];
  [v7 setBounds:v13];
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id v14 = v48;
  id v15 = [v14 countByEnumeratingWithState:&v49 objects:v53 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v50;
    double v17 = -v13;
    do
    {
      for (unint64_t i = 0; i != v15; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v50 != v16) {
          objc_enumerationMutation(v14);
        }
        double v19 = *(void **)(*((void *)&v49 + 1) + 8 * i);
        uint64_t v20 = (char *)[v19 sliceIndex];
        unint64_t v21 = *(void *)(*(void *)(a1 + 32) + 64);
        BOOL v23 = (unint64_t)v20 >= v21;
        int v22 = &v20[-v21];
        BOOL v23 = !v23 || (unint64_t)v22 >= *(void *)(*(void *)(a1 + 32) + 72);
        if (v23 || ([v19 amplitude], objc_msgSend(v19, "amplitude"), fabs(v24) == INFINITY))
        {
          [v19 setHidden:1];
          continue;
        }
        unsigned int v25 = [v19 sliceLayer];
        if (!v25)
        {
          unsigned int v25 = +[CALayer layer];
          id v26 = +[RCNoAnimateLayerHelper sharedNoAnimationHelper];
          [v25 setDelegate:v26];

          [v25 setOpaque:1];
          [v19 setSliceLayer:v25];
        }
        id v27 = [v19 sliceIndex];
        double v28 = *(double *)(a1 + 72);
        unsigned int v29 = [v19 hasProcessedSegments];
        double v30 = 0.0;
        if (v29)
        {
          [v19 amplitude:0.0];
          double v30 = fmax(v31, 0.0);
        }
        double v32 = v30 * *(double *)(a1 + 80);
        if (v32 < *(double *)(a1 + 88)) {
          double v33 = v32;
        }
        else {
          double v33 = *(double *)(a1 + 88);
        }
        [v19 setVisualAmplitudeHeight:v33];
        double v34 = RCOnePixelInPoints();
        [v19 visualAmplitudeHeight];
        double v36 = v28 * (double)(uint64_t)v27;
        if (v34 < v35) {
          double v34 = v35;
        }
        double v37 = [v19 sliceLayer];
        id v38 = [v37 superlayer];
        BOOL v39 = v38 == v7;

        if (!v39)
        {
          uint64_t v40 = [v19 sliceLayer];
          [v7 addSublayer:v40];
        }
        [v19 setHidden:0];
        double v41 = RCRoundCoord(v36);
        double v42 = *(double *)(a1 + 80);
        double v43 = RCRoundCoord(a4);
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
          [v19 setColor:0];
        }
        if ([*(id *)(a1 + 32) isLiveWaveform]
          && ((RCTimeRangeEqualToTimeRange() & 1) != 0
           || (unint64_t)[v19 sliceIndex] >= *(void *)(a1 + 112)
           && (unint64_t)[v19 sliceIndex] <= *(void *)(a1 + 120)))
        {
          if ([*(id *)(a1 + 32) useCenteredStyleColoring])
          {
            if (v17 + (double)(uint64_t)[v19 sliceIndex] * *(double *)(a1 + 72) >= *(double *)(a1 + 64)
                                                                                                * 0.5)
              uint64_t v44 = 1;
            else {
              uint64_t v44 = 2;
            }
            goto LABEL_43;
          }
        }
        else if (![*(id *)(a1 + 32) isTrimMode] {
               || (unint64_t)[v19 sliceIndex] < *(void *)(a1 + 112)
        }
               || (unint64_t)[v19 sliceIndex] > *(void *)(a1 + 120))
        {
          uint64_t v44 = 1;
          goto LABEL_43;
        }
        uint64_t v44 = 2;
LABEL_43:
        [v19 setColor:v44];
        if (([v19 hasProcessedSegments] & 1) == 0 && objc_msgSend(v19, "color") != (id)2)
        {
          if ([*(id *)(a1 + 32) renderDimmedUnprocessedSegments])
          {
            uint64_t v45 = [v19 uiColorDimmed];
            [v19 setColor:0];
            id v46 = v45;
            [v25 setBackgroundColor:[v46 CGColor]];
          }
          else
          {
            [v19 setHidden:1];
          }
        }
        [v19 setFrame:v41, v42 - v34, v43, v34 + v34];
      }
      id v15 = [v14 countByEnumeratingWithState:&v49 objects:v53 count:16];
    }
    while (v15);
  }
}

void sub_100067C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100067D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100067DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100067E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100067E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100067F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006811C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000681F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006869C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100068720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000687F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006893C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100068C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100068E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100068F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006901C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10006918C(vm_address_t address, uint64_t a2)
{
  return vm_deallocate(mach_task_self_, address, 2 * a2);
}

vm_address_t sub_1000691A8(vm_size_t a1, int a2, void *a3)
{
  kern_return_t v9;
  mach_error_t v10;
  __CFString *v11;
  kern_return_t v12;
  mach_error_t v13;
  kern_return_t v14;
  vm_address_t v15;
  mach_error_t v16;
  id v17;
  id v18;
  BOOL v19;
  void *v21;
  uint64_t v23;
  vm_prot_t cur_protection[2];
  vm_address_t target_address;
  vm_address_t address;
  NSErrorUserInfoKey v28;
  CFStringRef v29;

  if (a2 >= 1)
  {
    uint64_t v5 = 0;
    vm_size_t v6 = a1 - 1;
    vm_size_t v7 = 2 * a1;
    BOOL v23 = RCVoiceMemosErrorDomain;
    int v8 = 1;
    while (1)
    {
      if (((v6 + vm_page_size) & -(uint64_t)vm_page_size) != a1) {
        sub_10016B648();
      }
      address = 0;
      uint64_t v9 = vm_allocate(mach_task_self_, &address, v7, 1);
      if (v9) {
        break;
      }
      double v12 = vm_deallocate(mach_task_self_, address + a1, a1);
      if (v12)
      {
        double v13 = v12;
        vm_deallocate(mach_task_self_, address, a1);
        double v11 = @"VMVMRingBuffer vm_deallocate failed";
        double v10 = v13;
        goto LABEL_10;
      }
      *(void *)cur_protection = 0;
      target_address = address + a1;
      id v14 = vm_remap(mach_task_self_, &target_address, a1, 0, 0, mach_task_self_, address, 0, &cur_protection[1], cur_protection, 1u);
      id v15 = address;
      if (v14)
      {
        uint64_t v16 = v14;
        vm_deallocate(mach_task_self_, address, a1);
        double v11 = @"VMVMRingBuffer vm_remap failed";
        double v10 = v16;
        goto LABEL_10;
      }
      if (target_address != address + a1)
      {
        vm_deallocate(mach_task_self_, target_address, a1);
        vm_deallocate(mach_task_self_, address, a1);
        double v28 = NSLocalizedDescriptionKey;
        unsigned int v29 = @"VMVMRingBuffer vm_remap failed to map to correct offset";
        unint64_t v21 = +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
        double v17 = +[NSError errorWithDomain:v23 code:0 userInfo:v21];

        goto LABEL_11;
      }
      double v17 = 0;
LABEL_12:
      double v18 = v17;

      double v19 = v15 == 0;
      if (!v15)
      {
        uint64_t v5 = v18;
        if (v8++ < a2) {
          continue;
        }
      }
      goto LABEL_19;
    }
    double v10 = v9;
    double v11 = @"VMVMRingBuffer vm_allocate failed";
LABEL_10:
    sub_1000694D4(v11, v10);
    double v17 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:
    id v15 = 0;
    goto LABEL_12;
  }
  id v15 = 0;
  double v18 = 0;
  double v19 = 1;
LABEL_19:
  if (a3 && v19) {
    *a3 = v18;
  }

  return v15;
}

void *sub_100069460(int a1, int a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t result = malloc_type_malloc((a2 * a3 + 8) * a1, 0x85AB9C58uLL);
  if (a1 >= 1)
  {
    vm_size_t v7 = (char *)&result[a1];
    int v8 = result;
    uint64_t v9 = a1;
    do
    {
      *v8++ = v7;
      v7 += a3 * v5;
      --v9;
    }
    while (v9);
  }
  return result;
}

id sub_1000694D4(void *a1, mach_error_t a2)
{
  id v3 = a1;
  uint64_t v4 = +[NSString stringWithFormat:@"%@ - %s", v3, mach_error_string(a2)];

  uint64_t v5 = RCVoiceMemosErrorDomain;
  NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
  double v10 = v4;
  vm_size_t v6 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  vm_size_t v7 = +[NSError errorWithDomain:v5 code:a2 userInfo:v6];

  return v7;
}

void sub_100069648(id a1, int a2)
{
}

void sub_10006965C(id a1, int a2)
{
}

void sub_100069ED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[RCApplicationModel sharedApplicationModel];
  uint64_t v5 = [v4 recordingWithURIRepresentation:v3];

  if (v5)
  {
    [*(id *)(a1 + 32) _selectSharedRecording:v5];
  }
  else
  {
    vm_size_t v6 = OSLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_10016B938();
    }
  }
}

uint64_t sub_10006A0A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

id sub_10006A0BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _askUserForPermissionToUseCloudKit];
}

id sub_10006A0D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIsTransitioningBetweenVisibleColumnStates:0];
}

id sub_10006A1AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIsTransitioningBetweenVisibleColumnStates:0];
}

void sub_10006A630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006A64C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained performAction:3 atPosition:0 forUUID:0 sourceController:0 source:0.0];
}

void sub_10006A794(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10006A7B0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained playRecordingWithUUID:*(void *)(a1 + 32)];
}

id sub_10006AAFC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 104) setTccCloudAccess:1];
}

id sub_10006AB14(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 104) setTccCloudAccess:2];
}

id sub_10006AC6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 80);
  *(void *)(v1 + 80) = 0;

  id v3 = (void *)UIApp;

  return _[v3 suspend];
}

id sub_10006AD70(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) selectRecordingWithUUID:*(void *)(a1 + 40) returnToBrowse:1];
}

void sub_10006B1AC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_10006B730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006B75C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = (id *)(a1 + 32);
  id v6 = a4;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained(v5);
  int v8 = [v6 objectForKeyedSubscript:NSKeyValueChangeNewKey];

  [WeakRetained setValue:v8 forKeyPath:v7];
}

id sub_10006BDD8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a2;
  id v7 = [v5 recordingID];
  id v8 = [v6 trimRecording:v7 timeRange:*(void *)(a1 + 32) controller:a3 error:*(double *)(a1 + 40)];

  return v8;
}

id sub_10006BEBC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a2;
  id v7 = [v5 recordingID];
  id v8 = [v6 cutRecording:v7 timeRange:*(void *)(a1 + 32) controller:a3 error:*(double *)(a1 + 40)];

  return v8;
}

void sub_10006CC78(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_10006D1A0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_10006D1B8(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_10006D1E4(uint64_t a1)
{
}

void sub_10006D1EC(uint64_t a1)
{
  uint64_t v2 = +[NSRunLoop mainRunLoop];
  id v3 = [v2 currentMode];
  unsigned __int8 v4 = [v3 isEqualToString:@"UITrackingRunLoopMode"];

  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = (id *)(a1 + 32);
    uint64_t v8 = v5[2];
    id v15 = 0;
    uint64_t v9 = [v5 _nextTransactionAfterToken:v8 context:v6 error:&v15];
    id v10 = v15;
    if (v9)
    {
      [*v7 _mergeChangeIntoRelevantContexts:v9];
      uint64_t v11 = [v9 token];
      double v12 = (void *)*((void *)*v7 + 2);
      *((void *)*v7 + 2) = v11;
    }
    else
    {
      double v13 = OSLogForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_10016BBA8(a1 + 32, (uint64_t)v10, v13);
      }

      objc_storeStrong((id *)*v7 + 2, *((id *)*v7 + 3));
      double v12 = (void *)*((void *)*v7 + 6);
      *((void *)*v7 + 6) = 0;
    }
  }
  id v14 = [*(id *)(*(void *)(a1 + 32) + 48) dateByAddingTimeInterval:0.1];
  RCDispatchNoSoonerThan();
}

void sub_10006D410(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) compareToken:*(void *)(*(void *)(a1 + 32) + 24) error:0];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned __int8 v4 = *(void **)(v3 + 40);
  if (v2 == (id)2)
  {
    uint64_t v5 = (void (*)(void))v4[2];
    v5();
  }
  else
  {
    *(void *)(v3 + 40) = 0;

    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 48);
    *(void *)(v6 + 48) = 0;
  }
}

id sub_10006D4A0(void *a1)
{
  uint64_t v2 = +[NSDate date];
  uint64_t v3 = a1[4];
  unsigned __int8 v4 = *(void **)(v3 + 48);
  *(void *)(v3 + 48) = v2;

  uint64_t v5 = (void *)a1[5];
  uint64_t v6 = a1[6];

  return [v5 performBlock:v6];
}

void sub_10006D73C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = +[NSArray arrayWithObjects:&v3 count:1];
  +[NSManagedObjectContext mergeChangesFromRemoteContextSave:v1 intoContexts:v2];
}

id sub_10006DCA0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
}

id sub_10006DDC8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleChange:*(void *)(a1 + 40)];
}

uint64_t sub_10006E610(uint64_t a1)
{
  uint64_t v2 = +[UIApplication sharedApplication];
  uint64_t v3 = [v2 delegate];
  unsigned __int8 v4 = [v3 window];
  uint64_t v5 = [v4 rootViewController];
  uint64_t v6 = [v5 view];
  [v6 setUserInteractionEnabled:1];

  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v8 = *(uint64_t (**)(void))(result + 16);
    return v8();
  }
  return result;
}

void sub_10006EF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006EF48(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained viewController];
  [v1 rc_applicationWillEnterForeground];
}

void sub_10006EFA0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained viewController];
  [v1 rc_applicationDidEnterBackground];
}

void sub_10006F1B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10006F294;
  void v10[3] = &unk_100221858;
  id v7 = *(void **)(a1 + 40);
  v10[4] = *(void *)(a1 + 32);
  id v11 = v5;
  id v12 = v6;
  id v13 = v7;
  id v8 = v6;
  id v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);
}

id sub_10006F294(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 8) = 0;
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    uint64_t v3 = OSLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10016BCD4(a1, v3);
    }

    uint64_t v2 = *(void *)(a1 + 40);
  }
  return [*(id *)(a1 + 32) _handleSpotlightSearchResults:v2 forSearchString:*(void *)(a1 + 56)];
}

id sub_10006F57C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) managedObjectIDForURIRepresentation:a2];
}

double UIMainScreenScale()
{
  if (qword_10026A7E0 != -1) {
    dispatch_once(&qword_10026A7E0, &stru_1002222B0);
  }
  return *(double *)&qword_10026A7D8;
}

void sub_10006FE70(id a1)
{
  id v2 = +[UIScreen mainScreen];
  [v2 scale];
  qword_10026A7D8 = v1;
}

double RCRoundCoord(double a1)
{
  if (qword_10026A7E0 != -1) {
    dispatch_once(&qword_10026A7E0, &stru_1002222B0);
  }
  double v2 = a1 + 2.22044605e-16;
  if (a1 >= 0.0) {
    double v2 = a1;
  }
  return round(v2 * *(double *)&qword_10026A7D8) / *(double *)&qword_10026A7D8;
}

double RCOnePixelInPoints()
{
  if (qword_10026A7E0 != -1) {
    dispatch_once(&qword_10026A7E0, &stru_1002222B0);
  }
  return 1.0 / *(double *)&qword_10026A7D8;
}

id sub_1000702E4(uint64_t a1, uint64_t a2, void *a3)
{
  if ([a3 isEqual:UIActivityItemsConfigurationMetadataKeyTitle])
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = +[NSNumber numberWithInteger:a2];
    id v7 = [v5 objectForKey:v6];
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

id sub_100071764(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:0.0];
}

id sub_100071770(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeFromSuperview];
}

void sub_100074180(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_10007489C(uint64_t a1)
{
  double v2 = [*(id *)(a1 + 32) diffableDataSource];
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100074930;
  _OWORD v5[3] = &unk_100221278;
  uint64_t v4 = *(void *)(a1 + 40);
  v5[4] = *(void *)(a1 + 32);
  [v2 applySnapshot:v4 animatingDifferences:v3 completion:v5];
}

void sub_100074930(uint64_t a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v2 = [*(id *)(a1 + 32) libraryActionHandler];
    [v2 selectNewRecordingForDismiss];
  }
}

void sub_1000750B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000750D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v2 = (id *)(a1 + 40);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    id v10 = [WeakRetained uuidOfSelectedItem];

    id v4 = objc_loadWeakRetained(v2);
    id v5 = [v4 cellsMapTable];
    id v6 = [v5 objectForKey:v10];

    id v7 = [*(id *)(a1 + 32) indexPathForCell:v6];
    if (v7)
    {
      id v8 = objc_loadWeakRetained(v2);
      [v8 selectItemAtIndexPath:v7 animated:1 scroll:0];

      id v9 = objc_loadWeakRetained(v2);
      [v9 setWillSelectRecordingAfterExitingEditMode:0];
    }
  }
}

uint64_t sub_100075318(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100075F1C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setNeedsUpdateContentUnavailableConfiguration];
}

void sub_100076ACC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && [v5 isFileURL])
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100076BCC;
    v8[3] = &unk_100221FA8;
    void v8[4] = *(void *)(a1 + 32);
    +[RCSavedRecordingsModel importFileWithURL:v5 shouldUseMetadataTitle:0 completionHandler:v8];
  }
  else
  {
    id v7 = OSLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_10016C2B8();
    }
  }
}

void sub_100076BCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[RCApplicationModel sharedApplicationModel];
  id v5 = [v4 recordingWithURIRepresentation:v3];

  if (v5)
  {
    [*(id *)(a1 + 32) _performFolderTypeUpdatesOnRecording:v5];
    id v6 = *(void **)(a1 + 32);
    id v7 = [v5 uuid];
    [v6 selectItemWithUUID:v7];
  }
  else
  {
    id v8 = OSLogForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_10016C32C();
    }
  }
}

id sub_100076F1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained(v4);
  unsigned int v6 = [WeakRetained _supportsSwipeActionsForIndexPath:v3 swipeActionsType:0];

  id v7 = 0;
  if (v6)
  {
    id v8 = objc_loadWeakRetained(v4);
    id v9 = [v8 dataArray];
    id v10 = [v9 objectAtIndexedSubscript:[v3 item]];
    id v11 = [v10 uuid];

    id v12 = objc_loadWeakRetained(v4);
    id v13 = [v12 libraryActionHandler];
    LODWORD(v10) = [v13 isFavoriteForUUID:v11];

    id v14 = objc_loadWeakRetained(v4);
    id v15 = [v14 _favoriteSwipeAction:v10 ^ 1 forUUID:v11];

    double v18 = v15;
    uint64_t v16 = +[NSArray arrayWithObjects:&v18 count:1];
    id v7 = +[UISwipeActionsConfiguration configurationWithActions:v16];
  }

  return v7;
}

id sub_1000770B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v6 = [WeakRetained _supportsSwipeActionsForIndexPath:v3 swipeActionsType:1];

  if (v6)
  {
    id v7 = objc_loadWeakRetained(v4);
    unsigned __int8 v8 = [v7 isRecentlyDeleted];

    id v9 = objc_loadWeakRetained(v4);
    id v10 = [v9 dataArray];
    id v11 = [v10 objectAtIndexedSubscript:[v3 item]];
    id v12 = [v11 uuid];

    id v13 = +[RCRecorderStyleProvider sharedStyleProvider];
    id v14 = [v13 expandsRecordingsCollectionViewItemOnSelection];

    id v15 = objc_loadWeakRetained(v4);
    uint64_t v16 = v15;
    if (v8)
    {
      double v17 = [v15 _eraseSwipeActionForUUID:v12 shouldExecuteCompletionBeforeAction:v14];

      unsigned int v25 = v17;
      double v18 = +[NSArray arrayWithObjects:&v25 count:1];
      double v19 = +[UISwipeActionsConfiguration configurationWithActions:v18];
    }
    else
    {
      double v17 = [v15 _deleteSwipeActionForUUID:v12 shouldExecuteCompletionBeforeAction:v14];

      id v20 = objc_loadWeakRetained(v4);
      double v18 = [v20 _moveToFolderSwipeActionForUUID:v12 shouldExecuteCompletionBeforeAction:v14];

      id v21 = objc_loadWeakRetained(v4);
      int v22 = [v21 _moreOptionsSwipeActionForUUID:v12 shouldExecuteCompletionBeforeAction:v14];

      v26[0] = v17;
      v26[1] = v18;
      v26[2] = v22;
      BOOL v23 = +[NSArray arrayWithObjects:v26 count:3];
      double v19 = +[UISwipeActionsConfiguration configurationWithActions:v23];
    }
  }
  else
  {
    double v19 = 0;
  }

  return v19;
}

void sub_1000774DC(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  id v5 = v9;
  if (isKindOfClass)
  {
    id v6 = v9;
    id v7 = *(void **)(a1 + 32);
    if (*(unsigned char *)(a1 + 40)) {
      [v7 favoriteImage];
    }
    else {
    unsigned __int8 v8 = [v7 notFavoriteImage];
    }
    [v6 setImage:v8 forState:0];

    id v5 = v9;
  }
}

void sub_100077CDC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v20 = a2;
  id v7 = a3;
  unsigned __int8 v8 = a4;
  if ([*(id *)(a1 + 32) shouldExecuteCompletionBeforeAction])
  {
    id v9 = [*(id *)(a1 + 32) customCompletionBlock];

    if (v9)
    {
      id v10 = [*(id *)(a1 + 32) customCompletionBlock];
      ((void (**)(void, id, id))v10)[2](v10, v20, v7);
    }
    v8[2](v8, 1);
  }
  uint64_t v11 = [*(id *)(a1 + 32) sourceItem];
  id v12 = (void *)v11;
  if (v11) {
    id v13 = (void *)v11;
  }
  else {
    id v13 = v7;
  }
  id v14 = v13;

  id v15 = [*(id *)(a1 + 32) controlsAction];
  uint64_t v16 = [*(id *)(a1 + 32) uuidForAction];
  double v17 = [*(id *)(a1 + 40) libraryActionHandler];
  [v17 performAction:v15 atPosition:v16 forUUID:*(void *)(a1 + 40) sourceController:v14 source:0.0];

  if (([*(id *)(a1 + 32) shouldExecuteCompletionBeforeAction] & 1) == 0)
  {
    double v18 = [*(id *)(a1 + 32) customCompletionBlock];

    if (v18)
    {
      double v19 = [*(id *)(a1 + 32) customCompletionBlock];
      ((void (**)(void, id, id))v19)[2](v19, v20, v7);
    }
    v8[2](v8, 1);
  }
}

id sub_100078294(uint64_t a1)
{
  return [*(id *)(a1 + 32) scrollToItemAtIndexPath:*(void *)(a1 + 40) atScrollPosition:1 animated:1];
}

id sub_100078428(uint64_t a1)
{
  return [*(id *)(a1 + 32) scrollToItemAtIndexPath:*(void *)(a1 + 40) atScrollPosition:4 animated:1];
}

id sub_10007889C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count] && (unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") <= 1)
  {
    id v3 = [*(id *)(a1 + 40) collectionView];
    id v4 = [v3 indexPathForItemAtPoint:*(double *)(a1 + 48), *(double *)(a1 + 56)];

    id v5 = [*(id *)(*(void *)(a1 + 40) + 40) uuidAtIndexPath:v4];
    id v6 = [*(id *)(a1 + 40) cellForUUID:v5];
    id v7 = [[_TtC10VoiceMemos36RCRecordingCellMoreButtonMenuCreator alloc] initWithRecordingUUID:v5 actionDelegate:v6 source:v6];
    [*(id *)(a1 + 40) setMoreButtonMenuCreator:v7];

    unsigned __int8 v8 = +[TranscriptionAvailabilityProvider shared];
    unsigned int v9 = [v8 deviceIsSupported];

    uint64_t v10 = [v6 hasTranscription] & v9;
    uint64_t v11 = [*(id *)(a1 + 40) moreButtonMenuCreator];
    id v2 = [v11 createMenuWithDisplayShowTranscriptAction:v10 displayCopyTranscriptAction:v10 hasMultipleTracks:[v6 hasMultipleTracks]];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id sub_100079D24(uint64_t a1)
{
  return [*(id *)(a1 + 32) scrollToItemAtIndexPath:*(void *)(a1 + 40) atScrollPosition:1 animated:0];
}

void sub_100079D38(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) collectionView];
  id v3 = [v2 cellForItemAtIndexPath:*(void *)(a1 + 40)];

  if (v3)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v3 beginEditingTitle];
    }
  }
}

void sub_10007AF28(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x20u);
}

id sub_10007C27C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) updateFrameForSlice:a3 sliceType:a4 atIndex:a2];
}

id sub_10007DAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) updateFrameForSlice:a3 sliceType:a4 atIndex:a2];
}

void sub_10007DC68(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10007DD3C(id a1, UIButton *a2)
{
  id v2 = a2;
  id v12 = +[RCRecorderStyleProvider sharedStyleProvider];
  id v3 = +[UIButtonConfiguration tintedButtonConfiguration];
  uint64_t v4 = +[NSBundle mainBundle];
  id v5 = [v4 localizedStringForKey:@"EDIT" value:&stru_100228BC8 table:0];
  [v3 setTitle:v5];

  id v6 = [v12 editButtonImage];
  [v3 setImage:v6];

  id v7 = [v12 playbackViewToolbarImageSymbolConfiguration];
  [v3 setPreferredSymbolConfigurationForImage:v7];
  [v12 editButtonImageTitlePadding];
  [v3 setImagePadding:];
  [v12 editButtonContentTopBottomPadding];
  double v9 = v8;
  [v12 editButtonContentLeftRightPadding];
  [v3 setContentInsets:v9, v10, v9, v10];
  uint64_t v11 = [v3 background];
  [v12 editRecordingButtonCornerRadius];
  [v11 setCornerRadius:];

  [v3 setCornerStyle:-1];
  [(UIButton *)v2 setConfiguration:v3];
}

void sub_10007E128(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) view];
  [v1 updateForSizeChange];
}

void sub_1000805F0(unsigned __int8 *a1, void *a2)
{
  uint64_t v3 = a1[32];
  id v7 = a2;
  uint64_t v4 = [v7 waveformViewController];
  [v4 setShowPlayBarOnly:v3];

  uint64_t v5 = a1[33];
  id v6 = [v7 waveformViewController];
  [v6 setIsCompactView:v5];

  [v7 setUserInteractionEnabled:a1[34]];
}

void sub_1000814B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  if (v4 == v3) {
    goto LABEL_8;
  }
  uint64_t v16 = v3;
  uint64_t v5 = [v4 waveformViewController];
  if ([v5 isZooming])
  {
    id v6 = [*(id *)(a1 + 32) waveformViewController];
    [v6 zoomScale];
    double v8 = v7;
    double v9 = [v16 waveformViewController];
    [v9 zoomScale];
    double v11 = v10;

    if (v8 == v11) {
      goto LABEL_6;
    }
    uint64_t v5 = [*(id *)(a1 + 32) waveformViewController];
    [v5 zoomScale];
    double v13 = v12;
    id v14 = [v16 waveformViewController];
    [v14 setZoomScale:v13];
  }
LABEL_6:
  [*(id *)(a1 + 32) selectedTimeRange];
  [v16 selectedTimeRange];
  char v15 = RCTimeRangeEqualToTimeRange();
  id v3 = v16;
  if ((v15 & 1) == 0)
  {
    [*(id *)(a1 + 32) selectedTimeRange];
    [v16 setSelectedTimeRange:animationDuration:];
    id v3 = v16;
  }
LABEL_8:
}

void sub_1000837FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  objc_destroyWeak(v31);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(&a31);
  _Unwind_Resume(a1);
}

void sub_100083888(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v4 = [v3 sender];

  [WeakRetained _doShare:v4];
}

void sub_1000838FC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _toggleFavorite];
}

void sub_10008393C(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _doMoveToFolder:v3];
}

void sub_100083BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100083BF0(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _doShowTranscriptionView:v3];
}

void sub_100083D10(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100083D2C(uint64_t a1, void (**a2)(void, void))
{
  id v3 = (id *)(a1 + 32);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v5 = [WeakRetained showTranscriptMenuElement];
  ((void (**)(void, void *))a2)[2](v4, v5);
}

id sub_100084050(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateForSizeChange];
}

id sub_1000854BC(void *a1)
{
  id v1 = [a1 fontDescriptor];
  UIFontDescriptorAttributeName v11 = UIFontDescriptorFeatureSettingsAttribute;
  v8[0] = UIFontFeatureTypeIdentifierKey;
  v8[1] = UIFontFeatureSelectorIdentifierKey;
  v9[0] = &off_10022D6A0;
  v9[1] = &off_10022D6B8;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];
  double v10 = v2;
  id v3 = +[NSArray arrayWithObjects:&v10 count:1];
  double v12 = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
  uint64_t v5 = [v1 fontDescriptorByAddingAttributes:v4];

  id v6 = +[UIFont fontWithDescriptor:v5 size:0.0];

  return v6;
}

void sub_100085B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_100085B38(AudioObjectID a1, AudioObjectPropertySelector a2, AudioObjectPropertyScope a3)
{
  inAddress.mSelector = a2;
  inAddress.mScope = a3;
  inAddress.mElement = 0;
  UInt32 v8 = 0;
  id v4 = 0;
  if (!AudioObjectGetPropertyDataSize(a1, &inAddress, 0, 0, &v8))
  {
    uint64_t v5 = +[NSMutableData dataWithLength:v8];
    id v6 = v5;
    if (!v5
      || (id v4 = v5,
          AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &v8, [v4 mutableBytes])))
    {

      id v4 = 0;
    }
  }

  return v4;
}

void sub_100085BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void (**sub_100085C08(double *a1, double *a2, void *a3))(void, double, double)
{
  for (unint64_t i = a3; a1 != a2; a1 += 2)
    i[2](i, *a1, a1[1]);
  id v6 = objc_retainBlock(i);

  return v6;
}

void sub_100085C88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100085C98(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v1 addObject:];
}

void sub_100085CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100085DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100085EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087BA8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    double v1 = *(double *)(a1 + 40);
  }
  else {
    double v1 = 0.0;
  }
  id v2 = [*(id *)(a1 + 32) namedStateLabel];
  [v2 setAlpha:v1];
}

void sub_1000885D0(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 9) = 0;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _syncLongPressGestureRecognizerEnablement];
}

uint64_t sub_100089884(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100089ACC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008A07C(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        double v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        unsigned int v8 = [v7 favorite];
        int v9 = *(unsigned __int8 *)(a1 + 56);
        if (v9 != v8)
        {
          double v10 = *(void **)(a1 + 40);
          UIFontDescriptorAttributeName v11 = [v7 uuid];
          [v10 addObject:v11];

          int v9 = *(unsigned __int8 *)(a1 + 56);
        }
        [*(id *)(a1 + 48) setFavorite:v9 != 0 ofRecording:v7];
      }
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }
}

void sub_10008A454(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) recordingsForUUIDs:*(void *)(a1 + 40)];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v9 + 1) + 8 * i);
        unsigned int v8 = *(void **)(a1 + 48);
        if (*(unsigned char *)(a1 + 56)) {
          [v8 eraseRecording:v7];
        }
        else {
          [v8 deleteRecording:v7];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
}

void sub_10008A674(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) recordingsForUUIDs:*(void *)(a1 + 40)];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v12;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        unsigned int v8 = [v7 deletionDate];

        if (v8)
        {
          [*(id *)(a1 + 48) restoreDeletedRecording:v7];
          long long v9 = *(void **)(a1 + 56);
          long long v10 = [v7 uuid];
          [v9 addObject:v10];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v4);
  }
}

BOOL sub_10008A9FC(uint64_t a1, void *a2)
{
  id v3 = [a2 name];
  id v4 = +[NSCharacterSet whitespaceCharacterSet];
  uint64_t v5 = [v3 stringByTrimmingCharactersInSet:v4];

  BOOL v6 = [v5 compare:*(void *)(a1 + 32) options:*(void *)(a1 + 40)] == 0;
  return v6;
}

BOOL sub_10008AA80(uint64_t a1, void *a2)
{
  id v3 = +[RCFolderDisplayModel folderNameForBuiltInFolderOfType:](RCFolderDisplayModel, "folderNameForBuiltInFolderOfType:", [a2 folderType]);
  id v4 = +[NSCharacterSet whitespaceCharacterSet];
  uint64_t v5 = [v3 stringByTrimmingCharactersInSet:v4];

  BOOL v6 = [v5 compare:*(void *)(a1 + 32) options:*(void *)(a1 + 40)] == 0;
  return v6;
}

void sub_10008B434(id *a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = a1[4];
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      BOOL v6 = 0;
      do
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * (void)v6);
        id v8 = a1[5];
        if (v8
          || (objc_msgSend(v7, "userFolderUUID", (void)v12),
              long long v10 = objc_claimAutoreleasedReturnValue(),
              v10,
              v10)
          && ([v7 userFolderUUID], (id v8 = (id)objc_claimAutoreleasedReturnValue()) != 0))
        {
          long long v9 = [a1[6] existingFolderWithUUID:v8];
          [a1[6] removeRecording:v7 fromFolder:v9];
        }
        BOOL v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v11 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
      id v4 = v11;
    }
    while (v11);
  }
}

id sub_10008B7D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _stopMonitoringLocation];
}

uint64_t sub_10008B90C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10008B91C(uint64_t a1)
{
}

void sub_10008B924(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10008BA60(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10008C4F8(void *a1)
{
  id v2 = (void *)a1[4];
  id v3 = +[AVAudioSession sharedInstance];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = [v2 __activateAudioSessionOnQueue:v3 recording:0 overdubbing:0 error:a1[6]];
}

uint64_t sub_10008C6C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10008C6D0(uint64_t a1)
{
}

id sub_10008C6D8(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) inputNode:0];
}

void sub_10008C734(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained[13];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008C7D0;
    block[3] = &unk_100221278;
    uint64_t v5 = WeakRetained;
    dispatch_async(v3, block);
  }
}

id sub_10008C7D0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _configureAudioSettings];
}

void sub_10008CA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10008CA74(uint64_t a1, char a2, id obj)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), obj);
  id v5 = obj;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10008CAE4(uint64_t a1)
{
}

uint64_t sub_10008CAEC(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16))(a1[4], *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24), *(void *)(*(void *)(a1[6] + 8) + 40));
}

void sub_10008CBC4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = +[AVAudioSession sharedInstance];
  uint64_t v4 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 49);
  id v12 = 0;
  unsigned __int8 v6 = [v2 __activateAudioSessionOnQueue:v3 recording:v4 overdubbing:v5 error:&v12];
  id v7 = v12;

  if (*(void *)(a1 + 40))
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_10008CCC4;
    v8[3] = &unk_100222780;
    id v10 = *(id *)(a1 + 40);
    unsigned __int8 v11 = v6;
    id v9 = v7;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v8);
  }
}

uint64_t sub_10008CCC4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

void sub_10008CEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

BOOL sub_10008D278(id a1, AVAudioSessionPortDescription *a2)
{
  AVAudioSessionPort v2 = [(AVAudioSessionPortDescription *)a2 portType];
  BOOL v3 = v2 == AVAudioSessionPortBuiltInMic;

  return v3;
}

BOOL sub_10008D2BC(id a1, AVAudioSessionDataSourceDescription *a2)
{
  AVAudioSessionPort v2 = [(AVAudioSessionDataSourceDescription *)a2 supportedPolarPatterns];
  unsigned __int8 v3 = [v2 containsObject:AVAudioSessionPolarPatternStereo];

  return v3;
}

BOOL sub_10008D304(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = [a2 orientation];
  BOOL v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

void sub_10008D5D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 80))
  {
    *(unsigned char *)(v1 + 80) = 0;
    id v2 = +[AVAudioSession sharedInstance];
    [v2 setActive:0 error:0];
  }
}

id sub_10008D6E4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleAudioSessionNotification:*(void *)(a1 + 40)];
}

id sub_10008DF44(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) enhanced];
  unsigned __int8 v3 = *(void **)(a1 + 32);

  return [v3 setProcessingEnabled:v2];
}

void sub_10008DF84(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  unsigned __int8 v3 = (void *)v2[15];
  if (v3 == *(void **)(a1 + 40))
  {
    v2[15] = 0;

    [*(id *)(a1 + 48) replaceCurrentItemWithPlayerItem:*(void *)(a1 + 56)];
    if ([*(id *)(a1 + 40) currentState] == 2) {
      [*(id *)(a1 + 40) setCurrentState:4];
    }
    [*(id *)(a1 + 48) setProcessingEnabled:[*(id *)(a1 + 64) enhanced]];
    [*(id *)(a1 + 48) setSilenceRemoverEnabled:[*(id *)(a1 + 40) silenceRemoverEnabled]];
    if ([*(id *)(a1 + 40) targetState] == 4)
    {
      BOOL v4 = [*(id *)(a1 + 56) controller];
      [v4 targetTime];
      double v6 = v5;

      id v7 = *(void **)(a1 + 56);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_10008E158;
      v20[3] = &unk_1002228A0;
      id v8 = v7;
      double v23 = v6;
      uint64_t v9 = *(void *)(a1 + 32);
      id v21 = v8;
      uint64_t v22 = v9;
      [v8 seekToTime:v20 completionHandler:v6];
      id v10 = v21;
    }
    else
    {
      [*(id *)(a1 + 40) targetTime];
      double v12 = v11;
      long long v13 = *(void **)(a1 + 56);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10008E1C0;
      v16[3] = &unk_1002228A0;
      id v14 = *(id *)(a1 + 40);
      double v19 = v12;
      uint64_t v15 = *(void *)(a1 + 32);
      id v17 = v14;
      uint64_t v18 = v15;
      [v13 seekToTime:v16 completionHandler:v12];
      id v10 = v17;
    }
  }
  else
  {
    [v2 stopPlaying:];
  }
}

id sub_10008E158(id result, int a2)
{
  if (a2)
  {
    id v2 = result;
    double v3 = *((double *)result + 6);
    BOOL v4 = [*((id *)result + 4) controller];
    [v4 setCurrentTime:v3];

    double v5 = *(void **)(v2[5] + 32);
    return [v5 pause];
  }
  return result;
}

id *sub_10008E1C0(id *result, int a2)
{
  if (a2)
  {
    id v2 = result;
    [result[4] setCurrentTime:*((double *)result + 6)];
    id v3 = v2[5];
    [v2[4] targetRate];
    return (id *)[v3 _startPlaybackAtRate:1 immediately:];
  }
  return result;
}

void sub_10008E440(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) recordingWithUniqueID:*(void *)(a1 + 40)];
  id v8 = v2;
  if (v2)
  {
    [v2 playbackRate];
    double v5 = *(void **)(a1 + 48);
    BOOL v4 = (id *)(a1 + 48);
    [v5 setRate:];
    [*v4 setSilenceRemoverEnabled:[v8 silenceRemoverEnabled]];
    [v8 layerMix];
  }
  else
  {
    id v7 = *(void **)(a1 + 48);
    BOOL v4 = (id *)(a1 + 48);
    LODWORD(v3) = 1.0;
    [v7 setRate:v3];
    [*v4 setSilenceRemoverEnabled:0];
    double v6 = 0.0;
  }
  [*v4 setLayerMix:v6];
}

void sub_10008EA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10008EA88(id result, int a2)
{
  if (a2)
  {
    id v2 = (void *)*((void *)result + 4);
    [*((id *)result + 5) targetRate];
    return [v2 _startPlaybackAtRate:1 immediately:YES];
  }
  return result;
}

void sub_10008EACC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  [WeakRetained setCurrentState:0];
  if (*((id *)a1[4] + 15) != WeakRetained) {
    goto LABEL_2;
  }
  if (v5)
  {
    if (!WeakRetained)
    {
LABEL_2:
      id v8 = +[RCSSavedRecordingService sharedService];
      [v8 endAccessSessionWithToken:v5 error:0];

      goto LABEL_3;
    }
    [WeakRetained setPlaybackToken:v5];
    [a1[4] setMode:1];
    [a1[5] length];
    [WeakRetained playableRange];
    if (RCTimeRangeEqualToTimeRange())
    {
      RCTimeRangeMake();
      [WeakRetained setPlayableRange:];
    }
    uint64_t v9 = [WeakRetained playerItem];
    if (!v9)
    {
      id v10 = a1[4];
      id v11 = a1[5];
      id v14 = 0;
      double v12 = [v10 _assetForRecording:v11 error:&v14];
      id v13 = v14;
      if (!v12)
      {
        [WeakRetained setPlaybackError:v13];
        [WeakRetained setCurrentState:0];

        goto LABEL_3;
      }
      uint64_t v9 = [[_TtC10VoiceMemos12VMPlayerItem alloc] initWithAsset:v12];
      [(VMPlayerItem *)v9 setController:WeakRetained];
      [WeakRetained setPlayerItem:v9];
    }
    [a1[4] _schedulePlayback:WeakRetained];
  }
  else if (WeakRetained)
  {
    [WeakRetained setPlaybackError:v6];
    [WeakRetained setCurrentState:0];
  }
LABEL_3:
}

id sub_10008EF58(uint64_t a1, void *a2, double a3)
{
  LODWORD(a3) = *(_DWORD *)(a1 + 32);
  return _[a2 setPlaybackRate:a3];
}

id sub_10008F054(uint64_t a1, void *a2)
{
  return [a2 setSilenceRemoverEnabled:*(unsigned __int8 *)(a1 + 32)];
}

void sub_10008F124(void *a1)
{
  id v2 = [*(id *)(a1[4] + 8) recordingWithUniqueID:a1[5]];
  if (v2)
  {
    double v3 = v2;
    (*(void (**)(void))(a1[6] + 16))();
    [*(id *)(a1[4] + 8) saveIfNecessary];
    id v2 = v3;
  }
}

void sub_10008F344(uint64_t a1, int a2)
{
  if (a2)
  {
    double v3 = [*(id *)(a1 + 32) currentItem];
    BOOL v4 = v3;
    if (v3 == *(void **)(a1 + 40))
    {
      unsigned __int8 v5 = [*(id *)(a1 + 32) playing];

      if (v5) {
        return;
      }
    }
    else
    {
    }
    double v6 = *(double *)(a1 + 56);
    id v7 = *(void **)(a1 + 48);
    [v7 setCurrentTime:v6];
  }
}

void sub_10008F6E4(uint64_t a1)
{
  [*(id *)(a1 + 32) _configureAudioSettingsIfNeeded];
  id v2 = *(void **)(a1 + 40);
  id v18 = 0;
  double v3 = [v2 inputNode:&v18];
  id v4 = v18;
  unsigned __int8 v5 = v4;
  if (!v3)
  {
    if (v4)
    {
      NSErrorUserInfoKey v19 = NSUnderlyingErrorKey;
      id v20 = v4;
      double v6 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    }
    else
    {
      double v6 = 0;
    }
    uint64_t v15 = v6;
    goto LABEL_13;
  }
  double v6 = [v3 inputFormatForBus:0];
  [v6 sampleRate];
  if (v7 <= 0.0 || ![v6 channelCount])
  {
    uint64_t v15 = 0;
LABEL_13:
    uint64_t v16 = +[NSError errorWithDomain:@"VMAudioServiceErrorDomain" code:5 userInfo:v15];
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
    id v14 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;
    goto LABEL_14;
  }
  id v8 = [*(id *)(*(void *)(a1 + 32) + 56) mutableCopy];
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  id v11 = *(void **)(a1 + 32);
  [v6 sampleRate];
  double v12 = [v11 _closestAllowedSampleRate:*(void *)(*(void *)(a1 + 32) + 64)];
  [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:v12 forKeyedSubscript:AVSampleRateKey];

  if ([v6 channelCount] <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = 2;
  }
  id v14 = +[NSNumber numberWithInt:v13];
  [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:v14 forKeyedSubscript:AVNumberOfChannelsKey];
LABEL_14:
}

void sub_10008FB70(uint64_t a1)
{
  if ([*(id *)(a1 + 32) currentState] == 2)
  {
    id v2 = *(void **)(*(void *)(a1 + 40) + 40);
    id v7 = 0;
    unsigned int v3 = [v2 startAndReturnError:&v7];
    id v4 = v7;
    if (v3)
    {
      [*(id *)(a1 + 32) setCurrentState:2];
    }
    else
    {
      double v6 = OSLogForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10016D244();
      }

      [*(id *)(a1 + 40) setRecordingError:v4];
      [*(id *)(a1 + 40) stopRecording:*(void *)(a1 + 48) error:0];
    }
  }
  else
  {
    unsigned __int8 v5 = *(void **)(a1 + 32);
    [v5 setCurrentState:0];
  }
}

void sub_10008FE78(uint64_t a1, int a2)
{
  if (a2)
  {
    unsigned int v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v8 = 0;
    unsigned __int8 v5 = [v3 _startRecordingWithController:v4 error:&v8];
    id v6 = v8;
    if ((v5 & 1) == 0) {
      [*(id *)(a1 + 40) setRecordingError:v6];
    }
  }
  else
  {
    id v7 = *(void **)(a1 + 40);
    [v7 setRecordingError:];
  }
}

void sub_1000902AC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x100090224);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009030C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v2 = *(void **)(a1 + 32);
    id v6 = 0;
    unsigned __int8 v3 = [v2 endAccessSessionWithToken:a2 error:&v6];
    id v4 = v6;
    if ((v3 & 1) == 0)
    {
      unsigned __int8 v5 = OSLogForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_10016D2B8();
      }
    }
  }
}

void sub_10009039C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  unsigned __int8 v3 = [*(id *)(a1 + 32) recordingToken];
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  [*(id *)(a1 + 32) setRecordingToken:0];
  [*(id *)(a1 + 40) setMode:0];
  id v4 = [*(id *)(a1 + 48) url];
  id v14 = +[AVURLAsset rc_preciseTimingAssetWithURL:v4];

  [v14 rc_durationInSeconds];
  double v6 = v5;
  [*(id *)(a1 + 32) setCurrentDuration:];
  [*(id *)(a1 + 32) setCurrentTime:v6];
  id v7 = *(void **)(a1 + 40);
  if (v6 <= 0.00000011920929)
  {
    double v12 = (void *)v7[1];
    uint64_t v13 = [*(id *)(a1 + 32) recordingID];
    uint64_t v9 = [v12 recordingWithUniqueID:v13];

    if (v9) {
      [*(id *)(*(void *)(a1 + 40) + 8) eraseRecording:v9];
    }
    id v11 = +[NSError errorWithDomain:@"VMAudioServiceErrorDomain" code:6 userInfo:0];
    [*(id *)(a1 + 40) setRecordingError:v11];
  }
  else
  {
    id v8 = [*(id *)(a1 + 32) recordingID];
    uint64_t v9 = [v7 _fetchRecording:v8 recordingController:*(void *)(a1 + 32)];

    if (!v9) {
      goto LABEL_10;
    }
    [v9 length];
    if (v10 != v6)
    {
      [v9 setLength:v6];
      [v9 setPlayable:1];
      [*(id *)(*(void *)(a1 + 40) + 8) saveIfNecessary];
      +[RCAnalyticsUtilities sendNewRecordingDuration:v6];
    }
    id v11 = +[RCComposition compositionLoadedForSavedRecording:v9];
    [v11 saveMetadataToDefaultLocation];
  }

LABEL_10:
  [*(id *)(a1 + 32) setCurrentState:0];
  [*(id *)(a1 + 40) _deactivateAudioSessionAsync:1];
}

void sub_1000908C0(id *a1)
{
  uint64_t v2 = [a1[4] group];
  [a1[5] _shutdownRecordingEngine];
  unsigned __int8 v3 = +[RCSSavedRecordingService sharedService];
  id v4 = a1[6];
  id v16 = 0;
  unsigned __int8 v5 = [v3 closeAudioFile:v4 error:&v16];
  id v6 = v16;

  if ((v5 & 1) == 0)
  {
    id v7 = OSLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10016D32C();
    }
  }
  id v8 = [a1[7] liveTranscription];
  if (v8)
  {
    uint64_t v9 = OSLogForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      id v18 = "-[VMAudioService stopRecording:atTime:error:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s -- calling finalizeAndReturnTranscriptionDataWithCompletionHandler", buf, 0xCu);
    }

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100090B3C;
    v13[3] = &unk_100222A20;
    id v14 = a1[6];
    uint64_t v15 = v2;
    [v8 finalizeAndReturnTranscriptionDataWithCompletionHandler:v13];
  }
  else
  {
    dispatch_group_leave(v2);
  }
  if (([a1[4] internalRecording] & 1) == 0)
  {
    double v10 = [a1[7] waveformDataSource];
    if (v10)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100090C5C;
      void v11[3] = &unk_100222A48;
      double v12 = v2;
      [v10 finishLoadingWithCompletionTimeout:-1 completionBlock:v11];
    }
  }
}

void sub_100090B3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = OSLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10016D414();
    }
  }
  if (v5)
  {
    id v8 = [*(id *)(a1 + 32) url];
    id v12 = 0;
    unsigned __int8 v9 = +[AVURLAsset rc_updateFile:v8 withTranscriptionData:v5 error:&v12];
    id v10 = v12;

    if ((v9 & 1) == 0)
    {
      id v11 = OSLogForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_10016D3A0();
      }
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100090C5C(uint64_t a1)
{
}

void sub_100090F04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) recordingError];

  if (v4)
  {
    [*(id *)(a1 + 32) setRecordingError:0];
    [v3 invalidate];
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    id v5 = [*(id *)(*(void *)(a1 + 32) + 40) controller];
    id v6 = [v5 waveformDataSource];

    if (v6)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100091008;
      v7[3] = &unk_100222A48;
      id v8 = *(id *)(a1 + 40);
      [v6 finishLoadingWithCompletionTimeout:-1 completionBlock:v7];
    }
  }
}

void sub_100091008(uint64_t a1)
{
}

void sub_1000915AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

id sub_1000915CC(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) currentAudioAndVideoCallCount];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_100091694(uint64_t a1)
{
}

uint64_t sub_100091E7C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1000926A4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1000925FCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_100092730(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    id v7 = 0;
    unsigned __int8 v4 = [v3 endAccessSessionWithToken:a2 error:&v7];
    id v5 = v7;
    if ((v4 & 1) == 0)
    {
      id v6 = OSLogForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10016D658();
      }
    }
    [*(id *)(a1 + 40) setEditingStatus:0];
  }
}

id sub_1000927D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) recordingToken];
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  [*(id *)(a1 + 32) setRecordingToken:0];
  [*(id *)(a1 + 40) setMode:0];
  unsigned __int8 v4 = *(void **)(a1 + 32);

  return [v4 setCurrentState:0];
}

void sub_10009285C(uint64_t a1)
{
  [*(id *)(a1 + 32) setMode:3];
  uint64_t v2 = +[AVURLAsset rc_preciseTimingAssetWithURL:*(void *)(a1 + 40)];
  [v2 rc_durationInSeconds];
  double v4 = v3;
  if (v2) {
    BOOL v5 = v3 > 0.00000011920929;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    double v8 = v3 + *(double *)(a1 + 112);
    [*(id *)(a1 + 48) setContentDuration:v3];
    RCTimeRangeMake();
    [*(id *)(a1 + 48) setTimeRangeInContentToUse:];
    RCTimeRangeMake();
    [*(id *)(a1 + 48) setTimeRangeInComposition:];
    unsigned __int8 v9 = *(void **)(a1 + 32);
    id v10 = +[RCComposition compositionMetadataURLForComposedAVURL:*(void *)(a1 + 56)];
    id v30 = 0;
    id v11 = [v9 _pushFileVersion:v10 error:&v30];
    id v12 = v30;

    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    double v32 = sub_10008C6C0;
    *(void *)&long long v33 = sub_10008C6D0;
    *((void *)&v33 + 1) = [*(id *)(a1 + 64) compositionByOverdubbingWithFragment:*(void *)(a1 + 48)];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    void v24[2] = sub_100092C7C;
    v24[3] = &unk_100222B10;
    uint64_t v13 = *(void *)(a1 + 32);
    double v28 = buf;
    void v24[4] = v13;
    id v25 = *(id *)(a1 + 72);
    id v26 = *(id *)(a1 + 80);
    id v27 = *(id *)(a1 + 104);
    double v29 = v8;
    id v14 = objc_retainBlock(v24);
    if ([*(id *)(a1 + 80) silencing]
      && [*(id *)(*(void *)&buf[8] + 40) hasMultipleTracks])
    {
      uint64_t v15 = *(void *)(a1 + 32);
      id v16 = *(NSObject **)(v15 + 104);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100092CF8;
      block[3] = &unk_100222B60;
      void block[4] = v15;
      double v23 = buf;
      id v19 = *(id *)(a1 + 48);
      id v20 = *(id *)(a1 + 88);
      id v21 = *(id *)(a1 + 96);
      uint64_t v22 = v14;
      dispatch_async(v16, block);
    }
    else
    {
      ((void (*)(void *))v14[2])(v14);
    }

    _Block_object_dispose(buf, 8);
  }
  else
  {
    id v6 = OSLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 40);
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "-[VMAudioService _mergeRecording:atTime:controller:error:]_block_invoke_2";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v2;
      *(_WORD *)&buf[22] = 2112;
      double v32 = v17;
      LOWORD(v33) = 2048;
      *(double *)((char *)&v33 + 2) = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s -- Merged recording failed - asset = %@, url = %@, outputDuration = %f", buf, 0x2Au);
    }

    id v7 = +[NSFileManager defaultManager];
    [v7 removeItemAtURL:*(void *)(a1 + 40) error:0];

    (*(void (**)(void))(*(void *)(a1 + 104) + 16))();
  }
}

void sub_100092C5C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

id sub_100092C7C(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) saveMetadataToDefaultLocation];
  [*(id *)(a1 + 32) __refreshRecording:*(void *)(a1 + 40) composition:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) controller:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) setEditingStatus:2];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  double v2 = *(double *)(a1 + 72);
  double v3 = *(void **)(a1 + 48);

  return [v3 setCurrentTime:v2];
}

void sub_100092CF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 40);
  double v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100092DC8;
  v7[3] = &unk_100222B38;
  uint64_t v10 = v2;
  uint64_t v6 = *(void *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  [v4 __eraseSecondLayerInComposition:v3 outputFragment:v5 audioSettings:v6 completionBlock:v7];
}

void sub_100092DC8(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = [*(id *)(*(void *)(a1[6] + 8) + 40) compositionByOverdubbingWithFragment:a2];
    uint64_t v4 = *(void *)(a1[6] + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
  uint64_t v6 = a1[4];
  id v7 = (void *)a1[5];

  dispatch_async(v6, v7);
}

void sub_100092F24(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    double v5 = *(double *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 48);
    id v10 = 0;
    unsigned __int8 v7 = [v3 _mergeRecording:v4 atTime:v6 controller:&v10 error:v5];
    id v8 = v10;
    if ((v7 & 1) == 0) {
      [*(id *)(a1 + 48) setRecordingError:v8];
    }
  }
  else
  {
    id v9 = *(void **)(a1 + 48);
    [v9 setRecordingError:];
  }
}

intptr_t sub_100093078(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100093488(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1000933F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000934D8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    id v6 = 0;
    unsigned __int8 v3 = [v2 endAccessSessionWithToken:a2 error:&v6];
    id v4 = v6;
    if ((v3 & 1) == 0)
    {
      double v5 = OSLogForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_10016D740();
      }
    }
  }
}

id sub_100093638(uint64_t a1, void *a2)
{
  return [a2 compositionByClippingToComposedTimeRange:*(double *)(a1 + 32) *(double *)(a1 + 40)];
}

id sub_100093714(uint64_t a1, void *a2)
{
  return [a2 compositionByDeletingAndSplittingAtComposedTimeRange:*(double *)(a1 + 32), *(double *)(a1 + 40)];
}

void sub_100093AA8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unsigned __int8 v3 = *(void **)(a1 + 32);
    [v3 setRecordingError:a2];
  }
  else
  {
    id v5 = +[RCRecordingTranscriptionService sharedInstance];
    id v4 = [*(id *)(a1 + 32) recordingID];
    [v5 startTranscriptionFor:v4];
  }
}

void sub_100094480(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    id v10 = 0;
    unsigned __int8 v7 = [v6 endAccessSessionWithToken:a2 error:&v10];
    id v8 = v10;
    if ((v7 & 1) == 0)
    {
      id v9 = OSLogForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        id v12 = "-[VMAudioService _mixDownEditedRecording:completion:]_block_invoke";
        __int16 v13 = 2112;
        id v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s -- accessError = %@", buf, 0x16u);
      }
    }
  }
  else
  {
    id v8 = OSLogForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      id v12 = "-[VMAudioService _mixDownEditedRecording:completion:]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s -- finalization error = %@", buf, 0x16u);
    }
  }

  [*(id *)(a1 + 40) setEditingStatus:0];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100095468(uint64_t a1)
{
  id v2 = +[UIColor labelColor];
  [*(id *)(a1 + 32) setTextColor:v2];
}

void sub_100095F98(uint64_t a1)
{
  [*(id *)(a1 + 32) removeFromSuperview];
  id v2 = [*(id *)(a1 + 40) centerContentContainerView];
  [v2 addSubview:*(void *)(a1 + 48)];
}

void sub_100096138(uint64_t a1)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = [*(id *)(a1 + 32) _bottomElementsToHide];
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(v2);
        }
        unsigned __int8 v7 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        [v7 setHidden:*(unsigned __int8 *)(a1 + 48)];
        [v7 setAlpha:*(double *)(a1 + 40)];
      }
      id v4 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v4);
  }

  if (*(unsigned char *)(a1 + 48))
  {
    id v8 = +[RCRecorderStyleProvider sharedStyleProvider];
    [v8 recordingViewExpandedTranscriptAdditionalSpaceBetweenOverviewAndTimeLabel];
    double v10 = v9;

    id v11 = [*(id *)(a1 + 32) mainContainerStackView];
    id v12 = [*(id *)(a1 + 32) fixedOverviewWaveformContainerView];
    __int16 v13 = v11;
    double v14 = v10;
  }
  else
  {
    id v11 = [*(id *)(a1 + 32) mainContainerStackView];
    id v12 = [*(id *)(a1 + 32) fixedOverviewWaveformContainerView];
    double v14 = 0.0;
    __int16 v13 = v11;
  }
  [v13 setCustomSpacing:v12 afterView:v14];
}

id sub_100097AA0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _trimInsertReplaceDoneButtonAction:*(void *)(a1 + 40)];
}

id sub_100097BC0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _trimInsertReplaceDoneButtonSaveAsNewAction:*(void *)(a1 + 40)];
}

void sub_100098590(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    double v1 = 0.0;
  }
  else {
    double v1 = 1.0;
  }
  id v2 = [*(id *)(a1 + 32) descriptionView];
  [v2 setAlpha:v1];
}

id sub_10009A864(uint64_t a1)
{
  double v2 = *(double *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) currentTimeLabel];
  [v3 setAlpha:v2];

  double v4 = *(double *)(a1 + 40);
  uint64_t v5 = [*(id *)(a1 + 32) bottomControlsContainerView];
  [v5 setAlpha:v4];

  id v6 = *(void **)(a1 + 32);

  return [v6 layoutIfNeeded];
}

void sub_10009BB20(uint64_t a1, uint64_t a2)
{
  if (a2 == 1)
  {
    uint64_t v11 = v2;
    uint64_t v12 = v3;
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_10009BBF4;
    v8[3] = &unk_100222C98;
    uint64_t v7 = *(void *)(a1 + 48);
    id v9 = *(id *)(a1 + 56);
    id v10 = *(id *)(a1 + 64);
    +[RCSavedRecordingsModel importRecordingWithSourceAudioURL:v5 name:v6 date:v7 completionHandler:v8];
  }
}

void sub_10009BBF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[NSFileManager defaultManager];
  uint64_t v8 = *(void *)(a1 + 32);
  id v12 = 0;
  unsigned __int8 v9 = [v7 removeItemAtURL:v8 error:&v12];
  id v10 = v12;

  if ((v9 & 1) == 0)
  {
    uint64_t v11 = OSLogForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10016DBF8((uint64_t)v10, v11);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10009C634(void *a1)
{
  id v1 = a1;
  id v2 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[v1 count]];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = [*(id *)(*((void *)&v10 + 1) + 8 * i) folderControllerID:v10];
        [v2 addObject:v8];
      }
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  return v2;
}

BOOL sub_10009C9B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 folderType]) {
    BOOL v4 = [*(id *)(a1 + 32) playableCountForFolder:v3] != 0;
  }
  else {
    BOOL v4 = 1;
  }

  return v4;
}

BOOL sub_10009CC00(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 folderType]) {
    BOOL v4 = [*(id *)(a1 + 32) playableCountForFolder:v3] != 0;
  }
  else {
    BOOL v4 = 1;
  }

  return v4;
}

id sub_10009D494(unsigned int a1)
{
  *(void *)uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  int v2 = bswap32(a1);
  *(_DWORD *)&v8[1] = v2;
  if ((v2 & 0x80) != 0)
  {
    if (!__maskrune((char)v2, 0x40000uLL)) {
      goto LABEL_17;
    }
  }
  else if ((_DefaultRuneLocale.__runetype[(char)v2] & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  __darwin_ct_rune_t v3 = (__int16)v2 >> 8;
  if ((v2 & 0x8000) != 0)
  {
    if (!__maskrune(v3, 0x40000uLL)) {
      goto LABEL_17;
    }
  }
  else if ((_DefaultRuneLocale.__runetype[v3] & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  __darwin_ct_rune_t v4 = v2 << 8 >> 24;
  if ((v2 & 0x800000) != 0)
  {
    if (!__maskrune(v4, 0x40000uLL)) {
      goto LABEL_17;
    }
  }
  else if ((_DefaultRuneLocale.__runetype[v4] & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  __darwin_ct_rune_t v5 = v2 >> 24;
  if (v2 < 0)
  {
    if (__maskrune(v5, 0x40000uLL)) {
      goto LABEL_15;
    }
  }
  else if ((_DefaultRuneLocale.__runetype[v5] & 0x40000) != 0)
  {
LABEL_15:
    strcpy(&v8[5], "'");
    v8[0] = 39;
    goto LABEL_18;
  }
LABEL_17:
  __sprintf_chk(v8, 0, 0x14uLL, "%d", a1);
LABEL_18:
  uint64_t v6 = +[NSString stringWithUTF8String:v8];

  return v6;
}

BOOL sub_10009D604(signed int a1, void *a2)
{
  if (a1 && a2)
  {
    NSErrorUserInfoKey v7 = NSLocalizedDescriptionKey;
    __darwin_ct_rune_t v4 = sub_10009D494(a1);
    uint64_t v8 = v4;
    __darwin_ct_rune_t v5 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
    *a2 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:a1 userInfo:v5];
  }
  return a1 == 0;
}

uint64_t sub_10009D708(OSType a1, OSType a2, AudioComponentInstance *a3)
{
  inDesc.componentType = a1;
  inDesc.componentSubType = a2;
  *(void *)&inDesc.componentManufacturer = 1634758764;
  inDesc.componentFlagsMask = 0;
  Next = AudioComponentFindNext(0, &inDesc);
  return AudioComponentInstanceNew(Next, a3);
}

uint64_t sub_10009D758(OpaqueAudioComponentInstance *a1, void *inData, int a3)
{
  if (a3) {
    AudioUnitScope v3 = 1;
  }
  else {
    AudioUnitScope v3 = 2;
  }
  return AudioUnitSetProperty(a1, 8u, v3, 0, inData, 0x28u);
}

BOOL sub_10009D778(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

void sub_10009D804(unsigned int *a1, unsigned int a2, int a3, int a4)
{
  *a1 = a2;
  if (a2)
  {
    size_t v5 = (4 * a3);
    uint64_t v6 = (void **)(a1 + 4);
    uint64_t v7 = a2;
    do
    {
      *((_DWORD *)v6 - 2) = 1;
      *((_DWORD *)v6 - 1) = v5;
      if (a4) {
        bzero(*v6, v5);
      }
      v6 += 2;
      --v7;
    }
    while (v7);
  }
}

unsigned int *sub_10009D86C(unsigned int *result, unsigned int *a2)
{
  *a2 = *result;
  if (*result)
  {
    AudioUnitScope v3 = result;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      *(void *)&a2[v4 + 2] = *(void *)&v3[v4 + 2];
      id result = (unsigned int *)memcpy(*(void **)&a2[v4 + 4], *(const void **)&v3[v4 + 4], v3[v4 + 3]);
      ++v5;
      v4 += 4;
    }
    while (v5 < *v3);
  }
  return result;
}

char *sub_10009D8E4(int a1, unsigned int a2)
{
  LODWORD(v3) = a1;
  uint64_t v4 = (char *)malloc_type_malloc(16 * (a1 - 1) + 24, 0x4C226B78uLL);
  unint64_t v5 = v4;
  if (v3)
  {
    size_t v6 = 4 * a2;
    uint64_t v7 = (void **)(v4 + 16);
    uint64_t v3 = v3;
    do
    {
      *uint64_t v7 = malloc_type_malloc(v6, 0x100004052888210uLL);
      v7 += 2;
      --v3;
    }
    while (v3);
  }
  return v5;
}

void sub_10009D964(void **a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1 + 2;
    do
    {
      unint64_t v5 = *v4;
      v4 += 2;
      free(v5);
      --v3;
    }
    while (v3);
  }

  free(a1);
}

float sub_10009D9BC(_DWORD *a1, int a2, int a3, float result, float a5)
{
  if (a2)
  {
    uint64_t v5 = 0;
    unsigned int v8 = *a1;
    size_t v6 = (uint64_t *)(a1 + 4);
    uint64_t v7 = v8;
    do
    {
      if (v7)
      {
        uint64_t v9 = v7;
        int v10 = v6;
        do
        {
          uint64_t v11 = *v10;
          v10 += 2;
          *(float *)(v11 + 4 * (v5 + a3)) = result * *(float *)(v11 + 4 * (v5 + a3));
          --v9;
        }
        while (v9);
      }
      id result = fmin(fmax((float)(result + a5), 0.0), 1.0);
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_10009DA20(_DWORD *a1, int a2, int a3)
{
  if (*a1)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a3;
    size_t v6 = 4 * a2;
    uint64_t v7 = 4;
    do
    {
      bzero((void *)(*(void *)&a1[v7] + 4 * v5), v6);
      ++v4;
      v7 += 4;
    }
    while (v4 < *a1);
  }
}

uint64_t *sub_10009DA8C(uint64_t *result, unsigned int a2, uint64_t *a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  if (a5)
  {
    uint64_t v7 = result;
    uint64_t v8 = a4;
    uint64_t v9 = a2;
    size_t v10 = 4 * a6;
    uint64_t v11 = a5;
    do
    {
      uint64_t v12 = *a3++;
      long long v13 = (void *)(v12 + 4 * v8);
      uint64_t v14 = *v7++;
      id result = (uint64_t *)memcpy(v13, (const void *)(v14 + 4 * v9), v10);
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_10009DAF8(OpaqueAudioComponentInstance *a1, void *outData)
{
  UInt32 ioDataSize = 4;
  return AudioUnitGetProperty(a1, 0xEu, 0, 0, outData, &ioDataSize);
}

uint64_t sub_10009DB34(OpaqueAudioComponentInstance *a1, int a2)
{
  int inData = a2;
  return AudioUnitSetProperty(a1, 0xEu, 0, 0, &inData, 4u);
}

void sub_10009E0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10009E114(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = [a2 dequeueReusableCellWithReuseIdentifier:@"kFolderCellReuseIdentifier" forIndexPath:a3];
  uint64_t v9 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v11 = [WeakRetained cellsHashTable];
  [v11 addObject:v8];

  id v12 = objc_loadWeakRetained(v9);
  long long v13 = [v12 foldersController];
  uint64_t v14 = [v13 folderWithIdentifier:v7];

  long long v15 = +[RCFolderDisplayModel folderDisplayModelWithFolderModel:v14];
  id v16 = objc_loadWeakRetained(v9);
  long long v17 = [v16 currentActiveFolderViewController];

  if (v17)
  {
    uint64_t v18 = [v17 folderUUID];
    if (v18)
    {
      id v19 = (void *)v18;
      id v20 = [v15 UUID];
      id v21 = [v17 folderUUID];
      unsigned int v22 = [v20 isEqualToString:v21];

      if (v22)
      {
        double v23 = [v15 displayName];
        [v17 setFolderTitle:v23];
      }
    }
  }
  id v24 = objc_loadWeakRetained(v9);
  [v24 _configureCell:v8 withFolderDisplayModel:v15];

  return v8;
}

id sub_10009E35C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  size_t v6 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = [WeakRetained _layoutListAppearance];

  id v9 = [objc_alloc((Class)UICollectionLayoutListConfiguration) initWithAppearance:v8];
  id v10 = objc_loadWeakRetained(v6);
  uint64_t v11 = [v10 _backgroundColorToUse];
  [v9 setBackgroundColor:v11];

  id v12 = objc_loadWeakRetained(v6);
  [v9 setShowsSeparators:[v12 _showsSeparators]];

  id v13 = objc_loadWeakRetained(v6);
  uint64_t v14 = [v13 _trailingSwipeActionsConfigurationProvider];
  [v9 setTrailingSwipeActionsConfigurationProvider:v14];

  if (a2 == 1) {
    [v9 setHeaderMode:1];
  }
  long long v15 = +[NSCollectionLayoutSection sectionWithListConfiguration:v9 layoutEnvironment:v5];
  if (!a2)
  {
    id v16 = objc_loadWeakRetained(v6);
    [v16 _builtInFolderSectionTopPadding];
    double v18 = v17;

    if (v18 > 0.0)
    {
      id v19 = +[NSCollectionLayoutDimension fractionalWidthDimension:1.0];
      id v20 = +[NSCollectionLayoutDimension absoluteDimension:v18];
      id v21 = +[NSCollectionLayoutSize sizeWithWidthDimension:v19 heightDimension:v20];

      unsigned int v22 = +[NSCollectionLayoutBoundarySupplementaryItem boundarySupplementaryItemWithLayoutSize:v21 elementKind:@"kFolderCollectionElementKindSectionSpacer" alignment:1];
      id v25 = v22;
      double v23 = +[NSArray arrayWithObjects:&v25 count:1];
      [v15 setBoundarySupplementaryItems:v23];
    }
  }

  return v15;
}

id sub_10009EB9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 section])
  {
    unint64_t v4 = (id *)(a1 + 32);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    size_t v6 = [WeakRetained foldersController];
    id v7 = [v6 folderAtIndexPath:v3];

    id v8 = +[RCRecorderStyleProvider sharedStyleProvider];
    if ([v8 usesVectorGlyph])
    {
      id v9 = 0;
    }
    else
    {
      uint64_t v11 = +[NSBundle mainBundle];
      id v9 = [v11 localizedStringForKey:@"DELETE" value:&stru_100228BC8 table:0];
    }
    id v21 = _NSConcreteStackBlock;
    uint64_t v22 = 3221225472;
    double v23 = sub_10009EE6C;
    id v24 = &unk_100222D58;
    objc_copyWeak(&v26, v4);
    id v12 = v7;
    id v25 = v12;
    id v13 = +[UIContextualAction contextualActionWithStyle:1 title:v9 handler:&v21];
    uint64_t v14 = +[UIColor systemRedColor];
    [v13 setBackgroundColor:v14];

    long long v15 = [v8 swipeTrashImage];
    [v13 setImage:v15];

    id v16 = +[NSBundle mainBundle];
    double v17 = [v16 localizedStringForKey:@"DELETE" value:&stru_100228BC8 table:0];
    double v18 = [v13 image];
    [v18 setAccessibilityLabel:v17];

    id v27 = v13;
    id v19 = +[NSArray arrayWithObjects:&v27 count:1];
    id v10 = +[UISwipeActionsConfiguration configurationWithActions:v19];

    objc_destroyWeak(&v26);
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

void sub_10009EE4C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10009EE6C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = (id *)(a1 + 40);
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained(v5);
  id v7 = [WeakRetained selectionDelegate];
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = objc_loadWeakRetained(v5);
  [v7 deleteFolder:v8 controller:v9 completionBlock:v6];
}

void sub_10009FEE0(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = [WeakRetained recordingsCollectionViewController];
  [v3 setFolderSelectionDelegate:0];

  id v4 = objc_loadWeakRetained(v1);
  [v4 setLibraryActionHandler:0];

  id v5 = objc_loadWeakRetained(v1);
  [v5 setRecordingViewControllerDelegate:0];

  id v6 = objc_loadWeakRetained(v1);
  [v6 setIsSetup:0];
}

uint64_t sub_10009FF90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A2088(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  int v2 = (void *)qword_10026A850;
  qword_10026A850 = (uint64_t)v1;
}

NSArray *__cdecl sub_1000A2270(id a1, NSArray *a2)
{
  int v2 = a2;
  id v3 = +[NSMutableArray array];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = v2;
  id v5 = [(NSArray *)v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v14;
    do
    {
      for (unint64_t i = 0; i != v6; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(id *)(*((void *)&v13 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v10 = v9;
          id v9 = v10;
          if (objc_msgSend(v10, "action", (void)v13) == "delete:")
          {
            uint64_t v11 = [v10 title];
            id v9 = +[UIKeyCommand commandWithTitle:v11 image:0 action:"delete:" input:@"\b" modifierFlags:0 propertyList:0];
          }
        }
        [v3 addObject:v9];
      }
      id v6 = [(NSArray *)v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }

  return (NSArray *)v3;
}

void sub_1000A31B8(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setHasMetTimeThreshold:1];

  id v6 = objc_loadWeakRetained(v1);
  id v3 = [v6 delegate];
  id v4 = objc_loadWeakRetained(v1);
  id v5 = [v4 UUID];
  [v3 backupTimerFiredForUUID:v5];
}

void sub_1000A4054(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) browseFoldersViewController];
  id v1 = [v2 recordingViewController];
  [v1 updateForSizeChange];
}

id sub_1000A43D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  id v3 = *(void **)(a1 + 32);

  return _[v3 _displayMultiLayerAlertIfNeeded];
}

uint64_t sub_1000A495C(uint64_t a1)
{
  [*(id *)(a1 + 32) addChildViewController:*(void *)(a1 + 40)];
  uint64_t v2 = [*(id *)(a1 + 40) view];
  [*(id *)(a1 + 32) setHostedView:v2];

  [*(id *)(a1 + 40) didMoveToParentViewController:*(void *)(a1 + 32)];
  if ([*(id *)(a1 + 48) displayStyle] == (id)1)
  {
    if ([*(id *)(a1 + 56) supportsCompactRecordingCard])
    {
      if (*(unsigned char *)(a1 + 80)) {
        uint64_t v3 = 3;
      }
      else {
        uint64_t v3 = 2;
      }
    }
    else
    {
      uint64_t v3 = 3;
    }
    [*(id *)(a1 + 48) setDisplayStyle:v3];
    id v4 = [*(id *)(a1 + 40) waveformContainerViewControllers];
    objc_msgSend(v4, "setIsCompactView:", objc_msgSend(*(id *)(a1 + 48), "displayStyle") == (id)2);
  }
  uint64_t v5 = [*(id *)(a1 + 64) playbackViewController];
  if (v5)
  {
    id v6 = (void *)v5;
    uint64_t v7 = [*(id *)(a1 + 64) playbackViewController];
    unsigned int v8 = [v7 isDisplayingTranscriptView];

    if (v8) {
      [*(id *)(a1 + 40) toggleTranscriptView];
    }
  }
  id v9 = [*(id *)(a1 + 64) browseFoldersViewController];
  id v10 = [v9 activeRecordingsCollectionViewController];
  uint64_t v11 = [v10 searchController];
  [v11 setActive:0];

  id v12 = [*(id *)(a1 + 64) browseFoldersViewController];
  long long v13 = [v12 activeRecordingsCollectionViewController];
  [v13 _setSearchString:&stru_100228BC8];

  if (([*(id *)(a1 + 56) toolbarButtonsShouldHaveNonDefaultColor] & 1) == 0)
  {
    long long v14 = [*(id *)(a1 + 56) recordingsCollectionViewEditButtonDimmedColor];
    long long v15 = [*(id *)(a1 + 64) browseFoldersViewController];
    long long v16 = [v15 activeRecordingsCollectionViewController];
    double v17 = [v16 editButtonItem];
    [v17 setTintColor:v14];
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result)
  {
    id v19 = *(uint64_t (**)(void))(result + 16);
    return v19();
  }
  return result;
}

id sub_1000A4B64(uint64_t a1)
{
  [*(id *)(a1 + 32) completePresent];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 setCardPresentationDelegate:v3];
}

uint64_t sub_1000A4BA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000A4BB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A4D40(uint64_t a1)
{
  [*(id *)(a1 + 32) setBool:1 forKey:@"RCLayeredRecordingsSyncAlertWasDismissed"];
  id v2 = [*(id *)(a1 + 40) mainControllerHelper];
  [v2 setWillMigrateFromSingleLayerToMultiLayer:0];
}

double sub_1000A51B4(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

void sub_1000A544C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) presentedView];
  id v1 = [v2 window];
  [v1 layoutIfNeeded];
}

id sub_1000A5924(uint64_t a1)
{
  return [*(id *)(a1 + 32) toggleFullCompact];
}

uint64_t sub_1000A5DFC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mainControllerHelper];
  [v2 startCapturing:*(void *)(a1 + 40)];

  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void sub_1000A62B4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_1000A62D8(uint64_t a1)
{
  id v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = [WeakRetained browseFoldersViewController];
  uint64_t v5 = [v4 activeRecordingsCollectionViewController];
  objc_initWeak(&location, v5);

  id v6 = objc_loadWeakRetained(&location);
  [v6 willSelectItemWithUUID:*(void *)(a1 + 32)];

  id v7 = objc_loadWeakRetained(&location);
  [v7 selectItemWithUUID:*(void *)(a1 + 32) animated:0];

  id v8 = objc_loadWeakRetained(v2);
  [v8 didSelectForUUID:*(void *)(a1 + 32) resetPosition:0 force:0];

  id v9 = objc_loadWeakRetained(v2);
  id v10 = [v9 mainControllerHelper];
  LODWORD(v5) = [v10 isPlayingForUUID:*(void *)(a1 + 32)];

  if (v5)
  {
    id v11 = objc_loadWeakRetained(v2);
    id v12 = [v11 playbackViewController];
    [v12 showPlayingForUUID:*(void *)(a1 + 32)];
  }
  objc_destroyWeak(&location);
}

void sub_1000A6404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_1000A6418(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = [WeakRetained browseFoldersViewController];
  id v4 = [v3 activeRecordingsCollectionViewController];
  objc_initWeak(&location, v4);

  id v5 = objc_loadWeakRetained(&location);
  id v6 = [v5 viewIfLoaded];
  if (!v6)
  {

    goto LABEL_5;
  }
  id v7 = objc_loadWeakRetained(&location);
  id v8 = [v7 viewIfLoaded];
  id v9 = [v8 window];

  if (!v9)
  {
LABEL_5:
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = objc_loadWeakRetained(&location);
    [v11 setViewDidAppearCompletionBlock:v10];

    goto LABEL_6;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
LABEL_6:
  objc_destroyWeak(&location);
}

void sub_1000A6520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

id sub_1000A6534(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 24) = 0;
  id v2 = [*(id *)(a1 + 32) recordingsModelInteractor];
  unsigned int v3 = [v2 isRecentlyDeletedForUUID:*(void *)(a1 + 40)];

  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    return [v4 goToRecentlyDeletedIfNeededWithCompletion:v6, v5];
  }
  else
  {
    return [v4 goToAllRecordingsIfNeeded:1 completion:v5];
  }
}

id sub_1000A75A8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64)) {
    [*(id *)(a1 + 32) _reparentAfterDismiss];
  }
  id v2 = [*(id *)(a1 + 32) browseFoldersViewController];
  unsigned int v3 = [v2 activeRecordingsCollectionViewController];
  [v3 _setSearchString:&stru_100228BC8];

  if (([*(id *)(a1 + 40) toolbarButtonsShouldHaveNonDefaultColor] & 1) == 0)
  {
    id v4 = +[UIColor systemBlueColor];
    uint64_t v5 = [*(id *)(a1 + 32) browseFoldersViewController];
    uint64_t v6 = [v5 activeRecordingsCollectionViewController];
    id v7 = [v6 editButtonItem];
    [v7 setTintColor:v4];
  }
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8) {
    (*(void (**)(void))(v8 + 16))();
  }
  id v9 = [*(id *)(a1 + 32) browseFoldersViewController];
  uint64_t v10 = [v9 recordingViewController];
  [v10 cleanupAfterDismiss];

  if (!*(unsigned char *)(a1 + 65)) {
    +[UIView setAnimationsEnabled:1];
  }
  [*(id *)(a1 + 48) setCardPresentationDelegate:0];
  id v11 = *(void **)(a1 + 32);

  return [v11 setSheetPresentationState:0];
}

void sub_1000A7908(uint64_t a1)
{
  id v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472;
  id v11 = sub_1000A7A08;
  id v12 = &unk_100221C38;
  id v2 = *(void **)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = v2;
  unsigned int v3 = objc_retainBlock(&v9);
  id v4 = v3;
  if (*(unsigned char *)(a1 + 48))
  {
    ((void (*)(void ***))v3[2])(v3);
  }
  else
  {
    unsigned int v5 = [*(id *)(*(void *)(a1 + 32) + 80) isRecentlyDeletedForUUID:*(void *)(a1 + 40) v9, v10, v11, v12, v13];
    uint64_t v6 = [*(id *)(a1 + 32) browseFoldersViewController];
    id v7 = v6;
    if (v5) {
      uint64_t v8 = 3;
    }
    else {
      uint64_t v8 = 0;
    }
    [v6 goToBuiltInFolderOfType:v8 animated:0 completion:v4];
  }
}

void sub_1000A7A08(uint64_t a1)
{
  +[CATransaction begin];
  unsigned int v3 = _NSConcreteStackBlock;
  uint64_t v4 = 3221225472;
  unsigned int v5 = sub_1000A7AB8;
  uint64_t v6 = &unk_100221C38;
  id v2 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = v2;
  +[CATransaction setCompletionBlock:&v3];
  +[CATransaction commit];
}

void sub_1000A7AB8(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v5 = [v1 browseFoldersViewController];
  unsigned int v3 = [v5 currentActiveFolderViewController];
  uint64_t v4 = [v3 recordingsCollectionViewController];
  [v1 _selectRecordingWithUUID:v2 inRecordingsCollectionViewController:v4];
}

void sub_1000A87B8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    unsigned int v3 = [*(id *)(a1 + 32) browseFoldersViewController];
    id v4 = [v3 activeRecordingsCollectionViewController];

    if ([v4 isEditing]) {
      [v4 endEditing];
    }
  }
}

void sub_1000A98D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A98EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setPresentedSelectFolderViewController:v1];
}

void sub_1000AA028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AA04C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained setPresentedPlaybackSettingsViewController:*(void *)(a1 + 32)];
  [WeakRetained setPresentingPlaybackSettingsViewController:*(void *)(a1 + 40)];
  uint64_t v2 = [WeakRetained mainControllerHelper];
  unsigned int v3 = [WeakRetained selectedUUID];
  [v2 setLooping:1 forUUID:v3];
}

void sub_1000AA83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AA868(uint64_t a1, void *a2)
{
  id v5 = a2;
  unsigned int v3 = +[NSBundle mainBundle];
  id v4 = [v3 localizedStringForKey:@"NEW_FOLDER_NAME_PLACEHOLDER" value:&stru_100228BC8 table:0];
  [v5 setPlaceholder:v4];

  [v5 addTarget:*(void *)(a1 + 32) action:"_newFolderTextDidChange:" forControlEvents:0x20000];
  [v5 setAutocapitalizationType:1];
}

void sub_1000AA924(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  unsigned int v3 = [WeakRetained textFields];
  id v4 = [v3 objectAtIndexedSubscript:0];
  id v6 = [v4 text];

  id v5 = [*(id *)(a1 + 32) recordingsModelInteractor];
  if ([v5 userFolderExistsWithName:v6])
  {
    [*(id *)(a1 + 32) _presentNameTakenAlertWithName:v6 sourceController:*(void *)(a1 + 40)];
  }
  else if (([v5 createUserFolderWithName:v6] & 1) == 0)
  {
    [*(id *)(a1 + 32) _showFailedNewFolderAlert];
  }
}

void sub_1000AACEC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setPlaceholder:v3];
  [v4 addTarget:*(void *)(a1 + 40) action:"_renamingTextDidChange:" forControlEvents:0x20000];
  [v4 setAutocapitalizationType:1];
}

void sub_1000AAD60(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) recordingsModelInteractor];
  uint64_t v2 = [*(id *)(a1 + 40) text];
  if ([v5 userFolderExistsWithName:v2])
  {
    [*(id *)(a1 + 32) _presentNameTakenAlertWithName:v2 sourceController:*(void *)(a1 + 48)];
  }
  else
  {
    uint64_t v3 = +[RCApplicationModel sharedApplicationModel];
    id v4 = [v3 folderWithName:*(void *)(a1 + 56)];
    [*(id *)(a1 + 32) renameFolder:v4 toName:v2];
  }
}

void sub_1000ABF34(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) UUID];
  if (*(void *)(a1 + 56) != 1) {
    [*(id *)(a1 + 40) selectRecordingWithUUID:v2 returnToBrowse:0];
  }
  [*(id *)(a1 + 40) didSelectForUUID:v2 resetPosition:0 force:0];
  uint64_t v3 = [*(id *)(a1 + 40) browseFoldersViewController];
  id v4 = [v3 recordingViewController];

  objc_initWeak(&location, *(id *)(a1 + 40));
  uint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472;
  id v12 = sub_1000AC108;
  uint64_t v13 = &unk_100223040;
  id v5 = v4;
  id v14 = v5;
  objc_copyWeak(&v19, &location);
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 32);
  id v6 = v2;
  uint64_t v7 = *(void *)(a1 + 40);
  id v17 = v6;
  uint64_t v18 = v7;
  char v20 = *(unsigned char *)(a1 + 64);
  id v8 = objc_retainBlock(&v10);
  id v9 = v8;
  if (*(void *)(a1 + 56) == 1) {
    ((void (*)(void ***))v8[2])(v8);
  }
  else {
    [*(id *)(a1 + 40) setState:1 withOptions:1 completion:v8, v10, v11, v12, v13, v14, v15, v16];
  }
  [*(id *)(a1 + 40) updateQuickActions:v10, v11, v12, v13];

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
}

void sub_1000AC0EC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1000AC108(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 72);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  id v4 = [WeakRetained mainControllerHelper];
  id v5 = [v4 timeController];
  [*(id *)(a1 + 32) setActiveTimeController:v5];

  id v6 = objc_loadWeakRetained(v2);
  uint64_t v7 = [v6 mainControllerHelper];
  id v8 = [v7 liveTranscription];
  [*(id *)(a1 + 32) setLiveTranscription:v8];

  [*(id *)(a1 + 32) startEditWithComposition:*(void *)(a1 + 40) displayModel:*(void *)(a1 + 48)];
  id v9 = *(void **)(a1 + 32);
  id v10 = objc_loadWeakRetained(v2);
  uint64_t v11 = [v10 playbackSettings];
  [v9 updateWithPlaybackSettings:v11];

  id v12 = objc_loadWeakRetained(v2);
  uint64_t v13 = [v12 mainControllerHelper];
  LODWORD(v11) = [v13 isPlayingForUUID:*(void *)(a1 + 56)];

  if (v11) {
    [*(id *)(a1 + 32) showPlayingForUUID:*(void *)(a1 + 56)];
  }
  id v14 = objc_loadWeakRetained((id *)(*(void *)(a1 + 64) + 16));

  if (v14)
  {
    id v15 = objc_loadWeakRetained(v2);
    id v16 = [v15 mainControllerHelper];
    id v17 = [v16 timeController];
    id v18 = objc_loadWeakRetained((id *)(*(void *)(a1 + 64) + 16));
    [v18 setActiveTimeController:v17];

    id v19 = objc_loadWeakRetained((id *)(*(void *)(a1 + 64) + 16));
    [v19 startEditWithComposition:*(void *)(a1 + 40) displayModel:*(void *)(a1 + 48)];

    id v20 = objc_loadWeakRetained(v2);
    id v21 = [v20 mainControllerHelper];
    LODWORD(v16) = [v21 isPlayingForUUID:*(void *)(a1 + 56)];

    if (v16)
    {
      id v22 = objc_loadWeakRetained((id *)(*(void *)(a1 + 64) + 16));
      [v22 showPlayingForUUID:*(void *)(a1 + 56)];
    }
  }
  if (*(unsigned char *)(a1 + 80))
  {
    double v23 = [*(id *)(a1 + 64) mainControllerHelper];
    [v23 enterTrimMode];

    id v24 = [*(id *)(a1 + 64) browseFoldersViewController];
    id v25 = [v24 recordingViewController];
    [v25 updateForTrimMode];
  }

  dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_100223018);
}

void sub_1000AC370(id a1)
{
  uint64_t v1 = +[UIApplication sharedApplication];
  unsigned int v2 = [v1 isRunningTest];

  if (v2)
  {
    id v4 = +[UIApplication sharedApplication];
    uint64_t v3 = [v4 delegate];
    [v3 ppt_didShowVoiceMemoEditor];
  }
}

void sub_1000AC74C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  uint64_t v1 = [WeakRetained view];
  [v1 completePresent];
}

void sub_1000ACAA0(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) browseFoldersViewController];
  uint64_t v3 = [v2 activeRecordingsCollectionViewController];

  if (!*(unsigned char *)(a1 + 56))
  {
    [v3 deselectSelectedItem];
    id v4 = [*(id *)(a1 + 32) playbackViewController];
    [v4 updateWithRecordingModel:*(void *)(a1 + 40)];

    id v5 = [*(id *)(a1 + 32) browseFoldersViewController];
    id v6 = [v5 currentActiveFolderViewController];

    uint64_t v7 = *(void **)(a1 + 32);
    id v8 = [*(id *)(a1 + 40) UUID];
    id v9 = [v6 folderType];
    id v10 = [v6 folderTitle];
    [v7 _setCorrectOriginalFolderForRecordingWithUUID:v8 folderType:v9 userFolderName:v10];
  }
  [v3 setEditing:0];
  uint64_t v11 = [*(id *)(a1 + 32) browseFoldersViewController];
  id v12 = [v11 recordingViewController];

  if (!*(unsigned char *)(a1 + 56))
  {
    uint64_t v13 = [*(id *)(a1 + 40) UUID];
    [v3 prepareForAdditionOfNewRecordingWithUUID:v13];

    if ([v12 isDisplayingTranscriptView]) {
      [v12 toggleTranscriptView];
    }
    [v12 setWaveformDataSource:0];
  }
  id v14 = [*(id *)(a1 + 32) mainControllerHelper];
  [v12 updateForRecordingStart:[v14 shouldSaveAsNew]];

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  [WeakRetained updateForRecordingStart:0];

  [v12 updateWithRecordingModel:*(void *)(a1 + 40)];
  id v16 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  [v16 updateWithRecordingModel:*(void *)(a1 + 40)];

  id v17 = [v12 view];
  BOOL v18 = [v17 displayStyle] == (id)1;

  objc_initWeak(&location, *(id *)(a1 + 32));
  id v19 = *(void **)(a1 + 32);
  id v30 = _NSConcreteStackBlock;
  uint64_t v31 = 3221225472;
  double v32 = sub_1000ACE38;
  long long v33 = &unk_1002230B0;
  BOOL v36 = v18;
  id v20 = v3;
  id v34 = v20;
  objc_copyWeak(&v35, &location);
  [v19 setState:1 withOptions:0 completion:&v30];
  id v21 = [*(id *)(a1 + 32) mainControllerHelper:v30, v31, v32, v33];
  id v22 = [v21 timeController];
  [v12 setActiveTimeController:v22];

  double v23 = [*(id *)(a1 + 32) mainControllerHelper];
  id v24 = [v23 liveTranscription];
  [v12 setLiveTranscription:v24];

  id v25 = [*(id *)(a1 + 32) mainControllerHelper];
  id v26 = [v25 timeController];
  id v27 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  [v27 setActiveTimeController:v26];

  [v12 setWaveformDataSource:*(void *)(a1 + 48)];
  uint64_t v28 = *(void *)(a1 + 48);
  id v29 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  [v29 setWaveformDataSource:v28];

  [*(id *)(a1 + 32) updateQuickActions];
  objc_destroyWeak(&v35);

  objc_destroyWeak(&location);
}

void sub_1000ACE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000ACE38(uint64_t a1)
{
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_100223088);
  if (*(unsigned char *)(a1 + 48)) {
    [*(id *)(a1 + 32) deselectSelectedItem];
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [WeakRetained splitViewController];

  [v3 hidePrimaryColumnIfNeeded];
}

void sub_1000ACEBC(id a1)
{
  uint64_t v1 = +[UIApplication sharedApplication];
  unsigned int v2 = [v1 isRunningTest];

  if (v2)
  {
    id v4 = +[UIApplication sharedApplication];
    id v3 = [v4 delegate];
    [v3 ppt_didStartCyclerRecording];
  }
}

void sub_1000AD384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AD3A0(uint64_t a1)
{
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_1002230D0);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = [WeakRetained mainControllerHelper];
  [v2 promptForRatingIfNeeded];
}

void sub_1000AD410(id a1)
{
  uint64_t v1 = +[UIApplication sharedApplication];
  unsigned int v2 = [v1 isRunningTest];

  if (v2)
  {
    id v4 = +[UIApplication sharedApplication];
    id v3 = [v4 delegate];
    [v3 ppt_didEndCyclerRecording];
  }
}

id sub_1000AD6C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) setState:0];
}

void sub_1000AF930(id a1, NSString *a2)
{
  unsigned int v2 = a2;
  id v3 = +[UIPasteboard generalPasteboard];
  [v3 setString:v2];
}

void sub_1000B0738(uint64_t a1)
{
}

void sub_1000B0D10(id a1)
{
  v3[0] = UIActivityTypePrint;
  v3[1] = UIActivityTypeAssignToContact;
  v3[2] = UIActivityTypeSaveToCameraRoll;
  _OWORD v3[3] = UIActivityTypeAddToReadingList;
  v3[4] = UIActivityTypePostToFacebook;
  void v3[5] = UIActivityTypePostToWeibo;
  v3[6] = UIActivityTypePostToFlickr;
  v3[7] = UIActivityTypePostToVimeo;
  v3[8] = UIActivityTypePostToTencentWeibo;
  uint64_t v1 = +[NSArray arrayWithObjects:v3 count:9];
  unsigned int v2 = (void *)qword_10026A860;
  qword_10026A860 = v1;
}

id *sub_1000B46AC(uint64_t a1)
{
  uint64_t result = *(id **)(a1 + 32);
  if (result[8])
  {
    id v3 = [result view];
    [v3 bounds];
    [*(id *)(*(void *)(a1 + 32) + 64) setFrame:];

    uint64_t result = *(id **)(a1 + 32);
  }
  if (result[9])
  {
    [result[10] bounds];
    id v4 = *(void **)(*(void *)(a1 + 32) + 72);
    return (id *)[v4 setFrame:];
  }
  return result;
}

void sub_1000B5678(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_1000B5698(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateVisibleAreaWithAnimationDuration:*(double *)(a1 + 56)];
  [*(id *)(a1 + 32) _updateSelectionOverlayWithAnimationDuration:*(double *)(a1 + 56)];
  [*(id *)(a1 + 32) _updateBackgroundWaveformHighlight];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)
    && [*(id *)(a1 + 32) displayStyle] != (id)1)
  {
    unsigned int v2 = [*(id *)(a1 + 32) delegate];
    [v2 waveformViewController:*(double *)(*(void *)(a1 + 32) + 296) didChangeToVisibleTimeRange:*(double *)(*(void *)(a1 + 32) + 304)];
  }
  id v3 = *(void **)(a1 + 40);

  return [v3 setAlpha:0.0];
}

uint64_t sub_1000B573C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  }
  return result;
}

uint64_t sub_1000B5A7C(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, double a6)
{
  id v11 = a2;
  if (!a5 || a3 != 1 && a5 > 0)
  {
    uint64_t v12 = 0;
    goto LABEL_5;
  }
  uint64_t v12 = 0;
  if (a5 >= 0 || a3 == -1)
  {
    double v15 = fmax(a6 / *(double *)(a1 + 40), 0.0);
    if (v15 < 0.25)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      double v17 = *(double *)(v16 + 296);
      double v18 = *(double *)(v16 + 328);
      double v19 = *(double *)(v16 + 336);
      double v20 = ((1.0 - v15 * 4.0) * 0.025 + v15 * 4.0 * 0.0125)
          * (*(double *)(v16 + 152)
           * (double)a5
           * *(double *)(v16 + 144));
      [*(id *)(v16 + 24) selectedTimeRangeMinimumDuration];
      double v22 = v18 + v21;
      if (v18 + v21 < v19 + v20) {
        double v22 = v19 + v20;
      }
      double v23 = v19 - v21;
      if (v23 >= v18 + v20) {
        double v23 = v18 + v20;
      }
      if (a4) {
        double v24 = v22;
      }
      else {
        double v24 = v19;
      }
      if (a4) {
        double v23 = v18;
      }
      double v25 = fmax(v23, 0.0);
      uint64_t v26 = *(void *)(a1 + 32);
      if (*(double *)(v26 + 280) >= v24) {
        double v27 = v24;
      }
      else {
        double v27 = *(double *)(v26 + 280);
      }
      double v28 = v25 - v23;
      double v29 = v27 - v24;
      if (a4) {
        double v30 = v29;
      }
      else {
        double v30 = v28;
      }
      RCTimeRangeMake();
      uint64_t v33 = *(void *)(a1 + 32);
      double v34 = *(double *)(v33 + 288);
      if (v34 > 0.0 && v34 < *(double *)(v33 + 280))
      {
        if (a3 == -1)
        {
          RCTimeRangeMake();
          if (v25 < v31)
          {
            id v35 = *(double **)(a1 + 32);
            double v27 = v25 + v35[36];
            goto LABEL_44;
          }
        }
        else
        {
          RCTimeRangeMake();
          if (v27 > v32)
          {
            id v35 = *(double **)(a1 + 32);
            double v25 = v27 - v35[36];
LABEL_44:
            double v38 = v17 + v20 + v30;
            [v35 _setSelectedTimeRange:0 updateVisibleTimeRange:0 updateWaveformViewContentSizeAndOffset:1 notifyDelegate:v25 animationDuration:v27];
            uint64_t v39 = *(void *)(a1 + 32);
            double v40 = 1.0;
            if (v15 < 0.125) {
              double v40 = *(double *)(v39 + 144) * 1.1;
            }
            *(double *)(v39 + 144) = v40;
            double v41 = v38 + *(double *)(a1 + 40) * 0.5;
            id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 240));
            [WeakRetained waveformViewController:*(void *)(a1 + 32) didScrubToTime:0 finished:v41];

            uint64_t v12 = 1;
            goto LABEL_5;
          }
        }
      }
      uint64_t v12 = 0;
      if (v25 < v31) {
        goto LABEL_5;
      }
      BOOL v36 = v27 >= v31 && v25 <= v32;
      if (!v36 || v27 > v32) {
        goto LABEL_5;
      }
      id v35 = *(double **)(a1 + 32);
      goto LABEL_44;
    }
  }
LABEL_5:

  return v12;
}

void sub_1000B5E84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v6 = v3;
  id v5 = [v3 superview];

  if (v4 != v5)
  {
    [*(id *)(a1 + 32) addSubview:v6];
    [*(id *)(a1 + 32) sendSubviewToBack:v6];
    [v6 frame];
    [v6 setFrame:];
  }
}

id sub_1000B5F14(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 88);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000B5F98;
  _OWORD v3[3] = &unk_1002231F0;
  v3[4] = *(void *)(a1 + 40);
  return [v1 enumerateObjectsUsingBlock:v3];
}

id sub_1000B5F98(uint64_t a1, void *a2)
{
  return [a2 setAlpha:*(double *)(a1 + 32)];
}

uint64_t sub_1000B63D4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(unsigned char *)(v1 + 105))
  {
    uint64_t v2 = result;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    id v3 = *(id *)(v1 + 88);
    id v4 = [v3 countByEnumeratingWithState:&v55 objects:v60 count:16];
    uint64_t v48 = v2;
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v56;
      while (2)
      {
        for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v56 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = *(void **)(*((void *)&v55 + 1) + 8 * i);
          [v8 setIsPlayback:[*(id *)(v48 + 32) isPlayback]];
          if ([*(id *)(*(void *)(v48 + 32) + 24) isRecording]) {
            BOOL v9 = *(unsigned char *)(*(void *)(v48 + 32) + 230) == 0;
          }
          else {
            BOOL v9 = 0;
          }
          [v8 setShouldOnlyRenderOnScreenTimeLabels:v9];
          [*(id *)(v48 + 32) _frameForTimeMarkerView:v8];
          CGFloat v11 = v10;
          CGFloat v13 = v12;
          CGFloat v15 = v14;
          CGFloat v17 = v16;
          [v8 frame];
          v62.origin.x = v18;
          v62.origin.y = v19;
          v62.size.width = v20;
          v62.size.height = v21;
          v61.origin.x = v11;
          v61.origin.y = v13;
          v61.size.width = v15;
          v61.size.height = v17;
          if (!CGRectEqualToRect(v61, v62))
          {
            uint64_t v2 = v48;
            [*(id *)(v48 + 32) _setTimeMarkerViewsNeedInitialLayout:1];
            goto LABEL_15;
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v55 objects:v60 count:16];
        uint64_t v2 = v48;
        if (v5) {
          continue;
        }
        break;
      }
    }
LABEL_15:

    uint64_t v22 = *(void *)(v2 + 32);
    if (*(unsigned char *)(v22 + 104))
    {
      return (uint64_t)[(id)v22 _layoutTimeMarkerViewsForCurrentlyVisibleTimeRange];
    }
    else
    {
      uint64_t result = (uint64_t)[*(id *)(v22 + 88) count];
      if (result)
      {
        double v23 = &v47 - 2 * (void)[*(id *)(*(void *)(v2 + 32) + 88) count];
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        id v24 = *(id *)(*(void *)(v2 + 32) + 88);
        id v25 = [v24 countByEnumeratingWithState:&v51 objects:v59 count:16];
        if (v25)
        {
          id v26 = v25;
          uint64_t v47 = (uint64_t)&v47;
          unint64_t v27 = 0;
          uint64_t v28 = *(void *)v52;
          id v49 = v24;
          uint64_t v50 = v28;
          do
          {
            for (j = 0; j != v26; j = (char *)j + 1)
            {
              if (*(void *)v52 != v50) {
                objc_enumerationMutation(v49);
              }
              double v30 = *(void **)(*((void *)&v51 + 1) + 8 * (void)j);
              if (v27)
              {
                uint64_t v31 = 0;
                unsigned int v32 = 1;
                while (1)
                {
                  uint64_t v33 = (double *)&v23[2 * v31];
                  double v35 = *v33;
                  double v34 = v33[1];
                  [v30 visibleTimeRange:v47];
                  double v37 = vabdd_f64(v35, v36);
                  [v30 visibleTimeRange];
                  if (v37 <= 0.00000011920929)
                  {
                    *uint64_t v33 = v38;
                    goto LABEL_32;
                  }
                  if (vabdd_f64(v34, v38) <= 0.00000011920929) {
                    break;
                  }
                  uint64_t v31 = v32;
                  BOOL v39 = v27 > v32++;
                  if (!v39)
                  {
                    ++v27;
                    double v40 = &v23[2 * v27];
                    [v30 visibleTimeRange];
                    *double v40 = v41;
                    v40[1] = v42;
                    goto LABEL_32;
                  }
                }
                [v30 visibleTimeRange];
                v23[2 * v31 + 1] = v45;
              }
              else
              {
                [*(id *)(*((void *)&v51 + 1) + 8 * (void)j) visibleTimeRange:v47];
                *double v23 = v43;
                v23[1] = v44;
                unint64_t v27 = 1;
              }
LABEL_32:
              ;
            }
            id v26 = [v49 countByEnumeratingWithState:&v51 objects:v59 count:16];
          }
          while (v26);

          unsigned int v46 = 1;
          uint64_t v2 = v48;
          while (1)
          {
            uint64_t result = RCTimeRangeContainsRange();
            if (result) {
              break;
            }
            BOOL v39 = v27 > v46++;
            if (!v39) {
              return (uint64_t)[*(id *)(v2 + 32) _layoutTimeMarkerViewsForCurrentlyVisibleTimeRange];
            }
          }
        }
        else
        {

          return (uint64_t)[*(id *)(v2 + 32) _layoutTimeMarkerViewsForCurrentlyVisibleTimeRange];
        }
      }
    }
  }
  return result;
}

id sub_1000B69F0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) setContentOffset:*(double *)(a1 + 40) *(double *)(a1 + 48)];
}

void sub_1000B6DD4(uint64_t a1)
{
  [*(id *)(a1 + 32) desiredTimeDeltaForVisibleTimeRange];
  if (([*(id *)(*(void *)(a1 + 32) + 24) isHidden] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 24) isEditingEnabled];
  }
  RCTimeRangeMake();
  double v3 = v2;
  double v5 = v4;
  uint64_t v6 = *(void *)(a1 + 32);
  double v8 = *(double *)(v6 + 296);
  double v7 = *(double *)(v6 + 304);
  BOOL v9 = [*(id *)(v6 + 88) objectAtIndexedSubscript:0];
  [v9 setDebugID:0];
  RCTimeRangeMake();
  [v9 setVisibleTimeRange:];
  [v9 setMarkerClippingRange:v3, v5];
  [*(id *)(a1 + 32) _frameForTimeMarkerView:v9];
  [v9 setFrame:];
  double v10 = [*(id *)(*(void *)(a1 + 32) + 88) objectAtIndexedSubscript:1];

  [v10 setDebugID:1];
  [v10 setVisibleTimeRange:v8, v7];
  [v10 setMarkerClippingRange:v3, v5];
  [*(id *)(a1 + 32) _frameForTimeMarkerView:v10];
  [v10 setFrame:];
  id v11 = [*(id *)(*(void *)(a1 + 32) + 88) objectAtIndexedSubscript:2];

  [v11 setDebugID:2];
  RCTimeRangeMake();
  [v11 setVisibleTimeRange:];
  [v11 setMarkerClippingRange:v3, v5];
  [*(id *)(a1 + 32) _frameForTimeMarkerView:v11];
  [v11 setFrame:];
  *(unsigned char *)(*(void *)(a1 + 32) + 104) = 0;
}

BOOL sub_1000B7268(RCWaveformViewController *self, SEL a2)
{
  return self->_selectedTimeRangeScrubbingEnabled;
}

void sub_1000B7A88()
{
}

void sub_1000B7B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VMSilenceRemover;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1000B804C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B8380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B98D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B98F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000B9900(uint64_t a1)
{
}

void sub_1000B9908(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) recordingWithUniqueID:*(void *)(a1 + 40)];
  uint64_t v2 = +[RCComposition compositionLoadedForSavedRecording:v5];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  double v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t sub_1000B9EC0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  [a2 distanceFromLocation:v5];
  double v8 = v7;
  [v6 distanceFromLocation:*(void *)(a1 + 32)];
  double v10 = v9;

  if (v10 - v8 > 0.0) {
    return -1;
  }
  else {
    return v10 - v8 != 0.0;
  }
}

id sub_1000BA4E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setPreferredSplitBehaviorForViewWidth:1 needsRestyle:*(double *)(a1 + 40)];
}

id sub_1000BA650(uint64_t a1)
{
  return [*(id *)(a1 + 32) _doRestyle];
}

id sub_1000BC7F4(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 40);
  v4.receiver = *(id *)(a1 + 32);
  v4.super_class = (Class)RCMPDetailSlider;
  [super setValue:0 animated:a2];
  return [*(id *)(a1 + 32) layoutIfNeeded];
}

id sub_1000BF438(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _undoCaptureFragment];
}

void sub_1000BFE14(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 captureFailedWithError:*(void *)(a1 + 40)];
}

id sub_1000C0D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  id result = [*(id *)(a1 + 32) recording];
  if ((result & 1) == 0)
  {
    *a5 = 1;
    double v8 = *(void **)(a1 + 40);
    return [v8 _enterTrimMode];
  }
  return result;
}

void sub_1000C0F0C(uint64_t a1)
{
}

id sub_1000C1330(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _undoTrim:0];
}

id sub_1000C156C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _undoTrim:1];
}

id sub_1000C1930(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) endTrimReloadDataSourceBlock];

  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) endTrimReloadDataSourceBlock];
    v3[2]();
  }
  objc_super v4 = *(void **)(a1 + 32);

  return _[v4 setEndTrimReloadDataSourceBlock:0];
}

id sub_1000C1F94(uint64_t a1, void *a2)
{
  return [a2 setFavorite:*(unsigned char *)(a1 + 40) == 0 forRecordingsWithUUIDs:*(void *)(a1 + 32)];
}

void sub_1000C2770(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) recordingWithUniqueID:*(void *)(a1 + 40)];
  double v2 = *(double *)(a1 + 48);
  *(float *)&double v2 = v2;
  [v3 setLayerMix:v2];
  [*(id *)(a1 + 32) saveIfNecessary];
}

id sub_1000C2C84(uint64_t a1)
{
  [*(id *)(a1 + 32) setEditing:0 animated:1];
  double v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);

  return _[v2 _eraseRecordingsWithUUIDs:v3];
}

id sub_1000C2CC8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) deleteRecordingCanceled];
}

id sub_1000C2E40(uint64_t a1)
{
  return [*(id *)(a1 + 32) performClearAllRecentlyDeleted];
}

void sub_1000C31D8(uint64_t a1)
{
  id v2 = +[NSUserDefaults standardUserDefaults];
  [v2 setBool:1 forKey:*(void *)(a1 + 32)];
}

id sub_1000C34F0(uint64_t a1, void *a2)
{
  return [a2 restoreRecordingsWithUUIDs:*(void *)(a1 + 32) isRecover:*(unsigned __int8 *)(a1 + 40) source:0 force:1 collectionViewController:0];
}

id sub_1000C3684(uint64_t a1, void *a2)
{
  return [a2 _deleteRecordingsWithUUIDs:*(void *)(a1 + 32) isRecover:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1000C3860(uint64_t a1)
{
  [*(id *)(a1 + 32) setEditing:0 animated:1];
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 56);

  return [v2 _restoreRecordingsWithUUIDs:v3 isRecover:v4];
}

uint64_t sub_1000C3C68(void *a1)
{
  [*(id *)(a1[4] + 24) deleteUserFolder:a1[5]];
  uint64_t result = a1[6];
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_1000C3CC4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_1000C41B8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1000C41D4(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = [WeakRetained audioPlayer];
  if (v4)
  {
    [*(id *)(a1 + 32) timeIntervalSinceNow];
    double v6 = *(double *)(a1 + 48) - v5 * *(double *)(a1 + 56);
    [v4 playerTime];
    if (v7 - v6 >= *(double *)(a1 + 64))
    {
      [v8 invalidate];
      [WeakRetained _updateNowPlayingInfo];
    }
  }
  else
  {
    [v8 invalidate];
  }
}

void sub_1000C46F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10, id *a11, id *a12)
{
  objc_destroyWeak(v13);
  objc_destroyWeak(v12);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak(a11);
  objc_destroyWeak(a12);
  objc_destroyWeak((id *)(v16 - 112));
  _Unwind_Resume(a1);
}

void sub_1000C47B8()
{
}

uint64_t sub_1000C47C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = [WeakRetained audioPlayer];
  uint64_t v3 = [v2 recordingID];

  if (v3)
  {
    [WeakRetained pauseForUUID:v3];
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 100;
  }

  return v4;
}

uint64_t sub_1000C4834(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = [WeakRetained audioPlayer];
  uint64_t v3 = [v2 recordingID];
  uint64_t v4 = (void *)v3;
  uint64_t v5 = 100;
  if (v2 && v3)
  {
    if ([v2 playing])
    {
      uint64_t v5 = 100;
    }
    else
    {
      [v2 playerTime];
      [WeakRetained playbackForUUID:v4];
      uint64_t v5 = 0;
    }
  }

  return v5;
}

uint64_t sub_1000C48C4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = [WeakRetained audioPlayer];
  uint64_t v3 = [v2 recordingID];

  if (v3)
  {
    [WeakRetained toggleForUUID:v3];
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 100;
  }

  return v4;
}

uint64_t sub_1000C4938(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = [WeakRetained audioPlayer];
  double v6 = [v5 recordingID];

  if (v6)
  {
    [v3 interval];
    [WeakRetained _jumpByIncrement:v6 forUUID:-v7];
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 100;
  }

  return v8;
}

uint64_t sub_1000C49C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = [WeakRetained audioPlayer];
  double v6 = [v5 recordingID];

  if (v6)
  {
    [v3 interval];
    [WeakRetained _jumpByIncrement:v6];
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 100;
  }

  return v7;
}

uint64_t sub_1000C4A54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [WeakRetained audioPlayer];
  uint64_t v4 = [v3 recordingID];

  if (v4)
  {
    uint64_t v5 = [*(id *)(a1 + 32) firstObject];
    [v5 doubleValue];
    [WeakRetained _jumpByIncrement:v4 forUUID:-v6];

    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 100;
  }

  return v7;
}

uint64_t sub_1000C4AE8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [WeakRetained audioPlayer];
  uint64_t v4 = [v3 recordingID];

  if (v4)
  {
    uint64_t v5 = [*(id *)(a1 + 32) firstObject];
    [v5 doubleValue];
    [WeakRetained _jumpByIncrement:v4];

    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 100;
  }

  return v6;
}

uint64_t sub_1000C4B78(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = [WeakRetained audioPlayer];
  uint64_t v6 = [v5 recordingID];

  if (v6)
  {
    [v3 positionTime];
    [WeakRetained _jumpToTargetTime:];
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 100;
  }

  return v7;
}

void sub_1000C4D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C4D30(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained isRecording])
  {
    uint64_t v2 = [WeakRetained delegate];
    unsigned int v3 = [v2 remoteToggleShouldPauseRecording];

    if (v3) {
      [WeakRetained pauseCapturing];
    }
    else {
      [WeakRetained stopCapturing];
    }
  }

  return 0;
}

id sub_1000C4F40(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reconcileAudioStateWithApplicationState];
}

id sub_1000C56C0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _redoCaptureFragmentWithCompositionControllerRedoInfo:*(void *)(a1 + 40)];
}

id sub_1000C5828(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _redoTrim:*(void *)(a1 + 40)];
}

id sub_1000C5990(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _undoTrim:*(void *)(a1 + 40)];
}

id sub_1000C5AE8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _undoCaptureFragment];
}

void sub_1000C63BC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [*(id *)(a1 + 32) currentDuration];
  [v2 recordingDurationUpdated];
}

void sub_1000C648C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [*(id *)(a1 + 32) currentDuration];
  [v2 recordingDurationUpdated:];
}

void sub_1000C655C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [*(id *)(a1 + 32) currentDuration];
  [v2 recordingDurationUpdated:];
}

id sub_1000C7274(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _checkAudioPlayer:*(void *)(a1 + 40)];
}

void sub_1000C7484(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1000C74AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  unsigned int v2 = [*(id *)(a1 + 32) recording];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2)
  {
    [WeakRetained _recordingStarted:v3];
  }
  else
  {
    [WeakRetained _recordingStopped:v3];
    WeakRetained[48] = 0;
  }
  [WeakRetained _reconcileAudioStateWithApplicationState];
}

id sub_1000C7528(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _recordingFailed:*(void *)(a1 + 40) error:a2];
}

void sub_1000C796C(uint64_t a1, void *a2, int a3, float a4)
{
  id v11 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = [WeakRetained delegate];

  if (v8)
  {
    if (a3) {
      uint64_t v10 = 2;
    }
    else {
      uint64_t v10 = 1;
    }
    *(float *)&double v9 = a4;
    [v8 didUpdateToStatus:v10 progress:v11 forRecordingWithUUID:v9];
  }
}

void sub_1000C7D58(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_1000C7D78(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_1000C7DAC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

id sub_1000C9E8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateViewsForLayoutMode:*(void *)(a1 + 40) platterState:*(void *)(a1 + 48)];
}

void sub_1000C9E9C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) systemApertureElementContext];
  uint64_t v3 = [v2 transitionContext];
  id v4 = [v3 fromLayoutMode];

  if (v4 != *(id *)(a1 + 40))
  {
    id v5 = [*(id *)(a1 + 32) delegate];
    [v5 activeLayoutModeDidChangeForPlatterViewController:*(void *)(a1 + 32) previousActiveLayoutMode:v4];
  }
}

void sub_1000CA184(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) activeLayoutMode];
  uint64_t v3 = [*(id *)(a1 + 32) systemApertureElementContext];
  id v4 = v3;
  if (v2 == (id)3)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000CA254;
    _OWORD v5[3] = &unk_100221278;
    v5[4] = *(void *)(a1 + 32);
    [v3 setElementNeedsUpdateWithCoordinatedAnimations:v5];
  }
  else
  {
    [v3 requestTransitionToPreferredLayoutMode];
  }
}

id sub_1000CA254(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000CA2D0;
  v2[3] = &unk_100221278;
  v2[4] = *(void *)(a1 + 32);
  return +[UIView performWithoutAnimation:v2];
}

void sub_1000CA2D0(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateViewsForLayoutMode:[*(id *)(a1 + 32) platterLayoutModeForSystemApertureLayoutMode:[*(id *)(a1 + 32) activeLayoutMode]] platterState:[*(id *)(a1 + 32) platterState]];
  id v2 = [*(id *)(a1 + 32) view];
  [v2 setNeedsLayout];

  id v3 = [*(id *)(a1 + 32) view];
  [v3 layoutIfNeeded];
}

void sub_1000CD910(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CDC8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[RCSSavedRecordingService sharedService];
  uint64_t v5 = *(void *)(a1 + 32);
  id v17 = 0;
  uint64_t v6 = [v4 prepareToExportCompositionAVURL:v5 error:&v17];
  id v7 = v17;
  if (v6)
  {
    uint64_t v8 = +[RCShareableComposition _createTemporaryDirectory];
    id v9 = +[RCShareableComposition _copyResourcesForRecording:*(void *)(a1 + 40) toDirectory:v8];
    (*((void (**)(id, id, void, void))v3 + 2))(v3, v9, 0, 0);

    uint64_t v10 = +[NSFileManager defaultManager];
    [v10 removeItemAtURL:v8 error:0];

    id v16 = 0;
    unsigned __int8 v11 = [v4 endAccessSessionWithToken:v6 error:&v16];
    id v12 = v16;
    if ((v11 & 1) == 0)
    {
      CGFloat v13 = OSLogForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        CGFloat v19 = "-[RCShareableComposition registerAudioFileRepresentationWithItemProvider:error:]_block_invoke";
        __int16 v20 = 2112;
        id v21 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s -- end token access session error = %@", buf, 0x16u);
      }
    }
    id v3 = (id)v8;
  }
  else
  {
    double v14 = OSLogForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      CGFloat v19 = "-[RCShareableComposition registerAudioFileRepresentationWithItemProvider:error:]_block_invoke";
      __int16 v20 = 2112;
      id v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s -- error preparing to export composition = %@", buf, 0x16u);
    }

    (*((void (**)(id, void, void, id))v3 + 2))(v3, 0, 0, v7);
  }

  return 0;
}

void sub_1000CE510(uint64_t a1)
{
  uint64_t v1 = [*(id *)(*(void *)(a1 + 32) + 16) composedAVURL];
  id v2 = (void *)qword_10026A8B0;
  qword_10026A8B0 = v1;
}

void sub_1000CE640(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) recordingWithUniqueID:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000CE84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CE864(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000CE874(uint64_t a1)
{
}

void sub_1000CE87C(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = [a2 copyResourcesForSharingIntoDirectory:*(void *)(a1 + 32)];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
}

void sub_1000CEA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000CEA38(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = [a2 subjectForActivityType:*(void *)(a1 + 32)];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
}

char *sub_1000CF378(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = type metadata accessor for SiriTipViewStyle();
  __chkstk_darwin(v9 - 8);
  swift_unknownObjectWeakInit();
  uint64_t v10 = v4;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unsigned __int8 v11 = (void *)sub_1000D0E2C((unint64_t)&_swiftEmptyArrayStorage);
  }
  else {
    unsigned __int8 v11 = &_swiftEmptySetSingleton;
  }
  *(void *)&v10[OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_cancellables] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_siriTipView;
  static SiriTipViewStyle.automatic.getter();
  id v13 = objc_allocWithZone((Class)type metadata accessor for SiriTipUIView());
  uint64_t v14 = SiriTipUIView.init(style:)();
  SiriTipUIView.loadOnAppear.setter();
  uint64_t v41 = sub_1001292D4();
  sub_10003629C();
  SiriTipUIView.setIntent<A>(intent:)();
  swift_release();
  SiriTipUIView.allowsDismissal.setter();
  *(void *)&v10[v12] = v14;

  v42.receiver = v10;
  v42.super_class = (Class)type metadata accessor for RCSiriTipContainerView();
  CGFloat v15 = [(char *)[super initWithFrame:a1 a2:a2 a3:a3 a4:a4]];
  sub_1000CFB40();
  uint64_t v16 = sub_100028654(&qword_1002649B0);
  double v38 = v37;
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  CGFloat v19 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100028654(&qword_1002649B8);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  double v23 = (char *)v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_siriTipView;
  id v24 = *(void **)&v15[OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_siriTipView];
  swift_getKeyPath();
  id v25 = v24;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();

  swift_release();
  sub_1000D1DB4(&qword_1002649C0, &qword_1002649B8);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  double v40 = &protocol conformance descriptor for Publishers.RemoveDuplicates<A>;
  sub_100027F5C(&qword_1002649C8, &qword_1002649B0);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v26 = sub_100028654(&qword_1002649D0);
  double v38 = v37;
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  double v29 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100028654(&qword_1002649D8);
  v37[1] = v37;
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)v37 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v34 = *(void **)&v15[v39];
  swift_getKeyPath();
  id v35 = v34;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();

  swift_release();
  sub_1000D1DB4(&qword_1002649E0, &qword_1002649D8);
  sub_100032710(&qword_1002649E8, type metadata accessor for CGRect);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100027F5C(&qword_1002649F0, &qword_1002649D0);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();

  swift_release();
  return v15;
}

double sub_1000CFA9C()
{
  [v0 layoutMargins];
  double v2 = v1;
  [v0 layoutMargins];
  double v4 = v2 + v3;
  [v0 bounds];
  CGFloat Width = CGRectGetWidth(v11);
  uint64_t v6 = *(void **)&v0[OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_siriTipView];
  nullsub_9(Width - v4);
  id v7 = v6;
  SiriTipUIView.sizeThatFits(_:)();
  double v9 = v8;

  return v9 + 2.0 + 12.0;
}

void sub_1000CFB40()
{
  double v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_siriTipView;
  [v0 addSubview:*(void *)&v0[OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_siriTipView]];
  [*(id *)&v0[v2] setTranslatesAutoresizingMaskIntoConstraints:0];
  double v3 = self;
  sub_100028654(&qword_100264998);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1001F03B0;
  id v5 = [*(id *)&v1[v2] bottomAnchor];
  id v6 = [v1 layoutMarginsGuide];
  id v7 = [v6 bottomAnchor];

  id v8 = [v5 constraintEqualToAnchor:v7 constant:-12.0];
  *(void *)(v4 + 32) = v8;
  id v9 = [*(id *)&v1[v2] leadingAnchor];
  id v10 = [v1 layoutMarginsGuide];
  id v11 = [v10 leadingAnchor];

  id v12 = [v9 constraintEqualToAnchor:v11];
  *(void *)(v4 + 40) = v12;
  id v13 = [*(id *)&v1[v2] trailingAnchor];
  id v14 = [v1 layoutMarginsGuide];
  id v15 = [v14 trailingAnchor];

  id v16 = [v13 constraintEqualToAnchor:v15];
  *(void *)(v4 + 48) = v16;
  specialized Array._endMutation()();
  sub_100025F4C(0, &qword_1002649A0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v3 activateConstraints:isa];
}

id sub_1000CFDC4@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 isPresented];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000CFDF8(unsigned __int8 *a1, id *a2)
{
  return [*a2 setIsPresented:*a1];
}

void sub_1000CFE0C(unsigned char *a1)
{
  if ((*a1 & 1) == 0)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v2 = (void *)Strong;
      double v3 = (void *)swift_unknownObjectWeakLoadStrong();

      if (v3)
      {
        [v3 didDismissSiriTipView];
        swift_unknownObjectRelease();
      }
    }
  }
}

id sub_1000CFE94@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 bounds];
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

id sub_1000CFECC(double *a1, id *a2)
{
  return [*a2 setBounds:*a1 a1[1], a1[2], a1[3]];
}

void sub_1000CFEE4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    double v1 = (void *)Strong;
    uint64_t v2 = (void *)swift_unknownObjectWeakLoadStrong();

    if (v2)
    {
      [v2 siriTipViewBoundsDidChange];
      swift_unknownObjectRelease();
    }
  }
}

id sub_1000CFF64()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCSiriTipContainerView();
  return [super dealloc];
}

uint64_t variable initialization expression of AudioPlayer.playing()
{
  return 0;
}

uint64_t variable initialization expression of AudioPlayer.delegate()
{
  return 0;
}

uint64_t variable initialization expression of AudioPlayer.audioReadingQueue()
{
  return sub_1000D0040();
}

uint64_t variable initialization expression of AudioPlayer.seekSyncDispatchQueue()
{
  return sub_1000D0040();
}

uint64_t sub_1000D0040()
{
  sub_100025F4C(0, (unint64_t *)&qword_100264660);
  uint64_t v0 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for DispatchQoS.QoSClass();
  __chkstk_darwin(v1);
  (*(void (**)(char *, void))(v3 + 104))((char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for DispatchQoS.QoSClass.userInitiated(_:));
  DispatchQoS.init(qosClass:relativePriority:)();
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  v9[1] = &_swiftEmptyArrayStorage;
  sub_100032710(&qword_100264668, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100028654(&qword_100264670);
  sub_100027F5C(&qword_100264678, &qword_100264670);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v5);
  (*(void (**)(char *, void))(v7 + 104))((char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:));
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t variable initialization expression of VMPlayer.delegate()
{
  return 0;
}

float variable initialization expression of AudioPlayer.rate()
{
  return 1.0;
}

void *variable initialization expression of AudioPlayer.cancellables()
{
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) == 0 || !_CocoaArrayWrapper.endIndex.getter()) {
    return &_swiftEmptySetSingleton;
  }
  return (void *)sub_1000D0E2C((unint64_t)&_swiftEmptyArrayStorage);
}

_UNKNOWN **variable initialization expression of AudioPlayer.trackVolumes()
{
  return &off_1002236F8;
}

uint64_t sub_1000D038C(uint64_t a1, uint64_t a2)
{
  return sub_1000D0658(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000D03A4(uint64_t a1, uint64_t a2)
{
  return sub_1000D0658(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

void *sub_1000D03C4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1000D03D4(void *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *sub_1000D03E0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_1000D03F0(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000D0400@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000D042C(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000D04A4(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1000D0524@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

NSNumber sub_1000D0568()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_1000D0584(uint64_t a1, uint64_t a2)
{
  uint64_t result = static CGFloat._forceBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t sub_1000D05D8(uint64_t a1, uint64_t a2)
{
  char v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t sub_1000D0630@<X0>(void *a1@<X8>)
{
  uint64_t result = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = v3;
  return result;
}

uint64_t sub_1000D0658(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000D069C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000D06F0()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

NSNumber sub_1000D0764()
{
  return Int._bridgeToObjectiveC()();
}

uint64_t sub_1000D0780(uint64_t a1, uint64_t a2)
{
  uint64_t result = static Int._forceBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t sub_1000D07D4(uint64_t a1, uint64_t a2)
{
  char v3 = static Int._conditionallyBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t sub_1000D082C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Int._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

Swift::Int sub_1000D0854()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000D089C()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000D08C8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000D0910()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL sub_1000D099C(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000D09B0()
{
  sub_1000D11E4((unint64_t *)&qword_100264B30, type metadata accessor for Key);
  sub_1000D11E4(&qword_100264B38, type metadata accessor for Key);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000D0A6C()
{
  sub_1000D11E4(&qword_100264B20, type metadata accessor for AttributeName);
  sub_1000D11E4(&qword_100264B28, type metadata accessor for AttributeName);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000D0B28@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000D0B70()
{
  sub_1000D11E4(&qword_100264B10, type metadata accessor for TraitKey);
  sub_1000D11E4(&qword_100264B18, type metadata accessor for TraitKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

double sub_1000D0C2C@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

uint64_t sub_1000D0C38()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000D0D00()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_1000D0DBC()
{
  return Double.hashValue.getter(*v0);
}

void sub_1000D0DC4()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t sub_1000D0DF8()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t sub_1000D0E08()
{
  return Int.hashValue.getter(*v0);
}

uint64_t sub_1000D0E10()
{
  return static Hasher._hash(seed:_:)();
}

BOOL sub_1000D0E18(double *a1, double *a2)
{
  return *a1 == *a2;
}

unint64_t sub_1000D0E2C(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    double result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100028654(&qword_1002649F8);
      double result = static _SetStorage.allocate(capacity:)();
      uint64_t v3 = (unsigned char *)result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      double result = swift_bridgeObjectRelease();
      if (!v5) {
        return (unint64_t)v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return (unint64_t)v3;
  }
LABEL_9:
  unint64_t v7 = 0;
  id v8 = v3 + 56;
  unint64_t v21 = v1 & 0xC000000000000001;
  unint64_t v19 = v1 + 32;
  uint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8;
  while (v21)
  {
    double result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v9 = result;
    BOOL v10 = __OFADD__(v7++, 1);
    if (v10) {
      goto LABEL_25;
    }
LABEL_18:
    type metadata accessor for AnyCancellable();
    sub_1000D11E4(&qword_100264A00, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
    double result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v11 = -1 << v3[32];
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      uint64_t v16 = ~v11;
      sub_1000D11E4(&qword_100264A08, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
      while (1)
      {
        double result = dispatch thunk of static Equatable.== infix(_:_:)();
        if (result) {
          break;
        }
        unint64_t v12 = (v12 + 1) & v16;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          goto LABEL_22;
        }
      }
      double result = swift_release();
    }
    else
    {
LABEL_22:
      *(void *)&v8[8 * v13] = v15 | v14;
      *(void *)(*((void *)v3 + 6) + 8 * v12) = v9;
      uint64_t v17 = *((void *)v3 + 2);
      BOOL v10 = __OFADD__(v17, 1);
      uint64_t v18 = v17 + 1;
      if (v10) {
        goto LABEL_26;
      }
      *((void *)v3 + 2) = v18;
    }
    if (v7 == v5) {
      return (unint64_t)v3;
    }
  }
  if (v7 >= *(void *)(v20 + 16)) {
    goto LABEL_27;
  }
  unint64_t v9 = *(void *)(v19 + 8 * v7);
  double result = swift_retain();
  BOOL v10 = __OFADD__(v7++, 1);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RCSiriTipContainerView()
{
  return self;
}

void type metadata accessor for UIBackgroundTaskIdentifier(uint64_t a1)
{
}

void type metadata accessor for UIDeviceOrientation(uint64_t a1)
{
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

uint64_t sub_1000D1154()
{
  return sub_1000D11E4(&qword_1002648C8, type metadata accessor for UIBackgroundTaskIdentifier);
}

uint64_t sub_1000D119C()
{
  return sub_1000D11E4(&qword_1002648D0, type metadata accessor for UIBackgroundTaskIdentifier);
}

uint64_t sub_1000D11E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D122C()
{
  return sub_1000D11E4(&qword_1002648D8, type metadata accessor for UIBackgroundTaskIdentifier);
}

void sub_1000D1274()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SiriTipViewStyle();
  __chkstk_darwin(v2 - 8);
  swift_unknownObjectWeakInit();
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v3 = (void *)sub_1000D0E2C((unint64_t)&_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v3 = &_swiftEmptySetSingleton;
  }
  *(void *)&v0[OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_cancellables] = v3;
  uint64_t v4 = OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_siriTipView;
  static SiriTipViewStyle.automatic.getter();
  id v5 = objc_allocWithZone((Class)type metadata accessor for SiriTipUIView());
  uint64_t v6 = SiriTipUIView.init(style:)();
  SiriTipUIView.loadOnAppear.setter();
  sub_1001292D4();
  sub_10003629C();
  SiriTipUIView.setIntent<A>(intent:)();
  swift_release();
  SiriTipUIView.allowsDismissal.setter();
  *(void *)&v1[v4] = v6;

  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *sub_1000D1410(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Transcriber.TranscriptionOption();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  double v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100028654(&qword_100264920);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    id v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1000D11E4(&qword_100264928, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1000D11E4(&qword_100264930, (void (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          id v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        id v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_1000D1728(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Transcriber.ReportingOption();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  double v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100028654(&qword_100264908);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    id v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1000D11E4(&qword_100264910, (void (*)(uint64_t))&type metadata accessor for Transcriber.ReportingOption);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1000D11E4(&qword_100264918, (void (*)(uint64_t))&type metadata accessor for Transcriber.ReportingOption);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          id v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        id v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_1000D1A40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TranscriptionResultAttributeOption();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  double v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100028654(&qword_1002648F0);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    id v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1000D11E4(&qword_1002648F8, (void (*)(uint64_t))&type metadata accessor for TranscriptionResultAttributeOption);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1000D11E4(&qword_100264900, (void (*)(uint64_t))&type metadata accessor for TranscriptionResultAttributeOption);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          id v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        id v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

const char *sub_1000D1D5C()
{
  return "isPresented";
}

uint64_t sub_1000D1D68()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000D1DA0(unsigned char *a1)
{
}

const char *sub_1000D1DA8()
{
  return "bounds";
}

uint64_t sub_1000D1DB4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100027F14(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void sub_1000D1E0C()
{
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for Weight(uint64_t a1)
{
}

void type metadata accessor for TraitKey(uint64_t a1)
{
}

void type metadata accessor for AttributeName(uint64_t a1)
{
}

void type metadata accessor for CMFormatDescription(uint64_t a1)
{
}

__n128 sub_1000D1E8C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1000D1EA0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000D1EC0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CMTimeRange(uint64_t a1)
{
}

__n128 initializeWithTake for AVAssetReaderSequence(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for RCFolderType(uint64_t a1)
{
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for TimedTextRange(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TimedTextRange(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for RCTrackState(uint64_t a1)
{
}

void type metadata accessor for CMSampleBuffer(uint64_t a1)
{
}

uint64_t sub_1000D1FC8()
{
  return sub_1000D11E4(&qword_100264A90, type metadata accessor for Key);
}

uint64_t sub_1000D2010()
{
  return sub_1000D11E4(&qword_100264A98, type metadata accessor for Key);
}

uint64_t sub_1000D2058()
{
  return sub_1000D11E4(&qword_100264AA0, type metadata accessor for RCTrackState);
}

uint64_t sub_1000D20A0()
{
  return sub_1000D11E4(&qword_100264AA8, type metadata accessor for AttributeName);
}

uint64_t sub_1000D20E8()
{
  return sub_1000D11E4(&qword_100264AB0, type metadata accessor for AttributeName);
}

uint64_t sub_1000D2130()
{
  return sub_1000D11E4(&qword_100264AB8, type metadata accessor for TraitKey);
}

uint64_t sub_1000D2178()
{
  return sub_1000D11E4(&qword_100264AC0, type metadata accessor for TraitKey);
}

uint64_t sub_1000D21C0()
{
  return sub_1000D11E4(&qword_100264AC8, type metadata accessor for TraitKey);
}

uint64_t sub_1000D2208()
{
  return sub_1000D11E4(&qword_100264AD0, type metadata accessor for Weight);
}

uint64_t sub_1000D2250()
{
  return sub_1000D11E4(&qword_100264AD8, type metadata accessor for Weight);
}

uint64_t sub_1000D2298()
{
  return sub_1000D11E4(&qword_100264AE0, type metadata accessor for Weight);
}

uint64_t sub_1000D22E0()
{
  return sub_1000D11E4(&qword_100264AE8, type metadata accessor for AttributeName);
}

uint64_t sub_1000D2328()
{
  return sub_1000D11E4(&qword_100264AF0, type metadata accessor for Key);
}

unint64_t sub_1000D2370()
{
  unint64_t result = qword_100264B08;
  if (!qword_100264B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100264B08);
  }
  return result;
}

void type metadata accessor for CMBlockBuffer(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for RCMoreButtonHelperController(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RCMoreButtonHelperController(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

__n128 sub_1000D2428(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1000D243C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000D245C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CMTime(uint64_t a1)
{
}

void type metadata accessor for CMTimeFlags(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for TranscriptTextDiffCalculator()
{
  return &type metadata for TranscriptTextDiffCalculator;
}

BOOL sub_1000D24EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000D2500()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000D2548()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000D2574()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000D25B8()
{
  int v1 = *(unsigned __int8 *)(v0 + 129);
  if (v1 == 5)
  {
    uint64_t v2 = *(void *)(v0 + 40);
    uint64_t v3 = *(void *)(v0 + 48);
    uint64_t v16 = *(void *)(v0 + 64);
    char v17 = *(unsigned char *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v7 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 104);
    char v10 = *(unsigned char *)(v0 + 113);
    char v11 = *(unsigned char *)(v0 + 114);
    uint64_t v12 = *(void *)(v0 + 120);
    char v13 = *(unsigned char *)(v0 + 128);
    uint64_t v21 = *(void *)(v0 + 32);
    uint64_t v22 = v2;
    uint64_t v23 = v3;
    unsigned __int8 v14 = *(unsigned char *)(v0 + 56);
    unsigned __int8 v24 = v14;
    uint64_t v25 = v16;
    char v26 = v17;
    char v27 = 0;
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 40);
    uint64_t v3 = *(void *)(v0 + 48);
    if (v1 == 4)
    {
      uint64_t v4 = *(void *)(v0 + 64);
      char v5 = *(unsigned char *)(v0 + 72);
      uint64_t v6 = *(void *)(v0 + 80);
      uint64_t v7 = *(void *)(v0 + 88);
      uint64_t v8 = *(void *)(v0 + 96);
      uint64_t v9 = *(void *)(v0 + 104);
      char v10 = *(unsigned char *)(v0 + 113);
      char v11 = *(unsigned char *)(v0 + 114);
      uint64_t v12 = *(void *)(v0 + 120);
      char v13 = *(unsigned char *)(v0 + 128);
      uint64_t v21 = *(void *)(v0 + 32);
      uint64_t v22 = v2;
      uint64_t v23 = v3;
      unsigned __int8 v14 = *(unsigned char *)(v0 + 56);
      unsigned __int8 v24 = v14;
      uint64_t v25 = v4;
      char v26 = v5;
      char v15 = 1;
    }
    else
    {
      uint64_t v18 = *(void *)(v0 + 64);
      char v19 = *(unsigned char *)(v0 + 72);
      uint64_t v6 = *(void *)(v0 + 80);
      uint64_t v7 = *(void *)(v0 + 88);
      uint64_t v8 = *(void *)(v0 + 96);
      uint64_t v9 = *(void *)(v0 + 104);
      char v10 = *(unsigned char *)(v0 + 113);
      char v11 = *(unsigned char *)(v0 + 114);
      uint64_t v12 = *(void *)(v0 + 120);
      char v13 = *(unsigned char *)(v0 + 128);
      uint64_t v21 = *(void *)(v0 + 32);
      uint64_t v22 = v2;
      uint64_t v23 = v3;
      unsigned __int8 v14 = *(unsigned char *)(v0 + 56);
      unsigned __int8 v24 = v14;
      uint64_t v25 = v18;
      char v26 = v19;
      char v15 = 2;
    }
    char v27 = v15;
  }
  uint64_t v28 = v6;
  uint64_t v29 = v7;
  uint64_t v30 = v8;
  uint64_t v31 = v9;
  unsigned __int8 v32 = *(unsigned char *)(v0 + 112);
  char v33 = v10;
  char v34 = v11;
  uint64_t v35 = v12;
  char v36 = v13;
  swift_bridgeObjectRetain();
  sub_1000181E4(v2, v3, v14);
  sub_1000181FC(v6, v7, v8, v9, v32);
  return sub_100017F1C((uint64_t)&v21);
}

uint64_t sub_1000D273C()
{
  sub_10000C4A4(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 104);
  unsigned __int8 v7 = *(unsigned char *)(v0 + 56);
  unsigned __int8 v8 = *(unsigned char *)(v0 + 112);
  swift_bridgeObjectRelease();
  sub_1000180E0(v1, v2, v7);
  sub_1000180F8(v3, v4, v5, v6, v8);

  return swift_deallocClassInstance();
}

uint64_t getEnumTagSinglePayload for TranscriptViewConfigurationStyle(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB)
  {
    unsigned int v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 5;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 5;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000D2890);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 5;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 4) {
    unsigned int v8 = v7 - 3;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 3) {
    return v8 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for TranscriptViewConfigurationStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFB) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v7 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1000D2978);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t sub_1000D29A0(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 4) {
    return v1 - 3;
  }
  else {
    return 0;
  }
}

unsigned char *sub_1000D29B4(unsigned char *result, int a2)
{
  if (a2) {
    *__n128 result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewConfigurationStyle()
{
  return &type metadata for TranscriptViewConfigurationStyle;
}

uint64_t sub_1000D29D4(uint64_t a1, char a2)
{
  unsigned int v3 = v2;
  uint64_t v5 = *v2;
  sub_100028654(&qword_100267C40);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    double v37 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v39 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v38 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v18 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v19 = v18 | (v13 << 6);
      }
      else
      {
        int64_t v20 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v20 >= v38) {
          goto LABEL_34;
        }
        unint64_t v21 = v39[v20];
        ++v13;
        if (!v21)
        {
          int64_t v13 = v20 + 1;
          if (v20 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v21 = v39[v13];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v38)
            {
LABEL_34:
              swift_release();
              unsigned int v3 = v37;
              if (v40)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v39[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v13 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v21 = v39[v13];
                ++v22;
                if (v21) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v22;
          }
        }
LABEL_21:
        unint64_t v10 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v13 << 6);
      }
      uint64_t v23 = *(void **)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v24 = *(void *)(v5 + 56) + 40 * v19;
      if (v40)
      {
        long long v25 = *(_OWORD *)v24;
        long long v26 = *(_OWORD *)(v24 + 16);
        uint64_t v43 = *(void *)(v24 + 32);
        long long v41 = v25;
        long long v42 = v26;
      }
      else
      {
        sub_1000D39B0(v24, (uint64_t)&v41);
        id v27 = v23;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v28 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v30 = v28 & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v11 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v30) & ~*(void *)(v11 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v11 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v14 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v23;
      uint64_t v15 = *(void *)(v7 + 56) + 40 * v14;
      long long v16 = v41;
      long long v17 = v42;
      *(void *)(v15 + 32) = v43;
      *(_OWORD *)uint64_t v15 = v16;
      *(_OWORD *)(v15 + 16) = v17;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D2D10(uint64_t a1, char a2)
{
  return sub_1000D2D28(a1, a2, &qword_100264D98);
}

uint64_t sub_1000D2D1C(uint64_t a1, char a2)
{
  return sub_1000D2D28(a1, a2, &qword_100264D90);
}

uint64_t sub_1000D2D28(uint64_t a1, char a2, uint64_t *a3)
{
  int v4 = v3;
  uint64_t v6 = *v3;
  sub_100028654(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v4 = v8;
  return result;
}

uint64_t sub_1000D303C(uint64_t a1, char a2)
{
  unsigned int v3 = v2;
  uint64_t v5 = *v2;
  sub_100028654(&qword_100264DA8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v36 = a2;
    int64_t v35 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v33 = -1 << v10;
    uint64_t v34 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v36 & 1) == 0)
              {
                uint64_t result = swift_release();
                unsigned int v3 = v35;
                goto LABEL_38;
              }
              if (v34 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v33;
              }
              unsigned int v3 = v35;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
      uint64_t v23 = *(void *)(v5 + 56) + 32 * v18;
      uint64_t v24 = *(void *)(v23 + 24);
      long long v37 = *(_OWORD *)(v23 + 8);
      uint64_t v25 = *(void *)v23;
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v14 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v22;
      uint64_t v16 = *(void *)(v7 + 56) + 32 * v15;
      *(void *)uint64_t v16 = v25;
      *(_OWORD *)(v16 + 8) = v37;
      *(void *)(v16 + 24) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D3300(uint64_t a1, char a2, double a3, double a4, double a5, double a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_100168238(a1);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= result && (a2 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= result && (a2 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000D37B8();
LABEL_7:
    uint64_t v22 = (void *)*v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = (double *)(v22[7] + 32 * v16);
      *uint64_t v23 = a3;
      v23[1] = a4;
      v23[2] = a5;
      v23[3] = a6;
      return result;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    *(void *)(v22[6] + 8 * v16) = a1;
    uint64_t v25 = (double *)(v22[7] + 32 * v16);
    *uint64_t v25 = a3;
    v25[1] = a4;
    v25[2] = a5;
    void v25[3] = a6;
    uint64_t v26 = v22[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (!v27)
    {
      v22[2] = v28;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000D303C(result, a2 & 1);
  uint64_t result = sub_100168238(a1);
  if ((v20 & 1) == (v24 & 1))
  {
    unint64_t v16 = result;
    uint64_t v22 = (void *)*v7;
    if (v20) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id sub_1000D344C()
{
  unsigned int v1 = v0;
  sub_100028654(&qword_100267C40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *unsigned int v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 40 * v15;
    sub_1000D39B0(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v25);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v19 = *(void *)(v4 + 56) + v18;
    uint64_t v20 = v26;
    long long v21 = v25[1];
    *(_OWORD *)uint64_t v19 = v25[0];
    *(_OWORD *)(v19 + 16) = v21;
    *(void *)(v19 + 32) = v20;
    id result = v17;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D3624()
{
  unsigned int v1 = v0;
  sub_100028654(&qword_100264D88);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *unsigned int v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v22 = __clz(__rbit64(v20));
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = v22 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v17);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D37B8()
{
  unsigned int v1 = v0;
  sub_100028654(&qword_100264DA8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *unsigned int v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v26 = __clz(__rbit64(v24));
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = v26 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    int64_t v19 = (long long *)(*(void *)(v2 + 56) + v18);
    long long v20 = *v19;
    long long v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v22 = (_OWORD *)(*(void *)(v4 + 56) + v18);
    *unint64_t v22 = v20;
    v22[1] = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000D3954(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000D39B0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t getEnumTagSinglePayload for TranscriptViewConfigurationStyle.EmptyStateType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TranscriptViewConfigurationStyle.EmptyStateType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *id result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D3B80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_1000D3BA8(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000D3BB0(unsigned char *result, char a2)
{
  *id result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewConfigurationStyle.EmptyStateType()
{
  return &type metadata for TranscriptViewConfigurationStyle.EmptyStateType;
}

unint64_t sub_1000D3BCC()
{
  unint64_t result = qword_100264DA0;
  if (!qword_100264DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100264DA0);
  }
  return result;
}

void *sub_1000D3C20(char a1)
{
  unint64_t result = sub_10001510C((void *)(v1 + 16), *(void *)(v1 + 40));
  if (*(unsigned char *)(*(void *)result + 32))
  {
    unint64_t result = sub_10001510C((void *)(v1 + 16), *(void *)(v1 + 40));
    if ((*(unsigned char *)(*(void *)result + 51) & 1) == 0)
    {
      unint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
      if (result)
      {
        unsigned int v4 = &selRef_collapseTranscriptView;
        if (a1) {
          unsigned int v4 = &selRef_expandTranscriptView;
        }
        [result *v4];
        return (void *)swift_unknownObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_1000D3CD0()
{
  sub_10002F48C(v0 + 16);
  swift_unknownObjectRelease();
  sub_10000C4A4(v0 + 64);

  return swift_deallocClassInstance();
}

unint64_t sub_1000D3D18(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x100000000) != 0) {
    return 0xD00000000000001FLL;
  }
  _StringGuts.grow(_:)(56);
  v2._countAndFlagsBits = 0xD000000000000023;
  v2._object = (void *)0x80000001001EA9D0;
  String.append(_:)(v2);
  Double.write<A>(to:)();
  v3._object = (void *)0x80000001001EAA00;
  v3._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_1000D3E20()
{
  return sub_1000D3D18(*(void *)v0, *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32));
}

uint64_t sub_1000D3E44()
{
  return LocalizedError.failureReason.getter();
}

uint64_t sub_1000D3E5C()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t sub_1000D3E74()
{
  return LocalizedError.helpAnchor.getter();
}

void sub_1000D3E9C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  if (v1)
  {
    Swift::String v2 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer);
    swift_retain();
    [v2 currentSampleTime];
    if ((~*(void *)&v3 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        if (v3 < 9.22337204e18)
        {
          if (*(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime) >= ((uint64_t)v3 & ~((uint64_t)v3 >> 63))) {
            uint64_t v4 = (uint64_t)v3 & ~((uint64_t)v3 >> 63);
          }
          else {
            uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime);
          }
          uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_silenceRemover);
          if (!v5) {
            goto LABEL_11;
          }
          unint64_t v6 = (unint64_t)[v5 samplesRemoved];
          if ((v6 & 0x8000000000000000) == 0)
          {
            if (!__OFADD__(v4, v6))
            {
LABEL_11:
              id v7 = v2;
              [v7 sampleRate];

              swift_release();
              return;
            }
            goto LABEL_17;
          }
LABEL_16:
          __break(1u);
LABEL_17:
          __break(1u);
          return;
        }
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
}

uint64_t sub_1000D3FB4()
{
  if (*(void *)(v0 + 96))
  {
    uint64_t v1 = *(void *)(v0 + 96);
  }
  else
  {
    uint64_t v1 = sub_1000D4014(v0);
    *(void *)(v0 + 96) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1000D4014(uint64_t a1)
{
  uint64_t v16 = a1;
  uint64_t v18 = &off_1002236D0;
  sub_100028654(&qword_100265340);
  swift_allocObject();
  uint64_t v17 = CurrentValueSubject.init(_:)();
  uint64_t v15 = sub_100028654(&qword_100265348);
  uint64_t v1 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  double v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (_UNKNOWN **)v17;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  sub_100006004();
  id v19 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v8 = sub_100028654(&qword_100265350);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  sub_100027F5C(&qword_100265358, &qword_100265340);
  sub_100032758(&qword_100265360, (void (*)(uint64_t))sub_100006004);
  Publisher.debounce<A>(for:scheduler:options:)();
  sub_1000D8064((uint64_t)v10);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_allocObject();
  swift_weakInit();
  sub_100027F5C(&qword_100265368, &qword_100265348);
  uint64_t v12 = v15;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v12);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  return v17;
}

uint64_t sub_1000D43B8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000D3E9C();
    sub_1000D4988(1, 0, 0, v1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000D4420(uint64_t a1)
{
  if (*(void *)(v1 + 56))
  {
    if (*(unsigned char *)(v1 + 16) == 1)
    {
      sub_1000D6570();
      *(unsigned char *)(v1 + 16) = 0;
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        [Strong audioPlayerIsPlayingChanged:0];
        swift_unknownObjectRelease();
      }
    }
  }
  uint64_t v4 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = a1;
  uint64_t v18 = *(void *)(v1 + 40);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  swift_retain();
  aBlock[4] = nullsub_9;
  aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000D4744;
  aBlock[3] = &unk_100224500;
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v17 = v15;
  uint64_t v7 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  v15[1] = v15;
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int64_t v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = _swiftEmptyArrayStorage;
  sub_100032758((unint64_t *)&qword_1002671D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100028654(&qword_100265338);
  sub_100027F5C((unint64_t *)&qword_1002671E0, &qword_100265338);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v6);
  swift_release();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v16);
  return swift_release();
}

uint64_t sub_1000D4744(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

void sub_1000D4788(double a1)
{
  uint64_t v2 = *(void *)(v1 + 56);
  if (v2)
  {
    double v3 = *(double *)(*(void *)(v2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_assetReader) + 24) * a1;
    if ((~*(void *)&v3 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        if (v3 < 9.22337204e18)
        {
          if (*(void *)(v2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime) == (uint64_t)v3) {
            return;
          }
          *(void *)(v2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime) = (uint64_t)v3;
          *(void *)(v2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_seekPosition) = -1;
          uint64_t v4 = *(NSObject **)(v1 + 48);
          uint64_t v5 = swift_allocObject();
          *(void *)(v5 + 16) = sub_1000D8008;
          *(void *)(v5 + 24) = v2;
          void v8[4] = sub_1000D838C;
          void v8[5] = v5;
          v8[0] = _NSConcreteStackBlock;
          v8[1] = 1107296256;
          void v8[2] = sub_1000D4960;
          v8[3] = &unk_1002244B0;
          uint64_t v6 = _Block_copy(v8);
          swift_retain_n();
          swift_retain();
          swift_release();
          dispatch_sync(v4, v6);
          _Block_release(v6);
          LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((v4 & 1) == 0)
          {
            sub_1000D3E9C();
            sub_1000D4988(0, 0, 0, v7);
            swift_release_n();
            return;
          }
LABEL_12:
          __break(1u);
          return;
        }
LABEL_11:
        __break(1u);
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
}

uint64_t sub_1000D4960(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_1000D4988(char a1, void (*a2)(void), uint64_t a3, double a4)
{
  uint64_t v7 = *(void *)(v4 + 56);
  if (v7)
  {
    uint64_t v8 = v4;
    if (a4 < 0.0) {
      double v10 = 0.0;
    }
    else {
      double v10 = a4;
    }
    uint64_t v11 = *(void *)(v7 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_assetReader);
    swift_retain();
    double v12 = sub_1000DC5B4();
    if (v12 >= v10) {
      double v12 = v10;
    }
    double v13 = *(double *)(v11 + 24) * v12;
    if ((~*(void *)&v13 & 0x7FF0000000000000) != 0)
    {
      if (v13 > -9.22337204e18)
      {
        if (v13 < 9.22337204e18)
        {
          uint64_t v14 = *(void *)(v7 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime);
          BOOL v15 = __OFSUB__(v14, 1);
          uint64_t v16 = v14 - 1;
          if (!v15)
          {
            if (v16 >= (uint64_t)v13) {
              uint64_t v17 = (uint64_t)v13;
            }
            else {
              uint64_t v17 = v16;
            }
            OS_dispatch_queue.sync<A>(execute:)();
            if ((a1 & 1) != 0
              || (void **)v17 != aBlock
              || *(void *)(v7 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_seekPosition) == -1)
            {
              *(void *)(v7 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_seekPosition) = v17;
              uint64_t v40 = *(void *)(v8 + 40);
              uint64_t v26 = swift_allocObject();
              *(void *)(v26 + 16) = v17;
              *(void *)(v26 + 24) = v7;
              *(void *)(v26 + 32) = v8;
              *(unsigned char *)(v26 + 40) = a1 & 1;
              *(void *)(v26 + 48) = a2;
              *(void *)(v26 + 56) = a3;
              unsigned int v46 = sub_1000D8130;
              uint64_t v47 = v26;
              aBlock = _NSConcreteStackBlock;
              uint64_t v43 = 1107296256;
              uint64_t v44 = sub_1000D4744;
              uint64_t v45 = &unk_100224550;
              BOOL v27 = _Block_copy(&aBlock);
              uint64_t v38 = type metadata accessor for DispatchQoS();
              uint64_t v39 = &v35;
              uint64_t v28 = *(void *)(v38 - 8);
              __chkstk_darwin(v38);
              unint64_t v30 = (char *)&v35 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
              swift_retain();
              sub_1000D8144((uint64_t)a2);
              swift_retain();
              static DispatchQoS.unspecified.getter();
              uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
              long long v37 = &v35;
              uint64_t v32 = *(void *)(v31 - 8);
              __chkstk_darwin(v31);
              uint64_t v34 = (char *)&v35 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
              long long v41 = &_swiftEmptyArrayStorage;
              sub_100032758((unint64_t *)&qword_1002671D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
              sub_100028654(&qword_100265338);
              sub_100027F5C((unint64_t *)&qword_1002671E0, &qword_100265338);
              dispatch thunk of SetAlgebra.init<A>(_:)();
              OS_dispatch_queue.async(group:qos:flags:execute:)();
              _Block_release(v27);
              swift_release();
              (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
              (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v38);
            }
            else if (a2)
            {
              uint64_t v40 = *(void *)(v8 + 40);
              uint64_t v18 = swift_allocObject();
              *(void *)(v18 + 16) = a2;
              *(void *)(v18 + 24) = a3;
              unsigned int v46 = sub_1000D818C;
              uint64_t v47 = v18;
              aBlock = _NSConcreteStackBlock;
              uint64_t v43 = 1107296256;
              uint64_t v44 = sub_1000D4744;
              uint64_t v45 = &unk_1002245A0;
              char v36 = _Block_copy(&aBlock);
              uint64_t v38 = type metadata accessor for DispatchQoS();
              uint64_t v39 = &v35;
              long long v37 = *(uint64_t **)(v38 - 8);
              __chkstk_darwin(v38);
              long long v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
              swift_retain_n();
              static DispatchQoS.unspecified.getter();
              uint64_t v21 = type metadata accessor for DispatchWorkItemFlags();
              uint64_t v35 = (uint64_t)&v35;
              uint64_t v22 = *(void *)(v21 - 8);
              __chkstk_darwin(v21);
              unint64_t v24 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
              long long v41 = &_swiftEmptyArrayStorage;
              sub_100032758((unint64_t *)&qword_1002671D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
              sub_100028654(&qword_100265338);
              sub_100027F5C((unint64_t *)&qword_1002671E0, &qword_100265338);
              dispatch thunk of SetAlgebra.init<A>(_:)();
              int64_t v25 = v36;
              OS_dispatch_queue.async(group:qos:flags:execute:)();
              _Block_release(v25);
              sub_1000D8194((uint64_t)a2);
              swift_release();
              (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
              ((void (*)(char *, uint64_t))v37[1])(v20, v38);
            }
            swift_release();
            return;
          }
LABEL_28:
          __break(1u);
          return;
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_27;
  }
  if (a2) {
    a2(0);
  }
}

uint64_t sub_1000D5030(uint64_t a1, uint64_t a2)
{
  sub_100006004();
  uint64_t v17 = static OS_dispatch_queue.main.getter();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  aBlock[4] = sub_1000D81A4;
  aBlock[5] = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000D4744;
  aBlock[3] = &unk_1002245F0;
  uint64_t v5 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.unspecified.getter();
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  double v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_100032758((unint64_t *)&qword_1002671D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100028654(&qword_100265338);
  sub_100027F5C((unint64_t *)&qword_1002671E0, &qword_100265338);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v14 = (void *)v17;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v5);

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_1000D52F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_seekPosition;
  if (*(void *)(a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_seekPosition) != a1
    || !*(void *)(a3 + 56)
    || (swift_retain(),
        swift_retain(),
        char v13 = static UUID.== infix(_:_:)(),
        swift_release(),
        swift_release(),
        (v13 & 1) == 0))
  {
    char v15 = 0;
    if (!a5) {
      return;
    }
    goto LABEL_13;
  }
  if ((a4 & 1) != 0
    || *(void *)(a2 + v8) != *(void *)(a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_preparedToPlayIndex)
    || (uint64_t v14 = *(void *)(a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_assetReader),
        (*(unsigned char *)(v14 + 72) & 1) != 0)
    || *(void *)(a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime) != *(void *)(v14 + 64))
  {
    sub_1000D682C(a2, a1, *(void *)(a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime));
    if (*(unsigned char *)(a3 + 16) == 1) {
      sub_1000D6124();
    }
  }
  char v15 = 1;
  if (a5)
  {
LABEL_13:
    sub_100006004();
    swift_retain();
    uint64_t v30 = static OS_dispatch_queue.main.getter();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a5;
    *(void *)(v16 + 24) = a6;
    *(unsigned char *)(v16 + 32) = v15;
    aBlock[4] = sub_1000D8208;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000D4744;
    aBlock[3] = &unk_100224640;
    BOOL v27 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    uint64_t v28 = type metadata accessor for DispatchQoS();
    uint64_t v29 = v26;
    uint64_t v17 = *(void *)(v28 - 8);
    __chkstk_darwin(v28);
    uint64_t v19 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    static DispatchQoS.unspecified.getter();
    uint64_t v20 = type metadata accessor for DispatchWorkItemFlags();
    v26[1] = v26;
    uint64_t v21 = *(void *)(v20 - 8);
    __chkstk_darwin(v20);
    uint64_t v23 = (char *)v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    aBlock[0] = &_swiftEmptyArrayStorage;
    sub_100032758((unint64_t *)&qword_1002671D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100028654(&qword_100265338);
    sub_100027F5C((unint64_t *)&qword_1002671E0, &qword_100265338);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    unint64_t v24 = v27;
    int64_t v25 = (void *)v30;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v24);

    sub_1000D8194(a5);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v28);
  }
}

uint64_t sub_1000D56E0(void *a1, uint64_t a2, char a3)
{
  id v8 = [a1 rc_playbackFormat];
  if (v8)
  {
    uint64_t v9 = v8;
    [v8 sampleRate];
    double v11 = v10;
    id v12 = [v9 channelCount];

    uint64_t v13 = *(void *)(v3 + 104);
    type metadata accessor for AudioAssetReader();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 56) = 0;
    *(void *)(v14 + 64) = 0;
    *(unsigned char *)(v14 + 72) = 1;
    *(void *)(v14 + 80) = 0;
    *(unsigned char *)(v14 + 88) = 1;
    *(void *)(v14 + 16) = a1;
    *(double *)(v14 + 24) = v11;
    *(void *)(v14 + 32) = v12;
    *(unsigned char *)(v14 + 40) = 0;
    *(void *)(v14 + 48) = v13;
    id v15 = a1;
    swift_bridgeObjectRetain();
    id v16 = sub_1000D7068((uint64_t)v12, v11);
    if (v4)
    {
      return swift_release();
    }
    else
    {
      uint64_t v19 = v16;
      id v20 = sub_1000D6F0C((uint64_t)v12, v11);
      type metadata accessor for AudioPlayerItem();
      swift_allocObject();
      sub_1000D7EDC(v19, v14, v20, a2, a3 & 1);
      uint64_t v22 = v21;

      swift_release();
      return v22;
    }
  }
  else
  {
    sub_1000D7C44();
    swift_allocError();
    *(void *)uint64_t v18 = 0;
    *(_DWORD *)(v18 + 8) = 0;
    *(unsigned char *)(v18 + 12) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_1000D58B0(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  v24[0] = *(void *)(v6 + 40);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v6;
  *(void *)(v12 + 24) = a1;
  *(void *)(v12 + 32) = a2;
  *(unsigned char *)(v12 + 40) = a3 & 1;
  *(void *)(v12 + 48) = a4;
  *(void *)(v12 + 56) = a5;
  aBlock[4] = sub_1000D7E04;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000D4744;
  aBlock[3] = &unk_1002243C0;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  id v18 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v24 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = _swiftEmptyArrayStorage;
  sub_100032758((unint64_t *)&qword_1002671D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100028654(&qword_100265338);
  sub_100027F5C((unint64_t *)&qword_1002671E0, &qword_100265338);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return swift_release();
}

uint64_t sub_1000D5B88(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = sub_1000D56E0(a2, a3, a4 & 1);
  sub_100006004();
  uint64_t v22 = static OS_dispatch_queue.main.getter();
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = a5;
  void v9[3] = a6;
  v9[4] = v8;
  aBlock[4] = sub_1000D7EA0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000D4744;
  aBlock[3] = &unk_100224460;
  double v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.unspecified.getter();
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = (uint64_t)&v20;
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100032758((unint64_t *)&qword_1002671D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100028654(&qword_100265338);
  sub_100027F5C((unint64_t *)&qword_1002671E0, &qword_100265338);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v18 = (void *)v22;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  swift_release();

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v21);
}

void sub_1000D6124()
{
  uint64_t v1 = *(void *)(v0 + 56);
  if (v1)
  {
    uint64_t v14 = *(void *)(v0 + 48);
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = v0;
    *(void *)(v2 + 24) = v1;
    aBlock[4] = sub_1000D7DB4;
    aBlock[5] = v2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000D4744;
    aBlock[3] = &unk_100224370;
    uint64_t v3 = _Block_copy(aBlock);
    uint64_t v12 = type metadata accessor for DispatchQoS();
    uint64_t v13 = v11;
    uint64_t v4 = *(void *)(v12 - 8);
    __chkstk_darwin(v12);
    uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain_n();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
    v11[1] = v11;
    uint64_t v8 = *(void *)(v7 - 8);
    __chkstk_darwin(v7);
    double v10 = (char *)v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v15 = &_swiftEmptyArrayStorage;
    sub_100032758((unint64_t *)&qword_1002671D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100028654(&qword_100265338);
    sub_100027F5C((unint64_t *)&qword_1002671E0, &qword_100265338);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v3);
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v12);
    swift_release();
  }
}

id sub_1000D6400(uint64_t a1, uint64_t a2)
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v12 = 0;
    if (![Strong activateAudioSessionForPlaybackAndReturnError:&v12])
    {
      id v11 = v12;
      uint64_t v10 = _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_unknownObjectRelease();
      goto LABEL_10;
    }
    id v4 = v12;
    swift_unknownObjectRelease();
  }
  *(void *)(a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_preparedToPlayIndex) = -1;
  uint64_t v5 = *(void **)(a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer);
  id v12 = 0;
  unsigned int v6 = [v5 startAndReturnError:&v12];
  id v7 = v12;
  if (!v6)
  {
    id v9 = v12;
    uint64_t v10 = _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_10:
    sub_1000D6B48(v10);
    return (id)swift_errorRelease();
  }

  return v7;
}

void sub_1000D6570()
{
  uint64_t v1 = *(void *)(v0 + 56);
  if (v1)
  {
    uint64_t v13 = *(void *)(v0 + 48);
    aBlock[4] = sub_1000D8238;
    aBlock[5] = v1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000D4744;
    aBlock[3] = &unk_100224668;
    uint64_t v2 = _Block_copy(aBlock);
    uint64_t v11 = type metadata accessor for DispatchQoS();
    id v12 = v10;
    uint64_t v3 = *(void *)(v11 - 8);
    __chkstk_darwin(v11);
    uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain_n();
    static DispatchQoS.unspecified.getter();
    uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
    v10[1] = v10;
    uint64_t v7 = *(void *)(v6 - 8);
    __chkstk_darwin(v6);
    id v9 = (char *)v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v14 = &_swiftEmptyArrayStorage;
    sub_100032758((unint64_t *)&qword_1002671D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100028654(&qword_100265338);
    sub_100027F5C((unint64_t *)&qword_1002671E0, &qword_100265338);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v2);
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v11);
    swift_release();
  }
}

uint64_t sub_1000D682C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(NSObject **)(v3 + 48);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_1000D8390;
  *(void *)(v8 + 24) = a1;
  uint64_t v20 = sub_1000D7CF0;
  uint64_t v21 = v8;
  aBlock = _NSConcreteStackBlock;
  uint64_t v17 = 1107296256;
  id v18 = sub_1000D4960;
  uint64_t v19 = &unk_1002242A8;
  id v9 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v9);
  _Block_release(v9);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v9)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v11 = *(void **)(a1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer);
  [v11 reset];
  [v11 setSampleOffset:(double)a2];
  *(void *)(*(void *)(a1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_assetReader) + 48) = *(void *)(v3 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1000DC5F4(a2, a3, 0);
  [*(id *)(a1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_silenceRemover) reset];
  [v11 prepare];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_1000D7D50;
  *(void *)(v13 + 24) = v12;
  uint64_t v20 = sub_1000D838C;
  uint64_t v21 = v13;
  aBlock = _NSConcreteStackBlock;
  uint64_t v17 = 1107296256;
  id v18 = sub_1000D4960;
  uint64_t v19 = &unk_100224320;
  uint64_t v14 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v14);
  _Block_release(v14);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_1000D6B48(uint64_t a1)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(v1 + 32);
    sub_100006004();
    uint64_t v20 = static OS_dispatch_queue.main.getter();
    uint64_t v6 = (void *)swift_allocObject();
    v6[2] = v1;
    v6[3] = v4;
    void v6[4] = v5;
    v6[5] = a1;
    aBlock[4] = sub_1000D8298;
    aBlock[5] = v6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000D4744;
    aBlock[3] = &unk_1002246B8;
    id v18 = _Block_copy(aBlock);
    swift_retain();
    swift_unknownObjectRetain();
    swift_errorRetain();
    swift_release();
    uint64_t v7 = type metadata accessor for DispatchQoS();
    uint64_t v19 = &v17;
    uint64_t v8 = *(void *)(v7 - 8);
    __chkstk_darwin(v7);
    uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    static DispatchQoS.unspecified.getter();
    uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v17 = (uint64_t)&v17;
    uint64_t v12 = *(void *)(v11 - 8);
    __chkstk_darwin(v11);
    uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    aBlock[0] = &_swiftEmptyArrayStorage;
    sub_100032758((unint64_t *)&qword_1002671D0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100028654(&qword_100265338);
    sub_100027F5C((unint64_t *)&qword_1002671E0, &qword_100265338);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v15 = v18;
    uint64_t v16 = (void *)v20;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return result;
}

void sub_1000D6E5C(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 56))
  {
    if (*(unsigned char *)(a1 + 16) == 1)
    {
      sub_1000D6570();
      *(unsigned char *)(a1 + 16) = 0;
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        [Strong audioPlayerIsPlayingChanged:0];
        swift_unknownObjectRelease();
      }
    }
  }
  id v5 = (id)_convertErrorToNSError(_:)();
  [a2 audioPlayerError:v5];
}

id sub_1000D6F0C(uint64_t a1, double a2)
{
  id v5 = *(id *)(v2 + 64);
  if (v5)
  {
    id v6 = v5;
    [v6 sampleRate];
    if (v7 == a2 && [v6 channelCount] == a1)
    {
      [v6 reset];
      return v5;
    }
  }
  if ((a1 & 0x80000000) != 0) {
    __break(1u);
  }
  id v13 = 0;
  id v5 = [objc_allocWithZone((Class)VMSilenceRemover) initWithSampleRate:a1 channelCount:&v13 error:a2];
  id v8 = v13;
  if (v5)
  {
    [v5 setInputProvider:v2];
    [v5 setEnabled:*(unsigned __int8 *)(v2 + 80)];
    uint64_t v9 = *(void **)(v2 + 64);
    *(void *)(v2 + 64) = v5;
    id v10 = v5;
  }
  else
  {
    uint64_t v11 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

id sub_1000D7068(uint64_t a1, double a2)
{
  id v6 = *(void **)(v2 + 72);
  if (v6)
  {
    id v3 = v6;
    [v3 sampleRate];
    if (v7 == a2 && [v3 channelCount] == a1)
    {
      [v3 reset];
      return v3;
    }
  }
  id v8 = [objc_allocWithZone((Class)AVAudioFormat) initStandardFormatWithSampleRate:a1 channels:a2];
  if (v8)
  {
    uint64_t v9 = v8;
    id v3 = [objc_allocWithZone((Class)VMAudioOutputRenderer) initWithQueue:*(void *)(v2 + 40)];
    [v3 setDelegate:v2];
    id v10 = (void *)swift_allocObject();
    swift_weakInit();
    aBlock[4] = sub_1000D7CD0;
    aBlock[5] = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1000D7414;
    aBlock[3] = &unk_100224258;
    uint64_t v11 = _Block_copy(aBlock);
    swift_release();
    aBlock[0] = 0;
    unsigned int v12 = [v3 prepareToRender:v9 inputBlock:v11 error:aBlock];
    _Block_release(v11);
    id v13 = aBlock[0];
    if (v12)
    {
    }
    else
    {
      uint64_t v15 = v13;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    sub_1000D7C44();
    swift_allocError();
    *(void *)uint64_t v14 = 0;
    *(_DWORD *)(v14 + 8) = 0;
    *(unsigned char *)(v14 + 12) = 1;
    swift_willThrow();
  }
  return v3;
}

double *sub_1000D72C0(_DWORD *a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v5 = *(void *)(Strong + 56);
  if (!v5)
  {
    swift_release();
    return 0;
  }
  uint64_t result = *(double **)(v5 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_silenceRemover);
  if (!result)
  {
    swift_retain();
    swift_retain();
    double v7 = sub_1000DC780(a1, a2);
    swift_release();
    swift_release();
    swift_release();
    return v7;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    LODWORD(v7) = [result fillNextBuffer:a1 frameCount:a2];
    swift_release();
    return (double *)(int)v7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D7414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v6 = v5(a2, a3);
  swift_release();
  return v6;
}

id *AudioPlayer.deinit()
{
  sub_10000C4A4((uint64_t)(v0 + 3));

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AudioPlayer.__deallocating_deinit()
{
  AudioPlayer.deinit();

  return swift_deallocClassInstance();
}

uint64_t AudioPlayer.fillNextBuffer(_:frameCount:)(_DWORD *a1, int a2)
{
  uint64_t v3 = *(void *)(v2 + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = a2;
  swift_retain();
  uint64_t result = (uint64_t)sub_1000DC780(a1, v5);
  uint64_t v7 = result;
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    [*(id *)(v3 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer) setShouldRenderSilenceOnEmptyQueue:result != 0];
    swift_release();
    return v7;
  }
  __break(1u);
  return result;
}

id AudioPlayer.audioEngineOutputNodeAccessQueue()()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return 0;
  }
  id v1 = [Strong audioEngineOutputNodeAccessQueue];
  swift_unknownObjectRelease();
  return v1;
}

Swift::Void __swiftcall AudioPlayer.audioRendererQueueEmpty()()
{
  if (*(unsigned char *)(v0 + 112) == 1)
  {
    sub_1000D4988(0, 0, 0, 0.0);
  }
  else if (*(void *)(v0 + 56))
  {
    if (*(unsigned char *)(v0 + 16) == 1)
    {
      sub_1000D6570();
      *(unsigned char *)(v0 + 16) = 0;
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        [Strong audioPlayerIsPlayingChanged:0];
        swift_unknownObjectRelease();
      }
    }
  }
}

void AudioPlayer.audioRendererError(_:)()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = (void *)Strong;
    id v2 = (id)_convertErrorToNSError(_:)();
    [v1 audioPlayerError:v2];
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall AudioPlayer.audioRendererWasInterrupted()()
{
  uint64_t v1 = *(void *)(v0 + 56);
  if (v1 && *(unsigned char *)(v0 + 16) == 1)
  {
    id v2 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer);
    swift_retain();
    [v2 currentSampleTime];
    sub_1000D4988(0, 0, 0, v3 / *(double *)(*(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_assetReader) + 24));
    swift_release();
  }
}

uint64_t sub_1000D79E0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = swift_retain();
  a3(v4);

  return swift_release();
}

uint64_t sub_1000D7A24()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_uuid;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1000D7AF4()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_1000D7B28()
{
  return type metadata accessor for AudioPlayerItem();
}

uint64_t type metadata accessor for AudioPlayerItem()
{
  uint64_t result = qword_100265220;
  if (!qword_100265220) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D7B7C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000D7C44()
{
  unint64_t result = qword_100265330;
  if (!qword_100265330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265330);
  }
  return result;
}

uint64_t sub_1000D7C98()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

double *sub_1000D7CD0(_DWORD *a1, uint64_t a2)
{
  return sub_1000D72C0(a1, a2);
}

uint64_t sub_1000D7CD8()
{
  return swift_release();
}

uint64_t sub_1000D7CE0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D7CF0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000D7D18()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000D7D50()
{
  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_preparedToPlayIndex) = *(void *)(v0 + 24);
}

uint64_t sub_1000D7D64()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D7D74()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

id sub_1000D7DB4()
{
  return sub_1000D6400(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000D7DBC()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000D7E04()
{
  return sub_1000D5B88(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1000D7E18()
{
  return sub_1000D7E50((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1000D7E30()
{
  return sub_1000D7EA8(1);
}

uint64_t sub_1000D7E38()
{
  return sub_1000D7E50((void (*)(void))&_swift_release);
}

uint64_t sub_1000D7E50(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1000D7EA0()
{
  return sub_1000D7EA8(0);
}

uint64_t sub_1000D7EA8(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 16))(*(void *)(v1 + 32), a1);
}

void sub_1000D7EDC(void *a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  UUID.init()();
  *(void *)(v6 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_seekPosition) = -1;
  *(void *)(v6 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_preparedToPlayIndex) = -1;
  *(void *)(v6 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer) = a1;
  *(void *)(v6 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_assetReader) = a2;
  *(void *)(v6 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_silenceRemover) = a3;
  if (a5)
  {
    id v15 = a3;
    id v16 = a1;
    swift_retain();
    double v12 = sub_1000DC5B4();
  }
  else
  {
    double v12 = *(double *)&a4;
    id v13 = a3;
    id v14 = a1;
    swift_retain();
  }
  double v17 = v12 * *(double *)(a2 + 24);
  if ((~*(void *)&v17 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v17 < 9.22337204e18)
  {
    *(void *)(v6 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime) = (uint64_t)v17;
    return;
  }
LABEL_10:
  __break(1u);
}

void sub_1000D8008()
{
  *(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_preparedToPlayIndex) = -1;
}

uint64_t sub_1000D801C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D802C()
{
  swift_release();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D8064(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_100265350);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D80C4()
{
  return sub_1000D43B8();
}

void sub_1000D80CC(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_preparedToPlayIndex);
}

uint64_t sub_1000D80E0()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 48)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1000D8130()
{
  sub_1000D52F0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1000D8144(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000D8154()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D818C()
{
  return sub_1000D5030(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000D8194(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000D81A4()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t sub_1000D81D0()
{
  swift_release();

  return _swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1000D8208()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(unsigned __int8 *)(v0 + 32));
}

id sub_1000D8238()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer) pause];
}

uint64_t sub_1000D8250()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_errorRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000D8298()
{
  sub_1000D6E5C(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void *initializeBufferWithCopyOfBuffer for AudioPlayer.Error(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AudioPlayer.Error(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 13)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AudioPlayer.Error(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 13) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AudioPlayer.Error()
{
  return &type metadata for AudioPlayer.Error;
}

uint64_t initializeBufferWithCopyOfBuffer for AudioPlayer.Format(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AudioPlayer.Format(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AudioPlayer.Format(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AudioPlayer.Format()
{
  return &type metadata for AudioPlayer.Format;
}

uint64_t sub_1000D8408(CMTimeEpoch a1, unint64_t a2)
{
  id v3 = v2;
  CMTimeEpoch v5 = a1;
  CMTimeValue value = *(void *)(a1 + 16);
  unint64_t v32 = a2 >> 62;
  if (a2 >> 62) {
    goto LABEL_39;
  }
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t v8 = v7 >= value ? value : v7;
    char v36 = &_swiftEmptyArrayStorage;
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if ((v8 & 0x8000000000000000) != 0) {
      break;
    }
    id v27 = v3;
    uint64_t v28 = v7;
    CMTimeValue v30 = value;
    id v3 = (id)&kCMTimeZero;
    CMTimeEpoch v29 = v5;
    if (v8)
    {
      CMTimeEpoch v31 = v5 + 32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v10 = self;
      unint64_t v11 = 0;
      CMTimeValue value = kCMTimeZero.value;
      uint64_t v12 = *(void *)&kCMTimeZero.timescale;
      CMTimeEpoch epoch = kCMTimeZero.epoch;
      while (v8 != v11)
      {
        int v17 = *(_DWORD *)(v31 + 4 * v11);
        if (v32)
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v18 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v11 == v18) {
          goto LABEL_35;
        }
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v11 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_38;
          }
          id v14 = *(id *)(a2 + 8 * v11 + 32);
        }
        id v15 = v14;
        ++v11;
        id v3 = [v10 audioMixInputParametersWithTrack:v14, v27];
        CMTimeValue v33 = kCMTimeZero.value;
        uint64_t v34 = v12;
        CMTimeEpoch v35 = epoch;
        LODWORD(v16) = v17;
        [v3 setVolume:&v33 atTime:v16];

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        CMTimeEpoch v5 = v36[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v8 == v11) {
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_35:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_20:
      CMTimeValue v19 = v30;
      if (v30 <= v28)
      {
LABEL_33:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (uint64_t)v36;
      }
      CMTimeValue value = a2 & 0xFFFFFFFFFFFFFF8;
      id v3 = (id)kCMTimeZero.value;
      uint64_t v20 = *(void *)&kCMTimeZero.timescale;
      CMTimeEpoch v5 = kCMTimeZero.epoch;
      while (v19 != v8)
      {
        int v21 = *(_DWORD *)(v29 + 32 + 4 * v8);
        if (v32)
        {
          swift_bridgeObjectRetain();
          uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v8 == v22) {
            goto LABEL_33;
          }
        }
        else if (v8 == *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_33;
        }
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v8 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_37;
          }
          id v23 = *(id *)(a2 + 8 * v8 + 32);
        }
        unint64_t v24 = v23;
        ++v8;
        id v25 = [self audioMixInputParametersWithTrack:v23];
        CMTimeValue v33 = kCMTimeZero.value;
        uint64_t v34 = v20;
        CMTimeEpoch v35 = v5;
        LODWORD(v26) = v21;
        [v25 setVolume:&v33 atTime:v26];

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        CMTimeValue v19 = v30;
        if (v30 == v8) {
          goto LABEL_33;
        }
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void sub_1000D87B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  CMTimeEpoch v5 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = 0;

  swift_beginAccess();
  uint64_t v6 = *(void **)(a3 + 16);
  *(void *)(a3 + 16) = 0;
}

__n128 sub_1000D882C@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000D8838(void *a1)
{
  CMTimeEpoch v5 = *(void **)v1;
  uint64_t v4 = *(void **)(v1 + 8);
  uint64_t v7 = *(void **)(v1 + 16);
  uint64_t v6 = *(void **)(v1 + 24);
  unint64_t v8 = (opaqueCMSampleBuffer *)[v6 copyNextSampleBuffer];
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = v5;
    id v11 = v4;
    id v12 = v7;
    id v13 = v6;
    id v14 = sub_1000D9564(v9, v11);
  }
  else
  {
    id v14 = 0;
  }
  *a1 = v14;
  id v15 = *(uint64_t (**)(void))(v2 + 8);
  return sub_1000D9860(v15);
}

uint64_t sub_1000D8940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  unint64_t v8 = (uint64_t (*)(uint64_t))((char *)&dword_100265390 + dword_100265390);
  uint64_t v6 = (void *)swift_task_alloc();
  v4[4] = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_1000D89FC;
  return v8(a2);
}

uint64_t sub_1000D89FC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    **(void **)(v4 + 24) = v1;
  }
  else {
    **(void **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t sub_1000D8B24(uint64_t a1)
{
  *(void *)(v2 + 16) = v1;
  if (a1)
  {
    swift_getObjectType();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  return _swift_task_switch(sub_1000D8BBC, v3, v5);
}

uint64_t sub_1000D8BBC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v5 = *(void **)(v1 + 16);
  uint64_t v4 = *(void **)(v1 + 24);
  uint64_t v6 = (opaqueCMSampleBuffer *)[v4 copyNextSampleBuffer];
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = v2;
    id v9 = v3;
    id v10 = v5;
    id v11 = v4;
    id v12 = sub_1000D9564(v7, v9);
  }
  else
  {
    id v12 = 0;
  }
  id v13 = *(uint64_t (**)(id))(v0 + 8);
  return v13(v12);
}

uint64_t sub_1000D8C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

id sub_1000D8CF0(uint64_t a1, void *a2, CMTimeEpoch a3)
{
  uint64_t v6 = self;
  URL._bridgeToObjectiveC()(v7);
  id v9 = v8;
  id v10 = [v6 rc_preciseTimingAssetWithURL:v8];

  id v11 = objc_allocWithZone((Class)AVAssetReader);
  id v40 = 0;
  id v12 = v10;
  id v13 = a2;
  id v14 = [v11 initWithAsset:v12 error:&v40];
  if (!v14)
  {
    id v26 = v40;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRelease();
    id v13 = v12;
    goto LABEL_19;
  }
  uint64_t v15 = v14;
  uint64_t v39 = a1;
  id v16 = v40;
  id v17 = [v15 asset];
  id v18 = [v17 rc_audioTracks];

  sub_100025F4C(0, (unint64_t *)&unk_100269FA0);
  unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v27 != 2) {
      goto LABEL_8;
    }
  }
  else if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) != 2)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_10;
      }
    }
    else if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_10:
      if ((v19 & 0xC000000000000001) != 0)
      {
        id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          __break(1u);
        }
        id v28 = *(id *)(v19 + 32);
      }
      id v24 = v28;
      swift_bridgeObjectRelease();
      id v29 = [v13 settings];
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      id v30 = objc_allocWithZone((Class)AVAssetReaderTrackOutput);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v23 = [v30 initWithTrack:v24 outputSettings:isa];

      goto LABEL_14;
    }

    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v34 = objc_allocWithZone((Class)NSError);
    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v34 initWithDomain:v35 code:259 userInfo:0];

    swift_willThrow();
LABEL_19:

    uint64_t v36 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(a1, v36);
    return v12;
  }
  if (!RCTranscribeAllAudioTracks()) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  id v20 = [v13 settings];
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id v38 = objc_allocWithZone((Class)AVAssetReaderAudioMixOutput);
  Class v21 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v22 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v23 = [v38 initWithAudioTracks:v21 audioSettings:v22];

  id v24 = [objc_allocWithZone((Class)AVMutableAudioMix) init];
  sub_1000D8408(a3, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100025F4C(0, qword_100265370);
  Class v25 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v24 setInputParameters:v25];

  [v23 setAudioMix:v24];
LABEL_14:

  [v23 setAlwaysCopiesSampleData:0];
  if ([v15 canAddOutput:v23])
  {
    [v15 addOutput:v23];
    [v15 startReading];
  }
  uint64_t v32 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v39, v32);

  return v12;
}

void destroy for AVAssetReaderSequence(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
}

void *initializeWithCopy for AVAssetReaderSequence(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  id v7 = v3;
  id v8 = v4;
  id v9 = v5;
  id v10 = v6;
  return a1;
}

uint64_t assignWithCopy for AVAssetReaderSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  id v10 = *(void **)(a2 + 16);
  id v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  id v12 = v10;

  id v13 = *(void **)(a2 + 24);
  id v14 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v13;
  id v15 = v13;

  return a1;
}

uint64_t assignWithTake for AVAssetReaderSequence(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  return a1;
}

uint64_t getEnumTagSinglePayload for AVAssetReaderSequence(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AVAssetReaderSequence(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AVAssetReaderSequence()
{
  return &type metadata for AVAssetReaderSequence;
}

void *sub_1000D9500()
{
  return &protocol self-conformance witness table for Error;
}

unint64_t sub_1000D9510()
{
  unint64_t result = qword_100265388;
  if (!qword_100265388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265388);
  }
  return result;
}

id sub_1000D9564(opaqueCMSampleBuffer *a1, void *a2)
{
  if (CMSampleBufferGetNumSamples(a1) < 1) {
    return 0;
  }
  size_t bufferListSizeNeededOut = 0;
  OSStatus AudioBufferListWithRetainedBlockBuffer = CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(a1, &bufferListSizeNeededOut, 0, 0, 0, 0, 0, 0);
  if (AudioBufferListWithRetainedBlockBuffer != noErr.getter()) {
    return 0;
  }
  uint64_t v5 = swift_allocObject();
  id v6 = [objc_allocWithZone((Class)NSMutableData) initWithLength:bufferListSizeNeededOut];
  *(void *)(v5 + 16) = v6;
  if (!v6)
  {
LABEL_8:
    swift_release();
    return 0;
  }
  id v7 = (AudioBufferList *)[v6 mutableBytes];
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  OSStatus v9 = CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(a1, 0, v7, bufferListSizeNeededOut, kCFAllocatorDefault, kCFAllocatorDefault, 0, (CMBlockBufferRef *)(v8 + 16));
  if (v9 != noErr.getter())
  {
    swift_release();
    goto LABEL_8;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v8;
  id v11 = objc_allocWithZone((Class)AVAudioPCMBuffer);
  void v16[4] = sub_1000D9850;
  void v16[5] = v10;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_1000D8C9C;
  v16[3] = &unk_1002248F0;
  id v12 = _Block_copy(v16);
  id v13 = a2;
  swift_retain();
  swift_retain();
  swift_release();
  id v14 = [v11 initWithPCMFormat:v13 bufferListNoCopy:v7 deallocator:v12];

  _Block_release(v12);
  swift_release();
  swift_release();
  return v14;
}

uint64_t sub_1000D97D8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D9810()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000D9850(uint64_t a1)
{
  sub_1000D87B4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000D9858()
{
  return swift_release();
}

uint64_t sub_1000D9860(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000D9870(uint64_t a1)
{
  uint64_t v28 = a1;
  uint64_t v2 = sub_100028654(&qword_1002699E0);
  __chkstk_darwin(v2 - 8);
  uint64_t v27 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100028654(&qword_1002654C8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100028654(&qword_1002654D0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v29 = v8;
  uint64_t v30 = v9;
  __chkstk_darwin(v8);
  id v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100028654(&qword_1002654D8);
  uint64_t v12 = *(void *)(v26 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v26);
  __chkstk_darwin(v14);
  id v16 = (char *)&v25 - v15;
  *(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_transcriptionTask) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_delegate + 8) = 0;
  swift_unknownObjectWeakInit();
  sub_1000DB7B8();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v4);
  Class v25 = v11;
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v1 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_continuation, v11, v29);
  uint64_t v17 = type metadata accessor for TaskPriority();
  uint64_t v18 = (uint64_t)v27;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v27, 1, 1, v17);
  unint64_t v19 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v26;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v19, v16, v26);
  unint64_t v21 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  Class v22 = (char *)swift_allocObject();
  *((void *)v22 + 2) = 0;
  *((void *)v22 + 3) = 0;
  *((void *)v22 + 4) = v1;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v22[v21], v19, v20);
  *(void *)&v22[(v13 + v21 + 7) & 0xFFFFFFFFFFFFFFF8] = v28;
  swift_retain();
  uint64_t v23 = sub_100151A10(v18, (uint64_t)&unk_1002654E8, (uint64_t)v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v29);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v20);
  *(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_transcriptionTask) = v23;
  swift_release();
  return v1;
}

uint64_t sub_1000D9C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v9;
  *uint64_t v9 = v6;
  v9[1] = sub_100015B60;
  return sub_1000D9D30(a5, a6);
}

uint64_t sub_1000D9D30(uint64_t a1, uint64_t a2)
{
  v3[11] = a2;
  v3[12] = v2;
  v3[10] = a1;
  sub_100028654(&qword_1002699E0);
  v3[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TranscriptionUtterance();
  v3[14] = v4;
  v3[15] = *(void *)(v4 - 8);
  v3[16] = swift_task_alloc();
  sub_100028654(&qword_1002654F0);
  v3[17] = swift_task_alloc();
  v3[18] = sub_100028654(&qword_1002654F8);
  v3[19] = swift_task_alloc();
  v3[20] = sub_100028654(&qword_100265500);
  v3[21] = swift_task_alloc();
  uint64_t v5 = sub_100028654(&qword_100265508);
  v3[22] = v5;
  v3[23] = *(void *)(v5 - 8);
  v3[24] = swift_task_alloc();
  return _swift_task_switch(sub_1000D9F1C, 0, 0);
}

uint64_t sub_1000D9F1C()
{
  if (qword_100264548 != -1) {
    swift_once();
  }
  *(void *)(v0 + 200) = qword_100275358;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D9FE4;
  return sub_1000F06A8();
}

uint64_t sub_1000D9FE4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000DA0E0, 0, 0);
}

uint64_t sub_1000DA0E0()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = (void *)v0[11];
  *(unsigned char *)(v0[25] + OBJC_IVAR___RCRecordingTranscriptionService_isTranscribingLive) = 1;
  uint64_t v3 = swift_task_alloc();
  v0[27] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v8 = (uint64_t (*)(char, uint64_t, uint64_t, uint64_t))((char *)&dword_1002666E0 + dword_1002666E0);
  id v4 = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[28] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000DA1DC;
  uint64_t v6 = v0[11];
  return v8(1, v6, (uint64_t)&unk_100265518, v3);
}

uint64_t sub_1000DA1DC(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)*v3;
  v4[29] = a1;
  v4[30] = a2;
  v4[31] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = sub_1000DA548;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v5 = sub_1000DA2FC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000DA2FC()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  swift_retain();
  sub_100028654(&qword_1002654D0);
  AsyncStream.Continuation.onTermination.setter();
  Transcriber.multisegmentResults.getter();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  swift_retain();
  swift_retain();
  swift_getOpaqueTypeConformance2();
  AsyncCompactMapSequence.init(_:transform:)();
  sub_100027F5C(&qword_100265528, &qword_100265500);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  v0[32] = OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_delegate;
  uint64_t v5 = sub_100027F5C(&qword_100265530, &qword_100265508);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[33] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000DA610;
  uint64_t v7 = v0[22];
  uint64_t v8 = v0[17];
  return __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v8, 0, 0, v0 + 9, v7, v5);
}

uint64_t sub_1000DA548()
{
  swift_task_dealloc();
  *(unsigned char *)(qword_100275358 + OBJC_IVAR___RCRecordingTranscriptionService_isTranscribingLive) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000DA610()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000DAE44;
  }
  else {
    uint64_t v2 = sub_1000DA724;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_1000DA724()
{
  uint64_t v1 = v0[17];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[15] + 48))(v1, 1, v0[14]) == 1)
  {
    (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    v0[35] = Strong;
    if (Strong)
    {
      uint64_t v3 = (void *)swift_task_alloc();
      v0[36] = v3;
      void *v3 = v0;
      v3[1] = sub_1000DAC5C;
      sub_100106234();
    }
    else
    {
      swift_release();
      swift_release();
      *(unsigned char *)(qword_100275358 + OBJC_IVAR___RCRecordingTranscriptionService_isTranscribingLive) = 0;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v10 = (void (*)(void))v0[1];
      v10();
    }
    return;
  }
  sub_1000DBE24(v1, v0[16]);
  uint64_t v4 = swift_unknownObjectWeakLoadStrong();
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = v0[34];
    uint64_t v7 = v0[16];
    uint64_t v8 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_compiler);
    *(void *)(swift_task_alloc() + 16) = v7;
    uint64_t v9 = v8 + 6;
    os_unfair_lock_lock(v8 + 6);
    sub_1000DBE88(v0 + 6);
    if (v6)
    {
      os_unfair_lock_unlock(v8 + 6);
      return;
    }
    uint64_t v11 = v0[13];
    os_unfair_lock_unlock(v9);
    uint64_t v13 = v0[6];
    uint64_t v12 = v0[7];
    uint64_t v14 = v0[8];
    swift_task_dealloc();
    uint64_t v15 = type metadata accessor for TaskPriority();
    uint64_t v16 = *(void *)(v15 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v11, 1, 1, v15);
    type metadata accessor for MainActor();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = static MainActor.shared.getter();
    uint64_t v18 = (void *)swift_allocObject();
    void v18[2] = v17;
    void v18[3] = &protocol witness table for MainActor;
    v18[4] = v5;
    void v18[5] = v13;
    v18[6] = v12;
    v18[7] = v14;
    int v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v11, 1, v15);
    uint64_t v20 = v0[13];
    if (v19 == 1)
    {
      sub_1000DBFC8(v0[13]);
      if (v17)
      {
LABEL_14:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v21 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v23 = v22;
        swift_unknownObjectRelease();
LABEL_17:
        uint64_t v24 = swift_allocObject();
        *(void *)(v24 + 16) = &unk_100265538;
        *(void *)(v24 + 24) = v18;
        sub_100028654(&qword_100265540);
        if (v23 | v21)
        {
          v0[2] = 0;
          v0[3] = 0;
          v0[4] = v21;
          v0[5] = v23;
        }
        swift_task_create();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        goto LABEL_20;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v15);
      if (v18[2]) {
        goto LABEL_14;
      }
    }
    uint64_t v21 = 0;
    uint64_t v23 = 0;
    goto LABEL_17;
  }
LABEL_20:
  sub_1000DC060(v0[16]);
  uint64_t v25 = sub_100027F5C(&qword_100265530, &qword_100265508);
  uint64_t v26 = (void *)swift_task_alloc();
  v0[33] = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_1000DA610;
  uint64_t v27 = v0[22];
  uint64_t v28 = v0[17];
  __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v28, 0, 0, v0 + 9, v27, v25);
}

uint64_t sub_1000DAC5C()
{
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_1000DAD74, 0, 0);
}

uint64_t sub_1000DAD74()
{
  swift_release();
  swift_release();
  *(unsigned char *)(qword_100275358 + OBJC_IVAR___RCRecordingTranscriptionService_isTranscribingLive) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000DAE44()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[22];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(unsigned char *)(qword_100275358 + OBJC_IVAR___RCRecordingTranscriptionService_isTranscribingLive) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000DAF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100028654(&qword_1002699E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = 0;
  void v10[3] = 0;
  v10[4] = a2;
  void v10[5] = a3;
  int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  swift_retain();
  swift_retain();
  if (v11 == 1)
  {
    sub_1000DBFC8((uint64_t)v7);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (v10[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v14;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = &unk_100265550;
  *(void *)(v15 + 24) = v10;
  if (v13 | v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = v12;
    v17[3] = v13;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1000DB180()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000DB214;
  return SpeechAnalyzer.finalizeAndFinishThroughEndOfInput()();
}

uint64_t sub_1000DB214()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000DB348, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000DB348()
{
  if (qword_100264530 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10002272C(v1, (uint64_t)qword_100275340);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "finalizeAndFinishThroughEndOfInput failed with %@", v4, 0xCu);
    sub_100028654(&qword_100265560);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1000DB54C()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_transcriptionTask))
  {
    swift_retain();
    sub_100028654((uint64_t *)&unk_1002699C0);
    Task.cancel()();
    swift_release();
  }
  uint64_t v2 = v0 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_continuation;
  uint64_t v3 = sub_100028654(&qword_1002654D0);
  AsyncStream.Continuation.finish()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  sub_10000C4A4(v1 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_delegate);

  return swift_deallocClassInstance();
}

uint64_t sub_1000DB668()
{
  return type metadata accessor for LiveTranscription();
}

uint64_t type metadata accessor for LiveTranscription()
{
  uint64_t result = qword_1002653D0;
  if (!qword_1002653D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000DB6BC()
{
  sub_1000DB760();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000DB760()
{
  if (!qword_1002653E8)
  {
    sub_1000DB7B8();
    unint64_t v0 = type metadata accessor for AsyncStream.Continuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1002653E8);
    }
  }
}

unint64_t sub_1000DB7B8()
{
  unint64_t result = qword_1002653F0;
  if (!qword_1002653F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002653F0);
  }
  return result;
}

uint64_t sub_1000DB7F8()
{
  uint64_t v1 = sub_100028654(&qword_1002654D8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000DB8EC()
{
  uint64_t v2 = *(void *)(sub_100028654(&qword_1002654D8) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_100031604;
  uint64_t v7 = (void *)swift_task_alloc();
  v6[2] = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_100015B60;
  return sub_1000D9D30(v4, v5);
}

uint64_t sub_1000DBA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = sub_100028654(&qword_1002654D8);
  void v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return _swift_task_switch(sub_1000DBB08, 0, 0);
}

uint64_t sub_1000DBB08()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = (void *)v0[3];
  type metadata accessor for BufferFormatConverter();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  sub_100028654(&qword_100265568);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 0;
  *(void *)(v6 + 24) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v6;
  *(void *)(v8 + 24) = v5;
  sub_1000DB7B8();
  sub_100027F5C(qword_100265578, &qword_1002654D8);
  id v9 = v5;
  AsyncThrowingMapSequence.init(_:transform:)();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000DBC70(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100031604;
  return sub_1000DBA40(a1, a2, v6);
}

uint64_t sub_1000DBD24(uint64_t a1)
{
  return sub_1000DAF34(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000DBD30()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000DBD70(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100015B60;
  return sub_1000F44CC(a1, a2);
}

uint64_t sub_1000DBE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TranscriptionUtterance();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DBE88@<X0>(uint64_t *a1@<X8>)
{
  return sub_100106194(*(char **)(v1 + 16), a1);
}

uint64_t sub_1000DBEA4()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000DBEF4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100031604;
  return sub_100105E30(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000DBFC8(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_1002699E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000DC028()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000DC060(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TranscriptionUtterance();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000DC0BC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000DC104()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100031604;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[3] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000DB214;
  return SpeechAnalyzer.finalizeAndFinishThroughEndOfInput()();
}

uint64_t sub_1000DC1DC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000DC21C(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100015B60;
  return sub_1000F4414(a1, a2, v7, v6);
}

uint64_t sub_1000DC2D4()
{
  return swift_deallocClassInstance();
}

void sub_1000DC30C()
{
  uint64_t v1 = v0;
  id v2 = [v0 entityInteraction];
  swift_unknownObjectRelease();
  if (!v2)
  {
    sub_1000DC560();
    id v3 = objc_allocWithZone((Class)type metadata accessor for UIAppEntityInteraction());
    id v6 = (id)UIAppEntityInteraction.init(entity:)();
    id v4 = [v1 view];
    if (v4)
    {
      uint64_t v5 = v4;
      [v4 addInteraction:v6];

      [v1 setEntityInteraction:v6];
    }
    else
    {
      __break(1u);
    }
  }
}

id sub_1000DC448()
{
  id result = [v0 entityInteraction];
  if (result)
  {
    type metadata accessor for UIAppEntityInteraction();
    uint64_t v2 = swift_dynamicCastClass();
    if (v2)
    {
      uint64_t v3 = v2;
      id result = [v0 view];
      if (!result)
      {
        __break(1u);
        return result;
      }
      id v4 = result;
      [result removeInteraction:v3];

      [v0 setEntityInteraction:0];
    }
    return (id)swift_unknownObjectRelease();
  }
  return result;
}

unint64_t sub_1000DC560()
{
  unint64_t result = qword_100265600;
  if (!qword_100265600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265600);
  }
  return result;
}

double sub_1000DC5B4()
{
  if ((*(unsigned char *)(v0 + 88) & 1) == 0) {
    return *(double *)(v0 + 80);
  }
  [*(id *)(v0 + 16) rc_durationInSeconds];
  *(double *)(v0 + 80) = result;
  *(unsigned char *)(v0 + 88) = 0;
  return result;
}

void sub_1000DC5F4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  double v10 = sub_1000DC5B4();
  double v11 = *(double *)(v3 + 24);
  double v12 = v10 * v11;
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v12 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (__OFSUB__((uint64_t)v12, 1))
  {
LABEL_22:
    __break(1u);
    return;
  }
  int v13 = a3 & 1;
  if ((uint64_t)v12 - 1 >= (a1 & ~(a1 >> 63))) {
    int64_t v14 = a1 & ~(a1 >> 63);
  }
  else {
    int64_t v14 = (uint64_t)v12 - 1;
  }
  uint64_t v15 = *(void *)(v6 + 56);
  if (!v15
    || v14 != *(void *)(v15
                        + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_readIndex))
  {
    goto LABEL_16;
  }
  char v16 = *(unsigned char *)(v6 + 72);
  if (a3)
  {
    if (*(unsigned char *)(v6 + 72)) {
      return;
    }
    goto LABEL_16;
  }
  if (*(void *)(v6 + 64) != a2) {
    char v16 = 1;
  }
  if (v16)
  {
LABEL_16:
    *(void *)(v6 + 64) = a2;
    *(unsigned char *)(v6 + 72) = v13 != 0;
    uint64_t v17 = *(void **)(v6 + 16);
    uint64_t v18 = *(void *)(v6 + 32);
    type metadata accessor for AudioAssetReaderOutput();
    swift_allocObject();
    id v19 = v17;
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_1000DCDDC(v19, v18, v14, a2, v13, 0, v11);
    if (!v5)
    {
      *(void *)(v6 + 56) = v20;
      swift_release();
    }
  }
}

double *sub_1000DC780(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)v2 + 4);
  if (v4 != *a1) {
    return 0;
  }
  uint64_t v5 = v2;
  uint64_t v8 = (double *)*((void *)v2 + 7);
  if (!v8)
  {
    sub_1000DC5F4(0, 0, 1);
    if (v3) {
      goto LABEL_6;
    }
    uint64_t v8 = (double *)*((void *)v2 + 7);
    if (!v8) {
      return 0;
    }
  }
  swift_retain();
  uint64_t v2 = v8;
  sub_1000DD45C((uint64_t)a1, a2);
  if (!v3)
  {
    uint64_t v2 = v9;
    swift_release();
    return v2;
  }
  swift_release();
LABEL_6:
  swift_errorRetain();
  sub_100028654((uint64_t *)&unk_1002699C0);
  if (swift_dynamicCast())
  {
    if (v21 == 3)
    {
      swift_errorRelease();
      double v10 = (void *)*((void *)v5 + 2);
      double v11 = v5[3];
      uint64_t v16 = *(void *)&v18[OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_endTime];
      int64_t v17 = *(void *)&v18[OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_readIndex];
      int v15 = v18[OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_endTime
                               + 8];
      type metadata accessor for AudioAssetReaderOutput();
      swift_allocObject();
      id v12 = v10;
      swift_bridgeObjectRetain();
      *((void *)v5 + 7) = sub_1000DCDDC(v12, v4, v17, v16, v15, 0, v11);
      swift_release();
      if (*((void *)v5 + 7))
      {
        swift_retain();
        sub_1000DD45C((uint64_t)a1, a2);
        uint64_t v2 = v14;
        sub_1000DE144(v18, v19, v20, 3);
        swift_release();
      }
      else
      {
        sub_1000DE144(v18, v19, v20, 3);
        uint64_t v2 = 0;
      }
    }
    else
    {
      sub_1000DE144(v18, v19, v20, v21);
    }
  }
  swift_errorRelease();
  return v2;
}

uint64_t sub_1000DC9EC()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AudioAssetReader()
{
  return self;
}

unint64_t sub_1000DCA58(void *a1, void *a2, unint64_t a3, char a4)
{
  unint64_t result = 0xD00000000000003ELL;
  switch(a4)
  {
    case 1:
      swift_bridgeObjectRetain();
      id v21 = a1;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      strcpy((char *)v35, "AVAssetReader ");
      HIBYTE(v35[1]) = -18;
      id v22 = [v21 description];
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      v26._countAndFlagsBits = v23;
      v26._object = v25;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 0x2064656C69616620;
      v27._object = (void *)0xEA0000000000202DLL;
      String.append(_:)(v27);
      if (a3) {
        uint64_t v28 = (uint64_t)a2;
      }
      else {
        uint64_t v28 = 0x206E776F6E6B6E75;
      }
      if (a3) {
        unint64_t v29 = a3;
      }
      else {
        unint64_t v29 = 0xED0000726F727265;
      }
      unint64_t v30 = v29;
      String.append(_:)(*(Swift::String *)&v28);
      swift_bridgeObjectRelease();
      v31._countAndFlagsBits = 0x737574617473202CLL;
      v31._object = (void *)0xEC000000203D3D20;
      String.append(_:)(v31);
      [v21 status];
      v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v32);

      goto LABEL_11;
    case 2:
      v35[0] = 0;
      v35[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(66);
      v33._countAndFlagsBits = 0xD000000000000040;
      v33._object = (void *)0x80000001001EAD90;
      String.append(_:)(v33);
      v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      goto LABEL_11;
    case 3:
      return result;
    case 4:
      return 0xD00000000000002CLL;
    default:
      id v7 = a1;
      id v8 = a2;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      strcpy((char *)v35, "AVAssetReader ");
      HIBYTE(v35[1]) = -18;
      id v9 = [v7 description];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v12 = v11;

      v13._countAndFlagsBits = v10;
      v13._object = v12;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._object = (void *)0x80000001001EADE0;
      v14._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v14);
      id v15 = [v8 description];
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      v19._countAndFlagsBits = v16;
      v19._object = v18;
      String.append(_:)(v19);

LABEL_11:
      swift_bridgeObjectRelease();
      return v35[0];
  }
}

unint64_t sub_1000DCDCC()
{
  return sub_1000DCA58(*(void **)v0, *(void **)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1000DCDDC(void *a1, uint64_t a2, int64_t a3, uint64_t a4, int a5, char a6, double a7)
{
  uint64_t v9 = v7;
  int v42 = a5;
  uint64_t v43 = a4;
  int64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v13 = type metadata accessor for UnsafeMutableAudioBufferListPointer();
  uint64_t v41 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)(v9
                 + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_partialSampleBuffer);
  *uint64_t v16 = 0;
  v16[1] = 0;
  uint64_t v17 = v9 + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_endTime;
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  id v18 = objc_allocWithZone((Class)AVAssetReader);
  id v46 = a1;
  v47.CMTimeValue value = 0;
  id v19 = [v18 initWithAsset:a1 error:&v47];
  CMTimeValue value = (void *)v47.value;
  if (!v19)
  {
    id v26 = (id)v47.value;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRelease();
    id v25 = v46;
    goto LABEL_5;
  }
  id v21 = v19;
  *(void *)(v9 + 16) = v19;
  id v22 = value;
  id v23 = v21;
  id v24 = sub_1000DDDC4(v23, v45, a6 & 1, a7);
  if (v8)
  {

    swift_bridgeObjectRelease();
    id v25 = *(id *)(v9 + 16);
LABEL_5:

    objc_release(*(id *)(v9
                       + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_partialSampleBuffer));
    type metadata accessor for AudioAssetReaderOutput();
    swift_deallocPartialClassInstance();
    return v9;
  }
  id v28 = v24;
  char v29 = v42;
  HIDWORD(v40) = v42 & 1;

  swift_bridgeObjectRelease();
  *(void *)(v9 + 24) = v28;
  static AudioBufferList.allocate(maximumBuffers:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v9 + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_utilityBufferList, v15, v13);
  int64_t v30 = v44;
  *(void *)(v9 + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_readIndex) = v44;
  uint64_t v31 = v43;
  *(void *)uint64_t v17 = v43;
  *(unsigned char *)(v17 + 8) = BYTE4(v40);
  if (v29)
  {
    if ((~*(void *)&a7 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
      goto LABEL_24;
    }
    CMTimeValue v32 = kCMTimePositiveInfinity.value;
    CMTimeScale timescale = kCMTimePositiveInfinity.timescale;
    LODWORD(v34) = kCMTimePositiveInfinity.flags;
    CMTimeEpoch epoch = kCMTimePositiveInfinity.epoch;
  }
  else
  {
    if (__OFSUB__(v31, v30))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if ((~*(void *)&a7 & 0x7FF0000000000000) == 0)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    if (a7 <= -2147483650.0)
    {
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
    }
    if (a7 >= 2147483650.0) {
      goto LABEL_29;
    }
    __C::CMTime v52 = CMTime.init(value:timescale:)(v31 - v30, (int)a7);
    CMTimeValue v32 = v52.value;
    CMTimeScale timescale = v52.timescale;
    CMTimeEpoch epoch = v52.epoch;
    uint64_t v34 = HIDWORD(*(void *)&v52.timescale);
  }
  if (a7 <= -2147483650.0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (a7 >= 2147483650.0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  id v36 = *(id *)(v9 + 16);
  CMTimeMake(&v47, v44, (int)a7);
  CMTimeValue v48 = v32;
  CMTimeScale v49 = timescale;
  int v50 = v34;
  CMTimeEpoch v51 = epoch;
  [v36 setTimeRange:&v47];

  long long v37 = *(void **)(v9 + 16);
  if ([v37 startReading])
  {
  }
  else
  {
    v47.CMTimeValue value = 0;
    *(void *)&v47.CMTimeScale timescale = 0xE000000000000000;
    id v38 = v37;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    if ([v38 error])
    {
    }
    else
    {
      sub_1000DDD70();
      swift_allocError();
      *(void *)uint64_t v39 = v38;
      *(void *)(v39 + 8) = 0xD000000000000065;
      *(void *)(v39 + 16) = 0x80000001001EACE0;
      *(unsigned char *)(v39 + 24) = 1;
    }
    swift_willThrow();

    swift_release();
  }
  return v9;
}

uint64_t sub_1000DD27C()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_utilityBufferList;
  uint64_t v3 = (void *)UnsafeMutableAudioBufferListPointer.unsafeMutablePointer.getter();
  free(v3);

  uint64_t v4 = type metadata accessor for UnsafeMutableAudioBufferListPointer();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v2, v4);
  objc_release(*(id *)(v1
                     + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_partialSampleBuffer));

  return swift_deallocClassInstance();
}

uint64_t sub_1000DD348()
{
  return type metadata accessor for AudioAssetReaderOutput();
}

uint64_t type metadata accessor for AudioAssetReaderOutput()
{
  uint64_t result = qword_1002657B0;
  if (!qword_1002657B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000DD39C()
{
  uint64_t result = type metadata accessor for UnsafeMutableAudioBufferListPointer();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_1000DD45C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for UnsafeMutableAudioBufferListPointer();
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  __chkstk_darwin(v6);
  uint64_t v31 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnsafeMutableAudioBufferListPointer.init(_:)();
  if (a2 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v2
       + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_partialSampleBuffer;
    uint64_t v29 = v2
        + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_utilityBufferList;
    uint64_t v30 = v2;
    while (1)
    {
      uint64_t v10 = *(opaqueCMSampleBuffer **)v9;
      if (*(void *)v9)
      {
        uint64_t v11 = *(void *)(v9 + 8);
        id v12 = *(opaqueCMSampleBuffer **)v9;
        uint64_t v13 = a2 - v8;
        if (__OFSUB__(a2, v8)) {
          goto LABEL_31;
        }
      }
      else
      {
        sub_1000DD748();
        if (v3)
        {
          (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v28);
          return;
        }
        id v12 = v14;
        if (!v14) {
          goto LABEL_27;
        }
        uint64_t v11 = 0;
        uint64_t v13 = a2 - v8;
        if (__OFSUB__(a2, v8))
        {
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          return;
        }
      }
      id v15 = v10;
      uint64_t v16 = CMSampleBufferRef.numSamples.getter();
      if (__OFSUB__(v16, v11)) {
        goto LABEL_32;
      }
      if (v16 - v11 >= v13) {
        uint64_t v17 = v13;
      }
      else {
        uint64_t v17 = v16 - v11;
      }
      uint64_t v4 = v30;
      sub_1000DD99C(v31, v8, v17);
      id v18 = (AudioBufferList *)UnsafeMutableAudioBufferListPointer.unsafeMutablePointer.getter();
      if (v11 > 0x7FFFFFFF) {
        goto LABEL_33;
      }
      if (v11 < (uint64_t)0xFFFFFFFF80000000 || v17 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_34;
      }
      if (v17 > 0x7FFFFFFF) {
        goto LABEL_35;
      }
      unsigned int v19 = CMSampleBufferCopyPCMDataIntoAudioBufferList(v12, v11, v17, v18);
      if (v19 != noErr.getter())
      {
        sub_1000DDD70();
        swift_allocError();
        *(void *)(v26 + 8) = 0;
        *(void *)(v26 + 16) = 0;
        *(void *)uint64_t v26 = v19;
        *(unsigned char *)(v26 + 24) = 2;
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v28);

        return;
      }
      uint64_t v20 = CMSampleBufferRef.numSamples.getter();
      if (__OFSUB__(v20, v11)) {
        goto LABEL_36;
      }
      if (v17 >= v20 - v11)
      {

        id v12 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v21 = v17 + v11;
      }
      id v22 = *(opaqueCMSampleBuffer **)v9;
      *(void *)uint64_t v9 = v12;
      *(void *)(v9 + 8) = v21;

      BOOL v23 = __OFADD__(v8, v17);
      v8 += v17;
      if (v23) {
        goto LABEL_37;
      }
      if (v8 >= a2) {
        goto LABEL_27;
      }
    }
  }
  uint64_t v8 = 0;
LABEL_27:
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v28);
  uint64_t v24 = *(void *)(v4
                  + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_readIndex);
  BOOL v23 = __OFADD__(v24, v8);
  uint64_t v25 = v24 + v8;
  if (v23) {
    goto LABEL_38;
  }
  *(void *)(v4 + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_readIndex) = v25;
}

void sub_1000DD748()
{
  unint64_t v1 = *(void **)(v0
                + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_partialSampleBuffer);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_partialSampleBuffer
                   + 8);
    type metadata accessor for CMSampleBuffer(0);
    id v3 = v1;
    if (CMSampleBufferRef.numSamples.getter() < v2)
    {
      __break(1u);
    }
    else
    {
      _CMSampleBufferInitTrampoline.init(copying:forRange:)();
    }
  }
  else if (![*(id *)(v0 + 24) copyNextSampleBuffer])
  {
    uint64_t v4 = *(void **)(v0 + 16);
    if ([v4 status] != (id)2)
    {
      id v5 = [v4 error];
      if (v5)
      {
        uint64_t v6 = v5;
        if ([v5 code] == (id)-11847)
        {
          sub_1000DDD70();
          swift_allocError();
          *(void *)(v7 + 8) = 0;
          *(void *)(v7 + 16) = 0;
          *(void *)uint64_t v7 = v0;
          *(unsigned char *)(v7 + 24) = 3;
          swift_retain();
          swift_willThrow();

          return;
        }
      }
      if ([v4 status] == (id)4)
      {
        sub_1000DDD70();
        swift_allocError();
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)uint64_t v8 = 0;
        *(unsigned char *)(v8 + 24) = 4;
      }
      else
      {
        _StringGuts.grow(_:)(36);
        swift_bridgeObjectRelease();
        if (!objc_msgSend(v4, "error", 0, 0xE000000000000000))
        {
          sub_1000DDD70();
          swift_allocError();
          *(void *)uint64_t v9 = v4;
          *(void *)(v9 + 8) = 0xD000000000000039;
          *(void *)(v9 + 16) = 0x80000001001EACA0;
          *(unsigned char *)(v9 + 24) = 1;
          id v10 = v4;
        }
      }
      swift_willThrow();
    }
  }
}

uint64_t sub_1000DD99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  UnsafeMutableAudioBufferListPointer.count.getter();
  UnsafeMutableAudioBufferListPointer.count.setter();
  uint64_t result = UnsafeMutableAudioBufferListPointer.count.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v6 = result;
    if (!result) {
      return result;
    }
    uint64_t v7 = 0;
    uint64_t v8 = 4 * a3;
    unint64_t v24 = (unint64_t)(4 * a3) >> 32;
    unint64_t v25 = (unint64_t)(a3 - 0x2000000000000000) >> 62;
    while (v6 != v7)
    {
      uint64_t v11 = (uint64_t (*)(unsigned char *, void))UnsafeMutableAudioBufferListPointer.subscript.read();
      uint64_t v13 = v12;
      uint64_t result = v11(v26, 0);
      if (v13)
      {
        uint64_t v14 = (void (*)(unsigned char *, void))UnsafeMutableAudioBufferListPointer.subscript.read();
        unsigned int v16 = v15;
        v14(v26, 0);
        uint64_t v17 = (void (*)(unsigned char *, void))UnsafeMutableAudioBufferListPointer.subscript.modify();
        *id v18 = v16;
        v17(v26, 0);
        uint64_t v19 = a2 * v16;
        if ((a2 * (unsigned __int128)v16) >> 64 != v19 >> 63) {
          goto LABEL_17;
        }
        if ((unint64_t)(v19 - 0x2000000000000000) >> 62 != 3) {
          goto LABEL_18;
        }
        uint64_t v20 = v13 + 4 * v19;
        uint64_t v21 = (uint64_t (*)(unsigned char *, void))UnsafeMutableAudioBufferListPointer.subscript.modify();
        *(void *)(v22 + 8) = v20;
        uint64_t result = v21(v26, 0);
        if (v25 < 3) {
          goto LABEL_19;
        }
        if (v8 < 0 || v24) {
          goto LABEL_21;
        }
        unint64_t v23 = v8 * (unint64_t)v16;
        if ((v23 & 0xFFFFFFFF00000000) != 0)
        {
          __break(1u);
          return result;
        }
        uint64_t v9 = (uint64_t (*)(unsigned char *, void))UnsafeMutableAudioBufferListPointer.subscript.modify();
        *(_DWORD *)(v10 + 4) = v23;
        uint64_t result = v9(v26, 0);
      }
      if (v6 == ++v7) {
        return result;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
LABEL_21:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *initializeBufferWithCopyOfBuffer for AudioAssetReaderOutput.SampleBuffer(void *a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for AudioAssetReaderOutput.SampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for AudioAssetReaderOutput.SampleBuffer(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioAssetReaderOutput.SampleBuffer(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioAssetReaderOutput.SampleBuffer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioAssetReaderOutput.SampleBuffer()
{
  return &type metadata for AudioAssetReaderOutput.SampleBuffer;
}

unint64_t sub_1000DDD70()
{
  unint64_t result = qword_1002658D0;
  if (!qword_1002658D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002658D0);
  }
  return result;
}

id sub_1000DDDC4(void *a1, uint64_t a2, char a3, double a4)
{
  id v8 = [a1 asset];
  id v9 = [v8 rc_audioTracks];

  sub_100025F4C(0, (unint64_t *)&unk_100269FA0);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100028654(&qword_1002658D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001F14E0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  *(void *)(inited + 72) = &type metadata for UInt32;
  *(_DWORD *)(inited + 48) = 1819304813;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v13;
  *(void *)(inited + 120) = &type metadata for Double;
  *(double *)(inited + 96) = a4;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v14;
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 144) = a2;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v15;
  *(void *)(inited + 216) = &type metadata for Bool;
  *(unsigned char *)(inited + 192) = 1;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 232) = v16;
  *(void *)(inited + 264) = &type metadata for Int;
  *(void *)(inited + 240) = 32;
  *(void *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 280) = v17;
  *(void *)(inited + 312) = &type metadata for Bool;
  *(unsigned char *)(inited + 288) = a3 ^ 1;
  swift_bridgeObjectRetain();
  sub_10010EA30(inited);
  id v18 = objc_allocWithZone((Class)AVAssetReaderAudioMixOutput);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v20 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v21 = [v18 initWithAudioTracks:isa audioSettings:v20];

  id v22 = [objc_allocWithZone((Class)AVMutableAudioMix) init];
  CMTimeEpoch v23 = swift_bridgeObjectRetain();
  sub_1000D8408(v23, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100025F4C(0, qword_100265370);
  Class v24 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v22 setInputParameters:v24];

  [v21 setAudioMix:v22];
  if ([a1 canAddOutput:v21])
  {
    [a1 addOutput:v21];
  }
  else
  {
    sub_1000DDD70();
    swift_allocError();
    *(void *)uint64_t v25 = a1;
    *(void *)(v25 + 8) = v21;
    *(void *)(v25 + 16) = 0;
    *(unsigned char *)(v25 + 24) = 0;
    id v26 = a1;
    id v27 = v21;
    swift_willThrow();
  }
  return v21;
}

void sub_1000DE144(void *a1, void *a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 3:
      swift_release();
      break;
    case 1:

      swift_bridgeObjectRelease();
      break;
    case 0:

      break;
  }
}

id sub_1000DE1F8(id result, void *a2, uint64_t a3, char a4)
{
  if (a4 == 3)
  {
    return (id)swift_retain();
  }
  else
  {
    if (a4 == 1)
    {
      a2 = result;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (a4) {
        return result;
      }
      id v4 = result;
    }
    return a2;
  }
}

void destroy for AudioAssetReaderOutput.Error(uint64_t a1)
{
}

uint64_t initializeWithCopy for AudioAssetReaderOutput.Error(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  id v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_1000DE1F8(*(id *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for AudioAssetReaderOutput.Error(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  id v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_1000DE1F8(*(id *)a2, v4, v5, v6);
  uint64_t v7 = *(void **)a1;
  id v8 = *(void **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_1000DE144(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for AudioAssetReaderOutput.Error(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AudioAssetReaderOutput.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_1000DE144(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioAssetReaderOutput.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioAssetReaderOutput.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000DE458(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 3u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_1000DE470(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 4;
  if (a2 >= 4)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 4;
    *(void *)__n128 result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AudioAssetReaderOutput.Error()
{
  return &type metadata for AudioAssetReaderOutput.Error;
}

id sub_1000DE4A4(void *a1)
{
  id result = [a1 UUID];
  if (result)
  {
    unsigned int v3 = result;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    id v7 = [v1 recordingUUIDToEntityInteraction];
    *(void *)&v12[0] = v4;
    *((void *)&v12[0] + 1) = v6;
    swift_bridgeObjectRetain_n();
    id v8 = [v7 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();

    if (v8)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v12, 0, sizeof(v12));
    }
    sub_1000DE728((uint64_t)v12, (uint64_t)v13);
    if (v13[3])
    {
      sub_100028654(&qword_100265A18);
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        id result = [v1 view];
        if (result)
        {
          uint64_t v9 = result;
          [result removeInteraction:v11];

          id v10 = [v1 recordingUUIDToEntityInteraction];
          v13[0] = v4;
          v13[1] = v6;
          swift_bridgeObjectRetain();
          [v10 __swift_setObject:0 forKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease();
          return (id)swift_unknownObjectRelease();
        }
        else
        {
          __break(1u);
        }
      }
      else
      {
        return (id)swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      swift_bridgeObjectRelease_n();
      return (id)sub_1000285F8((uint64_t)v13, &qword_100265A10);
    }
  }
  return result;
}

uint64_t sub_1000DE728(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100265A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DE790(uint64_t a1, void *a2, uint64_t a3)
{
  v3[7] = a1;
  v3[8] = a3;
  void v3[9] = *a2;
  type metadata accessor for MainActor();
  v3[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000DE830, v5, v4);
}

uint64_t sub_1000DE830()
{
  swift_release();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    IntentParameter.wrappedValue.getter();
    sub_1000DE940();
    swift_bridgeObjectRelease();
  }
  unsigned int v3 = *(uint64_t **)(v0 + 56);
  _OWORD v3[3] = sub_100028654((uint64_t *)&unk_100268AA0);
  v3[4] = sub_1000DED04();
  sub_1000DED60(v3);
  static IntentResult.result<>()();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_1000DE940()
{
  id v1 = [v0 libraryActionHandler];
  if (v1)
  {
    if ([v1 isRecording])
    {
      sub_1000DEDC4();
      swift_allocError();
      swift_willThrow();
      swift_unknownObjectRelease();
    }
    else
    {
      id v6 = [v0 searchController];
      [v6 setActive:1];

      id v7 = [v0 searchController];
      id v8 = [v7 searchBar];

      NSString v9 = String._bridgeToObjectiveC()();
      [v8 setText:v9];
      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10002272C(v2, (uint64_t)qword_100275340);
    unsigned int v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      sub_10002F3B8(0xD000000000000016, 0x80000001001EAED0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s Unable to search recordings. libraryActionHandler is nil.", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000DEBD0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000DEC20()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000DEC58(uint64_t a1, void *a2)
{
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *id v6 = v3;
  v6[1] = sub_100015B60;
  return sub_1000DE790(a1, a2, v2);
}

unint64_t sub_1000DED04()
{
  unint64_t result = qword_100265A50;
  if (!qword_100265A50)
  {
    sub_100027F14((uint64_t *)&unk_100268AA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265A50);
  }
  return result;
}

uint64_t *sub_1000DED60(uint64_t *a1)
{
  id v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

unint64_t sub_1000DEDC4()
{
  unint64_t result = qword_100265A58;
  if (!qword_100265A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265A58);
  }
  return result;
}

BOOL sub_1000DEE20(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1000DEE38()
{
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_1000DEEA8()
{
  return swift_retain();
}

uint64_t sub_1000DEF1C()
{
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t sub_1000DEF8C()
{
  return swift_retain();
}

uint64_t sub_1000DF000()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000DF074()
{
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + 56);
}

uint64_t sub_1000DF0E8()
{
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v0 + 66)) {
    int v1 = 256;
  }
  else {
    int v1 = 0;
  }
  return v1 | *(unsigned __int8 *)(v0 + 65);
}

uint64_t sub_1000DF16C@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC10VoiceMemos23RCRecordButtonViewModel__accessibilityLabel;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000DF238()
{
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC10VoiceMemos23RCRecordButtonViewModel__disabled);
}

uint64_t sub_1000DF2B0()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC10VoiceMemos23RCRecordButtonViewModel__accessibilityLabel;
  uint64_t v2 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC10VoiceMemos23RCRecordButtonViewModel___observationRegistrar;
  uint64_t v4 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_1000DF3AC()
{
  return type metadata accessor for RCRecordButtonViewModel();
}

_WORD *initializeBufferWithCopyOfBuffer for RCRecordButtonViewModel.LabelAnimationConfiguration(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RCRecordButtonViewModel.LabelAnimationConfiguration(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RCRecordButtonViewModel.LabelAnimationConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000DF520);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t destroy for RCRecordButtonViewModel.LabelConfiguration(uint64_t a1)
{
  sub_100028700(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for RCRecordButtonViewModel.LabelConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_100028710(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RCRecordButtonViewModel.LabelConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_100028710(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_100028700(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for RCRecordButtonViewModel.LabelConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for RCRecordButtonViewModel.LabelConfiguration(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_100028700(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RCRecordButtonViewModel.LabelConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RCRecordButtonViewModel.LabelConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unint64_t sub_1000DF808()
{
  unint64_t result = qword_100265D30;
  if (!qword_100265D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265D30);
  }
  return result;
}

unint64_t sub_1000DF860()
{
  unint64_t result = qword_100265D38;
  if (!qword_100265D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265D38);
  }
  return result;
}

unsigned char *sub_1000DF924(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RCRecordButtonViewModel.LabelAnimationConfiguration.TransitionType()
{
  return &type metadata for RCRecordButtonViewModel.LabelAnimationConfiguration.TransitionType;
}

unint64_t sub_1000DF944()
{
  unint64_t result = qword_100265D48;
  if (!qword_100265D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265D48);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MultitrackTip(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MultitrackTip()
{
  return swift_bridgeObjectRelease();
}

void *assignWithTake for MultitrackTip(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MultitrackTip()
{
  return &type metadata for MultitrackTip;
}

void *_s10VoiceMemos13MultitrackTipVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s10VoiceMemos13MultitrackTipVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000DFABC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MultitrackTipView()
{
  return &type metadata for MultitrackTipView;
}

uint64_t sub_1000DFB08()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000DFB24()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000DFB54()
{
  return Tip.title.getter();
}

uint64_t sub_1000DFB7C()
{
  return Image.init(systemName:)();
}

uint64_t sub_1000DFBA0()
{
  uint64_t v0 = sub_100028654(&qword_100265D58);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Tips.UsesConstellation();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100028654(&qword_100265D60);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Tips.UsesConstellation.init(_:)();
  static Tips.OptionsBuilder.buildExpression<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v15 = v4;
  uint64_t v16 = &protocol witness table for Tips.UsesConstellation;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  static Tips.OptionsBuilder.buildPartialBlock<A>(first:)();
  uint64_t v15 = v8;
  uint64_t v16 = (void *)OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v13 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v13;
}

uint64_t sub_1000DFE3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v51 = a3;
  uint64_t v5 = type metadata accessor for Material();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v49 = v5;
  uint64_t v50 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100028654(&qword_100265D68);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_100028654(&qword_100265D70);
  __chkstk_darwin(v40);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100028654(&qword_100265D78);
  uint64_t v43 = *(void *)(v15 - 8);
  uint64_t v44 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_100028654(&qword_100265D80);
  __chkstk_darwin(v42);
  uint64_t v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100028654(&qword_100265D88);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v46 = v20;
  uint64_t v47 = v21;
  __chkstk_darwin(v20);
  CMTimeEpoch v23 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_100028654(&qword_100265D90);
  uint64_t v45 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v41 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = a1;
  unint64_t v53 = a2;
  sub_1000E04BC();
  swift_bridgeObjectRetain();
  TipView.init(_:arrowEdge:action:)();
  static Color.black.getter();
  uint64_t v25 = Color.opacity(_:)();
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v12, v9);
  id v26 = (uint64_t *)&v14[*(int *)(v40 + 36)];
  *id v26 = v25;
  v26[1] = 0x4020000000000000;
  void v26[2] = 0;
  void v26[3] = 0;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  static Material.regular.getter();
  sub_1000E0510();
  uint64_t v27 = v49;
  View.tipBackground<A>(_:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v8, v27);
  sub_1000285F8((uint64_t)v14, &qword_100265D70);
  static Alignment.center.getter();
  __n128 v28 = sub_1000FCB60(0.0, 1, 0.0, 1, 250.0, 0, 0.0, 1, (uint64_t)v19, 0.0, 1, 0.0, 1);
  (*(void (**)(char *, uint64_t, __n128))(v43 + 8))(v17, v44, v28);
  unint64_t v29 = sub_1000E05B0();
  uint64_t v30 = v42;
  View.tipImageSize(_:)();
  sub_1000285F8((uint64_t)v19, &qword_100265D80);
  static Font.Weight.medium.getter();
  uint64_t v52 = v30;
  unint64_t v53 = v29;
  swift_getOpaqueTypeConformance2();
  uint64_t v31 = v41;
  uint64_t v32 = v46;
  View.fontWeight(_:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v23, v32);
  uint64_t v33 = static Color.secondary.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v35 = v45;
  uint64_t v36 = v51;
  uint64_t v37 = v48;
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v51, v31, v48);
  id v38 = (uint64_t *)(v36 + *(int *)(sub_100028654(&qword_100265DB0) + 36));
  *id v38 = KeyPath;
  v38[1] = v33;
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v31, v37);
}

uint64_t sub_1000E0434()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_1000E0450@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DFE3C(*(void *)v1, *(void *)(v1 + 8), a1);
}

void *sub_1000E0458()
{
  return &protocol witness table for String;
}

unint64_t sub_1000E0468()
{
  unint64_t result = qword_100265D50;
  if (!qword_100265D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265D50);
  }
  return result;
}

unint64_t sub_1000E04BC()
{
  unint64_t result = qword_100267C20;
  if (!qword_100267C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267C20);
  }
  return result;
}

unint64_t sub_1000E0510()
{
  unint64_t result = qword_100265D98;
  if (!qword_100265D98)
  {
    sub_100027F14(&qword_100265D70);
    sub_100027F5C(&qword_100265DA0, &qword_100265D68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265D98);
  }
  return result;
}

unint64_t sub_1000E05B0()
{
  unint64_t result = qword_100265DA8;
  if (!qword_100265DA8)
  {
    sub_100027F14(&qword_100265D80);
    sub_100027F14(&qword_100265D70);
    type metadata accessor for Material();
    sub_1000E0510();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265DA8);
  }
  return result;
}

uint64_t sub_1000E0680@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000E06AC()
{
  return EnvironmentValues.tintColor.setter();
}

unint64_t sub_1000E06DC()
{
  unint64_t result = qword_100265DB8;
  if (!qword_100265DB8)
  {
    sub_100027F14(&qword_100265DB0);
    sub_100027F14(&qword_100265D88);
    sub_100027F14(&qword_100265D80);
    sub_1000E05B0();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_100027F5C(&qword_100265DC0, &qword_100265DC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265DB8);
  }
  return result;
}

uint64_t sub_1000E07F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  v2[2] = a1;
  v2[3] = v3;
  type metadata accessor for MainActor();
  v2[4] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  void v2[5] = v5;
  v2[6] = v4;
  return _swift_task_switch(sub_1000E0894, v5, v4);
}

uint64_t sub_1000E0894()
{
  id v1 = [self sharedAppDelegate];
  if (v1
    && (uint64_t v2 = v1, v3 = [v1 defaultSceneDelegate], v2, v3)
    && (id v4 = [v3 mainViewController], v0[7] = v4,
                                                                                         v3,
                                                                                         v4))
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v0[8] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1000E0A14;
    uint64_t v6 = v0[3];
    return sub_100151D1C(v6, (uint64_t)v4);
  }
  else
  {
    sub_1000E72E4();
    swift_allocError();
    *uint64_t v8 = 0;
    swift_willThrow();
    swift_release();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_1000E0A14()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v5 = sub_1000E0C14;
  }
  else {
    uint64_t v5 = sub_1000E0B50;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1000E0B50()
{
  id v1 = (void *)v0[7];
  uint64_t v2 = (uint64_t *)v0[2];
  swift_release();
  v2[3] = sub_100028654((uint64_t *)&unk_100268AA0);
  v2[4] = sub_100027F5C((unint64_t *)&qword_100265A50, (uint64_t *)&unk_100268AA0);
  sub_1000DED60(v2);
  static IntentResult.result<>()();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000E0C14()
{
  id v1 = *(void **)(v0 + 56);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000E0C80()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E0CB8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v3[12] = a1;
  v3[13] = a3;
  uint64_t v5 = type metadata accessor for ConfirmationActionName();
  v3[14] = v5;
  v3[15] = *(void *)(v5 - 8);
  v3[16] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ConfirmationConditions();
  v3[17] = v6;
  v3[18] = *(void *)(v6 - 8);
  v3[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for IntentDialog();
  v3[20] = v7;
  v3[21] = *(void *)(v7 - 8);
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = *a2;
  v3[22] = v8;
  v3[23] = v9;
  type metadata accessor for MainActor();
  v3[24] = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[25] = v11;
  v3[26] = v10;
  return _swift_task_switch(sub_1000E0E6C, v11, v10);
}

uint64_t sub_1000E0E6C()
{
  IntentParameter.wrappedValue.getter();
  uint64_t v1 = v0[8];
  v0[27] = v1;
  uint64_t v2 = IntentParameter.projectedValue.getter();
  v0[28] = v2;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100268910 + dword_100268910);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[29] = v3;
  void *v3 = v0;
  v3[1] = sub_1000E0F38;
  return v5(v1, v2);
}

uint64_t sub_1000E0F38(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = a1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 208);
  uint64_t v4 = *(void *)(v2 + 200);
  return _swift_task_switch(sub_1000E10A0, v4, v3);
}

uint64_t sub_1000E10A0()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    swift_bridgeObjectRelease();
    swift_release();
    sub_1000E72E4();
    swift_allocError();
    unsigned char *v3 = 0;
LABEL_4:
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    goto LABEL_5;
  }
  uint64_t v2 = sub_1000E1968(v0[30]);
  v0[31] = v2;
  uint64_t v6 = v2;
  swift_bridgeObjectRelease();

  id v7 = [self sharedSettingsUserDefaults];
  if (!v7)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000E74DC();
    swift_allocError();
    goto LABEL_4;
  }
  uint64_t v8 = v7;
  unsigned __int8 v9 = [v7 rc_deletionIsImmediate];

  if (v9)
  {
    uint64_t v10 = v0[23];
    type metadata accessor for String.LocalizationValue.StringInterpolation();
    swift_task_alloc();
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v11._object = (void *)0x80000001001EB1E0;
    v11._countAndFlagsBits = 0xD000000000000019;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v11);
    v0[9] = *(void *)(v6 + 16);
    String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v12);
    IntentDialog.init(stringInterpolation:)();
    swift_task_dealloc();
    v0[10] = v10;
    v0[11] = _swiftEmptyArrayStorage;
    sub_1000E7530();
    sub_100028654(&qword_100265E98);
    sub_100027F5C(&qword_100265EA0, &qword_100265E98);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    static ConfirmationActionName.continue.getter();
    uint64_t v13 = (void *)swift_task_alloc();
    v0[32] = v13;
    unint64_t v14 = sub_100031520();
    void *v13 = v0;
    v13[1] = sub_1000E1504;
    uint64_t v15 = v0[22];
    uint64_t v16 = v0[19];
    uint64_t v17 = v0[16];
    return AppIntent.requestConfirmation(conditions:actionName:dialog:)(v16, v17, v15, &type metadata for DeleteRecording, v14);
  }
  swift_release();
  swift_beginAccess();
  uint64_t v18 = swift_unknownObjectWeakLoadStrong();
  if (v18)
  {
    uint64_t v19 = (void *)v18;
    sub_1000E1BFC(v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = (uint64_t *)v0[12];
  v20[3] = sub_100028654((uint64_t *)&unk_100268AA0);
  void v20[4] = sub_100027F5C((unint64_t *)&qword_100265A50, (uint64_t *)&unk_100268AA0);
  sub_1000DED60(v20);
  static IntentResult.result<>()();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
LABEL_5:
  return v4();
}

uint64_t sub_1000E1504()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[18];
    uint64_t v3 = v2[19];
    uint64_t v6 = v2[16];
    uint64_t v5 = v2[17];
    uint64_t v7 = v2[14];
    uint64_t v8 = v2[15];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v9 = v2[25];
    uint64_t v10 = v2[26];
    Swift::String v11 = sub_1000E1810;
  }
  else
  {
    uint64_t v13 = v2[18];
    uint64_t v12 = v2[19];
    uint64_t v14 = v2[17];
    (*(void (**)(void, void))(v2[15] + 8))(v2[16], v2[14]);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    uint64_t v9 = v2[25];
    uint64_t v10 = v2[26];
    Swift::String v11 = sub_1000E16A8;
  }
  return _swift_task_switch(v11, v9, v10);
}

uint64_t sub_1000E16A8()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = v0[20];
  swift_release();
  id v4 = [self sharedRecordingsModelInteractor];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 eraseRecordingsWithUUIDs:isa];

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v6 = (uint64_t *)v0[12];
  v6[3] = sub_100028654((uint64_t *)&unk_100268AA0);
  void v6[4] = sub_100027F5C((unint64_t *)&qword_100265A50, (uint64_t *)&unk_100268AA0);
  sub_1000DED60(v6);
  static IntentResult.result<>()();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000E1810()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = v0[20];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000E18BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100031604;
  return sub_1000E0CB8(a1, a2, v2);
}

uint64_t sub_1000E1968(uint64_t a1)
{
  id v4 = [v1 mainViewController];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 recordingInProgressUUID];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;

      uint64_t v11 = swift_bridgeObjectRetain();
      uint64_t v2 = sub_1000E78F4(v11, v8, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(a1 + 16) == 1 && !*(void *)(v2 + 16))
      {
        swift_bridgeObjectRelease();
        sub_1000E8288();
        swift_allocError();
        swift_willThrow();
      }
      else
      {
      }
    }
    else
    {
      swift_bridgeObjectRetain();

      return a1;
    }
  }
  else
  {
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10002272C(v12, (uint64_t)qword_100275340);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v2 = swift_slowAlloc();
      uint64_t v18 = v2;
      *(_DWORD *)uint64_t v15 = 136315138;
      sub_10002F3B8(0xD000000000000032, 0x80000001001EB220, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s Unable to delete folders. RCMainViewController is nil.", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1000E72E4();
    swift_allocError();
    *uint64_t v16 = 0;
    swift_willThrow();
  }
  return v2;
}

void sub_1000E1BFC(uint64_t a1)
{
  uint64_t v3 = [v1 mainViewController];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4)
    {
      uint64_t v10 = v3;
      swift_bridgeObjectRetain();
      uint64_t v5 = a1 + 40;
      do
      {
        swift_bridgeObjectRetain();
        NSString v6 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v10 performAction:14 atPosition:v6 forUUID:0 sourceController:0 source:0.0];

        v5 += 16;
        --v4;
      }
      while (v4);

      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10002272C(v7, (uint64_t)qword_100275340);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      sub_10002F3B8(0xD000000000000018, 0x80000001001EB200, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v8, "%s Unable to delete recordings. RCMainViewController is nil.", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
    uint64_t v3 = v11;
  }
}

uint64_t sub_1000E1E64(uint64_t a1, _OWORD *a2)
{
  *(void *)(v2 + 56) = a1;
  *(_OWORD *)(v2 + 64) = *a2;
  type metadata accessor for MainActor();
  *(void *)(v2 + 80) = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v2 + 88) = v4;
  *(void *)(v2 + 96) = v3;
  return _swift_task_switch(sub_1000E1F04, v4, v3);
}

uint64_t sub_1000E1F04()
{
  sub_1000E2280(v0 + 2);
  uint64_t v1 = sub_10001510C(v0 + 2, v0[5]);
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  void *v4 = v0;
  v4[1] = sub_1000E200C;
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  return sub_100155130(v6, v5, v3, v2);
}

uint64_t sub_1000E200C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  uint64_t v4 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v5 = sub_1000E2210;
  }
  else {
    uint64_t v5 = sub_1000E2148;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1000E2148()
{
  uint64_t v1 = *(uint64_t **)(v0 + 56);
  swift_release();
  v1[3] = sub_100028654((uint64_t *)&unk_100268AA0);
  v1[4] = sub_100027F5C((unint64_t *)&qword_100265A50, (uint64_t *)&unk_100268AA0);
  sub_1000DED60(v1);
  static IntentResult.result<>()();
  sub_10002F48C(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000E2210()
{
  swift_release();
  sub_10002F48C(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000E2280(void *a1@<X8>)
{
  id v2 = [self sharedAppDelegate];
  if (v2
    && (v3 = v2, id v4 = [v2 defaultSceneDelegate], v3, v4)
    && (id v5 = [v4 mainViewController], v4, v5))
  {
    uint64_t v6 = self;
    id v7 = v5;
    id v8 = [v6 sharedApplicationModel];
    a1[3] = &type metadata for RCPlayRecordingIntentPerformer;
    a1[4] = &off_100228808;

    *a1 = v7;
    a1[1] = v8;
  }
  else
  {
    sub_1000E72E4();
    swift_allocError();
    *uint64_t v9 = 0;
    swift_willThrow();
  }
}

uint64_t sub_1000E239C(uint64_t a1, void *a2, uint64_t a3)
{
  v3[10] = a1;
  v3[11] = a3;
  v3[12] = *a2;
  type metadata accessor for MainActor();
  v3[13] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000E243C, v5, v4);
}

uint64_t sub_1000E243C()
{
  swift_release();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v2 = (void *)Strong;
    IntentParameter.wrappedValue.getter();
    sub_1000E7C80();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v3 = *(uint64_t **)(v0 + 80);
  _OWORD v3[3] = sub_100028654((uint64_t *)&unk_100268AA0);
  v3[4] = sub_100027F5C((unint64_t *)&qword_100265A50, (uint64_t *)&unk_100268AA0);
  sub_1000DED60(v3);
  static IntentResult.result<>()();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1000E259C(uint64_t a1, void *a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100031604;
  return sub_1000E239C(a1, a2, v2);
}

uint64_t sub_1000E2648(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 48) = a3;
  uint64_t v5 = type metadata accessor for ChangeOperation();
  *(void *)(v3 + 56) = v5;
  *(void *)(v3 + 64) = *(void *)(v5 - 8);
  *(void *)(v3 + 72) = swift_task_alloc();
  *(_OWORD *)(v3 + 80) = *a2;
  type metadata accessor for MainActor();
  *(void *)(v3 + 96) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000E2748, v7, v6);
}

uint64_t sub_1000E2748()
{
  swift_release();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    uint64_t v3 = *(void *)(v0 + 72);
    IntentParameter.wrappedValue.getter();
    char v4 = *(unsigned char *)(v0 + 104);
    IntentParameter.wrappedValue.getter();
    sub_1000E2964(v4, v3);
    (*(void (**)(void, void))(*(void *)(v0 + 64) + 8))(*(void *)(v0 + 72), *(void *)(v0 + 56));
  }
  uint64_t v5 = *(uint64_t **)(v0 + 40);
  _OWORD v5[3] = sub_100028654((uint64_t *)&unk_100268AA0);
  v5[4] = sub_100027F5C((unint64_t *)&qword_100265A50, (uint64_t *)&unk_100268AA0);
  sub_1000DED60(v5);
  static IntentResult.result<>()();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1000E28B8(uint64_t a1, _OWORD *a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100031604;
  return sub_1000E2648(a1, a2, v2);
}

void sub_1000E2964(char a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ChangeOperation();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_100028654(&qword_100265EC0);
  __chkstk_darwin(v10);
  uint64_t v12 = &v42[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v13 = [v3 mainViewController];
  if (!v13) {
    goto LABEL_8;
  }
  os_log_type_t v14 = v13;
  uint64_t v49 = v12;
  uint64_t v50 = v7;
  id v15 = [v13 selectedUUID];
  if (!v15)
  {

LABEL_8:
    sub_1000E81E0();
    swift_allocError();
    *uint64_t v21 = 0;
    swift_willThrow();
    return;
  }
  uint64_t v16 = v15;
  uint64_t v48 = v6;
  uint64_t v52[2] = (uint64_t)&OBJC_PROTOCOL___RCPlaybackSettingsDelegate;
  uint64_t v17 = swift_dynamicCastObjCProtocolConditional();
  if (!v17)
  {

    goto LABEL_8;
  }
  uint64_t v18 = (void *)v17;
  id v19 = v14;
  if ([v19 isRecording])
  {

    sub_1000E81E0();
    swift_allocError();
    *uint64_t v20 = 1;
    swift_willThrow();

    return;
  }
  int v22 = a1 & 1;
  uint64_t v23 = a2;
  uint64_t v24 = *(int *)(v10 + 48);
  uint64_t v25 = v49;
  uint64_t v26 = v50;
  uint64_t v27 = *(void (**)(void))(v50 + 16);
  uint64_t v46 = v23;
  id v47 = v19;
  uint64_t v28 = v48;
  uint64_t v44 = (void (*)(unsigned char *, uint64_t, uint64_t))v27;
  uint64_t v45 = v50 + 16;
  v27(v49);
  v25[v24] = v22;
  int v29 = (*(uint64_t (**)(unsigned char *, uint64_t))(v26 + 88))(v25, v28);
  if (v29 == enum case for ChangeOperation.disable(_:))
  {
    if (v22) {
      [v18 setRemoveSilence:0 forUUID:v16];
    }
    else {
      [v18 setEnhanced:0 forUUID:v16];
    }

    uint64_t v30 = v47;
LABEL_22:

    goto LABEL_23;
  }
  if (v29 == enum case for ChangeOperation.enable(_:))
  {
    uint64_t v30 = v47;
    if (v22) {
      [v18 setRemoveSilence:1 forUUID:v16];
    }
    else {
      [v18 setEnhanced:1 forUUID:v16];
    }

    goto LABEL_22;
  }
  uint64_t v31 = v47;
  if (v29 != enum case for ChangeOperation.toggle(_:))
  {
    int v43 = v22;

    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_10002272C(v33, (uint64_t)qword_100275340);
    uint64_t v32 = v48;
    v44(v9, v46, v48);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    int v36 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      v52[0] = v46;
      *(_DWORD *)uint64_t v37 = 136315650;
      LODWORD(v45) = v36;
      uint64_t v51 = sub_10002F3B8(0xD000000000000029, 0x80000001001EB190, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v37 + 12) = 2080;
      uint64_t v38 = ChangeOperation.rawValue.getter();
      uint64_t v51 = sub_10002F3B8(v38, v39, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v50 + 8))(v9, v48);
      *(_WORD *)(v37 + 22) = 2080;
      if (v43) {
        uint64_t v40 = 0x656C695370696B73;
      }
      else {
        uint64_t v40 = 0xD000000000000010;
      }
      if (v43) {
        unint64_t v41 = 0xEB0000000065636ELL;
      }
      else {
        unint64_t v41 = 0x80000001001EA040;
      }
      uint64_t v51 = sub_10002F3B8(v40, v41, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v45, "%s Unexpected change operation %s and / or setting %s", (uint8_t *)v37, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v32 = v48;
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v50 + 8))(v9, v32);
    }

    goto LABEL_24;
  }
  if (v22) {
    [v18 toggleRemoveSilenceForUUID:v16];
  }
  else {
    [v18 toggleEnhanceRecordingForUUID:v16];
  }

LABEL_23:
  uint64_t v32 = v48;
LABEL_24:
  (*(void (**)(unsigned char *, uint64_t))(v50 + 8))(v49, v32);
}

uint64_t sub_1000E2F54(uint64_t a1, void *a2, uint64_t a3)
{
  v3[8] = a1;
  void v3[9] = a3;
  v3[10] = *a2;
  type metadata accessor for MainActor();
  v3[11] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[12] = v5;
  v3[13] = v4;
  return _swift_task_switch(sub_1000E2FF4, v5, v4);
}

uint64_t sub_1000E2FF4()
{
  IntentParameter.wrappedValue.getter();
  uint64_t v1 = v0[7];
  v0[14] = v1;
  uint64_t v2 = IntentParameter.projectedValue.getter();
  v0[15] = v2;
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  v0[16] = v3;
  v0[17] = *(void *)(v3 - 8);
  uint64_t v4 = swift_task_alloc();
  v0[18] = v4;
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100265E70 + dword_100265E70);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[19] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000E3160;
  return v7(v1, v2, v4, (uint64_t)sub_1000E38A4, 0);
}

uint64_t sub_1000E3160(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 144);
  uint64_t v4 = *(void *)(*v1 + 136);
  uint64_t v5 = *(void *)(*v1 + 128);
  *(void *)(*v1 + 160) = a1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v2 + 104);
  uint64_t v7 = *(void *)(v2 + 96);
  return _swift_task_switch(sub_1000E3334, v7, v6);
}

uint64_t sub_1000E3334()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = sub_1000E5DEC(v0[20]);
    v0[21] = v2;
    uint64_t v6 = (uint64_t)v2;
    swift_bridgeObjectRelease();

    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100265E78 + dword_100265E78);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[22] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1000E34D8;
    uint64_t v8 = v0[10];
    return v9(v8, v6);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    sub_1000E72E4();
    swift_allocError();
    unsigned char *v3 = 0;
    swift_willThrow();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1000E34D8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 96);
    uint64_t v4 = *(void *)(v2 + 104);
    uint64_t v5 = sub_1000E3794;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 96);
    uint64_t v4 = *(void *)(v2 + 104);
    uint64_t v5 = sub_1000E35F4;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_1000E35F4()
{
  uint64_t v1 = v0[21];
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[21];
    uint64_t v4 = self;
    uint64_t v5 = v3 + 56;
    do
    {
      v5 += 40;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      id v6 = [v4 sharedRecordingsModelInteractor];
      EntityProperty.wrappedValue.getter();
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v6 deleteUserFolderWithName:v7];

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      --v2;
    }
    while (v2);
  }
  uint64_t v8 = (uint64_t *)v0[8];
  swift_bridgeObjectRelease();
  v8[3] = sub_100028654((uint64_t *)&unk_100268AA0);
  void v8[4] = sub_100027F5C((unint64_t *)&qword_100265A50, (uint64_t *)&unk_100268AA0);
  sub_1000DED60(v8);
  static IntentResult.result<>()();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000E3794()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E37F8(uint64_t a1, void *a2)
{
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *id v6 = v3;
  v6[1] = sub_100031604;
  return sub_1000E2F54(a1, a2, v2);
}

uint64_t sub_1000E38A4()
{
  EntityProperty.wrappedValue.getter();
  uint64_t countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t sub_1000E3908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  sub_100028654((uint64_t *)&unk_100265EB0);
  v5[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for IntentDialog();
  v5[14] = v6;
  v5[15] = *(void *)(v6 - 8);
  v5[16] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[17] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[18] = v8;
  v5[19] = v7;
  return _swift_task_switch(sub_1000E3A34, v8, v7);
}

uint64_t sub_1000E3A34()
{
  uint64_t v44 = v0;
  uint64_t v1 = (void *)(v0 + 64);
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v0 + 88);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000E7608(v3, v2);
  *(void *)(v0 + 160) = v4;
  int64_t v14 = 0;
  char v15 = *(unsigned char *)(v4 + 32);
  *(unsigned char *)(v0 + 216) = v15;
  uint64_t v16 = 1 << v15;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(v4 + 64);
  uint64_t v11 = _swiftEmptyArrayStorage;
  *(void *)(v0 + 208) = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      uint64_t v21 = *(void *)(v0 + 160);
      goto LABEL_27;
    }
    if (__OFADD__(v14++, 1)) {
      break;
    }
    int64_t v23 = (unint64_t)((1 << *(unsigned char *)(v0 + 216)) + 63) >> 6;
    uint64_t v21 = *(void *)(v0 + 160);
    if (v14 >= v23) {
      goto LABEL_41;
    }
    uint64_t v24 = v21 + 64;
    unint64_t v25 = *(void *)(v21 + 64 + 8 * v14);
    if (!v25)
    {
      int64_t v26 = v14 + 1;
      if (v14 + 1 >= v23) {
        goto LABEL_41;
      }
      unint64_t v25 = *(void *)(v24 + 8 * v26);
      if (!v25)
      {
        int64_t v26 = v14 + 2;
        if (v14 + 2 >= v23) {
          goto LABEL_41;
        }
        unint64_t v25 = *(void *)(v24 + 8 * v26);
        if (!v25)
        {
          int64_t v26 = v14 + 3;
          if (v14 + 3 >= v23) {
            goto LABEL_41;
          }
          unint64_t v25 = *(void *)(v24 + 8 * v26);
          if (!v25)
          {
            int64_t v26 = v14 + 4;
            if (v14 + 4 >= v23)
            {
LABEL_41:
              swift_release();
              swift_release();
              goto LABEL_5;
            }
            unint64_t v25 = *(void *)(v24 + 8 * v26);
            if (!v25)
            {
              while (1)
              {
                int64_t v14 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  break;
                }
                if (v14 >= v23) {
                  goto LABEL_41;
                }
                unint64_t v25 = *(void *)(v24 + 8 * v14);
                ++v26;
                if (v25) {
                  goto LABEL_26;
                }
              }
              __break(1u);
              return IntentParameter.requestDisambiguation(among:dialog:)(v21, v5, v6);
            }
          }
        }
      }
      int64_t v14 = v26;
    }
LABEL_26:
    unint64_t v18 = (v25 - 1) & v25;
    unint64_t v20 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_27:
    *(void *)(v0 + 168) = v18;
    *(void *)(v0 + 176) = v14;
    uint64_t v1 = *(void **)(*(void *)(v21 + 56) + 8 * v20);
    *(void *)(v0 + 184) = v1;
    unint64_t v27 = v1[2];
    if (v27 >= 2)
    {
      uint64_t v36 = *(void *)(v0 + 120);
      uint64_t v37 = *(void *)(v0 + 128);
      uint64_t v39 = *(void *)(v0 + 104);
      uint64_t v38 = *(void *)(v0 + 112);
      uint64_t v40 = *(void *)(type metadata accessor for LocalizedStringResource() - 8);
      swift_task_alloc();
      (*(void (**)(void))(v40 + 16))();
      swift_bridgeObjectRetain();
      IntentDialog.init(_:)();
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v39, v37, v38);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v39, 0, 1, v38);
      unint64_t v41 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v41;
      void *v41 = v0;
      v41[1] = sub_1000E3FF0;
      uint64_t v6 = *(void *)(v0 + 104);
      uint64_t v21 = v0 + 16;
      uint64_t v5 = v1;
      return IntentParameter.requestDisambiguation(among:dialog:)(v21, v5, v6);
    }
    if (v27)
    {
      uint64_t v28 = v1[5];
      uint64_t v42 = v1[4];
      uint64_t v30 = v1[6];
      uint64_t v29 = v1[7];
      uint64_t v1 = (void *)v1[8];
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = sub_10015DF04(0, v11[2] + 1, 1, v11);
      }
      unint64_t v32 = v11[2];
      unint64_t v31 = v11[3];
      unint64_t v33 = v32 + 1;
      if (v32 >= v31 >> 1)
      {
        os_log_type_t v35 = sub_10015DF04((void *)(v31 > 1), v32 + 1, 1, v11);
        unint64_t v33 = v32 + 1;
        uint64_t v11 = v35;
      }
      void v11[2] = v33;
      uint64_t v34 = &v11[5 * v32];
      v34[4] = v42;
      v34[5] = v28;
      v34[6] = v30;
      v34[7] = v29;
      v34[8] = v1;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      *(void *)(v0 + 208) = v11;
    }
  }
  __break(1u);
  swift_once();
  uint64_t v7 = type metadata accessor for Logger();
  sub_10002272C(v7, (uint64_t)qword_100275340);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    *(v1 - 1) = sub_10002F3B8(0xD000000000000066, 0x80000001001EB120, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s Failed to map disambiguation key to entities list", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  swift_errorRelease();

  uint64_t v11 = _swiftEmptyArrayStorage;
LABEL_5:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void *))(v0 + 8);
  return v12(v11);
}

uint64_t sub_1000E3FF0()
{
  uint64_t v2 = *v1;
  (*v1)[25] = v0;
  swift_task_dealloc();
  sub_1000E8180(v2[13]);
  swift_bridgeObjectRelease();
  uint64_t v3 = v2[19];
  uint64_t v4 = v2[18];
  if (v0) {
    uint64_t v5 = sub_1000E465C;
  }
  else {
    uint64_t v5 = sub_1000E4160;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1000E4160()
{
  unint64_t v1 = v0 + 16;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v5 = *(void **)(v0 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *(void **)(v0 + 208);
  uint64_t v43 = v2;
  uint64_t v44 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
LABEL_37:
  }
    uint64_t v8 = sub_10015DF04(0, v8[2] + 1, 1, v8);
  unint64_t v10 = v8[2];
  unint64_t v9 = v8[3];
  unint64_t v42 = v1;
  uint64_t v11 = v5;
  if (v10 >= v9 >> 1) {
    uint64_t v8 = sub_10015DF04((void *)(v9 > 1), v10 + 1, 1, v8);
  }
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 112);
  void v8[2] = v10 + 1;
  char v15 = &v8[5 * v10];
  v15[4] = v43;
  v15[5] = v4;
  v15[6] = v3;
  v15[7] = v44;
  v15[8] = v11;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  uint64_t v5 = (void *)(v13 + 8);
  v16(v12, v14);
  unint64_t v1 = *(void *)(v0 + 168);
  int64_t v19 = *(void *)(v0 + 176);
  *(void *)(v0 + 208) = v8;
  while (1)
  {
    if (v1)
    {
      unint64_t v20 = __clz(__rbit64(v1));
      v1 &= v1 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      unint64_t v22 = *(void *)(v0 + 160);
      goto LABEL_23;
    }
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    int64_t v24 = (unint64_t)((1 << *(unsigned char *)(v0 + 216)) + 63) >> 6;
    unint64_t v22 = *(void *)(v0 + 160);
    if (v23 >= v24) {
      break;
    }
    unint64_t v25 = v22 + 64;
    unint64_t v26 = *(void *)(v22 + 64 + 8 * v23);
    ++v19;
    if (!v26)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v24) {
        break;
      }
      unint64_t v26 = *(void *)(v25 + 8 * v19);
      if (!v26)
      {
        int64_t v19 = v23 + 2;
        if (v23 + 2 >= v24) {
          break;
        }
        unint64_t v26 = *(void *)(v25 + 8 * v19);
        if (!v26)
        {
          int64_t v19 = v23 + 3;
          if (v23 + 3 >= v24) {
            break;
          }
          unint64_t v26 = *(void *)(v25 + 8 * v19);
          if (!v26)
          {
            int64_t v27 = v23 + 4;
            if (v27 >= v24) {
              break;
            }
            unint64_t v26 = *(void *)(v25 + 8 * v27);
            if (!v26)
            {
              while (1)
              {
                int64_t v19 = v27 + 1;
                if (__OFADD__(v27, 1)) {
                  break;
                }
                if (v19 >= v24) {
                  goto LABEL_33;
                }
                unint64_t v26 = *(void *)(v25 + 8 * v19);
                ++v27;
                if (v26) {
                  goto LABEL_22;
                }
              }
              __break(1u);
              return IntentParameter.requestDisambiguation(among:dialog:)(v22, v17, v18);
            }
            int64_t v19 = v27;
          }
        }
      }
    }
LABEL_22:
    unint64_t v1 = (v26 - 1) & v26;
    unint64_t v21 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_23:
    *(void *)(v0 + 168) = v1;
    *(void *)(v0 + 176) = v19;
    uint64_t v5 = *(void **)(*(void *)(v22 + 56) + 8 * v21);
    *(void *)(v0 + 184) = v5;
    unint64_t v28 = v5[2];
    if (v28 >= 2)
    {
      uint64_t v34 = *(void *)(v0 + 120);
      uint64_t v35 = *(void *)(v0 + 128);
      uint64_t v37 = *(void *)(v0 + 104);
      uint64_t v36 = *(void *)(v0 + 112);
      uint64_t v38 = *(void *)(type metadata accessor for LocalizedStringResource() - 8);
      swift_task_alloc();
      (*(void (**)(void))(v38 + 16))();
      swift_bridgeObjectRetain();
      IntentDialog.init(_:)();
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v37, v35, v36);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v36);
      uint64_t v39 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v39;
      *uint64_t v39 = v0;
      v39[1] = sub_1000E3FF0;
      uint64_t v18 = *(void *)(v0 + 104);
      unint64_t v22 = v42;
      uint64_t v17 = v5;
      return IntentParameter.requestDisambiguation(among:dialog:)(v22, v17, v18);
    }
    if (v28)
    {
      uint64_t v29 = v5[4];
      uint64_t v4 = v5[5];
      uint64_t v3 = v5[6];
      uint64_t v30 = v5[7];
      uint64_t v5 = (void *)v5[8];
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      uint64_t v44 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_10015DF04(0, v8[2] + 1, 1, v8);
      }
      unint64_t v32 = v8[2];
      unint64_t v31 = v8[3];
      if (v32 >= v31 >> 1) {
        uint64_t v8 = sub_10015DF04((void *)(v31 > 1), v32 + 1, 1, v8);
      }
      void v8[2] = v32 + 1;
      unint64_t v33 = &v8[5 * v32];
      void v33[4] = v29;
      v33[5] = v4;
      v33[6] = v3;
      v33[7] = v30;
      v33[8] = v5;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      *(void *)(v0 + 208) = v8;
    }
  }
LABEL_33:
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v40 = *(uint64_t (**)(void *))(v0 + 8);
  return v40(v8);
}

uint64_t sub_1000E465C()
{
  uint64_t v37 = v0;
  (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
  if (qword_100264530 != -1) {
LABEL_38:
  }
    swift_once();
  uint64_t v1 = type metadata accessor for Logger();
  sub_10002272C(v1, (uint64_t)qword_100275340);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v4 + 4) = sub_10002F3B8(0xD000000000000066, 0x80000001001EB120, &v36);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s Failed to disambiguate entities", (uint8_t *)v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  swift_errorRelease();

  uint64_t v7 = *(void **)(v0 + 208);
  unint64_t v8 = *(void *)(v0 + 168);
  int64_t v9 = *(void *)(v0 + 176);
LABEL_5:
  *(void *)(v0 + 208) = v7;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v9 << 6);
    uint64_t v12 = *(void *)(v0 + 160);
LABEL_24:
    *(void *)(v0 + 168) = v8;
    *(void *)(v0 + 176) = v9;
    uint64_t v18 = *(void **)(*(void *)(v12 + 56) + 8 * v11);
    *(void *)(v0 + 184) = v18;
    unint64_t v19 = v18[2];
    if (v19 >= 2)
    {
      uint64_t v28 = *(void *)(v0 + 120);
      uint64_t v29 = *(void *)(v0 + 128);
      uint64_t v31 = *(void *)(v0 + 104);
      uint64_t v30 = *(void *)(v0 + 112);
      uint64_t v32 = *(void *)(type metadata accessor for LocalizedStringResource() - 8);
      swift_task_alloc();
      (*(void (**)(void))(v32 + 16))();
      swift_bridgeObjectRetain();
      IntentDialog.init(_:)();
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v31, v29, v30);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v31, 0, 1, v30);
      unint64_t v33 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v33;
      *unint64_t v33 = v0;
      v33[1] = sub_1000E3FF0;
      uint64_t v6 = *(void *)(v0 + 104);
      uint64_t v12 = v0 + 16;
      uint64_t v5 = v18;
      return IntentParameter.requestDisambiguation(among:dialog:)(v12, v5, v6);
    }
    if (v19)
    {
      uint64_t v21 = v18[4];
      uint64_t v20 = v18[5];
      uint64_t v23 = v18[6];
      uint64_t v22 = v18[7];
      uint64_t v24 = v18[8];
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = sub_10015DF04(0, v7[2] + 1, 1, v7);
      }
      unint64_t v26 = v7[2];
      unint64_t v25 = v7[3];
      if (v26 >= v25 >> 1) {
        uint64_t v7 = sub_10015DF04((void *)(v25 > 1), v26 + 1, 1, v7);
      }
      v7[2] = v26 + 1;
      int64_t v27 = &v7[5 * v26];
      void v27[4] = v21;
      v27[5] = v20;
      v27[6] = v23;
      v27[7] = v22;
      v27[8] = v24;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_5;
    }
  }
  int64_t v13 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  int64_t v14 = (unint64_t)((1 << *(unsigned char *)(v0 + 216)) + 63) >> 6;
  uint64_t v12 = *(void *)(v0 + 160);
  if (v13 < v14)
  {
    uint64_t v15 = v12 + 64;
    unint64_t v16 = *(void *)(v12 + 64 + 8 * v13);
    ++v9;
    if (!v16)
    {
      int64_t v9 = v13 + 1;
      if (v13 + 1 >= v14) {
        goto LABEL_34;
      }
      unint64_t v16 = *(void *)(v15 + 8 * v9);
      if (!v16)
      {
        int64_t v9 = v13 + 2;
        if (v13 + 2 >= v14) {
          goto LABEL_34;
        }
        unint64_t v16 = *(void *)(v15 + 8 * v9);
        if (!v16)
        {
          int64_t v9 = v13 + 3;
          if (v13 + 3 >= v14) {
            goto LABEL_34;
          }
          unint64_t v16 = *(void *)(v15 + 8 * v9);
          if (!v16)
          {
            int64_t v17 = v13 + 4;
            if (v17 >= v14) {
              goto LABEL_34;
            }
            unint64_t v16 = *(void *)(v15 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v9 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  break;
                }
                if (v9 >= v14) {
                  goto LABEL_34;
                }
                unint64_t v16 = *(void *)(v15 + 8 * v9);
                ++v17;
                if (v16) {
                  goto LABEL_23;
                }
              }
              __break(1u);
              return IntentParameter.requestDisambiguation(among:dialog:)(v12, v5, v6);
            }
            int64_t v9 = v17;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v9 << 6);
    goto LABEL_24;
  }
LABEL_34:
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = *(uint64_t (**)(void *))(v0 + 8);
  return v34(v7);
}

uint64_t sub_1000E4BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  sub_100028654((uint64_t *)&unk_100265EB0);
  v5[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for IntentDialog();
  v5[14] = v6;
  v5[15] = *(void *)(v6 - 8);
  v5[16] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[17] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[18] = v8;
  v5[19] = v7;
  return _swift_task_switch(sub_1000E4CCC, v8, v7);
}

uint64_t sub_1000E4CCC()
{
  uint64_t v43 = v0;
  uint64_t v1 = (void *)(v0 + 64);
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v0 + 88);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000E7EB4(v3, v2);
  *(void *)(v0 + 160) = v4;
  int64_t v14 = 0;
  char v15 = *(unsigned char *)(v4 + 32);
  *(unsigned char *)(v0 + 216) = v15;
  uint64_t v16 = 1 << v15;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(v4 + 64);
  unint64_t v11 = _swiftEmptyArrayStorage;
  *(void *)(v0 + 208) = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      uint64_t v21 = *(void *)(v0 + 160);
      goto LABEL_27;
    }
    if (__OFADD__(v14++, 1)) {
      break;
    }
    int64_t v23 = (unint64_t)((1 << *(unsigned char *)(v0 + 216)) + 63) >> 6;
    uint64_t v21 = *(void *)(v0 + 160);
    if (v14 >= v23) {
      goto LABEL_41;
    }
    uint64_t v24 = v21 + 64;
    unint64_t v25 = *(void *)(v21 + 64 + 8 * v14);
    if (!v25)
    {
      int64_t v26 = v14 + 1;
      if (v14 + 1 >= v23) {
        goto LABEL_41;
      }
      unint64_t v25 = *(void *)(v24 + 8 * v26);
      if (!v25)
      {
        int64_t v26 = v14 + 2;
        if (v14 + 2 >= v23) {
          goto LABEL_41;
        }
        unint64_t v25 = *(void *)(v24 + 8 * v26);
        if (!v25)
        {
          int64_t v26 = v14 + 3;
          if (v14 + 3 >= v23) {
            goto LABEL_41;
          }
          unint64_t v25 = *(void *)(v24 + 8 * v26);
          if (!v25)
          {
            int64_t v26 = v14 + 4;
            if (v14 + 4 >= v23)
            {
LABEL_41:
              swift_release();
              swift_release();
              goto LABEL_5;
            }
            unint64_t v25 = *(void *)(v24 + 8 * v26);
            if (!v25)
            {
              while (1)
              {
                int64_t v14 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  break;
                }
                if (v14 >= v23) {
                  goto LABEL_41;
                }
                unint64_t v25 = *(void *)(v24 + 8 * v14);
                ++v26;
                if (v25) {
                  goto LABEL_26;
                }
              }
              __break(1u);
              return IntentParameter.requestDisambiguation(among:dialog:)(v21, v5, v6);
            }
          }
        }
      }
      int64_t v14 = v26;
    }
LABEL_26:
    unint64_t v18 = (v25 - 1) & v25;
    unint64_t v20 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_27:
    *(void *)(v0 + 168) = v18;
    *(void *)(v0 + 176) = v14;
    uint64_t v1 = *(void **)(*(void *)(v21 + 56) + 8 * v20);
    *(void *)(v0 + 184) = v1;
    unint64_t v27 = v1[2];
    if (v27 >= 2)
    {
      uint64_t v34 = *(void *)(v0 + 120);
      uint64_t v35 = *(void *)(v0 + 128);
      uint64_t v37 = *(void *)(v0 + 104);
      uint64_t v36 = *(void *)(v0 + 112);
      uint64_t v38 = *(void *)(type metadata accessor for LocalizedStringResource() - 8);
      swift_task_alloc();
      (*(void (**)(void))(v38 + 16))();
      swift_bridgeObjectRetain();
      IntentDialog.init(_:)();
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v37, v35, v36);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v36);
      uint64_t v39 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v39;
      *uint64_t v39 = v0;
      v39[1] = sub_1000E5270;
      uint64_t v6 = *(void *)(v0 + 104);
      uint64_t v21 = v0 + 16;
      uint64_t v5 = v1;
      return IntentParameter.requestDisambiguation(among:dialog:)(v21, v5, v6);
    }
    if (v27)
    {
      uint64_t v28 = v1[5];
      uint64_t v30 = v1[6];
      uint64_t v29 = v1[7];
      uint64_t v40 = v1[8];
      uint64_t v41 = v1[4];
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      swift_retain_n();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v11 = sub_10015E028(0, v11[2] + 1, 1, v11);
      }
      unint64_t v32 = v11[2];
      unint64_t v31 = v11[3];
      uint64_t v1 = (void *)(v32 + 1);
      if (v32 >= v31 >> 1) {
        unint64_t v11 = sub_10015E028((void *)(v31 > 1), v32 + 1, 1, v11);
      }
      void v11[2] = v1;
      unint64_t v33 = &v11[5 * v32];
      void v33[4] = v41;
      v33[5] = v28;
      v33[6] = v30;
      v33[7] = v29;
      v33[8] = v40;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      *(void *)(v0 + 208) = v11;
    }
  }
  __break(1u);
  swift_once();
  uint64_t v7 = type metadata accessor for Logger();
  sub_10002272C(v7, (uint64_t)qword_100275340);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    *(v1 - 1) = sub_10002F3B8(0xD000000000000066, 0x80000001001EB120, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s Failed to map disambiguation key to entities list", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  swift_errorRelease();

  unint64_t v11 = _swiftEmptyArrayStorage;
LABEL_5:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void *))(v0 + 8);
  return v12(v11);
}

uint64_t sub_1000E5270()
{
  uint64_t v2 = *v1;
  (*v1)[25] = v0;
  swift_task_dealloc();
  sub_1000E8180(v2[13]);
  swift_bridgeObjectRelease();
  uint64_t v3 = v2[19];
  uint64_t v4 = v2[18];
  if (v0) {
    uint64_t v5 = sub_1000E58BC;
  }
  else {
    uint64_t v5 = sub_1000E53E0;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1000E53E0()
{
  unint64_t v1 = v0 + 16;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = *(void **)(v0 + 40);
  int64_t v6 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *(void **)(v0 + 208);
  uint64_t v43 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
LABEL_37:
  }
    uint64_t v8 = sub_10015E028(0, v8[2] + 1, 1, v8);
  unint64_t v10 = v8[2];
  unint64_t v9 = v8[3];
  unint64_t v11 = v8;
  unint64_t v42 = v1;
  int64_t v12 = v6;
  if (v10 >= v9 >> 1) {
    unint64_t v11 = sub_10015E028((void *)(v9 > 1), v10 + 1, 1, v8);
  }
  uint64_t v13 = *(void *)(v0 + 120);
  unint64_t v1 = *(void *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 112);
  void v11[2] = v10 + 1;
  char v15 = &v11[5 * v10];
  v15[4] = v43;
  v15[5] = v4;
  v15[6] = v3;
  v15[7] = v5;
  v15[8] = v12;
  uint64_t v16 = v11;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v1, v14);
  unint64_t v19 = *(void *)(v0 + 168);
  int64_t v6 = *(void *)(v0 + 176);
  *(void *)(v0 + 208) = v16;
  while (1)
  {
    if (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v6 << 6);
      unint64_t v22 = *(void *)(v0 + 160);
      goto LABEL_23;
    }
    int64_t v23 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    int64_t v24 = (unint64_t)((1 << *(unsigned char *)(v0 + 216)) + 63) >> 6;
    unint64_t v22 = *(void *)(v0 + 160);
    if (v23 >= v24) {
      break;
    }
    unint64_t v25 = v22 + 64;
    unint64_t v26 = *(void *)(v22 + 64 + 8 * v23);
    ++v6;
    if (!v26)
    {
      int64_t v6 = v23 + 1;
      if (v23 + 1 >= v24) {
        break;
      }
      unint64_t v26 = *(void *)(v25 + 8 * v6);
      if (!v26)
      {
        int64_t v6 = v23 + 2;
        if (v23 + 2 >= v24) {
          break;
        }
        unint64_t v26 = *(void *)(v25 + 8 * v6);
        if (!v26)
        {
          int64_t v6 = v23 + 3;
          if (v23 + 3 >= v24) {
            break;
          }
          unint64_t v26 = *(void *)(v25 + 8 * v6);
          if (!v26)
          {
            int64_t v27 = v23 + 4;
            if (v27 >= v24) {
              break;
            }
            unint64_t v26 = *(void *)(v25 + 8 * v27);
            if (!v26)
            {
              while (1)
              {
                int64_t v6 = v27 + 1;
                if (__OFADD__(v27, 1)) {
                  break;
                }
                if (v6 >= v24) {
                  goto LABEL_33;
                }
                unint64_t v26 = *(void *)(v25 + 8 * v6);
                ++v27;
                if (v26) {
                  goto LABEL_22;
                }
              }
              __break(1u);
              return IntentParameter.requestDisambiguation(among:dialog:)(v22, v17, v18);
            }
            int64_t v6 = v27;
          }
        }
      }
    }
LABEL_22:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v21 = __clz(__rbit64(v26)) + (v6 << 6);
LABEL_23:
    *(void *)(v0 + 168) = v19;
    *(void *)(v0 + 176) = v6;
    uint64_t v8 = *(void **)(v22 + 56);
    uint64_t v5 = (void *)v8[v21];
    *(void *)(v0 + 184) = v5;
    unint64_t v28 = v5[2];
    if (v28 >= 2)
    {
      uint64_t v34 = *(void *)(v0 + 120);
      uint64_t v35 = *(void *)(v0 + 128);
      uint64_t v37 = *(void *)(v0 + 104);
      uint64_t v36 = *(void *)(v0 + 112);
      uint64_t v38 = *(void *)(type metadata accessor for LocalizedStringResource() - 8);
      swift_task_alloc();
      (*(void (**)(void))(v38 + 16))();
      swift_bridgeObjectRetain();
      IntentDialog.init(_:)();
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v37, v35, v36);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v36);
      uint64_t v39 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v39;
      *uint64_t v39 = v0;
      v39[1] = sub_1000E5270;
      uint64_t v18 = *(void *)(v0 + 104);
      unint64_t v22 = v42;
      uint64_t v17 = v5;
      return IntentParameter.requestDisambiguation(among:dialog:)(v22, v17, v18);
    }
    if (v28)
    {
      uint64_t v30 = v5[4];
      uint64_t v29 = v5[5];
      uint64_t v4 = v5[6];
      uint64_t v3 = v5[7];
      uint64_t v31 = v5[8];
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      swift_retain_n();
      uint64_t v43 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = sub_10015E028(0, v16[2] + 1, 1, v16);
      }
      unint64_t v1 = v16[2];
      unint64_t v32 = v16[3];
      uint64_t v5 = (void *)(v1 + 1);
      if (v1 >= v32 >> 1) {
        uint64_t v16 = sub_10015E028((void *)(v32 > 1), v1 + 1, 1, v16);
      }
      v16[2] = v5;
      unint64_t v33 = &v16[5 * v1];
      void v33[4] = v30;
      v33[5] = v29;
      v33[6] = v4;
      v33[7] = v3;
      v33[8] = v43;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      *(void *)(v0 + 208) = v16;
    }
  }
LABEL_33:
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v40 = *(uint64_t (**)(void *))(v0 + 8);
  return v40(v16);
}

uint64_t sub_1000E58BC()
{
  uint64_t v38 = v0;
  (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
  if (qword_100264530 != -1) {
LABEL_38:
  }
    swift_once();
  uint64_t v1 = type metadata accessor for Logger();
  sub_10002272C(v1, (uint64_t)qword_100275340);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v4 + 4) = sub_10002F3B8(0xD000000000000066, 0x80000001001EB120, &v37);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s Failed to disambiguate entities", (uint8_t *)v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  swift_errorRelease();

  uint64_t v7 = *(void **)(v0 + 208);
  unint64_t v8 = *(void *)(v0 + 168);
  int64_t v9 = *(void *)(v0 + 176);
LABEL_5:
  *(void *)(v0 + 208) = v7;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v9 << 6);
    uint64_t v12 = *(void *)(v0 + 160);
LABEL_24:
    *(void *)(v0 + 168) = v8;
    *(void *)(v0 + 176) = v9;
    uint64_t v18 = *(void **)(*(void *)(v12 + 56) + 8 * v11);
    *(void *)(v0 + 184) = v18;
    unint64_t v19 = v18[2];
    if (v19 >= 2)
    {
      uint64_t v28 = *(void *)(v0 + 120);
      uint64_t v29 = *(void *)(v0 + 128);
      uint64_t v31 = *(void *)(v0 + 104);
      uint64_t v30 = *(void *)(v0 + 112);
      uint64_t v32 = *(void *)(type metadata accessor for LocalizedStringResource() - 8);
      swift_task_alloc();
      (*(void (**)(void))(v32 + 16))();
      swift_bridgeObjectRetain();
      IntentDialog.init(_:)();
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v31, v29, v30);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v31, 0, 1, v30);
      unint64_t v33 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v33;
      *unint64_t v33 = v0;
      v33[1] = sub_1000E5270;
      uint64_t v6 = *(void *)(v0 + 104);
      uint64_t v12 = v0 + 16;
      uint64_t v5 = v18;
      return IntentParameter.requestDisambiguation(among:dialog:)(v12, v5, v6);
    }
    if (v19)
    {
      uint64_t v21 = v18[4];
      uint64_t v20 = v18[5];
      uint64_t v23 = v18[6];
      uint64_t v22 = v18[7];
      uint64_t v24 = v18[8];
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      swift_retain_n();
      uint64_t v36 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = sub_10015E028(0, v7[2] + 1, 1, v7);
      }
      unint64_t v26 = v7[2];
      unint64_t v25 = v7[3];
      if (v26 >= v25 >> 1) {
        uint64_t v7 = sub_10015E028((void *)(v25 > 1), v26 + 1, 1, v7);
      }
      v7[2] = v26 + 1;
      int64_t v27 = &v7[5 * v26];
      void v27[4] = v21;
      v27[5] = v20;
      v27[6] = v23;
      v27[7] = v22;
      v27[8] = v36;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_5;
    }
  }
  int64_t v13 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  int64_t v14 = (unint64_t)((1 << *(unsigned char *)(v0 + 216)) + 63) >> 6;
  uint64_t v12 = *(void *)(v0 + 160);
  if (v13 < v14)
  {
    uint64_t v15 = v12 + 64;
    unint64_t v16 = *(void *)(v12 + 64 + 8 * v13);
    ++v9;
    if (!v16)
    {
      int64_t v9 = v13 + 1;
      if (v13 + 1 >= v14) {
        goto LABEL_34;
      }
      unint64_t v16 = *(void *)(v15 + 8 * v9);
      if (!v16)
      {
        int64_t v9 = v13 + 2;
        if (v13 + 2 >= v14) {
          goto LABEL_34;
        }
        unint64_t v16 = *(void *)(v15 + 8 * v9);
        if (!v16)
        {
          int64_t v9 = v13 + 3;
          if (v13 + 3 >= v14) {
            goto LABEL_34;
          }
          unint64_t v16 = *(void *)(v15 + 8 * v9);
          if (!v16)
          {
            int64_t v17 = v13 + 4;
            if (v17 >= v14) {
              goto LABEL_34;
            }
            unint64_t v16 = *(void *)(v15 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v9 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  break;
                }
                if (v9 >= v14) {
                  goto LABEL_34;
                }
                unint64_t v16 = *(void *)(v15 + 8 * v9);
                ++v17;
                if (v16) {
                  goto LABEL_23;
                }
              }
              __break(1u);
              return IntentParameter.requestDisambiguation(among:dialog:)(v12, v5, v6);
            }
            int64_t v9 = v17;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v9 << 6);
    goto LABEL_24;
  }
LABEL_34:
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = *(uint64_t (**)(void *))(v0 + 8);
  return v34(v7);
}

uint8_t *sub_1000E5DEC(uint64_t a1)
{
  id v3 = [v1 mainViewController];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)(a1 + 16);
    if (v5)
    {
      id v28 = v3;
      swift_bridgeObjectRetain();
      uint64_t v6 = (void *)(a1 + 64);
      uint64_t v7 = (uint8_t *)_swiftEmptyArrayStorage;
      do
      {
        if (*v6 == 4)
        {
          uint64_t v11 = *(v6 - 4);
          long long v29 = *(_OWORD *)(v6 - 3);
          uint64_t v12 = *(v6 - 1);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          uint64_t v30 = v7;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_10015E810(0, *((void *)v7 + 2) + 1, 1);
            uint64_t v7 = v30;
          }
          unint64_t v9 = *((void *)v7 + 2);
          unint64_t v8 = *((void *)v7 + 3);
          if (v9 >= v8 >> 1)
          {
            sub_10015E810(v8 > 1, v9 + 1, 1);
            uint64_t v7 = v30;
          }
          *((void *)v7 + 2) = v9 + 1;
          unint64_t v10 = &v7[40 * v9];
          *((void *)v10 + 4) = v11;
          *(_OWORD *)(v10 + 40) = v29;
          *((void *)v10 + 7) = v12;
          *((void *)v10 + 8) = 4;
        }
        v6 += 5;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
      if (*((void *)v7 + 2))
      {
        id v13 = [v28 recordingInProgressUUID];
        if (v13
          && (int64_t v14 = v13,
              id v15 = [self sharedRecordingsModelInteractor],
              id v16 = [v15 uuidOfUserFolderForRecordingWithUUID:v14],
              v15,
              v14,
              v16))
        {
          uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v19 = v18;

          uint64_t v20 = sub_1000E7A64((uint64_t)v7, v17, v19);
          swift_release();
          swift_bridgeObjectRelease();
          if (*(void *)(v20 + 16))
          {

            return (uint8_t *)v20;
          }
          else
          {
            swift_bridgeObjectRelease();
            sub_1000E7C2C();
            swift_allocError();
            *int64_t v27 = 1;
            swift_willThrow();
          }
        }
        else
        {
        }
      }
      else
      {
        swift_release();
        sub_1000E7C2C();
        swift_allocError();
        *unint64_t v25 = 0;
        swift_willThrow();
      }
    }
    else
    {
      swift_bridgeObjectRetain();

      return (uint8_t *)a1;
    }
  }
  else
  {
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v7 = (uint8_t *)sub_10002272C(v21, (uint64_t)qword_100275340);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      sub_10002F3B8(0xD000000000000033, 0x80000001001EB0E0, (uint64_t *)&v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s Unable to delete folders. RCMainViewController is nil.", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1000E72E4();
    swift_allocError();
    *uint64_t v24 = 0;
    swift_willThrow();
  }
  return v7;
}

uint64_t sub_1000E6238(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v4 = type metadata accessor for ConfirmationActionName();
  void v2[5] = v4;
  v2[6] = *(void *)(v4 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ConfirmationConditions();
  v2[8] = v5;
  v2[9] = *(void *)(v5 - 8);
  v2[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for IntentDialog();
  v2[11] = v6;
  v2[12] = *(void *)(v6 - 8);
  v2[13] = swift_task_alloc();
  v2[2] = a1;
  type metadata accessor for MainActor();
  v2[14] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[15] = v8;
  v2[16] = v7;
  return _swift_task_switch(sub_1000E63EC, v8, v7);
}

uint64_t sub_1000E63EC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    id v3 = self;
    swift_bridgeObjectRetain();
    uint64_t v4 = v1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      id v5 = [v3 sharedRecordingsModelInteractor];
      NSString v6 = String._bridgeToObjectiveC()();
      id v7 = [v5 folderForUUID:v6];

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if (v7)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v4 += 40;
      --v2;
    }
    while (v2);
    uint64_t v8 = v29;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v29;
  }
  id v9 = [self sharedRecordingsModelInteractor];
  v8[17] = v9;
  if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
  {
    uint64_t v10 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10) {
      goto LABEL_12;
    }
LABEL_26:
    swift_bridgeObjectRelease();

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v8[1];
    goto LABEL_28;
  }
LABEL_35:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_26;
  }
LABEL_12:
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
  {
    uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage[4];
    swift_unknownObjectRetain();
  }
  id v12 = [v9 playableCountForFolder:v11];
  swift_unknownObjectRelease();
  if (!v12)
  {
    if (v10 != 1)
    {
      uint64_t v17 = 5;
      while (1)
      {
        uint64_t v18 = v17 - 4;
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
        {
          uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v20 = v17 - 3;
          if (__OFADD__(v18, 1)) {
            goto LABEL_34;
          }
        }
        else
        {
          uint64_t v19 = _swiftEmptyArrayStorage[v17];
          swift_unknownObjectRetain();
          uint64_t v20 = v17 - 3;
          if (__OFADD__(v18, 1))
          {
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
        }
        id v21 = [v9 playableCountForFolder:v19];
        swift_unknownObjectRelease();
        if (v21) {
          goto LABEL_15;
        }
        ++v17;
        if (v20 == v10) {
          goto LABEL_26;
        }
      }
    }
    goto LABEL_26;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  id v13 = [self sharedSettingsUserDefaults];
  if (v13)
  {
    int64_t v14 = v13;
    [v13 rc_deletionIsImmediate];

    uint64_t v15 = type metadata accessor for LocalizedStringResource();
    v8[18] = v15;
    uint64_t v16 = *(void *)(v15 - 8);
    v8[19] = v16;
    v8[20] = swift_task_alloc();
    LocalizedStringResource.init(stringLiteral:)();
    swift_task_alloc();
    (*(void (**)(void))(v16 + 16))();
    IntentDialog.init(_:)();
    swift_task_dealloc();
    v8[3] = _swiftEmptyArrayStorage;
    sub_1000E7530();
    sub_100028654(&qword_100265E98);
    sub_100027F5C(&qword_100265EA0, &qword_100265E98);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    static ConfirmationActionName.continue.getter();
    uint64_t v24 = (void *)swift_task_alloc();
    v8[21] = v24;
    unint64_t v25 = sub_100031874();
    *uint64_t v24 = v8;
    v24[1] = sub_1000E69C8;
    uint64_t v26 = v8[13];
    uint64_t v27 = v8[10];
    uint64_t v28 = v8[7];
    return AppIntent.requestConfirmation(conditions:actionName:dialog:)(v27, v28, v26, &type metadata for DeleteFolder, v25);
  }
  swift_release();
  sub_1000E74DC();
  swift_allocError();
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v8[1];
LABEL_28:
  return v22();
}

uint64_t sub_1000E69C8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[10];
  uint64_t v4 = v2[9];
  uint64_t v5 = v2[8];
  (*(void (**)(void, void))(v2[6] + 8))(v2[7], v2[5]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = v2[16];
  uint64_t v7 = v2[15];
  if (v0) {
    uint64_t v8 = sub_1000E6C94;
  }
  else {
    uint64_t v8 = sub_1000E6BAC;
  }
  return _swift_task_switch(v8, v7, v6);
}

uint64_t sub_1000E6BAC()
{
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 96);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1000E6C94()
{
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 96);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1000E6D7C(uint64_t a1, void *a2, uint64_t a3)
{
  v3[10] = a1;
  v3[11] = a3;
  v3[12] = *a2;
  type metadata accessor for MainActor();
  v3[13] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000E6E1C, v5, v4);
}

uint64_t sub_1000E6E1C()
{
  swift_release();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    IntentParameter.wrappedValue.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v3 = v0[6];
    IntentParameter.wrappedValue.getter();
    EntityProperty.wrappedValue.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_1000E7058(v3, v0[2], v0[3]);
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = (uint64_t *)v0[10];
  v4[3] = sub_100028654((uint64_t *)&unk_100268AA0);
  v4[4] = sub_100027F5C((unint64_t *)&qword_100265A50, (uint64_t *)&unk_100268AA0);
  sub_1000DED60(v4);
  static IntentResult.result<>()();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000E6FAC(uint64_t a1, void *a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100015B60;
  return sub_1000E6D7C(a1, a2, v2);
}

void sub_1000E7058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = [v3 mainViewController];
  if (v7)
  {
    uint64_t v8 = v7;
    if ([v7 isRecording])
    {
      sub_1000E7290();
      swift_allocError();
      *uint64_t v9 = a2;
      v9[1] = a3;
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
    else
    {
      NSString v14 = String._bridgeToObjectiveC()();
      [v8 goToFolderOfType:a1 withName:v14 animated:1 completion:0];
    }
  }
  else
  {
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10002272C(v10, (uint64_t)qword_100275340);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)id v13 = 136315138;
      sub_10002F3B8(0xD000000000000022, 0x80000001001EB010, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s Unable to select recording. RCMainViewController is nil.", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

unint64_t sub_1000E7290()
{
  unint64_t result = qword_100265E68;
  if (!qword_100265E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265E68);
  }
  return result;
}

unint64_t sub_1000E72E4()
{
  unint64_t result = qword_100265E80;
  if (!qword_100265E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265E80);
  }
  return result;
}

void (*sub_1000E7338(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *)
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000E7454(v6, a2, a3);
  return sub_1000E73A0;
}

void (*sub_1000E73A4(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *)
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000E7588(v6, a2, a3);
  return sub_1000E73A0;
}

void sub_1000E740C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_1000E7454(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_unknownObjectRetain();
LABEL_5:
    uint64_t *v3 = v4;
    return destroy for AppStoreRatingModel;
  }
  __break(1u);
  return result;
}

uint64_t destroy for AppStoreRatingModel()
{
  return swift_unknownObjectRelease();
}

unint64_t sub_1000E74DC()
{
  unint64_t result = qword_100265E88;
  if (!qword_100265E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265E88);
  }
  return result;
}

unint64_t sub_1000E7530()
{
  unint64_t result = qword_100265E90;
  if (!qword_100265E90)
  {
    type metadata accessor for ConfirmationConditions();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265E90);
  }
  return result;
}

void (*sub_1000E7588(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return destroy for AudioAssetReaderOutput.SampleBuffer;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E7608(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3 = v2;
  id v4 = &_swiftEmptyDictionarySingleton;
  uint64_t v40 = &_swiftEmptyDictionarySingleton;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = (_OWORD *)(a1 + 56);
    while (1)
    {
      long long v35 = *(v6 - 1);
      long long v36 = *v6;
      uint64_t v33 = v5;
      uint64_t v34 = *((void *)v6 - 3);
      uint64_t v37 = v34;
      long long v38 = v35;
      long long v39 = v36;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v9 = a2(&v37);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        return (uint64_t)v4;
      }
      uint64_t v11 = v9;
      uint64_t v12 = v10;
      unint64_t v14 = sub_1001681C0(v9, v10);
      uint64_t v15 = v4[2];
      BOOL v16 = (v13 & 1) == 0;
      uint64_t v17 = v15 + v16;
      if (__OFADD__(v15, v16)) {
        break;
      }
      char v18 = v13;
      if (v4[3] < v17)
      {
        sub_1000D2D10(v17, 1);
        id v4 = v40;
        unint64_t v19 = sub_1001681C0(v11, v12);
        if ((v18 & 1) != (v20 & 1)) {
          goto LABEL_22;
        }
        unint64_t v14 = v19;
      }
      if (v18)
      {
        swift_bridgeObjectRelease();
        uint64_t v21 = v4[7];
        uint64_t v22 = *(void **)(v21 + 8 * v14);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v21 + 8 * v14) = v22;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v22 = sub_10015DF04(0, v22[2] + 1, 1, v22);
          *(void *)(v21 + 8 * v14) = v22;
        }
        uint64_t v3 = 0;
        unint64_t v25 = v22[2];
        unint64_t v24 = v22[3];
        if (v25 >= v24 >> 1)
        {
          uint64_t v22 = sub_10015DF04((void *)(v24 > 1), v25 + 1, 1, v22);
          *(void *)(v21 + 8 * v14) = v22;
        }
        uint64_t v7 = v33;
        v22[2] = v25 + 1;
        uint64_t v8 = &v22[5 * v25];
        void v8[4] = v34;
        *(_OWORD *)(v8 + 5) = v35;
        *(_OWORD *)(v8 + 7) = v36;
      }
      else
      {
        sub_100028654(&qword_100265F48);
        uint64_t v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = xmmword_1001F1BD0;
        *(void *)(v26 + 32) = v34;
        *(_OWORD *)(v26 + 40) = v35;
        *(_OWORD *)(v26 + 56) = v36;
        v4[(v14 >> 6) + 8] |= 1 << v14;
        uint64_t v27 = (uint64_t *)(v4[6] + 16 * v14);
        *uint64_t v27 = v11;
        v27[1] = v12;
        *(void *)(v4[7] + 8 * v14) = v26;
        uint64_t v28 = v4[2];
        BOOL v29 = __OFADD__(v28, 1);
        uint64_t v30 = v28 + 1;
        if (v29) {
          goto LABEL_21;
        }
        v4[2] = v30;
        uint64_t v3 = 0;
        uint64_t v7 = v33;
      }
      uint64_t v6 = (_OWORD *)((char *)v6 + 40);
      uint64_t v5 = v7 - 1;
      if (!v5) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return (uint64_t)v4;
  }
  return result;
}

uint64_t sub_1000E78F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    unint64_t v6 = 0;
    uint64_t v7 = result + 40;
    uint64_t v8 = -(uint64_t)v3;
    uint64_t v18 = result + 40;
    do
    {
      if (v6 <= v3) {
        unint64_t v9 = v3;
      }
      else {
        unint64_t v9 = v6;
      }
      uint64_t v10 = -(uint64_t)v9;
      for (unint64_t i = (uint64_t *)(v7 + 16 * v6++); ; i += 2)
      {
        if (v10 + v6 == 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v12 = *(i - 1);
        uint64_t v13 = *i;
        if (v12 != a2 || v13 != a3)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            break;
          }
        }
        ++v6;
        if (v8 + v6 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
      }
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = sub_10015E7F0(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v16 = _swiftEmptyArrayStorage[2];
      unint64_t v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1) {
        uint64_t result = sub_10015E7F0(v15 > 1, v16 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v16 + 1;
      uint64_t v17 = (char *)&_swiftEmptyArrayStorage[2 * v16];
      *((void *)v17 + 4) = v12;
      *((void *)v17 + 5) = v13;
      unint64_t v3 = v19;
      uint64_t v7 = v18;
    }
    while (v8 + v6);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_1000E7A64(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v6 = 0;
  uint64_t v7 = -(uint64_t)v3;
  uint64_t v8 = result + 64;
  unint64_t v9 = _swiftEmptyArrayStorage;
  unint64_t v22 = *(void *)(result + 16);
  do
  {
    unint64_t v24 = v9;
    if (v6 <= v3) {
      unint64_t v10 = v3;
    }
    else {
      unint64_t v10 = v6;
    }
    uint64_t v11 = -(uint64_t)v10;
    for (unint64_t i = (void *)(v8 + 40 * v6++); ; i += 5)
    {
      if (v11 + v6 == 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v13 = *(i - 4);
      uint64_t v14 = *(i - 3);
      if (v13 != a2 || v14 != a3)
      {
        uint64_t v16 = *i;
        long long v25 = *((_OWORD *)i - 1);
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
      }
      ++v6;
      if (v7 + v6 == 1) {
        return (uint64_t)v24;
      }
    }
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    unint64_t v9 = v24;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_10015E810(0, v24[2] + 1, 1);
      unint64_t v9 = v24;
    }
    uint64_t v8 = v23;
    unint64_t v18 = v9[2];
    unint64_t v17 = v9[3];
    unint64_t v19 = v18 + 1;
    long long v20 = v25;
    if (v18 >= v17 >> 1)
    {
      uint64_t result = sub_10015E810(v17 > 1, v18 + 1, 1);
      unint64_t v19 = v18 + 1;
      long long v20 = v25;
      uint64_t v8 = v23;
      unint64_t v9 = v24;
    }
    void v9[2] = v19;
    uint64_t v21 = &v9[5 * v18];
    v21[4] = v13;
    v21[5] = v14;
    *((_OWORD *)v21 + 3) = v20;
    v21[8] = v16;
    unint64_t v3 = v22;
  }
  while (v7 + v6);
  return (uint64_t)v9;
}

unint64_t sub_1000E7C2C()
{
  unint64_t result = qword_100265EA8;
  if (!qword_100265EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265EA8);
  }
  return result;
}

void sub_1000E7C80()
{
  id v1 = [v0 mainViewController];
  if (v1)
  {
    uint64_t v2 = v1;
    if ([v1 isRecording])
    {
      EntityProperty.wrappedValue.getter();
      uint64_t v3 = v9[1];
      sub_1000E8234();
      swift_allocError();
      void *v4 = v9[0];
      v4[1] = v3;
      swift_willThrow();

      return;
    }
    unint64_t v6 = String._bridgeToObjectiveC()();
    [v2 selectRecordingWithUUID:v6 returnToBrowse:1];
  }
  else
  {
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10002272C(v5, (uint64_t)qword_100275340);
    unint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      v9[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      void v9[3] = sub_10002F3B8(0xD000000000000013, 0x80000001001EB1C0, v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s Unable to select recording. RCMainViewController is nil.", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000E7EB4(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3 = v2;
  id v4 = &_swiftEmptyDictionarySingleton;
  uint64_t v43 = &_swiftEmptyDictionarySingleton;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    unint64_t v6 = (uint64_t *)(a1 + 64);
    while (1)
    {
      uint64_t v9 = *(v6 - 4);
      long long v38 = *(_OWORD *)(v6 - 3);
      uint64_t v11 = *(v6 - 1);
      uint64_t v10 = *v6;
      uint64_t v39 = v9;
      long long v40 = v38;
      uint64_t v41 = v11;
      uint64_t v42 = v10;
      uint64_t v36 = v5;
      uint64_t v37 = v10;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v12 = a2(&v39);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v4;
      }
      uint64_t v14 = v12;
      uint64_t v15 = v13;
      unint64_t v17 = sub_1001681C0(v12, v13);
      uint64_t v18 = v4[2];
      BOOL v19 = (v16 & 1) == 0;
      uint64_t v20 = v18 + v19;
      if (__OFADD__(v18, v19)) {
        break;
      }
      char v21 = v16;
      if (v4[3] < v20)
      {
        sub_1000D2D1C(v20, 1);
        id v4 = v43;
        unint64_t v22 = sub_1001681C0(v14, v15);
        if ((v21 & 1) != (v23 & 1)) {
          goto LABEL_22;
        }
        unint64_t v17 = v22;
      }
      if (v21)
      {
        swift_bridgeObjectRelease();
        uint64_t v24 = v4[7];
        long long v25 = *(void **)(v24 + 8 * v17);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v24 + 8 * v17) = v25;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          long long v25 = sub_10015E028(0, v25[2] + 1, 1, v25);
          *(void *)(v24 + 8 * v17) = v25;
        }
        unint64_t v28 = v25[2];
        unint64_t v27 = v25[3];
        if (v28 >= v27 >> 1)
        {
          long long v25 = sub_10015E028((void *)(v27 > 1), v28 + 1, 1, v25);
          *(void *)(v24 + 8 * v17) = v25;
        }
        uint64_t v3 = 0;
        uint64_t v7 = v36;
        _OWORD v25[2] = v28 + 1;
        uint64_t v8 = &v25[5 * v28];
        void v8[4] = v9;
        *(_OWORD *)(v8 + 5) = v38;
        v8[7] = v11;
        char v8[8] = v37;
      }
      else
      {
        sub_100028654(&qword_10026A010);
        uint64_t v29 = swift_allocObject();
        *(_OWORD *)(v29 + 16) = xmmword_1001F1BD0;
        *(void *)(v29 + 32) = v9;
        *(_OWORD *)(v29 + 40) = v38;
        *(void *)(v29 + 56) = v11;
        *(void *)(v29 + 64) = v37;
        v4[(v17 >> 6) + 8] |= 1 << v17;
        uint64_t v30 = (uint64_t *)(v4[6] + 16 * v17);
        *uint64_t v30 = v14;
        v30[1] = v15;
        *(void *)(v4[7] + 8 * v17) = v29;
        uint64_t v31 = v4[2];
        BOOL v32 = __OFADD__(v31, 1);
        uint64_t v33 = v31 + 1;
        if (v32) {
          goto LABEL_21;
        }
        v4[2] = v33;
        uint64_t v3 = 0;
        uint64_t v7 = v36;
      }
      v6 += 5;
      uint64_t v5 = v7 - 1;
      if (!v5) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return (uint64_t)v4;
  }
  return result;
}

uint64_t sub_1000E8180(uint64_t a1)
{
  uint64_t v2 = sub_100028654((uint64_t *)&unk_100265EB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000E81E0()
{
  unint64_t result = qword_100265EC8;
  if (!qword_100265EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265EC8);
  }
  return result;
}

unint64_t sub_1000E8234()
{
  unint64_t result = qword_100265F30;
  if (!qword_100265F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265F30);
  }
  return result;
}

unint64_t sub_1000E8288()
{
  unint64_t result = qword_100265F38;
  if (!qword_100265F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100265F38);
  }
  return result;
}

uint64_t sub_1000E82DC(void **a1)
{
  id v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if ([v1 mode] == 2 || !objc_msgSend(v1, "mode"))
    {
      swift_retain();
      CurrentValueSubject.send(_:)();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1000E839C()
{
  swift_release();

  return swift_deallocClassInstance();
}

char *sub_1000E8400()
{
  uint64_t v1 = sub_100028654(&qword_1002660E0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100028654(&qword_1002660E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[OBJC_IVAR___RCLockScreenCoordinator_willPauseForRecording] = 0;
  *(void *)&v0[OBJC_IVAR___RCLockScreenCoordinator_cancellable] = 0;
  uint64_t v9 = (objc_class *)type metadata accessor for LockScreenCoordinator();
  v19.receiver = v0;
  v19.super_class = v9;
  [super init];
  uint64_t v11 = self;
  uint64_t v12 = (char *)v10;
  id v13 = [v11 sharedAppDelegate];
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = [v13 dependencyContainer];

    if (v15)
    {
      sub_10002F970((uint64_t)v15 + OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_recordingStatePublisher, (uint64_t)v18);

      uint64_t v17 = *(void *)(*sub_10001510C(v18, v18[3]) + 32);
      sub_100028654(&qword_1002660F0);
      sub_100027F5C(&qword_1002660F8, &qword_1002660F0);
      Publisher.dropFirst(_:)();
      sub_10002F48C((uint64_t)v18);
      sub_100027F5C(&qword_100266100, &qword_1002660E0);
      Publisher<>.removeDuplicates()();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      swift_allocObject();
      swift_unknownObjectWeakInit();
      sub_100027F5C(&qword_100266108, &qword_1002660E8);
      id v15 = (id)Publisher<>.sink(receiveValue:)();
      swift_release();

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {
    }
  }
  else
  {

    id v15 = 0;
  }
  *(void *)&v12[OBJC_IVAR___RCLockScreenCoordinator_cancellable] = v15;
  swift_release();
  return v12;
}

void sub_1000E8774(unsigned char *a1)
{
  if (*a1 == 1)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong) {
      return;
    }
    uint64_t v2 = (void *)Strong;
    uint64_t v3 = (unsigned char *)(Strong + OBJC_IVAR___RCLockScreenCoordinator_willPauseForRecording);
  }
  else
  {
    swift_beginAccess();
    uint64_t v4 = swift_unknownObjectWeakLoadStrong();
    if (!v4) {
      return;
    }
    uint64_t v2 = (void *)v4;
    uint64_t v3 = (unsigned char *)(v4 + OBJC_IVAR___RCLockScreenCoordinator_willPauseForRecording);
    if ((*(unsigned char *)(v4 + OBJC_IVAR___RCLockScreenCoordinator_willPauseForRecording) & 1) == 0)
    {
      id v5 = [objc_allocWithZone((Class)SBSLockScreenService) init];
      [v5 lockDeviceAnimated:1 withCompletion:0];
      [v5 invalidate];
    }
  }
  unsigned char *v3 = 0;
}

id sub_1000E88A0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LockScreenCoordinator();
  return [super dealloc];
}

uint64_t type metadata accessor for LockScreenCoordinator()
{
  return self;
}

void sub_1000E8908(char a1)
{
  id v2 = [self sharedAppDelegate];
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = [v2 defaultSceneDelegate];

    if (v4)
    {
      id v12 = [v4 mainViewController];

      if (v12)
      {
        if (a1)
        {
          [v12 performDoneButtonFromLockScreenInput];
          id v11 = [objc_allocWithZone((Class)SBSLockScreenService) init];
          [v11 lockDeviceAnimated:1 withCompletion:0];
          [v11 invalidate];

          id v5 = v11;
        }
        else
        {
          id v6 = [self serviceWithDefaultShellEndpoint];
          if (v6)
          {
            uint64_t v7 = v6;
            [v12 expandCardFromLockScreenInput];
            sub_100028654(&qword_1002660D8);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1001F1BD0;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            AnyHashable.init<A>(_:)();
            *(void *)(inited + 96) = &type metadata for Bool;
            *(unsigned char *)(inited + 72) = 1;
            sub_10010EB68(inited);
            Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v10 = [self optionsWithDictionary:isa];

            [v7 openApplication:RCVoiceMemosBundleID withOptions:v10 completion:0];
            return;
          }
          id v5 = v12;
        }
      }
    }
  }
}

uint64_t sub_1000E8B70()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000E8BA8(unsigned char *a1)
{
}

uint64_t sub_1000E8BB0()
{
  return static AttributeScope.decodingConfiguration.getter();
}

uint64_t sub_1000E8BC8()
{
  return static AttributeScope.encodingConfiguration.getter();
}

uint64_t sub_1000E8BE0()
{
  return static AttributeScope.decodingConfiguration.getter();
}

uint64_t sub_1000E8C20()
{
  return static AttributeScope.encodingConfiguration.getter();
}

uint64_t sub_1000E8C60()
{
  return static DecodableAttributedStringKey<>.decode(from:)();
}

uint64_t sub_1000E8CE4()
{
  return static EncodableAttributedStringKey<>.encode(_:to:)();
}

uint64_t sub_1000E8D68()
{
  return 0x676E6152656D6974;
}

uint64_t sub_1000E8D84()
{
  return static AttributedStringKey.runBoundaries.getter();
}

uint64_t sub_1000E8D9C()
{
  return static AttributedStringKey.inheritedByAddedText.getter() & 1;
}

uint64_t sub_1000E8DB8()
{
  return static AttributedStringKey.invalidationConditions.getter();
}

uint64_t sub_1000E8DD0()
{
  return AttributeDynamicLookup.subscript.getter();
}

uint64_t sub_1000E8E28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100266110);
  id v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_1000E8E98(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_100266110);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1000E8F00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100266110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000E8F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100266110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000E8FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100266110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000E9038(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100266110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000E90A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E90B4);
}

uint64_t sub_1000E90B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100266110);
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000E9124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E9138);
}

uint64_t sub_1000E9138(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100266110);
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TranscriptionCodingContainer()
{
  uint64_t result = qword_100266170;
  if (!qword_100266170) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000E91F8()
{
  sub_1000E9284();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000E9284()
{
  if (!qword_100266180)
  {
    type metadata accessor for AttributedString();
    sub_1000E9320();
    sub_1000E9374();
    unint64_t v0 = type metadata accessor for CodableConfiguration();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100266180);
    }
  }
}

unint64_t sub_1000E9320()
{
  unint64_t result = qword_100266188;
  if (!qword_100266188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266188);
  }
  return result;
}

unint64_t sub_1000E9374()
{
  unint64_t result = qword_100266190;
  if (!qword_100266190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266190);
  }
  return result;
}

ValueMetadata *type metadata accessor for VMTimeRangeAttribute()
{
  return &type metadata for VMTimeRangeAttribute;
}

ValueMetadata *_s26VoiceMemosStringAttributesVMa()
{
  return &_s26VoiceMemosStringAttributesVN;
}

unint64_t sub_1000E93EC()
{
  unint64_t result = qword_1002661C0;
  if (!qword_1002661C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002661C0);
  }
  return result;
}

uint64_t sub_1000E9440()
{
  return 1;
}

Swift::Int sub_1000E9448()
{
  return Hasher._finalize()();
}

void sub_1000E948C()
{
}

Swift::Int sub_1000E94B4()
{
  return Hasher._finalize()();
}

unint64_t sub_1000E94F4()
{
  return 0xD000000000000010;
}

uint64_t sub_1000E9510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E9F64(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000E953C()
{
  return 0;
}

void sub_1000E9548(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000E9554(uint64_t a1)
{
  unint64_t v2 = sub_1000E9B74();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E9590(uint64_t a1)
{
  unint64_t v2 = sub_1000E9B74();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E95CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = sub_100028654(&qword_1002661D8);
  uint64_t v21 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TranscriptionCodingContainer();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  id v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = AttributedString.init()();
  __chkstk_darwin(v13);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v12, v9);
  swift_getKeyPath();
  sub_1000E9B20();
  CodableConfiguration<>.init(wrappedValue:from:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_10001510C(a1, a1[3]);
  sub_1000E9B74();
  uint64_t v14 = v22;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v14)
  {
    uint64_t v15 = sub_100028654(&qword_100266110);
    unint64_t v22 = &v20;
    uint64_t v16 = *(void *)(v15 - 8);
    __chkstk_darwin(v15);
    uint64_t v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1000E9C88(&qword_1002661F0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
    (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v8, v18, v15);
    sub_1000E9C24((uint64_t)v8, v20);
  }
  sub_10002F48C((uint64_t)a1);
  return sub_1000E9BC8((uint64_t)v8);
}

uint64_t sub_1000E9968@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E95CC(a1, a2);
}

uint64_t sub_1000E9980(void *a1)
{
  uint64_t v2 = sub_100028654(&qword_1002661F8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001510C(a1, a1[3]);
  sub_1000E9B74();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100028654(&qword_100266110);
  sub_1000E9C88(&qword_100266200);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1000E9AE0()
{
  return sub_1000E9CD0(&qword_1002661C8);
}

unint64_t sub_1000E9B20()
{
  unint64_t result = qword_1002661E0;
  if (!qword_1002661E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002661E0);
  }
  return result;
}

unint64_t sub_1000E9B74()
{
  unint64_t result = qword_1002661E8;
  if (!qword_1002661E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002661E8);
  }
  return result;
}

uint64_t sub_1000E9BC8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TranscriptionCodingContainer();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E9C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TranscriptionCodingContainer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E9C88(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100027F14(&qword_100266110);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E9CD0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100027F14(&qword_1002661D0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TranscriptionCodingContainer.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for TranscriptionCodingContainer.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000E9E24);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptionCodingContainer.CodingKeys()
{
  return &type metadata for TranscriptionCodingContainer.CodingKeys;
}

unint64_t sub_1000E9E60()
{
  unint64_t result = qword_100266218;
  if (!qword_100266218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266218);
  }
  return result;
}

unint64_t sub_1000E9EB8()
{
  unint64_t result = qword_100266220;
  if (!qword_100266220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266220);
  }
  return result;
}

unint64_t sub_1000E9F10()
{
  unint64_t result = qword_100266228;
  if (!qword_100266228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266228);
  }
  return result;
}

uint64_t sub_1000E9F64(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001001EB390)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_1000E9FEC()
{
  unint64_t result = qword_100266230;
  if (!qword_100266230)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100266230);
  }
  return result;
}

uint64_t sub_1000EA02C()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1000EA03C(void *a1)
{
  id v1 = [a1 activeLayoutMode];
  if ((unint64_t)v1 + 1 < 6) {
    return (0x38u >> ((_BYTE)v1 + 1)) & 1;
  }
  if (qword_100264530 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10002272C(v3, (uint64_t)qword_100275340);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  uint64_t v5 = Logger.logObject.getter();
  if (os_log_type_enabled(v5, v4))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    sub_10002F3B8(0xD000000000000031, 0x80000001001EB420, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v4, "%s Unexpected layout mode", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return 0;
}

BOOL sub_1000EA1DC()
{
  unint64_t v0 = self;
  id v1 = [v0 sharedAppDelegate];
  if (!v1) {
    return 0;
  }
  char v2 = v1;
  id v3 = [v1 platterSceneDelegate];
  BOOL v4 = (BOOL)v3;
  if (!v3)
  {
LABEL_15:

    return v4;
  }
  id v5 = [v3 platterViewController];

  if (!v5)
  {

    return 0;
  }
  id v6 = [v2 defaultSceneDelegate];
  if (v6
    && (uint64_t v7 = v6,
        id v8 = [v6 window],
        v7,
        id v9 = [v8 windowScene],
        v8,
        v9))
  {
    id v10 = [v9 activationState];

    BOOL v4 = v10 != 0;
  }
  else
  {
    BOOL v4 = 1;
  }
  id v11 = [v2 dynamicIslandSceneDelegate];

  if (!v11)
  {

    goto LABEL_15;
  }
  int v12 = sub_1000EA03C(v5);
  id v13 = [v0 sharedAppDelegate];
  if (v13
    && (uint64_t v14 = v13,
        id v15 = [v13 connectedLockScreenSceneDelegate],
        v14,
        v15))
  {
    unsigned int v16 = [v15 lockscreenWillDismissAfterRecording];

    return v4 & (v12 | v16);
  }
  else
  {

    return v4 & v12;
  }
}

uint64_t sub_1000EA3C4()
{
  type metadata accessor for MainActor();
  v0[4] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[5] = v2;
  v0[6] = v1;
  return _swift_task_switch(sub_1000EA458, v2, v1);
}

uint64_t sub_1000EA458()
{
  uint64_t v21 = v0;
  if (sub_1000EA1DC()
    && (id v1 = [self sharedAppDelegate],
        (v0[7] = v1) != 0))
  {
    uint64_t v2 = v1;
    id v3 = [v1 platterSceneDelegate];
    if (v3)
    {
      uint64_t v4 = v3;
      id v5 = [v3 platterViewController];
      v0[8] = v5;

      if (v5)
      {
        if (qword_100264530 != -1) {
          swift_once();
        }
        uint64_t v6 = type metadata accessor for Logger();
        v0[9] = sub_10002272C(v6, (uint64_t)qword_100275340);
        uint64_t v7 = Logger.logObject.getter();
        os_log_type_t v8 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v7, v8))
        {
          id v9 = (uint8_t *)swift_slowAlloc();
          uint64_t v20 = swift_slowAlloc();
          *(_DWORD *)id v9 = 136315138;
          v0[3] = sub_10002F3B8(0xD000000000000024, 0x80000001001EB3F0, &v20);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s Preparing to present recording stopped success state", v9, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        id v10 = [self sharedStyleProvider];
        v0[10] = v10;
        [v5 displayRecordingSavedStatusMessage];
        id v11 = [v2 dynamicIslandSceneDelegate];

        int v12 = &selRef_bannerStatusMessageDisplayLength;
        if (v11) {
          int v12 = &selRef_dynamicIslandStatusMessageDisplayLength;
        }
        id v13 = [v10 *v12];
        double v15 = v14 * 1000000000.0;
        if ((~*(void *)&v15 & 0x7FF0000000000000) != 0)
        {
          if (v15 > -1.0)
          {
            if (v15 < 1.84467441e19)
            {
              unint64_t v16 = (unint64_t)v15;
              uint64_t v17 = (void *)swift_task_alloc();
              v0[11] = v17;
              *uint64_t v17 = v0;
              v17[1] = sub_1000EA7E4;
              id v13 = (id)v16;
              return static Task<>.sleep(nanoseconds:)(v13);
            }
LABEL_24:
            __break(1u);
            return static Task<>.sleep(nanoseconds:)(v13);
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_24;
      }
    }
    swift_release();
  }
  else
  {
    swift_release();
  }
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1000EA7E4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(void *)(v2 + 40);
  if (v0) {
    id v5 = sub_1000EA9A0;
  }
  else {
    id v5 = sub_1000EA920;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1000EA920()
{
  id v1 = *(void **)(v0 + 80);
  uint64_t v2 = *(void **)(v0 + 64);

  swift_release();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1000EA9A0()
{
  uint64_t v12 = v0;
  swift_release();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void **)(v0 + 80);
    uint64_t v4 = *(void **)(v0 + 56);
    uint64_t v5 = *(void **)(v0 + 64);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v0 + 16) = sub_10002F3B8(0xD000000000000024, 0x80000001001EB3F0, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s Unable to present success state", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v7 = *(void **)(v0 + 80);
    os_log_type_t v8 = *(void **)(v0 + 64);
  }
  swift_errorRelease();

  id v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

id sub_1000EAC38()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCRecordButtonRepository();
  return [super dealloc];
}

UIMenu sub_1000EAC7C(char a1, char a2, char a3, char a4)
{
  UIMenuElementSize v33 = (UIMenuElementSize)_swiftEmptyArrayStorage;
  if (a4)
  {
    sub_100028654(&qword_100264998);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1001F2010;
    id v6 = [self sharedStyleProvider];
    id v7 = [v6 undoImageName];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v9 = [self systemImageNamed:v8];

    sub_100025F4C(0, (unint64_t *)&qword_100266358);
    uint64_t v10 = type metadata accessor for String.LocalizationValue();
    __chkstk_darwin(v10 - 8);
    String.LocalizationValue.init(stringLiteral:)();
    uint64_t v11 = type metadata accessor for Locale();
    __chkstk_darwin(v11 - 8);
    static Locale.current.getter();
    String.init(localized:table:bundle:locale:comment:)();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    *(void *)(v5 + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    specialized Array._endMutation()();
    UIMenuElementSize v33 = v5;
    if ((a1 & 1) == 0)
    {
LABEL_3:
      if (a2) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a1 & 1) == 0)
  {
    goto LABEL_3;
  }
  id v12 = [self sharedStyleProvider];
  [v12 copyTranscriptImage];

  sub_100025F4C(0, (unint64_t *)&qword_100266358);
  uint64_t v13 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v13 - 8);
  String.LocalizationValue.init(stringLiteral:)();
  uint64_t v14 = type metadata accessor for Locale();
  __chkstk_darwin(v14 - 8);
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (a2)
  {
LABEL_4:
    if (!RCOverdubRecordingFeatureFlagIsEnabled()) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }
LABEL_10:
  id v15 = [self sharedStyleProvider];
  id v16 = [v15 trimImageName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v18 = [self systemImageNamed:v17];

  sub_100025F4C(0, (unint64_t *)&qword_100266358);
  uint64_t v19 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v19 - 8);
  String.LocalizationValue.init(stringLiteral:)();
  uint64_t v20 = type metadata accessor for Locale();
  __chkstk_darwin(v20 - 8);
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (RCOverdubRecordingFeatureFlagIsEnabled())
  {
LABEL_13:
    if (a3)
    {
      id v21 = [self sharedStyleProvider];
      id v22 = [v21 separateLayersImageName];

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v24 = [self systemImageNamed:v23];

      sub_100025F4C(0, (unint64_t *)&qword_100266358);
      uint64_t v25 = type metadata accessor for String.LocalizationValue();
      __chkstk_darwin(v25 - 8);
      String.LocalizationValue.init(stringLiteral:)();
      uint64_t v26 = type metadata accessor for Locale();
      __chkstk_darwin(v26 - 8);
      static Locale.current.getter();
      String.init(localized:table:bundle:locale:comment:)();
      swift_allocObject();
      swift_unknownObjectWeakInit();
      UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
LABEL_17:
  if ((unint64_t)v33 >> 62)
  {
    sub_100025F4C(0, &qword_100266360);
    swift_bridgeObjectRetain();
    UIMenuElementSize v27 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_100025F4C(0, &qword_100266360);
    UIMenuElementSize v27 = v33;
  }
  swift_bridgeObjectRelease();
  sub_100025F4C(0, &qword_100266368);
  v28._uint64_t countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  v34.value.super.Class isa = 0;
  v34.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v28, (Swift::String_optional)0, v34, 0, 0xFFFFFFFFFFFFFFFFLL, v27, v30);
}

id sub_1000EB7CC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCRecordingCardMoreButtonMenuCreator();
  return [super dealloc];
}

uint64_t sub_1000EB800()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000EB838(uint64_t a1)
{
  return sub_100151660(a1, v1);
}

uint64_t sub_1000EB840(uint64_t a1)
{
  return sub_100151668(a1, v1);
}

uint64_t sub_1000EB848(uint64_t a1)
{
  return sub_10015114C(a1, v1);
}

uint64_t sub_1000EB850(uint64_t a1)
{
  return sub_100151670(a1, v1);
}

uint64_t sub_1000EB858@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_1000EB8D0()
{
  return swift_release();
}

uint64_t sub_1000EB970@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 24);
  return swift_retain();
}

uint64_t sub_1000EB9EC()
{
  return swift_release();
}

uint64_t sub_1000EBA9C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 32);
  return result;
}

uint64_t sub_1000EBB14()
{
  return swift_release();
}

uint64_t sub_1000EBBB4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 40);
  return swift_retain();
}

uint64_t sub_1000EBC30()
{
  return swift_release();
}

uint64_t sub_1000EBCE0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000EBD5C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000EBE0C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  char v5 = *(unsigned char *)(v3 + 64);
  *(void *)a2 = *(void *)(v3 + 56);
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_1000EBE8C()
{
  return swift_release();
}

uint64_t sub_1000EBF30@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  char v5 = *(unsigned char *)(v3 + 66);
  *a2 = *(unsigned char *)(v3 + 65);
  a2[1] = v5;
  return result;
}

uint64_t sub_1000EBFB0()
{
  return swift_release();
}

uint64_t sub_1000EC058@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC10VoiceMemos23RCRecordButtonViewModel__accessibilityLabel;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1000EC124(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v8 = *a2;
  swift_getKeyPath();
  uint64_t v11 = v8;
  id v12 = v7;
  uint64_t v13 = v8;
  sub_1000354A8();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1000EC27C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1000354A8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + OBJC_IVAR____TtC10VoiceMemos23RCRecordButtonViewModel__disabled);
  return result;
}

uint64_t sub_1000EC2FC()
{
  return swift_release();
}

Swift::Int sub_1000EC39C()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1000EC3F8()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1000EC434()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_1000EC48C(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_1000EC4A4()
{
  id v0 = [self mainBundle];
  v7._object = (void *)0x80000001001EBAC0;
  v1._uint64_t countAndFlagsBits = 0x4543414C504552;
  v1._object = (void *)0xE700000000000000;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v7._uint64_t countAndFlagsBits = 0xD000000000000014;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v7);

  sub_10002DF88();
  uint64_t v3 = StringProtocol.localizedUppercase.getter();
  uint64_t v5 = v4;
  uint64_t result = swift_bridgeObjectRelease();
  qword_100266370 = v3;
  *(void *)algn_100266378 = v5;
  return result;
}

uint64_t sub_1000EC580()
{
  id v0 = [self mainBundle];
  v7._object = (void *)0x80000001001EBAE0;
  v1._uint64_t countAndFlagsBits = 0x454D55534552;
  v1._object = (void *)0xE600000000000000;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v7._uint64_t countAndFlagsBits = 0xD000000000000013;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v7);

  sub_10002DF88();
  uint64_t v3 = StringProtocol.localizedUppercase.getter();
  uint64_t v5 = v4;
  uint64_t result = swift_bridgeObjectRelease();
  qword_100266380 = v3;
  *(void *)algn_100266388 = v5;
  return result;
}

uint64_t sub_1000EC658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  v78 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v77 = (char *)&v73 - v11;
  __chkstk_darwin(v10);
  uint64_t v75 = (char *)&v73 - v12;
  uint64_t v76 = a3;
  uint64_t v74 = a1;
  if (a2 == 2)
  {
    uint64_t v29 = self;
    id v30 = [v29 mainBundle];
    v82._uint64_t countAndFlagsBits = 0xD000000000000021;
    v82._object = (void *)0x80000001001EBB40;
    v31._uint64_t countAndFlagsBits = 0x4C5F44524F434552;
    v31._object = (void *)0xEE00325F52455941;
    v32._uint64_t countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v31, (Swift::String_optional)0, (NSBundle)v30, v32, v82);

    uint64_t v33 = type metadata accessor for AttributeContainer();
    __chkstk_darwin(v33 - 8);
    AttributeContainer.init()();
    AttributedString.init(_:attributes:)();
    id v34 = [v29 mainBundle];
    v83._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v83._object = (void *)0x80000001001EBB70;
    v35._uint64_t countAndFlagsBits = 0x5F4543414C504552;
    v35._object = (void *)0xEF325F524559414CLL;
    v36._uint64_t countAndFlagsBits = 0;
    v36._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v35, (Swift::String_optional)0, (NSBundle)v34, v36, v83);

    __chkstk_darwin(v37);
    AttributeContainer.init()();
    AttributedString.init(_:attributes:)();
    id v38 = [v29 mainBundle];
    v84._object = (void *)0x80000001001EBB90;
    v39._uint64_t countAndFlagsBits = 0x4C5F454D55534552;
    v39._object = (void *)0xEE00325F52455941;
    v40._uint64_t countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    v84._uint64_t countAndFlagsBits = 0xD000000000000019;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v39, (Swift::String_optional)0, (NSBundle)v38, v40, v84);

    uint64_t v41 = v75;
    __chkstk_darwin(v42);
    AttributeContainer.init()();
  }
  else
  {
    if (a2 == 1)
    {
      uint64_t v13 = self;
      id v14 = [v13 mainBundle];
      v80._uint64_t countAndFlagsBits = 0xD000000000000021;
      v80._object = (void *)0x80000001001EBBB0;
      v15._uint64_t countAndFlagsBits = 0x4C5F44524F434552;
      v15._object = (void *)0xEE00315F52455941;
      v16._uint64_t countAndFlagsBits = 0;
      v16._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v80);

      uint64_t v17 = type metadata accessor for AttributeContainer();
      __chkstk_darwin(v17 - 8);
      AttributeContainer.init()();
      AttributedString.init(_:attributes:)();
      id v18 = [v13 mainBundle];
      v81._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v81._object = (void *)0x80000001001EBBE0;
      v19._uint64_t countAndFlagsBits = 0x5F4543414C504552;
      v19._object = (void *)0xEF315F524559414CLL;
      v20._uint64_t countAndFlagsBits = 0;
      v20._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v18, v20, v81);

      __chkstk_darwin(v21);
      AttributeContainer.init()();
      AttributedString.init(_:attributes:)();
      id v22 = (objc_class *)[v13 mainBundle];
      unint64_t v71 = 0x80000001001EBC00;
      uint64_t v23 = 0x4C5F454D55534552;
      unint64_t v24 = 0xEE00315F52455941;
      v25.super.Class isa = v22;
      uint64_t v26 = 0;
      unint64_t v27 = 0xE000000000000000;
      unint64_t v28 = 0xD000000000000019;
    }
    else
    {
      uint64_t v43 = self;
      id v44 = [v43 mainBundle];
      v85._uint64_t countAndFlagsBits = 0xD000000000000016;
      v85._object = (void *)0x80000001001EBB00;
      v45._uint64_t countAndFlagsBits = 0x44524F434552;
      v45._object = (void *)0xE600000000000000;
      v46._uint64_t countAndFlagsBits = 0;
      v46._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v45, (Swift::String_optional)0, (NSBundle)v44, v46, v85);

      uint64_t v47 = type metadata accessor for AttributeContainer();
      __chkstk_darwin(v47 - 8);
      AttributeContainer.init()();
      AttributedString.init(_:attributes:)();
      id v48 = [v43 mainBundle];
      v86._uint64_t countAndFlagsBits = 0xD000000000000010;
      v86._object = (void *)0x80000001001EBB20;
      v49._uint64_t countAndFlagsBits = 0x4543414C504552;
      v49._object = (void *)0xE700000000000000;
      v50._uint64_t countAndFlagsBits = 0;
      v50._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v49, (Swift::String_optional)0, (NSBundle)v48, v50, v86);

      __chkstk_darwin(v51);
      AttributeContainer.init()();
      AttributedString.init(_:attributes:)();
      id v22 = (objc_class *)[v43 mainBundle];
      unint64_t v71 = 0xEF6C6562616C2058;
      uint64_t v23 = 0x454D55534552;
      unint64_t v24 = 0xE600000000000000;
      v25.super.Class isa = v22;
      uint64_t v26 = 0;
      unint64_t v27 = 0xE000000000000000;
      unint64_t v28 = 0x4120656D75736552;
    }
    NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v23, (Swift::String_optional)0, v25, *(Swift::String *)&v26, *(Swift::String *)&v28);

    __chkstk_darwin(v52);
    AttributeContainer.init()();
    uint64_t v41 = v75;
  }
  AttributedString.init(_:attributes:)();
  switch(v74)
  {
    case 0:
      id v53 = [self preferredLanguages];
      uint64_t v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v54 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v55._uint64_t countAndFlagsBits = 28261;
        v55._object = (void *)0xE200000000000000;
        Swift::Bool v56 = String.hasPrefix(_:)(v55);
        swift_bridgeObjectRelease();
        if (v56)
        {
          uint64_t KeyPath = swift_getKeyPath();
          __chkstk_darwin(KeyPath);
          swift_getKeyPath();
          long long v79 = xmmword_1001F20A0;
          sub_1000367C4();
          AttributedString.subscript.setter();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v70 = *(void (**)(char *, uint64_t))(v7 + 8);
      v70(v41, v6);
      v70(v77, v6);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v76, v78, v6);
    case 1:
      CGRect v60 = (objc_class *)[self mainBundle];
      unint64_t v72 = 0xEE006C6562616C20;
      uint64_t v61 = 0x4553554150;
      unint64_t v62 = 0xE500000000000000;
      v63.super.Class isa = v60;
      uint64_t v64 = 0;
      unint64_t v65 = 0xE000000000000000;
      uint64_t v66 = 0x5841206573756150;
      goto LABEL_15;
    case 2:
      CGRect v60 = (objc_class *)[self mainBundle];
      unint64_t v72 = 0xED00006C6562616CLL;
      uint64_t v61 = 1347376211;
      unint64_t v62 = 0xE400000000000000;
      v63.super.Class isa = v60;
      uint64_t v64 = 0;
      unint64_t v65 = 0xE000000000000000;
      uint64_t v66 = 0x20584120706F7453;
LABEL_15:
      NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v61, (Swift::String_optional)0, v63, *(Swift::String *)&v64, *(Swift::String *)&v66);

      uint64_t v68 = type metadata accessor for AttributeContainer();
      __chkstk_darwin(v68 - 8);
      AttributeContainer.init()();
      AttributedString.init(_:attributes:)();
      long long v69 = *(void (**)(char *, uint64_t))(v7 + 8);
      v69(v41, v6);
      v69(v77, v6);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v69)(v78, v6);
      break;
    case 3:
      uint64_t v67 = *(void (**)(char *, uint64_t))(v7 + 8);
      v67(v41, v6);
      v67(v78, v6);
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v76, v77, v6);
      break;
    case 4:
      long long v58 = *(void (**)(char *, uint64_t))(v7 + 8);
      v58(v77, v6);
      v58(v78, v6);
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v76, v41, v6);
      break;
    default:
      *(void *)&long long v79 = v74;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1000ED1FCLL);
  }
  return result;
}

uint64_t sub_1000ED210()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_1000ED280()
{
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000ED2D8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000ED310()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000ED348(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin();
  if (RCOverdubRecordingIsEnabled()) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = 0;
  }
  if (a1)
  {
    if (a1 != 4)
    {
      if (a1 != 3) {
        return 0;
      }
      switch(v4)
      {
        case 2:
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v12._uint64_t countAndFlagsBits = 0;
          v12._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v12);
          if (qword_100264538 == -1)
          {
LABEL_23:
            LocalizedStringKey.StringInterpolation.appendInterpolation(_:)((Swift::String)xmmword_100266370);
            v13._uint64_t countAndFlagsBits = 32;
            v13._object = (void *)0xE100000000000000;
            LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v13);
            Image.init(systemName:)();
            LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
            swift_release();
            v14._uint64_t countAndFlagsBits = 0;
            v14._object = (void *)0xE000000000000000;
            LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v14);
            LocalizedStringKey.init(stringInterpolation:)();
            return Text.init(_:tableName:bundle:comment:)();
          }
          break;
        case 1:
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v15._uint64_t countAndFlagsBits = 0;
          v15._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v15);
          if (qword_100264538 == -1) {
            goto LABEL_23;
          }
          break;
        case 0:
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v5._uint64_t countAndFlagsBits = 0;
          v5._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v5);
          if (qword_100264538 != -1) {
            swift_once();
          }
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)((Swift::String)xmmword_100266370);
          v6._uint64_t countAndFlagsBits = 0;
          v6._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v6);
          LocalizedStringKey.init(stringInterpolation:)();
          return Text.init(_:tableName:bundle:comment:)();
        default:
          return 0;
      }
      swift_once();
      goto LABEL_23;
    }
    switch(v4)
    {
      case 2:
        LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v16._uint64_t countAndFlagsBits = 0;
        v16._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v16);
        if (qword_100264540 == -1) {
          goto LABEL_29;
        }
        break;
      case 1:
        LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v17._uint64_t countAndFlagsBits = 0;
        v17._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v17);
        if (qword_100264540 == -1) {
          goto LABEL_29;
        }
        break;
      case 0:
        LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v9._uint64_t countAndFlagsBits = 0;
        v9._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v9);
        if (qword_100264540 != -1) {
          swift_once();
        }
        LocalizedStringKey.StringInterpolation.appendInterpolation(_:)((Swift::String)xmmword_100266380);
        v10._uint64_t countAndFlagsBits = 0;
        v10._object = (void *)0xE000000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v10);
        LocalizedStringKey.init(stringInterpolation:)();
        return Text.init(_:tableName:bundle:comment:)();
      default:
        return 0;
    }
    swift_once();
LABEL_29:
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)((Swift::String)xmmword_100266380);
    v18._uint64_t countAndFlagsBits = 32;
    v18._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v18);
    Image.init(systemName:)();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release();
    v19._uint64_t countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v19);
    LocalizedStringKey.init(stringInterpolation:)();
    return Text.init(_:tableName:bundle:comment:)();
  }
  if (v4 != 2) {
    return 0;
  }
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v7);
  Image.init(systemName:)();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v8);
  LocalizedStringKey.init(stringInterpolation:)();
  return Text.init(_:tableName:bundle:comment:)();
}

void sub_1000ED940()
{
}

void sub_1000ED960()
{
}

uint64_t sub_1000ED988()
{
  return 8;
}

uint64_t sub_1000ED994()
{
  return swift_release();
}

uint64_t sub_1000ED99C(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1000ED9AC()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void *sub_1000ED9F4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000EDA48()
{
  return sub_1000356C0();
}

uint64_t sub_1000EDA60()
{
  return sub_100035530();
}

uint64_t sub_1000EDA78()
{
  return sub_100035500();
}

uint64_t sub_1000EDA90()
{
  return sub_10003577C();
}

uint64_t sub_1000EDAA8()
{
  return sub_100035760();
}

uint64_t sub_1000EDAC0()
{
  return sub_1000357B4();
}

uint64_t sub_1000EDAD8()
{
  return sub_1000357D0();
}

uint64_t sub_1000EDAF0()
{
  return sub_100035798();
}

void sub_1000EDB08(unsigned char *a1)
{
  if (*a1 == 1)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong) {
      return;
    }
    Swift::String v2 = (char *)Strong;
    id v3 = [self sharedApplication];
    id v4 = [v3 applicationState];

    if (v4) {
      goto LABEL_9;
    }
    Swift::String v5 = &selRef_stop;
    goto LABEL_8;
  }
  swift_beginAccess();
  uint64_t v6 = swift_unknownObjectWeakLoadStrong();
  if (!v6) {
    return;
  }
  Swift::String v2 = (char *)v6;
  id v7 = [self sharedApplication];
  id v8 = [v7 applicationState];

  if (!v8)
  {
    Swift::String v5 = &selRef_start;
LABEL_8:
    [*(id *)&v2[OBJC_IVAR___RCLocationManagerStateCoordinator_locationManager] *v5];
  }
LABEL_9:
}

id sub_1000EDC58()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LocationManagerStateCoordinator();
  [super dealloc];
}

ValueMetadata *type metadata accessor for TimedTextRange()
{
  return &type metadata for TimedTextRange;
}

id sub_1000EDCE8()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for RecordingTranscriptionService()) init];
  qword_100275358 = (uint64_t)result;
  return result;
}

uint64_t sub_1000EDDD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1000EDDF8, 0, 0);
}

uint64_t sub_1000EDDF8()
{
  id v1 = [self sharedContainer];
  if (v1 && (objc_super v2 = v1, v3 = [v1 newBackgroundModel], v0[5] = v3, v2, v3))
  {
    id v4 = (void *)swift_task_alloc();
    v0[6] = v4;
    void *v4 = v0;
    v4[1] = sub_1000EDF40;
    uint64_t v5 = v0[3];
    uint64_t v6 = v0[4];
    uint64_t v7 = v0[2];
    return sub_100117074(v7, v5, v6, (uint64_t)v3);
  }
  else
  {
    sub_1000F12C8();
    swift_allocError();
    *Swift::String v9 = 0;
    swift_willThrow();
    Swift::String v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_1000EDF40()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    objc_super v2 = sub_1000EE0B8;
  }
  else {
    objc_super v2 = sub_1000EE054;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000EE054()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EE0B8()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EE11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = type metadata accessor for AttributedString();
  void v6[4] = v9;
  v6[5] = *(void *)(v9 - 8);
  uint64_t v10 = swift_task_alloc();
  v6[6] = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  v6[7] = v11;
  void *v11 = v6;
  v11[1] = sub_1000EE234;
  return sub_1000EE780(v10, a5, a6, 0);
}

uint64_t sub_1000EE234()
{
  objc_super v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1000EE3C0;
  }
  else
  {
    (*(void (**)(void, void))(v2[5] + 8))(v2[6], v2[4]);
    uint64_t v3 = sub_1000EE360;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000EE360()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EE3C0()
{
  uint64_t v10 = v0;
  swift_task_dealloc();
  if (qword_100264530 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10002272C(v1, (uint64_t)qword_100275340);
  swift_errorRetain();
  swift_errorRetain();
  objc_super v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    v0[2] = sub_10002F3B8(0xD000000000000018, 0x80000001001EBD70, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2112;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s failed with error = %@", (uint8_t *)v4, 0x16u);
    sub_100028654(&qword_100265560);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000EE780(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 128) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  sub_100028654(&qword_1002699E0);
  *(void *)(v5 + 48) = swift_task_alloc();
  return _swift_task_switch(sub_1000EE81C, 0, 0);
}

uint64_t sub_1000EE81C()
{
  uint64_t v1 = *(unsigned char **)(v0 + 40);
  if (v1[OBJC_IVAR___RCRecordingTranscriptionService_isTranscribingLive])
  {
    sub_1000F12C8();
    swift_allocError();
    *objc_super v2 = 1;
    swift_willThrow();
LABEL_3:
    swift_task_dealloc();
    os_log_type_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  uint64_t v5 = OBJC_IVAR___RCRecordingTranscriptionService_fileTranscriptionTask;
  *(void *)(v0 + 56) = OBJC_IVAR___RCRecordingTranscriptionService_fileTranscriptionTask;
  uint64_t v6 = (uint64_t *)&v1[v5];
  uint64_t v7 = *(void *)&v1[v5];
  *(void *)(v0 + 64) = v7;
  uint64_t v8 = *(void *)(v0 + 32);
  if (!v7)
  {
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v18 = *(void *)(v0 + 24);
    uint64_t v19 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v17, 1, 1, v19);
    Swift::String v20 = (void *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    void v20[4] = v1;
    void v20[5] = v18;
    v20[6] = v8;
    uint64_t v21 = v1;
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_100151B98(v17, (uint64_t)&unk_100266630, (uint64_t)v20);
    *(void *)(v0 + 104) = v7;
    uint64_t v22 = *v6;
    *uint64_t v6 = v7;
    v6[1] = v18;
    v6[2] = v8;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000F115C(v22);
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v13;
    uint64_t v14 = type metadata accessor for AttributedString();
    uint64_t v15 = sub_100028654((uint64_t *)&unk_1002699C0);
    void *v13 = v0;
    Swift::String v16 = sub_1000EF060;
    goto LABEL_14;
  }
  uint64_t v9 = *(void *)(v0 + 24);
  uint64_t v10 = v6[1];
  uint64_t v11 = v6[2];
  *(void *)(v0 + 72) = v11;
  BOOL v12 = v10 == v9 && v11 == v8;
  if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v13;
    uint64_t v14 = type metadata accessor for AttributedString();
    uint64_t v15 = sub_100028654((uint64_t *)&unk_1002699C0);
    void *v13 = v0;
    Swift::String v16 = sub_1000EEC18;
LABEL_14:
    v13[1] = v16;
    uint64_t v23 = *(void *)(v0 + 16);
    return Task.value.getter(v23, v7, v14, v15, &protocol self-conformance witness table for Error);
  }
  if ((*(unsigned char *)(v0 + 128) & 1) == 0)
  {
    sub_1000F12C8();
    swift_allocError();
    *NSBundle v25 = 1;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_3;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v24;
  *unint64_t v24 = v0;
  v24[1] = sub_1000EEDA0;
  void v24[2] = *(void *)(v0 + 40);
  return _swift_task_switch(sub_1000F06C8, 0, 0);
}

uint64_t sub_1000EEC18()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    objc_super v2 = sub_1000EF200;
  }
  else {
    objc_super v2 = sub_1000EED2C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000EED2C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EEDA0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000EEE9C, 0, 0);
}

uint64_t sub_1000EEE9C()
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[4];
  uint64_t v3 = (char *)v0[5];
  uint64_t v4 = v0[3];
  uint64_t v5 = (uint64_t *)&v3[v0[7]];
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v1, 1, 1, v6);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  void v7[4] = v3;
  v7[5] = v4;
  v7[6] = v2;
  uint64_t v8 = v3;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_100151B98(v1, (uint64_t)&unk_100266630, (uint64_t)v7);
  v0[13] = v9;
  uint64_t v10 = *v5;
  *uint64_t v5 = v9;
  v5[1] = v4;
  v5[2] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000F115C(v10);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[14] = v11;
  uint64_t v12 = type metadata accessor for AttributedString();
  uint64_t v13 = sub_100028654((uint64_t *)&unk_1002699C0);
  void *v11 = v0;
  v11[1] = sub_1000EF060;
  uint64_t v14 = v0[2];
  return Task.value.getter(v14, v9, v12, v13, &protocol self-conformance witness table for Error);
}

uint64_t sub_1000EF060()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000EF274;
  }
  else {
    uint64_t v2 = sub_1000EF174;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000EF174()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[5];
  swift_release();
  uint64_t v3 = (void *)(v2 + v1);
  uint64_t v4 = *(void *)(v2 + v1);
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = 0;
  sub_1000F115C(v4);
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000EF200()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EF274()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[5];
  swift_release();
  uint64_t v3 = (void *)(v2 + v1);
  uint64_t v4 = *(void *)(v2 + v1);
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = 0;
  sub_1000F115C(v4);
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000EF300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a1;
  uint64_t v7 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v6[11] = v7;
  v6[12] = *(void *)(v7 - 8);
  v6[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000EF3F0, 0, 0);
}

uint64_t sub_1000EF3F0()
{
  id v1 = [self sharedContainer];
  if (v1 && (uint64_t v2 = v1, v3 = [v1 newBackgroundModel], v2, v3))
  {
    uint64_t v5 = v0[12];
    uint64_t v4 = v0[13];
    uint64_t v7 = v0[10];
    uint64_t v6 = v0[11];
    uint64_t v8 = v0[9];
    v0[5] = &type metadata for TranscriptionStorageService;
    v0[6] = &off_100226E98;
    v0[2] = v3;
    uint64_t v9 = type metadata accessor for AttributedString();
    v0[14] = v9;
    v0[15] = *(void *)(v9 - 8);
    v0[16] = swift_task_alloc();
    uint64_t v10 = type metadata accessor for URL();
    v0[17] = v10;
    v0[18] = *(void *)(v10 - 8);
    uint64_t v11 = swift_task_alloc();
    v0[19] = v11;
    uint64_t v12 = (void *)swift_allocObject();
    v0[20] = v12;
    _OWORD v12[2] = v3;
    uint64_t v12[3] = v8;
    v12[4] = v7;
    id v13 = v3;
    swift_bridgeObjectRetain();
    v0[21] = [v13 context];
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v6);
    uint64_t v14 = (void *)swift_task_alloc();
    v0[22] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000EF724;
    uint64_t v15 = v0[13];
    return NSManagedObjectContext.perform<A>(schedule:_:)(v11, v15, sub_1000F3A2C, v12, v10);
  }
  else
  {
    sub_1000F12C8();
    swift_allocError();
    *uint64_t v16 = 0;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_1000EF724()
{
  uint64_t v2 = (void *)*v1;
  v2[23] = v0;
  swift_task_dealloc();
  id v3 = (void *)v2[21];
  (*(void (**)(void, void))(v2[12] + 8))(v2[13], v2[11]);

  if (v0)
  {
    uint64_t v4 = sub_1000EFB38;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_1000EF8CC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000EF8CC()
{
  id v1 = [self sharedService];
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  v0[7] = 0;
  id v5 = [v1 prepareToExportCompositionAVURL:v3 error:v0 + 7];
  v0[24] = v5;

  uint64_t v6 = (void *)v0[7];
  if (!v5)
  {
    uint64_t v14 = v0[18];
    uint64_t v13 = v0[19];
    uint64_t v15 = v0[17];
    id v16 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    goto LABEL_5;
  }
  uint64_t v7 = v0[23];
  id v8 = v6;
  static Task<>.checkCancellation()();
  if (v7)
  {
    uint64_t v9 = (void *)v0[24];
    uint64_t v11 = v0[18];
    uint64_t v10 = v0[19];
    uint64_t v12 = v0[17];
    sub_100115B40((uint64_t)v9);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10002F48C((uint64_t)(v0 + 2));
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
  uint64_t v19 = v0[19];
  uint64_t v20 = swift_task_alloc();
  v0[25] = v20;
  *(void *)(v20 + 16) = v19;
  uint64_t v21 = dword_100266648;
  uint64_t v22 = (void *)swift_task_alloc();
  v0[26] = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_1000EFBF8;
  return ((uint64_t (*)(char, uint64_t, uint64_t, uint64_t))((char *)&dword_100266648 + v21))(0, 0, (uint64_t)&unk_100266640, v20);
}

uint64_t sub_1000EFB38()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10002F48C(v0 + 16);
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EFBF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[27] = a1;
  v4[28] = a2;
  v4[29] = v2;
  swift_task_dealloc();
  if (v2)
  {
    id v5 = sub_1000EFFE4;
  }
  else
  {
    swift_task_dealloc();
    id v5 = sub_1000EFD4C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000EFD4C()
{
  id v1 = v0;
  uint64_t v2 = v0[28];
  uint64_t v3 = v1[27];
  uint64_t v4 = swift_task_alloc();
  v1[30] = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = swift_task_alloc();
  v1[31] = v5;
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v1[32] = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_1000EFE8C;
  uint64_t v7 = v1[16];
  uint64_t v8 = v1[14];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v7, &unk_100266650, v4, sub_1000F3BA8, v5, 0, 0, v8);
}

uint64_t sub_1000EFE8C()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000F02B8;
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = sub_1000F00E4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000EFFE4()
{
  swift_task_dealloc();
  uint64_t v1 = (void *)v0[24];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[17];
  sub_100115B40((uint64_t)v1);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10002F48C((uint64_t)(v0 + 2));
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000F00E4()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = (void *)v0[24];
  uint64_t v4 = v0[18];
  uint64_t v3 = v0[19];
  uint64_t v5 = v0[17];
  swift_release();
  swift_release();
  sub_100115B40((uint64_t)v2);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  static Task<>.checkCancellation()();
  if (v1)
  {
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    swift_task_dealloc();
    sub_10002F48C((uint64_t)(v0 + 2));
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t v8 = *sub_10001510C(v0 + 2, v0[5]);
    uint64_t v9 = (void *)swift_task_alloc();
    v0[34] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1000F03D4;
    uint64_t v10 = v0[16];
    uint64_t v11 = v0[9];
    uint64_t v12 = v0[10];
    return sub_100115C50(v10, v11, v12, v8);
  }
}

uint64_t sub_1000F02B8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_release();
  swift_release();
  uint64_t v1 = (void *)v0[24];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[17];
  sub_100115B40((uint64_t)v1);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10002F48C((uint64_t)(v0 + 2));
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000F03D4()
{
  *(void *)(*(void *)v1 + 280) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000F05E0;
  }
  else {
    uint64_t v2 = sub_1000F0514;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F0514()
{
  (*(void (**)(void, void, void))(v0[15] + 32))(v0[8], v0[16], v0[14]);
  swift_task_dealloc();
  sub_10002F48C((uint64_t)(v0 + 2));
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000F05E0()
{
  (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
  swift_task_dealloc();
  sub_10002F48C((uint64_t)(v0 + 2));
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000F06A8()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000F06C8, 0, 0);
}

uint64_t sub_1000F06C8()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (uint64_t *)(v1 + OBJC_IVAR___RCRecordingTranscriptionService_fileTranscriptionTask);
  if (*(void *)(v1 + OBJC_IVAR___RCRecordingTranscriptionService_fileTranscriptionTask))
  {
    sub_1000F111C(*(void *)(v1 + OBJC_IVAR___RCRecordingTranscriptionService_fileTranscriptionTask));
    uint64_t v3 = swift_retain();
    sub_1000F115C(v3);
    type metadata accessor for AttributedString();
    sub_100028654((uint64_t *)&unk_1002699C0);
    Task.cancel()();
    swift_release();
  }
  sub_100028654(&qword_100266620);
  uint64_t v4 = swift_task_alloc();
  v0[3] = v4;
  uint64_t v5 = *v2;
  v0[4] = *v2;
  if (v5)
  {
    sub_1000F111C(v5);
    uint64_t v6 = swift_retain();
    sub_1000F115C(v6);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[5] = v7;
    uint64_t v8 = type metadata accessor for AttributedString();
    v0[6] = v8;
    uint64_t v9 = sub_100028654((uint64_t *)&unk_1002699C0);
    *uint64_t v7 = v0;
    v7[1] = sub_1000F08FC;
    return Task.value.getter(v4, v5, v8, v9, &protocol self-conformance witness table for Error);
  }
  else
  {
    uint64_t v10 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 1, 1, v10);
    sub_1000F119C(v4);
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_1000F08FC()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    uint64_t v1 = sub_1000F0ACC;
  }
  else
  {
    uint64_t v1 = sub_1000F0A20;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_1000F0A20()
{
  swift_release();
  uint64_t v1 = v0[3];
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0[6] - 8) + 56))(v1, 0, 1);
  sub_1000F119C(v1);
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1000F0ACC()
{
  uint64_t v1 = v0[3];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0[6] - 8) + 56))(v1, 1, 1);
  sub_1000F119C(v1);
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1000F0CD8(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  id v4 = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000F0D98;
  v5[2] = v4;
  return _swift_task_switch(sub_1000F06C8, 0, 0);
}

uint64_t sub_1000F0D98()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 24);
  uint64_t v2 = *(void **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();

  v1[2](v1);
  _Block_release(v1);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

id sub_1000F0ED0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RecordingTranscriptionService();
  return [super dealloc];
}

uint64_t type metadata accessor for RecordingTranscriptionService()
{
  return self;
}

uint64_t destroy for RecordingTranscriptionService.FileTranscriptionTask()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *_s10VoiceMemos29RecordingTranscriptionServiceC21FileTranscriptionTaskVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RecordingTranscriptionService.FileTranscriptionTask(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for HighlightConfiguration(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for RecordingTranscriptionService.FileTranscriptionTask(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RecordingTranscriptionService.FileTranscriptionTask(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecordingTranscriptionService.FileTranscriptionTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordingTranscriptionService.FileTranscriptionTask()
{
  return &type metadata for RecordingTranscriptionService.FileTranscriptionTask;
}

uint64_t sub_1000F111C(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000F115C(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000F119C(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_100266620);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F1200(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100031604;
  return sub_1000EF300(a1, v4, v5, v6, v7, v8);
}

unint64_t sub_1000F12C8()
{
  unint64_t result = qword_100266638;
  if (!qword_100266638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266638);
  }
  return result;
}

uint64_t sub_1000F131C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = a4;
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 224) = a1;
  sub_100028654(&qword_1002699E0);
  *(void *)(v4 + 40) = swift_task_alloc();
  sub_100028654(&qword_100266658);
  *(void *)(v4 + 48) = swift_task_alloc();
  type metadata accessor for ClientInfo();
  *(void *)(v4 + 56) = swift_task_alloc();
  *(void *)(v4 + 64) = sub_100028654(&qword_1002666E8);
  *(void *)(v4 + 72) = swift_task_alloc();
  uint64_t v5 = sub_100028654(&qword_1002666F0);
  *(void *)(v4 + 80) = v5;
  *(void *)(v4 + 88) = *(void *)(v5 - 8);
  *(void *)(v4 + 96) = swift_task_alloc();
  *(void *)(v4 + 104) = swift_task_alloc();
  sub_100028654(&qword_100266668);
  *(void *)(v4 + 112) = swift_task_alloc();
  sub_100028654(&qword_100266670);
  *(void *)(v4 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_1000F1518, 0, 0);
}

uint64_t sub_1000F1518()
{
  if (qword_100264628 != -1) {
    swift_once();
  }
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_100269040 + dword_100269040);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000F15E8;
  return v3();
}

uint64_t sub_1000F15E8(char a1)
{
  *(unsigned char *)(*(void *)v1 + 225) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000F16E8, 0, 0);
}

uint64_t sub_1000F16E8()
{
  if (*(unsigned char *)(v0 + 225) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 112);
    uint64_t v2 = *(void *)(v0 + 120);
    int v3 = *(unsigned __int8 *)(v0 + 224);
    type metadata accessor for Locale();
    swift_task_alloc();
    Locale.init(identifier:)();
    uint64_t v4 = type metadata accessor for TaskHint();
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v6 = (unsigned int *)&enum case for TaskHint.liveTranscription(_:);
    if (!v3) {
      uint64_t v6 = (unsigned int *)&enum case for TaskHint.offlineTranscription(_:);
    }
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v2, *v6, v4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v4);
    uint64_t v7 = type metadata accessor for Transcriber.ModelOptions();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
    sub_1000F6B50();
    sub_100028654(&qword_100266680);
    uint64_t v8 = type metadata accessor for Transcriber.ReportingOption();
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(void *)(v9 + 72);
    unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v12 = swift_allocObject();
    if (v3)
    {
      *(_OWORD *)(v12 + 16) = xmmword_1001F0FB0;
      uint64_t v13 = *(void (**)(unint64_t, void, uint64_t))(v9 + 104);
      v13(v12 + v11, enum case for Transcriber.ReportingOption.multisegmentResults(_:), v8);
      v13(v12 + v11 + v10, enum case for Transcriber.ReportingOption.volatileResults(_:), v8);
    }
    else
    {
      *(_OWORD *)(v12 + 16) = xmmword_1001F1BD0;
      (*(void (**)(unint64_t, void, uint64_t))(v9 + 104))(v12 + v11, enum case for Transcriber.ReportingOption.multisegmentResults(_:), v8);
    }
    sub_1000D1728(v12);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_100028654(&qword_100266688);
    uint64_t v16 = type metadata accessor for TranscriptionResultAttributeOption();
    uint64_t v17 = *(void *)(v16 - 8);
    unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1001F1BD0;
    (*(void (**)(unint64_t, void, uint64_t))(v17 + 104))(v19 + v18, enum case for TranscriptionResultAttributeOption.timeRange(_:), v16);
    sub_1000D1A40(v19);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    type metadata accessor for Transcriber();
    swift_allocObject();
    uint64_t v20 = Transcriber.init(locale:taskHint:modelOptions:transcriptionOptions:reportingOptions:attributeOptions:)();
    *(void *)(v0 + 144) = v20;
    swift_task_dealloc();
    *(void *)(v0 + 152) = type metadata accessor for SpeechAnalyzer();
    *(void *)(v0 + 160) = sub_100028654(&qword_100266690);
    uint64_t v21 = swift_allocObject();
    *(void *)(v0 + 168) = v21;
    *(_OWORD *)(v21 + 16) = xmmword_1001F1BD0;
    unint64_t v22 = sub_1000F3C08();
    *(void *)(v0 + 176) = v22;
    *(void *)(v21 + 32) = v20;
    *(void *)(v21 + 40) = v22;
    swift_retain_n();
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_1000F1F24;
    uint64_t v24 = *(void *)(v0 + 16);
    return static SpeechAnalyzer.bestAudioFormat(compatibleWith:considering:)(v21, v24);
  }
  else
  {
    NSBundle v25 = (uint64_t (__cdecl *)())((char *)&dword_100269048 + dword_100269048);
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000F1C60;
    return v25();
  }
}

uint64_t sub_1000F1C60(char a1)
{
  *(unsigned char *)(*(void *)v1 + 226) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000F1D60, 0, 0);
}

uint64_t sub_1000F1D60()
{
  if (*(unsigned char *)(v0 + 226))
  {
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = (void *)qword_100275560;
    uint64_t v3 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
    type metadata accessor for MainActor();
    id v4 = v2;
    uint64_t v5 = static MainActor.shared.getter();
    uint64_t v6 = (void *)swift_allocObject();
    v6[2] = v5;
    v6[3] = &protocol witness table for MainActor;
    void v6[4] = v4;
    sub_10001E1A8(v1, (uint64_t)&unk_1002666F8, (uint64_t)v6);
    swift_release();
    char v7 = 4;
  }
  else
  {
    char v7 = 5;
  }
  sub_1000F3BB0();
  swift_allocError();
  *uint64_t v8 = v7;
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1000F1F24(uint64_t a1)
{
  id v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  v4[24] = a1;
  v4[25] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return _swift_task_switch(sub_1000F2238, 0, 0);
  }
  else
  {
    uint64_t v6 = (int *)v4[3];
    swift_bridgeObjectRelease();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    char v7 = (void *)swift_task_alloc();
    v4[26] = v7;
    *char v7 = v5;
    v7[1] = sub_1000F211C;
    uint64_t v8 = v4[9];
    return v10(v8, a1);
  }
}

uint64_t sub_1000F211C()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    uint64_t v2 = sub_1000F25E4;
  }
  else
  {
    uint64_t v2 = sub_1000F2318;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F2238()
{
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F2318()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[10];
  uint64_t v13 = v0[6];
  uint64_t v14 = v0[22];
  uint64_t v15 = (void *)v0[2];
  type metadata accessor for AnalyzerInput();
  sub_100027F5C(&qword_100266700, &qword_1002666E8);
  AsyncMapSequence.init(_:transform:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  ClientInfo.init(identifier:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v2, v5);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1001F1BD0;
  *(void *)(v6 + 32) = v1;
  *(void *)(v6 + 40) = v14;
  uint64_t v7 = type metadata accessor for AnalysisOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v13, 1, 1, v7);
  id v8 = objc_allocWithZone((Class)type metadata accessor for AnalysisContext());
  swift_retain();
  [v8 init];
  sub_100027F5C(&qword_100266708, &qword_1002666F0);
  uint64_t v9 = SpeechAnalyzer.__allocating_init<A>(client:inputSequence:audioFormat:modules:options:restrictedLogging:analysisContext:didChangeVolatileRange:)();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v11 = v0[18];
  return v10(v11, v9);
}

uint64_t sub_1000F25E4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F26D0(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 88) = a3;
  *(void *)(v4 + 96) = a4;
  *(void *)(v4 + 80) = a2;
  *(unsigned char *)(v4 + 272) = a1;
  sub_100028654(&qword_1002699E0);
  *(void *)(v4 + 104) = swift_task_alloc();
  sub_100028654(&qword_100266658);
  *(void *)(v4 + 112) = swift_task_alloc();
  type metadata accessor for ClientInfo();
  *(void *)(v4 + 120) = swift_task_alloc();
  uint64_t v5 = sub_100028654(&qword_100266660);
  *(void *)(v4 + 128) = v5;
  *(void *)(v4 + 136) = *(void *)(v5 - 8);
  *(void *)(v4 + 144) = swift_task_alloc();
  *(void *)(v4 + 152) = swift_task_alloc();
  sub_100028654(&qword_100266668);
  *(void *)(v4 + 160) = swift_task_alloc();
  sub_100028654(&qword_100266670);
  *(void *)(v4 + 168) = swift_task_alloc();
  return _swift_task_switch(sub_1000F2898, 0, 0);
}

uint64_t sub_1000F2898()
{
  if (qword_100264628 != -1) {
    swift_once();
  }
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_100269040 + dword_100269040);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000F2968;
  return v3();
}

uint64_t sub_1000F2968(char a1)
{
  *(unsigned char *)(*(void *)v1 + 273) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000F2A68, 0, 0);
}

uint64_t sub_1000F2A68()
{
  if (*(unsigned char *)(v0 + 273) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 160);
    uint64_t v2 = *(void *)(v0 + 168);
    int v3 = *(unsigned __int8 *)(v0 + 272);
    type metadata accessor for Locale();
    swift_task_alloc();
    Locale.init(identifier:)();
    uint64_t v4 = type metadata accessor for TaskHint();
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v6 = (unsigned int *)&enum case for TaskHint.liveTranscription(_:);
    if (!v3) {
      uint64_t v6 = (unsigned int *)&enum case for TaskHint.offlineTranscription(_:);
    }
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v2, *v6, v4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v4);
    uint64_t v7 = type metadata accessor for Transcriber.ModelOptions();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
    sub_1000F6B50();
    sub_100028654(&qword_100266680);
    uint64_t v8 = type metadata accessor for Transcriber.ReportingOption();
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(void *)(v9 + 72);
    unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v12 = swift_allocObject();
    if (v3)
    {
      *(_OWORD *)(v12 + 16) = xmmword_1001F0FB0;
      uint64_t v13 = *(void (**)(unint64_t, void, uint64_t))(v9 + 104);
      v13(v12 + v11, enum case for Transcriber.ReportingOption.multisegmentResults(_:), v8);
      v13(v12 + v11 + v10, enum case for Transcriber.ReportingOption.volatileResults(_:), v8);
    }
    else
    {
      *(_OWORD *)(v12 + 16) = xmmword_1001F1BD0;
      (*(void (**)(unint64_t, void, uint64_t))(v9 + 104))(v12 + v11, enum case for Transcriber.ReportingOption.multisegmentResults(_:), v8);
    }
    sub_1000D1728(v12);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_100028654(&qword_100266688);
    uint64_t v16 = type metadata accessor for TranscriptionResultAttributeOption();
    uint64_t v17 = *(void *)(v16 - 8);
    unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1001F1BD0;
    (*(void (**)(unint64_t, void, uint64_t))(v17 + 104))(v19 + v18, enum case for TranscriptionResultAttributeOption.timeRange(_:), v16);
    sub_1000D1A40(v19);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    type metadata accessor for Transcriber();
    swift_allocObject();
    uint64_t v20 = Transcriber.init(locale:taskHint:modelOptions:transcriptionOptions:reportingOptions:attributeOptions:)();
    *(void *)(v0 + 192) = v20;
    swift_task_dealloc();
    *(void *)(v0 + 200) = type metadata accessor for SpeechAnalyzer();
    *(void *)(v0 + 208) = sub_100028654(&qword_100266690);
    uint64_t v21 = swift_allocObject();
    *(void *)(v0 + 216) = v21;
    *(_OWORD *)(v21 + 16) = xmmword_1001F1BD0;
    unint64_t v22 = sub_1000F3C08();
    *(void *)(v0 + 224) = v22;
    *(void *)(v21 + 32) = v20;
    *(void *)(v21 + 40) = v22;
    swift_retain_n();
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_1000F3294;
    uint64_t v24 = *(void *)(v0 + 80);
    return static SpeechAnalyzer.bestAudioFormat(compatibleWith:considering:)(v21, v24);
  }
  else
  {
    NSBundle v25 = (uint64_t (__cdecl *)())((char *)&dword_100269048 + dword_100269048);
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000F2FE4;
    return v25();
  }
}

uint64_t sub_1000F2FE4(char a1)
{
  *(unsigned char *)(*(void *)v1 + 274) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000F30E4, 0, 0);
}

uint64_t sub_1000F30E4()
{
  if (*(unsigned char *)(v0 + 274))
  {
    uint64_t v1 = *(void *)(v0 + 104);
    uint64_t v2 = *(void **)(v0 + 80);
    uint64_t v3 = (void *)qword_100275560;
    uint64_t v4 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
    type metadata accessor for MainActor();
    id v5 = v3;
    uint64_t v6 = static MainActor.shared.getter();
    uint64_t v7 = (void *)swift_allocObject();
    v7[2] = v6;
    v7[3] = &protocol witness table for MainActor;
    void v7[4] = v5;
    sub_10001E1A8(v1, (uint64_t)&unk_100266678, (uint64_t)v7);
    swift_release();
    char v8 = 4;
  }
  else
  {
    uint64_t v2 = *(void **)(v0 + 80);
    char v8 = 5;
  }
  sub_1000F3BB0();
  swift_allocError();
  *uint64_t v9 = v8;
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1000F3294(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  id v5 = (void *)*v2;
  v4[30] = a1;
  v4[31] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return _swift_task_switch(sub_1000F35A4, 0, 0);
  }
  else
  {
    uint64_t v6 = (int *)v4[11];
    swift_bridgeObjectRelease();
    uint64_t v9 = (int *)((char *)v6 + *v6);
    uint64_t v7 = (void *)swift_task_alloc();
    v4[32] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_1000F3488;
    return ((uint64_t (*)(void *, uint64_t))v9)(v4 + 2, a1);
  }
}

uint64_t sub_1000F3488()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    uint64_t v2 = sub_1000F3918;
  }
  else
  {
    uint64_t v2 = sub_1000F366C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F35A4()
{
  uint64_t v1 = *(void **)(v0 + 80);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000F366C()
{
  long long v1 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 224);
  uint64_t v15 = *(void *)(v0 + 112);
  uint64_t v16 = *(void **)(v0 + 80);
  *(_OWORD *)(v0 + 64) = v1;
  type metadata accessor for AnalyzerInput();
  sub_1000F3C60();
  AsyncMapSequence.init(_:transform:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  ClientInfo.init(identifier:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v3, v6);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001F1BD0;
  *(void *)(v7 + 32) = v2;
  *(void *)(v7 + 40) = v14;
  uint64_t v8 = type metadata accessor for AnalysisOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v15, 1, 1, v8);
  id v9 = objc_allocWithZone((Class)type metadata accessor for AnalysisContext());
  swift_retain();
  [v9 init];
  sub_100027F5C(&qword_1002666A8, &qword_100266660);
  uint64_t v10 = SpeechAnalyzer.__allocating_init<A>(client:inputSequence:audioFormat:modules:options:restrictedLogging:analysisContext:didChangeVolatileRange:)();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  uint64_t v12 = *(void *)(v0 + 192);
  return v11(v12, v10);
}

uint64_t sub_1000F3918()
{
  long long v1 = *(void **)(v0 + 80);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000F39EC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000F3A2C(char *a1@<X8>)
{
  sub_100115838(*(void **)(v1 + 16), a1);
}

uint64_t sub_1000F3A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100015B60;
  return sub_1000F42A4(a1, a2, v6);
}

uint64_t sub_1000F3AFC(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100031604;
  return sub_1000F4970(a1, v5, v4);
}

uint64_t sub_1000F3BA8()
{
  return sub_1000F56E8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_1000F3BB0()
{
  unint64_t result = qword_100269A00;
  if (!qword_100269A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100269A00);
  }
  return result;
}

unint64_t sub_1000F3C08()
{
  unint64_t result = qword_100266698;
  if (!qword_100266698)
  {
    type metadata accessor for Transcriber();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266698);
  }
  return result;
}

unint64_t sub_1000F3C60()
{
  unint64_t result = qword_1002666A0;
  if (!qword_1002666A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002666A0);
  }
  return result;
}

uint64_t sub_1000F3CB4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F3CF4()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100015B60;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1002666B0 + dword_1002666B0);
  return v5(v2, v3);
}

uint64_t sub_1000F3DAC()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000F3DF4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100031604;
  return sub_1000EE11C(a1, v4, v5, v6, v7, v8);
}

unsigned char *storeEnumTagSinglePayload for RecordingTranscriptionService.RecordingTranscriptionServiceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F3F8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordingTranscriptionService.RecordingTranscriptionServiceError()
{
  return &type metadata for RecordingTranscriptionService.RecordingTranscriptionServiceError;
}

uint64_t getEnumTagSinglePayload for TranscriptionError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TranscriptionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F4120);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptionError()
{
  return &type metadata for TranscriptionError;
}

unint64_t sub_1000F415C()
{
  unint64_t result = qword_100266710;
  if (!qword_100266710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266710);
  }
  return result;
}

unint64_t sub_1000F41B4()
{
  unint64_t result = qword_100266718;
  if (!qword_100266718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100266718);
  }
  return result;
}

uint64_t sub_1000F4208(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_1000F422C, 0, 0);
}

uint64_t sub_1000F422C()
{
  id v1 = *(id *)(v0 + 24);
  AnalyzerInput.init(buffer:bufferStartTime:)();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000F42A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1000F42C8, 0, 0);
}

uint64_t sub_1000F42C8()
{
  uint64_t v2 = (void *)v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v1, v3);
  id v6 = sub_1000D8CF0(v5, v2, (CMTimeEpoch)&off_100223790);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = (void *)v0[2];
  swift_task_dealloc();
  void *v13 = v6;
  v13[1] = v8;
  v13[2] = v10;
  v13[3] = v12;
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1000F4414(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a3;
  uint64_t v5 = *a2;
  v4[4] = a4;
  v4[5] = v5;
  return _swift_task_switch(sub_1000F443C, 0, 0);
}

uint64_t sub_1000F443C()
{
  **(void **)(v0 + 16) = sub_10013E22C(*(void **)(v0 + 40), *(void **)(v0 + 32));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F44CC(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for EARResultType();
  v2[4] = v3;
  void v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000F458C, 0, 0);
}

uint64_t sub_1000F458C()
{
  uint64_t v1 = type metadata accessor for AttributedString();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = Transcriber.MultisegmentResult.transcriptions.getter();
  sub_100028654(&qword_100266620);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v2 + 16))(v5, v4 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)), v1);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v6, v7, 1, v1);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1) == 1)
  {
    sub_1000285F8(v6, &qword_100266620);
    swift_task_dealloc();
LABEL_10:
    uint64_t v12 = v0[2];
    swift_task_dealloc();
    uint64_t v13 = type metadata accessor for TranscriptionUtterance();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    goto LABEL_14;
  }
  uint64_t v9 = v0[5];
  uint64_t v8 = v0[6];
  uint64_t v10 = v0[4];
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v19(v3, v6, v1);
  swift_task_dealloc();
  Transcriber.MultisegmentResult.earResultType.getter();
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 88))(v8, v10);
  if (v11 != enum case for EARResultType.partial(_:)
    && v11 != enum case for EARResultType.final(_:)
    && v11 != enum case for EARResultType.finalAndTerminal(_:))
  {
    (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
    goto LABEL_10;
  }
  Transcriber.MultisegmentResult.resultsFinalToTime.getter();
  Transcriber.MultisegmentResult.range.getter();
  CMTimeRange.end.getter();
  if (static CMTime.>= infix(_:_:)()) {
    sub_1000F6D8C(v3);
  }
  uint64_t v14 = (unsigned char *)v0[2];
  Transcriber.MultisegmentResult.resultsFinalToTime.getter();
  Transcriber.MultisegmentResult.range.getter();
  CMTimeRange.end.getter();
  char v15 = static CMTime.>= infix(_:_:)();
  uint64_t v16 = type metadata accessor for TranscriptionUtterance();
  v19((uint64_t)&v14[*(int *)(v16 + 20)], v3, v1);
  *uint64_t v14 = v15 & 1;
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 0, 1, v16);
  swift_task_dealloc();
LABEL_14:
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1000F4970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  sub_100028654(&qword_1002654F0);
  void v3[5] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TranscriptionUtterance();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = sub_100028654(&qword_100265508);
  void v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = sub_100028654(&qword_1002654F8);
  v3[13] = swift_task_alloc();
  uint64_t v6 = sub_100028654(&qword_100265500);
  v3[14] = v6;
  v3[15] = *(void *)(v6 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  return _swift_task_switch(sub_1000F4B68, 0, 0);
}

uint64_t sub_1000F4B68()
{
  static Task<>.checkCancellation()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000F4CA0;
  return SpeechAnalyzer.finalizeAndFinishThroughEndOfInput()();
}

uint64_t sub_1000F4CA0()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_1000F4E28, 0, 0);
  }
}

uint64_t sub_1000F4E28()
{
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v13 = v0[16];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  Transcriber.multisegmentResults.getter();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v5;
  swift_retain();
  swift_retain();
  swift_getOpaqueTypeConformance2();
  AsyncCompactMapSequence.init(_:transform:)();
  uint64_t v7 = type metadata accessor for AttributedString();
  v0[19] = v7;
  v0[20] = *(void *)(v7 - 8);
  v0[21] = swift_task_alloc();
  AttributedString.init()();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v13, v1, v3);
  sub_100027F5C(&qword_100265528, &qword_100265500);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  uint64_t v8 = sub_100027F5C(&qword_100265530, &qword_100265508);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[22] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000F5070;
  uint64_t v10 = v0[9];
  uint64_t v11 = v0[5];
  return dispatch thunk of AsyncIteratorProtocol.next()(v11, v10, v8);
}

uint64_t sub_1000F5070()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[20];
    uint64_t v3 = v2[21];
    uint64_t v5 = v2[19];
    uint64_t v7 = v2[10];
    uint64_t v6 = v2[11];
    uint64_t v8 = v2[9];
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = sub_1000F5618;
  }
  else
  {
    uint64_t v9 = sub_1000F51C4;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_1000F51C4()
{
  NSBundle v25 = v0;
  uint64_t v1 = v0[5];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[7] + 48))(v1, 1, v0[6]) == 1)
  {
    uint64_t v3 = v0[20];
    uint64_t v2 = v0[21];
    uint64_t v4 = v0[19];
    uint64_t v5 = v0[17];
    uint64_t v7 = v0[14];
    uint64_t v6 = v0[15];
    uint64_t v8 = v0[2];
    (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
    sub_1000285F8(v1, &qword_1002654F0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v8, v2, v4);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
LABEL_5:
    return v9();
  }
  uint64_t v10 = v0[23];
  sub_1000DBE24(v1, v0[8]);
  static Task<>.checkCancellation()();
  if (v10)
  {
    uint64_t v12 = v0[10];
    uint64_t v11 = v0[11];
    uint64_t v14 = v0[8];
    uint64_t v13 = v0[9];
    (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
    sub_1000DC060(v14);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    (*(void (**)(void, void))(v0[15] + 8))(v0[17], v0[14]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    goto LABEL_5;
  }
  if (*(unsigned char *)v0[8])
  {
    sub_1000F7458(&qword_100266740, (void (*)(uint64_t))&type metadata accessor for AttributedString);
    AttributedString.append<A>(_:)();
  }
  else
  {
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10002272C(v16, (uint64_t)qword_100275340);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    unint64_t v18 = Logger.logObject.getter();
    if (os_log_type_enabled(v18, v17))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      *(void *)(v19 + 4) = sub_10002F3B8(0xD000000000000010, 0x80000001001EBD90, &v24);
      _os_log_impl((void *)&_mh_execute_header, v18, v17, "%s - utterances are expected to be finalized", (uint8_t *)v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  sub_1000DC060(v0[8]);
  uint64_t v20 = sub_100027F5C(&qword_100265530, &qword_100265508);
  uint64_t v21 = (void *)swift_task_alloc();
  v0[22] = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_1000F5070;
  uint64_t v22 = v0[9];
  uint64_t v23 = v0[5];
  return dispatch thunk of AsyncIteratorProtocol.next()(v23, v22, v20);
}

uint64_t sub_1000F5618()
{
  (*(void (**)(void, void))(v0[15] + 8))(v0[17], v0[14]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000F56E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_1002699E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = 0;
  void v9[3] = 0;
  uint64_t v9[4] = a1;
  v9[5] = a2;
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  swift_retain();
  swift_retain();
  if (v10 == 1)
  {
    sub_1000285F8((uint64_t)v6, &qword_1002699E0);
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    if (v9[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v12 = v13;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
  }
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = &unk_100266728;
  *(void *)(v14 + 24) = v9;
  if (v12 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v12;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1000F593C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100031604;
  return SpeechAnalyzer.cancelAndFinishNow()();
}

uint64_t sub_1000F59D0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000F5A18()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100015B60;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100031604;
  return SpeechAnalyzer.cancelAndFinishNow()();
}

uint64_t sub_1000F5AF0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for TranscriptionUtterance()
{
  uint64_t result = qword_1002667F0;
  if (!qword_1002667F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000F5B74()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F5BB4(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Transcriber.TranscriptionOption();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1000F75A8(&qword_100264928);
  swift_bridgeObjectRetain();
  id v34 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v33 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v12;
    uint64_t v28 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v32 = *(void *)(v15 + 56);
    os_log_type_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v27[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v32 * v13;
      unint64_t v20 = *(void *)(v10 + 48) + v32 * v13;
      uint64_t v21 = v14;
      v14(v9, v20, v6);
      sub_1000F75A8(&qword_100264930);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *v17;
      (*v17)(v9, v6);
      if (v22) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v31;
      uint64_t v14 = v21;
      uint64_t v10 = v18;
      if (((*(void *)(v33 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    NSBundle v25 = v34;
    v14(v9, v34, v6);
    uint64_t v35 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_1000F6298((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_1000F5EB0()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for Transcriber.TranscriptionOption();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100028654(&qword_100264920);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1000F75A8(&qword_100264928);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_1000F6298(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for Transcriber.TranscriptionOption();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000F5EB0();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1000F6510();
      goto LABEL_12;
    }
    sub_1000F67B4();
  }
  uint64_t v12 = *v3;
  sub_1000F75A8(&qword_100264928);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    int64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    unint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1000F75A8(&qword_100264930);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_1000F6510()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Transcriber.TranscriptionOption();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100028654(&qword_100264920);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000F67B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Transcriber.TranscriptionOption();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100028654(&qword_100264920);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1000F75A8(&qword_100264928);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void *sub_1000F6B50()
{
  uint64_t v0 = type metadata accessor for Transcriber.TranscriptionOption();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = v1;
  uint64_t v3 = __chkstk_darwin(v0);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v15 - v6;
  sub_100028654(&qword_100266780);
  uint64_t v8 = *(void *)(v1 + 72);
  unint64_t v9 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1001F2610;
  unint64_t v11 = v10 + v9;
  unint64_t v12 = *(void (**)(unint64_t, void, uint64_t))(v2 + 104);
  v12(v11, enum case for Transcriber.TranscriptionOption.contextualizedTranscription(_:), v0);
  v12(v11 + v8, enum case for Transcriber.TranscriptionOption.punctuation(_:), v0);
  v12(v11 + 2 * v8, enum case for Transcriber.TranscriptionOption.emoji(_:), v0);
  uint64_t v13 = sub_1000D1410(v10);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  int64_t v16 = v13;
  if ([self isProfanityFiltered])
  {
    v12((unint64_t)v5, enum case for Transcriber.TranscriptionOption.etiquetteReplacements(_:), v0);
    sub_1000F5BB4((uint64_t)v7, v5);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v0);
    return v16;
  }
  return v13;
}

uint64_t sub_1000F6D8C(uint64_t a1)
{
  uint64_t v35 = sub_100028654(&qword_100266748);
  v33[0] = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v3 = (char *)v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v8 = type metadata accessor for AttributedString.Runs();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributedString.runs.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v12 = sub_100028654(&qword_100266750);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TimeRangeAttribute();
  uint64_t v17 = sub_1000F7458(&qword_100266758, (void (*)(uint64_t))&type metadata accessor for TimeRangeAttribute);
  v33[3] = v16;
  v33[2] = v17;
  AttributedString.Runs.subscript.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v34 = v3;
  AttributedString.Runs.AttributesSlice1.makeIterator()();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v18 = sub_100028654(&qword_100266760);
  __chkstk_darwin(v18 - 8);
  int64_t v20 = (char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = a1;
  while (1)
  {
    AttributedString.Runs.AttributesSlice1.Iterator.next()();
    uint64_t v22 = sub_100028654(&qword_100266768);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v20, 1, v22) == 1) {
      break;
    }
    uint64_t v23 = sub_100028654(&qword_100266770);
    uint64_t v42 = v33;
    uint64_t v24 = *(void *)(*(void *)(v23 - 8) + 64);
    __chkstk_darwin(v23);
    uint64_t v25 = (char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v40 = *(void *)v20;
    uint64_t v41 = *((void *)v20 + 1);
    uint64_t v39 = *((void *)v20 + 2);
    uint64_t v36 = *((void *)v20 + 3);
    uint64_t v37 = *((void *)v20 + 4);
    uint64_t v38 = *((void *)v20 + 5);
    int v43 = v20[48];
    sub_1000F74A0((uint64_t)&v20[*(int *)(v22 + 48)], (uint64_t)v25);
    memset(v46, 0, sizeof(v46));
    char v47 = 1;
    sub_100027F5C(&qword_100268D80, &qword_100266770);
    uint64_t v26 = (uint64_t (*)(void *, void))AttributedString.subscript.modify();
    AttributedSubstring.subscript.setter();
    uint64_t v27 = v26(v44, 0);
    __chkstk_darwin(v27);
    sub_1000F7508((uint64_t)v25, (uint64_t)v25);
    uint64_t KeyPath = swift_getKeyPath();
    v33[-2] = __chkstk_darwin(KeyPath);
    swift_getKeyPath();
    double v29 = 0.0;
    double v30 = 0.0;
    if ((v43 & 1) == 0)
    {
      uint64_t v48 = v40;
      uint64_t v49 = v41;
      uint64_t v50 = v39;
      uint64_t v51 = v36;
      uint64_t v52 = v37;
      uint64_t v53 = v38;
      CMTime.seconds.getter();
      double v29 = v31;
      CMTimeRange.end.getter();
      CMTime.seconds.getter();
      if (v29 > v30)
      {
        __break(1u);
        return (*(uint64_t (**)(char *, uint64_t))(v33[0] + 8))(v34, v35);
      }
    }
    *(double *)id v44 = v29;
    *(double *)&v44[1] = v30;
    char v45 = v43;
    unint64_t v21 = (void (*)(_OWORD *, void))AttributedString.subscript.modify();
    sub_1000E93EC();
    AttributedSubstring.subscript.setter();
    v21(v46, 0);
    sub_1000285F8((uint64_t)v25, &qword_100266770);
    sub_1000285F8((uint64_t)v25, &qword_100266770);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v33[0] + 8))(v34, v35);
}

uint64_t sub_1000F7458(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F74A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100266770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F7508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100266770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F7574()
{
  return 8;
}

uint64_t sub_1000F7580()
{
  return swift_release();
}

uint64_t sub_1000F7588(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_1000F759C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000F75A8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Transcriber.TranscriptionOption();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1000F75EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for AttributedString();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_1000F76B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for AttributedString();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

unsigned char *sub_1000F7720(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for AttributedString();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

unsigned char *sub_1000F779C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for AttributedString();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

unsigned char *sub_1000F7818(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for AttributedString();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

unsigned char *sub_1000F7894(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for AttributedString();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000F7910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F7924);
}

uint64_t sub_1000F7924(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for AttributedString();
    unint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 20)];
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1000F79D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F79E8);
}

unsigned char *sub_1000F79E8(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for AttributedString();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000F7A8C()
{
  uint64_t result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL sub_1000F7C9C(uint64_t a1)
{
  swift_getObjectType();
  sub_1000F801C(a1, (uint64_t)v6);
  if (!v7)
  {
    sub_1000F7FBC((uint64_t)v6);
    goto LABEL_5;
  }
  if (!swift_dynamicCast())
  {
LABEL_5:
    uint64_t v2 = 0;
    goto LABEL_6;
  }
  uint64_t v2 = v5;
LABEL_6:
  BOOL v3 = v2 != 0;

  return v3;
}

id sub_1000F7E0C()
{
  return sub_1000F7F60(type metadata accessor for TranscriptWaitingViewTextAttachment);
}

uint64_t type metadata accessor for TranscriptWaitingViewTextAttachment()
{
  return self;
}

id sub_1000F7F48()
{
  return sub_1000F7F60(type metadata accessor for TranscriptWaitingViewTextAttachmentViewProvider);
}

id sub_1000F7F60(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for TranscriptWaitingViewTextAttachmentViewProvider()
{
  return self;
}

uint64_t sub_1000F7FBC(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_100265A10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F801C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100265A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000F8084()
{
  *(void *)&v0[OBJC_IVAR____TtC10VoiceMemos35TranscriptWaitingViewTextAttachment_textAttachmentViewProvider] = 0;

  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *sub_1000F8110(void *a1, uint64_t a2, id a3)
{
  uint64_t v5 = OBJC_IVAR____TtC10VoiceMemos35TranscriptWaitingViewTextAttachment_textAttachmentViewProvider;
  uint64_t result = *(void **)&v3[OBJC_IVAR____TtC10VoiceMemos35TranscriptWaitingViewTextAttachment_textAttachmentViewProvider];
  if (!result)
  {
    id v8 = [a3 textLayoutManager];
    id v9 = objc_allocWithZone((Class)type metadata accessor for TranscriptWaitingViewTextAttachmentViewProvider());
    id v10 = a1;
    unint64_t v11 = v3;
    id v12 = [v9 initWithTextAttachment:v11 parentView:v10 textLayoutManager:v8 location:a2];

    uint64_t v13 = *(void **)&v3[v5];
    *(void *)&v3[v5] = v12;

    uint64_t result = *(void **)&v3[v5];
    if (result)
    {
      [result setTracksTextAttachmentViewBounds:1];
      return *(void **)&v3[v5];
    }
  }
  return result;
}

uint64_t sub_1000F81F0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_timeController;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_timeController);
  *(void *)(v2 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_timeController) = a1;
  swift_unknownObjectRetain();
  if (v4) {
    [v4 removeTimeObserver:v2];
  }
  uint64_t v5 = *(void **)(v2 + v3);
  if (v5) {
    [v5 addTimeObserver:v2];
  }
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t sub_1000F8354()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    sub_10002F970(result + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager, (uint64_t)v2);

    sub_10001510C(v2, v2[3]);
    sub_1000D25B8();
    return sub_10002F48C((uint64_t)v2);
  }
  return result;
}

void sub_1000F83D4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

id sub_1000F846C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TranscriptViewConfigurationMediator();
  return [super dealloc];
}

uint64_t sub_1000F851C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F8554()
{
  return sub_1000F8354();
}

uint64_t sub_1000F855C()
{
  return swift_release();
}

void *sub_1000F8564()
{
  uint64_t result = sub_10001510C((void *)(v0 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider), *(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider + 24));
  if (*(unsigned char *)(*result + 32) == 2)
  {
    sub_10001510C((void *)(v0 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager + 24));
    return (void *)sub_1000D25B8();
  }
  return result;
}

uint64_t sub_1000F85C0(void **a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = (void *)result;
    swift_retain();
    id v4 = [v1 currentUserActivity];
    [v4 activityType];

    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

id sub_1000F86A8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCUserActivityStatePublisher();
  return [super dealloc];
}

id sub_1000F8728@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 currentUserActivity];
  *a2 = result;
  return result;
}

id sub_1000F8764@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 activityType];
  *a2 = result;
  return result;
}

id sub_1000F8798(void *a1, id *a2)
{
  return [*a2 setActivityType:*a1];
}

uint64_t sub_1000F87AC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F87E4(void **a1)
{
  return sub_1000F85C0(a1);
}

uint64_t sub_1000F87EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = a1;
  uint64_t v7 = type metadata accessor for Publishers.First();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v15 - v9;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  Publisher.first()();
  id v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a3;
  uint64_t v12[3] = a4;
  v12[4] = v15;
  v12[5] = a2;
  v12[6] = v11;
  swift_retain();
  swift_retain();
  swift_getWitnessTable();
  uint64_t v13 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_beginAccess();
  *(void *)(v11 + 16) = v13;
  swift_release();
  return swift_release();
}

uint64_t sub_1000F89B8()
{
  swift_release();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F89F0(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 16) = 0;
  return swift_release();
}

uint64_t sub_1000F8A64()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000F8AA4(uint64_t a1)
{
  return sub_1000F89F0(a1, *(void (**)(void))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1000F8AB4(void *a1)
{
  uint64_t v3 = sub_100028654(&qword_100266AA0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001510C(a1, a1[3]);
  sub_1000FBEB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for Date();
  sub_1000FBF04(&qword_100266AB0);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AppStoreRatingModel.RatingStats();
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000F8C4C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v27 = sub_100028654(&qword_100266AB8);
  uint64_t v4 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  int v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AppStoreRatingModel.RatingStats();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001510C(a1, a1[3]);
  sub_1000FBEB0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10002F48C((uint64_t)a1);
  }
  uint64_t v23 = v9;
  uint64_t v25 = v4;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v24 = &v22;
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v29 = 0;
  sub_1000FBF04(&qword_100266AC0);
  uint64_t v14 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = v11;
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  uint64_t v16 = (uint64_t)v23;
  v15(v23, v13, v10);
  char v28 = 1;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v14);
  int64_t v20 = (uint64_t *)(v16 + *(int *)(v7 + 20));
  *int64_t v20 = v17;
  v20[1] = v19;
  sub_1000FBF48(v16, v26);
  sub_10002F48C((uint64_t)a1);
  return sub_1000FB834(v16);
}

uint64_t sub_1000F8F8C()
{
  if (*v0) {
    return 0x6E6F6973726576;
  }
  else {
    return 1702125924;
  }
}

uint64_t sub_1000F8FC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000FAE50(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000F8FE8(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000F8FF4(uint64_t a1)
{
  unint64_t v2 = sub_1000FBEB0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F9030(uint64_t a1)
{
  unint64_t v2 = sub_1000FBEB0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000F906C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F8C4C(a1, a2);
}

uint64_t sub_1000F9084(void *a1)
{
  return sub_1000F8AB4(a1);
}

uint64_t sub_1000F909C()
{
  *(_OWORD *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_1000F90C0, 0, 0);
}

uint64_t sub_1000F90C0()
{
  if (sub_1000FAF34())
  {
    uint64_t v1 = (uint64_t (*)(void))v0[1];
    return v1(0);
  }
  else
  {
    uint64_t v7 = v0[3];
    uint64_t ObjectType = swift_getObjectType();
    int v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v7 + 8) + **(int **)(v7 + 8));
    uint64_t v4 = (void *)swift_task_alloc();
    v0[4] = v4;
    void *v4 = v0;
    v4[1] = sub_1000F9200;
    uint64_t v5 = v0[3];
    return v6(ObjectType, v5);
  }
}

uint64_t sub_1000F9200(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(BOOL))(v5 + 8);
  return v3(a1 > 14);
}

uint64_t sub_1000F9300()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100015B60;
  return sub_1000FB15C();
}

uint64_t sub_1000F938C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000FC1B8;
  return StoreReviewGatingController.canPrompt()();
}

uint64_t sub_1000F9420()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100031604;
  return StoreReviewGatingController.didPrompt()();
}

uint64_t sub_1000F94B4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_100006A5C, 0, 0);
}

uint64_t sub_1000F94D4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_1000F94F4, 0, 0);
}

uint64_t sub_1000F94F4()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[2];
  v0[3] = v2;
  if (v2)
  {
    v0[4] = 0;
    uint64_t v3 = v1 + 4;
    uint64_t v4 = v1[7];
    uint64_t v5 = v1[8];
    swift_bridgeObjectRetain();
    sub_10001510C(v3, v4);
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 16) + **(int **)(v5 + 16));
    uint64_t v6 = (void *)swift_task_alloc();
    v0[5] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000F9648;
    return v9(v4, v5);
  }
  else
  {
    uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
    return v8(1);
  }
}

uint64_t sub_1000F9648(char a1)
{
  *(unsigned char *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000F9748, 0, 0);
}

uint64_t sub_1000F9748()
{
  if ((*(unsigned char *)(v0 + 48) & 1) != 0 && (uint64_t v1 = *(void *)(v0 + 32) + 1, v1 != *(void *)(v0 + 24)))
  {
    *(void *)(v0 + 32) = v1;
    uint64_t v5 = (void *)(*(void *)(v0 + 16) + 40 * v1);
    uint64_t v6 = v5[7];
    uint64_t v7 = v5[8];
    sub_10001510C(v5 + 4, v6);
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v7 + 16) + **(int **)(v7 + 16));
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 40) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1000F9648;
    return v9(v6, v7);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = *(unsigned __int8 *)(v0 + 48);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v3(v2);
  }
}

uint64_t sub_1000F98B0(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_1000F98D0, 0, 0);
}

uint64_t sub_1000F98D0()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[2];
  v0[3] = v2;
  if (v2)
  {
    v0[4] = 0;
    uint64_t v3 = v1 + 4;
    uint64_t v4 = v1[7];
    uint64_t v5 = v1[8];
    swift_bridgeObjectRetain();
    sub_10001510C(v3, v4);
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 24) + **(int **)(v5 + 24));
    uint64_t v6 = (void *)swift_task_alloc();
    v0[5] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000F9A20;
    return v9(v4, v5);
  }
  else
  {
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_1000F9A20()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000F9B1C, 0, 0);
}

uint64_t sub_1000F9B1C()
{
  uint64_t v1 = v0[4] + 1;
  if (v1 == v0[3])
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    v0[4] = v1;
    uint64_t v4 = (void *)(v0[2] + 40 * v1);
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    sub_10001510C(v4 + 4, v5);
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 24) + **(int **)(v6 + 24));
    uint64_t v7 = (void *)swift_task_alloc();
    v0[5] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1000F9A20;
    return v8(v5, v6);
  }
}

uint64_t sub_1000F9C78()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1000F9D20;
  v3[2] = v2;
  return _swift_task_switch(sub_1000F94F4, 0, 0);
}

uint64_t sub_1000F9D20(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_1000F9E1C()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100031604;
  v3[2] = v2;
  return _swift_task_switch(sub_1000F98D0, 0, 0);
}

uint64_t sub_1000F9EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 56) = a4;
  return _swift_task_switch(sub_1000351E8, 0, 0);
}

void sub_1000F9EE4()
{
  uint64_t v1 = sub_100028654(&qword_1002699E0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [self currentDevice];
  id v5 = [v4 userInterfaceIdiom];

  if (!v5)
  {
    uint64_t v6 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
    type metadata accessor for MainActor();
    id v7 = v0;
    uint64_t v8 = static MainActor.shared.getter();
    uint64_t v9 = (void *)swift_allocObject();
    void v9[2] = v8;
    void v9[3] = &protocol witness table for MainActor;
    uint64_t v9[4] = v7;
    sub_10001E1A8((uint64_t)v3, (uint64_t)&unk_100266988, (uint64_t)v9);
    swift_release();
  }
}

uint64_t sub_1000FA038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[12] = a4;
  type metadata accessor for MainActor();
  v4[13] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[14] = v6;
  v4[15] = v5;
  return _swift_task_switch(sub_1000FA0D0, v6, v5);
}

uint64_t sub_1000FA0D0()
{
  id v1 = sub_1000FB524();
  v0[16] = v1;
  if (v1)
  {
    sub_100015D6C((uint64_t)(v0 + 2));
    uint64_t v2 = v0[5];
    uint64_t v3 = v0[6];
    sub_10001510C(v0 + 2, v2);
    id v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 16) + **(int **)(v3 + 16));
    id v4 = (void *)swift_task_alloc();
    v0[17] = v4;
    void *v4 = v0;
    v4[1] = sub_1000FA234;
    return v7(v2, v3);
  }
  else
  {
    swift_release();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_1000FA234(char a1)
{
  uint64_t v2 = *v1;
  *(unsigned char *)(*v1 + 152) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 120);
  uint64_t v4 = *(void *)(v2 + 112);
  return _swift_task_switch(sub_1000FA35C, v4, v3);
}

uint64_t sub_1000FA35C()
{
  int v1 = *(unsigned __int8 *)(v0 + 152);
  sub_10002F48C(v0 + 16);
  if (v1 == 1)
  {
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10002272C(v2, (uint64_t)qword_100275340);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Calling SKStoreReviewController.requestReview(:)", v5, 2u);
      swift_slowDealloc();
    }
    uint64_t v6 = *(void *)(v0 + 128);

    [self requestReviewInScene:v6];
    sub_100015D6C(v0 + 56);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 88);
    sub_10001510C((void *)(v0 + 56), v7);
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v8 + 24) + **(int **)(v8 + 24));
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1000FA5A4;
    return v13(v7, v8);
  }
  else
  {
    uint64_t v11 = *(void **)(v0 + 128);
    swift_release();

    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
}

uint64_t sub_1000FA5A4()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(void *)(v1 + 112);
  return _swift_task_switch(sub_1000FA6C4, v3, v2);
}

uint64_t sub_1000FA6C4()
{
  uint64_t v1 = *(void **)(v0 + 128);
  swift_release();

  sub_10002F48C(v0 + 56);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

id sub_1000FA7B0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCAppStoreRatingPrompter();
  return [super dealloc];
}

uint64_t sub_1000FA838()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000FA8F8, 0, 0);
}

uint64_t sub_1000FA8F8()
{
  uint64_t v1 = self;
  id v2 = [v1 builtInFolderWithType:0];
  v0[7] = v2;
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = [v1 builtInFolderWithType:3];
    v0[8] = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v7 = v0[5];
      uint64_t v6 = v0[6];
      uint64_t v9 = (void *)v0[3];
      uint64_t v8 = v0[4];
      uint64_t v10 = (void *)swift_allocObject();
      v0[9] = v10;
      void v10[2] = v9;
      void v10[3] = v3;
      v10[4] = v5;
      id v11 = v9;
      id v12 = v3;
      id v13 = v5;
      v0[10] = [v11 context];
      (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v8);
      uint64_t v14 = (void *)swift_task_alloc();
      v0[11] = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_1000FAAF8;
      uint64_t v15 = v0[6];
      return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v15, sub_1000FB648, v10, &type metadata for UInt);
    }
  }
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16(0);
}

uint64_t sub_1000FAAF8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  uint64_t v4 = *(void *)(*v1 + 40);
  uint64_t v5 = *(void *)(*v1 + 32);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);

  if (v0)
  {
    uint64_t v6 = (void (*)())nullsub_9;
  }
  else
  {
    swift_release();
    *(void *)(v2 + 96) = *(void *)(v2 + 16);
    uint64_t v6 = sub_1000FAC8C;
  }
  return _swift_task_switch(v6, 0, 0);
}

void sub_1000FAC8C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void **)(v0 + 64);

  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 96);
    swift_task_dealloc();
    uint64_t v4 = *(void (**)(uint64_t))(v0 + 8);
    v4(v3);
  }
}

uint64_t sub_1000FAD0C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000F9D20;
  return sub_1000FA838();
}

uint64_t sub_1000FAD9C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100031604;
  return sub_1000FA038(a1, v4, v5, v6);
}

uint64_t sub_1000FAE50(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

BOOL sub_1000FAF34()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_1000285F8((uint64_t)v4, &qword_100265A10);
  return v2 != 0;
}

uint64_t sub_1000FB00C()
{
  id v0 = [self mainBundle];
  id v1 = [v0 infoDictionary];

  if (!v1)
  {
    long long v7 = 0u;
    long long v8 = 0u;
    goto LABEL_11;
  }
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v2 + 16) || (unint64_t v3 = sub_1001681C0(0x656C646E75424643, 0xEF6E6F6973726556), (v4 & 1) == 0))
  {
    long long v7 = 0u;
    long long v8 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_10002F4DC(*(void *)(v2 + 56) + 32 * v3, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  if (!*((void *)&v8 + 1))
  {
LABEL_11:
    sub_1000285F8((uint64_t)&v7, &qword_100265A10);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000FB15C()
{
  *(void *)(v0 + 56) = type metadata accessor for AppStoreRatingModel.RatingStats();
  *(void *)(v0 + 64) = swift_task_alloc();
  return _swift_task_switch(sub_1000FB1EC, 0, 0);
}

uint64_t sub_1000FB1EC()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  static Date.now.getter();
  uint64_t v3 = sub_1000FB00C();
  char v4 = (uint64_t *)(v2 + *(int *)(v1 + 20));
  uint64_t *v4 = v3;
  v4[1] = v5;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_1000FB7DC();
  uint64_t v6 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v7 = v0[8];
  uint64_t v8 = v6;
  unint64_t v10 = v9;
  swift_release();
  id v11 = [self standardUserDefaults];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v13 = String._bridgeToObjectiveC()();
  [v11 setObject:isa forKey:v13];
  sub_1000FB890(v8, v10);

  sub_1000FB834(v7);
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

id sub_1000FB524()
{
  id v0 = [self sharedAppDelegate];
  id v1 = v0;
  if (v0)
  {
    id v2 = [v0 defaultSceneDelegate];

    if (!v2) {
      return 0;
    }
    id v3 = [v2 window];
    id v1 = [v3 windowScene];

    if (!v1 || (unsigned __int8 v4 = [v2 isInForeground], v2, v2 = v1, (v4 & 1) == 0))
    {

      return 0;
    }
  }
  return v1;
}

uint64_t sub_1000FB600()
{
  return _swift_deallocObject(v0, 40, 7);
}

char *sub_1000FB648@<X0>(void *a1@<X8>)
{
  unsigned __int8 v4 = (void *)v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  id v6 = [v4 playableCountForFolder:v3];
  uint64_t result = (char *)[v4 playableCountForFolder:v5];
  if (__CFADD__(v6, result)) {
    __break(1u);
  }
  else {
    *a1 = &result[(void)v6];
  }
  return result;
}

ValueMetadata *type metadata accessor for RCStoreReviewGaitingController()
{
  return &type metadata for RCStoreReviewGaitingController;
}

_OWORD *initializeBufferWithCopyOfBuffer for AppStoreRatingModel(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for AppStoreRatingModel(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v3;
  return a1;
}

_OWORD *assignWithTake for AppStoreRatingModel(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  return a1;
}

ValueMetadata *type metadata accessor for AppStoreRatingModel()
{
  return &type metadata for AppStoreRatingModel;
}

uint64_t type metadata accessor for AppStoreRatingModel.RatingStats()
{
  uint64_t result = qword_100266A68;
  if (!qword_100266A68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1000FB7DC()
{
  unint64_t result = qword_1002669F0;
  if (!qword_1002669F0)
  {
    type metadata accessor for AppStoreRatingModel.RatingStats();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1002669F0);
  }
  return result;
}

uint64_t sub_1000FB834(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppStoreRatingModel.RatingStats();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000FB890(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t *sub_1000FB8E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (uint64_t *)((char *)a1 + v8);
    unint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *unint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000FB9C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FBA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000FBAC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000FBB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000FBBD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000FBC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FBC78);
}

uint64_t sub_1000FBC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_1000FBD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FBD5C);
}

uint64_t sub_1000FBD5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t sub_1000FBE1C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1000FBEB0()
{
  unint64_t result = qword_100266AA8;
  if (!qword_100266AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266AA8);
  }
  return result;
}

uint64_t sub_1000FBF04(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Date();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000FBF48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppStoreRatingModel.RatingStats();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for AppStoreRatingModel.RatingStats.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FC078);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppStoreRatingModel.RatingStats.CodingKeys()
{
  return &type metadata for AppStoreRatingModel.RatingStats.CodingKeys;
}

unint64_t sub_1000FC0B4()
{
  unint64_t result = qword_100266AC8;
  if (!qword_100266AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266AC8);
  }
  return result;
}

unint64_t sub_1000FC10C()
{
  unint64_t result = qword_100266AD0;
  if (!qword_100266AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266AD0);
  }
  return result;
}

unint64_t sub_1000FC164()
{
  unint64_t result = qword_100266AD8;
  if (!qword_100266AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266AD8);
  }
  return result;
}

ValueMetadata *type metadata accessor for FrameRateManager()
{
  return &type metadata for FrameRateManager;
}

uint64_t type metadata accessor for RCSegmentedSwitchController()
{
  return self;
}

void sub_1000FC468()
{
}

void sub_1000FC48C()
{
  CurrentValueSubject.value.getter();
  if (v0 >= 3)
  {
    type metadata accessor for RCTrackState(0);
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    sub_100102540(qword_1001F2B00[v0]);
  }
}

id sub_1000FC5B8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RecorderAppDelegateDependencyContainer();
  return [super dealloc];
}

id sub_1000FC688@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = [*a1 mode];
  *a2 = result;
  return result;
}

id sub_1000FC6BC(unsigned int *a1, id *a2)
{
  return [*a2 setMode:*a1];
}

uint64_t sub_1000FC6D0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FC708(void **a1)
{
  return sub_1000E82DC(a1);
}

uint64_t sub_1000FC710()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000FC750(unsigned char *a1)
{
  return sub_100147C64(a1);
}

uint64_t sub_1000FC758(unsigned char *a1)
{
  return sub_1001187E8(a1);
}

uint64_t sub_1000FC760(unsigned char *a1)
{
  return sub_1001643CC(a1);
}

uint64_t sub_1000FC768()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000FC7A0(unsigned char *a1)
{
}

void *assignWithCopy for RCRecordButton(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  sub_1000FC830(a1 + 1, a2 + 1);
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  a1[8] = a2[8];
  return a1;
}

uint64_t *sub_1000FC830(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    int v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        id result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        int v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *id result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for RCRecordButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  sub_10002F48C(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for RCRecordButton(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RCRecordButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)id result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

__n128 sub_1000FCB60@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v24 = sub_100028654(&qword_100265D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(a9, v13, v24);
  uint64_t v25 = (_OWORD *)(a9 + *(int *)(sub_100028654(&qword_100265D80) + 36));
  unsigned char v25[4] = v31;
  void v25[5] = v32;
  v25[6] = v33;
  *uint64_t v25 = v27;
  v25[1] = v28;
  __n128 result = v30;
  _OWORD v25[2] = v29;
  void v25[3] = v30;
  return result;
}

void *sub_1000FCD4C(uint64_t a1)
{
  sub_10001510C((void *)(a1 + 8), *(void *)(a1 + 32));
  __n128 result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    [result recordButtonTapped];
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1000FCDB8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v35 = a3;
  uint64_t v5 = sub_100028654(&qword_100266D68);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  uint64_t v34 = v6;
  __chkstk_darwin(v5);
  long long v32 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100028654(&qword_100266DE8);
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  int v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v36 = (char *)&v28 - v12;
  uint64_t v13 = sub_100028654(&qword_100266DE0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  long long v29 = (char *)&v28 - v18;
  swift_getKeyPath();
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  sub_100028654(&qword_100266E08);
  sub_100027F5C(&qword_100266E10, &qword_100266E08);
  KeyframeTrack.init(_:content:)();
  uint64_t v19 = sub_100027F5C(&qword_100266DF0, &qword_100266DE0);
  static KeyframesBuilder.buildExpression<A>(_:)();
  int64_t v20 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  uint64_t v30 = v14 + 8;
  long long v31 = v20;
  v20(v17, v13);
  swift_getKeyPath();
  uint64_t v38 = v28;
  sub_100028654(&qword_100266E18);
  sub_100027F5C(&qword_100266E20, &qword_100266E18);
  KeyframeTrack.init(_:content:)();
  uint64_t v21 = sub_100027F5C(&qword_100266DF8, &qword_100266DE8);
  static KeyframesBuilder.buildExpression<A>(_:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v37 + 8);
  v37 += 8;
  v22(v11, v8);
  uint64_t v23 = v29;
  static KeyframesBuilder.buildPartialBlock<A>(first:)();
  uint64_t v24 = v32;
  static KeyframesBuilder.buildPartialBlock<A, B>(accumulated:next:)();
  uint64_t v41 = &type metadata for RCRecordButton.TextAnimationValues;
  uint64_t v42 = v13;
  uint64_t v43 = v8;
  uint64_t v44 = v19;
  uint64_t v45 = v21;
  swift_getOpaqueTypeConformance2();
  uint64_t v25 = v33;
  static KeyframesBuilder.buildFinalResult<A>(_:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v25);
  uint64_t v26 = v31;
  v31(v17, v13);
  v22(v36, v8);
  return v26(v23, v13);
}

uint64_t sub_1000FD270@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v76 = a3;
  uint64_t v67 = sub_100028654(&qword_100266E30);
  uint64_t v65 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v64 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100028654(&qword_100266E48);
  uint64_t v70 = *(void *)(v79 - 8);
  uint64_t v6 = __chkstk_darwin(v79);
  long long v69 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v68 = (char *)&v59 - v8;
  uint64_t v9 = type metadata accessor for UnitCurve();
  __chkstk_darwin(v9 - 8);
  unint64_t v71 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100028654(&qword_100266E38);
  uint64_t v77 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v62 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  NSBundle v63 = (char *)&v59 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v61 = (char *)&v59 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  int64_t v20 = (char *)&v59 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v59 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  v78 = (char *)&v59 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v59 - v27;
  __chkstk_darwin(v26);
  uint64_t v66 = (char *)&v59 - v29;
  uint64_t v30 = sub_100028654(&qword_100266E08);
  uint64_t v74 = *(void *)(v30 - 8);
  uint64_t v75 = v30;
  __chkstk_darwin(v30);
  unint64_t v72 = a2;
  uint64_t v73 = (char *)&v59 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *a2;
  swift_getKeyPath();
  uint64_t v81 = v32;
  sub_100027FA0((unint64_t *)&qword_100265D40, (void (*)(uint64_t))type metadata accessor for RCRecordButtonViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v33 = *(unsigned char *)(v32 + 64) | (*(void *)(v32 + 56) != a1);
  swift_getKeyPath();
  uint64_t v81 = v32;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v32 + 65))
  {
    uint64_t v81 = 0;
    if (v33)
    {
      static UnitCurve.linear.getter();
      LinearKeyframe.init(_:duration:timingCurve:)();
      uint64_t v34 = sub_100027F5C(&qword_100266E40, &qword_100266E38);
      uint64_t v35 = v78;
      static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
      uint64_t v36 = *(void (**)(char *, uint64_t))(v77 + 8);
      v36(v23, v11);
      static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)();
      uint64_t v81 = (uint64_t)&type metadata for Double;
      uint64_t v82 = v11;
      uint64_t v83 = v11;
      uint64_t v84 = v34;
      uint64_t v85 = v34;
      swift_getOpaqueTypeConformance2();
      uint64_t v37 = v68;
      static KeyframeTrackContentBuilder.buildEither<A, B>(first:)();
      v36(v23, v11);
      v36(v35, v11);
    }
    else
    {
      swift_getKeyPath();
      uint64_t v80 = v32;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      static UnitCurve.linear.getter();
      uint64_t v43 = v61;
      LinearKeyframe.init(_:duration:timingCurve:)();
      uint64_t v44 = sub_100027F5C(&qword_100266E40, &qword_100266E38);
      CGRect v60 = v20;
      static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v77 + 8);
      v45(v43, v11);
      uint64_t v81 = 0x3FF0000000000000;
      swift_getKeyPath();
      uint64_t v80 = v32;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      static UnitCurve.linear.getter();
      Swift::String v46 = v62;
      LinearKeyframe.init(_:duration:timingCurve:)();
      char v47 = v63;
      static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
      v45(v46, v11);
      uint64_t v48 = v78;
      uint64_t v49 = v60;
      static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)();
      uint64_t v50 = v64;
      static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)();
      uint64_t v81 = (uint64_t)&type metadata for Double;
      uint64_t v82 = v11;
      uint64_t v83 = v11;
      uint64_t v84 = v44;
      uint64_t v85 = v44;
      swift_getOpaqueTypeConformance2();
      uint64_t v37 = v68;
      uint64_t v51 = v67;
      static KeyframeTrackContentBuilder.buildEither<A, B>(second:)();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v50, v51);
      v45(v48, v11);
      v45(v47, v11);
      v45(v49, v11);
    }
    uint64_t v52 = v79;
    uint64_t v54 = v69;
    uint64_t v53 = v70;
    sub_100027F5C(&qword_100266E50, &qword_100266E48);
    static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)();
    sub_100027F5C(&qword_100266E40, &qword_100266E38);
    uint64_t v42 = v73;
    static KeyframeTrackContentBuilder.buildEither<A, B>(second:)();
    Swift::String v55 = *(void (**)(char *, uint64_t))(v53 + 8);
    v55(v54, v52);
    v55(v37, v52);
  }
  else
  {
    double v38 = 1.0;
    if (v33) {
      double v38 = 0.0;
    }
    uint64_t v81 = *(void *)&v38;
    swift_getKeyPath();
    uint64_t v80 = v32;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    static UnitCurve.linear.getter();
    LinearKeyframe.init(_:duration:timingCurve:)();
    sub_100027F5C(&qword_100266E40, &qword_100266E38);
    uint64_t v39 = v66;
    static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v77 + 8);
    v40(v28, v11);
    uint64_t v41 = v78;
    static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)();
    sub_100027F5C(&qword_100266E50, &qword_100266E48);
    uint64_t v42 = v73;
    static KeyframeTrackContentBuilder.buildEither<A, B>(first:)();
    v40(v41, v11);
    v40(v39, v11);
  }
  uint64_t v56 = v75;
  uint64_t v57 = v74;
  sub_100027F5C(&qword_100266E10, &qword_100266E08);
  static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)();
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v42, v56);
}

uint64_t sub_1000FDDBC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v49 = sub_100028654(&qword_100266E28);
  uint64_t v42 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v41 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_100028654(&qword_100266E30);
  uint64_t v40 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v45 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UnitCurve();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = sub_100028654(&qword_100266E38);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v39 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v44 = (char *)&v38 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v51 = (char *)&v38 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v38 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v38 - v16;
  uint64_t v18 = sub_100028654(&qword_100266E18);
  uint64_t v46 = *(void *)(v18 - 8);
  uint64_t v47 = v18;
  __chkstk_darwin(v18);
  uint64_t v52 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *a1;
  swift_getKeyPath();
  uint64_t v54 = v20;
  sub_100027FA0((unint64_t *)&qword_100265D40, (void (*)(uint64_t))type metadata accessor for RCRecordButtonViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(unsigned char *)(v20 + 66) == 1)
  {
    uint64_t v54 = 0x3FF0000000000000;
    swift_getKeyPath();
    uint64_t v53 = v20;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    static UnitCurve.linear.getter();
    LinearKeyframe.init(_:duration:timingCurve:)();
    uint64_t v21 = sub_100027F5C(&qword_100266E40, &qword_100266E38);
    double v38 = v17;
    static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
    uint64_t v22 = (void (*)(char *, uint64_t))*((void *)v43 + 1);
    v22(v15, v6);
    uint64_t v54 = 0x3FF3333333333333;
    static UnitCurve.linear.getter();
    uint64_t v23 = v44;
    LinearKeyframe.init(_:duration:timingCurve:)();
    static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
    uint64_t v43 = v22;
    v22(v23, v6);
    uint64_t v54 = 0x3FF0000000000000;
    static UnitCurve.linear.getter();
    uint64_t v24 = v39;
    LinearKeyframe.init(_:duration:timingCurve:)();
    static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
    v22(v24, v6);
    static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)();
    static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)();
    uint64_t v54 = (uint64_t)&type metadata for Double;
    uint64_t v55 = v6;
    uint64_t v56 = v6;
    uint64_t v57 = v21;
    uint64_t v58 = v21;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v26 = v41;
    uint64_t v27 = v48;
    static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)();
    uint64_t v54 = (uint64_t)&type metadata for Double;
    uint64_t v55 = v27;
    uint64_t v56 = v6;
    uint64_t v57 = OpaqueTypeConformance2;
    uint64_t v58 = v21;
    swift_getOpaqueTypeConformance2();
    uint64_t v28 = v49;
    static KeyframeTrackContentBuilder.buildEither<A, B>(first:)();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v28);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v45, v27);
    uint64_t v29 = v43;
    v43(v24, v6);
    v29(v23, v6);
    v29(v51, v6);
    v29(v38, v6);
  }
  else
  {
    uint64_t v54 = 0x3FF0000000000000;
    static UnitCurve.linear.getter();
    uint64_t v30 = v44;
    LinearKeyframe.init(_:duration:timingCurve:)();
    uint64_t v31 = sub_100027F5C(&qword_100266E40, &qword_100266E38);
    uint64_t v32 = v51;
    static KeyframeTrackContentBuilder.buildExpression<A>(_:)();
    char v33 = (void (*)(char *, uint64_t))*((void *)v43 + 1);
    v33(v30, v6);
    static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)();
    uint64_t v54 = (uint64_t)&type metadata for Double;
    uint64_t v55 = v6;
    uint64_t v56 = v6;
    uint64_t v57 = v31;
    uint64_t v58 = v31;
    uint64_t v34 = swift_getOpaqueTypeConformance2();
    uint64_t v54 = (uint64_t)&type metadata for Double;
    uint64_t v55 = v48;
    uint64_t v56 = v6;
    uint64_t v57 = v34;
    uint64_t v58 = v31;
    swift_getOpaqueTypeConformance2();
    static KeyframeTrackContentBuilder.buildEither<A, B>(second:)();
    v33(v30, v6);
    v33(v32, v6);
  }
  sub_100027F5C(&qword_100266E20, &qword_100266E18);
  uint64_t v35 = v52;
  uint64_t v36 = v47;
  static KeyframeTrackContentBuilder.buildPartialBlock<A>(first:)();
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v35, v36);
}

void *sub_1000FE664()
{
  return sub_1000FCD4C(v0 + 16);
}

uint64_t sub_1000FE67C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000FE6C8()
{
  swift_release();
  sub_10002F48C(v0 + 32);
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000FE710@<X0>(uint64_t a1@<X8>)
{
  return sub_1000FCDB8(*(void *)(v1 + 16), v1 + 24, a1);
}

uint64_t sub_1000FE71C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000FD270(*(void *)(v1 + 16), *(uint64_t **)(v1 + 24), a1);
}

uint64_t sub_1000FE724@<X0>(uint64_t a1@<X8>)
{
  return sub_1000FDDBC(*(uint64_t **)(v1 + 16), a1);
}

uint64_t sub_1000FE734()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1000FE758()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1000FE77C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Image.Scale();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.imageScale.setter();
}

uint64_t sub_1000FE84C()
{
  swift_release();
  sub_10002F48C(v0 + 24);
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

unint64_t sub_1000FE898@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1000FE9A4(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_1000FE8CC(void *a1@<X8>)
{
  *a1 = &off_1002237B8;
}

ValueMetadata *type metadata accessor for RCRecordButtonState()
{
  return &type metadata for RCRecordButtonState;
}

unint64_t sub_1000FE8F0()
{
  unint64_t result = qword_100266ED8;
  if (!qword_100266ED8)
  {
    sub_100027F14(&qword_100266EE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266ED8);
  }
  return result;
}

unint64_t sub_1000FE950()
{
  unint64_t result = qword_100266EE8;
  if (!qword_100266EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100266EE8);
  }
  return result;
}

unint64_t sub_1000FE9A4(unint64_t result)
{
  if (result > 4) {
    return 0;
  }
  return result;
}

uint64_t Sequence<>.sorted(usingSortDescriptors:)()
{
  return Sequence.sorted(by:)();
}

uint64_t sub_1000FEA08(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  if (!(a3 >> 62))
  {
    uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v12 = 0;
LABEL_19:
    swift_bridgeObjectRelease();
    return v12;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t v7 = 4;
  while (1)
  {
    if ((a3 & 0xC000000000000001) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(a3 + 8 * v7);
    }
    uint64_t v9 = v8;
    uint64_t v10 = v7 - 3;
    if (__OFADD__(v7 - 4, 1))
    {
      __break(1u);
      goto LABEL_17;
    }
    id v11 = [v8 compareObject:v4 toObject:v5];
    if (v11) {
      break;
    }

    ++v7;
    if (v10 == v6)
    {
      uint64_t v12 = 0;
      goto LABEL_19;
    }
  }
  if (v11 == (id)-1)
  {
    uint64_t v12 = 1;
LABEL_15:

    goto LABEL_19;
  }
  if (v11 == (id)1)
  {
    uint64_t v12 = 0;
    goto LABEL_15;
  }
  type metadata accessor for ComparisonResult(0);
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t sub_1000FEB70(uint64_t *a1, uint64_t *a2)
{
  return sub_1000FEA08(a1, a2, *(void *)(v2 + 32)) & 1;
}

BOOL sub_1000FEB94(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 17)) {
    uint64_t v2 = 256;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v2 | *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 18)) {
    uint64_t v4 = 0x10000;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(unsigned char *)(a1 + 19)) {
    uint64_t v5 = 0x1000000;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v3 | v4 | v5;
  if (*(unsigned char *)(a1 + 20)) {
    uint64_t v7 = &_mh_execute_header;
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v6 | (unint64_t)v7;
  if (*(unsigned char *)(a2 + 17)) {
    uint64_t v9 = 256;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v9 | *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a2 + 18)) {
    uint64_t v11 = 0x10000;
  }
  else {
    uint64_t v11 = 0;
  }
  if (*(unsigned char *)(a2 + 19)) {
    uint64_t v12 = 0x1000000;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = v10 | v11 | v12;
  if (*(unsigned char *)(a2 + 20)) {
    uint64_t v14 = &_mh_execute_header;
  }
  else {
    uint64_t v14 = 0;
  }
  return sub_1000FFC0C(*(_WORD *)a1, *(void *)(a1 + 8), v8, *(_WORD *)a2, *(void *)(a2 + 8), v13 | (unint64_t)v14, *(double *)(a1 + 24), *(double *)(a2 + 24));
}

uint64_t sub_1000FEC4C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000FF270(v1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000FECAC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  switch(a3 >> 5)
  {
    case 2:
      int v13 = a3 & 1;
      goto LABEL_5;
    case 3:
      int v13 = a1 & 1;
LABEL_5:
      uint64_t v4 = *(void *)(v3 + 40);
      if (v13) {
        char v12 = 5;
      }
      else {
        char v12 = 4;
      }
      uint64_t v5 = *(unsigned __int8 *)(v3 + 48);
      int v6 = *(unsigned __int8 *)(v3 + 49);
      int v7 = *(unsigned __int8 *)(v3 + 50);
      int v8 = *(unsigned __int8 *)(v3 + 51);
      int v9 = *(unsigned __int8 *)(v3 + 52);
      double v10 = *(double *)(v3 + 56);
      uint64_t v11 = *(unsigned __int16 *)(v3 + 32);
      goto LABEL_9;
    case 4:
      if (a2 | a1 || a3 != 128)
      {
        if (a1 == 1 && !a2 && a3 == 128 || a1 != 2 || a2 || a3 != 128)
        {
          uint64_t v4 = *(void *)(v3 + 40);
          uint64_t v5 = *(unsigned __int8 *)(v3 + 48);
          int v6 = *(unsigned __int8 *)(v3 + 49);
          int v7 = *(unsigned __int8 *)(v3 + 50);
          int v8 = *(unsigned __int8 *)(v3 + 51);
          int v9 = *(unsigned __int8 *)(v3 + 52);
          double v10 = *(double *)(v3 + 56);
          uint64_t v11 = *(unsigned __int16 *)(v3 + 32);
          char v12 = 3;
        }
        else
        {
          uint64_t v4 = *(void *)(v3 + 40);
          uint64_t v5 = *(unsigned __int8 *)(v3 + 48);
          int v6 = *(unsigned __int8 *)(v3 + 49);
          int v7 = *(unsigned __int8 *)(v3 + 50);
          int v8 = *(unsigned __int8 *)(v3 + 51);
          int v9 = *(unsigned __int8 *)(v3 + 52);
          double v10 = *(double *)(v3 + 56);
          uint64_t v11 = *(unsigned __int16 *)(v3 + 32);
          char v12 = 2;
        }
LABEL_9:
        *(unsigned char *)(v3 + 33) = v12;
      }
      else
      {
        uint64_t v4 = *(void *)(v3 + 40);
        uint64_t v5 = *(unsigned __int8 *)(v3 + 48);
        int v6 = *(unsigned __int8 *)(v3 + 49);
        int v7 = *(unsigned __int8 *)(v3 + 50);
        int v8 = *(unsigned __int8 *)(v3 + 51);
        int v9 = *(unsigned __int8 *)(v3 + 52);
        double v10 = *(double *)(v3 + 56);
        uint64_t v11 = *(unsigned __int16 *)(v3 + 32);
        *(unsigned char *)(v3 + 33) = 0;
      }
      *(unsigned char *)(v3 + 49) = v6;
      *(unsigned char *)(v3 + 50) = v7;
      *(unsigned char *)(v3 + 51) = v8;
      *(unsigned char *)(v3 + 52) = v9;
      sub_100015758(v4, v5);
      sub_100015758(v4, v5);
      sub_100015758(v4, v5);
      sub_10001576C(v4, v5);
      uint64_t v14 = 256;
      if (!v6) {
        uint64_t v14 = 0;
      }
      uint64_t v15 = v14 | v5;
      uint64_t v16 = 0x10000;
      if (!v7) {
        uint64_t v16 = 0;
      }
      uint64_t v17 = 0x1000000;
      if (!v8) {
        uint64_t v17 = 0;
      }
      uint64_t v18 = v15 | v16 | v17;
      uint64_t v19 = &_mh_execute_header;
      if (!v9) {
        uint64_t v19 = 0;
      }
      sub_100015780(v11, v4, v18 | (unint64_t)v19, v10);
      sub_10001576C(v4, v5);
      return sub_10001576C(v4, v5);
    default:
      uint64_t v4 = *(void *)(v3 + 40);
      uint64_t v5 = *(unsigned __int8 *)(v3 + 48);
      int v6 = *(unsigned __int8 *)(v3 + 49);
      int v7 = *(unsigned __int8 *)(v3 + 50);
      int v8 = *(unsigned __int8 *)(v3 + 51);
      int v9 = *(unsigned __int8 *)(v3 + 52);
      double v10 = *(double *)(v3 + 56);
      uint64_t v11 = *(unsigned __int16 *)(v3 + 32);
      char v12 = 1;
      goto LABEL_9;
  }
}

uint64_t sub_1000FF270(uint64_t a1)
{
  uint64_t v2 = v1;
  switch(a1)
  {
    case 0:
    case 3:
      uint64_t v3 = *(void *)(v1 + 40);
      uint64_t v4 = *(unsigned __int8 *)(v1 + 48);
      int v5 = *(unsigned __int8 *)(v1 + 49);
      int v6 = *(unsigned __int8 *)(v1 + 50);
      int v7 = *(unsigned __int8 *)(v1 + 51);
      int v8 = *(unsigned __int8 *)(v1 + 52);
      double v9 = *(double *)(v1 + 56);
      uint64_t v10 = *(unsigned __int16 *)(v1 + 32);
      char v11 = 2;
      goto LABEL_18;
    case 1:
      uint64_t v3 = *(void *)(v1 + 40);
      uint64_t v4 = *(unsigned __int8 *)(v1 + 48);
      int v5 = *(unsigned __int8 *)(v1 + 49);
      int v6 = *(unsigned __int8 *)(v1 + 50);
      int v7 = *(unsigned __int8 *)(v1 + 51);
      int v8 = *(unsigned __int8 *)(v1 + 52);
      double v9 = *(double *)(v1 + 56);
      uint64_t v10 = *(unsigned __int16 *)(v1 + 32);
      *(unsigned char *)(v2 + 32) = 0;
      goto LABEL_19;
    case 2:
      uint64_t v3 = *(void *)(v1 + 40);
      uint64_t v4 = *(unsigned __int8 *)(v1 + 48);
      int v5 = *(unsigned __int8 *)(v1 + 49);
      int v6 = *(unsigned __int8 *)(v1 + 50);
      int v7 = *(unsigned __int8 *)(v1 + 51);
      int v8 = *(unsigned __int8 *)(v1 + 52);
      double v9 = *(double *)(v1 + 56);
      uint64_t v10 = *(unsigned __int16 *)(v1 + 32);
      char v11 = 1;
LABEL_18:
      *(unsigned char *)(v2 + 32) = v11;
LABEL_19:
      *(unsigned char *)(v2 + 49) = v5;
      *(unsigned char *)(v2 + 50) = v6;
      *(unsigned char *)(v2 + 51) = v7;
      *(unsigned char *)(v2 + 52) = v8;
      sub_100015758(v3, v4);
      sub_100015758(v3, v4);
      sub_100015758(v3, v4);
      sub_10001576C(v3, v4);
      uint64_t v32 = 256;
      if (!v5) {
        uint64_t v32 = 0;
      }
      uint64_t v33 = v32 | v4;
      uint64_t v34 = 0x10000;
      if (!v6) {
        uint64_t v34 = 0;
      }
      uint64_t v35 = 0x1000000;
      if (!v7) {
        uint64_t v35 = 0;
      }
      uint64_t v36 = v33 | v34 | v35;
      uint64_t v37 = &_mh_execute_header;
      if (!v8) {
        uint64_t v37 = 0;
      }
      sub_100015780(v10, v3, v36 | (unint64_t)v37, v9);
      sub_10001576C(v3, v4);
      uint64_t result = sub_10001576C(v3, v4);
      break;
    default:
      if (qword_100264530 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_10002272C(v12, (uint64_t)qword_100275340);
      os_log_type_t v13 = static os_log_type_t.error.getter();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = v13;
      if (os_log_type_enabled(v14, v13))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136315138;
        sub_10002F3B8(0xD00000000000002CLL, 0x80000001001EC490, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - Unexpected user activity type", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v17 = *(void *)(v2 + 40);
      uint64_t v18 = *(unsigned __int8 *)(v2 + 48);
      int v19 = *(unsigned __int8 *)(v2 + 49);
      int v20 = *(unsigned __int8 *)(v2 + 50);
      int v21 = *(unsigned __int8 *)(v2 + 51);
      int v22 = *(unsigned __int8 *)(v2 + 52);
      double v23 = *(double *)(v2 + 56);
      uint64_t v24 = *(unsigned __int16 *)(v2 + 32);
      *(unsigned char *)(v2 + 32) = 2;
      *(unsigned char *)(v2 + 49) = v19;
      *(unsigned char *)(v2 + 50) = v20;
      *(unsigned char *)(v2 + 51) = v21;
      *(unsigned char *)(v2 + 52) = v22;
      sub_100015758(v17, v18);
      sub_100015758(v17, v18);
      sub_100015758(v17, v18);
      sub_10001576C(v17, v18);
      uint64_t v25 = 256;
      if (!v19) {
        uint64_t v25 = 0;
      }
      uint64_t v26 = v25 | v18;
      uint64_t v27 = 0x10000;
      if (!v20) {
        uint64_t v27 = 0;
      }
      uint64_t v28 = 0x1000000;
      if (!v21) {
        uint64_t v28 = 0;
      }
      uint64_t v29 = v26 | v27 | v28;
      uint64_t v30 = &_mh_execute_header;
      if (!v22) {
        uint64_t v30 = 0;
      }
      sub_100015780(v24, v17, v29 | (unint64_t)v30, v23);
      sub_10001576C(v17, v18);
      uint64_t result = sub_10001576C(v17, v18);
      break;
  }
  return result;
}

uint64_t sub_1000FF658()
{
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001576C(*(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return swift_deallocClassInstance();
}

uint64_t destroy for TranscriptViewContext(uint64_t a1)
{
  return sub_10001576C(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeWithCopy for TranscriptViewContext(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100015758(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 17) = *(_DWORD *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for TranscriptViewContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100015758(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  char v7 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10001576C(v6, v7);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for TranscriptViewContext(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  sub_10001576C(v5, v6);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for TranscriptViewContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TranscriptViewContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewContext()
{
  return &type metadata for TranscriptViewContext;
}

uint64_t destroy for TranscriptViewContextChanged(uint64_t a1)
{
  sub_10001576C(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  char v3 = *(unsigned char *)(a1 + 48);

  return sub_10001576C(v2, v3);
}

uint64_t initializeWithCopy for TranscriptViewContextChanged(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100015758(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 17) = *(_DWORD *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  char v7 = *(unsigned char *)(a2 + 48);
  sub_100015758(v6, v7);
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 49) = *(_DWORD *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for TranscriptViewContextChanged(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100015758(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  char v7 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10001576C(v6, v7);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_100015758(v8, v9);
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  char v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v9;
  sub_10001576C(v10, v11);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(unsigned char *)(a1 + 51) = *(unsigned char *)(a2 + 51);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for TranscriptViewContextChanged(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TranscriptViewContextChanged(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  sub_10001576C(v5, v6);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 48);
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v7;
  sub_10001576C(v8, v9);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  *(unsigned char *)(a1 + 51) = *(unsigned char *)(a2 + 51);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for TranscriptViewContextChanged(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TranscriptViewContextChanged(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = a2 + 1;
    }
  }
  return result;
}

BOOL sub_1000FFC0C(__int16 a1, uint64_t a2, unint64_t a3, __int16 a4, uint64_t a5, unint64_t a6, double a7, double a8)
{
  if (a1 != a4) {
    return 0;
  }
  if (!(a3 >> 6))
  {
    if (a6 < 0x40u) {
      goto LABEL_7;
    }
    return 0;
  }
  if (a3 >> 6 != 1)
  {
    if (a2 | a3 ^ 0x80)
    {
      int v9 = a6 & 0xC0;
      if (a3 == 128 && a2 == 1)
      {
        if (v9 == 128)
        {
          BOOL result = 0;
          if (a5 != 1) {
            return result;
          }
          goto LABEL_23;
        }
      }
      else if (v9 == 128)
      {
        BOOL result = 0;
        if (a5 != 2) {
          return result;
        }
LABEL_23:
        if (a6 != 128 || ((a3 >> 8) & 1) != ((a6 >> 8) & 1)) {
          return result;
        }
        goto LABEL_25;
      }
    }
    else if ((a6 & 0xC0) == 0x80)
    {
      BOOL result = 0;
      if (a5) {
        return result;
      }
      goto LABEL_23;
    }
    return 0;
  }
  if ((a6 & 0xC0) != 0x40) {
    return 0;
  }
LABEL_7:
  BOOL result = 0;
  if (((a3 >> 8) & 1) != ((a6 >> 8) & 1)) {
    return result;
  }
LABEL_25:
  if (((a3 >> 16) & 1) == ((a6 >> 16) & 1)
    && ((a3 >> 24) & 1) == ((a6 >> 24) & 1)
    && (BYTE4(a3) & 1) == (BYTE4(a6) & 1))
  {
    return a7 == a8;
  }
  return result;
}

uint64_t sub_1000FFD1C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FFD54(uint64_t *a1)
{
  return sub_1000FEC4C(a1);
}

unsigned char *storeEnumTagSinglePayload for TranscriptViewContext.TranscriptionState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *BOOL result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FFE28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *BOOL result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewContext.TranscriptionState()
{
  return &type metadata for TranscriptViewContext.TranscriptionState;
}

unsigned char *storeEnumTagSinglePayload for TranscriptViewContext.AudioState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *BOOL result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FFF2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *BOOL result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewContext.AudioState()
{
  return &type metadata for TranscriptViewContext.AudioState;
}

unint64_t sub_1000FFF68()
{
  unint64_t result = qword_100267090;
  if (!qword_100267090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267090);
  }
  return result;
}

unint64_t sub_1000FFFC0()
{
  unint64_t result = qword_100267098;
  if (!qword_100267098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267098);
  }
  return result;
}

id sub_10010004C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCRecordButtonAppFactory();
  return [super dealloc];
}

double sub_10010017C(char *a1, uint64_t a2, SEL *a3)
{
  double v5 = *(double *)&a1[OBJC_IVAR____TtC10VoiceMemos30RCRecordingControlLayoutHelper_diameter];
  unsigned int v6 = self;
  char v7 = a1;
  id v8 = [v6 sharedStyleProvider];
  [v8 *a3];
  double v10 = v9;

  return v5 * v10;
}

double sub_100100364(double a1, double a2)
{
  double v5 = *(double *)(v2 + OBJC_IVAR____TtC10VoiceMemos30RCRecordingControlLayoutHelper_diameter);
  id v6 = [self sharedStyleProvider];
  [v6 recordingControlLozengeFixedWidthScaleFactor];
  double v8 = v7;

  if (v5 * v8 < a1) {
    double v9 = a1;
  }
  else {
    double v9 = v5 * v8;
  }
  sub_1001004A0();
  double v10 = a2 - (v9 + sub_1001004A0()) * 0.5;

  return nullsub_9(v10);
}

double sub_1001004A0()
{
  uint64_t v1 = self;
  id v2 = [v1 sharedStyleProvider];
  double v3 = *(double *)(v0 + OBJC_IVAR____TtC10VoiceMemos30RCRecordingControlLayoutHelper_diameter);
  [v2 recordingControlHeightForDiameter:v3];
  double v5 = v4;

  id v6 = [v1 sharedStyleProvider];
  [v6 recordingControlOuterRingThicknessScaleFactor];
  double v8 = v7;

  double v9 = v5 - v3 * v8;
  id v10 = [v1 sharedStyleProvider];
  [v10 recordingControlOuterRingGapScaleFactor];
  double v12 = v11;

  return v9 - v3 * v12;
}

id sub_100100708()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCRecordingControlLayoutHelper();
  return [super dealloc];
}

uint64_t type metadata accessor for RCRecordingControlLayoutHelper()
{
  return self;
}

void sub_100100818()
{
  uint64_t v1 = *(char **)&v0[OBJC_IVAR____TtC10VoiceMemos8VMPlayer_currentItem];
  if (v1)
  {
    if (*(void *)&v1[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_audioPlayerItem])
    {
      objc_super v2 = v1;
    }
    else
    {
      double v4 = v1;
      sub_100017220();
      uint64_t v5 = *(void *)&v4[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_playableRangeEndTime];
      char v6 = v4[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_playableRangeEndTime + 8];
      id v7 = *(id *)&v4[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_asset];
      sub_1000D56E0(v7, v5, v6);
      swift_release();
    }
    swift_retain();
    sub_100017220();
    uint64_t v3 = swift_retain();
    sub_1000D4420(v3);
    swift_release();
    swift_release();
    double v8 = v0;
    sub_1001022AC();

    swift_release();
  }
  else
  {
    sub_100017220();
    sub_1000D4420(0);
    swift_release();
  }
}

uint64_t sub_100100C3C(float a1)
{
  uint64_t v2 = sub_100017220();
  *(float *)(v2 + 84) = a1;
  uint64_t v4 = *(void *)(v2 + 56);
  if (v4)
  {
    *(float *)&double v3 = a1;
    [*(id *)(v4 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer) setRate:v3];
  }

  return swift_release();
}

uint64_t sub_100100CA8()
{
  uint64_t v0 = sub_100017220();
  uint64_t v1 = v0;
  if (*(void *)(v0 + 56)
    && (*(unsigned char *)(v0 + 16) & 1) == 0
    && (sub_1000D6124(), *(unsigned char *)(v1 + 16) = 1, (uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong()) != 0))
  {
    [Strong audioPlayerIsPlayingChanged:1];
    swift_release();
    return swift_unknownObjectRelease();
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_100100D8C()
{
  uint64_t v0 = sub_100017220();
  uint64_t v1 = v0;
  if (*(void *)(v0 + 56)
    && (*(unsigned char *)(v0 + 16) & 1) != 0
    && (sub_1000D6570(), *(unsigned char *)(v1 + 16) = 0, (uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong()) != 0))
  {
    [Strong audioPlayerIsPlayingChanged:0];
    swift_release();
    return swift_unknownObjectRelease();
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_100100E6C(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_errorRetain();
    id v10 = (void *)_convertErrorToNSError(_:)();
    [a4 audioPlayerError:v10];

    sub_1001021F0(a1, 1);
  }
  else
  {
    *(void *)(a3 + OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_audioPlayerItem) = a1;
    swift_retain();
    swift_release();
  }
  sub_100006004();
  double v11 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = a5;
  aBlock[5] = a6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000D4744;
  aBlock[3] = &unk_100226118;
  double v12 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags();
  v22[1] = v22;
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  int v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100102204();
  sub_100028654(&qword_100265338);
  sub_100102250();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_100101324(char a1)
{
  uint64_t v2 = sub_100017220();
  *(unsigned char *)(v2 + 81) = a1;
  uint64_t v3 = *(void *)(v2 + 56);
  if (v3) {
    [*(id *)(v3 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer) setEnhanceEnabled:a1 & 1];
  }

  return swift_release();
}

uint64_t sub_10010142C(char a1)
{
  uint64_t v2 = sub_100017220();
  *(unsigned char *)(v2 + 80) = a1;
  uint64_t v3 = *(void *)(v2 + 56);
  if (v3) {
    [*(id *)(v3 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_silenceRemover) setEnabled:a1 & 1];
  }

  return swift_release();
}

id VMPlayer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id VMPlayer.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC10VoiceMemos8VMPlayer____lazy_storage___audioPlayer] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC10VoiceMemos8VMPlayer_currentItem] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VMPlayer();
  return [super init];
}

id VMPlayer.__deallocating_deinit()
{
  return sub_100101FC8(type metadata accessor for VMPlayer);
}

id sub_10010162C()
{
  id result = (id)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    id v3 = 0;
    unsigned int v1 = [result activateAudioSessionForPlaybackAndReturnError:&v3];
    swift_unknownObjectRelease();
    if (v1)
    {
      return v3;
    }
    else
    {
      id v2 = v3;
      _convertNSErrorToError(_:)();

      return (id)swift_willThrow();
    }
  }
  return result;
}

id sub_10010193C(uint64_t a1)
{
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_seekCount] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_audioPlayerItem] = 0;
  swift_unknownObjectWeakInit();
  id v3 = &v1[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_playableRangeEndTime];
  *(void *)id v3 = 0;
  v3[8] = 1;
  v1[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_looping] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_trackVolumes] = &off_100223800;
  *(void *)&v1[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_asset] = a1;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for VMPlayerItem();
  return [super init];
}

uint64_t sub_100101A28(uint64_t (*a1)(void), uint64_t a2, double a3)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v8 = *(void *)&v3[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_seekCount];
    BOOL v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9)
    {
      __break(1u);
    }
    else
    {
      double v11 = (void *)result;
      *(void *)&v3[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_seekCount] = v10;
      double v12 = (void *)swift_allocObject();
      _OWORD v12[2] = v3;
      uint64_t v12[3] = a1;
      v12[4] = a2;
      uint64_t v13 = v3;
      sub_1000D8144((uint64_t)a1);
      sub_100017220();
      sub_1000D4988(0, (void (*)(void))sub_1001020E8, (uint64_t)v12, a3);

      swift_release();
      return swift_release();
    }
  }
  else if (a1)
  {
    return a1(0);
  }
  return result;
}

uint64_t sub_100101EB8(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_trackVolumes;
  *(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_trackVolumes) = a1;
  swift_bridgeObjectRelease();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = *(void *)(v1 + v2);
    swift_bridgeObjectRetain();
    *(void *)(sub_100017220() + 104) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1000D3FB4();
    swift_bridgeObjectRetain();
    CurrentValueSubject.value.setter();

    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

id sub_100101FB0()
{
  return sub_100101FC8(type metadata accessor for VMPlayerItem);
}

id sub_100101FC8(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  [super dealloc];
}

uint64_t type metadata accessor for VMPlayerItem()
{
  return self;
}

uint64_t sub_1001020A0()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001020E8(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_seekCount);
  uint64_t v4 = v3 - 1;
  if (__OFSUB__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v1 + 24);
    *(void *)(v2 + OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_seekCount) = v4;
    if (v5) {
      return v5(result & 1);
    }
  }
  return result;
}

uint64_t sub_100102138()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100102170(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t sub_100102188()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_100102198()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001021E0(uint64_t a1, char a2)
{
  return sub_100100E6C(a1, a2 & 1, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_1001021F0(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return swift_release();
  }
}

uint64_t sub_1001021FC()
{
  return swift_release();
}

unint64_t sub_100102204()
{
  unint64_t result = qword_1002671D0;
  if (!qword_1002671D0)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002671D0);
  }
  return result;
}

unint64_t sub_100102250()
{
  unint64_t result = qword_1002671E0;
  if (!qword_1002671E0)
  {
    sub_100027F14(&qword_100265338);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002671E0);
  }
  return result;
}

uint64_t sub_1001022AC()
{
  swift_unknownObjectWeakAssign();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = (void *)result;
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_trackVolumes);
    swift_bridgeObjectRetain();
    *(void *)(sub_100017220() + 104) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1000D3FB4();
    swift_bridgeObjectRetain();
    CurrentValueSubject.value.setter();

    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100102378(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2)
  {
    char v2 = *(unsigned char *)(a2 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      if (*(unsigned char *)(a2 + 16)) {
        return 1;
      }
    }
    else
    {
      if (*(void *)(a1 + 8) != *(void *)(a2 + 8)) {
        char v2 = 1;
      }
      if ((v2 & 1) == 0) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1001023BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos30RCRecordingTrackInfoRepository_observers);
  uint64_t v4 = *(void **)(v3 + 16);
  swift_retain();
  if (([v4 containsObject:a1] & 1) == 0) {
    [*(id *)(v3 + 16) addObject:a1];
  }

  return swift_release();
}

void sub_100102540(uint64_t a1)
{
  CurrentValueSubject.value.getter();
  CurrentValueSubject.value.setter();
  uint64_t v3 = *(void **)(*(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos30RCRecordingTrackInfoRepository_observers) + 16);
  swift_retain();
  id v4 = [v3 allObjects];
  sub_100028654(&qword_100267228);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_3;
    }
LABEL_10:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_10;
  }
LABEL_3:
  if (v6 >= 1)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v8 = *(void **)(v5 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      [v8 trackInfoStateDidChangeWithOldState:v9 newState:a1];
      swift_unknownObjectRelease();
    }
    goto LABEL_10;
  }
  __break(1u);
}

void sub_1001026C8(unint64_t a1)
{
  if (a1 <= 1)
  {
    CurrentValueSubject.value.getter();
    CurrentValueSubject.value.setter();
  }
  else
  {
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10002272C(v1, (uint64_t)qword_100275340);
    os_log_type_t v2 = static os_log_type_t.error.getter();
    log = Logger.logObject.getter();
    if (os_log_type_enabled(log, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, log, v2, "unexpected muted index", v3, 2u);
      swift_slowDealloc();
    }
  }
}

id sub_1001028A4()
{
  uint64_t v1 = OBJC_IVAR____TtC10VoiceMemos30RCRecordingTrackInfoRepository_observers;
  sub_100028654(&qword_100267230);
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = self;
  id v4 = v0;
  *(void *)(v2 + 16) = [v3 weakObjectsHashTable];
  *(void *)&v0[v1] = v2;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 1;
  sub_100028654(&qword_100267238);
  swift_allocObject();
  *(void *)&v4[OBJC_IVAR____TtC10VoiceMemos30RCRecordingTrackInfoRepository_trackInfoSubject] = CurrentValueSubject.init(_:)();

  v6.receiver = v4;
  v6.super_class = (Class)type metadata accessor for RCRecordingTrackInfoRepository();
  return [super init];
}

id sub_100102A00()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCRecordingTrackInfoRepository();
  return [super dealloc];
}

uint64_t type metadata accessor for RCRecordingTrackInfoRepository()
{
  return self;
}

uint64_t getEnumTagSinglePayload for AutoScrollType(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RCRecordingTrackInfo(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RCRecordingTrackInfo()
{
  return &type metadata for RCRecordingTrackInfo;
}

char *sub_100102B00(uint64_t a1)
{
  objc_super v2 = (char *)[objc_allocWithZone((Class)type metadata accessor for RCRecordingTrackInfoRepository()) init];
  uint64_t v3 = *(void *)&v2[OBJC_IVAR____TtC10VoiceMemos30RCRecordingTrackInfoRepository_observers];
  id v4 = *(void **)(v3 + 16);
  swift_retain();
  if (([v4 containsObject:a1] & 1) == 0) {
    [*(id *)(v3 + 16) addObject:a1];
  }
  swift_release();
  return v2;
}

uint64_t sub_100102B90()
{
  sub_10000C4A4(v0 + 16);

  return swift_deallocClassInstance();
}

id sub_100102BC8()
{
  return sub_100102BF0(&OBJC_IVAR____TtC10VoiceMemos25RCVisibleEntitiesObserver____lazy_storage___recordingsFRC, (SEL *)&selRef_visibleRecordingsFetchedResultsController);
}

id sub_100102BDC()
{
  return sub_100102BF0(&OBJC_IVAR____TtC10VoiceMemos25RCVisibleEntitiesObserver____lazy_storage___userFoldersFRC, (SEL *)&selRef_userFoldersFetchedResultsController);
}

id sub_100102BF0(uint64_t *a1, SEL *a2)
{
  uint64_t v3 = *a1;
  id v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v2
                                                               + OBJC_IVAR____TtC10VoiceMemos25RCVisibleEntitiesObserver_model), *a2));
    [v6 setDelegate:v2];
    uint64_t v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    id v4 = 0;
  }
  id v8 = v4;
  return v5;
}

id sub_100102CA8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCVisibleEntitiesObserver();
  return [super dealloc];
}

uint64_t type metadata accessor for RCVisibleEntitiesObserver()
{
  return self;
}

void sub_100102D6C(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_100103214(a4, a5, a3);
  if (v8 != 3)
  {
    uint64_t v9 = v8;
    id v10 = sub_100102BC8();

    if (v10 == a1)
    {
      sub_10002F4DC(a2, (uint64_t)v19);
      sub_10010350C();
      if (!swift_dynamicCast())
      {
LABEL_14:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      uint64_t v15 = v5 + OBJC_IVAR____TtC10VoiceMemos25RCVisibleEntitiesObserver_delegate;
      if (swift_unknownObjectWeakLoadStrong())
      {
        uint64_t v16 = *(void *)(v15 + 8);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v16 + 8))(v18, v9, ObjectType, v16);

LABEL_10:
        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      id v11 = sub_100102BDC();

      if (v11 == a1)
      {
        sub_10002F4DC(a2, (uint64_t)v19);
        sub_100028654(&qword_100267350);
        if (swift_dynamicCast())
        {
          uint64_t v12 = v5 + OBJC_IVAR____TtC10VoiceMemos25RCVisibleEntitiesObserver_delegate;
          if (swift_unknownObjectWeakLoadStrong())
          {
            uint64_t v13 = *(void *)(v12 + 8);
            uint64_t v14 = swift_getObjectType();
            (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v13 + 16))(v18, v9, v14, v13);
            swift_unknownObjectRelease();
          }
          goto LABEL_10;
        }
        goto LABEL_14;
      }
    }
  }
}

uint64_t sub_1001031B4(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_100267348);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100103214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 1:
      return 0;
    case 4:
      uint64_t v27 = v3;
      uint64_t v28 = v4;
      uint64_t v8 = type metadata accessor for IndexPath();
      uint64_t v9 = *(void *)(v8 - 8);
      uint64_t v10 = *(void *)(v9 + 64);
      __chkstk_darwin(v8);
      unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v24 = (char *)&v21 - v11;
      uint64_t v12 = sub_100028654(&qword_100267348);
      uint64_t v26 = &v21;
      uint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
      __chkstk_darwin(v12 - 8);
      unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
      sub_10010354C(a2, (uint64_t)&v21 - v14);
      uint64_t v25 = v9;
      uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
      if (v15((char *)&v21 - v14, 1, v8) == 1)
      {
        sub_1001031B4((uint64_t)&v21 - v14);
      }
      else
      {
        double v23 = &v21;
        int v22 = *(uint64_t (**)(char *, char *, uint64_t))(v25 + 32);
        uint64_t v16 = v22(v24, (char *)&v21 - v14, v8);
        uint64_t v26 = &v21;
        uint64_t v17 = __chkstk_darwin(v16);
        __chkstk_darwin(v17);
        sub_10010354C(a3, (uint64_t)&v21 - v14);
        if (v15((char *)&v21 - v14, 1, v8) == 1)
        {
          (*(void (**)(char *, uint64_t))(v25 + 8))(v24, v8);
          sub_1001031B4((uint64_t)&v21 - v14);
        }
        else
        {
          v22((char *)&v21 - v11, (char *)&v21 - v14, v8);
          sub_1001035B4();
          uint64_t v18 = v24;
          char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
          int v20 = *(void (**)(char *, uint64_t))(v25 + 8);
          v20((char *)&v21 - v11, v8);
          v20(v18, v8);
          if ((v19 & 1) == 0) {
            return 3;
          }
        }
      }
      return 1;
    case 2:
      return 2;
    default:
      return 3;
  }
}

unint64_t sub_10010350C()
{
  unint64_t result = qword_100267358;
  if (!qword_100267358)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100267358);
  }
  return result;
}

uint64_t sub_10010354C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100267348);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001035B4()
{
  unint64_t result = qword_100267360;
  if (!qword_100267360)
  {
    type metadata accessor for IndexPath();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267360);
  }
  return result;
}

void sub_100103600(void *a1@<X8>)
{
  *a1 = &_s26VoiceMemosStringAttributesVN;
}

uint64_t sub_100103610()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_10010366C()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void sub_1001036B4()
{
}

unint64_t *sub_1001036DC()
{
  uint64_t v1 = type metadata accessor for AttributedString();
  v17[3] = v1;
  void v17[4] = sub_100106F3C(&qword_100266740, (void (*)(uint64_t))&type metadata accessor for AttributedString);
  uint64_t v2 = sub_1000DED60(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16))(v2, v0, v1);
  uint64_t v3 = type metadata accessor for AttributedString.Runs();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  dispatch thunk of AttributedStringProtocol.runs.getter();
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v7 = sub_100028654((uint64_t *)&unk_100268DB0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000E93EC();
  AttributedString.Runs.subscript.getter();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  unint64_t v11 = sub_100105888((uint64_t)v10);
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v15 = v17;
  uint64_t v12 = sub_1001064FC((void (*)(long long *__return_ptr, uint64_t))sub_100107024, (uint64_t)v14, (uint64_t)v11);
  swift_bridgeObjectRelease();
  sub_10002F48C((uint64_t)v17);
  return v12;
}

uint64_t sub_100103958(void *a1)
{
  uint64_t v3 = type metadata accessor for TranscriptionCodingContainer();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[1] = *a1;
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_100107174(&qword_100267408);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t result = swift_release();
  if (!v1)
  {
    sub_100028654(&qword_100266110);
    CodableConfiguration.wrappedValue.getter();
    sub_1000E9BC8((uint64_t)v5);
    sub_100138ACC((uint64_t)v9);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return result;
}

uint64_t sub_100103BA0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v5 = *a1;
  swift_beginAccess();
  sub_100138444();
  swift_endAccess();
  if (a3 < 0.0) {
    a3 = 0.0;
  }
  uint64_t v6 = v5 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel;
  swift_beginAccess();
  *(double *)(v6 + *(int *)(type metadata accessor for TranscriptionPresentationModel(0) + 36)) = a3;
  sub_10013BE60();
  uint64_t v7 = sub_100138D14();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t result = swift_endAccess();
  *a2 = v7;
  a2[1] = v9;
  a2[2] = v11;
  return result;
}

uint64_t sub_100103E48()
{
  v1[2] = v0;
  v1[3] = type metadata accessor for TranscriptionCodingContainer();
  v1[4] = swift_task_alloc();
  return _swift_task_switch(sub_100103EDC, 0, 0);
}

uint64_t sub_100103EDC()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_liveTranscription;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_liveTranscription);
  v0[5] = v3;
  if (v3)
  {
    *(void *)(v1 + v2) = 0;
    sub_100028654(&qword_1002654D0);
    AsyncStream.Continuation.finish()();
    uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_transcriptionTask);
    v0[6] = v4;
    if (v4)
    {
      swift_retain();
      uint64_t v5 = (void *)swift_task_alloc();
      v0[7] = v5;
      uint64_t v6 = sub_100028654((uint64_t *)&unk_1002699C0);
      *uint64_t v5 = v0;
      v5[1] = sub_100104310;
      return Task.value.getter(v6, v4, (char *)&type metadata for () + 8, v6, &protocol self-conformance witness table for Error);
    }
    uint64_t v10 = v0[2];
    uint64_t v11 = type metadata accessor for AttributedString();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = swift_task_alloc();
    unint64_t v14 = *(os_unfair_lock_s **)(v10 + OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_compiler);
    uint64_t v15 = v14 + 4;
    uint64_t v16 = v14 + 6;
    os_unfair_lock_lock(v14 + 6);
    sub_1001047BC(v15, v13);
    os_unfair_lock_unlock(v16);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    uint64_t v17 = swift_task_alloc();
    uint64_t v18 = v12;
    char v19 = *(void (**)(void))(v12 + 16);
    ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v17, v13, v11);
    swift_task_alloc();
    v19();
    swift_getKeyPath();
    sub_1000E9B20();
    CodableConfiguration<>.init(wrappedValue:from:)();
    int v20 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v20(v17, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100107174(&qword_100267410);
    uint64_t v7 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v8 = v21;
    sub_1000E9BC8(v0[4]);
    swift_release();
    v20(v13, v11);
    swift_release();
    swift_task_dealloc();
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xF000000000000000;
  }
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v9(v7, v8);
}

uint64_t sub_100104310()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    uint64_t v2 = sub_100104750;
  }
  else
  {
    uint64_t v2 = sub_10010442C;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_10010442C()
{
  swift_release();
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[2];
  uint64_t v3 = type metadata accessor for AttributedString();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_compiler);
  uint64_t v7 = v6 + 4;
  unint64_t v8 = v6 + 6;
  os_unfair_lock_lock(v6 + 6);
  sub_1001047BC(v7, v5);
  os_unfair_lock_unlock(v8);
  if (!v1)
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    uint64_t v9 = swift_task_alloc();
    uint64_t v10 = *(void (**)(void))(v4 + 16);
    ((void (*)(uint64_t, uint64_t, uint64_t))v10)(v9, v5, v3);
    swift_task_alloc();
    v10();
    swift_getKeyPath();
    sub_1000E9B20();
    CodableConfiguration<>.init(wrappedValue:from:)();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v11(v9, v3);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100107174(&qword_100267410);
    uint64_t v12 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v14 = v13;
    sub_1000E9BC8(v0[4]);
    swift_release();
    v11(v5, v3);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[1];
    v15(v12, v14);
  }
}

uint64_t sub_100104750()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001047BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_liveTranscriptionString;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t sub_1001049C0(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  void *v4 = v2;
  v4[1] = sub_100104A68;
  return sub_100103E48();
}

uint64_t sub_100104A68(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  unint64_t v8 = *(void **)(*v3 + 16);
  uint64_t v9 = *v3;
  swift_task_dealloc();

  if (v4)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v12 = (void *)v10;
  }
  else if (a2 >> 60 == 15)
  {
    uint64_t v10 = 0;
    Class isa = 0;
    uint64_t v12 = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001072AC(a1, a2);
    uint64_t v10 = 0;
    uint64_t v12 = isa;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v7 + 24);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  uint64_t v14 = *(uint64_t (**)(void))(v9 + 8);
  return v14();
}

uint64_t sub_100104C1C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100028654(&qword_1002699E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = *(os_unfair_lock_s **)&v2[OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_compiler];
  uint64_t v19 = a1;
  uint64_t v8 = (uint64_t)&v7[4];
  uint64_t v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  sub_1001070AC(v8, v20);
  os_unfair_lock_unlock(v9);
  uint64_t v11 = v20[0];
  uint64_t v10 = v20[1];
  uint64_t v12 = v20[2];
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 1, 1, v13);
  type metadata accessor for MainActor();
  uint64_t v14 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = static MainActor.shared.getter();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v15;
  v16[3] = &protocol witness table for MainActor;
  void v16[4] = v14;
  void v16[5] = v11;
  void v16[6] = v10;
  v16[7] = v12;
  sub_100149C8C((uint64_t)v6, (uint64_t)&unk_100265538, (uint64_t)v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100104DB4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v78 = a1;
  uint64_t v79 = a3;
  uint64_t v84 = type metadata accessor for TranscriptionCodingContainer();
  __chkstk_darwin(v84);
  uint64_t v7 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100028654(&qword_1002673F8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)type metadata accessor for TranscriptionFragment(0);
  uint64_t v82 = *(v11 - 1);
  __chkstk_darwin(v11);
  uint64_t v92 = (uint64_t)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v14 = __chkstk_darwin(v13).n128_u64[0];
  uint64_t v81 = (uint64_t)&v78 - v15;
  id v16 = [a2 composedFragments:v14];
  sub_1001070CC();
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v17 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v95 = v4;
    if (v18) {
      goto LABEL_3;
    }
LABEL_33:
    v94 = _swiftEmptyArrayStorage;
LABEL_34:
    swift_bridgeObjectRelease_n();
    uint64_t v67 = type metadata accessor for AttributedString();
    uint64_t v68 = *(void *)(v67 - 8);
    __chkstk_darwin(v67);
    uint64_t v70 = (char *)&v78 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_100139590((uint64_t)v94, (uint64_t)v70);
    sub_100138ACC((uint64_t)v70);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v70, v67);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v71 = sub_100138D14();
    uint64_t v73 = v72;
    uint64_t v75 = v74;
    uint64_t result = swift_endAccess();
    uint64_t v76 = v79;
    uint64_t *v79 = v71;
    v76[1] = v73;
    v76[2] = v75;
    return result;
  }
  uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v95 = v3;
  if (!v18) {
    goto LABEL_33;
  }
LABEL_3:
  if (v18 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v83 = v7;
    uint64_t v20 = 0;
    uint64_t v88 = (void (**)(char *, uint64_t, uint64_t, void *))(v82 + 56);
    v90 = (unsigned int (**)(uint64_t, uint64_t, void *))(v82 + 48);
    unint64_t v91 = v17 & 0xC000000000000001;
    v94 = _swiftEmptyArrayStorage;
    *(void *)&long long v19 = 138412290;
    long long v80 = v19;
    unint64_t v85 = v17;
    Swift::String v86 = v11;
    uint64_t v87 = v10;
    uint64_t v89 = v18;
    while (1)
    {
      id v21 = v91 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v17 + 8 * v20 + 32);
      int v22 = v21;
      id v23 = [v21 AVOutputURL:v78];
      uint64_t v24 = sub_100028654(&qword_100269FB0);
      uint64_t v7 = (char *)&v78;
      __chkstk_darwin(v24 - 8);
      uint64_t v4 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (!v23) {
        break;
      }
      uint64_t v10 = (char *)type metadata accessor for URL();
      uint64_t v26 = *((void *)v10 - 1);
      __chkstk_darwin(v10);
      uint64_t v28 = (char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, char *))(v26 + 32))(v4, v28, v10);
      (*(void (**)(char *, void, uint64_t, char *))(v26 + 56))(v4, 0, 1, v10);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, char *))(v26 + 48))(v4, 1, v10);
      if (result == 1) {
        goto LABEL_37;
      }
      uint64_t v30 = self;
      URL._bridgeToObjectiveC()(v31);
      uint64_t v11 = v32;
      (*(void (**)(char *, char *))(v26 + 8))(v4, v10);
      uint64_t v4 = (char *)[v30 rc_transcriptionDataForURL:v11];

      if (v4)
      {
        uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v17 = v34;

        sub_10010710C(v33, v17);
        [v22 timeRangeInContentToUse];
        if (v35 > v36)
        {
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        double v37 = v35;
        double v38 = v36;
        [v22 timeRangeInComposition];
        if (v39 > v40) {
          goto LABEL_31;
        }
        double v41 = v39;
        double v42 = v40;
        uint64_t v93 = v22;
        uint64_t v43 = type metadata accessor for AttributedString();
        uint64_t v44 = *(void *)(v43 - 8);
        __chkstk_darwin(v43);
        uint64_t v46 = (char *)&v78 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        sub_100107174(&qword_100267408);
        uint64_t v47 = (uint64_t)v83;
        uint64_t v48 = v95;
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        uint64_t v95 = v48;
        if (v48)
        {
          swift_release();
          sub_1000FB890(v33, v17);
          sub_1000FB890(v33, v17);
          if (qword_100264530 != -1) {
            swift_once();
          }
          uint64_t v49 = type metadata accessor for Logger();
          sub_10002272C(v49, (uint64_t)qword_100275340);
          os_log_type_t v50 = static os_log_type_t.error.getter();
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v51 = Logger.logObject.getter();
          BOOL v52 = os_log_type_enabled(v51, v50);
          uint64_t v53 = v89;
          int v22 = v93;
          if (v52)
          {
            uint64_t v54 = swift_slowAlloc();
            uint64_t v55 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v54 = v80;
            swift_errorRetain();
            uint64_t v56 = _swift_stdlib_bridgeErrorToNSError();
            *(void *)(v54 + 4) = v56;
            *uint64_t v55 = v56;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v51, v50, "Failed to decode transcription fragment, error = %@", (uint8_t *)v54, 0xCu);
            sub_100028654(&qword_100265560);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
          }
          else
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
          uint64_t v58 = v86;
          uint64_t v57 = (uint64_t)v87;
          unint64_t v17 = v85;
          (*v88)(v87, 1, 1, v86);
          uint64_t v95 = 0;
        }
        else
        {
          swift_release();
          sub_100028654(&qword_100266110);
          CodableConfiguration.wrappedValue.getter();
          sub_1000E9BC8(v47);
          CGRect v60 = v86;
          uint64_t v59 = (double *)v87;
          *(double *)uint64_t v87 = v37;
          v59[1] = v38;
          v59[2] = v41;
          void v59[3] = v42;
          uint64_t v61 = v46;
          uint64_t v62 = v43;
          uint64_t v58 = v60;
          uint64_t v57 = (uint64_t)v59;
          (*(void (**)(char *, char *, uint64_t))(v44 + 32))((char *)v59 + *((int *)v60 + 6), v61, v62);
          sub_1000FB890(v33, v17);
          (*v88)((char *)v57, 0, 1, v58);
          sub_1000FB890(v33, v17);
          unint64_t v17 = v85;
          uint64_t v53 = v89;
          int v22 = v93;
        }
      }
      else
      {
        uint64_t v57 = (uint64_t)v87;
        uint64_t v58 = v86;
        (*v88)(v87, 1, 1, v86);
        unint64_t v17 = v85;
        uint64_t v53 = v89;
      }

      if ((*v90)(v57, 1, v58) == 1)
      {
        sub_1000285F8(v57, &qword_1002673F8);
      }
      else
      {
        uint64_t v63 = v81;
        sub_100107A70(v57, v81, type metadata accessor for TranscriptionFragment);
        sub_100107A70(v63, v92, type metadata accessor for TranscriptionFragment);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v94 = (void *)sub_10015E500(0, v94[2] + 1, 1, (unint64_t)v94);
        }
        unint64_t v65 = v94[2];
        unint64_t v64 = v94[3];
        if (v65 >= v64 >> 1) {
          v94 = (void *)sub_10015E500(v64 > 1, v65 + 1, 1, (unint64_t)v94);
        }
        uint64_t v66 = v94;
        v94[2] = v65 + 1;
        sub_100107A70(v92, (uint64_t)v66+ ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))+ *(void *)(v82 + 72) * v65, type metadata accessor for TranscriptionFragment);
      }
      if (v53 == ++v20) {
        goto LABEL_34;
      }
    }
  }
  uint64_t v77 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v4, 1, 1, v77);
LABEL_37:
  __break(1u);
  return result;
}

void *sub_100105888(uint64_t a1)
{
  uint64_t v2 = sub_100028654((uint64_t *)&unk_100268DD0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for TimeRangeRun(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v36 = (uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v34 = (uint64_t)&v32 - v9;
  uint64_t v39 = sub_100028654(&qword_1002673C0);
  uint64_t v33 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100028654((uint64_t *)&unk_100268DB0);
  __chkstk_darwin(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  sub_100027F5C(&qword_1002673C8, (uint64_t *)&unk_100268DB0);
  double v38 = v11;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v15 = sub_100028654(&qword_1002673D0);
  __chkstk_darwin(v15 - 8);
  unint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100027F5C(&qword_1002673D8, &qword_1002673C0);
  uint64_t v18 = (void (**)(void *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v35 = v6;
  long long v19 = (unsigned int (**)(void *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v20 = &_swiftEmptyArrayStorage;
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v21 = sub_100028654(&qword_1002673E0);
    uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v17, 1, v21);
    if (v22 == 1) {
      break;
    }
    __chkstk_darwin(v22);
    uint64_t v24 = (char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_100107044((uint64_t)v17, (uint64_t)v24);
    if (v24[16])
    {
      uint64_t v25 = 1;
    }
    else
    {
      uint64_t v27 = *(void *)v24;
      uint64_t v26 = *((void *)v24 + 1);
      sub_1000F7508((uint64_t)&v24[*(int *)(v21 + 48)], (uint64_t)v4 + *(int *)(v5 + 20));
      uint64_t v25 = 0;
      void *v4 = v27;
      v4[1] = v26;
    }
    (*v18)(v4, v25, 1, v5);
    sub_1000285F8((uint64_t)v24, &qword_1002673E0);
    if ((*v19)(v4, 1, v5) == 1)
    {
      sub_1000285F8((uint64_t)v4, (uint64_t *)&unk_100268DD0);
    }
    else
    {
      uint64_t v28 = v34;
      sub_100107A70((uint64_t)v4, v34, type metadata accessor for TimeRangeRun);
      sub_100107A70(v28, v36, type metadata accessor for TimeRangeRun);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v20 = (void *)sub_10015E3BC(0, v20[2] + 1, 1, (unint64_t)v20);
      }
      unint64_t v30 = v20[2];
      unint64_t v29 = v20[3];
      if (v30 >= v29 >> 1) {
        uint64_t v20 = (void *)sub_10015E3BC(v29 > 1, v30 + 1, 1, (unint64_t)v20);
      }
      v20[2] = v30 + 1;
      sub_100107A70(v36, (uint64_t)v20+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v30, type metadata accessor for TimeRangeRun);
    }
  }
  (*(void (**)(char *, uint64_t))(v33 + 8))(v38, v39);
  return v20;
}

uint64_t sub_100105E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  void v7[4] = a5;
  v7[2] = a1;
  type metadata accessor for MainActor();
  v7[7] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100105ED0, v9, v8);
}

uint64_t sub_100105ED0()
{
  swift_release();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    sub_10014ADC4(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
    swift_unknownObjectRelease();
  }
  **(unsigned char **)(v0 + 16) = Strong == 0;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100105F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  void v7[4] = a5;
  v7[2] = a1;
  type metadata accessor for MainActor();
  v7[7] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100106010, v9, v8);
}

uint64_t sub_100106010()
{
  swift_release();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    sub_10014AFF8(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
    swift_unknownObjectRelease();
  }
  **(unsigned char **)(v0 + 16) = Strong == 0;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

id sub_1001060E0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCLiveTranscription();
  return [super dealloc];
}

uint64_t type metadata accessor for RCLiveTranscription()
{
  return self;
}

uint64_t sub_100106194@<X0>(char *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TranscriptionUtterance();
  sub_100138844((uint64_t)&a1[*(int *)(v4 + 20)], *a1);
  swift_beginAccess();
  uint64_t v5 = sub_100138D14();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t result = swift_endAccess();
  *a2 = v5;
  a2[1] = v7;
  a2[2] = v9;
  return result;
}

uint64_t sub_100106234()
{
  *(void *)(v1 + 16) = v0;
  sub_100028654(&qword_1002699E0);
  *(void *)(v1 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_1001062C8, 0, 0);
}

uint64_t sub_1001062C8()
{
  uint64_t v14 = v0;
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0[2] + OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_compiler) + 24);
  os_unfair_lock_lock(v1);
  sub_100106478(v13);
  uint64_t v3 = (void *)v0[2];
  uint64_t v2 = v0[3];
  os_unfair_lock_unlock(v1);
  uint64_t v5 = v13[0];
  uint64_t v4 = v13[1];
  uint64_t v6 = v13[2];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  type metadata accessor for MainActor();
  id v8 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = static MainActor.shared.getter();
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = v9;
  void v10[3] = &protocol witness table for MainActor;
  v10[4] = v8;
  void v10[5] = v5;
  v10[6] = v4;
  v10[7] = v6;
  sub_100149C8C(v2, (uint64_t)&unk_100267450, (uint64_t)v10);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100106478@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = sub_100138D14();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t result = swift_endAccess();
  *a1 = v2;
  a1[1] = v4;
  a1[2] = v6;
  return result;
}

unint64_t *sub_1001064FC(void (*a1)(long long *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v22 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_10015E860(0, v5, 0);
    uint64_t v6 = (unint64_t *)&_swiftEmptyArrayStorage;
    uint64_t v9 = *(void *)(type metadata accessor for TimeRangeRun(0) - 8);
    uint64_t v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    while (1)
    {
      a1(&v20, v10);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      long long v12 = v20;
      long long v13 = v21;
      uint64_t v22 = v6;
      unint64_t v15 = v6[2];
      unint64_t v14 = v6[3];
      if (v15 >= v14 >> 1)
      {
        long long v18 = v21;
        long long v19 = v20;
        sub_10015E860(v14 > 1, v15 + 1, 1);
        long long v13 = v18;
        long long v12 = v19;
        uint64_t v6 = v22;
      }
      v6[2] = v15 + 1;
      uint64_t v16 = &v6[4 * v15];
      *((_OWORD *)v16 + 2) = v12;
      *((_OWORD *)v16 + 3) = v13;
      v10 += v11;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_100106664(uint64_t a1)
{
  uint64_t v65 = type metadata accessor for AttributedString();
  uint64_t v57 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  unint64_t v64 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100146E24(a1);
  uint64_t v5 = 0;
  unint64_t v6 = v4[2];
  uint64_t v66 = v4;
  uint64_t v67 = (void (*)(unint64_t, uint64_t, uint64_t))v6;
  if (v6 >= 3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 2;
    while (1)
    {
      uint64_t v5 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        break;
      }
      BOOL v9 = __OFADD__(v8, 3);
      v8 += 3;
      if (v9) {
        uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
      }
      ++v7;
      if (v8 >= (uint64_t)v67) {
        goto LABEL_7;
      }
    }
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_7:
  uint64_t v68 = _swiftEmptyArrayStorage;
  sub_10015E830(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v10 = v68;
  if (v5)
  {
    uint64_t v56 = a1;
    uint64_t v11 = sub_100028654(&qword_100266770);
    uint64_t v61 = *(void *)(v11 - 8);
    uint64_t v62 = v11;
    uint64_t v60 = (uint64_t)v66 + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
    uint64_t v12 = type metadata accessor for AttributedString.Index();
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)(v12 - 8);
    uint64_t v63 = *(void (***)(char *, void, uint64_t, uint64_t))(v14 + 64);
    uint64_t v58 = (uint64_t *)(v14 + 32);
    uint64_t v59 = (void (**)(char *, char *, uint64_t, __n128))(v14 + 16);
    do
    {
      __n128 v17 = __chkstk_darwin(v12);
      long long v18 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v15 >= (uint64_t)v67)
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      unint64_t v19 = v15 + 3;
      if (__OFADD__(v15, 3)) {
        uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v20 = v15 + 3;
      }
      if (v15 < 0) {
        goto LABEL_44;
      }
      if ((unint64_t)v15 >= v66[2]) {
        goto LABEL_45;
      }
      (*v59)((char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)(v60 + *(void *)(v61 + 72) * v15 + *(int *)(v62 + 36)), v13, v17);
      uint64_t v68 = v10;
      unint64_t v1 = v10[2];
      unint64_t v21 = v10[3];
      if (v1 >= v21 >> 1)
      {
        sub_10015E830(v21 > 1, v1 + 1, 1);
        uint64_t v10 = v68;
      }
      void v10[2] = v1 + 1;
      uint64_t v12 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v14 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v1, v18, v13);
      --v5;
    }
    while (v5);
    if (v20 < (uint64_t)v67) {
      goto LABEL_30;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    a1 = v56;
  }
  else
  {
    if ((unint64_t)v67 > 2)
    {
      uint64_t v56 = a1;
      unint64_t v19 = 2;
LABEL_30:
      uint64_t v38 = sub_100028654(&qword_100266770);
      uint64_t v61 = *(void *)(v38 - 8);
      uint64_t v62 = v38;
      uint64_t v60 = (uint64_t)v66 + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
      uint64_t v39 = type metadata accessor for AttributedString.Index();
      uint64_t v40 = v39;
      uint64_t v41 = *(void *)(v39 - 8);
      uint64_t v63 = *(void (***)(char *, void, uint64_t, uint64_t))(v41 + 64);
      uint64_t v58 = (uint64_t *)(v41 + 32);
      uint64_t v59 = (void (**)(char *, char *, uint64_t, __n128))(v41 + 16);
      while (1)
      {
        int64_t v42 = v19 + 3;
        unint64_t v1 = __OFADD__(v19, 3);
        __n128 v44 = __chkstk_darwin(v39);
        uint64_t v45 = (char *)&v55 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
        if ((v19 & 0x8000000000000000) != 0) {
          break;
        }
        if (v19 >= v66[2]) {
          goto LABEL_48;
        }
        (*v59)((char *)&v55 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)(v60 + *(void *)(v61 + 72) * v19 + *(int *)(v62 + 36)), v40, v44);
        uint64_t v68 = v10;
        unint64_t v47 = v10[2];
        unint64_t v46 = v10[3];
        if (v47 >= v46 >> 1)
        {
          sub_10015E830(v46 > 1, v47 + 1, 1);
          uint64_t v10 = v68;
        }
        void v10[2] = v47 + 1;
        uint64_t v39 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v41 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v47, v45, v40);
        char v48 = v1 ^ 1;
        v19 += 3;
        if (v42 >= (uint64_t)v67) {
          char v48 = 0;
        }
        if ((v48 & 1) == 0) {
          goto LABEL_20;
        }
      }
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v64, a1, v65);
  uint64_t v22 = v10[2];
  uint64_t v23 = sub_100028654(&qword_1002673B8);
  uint64_t v58 = &v55;
  __chkstk_darwin(v23 - 8);
  unint64_t v1 = (unint64_t)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = (void (**)(char *, char *, uint64_t, __n128))v10;
  if (v22)
  {
    uint64_t v25 = type metadata accessor for AttributedString.Index();
    uint64_t v26 = *(void *)(v25 - 8);
    unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    uint64_t v28 = *(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 16);
    uint64_t v66 = (void *)(v26 + 16);
    uint64_t v67 = v28;
    uint64_t v62 = v26;
    uint64_t v63 = (void (**)(char *, void, uint64_t, uint64_t))(v26 + 56);
    unint64_t v29 = (uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
    uint64_t v61 = v26 + 32;
    unint64_t v30 = (void (**)(char *, uint64_t))(v26 + 8);
    uint64_t v31 = *(void *)(v26 + 72);
    uint64_t v32 = swift_retain() + v27 + v31 * (v22 - 1);
    uint64_t v60 = -v31;
    while (1)
    {
      v67(v1, v32, v25);
      (*v63)((char *)v1, 0, 1, v25);
      uint64_t v33 = (*v29)((char *)v1, 1, v25);
      if (v33 == 1) {
        goto LABEL_52;
      }
      __n128 v34 = __chkstk_darwin(v33);
      uint64_t v36 = (char *)&v55 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v37 + 32))(v36, v1, v25, v34);
      if (qword_100264648 != -1) {
        swift_once();
      }
      --v22;
      sub_10002272C(v65, (uint64_t)qword_1002755A8);
      sub_100106F3C(&qword_100266740, (void (*)(uint64_t))&type metadata accessor for AttributedString);
      AttributedString.insert<A>(_:at:)();
      (*v30)(v36, v25);
      v32 += v60;
      if (!v22) {
        goto LABEL_51;
      }
    }
  }
LABEL_50:
  swift_retain();
LABEL_51:
  uint64_t v49 = type metadata accessor for AttributedString.Index();
  (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v1, 1, 1, v49);
LABEL_52:
  swift_release_n();
  uint64_t v50 = type metadata accessor for AttributedString.CharacterView();
  __chkstk_darwin(v50);
  sub_100106F3C(&qword_100266740, (void (*)(uint64_t))&type metadata accessor for AttributedString);
  uint64_t v51 = v64;
  uint64_t v52 = v65;
  dispatch thunk of AttributedStringProtocol.characters.getter();
  sub_100106F3C((unint64_t *)&unk_1002699D0, (void (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView);
  uint64_t v53 = String.init<A>(_:)();
  sub_1001036DC();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v51, v52);
  return v53;
}

uint64_t sub_100106F3C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100106F84()
{
}

uint64_t sub_100106FAC()
{
  return 8;
}

uint64_t sub_100106FB8()
{
  return swift_release();
}

uint64_t sub_100106FC0(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_100106FD0()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void *sub_100107018(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100107024@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10013C770(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_100107044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_1002673E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001070AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100104DB4(a1, *(void **)(v2 + 16), a2);
}

unint64_t sub_1001070CC()
{
  unint64_t result = qword_100267400;
  if (!qword_100267400)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100267400);
  }
  return result;
}

uint64_t sub_10010710C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

void sub_100107164(void *a1@<X8>)
{
  *a1 = &_s26VoiceMemosStringAttributesVN;
}

uint64_t sub_100107174(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TranscriptionCodingContainer();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001071B8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001071F8()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100015B60;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100267418 + dword_100267418);
  return v5(v2, v3);
}

uint64_t sub_1001072AC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000FB890(a1, a2);
  }
  return a1;
}

id sub_1001072C0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v26 = a1;
  unint64_t v27 = a2;
  uint64_t v4 = type metadata accessor for TranscriptionPresentationModel(0);
  uint64_t v5 = (int *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v3[OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_liveTranscription] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v28 = OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_compiler;
  type metadata accessor for TranscriptionCompiler(0);
  uint64_t v8 = swift_allocObject();
  BOOL v9 = v3;
  AttributedString.init()();
  uint64_t v10 = v8 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel;
  uint64_t v11 = type metadata accessor for AttributedString();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributedString.init(stringLiteral:)();
  AttributedString.init(stringLiteral:)();
  AttributedString.init(stringLiteral:)();
  uint64_t v15 = &v7[v5[8]];
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0xE000000000000000;
  unint64_t v16 = v27;
  *(void *)&v7[v5[9]] = _swiftEmptyArrayStorage;
  __n128 v17 = &v7[v5[10]];
  *(void *)__n128 v17 = 0;
  *((void *)v17 + 1) = 0;
  *(void *)&v7[v5[11]] = 0;
  sub_10013BA18();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  sub_100107A70((uint64_t)v7, v10, type metadata accessor for TranscriptionPresentationModel);
  sub_100028654(&qword_100267438);
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 24) = 0;
  unint64_t v19 = (os_unfair_lock_s *)(v18 + 24);
  *(void *)(v18 + 16) = v8;
  uint64_t v20 = (void *)(v18 + 16);
  *(void *)&v3[v28] = v18;
  if (v16 >> 60 == 15)
  {

    unint64_t v21 = v9;
  }
  else
  {
    __chkstk_darwin(v18);
    uint64_t v22 = v26;
    *(&v26 - 2) = v26;
    *(&v26 - 1) = v16;
    sub_100107AF4(v22, v16);
    swift_retain();
    os_unfair_lock_lock(v19);
    sub_100107AD8(v20);
    uint64_t v23 = v22;
    os_unfair_lock_unlock(v19);
    unint64_t v21 = v9;

    sub_1001072AC(v23, v16);
    swift_release();
  }
  uint64_t v24 = (objc_class *)type metadata accessor for RCLiveTranscription();
  v29.receiver = v21;
  v29.super_class = v24;
  return [super init];
}

uint64_t sub_100107814(void *a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100028654(&qword_1002699E0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v26[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LiveTranscription();
  swift_allocObject();
  id v9 = a1;
  uint64_t v10 = sub_1000D9870((uint64_t)a1);
  uint64_t v11 = OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_liveTranscription;
  *(void *)&v3[OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_liveTranscription] = v10;
  uint64_t v12 = swift_release();
  uint64_t v13 = *(void *)&v3[v11];
  if (v13)
  {
    *(void *)(v13 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_delegate + 8) = &off_1002261F8;
    uint64_t v12 = swift_unknownObjectWeakAssign();
  }
  __chkstk_darwin(v12);
  *((double *)&v25 - 2) = a2;
  uint64_t v15 = (uint64_t *)&v14[4];
  unint64_t v16 = v14 + 6;
  os_unfair_lock_lock(v14 + 6);
  sub_100107A50(v15, v26);
  os_unfair_lock_unlock(v16);
  uint64_t v18 = v26[0];
  uint64_t v17 = v26[1];
  uint64_t v19 = v26[2];
  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 1, 1, v20);
  type metadata accessor for MainActor();
  unint64_t v21 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = static MainActor.shared.getter();
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = v22;
  v23[3] = &protocol witness table for MainActor;
  v23[4] = v21;
  v23[5] = v18;
  _OWORD v23[6] = v17;
  v23[7] = v19;
  sub_100149C8C((uint64_t)v8, (uint64_t)&unk_100267430, (uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100107A50@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100103BA0(a1, a2, *(double *)(v2 + 16));
}

uint64_t sub_100107A70(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100107AD8(void *a1)
{
  return sub_100103958(a1);
}

uint64_t sub_100107AF4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10010710C(a1, a2);
  }
  return a1;
}

uint64_t sub_100107B0C()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100107B5C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100031604;
  return sub_100105F70(a1, v4, v5, v6, v7, v9, v8);
}

UIMenu sub_100107DC0(int a1)
{
  LODWORD(v55) = a1;
  sub_100028654(&qword_100264998);
  uint64_t v54 = (_OWORD *)swift_allocObject();
  v54[1] = xmmword_1001F3470;
  id v62 = *(id *)(v1 + OBJC_IVAR____TtC10VoiceMemos36RCRecordingCellMoreButtonMenuCreator_menuCreator);
  id v58 = self;
  id v2 = [v58 sharedStyleProvider];
  id v3 = [v2 editRecordingActivitySystemImageName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v59 = self;
  id v5 = [v59 systemImageNamed:v4];

  uint64_t v63 = sub_100025F4C(0, (unint64_t *)&qword_100266358);
  uint64_t v6 = type metadata accessor for String.LocalizationValue();
  uint64_t v61 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v7 = v61;
  __chkstk_darwin(v6 - 8);
  String.LocalizationValue.init(stringLiteral:)();
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v56 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v9 = v56;
  __chkstk_darwin(v8 - 8);
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v10 = v54;
  *((void *)v54 + 4) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  id v11 = v58;
  id v12 = [v58 sharedStyleProvider];
  id v13 = [v12 playbackSettingsImage];

  __chkstk_darwin(v14);
  unint64_t v57 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = String.LocalizationValue.init(stringLiteral:)();
  __chkstk_darwin(v15);
  unint64_t v60 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  unint64_t v16 = v62;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  *((void *)v10 + 5) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  aBlock[0] = v10;
  specialized Array._endMutation()();
  UIMenuElementSize v65 = (UIMenuElementSize)v10;
  if ((v55 & 1) == 0) {
    goto LABEL_8;
  }
  id v17 = [v11 sharedStyleProvider];
  id v18 = [v17 transcriptionImage];

  __chkstk_darwin(v19);
  uint64_t v20 = String.LocalizationValue.init(stringLiteral:)();
  __chkstk_darwin(v20);
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v55 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  id v21 = [v11 sharedStyleProvider];
  [v21 copyTranscriptImage];

  __chkstk_darwin(v22);
  uint64_t v23 = String.LocalizationValue.init(stringLiteral:)();
  uint64_t v24 = &v54;
  __chkstk_darwin(v23);
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v25 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  id v26 = v58;
  if (!((unint64_t)v65 >> 62))
  {
    uint64_t v27 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v28 = v27 + 2;
    if (!__OFADD__(v27, 2)) {
      goto LABEL_4;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v28 = v52 + 2;
  if (__OFADD__(v52, 2)) {
    goto LABEL_22;
  }
LABEL_4:
  sub_100108DC4(v28);
  specialized Array._endMutation()();
  uint64_t v24 = (_OWORD **)v55;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_23:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v29 = v25;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  id v11 = v26;
  unint64_t v16 = v62;
LABEL_8:
  unint64_t v30 = self;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v16;
  aBlock[4] = sub_100108C94;
  aBlock[5] = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100108C9C;
  aBlock[3] = &unk_100226370;
  uint64_t v32 = _Block_copy(aBlock);
  id v62 = v16;
  swift_release();
  id v55 = [v30 elementWithUncachedProvider:v32];
  _Block_release(v32);
  id v33 = [v11 sharedStyleProvider];
  id v34 = [v33 duplicateActivitySystemImageName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v36 = [v59 systemImageNamed:v35];

  __chkstk_darwin(v37);
  uint64_t v38 = String.LocalizationValue.init(stringLiteral:)();
  __chkstk_darwin(v38);
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v54 = (_OWORD *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  id v39 = [v11 sharedStyleProvider];
  id v40 = [v39 moveToFolderActivitySystemImageName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v42 = [v59 systemImageNamed:v41];

  __chkstk_darwin(v43);
  uint64_t v44 = String.LocalizationValue.init(stringLiteral:)();
  __chkstk_darwin(v44);
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v45 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  if ((unint64_t)v65 >> 62)
  {
    swift_bridgeObjectRetain();
    id v46 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v47 = (uint64_t)v46 + 3;
    if (!__OFADD__(v46, 3))
    {
LABEL_10:
      sub_100108DC4(v47);
      specialized Array._endMutation()();
      id v46 = v55;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
      goto LABEL_19;
    }
  }
  else
  {
    id v46 = *(id *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v47 = (uint64_t)v46 + 3;
    if (!__OFADD__(v46, 3)) {
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_19:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_11:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  char v48 = v54;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v49 = v45;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  sub_100025F4C(0, &qword_100266368);
  v50._uint64_t countAndFlagsBits = 0;
  v50._object = (void *)0xE000000000000000;
  v66.value.super.Class isa = 0;
  v66.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v50, (Swift::String_optional)0, v66, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v65, v53);
}

id sub_100108B6C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCRecordingCellMoreButtonMenuCreator();
  return [super dealloc];
}

uint64_t type metadata accessor for RCRecordingCellMoreButtonMenuCreator()
{
  return self;
}

uint64_t sub_100108C14()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100108C4C(uint64_t a1)
{
  return sub_1001510A0(a1, v1);
}

uint64_t sub_100108C54(uint64_t a1)
{
  return sub_100151154(a1, v1);
}

uint64_t sub_100108C5C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100108C94(void (*a1)(uint64_t))
{
  return sub_10015115C(a1);
}

uint64_t sub_100108C9C(uint64_t a1, void *aBlock)
{
  objc_super v2 = *(void (**)(void (*)(uint64_t), uint64_t))(a1 + 32);
  id v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  v2(sub_100108EC4, v4);
  swift_release();

  return swift_release();
}

uint64_t sub_100108D30()
{
  return swift_release();
}

void sub_100108D38(uint64_t a1, uint64_t a2)
{
  sub_100025F4C(0, &qword_100266360);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

uint64_t sub_100108DB4(uint64_t a1)
{
  return sub_100151650(a1, v1);
}

uint64_t sub_100108DBC(uint64_t a1)
{
  return sub_100151658(a1, v1);
}

uint64_t sub_100108DC4(uint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if ((result & 1) == 0
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || a1 > *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t sub_100108E84()
{
  return sub_1001510A8();
}

uint64_t sub_100108E8C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100108EC4(uint64_t a1)
{
  sub_100108D38(a1, *(void *)(v1 + 16));
}

id sub_100108ECC(uint64_t a1, uint64_t a2)
{
  id v5 = &v2[OBJC_IVAR____TtC10VoiceMemos36RCRecordingCellMoreButtonMenuCreator_recordingUUID];
  *(void *)id v5 = a1;
  *((void *)v5 + 1) = a2;
  uint64_t v6 = (objc_class *)type metadata accessor for RCMoreActionsMenuCreator();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  uint64_t v8 = &v7[OBJC_IVAR____TtC10VoiceMemos24RCMoreActionsMenuCreator_recordingUUID];
  *(void *)uint64_t v8 = a1;
  *((void *)v8 + 1) = a2;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  sub_100021CC8((uint64_t)v13, (uint64_t)&v7[OBJC_IVAR____TtC10VoiceMemos24RCMoreActionsMenuCreator_controller]);
  v12.receiver = v7;
  v12.super_class = v6;
  uint64_t v9 = v2;
  swift_bridgeObjectRetain();
  *(void *)&v9[OBJC_IVAR____TtC10VoiceMemos36RCRecordingCellMoreButtonMenuCreator_menuCreator] = [v12 init];

  v11.receiver = v9;
  v11.super_class = (Class)type metadata accessor for RCRecordingCellMoreButtonMenuCreator();
  return [super init];
}

UIMenu sub_100109028(int a1, char a2)
{
  sub_100028654(&qword_100264998);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1001F3470;
  id v17 = self;
  id v3 = [v17 sharedStyleProvider];
  id v4 = [v3 shareToolbarMenuImage];

  sub_100025F4C(0, (unint64_t *)&qword_100266358);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  String.LocalizationValue.init(stringLiteral:)();
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v2 + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  *(UIMenu *)(v2 + 40) = sub_100107DC0(a1);
  specialized Array._endMutation()();
  UIMenuElementSize v7 = v2;
  if ((a2 & 1) != 0 && RCOverdubRecordingFeatureFlagIsEnabled())
  {
    id v8 = [v17 sharedStyleProvider];
    id v9 = [v8 separateLayersImageName];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v11 = [self systemImageNamed:v10];

    __chkstk_darwin(v12);
    uint64_t v13 = String.LocalizationValue.init(stringLiteral:)();
    __chkstk_darwin(v13);
    static Locale.current.getter();
    String.init(localized:table:bundle:locale:comment:)();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    UIMenuElementSize v7 = v2;
  }
  sub_100025F4C(0, &qword_100266368);
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v20.value.super.Class isa = 0;
  v20.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v14, (Swift::String_optional)0, v20, 0, 0xFFFFFFFFFFFFFFFFLL, v7, v16);
}

uint64_t sub_1001094DC()
{
  return sub_100150FEC();
}

uint64_t sub_1001094E8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for RCSegmentedSwitch.RCSegmentedSwitchOptionLabel(uint64_t a1)
{
  return sub_100109510(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_100109510(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s10VoiceMemos17RCSegmentedSwitchV28RCSegmentedSwitchOptionLabelOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1001094E8(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for RCSegmentedSwitch.RCSegmentedSwitchOptionLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1001094E8(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100109510(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RCSegmentedSwitch.RCSegmentedSwitchOptionLabel(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100109510(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RCSegmentedSwitch.RCSegmentedSwitchOptionLabel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RCSegmentedSwitch.RCSegmentedSwitchOptionLabel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001096A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1001096A8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RCSegmentedSwitch.RCSegmentedSwitchOptionLabel()
{
  return &type metadata for RCSegmentedSwitch.RCSegmentedSwitchOptionLabel;
}

uint64_t sub_1001096C0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(void *)(v4 + 40) = a2[5];
    *(unsigned char *)(v4 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v8 = a2[8];
    *(void *)(v4 + 56) = a2[7];
    *(void *)(v4 + 64) = v8;
    uint64_t v9 = a2[9];
    uint64_t v10 = *(int *)(a3 + 36);
    id v11 = (void *)(v4 + v10);
    uint64_t v12 = (uint64_t *)((char *)a2 + v10);
    *(void *)(v4 + 72) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100028654(&qword_100267C00);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      void *v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_100109854(uint64_t a1, uint64_t a2)
{
  sub_10002F48C(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  sub_100028654(&qword_100267C00);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    unsigned __int8 v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_100109920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100028654(&qword_100267C00);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100109A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000FC830((uint64_t *)a1, (uint64_t *)a2);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 36);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    sub_1000285F8(a1 + v6, &qword_100267C00);
    sub_100028654(&qword_100267C00);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100109B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v9 = sub_100028654(&qword_100267C00);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100109C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10002F48C(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (const void *)(a2 + v9);
    sub_1000285F8(a1 + v9, &qword_100267C00);
    uint64_t v12 = sub_100028654(&qword_100267C00);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100109DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100109DC4);
}

uint64_t sub_100109DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100028654(&qword_100267490);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100109E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100109E8C);
}

uint64_t sub_100109E8C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100028654(&qword_100267490);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for RCSegmentedSwitch()
{
  uint64_t result = qword_1002674F0;
  if (!qword_1002674F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100109F84()
{
  sub_10010A04C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10010A04C()
{
  if (!qword_100267500)
  {
    type metadata accessor for ColorScheme();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100267500);
    }
  }
}

uint64_t sub_10010A0A4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10010A0C0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  if (!a3)
  {
    swift_bridgeObjectRetain();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v6._uint64_t countAndFlagsBits = 0;
    v6._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v6);
    Image.init(systemName:)();
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    swift_bridgeObjectRetain();
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v5._uint64_t countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v5);
    Image.init(_:bundle:)();
LABEL_5:
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release();
    v7._uint64_t countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v7);
    LocalizedStringKey.init(stringInterpolation:)();
    return Text.init(_:tableName:bundle:comment:)();
  }
  sub_10002DF88();
  swift_bridgeObjectRetain();
  return Text.init<A>(_:)();
}

uint64_t sub_10010A234()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RCSegmentedSwitch();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = type metadata accessor for NamedCoordinateSpace();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DragGesture();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = 0x656C7573706163;
  v13[1] = 0xE700000000000000;
  static CoordinateSpaceProtocol<>.named<A>(_:)();
  DragGesture.init<A>(minimumDistance:coordinateSpace:)();
  sub_10010DCC8(v1, (uint64_t)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
  unint64_t v10 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v11 = swift_allocObject();
  sub_10010D604((uint64_t)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  sub_100027FE8(&qword_100267628, (void (*)(uint64_t))&type metadata accessor for DragGesture);
  sub_100027FE8(&qword_100267630, (void (*)(uint64_t))&type metadata accessor for DragGesture.Value);
  Gesture<>.onChanged(_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10010A52C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[9];
  v9[0] = a2[8];
  v9[1] = v3;
  sub_100028654(&qword_100267638);
  State.wrappedValue.getter();
  sub_10010A67C((uint64_t (*)(void *))sub_10010DCA8, v8[0], v8);
  swift_bridgeObjectRelease();
  uint64_t result = sub_1000209F8((uint64_t)v8, (uint64_t)v9, &qword_100267640);
  if ((v10 & 1) == 0)
  {
    uint64_t v5 = v9[0];
    if (a2[7] != v9[0])
    {
      uint64_t v6 = a2[3];
      uint64_t v7 = a2[4];
      sub_10001510C(a2, v6);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(v5, v6, v7);
    }
  }
  return result;
}

BOOL sub_10010A61C(double *a1)
{
  CGFloat v1 = a1[1];
  CGFloat v2 = a1[2];
  CGFloat v3 = a1[3];
  CGFloat v4 = a1[4];
  DragGesture.Value.location.getter();
  v8.x = v5;
  v8.y = v6;
  v9.origin.x = v1;
  v9.origin.y = v2;
  v9.size.width = v3;
  v9.size.height = v4;
  return CGRectContainsPoint(v9, v8);
}

uint64_t sub_10010A67C@<X0>(uint64_t (*a1)(void *)@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v6 = a2 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a2 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_19:
    uint64_t v18 = *(void *)(*(void *)(a2 + 48) + 8 * v14);
    uint64_t v19 = (uint64_t *)(*(void *)(a2 + 56) + 32 * v14);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v22 = v19[3];
    v30[0] = v18;
    v30[1] = v21;
    void v30[2] = v20;
    void v30[3] = v23;
    v30[4] = v22;
    uint64_t result = a1(v30);
    if (v3) {
      return swift_release();
    }
    if (result)
    {
      uint64_t result = swift_release();
      char v24 = 0;
      uint64_t v25 = v21;
      uint64_t v26 = v20;
      uint64_t v27 = v23;
      uint64_t v28 = v22;
LABEL_28:
      id v29 = v31;
      *uint64_t v31 = v18;
      v29[1] = v25;
      v29[2] = v26;
      void v29[3] = v27;
      v29[4] = v28;
      *((unsigned char *)v29 + 40) = v24;
      return result;
    }
  }
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v12 >= v10) {
    goto LABEL_27;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v12);
  if (v16)
  {
LABEL_18:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_19;
  }
  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    goto LABEL_27;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_17;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    goto LABEL_27;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_17;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    goto LABEL_27;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_17;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10)
  {
LABEL_27:
    uint64_t result = swift_release();
    uint64_t v18 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    char v24 = 1;
    goto LABEL_28;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_17:
    int64_t v12 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_27;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_18;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

double sub_10010A888(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RCSegmentedSwitch();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v18 - v8;
  __chkstk_darwin(v10);
  int64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = *(void *)(*(void *)(v2 + 40) + 16) - 1;
  uint64_t v14 = *(void *)(v2 + 56);
  sub_10010DCC8(v2, (uint64_t)&v18 - v11, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
  if (v13 == a1)
  {
    sub_10001E654((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
    sub_10010DCC8(v2, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
  }
  else
  {
    char v15 = v12[48];
    sub_10001E654((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
    sub_10010DCC8(v2, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
    if ((v15 & 1) == 0)
    {
      sub_10001E654((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
      return 0.631578947;
    }
  }
  sub_10010D604((uint64_t)v9, (uint64_t)v6);
  if (v14 == a1)
  {
    sub_10001E654((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
    return 1.0;
  }
  char v16 = v6[48];
  sub_10001E654((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
  if ((v16 & 1) == 0) {
    return 1.0;
  }
  return 0.631578947;
}

uint64_t sub_10010AA8C()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t sub_10010AB44()
{
  uint64_t v0 = type metadata accessor for ColorScheme();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RCSegmentedSwitch();
  sub_10010DD30((uint64_t)v3);
  int v4 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  int v5 = enum case for ColorScheme.dark(_:);
  uint64_t v6 = self;
  if (v4 == v5)
  {
    id v7 = [v6 quaternarySystemFillColor];
    Color.init(_:)();
    uint64_t v8 = Color.opacity(_:)();
    swift_release();
  }
  else
  {
    id v9 = [v6 tertiarySystemFillColor];
    Color.init(_:)();
    uint64_t v8 = Color.opacity(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return v8;
}

uint64_t sub_10010ACE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v63 = a1;
  uint64_t v60 = a2;
  uint64_t v4 = type metadata accessor for PlainButtonStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v66 = v4;
  uint64_t v67 = v5;
  __chkstk_darwin(v4);
  id v7 = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RCSegmentedSwitch();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v59 = (uint64_t)v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v68 = (char *)v55 - v12;
  __chkstk_darwin(v13);
  char v15 = (char *)v55 - v14;
  uint64_t v16 = sub_100028654(&qword_1002675B0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100028654(&qword_100267668);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v64 = v20;
  uint64_t v65 = v21;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_100028654(&qword_1002675A8);
  __chkstk_darwin(v70);
  uint64_t v61 = (char *)v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v69 = (char *)v55 - v26;
  __chkstk_darwin(v27);
  id v58 = (char *)v55 - v28;
  id v62 = type metadata accessor for RCSegmentedSwitch;
  sub_10010DCC8(v3, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
  uint64_t v29 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v30 = (v29 + 16) & ~v29;
  unint64_t v31 = (v10 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v55[1] = v31 + 8;
  v55[2] = v29 | 7;
  uint64_t v32 = swift_allocObject();
  uint64_t v56 = v30;
  sub_10010D604((uint64_t)v15, v32 + v30);
  unint64_t v57 = v31;
  uint64_t v33 = v63;
  *(void *)(v32 + v31) = v63;
  uint64_t v71 = v3;
  uint64_t v72 = v33;
  sub_100028654(&qword_100267670);
  sub_10010E750(&qword_100267678, &qword_100267670, (void (*)(void))sub_10010E0B4);
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  uint64_t v34 = sub_100027F5C(&qword_1002675B8, &qword_1002675B0);
  uint64_t v35 = sub_100027FE8(&qword_100266CB0, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
  uint64_t v36 = v66;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v7, v36);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  uint64_t v37 = v33;
  uint64_t v38 = (uint64_t)v61;
  uint64_t v73 = v16;
  uint64_t v74 = v36;
  uint64_t v75 = v34;
  uint64_t v76 = v35;
  swift_getOpaqueTypeConformance2();
  uint64_t v39 = v64;
  View.accessibilityHidden(_:)();
  uint64_t v40 = (uint64_t)v68;
  (*(void (**)(char *, uint64_t))(v65 + 8))(v23, v39);
  sub_10010DCC8(v3, v40, (uint64_t (*)(void))v62);
  sub_10001E654(v40, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
  uint64_t v41 = sub_10010AA8C();
  uint64_t v43 = v42;
  LOBYTE(v35) = v44 & 1;
  uint64_t v45 = (uint64_t)v69;
  ModifiedContent<>.accessibilityLabel(_:)();
  sub_100028700(v41, v43, v35);
  swift_bridgeObjectRelease();
  uint64_t result = sub_1000285F8(v38, &qword_1002675A8);
  if (__OFSUB__(*(void *)(*(void *)(v3 + 40) + 16), v37))
  {
    __break(1u);
  }
  else
  {
    uint64_t v47 = (uint64_t)v58;
    ModifiedContent<>.accessibilitySortPriority(_:)();
    sub_1000285F8(v45, &qword_1002675A8);
    uint64_t v48 = static Alignment.center.getter();
    Swift::String v50 = v49;
    uint64_t v51 = v59;
    sub_10010DCC8(v3, v59, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
    uint64_t v52 = swift_allocObject();
    sub_10010D604(v51, v52 + v56);
    *(void *)(v52 + v57) = v37;
    uint64_t v53 = v60;
    sub_10002869C(v47, v60, &qword_1002675A8);
    uint64_t v54 = (uint64_t (**)@<X0>(uint64_t@<X8>))(v53 + *(int *)(sub_100028654(&qword_100267590) + 36));
    *uint64_t v54 = sub_10010E474;
    v54[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v52;
    v54[2] = (uint64_t (*)@<X0>(uint64_t@<X8>))v48;
    v54[3] = v50;
    return sub_1000285F8(v47, &qword_1002675A8);
  }
  return result;
}

uint64_t sub_10010B40C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v109 = type metadata accessor for Image.Scale();
  uint64_t v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v105 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_100028654(&qword_1002676C0);
  __chkstk_darwin(v100);
  uint64_t v8 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v9 - 8);
  uint64_t v103 = sub_100028654(&qword_1002676F0);
  uint64_t v102 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v101 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_100028654(&qword_1002676B8);
  __chkstk_darwin(v99);
  uint64_t v106 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_100028654(&qword_1002676A8);
  __chkstk_darwin(v104);
  uint64_t v111 = (uint64_t)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_100028654(&qword_100267698);
  __chkstk_darwin(v107);
  uint64_t v114 = (uint64_t)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_100028654(&qword_100267688);
  __chkstk_darwin(v110);
  char v15 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100028654(&qword_100267670);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for RCSegmentedSwitch();
  __chkstk_darwin(v19 - 8);
  uint64_t v98 = (uint64_t)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v96 - v22;
  uint64_t v24 = *(void *)(*(void *)(a1 + 40) + 16) - 1;
  sub_10010DCC8(a1, (uint64_t)&v96 - v22, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
  uint64_t v116 = a1;
  uint64_t v117 = a3;
  uint64_t v97 = a2;
  long long v115 = v15;
  long long v113 = v18;
  uint64_t v112 = v16;
  *(void *)&long long v118 = v8;
  if (v24 == a2)
  {
    int v25 = v23[48];
    uint64_t result = sub_10001E654((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
    if (v25 != 1)
    {
      char v27 = 1;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t result = sub_10001E654((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
  }
  uint64_t v28 = *(void *)(a1 + 40);
  if (*(void *)(v28 + 16) > a2)
  {
    if (a2 < 0)
    {
LABEL_23:
      __break(1u);
      return result;
    }
    uint64_t v29 = v28 + 24 * a2;
    uint64_t v30 = *(void *)(v29 + 32);
    uint64_t v31 = *(void *)(v29 + 40);
    char v32 = *(unsigned char *)(v29 + 48);
    sub_1001094E8(v30, v31, v32);
    uint64_t v33 = sub_10010A0C0(v30, v31, v32);
    uint64_t v35 = v34;
    char v37 = v36 & 1;
    sub_100109510(v30, v31, v32);
    goto LABEL_11;
  }
  char v27 = 0;
LABEL_9:
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v38._uint64_t countAndFlagsBits = 0;
  v38._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v38);
  Image.init(systemName:)();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v39._uint64_t countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v39);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v33 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v35 = v40;
  char v37 = v41 & 1;
  if (v27)
  {
    int v42 = 1;
    static Font.subheadline.getter();
    goto LABEL_12;
  }
LABEL_11:
  static Font.body.getter();
  int v42 = 0;
LABEL_12:
  uint64_t v43 = Text.font(_:)();
  uint64_t v45 = v44;
  char v47 = v46;
  swift_release();
  sub_100028700(v33, v35, v37);
  swift_bridgeObjectRelease();
  int v48 = v42;
  if (v42) {
    static Font.Weight.heavy.getter();
  }
  else {
    static Font.Weight.bold.getter();
  }
  uint64_t v49 = v118;
  char v50 = v47 & 1;
  uint64_t v51 = Text.fontWeight(_:)();
  uint64_t v53 = v52;
  char v55 = v54;
  uint64_t v57 = v56;
  sub_100028700(v43, v45, v50);
  swift_bridgeObjectRelease();
  *(void *)&long long v123 = v51;
  *((void *)&v123 + 1) = v53;
  LOBYTE(v124) = v55 & 1;
  *((void *)&v124 + 1) = v57;
  uint64_t v58 = enum case for DynamicTypeSize.xxxLarge(_:);
  uint64_t v59 = type metadata accessor for DynamicTypeSize();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 104))(v49, v58, v59);
  sub_100027FE8(&qword_1002676F8, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  sub_100027F5C(&qword_1002676C8, &qword_1002676C0);
  uint64_t v60 = v101;
  View.dynamicTypeSize<A>(_:)();
  sub_1000285F8(v49, &qword_1002676C0);
  sub_100028700(v123, *((uint64_t *)&v123 + 1), v124);
  swift_bridgeObjectRelease();
  uint64_t v61 = v108;
  id v62 = v105;
  uint64_t v63 = v109;
  (*(void (**)(char *, void, uint64_t))(v108 + 104))(v105, enum case for Image.Scale.large(_:), v109);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v65 = (uint64_t)v106;
  uint64_t v66 = (uint64_t *)&v106[*(int *)(v99 + 36)];
  uint64_t v67 = sub_100028654(&qword_100266DA0);
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))((char *)v66 + *(int *)(v67 + 28), v62, v63);
  *uint64_t v66 = KeyPath;
  uint64_t v68 = v102;
  uint64_t v69 = v103;
  (*(void (**)(uint64_t, char *, uint64_t))(v102 + 16))(v65, v60, v103);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v60, v69);
  uint64_t v70 = v116;
  uint64_t v71 = v98;
  sub_10010DCC8(v116, v98, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
  if (v48)
  {
    sub_10001E654(v71, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
    uint64_t v72 = &selRef_systemBlueColor;
    uint64_t v73 = v97;
  }
  else
  {
    uint64_t v74 = *(void *)(v71 + 56);
    sub_10001E654(v71, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
    uint64_t v73 = v97;
    if (v74 == v97) {
      uint64_t v72 = &selRef_systemBlueColor;
    }
    else {
      uint64_t v72 = &selRef_labelColor;
    }
  }
  id v75 = [self *v72];
  uint64_t v76 = Color.init(_:)();
  uint64_t v77 = v111;
  sub_10002869C(v65, v111, &qword_1002676B8);
  *(void *)(v77 + *(int *)(v104 + 36)) = v76;
  sub_1000285F8(v65, &qword_1002676B8);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v78 = v114;
  sub_10002869C(v77, v114, &qword_1002676A8);
  uint64_t v79 = (_OWORD *)(v78 + *(int *)(v107 + 36));
  long long v80 = v124;
  _OWORD *v79 = v123;
  v79[1] = v80;
  v79[2] = v125;
  sub_1000285F8(v77, &qword_1002676A8);
  uint64_t v81 = static Alignment.center.getter();
  uint64_t v83 = v82;
  sub_10010BF28(v70, (uint64_t)&v119);
  char v84 = v120;
  char v85 = v121;
  char v86 = v122;
  long long v118 = v119;
  uint64_t v87 = (uint64_t)v115;
  sub_10002869C(v78, (uint64_t)v115, &qword_100267698);
  uint64_t v88 = v87 + *(int *)(v110 + 36);
  *(_OWORD *)uint64_t v88 = v118;
  *(unsigned char *)(v88 + 16) = v84;
  *(unsigned char *)(v88 + 17) = v85;
  *(unsigned char *)(v88 + 18) = v86;
  *(void *)(v88 + 24) = v81;
  *(void *)(v88 + 32) = v83;
  sub_1000285F8(v78, &qword_100267698);
  double v89 = sub_10010A888(v73);
  static UnitPoint.center.getter();
  uint64_t v91 = v90;
  uint64_t v93 = v92;
  uint64_t v94 = (uint64_t)v113;
  sub_10002869C(v87, (uint64_t)v113, &qword_100267688);
  uint64_t v95 = (double *)(v94 + *(int *)(v112 + 36));
  *uint64_t v95 = v89;
  v95[1] = v89;
  *((void *)v95 + 2) = v91;
  *((void *)v95 + 3) = v93;
  sub_1000285F8(v87, &qword_100267688);
  return sub_1000209F8(v94, v117, &qword_100267670);
}

uint64_t sub_10010BF28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v3 = type metadata accessor for Material();
  uint64_t v35 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v32 = (char *)&v30 - v6;
  uint64_t v7 = sub_100028654(&qword_100267650);
  __chkstk_darwin(v7 - 8);
  uint64_t v34 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = type metadata accessor for ColorScheme();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  char v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v30 - v17;
  type metadata accessor for RCSegmentedSwitch();
  uint64_t v30 = a1;
  sub_10010DD30((uint64_t)v18);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t))(v13 + 88);
  int v20 = v19(v18, v12);
  int v21 = enum case for ColorScheme.dark(_:);
  if (v20 == enum case for ColorScheme.dark(_:))
  {
    id v22 = [self systemFillColor];
    uint64_t v33 = Color.init(_:)();
  }
  else
  {
    uint64_t v33 = static Color.white.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
  sub_10010DD30((uint64_t)v15);
  if (v19(v15, v12) == v21)
  {
    uint64_t v24 = v35;
    uint64_t v23 = v36;
    uint64_t v25 = (uint64_t)v34;
    if (*(unsigned char *)(v30 + 48))
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v11, 1, 1, v3);
    }
    else
    {
      static Material.ultraThin.getter();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v11, 0, 1, v3);
    }
  }
  else
  {
    uint64_t v24 = v35;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v11, 1, 1, v3);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v23 = v36;
    uint64_t v25 = (uint64_t)v34;
  }
  sub_10002869C((uint64_t)v11, v25, &qword_100267650);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v25, 1, v3) == 1)
  {
    sub_1000285F8((uint64_t)v11, &qword_100267650);
    uint64_t v37 = static Color.clear.getter();
    uint64_t v26 = AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    char v27 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v32, v25, v3);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v31, v27, v3);
    uint64_t v26 = AnyShapeStyle.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v3);
    sub_1000285F8((uint64_t)v11, &qword_100267650);
  }
  uint64_t v28 = v33;
  uint64_t result = static Edge.Set.all.getter();
  *(void *)uint64_t v23 = v28;
  *(void *)(v23 + 8) = v26;
  *(unsigned char *)(v23 + 16) = result;
  *(_WORD *)(v23 + 17) = 256;
  return result;
}

uint64_t sub_10010C38C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v42 = a3;
  uint64_t v5 = type metadata accessor for RCSegmentedSwitch();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = sub_100028654(&qword_1002676E0);
  uint64_t v40 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  __chkstk_darwin(v8);
  Swift::String v39 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for NamedCoordinateSpace();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = 0x656C7573706163;
  unint64_t v45 = 0xE700000000000000;
  static CoordinateSpaceProtocol<>.named<A>(_:)();
  GeometryProxy.frame<A>(in:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v44 = static Color.clear.getter();
  char v43 = *(unsigned char *)(a1 + 48);
  uint64_t v37 = type metadata accessor for RCSegmentedSwitch;
  uint64_t v38 = a1;
  sub_10010DCC8(a1, (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
  unint64_t v22 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v23 = (v7 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = swift_allocObject();
  sub_10010D604((uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v22);
  uint64_t v26 = a2;
  *(void *)(v25 + v23) = a2;
  char v27 = (void *)(v25 + v24);
  *char v27 = v15;
  v27[1] = v17;
  void v27[2] = v19;
  v27[3] = v21;
  uint64_t v28 = v39;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_release();
  sub_10010DCC8(v38, (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))v37);
  uint64_t v29 = swift_allocObject();
  sub_10010D604((uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v29 + v22);
  *(void *)(v29 + v23) = v26;
  uint64_t v30 = (void *)(v29 + v24);
  *uint64_t v30 = v15;
  v30[1] = v17;
  void v30[2] = v19;
  void v30[3] = v21;
  uint64_t v32 = v40;
  uint64_t v31 = v41;
  uint64_t v33 = v42;
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 16))(v42, v28, v41);
  uint64_t v34 = (void *)(v33 + *(int *)(sub_100028654(&qword_1002676E8) + 36));
  *uint64_t v34 = sub_10010E524;
  v34[1] = v29;
  v34[2] = 0;
  v34[3] = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v28, v31);
}

uint64_t sub_10010C768(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100028654(&qword_100267638);
  State.wrappedValue.getter();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1000D3300(a6, isUniquelyReferenced_nonNull_native, a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  State.wrappedValue.setter();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10010C868@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v68 = a1;
  uint64_t v3 = sub_100028654(&qword_100267540);
  uint64_t v66 = *(void *)(v3 - 8);
  uint64_t v67 = v3;
  __chkstk_darwin(v3);
  uint64_t v65 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RCSegmentedSwitch();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = sub_100028654(&qword_100267548);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v52 = sub_100028654(&qword_100267550);
  __chkstk_darwin(v52);
  uint64_t v53 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_100028654(&qword_100267558);
  __chkstk_darwin(v54);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100028654(&qword_100267560);
  uint64_t v61 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_100028654(&qword_100267568);
  __chkstk_darwin(v55);
  uint64_t v63 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_100028654(&qword_100267570);
  __chkstk_darwin(v59);
  uint64_t v62 = (uint64_t)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_100028654(&qword_100267578);
  __chkstk_darwin(v57);
  uint64_t v60 = (uint64_t)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100028654(&qword_100267580);
  __chkstk_darwin(v19 - 8);
  uint64_t v56 = (uint64_t)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v21 = *(unsigned __int8 *)(v2 + 48);
  uint64_t v58 = v15;
  if (v21 == 1)
  {
    uint64_t v69 = static VerticalAlignment.center.getter();
    uint64_t v70 = 0x4000000000000000;
    char v71 = 0;
    sub_10010DAB0();
  }
  else
  {
    uint64_t v69 = static Alignment.center.getter();
    uint64_t v70 = v22;
    sub_10010D5AC();
  }
  *uint64_t v10 = AnyLayout.init<A>(_:)();
  uint64_t v23 = *(void *)(*(void *)(v2 + 40) + 16);
  uint64_t v69 = 0;
  uint64_t v70 = v23;
  swift_getKeyPath();
  sub_10010DCC8(v2, (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
  unint64_t v24 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v25 = swift_allocObject();
  sub_10010D604((uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v24);
  sub_100028654(&qword_100266D30);
  sub_100028654(&qword_100267590);
  sub_1000327B4();
  sub_10010D6DC();
  ForEach<>.init(_:id:content:)();
  if (v21)
  {
    uint64_t v26 = static Color.clear.getter();
  }
  else
  {
    static Color.black.getter();
    uint64_t v26 = Color.opacity(_:)();
    swift_release();
  }
  char v27 = v58;
  uint64_t v28 = v53;
  sub_10002869C((uint64_t)v10, v53, &qword_100267548);
  uint64_t v29 = v28 + *(int *)(v52 + 36);
  *(void *)uint64_t v29 = v26;
  *(_OWORD *)(v29 + 8) = xmmword_1001F34B0;
  *(void *)(v29 + 24) = 0x3FF0000000000000;
  sub_1000285F8((uint64_t)v10, &qword_100267548);
  uint64_t v30 = static Alignment.center.getter();
  uint64_t v32 = v31;
  uint64_t v33 = (uint64_t)&v13[*(int *)(v54 + 36)];
  sub_10010D05C(v2, v33);
  uint64_t v34 = (uint64_t *)(v33 + *(int *)(sub_100028654(&qword_1002675D0) + 36));
  *uint64_t v34 = v30;
  v34[1] = v32;
  sub_1000209F8(v28, (uint64_t)v13, &qword_100267550);
  uint64_t v35 = v65;
  sub_10010A234();
  static GestureMask.all.getter();
  sub_10010D8D0();
  sub_100027F5C(&qword_100267618, &qword_100267540);
  uint64_t v36 = v67;
  View.highPriorityGesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v35, v36);
  sub_1000285F8((uint64_t)v13, &qword_100267558);
  if (*(unsigned char *)(v2 + 48) == 1) {
    uint64_t v37 = static Animation.default.getter();
  }
  else {
    uint64_t v37 = 0;
  }
  uint64_t v38 = *(void *)(v2 + 56);
  uint64_t v39 = v61;
  uint64_t v41 = (uint64_t)v63;
  uint64_t v40 = v64;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v63, v27, v64);
  uint64_t v42 = (uint64_t *)(v41 + *(int *)(v55 + 36));
  uint64_t *v42 = v37;
  v42[1] = v38;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v27, v40);
  static Animation.default.getter();
  uint64_t v43 = Animation.speed(_:)();
  swift_release();
  char v44 = *(unsigned char *)(v2 + 48);
  uint64_t v45 = v62;
  sub_10002869C(v41, v62, &qword_100267568);
  uint64_t v46 = v45 + *(int *)(v59 + 36);
  *(void *)uint64_t v46 = v43;
  *(unsigned char *)(v46 + 8) = v44;
  sub_1000285F8(v41, &qword_100267568);
  uint64_t v47 = v60;
  sub_10002869C(v45, v60, &qword_100267570);
  int v48 = (void *)(v47 + *(int *)(v57 + 36));
  *int v48 = 0x656C7573706163;
  v48[1] = 0xE700000000000000;
  sub_1000285F8(v45, &qword_100267570);
  uint64_t v49 = v56;
  sub_10002869C(v47, v56, &qword_100267578);
  sub_1000285F8(v47, &qword_100267578);
  return sub_1000209F8(v49, v68, &qword_100267580);
}

uint64_t sub_10010D05C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v44 = sub_100028654(&qword_100267648);
  __chkstk_darwin(v44);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Capsule();
  __chkstk_darwin(v5 - 8);
  uint64_t v45 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Material();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v41 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v40 - v11;
  uint64_t v13 = sub_100028654(&qword_100267650);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v40 - v17;
  uint64_t v42 = sub_100028654(&qword_100267658);
  __chkstk_darwin(v42);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100028654(&qword_100267660);
  __chkstk_darwin(v43);
  uint64_t v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10010AB44();
  if (*(unsigned char *)(a1 + 48) == 1)
  {
    static Material.ultraThin.getter();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v18, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v18, 1, 1, v7);
  }
  sub_10002869C((uint64_t)v18, (uint64_t)v15, &qword_100267650);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v15, 1, v7) == 1)
  {
    sub_1000285F8((uint64_t)v18, &qword_100267650);
    uint64_t v47 = static Color.clear.getter();
    uint64_t v24 = AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v15, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v41, v12, v7);
    uint64_t v24 = AnyShapeStyle.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    sub_1000285F8((uint64_t)v18, &qword_100267650);
  }
  char v25 = static Edge.Set.all.getter();
  uint64_t v26 = enum case for RoundedCornerStyle.circular(_:);
  uint64_t v27 = type metadata accessor for RoundedCornerStyle();
  uint64_t v28 = (uint64_t)v45;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104))(v45, v26, v27);
  sub_10010DCC8(v28, (uint64_t)v4, (uint64_t (*)(void))&type metadata accessor for Capsule);
  *(_WORD *)&v4[*(int *)(v44 + 36)] = 256;
  sub_10002869C((uint64_t)v4, (uint64_t)&v20[*(int *)(v42 + 36)], &qword_100267648);
  *(void *)uint64_t v20 = v23;
  *((void *)v20 + 1) = v24;
  v20[16] = v25;
  swift_retain();
  swift_retain();
  sub_1000285F8((uint64_t)v4, &qword_100267648);
  sub_10001E654(v28, (uint64_t (*)(void))&type metadata accessor for Capsule);
  swift_release();
  swift_release();
  char v29 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  sub_10002869C((uint64_t)v20, (uint64_t)v22, &qword_100267658);
  uint64_t v38 = &v22[*(int *)(v43 + 36)];
  *uint64_t v38 = v29;
  *((void *)v38 + 1) = v31;
  *((void *)v38 + 2) = v33;
  *((void *)v38 + 3) = v35;
  *((void *)v38 + 4) = v37;
  v38[40] = 0;
  sub_1000285F8((uint64_t)v20, &qword_100267658);
  return sub_1000209F8((uint64_t)v22, v46, &qword_100267660);
}

unint64_t sub_10010D5AC()
{
  unint64_t result = qword_100267588;
  if (!qword_100267588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267588);
  }
  return result;
}

uint64_t sub_10010D604(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RCSegmentedSwitch();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010D668@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010ACE8(*a1, a2);
}

unint64_t sub_10010D6DC()
{
  unint64_t result = qword_100267598;
  if (!qword_100267598)
  {
    sub_100027F14(&qword_100267590);
    sub_10010D77C();
    sub_100027F5C(&qword_1002675C0, &qword_1002675C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267598);
  }
  return result;
}

unint64_t sub_10010D77C()
{
  unint64_t result = qword_1002675A0;
  if (!qword_1002675A0)
  {
    sub_100027F14(&qword_1002675A8);
    sub_100027F14(&qword_1002675B0);
    type metadata accessor for PlainButtonStyle();
    sub_100027F5C(&qword_1002675B8, &qword_1002675B0);
    sub_100027FE8(&qword_100266CB0, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2();
    sub_100027FE8(&qword_100266CE0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002675A0);
  }
  return result;
}

unint64_t sub_10010D8D0()
{
  unint64_t result = qword_1002675D8;
  if (!qword_1002675D8)
  {
    sub_100027F14(&qword_100267558);
    sub_10010E750(&qword_1002675E0, &qword_100267550, (void (*)(void))sub_10010D99C);
    sub_100027F5C(&qword_100267610, &qword_1002675D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002675D8);
  }
  return result;
}

unint64_t sub_10010D99C()
{
  unint64_t result = qword_1002675E8;
  if (!qword_1002675E8)
  {
    sub_100027F14(&qword_100267548);
    sub_100027F5C(&qword_1002675F0, &qword_1002675F8);
    sub_10010DA3C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002675E8);
  }
  return result;
}

unint64_t sub_10010DA3C()
{
  unint64_t result = qword_100267600;
  if (!qword_100267600)
  {
    sub_100027F14(&qword_100267608);
    sub_10010D6DC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267600);
  }
  return result;
}

unint64_t sub_10010DAB0()
{
  unint64_t result = qword_100267620;
  if (!qword_100267620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267620);
  }
  return result;
}

uint64_t sub_10010DB08()
{
  uint64_t v1 = (int *)(type metadata accessor for RCSegmentedSwitch() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  sub_10002F48C(v0 + v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v5 = v0 + v3 + v1[11];
  sub_100028654(&qword_100267C00);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10010DC38(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for RCSegmentedSwitch() - 8);
  uint64_t v4 = (void *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));

  return sub_10010A52C(a1, v4);
}

BOOL sub_10010DCA8(double *a1)
{
  return sub_10010A61C(a1);
}

uint64_t sub_10010DCC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10010DD30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100028654(&qword_100267C00);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002869C(v2, (uint64_t)v10, &qword_100267C00);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorScheme();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    uint64_t v14 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v18[1] = a1;
      uint64_t v19 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      void v18[2] = sub_10002F3B8(0x686353726F6C6F43, 0xEB00000000656D65, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_10010DFF0()
{
  uint64_t v1 = *(void *)(type metadata accessor for RCSegmentedSwitch() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v4 = *(void *)(v0 + v2 + 24);
  uint64_t v5 = *(void *)(v0 + v2 + 32);
  sub_10001510C((void *)(v0 + v2), v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(v3, v4, v5);
}

uint64_t sub_10010E0AC@<X0>(uint64_t a1@<X8>)
{
  return sub_10010B40C(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_10010E0B4()
{
  unint64_t result = qword_100267680;
  if (!qword_100267680)
  {
    sub_100027F14(&qword_100267688);
    sub_10010E750(&qword_100267690, &qword_100267698, (void (*)(void))sub_10010E180);
    sub_100027F5C(&qword_1002676D0, &qword_1002676D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267680);
  }
  return result;
}

unint64_t sub_10010E180()
{
  unint64_t result = qword_1002676A0;
  if (!qword_1002676A0)
  {
    sub_100027F14(&qword_1002676A8);
    sub_10010E220();
    sub_100027F5C(&qword_100266DA8, &qword_100266DB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002676A0);
  }
  return result;
}

unint64_t sub_10010E220()
{
  unint64_t result = qword_1002676B0;
  if (!qword_1002676B0)
  {
    sub_100027F14(&qword_1002676B8);
    sub_100027F14(&qword_1002676C0);
    sub_100027F5C(&qword_1002676C8, &qword_1002676C0);
    swift_getOpaqueTypeConformance2();
    sub_100027F5C(&qword_100266D98, &qword_100266DA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002676B0);
  }
  return result;
}

uint64_t sub_10010E338()
{
  uint64_t v1 = (int *)(type metadata accessor for RCSegmentedSwitch() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  sub_10002F48C(v0 + v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v5 = v0 + v3 + v1[11];
  sub_100028654(&qword_100267C00);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_10010E474@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for RCSegmentedSwitch() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10010C38C(v1 + v4, v5, a1);
}

uint64_t sub_10010E52C()
{
  uint64_t v1 = (int *)(type metadata accessor for RCSegmentedSwitch() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  sub_10002F48C(v0 + v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v5 = v0 + v3 + v1[11];
  sub_100028654(&qword_100267C00);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 32, v2 | 7);
}

uint64_t sub_10010E670()
{
  uint64_t v1 = *(void *)(type metadata accessor for RCSegmentedSwitch() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10010C768(*(double *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(double *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(double *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 16), *(double *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 24), v0 + v2, *(void *)(v0 + v3));
}

uint64_t sub_10010E70C()
{
  return sub_10010E750(&qword_100267700, &qword_100267580, (void (*)(void))sub_10010E7CC);
}

uint64_t sub_10010E750(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100027F14(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010E7CC()
{
  unint64_t result = qword_100267708;
  if (!qword_100267708)
  {
    sub_100027F14(&qword_100267578);
    sub_10010E86C();
    sub_100027F5C(&qword_100267740, &qword_100267748);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267708);
  }
  return result;
}

unint64_t sub_10010E86C()
{
  unint64_t result = qword_100267710;
  if (!qword_100267710)
  {
    sub_100027F14(&qword_100267570);
    sub_10010E90C();
    sub_100027F5C(&qword_100267730, &qword_100267738);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267710);
  }
  return result;
}

unint64_t sub_10010E90C()
{
  unint64_t result = qword_100267718;
  if (!qword_100267718)
  {
    sub_100027F14(&qword_100267568);
    sub_100027F14(&qword_100267558);
    sub_100027F14(&qword_100267540);
    sub_10010D8D0();
    sub_100027F5C(&qword_100267618, &qword_100267540);
    swift_getOpaqueTypeConformance2();
    sub_100027F5C(&qword_100267720, &qword_100267728);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267718);
  }
  return result;
}

unint64_t sub_10010EA30(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100028654(&qword_100267CB0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10002869C(v6, (uint64_t)&v15, &qword_100267CB8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1001681C0(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100114820(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10010EB68(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100028654(&qword_100267CA0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10002869C(v6, (uint64_t)v15, &qword_100267CA8);
    unint64_t result = sub_10016817C((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_100114820(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10010ECAC(uint64_t a1)
{
  return sub_10010ECFC(a1, &qword_100267CE0, &qword_100267CE8, (uint64_t (*)(void))sub_10016827C);
}

unint64_t sub_10010ECD4(uint64_t a1)
{
  return sub_10010ECFC(a1, &qword_100267CD0, &qword_100267CD8, (uint64_t (*)(void))sub_100168330);
}

unint64_t sub_10010ECFC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  char v29 = a4;
  uint64_t v7 = sub_100028654(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v12 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100028654(a3);
  uint64_t v11 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = (void *)v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  uint64_t v14 = &v10[*(int *)(v7 + 48)];
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v28 = a1;
  uint64_t v17 = a1 + v16;
  uint64_t v18 = *(void *)(v8 + 72);
  swift_retain();
  while (1)
  {
    sub_10002869C(v17, (uint64_t)v10, a2);
    char v19 = *v10;
    unint64_t result = v29(*v10);
    if (v21) {
      break;
    }
    unint64_t v22 = result;
    *(void *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v12[6] + result) = v19;
    uint64_t v23 = v12[7];
    uint64_t v24 = type metadata accessor for DisplayRepresentation();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v23 + *(void *)(*(void *)(v24 - 8) + 72) * v22, v14, v24);
    uint64_t v25 = v12[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_11;
    }
    _OWORD v12[2] = v27;
    v17 += v18;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10010EEF8(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_100267CC0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100028654(&qword_100267CC8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10002869C(v12, (uint64_t)v5, &qword_100267CC0);
    char v14 = *v5;
    unint64_t result = sub_1001683DC(*v5);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v7[6] + result) = v14;
    uint64_t v18 = v7[7];
    uint64_t v19 = type metadata accessor for DisplayRepresentation();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v9, v19);
    uint64_t v20 = v7[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v7[2] = v22;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10010F0F0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100028654(&qword_100267C60);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_1001684B8();
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10010F1FC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100028654(&qword_100267C50);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10002869C(v6, (uint64_t)&v13, &qword_100267C58);
    uint64_t v7 = v13;
    unint64_t result = sub_1001684B8(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_100114820(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10010F32C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100028654(&qword_100267C28);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10002869C(v6, (uint64_t)&v13, (uint64_t *)&unk_100267C30);
    uint64_t v7 = v13;
    unint64_t result = sub_100025B80(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = sub_1000209F8((uint64_t)&v14, v3[7] + 32 * result, &qword_100265A10);
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_10010F534(uint64_t a1)
{
  return sub_100110C6C(a1, type metadata accessor for RCMultipleWaveformsViewController);
}

uint64_t type metadata accessor for RCMultipleWaveformsViewController()
{
  return self;
}

uint64_t type metadata accessor for _RCMultipleWaveformsViewController(uint64_t a1)
{
  return sub_100111A1C(a1, (uint64_t *)&unk_100267790);
}

uint64_t sub_10010F590()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10010F5F4()
{
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + 16);
}

uint64_t sub_10010F664@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(void *)(v3 + 16);
  return result;
}

uint64_t sub_10010F6DC()
{
  return swift_release();
}

uint64_t sub_10010F778()
{
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + 24);
}

uint64_t sub_10010F7E8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(void *)(v3 + 24);
  return result;
}

uint64_t sub_10010F860()
{
  return swift_release();
}

uint64_t sub_10010F8FC()
{
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t sub_10010F96C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 32);
  return result;
}

uint64_t sub_10010F9E4()
{
  return swift_release();
}

uint64_t sub_10010FA84()
{
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t sub_10010FAF4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 33);
  return result;
}

uint64_t sub_10010FB6C()
{
  return swift_release();
}

uint64_t sub_10010FC0C()
{
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t sub_10010FC7C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 34);
  return result;
}

uint64_t sub_10010FCF4()
{
  return swift_release();
}

uint64_t sub_10010FD94()
{
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(void *)(v0 + 40);
}

uint64_t sub_10010FE08@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  char v5 = *(unsigned char *)(v3 + 48);
  *(void *)a2 = *(void *)(v3 + 40);
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_10010FE88()
{
  return swift_release();
}

uint64_t sub_10010FF2C()
{
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t sub_10010FF9C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  *a2 = *(unsigned char *)(v3 + 49);
  return result;
}

uint64_t sub_100110014()
{
  return swift_release();
}

uint64_t sub_1001100B4()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_100110128@<X0>(uint64_t *a1@<X8>)
{
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  *a1 = result;
  return result;
}

void sub_1001101A4(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_100114088();
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_100110250(uint64_t a1, uint64_t a2, char a3, char a4, char a5, uint64_t a6, char a7, char a8, void *a9)
{
  *(void *)(v9 + 40) = 0;
  *(unsigned char *)(v9 + 48) = 1;
  swift_unknownObjectWeakInit();
  ObservationRegistrar.init()();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(unsigned char *)(v9 + 32) = a3;
  *(unsigned char *)(v9 + 33) = a4;
  *(unsigned char *)(v9 + 34) = a5;
  *(void *)(v9 + 40) = a6;
  *(unsigned char *)(v9 + 48) = a7 & 1;
  *(unsigned char *)(v9 + 49) = a8;
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();

  return v9;
}

uint64_t sub_100110378()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCC10VoiceMemos34_RCMultipleWaveformsViewController28RCMultipleWaveformsViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100110420(void *a1, void *a2)
{
  uint64_t v37 = sub_100028654(&qword_100267C68);
  uint64_t v5 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for RCMultipleWaveformsView(0);
  __chkstk_darwin(v32);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v2[qword_100267788] = 0;
  uint64_t v10 = type metadata accessor for RCSegmentedSwitchController();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  uint64_t v12 = (uint64_t *)&v2[qword_100267780];
  uint64_t v12[3] = v10;
  v12[4] = (uint64_t)&off_100225A08;
  *uint64_t v12 = v11;
  uint64_t v13 = v2;
  uint64_t v14 = a2;
  id v15 = [a1 waveformViewControllers];
  sub_100114830();
  unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v35 = v7;
  uint64_t v36 = v5;
  id v33 = a1;
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = OBJC_IVAR____TtC10VoiceMemos30RCRecordingTrackInfoRepository_trackInfoSubject;
  uint64_t v34 = v14;
  CurrentValueSubject.value.getter();
  unint64_t v19 = v38;
  type metadata accessor for RCTrackState(0);
  if (v19 >= 3)
  {
    unint64_t v38 = v19;
  }
  else
  {
    uint64_t v31 = v18;
    uint64_t v20 = qword_1001F3A80[v19];
    CurrentValueSubject.value.getter();
    if (v38 < 3)
    {
      unsigned int v21 = (6u >> (v38 & 7)) & 1;
      type metadata accessor for _RCMultipleWaveformsViewController.RCMultipleWaveformsViewModel(0);
      uint64_t v22 = swift_allocObject();
      id v23 = v33;
      id v24 = v33;
      sub_100110250(v17, v20, v21, 1, 1, 0, 1, 0, v23);
      *(void *)&v13[qword_100267778] = v22;

      sub_10002F970((uint64_t)v12, (uint64_t)&v9[*(int *)(v32 + 20)]);
      sub_100114088();
      swift_retain();
      Bindable<A>.init(wrappedValue:)();
      uint64_t v25 = (char *)(id)UIHostingController.init(rootView:)();
      [v24 setDelegate:v25];
      BOOL v26 = v34;
      unint64_t v38 = *(void *)&v34[v31];
      sub_100028654(&qword_100267C78);
      sub_100027F5C(&qword_100267C80, &qword_100267C78);
      sub_100114870();
      uint64_t v27 = v35;
      Publisher<>.removeDuplicates()();
      swift_allocObject();
      swift_unknownObjectWeakInit();
      sub_100027F5C((unint64_t *)&unk_100267C90, &qword_100267C68);
      uint64_t v28 = v37;
      uint64_t v29 = Publisher<>.sink(receiveValue:)();

      swift_release();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v28);
      *(void *)&v25[qword_100267788] = v29;
      swift_release();
      return (uint64_t)v25;
    }
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

void sub_10011088C(unint64_t *a1)
{
  unint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_100110980(v1);
  }
}

void sub_100110900(char *a1, uint64_t a2, void *a3)
{
  *(void *)&a1[qword_100267788] = 0;
  id v4 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100110978()
{
  return 1;
}

uint64_t sub_100110980(unint64_t a1)
{
  type metadata accessor for RCTrackState(0);
  if (a1 >= 3)
  {
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    sub_100114088();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    uint64_t v3 = swift_getKeyPath();
    __chkstk_darwin(v3);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    uint64_t v4 = swift_getKeyPath();
    __chkstk_darwin(v4);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    return swift_release();
  }
  return result;
}

void sub_100110BA0()
{
}

void sub_100110BD0()
{
}

uint64_t sub_100110C00()
{
  swift_release();
  sub_10002F48C(v0 + qword_100267780);

  return swift_release();
}

id sub_100110C50()
{
  return sub_100110C6C(0, (uint64_t (*)(void))type metadata accessor for _RCMultipleWaveformsViewController);
}

id sub_100110C6C(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return [super dealloc];
}

uint64_t sub_100110CA4(uint64_t a1)
{
  swift_release();
  sub_10002F48C(a1 + qword_100267780);

  return swift_release();
}

uint64_t sub_100110D00()
{
  return type metadata accessor for _RCMultipleWaveformsViewController(0);
}

uint64_t sub_100110D08()
{
  return type metadata accessor for _RCMultipleWaveformsViewController.RCMultipleWaveformsViewModel(0);
}

uint64_t type metadata accessor for _RCMultipleWaveformsViewController.RCMultipleWaveformsViewModel(uint64_t a1)
{
  return sub_100111A1C(a1, qword_100267810);
}

uint64_t sub_100110D30()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100110DF4(char *a1)
{
  uint64_t v2 = *(void *)&a1[qword_100267778];
  swift_getKeyPath();
  sub_100114088();
  uint64_t v3 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(unsigned __int8 *)(v2 + 33);

  return v4;
}

uint64_t sub_100110E8C(void *a1)
{
  swift_getKeyPath();
  sub_100114088();
  id v2 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

  return swift_release();
}

uint64_t sub_100110F50(char *a1)
{
  uint64_t v2 = *(void *)&a1[qword_100267778];
  swift_getKeyPath();
  sub_100114088();
  uint64_t v3 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(unsigned __int8 *)(v2 + 34);

  return v4;
}

uint64_t sub_100110FE8(void *a1)
{
  swift_getKeyPath();
  sub_100114088();
  id v2 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

  return swift_release();
}

uint64_t sub_1001110AC(char *a1)
{
  uint64_t v2 = *(void *)&a1[qword_100267778];
  swift_getKeyPath();
  sub_100114088();
  uint64_t v3 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(unsigned __int8 *)(v2 + 49);

  return v4;
}

void sub_100111144(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  sub_100111198(a3);
}

uint64_t sub_100111198(char a1)
{
  int v2 = a1 & 1;
  uint64_t v3 = *(void *)(v1 + qword_100267778);
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t result = swift_release();
  if (*(unsigned __int8 *)(v3 + 49) != v2)
  {
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    return swift_release();
  }
  return result;
}

id sub_1001112B0(void *a1, uint64_t a2, uint64_t a3)
{
  return [a1 setTrimModeEnabled:a3 == 8];
}

uint64_t sub_1001112C4(void *a1)
{
  swift_getKeyPath();
  sub_100114088();
  id v2 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

  return swift_release();
}

uint64_t sub_100111384(void *a1)
{
  swift_getKeyPath();
  sub_100114088();
  id v2 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

  return swift_release();
}

uint64_t *sub_100111444(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_100028654(&qword_100267AC8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    long long v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
  }
  return a1;
}

uint64_t sub_10011155C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100267AC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);

  return sub_10002F48C(v5);
}

uint64_t sub_1001115D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100028654(&qword_100267AC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  long long v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  return a1;
}

uint64_t sub_10011169C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100028654(&qword_100267AC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  sub_1000FC830((uint64_t *)(a1 + *(int *)(a3 + 20)), (uint64_t *)(a2 + *(int *)(a3 + 20)));
  return a1;
}

uint64_t sub_100111720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100028654(&qword_100267AC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  return a1;
}

uint64_t sub_1001117B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100028654(&qword_100267AC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_10002F48C(a1 + v7);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  return a1;
}

uint64_t sub_100111848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011185C);
}

uint64_t sub_10011185C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100028654(&qword_100267AC8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100111924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100111938);
}

uint64_t sub_100111938(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100028654(&qword_100267AC8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for RCMultipleWaveformsView(uint64_t a1)
{
  return sub_100111A1C(a1, (uint64_t *)&unk_100267B28);
}

uint64_t sub_100111A1C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100111A54()
{
  sub_100111AE8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100111AE8()
{
  if (!qword_100267B38)
  {
    type metadata accessor for _RCMultipleWaveformsViewController.RCMultipleWaveformsViewModel(255);
    unint64_t v0 = type metadata accessor for Bindable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100267B38);
    }
  }
}

uint64_t sub_100111B40()
{
  return swift_getOpaqueTypeConformance2();
}

id sub_100111B5C()
{
  return *v0;
}

uint64_t sub_100111B70()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t sub_100111BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100114BE8();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100111C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100114BE8();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100111C74()
{
}

void sub_100111C9C(void *a1, char a2)
{
  sub_100028654(&qword_100267AC8);
  Bindable.wrappedValue.getter();
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_release();
  if (!Strong
    || (id v5 = [Strong objectAtIndexedSubscript:1],
        Strong,
        !v5))
  {
    id v17 = [a1 waveformViewController];
    if (v17)
    {
      id v16 = v17;
      [v17 bringAuxWaveformViewControllerToFront:0];
LABEL_15:

      sub_100111F30(a1);
      return;
    }
    __break(1u);
    goto LABEL_17;
  }
  if ((a2 & 1) == 0)
  {
LABEL_8:
    id v13 = [a1 waveformViewController];
    if (v13)
    {
      uint64_t v14 = v13;
      Bindable.wrappedValue.getter();
      swift_getKeyPath();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v15 = *(void *)(v18 + 24);
      swift_release();
      if (v15 == 1) {
        id v16 = v5;
      }
      else {
        id v16 = 0;
      }
      [v14 bringAuxWaveformViewControllerToFront:v16];

      goto LABEL_15;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v6 = [a1 waveformViewController];
  if (!v6)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = v6;
  [v6 addAuxWaveformViewController:v5];

  id v8 = [v5 waveformViewController];
  if (!v8)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = v8;
  id v10 = [a1 waveformViewController];
  if (v10)
  {
    uint64_t v11 = v10;
    id v12 = [v10 zoomingDelegate];

    [v9 setZoomingDelegate:v12];
    swift_unknownObjectRelease();

    goto LABEL_8;
  }
LABEL_20:
  __break(1u);
}

void sub_100111F30(void *a1)
{
  sub_100028654(&qword_100267AC8);
  Bindable.wrappedValue.getter();
  swift_getKeyPath();
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void *)(v8 + 24);
  swift_release();
  Bindable.wrappedValue.getter();
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v2 = *(void *)(v8 + 40);
  unsigned __int8 v3 = *(unsigned char *)(v8 + 48);
  swift_release();
  Bindable.wrappedValue.getter();
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(unsigned __int8 *)(v8 + 49);
  swift_release();
  [a1 updateColorStatesSelected:v1 == 0 muted:(v3 ^ 1u) & (v2 == 0) trimMode:v4];
  Bindable.wrappedValue.getter();
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_release();
  if (Strong)
  {
    id v6 = [Strong objectAtIndexedSubscript:1];

    if (v6)
    {
      [v6 updateColorStatesSelected:v1 == 1 muted:(v3 ^ 1u) & (v2 == 1) trimMode:v4];
    }
  }
}

void sub_100112170(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Locale.autoupdatingCurrent.getter();
  uint64_t v6 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Locale.numberingSystem.getter();
  uint64_t v10 = Locale.NumberingSystem.identifier.getter();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v10 == 1635149156 && v12 == 0xE400000000000000)
  {
    uint64_t v14 = 6907950;
    goto LABEL_15;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    uint64_t v14 = 6907950;
LABEL_15:
    swift_bridgeObjectRelease();
    id v17 = (void *)0xE300000000000000;
    goto LABEL_16;
  }
  uint64_t v14 = 7495982;
  if (v10 == 1650553441 && v12 == 0xE400000000000000) {
    goto LABEL_15;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v16)
  {
    id v17 = (void *)0xE300000000000000;
  }
  else
  {
    uint64_t v14 = 0;
    id v17 = (void *)0xE000000000000000;
  }
LABEL_16:
  sub_100028654(&qword_100267AC8);
  Bindable.wrappedValue.getter();
  uint64_t v18 = v30;
  swift_getKeyPath();
  uint64_t v30 = v18;
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v19 = *(void *)(v18 + 40);
  char v20 = *(unsigned char *)(v18 + 48);
  swift_release();
  if ((v20 & 1) != 0 || v19 != a1)
  {
    if (!__OFADD__(a1, 1))
    {
      uint64_t v29 = a1 + 1;
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v31 = v26;
      uint64_t v24 = 0x6465646E756F722ELL;
      unint64_t v25 = 0xE800000000000000;
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(18);
    if (!__OFADD__(a1, 1))
    {
      uint64_t v29 = a1 + 1;
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      uint64_t v30 = v21;
      unint64_t v31 = v23;
      uint64_t v24 = 0x6465646E756F722ELL;
      unint64_t v25 = 0xEE006873616C732ELL;
LABEL_22:
      String.append(_:)(*(Swift::String *)&v24);
      v27._uint64_t countAndFlagsBits = v14;
      v27._object = v17;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

BOOL sub_100112514()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RCMultipleWaveformsView(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v16 - v6;
  sub_100028654(&qword_100267AC8);
  Bindable.wrappedValue.getter();
  uint64_t v8 = v17;
  swift_getKeyPath();
  uint64_t v17 = v8;
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v9 = *(unsigned char *)(v8 + 33);
  swift_release();
  sub_10011465C(v1, (uint64_t)v7, type metadata accessor for RCMultipleWaveformsView);
  if (v9)
  {
    BOOL v10 = 1;
  }
  else
  {
    Bindable.wrappedValue.getter();
    uint64_t v11 = v17;
    swift_getKeyPath();
    uint64_t v17 = v11;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    int v12 = *(unsigned __int8 *)(v11 + 49);
    swift_release();
    sub_10011465C((uint64_t)v7, (uint64_t)v4, type metadata accessor for RCMultipleWaveformsView);
    if (v12 == 1)
    {
      Bindable.wrappedValue.getter();
      uint64_t v13 = v17;
      swift_getKeyPath();
      uint64_t v17 = v13;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v14 = *(void *)(v13 + 16);
      swift_release();
      BOOL v10 = v14 == 1;
    }
    else
    {
      BOOL v10 = 0;
    }
    sub_100114744((uint64_t)v4, type metadata accessor for RCMultipleWaveformsView);
  }
  sub_100114744((uint64_t)v7, type metadata accessor for RCMultipleWaveformsView);
  return v10;
}

uint64_t sub_100112770@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100028654(&qword_100267B68);
  __chkstk_darwin(v4 - 8);
  v129 = (uint64_t *)((char *)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v128 = sub_100028654(&qword_100267B70);
  __chkstk_darwin(v128);
  uint64_t v132 = (uint64_t)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_100028654(&qword_100267B78);
  uint64_t v146 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v131 = (uint64_t)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v130 = (uint64_t)&v118 - v9;
  uint64_t v10 = type metadata accessor for RCMultipleWaveformsView(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10 - 8);
  v154 = (char *)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = sub_100028654(&qword_100267B80);
  v134 = *(void (***)(void, void *))(v135 - 8);
  __chkstk_darwin(v135);
  v133 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = sub_100028654(&qword_100267B88);
  uint64_t v136 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  v149 = (char *)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = sub_100028654(&qword_100267B90);
  uint64_t v139 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  v137 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_100028654(&qword_100267B98);
  uint64_t v142 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  v140 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = sub_100028654(&qword_100267BA0);
  uint64_t v144 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  v151 = (char *)&v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100028654(&qword_100267BA8);
  uint64_t v152 = *(void *)(v18 - 8);
  uint64_t v153 = v18;
  __chkstk_darwin(v18);
  v150 = (char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100028654(&qword_100267AC8);
  Bindable.wrappedValue.getter();
  id v21 = v159;
  swift_getKeyPath();
  id v159 = v21;
  unint64_t v22 = sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_release();
  uint64_t v155 = v20;
  Bindable.wrappedValue.getter();
  id v23 = v159;
  swift_getKeyPath();
  id v159 = v23;
  unint64_t v156 = v22;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_release();
  if (Strong
    && (id v25 = [Strong objectAtIndexedSubscript:0],
        Strong,
        v25))
  {
    uint64_t v122 = a1;
    v148 = type metadata accessor for RCMultipleWaveformsView;
    uint64_t v26 = (uint64_t)v154;
    sub_10011465C(v2, (uint64_t)v154, type metadata accessor for RCMultipleWaveformsView);
    uint64_t v27 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v28 = (v27 + 16) & ~v27;
    uint64_t v29 = v27 | 7;
    unint64_t v30 = ((v12 + v28 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unint64_t v31 = (v12 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v123 = v30;
    uint64_t v32 = swift_allocObject();
    uint64_t v124 = v28;
    sub_1001140EC(v26, v32 + v28);
    *(void *)(v32 + v31) = v25;
    unint64_t v33 = v31;
    unint64_t v125 = v31;
    id v159 = v25;
    v160 = sub_100114150;
    uint64_t v161 = v32;
    v162 = 0;
    uint64_t v163 = 0;
    id v164 = v25;
    id v34 = v25;
    Bindable.wrappedValue.getter();
    uint64_t v35 = v157;
    swift_getKeyPath();
    uint64_t v157 = v35;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v36 = *(void *)(v35 + 16);
    swift_release();
    uint64_t v157 = v36;
    uint64_t v37 = v2;
    uint64_t v38 = v2;
    uint64_t v39 = v26;
    sub_10011465C(v37, v26, v148);
    uint64_t v127 = v29;
    uint64_t v40 = swift_allocObject();
    sub_1001140EC(v26, v40 + v28);
    *(void *)(v40 + v33) = v34;
    id v126 = v34;
    uint64_t OpaqueTypeConformance2 = (void *)sub_100028654(&qword_100267BB8);
    uint64_t v41 = sub_100027F5C((unint64_t *)&unk_100267BC0, &qword_100267BB8);
    uint64_t v42 = v133;
    View.onChange<A>(of:initial:_:)();
    swift_release();

    sub_1000D8194((uint64_t)v160);
    sub_1000D8194((uint64_t)v162);

    uint64_t v119 = v38;
    Bindable.wrappedValue.getter();
    uint64_t v43 = v159;
    swift_getKeyPath();
    id v159 = v43;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v44 = v43[3];
    swift_release();
    uint64_t v157 = v44;
    uint64_t v45 = v148;
    sub_10011465C(v38, v26, v148);
    uint64_t v46 = swift_allocObject();
    uint64_t v47 = v124;
    sub_1001140EC(v39, v46 + v124);
    unint64_t v48 = v125;
    uint64_t v49 = v126;
    *(void *)(v46 + v125) = v126;
    id v121 = v49;
    id v159 = OpaqueTypeConformance2;
    v160 = (void (*)())&type metadata for Int;
    uint64_t v161 = v41;
    v162 = &protocol witness table for Int;
    id v126 = &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>;
    uint64_t OpaqueTypeConformance2 = (void *)swift_getOpaqueTypeConformance2();
    char v50 = (void *)v135;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    ((void (**)(char *, void *))v134)[1](v42, v50);
    uint64_t v51 = v119;
    Bindable.wrappedValue.getter();
    id v52 = v159;
    swift_getKeyPath();
    id v159 = v52;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v53 = *((void *)v52 + 5);
    LOBYTE(v46) = *((unsigned char *)v52 + 48);
    swift_release();
    uint64_t v157 = v53;
    char v158 = v46;
    uint64_t v54 = (uint64_t)v154;
    sub_10011465C(v51, (uint64_t)v154, v45);
    uint64_t v55 = swift_allocObject();
    sub_1001140EC(v54, v55 + v47);
    uint64_t v56 = v121;
    *(void *)(v55 + v48) = v121;
    v134 = v56;
    uint64_t v57 = (void (*)())sub_100028654(&qword_100266D58);
    id v159 = v50;
    v160 = (void (*)())&type metadata for Int;
    uint64_t v161 = (uint64_t)OpaqueTypeConformance2;
    v162 = &protocol witness table for Int;
    uint64_t v58 = swift_getOpaqueTypeConformance2();
    uint64_t v59 = (void *)sub_1000280AC();
    uint64_t v60 = v137;
    uint64_t v61 = (void *)v138;
    uint64_t v62 = v149;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    (*(void (**)(char *, void *))(v136 + 8))(v62, v61);
    Bindable.wrappedValue.getter();
    uint64_t v63 = v159;
    swift_getKeyPath();
    id v159 = v63;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LOBYTE(v62) = v63[49];
    swift_release();
    LOBYTE(v157) = (_BYTE)v62;
    uint64_t v64 = (uint64_t)v154;
    sub_10011465C(v51, (uint64_t)v154, v148);
    uint64_t v65 = swift_allocObject();
    sub_1001140EC(v64, v65 + v124);
    uint64_t v66 = v134;
    *(void *)(v65 + v125) = v134;
    v154 = v66;
    id v159 = v61;
    v160 = v57;
    uint64_t v161 = v58;
    v162 = v59;
    uint64_t v67 = swift_getOpaqueTypeConformance2();
    uint64_t v68 = v140;
    uint64_t v69 = (void *)v141;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    (*(void (**)(char *, void *))(v139 + 8))(v60, v69);
    Bindable.wrappedValue.getter();
    uint64_t v70 = v159;
    swift_getKeyPath();
    id v159 = v70;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    LOBYTE(v64) = v70[32];
    swift_release();
    LOBYTE(v157) = v64;
    uint64_t v71 = swift_allocObject();
    *(void *)(v71 + 16) = 0xD000000000000019;
    *(void *)(v71 + 24) = 0x80000001001ECEB0;
    id v159 = v69;
    v160 = (void (*)())&type metadata for Bool;
    uint64_t v161 = v67;
    v162 = &protocol witness table for Bool;
    swift_getOpaqueTypeConformance2();
    uint64_t v72 = v143;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v68, v72);
    uint64_t v73 = static Alignment.bottomTrailing.getter();
    uint64_t v75 = v74;
    uint64_t v76 = v153;
    uint64_t v77 = (uint64_t)&v150[*(int *)(v153 + 36)];
    BOOL v78 = sub_100112514();
    uint64_t v79 = 1;
    uint64_t v80 = v147;
    if (!v78)
    {
      uint64_t v81 = static VerticalAlignment.center.getter();
      uint64_t v82 = (uint64_t)v129;
      uint64_t *v129 = v81;
      *(void *)(v82 + 8) = 0;
      *(unsigned char *)(v82 + 16) = 1;
      uint64_t v83 = sub_100028654(&qword_100267BD8);
      sub_1001139C8(v51, 0xD000000000000019, 0x80000001001ECEB0, (void *)(v82 + *(int *)(v83 + 44)));
      char v84 = static Edge.Set.bottom.getter();
      id v85 = [self sharedStyleProvider];
      [v85 annotationViewHeight];

      EdgeInsets.init(_all:)();
      uint64_t v87 = v86;
      uint64_t v89 = v88;
      uint64_t v91 = v90;
      uint64_t v93 = v92;
      uint64_t v94 = v132;
      sub_10002869C(v82, v132, &qword_100267B68);
      uint64_t v95 = v94 + *(int *)(v128 + 36);
      *(unsigned char *)uint64_t v95 = v84;
      *(void *)(v95 + 8) = v87;
      *(void *)(v95 + 16) = v89;
      *(void *)(v95 + 24) = v91;
      *(void *)(v95 + 32) = v93;
      *(unsigned char *)(v95 + 40) = 0;
      sub_1000285F8(v82, &qword_100267B68);
      unsigned __int8 v96 = static Edge.Set.trailing.getter();
      unsigned __int8 v97 = static Edge.Set.bottom.getter();
      char v98 = Edge.Set.init(rawValue:)();
      Edge.Set.init(rawValue:)();
      if (Edge.Set.init(rawValue:)() != v96) {
        char v98 = Edge.Set.init(rawValue:)();
      }
      Edge.Set.init(rawValue:)();
      if (Edge.Set.init(rawValue:)() != v97) {
        char v98 = Edge.Set.init(rawValue:)();
      }
      EdgeInsets.init(_all:)();
      uint64_t v100 = v99;
      uint64_t v102 = v101;
      uint64_t v104 = v103;
      uint64_t v106 = v105;
      uint64_t v107 = v131;
      sub_10002869C(v94, v131, &qword_100267B70);
      uint64_t v108 = v107 + *(int *)(v80 + 36);
      *(unsigned char *)uint64_t v108 = v98;
      *(void *)(v108 + 8) = v100;
      *(void *)(v108 + 16) = v102;
      *(void *)(v108 + 24) = v104;
      *(void *)(v108 + 32) = v106;
      *(unsigned char *)(v108 + 40) = 0;
      sub_1000285F8(v94, &qword_100267B70);
      uint64_t v109 = v130;
      sub_1000209F8(v107, v130, &qword_100267B78);
      sub_1000209F8(v109, v77, &qword_100267B78);
      uint64_t v79 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v146 + 56))(v77, v79, 1, v80);
    uint64_t v110 = (uint64_t *)(v77 + *(int *)(sub_100028654(&qword_100267BE0) + 36));
    *uint64_t v110 = v73;
    v110[1] = v75;
    uint64_t v111 = v144;
    long long v113 = v150;
    uint64_t v112 = v151;
    uint64_t v114 = v145;
    (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v150, v151, v145);

    (*(void (**)(char *, uint64_t))(v111 + 8))(v112, v114);
    uint64_t v115 = (uint64_t)v113;
    a1 = v122;
    sub_1000209F8(v115, v122, &qword_100267BA8);
    uint64_t v116 = 0;
  }
  else
  {
    uint64_t v116 = 1;
    uint64_t v76 = v153;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v152 + 56))(a1, v116, 1, v76);
}

uint64_t sub_1001138A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Tips.InvalidationReason();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[0] = a1;
  v10[1] = a2;
  (*(void (**)(char *, void, uint64_t, __n128))(v5 + 104))(v8, enum case for Tips.InvalidationReason.actionPerformed(_:), v4, v6);
  sub_1000E04BC();
  swift_bridgeObjectRetain();
  Tip.invalidate(reason:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001139C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v59 = a3;
  uint64_t v58 = a2;
  uint64_t v53 = a4;
  uint64_t v60 = type metadata accessor for RCSegmentedSwitch();
  __chkstk_darwin(v60);
  __n128 v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_100028654(&qword_100267BE8);
  __chkstk_darwin(v61);
  uint64_t v64 = (uint64_t)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100028654(&qword_100267BF0);
  __chkstk_darwin(v63);
  uint64_t v66 = (uint64_t)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v62 = (uint64_t)&v52 - v10;
  __chkstk_darwin(v11);
  uint64_t v65 = (uint64_t)&v52 - v12;
  sub_100028654(&qword_100267AC8);
  Bindable.wrappedValue.getter();
  uint64_t v13 = v73;
  swift_getKeyPath();
  uint64_t v73 = v13;
  sub_100114088();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v14 = *(unsigned char *)(v13 + 34);
  swift_release();
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  if ((v14 & 1) == 0)
  {
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v17 = v73;
    uint64_t v18 = v74;
    uint64_t v19 = v75;
    uint64_t v20 = v76;
    uint64_t v67 = v78;
    uint64_t v68 = v77;
    uint64_t v21 = swift_bridgeObjectRetain();
    uint64_t v15 = v58;
    uint64_t v16 = v21;
  }
  uint64_t v54 = v19;
  uint64_t v55 = v20;
  uint64_t v56 = v18;
  uint64_t v57 = v17;
  uint64_t v58 = v15;
  uint64_t v59 = v16;
  uint64_t v22 = type metadata accessor for RCMultipleWaveformsView(0);
  sub_10002F970(a1 + *(int *)(v22 + 20), (uint64_t)v72);
  sub_100028654(&qword_100267BF8);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1001F0FB0;
  sub_100112170(0);
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + 40) = v25;
  *(unsigned char *)(v23 + 48) = 1;
  sub_100112170(1);
  *(void *)(v23 + 56) = v26;
  *(void *)(v23 + 64) = v27;
  *(unsigned char *)(v23 + 72) = 1;
  Bindable.wrappedValue.getter();
  uint64_t v28 = v70;
  swift_getKeyPath();
  uint64_t v70 = v28;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v29 = *(unsigned char *)(v28 + 32);
  swift_release();
  Bindable.wrappedValue.getter();
  uint64_t v30 = v70;
  swift_getKeyPath();
  uint64_t v70 = v30;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v31 = *(void *)(v30 + 24);
  swift_release();
  *(void *)&v6[*(int *)(v60 + 36)] = swift_getKeyPath();
  sub_100028654(&qword_100267C00);
  swift_storeEnumTagMultiPayload();
  sub_10001C878(v72, (uint64_t)v6);
  *((void *)v6 + 5) = v23;
  v6[48] = v29;
  *((void *)v6 + 7) = v31;
  unint64_t v69 = sub_100114560((uint64_t)_swiftEmptyArrayStorage);
  sub_100028654(&qword_100267C08);
  State.init(wrappedValue:)();
  uint64_t v32 = v71;
  *((void *)v6 + 8) = v70;
  *((void *)v6 + 9) = v32;
  Bindable.wrappedValue.getter();
  uint64_t v33 = *(void *)&v72[0];
  swift_getKeyPath();
  *(void *)&v72[0] = v33;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  int v34 = *(unsigned __int8 *)(v33 + 34);
  swift_release();
  if (v34) {
    double v35 = 0.5;
  }
  else {
    double v35 = 1.0;
  }
  uint64_t v36 = v64;
  sub_10011465C((uint64_t)v6, v64, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
  *(double *)(v36 + *(int *)(v61 + 36)) = v35;
  sub_100114744((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for RCSegmentedSwitch);
  Bindable.wrappedValue.getter();
  uint64_t v37 = *(void *)&v72[0];
  swift_getKeyPath();
  *(void *)&v72[0] = v37;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  char v38 = *(unsigned char *)(v37 + 34);
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v40 = swift_allocObject();
  *(unsigned char *)(v40 + 16) = v38;
  uint64_t v41 = v62;
  sub_10002869C(v36, v62, &qword_100267BE8);
  uint64_t v42 = (uint64_t *)(v41 + *(int *)(v63 + 36));
  uint64_t *v42 = KeyPath;
  v42[1] = (uint64_t)sub_100031BF4;
  v42[2] = v40;
  sub_1000285F8(v36, &qword_100267BE8);
  uint64_t v43 = v65;
  sub_1000209F8(v41, v65, &qword_100267BF0);
  uint64_t v44 = v66;
  sub_10002869C(v43, v66, &qword_100267BF0);
  uint64_t v45 = v53;
  uint64_t v46 = v59;
  void *v53 = v58;
  v45[1] = v46;
  uint64_t v47 = v56;
  v45[2] = v57;
  v45[3] = v47;
  uint64_t v48 = v55;
  v45[4] = v54;
  uint64_t v45[5] = v48;
  uint64_t v49 = v67;
  v45[6] = v68;
  v45[7] = v49;
  uint64_t v50 = sub_100028654((uint64_t *)&unk_100267C10);
  sub_10002869C(v44, (uint64_t)v45 + *(int *)(v50 + 48), &qword_100267BF0);
  swift_bridgeObjectRetain();
  sub_1000285F8(v43, &qword_100267BF0);
  sub_1000285F8(v44, &qword_100267BF0);
  return swift_bridgeObjectRelease();
}

unint64_t sub_100114088()
{
  unint64_t result = qword_100267BB0;
  if (!qword_100267BB0)
  {
    type metadata accessor for _RCMultipleWaveformsViewController.RCMultipleWaveformsViewModel(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267BB0);
  }
  return result;
}

uint64_t sub_1001140EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RCMultipleWaveformsView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100114150()
{
}

uint64_t sub_10011415C()
{
  uint64_t v1 = (int *)(type metadata accessor for RCMultipleWaveformsView(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_100028654(&qword_100267AC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  sub_10002F48C(v6 + v1[7]);

  return _swift_deallocObject(v0, v5 + 8, v4);
}

void sub_100114264(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for RCMultipleWaveformsView(0) - 8);
  sub_100111C9C(*(void **)(v1+ ((*(void *)(v3 + 64)+ ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)), a1);
}

void sub_100114304()
{
}

void sub_100114328()
{
  uint64_t v1 = *(void *)(type metadata accessor for RCMultipleWaveformsView(0) - 8);
  sub_100111F30(*(void **)(v0
                         + ((*(void *)(v1 + 64)
                           + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
                           + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1001143BC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001143F4()
{
  return sub_1001138A0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100114404()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100114428(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  __n128 v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues.colorScheme.setter();
}

uint64_t sub_1001144F4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100114524()
{
  return EnvironmentValues.isEnabled.setter();
}

unsigned char *sub_10011454C(unsigned char *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

unint64_t sub_100114560(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100028654(&qword_100264DA8);
    __n128 v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (void *)(a1 + 64); ; i += 5)
    {
      uint64_t v5 = *(i - 4);
      uint64_t v6 = *(i - 3);
      long long v14 = *((_OWORD *)i - 1);
      uint64_t v7 = *i;
      unint64_t result = sub_100168238(v5);
      if (v9) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      uint64_t v10 = v3[7] + 32 * result;
      *(void *)uint64_t v10 = v6;
      *(_OWORD *)(v10 + 8) = v14;
      *(void *)(v10 + 24) = v7;
      uint64_t v11 = v3[2];
      BOOL v12 = __OFADD__(v11, 1);
      uint64_t v13 = v11 + 1;
      if (v12) {
        goto LABEL_10;
      }
      v3[2] = v13;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_10011465C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001146C4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1001146F4()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_10011471C()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_10011472C()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 34) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_100114744(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1001147A4()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 33) = *(unsigned char *)(v0 + 24);
}

void sub_1001147B4()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 32) = *(unsigned char *)(v0 + 24);
}

void sub_1001147C4()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 49) = *(unsigned char *)(v0 + 24);
}

void sub_1001147D4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 32);
  *(void *)(v1 + 40) = *(void *)(v0 + 24);
  *(unsigned char *)(v1 + 48) = v2;
}

void sub_1001147E8()
{
  *(void *)(*(void *)(v0 + 16) + 24) = *(void *)(v0 + 24);
}

uint64_t sub_1001147F4()
{
  return swift_unknownObjectWeakAssign();
}

void sub_100114814()
{
  *(void *)(*(void *)(v0 + 16) + 16) = *(void *)(v0 + 24);
}

_OWORD *sub_100114820(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_100114830()
{
  unint64_t result = qword_100267C70;
  if (!qword_100267C70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100267C70);
  }
  return result;
}

unint64_t sub_100114870()
{
  unint64_t result = qword_100267C88;
  if (!qword_100267C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267C88);
  }
  return result;
}

uint64_t sub_1001148C4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001148FC(unint64_t *a1)
{
}

ValueMetadata *type metadata accessor for RCMultipleWaveformsView.WaveformViewControllerRepresentable()
{
  return &type metadata for RCMultipleWaveformsView.WaveformViewControllerRepresentable;
}

unint64_t sub_100114918()
{
  unint64_t result = qword_100267CF0;
  if (!qword_100267CF0)
  {
    sub_100027F14(&qword_100267CF8);
    sub_10011498C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267CF0);
  }
  return result;
}

unint64_t sub_10011498C()
{
  unint64_t result = qword_100267D00;
  if (!qword_100267D00)
  {
    sub_100027F14(&qword_100267BA8);
    sub_100027F14(&qword_100267B98);
    sub_100027F14(&qword_100267B90);
    sub_100027F14(&qword_100267B88);
    sub_100027F14(&qword_100266D58);
    sub_100027F14(&qword_100267B80);
    sub_100027F14(&qword_100267BB8);
    sub_100027F5C((unint64_t *)&unk_100267BC0, &qword_100267BB8);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1000280AC();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_100027F5C(&qword_100267D08, &qword_100267BE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267D00);
  }
  return result;
}

void *sub_100114B84()
{
  return &protocol witness table for Never;
}

unint64_t sub_100114B94()
{
  unint64_t result = qword_100267D10;
  if (!qword_100267D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267D10);
  }
  return result;
}

unint64_t sub_100114BE8()
{
  unint64_t result = qword_100267D18;
  if (!qword_100267D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267D18);
  }
  return result;
}

uint64_t sub_100114C3C()
{
  return sub_1001147F4();
}

void sub_100114C58()
{
}

void sub_100114C70()
{
}

void sub_100114C88()
{
}

void sub_100114CA0()
{
}

void sub_100114CB8()
{
}

void sub_100114CD0()
{
}

void sub_100114CE8()
{
}

ValueMetadata *type metadata accessor for ImportRecordingsError()
{
  return &type metadata for ImportRecordingsError;
}

ValueMetadata *type metadata accessor for CombineRecordingsError()
{
  return &type metadata for CombineRecordingsError;
}

ValueMetadata *type metadata accessor for StopRecordingError()
{
  return &type metadata for StopRecordingError;
}

ValueMetadata *type metadata accessor for SearchRecordingsError()
{
  return &type metadata for SearchRecordingsError;
}

ValueMetadata *type metadata accessor for CreateRecordingError()
{
  return &type metadata for CreateRecordingError;
}

unsigned char *_s10VoiceMemos21ImportRecordingsErrorOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100114DF8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeleteRecordingError()
{
  return &type metadata for DeleteRecordingError;
}

unsigned char *storeEnumTagSinglePayload for PlayRecordingError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100114EFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayRecordingError()
{
  return &type metadata for PlayRecordingError;
}

ValueMetadata *type metadata accessor for SelectRecordingError()
{
  return &type metadata for SelectRecordingError;
}

ValueMetadata *type metadata accessor for ChangePlaybackSettingsError()
{
  return &type metadata for ChangePlaybackSettingsError;
}

ValueMetadata *type metadata accessor for DeleteFolderError()
{
  return &type metadata for DeleteFolderError;
}

ValueMetadata *type metadata accessor for OpenFolderError()
{
  return &type metadata for OpenFolderError;
}

ValueMetadata *type metadata accessor for RCAppIntentsGenericError()
{
  return &type metadata for RCAppIntentsGenericError;
}

unsigned char *_s10VoiceMemos22CombineRecordingsErrorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100115050);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SeparateRecordingError()
{
  return &type metadata for SeparateRecordingError;
}

uint64_t sub_100115088()
{
  return sub_1001153C8();
}

uint64_t sub_1001150C0()
{
  return sub_1001153C8();
}

uint64_t sub_1001150F8()
{
  return sub_1001153C8();
}

unint64_t sub_100115134()
{
  unint64_t result = qword_100267D20;
  if (!qword_100267D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267D20);
  }
  return result;
}

unint64_t sub_10011518C()
{
  unint64_t result = qword_100267D28;
  if (!qword_100267D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267D28);
  }
  return result;
}

uint64_t sub_1001151E8()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t sub_100115218()
{
  return sub_1001153C8();
}

uint64_t sub_100115250()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t sub_100115280()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t sub_1001152B0(uint64_t a1, uint64_t a2)
{
  return sub_10011541C(a1, a2, 50, 0xD000000000000032, (void *)0x80000001001ED250);
}

uint64_t sub_1001152D0()
{
  return sub_1001153C8();
}

uint64_t sub_10011530C()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t sub_100115388()
{
  return sub_10011530C();
}

uint64_t sub_100115390()
{
  return sub_1001153C8();
}

uint64_t sub_1001153C8()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t sub_1001153FC(uint64_t a1, uint64_t a2)
{
  return sub_10011541C(a1, a2, 45, 0xD00000000000002DLL, (void *)0x80000001001ED370);
}

uint64_t sub_10011541C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *v5;
  char v9 = (void *)v5[1];
  uint64_t v10 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v11._uint64_t countAndFlagsBits = a4;
  v11._object = a5;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v11);
  v12._uint64_t countAndFlagsBits = v8;
  v12._object = v9;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v12);
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v13);
  return LocalizedStringResource.init(stringInterpolation:)();
}

unint64_t sub_1001154F0()
{
  unint64_t result = qword_100267D30;
  if (!qword_100267D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267D30);
  }
  return result;
}

unint64_t sub_100115548()
{
  unint64_t result = qword_100267D38;
  if (!qword_100267D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267D38);
  }
  return result;
}

unint64_t sub_1001155A0()
{
  unint64_t result = qword_100267D40;
  if (!qword_100267D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267D40);
  }
  return result;
}

unint64_t sub_1001155F8()
{
  unint64_t result = qword_100267D48;
  if (!qword_100267D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267D48);
  }
  return result;
}

unint64_t sub_100115650()
{
  unint64_t result = qword_100267D50;
  if (!qword_100267D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267D50);
  }
  return result;
}

uint64_t sub_1001156A4()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

unint64_t sub_1001156D8()
{
  unint64_t result = qword_100267D58;
  if (!qword_100267D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267D58);
  }
  return result;
}

unint64_t sub_100115730()
{
  unint64_t result = qword_100267D60;
  if (!qword_100267D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267D60);
  }
  return result;
}

unint64_t sub_100115788()
{
  unint64_t result = qword_100267D68;
  if (!qword_100267D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267D68);
  }
  return result;
}

unint64_t sub_1001157E0()
{
  unint64_t result = qword_100267D70;
  if (!qword_100267D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100267D70);
  }
  return result;
}

void sub_100115838(void *a1@<X0>, char *a2@<X8>)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a1 recordingWithUniqueID:v4];

  if (!v5)
  {
    sub_1000F3BB0();
    swift_allocError();
    *uint64_t v16 = 0;
    swift_willThrow();
    return;
  }
  id v6 = [v5 url];
  uint64_t v7 = sub_100028654(&qword_100269FB0);
  __chkstk_darwin(v7 - 8);
  char v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v6)
  {
    uint64_t v17 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v9, 1, 1, v17);
    goto LABEL_8;
  }
  uint64_t v20 = a2;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v21 = &v19;
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  long long v14 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v14(v9, v13, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
LABEL_8:
    sub_1000285F8((uint64_t)v9, &qword_100269FB0);
    goto LABEL_9;
  }
  uint64_t v15 = v20;
  v14(v20, v9, v10);
  if (([v5 localAssetIsCurrent] & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
LABEL_9:
    sub_1000F3BB0();
    swift_allocError();
    *uint64_t v18 = 1;
    swift_willThrow();
  }
}

id sub_100115B40(uint64_t a1)
{
  id v2 = [self sharedService];
  id v6 = 0;
  LODWORD(a1) = [v2 endAccessSessionWithToken:a1 error:&v6];

  id v3 = v6;
  if (a1)
  {
    return v3;
  }
  else
  {
    id v5 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (id)swift_errorRelease();
  }
}

uint64_t sub_100115C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = type metadata accessor for TranscriptionCodingContainer();
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_100115D70, 0, 0);
}

uint64_t sub_100115D70()
{
  uint64_t v1 = v0[3];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v2 = type metadata accessor for AttributedString();
  v0[12] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = v3;
  v0[13] = v3;
  v0[14] = *(void *)(v3 + 64);
  uint64_t v5 = swift_task_alloc();
  id v6 = *(void (**)(void))(v4 + 16);
  v0[15] = v6;
  v0[16] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v5, v1, v2);
  swift_task_alloc();
  v6();
  swift_getKeyPath();
  sub_1000E9B20();
  CodableConfiguration<>.init(wrappedValue:from:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100107174(&qword_100267410);
  v0[17] = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v0[18] = v7;
  sub_1000E9BC8(v0[11]);
  swift_release();
  uint64_t v8 = type metadata accessor for URL();
  v0[19] = v8;
  v0[20] = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  v0[21] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[22] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1001160C4;
  uint64_t v11 = v0[5];
  uint64_t v12 = v0[6];
  uint64_t v13 = v0[4];
  return sub_1001168F8(v9, v13, v11, v12);
}

uint64_t sub_1001160C4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10011683C;
  }
  else
  {
    *(void *)(v2 + 192) = self;
    uint64_t v3 = sub_10011621C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10011621C()
{
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 152);
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  id v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 16) = 0;
  unsigned int v8 = [v1 rc_updateFile:v6 withTranscriptionData:isa error:v0 + 16];

  id v9 = *(id *)(v0 + 16);
  if (v8)
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 120);
    uint64_t v11 = *(void *)(v0 + 104);
    uint64_t v12 = *(void *)(v0 + 96);
    uint64_t v13 = *(void **)(v0 + 48);
    uint64_t v28 = *(void *)(v0 + 56);
    uint64_t v29 = *(void *)(v0 + 72);
    uint64_t v14 = *(void *)(v0 + 40);
    uint64_t v26 = *(void *)(v0 + 32);
    uint64_t v27 = *(void *)(v0 + 64);
    uint64_t v15 = *(void *)(v0 + 24);
    uint64_t v16 = swift_task_alloc();
    v10(v16, v15, v12);
    unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v18 = (char *)swift_allocObject();
    *(void *)(v0 + 200) = v18;
    *((void *)v18 + 2) = v13;
    *((void *)v18 + 3) = v26;
    *((void *)v18 + 4) = v14;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(&v18[v17], v16, v12);
    swift_task_dealloc();
    id v19 = v13;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 208) = [v19 context];
    (*(void (**)(uint64_t, void, uint64_t))(v27 + 104))(v29, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v28);
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_10011652C;
    return NSManagedObjectContext.perform<A>(schedule:_:)();
  }
  else
  {
    uint64_t v21 = v9;
    uint64_t v23 = *(void *)(v0 + 136);
    unint64_t v22 = *(void *)(v0 + 144);
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_1000FB890(v23, v22);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
}

uint64_t sub_10011652C()
{
  uint64_t v2 = (void *)*v1;
  v2[28] = v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)v2[26];
  (*(void (**)(void, void))(v2[8] + 8))(v2[9], v2[7]);

  if (v0)
  {
    uint64_t v4 = sub_100116784;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_1001166D4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001166D4()
{
  sub_1000FB890(v0[17], v0[18]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100116784()
{
  sub_1000FB890(v0[17], v0[18]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10011683C()
{
  sub_1000FB890(v0[17], v0[18]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001168F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  return _swift_task_switch(sub_1001169BC, 0, 0);
}

uint64_t sub_1001169BC()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v4 = (void *)v0[5];
  uint64_t v3 = v0[6];
  uint64_t v6 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v7 = (void *)swift_allocObject();
  v0[9] = v7;
  v7[2] = v4;
  v7[3] = v6;
  void v7[4] = v5;
  id v8 = v4;
  swift_bridgeObjectRetain();
  v0[10] = [v8 context];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
  id v9 = (void *)swift_task_alloc();
  v0[11] = v9;
  uint64_t v10 = type metadata accessor for URL();
  *id v9 = v0;
  v9[1] = sub_100116B1C;
  uint64_t v11 = v0[8];
  uint64_t v12 = v0[2];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v12, v11, sub_100118578, v7, v10);
}

uint64_t sub_100116B1C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *(void *)(*v1 + 48);
  uint64_t v6 = *v1;
  *(void *)(v2 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v7 = *(void **)(v2 + 80);
  if (v0)
  {

    return _swift_task_switch(sub_100116D00, 0, 0);
  }
  else
  {

    swift_release();
    swift_task_dealloc();
    id v8 = *(uint64_t (**)(void))(v6 + 8);
    return v8();
  }
}

uint64_t sub_100116D00()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100116D6C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [a1 recordingWithUniqueID:v6];

  if (v7)
  {
    [v7 updateAudioFutureWithLocalAsset];
    uint64_t v8 = sub_100028654(&qword_100266620);
    __chkstk_darwin(v8 - 8);
    uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v11 = type metadata accessor for AttributedString();
    uint64_t v12 = *(void *)(v11 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a4, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    sub_100118090(v7, (uint64_t)v10);
    sub_1000285F8((uint64_t)v10, &qword_100266620);
    [a1 saveIfNecessary];
  }
  else
  {
    sub_1000F3BB0();
    swift_allocError();
    unsigned char *v13 = 0;
    swift_willThrow();
  }
}

uint64_t sub_100116F2C()
{
  uint64_t v1 = type metadata accessor for AttributedString();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_100117000()
{
  uint64_t v1 = *(void *)(type metadata accessor for AttributedString() - 8);
  sub_100116D6C(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_100117074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  uint64_t v9 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v4[6] = v9;
  v4[7] = *(void *)(v9 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v10 = (void *)swift_task_alloc();
  v4[9] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_100117190;
  return sub_100117758(a1, a2, a3, a4);
}

uint64_t sub_100117190()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_1001172DC, 0, 0);
  }
}

uint64_t sub_1001172DC()
{
  uint64_t v1 = v0[7];
  uint64_t v15 = v0[8];
  uint64_t v3 = (void *)v0[5];
  uint64_t v2 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v6 = v0[2];
  uint64_t v7 = *(void *)(sub_100028654(&qword_100266620) - 8);
  uint64_t v8 = swift_task_alloc();
  sub_100118488(v6, v8);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (void *)swift_allocObject();
  v0[10] = v10;
  void v10[2] = v3;
  void v10[3] = v5;
  v10[4] = v4;
  sub_1001186C8(v8, (uint64_t)v10 + v9);
  swift_task_dealloc();
  id v11 = v3;
  swift_bridgeObjectRetain();
  v0[11] = [v11 context];
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v15, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v2);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[12] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1001174CC;
  uint64_t v13 = v0[8];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v12, v13, sub_100118730, v10, (char *)&type metadata for () + 8);
}

uint64_t sub_1001174CC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *(void *)(*v1 + 48);
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);

  if (v0)
  {
    uint64_t v6 = sub_1001176D8;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_100117674;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100117674()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001176D8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  sub_1000285F8(v1, &qword_100266620);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100117758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v4[2] = a1;
  v4[3] = type metadata accessor for TranscriptionCodingContainer();
  v4[4] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URL();
  v4[5] = v8;
  v4[6] = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  v4[7] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[8] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_1001178A0;
  return sub_1001168F8(v9, a2, a3, a4);
}

uint64_t sub_1001178A0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100117BFC;
  }
  else
  {
    *(void *)(v2 + 80) = self;
    uint64_t v3 = sub_1001179C4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001179C4@<X0>(NSURL *a1@<X8>)
{
  uint64_t v2 = (void *)v1[10];
  uint64_t v4 = v1[6];
  uint64_t v3 = v1[7];
  uint64_t v5 = v1[5];
  URL._bridgeToObjectiveC()(a1);
  uint64_t v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  id v8 = [v2 rc_transcriptionDataForURL:v7];

  if (v8)
  {
    uint64_t v9 = v1[9];
    uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_100107174(&qword_100267408);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    if (v9)
    {
      sub_1000FB890(v10, v12);
      swift_task_dealloc();
      uint64_t v13 = (uint64_t (*)(void))v1[1];
      goto LABEL_7;
    }
    uint64_t v16 = v1[4];
    uint64_t v17 = v1[2];
    sub_100028654(&qword_100266110);
    CodableConfiguration.wrappedValue.getter();
    sub_1000E9BC8(v16);
    uint64_t v18 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 0, 1, v18);
    sub_1000FB890(v10, v12);
  }
  else
  {
    uint64_t v14 = v1[2];
    uint64_t v15 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  }
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v1[1];
LABEL_7:
  return v13();
}

uint64_t sub_100117BFC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100117C68(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [a1 recordingWithUniqueID:v6];

  if (v7)
  {
    if (sub_100118090(v7, a4)) {
      [a1 saveIfNecessary];
    }
  }
  else
  {
    sub_1000F3BB0();
    swift_allocError();
    *id v8 = 0;
    swift_willThrow();
  }
}

void sub_100117D30(void *a1@<X0>, char *a2@<X8>)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a1 recordingWithUniqueID:v4];

  if (!v5)
  {
    sub_1000F3BB0();
    swift_allocError();
    *id v19 = 0;
    swift_willThrow();
    return;
  }
  id v6 = [v5 url];
  uint64_t v7 = sub_100028654(&qword_100269FB0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v6)
  {
    uint64_t v20 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v9, 1, 1, v20);
    goto LABEL_8;
  }
  uint64_t v23 = a2;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v24 = &v22;
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v14(v9, v13, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
LABEL_8:
    sub_1000285F8((uint64_t)v9, &qword_100269FB0);
    goto LABEL_9;
  }
  uint64_t v15 = v23;
  v14(v23, v9, v10);
  id v16 = [self defaultManager];
  URL.path.getter();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = [v16 fileExistsAtPath:v17];

  if ((v18 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
LABEL_9:
    sub_1000F3BB0();
    swift_allocError();
    *uint64_t v21 = 1;
    swift_willThrow();
  }
}

uint64_t sub_100118090(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a2, 1, v4);
  uint64_t v8 = sub_100028654(&qword_100266620);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100118488(a2, (uint64_t)v10);
  if (v6((uint64_t)v10, 1, v4) == 1)
  {
    sub_1000285F8((uint64_t)v10, &qword_100266620);
    char v11 = 0;
  }
  else
  {
    uint64_t v12 = type metadata accessor for AttributedString.CharacterView();
    uint64_t v26 = v24;
    uint64_t v25 = *(void *)(v12 - 8);
    __chkstk_darwin(v12);
    uint64_t v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    AttributedString.characters.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    uint64_t v15 = type metadata accessor for AttributedString.Index();
    v24[1] = v24;
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = v16;
    int v28 = v7;
    uint64_t v18 = *(void *)(v16 + 64);
    __chkstk_darwin(v15);
    unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
    sub_1001184F0(&qword_100268DC0, (void (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView);
    uint64_t v27 = v24;
    uint64_t v20 = dispatch thunk of Collection.startIndex.getter();
    v24[0] = v24;
    __chkstk_darwin(v20);
    dispatch thunk of Collection.endIndex.getter();
    sub_1001184F0(&qword_100268DA0, (void (*)(uint64_t))&type metadata accessor for AttributedString.Index);
    char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v17 + 8);
    int v7 = v28;
    v22((char *)v24 - v19, v15);
    v22((char *)v24 - v19, v15);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v12);
    char v11 = v21 ^ 1;
  }
  if ((((v7 != 1) ^ [a1 hasBeenTranscribed]) & 1) == 0
    && (v11 & 1) == [a1 transcriptionContentExists])
  {
    return 0;
  }
  [a1 setHasBeenTranscribed:v7 != 1];
  [a1 setTranscriptionContentExists:v11 & 1];
  return 1;
}

uint64_t sub_100118488(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100266620);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001184F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100118538()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100118578(char *a1@<X8>)
{
  sub_100117D30(*(void **)(v1 + 16), a1);
}

uint64_t sub_100118598()
{
  uint64_t v1 = *(void *)(sub_100028654(&qword_100266620) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);

  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1001186C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100266620);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100118730()
{
  uint64_t v1 = *(void *)(sub_100028654(&qword_100266620) - 8);
  sub_100117C68(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

ValueMetadata *type metadata accessor for TranscriptionStorageService()
{
  return &type metadata for TranscriptionStorageService;
}

uint64_t sub_1001187B8()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_100267D98 = result;
  unk_100267DA0 = v1;
  return result;
}

uint64_t sub_1001187E8(unsigned char *a1)
{
  if (*a1 == 1)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    *(unsigned char *)(result + 24) = 1;
    sub_100034CB8();
  }
  else
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    sub_100118B80();
  }
  return swift_release();
}

uint64_t sub_10011887C()
{
  if ((*(unsigned char *)(v0 + 24) & 1) == 0) {
    sub_100118B80();
  }

  swift_release();

  return swift_deallocClassInstance();
}

void sub_1001188C8(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10002272C(v1, (uint64_t)qword_100275340);
    os_log_type_t v2 = static os_log_type_t.error.getter();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v3 = v2;
    log = Logger.logObject.getter();
    if (os_log_type_enabled(log, v2))
    {
      uint64_t v4 = swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136315394;
      sub_10002F3B8(0xD000000000000023, 0x80000001001ED500, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v4 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v5 = Error.localizedDescription.getter();
      sub_10002F3B8(v5, v6, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, v3, "%s Error acquiring assertion: %s", (uint8_t *)v4, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_100118B14(uint64_t a1, void *a2)
{
  os_log_type_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void sub_100118B80()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = qword_100264530;
    id v4 = v1;
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10002272C(v5, (uint64_t)qword_100275340);
    unint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      sub_10002F3B8(0xD00000000000001ELL, 0x80000001001ED4C0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s Invalidating secure app assertion", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    [v4 invalidate];
    uint64_t v9 = *(void **)(v2 + 16);
    *(void *)(v2 + 16) = 0;
  }
}

uint64_t sub_100118D30()
{
  uint64_t result = (uint64_t)[self sharedAppDelegate];
  if (result)
  {
    uint64_t v1 = (void *)result;
    id v2 = [(id)result dynamicIslandSceneDelegate];

    if (v2
      && (id v3 = [v2 platterViewController], v2, v3))
    {
      id v4 = [v3 traitCollection];
      id v5 = [v4 _backlightLuminance];

      if (v5)
      {
        id v6 = [v3 traitCollection];
        id v7 = [v6 _backlightLuminance];

        return v7 == (id)1;
      }
      else
      {

        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_100118E44()
{
  unint64_t result = qword_100267EE8;
  if (!qword_100267EE8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100267EE8);
  }
  return result;
}

uint64_t sub_100118E84()
{
  return swift_release();
}

unint64_t sub_100118E90()
{
  unint64_t result = qword_100267EF0;
  if (!qword_100267EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267EF0);
  }
  return result;
}

unint64_t sub_100118EE8()
{
  unint64_t result = qword_100267EF8;
  if (!qword_100267EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267EF8);
  }
  return result;
}

uint64_t sub_100118F3C()
{
  return *(void *)(swift_getOpaqueTypeConformance2() + 8);
}

uint64_t sub_100118F70()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100118FC0()
{
  unint64_t result = qword_100267F00;
  if (!qword_100267F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267F00);
  }
  return result;
}

uint64_t sub_100119014()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  sub_100031F50(v0, qword_100275370);
  sub_10002272C(v0, (uint64_t)qword_100275370);
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t sub_100119078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[23] = a3;
  v4[24] = a4;
  v4[21] = a1;
  v4[22] = a2;
  uint64_t v5 = type metadata accessor for IntentFile();
  v4[25] = v5;
  v4[26] = *(void *)(v5 - 8);
  v4[27] = swift_task_alloc();
  v4[28] = type metadata accessor for MainActor();
  v4[29] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[30] = v7;
  v4[31] = v6;
  return _swift_task_switch(sub_100119174, v7, v6);
}

uint64_t sub_100119174()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = type metadata accessor for URL();
  v0[32] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v0[33] = v5;
  uint64_t v6 = swift_task_alloc();
  v0[34] = v6;
  IntentParameter.wrappedValue.getter();
  sub_100028654(&qword_100269FB0);
  uint64_t v7 = swift_task_alloc();
  IntentFile.fileURL.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4) == 1)
  {
    swift_release();
    sub_10011A1AC(v7);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10011A20C();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v6, v7, v4);
    swift_task_dealloc();
    AppDependency.wrappedValue.getter();
    IntentParameter.wrappedValue.getter();
    uint64_t v10 = v0[19];
    uint64_t v11 = v0[20];
    v0[35] = v11;
    v0[36] = static MainActor.shared.getter();
    uint64_t v13 = (char *)&dword_10026A1C0 + dword_10026A1C0;
    uint64_t v12 = (void *)swift_task_alloc();
    v0[37] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100119434;
    return ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))v13)(v0 + 2, v6, v10, v11);
  }
}

uint64_t sub_100119434()
{
  *(void *)(*(void *)v1 + 304) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    uint64_t v4 = sub_100119714;
  }
  else {
    uint64_t v4 = sub_10011958C;
  }
  return _swift_task_switch(v4, v3, v2);
}

uint64_t sub_10011958C()
{
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 248);
  return _swift_task_switch(sub_1001195F8, v1, v2);
}

uint64_t sub_1001195F8()
{
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 256);
  swift_release();
  sub_10002F48C(v0 + 56);
  long long v4 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 96) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 112) = v4;
  *(void *)(v0 + 128) = *(void *)(v0 + 48);
  sub_100035ED4();
  static IntentResult.result<A>(value:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(_OWORD *)(v0 + 136) = *(_OWORD *)(v0 + 16);
  sub_100027334(v0 + 136);
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100119714()
{
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 248);
  return _swift_task_switch(sub_100119780, v1, v2);
}

uint64_t sub_100119780()
{
  uint64_t v2 = v0[33];
  uint64_t v1 = v0[34];
  uint64_t v3 = v0[32];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002F48C((uint64_t)(v0 + 7));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100119828@<X0>(uint64_t a1@<X8>)
{
  if (qword_100264558 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = sub_10002272C(v2, (uint64_t)qword_100275370);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_1001198E0(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100015B60;
  return sub_100119078(a1, v4, v5, v6);
}

uint64_t sub_100119994@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100119BCC();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_1001199C0(uint64_t a1)
{
  unint64_t v2 = sub_100118FC0();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t destroy for RCImportRecording()
{
  swift_release();
  swift_release();

  return swift_release();
}

void *_s10VoiceMemos17RCImportRecordingVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for RCImportRecording(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for RCImportRecording(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for RCImportRecording()
{
  return &type metadata for RCImportRecording;
}

unint64_t sub_100119B70()
{
  unint64_t result = qword_100267F10;
  if (!qword_100267F10)
  {
    sub_100027F14(&qword_100267F18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267F10);
  }
  return result;
}

uint64_t sub_100119BCC()
{
  uint64_t v0 = sub_100028654((uint64_t *)&unk_100268B40);
  __chkstk_darwin(v0 - 8);
  uint64_t v40 = (char *)v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for InputConnectionBehavior();
  uint64_t v2 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v4 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100028654((uint64_t *)&unk_100265EB0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100028654(&qword_100267F20);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[0] = v10;
  uint64_t v39 = sub_100028654(&qword_100267F28);
  uint64_t v11 = type metadata accessor for LocalizedStringResource();
  uint64_t v33 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v37 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  unint64_t v38 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v14 = sub_100028654(&qword_100268B00);
  uint64_t v15 = *(void *)(*(void *)(v14 - 8) + 64);
  __n128 v16 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v12 + 56);
  uint64_t v32 = v12 + 56;
  int v34 = v17;
  unint64_t v35 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v17((char *)v28 - v35, 1, 1, v11, v16);
  uint64_t v18 = type metadata accessor for IntentFile();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v10, 1, 1, v18);
  uint64_t v30 = type metadata accessor for IntentDialog();
  uint64_t v19 = *(void *)(v30 - 8);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  uint64_t v31 = v19 + 56;
  v29(v7, 1, 1, v30);
  sub_100028654(&qword_100267F30);
  type metadata accessor for UTType();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1001F1BD0;
  static UTType.item.getter();
  uint64_t v20 = enum case for InputConnectionBehavior.default(_:);
  char v21 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 104);
  v28[1] = v2 + 104;
  uint64_t v22 = v36;
  v21(v4, enum case for InputConnectionBehavior.default(_:), v36);
  uint64_t v39 = IntentParameter<>.init(title:description:default:supportedContentTypes:requestValueDialog:inputConnectionBehavior:)();
  uint64_t v23 = sub_100028654(&qword_100267F38);
  __chkstk_darwin(v23);
  uint64_t v24 = LocalizedStringResource.init(stringLiteral:)();
  __n128 v25 = __chkstk_darwin(v24);
  v34((char *)v28 - v35, 1, 1, v33, v25);
  uint64_t v26 = type metadata accessor for String.IntentInputOptions();
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v40, 1, 1, v26);
  v29(v7, 1, 1, v30);
  v21(v4, v20, v22);
  IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
  sub_100028654(&qword_100267F40);
  unint64_t v41 = 0xD000000000000025;
  unint64_t v42 = 0x80000001001ED590;
  AnyHashable.init<A>(_:)();
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)();
  return v39;
}

uint64_t sub_10011A1AC(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_100269FB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10011A20C()
{
  unint64_t result = qword_100267F50;
  if (!qword_100267F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100267F50);
  }
  return result;
}

uint64_t sub_10011A260(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10011A280, 0, 0);
}

uint64_t sub_10011A280()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 24) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10011A314, v2, v1);
}

uint64_t sub_10011A314()
{
  swift_release();
  id v1 = [self sharedAppDelegate];
  if (v1
    && (uint64_t v2 = v1, v3 = [v1 defaultSceneDelegate], v2, v3)
    && (id v4 = [v3 mainViewController],
        *(void *)(v0 + 32) = v4,
        v3,
        v4))
  {
    return _swift_task_switch(sub_10011A454, 0, 0);
  }
  else
  {
    sub_1000E72E4();
    swift_allocError();
    *uint64_t v5 = 0;
    swift_willThrow();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_10011A454()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011A478(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10011A498, 0, 0);
}

uint64_t sub_10011A498()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 24) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10011A52C, v2, v1);
}

uint64_t sub_10011A52C()
{
  swift_release();
  id v1 = [self sharedAppDelegate];
  if (v1
    && (uint64_t v2 = v1, v3 = [v1 defaultSceneDelegate], v2, v3)
    && (id v4 = [v3 mainViewController], v3, v4))
  {
    uint64_t v5 = *(void **)(v0 + 16);
    _OWORD v5[3] = &type metadata for RCCombineRecordingsIntentPerformer;
    v5[4] = &off_100228818;
    *uint64_t v5 = v4;
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    sub_1000E72E4();
    swift_allocError();
    *uint64_t v7 = 0;
    swift_willThrow();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v6();
}

uint64_t sub_10011A658(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10011A678, 0, 0);
}

uint64_t sub_10011A678()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 24) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10011A70C, v2, v1);
}

uint64_t sub_10011A70C()
{
  swift_release();
  id v1 = [self sharedAppDelegate];
  if (v1
    && (uint64_t v2 = v1, v3 = [v1 defaultSceneDelegate], v2, v3)
    && (id v4 = [v3 mainViewController], v3, v4))
  {
    uint64_t v5 = *(void **)(v0 + 16);
    _OWORD v5[3] = &type metadata for RCImportRecordingIntentPerformer;
    v5[4] = &off_100228828;
    *uint64_t v5 = v4;
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    sub_1000E72E4();
    swift_allocError();
    *uint64_t v7 = 0;
    swift_willThrow();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v6();
}

id sub_10011A878()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCAppIntentsManager();
  return [super dealloc];
}

uint64_t type metadata accessor for RCAppIntentsManager()
{
  return self;
}

uint64_t initializeWithCopy for TranscriptViewTextUpdateHelper(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit();
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for TranscriptViewTextUpdateHelper(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for TranscriptViewTextUpdateHelper(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for TranscriptViewTextUpdateHelper(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign();
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for TranscriptViewTextUpdateHelper(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TranscriptViewTextUpdateHelper(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewTextUpdateHelper()
{
  return &type metadata for TranscriptViewTextUpdateHelper;
}

uint64_t sub_10011AA28@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = sub_10011BA84(a1);
  if (v6) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  else
  {
    id v7 = sub_10011BB0C(v10, result, v5, 0, a1);
    id v9 = v7;
    *(void *)a2 = v7;
    sub_1000D39B0((uint64_t)v10, (uint64_t)a2 + 8);
    id v8 = v7;
    return sub_1000285F8((uint64_t)&v9, &qword_100267FC8);
  }
  return result;
}

uint64_t sub_10011AAF0()
{
  uint64_t v0 = type metadata accessor for AttributedString.Index();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  __chkstk_darwin(v0);
  type metadata accessor for AttributedString.CharacterView();
  sub_1001184F0(&qword_100268DC0, (void (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView);
  uint64_t v3 = dispatch thunk of Collection.startIndex.getter();
  __chkstk_darwin(v3);
  dispatch thunk of Collection.endIndex.getter();
  sub_1001184F0(&qword_100268DA0, (void (*)(uint64_t))&type metadata accessor for AttributedString.Index);
  char v4 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v5 = *(void (**)(unsigned char *, uint64_t))(v1 + 8);
  v5(&v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)], v0);
  uint64_t v6 = 0;
  if ((v4 & 1) == 0)
  {
    id v7 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v6 = *v8;
    swift_bridgeObjectRetain();
    v7(v10, 0);
  }
  v5(&v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)], v0);
  return v6;
}

uint64_t sub_10011ACD4(uint64_t a1, uint64_t a2)
{
  char v4 = (void *)sub_100025A44((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v54 = a2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v55 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v56 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v9 = v8 | (v56 << 6);
LABEL_9:
      uint64_t v10 = *(void *)(a2 + 56);
      *(void *)&long long v63 = *(void *)(*(void *)(a2 + 48) + 8 * v9);
      uint64_t v11 = (void *)v63;
      sub_1000D39B0(v10 + 40 * v9, (uint64_t)&v63 + 8);
      id v12 = v11;
      goto LABEL_28;
    }
    int64_t v13 = v56 + 1;
    if (__OFADD__(v56, 1)) {
      goto LABEL_60;
    }
    if (v13 < v55)
    {
      unint64_t v14 = *(void *)(v54 + 8 * v13);
      if (v14) {
        goto LABEL_13;
      }
      int64_t v15 = v56 + 2;
      ++v56;
      if (v13 + 1 < v55)
      {
        unint64_t v14 = *(void *)(v54 + 8 * v15);
        if (v14) {
          goto LABEL_16;
        }
        int64_t v56 = v13 + 1;
        if (v13 + 2 < v55)
        {
          unint64_t v14 = *(void *)(v54 + 8 * (v13 + 2));
          if (v14)
          {
            v13 += 2;
            goto LABEL_13;
          }
          int64_t v15 = v13 + 3;
          int64_t v56 = v13 + 2;
          if (v13 + 3 < v55) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v7 = 0;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v63 = 0u;
LABEL_28:
    sub_10011B9C0((uint64_t)&v63, (uint64_t)&v66);
    id v16 = v66;
    if (!v66)
    {
      swift_release();
      return (uint64_t)v4;
    }
    long long v63 = v67;
    long long v64 = v68;
    *(void *)&long long v65 = v69;
    if (*(void *)(a1 + 16))
    {
      id v17 = v66;
      unint64_t v18 = sub_100025B80((uint64_t)v17);
      if (v19)
      {
        sub_1000D39B0(*(void *)(a1 + 56) + 40 * v18, (uint64_t)&v57);
      }
      else
      {
        uint64_t v59 = 0;
        long long v57 = 0u;
        long long v58 = 0u;
      }

      if (*((void *)&v58 + 1))
      {
        long long v60 = v57;
        long long v61 = v58;
        uint64_t v62 = v59;
        if (static AnyHashable.== infix(_:_:)())
        {
        }
        else
        {
          sub_1000D39B0((uint64_t)&v63, (uint64_t)&v57);
          id v37 = v17;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v40 = sub_100025B80((uint64_t)v37);
          uint64_t v41 = v4[2];
          BOOL v42 = (v39 & 1) == 0;
          uint64_t v43 = v41 + v42;
          if (__OFADD__(v41, v42)) {
            goto LABEL_62;
          }
          char v44 = v39;
          if (v4[3] >= v43)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_1000D344C();
            }
          }
          else
          {
            sub_1000D29D4(v43, isUniquelyReferenced_nonNull_native);
            unint64_t v45 = sub_100025B80((uint64_t)v37);
            if ((v44 & 1) != (v46 & 1)) {
              goto LABEL_65;
            }
            unint64_t v40 = v45;
          }
          if (v44)
          {
            sub_1000D3954((uint64_t)&v57, v4[7] + 40 * v40);
          }
          else
          {
            v4[(v40 >> 6) + 8] |= 1 << v40;
            *(void *)(v4[6] + 8 * v40) = v37;
            uint64_t v47 = v4[7] + 40 * v40;
            long long v48 = v57;
            long long v49 = v58;
            *(void *)(v47 + 32) = v59;
            *(_OWORD *)uint64_t v47 = v48;
            *(_OWORD *)(v47 + 16) = v49;
            uint64_t v50 = v4[2];
            BOOL v34 = __OFADD__(v50, 1);
            uint64_t v51 = v50 + 1;
            if (v34) {
              goto LABEL_63;
            }
            _OWORD v4[2] = v51;
            id v52 = v37;
          }

          swift_bridgeObjectRelease();
        }
        sub_10011BA28((uint64_t)&v60);
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v59 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
    }
    sub_1000285F8((uint64_t)&v57, &qword_100269290);
    sub_1000D39B0((uint64_t)&v63, (uint64_t)&v60);
    id v20 = v16;
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v57 = v4;
    unint64_t v23 = sub_100025B80((uint64_t)v20);
    uint64_t v24 = v4[2];
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25))
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    char v27 = v22;
    if (v4[3] >= v26)
    {
      if ((v21 & 1) == 0) {
        sub_1000D344C();
      }
    }
    else
    {
      sub_1000D29D4(v26, v21);
      unint64_t v28 = sub_100025B80((uint64_t)v20);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_65;
      }
      unint64_t v23 = v28;
    }
    char v4 = (void *)v57;
    if (v27)
    {
      sub_1000D3954((uint64_t)&v60, *(void *)(v57 + 56) + 40 * v23);
    }
    else
    {
      *(void *)(v57 + 8 * (v23 >> 6) + 64) |= 1 << v23;
      *(void *)(v4[6] + 8 * v23) = v20;
      uint64_t v30 = v4[7] + 40 * v23;
      long long v31 = v60;
      long long v32 = v61;
      *(void *)(v30 + 32) = v62;
      *(_OWORD *)uint64_t v30 = v31;
      *(_OWORD *)(v30 + 16) = v32;
      uint64_t v33 = v4[2];
      BOOL v34 = __OFADD__(v33, 1);
      uint64_t v35 = v33 + 1;
      if (v34) {
        goto LABEL_61;
      }
      _OWORD v4[2] = v35;
      id v36 = v20;
    }

    swift_bridgeObjectRelease();
LABEL_6:
    sub_10011BA28((uint64_t)&v63);
  }
  unint64_t v14 = *(void *)(v54 + 8 * v15);
  if (v14)
  {
LABEL_16:
    int64_t v13 = v15;
LABEL_13:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v13 << 6);
    int64_t v56 = v13;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v55)
    {
      int64_t v56 = v55 - 1;
      goto LABEL_27;
    }
    unint64_t v14 = *(void *)(v54 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_13;
    }
  }
LABEL_64:
  __break(1u);
LABEL_65:
  type metadata accessor for Key(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id sub_10011B1EC(uint64_t a1, uint64_t a2)
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v5 = Strong;
  id result = [Strong text];
  if (result)
  {
    unint64_t v7 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v8 = sub_10001DF18();
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    uint64_t v11 = a1 + a2;
    if (__OFADD__(a1, a2))
    {
      __break(1u);
    }
    else
    {
      uint64_t v12 = v11 - 1;
      if (!__OFSUB__(v11, 1))
      {
        if (v8 > a1) {
          goto LABEL_13;
        }
        if (!__OFSUB__(a1, v8))
        {
          if (a1 - v8 < v10)
          {
            BOOL v13 = __OFSUB__(v12, v8);
            BOOL v14 = v12 < v8;
            uint64_t v15 = v12 - v8;
            if (!v14)
            {
              if (!v13)
              {
                if (v15 < v10)
                {
                  uint64_t v27 = 0;
                  uint64_t v28 = 0;
                  if (v11 > a1)
                  {
                    uint64_t v16 = 0;
                    uint64_t v17 = 0;
                    uint64_t v18 = 0;
                    do
                    {
                      uint64_t v19 = v18 + v17;
                      if (a1 >= v18 + v17)
                      {
                        id v20 = [v5 textStorage];
                        id v21 = [v20 attributesAtIndex:a1 effectiveRange:&v27];

                        type metadata accessor for Key(0);
                        sub_10011B968();
                        uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                        uint64_t v23 = sub_10011B550(v22);
                        swift_bridgeObjectRelease();
                        if (!v23) {
                          goto LABEL_23;
                        }
                        if (v16)
                        {
                          uint64_t v24 = swift_bridgeObjectRetain();
                          uint64_t v25 = sub_10011ACD4(v24, v23);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v26 = *(void *)(v25 + 16);
                          swift_bridgeObjectRelease();
                          if (v26)
                          {
LABEL_23:

                            swift_bridgeObjectRelease();
                            return 0;
                          }
                        }
                        else
                        {
                          uint64_t v16 = v23;
                        }
                        uint64_t v17 = v27;
                        uint64_t v18 = v28;
                        uint64_t v19 = v28 + v27;
                      }
                      a1 = v19;
                    }
                    while (v19 < v11);

                    return (id)v16;
                  }
                }
                goto LABEL_13;
              }
LABEL_28:
              __break(1u);
            }
          }
LABEL_13:

          return 0;
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_10011B434(uint64_t a1)
{
  if (*(void *)(a1 + 16) == 1)
  {
    uint64_t v1 = swift_bridgeObjectRetain();
    sub_10011AA28(v1, &v11);
    swift_bridgeObjectRelease();
    uint64_t v2 = v11;
    if (v11)
    {
      uint64_t v15 = v11;
      long long v16 = v12;
      long long v17 = v13;
      uint64_t v18 = v14;
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v5 = v4;
      if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6) {
        char v8 = 1;
      }
      else {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      id v9 = v2;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000285F8((uint64_t)&v15, &qword_100267FC8);
    }
    else
    {
      sub_1000285F8((uint64_t)&v11, &qword_100267FB8);
      char v8 = 0;
    }
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_10011B550(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100028654(&qword_100267C40);
    uint64_t v1 = (unsigned char *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v1 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v2 = -1 << *(unsigned char *)(a1 + 32);
  if (-v2 < 64) {
    uint64_t v3 = ~(-1 << -(char)v2);
  }
  else {
    uint64_t v3 = -1;
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v2) >> 6;
  uint64_t v5 = v1 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v7 = 0;
  while (1)
  {
    if (v4)
    {
      uint64_t v10 = (v4 - 1) & v4;
      unint64_t v11 = __clz(__rbit64(v4)) | (v7 << 6);
      int64_t v12 = v7;
      goto LABEL_28;
    }
    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v13 >= v26) {
      goto LABEL_39;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v12 = v7 + 1;
    if (!v14)
    {
      int64_t v12 = v7 + 2;
      if (v7 + 2 >= v26) {
        goto LABEL_39;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v12);
      if (!v14)
      {
        int64_t v12 = v7 + 3;
        if (v7 + 3 >= v26) {
          goto LABEL_39;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v7 + 4;
          if (v7 + 4 >= v26) {
            goto LABEL_39;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v12);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v10 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_28:
    long long v16 = *(void **)(*(void *)(a1 + 48) + 8 * v11);
    sub_10002F4DC(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v34);
    uint64_t v33 = v16;
    sub_10002F4DC((uint64_t)v34, (uint64_t)v32);
    id v17 = v16;
    sub_1000285F8((uint64_t)&v33, &qword_100267FC0);
    if (!swift_dynamicCast())
    {
      uint64_t v31 = 0;
      long long v29 = 0u;
      long long v30 = 0u;

      sub_1000285F8((uint64_t)&v29, &qword_100269290);
      swift_release();
      sub_10011BA7C();
      swift_release();
      return 0;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v19 = -1 << v1[32];
    unint64_t v20 = v18 & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v5[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v20) & ~*(void *)&v5[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v5[8 * v21];
      }
      while (v25 == -1);
      unint64_t v8 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v5[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    *(void *)(*((void *)v1 + 6) + 8 * v8) = v17;
    uint64_t v9 = *((void *)v1 + 7) + 40 * v8;
    *(_OWORD *)uint64_t v9 = v29;
    *(_OWORD *)(v9 + 16) = v30;
    *(void *)(v9 + 32) = v31;
    ++*((void *)v1 + 2);
    int64_t v7 = v12;
    unint64_t v4 = v10;
  }
  int64_t v15 = v7 + 5;
  if (v7 + 5 >= v26)
  {
LABEL_39:
    swift_release();
    sub_10011BA7C();
    return (uint64_t)v1;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v15);
  if (v14)
  {
    int64_t v12 = v7 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v12 >= v26) {
      goto LABEL_39;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v12);
    ++v15;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

unint64_t sub_10011B968()
{
  unint64_t result = qword_100264B30;
  if (!qword_100264B30)
  {
    type metadata accessor for Key(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100264B30);
  }
  return result;
}

uint64_t sub_10011B9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100267FB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011BA28(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011BA7C()
{
  return swift_release();
}

uint64_t sub_10011BA84(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

id sub_10011BB0C(id result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  id v5 = *(id *)(*(void *)(a5 + 48) + 8 * a2);
  sub_1000D39B0(*(void *)(a5 + 56) + 40 * a2, (uint64_t)result);

  return v5;
}

uint64_t sub_10011BBA0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 8);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for HighlightConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for HighlightConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for HighlightConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HighlightConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HighlightConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

id sub_10011BD98()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TranscriptionAvailabilityProvider();
  return [super dealloc];
}

uint64_t sub_10011BE28()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10011BE68()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t getEnumTagSinglePayload for TranscriptViewLayoutHelper(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TranscriptViewLayoutHelper(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewLayoutHelper()
{
  return &type metadata for TranscriptViewLayoutHelper;
}

uint64_t sub_10011BF04()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    unint64_t v1 = (void *)result;
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong
      && (char v3 = Strong,
          [Strong adjustedContentInset],
          v3,
          (uint64_t v4 = (void *)swift_unknownObjectWeakLoadStrong()) != 0))
    {
      id v5 = v4;
      id v6 = [v4 endOfDocument];
      [v5 caretRectForPosition:v6];
      CGFloat v8 = v7;
      CGFloat v10 = v9;
      CGFloat v12 = v11;
      CGFloat v14 = v13;

      v17.origin.x = v8;
      v17.origin.y = v10;
      v17.size.width = v12;
      v17.size.height = v14;
      CGRectGetMaxY(v17);
      [v5 adjustedContentInset];
      [v5 bounds];
      CGRectGetHeight(v18);
      [v5 adjustedContentInset];

      [v1 contentOffset];
      uint64_t v16 = v15;

      return v16;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

void sub_10011C074(void *a1)
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  id v12 = Strong;
  id v3 = [Strong textLayoutManager];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [a1 endLocation];
    id v6 = [v4 textViewportLayoutController];
    id v7 = [v6 viewportRange];

    if (v7)
    {
      id v8 = v7;
      if ([v8 isEmpty])
      {
LABEL_11:

        goto LABEL_12;
      }
      if ([v8 containsRange:a1])
      {

        goto LABEL_9;
      }
      unsigned int v9 = objc_msgSend(objc_msgSend(v8, "endLocation"), "isEqual:", v5);
      swift_unknownObjectRelease();

      if (v9)
      {
LABEL_9:
        id v10 = v8;
        id v11 = [objc_allocWithZone((Class)NSTextRange) initWithLocation:[v10 location] endLocation:v5];
        swift_unknownObjectRelease();
        if (v11)
        {
          [v4 ensureLayoutForRange:v11];

          swift_unknownObjectRelease();
          id v7 = v10;
LABEL_13:

          goto LABEL_14;
        }
        goto LABEL_11;
      }
    }
LABEL_12:
    [v4 ensureLayoutForRange:a1];

    swift_unknownObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
}

uint64_t sub_10011C284(CGFloat x, CGFloat y, CGFloat width, CGFloat height, uint64_t a5, uint64_t a6, CGRect *a7)
{
  v14.origin.x = 0.0;
  v14.origin.y = 0.0;
  v14.size.width = 0.0;
  v14.size.height = 0.0;
  if (!CGRectEqualToRect(*a7, v14))
  {
    v15.origin.x = x;
    v15.origin.y = y;
    v15.size.width = width;
    v15.size.height = height;
    CGRect v13 = CGRectUnion(*a7, v15);
    x = v13.origin.x;
    y = v13.origin.y;
    width = v13.size.width;
    height = v13.size.height;
  }
  a7->origin.x = x;
  a7->origin.y = y;
  a7->size.width = width;
  a7->size.height = height;
  return 1;
}

uint64_t sub_10011C31C()
{
  return 0x64726F6365527369;
}

uint64_t sub_10011C33C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x64726F6365527369 && a2 == 0xEB00000000676E69)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10011C3EC(uint64_t a1)
{
  unint64_t v2 = sub_10011DF44();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10011C428(uint64_t a1)
{
  unint64_t v2 = sub_10011DF44();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10011C464@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = sub_100028654(&qword_100268148);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001510C(a1, a1[3]);
  sub_10011DF44();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10002F48C((uint64_t)a1);
  }
  char v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_10002F48C((uint64_t)a1);
  *a2 = v9 & 1;
  return result;
}

uint64_t sub_10011C5C4(void *a1)
{
  uint64_t v2 = sub_100028654(&qword_100268158);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001510C(a1, a1[3]);
  sub_10011DF44();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int sub_10011C6F8()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10011C740()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10011C76C()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10011C7B0()
{
  return 0;
}

uint64_t sub_10011C7BC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_10011C7EC(uint64_t a1)
{
  unint64_t v2 = sub_10011DF98();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10011C828(uint64_t a1)
{
  unint64_t v2 = sub_10011DF98();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10011C864(uint64_t a1)
{
  return sub_10002F48C(a1);
}

uint64_t sub_10011C88C(void *a1)
{
  uint64_t v2 = sub_100028654(&qword_100268160);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001510C(a1, a1[3]);
  sub_10011DF98();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10011C99C(int a1)
{
  int v36 = a1;
  uint64_t v35 = type metadata accessor for ActivityPresentationOptions();
  uint64_t v33 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100028654(&qword_100268178);
  uint64_t v4 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + 16))
  {
    swift_retain();
    uint64_t v7 = Activity.id.getter();
    sub_10011D994(v7, v8);
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v37 = v1;
  if (qword_100264530 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10002272C(v9, (uint64_t)qword_100275340);
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)id v12 = 136315138;
    uint64_t v38 = sub_10002F3B8(0xD000000000000027, 0x80000001001ED810, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s Requesting begin activity", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  LOBYTE(v39[0]) = 1;
  uint64_t v13 = sub_100028654(&qword_100265A20);
  __chkstk_darwin(v13 - 8);
  CGRect v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  sub_10011DDE8();
  sub_10011DE40();
  sub_10011DE98();
  ActivityContent.init(state:staleDate:relevanceScore:)();
  int v17 = SBSIsSystemApertureAvailable();
  sub_100028654(&qword_100268180);
  uint64_t v18 = type metadata accessor for ActivityPresentationOptions.ActivityPresentationDestination();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 72);
  unint64_t v21 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = swift_allocObject();
  if (v17)
  {
    *(_OWORD *)(v22 + 16) = xmmword_1001F1BD0;
    (*(void (**)(unint64_t, void, uint64_t))(v19 + 104))(v22 + v21, enum case for ActivityPresentationOptions.ActivityPresentationDestination.systemAperture(_:), v18);
  }
  else
  {
    *(_OWORD *)(v22 + 16) = xmmword_1001F0FB0;
    unint64_t v23 = v22 + v21;
    BOOL v24 = *(void (**)(unint64_t, void, uint64_t))(v19 + 104);
    v24(v22 + v21, enum case for ActivityPresentationOptions.ActivityPresentationDestination.banner(_:), v18);
    v24(v23 + v20, enum case for ActivityPresentationOptions.ActivityPresentationDestination.lockscreen(_:), v18);
  }
  ActivityPresentationOptions.init(destinations:)();
  ActivityPresentationOptions.shouldSuppressAlertContentOnLockScreen.setter();
  ActivityPresentationOptions.isActionButtonInitiated.setter();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100028654(&qword_100268188);
  uint64_t v25 = static Activity.request(attributes:content:presentationOptions:platterTarget:contentSourceRequests:isEphemeral:isUnbounded:)();
  uint64_t v26 = v37;
  uint64_t v27 = v25;
  swift_bridgeObjectRelease();
  *(void *)(v26 + 16) = v27;
  swift_release();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    long long v30 = (uint8_t *)swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)long long v30 = 136315138;
    uint64_t v38 = sub_10002F3B8(0xD000000000000027, 0x80000001001ED810, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s Requested an activity successfully", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v33 + 8))(v3, v35);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v34);
  if (!*(void *)(v26 + 16)) {
    return 0;
  }
  swift_retain();
  uint64_t v31 = Activity.id.getter();
  swift_release();
  return v31;
}

uint64_t sub_10011D238(char a1)
{
  *(void *)(v2 + 32) = v1;
  *(unsigned char *)(v2 + 109) = a1;
  uint64_t v3 = sub_100028654(&qword_100268178);
  *(void *)(v2 + 40) = v3;
  *(void *)(v2 + 48) = *(void *)(v3 - 8);
  *(void *)(v2 + 56) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v2 + 64) = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v2 + 72) = v5;
  *(void *)(v2 + 80) = v4;
  return _swift_task_switch(sub_10011D334, v5, v4);
}

uint64_t sub_10011D334()
{
  uint64_t v19 = v0;
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 16);
  *(void *)(v0 + 88) = v1;
  if (v1)
  {
    *(unsigned char *)(v0 + 108) = *(unsigned char *)(v0 + 109);
    sub_100028654(&qword_100265A20);
    uint64_t v2 = swift_task_alloc();
    uint64_t v3 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
    sub_10011DDE8();
    sub_10011DE40();
    sub_10011DE98();
    swift_retain();
    ActivityContent.init(state:staleDate:relevanceScore:)();
    swift_task_dealloc();
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10002272C(v4, (uint64_t)qword_100275340);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = *(unsigned __int8 *)(v0 + 109);
      uint64_t v8 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315394;
      *(void *)(v0 + 24) = sub_10002F3B8(0xD000000000000021, 0x80000001001ED7E0, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 12) = 1024;
      *(_DWORD *)(v0 + 104) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s Updating activity state: isRecording %{BOOL}d", (uint8_t *)v8, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    int v17 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Activity.update(_:)
                                          + async function pointer to dispatch thunk of Activity.update(_:));
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_10011D7DC;
    uint64_t v10 = *(void *)(v0 + 56);
    return v17(v10);
  }
  else
  {
    swift_release();
    if (qword_100264530 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10002272C(v12, (uint64_t)qword_100275340);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    uint64_t v14 = Logger.logObject.getter();
    if (os_log_type_enabled(v14, v13))
    {
      CGRect v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)CGRect v15 = 136315138;
      *(void *)(v0 + 16) = sub_10002F3B8(0xD000000000000021, 0x80000001001ED7E0, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, v13, "%s Unable to update activity state. No activity in progress.", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
}

uint64_t sub_10011D7DC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  return _swift_task_switch(sub_10011D8FC, v3, v2);
}

uint64_t sub_10011D8FC()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10011D994(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ActivityUIDismissalPolicy();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100028654(&qword_100268170);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(v2 + 16)) {
    return 0;
  }
  swift_retain();
  if (Activity.id.getter() == a1 && v13 == a2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      swift_release();
      return 0;
    }
  }
  if (qword_100264530 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10002272C(v17, (uint64_t)qword_100275340);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v25 = v6;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v24 = v7;
    uint64_t v27 = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v26 = sub_10002F3B8(0xD000000000000018, 0x80000001001ED7C0, &v27);
    uint64_t v6 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s Requesting end activity", v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v24;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v22 = sub_100028654(&qword_100268178);
  uint64_t v16 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v12, 1, 1, v22);
  static ActivityUIDismissalPolicy.immediate.getter();
  dispatch thunk of Activity.endSync(_:dismissalPolicy:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_10011DFEC((uint64_t)v12);
  *(void *)(v3 + 16) = 0;
  swift_release();
  return v16;
}

uint64_t sub_10011DCEC()
{
  swift_release();

  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for RecordingActivityAttributes()
{
  return &type metadata for RecordingActivityAttributes;
}

unint64_t sub_10011DD38()
{
  unint64_t result = qword_100268118;
  if (!qword_100268118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268118);
  }
  return result;
}

unint64_t sub_10011DD90()
{
  unint64_t result = qword_100268120;
  if (!qword_100268120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268120);
  }
  return result;
}

unint64_t sub_10011DDE8()
{
  unint64_t result = qword_100268128;
  if (!qword_100268128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268128);
  }
  return result;
}

unint64_t sub_10011DE40()
{
  unint64_t result = qword_100268130;
  if (!qword_100268130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268130);
  }
  return result;
}

unint64_t sub_10011DE98()
{
  unint64_t result = qword_100268138;
  if (!qword_100268138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268138);
  }
  return result;
}

unint64_t sub_10011DEF0()
{
  unint64_t result = qword_100268140;
  if (!qword_100268140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268140);
  }
  return result;
}

unint64_t sub_10011DF44()
{
  unint64_t result = qword_100268150;
  if (!qword_100268150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268150);
  }
  return result;
}

unint64_t sub_10011DF98()
{
  unint64_t result = qword_100268168;
  if (!qword_100268168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268168);
  }
  return result;
}

uint64_t sub_10011DFEC(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_100268170);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for RecordingActivityAttributes.CodingKeys()
{
  return &type metadata for RecordingActivityAttributes.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for RecordingActivityAttributes.ContentState.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10011E0F8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordingActivityAttributes.ContentState.CodingKeys()
{
  return &type metadata for RecordingActivityAttributes.ContentState.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RecordingActivityAttributes.ContentState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RecordingActivityAttributes.ContentState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10011E29CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordingActivityAttributes.ContentState()
{
  return &type metadata for RecordingActivityAttributes.ContentState;
}

unint64_t sub_10011E2D8()
{
  unint64_t result = qword_100268190;
  if (!qword_100268190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268190);
  }
  return result;
}

unint64_t sub_10011E330()
{
  unint64_t result = qword_100268198;
  if (!qword_100268198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268198);
  }
  return result;
}

unint64_t sub_10011E388()
{
  unint64_t result = qword_1002681A0;
  if (!qword_1002681A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002681A0);
  }
  return result;
}

unint64_t sub_10011E3E0()
{
  unint64_t result = qword_1002681A8;
  if (!qword_1002681A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002681A8);
  }
  return result;
}

unint64_t sub_10011E438()
{
  unint64_t result = qword_1002681B0;
  if (!qword_1002681B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002681B0);
  }
  return result;
}

unint64_t sub_10011E490()
{
  unint64_t result = qword_1002681B8;
  if (!qword_1002681B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002681B8);
  }
  return result;
}

uint64_t sub_10011E4E4()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

__n128 sub_10011E518@<Q0>(uint64_t a1@<X8>)
{
  IntentParameter.wrappedValue.getter();
  __n128 result = v4;
  *(void *)a1 = v3;
  *(__n128 *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_10011E560()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t sub_10011E594()
{
  id v2 = [v0 context];
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (v1) {
    return swift_bridgeObjectRelease();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10011E680()
{
  id v2 = [v0 context];
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (v1)
  {
    sub_10012ED84((id)1);
    return 1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10011E77C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = result;
    int v8 = a2;
    id v9 = self;
    swift_bridgeObjectRetain();
    uint64_t v4 = v3 + 64;
    do
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      id v5 = [v9 sharedApplicationModel];
      NSString v6 = String._bridgeToObjectiveC()();
      id v7 = [v5 compositionLoadedForSavedRecordingUUID:v6];
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();

      if (v7)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v4 += 40;
      --v2;
    }
    while (v2);
    uint64_t result = swift_bridgeObjectRelease();
    a2 = v8;
  }
  *a2 = _swiftEmptyArrayStorage;
  return result;
}

id sub_10011E914()
{
  id v0 = [self sharedApplicationModel];
  uint64_t v1 = (void *)sub_10011E680();

  id v2 = [objc_allocWithZone((Class)NSItemProvider) init];
  if (v1)
  {
    id v3 = v1;
    if ([v3 compositionIsShareable])
    {
      id v4 = [objc_allocWithZone((Class)RCShareableComposition) initWithComposition:v3];
      id v15 = 0;
      if ([v4 registerAudioFileRepresentationWithItemProvider:v2 error:&v15])
      {
        id v5 = v15;
      }
      else
      {
        id v6 = v15;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        if (qword_100264530 != -1) {
          swift_once();
        }
        uint64_t v7 = type metadata accessor for Logger();
        sub_10002272C(v7, (uint64_t)qword_100275340);
        swift_errorRetain();
        swift_errorRetain();
        int v8 = Logger.logObject.getter();
        os_log_type_t v9 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v8, v9))
        {
          uint64_t v10 = swift_slowAlloc();
          id v15 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v10 = 136315394;
          sub_10002F3B8(0x766F72506D657469, 0xEC00000072656469, (uint64_t *)&v15);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v10 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v11 = Error.localizedDescription.getter();
          sub_10002F3B8(v11, v12, (uint64_t *)&v15);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s Unable to register audio file representation. Error: %s", (uint8_t *)v10, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
      }
      EntityProperty.wrappedValue.getter();
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v2 setSuggestedName:v13];
    }
  }
  return v2;
}

void sub_10011ECAC(void *a1@<X8>)
{
  id v2 = [self sharedApplicationModel];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 compositionLoadedForSavedRecordingUUID:v3];

  *a1 = v4;
}

uint64_t sub_10011ED44()
{
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  sub_100031F50(v0, qword_100275390);
  sub_10002272C(v0, (uint64_t)qword_100275390);
  uint64_t v1 = type metadata accessor for LocalizedStringResource();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v3 = sub_100028654(&qword_100268B00);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v7);
  uint64_t v8 = type metadata accessor for String.LocalizationValue.Placeholder();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v9 + 104))(v12, enum case for String.LocalizationValue.Placeholder.int(_:), v8, v10);
  String.LocalizationValue.StringInterpolation.appendInterpolation(placeholder:specifier:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v13._uint64_t countAndFlagsBits = 0x4944524F43455220;
  v13._object = (void *)0xEB0000000053474ELL;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v13);
  LocalizedStringResource.init(stringInterpolation:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v5, 0, 1, v1);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t sub_10011F018@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v65 = a1;
  uint64_t v3 = sub_100028654(&qword_1002686C8);
  __chkstk_darwin(v3 - 8);
  long long v63 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for LocalizedStringResource();
  uint64_t v61 = *(void *)(v64 - 8);
  uint64_t v5 = *(void *)(v61 + 64);
  __chkstk_darwin(v64);
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  uint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  __chkstk_darwin(v7 - 8);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v9);
  EntityProperty.wrappedValue.getter();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v66);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v10);
  uint64_t v62 = (char *)&v55 - v6;
  LocalizedStringResource.init(stringInterpolation:)();
  EntityProperty.wrappedValue.getter();
  id v11 = (id)RCLocalizedDuration();
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  uint64_t v57 = v5;
  __chkstk_darwin(v15);
  long long v60 = (char *)v6;
  __chkstk_darwin(v16);
  long long v58 = (uint64_t *)((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v17._object = (void *)0x80000001001EE0D0;
  v17._uint64_t countAndFlagsBits = 0xD000000000000031;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
  uint64_t v56 = v12;
  v18._uint64_t countAndFlagsBits = v12;
  v18._object = v14;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v18);
  v19._uint64_t countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v19);
  uint64_t v59 = (char *)&v55 - v6;
  LocalizedStringResource.init(stringInterpolation:)();
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = EntityProperty.wrappedValue.getter();
  uint64_t v25 = *v2;
  uint64_t v26 = v2[1];
  if (qword_1002645F0 != -1) {
    uint64_t v24 = swift_once();
  }
  __chkstk_darwin(v24);
  *(&v55 - 4) = (uint64_t)v23;
  *(&v55 - 3) = v25;
  uint64_t v28 = (void **)&v27[4];
  os_log_type_t v29 = v27 + 6;
  *(&v55 - 2) = v26;
  os_unfair_lock_lock(v27 + 6);
  sub_10012ECF4(v28, &v66._countAndFlagsBits);
  os_unfair_lock_unlock(v29);
  uint64_t countAndFlagsBits = v66._countAndFlagsBits;
  object = v66._object;
  uint64_t v32 = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  uint64_t v55 = (uint64_t)&v55;
  __chkstk_darwin(v32);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v33._uint64_t countAndFlagsBits = 0xD000000000000036;
  v33._object = (void *)0x80000001001EE110;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v33);
  v34._uint64_t countAndFlagsBits = countAndFlagsBits;
  v34._object = object;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 0x495441525544202CLL;
  v35._object = (void *)0xEB00000000204E4FLL;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v35);
  v36._uint64_t countAndFlagsBits = v56;
  v36._object = v14;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v37);
  __chkstk_darwin(v38);
  char v39 = v60;
  LocalizedStringResource.init(stringInterpolation:)();
  uint64_t v40 = v61;
  uint64_t v41 = *(void (**)(char *, uint64_t))(v61 + 8);
  BOOL v42 = v59;
  uint64_t v43 = v64;
  v41(v59, v64);
  uint64_t v44 = (*(uint64_t (**)(char *, int64_t, uint64_t))(v40 + 32))(v42, (char *)&v55 - v39, v43);
  long long v58 = &v55;
  __n128 v45 = __chkstk_darwin(v44);
  char v46 = *(void (**)(char *, char *, uint64_t, __n128))(v40 + 16);
  uint64_t v47 = (char *)((char *)&v55 - v39);
  long long v48 = v62;
  v46(v47, v62, v43, v45);
  uint64_t v49 = sub_100028654(&qword_100268B00);
  long long v60 = (char *)&v55;
  __n128 v50 = __chkstk_darwin(v49 - 8);
  id v52 = (char *)&v55 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46(v52, v42, v43, v50);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v52, 0, 1, v43);
  uint64_t v53 = type metadata accessor for DisplayRepresentation.Image();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v63, 1, 1, v53);
  DisplayRepresentation.init(title:subtitle:image:)();
  v41(v42, v43);
  return ((uint64_t (*)(char *, uint64_t))v41)(v48, v43);
}

void sub_10011F67C(void *a1@<X8>)
{
  id v2 = [self sharedApplicationModel];
  sub_10011E594();

  uint64_t v3 = self;
  sub_100025F4C(0, &qword_1002686D0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v3 activityItemsConfigurationForCompositions:isa];

  *a1 = v5;
}

id sub_10011F774()
{
  return sub_10011E914();
}

unint64_t sub_10011F7B4()
{
  unint64_t result = qword_1002681D8;
  if (!qword_1002681D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002681D8);
  }
  return result;
}

uint64_t sub_10011F808@<X0>(uint64_t a1@<X8>)
{
  return sub_100128CD0(&qword_100264568, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100275390, a1);
}

uint64_t sub_10011F840()
{
  return sub_100027F5C(&qword_1002681F8, &qword_100268200);
}

uint64_t sub_10011F87C(uint64_t a1)
{
  unint64_t v2 = sub_10002738C();

  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10011F8CC(uint64_t a1)
{
  unint64_t v2 = sub_100035DD8();

  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

id sub_10011F918@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1;
  id result = [v1 uuid];
  long long v5 = 0uLL;
  if (!result)
  {
    uint64_t v31 = 0;
    long long v32 = 0uLL;
    goto LABEL_11;
  }
  unint64_t v6 = result;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  id v10 = [v2 title];
  if (!v10)
  {
    id result = (id)swift_bridgeObjectRelease();
LABEL_10:
    uint64_t v31 = 0;
    long long v32 = 0uLL;
    long long v5 = 0uLL;
    goto LABEL_11;
  }
  id v11 = v10;
  uint64_t v35 = v7;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)&long long v38 = v12;

  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  Swift::String v36 = (char *)&v33 - v16;
  id v17 = [v2 creationDate:__chkstk_darwin(v13).n128_f64[0]];
  uint64_t v18 = sub_100028654(&qword_100265A20);
  __n128 v20 = __chkstk_darwin(v18 - 8);
  uint64_t v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v39 = &v33;
  *(void *)&long long v37 = v23;
  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v14 + 56))(v22, 1, 1, v13, v20);
    goto LABEL_9;
  }
  uint64_t v33 = v9;
  __chkstk_darwin(v19);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v24(v22, (char *)&v33 - v16, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v22, 0, 1, v13);
  uint64_t v25 = v33;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v22, 1, v13) == 1)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id result = (id)sub_1000285F8((uint64_t)v22, &qword_100265A20);
    goto LABEL_10;
  }
  uint64_t v26 = ((uint64_t (*)(char *, char *, uint64_t))v24)(v36, v22, v13);
  __n128 v27 = __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v29 = v36;
  (*(void (**)(char *, char *, uint64_t, __n128))(v14 + 16))(v28, v36, v13, v27);
  [v2 length];
  sub_1000273E0(v35, v25, *(double *)&v34, v38, v28, &v40, v30);
  uint64_t v31 = v40;
  long long v37 = v42;
  long long v38 = v41;
  id result = (id)(*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v29, v13);
  long long v32 = v37;
  long long v5 = v38;
LABEL_11:
  *(void *)a1 = v31;
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 24) = v32;
  return result;
}

uint64_t sub_10011FCC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1002686B8 + dword_1002686B8);
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v6;
  *unint64_t v6 = v3;
  v6[1] = sub_10012EE04;
  return v8(a2, a3);
}

unint64_t sub_10011FD7C()
{
  unint64_t result = qword_100268218;
  if (!qword_100268218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268218);
  }
  return result;
}

unint64_t sub_10011FDD4()
{
  unint64_t result = qword_100268220[0];
  if (!qword_100268220[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100268220);
  }
  return result;
}

uint64_t sub_10011FE28(uint64_t a1)
{
  long long v5 = (uint64_t (*)(uint64_t))((char *)&dword_1002686B0 + dword_1002686B0);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10011FED0;
  return v5(a1);
}

uint64_t sub_10011FED0(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  long long v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_10011FFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100031604;
  return EntityQuery.suggestedEntities()(a1, a2, a3);
}

unint64_t sub_100120088()
{
  unint64_t result = qword_100268238;
  if (!qword_100268238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268238);
  }
  return result;
}

uint64_t sub_1001200DC()
{
  return sub_10012EB48(&qword_100268240, qword_100268248, (void (*)(void))sub_100035ED4);
}

uint64_t sub_10012012C(uint64_t a1, uint64_t a2)
{
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_10011F7B4();
  *long long v5 = v2;
  v5[1] = sub_100031604;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_1001201E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100031604;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

unint64_t sub_10012029C()
{
  unint64_t result = qword_100268260;
  if (!qword_100268260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268260);
  }
  return result;
}

uint64_t sub_1001202F0(uint64_t a1)
{
  return sub_100124100(a1, qword_1002753A8);
}

uint64_t sub_100120314()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t sub_100120348()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_10012036C()
{
  uint64_t v0 = sub_100028654(&qword_100268698);
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_100028654(&qword_1002686A0);
  __chkstk_darwin(v1);
  sub_10003629C();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._object = (void *)0x80000001001EE060;
  v2._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v2);
  swift_getKeyPath();
  sub_100028654(&qword_1002686A8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v3);
  ParameterSummaryString.init(stringInterpolation:)();
  return IntentParameterSummary.init(_:table:)();
}

uint64_t sub_1001204FC(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  type metadata accessor for MainActor();
  v2[4] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  void v2[5] = v4;
  v2[6] = v3;
  return _swift_task_switch(sub_100120594, v4, v3);
}

uint64_t sub_100120594()
{
  id v1 = [self sharedAppDelegate];
  if (v1
    && (Swift::String v2 = v1, v3 = [v1 defaultSceneDelegate], v2, v3)
    && (id v4 = [v3 mainViewController], v0[7] = v4,
                                                                                         v3,
                                                                                         v4))
  {
    long long v5 = (void *)swift_task_alloc();
    v0[8] = v5;
    *long long v5 = v0;
    v5[1] = sub_100120714;
    uint64_t v6 = v0[3];
    return sub_100151D1C(v6, (uint64_t)v4);
  }
  else
  {
    sub_1000E72E4();
    swift_allocError();
    *uint64_t v8 = 0;
    swift_willThrow();
    swift_release();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100120714()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(void *)(v2 + 40);
  if (v0) {
    long long v5 = sub_1000E0C14;
  }
  else {
    long long v5 = sub_100120850;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100120850()
{
  id v1 = *(void **)(v0 + 56);
  swift_release();
  static IntentResult.result<>()();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001208C8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001208E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100120900@<X0>(uint64_t a1@<X8>)
{
  return sub_100128CD0(&qword_100264570, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1002753A8, a1);
}

uint64_t sub_100120934(uint64_t a1)
{
  uint64_t v4 = *v1;
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[1] = sub_100031604;
  return sub_1001204FC(a1, v4);
}

uint64_t sub_1001209D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001292D4();
  *a1 = result;
  return result;
}

unint64_t sub_100120A00()
{
  unint64_t result = qword_100268280;
  if (!qword_100268280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268280);
  }
  return result;
}

unint64_t sub_100120A58()
{
  unint64_t result = qword_100268288;
  if (!qword_100268288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268288);
  }
  return result;
}

uint64_t sub_100120AAC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100120AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100123E18(a1, a2, a3, (void (*)(void))sub_100120AF4);
}

unint64_t sub_100120AF4()
{
  unint64_t result = qword_100268290;
  if (!qword_100268290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268290);
  }
  return result;
}

uint64_t sub_100120B48(uint64_t a1)
{
  return sub_100124100(a1, qword_1002753C0);
}

uint64_t sub_100120B6C(uint64_t a1)
{
  v1[2] = a1;
  v1[3] = type metadata accessor for MainActor();
  v1[4] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[5] = v3;
  v1[6] = v2;
  return _swift_task_switch(sub_100120C08, v3, v2);
}

uint64_t sub_100120C08()
{
  id v1 = [self sharedAppDelegate];
  if (v1
    && (uint64_t v2 = v1, v3 = [v1 defaultSceneDelegate], v2, v3)
    && (id v4 = [v3 mainViewController], v0[7] = v4,
                                                                                         v3,
                                                                                         v4))
  {
    v0[8] = static MainActor.shared.getter();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[9] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100120D8C;
    return sub_100156FA4();
  }
  else
  {
    sub_1000E72E4();
    swift_allocError();
    *uint64_t v7 = 0;
    swift_willThrow();
    swift_release();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100120D8C()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    id v4 = sub_100120F4C;
  }
  else {
    id v4 = sub_100120EE8;
  }
  return _swift_task_switch(v4, v3, v2);
}

uint64_t sub_100120EE8()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  return _swift_task_switch(sub_100120850, v1, v2);
}

uint64_t sub_100120F4C()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  return _swift_task_switch(sub_100120FB0, v1, v2);
}

uint64_t sub_100120FB0()
{
  uint64_t v1 = *(void **)(v0 + 56);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10012101C@<X0>(uint64_t a1@<X8>)
{
  return sub_100128CD0(&qword_100264578, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1002753C0, a1);
}

uint64_t sub_100121048(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100031604;
  return sub_100120B6C(a1);
}

uint64_t sub_1001210E0(uint64_t a1)
{
  unint64_t v2 = sub_100120AF4();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100121120()
{
  unint64_t result = qword_1002682A0;
  if (!qword_1002682A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002682A0);
  }
  return result;
}

unint64_t sub_100121178()
{
  unint64_t result = qword_1002682A8;
  if (!qword_1002682A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002682A8);
  }
  return result;
}

unint64_t sub_1001211D0()
{
  unint64_t result = qword_1002682B0;
  if (!qword_1002682B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002682B0);
  }
  return result;
}

unint64_t sub_100121228()
{
  unint64_t result = qword_1002682B8;
  if (!qword_1002682B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002682B8);
  }
  return result;
}

uint64_t sub_10012127C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100121298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100123E18(a1, a2, a3, (void (*)(void))sub_100121178);
}

uint64_t sub_1001212C4(uint64_t a1)
{
  return sub_100124100(a1, qword_1002753D8);
}

uint64_t sub_1001212E8(uint64_t a1)
{
  v1[2] = a1;
  type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[4] = v3;
  v1[5] = v2;
  return _swift_task_switch(sub_100121380, v3, v2);
}

uint64_t sub_100121380()
{
  id v1 = [self sharedAppDelegate];
  if (v1
    && (uint64_t v2 = v1, v3 = [v1 defaultSceneDelegate], v2, v3)
    && (id v4 = [v3 mainViewController], v0[6] = v4,
                                                                                         v3,
                                                                                         v4))
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v0[7] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1001214F8;
    return sub_100152518((uint64_t)v4);
  }
  else
  {
    sub_1000E72E4();
    swift_allocError();
    *uint64_t v7 = 0;
    swift_willThrow();
    swift_release();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_1001214F8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v5 = sub_1001216A8;
  }
  else {
    uint64_t v5 = sub_100121634;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100121634()
{
  id v1 = *(void **)(v0 + 48);
  swift_release();
  static IntentResult.result<>()();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001216A8()
{
  id v1 = *(void **)(v0 + 48);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100121714@<X0>(uint64_t a1@<X8>)
{
  return sub_100128CD0(&qword_100264580, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1002753D8, a1);
}

uint64_t sub_100121740(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100031604;
  return sub_1001212E8(a1);
}

uint64_t sub_1001217D8(uint64_t a1)
{
  unint64_t v2 = sub_100121178();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100121818()
{
  unint64_t result = qword_1002682C8;
  if (!qword_1002682C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002682C8);
  }
  return result;
}

uint64_t sub_10012186C(uint64_t a1)
{
  return sub_100124100(a1, qword_1002753F0);
}

uint64_t sub_100121890(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  void v2[5] = a2;
  type metadata accessor for MainActor();
  v2[6] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[7] = v4;
  v2[8] = v3;
  return _swift_task_switch(sub_100121928, v4, v3);
}

uint64_t sub_100121928()
{
  IntentParameter.wrappedValue.getter();
  uint64_t v1 = v0[2];
  v0[9] = v1;
  uint64_t v2 = IntentParameter.projectedValue.getter();
  v0[10] = v2;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100268910 + dword_100268910);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  void *v3 = v0;
  v3[1] = sub_1001219F4;
  return v5(v1, v2);
}

uint64_t sub_1001219F4(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 96) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(void *)(v2 + 56);
  return _swift_task_switch(sub_100121B5C, v4, v3);
}

uint64_t sub_100121B5C()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  v0[13] = v2;
  v0[14] = *(void *)(v2 - 8);
  uint64_t v3 = swift_task_alloc();
  v0[15] = v3;
  type metadata accessor for String.LocalizationValue.StringInterpolation();
  swift_task_alloc();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v4._object = (void *)0x80000001001EB1E0;
  v4._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v4);
  v0[3] = *(void *)(v1 + 16);
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v5);
  LocalizedStringResource.init(stringInterpolation:)();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100268670 + dword_100268670);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[16] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100121D18;
  uint64_t v7 = v0[5];
  return v9(v7, v3);
}

uint64_t sub_100121D18()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 56);
    uint64_t v4 = *(void *)(v2 + 64);
    Swift::String v5 = sub_100121F40;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 56);
    uint64_t v4 = *(void *)(v2 + 64);
    Swift::String v5 = sub_100121E34;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100121E34()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  swift_release();
  id v4 = [self sharedRecordingsModelInteractor];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 deleteRecordingsWithUUIDs:isa];

  static IntentResult.result<>()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100121F40()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  id v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100121FD4(uint64_t a1, uint64_t a2)
{
  v2[4] = a2;
  uint64_t v4 = type metadata accessor for ConfirmationActionName();
  void v2[5] = v4;
  v2[6] = *(void *)(v4 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ConfirmationConditions();
  v2[8] = v5;
  v2[9] = *(void *)(v5 - 8);
  v2[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for IntentDialog();
  v2[11] = v6;
  v2[12] = *(void *)(v6 - 8);
  v2[13] = swift_task_alloc();
  v2[2] = a1;
  type metadata accessor for MainActor();
  v2[14] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[15] = v8;
  v2[16] = v7;
  return _swift_task_switch(sub_100122188, v8, v7);
}

uint64_t sub_100122188()
{
  id v1 = [self sharedSettingsUserDefaults];
  if (v1)
  {
    uint64_t v2 = v1;
    unsigned __int8 v3 = [v1 rc_deletionIsImmediate];

    if (v3)
    {
      uint64_t v4 = *(void *)(type metadata accessor for LocalizedStringResource() - 8);
      swift_task_alloc();
      (*(void (**)(void))(v4 + 16))();
      IntentDialog.init(_:)();
      swift_task_dealloc();
      v0[3] = _swiftEmptyArrayStorage;
      sub_10012EC80((unint64_t *)&qword_100265E90, (void (*)(uint64_t))&type metadata accessor for ConfirmationConditions);
      sub_100028654(&qword_100265E98);
      sub_100027F5C(&qword_100265EA0, &qword_100265E98);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      static ConfirmationActionName.continue.getter();
      uint64_t v5 = (void *)swift_task_alloc();
      v0[17] = v5;
      unint64_t v6 = sub_100031520();
      *uint64_t v5 = v0;
      v5[1] = sub_1001224A8;
      uint64_t v7 = v0[13];
      uint64_t v8 = v0[10];
      uint64_t v9 = v0[7];
      return AppIntent.requestConfirmation(conditions:actionName:dialog:)(v8, v9, v7, &type metadata for DeleteRecording, v6);
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    swift_release();
    sub_1000E74DC();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
  }
  return v10();
}

uint64_t sub_1001224A8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[10];
  uint64_t v4 = v2[9];
  uint64_t v5 = v2[8];
  (*(void (**)(void, void))(v2[6] + 8))(v2[7], v2[5]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = v2[16];
  uint64_t v7 = v2[15];
  if (v0) {
    uint64_t v8 = sub_100122734;
  }
  else {
    uint64_t v8 = sub_10012268C;
  }
  return _swift_task_switch(v8, v7, v6);
}

uint64_t sub_10012268C()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100122734()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001227DC()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t sub_100122814()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100122830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100123E18(a1, a2, a3, (void (*)(void))sub_100031520);
}

uint64_t sub_10012285C@<X0>(uint64_t a1@<X8>)
{
  return sub_100128CD0(&qword_100264588, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1002753F0, a1);
}

uint64_t sub_100122888(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100031604;
  return sub_100121890(a1, v4);
}

uint64_t sub_100122928@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10012A660();
  *a1 = result;
  return result;
}

uint64_t sub_100122950(uint64_t a1)
{
  return sub_10012375C(a1, qword_100275408);
}

uint64_t sub_100122974(char *a1, char *a2)
{
  return sub_100166D04(*a1, *a2);
}

unint64_t sub_100122984()
{
  unint64_t result = qword_1002682E8;
  if (!qword_1002682E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002682E8);
  }
  return result;
}

Swift::Int sub_1001229D8()
{
  return Hasher._finalize()();
}

uint64_t sub_100122A68()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100122AE4()
{
  return Hasher._finalize()();
}

uint64_t sub_100122B70@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_100223828;
  return sub_100123AAC(v2, a1, a2);
}

void sub_100122B7C(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000010;
  if (*v1) {
    unint64_t v2 = 0x656C695370696B73;
  }
  unint64_t v3 = 0x80000001001EA040;
  if (*v1) {
    unint64_t v3 = 0xEB0000000065636ELL;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_100122BCC()
{
  unint64_t result = qword_1002682F0;
  if (!qword_1002682F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002682F0);
  }
  return result;
}

unint64_t sub_100122C24()
{
  unint64_t result = qword_1002682F8;
  if (!qword_1002682F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002682F8);
  }
  return result;
}

unint64_t sub_100122C7C()
{
  unint64_t result = qword_100268300;
  if (!qword_100268300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268300);
  }
  return result;
}

void *sub_100122CD0()
{
  return &protocol witness table for String;
}

unint64_t sub_100122CE0()
{
  unint64_t result = qword_100268308;
  if (!qword_100268308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268308);
  }
  return result;
}

unint64_t sub_100122D38()
{
  unint64_t result = qword_100268310;
  if (!qword_100268310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268310);
  }
  return result;
}

unint64_t sub_100122D90()
{
  unint64_t result = qword_100268318;
  if (!qword_100268318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268318);
  }
  return result;
}

unint64_t sub_100122DE8()
{
  unint64_t result = qword_100268320;
  if (!qword_100268320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268320);
  }
  return result;
}

uint64_t sub_100122E3C@<X0>(uint64_t a1@<X8>)
{
  return sub_100128CD0(&qword_100264590, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100275408, a1);
}

uint64_t sub_100122E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100123E18(a1, a2, a3, (void (*)(void))sub_100122EA0);
}

unint64_t sub_100122EA0()
{
  unint64_t result = qword_100268328;
  if (!qword_100268328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268328);
  }
  return result;
}

uint64_t sub_100122EF4(uint64_t a1)
{
  unint64_t v2 = sub_100122EA0();

  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100122F44()
{
  unint64_t result = qword_100268330;
  if (!qword_100268330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268330);
  }
  return result;
}

unint64_t sub_100122F9C()
{
  unint64_t result = qword_100268338;
  if (!qword_100268338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268338);
  }
  return result;
}

unint64_t sub_100122FF4()
{
  unint64_t result = qword_100268340;
  if (!qword_100268340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268340);
  }
  return result;
}

uint64_t sub_10012304C(uint64_t a1)
{
  unint64_t v2 = sub_100122DE8();

  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_100123098()
{
  return sub_100027F5C(&qword_100268348, &qword_100268350);
}

void sub_1001230D4(void *a1@<X8>)
{
  *a1 = &off_100223878;
}

unint64_t sub_1001230E8()
{
  unint64_t result = qword_100268358;
  if (!qword_100268358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268358);
  }
  return result;
}

uint64_t sub_100123140(uint64_t a1)
{
  return sub_100124100(a1, qword_100275420);
}

uint64_t sub_100123164()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t sub_100123188(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ChangeOperation();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  IntentParameter.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*sub_100123278(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_1001232D4;
}

uint64_t sub_1001232D8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = IntentParameter.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100123314()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t (*sub_10012334C(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_1001232D4;
}

uint64_t sub_1001233AC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001233C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100123E18(a1, a2, a3, (void (*)(void))sub_100031648);
}

uint64_t sub_1001233F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100128CD0(&qword_100264598, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100275420, a1);
}

uint64_t sub_100123420(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10012EE0C, 0, 0);
}

uint64_t sub_100123440@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10012AAA4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_10012346C()
{
  unint64_t result = qword_100268378;
  if (!qword_100268378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268378);
  }
  return result;
}

uint64_t sub_1001234C4(uint64_t a1)
{
  return sub_100124100(a1, qword_100275438);
}

__n128 sub_1001234E8@<Q0>(uint64_t a1@<X8>)
{
  IntentParameter.wrappedValue.getter();
  __n128 result = v4;
  *(void *)a1 = v3;
  *(__n128 *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_100123530()
{
  return swift_bridgeObjectRelease();
}

void sub_1001235C8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

uint64_t sub_100123618()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100123634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100123E18(a1, a2, a3, (void (*)(void))sub_100031754);
}

uint64_t sub_100123660@<X0>(uint64_t a1@<X8>)
{
  return sub_100128CD0(&qword_1002645A0, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100275438, a1);
}

uint64_t sub_10012368C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_1001236AC, 0, 0);
}

uint64_t sub_1001236AC()
{
  static IntentResult.result<>()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100123710@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10012B008();
  *a1 = result;
  return result;
}

uint64_t sub_100123738(uint64_t a1)
{
  return sub_10012375C(a1, qword_100275450);
}

uint64_t sub_10012375C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for TypeDisplayRepresentation();
  sub_100031F50(v3, a2);
  sub_10002272C(v3, (uint64_t)a2);
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v6 = sub_100028654(&qword_100268B00);
  __n128 v7 = __chkstk_darwin(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))((char *)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v4, v7);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t sub_1001238BC(char *a1, char *a2)
{
  return sub_100166ED8(*a1, *a2);
}

unint64_t sub_1001238CC()
{
  unint64_t result = qword_100268398;
  if (!qword_100268398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268398);
  }
  return result;
}

Swift::Int sub_100123920()
{
  return Hasher._finalize()();
}

uint64_t sub_1001239A8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100123A1C()
{
  return Hasher._finalize()();
}

uint64_t sub_100123AA0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_100223918;
  return sub_100123AAC(v2, a1, a2);
}

uint64_t sub_100123AAC@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void sub_100123B08(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6563655274736F6DLL;
  if (*v1) {
    uint64_t v2 = 0x6369666963657073;
  }
  unint64_t v3 = 0xEA0000000000746ELL;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_100123B50()
{
  unint64_t result = qword_1002683A0;
  if (!qword_1002683A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002683A0);
  }
  return result;
}

unint64_t sub_100123BA8()
{
  unint64_t result = qword_1002683A8;
  if (!qword_1002683A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002683A8);
  }
  return result;
}

unint64_t sub_100123C00()
{
  unint64_t result = qword_1002683B0;
  if (!qword_1002683B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002683B0);
  }
  return result;
}

unint64_t sub_100123C58()
{
  unint64_t result = qword_1002683B8;
  if (!qword_1002683B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002683B8);
  }
  return result;
}

unint64_t sub_100123CB0()
{
  unint64_t result = qword_1002683C0;
  if (!qword_1002683C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002683C0);
  }
  return result;
}

unint64_t sub_100123D08()
{
  unint64_t result = qword_1002683C8;
  if (!qword_1002683C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002683C8);
  }
  return result;
}

unint64_t sub_100123D60()
{
  unint64_t result = qword_1002683D0;
  if (!qword_1002683D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002683D0);
  }
  return result;
}

uint64_t sub_100123DB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100128CD0(&qword_1002645A8, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100275450, a1);
}

uint64_t sub_100123DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100123E18(a1, a2, a3, (void (*)(void))sub_100123E60);
}

uint64_t sub_100123E18(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100123E60()
{
  unint64_t result = qword_1002683D8;
  if (!qword_1002683D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002683D8);
  }
  return result;
}

uint64_t sub_100123EB4(uint64_t a1)
{
  unint64_t v2 = sub_100123E60();

  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100123F04()
{
  unint64_t result = qword_1002683E0;
  if (!qword_1002683E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002683E0);
  }
  return result;
}

unint64_t sub_100123F5C()
{
  unint64_t result = qword_1002683E8;
  if (!qword_1002683E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002683E8);
  }
  return result;
}

unint64_t sub_100123FB4()
{
  unint64_t result = qword_1002683F0;
  if (!qword_1002683F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002683F0);
  }
  return result;
}

uint64_t sub_10012400C(uint64_t a1)
{
  unint64_t v2 = sub_100123D60();

  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_100124058()
{
  return sub_100027F5C(&qword_1002683F8, &qword_100268400);
}

void sub_100124094(void *a1@<X8>)
{
  *a1 = &off_1002238A0;
}

uint64_t sub_1001240A4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001240C0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001240DC(uint64_t a1)
{
  return sub_100124100(a1, qword_100275468);
}

uint64_t sub_100124100(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  sub_100031F50(v3, a2);
  sub_10002272C(v3, (uint64_t)a2);
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t sub_100124160()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

double sub_100124194@<D0>(uint64_t a1@<X8>)
{
  IntentParameter.wrappedValue.getter();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_1001241D8()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_1001241FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v1 = sub_100028654(&qword_100268608);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v26 = v1;
  uint64_t v27 = v2;
  __chkstk_darwin(v1);
  uint64_t v24 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v25 = (char *)v22 - v5;
  uint64_t v6 = sub_100028654(&qword_100268610);
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v11 = (char *)v22 - v10;
  __chkstk_darwin(v12);
  uint64_t v23 = (char *)v22 - v13;
  char v33 = 0;
  uint64_t v30 = sub_100028654(&qword_100268618);
  v22[0] = sub_10003658C();
  unint64_t v29 = sub_100123D08();
  v22[1] = sub_100027F5C(&qword_100268620, &qword_100268618);
  ParameterSummaryCaseCondition.init(_:_:)();
  sub_100027F5C(&qword_100268628, &qword_100268610);
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)();
  uint64_t v14 = v31 + 8;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v31 + 8);
  v15(v11, v6);
  uint64_t v31 = v14;
  char v32 = 1;
  ParameterSummaryCaseCondition.init(_:_:)();
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)();
  v15(v8, v6);
  unint64_t v16 = v24;
  ParameterSummaryDefaultCaseCondition.init(_:)();
  sub_100027F5C(&qword_100268630, &qword_100268608);
  id v17 = v25;
  uint64_t v18 = v26;
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v27 + 8);
  v19(v16, v18);
  __n128 v20 = v23;
  static ParameterSummaryCaseBuilder.buildBlock<A, B, C>(_:_:_:)();
  v19(v17, v18);
  v15(v11, v6);
  return ((uint64_t (*)(char *, uint64_t))v15)(v20, v6);
}

uint64_t sub_100124698@<X0>(uint64_t a1@<X8>)
{
  v15[1] = a1;
  uint64_t v1 = sub_100028654(&qword_100268638);
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = sub_100028654(&qword_100268640);
  __chkstk_darwin(v2);
  uint64_t v3 = sub_100028654(&qword_100268618);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v15 - v8;
  sub_10003658C();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._object = (void *)0x80000001001EDE90;
  v10._uint64_t countAndFlagsBits = 0xD000000000000031;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  swift_getKeyPath();
  sub_100028654(&qword_100268648);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v11._uint64_t countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  swift_getKeyPath();
  sub_100028654(&qword_100268650);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v12);
  ParameterSummaryString.init(stringInterpolation:)();
  IntentParameterSummary.init(_:table:)();
  sub_100027F5C(&qword_100268620, &qword_100268618);
  static ParameterSummaryBuilder.buildExpression<A>(_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v6, v3);
  static ParameterSummaryBuilder.buildBlock<A>(_:)();
  return ((uint64_t (*)(char *, uint64_t))v13)(v9, v3);
}

uint64_t sub_10012499C@<X0>(uint64_t a1@<X8>)
{
  v14[1] = a1;
  uint64_t v1 = sub_100028654(&qword_100268638);
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = sub_100028654(&qword_100268640);
  __chkstk_darwin(v2);
  uint64_t v3 = sub_100028654(&qword_100268618);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v14 - v8;
  sub_10003658C();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._object = (void *)0x80000001001EDE50;
  v10._uint64_t countAndFlagsBits = 0xD000000000000034;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  swift_getKeyPath();
  sub_100028654(&qword_100268648);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)();
  IntentParameterSummary.init(_:table:)();
  sub_100027F5C(&qword_100268620, &qword_100268618);
  static ParameterSummaryBuilder.buildExpression<A>(_:)();
  Swift::String v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, v3);
  static ParameterSummaryBuilder.buildBlock<A>(_:)();
  return ((uint64_t (*)(char *, uint64_t))v12)(v9, v3);
}

uint64_t sub_100124C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  void v3[9] = a3;
  v3[7] = a1;
  type metadata accessor for MainActor();
  v3[10] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[11] = v5;
  v3[12] = v4;
  return _swift_task_switch(sub_100124CF8, v5, v4);
}

uint64_t sub_100124CF8()
{
  sub_1000E2280(v0 + 2);
  uint64_t v1 = sub_10001510C(v0 + 2, v0[5]);
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  void *v4 = v0;
  v4[1] = sub_100124E00;
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  return sub_100155130(v6, v5, v3, v2);
}

uint64_t sub_100124E00()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 96);
  uint64_t v4 = *(void *)(v2 + 88);
  if (v0) {
    uint64_t v5 = sub_1000E2210;
  }
  else {
    uint64_t v5 = sub_100124F3C;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100124F3C()
{
  swift_release();
  static IntentResult.result<>()();
  sub_10002F48C(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100124FB8@<X0>(uint64_t a1@<X8>)
{
  return sub_100128CD0(&qword_1002645B0, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100275468, a1);
}

uint64_t sub_100124FE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for IntentAuthenticationPolicy.requiresLocalDeviceAuthentication(_:);
  uint64_t v3 = type metadata accessor for IntentAuthenticationPolicy();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_100125058(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = sub_100028654(&qword_1002685F8);
  uint64_t v5 = sub_100027F5C(&qword_100268600, &qword_1002685F8);

  return ParameterSummarySwitchCondition.init(_:_:)(KeyPath, sub_1001241FC, 0, v4, a2, v5);
}

uint64_t sub_100125110(uint64_t a1)
{
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100015B60;
  return sub_100124C5C(a1, v5, v4);
}

uint64_t sub_1001251BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10012B454();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_1001251E8()
{
  unint64_t result = qword_100268420;
  if (!qword_100268420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268420);
  }
  return result;
}

uint64_t sub_10012523C()
{
  sub_100028654(&qword_1002684F0);
  type metadata accessor for _AssistantIntent();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001F4C90;
  sub_10012B454();
  sub_10003658C();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  sub_10012B454();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  sub_1001292D4();
  sub_10003629C();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  sub_100120AF4();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  sub_10012A660();
  sub_100031520();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  sub_10012AAA4();
  sub_100031648();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  sub_10012B008();
  sub_100031754();
  uint64_t result = _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  qword_100275480 = v0;
  return result;
}

uint64_t sub_100125570()
{
  uint64_t v0 = sub_100028654(&qword_1002685D0);
  uint64_t v15 = *(void *)(v0 - 8);
  uint64_t v16 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100028654(&qword_1002685D8);
  __chkstk_darwin(v7);
  sub_10003658C();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v8._uint64_t countAndFlagsBits = 0x2079616C70;
  v8._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v8);
  swift_getKeyPath();
  sub_100123D08();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v9._uint64_t countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v9);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v3);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v11 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v2, v16);
  sub_100028654(&qword_1002685E0);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1001F1BD0;
  *(void *)(v12 + 32) = v11;
  uint64_t v13 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_10012587C(uint64_t a1)
{
  return sub_100127DA8(a1, (uint64_t)&unk_1001F6250, (void (*)(void))sub_100123D08, (void (*)(uint64_t))sub_10003658C);
}

uint64_t sub_1001258C4()
{
  uint64_t v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  sub_100028654(&qword_100268AD0);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1001F1BD0;
  *(void *)(v1 + 32) = v0;
  uint64_t v2 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100125944(uint64_t a1)
{
  uint64_t v27 = a1;
  uint64_t v30 = sub_100028654(&qword_1002685D0);
  uint64_t v28 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  unint64_t v29 = (char *)v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100028654(&qword_1002685D8);
  __chkstk_darwin(v6);
  unint64_t v24 = sub_10003658C();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._uint64_t countAndFlagsBits = 0x2079616C70;
  v7._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v7);
  swift_getKeyPath();
  uint64_t v26 = sub_10012EB48(&qword_1002685C8, &qword_100269EF0, (void (*)(void))sub_100035ED4);
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v8._uint64_t countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v8);
  unsigned int v23 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  uint64_t v22 = *(void (**)(char *))(v3 + 104);
  v22(v5);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  Swift::String v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v20[1] = v3 + 8;
  uint64_t v21 = v9;
  v9(v5, v2);
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  uint64_t v11 = v29;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v25 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v28 = *(void *)(v28 + 8);
  ((void (*)(char *, uint64_t))v28)(v11, v30);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._uint64_t countAndFlagsBits = 0x20796D2079616C70;
  v12._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  ((void (*)(char *, void, uint64_t))v22)(v5, v23, v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v21(v5, v2);
  v13._uint64_t countAndFlagsBits = 32;
  v13._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v13);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v14);
  uint64_t v15 = v29;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v16 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  ((void (*)(char *, uint64_t))v28)(v15, v30);
  sub_100028654(&qword_1002685E0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1001F0FB0;
  *(void *)(v17 + 32) = v25;
  *(void *)(v17 + 40) = v16;
  uint64_t v18 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t sub_100125DE4(uint64_t *a1)
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t sub_100125E38()
{
  uint64_t v0 = type metadata accessor for _AssistantIntent.Value();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  sub_10012EB48(&qword_1002685C8, &qword_100269EF0, (void (*)(void))sub_100035ED4);
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  sub_10003658C();
  _AssistantIntent.Value.init<A>(for:builder:)();
  uint64_t v4 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_100028654(&qword_1002684F8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1001F1BD0;
  *(void *)(v5 + 32) = v4;
  uint64_t v6 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100125FDC(uint64_t a1)
{
  uint64_t v80 = a1;
  uint64_t v1 = sub_100028654(&qword_1002685B0);
  uint64_t v88 = *(void *)(v1 - 8);
  uint64_t v89 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v69 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100028654(&qword_1002685B8);
  __chkstk_darwin(v8);
  unint64_t v9 = sub_10003629C();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._uint64_t countAndFlagsBits = 0x6120657461657263;
  v10._object = (void *)0xED00002077656E20;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  unsigned int v84 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  id v85 = *(void (**)(char *))(v5 + 104);
  uint64_t v86 = v5 + 104;
  v85(v7);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v87 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v83 = v5 + 8;
  v87(v7, v4);
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  unint64_t v78 = v9;
  uint64_t v75 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  Swift::String v12 = *(void (**)(char *, uint64_t))(v88 + 8);
  v88 += 8;
  uint64_t v82 = v12;
  v12(v3, v89);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v13._uint64_t countAndFlagsBits = 0x20657461657243;
  v13._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v13);
  swift_getKeyPath();
  uint64_t v79 = sub_10012EB48((unint64_t *)&unk_100268B10, &qword_1002685A8, (void (*)(void))sub_10012EAAC);
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v14._uint64_t countAndFlagsBits = 544106784;
  v14._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v14);
  uint64_t v77 = v7;
  uint64_t v15 = v84;
  uint64_t v81 = v4;
  uint64_t v16 = (void (*)(char *, uint64_t, uint64_t))v85;
  ((void (*)(char *, void, uint64_t))v85)(v7, v84, v4);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v17 = v87;
  v87(v7, v4);
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  unsigned __int8 v76 = v3;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v74 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v82(v3, v89);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v19._uint64_t countAndFlagsBits = 0x20657461657263;
  v19._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  __n128 v20 = v77;
  uint64_t v21 = v15;
  uint64_t v22 = v81;
  v16(v77, v21, v81);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  unsigned int v23 = v20;
  uint64_t v24 = v22;
  v17(v23, v22);
  v25._uint64_t countAndFlagsBits = 0x2064656D616E20;
  v25._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v25);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v26._uint64_t countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  uint64_t v27 = v76;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v73 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v28 = v82;
  v82(v27, v89);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v29._uint64_t countAndFlagsBits = 0x2061207472617473;
  v29._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  uint64_t v30 = v77;
  ((void (*)(char *, void, uint64_t))v85)(v77, v84, v24);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v87(v30, v24);
  v31._uint64_t countAndFlagsBits = 0x2064656C6C616320;
  v31._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v31);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v32._uint64_t countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v32);
  char v33 = v76;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v72 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v28(v33, v89);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v34._uint64_t countAndFlagsBits = 0x612064726F636572;
  v34._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v34);
  uint64_t v35 = v81;
  ((void (*)(char *, void, uint64_t))v85)(v30, v84, v81);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v87(v30, v35);
  v36._uint64_t countAndFlagsBits = 0x2064656C6C616320;
  v36._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v36);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v37._uint64_t countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v37);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v80 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  long long v38 = v33;
  uint64_t v39 = v89;
  v82(v33, v89);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v40._uint64_t countAndFlagsBits = 0x612064726F636572;
  v40._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v40);
  uint64_t v41 = v84;
  long long v42 = (void (*)(char *, uint64_t, uint64_t))v85;
  ((void (*)(char *, void, uint64_t))v85)(v30, v84, v35);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v87(v30, v35);
  v43._uint64_t countAndFlagsBits = 0;
  v43._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v43);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v79 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v44 = v39;
  __n128 v45 = v82;
  v82(v38, v44);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v46._uint64_t countAndFlagsBits = 0x612064726F636572;
  v46._object = (void *)0xED00002077656E20;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v46);
  uint64_t v47 = v77;
  uint64_t v48 = v41;
  uint64_t v49 = v81;
  v42(v77, v48, v81);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  __n128 v50 = v47;
  uint64_t v51 = v47;
  id v52 = v87;
  v87(v50, v49);
  v53._uint64_t countAndFlagsBits = 0;
  v53._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v53);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v71 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v45(v38, v89);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v54._object = (void *)0x80000001001EDDF0;
  v54._uint64_t countAndFlagsBits = 0xD000000000000012;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v54);
  uint64_t v55 = v81;
  ((void (*)(char *, void, uint64_t))v85)(v51, v84, v81);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v52(v51, v55);
  v56._uint64_t countAndFlagsBits = 0;
  v56._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v56);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v70 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v57 = v89;
  long long v58 = v82;
  v82(v38, v89);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v59._uint64_t countAndFlagsBits = 0xD000000000000016;
  v59._object = (void *)0x80000001001EDE10;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v59);
  ((void (*)(char *, void, uint64_t))v85)(v51, v84, v55);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v87(v51, v55);
  v60._uint64_t countAndFlagsBits = 0;
  v60._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v60);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v61 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v58(v38, v57);
  sub_100028654(&qword_1002685C0);
  uint64_t v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = xmmword_1001F4CA0;
  uint64_t v63 = v74;
  *(void *)(v62 + 32) = v75;
  *(void *)(v62 + 40) = v63;
  uint64_t v64 = v72;
  *(void *)(v62 + 48) = v73;
  *(void *)(v62 + 56) = v64;
  uint64_t v65 = v79;
  *(void *)(v62 + 64) = v80;
  *(void *)(v62 + 72) = v65;
  uint64_t v66 = v70;
  *(void *)(v62 + 80) = v71;
  *(void *)(v62 + 88) = v66;
  *(void *)(v62 + 96) = v61;
  uint64_t v67 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v67;
}

uint64_t sub_100126BA4()
{
  uint64_t v0 = type metadata accessor for _AssistantIntent.Value();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  sub_10012EB48((unint64_t *)&unk_100268B10, &qword_1002685A8, (void (*)(void))sub_10012EAAC);
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  sub_10003629C();
  _AssistantIntent.Value.init<A>(for:builder:)();
  uint64_t v4 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_100028654(&qword_1002684F8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1001F1BD0;
  *(void *)(v5 + 32) = v4;
  uint64_t v6 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100126D44()
{
  uint64_t v18 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v0 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100028654(&qword_100268590);
  __chkstk_darwin(v3);
  uint64_t v4 = sub_100028654(&qword_100268598);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100120AF4();
  _AssistantIntent.Phrase.init(stringLiteral:)();
  uint64_t v19 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v5 + 8);
  v8(v7, v4);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._uint64_t countAndFlagsBits = 0x20796D20706F7473;
  v9._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v9);
  uint64_t v10 = v18;
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v2, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v18);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v10);
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v12 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v8(v7, v4);
  _AssistantIntent.Phrase.init(stringLiteral:)();
  uint64_t v13 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v8(v7, v4);
  _AssistantIntent.Phrase.init(stringLiteral:)();
  uint64_t v14 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v8(v7, v4);
  sub_100028654(&qword_1002685A0);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1001F4CB0;
  *(void *)(v15 + 32) = v19;
  *(void *)(v15 + 40) = v12;
  *(void *)(v15 + 48) = v13;
  *(void *)(v15 + 56) = v14;
  uint64_t v16 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_1001270F8(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_100268568);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v50 = v2;
  uint64_t v51 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::String v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100028654(&qword_100268570);
  __chkstk_darwin(v10);
  sub_100031520();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v11._uint64_t countAndFlagsBits = 0x206574656C6544;
  v11._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  unsigned int v46 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  uint64_t v12 = *(void (**)(void))(v7 + 104);
  uint64_t v44 = v7 + 104;
  __n128 v45 = (void (*)(char *, void, uint64_t))v12;
  uint64_t v41 = v6;
  v12(v9);
  Swift::String v40 = v9;
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v42 = v7 + 8;
  Swift::String v43 = v13;
  v13(v9, v6);
  v14._uint64_t countAndFlagsBits = 32;
  v14._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v14);
  swift_getKeyPath();
  uint64_t v15 = sub_10012EB48(&qword_100268560, qword_100268248, (void (*)(void))sub_100035ED4);
  uint64_t v48 = a1;
  uint64_t v49 = v15;
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v47 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v17 = v50;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v51 + 8);
  v51 += 8;
  Swift::String v37 = v18;
  v18(v5, v50);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v19._object = (void *)0x80000001001EDD20;
  v19._uint64_t countAndFlagsBits = 0xD000000000000011;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v39 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v21 = v17;
  uint64_t v22 = v37;
  v37(v5, v21);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v23._uint64_t countAndFlagsBits = 0xD000000000000019;
  v23._object = (void *)0x80000001001EDD40;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v23);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v24._uint64_t countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v38 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v25 = v50;
  v22(v5, v50);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v26._uint64_t countAndFlagsBits = 0x206574656C6564;
  v26._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  uint64_t v27 = v40;
  uint64_t v28 = v41;
  v45(v40, v46, v41);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v43(v27, v28);
  v29._uint64_t countAndFlagsBits = 0x2064656C6C616320;
  v29._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v30._uint64_t countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v30);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v22(v5, v25);
  sub_100028654(&qword_100268578);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_1001F4CB0;
  uint64_t v33 = v39;
  *(void *)(v32 + 32) = v47;
  *(void *)(v32 + 40) = v33;
  *(void *)(v32 + 48) = v38;
  *(void *)(v32 + 56) = v31;
  uint64_t v34 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t sub_100127754()
{
  uint64_t v0 = type metadata accessor for _AssistantIntent.Value();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  sub_10012EB48(&qword_100268560, qword_100268248, (void (*)(void))sub_100035ED4);
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  sub_100031520();
  _AssistantIntent.Value.init<A>(for:builder:)();
  uint64_t v4 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_100028654(&qword_1002684F8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1001F1BD0;
  *(void *)(v5 + 32) = v4;
  uint64_t v6 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1001278F4(uint64_t a1)
{
  uint64_t v26 = a1;
  uint64_t v1 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v29 = *(void *)(v1 - 8);
  uint64_t v30 = v1;
  __chkstk_darwin(v1);
  uint64_t v28 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100028654(&qword_100268520);
  __chkstk_darwin(v3);
  uint64_t v4 = sub_100028654(&qword_100268528);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100031648();
  _AssistantIntent.Phrase.init(stringLiteral:)();
  uint64_t v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23[1] = v5 + 8;
  uint64_t v24 = v4;
  v8(v7, v4);
  Swift::String v9 = v8;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._uint64_t countAndFlagsBits = 0xD000000000000028;
  v10._object = (void *)0x80000001001EDC10;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  swift_getKeyPath();
  unint64_t v25 = sub_100122D90();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v27 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v8(v7, v4);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._uint64_t countAndFlagsBits = 0x2065676E616863;
  v12._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  uint64_t v13 = v28;
  uint64_t v14 = v29;
  uint64_t v15 = v30;
  (*(void (**)(char *, void, uint64_t))(v29 + 104))(v28, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v30);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v13, v15);
  v16._uint64_t countAndFlagsBits = 0x676E697474657320;
  v16._object = (void *)0xEC000000206F7420;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v18 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v9(v7, v24);
  sub_100028654(&qword_100268530);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1001F2610;
  uint64_t v20 = v27;
  *(void *)(v19 + 32) = v31;
  *(void *)(v19 + 40) = v20;
  *(void *)(v19 + 48) = v18;
  uint64_t v21 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_100127D60(uint64_t a1)
{
  return sub_100127DA8(a1, (uint64_t)&unk_1001F61B0, (void (*)(void))sub_100122D90, (void (*)(uint64_t))sub_100031648);
}

uint64_t sub_100127DA8(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(uint64_t))
{
  uint64_t v6 = type metadata accessor for _AssistantIntent.Value();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::String v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  a3();
  _AssistantIntent.IntentProjection.subscript.getter();
  uint64_t v10 = swift_release();
  a4(v10);
  _AssistantIntent.Value.init<A>(for:builder:)();
  uint64_t v11 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_100028654(&qword_1002684F8);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1001F1BD0;
  *(void *)(v12 + 32) = v11;
  uint64_t v13 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_100127F20()
{
  uint64_t v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  sub_100028654(&qword_100268AD0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1001F2610;
  *(void *)(v3 + 32) = v0;
  *(void *)(v3 + 40) = v1;
  *(void *)(v3 + 48) = v2;
  uint64_t v4 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100127FE8(uint64_t a1)
{
  uint64_t v35 = a1;
  uint64_t v31 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v36 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v2 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100028654(&qword_100268500);
  uint64_t v29 = v3;
  uint64_t v37 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100028654(&qword_100268508);
  __chkstk_darwin(v6);
  sub_100031754();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._uint64_t countAndFlagsBits = 0x636572206E65706FLL;
  v7._object = (void *)0xEF20676E6964726FLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v7);
  swift_getKeyPath();
  unint64_t v34 = sub_100035ED4();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v8);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v9 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v37 + 8);
  v37 += 8;
  uint64_t v32 = v9;
  uint64_t v33 = v10;
  v10(v5, v3);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v11._uint64_t countAndFlagsBits = 0x206E65706FLL;
  v11._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  unsigned int v28 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  uint64_t v12 = v36;
  uint64_t v27 = *(void (**)(char *))(v36 + 104);
  uint64_t v13 = v31;
  v27(v2);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v36 = v12 + 8;
  uint64_t v26 = v14;
  v14(v2, v13);
  v15._uint64_t countAndFlagsBits = 32;
  v15._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v30 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v17 = v29;
  v33(v5, v29);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v18._uint64_t countAndFlagsBits = 0x207463656C6573;
  v18._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  ((void (*)(char *, void, uint64_t))v27)(v2, v28, v13);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v26(v2, v13);
  v19._uint64_t countAndFlagsBits = 32;
  v19._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v21 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v33(v5, v17);
  sub_100028654(&qword_100268510);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1001F2610;
  uint64_t v23 = v30;
  *(void *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = v23;
  *(void *)(v22 + 48) = v21;
  uint64_t v24 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t sub_100128534()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001285DC(uint64_t a1)
{
  return sub_100127DA8(a1, (uint64_t)&unk_1001F6188, (void (*)(void))sub_100035ED4, (void (*)(uint64_t))sub_100031754);
}

uint64_t sub_100128624()
{
  uint64_t v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v6 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v7 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  sub_100028654(&qword_100268AD0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1001F4CC0;
  *(void *)(v8 + 32) = v0;
  *(void *)(v8 + 40) = v1;
  *(void *)(v8 + 48) = v2;
  *(void *)(v8 + 56) = v3;
  *(void *)(v8 + 64) = v4;
  *(void *)(v8 + 72) = v5;
  *(void *)(v8 + 80) = v6;
  *(void *)(v8 + 88) = v7;
  uint64_t v9 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v9;
}

void sub_1001287B4()
{
  qword_100275488 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_1001287C8(uint64_t a1, uint64_t a2)
{
  return sub_100128814(a1, a2, &qword_1002645B8);
}

uint64_t sub_1001287F0(uint64_t a1, uint64_t a2)
{
  return sub_100128814(a1, a2, &qword_1002645C0);
}

uint64_t sub_100128814(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

unint64_t sub_100128868()
{
  unint64_t result = qword_100268428[0];
  if (!qword_100268428[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100268428);
  }
  return result;
}

uint64_t sub_1001288BC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1002684E8 + dword_1002684E8);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100128960;
  return v4();
}

uint64_t sub_100128960(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t sub_100128A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100015B60;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

unint64_t sub_100128B28()
{
  unint64_t result = qword_100268440[0];
  if (!qword_100268440[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100268440);
  }
  return result;
}

uint64_t sub_100128B7C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10012EE04;
  return sub_10012C418();
}

uint64_t sub_100128C0C()
{
  uint64_t v0 = type metadata accessor for ShortcutTileColor();
  sub_100031F50(v0, qword_100275490);
  uint64_t v1 = sub_10002272C(v0, (uint64_t)qword_100275490);
  uint64_t v2 = enum case for ShortcutTileColor.red(_:);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 104);

  return v3(v1, v2, v0);
}

uint64_t sub_100128C98@<X0>(uint64_t a1@<X8>)
{
  return sub_100128CD0(&qword_1002645C8, (uint64_t (*)(void))&type metadata accessor for ShortcutTileColor, (uint64_t)qword_100275490, a1);
}

uint64_t sub_100128CD0@<X0>(void *a1@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = sub_10002272C(v7, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

ValueMetadata *type metadata accessor for RecordingAppShortcuts()
{
  return &type metadata for RecordingAppShortcuts;
}

ValueMetadata *type metadata accessor for DeletableRecordingsOptionsProvider()
{
  return &type metadata for DeletableRecordingsOptionsProvider;
}

ValueMetadata *type metadata accessor for AllRecordingsOptionsProvider()
{
  return &type metadata for AllRecordingsOptionsProvider;
}

ValueMetadata *type metadata accessor for RecordingAssistantIntents()
{
  return &type metadata for RecordingAssistantIntents;
}

uint64_t destroy for PlayRecording()
{
  swift_release();

  return swift_release();
}

ValueMetadata *type metadata accessor for PlayRecording()
{
  return &type metadata for PlayRecording;
}

ValueMetadata *type metadata accessor for PlaybackType()
{
  return &type metadata for PlaybackType;
}

ValueMetadata *type metadata accessor for SelectRecording()
{
  return &type metadata for SelectRecording;
}

void *_s10VoiceMemos13PlayRecordingVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for RCControlCenterToggleRecording(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for RCControlCenterToggleRecording(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ChangeRecordingPlaybackSetting()
{
  return &type metadata for ChangeRecordingPlaybackSetting;
}

unsigned char *_s10VoiceMemos12PlaybackTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100128FECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordingSettingType()
{
  return &type metadata for RecordingSettingType;
}

ValueMetadata *type metadata accessor for DeleteRecording()
{
  return &type metadata for DeleteRecording;
}

ValueMetadata *type metadata accessor for ToggleRecording()
{
  return &type metadata for ToggleRecording;
}

ValueMetadata *type metadata accessor for StopRecording()
{
  return &type metadata for StopRecording;
}

ValueMetadata *type metadata accessor for CreateRecording()
{
  return &type metadata for CreateRecording;
}

ValueMetadata *type metadata accessor for RCRecordingEntityStringQuery()
{
  return &type metadata for RCRecordingEntityStringQuery;
}

void *assignWithCopy for RCRecordingEntity(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for RCRecordingEntity(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RCRecordingEntity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RCRecordingEntity(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RCRecordingEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RCRecordingEntity()
{
  return &type metadata for RCRecordingEntity;
}

uint64_t sub_100129220()
{
  return sub_100027F5C(&qword_100268458, &qword_100268460);
}

uint64_t sub_10012925C()
{
  return sub_100027F5C((unint64_t *)&qword_100265A50, (uint64_t *)&unk_100268AA0);
}

uint64_t sub_100129298()
{
  return sub_100027F5C(&qword_100268468, &qword_100268470);
}

uint64_t sub_1001292D4()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  long long v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100028654((uint64_t *)&unk_100265EB0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100028654((uint64_t *)&unk_100268B40);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100028654(&qword_100267F38);
  uint64_t v10 = type metadata accessor for LocalizedStringResource();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v12 = sub_100028654(&qword_100268B00);
  __chkstk_darwin(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))((char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v10);
  uint64_t v14 = type metadata accessor for String.IntentInputOptions();
  v17[0] = 0;
  v17[1] = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  IntentDialog.init(stringLiteral:)();
  uint64_t v15 = type metadata accessor for IntentDialog();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v6, 0, 1, v15);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t sub_10012961C(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 64) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001296B4, v3, v2);
}

uint64_t sub_1001296B4()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_release();
  uint64_t v2 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = v0;
    uint64_t v5 = *(void *)(v0 + 56);
    unsigned int v6 = self;
    swift_bridgeObjectRetain();
    uint64_t v7 = v5 + 40;
    do
    {
      swift_bridgeObjectRetain();
      id v8 = [v6 sharedRecordingsModelInteractor];
      NSString v9 = String._bridgeToObjectiveC()();
      id v10 = [v8 recordingForUUID:v9];

      swift_bridgeObjectRelease();
      if (v10)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v7 += 16;
      --v3;
    }
    while (v3);
    uint64_t v0 = v4;
    swift_bridgeObjectRelease();
    uint64_t v2 = _swiftEmptyArrayStorage;
  }
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v11 = result;
    uint64_t v43 = v0;
    if (result) {
      goto LABEL_11;
    }
LABEL_32:
    uint64_t v47 = _swiftEmptyArrayStorage;
LABEL_33:
    swift_bridgeObjectRelease_n();
    uint64_t v42 = *(uint64_t (**)(void *))(v43 + 8);
    return v42(v47);
  }
  uint64_t v11 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v43 = v0;
  if (!v11) {
    goto LABEL_32;
  }
LABEL_11:
  if (v11 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v44 = (long long *)(v0 + 16);
    uint64_t v47 = _swiftEmptyArrayStorage;
    uint64_t v14 = &selRef_splitViewController_willTransitionFromHorizontalSizeClass_toHorizontalSizeClass_;
    while (1)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v15 = (id)v2[v13 + 4];
      }
      Swift::String v16 = v15;
      id v17 = [v15 v14[390] v43];
      if (v17)
      {
        Swift::String v18 = v17;
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;

        id v22 = [v16 title];
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v50 = v21;
          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v48 = v25;

          uint64_t v26 = type metadata accessor for Date();
          uint64_t v27 = *(void *)(v26 - 8);
          uint64_t v49 = swift_task_alloc();
          id v28 = [v16 creationDate];
          sub_100028654(&qword_100265A20);
          uint64_t v29 = swift_task_alloc();
          uint64_t v30 = v29;
          if (v28)
          {
            double v45 = *(double *)&v24;
            uint64_t v46 = v19;
            uint64_t v31 = v11;
            uint64_t v32 = v2;
            uint64_t v33 = swift_task_alloc();
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            unint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
            v34(v30, v33, v26);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v30, 0, 1, v26);
            uint64_t v2 = v32;
            uint64_t v11 = v31;
            swift_task_dealloc();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v30, 1, v26) != 1)
            {
              v34(v49, v30, v26);
              swift_task_dealloc();
              uint64_t v35 = (char *)swift_task_alloc();
              (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v35, v49, v26);
              [v16 length];
              sub_1000273E0(v46, v50, v45, v48, v35, v44, v36);
              (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v49, v26);

              swift_task_dealloc();
              swift_task_dealloc();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v47 = sub_10015DF04(0, v47[2] + 1, 1, v47);
              }
              unint64_t v38 = v47[2];
              unint64_t v37 = v47[3];
              if (v38 >= v37 >> 1) {
                uint64_t v47 = sub_10015DF04((void *)(v37 > 1), v38 + 1, 1, v47);
              }
              v47[2] = v38 + 1;
              uint64_t v39 = &v47[5 * v38];
              long long v40 = *v44;
              long long v41 = v44[1];
              v39[8] = *((void *)v44 + 4);
              *((_OWORD *)v39 + 2) = v40;
              *((_OWORD *)v39 + 3) = v41;
              goto LABEL_30;
            }
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v29, 1, 1, v26);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000285F8(v30, &qword_100265A20);

          swift_task_dealloc();
          swift_task_dealloc();
LABEL_30:
          uint64_t v14 = &selRef_splitViewController_willTransitionFromHorizontalSizeClass_toHorizontalSizeClass_;
          goto LABEL_15;
        }
        swift_bridgeObjectRelease();
      }

LABEL_15:
      if (v11 == ++v13) {
        goto LABEL_33;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100129C60(uint64_t a1, uint64_t a2)
{
  v2[16] = a1;
  v2[17] = a2;
  type metadata accessor for MainActor();
  v2[18] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100129D2C, v4, v3);
}

uint64_t sub_100129D2C()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[16];
  swift_release();
  id v3 = [self sharedApplicationModel];
  v0[7] = v2;
  v0[8] = v1;
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = swift_task_alloc();
  static CharacterSet.whitespaces.getter();
  unint64_t v7 = sub_10002DF88();
  uint64_t v78 = StringProtocol.trimmingCharacters(in:)();
  NSString v9 = v8;
  uint64_t v80 = v4;
  unsigned __int8 v76 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v76(v6, v4);
  swift_task_dealloc();
  NSString v10 = String._bridgeToObjectiveC()();
  v0[15] = 0;
  uint64_t v11 = v0 + 15;
  id v12 = [v3 existingRecordingsWithName:v10 searchOption:2 error:v0 + 15];

  uint64_t v13 = (void *)v0[15];
  if (v12)
  {
    sub_100025F4C(0, (unint64_t *)&qword_100267358);
    unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v15 = v13;

    if (v14 >> 62) {
      goto LABEL_46;
    }
    uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
    uint64_t v82 = (void *)v16;
    unint64_t v83 = v14;
    id v74 = v3;
    if (v16)
    {
      unint64_t v17 = 0;
      uint64_t v75 = v9;
      uint64_t v72 = v11;
      uint64_t v85 = v14 & 0xFFFFFFFFFFFFFF8;
      unint64_t v87 = v14 & 0xC000000000000001;
      id v3 = (id)v16;
      NSString v9 = &type metadata for String;
      while (1)
      {
        if (v87)
        {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v17 >= *(void *)(v85 + 16))
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
            goto LABEL_4;
          }
          id v18 = *(id *)(v14 + 8 * v17 + 32);
        }
        uint64_t v19 = v18;
        id v20 = (id)(v17 + 1);
        if (__OFADD__(v17, 1)) {
          goto LABEL_45;
        }
        id v21 = [v18 title];
        if (v21)
        {
          id v22 = v21;
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v25 = v24;

          v0[9] = v23;
          v0[10] = v25;
          uint64_t v26 = swift_task_alloc();
          static CharacterSet.whitespaces.getter();
          uint64_t v27 = StringProtocol.trimmingCharacters(in:)();
          uint64_t v29 = v28;
          v76(v26, v80);
          swift_bridgeObjectRelease();
          swift_task_dealloc();
          v0[11] = v27;
          v0[12] = v29;
          v0[13] = v78;
          v0[14] = v75;
          uint64_t v11 = &qword_1002686C0;
          sub_100028654(&qword_1002686C0);
          uint64_t v30 = swift_task_alloc();
          uint64_t v31 = type metadata accessor for Locale();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
          unint64_t v70 = v7;
          unint64_t v71 = v7;
          uint64_t v32 = StringProtocol.compare<A>(_:options:range:locale:)();
          sub_1000285F8(v30, &qword_1002686C0);
          swift_bridgeObjectRelease();
          swift_task_dealloc();
          if (v32)
          {
          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          id v3 = v82;
          unint64_t v14 = v83;
        }
        else
        {
        }
        ++v17;
        if (v20 == v3)
        {
          id v3 = v74;
          uint64_t v11 = v72;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0
      || ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      if (v36) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v36 = _swiftEmptyArrayStorage[2];
      swift_bridgeObjectRetain();
      if (v36)
      {
LABEL_25:
        if (v36 < 1) {
          __break(1u);
        }
        uint64_t v37 = 0;
        uint64_t v77 = v11 - 13;
        unint64_t v38 = (unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001;
        unsigned int v84 = _swiftEmptyArrayStorage;
        uint64_t v39 = &selRef_splitViewController_willTransitionFromHorizontalSizeClass_toHorizontalSizeClass_;
        uint64_t v73 = v0;
        uint64_t v81 = v36;
        while (1)
        {
          if (v38) {
            id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v40 = (id)_swiftEmptyArrayStorage[v37 + 4];
          }
          long long v41 = v40;
          id v42 = [v40 v39[390] v70 v71];
          if (!v42) {
            goto LABEL_28;
          }
          uint64_t v43 = v42;
          uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v45 = v44;

          id v46 = [v41 title];
          if (!v46) {
            break;
          }
          uint64_t v47 = v46;
          uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v88 = v49;

          uint64_t v50 = type metadata accessor for Date();
          uint64_t v51 = *(void *)(v50 - 8);
          uint64_t v52 = swift_task_alloc();
          id v53 = [v41 creationDate];
          sub_100028654(&qword_100265A20);
          uint64_t v54 = swift_task_alloc();
          uint64_t v55 = v54;
          if (v53)
          {
            double v79 = *(double *)&v48;
            uint64_t v56 = v45;
            uint64_t v57 = v52;
            uint64_t v58 = swift_task_alloc();
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            Swift::String v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32);
            v59(v55, v58, v50);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v55, 0, 1, v50);
            uint64_t v60 = v57;
            uint64_t v61 = v56;
            swift_task_dealloc();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v55, 1, v50) != 1)
            {
              v59(v60, v55, v50);
              swift_task_dealloc();
              uint64_t v62 = (char *)swift_task_alloc();
              (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v62, v60, v50);
              [v41 length];
              sub_1000273E0(v86, v61, v79, v88, v62, v77, v63);
              (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v60, v50);

              swift_task_dealloc();
              swift_task_dealloc();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unsigned int v84 = sub_10015DF04(0, v84[2] + 1, 1, v84);
              }
              unint64_t v65 = v84[2];
              unint64_t v64 = v84[3];
              id v3 = v74;
              unint64_t v38 = (unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001;
              uint64_t v36 = v81;
              uint64_t v39 = &selRef_splitViewController_willTransitionFromHorizontalSizeClass_toHorizontalSizeClass_;
              if (v65 >= v64 >> 1) {
                unsigned int v84 = sub_10015DF04((void *)(v64 > 1), v65 + 1, 1, v84);
              }
              v84[2] = v65 + 1;
              uint64_t v66 = &v84[5 * v65];
              long long v67 = *(_OWORD *)v77;
              long long v68 = *((_OWORD *)v77 + 1);
              v66[8] = v77[4];
              *((_OWORD *)v66 + 2) = v67;
              *((_OWORD *)v66 + 3) = v68;
              uint64_t v0 = v73;
              goto LABEL_29;
            }
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v54, 1, 1, v50);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000285F8(v55, &qword_100265A20);

          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v0 = v73;
          id v3 = v74;
          uint64_t v36 = v81;
          unint64_t v38 = (unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001;
          uint64_t v39 = &selRef_splitViewController_willTransitionFromHorizontalSizeClass_toHorizontalSizeClass_;
LABEL_29:
          if (v36 == ++v37) {
            goto LABEL_49;
          }
        }
        swift_bridgeObjectRelease();
LABEL_28:

        goto LABEL_29;
      }
    }
    unsigned int v84 = _swiftEmptyArrayStorage;
LABEL_49:
    swift_release_n();

    uint64_t v69 = (uint64_t (*)(void *))v0[1];
    return v69(v84);
  }
  else
  {
    id v33 = v13;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    unint64_t v34 = (uint64_t (*)(void))v0[1];
    return v34();
  }
}

uint64_t sub_10012A660()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100028654((uint64_t *)&unk_100265EB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  NSString v9 = (char *)v18 - v8;
  v18[0] = sub_100028654(&qword_100268580);
  uint64_t v10 = type metadata accessor for LocalizedStringResource();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v12 = sub_100028654(&qword_100268B00);
  __n128 v13 = __chkstk_darwin(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56))((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v10, v13);
  v18[1] = 0;
  IntentDialog.init(stringLiteral:)();
  uint64_t v15 = type metadata accessor for IntentDialog();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v9, 0, 1, v15);
  v16(v6, 1, 1, v15);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  sub_10012E9E0();
  sub_10002738C();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)();
}

unint64_t sub_10012A980()
{
  sub_100028654(&qword_100268660);
  uint64_t v0 = *(void *)(sub_100028654(&qword_100267CE0) - 8);
  uint64_t v1 = *(void *)(v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1001F0FB0;
  uint64_t v4 = (unsigned char *)(v3 + v2);
  unsigned char *v4 = 0;
  DisplayRepresentation.init(stringLiteral:)();
  v4[v1] = 1;
  DisplayRepresentation.init(stringLiteral:)();

  return sub_10010ECAC(v3);
}

uint64_t sub_10012AAA4()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v42 = v0;
  uint64_t v43 = v1;
  __chkstk_darwin(v0);
  long long v41 = &v29[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = sub_100028654((uint64_t *)&unk_100265EB0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v29[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v8 = &v29[-v7];
  uint64_t v9 = sub_100028654(&qword_100268538);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = &v29[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v40 = sub_100028654(&qword_100268540);
  uint64_t v12 = type metadata accessor for LocalizedStringResource();
  uint64_t v34 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v38 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  unint64_t v39 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v32 = &v29[-v39];
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v15 = sub_100028654(&qword_100268B00);
  uint64_t v36 = *(void *)(*(void *)(v15 - 8) + 64);
  __n128 v16 = __chkstk_darwin(v15 - 8);
  unint64_t v37 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v18 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56);
  uint64_t v33 = v13 + 56;
  uint64_t v35 = v18;
  v18(&v29[-v37], 1, 1, v12, v16);
  uint64_t v19 = type metadata accessor for ChangeOperation();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v11, 1, 1, v19);
  uint64_t v20 = type metadata accessor for IntentDialog();
  id v21 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  v21(v8, 1, 1, v20);
  id v22 = v5;
  v21(v5, 1, 1, v20);
  unsigned int v30 = enum case for InputConnectionBehavior.default(_:);
  uint64_t v23 = *(void (**)(void))(v43 + 104);
  v43 += 104;
  uint64_t v31 = (void (*)(unsigned char *, void, uint64_t))v23;
  uint64_t v24 = v41;
  v23(v41);
  sub_10012EC80(&qword_100268548, (void (*)(uint64_t))&type metadata accessor for ChangeOperation);
  dispatch thunk of static CaseIterable.allCases.getter();
  sub_10012EC80(&qword_100268550, (void (*)(uint64_t))&type metadata accessor for ChangeOperation);
  uint64_t v40 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
  uint64_t v25 = sub_100028654(&qword_100268558);
  __chkstk_darwin(v25);
  uint64_t v26 = LocalizedStringResource.init(stringLiteral:)();
  __n128 v27 = __chkstk_darwin(v26);
  v35(&v29[-v37], 1, 1, v34, v27);
  char v44 = 2;
  IntentDialog.init(stringLiteral:)();
  v21(v8, 0, 1, v20);
  v21(v22, 1, 1, v20);
  v31(v24, v30, v42);
  sub_100122EA0();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
  return v40;
}

uint64_t sub_10012B008()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100028654((uint64_t *)&unk_100265EB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v18 - v8;
  v18[1] = sub_100028654(&qword_100268518);
  uint64_t v10 = type metadata accessor for LocalizedStringResource();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v12 = sub_100028654(&qword_100268B00);
  __n128 v13 = __chkstk_darwin(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56))((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v10, v13);
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  IntentDialog.init(stringLiteral:)();
  uint64_t v15 = type metadata accessor for IntentDialog();
  __n128 v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v9, 0, 1, v15);
  v16(v6, 1, 1, v15);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  sub_10012E6E8();
  sub_10002738C();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)();
}

unint64_t sub_10012B330()
{
  sub_100028654(&qword_100268658);
  uint64_t v0 = *(void *)(sub_100028654(&qword_100267CD0) - 8);
  uint64_t v1 = *(void *)(v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1001F0FB0;
  uint64_t v4 = (unsigned char *)(v3 + v2);
  unsigned char *v4 = 0;
  DisplayRepresentation.init(stringLiteral:)();
  v4[v1] = 1;
  DisplayRepresentation.init(stringLiteral:)();

  return sub_10010ECD4(v3);
}

uint64_t sub_10012B454()
{
  uint64_t v38 = type metadata accessor for InputConnectionBehavior();
  uint64_t v0 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  unint64_t v37 = &v25[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v2 = sub_100028654((uint64_t *)&unk_100265EB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  uint64_t v7 = &v25[-v6];
  uint64_t v36 = sub_100028654(&qword_1002684C8);
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  uint64_t v30 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v34 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  unint64_t v35 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v11 = sub_100028654(&qword_100268B00);
  uint64_t v32 = *(void *)(*(void *)(v11 - 8) + 64);
  __n128 v12 = __chkstk_darwin(v11 - 8);
  unint64_t v33 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56);
  uint64_t v29 = v9 + 56;
  uint64_t v31 = v14;
  v14(&v25[-v33], 1, 1, v8, v12);
  LOBYTE(v39) = 0;
  uint64_t v15 = type metadata accessor for IntentDialog();
  __n128 v16 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v7;
  v16(v7, 1, 1, v15);
  id v18 = v4;
  v16(v4, 1, 1, v15);
  unsigned int v26 = enum case for InputConnectionBehavior.default(_:);
  long long v19 = *(void (**)(void))(v0 + 104);
  uint64_t v27 = v0 + 104;
  uint64_t v28 = (void (*)(unsigned char *, void, uint64_t))v19;
  long long v20 = v37;
  v19(v37);
  sub_100123E60();
  uint64_t v36 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
  uint64_t v21 = sub_100028654(&qword_1002684D0);
  __chkstk_darwin(v21);
  uint64_t v22 = LocalizedStringResource.init(stringLiteral:)();
  __n128 v23 = __chkstk_darwin(v22);
  v31(&v25[-v33], 1, 1, v30, v23);
  uint64_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  IntentDialog.init(stringLiteral:)();
  v16(v17, 0, 1, v15);
  v16(v18, 1, 1, v15);
  v28(v20, v26, v38);
  sub_10012E6E8();
  sub_10002738C();
  IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)();
  return v36;
}

uint64_t sub_10012B8DC(char a1, uint64_t a2)
{
  long long v39 = (void *)a2;
  int v38 = a1 & 1;
  uint64_t v41 = type metadata accessor for InputConnectionBehavior();
  uint64_t v2 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  long long v40 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100028654((uint64_t *)&unk_100265EB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v37 = sub_100028654(&qword_1002684C8);
  uint64_t v10 = type metadata accessor for LocalizedStringResource();
  uint64_t v31 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v35 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  unint64_t v36 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v13 = sub_100028654(&qword_100268B00);
  uint64_t v33 = *(void *)(*(void *)(v13 - 8) + 64);
  __n128 v14 = __chkstk_darwin(v13 - 8);
  unint64_t v34 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  __n128 v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56);
  uint64_t v30 = v11 + 56;
  uint64_t v32 = v16;
  v16((char *)&v26 - v34, 1, 1, v10, v14);
  LOBYTE(v42[0]) = 0;
  uint64_t v17 = type metadata accessor for IntentDialog();
  id v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  unsigned int v26 = v6;
  v18(v6, 1, 1, v17);
  unsigned int v27 = enum case for InputConnectionBehavior.default(_:);
  long long v19 = *(void (**)(void))(v2 + 104);
  uint64_t v28 = v2 + 104;
  uint64_t v29 = (void (*)(char *, void, uint64_t))v19;
  v19(v40);
  sub_100123E60();
  uint64_t v20 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
  uint64_t v21 = sub_100028654(&qword_1002684D0);
  __chkstk_darwin(v21);
  swift_retain();
  uint64_t v22 = LocalizedStringResource.init(stringLiteral:)();
  __n128 v23 = __chkstk_darwin(v22);
  v32((char *)&v26 - v34, 1, 1, v31, v23);
  uint64_t v43 = 0;
  memset(v42, 0, sizeof(v42));
  IntentDialog.init(stringLiteral:)();
  v18(v9, 0, 1, v17);
  v18(v26, 1, 1, v17);
  v29(v40, v27, v41);
  sub_10012E6E8();
  sub_10002738C();
  IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)();
  LOBYTE(v42[0]) = v38;
  swift_retain();
  swift_retain();
  IntentParameter.wrappedValue.setter();
  swift_release();
  uint64_t v24 = v39;
  sub_10012E73C((uint64_t)v39, (uint64_t)v42);
  swift_retain();
  swift_retain();
  sub_10012E808(v24, (void (*)(void, void, void, void, void))sub_10012E7A4);
  IntentParameter.wrappedValue.setter();
  sub_10012E808(v24, (void (*)(void, void, void, void, void))sub_10012E844);
  swift_release_n();
  swift_release_n();
  return v20;
}

uint64_t sub_10012BE1C()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 56) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10012BEB0, v2, v1);
}

uint64_t sub_10012BEB0()
{
  swift_release();
  uint64_t v0 = self;
  id v1 = [v0 sharedApplicationModel];
  id v2 = [v1 recordings];

  sub_100025F4C(0, (unint64_t *)&qword_100267358);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v4 = [v0 sharedApplicationModel];
  id v5 = [v4 deletedRecordings];

  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1001380AC(v6);
  unint64_t v7 = v3;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v8 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_24:
    char v44 = _swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease_n();
    long long v39 = *(uint64_t (**)(void *))(v40 + 8);
    return v39(v44);
  }
  uint64_t v8 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_24;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v41 = (void *)(v40 + 16);
    unint64_t v48 = v3 & 0xC000000000000001;
    char v44 = _swiftEmptyArrayStorage;
    uint64_t v11 = &selRef_splitViewController_willTransitionFromHorizontalSizeClass_toHorizontalSizeClass_;
    while (1)
    {
      if (v48) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(v7 + 8 * v10 + 32);
      }
      uint64_t v13 = v12;
      id v14 = [v12 v11[390]];
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        id v19 = [v13 title];
        if (v19)
        {
          uint64_t v20 = v19;
          uint64_t v47 = v18;
          uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v45 = v22;

          uint64_t v23 = type metadata accessor for Date();
          uint64_t v24 = *(void *)(v23 - 8);
          uint64_t v46 = swift_task_alloc();
          id v25 = [v13 creationDate];
          sub_100028654(&qword_100265A20);
          uint64_t v26 = swift_task_alloc();
          uint64_t v27 = v26;
          if (v25)
          {
            double v42 = *(double *)&v21;
            uint64_t v43 = v16;
            uint64_t v28 = v8;
            unint64_t v29 = v7;
            uint64_t v30 = swift_task_alloc();
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32);
            v31(v27, v30, v23);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v27, 0, 1, v23);
            unint64_t v7 = v29;
            uint64_t v8 = v28;
            swift_task_dealloc();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v27, 1, v23) != 1)
            {
              v31(v46, v27, v23);
              swift_task_dealloc();
              uint64_t v32 = (char *)swift_task_alloc();
              (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v32, v46, v23);
              [v13 length];
              sub_1000273E0(v43, v47, v42, v45, v32, v41, v33);
              (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v46, v23);

              swift_task_dealloc();
              swift_task_dealloc();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                char v44 = sub_10015DF04(0, v44[2] + 1, 1, v44);
              }
              unint64_t v35 = v44[2];
              unint64_t v34 = v44[3];
              if (v35 >= v34 >> 1) {
                char v44 = sub_10015DF04((void *)(v34 > 1), v35 + 1, 1, v44);
              }
              void v44[2] = v35 + 1;
              unint64_t v36 = &v44[5 * v35];
              long long v37 = *(_OWORD *)v41;
              long long v38 = *(_OWORD *)(v40 + 32);
              v36[8] = *(void *)(v40 + 48);
              *((_OWORD *)v36 + 2) = v37;
              *((_OWORD *)v36 + 3) = v38;
              goto LABEL_22;
            }
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v26, 1, 1, v23);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000285F8(v27, &qword_100265A20);

          swift_task_dealloc();
          swift_task_dealloc();
LABEL_22:
          uint64_t v11 = &selRef_splitViewController_willTransitionFromHorizontalSizeClass_toHorizontalSizeClass_;
          goto LABEL_7;
        }
        swift_bridgeObjectRelease();
      }

LABEL_7:
      if (v8 == ++v10) {
        goto LABEL_25;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10012C418()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 56) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10012C4AC, v2, v1);
}

uint64_t sub_10012C4AC()
{
  swift_release();
  id v0 = [self sharedApplicationModel];
  id v1 = [v0 recordings];

  sub_100025F4C(0, (unint64_t *)&qword_100267358);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_24:
    long long v39 = _swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease_n();
    unint64_t v34 = *(uint64_t (**)(void *))(v35 + 8);
    return v34(v39);
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_24;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    unint64_t v36 = (void *)(v35 + 16);
    unint64_t v43 = v2 & 0xC000000000000001;
    long long v39 = _swiftEmptyArrayStorage;
    unint64_t v6 = &selRef_splitViewController_willTransitionFromHorizontalSizeClass_toHorizontalSizeClass_;
    while (1)
    {
      if (v43) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v2 + 8 * v5 + 32);
      }
      uint64_t v8 = v7;
      id v9 = [v7 v6[390]];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v12;

        id v14 = [v8 title];
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v42 = v13;
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v40 = v17;

          uint64_t v18 = type metadata accessor for Date();
          uint64_t v19 = *(void *)(v18 - 8);
          uint64_t v41 = swift_task_alloc();
          id v20 = [v8 creationDate];
          sub_100028654(&qword_100265A20);
          uint64_t v21 = swift_task_alloc();
          uint64_t v22 = v21;
          if (v20)
          {
            double v37 = *(double *)&v16;
            uint64_t v38 = v11;
            uint64_t v23 = v3;
            unint64_t v24 = v2;
            uint64_t v25 = swift_task_alloc();
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32);
            v26(v22, v25, v18);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v18);
            unint64_t v2 = v24;
            uint64_t v3 = v23;
            swift_task_dealloc();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v22, 1, v18) != 1)
            {
              v26(v41, v22, v18);
              swift_task_dealloc();
              uint64_t v27 = (char *)swift_task_alloc();
              (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v27, v41, v18);
              [v8 length];
              sub_1000273E0(v38, v42, v37, v40, v27, v36, v28);
              (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v41, v18);

              swift_task_dealloc();
              swift_task_dealloc();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                long long v39 = sub_10015DF04(0, v39[2] + 1, 1, v39);
              }
              unint64_t v30 = v39[2];
              unint64_t v29 = v39[3];
              if (v30 >= v29 >> 1) {
                long long v39 = sub_10015DF04((void *)(v29 > 1), v30 + 1, 1, v39);
              }
              uint64_t v39[2] = v30 + 1;
              uint64_t v31 = &v39[5 * v30];
              long long v32 = *(_OWORD *)v36;
              long long v33 = *(_OWORD *)(v35 + 32);
              v31[8] = *(void *)(v35 + 48);
              *((_OWORD *)v31 + 2) = v32;
              *((_OWORD *)v31 + 3) = v33;
              goto LABEL_22;
            }
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, 1, 1, v18);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000285F8(v22, &qword_100265A20);

          swift_task_dealloc();
          swift_task_dealloc();
LABEL_22:
          unint64_t v6 = &selRef_splitViewController_willTransitionFromHorizontalSizeClass_toHorizontalSizeClass_;
          goto LABEL_7;
        }
        swift_bridgeObjectRelease();
      }

LABEL_7:
      if (v3 == ++v5) {
        goto LABEL_25;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10012C9B0()
{
  uint64_t v211 = sub_100028654(&qword_100268490);
  __chkstk_darwin(v211);
  v218 = (char *)&v190 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v217 = (char *)&v190 - v2;
  __chkstk_darwin(v3);
  v216 = (char *)&v190 - v4;
  __chkstk_darwin(v5);
  v215 = (char *)&v190 - v6;
  __chkstk_darwin(v7);
  v214 = (char *)&v190 - v8;
  __chkstk_darwin(v9);
  v213 = (char *)&v190 - v10;
  __chkstk_darwin(v11);
  v212 = (char *)&v190 - v12;
  __chkstk_darwin(v13);
  v210 = (char *)&v190 - v14;
  __chkstk_darwin(v15);
  v209 = (char *)&v190 - v16;
  uint64_t v17 = type metadata accessor for AppShortcutPhraseToken();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  id v20 = (char *)&v190 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100028654(&qword_100268498);
  __chkstk_darwin(v21);
  v208 = (char *)&v190 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v207 = (void (*)(char *, uint64_t))((char *)&v190 - v24);
  __chkstk_darwin(v25);
  v205 = (char *)&v190 - v26;
  __chkstk_darwin(v27);
  v204 = (char *)&v190 - v28;
  __chkstk_darwin(v29);
  v202 = (char *)&v190 - v30;
  __chkstk_darwin(v31);
  v201 = (char *)&v190 - v32;
  __chkstk_darwin(v33);
  v200 = (char *)&v190 - v34;
  __chkstk_darwin(v35);
  v199 = (char *)&v190 - v36;
  __chkstk_darwin(v37);
  v198 = (char *)&v190 - v38;
  __chkstk_darwin(v39);
  v197 = (char *)&v190 - v40;
  __chkstk_darwin(v41);
  v219 = (char *)&v190 - v42;
  __chkstk_darwin(v43);
  v196 = (char *)&v190 - v44;
  __chkstk_darwin(v45);
  v195 = (char *)&v190 - v46;
  __chkstk_darwin(v47);
  v194 = (char *)&v190 - v48;
  __chkstk_darwin(v49);
  v193 = (char *)&v190 - v50;
  __chkstk_darwin(v51);
  v192 = (char *)&v190 - v52;
  __chkstk_darwin(v53);
  uint64_t v54 = type metadata accessor for AppShortcut();
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v221 = v54;
  uint64_t v222 = v55;
  __chkstk_darwin(v54);
  v220 = (char *)&v190 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v234[0] = sub_1001292D4();
  sub_100028654(&qword_1002684A0);
  uint64_t v57 = *(void *)(sub_100028654(&qword_1002684A8) - 8);
  unint64_t v224 = *(void *)(v57 + 72);
  unint64_t v58 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
  uint64_t v203 = 16 * v224;
  uint64_t v59 = swift_allocObject();
  uint64_t v206 = v59;
  *(_OWORD *)(v59 + 16) = xmmword_1001F4CD0;
  unint64_t v225 = v59 + v58;
  unint64_t v60 = sub_10003629C();
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v61._uint64_t countAndFlagsBits = 0x2064726F636552;
  v61._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v61);
  unsigned int v231 = enum case for AppShortcutPhraseToken.applicationName(_:);
  uint64_t v62 = *(void (**)(char *))(v18 + 104);
  uint64_t v230 = v18 + 104;
  v62(v20);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  double v63 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v228 = v18 + 8;
  v229 = v63;
  v63(v20, v17);
  v64._uint64_t countAndFlagsBits = 0;
  v64._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v64);
  unint64_t v65 = v225;
  AppShortcutPhrase.init(stringInterpolation:)();
  unint64_t v66 = v224;
  unint64_t v191 = v65 + v224;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v67._uint64_t countAndFlagsBits = 544695630;
  v67._object = (void *)0xE400000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v67);
  uint64_t v226 = v17;
  v227 = v62;
  ((void (*)(char *, void, uint64_t))v62)(v20, v231, v17);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v68 = v17;
  uint64_t v69 = v229;
  v229(v20, v68);
  v70._uint64_t countAndFlagsBits = 0;
  v70._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v70);
  uint64_t v223 = v60;
  AppShortcutPhrase.init(stringInterpolation:)();
  v192 = (char *)(2 * v66);
  unint64_t v191 = v225 + 2 * v66;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v71._uint64_t countAndFlagsBits = 0x2061207472617453;
  v71._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v71);
  uint64_t v72 = v226;
  ((void (*)(char *, void, uint64_t))v62)(v20, v231, v226);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v69(v20, v72);
  v73._uint64_t countAndFlagsBits = 0x6964726F63655220;
  v73._object = (void *)0xEA0000000000676ELL;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v73);
  AppShortcutPhrase.init(stringInterpolation:)();
  id v74 = &v192[v66];
  unint64_t v75 = v225;
  v193 = &v74[v225];
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v76._object = (void *)0x80000001001ED930;
  v76._uint64_t countAndFlagsBits = 0xD000000000000012;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v76);
  uint64_t v77 = v231;
  uint64_t v78 = (void (*)(char *, uint64_t, uint64_t))v227;
  ((void (*)(char *, void, uint64_t))v227)(v20, v231, v72);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v229(v20, v72);
  v79._uint64_t countAndFlagsBits = 0;
  v79._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v79);
  AppShortcutPhrase.init(stringInterpolation:)();
  unint64_t v80 = v224;
  v194 = (char *)(v75 + 4 * v224);
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v81._uint64_t countAndFlagsBits = 0x206120656B6154;
  v81._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v81);
  uint64_t v82 = v226;
  v78(v20, v77, v226);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  unint64_t v83 = v229;
  v229(v20, v82);
  v84._uint64_t countAndFlagsBits = 0;
  v84._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v84);
  AppShortcutPhrase.init(stringInterpolation:)();
  uint64_t v85 = 5 * v80;
  unint64_t v86 = v225;
  v195 = (char *)(v225 + v85);
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v87._uint64_t countAndFlagsBits = 0x6120657461657243;
  v87._object = (void *)0xE900000000000020;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v87);
  uint64_t v88 = v82;
  uint64_t v89 = v82;
  uint64_t v90 = v227;
  ((void (*)(char *, void, uint64_t))v227)(v20, v231, v89);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v83(v20, v88);
  v91._uint64_t countAndFlagsBits = 0;
  v91._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v91);
  AppShortcutPhrase.init(stringInterpolation:)();
  v196 = (char *)(v86 + 6 * v224);
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v92._uint64_t countAndFlagsBits = 0;
  v92._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v92);
  uint64_t v93 = v231;
  ((void (*)(char *, void, uint64_t))v90)(v20, v231, v88);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v229(v20, v88);
  v94._uint64_t countAndFlagsBits = 0x6964726F63655220;
  v94._object = (void *)0xEA0000000000676ELL;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v94);
  AppShortcutPhrase.init(stringInterpolation:)();
  v219 = (char *)(8 * v224);
  v196 = (char *)(v86 + 7 * v224);
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v95._uint64_t countAndFlagsBits = 0x207472617453;
  v95._object = (void *)0xE600000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v95);
  ((void (*)(char *, uint64_t, uint64_t))v90)(v20, v93, v88);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  unsigned __int8 v96 = v229;
  v229(v20, v88);
  v97._uint64_t countAndFlagsBits = 0;
  v97._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v97);
  AppShortcutPhrase.init(stringInterpolation:)();
  unint64_t v98 = v225;
  v197 = &v219[v225];
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v99._uint64_t countAndFlagsBits = 0x2061207472617453;
  v99._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v99);
  uint64_t v100 = v231;
  uint64_t v101 = v226;
  ((void (*)(char *, void, uint64_t))v227)(v20, v231, v226);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v96(v20, v101);
  v102._uint64_t countAndFlagsBits = 0;
  v102._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v102);
  AppShortcutPhrase.init(stringInterpolation:)();
  unint64_t v103 = v224;
  v219 += v98 + v224;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v104._uint64_t countAndFlagsBits = 0x206E69676542;
  v104._object = (void *)0xE600000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v104);
  uint64_t v105 = v227;
  ((void (*)(char *, uint64_t, uint64_t))v227)(v20, v100, v101);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v96(v20, v101);
  v106._uint64_t countAndFlagsBits = 0;
  v106._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v106);
  AppShortcutPhrase.init(stringInterpolation:)();
  v219 = (char *)(v225 + 10 * v103);
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v107._uint64_t countAndFlagsBits = 0x2061206E69676542;
  v107._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v107);
  ((void (*)(char *, void, uint64_t))v105)(v20, v231, v101);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v96(v20, v101);
  v108._uint64_t countAndFlagsBits = 0;
  v108._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v108);
  AppShortcutPhrase.init(stringInterpolation:)();
  unint64_t v110 = v224;
  unint64_t v109 = v225;
  v219 = (char *)(v225 + 11 * v224);
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v111._uint64_t countAndFlagsBits = 0x612064726F636552;
  v111._object = (void *)0xE900000000000020;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v111);
  uint64_t v112 = v231;
  uint64_t v113 = v226;
  ((void (*)(char *, void, uint64_t))v227)(v20, v231, v226);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v114 = v113;
  uint64_t v115 = v113;
  uint64_t v116 = v229;
  v229(v20, v114);
  v117._uint64_t countAndFlagsBits = 0;
  v117._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v117);
  AppShortcutPhrase.init(stringInterpolation:)();
  v219 = (char *)(v109 + 12 * v110);
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v118._uint64_t countAndFlagsBits = 0x20656B6154;
  v118._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v118);
  uint64_t v119 = v227;
  ((void (*)(char *, uint64_t, uint64_t))v227)(v20, v112, v115);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v116(v20, v115);
  v120._uint64_t countAndFlagsBits = 0;
  v120._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v120);
  AppShortcutPhrase.init(stringInterpolation:)();
  v219 = (char *)(v225 + 13 * v224);
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v121._uint64_t countAndFlagsBits = 0x207472617453;
  v121._object = (void *)0xE600000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v121);
  ((void (*)(char *, void, uint64_t))v119)(v20, v231, v115);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v122 = v229;
  v229(v20, v115);
  v123._uint64_t countAndFlagsBits = 0x6964726F63655220;
  v123._object = (void *)0xEA0000000000676ELL;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v123);
  AppShortcutPhrase.init(stringInterpolation:)();
  v219 = (char *)(v225 + 14 * v224);
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v124._uint64_t countAndFlagsBits = 0x206E69676542;
  v124._object = (void *)0xE600000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v124);
  uint64_t v125 = v231;
  ((void (*)(char *, void, uint64_t))v119)(v20, v231, v115);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v122(v20, v115);
  v126._uint64_t countAndFlagsBits = 0x6964726F63655220;
  v126._object = (void *)0xEA0000000000676ELL;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v126);
  AppShortcutPhrase.init(stringInterpolation:)();
  unint64_t v224 = v225 + v203 - v224;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v127._uint64_t countAndFlagsBits = 0x2061206E69676542;
  v127._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v127);
  uint64_t v129 = v226;
  uint64_t v128 = v227;
  ((void (*)(char *, uint64_t, uint64_t))v227)(v20, v125, v226);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v130 = v129;
  uint64_t v131 = v229;
  v229(v20, v130);
  v132._uint64_t countAndFlagsBits = 0x6964726F63655220;
  v132._object = (void *)0xEA0000000000676ELL;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v132);
  AppShortcutPhrase.init(stringInterpolation:)();
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v133._object = (void *)0x80000001001ED950;
  v133._uint64_t countAndFlagsBits = 0xD000000000000012;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v133);
  uint64_t v134 = v226;
  ((void (*)(char *, void, uint64_t))v128)(v20, v231, v226);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v131(v20, v134);
  v135._uint64_t countAndFlagsBits = 0;
  v135._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v135);
  AppShortcutPhrase.init(stringInterpolation:)();
  uint64_t v136 = type metadata accessor for LocalizedStringResource();
  v205 = *(char **)(*(void *)(v136 - 8) + 64);
  __chkstk_darwin(v136 - 8);
  v208 = (char *)((v137 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v138 = v220;
  AppShortcut.init<A>(intent:phrases:shortTitle:systemImageName:)();
  v219 = (char *)static AppShortcutsBuilder.buildExpression(_:)();
  uint64_t v139 = *(void (**)(char *, uint64_t))(v222 + 8);
  v222 += 8;
  v207 = v139;
  v139(v138, v221);
  uint64_t v235 = 0;
  memset(v234, 0, sizeof(v234));
  uint64_t v232 = sub_10012B8DC(0, (uint64_t)v234);
  uint64_t v233 = v140;
  sub_100028654(&qword_1002684B0);
  uint64_t v141 = *(void *)(sub_100028654(&qword_1002684B8) - 8);
  unint64_t v225 = *(void *)(v141 + 72);
  unint64_t v142 = (*(unsigned __int8 *)(v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80);
  uint64_t v143 = swift_allocObject();
  uint64_t v206 = v143;
  *(_OWORD *)(v143 + 16) = xmmword_1001F4CE0;
  unint64_t v144 = v143 + v142;
  sub_10003658C();
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v145._object = (void *)0xEA00000000002074;
  v145._uint64_t countAndFlagsBits = 0x73614C2079616C50;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v145);
  uint64_t v146 = v231;
  uint64_t v147 = (void (*)(char *, uint64_t, uint64_t))v227;
  ((void (*)(char *, void, uint64_t))v227)(v20, v231, v134);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v229(v20, v134);
  v148._uint64_t countAndFlagsBits = 0;
  v148._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v148);
  unint64_t v224 = v144;
  AppShortcutPhrase.init(stringInterpolation:)();
  unint64_t v149 = v225;
  uint64_t v223 = v144 + v225;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v150._uint64_t countAndFlagsBits = 0x2079616C50;
  v150._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v150);
  uint64_t v151 = v146;
  uint64_t v152 = v226;
  v147(v20, v151, v226);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v153 = v229;
  v229(v20, v152);
  v154._uint64_t countAndFlagsBits = 0;
  v154._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v154);
  AppShortcutPhrase.init(stringInterpolation:)();
  uint64_t v223 = 2 * v149;
  unint64_t v155 = v224;
  v209 = (char *)(v224 + 2 * v149);
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v156._uint64_t countAndFlagsBits = 0xD000000000000011;
  v210 = (char *)0xD000000000000011;
  v156._object = (void *)0x80000001001ED9C0;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v156);
  uint64_t v157 = v226;
  ((void (*)(char *, void, uint64_t))v227)(v20, v231, v226);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v153(v20, v157);
  v158._uint64_t countAndFlagsBits = 0;
  v158._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v158);
  AppShortcutPhrase.init(stringInterpolation:)();
  v223 += v155 + v225;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v159._uint64_t countAndFlagsBits = 0x74206E657473694CLL;
  v159._object = (void *)0xEA0000000000206FLL;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v159);
  uint64_t v160 = v231;
  uint64_t v161 = v226;
  v162 = (void (*)(char *, uint64_t, uint64_t))v227;
  ((void (*)(char *, void, uint64_t))v227)(v20, v231, v226);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v229(v20, v161);
  v163._uint64_t countAndFlagsBits = 0;
  v163._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v163);
  AppShortcutPhrase.init(stringInterpolation:)();
  unint64_t v164 = v224;
  unint64_t v165 = v225;
  AppShortcutPhrase.init(stringLiteral:)();
  uint64_t v223 = v164 + 5 * v165;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v166._uint64_t countAndFlagsBits = 0x74206E657473694CLL;
  v166._object = (void *)0xEF207473614C206FLL;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v166);
  uint64_t v167 = v226;
  v162(v20, v160, v226);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v168 = v229;
  v229(v20, v167);
  v169._uint64_t countAndFlagsBits = 0;
  v169._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v169);
  AppShortcutPhrase.init(stringInterpolation:)();
  uint64_t v223 = v224 + 6 * v225;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v170._uint64_t countAndFlagsBits = 0xD000000000000016;
  v170._object = (void *)0x80000001001EDA00;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v170);
  uint64_t v171 = v231;
  ((void (*)(char *, void, uint64_t))v227)(v20, v231, v167);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v168(v20, v167);
  v172._uint64_t countAndFlagsBits = 0;
  v172._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v172);
  AppShortcutPhrase.init(stringInterpolation:)();
  unint64_t v173 = v224;
  uint64_t v223 = 8 * v225;
  v215 = (char *)(v224 + 7 * v225);
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v174._object = (void *)0x80000001001EDA20;
  v174._uint64_t countAndFlagsBits = (uint64_t)v210;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v174);
  v175 = v227;
  ((void (*)(char *, uint64_t, uint64_t))v227)(v20, v171, v167);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v176 = v167;
  v177 = v229;
  v229(v20, v176);
  v178._uint64_t countAndFlagsBits = 0;
  v178._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v178);
  AppShortcutPhrase.init(stringInterpolation:)();
  v216 = (char *)(v173 + v223);
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v179._uint64_t countAndFlagsBits = 0xD000000000000010;
  v179._object = (void *)0x80000001001EDA40;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v179);
  uint64_t v180 = v226;
  ((void (*)(char *, void, uint64_t))v175)(v20, v231, v226);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v177(v20, v180);
  v181._uint64_t countAndFlagsBits = 0;
  v181._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v181);
  AppShortcutPhrase.init(stringInterpolation:)();
  AppShortcutPhrase.init(stringLiteral:)();
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v182._uint64_t countAndFlagsBits = 0;
  v182._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v182);
  ((void (*)(char *, void, uint64_t))v227)(v20, v231, v180);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)();
  v229(v20, v180);
  v183._uint64_t countAndFlagsBits = 0x726579616C5020;
  v183._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v183);
  uint64_t v184 = AppShortcutPhrase.init(stringInterpolation:)();
  __chkstk_darwin(v184);
  LocalizedStringResource.init(stringLiteral:)();
  v185 = v220;
  AppShortcut.init<A>(intent:phrases:shortTitle:systemImageName:)();
  uint64_t v186 = static AppShortcutsBuilder.buildExpression(_:)();
  v207(v185, v221);
  sub_100028654(&qword_1002684C0);
  uint64_t v187 = swift_allocObject();
  *(_OWORD *)(v187 + 16) = xmmword_1001F0FB0;
  *(void *)(v187 + 32) = v219;
  *(void *)(v187 + 40) = v186;
  uint64_t v188 = static AppShortcutsBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v188;
}

unint64_t sub_10012E6E8()
{
  unint64_t result = qword_1002684D8;
  if (!qword_1002684D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1002684D8);
  }
  return result;
}

uint64_t sub_10012E73C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100269EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012E7A4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

void *sub_10012E808(void *a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_10012E844(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

__n128 sub_10012E8A8@<Q0>(uint64_t a1@<X8>)
{
  IntentParameter.wrappedValue.getter();
  __n128 result = v4;
  *(void *)a1 = v3;
  *(__n128 *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_10012E8F4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = IntentParameter.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10012E930()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t sub_10012E968@<X0>(void *a1@<X8>)
{
  uint64_t result = IntentParameter.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10012E9A4()
{
  return IntentParameter.wrappedValue.setter();
}

unint64_t sub_10012E9E0()
{
  unint64_t result = qword_100268588;
  if (!qword_100268588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268588);
  }
  return result;
}

double sub_10012EA34@<D0>(_OWORD *a1@<X8>)
{
  IntentParameter.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_10012EA70()
{
  return IntentParameter.wrappedValue.setter();
}

unint64_t sub_10012EAAC()
{
  unint64_t result = qword_100268B20;
  if (!qword_100268B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268B20);
  }
  return result;
}

double sub_10012EB00@<D0>(uint64_t a1@<X8>)
{
  IntentParameter.wrappedValue.getter();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_10012EB48(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100027F14(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10012EBB4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = IntentParameter.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10012EBF0()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t sub_10012EC28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10012EC54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10012EC80(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10012ECC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

void sub_10012ECF4(void **a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100130F3C(a1, *(NSString *)(v2 + 32), a2);
}

void sub_10012ED14(void *a1@<X8>)
{
}

void sub_10012ED30()
{
  uint64_t v2 = *(id **)(v0 + 16);
  (*(void (**)(void **__return_ptr))(v0 + 24))(&v4);
  if (!v1)
  {
    char v3 = v4;
    sub_10012ED84(*v2);
    *uint64_t v2 = v3;
  }
}

void sub_10012ED84(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t sub_10012ED94@<X0>(void *a1@<X8>)
{
  return sub_10011E77C(*(void *)(v1 + 16), a1);
}

void *sub_10012EDB0()
{
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v0 + 24))(&v5);
  if (!v1)
  {
    uint64_t v4 = v5;
    uint64_t result = (void *)swift_bridgeObjectRelease();
    *uint64_t v2 = v4;
  }
  return result;
}

Swift::Int sub_10012EE10()
{
  return Hasher._finalize()();
}

uint64_t sub_10012EEC8()
{
  return DisplayRepresentation.init(stringLiteral:)();
}

uint64_t sub_10012EF2C()
{
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  sub_100031F50(v0, qword_1002754A8);
  sub_10002272C(v0, (uint64_t)qword_1002754A8);
  uint64_t v1 = type metadata accessor for LocalizedStringResource();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v3 = sub_100028654(&qword_100268B00);
  __n128 v4 = __chkstk_darwin(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v2 + 56))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v1, v4);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t sub_10012F098(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100166DB8(*a1, *a2);
}

unint64_t sub_10012F0A8()
{
  unint64_t result = qword_1002686D8;
  if (!qword_1002686D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002686D8);
  }
  return result;
}

Swift::Int sub_10012F0FC()
{
  return sub_10012EE10();
}

uint64_t sub_10012F104()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10012F1A4()
{
  return sub_100166F84();
}

unint64_t sub_10012F1AC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100130928(*a1);
  *a2 = result;
  return result;
}

void sub_10012F1DC(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000010;
  unint64_t v3 = 0xD000000000000016;
  unint64_t v4 = 0x80000001001EA0A0;
  if (*v1 != 1)
  {
    unint64_t v3 = 0x64726F6365524352;
    unint64_t v4 = 0xEF64726143676E69;
  }
  if (*v1)
  {
    unint64_t v2 = v3;
    unint64_t v5 = v4;
  }
  else
  {
    unint64_t v5 = 0x80000001001EA080;
  }
  *a1 = v2;
  a1[1] = v5;
}

unint64_t sub_10012F250()
{
  unint64_t result = qword_1002686E0;
  if (!qword_1002686E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002686E0);
  }
  return result;
}

unint64_t sub_10012F2A8()
{
  unint64_t result = qword_1002686E8;
  if (!qword_1002686E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002686E8);
  }
  return result;
}

unint64_t sub_10012F300()
{
  unint64_t result = qword_1002686F0;
  if (!qword_1002686F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002686F0);
  }
  return result;
}

unint64_t sub_10012F358()
{
  unint64_t result = qword_1002686F8;
  if (!qword_1002686F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002686F8);
  }
  return result;
}

unint64_t sub_10012F3B0()
{
  unint64_t result = qword_100268700;
  if (!qword_100268700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268700);
  }
  return result;
}

uint64_t sub_10012F404()
{
  return sub_100027F5C(&qword_100268708, &qword_100268710);
}

uint64_t sub_10012F440(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10012F300();

  return static AppEntity<>.defaultQuery.getter(a1, a2, v4);
}

unint64_t sub_10012F498()
{
  unint64_t result = qword_100268718;
  if (!qword_100268718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268718);
  }
  return result;
}

unint64_t sub_10012F4F0()
{
  unint64_t result = qword_100268720;
  if (!qword_100268720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268720);
  }
  return result;
}

unint64_t sub_10012F548()
{
  unint64_t result = qword_100268728;
  if (!qword_100268728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268728);
  }
  return result;
}

unint64_t sub_10012F5A0()
{
  unint64_t result = qword_100268730;
  if (!qword_100268730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268730);
  }
  return result;
}

unint64_t sub_10012F5F8()
{
  unint64_t result = qword_100268738;
  if (!qword_100268738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268738);
  }
  return result;
}

uint64_t sub_10012F64C(uint64_t a1)
{
  unint64_t v2 = sub_1000DC560();
  unint64_t v3 = sub_10012F300();

  return AppEntity<>.id.getter(a1, v2, v3);
}

uint64_t sub_10012F6A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10012FBB8(&qword_1002645D0, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1002754A8, a1);
}

uint64_t sub_10012F6DC()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10012F738()
{
  unint64_t result = qword_100268740;
  if (!qword_100268740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268740);
  }
  return result;
}

uint64_t sub_10012F78C(uint64_t a1)
{
  unint64_t v2 = sub_1000DC560();
  unint64_t v3 = sub_10012F738();

  return static AppEntity<>.defaultResolverSpecification.getter(a1, v2, v3);
}

unint64_t sub_10012F7E8()
{
  unint64_t result = qword_100268748;
  if (!qword_100268748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268748);
  }
  return result;
}

unint64_t sub_10012F840()
{
  unint64_t result = qword_100268750;
  if (!qword_100268750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268750);
  }
  return result;
}

unint64_t sub_10012F898()
{
  unint64_t result = qword_100268758;
  if (!qword_100268758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268758);
  }
  return result;
}

uint64_t sub_10012F8F0()
{
  return sub_10012EEC8();
}

uint64_t sub_10012F8F8(uint64_t a1)
{
  unint64_t v2 = sub_10012F5A0();
  unint64_t v3 = sub_10012F5F8();

  return CaseDisplayRepresentable<>.localizedStringResource.getter(a1, v2, v3);
}

uint64_t sub_10012F950()
{
  return sub_100027F5C(&qword_100268760, &qword_100268768);
}

void sub_10012F98C(void *a1@<X8>)
{
  *a1 = &off_1002238C8;
}

unint64_t sub_10012F9A0()
{
  unint64_t result = qword_100268770;
  if (!qword_100268770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268770);
  }
  return result;
}

uint64_t sub_10012F9F4()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  sub_100031F50(v0, qword_1002754C0);
  sub_10002272C(v0, (uint64_t)qword_1002754C0);
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t sub_10012FA58()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t sub_10012FA8C()
{
  return IntentParameter.wrappedValue.setter();
}

void (*sub_10012FAC0(void *a1))(void *a1)
{
  unint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_1001235C8;
}

uint64_t sub_10012FB20()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10012FB3C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10012FB8C@<X0>(uint64_t a1@<X8>)
{
  return sub_10012FBB8(&qword_1002645D8, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1002754C0, a1);
}

uint64_t sub_10012FBB8@<X0>(void *a1@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = sub_10002272C(v7, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

uint64_t sub_10012FC5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100130974();
  *a1 = result;
  return result;
}

uint64_t sub_10012FC84()
{
  sub_100028654(&qword_1002684F0);
  type metadata accessor for _AssistantIntent();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001F1BD0;
  sub_100130974();
  sub_100031AD4();
  uint64_t result = _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  qword_1002754D8 = v0;
  return result;
}

uint64_t sub_10012FD8C(uint64_t a1)
{
  uint64_t v44 = a1;
  uint64_t v48 = sub_100028654(&qword_100268790);
  uint64_t v51 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  unint64_t v2 = (char *)&v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100028654(&qword_100268798);
  __chkstk_darwin(v7);
  unint64_t v8 = sub_100031AD4();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._uint64_t countAndFlagsBits = 0x20686372616573;
  v9._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v9);
  uint64_t v10 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  uint64_t v47 = v4 + 104;
  uint64_t v49 = v11;
  unsigned int v45 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  uint64_t v42 = v3;
  v11(v6, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v3);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v46 = v4 + 8;
  v12(v6, v3);
  uint64_t v37 = v12;
  v13._uint64_t countAndFlagsBits = 0x20726F6620;
  v13._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v13);
  swift_getKeyPath();
  unint64_t v43 = sub_10012EAAC();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v14);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v39 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v50 = *(void (**)(char *, uint64_t))(v51 + 8);
  v51 += 8;
  v50(v2, v48);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v15._uint64_t countAndFlagsBits = 0x6920686372616573;
  v15._object = (void *)0xEA0000000000206ELL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  uint64_t v16 = v42;
  v49(v6, v10, v42);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v12(v6, v16);
  v17._uint64_t countAndFlagsBits = 0x20726F6620;
  v17._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  uint64_t v41 = v2;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  unint64_t v40 = v8;
  uint64_t v38 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v50(v2, v48);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v19._uint64_t countAndFlagsBits = 0x6620686372616573;
  v19._object = (void *)0xEB0000000020726FLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v20._uint64_t countAndFlagsBits = 544106784;
  v20._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  uint64_t v21 = v42;
  v49(v6, v45, v42);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v22 = v37;
  v37(v6, v21);
  v23._uint64_t countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v23);
  uint64_t v24 = v41;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v36 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v25 = v24;
  uint64_t v26 = v48;
  v50(v25, v48);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v27._uint64_t countAndFlagsBits = 0x6620686372616573;
  v27._object = (void *)0xEB0000000020726FLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  v49(v6, v45, v21);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v22(v6, v21);
  v28._uint64_t countAndFlagsBits = 0x2064656C6C616320;
  v28._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v29._uint64_t countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  uint64_t v30 = v41;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v50(v30, v26);
  sub_100028654(&qword_1002687A0);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_1001F4CB0;
  uint64_t v33 = v38;
  *(void *)(v32 + 32) = v39;
  *(void *)(v32 + 40) = v33;
  *(void *)(v32 + 48) = v36;
  *(void *)(v32 + 56) = v31;
  uint64_t v34 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t sub_1001304A4()
{
  uint64_t v0 = type metadata accessor for _AssistantIntent.Value();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  sub_10012EAAC();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  sub_100031AD4();
  _AssistantIntent.Value.init<A>(for:builder:)();
  uint64_t v4 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_100028654(&qword_1002684F8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1001F1BD0;
  *(void *)(v5 + 32) = v4;
  uint64_t v6 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

void sub_10013060C()
{
  qword_1002754E0 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_100130620(uint64_t a1, uint64_t a2)
{
  return sub_100128814(a1, a2, &qword_1002645E0);
}

uint64_t sub_100130644(uint64_t a1, uint64_t a2)
{
  return sub_100128814(a1, a2, &qword_1002645E8);
}

ValueMetadata *type metadata accessor for SearchRecordingsAssistantIntents()
{
  return &type metadata for SearchRecordingsAssistantIntents;
}

ValueMetadata *type metadata accessor for SearchRecordings()
{
  return &type metadata for SearchRecordings;
}

unsigned char *storeEnumTagSinglePayload for RCUIElementEntity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100130754);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RCUIElementEntity()
{
  return &type metadata for RCUIElementEntity;
}

uint64_t sub_10013078C()
{
  return sub_100027F5C((unint64_t *)&qword_100265A50, (uint64_t *)&unk_100268AA0);
}

unint64_t sub_1001307C8()
{
  sub_100028654(&qword_1002687B0);
  uint64_t v0 = *(void *)(sub_100028654(&qword_100267CC0) - 8);
  uint64_t v1 = *(void *)(v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1001F2610;
  unsigned int v4 = (unsigned char *)(v3 + v2);
  unsigned char *v4 = 0;
  DisplayRepresentation.init(stringLiteral:)();
  v4[v1] = 1;
  DisplayRepresentation.init(stringLiteral:)();
  v4[2 * v1] = 2;
  DisplayRepresentation.init(stringLiteral:)();

  return sub_10010EEF8(v3);
}

unint64_t sub_100130928(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002239B8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_100130974()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100028654((uint64_t *)&unk_100265EB0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100028654((uint64_t *)&unk_100268B40);
  __chkstk_darwin(v7 - 8);
  Swift::String v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100028654(&qword_1002687A8);
  uint64_t v10 = type metadata accessor for LocalizedStringResource();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v12 = sub_100028654(&qword_100268B00);
  __n128 v13 = __chkstk_darwin(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56))((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v10, v13);
  uint64_t v15 = type metadata accessor for String.IntentInputOptions();
  v18[0] = 0;
  v18[1] = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 1, 1, v15);
  IntentDialog.init(stringLiteral:)();
  uint64_t v16 = type metadata accessor for IntentDialog();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v6, 0, 1, v16);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t sub_100130CBC@<X0>(void *a1@<X8>)
{
  uint64_t result = IntentParameter.wrappedValue.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_100130CF8()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t sub_100130EDC()
{
  id v0 = [objc_allocWithZone((Class)RCDateFormatter) init];
  sub_100028654(&qword_100268920);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = v0;
  qword_100268870 = result;
  return result;
}

void sub_100130F3C(void **a1@<X0>, NSString a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  v6.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  if (a2) {
    a2 = String._bridgeToObjectiveC()();
  }
  id v7 = [v5 formattedDateStringFromDate:v6.super.isa forUUID:a2];

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  *a3 = v8;
  a3[1] = v10;
}

uint64_t type metadata accessor for RCAppIntentsUtilities()
{
  return self;
}

uint64_t sub_100131008@<X0>(id a1@<X1>, void *a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5 = (unint64_t)[a1 playableCountForFolder:a2];
  id v6 = [a2 uuid];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  uint64_t result = sub_100131F18();
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = sub_100136AF8(v7, v9, (uint64_t)[a2 folderType], v12);
    long long v11 = v12[1];
    *(_OWORD *)a3 = v12[0];
    *(_OWORD *)(a3 + 16) = v11;
    *(void *)(a3 + 32) = v13;
  }
  return result;
}

void *sub_1001310F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    id v11 = self;
    swift_bridgeObjectRetain();
    uint64_t v3 = (_OWORD *)(a1 + 56);
    do
    {
      uint64_t v4 = *((void *)v3 - 3);
      long long v13 = *(v3 - 1);
      long long v14 = *v3;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      id v5 = [v11 sharedRecordingsModelInteractor];
      uint64_t v12 = v4;
      NSString v6 = String._bridgeToObjectiveC()();
      LOBYTE(v4) = [v5 isRecentlyDeletedForUUID:v6];

      if (v4)
      {
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_10015E7D0(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v8 = _swiftEmptyArrayStorage[2];
        unint64_t v7 = _swiftEmptyArrayStorage[3];
        if (v8 >= v7 >> 1) {
          sub_10015E7D0(v7 > 1, v8 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v8 + 1;
        uint64_t v9 = &_swiftEmptyArrayStorage[5 * v8];
        uint64_t v9[4] = v12;
        *(_OWORD *)(v9 + 5) = v13;
        *(_OWORD *)(v9 + 7) = v14;
      }
      uint64_t v3 = (_OWORD *)((char *)v3 + 40);
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001312D4(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  type metadata accessor for MainActor();
  v2[4] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  void v2[5] = v4;
  v2[6] = v3;
  return _swift_task_switch(sub_10013136C, v4, v3);
}

uint64_t sub_10013136C()
{
  uint64_t v1 = sub_1001310F4(v0[2]);
  v0[7] = (uint64_t)v1;
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  v0[8] = v2;
  v0[9] = *(void *)(v2 - 8);
  uint64_t v3 = swift_task_alloc();
  v0[10] = v3;
  LocalizedStringResource.init(stringLiteral:)();
  unint64_t v7 = (char *)&dword_100265F40 + dword_100265F40;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = (uint64_t)v4;
  void *v4 = v0;
  v4[1] = sub_1001314C4;
  uint64_t v5 = v0[3];
  return ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t (*)(), void))v7)(v1, v5, v3, sub_1000E38A4, 0);
}

uint64_t sub_1001314C4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(*v1 + 72);
  uint64_t v5 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 96) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v2 + 48);
  uint64_t v7 = *(void *)(v2 + 40);
  return _swift_task_switch(sub_100131674, v7, v6);
}

uint64_t sub_100131674()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v4 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v6 = *(v3 - 1);
      uint64_t v5 = *v3;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_10015DDF4(0, v4[2] + 1, 1, v4);
      }
      unint64_t v8 = v4[2];
      unint64_t v7 = v4[3];
      if (v8 >= v7 >> 1) {
        uint64_t v4 = sub_10015DDF4((void *)(v7 > 1), v8 + 1, 1, v4);
      }
      _OWORD v4[2] = v8 + 1;
      uint64_t v9 = &v4[2 * v8];
      uint64_t v9[4] = v6;
      void v9[5] = v5;
      v3 += 5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(uint64_t (**)(void *))(v0 + 8);
  return v10(v4);
}

uint64_t sub_1001317B0()
{
  id v0 = [self sharedRecordingsModelInteractor];
  id v1 = [v0 visibleBuiltInFolders];
  sub_100028654(&qword_100267350);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v3 = [v0 allUserFolders];
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&v15[0] = v2;
  sub_100138278(v4);
  unint64_t v5 = v2;
  if (!(v2 >> 62))
  {
    uint64_t v6 = *(void *)((*(void *)&v15[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v9 = _swiftEmptyArrayStorage;
LABEL_16:

    swift_bridgeObjectRelease_n();
    return (uint64_t)v9;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v6 = result;
  if (!result) {
    goto LABEL_15;
  }
LABEL_3:
  if (v6 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = _swiftEmptyArrayStorage;
    do
    {
      if ((v5 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_unknownObjectRetain();
      }
      swift_getObjectType();
      sub_100131E94((uint64_t)v15);
      swift_unknownObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = sub_10015E028(0, v9[2] + 1, 1, v9);
      }
      unint64_t v11 = v9[2];
      unint64_t v10 = v9[3];
      if (v11 >= v10 >> 1) {
        uint64_t v9 = sub_10015E028((void *)(v10 > 1), v11 + 1, 1, v9);
      }
      ++v8;
      void v9[2] = v11 + 1;
      uint64_t v12 = &v9[5 * v11];
      long long v13 = v15[0];
      long long v14 = v15[1];
      v12[8] = v16;
      *((_OWORD *)v12 + 2) = v13;
      *((_OWORD *)v12 + 3) = v14;
    }
    while (v6 != v8);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001319D8()
{
  id v0 = [self sharedRecordingsModelInteractor];
  id v1 = [v0 allUserFolders];
  sub_100028654(&qword_100267350);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v6 = _swiftEmptyArrayStorage;
LABEL_16:

    swift_bridgeObjectRelease_n();
    return (uint64_t)v6;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    goto LABEL_15;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_unknownObjectRetain();
      }
      swift_getObjectType();
      sub_100131E94((uint64_t)v12);
      swift_unknownObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_10015E028(0, v6[2] + 1, 1, v6);
      }
      unint64_t v8 = v6[2];
      unint64_t v7 = v6[3];
      if (v8 >= v7 >> 1) {
        uint64_t v6 = sub_10015E028((void *)(v7 > 1), v8 + 1, 1, v6);
      }
      ++v5;
      v6[2] = v8 + 1;
      uint64_t v9 = &v6[5 * v8];
      long long v10 = v12[0];
      long long v11 = v12[1];
      v9[8] = v13;
      *((_OWORD *)v9 + 2) = v10;
      *((_OWORD *)v9 + 3) = v11;
    }
    while (v3 != v5);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

unsigned char *storeEnumTagSinglePayload for RCAppIntentsUtilities.UtilityError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100131C58);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for RCAppIntentsUtilities.UtilityError()
{
  return &type metadata for RCAppIntentsUtilities.UtilityError;
}

unint64_t sub_100131C94()
{
  unint64_t result = qword_100268928;
  if (!qword_100268928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268928);
  }
  return result;
}

unint64_t sub_100131CEC()
{
  unint64_t result = qword_100268930;
  if (!qword_100268930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268930);
  }
  return result;
}

unint64_t sub_100131D44()
{
  unint64_t result = qword_100268938;
  if (!qword_100268938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268938);
  }
  return result;
}

unint64_t sub_100131D9C()
{
  unint64_t result = qword_100268940;
  if (!qword_100268940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268940);
  }
  return result;
}

unint64_t sub_100131DF4()
{
  unint64_t result = qword_100268948;
  if (!qword_100268948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268948);
  }
  return result;
}

__n128 sub_100131E48@<Q0>(uint64_t a1@<X8>)
{
  IntentParameter.wrappedValue.getter();
  __n128 result = v4;
  *(void *)a1 = v3;
  *(__n128 *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  return result;
}

double sub_100131E94@<D0>(uint64_t a1@<X8>)
{
  id v3 = [self sharedApplicationModel];
  sub_100131008(v3, v1, (uint64_t)v6);

  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v7;
  return result;
}

uint64_t sub_100131F18()
{
  if ([v0 folderType] == (id)4
    || (id v1 = objc_msgSend(self, "folderNameForBuiltInFolderOfType:", objc_msgSend(v0, "folderType"))) == 0)
  {
    id v1 = [v0 name];
  }
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_100131FE4()
{
  uint64_t v0 = type metadata accessor for TypeDisplayRepresentation();
  sub_100031F50(v0, qword_1002754E8);
  sub_10002272C(v0, (uint64_t)qword_1002754E8);
  uint64_t v1 = type metadata accessor for LocalizedStringResource();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v3 = sub_100028654(&qword_100268B00);
  __chkstk_darwin(v3 - 8);
  long long v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v7);
  uint64_t v8 = type metadata accessor for String.LocalizationValue.Placeholder();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v9 + 104))(v12, enum case for String.LocalizationValue.Placeholder.int(_:), v8, v10);
  String.LocalizationValue.StringInterpolation.appendInterpolation(placeholder:specifier:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v13._uint64_t countAndFlagsBits = 0x535245444C4F4620;
  v13._object = (void *)0xE800000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v13);
  LocalizedStringResource.init(stringInterpolation:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v5, 0, 1, v1);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t sub_1001322B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v2 = sub_100028654(&qword_1002686C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v40 = (uint64_t)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v33 - v5;
  uint64_t v7 = type metadata accessor for LocalizedStringResource();
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  uint64_t v8 = *(void *)(v34 + 64);
  __chkstk_darwin(v7);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v11);
  EntityProperty.wrappedValue.getter();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v41);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v12);
  uint64_t v38 = (char *)&v33 - v9;
  uint64_t v13 = LocalizedStringResource.init(stringInterpolation:)();
  uint64_t v36 = v8;
  __chkstk_darwin(v13);
  unint64_t v37 = v9;
  long long v14 = (char *)&v33 - v9;
  __chkstk_darwin(v15);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v16._object = (void *)0x80000001001EE6D0;
  v16._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
  EntityProperty.wrappedValue.getter();
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
  LocalizedStringResource.init(stringInterpolation:)();
  uint64_t v18 = type metadata accessor for DisplayRepresentation.Image();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v6, 1, 1, v18);
  id v19 = [self folderSystemImageNameForFolderOfType:*(void *)(v1 + 32)];
  if (v19)
  {
    Swift::String v20 = v19;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = v40;
    DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
    sub_1000285F8((uint64_t)v6, &qword_1002686C8);
    id v19 = (id)sub_100137EF8(v21, (uint64_t)v6);
  }
  uint64_t v33 = (uint64_t)&v33;
  __n128 v22 = __chkstk_darwin(v19);
  Swift::String v23 = v38;
  uint64_t v25 = v34;
  uint64_t v24 = v35;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t, __n128))(v34 + 16);
  v26((char *)&v33 - v37, v38, v35, v22);
  uint64_t v27 = sub_100028654(&qword_100268B00);
  __n128 v28 = __chkstk_darwin(v27 - 8);
  uint64_t v30 = (char *)&v33 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26(v30, v14, v24, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v30, 0, 1, v24);
  sub_100137E90((uint64_t)v6, v40);
  DisplayRepresentation.init(title:subtitle:image:)();
  sub_1000285F8((uint64_t)v6, &qword_1002686C8);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v25 + 8);
  v31(v14, v24);
  return ((uint64_t (*)(char *, uint64_t))v31)(v23, v24);
}

unint64_t sub_100132744()
{
  unint64_t result = qword_100268950;
  if (!qword_100268950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268950);
  }
  return result;
}

unint64_t sub_10013279C()
{
  unint64_t result = qword_100268958;
  if (!qword_100268958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268958);
  }
  return result;
}

unint64_t sub_1001327F4()
{
  unint64_t result = qword_100268960;
  if (!qword_100268960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268960);
  }
  return result;
}

unint64_t sub_10013284C()
{
  unint64_t result = qword_100268968;
  if (!qword_100268968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268968);
  }
  return result;
}

uint64_t sub_1001328A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100134440(&qword_1002645F8, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1002754E8, a1);
}

uint64_t sub_1001328D8()
{
  return sub_100027F5C(&qword_100268970, &qword_100268978);
}

uint64_t sub_100132914(uint64_t a1)
{
  unint64_t v2 = sub_100132B74();

  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100132964()
{
  unint64_t result = qword_100268980;
  if (!qword_100268980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268980);
  }
  return result;
}

uint64_t sub_1001329BC(uint64_t a1)
{
  unint64_t v2 = sub_10013284C();

  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_100132A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100268B98 + dword_100268B98);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100128960;
  return v8(a2, a3);
}

unint64_t sub_100132AC4()
{
  unint64_t result = qword_100268990;
  if (!qword_100268990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268990);
  }
  return result;
}

unint64_t sub_100132B1C()
{
  unint64_t result = qword_100268998;
  if (!qword_100268998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268998);
  }
  return result;
}

unint64_t sub_100132B74()
{
  unint64_t result = qword_1002689A0[0];
  if (!qword_1002689A0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1002689A0);
  }
  return result;
}

uint64_t sub_100132BC8(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_100268B90 + dword_100268B90);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10011FED0;
  return v5(a1);
}

unint64_t sub_100132C74()
{
  unint64_t result = qword_1002689B8;
  if (!qword_1002689B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002689B8);
  }
  return result;
}

uint64_t sub_100132CC8()
{
  return sub_100137D28(&qword_1002689C0, qword_1002689C8, (void (*)(void))sub_1001327F4);
}

uint64_t sub_100132D18(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_100131DF4();
  *uint64_t v5 = v2;
  v5[1] = sub_100031604;
  return EntityQuery.results()(a1, a2, v6);
}

unint64_t sub_100132DD0()
{
  unint64_t result = qword_1002689E0;
  if (!qword_1002689E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002689E0);
  }
  return result;
}

unint64_t sub_100132E28()
{
  unint64_t result = qword_1002689E8;
  if (!qword_1002689E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002689E8);
  }
  return result;
}

unint64_t sub_100132E80()
{
  unint64_t result = qword_1002689F0;
  if (!qword_1002689F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002689F0);
  }
  return result;
}

unint64_t sub_100132ED8()
{
  unint64_t result = qword_1002689F8;
  if (!qword_1002689F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002689F8);
  }
  return result;
}

uint64_t sub_100132F2C()
{
  return sub_100027F5C(&qword_100268A00, (uint64_t *)&unk_100268A08);
}

uint64_t sub_100132F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001343C0(a1, a2, a3, (void (*)(void))sub_100132E28);
}

uint64_t sub_100132F80(uint64_t a1)
{
  return sub_100124100(a1, qword_100275500);
}

uint64_t sub_100132FA4(uint64_t a1, uint64_t a2)
{
  v2[16] = a1;
  v2[17] = a2;
  sub_100028654((uint64_t *)&unk_100265EB0);
  v2[18] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for IntentDialog();
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[22] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1001330C8, v5, v4);
}

uint64_t sub_1001330C8()
{
  swift_release();
  IntentParameter.wrappedValue.getter();
  unint64_t v1 = *(void *)(v0 + 120);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 112);
    uint64_t v3 = HIBYTE(v1) & 0xF;
    if ((v1 & 0x2000000000000000) == 0) {
      uint64_t v3 = v2 & 0xFFFFFFFFFFFFLL;
    }
    if (v3)
    {
      uint64_t v9 = (void *)sub_100133434(v2, *(void *)(v0 + 120), *(void *)(v0 + 136));
      uint64_t v11 = *(void *)(v0 + 160);
      uint64_t v10 = *(void *)(v0 + 168);
      uint64_t v21 = *(void *)(v0 + 152);
      swift_bridgeObjectRelease();
      swift_getObjectType();
      sub_100131E94(v0 + 16);
      type metadata accessor for String.LocalizationValue.StringInterpolation();
      swift_task_alloc();
      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v12._object = (void *)0x80000001001EE650;
      v12._uint64_t countAndFlagsBits = 0xD000000000000024;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v12);
      id v13 = [v9 name];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v16 = v15;

      v17._uint64_t countAndFlagsBits = v14;
      v17._object = v16;
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v17);
      swift_bridgeObjectRelease();
      v18._uint64_t countAndFlagsBits = 0;
      v18._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
      IntentDialog.init(stringInterpolation:)();
      swift_task_dealloc();
      long long v19 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v0 + 56) = *(_OWORD *)(v0 + 16);
      *(_OWORD *)(v0 + 72) = v19;
      *(void *)(v0 + 88) = *(void *)(v0 + 48);
      sub_1001327F4();
      static IntentResult.result<A>(value:dialog:)();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v21);
      *(_OWORD *)(v0 + 96) = *(_OWORD *)(v0 + 16);
      sub_100027334(v0 + 96);
      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      Swift::String v20 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 152);
  IntentDialog.init(stringLiteral:)();
  IntentParameter.projectedValue.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v4, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v6, 0, 1, v7);
  type metadata accessor for AppIntentError();
  sub_100137E38();
  swift_allocError();
  IntentParameter.needsValueError(_:)();
  swift_release();
  sub_1000285F8(v6, (uint64_t *)&unk_100265EB0);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v20 = *(uint64_t (**)(void))(v0 + 8);
LABEL_8:
  return v20();
}

uint64_t sub_100133434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v17[1] = a3;
  uint64_t v3 = sub_100028654((uint64_t *)&unk_100265EB0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for IntentDialog();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [self sharedRecordingsModelInteractor];
  NSString v11 = String._bridgeToObjectiveC()();
  unsigned __int8 v12 = [v10 userFolderExistsWithName:v11];

  if (v12)
  {
    IntentDialog.init(stringLiteral:)();
    IntentParameter.projectedValue.getter();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v5, v9, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    type metadata accessor for AppIntentError();
    sub_100137E38();
    swift_allocError();
    IntentParameter.needsValueError(_:)();
    swift_release();
    sub_1000285F8((uint64_t)v5, (uint64_t *)&unk_100265EB0);
    swift_willThrow();

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    id v14 = [self sharedApplicationModel];
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v14 folderWithName:v15];

    return (uint64_t)v16;
  }
}

uint64_t sub_1001336EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100134440(&qword_100264600, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100275500, a1);
}

uint64_t sub_100133718(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100015B60;
  return sub_100132FA4(a1, v4);
}

uint64_t sub_1001337B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10013725C();
  *a1 = result;
  return result;
}

uint64_t sub_1001337E0(uint64_t a1)
{
  unint64_t v2 = sub_100132E28();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100133820()
{
  unint64_t result = qword_100268A18;
  if (!qword_100268A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268A18);
  }
  return result;
}

uint64_t sub_100133874(uint64_t a1)
{
  return sub_100124100(a1, qword_100275518);
}

uint64_t sub_100133898(uint64_t a1, uint64_t a2)
{
  void v2[5] = a1;
  v2[6] = a2;
  type metadata accessor for MainActor();
  v2[7] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[8] = v4;
  v2[9] = v3;
  return _swift_task_switch(sub_100133930, v4, v3);
}

uint64_t sub_100133930()
{
  IntentParameter.wrappedValue.getter();
  uint64_t v1 = v0[4];
  v0[10] = v1;
  uint64_t v2 = IntentParameter.projectedValue.getter();
  v0[11] = v2;
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  v0[12] = v3;
  v0[13] = *(void *)(v3 - 8);
  uint64_t v4 = swift_task_alloc();
  v0[14] = v4;
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100265E70 + dword_100265E70);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[15] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100133A9C;
  return v7(v1, v2, v4, (uint64_t)sub_1000E38A4, 0);
}

uint64_t sub_100133A9C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 112);
  uint64_t v4 = *(void *)(*v1 + 104);
  uint64_t v5 = *(void *)(*v1 + 96);
  *(void *)(*v1 + 128) = a1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v2 + 72);
  uint64_t v7 = *(void *)(v2 + 64);
  return _swift_task_switch(sub_100133C70, v7, v6);
}

uint64_t sub_100133C70()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (void *)(v1 + 64);
    do
    {
      if (*v3 == 4)
      {
        uint64_t v7 = *(v3 - 4);
        long long v12 = *(_OWORD *)(v3 - 3);
        uint64_t v8 = *(v3 - 1);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_10015E810(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v5 = _swiftEmptyArrayStorage[2];
        unint64_t v4 = _swiftEmptyArrayStorage[3];
        if (v5 >= v4 >> 1) {
          sub_10015E810(v4 > 1, v5 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v5 + 1;
        uint64_t v6 = &_swiftEmptyArrayStorage[5 * v5];
        void v6[4] = v7;
        *(_OWORD *)(v6 + 5) = v12;
        v6[7] = v8;
        v6[8] = 4;
      }
      v3 += 5;
      --v2;
    }
    while (v2);
  }
  v0[17] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  id v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100265E78 + dword_100265E78);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[18] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100133E34;
  uint64_t v10 = v0[6];
  return v13(v10, (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_100133E34()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = *(void *)(v2 + 72);
    unint64_t v5 = sub_1001340AC;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = *(void *)(v2 + 72);
    unint64_t v5 = sub_100133F50;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100133F50()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v4 = self;
    uint64_t v5 = v3 + 56;
    do
    {
      v5 += 40;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      id v6 = [v4 sharedRecordingsModelInteractor];
      EntityProperty.wrappedValue.getter();
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v6 deleteUserFolderWithName:v7];

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      --v2;
    }
    while (v2);
  }
  swift_release();
  static IntentResult.result<>()();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1001340AC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100134114()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100134130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001343C0(a1, a2, a3, (void (*)(void))sub_100031874);
}

uint64_t sub_100134148@<X0>(uint64_t a1@<X8>)
{
  return sub_100134440(&qword_100264608, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100275518, a1);
}

uint64_t sub_100134174(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100031604;
  return sub_100133898(a1, v4);
}

uint64_t sub_100134214@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001375A4();
  *a1 = result;
  return result;
}

unint64_t sub_100134240()
{
  unint64_t result = qword_100268A40;
  if (!qword_100268A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268A40);
  }
  return result;
}

uint64_t sub_100134298(uint64_t a1)
{
  return sub_100124100(a1, qword_100275530);
}

__n128 sub_1001342BC@<Q0>(uint64_t a1@<X8>)
{
  IntentParameter.wrappedValue.getter();
  __n128 result = v4;
  *(void *)a1 = v3;
  *(__n128 *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_100134308()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10013438C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1001343A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001343C0(a1, a2, a3, (void (*)(void))sub_100031904);
}

uint64_t sub_1001343C0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100134414@<X0>(uint64_t a1@<X8>)
{
  return sub_100134440(&qword_100264610, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100275530, a1);
}

uint64_t sub_100134440@<X0>(void *a1@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = sub_10002272C(v7, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

uint64_t sub_1001344E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001378C0();
  *a1 = result;
  return result;
}

uint64_t sub_10013450C()
{
  sub_100028654(&qword_1002684F0);
  type metadata accessor for _AssistantIntent();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001F2610;
  sub_1001378C0();
  sub_100031904();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  sub_10013725C();
  sub_100132E28();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  sub_1001375A4();
  sub_100031874();
  uint64_t result = _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  qword_100275548 = v0;
  return result;
}

uint64_t sub_1001346D4(uint64_t a1)
{
  uint64_t v40 = a1;
  uint64_t v1 = sub_100028654(&qword_100268B50);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v41 = v1;
  uint64_t v42 = v2;
  __chkstk_darwin(v1);
  __n128 v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100028654(&qword_100268B58);
  __chkstk_darwin(v9);
  unint64_t v10 = sub_100031904();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v11._uint64_t countAndFlagsBits = 0x6C6F66206E65706FLL;
  v11._object = (void *)0xEC00000020726564;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  swift_getKeyPath();
  unint64_t v39 = sub_1001327F4();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v12._uint64_t countAndFlagsBits = 544106784;
  v12._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  unsigned int v34 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  uint64_t v33 = *(void (**)(char *))(v6 + 104);
  v33(v8);
  v30[0] = v6 + 104;
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  id v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v32 = v6 + 8;
  unint64_t v37 = v13;
  v13(v8, v5);
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v14);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  v30[1] = v10;
  uint64_t v36 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  NSString v15 = *(void (**)(char *, uint64_t))(v42 + 8);
  v42 += 8;
  uint64_t v38 = v15;
  v15(v4, v41);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v16._uint64_t countAndFlagsBits = 0x20796D206E65706FLL;
  v16._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v17._uint64_t countAndFlagsBits = 0x207265646C6F6620;
  v17._object = (void *)0xEB00000000206E69;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  uint64_t v18 = v34;
  long long v19 = (void (*)(char *, uint64_t, uint64_t))v33;
  ((void (*)(char *, void, uint64_t))v33)(v8, v34, v5);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v37(v8, v5);
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  uint64_t v31 = v4;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v35 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v38(v4, v41);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v21._uint64_t countAndFlagsBits = 0x20796D206E65706FLL;
  v21._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v21);
  v19(v8, v18, v5);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v37(v8, v5);
  v22._uint64_t countAndFlagsBits = 32;
  v22._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v22);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v23._uint64_t countAndFlagsBits = 0x7265646C6F6620;
  v23._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v23);
  uint64_t v24 = v31;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v25 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v38(v24, v41);
  sub_100028654(&qword_100268B60);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1001F2610;
  uint64_t v27 = v35;
  *(void *)(v26 + 32) = v36;
  *(void *)(v26 + 40) = v27;
  *(void *)(v26 + 48) = v25;
  uint64_t v28 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t sub_100134CA0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100134D2C()
{
  uint64_t v0 = type metadata accessor for _AssistantIntent.Value();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  sub_1001327F4();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  sub_100031904();
  _AssistantIntent.Value.init<A>(for:builder:)();
  uint64_t v4 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_100028654(&qword_1002684F8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1001F1BD0;
  *(void *)(v5 + 32) = v4;
  uint64_t v6 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100134E98(uint64_t a1)
{
  uint64_t v46 = a1;
  uint64_t v58 = sub_100028654(&qword_100268B28);
  uint64_t v60 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  unsigned int v45 = (char *)&v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100028654(&qword_100268B30);
  __chkstk_darwin(v6);
  unint64_t v7 = sub_100132E28();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v8._uint64_t countAndFlagsBits = 0x6620657461657263;
  v8._object = (void *)0xEE00207265646C6FLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v8);
  swift_getKeyPath();
  uint64_t v50 = sub_100137D28((unint64_t *)&unk_100268B10, &qword_1002685A8, (void (*)(void))sub_10012EAAC);
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v9._uint64_t countAndFlagsBits = 544106784;
  v9._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v9);
  uint64_t v10 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  uint64_t v56 = *(void (**)(char *, void, uint64_t))(v3 + 104);
  unsigned int v54 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  uint64_t v59 = v2;
  v56(v5, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v2);
  uint64_t v53 = v3 + 104;
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v55 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v57 = v3 + 8;
  v55(v5, v2);
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  Swift::String v12 = v45;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  unint64_t v51 = v7;
  uint64_t v49 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  id v13 = *(void (**)(char *, uint64_t))(v60 + 8);
  v60 += 8;
  uint64_t v52 = v13;
  Swift::String v14 = v12;
  NSString v15 = v12;
  uint64_t v16 = v58;
  v13(v14, v58);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v17._uint64_t countAndFlagsBits = 0x6120657461657263;
  v17._object = (void *)0xED00002077656E20;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  uint64_t v18 = v10;
  uint64_t v19 = v59;
  Swift::String v20 = v56;
  v56(v5, v18, v59);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  Swift::String v21 = v55;
  v55(v5, v19);
  v22._uint64_t countAndFlagsBits = 0x7265646C6F6620;
  v22._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v22);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v48 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v52(v15, v16);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v23._uint64_t countAndFlagsBits = 0x6120657461657263;
  v23._object = (void *)0xED00002077656E20;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v23);
  uint64_t v24 = v59;
  v20(v5, v54, v59);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v21(v5, v24);
  v25._uint64_t countAndFlagsBits = 0x207265646C6F6620;
  v25._object = (void *)0xEE002064656D616ELL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v25);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v26._uint64_t countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v47 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v27 = v52;
  v52(v15, v58);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v28._uint64_t countAndFlagsBits = 0x6120657461657263;
  v28._object = (void *)0xED00002077656E20;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  uint64_t v29 = v59;
  v56(v5, v54, v59);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v55(v5, v29);
  v30._uint64_t countAndFlagsBits = 0x207265646C6F6620;
  v30._object = (void *)0xEF2064656C6C6163;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v30);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v31._uint64_t countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v31);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v44 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v32 = v58;
  v27(v15, v58);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v33._uint64_t countAndFlagsBits = 0x6120657461657263;
  v33._object = (void *)0xED00002077656E20;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v33);
  uint64_t v34 = v59;
  v56(v5, v54, v59);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v55(v5, v34);
  v35._uint64_t countAndFlagsBits = 0x207265646C6F6620;
  v35._object = (void *)0xEF2064656C746974;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v35);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v36._uint64_t countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v36);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v37 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v52(v15, v32);
  sub_100028654(&qword_100268B38);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_1001F69A0;
  uint64_t v39 = v48;
  *(void *)(v38 + 32) = v49;
  *(void *)(v38 + 40) = v39;
  uint64_t v40 = v44;
  *(void *)(v38 + 48) = v47;
  *(void *)(v38 + 56) = v40;
  *(void *)(v38 + 64) = v37;
  uint64_t v41 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v41;
}

uint64_t sub_100135754()
{
  uint64_t v0 = type metadata accessor for _AssistantIntent.Value();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  sub_100137D28((unint64_t *)&unk_100268B10, &qword_1002685A8, (void (*)(void))sub_10012EAAC);
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  sub_100132E28();
  _AssistantIntent.Value.init<A>(for:builder:)();
  uint64_t v4 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_100028654(&qword_1002684F8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1001F1BD0;
  *(void *)(v5 + 32) = v4;
  uint64_t v6 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1001358F4(uint64_t a1)
{
  uint64_t v56 = a1;
  uint64_t v1 = sub_100028654(&qword_100268AD8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v58 = v1;
  uint64_t v59 = v2;
  __chkstk_darwin(v1);
  uint64_t v52 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100028654(&qword_100268AE0);
  __chkstk_darwin(v8);
  unint64_t v54 = sub_100031874();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._uint64_t countAndFlagsBits = 0x66206574656C6564;
  v9._object = (void *)0xEE00207265646C6FLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v9);
  swift_getKeyPath();
  uint64_t v57 = sub_100137D28((unint64_t *)&unk_100268AC0, qword_1002689C8, (void (*)(void))sub_1001327F4);
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v10._uint64_t countAndFlagsBits = 544106784;
  v10._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  uint64_t v11 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  Swift::String v12 = *(void (**)(char *, void, uint64_t))(v5 + 104);
  uint64_t v53 = v5 + 104;
  LODWORD(v48) = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  uint64_t v51 = v4;
  v12(v7, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v4);
  uint64_t v47 = v12;
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  id v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  uint64_t v46 = v13;
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v14);
  NSString v15 = v52;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v50 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v55 = *(void (**)(char *, uint64_t))(v59 + 8);
  v59 += 8;
  v55(v15, v58);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v16._uint64_t countAndFlagsBits = 0x206574656C6564;
  v16._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  uint64_t v17 = v11;
  uint64_t v18 = v51;
  v12(v7, v17, v51);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v13(v7, v18);
  v19._uint64_t countAndFlagsBits = 0x207265646C6F6620;
  v19._object = (void *)0xEE002064656D616ELL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  Swift::String v21 = v52;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v49 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  Swift::String v22 = v21;
  Swift::String v23 = v55;
  v55(v21, v58);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v24._uint64_t countAndFlagsBits = 0x2065766F6D6572;
  v24._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  uint64_t v25 = v51;
  v47(v7, v48, v51);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v46(v7, v25);
  v26._uint64_t countAndFlagsBits = 0x207265646C6F6620;
  v26._object = (void *)0xEE002064656D616ELL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v27._uint64_t countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v53 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v28 = v58;
  v23(v22, v58);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v29._uint64_t countAndFlagsBits = 0x6D206574656C6564;
  v29._object = (void *)0xEA00000000002079;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v30._uint64_t countAndFlagsBits = 0x7265646C6F6620;
  v30._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v30);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v51 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v23(v22, v28);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v31._uint64_t countAndFlagsBits = 0xD000000000000015;
  v31._object = (void *)0x80000001001EE470;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v31);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v32._uint64_t countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v32);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v48 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v55(v22, v58);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v33._object = (void *)0x80000001001EE490;
  v33._uint64_t countAndFlagsBits = 0xD000000000000014;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v33);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v34._uint64_t countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v34);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v47 = (void (*)(char *, void, uint64_t))static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v35 = v58;
  Swift::String v36 = v55;
  v55(v22, v58);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v37._object = (void *)0x80000001001EE4B0;
  v37._uint64_t countAndFlagsBits = 0xD000000000000014;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v37);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v38._uint64_t countAndFlagsBits = 0;
  v38._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v38);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v39 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v36(v22, v35);
  sub_100028654((uint64_t *)&unk_100268AE8);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1001F4C90;
  uint64_t v41 = v49;
  *(void *)(v40 + 32) = v50;
  *(void *)(v40 + 40) = v41;
  uint64_t v42 = v51;
  *(void *)(v40 + 48) = v53;
  *(void *)(v40 + 56) = v42;
  uint64_t v43 = (void (*)(void, void, void))v47;
  *(void *)(v40 + 64) = v48;
  *(void *)(v40 + 72) = v43;
  *(void *)(v40 + 80) = v39;
  uint64_t v44 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v44;
}

uint64_t sub_1001362AC()
{
  uint64_t v0 = type metadata accessor for _AssistantIntent.Value();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  sub_100137D28((unint64_t *)&unk_100268AC0, qword_1002689C8, (void (*)(void))sub_1001327F4);
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  sub_100031874();
  _AssistantIntent.Value.init<A>(for:builder:)();
  uint64_t v4 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_100028654(&qword_1002684F8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1001F1BD0;
  *(void *)(v5 + 32) = v4;
  uint64_t v6 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_10013644C()
{
  uint64_t v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v6 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v7 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  sub_100028654(&qword_100268AD0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1001F4CC0;
  *(void *)(v8 + 32) = v0;
  *(void *)(v8 + 40) = v1;
  *(void *)(v8 + 48) = v2;
  *(void *)(v8 + 56) = v3;
  *(void *)(v8 + 64) = v4;
  *(void *)(v8 + 72) = v5;
  *(void *)(v8 + 80) = v6;
  *(void *)(v8 + 88) = v7;
  uint64_t v9 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v9;
}

void sub_1001365E0()
{
  qword_100275550 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_1001365F4(uint64_t a1, uint64_t a2)
{
  return sub_100128814(a1, a2, &qword_100264618);
}

uint64_t sub_100136618(uint64_t a1, uint64_t a2)
{
  return sub_100128814(a1, a2, &qword_100264620);
}

unint64_t sub_100136640()
{
  unint64_t result = qword_100268A68[0];
  if (!qword_100268A68[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100268A68);
  }
  return result;
}

uint64_t sub_100136694(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 24) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10013672C, v3, v2);
}

uint64_t sub_10013672C()
{
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  swift_release();
  *uint64_t v1 = sub_1001319D8();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

unint64_t sub_10013679C()
{
  unint64_t result = qword_100268A80[0];
  if (!qword_100268A80[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100268A80);
  }
  return result;
}

uint64_t sub_1001367F0(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 24) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100136888, v3, v2);
}

uint64_t sub_100136888()
{
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  swift_release();
  *uint64_t v1 = sub_1001317B0();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

ValueMetadata *type metadata accessor for AllVisibleFoldersOptionsProvider()
{
  return &type metadata for AllVisibleFoldersOptionsProvider;
}

ValueMetadata *type metadata accessor for AllUserFoldersOptionsProvider()
{
  return &type metadata for AllUserFoldersOptionsProvider;
}

ValueMetadata *type metadata accessor for FolderAssistantIntents()
{
  return &type metadata for FolderAssistantIntents;
}

ValueMetadata *type metadata accessor for OpenFolder()
{
  return &type metadata for OpenFolder;
}

ValueMetadata *type metadata accessor for DeleteFolder()
{
  return &type metadata for DeleteFolder;
}

ValueMetadata *type metadata accessor for CreateFolder()
{
  return &type metadata for CreateFolder;
}

ValueMetadata *type metadata accessor for RCFolderEntityStringQuery()
{
  return &type metadata for RCFolderEntityStringQuery;
}

uint64_t destroy for RCFolderEntity()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for RCFolderEntity(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for RCFolderEntity(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for RCFolderEntity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for RCFolderEntity()
{
  return &type metadata for RCFolderEntity;
}

uint64_t sub_100136AF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, void *a4@<X8>)
{
  sub_100028654(&qword_100268478);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  __chkstk_darwin(v6 - 8);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v7 = EntityProperty<>.init(title:)();
  uint64_t v8 = sub_100028654((uint64_t *)&unk_100268AB0);
  __chkstk_darwin(v8);
  swift_retain();
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v9 = EntityProperty<>.init(title:)();
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  swift_release();
  swift_bridgeObjectRelease();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  EntityProperty.wrappedValue.setter();
  swift_release_n();
  swift_release_n();
  uint64_t result = swift_bridgeObjectRelease_n();
  *a4 = a1;
  a4[1] = a2;
  a4[2] = v7;
  a4[3] = v9;
  a4[4] = a3;
  return result;
}

uint64_t sub_100136CD8(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 64) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100136D70, v3, v2);
}

uint64_t sub_100136D70()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (long long *)(v0 + 16);
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v5 = self;
    swift_bridgeObjectRetain();
    uint64_t v6 = v4 + 40;
    uint64_t v7 = _swiftEmptyArrayStorage;
    do
    {
      swift_bridgeObjectRetain();
      id v8 = [v5 sharedRecordingsModelInteractor];
      NSString v9 = String._bridgeToObjectiveC()();
      id v10 = [v8 folderForUUID:v9];

      if (v10)
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        sub_100131E94((uint64_t)v3);
        swift_unknownObjectRelease_n();

        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = sub_10015E028(0, v7[2] + 1, 1, v7);
        }
        unint64_t v12 = v7[2];
        unint64_t v11 = v7[3];
        if (v12 >= v11 >> 1) {
          uint64_t v7 = sub_10015E028((void *)(v11 > 1), v12 + 1, 1, v7);
        }
        v7[2] = v12 + 1;
        id v13 = &v7[5 * v12];
        long long v14 = *v3;
        long long v15 = *(_OWORD *)(v0 + 32);
        v13[8] = *(void *)(v0 + 48);
        *((_OWORD *)v13 + 2) = v14;
        *((_OWORD *)v13 + 3) = v15;
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      v6 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
  }
  Swift::String v16 = *(uint64_t (**)(void *))(v0 + 8);
  return v16(v7);
}

uint64_t sub_100136F78(uint64_t a1, uint64_t a2)
{
  v2[7] = a1;
  v2[8] = a2;
  type metadata accessor for MainActor();
  v2[9] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100137010, v4, v3);
}

uint64_t sub_100137010()
{
  swift_release();
  id v1 = [self sharedRecordingsModelInteractor];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 allFoldersWithName:v2];

  sub_100028654(&qword_100267350);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
LABEL_13:

    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v5) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t result = sub_10015E810(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0)
  {
    __break(1u);
    return result;
  }
  long long v15 = v1;
  uint64_t v7 = 0;
  id v8 = (long long *)(v0 + 16);
  do
  {
    if ((v4 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_unknownObjectRetain();
    }
    swift_getObjectType();
    sub_100131E94((uint64_t)v8);
    swift_unknownObjectRelease();
    unint64_t v10 = _swiftEmptyArrayStorage[2];
    unint64_t v9 = _swiftEmptyArrayStorage[3];
    if (v10 >= v9 >> 1) {
      sub_10015E810(v9 > 1, v10 + 1, 1);
    }
    ++v7;
    _swiftEmptyArrayStorage[2] = v10 + 1;
    unint64_t v11 = &_swiftEmptyArrayStorage[5 * v10];
    long long v12 = *v8;
    long long v13 = *(_OWORD *)(v0 + 32);
    v11[8] = *(void *)(v0 + 48);
    *((_OWORD *)v11 + 2) = v12;
    *((_OWORD *)v11 + 3) = v13;
  }
  while (v5 != v7);

  swift_bridgeObjectRelease();
LABEL_14:
  long long v14 = *(uint64_t (**)(void *))(v0 + 8);
  return v14(_swiftEmptyArrayStorage);
}

uint64_t sub_10013725C()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100028654((uint64_t *)&unk_100265EB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100028654((uint64_t *)&unk_100268B40);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100028654(&qword_100267F38);
  uint64_t v10 = type metadata accessor for LocalizedStringResource();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v12 = sub_100028654(&qword_100268B00);
  __n128 v13 = __chkstk_darwin(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56))((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v10, v13);
  uint64_t v15 = type metadata accessor for String.IntentInputOptions();
  v18[0] = 0;
  v18[1] = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 1, 1, v15);
  IntentDialog.init(stringLiteral:)();
  uint64_t v16 = type metadata accessor for IntentDialog();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v6, 0, 1, v16);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)();
}

uint64_t sub_1001375A4()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100028654((uint64_t *)&unk_100265EB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)v18 - v8;
  v18[0] = sub_100028654(&qword_100268AF8);
  uint64_t v10 = type metadata accessor for LocalizedStringResource();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v12 = sub_100028654(&qword_100268B00);
  __n128 v13 = __chkstk_darwin(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56))((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v10, v13);
  v18[1] = 0;
  IntentDialog.init(stringLiteral:)();
  uint64_t v15 = type metadata accessor for IntentDialog();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v9, 0, 1, v15);
  v16(v6, 1, 1, v15);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  sub_100137C5C();
  sub_100132B74();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)();
}

uint64_t sub_1001378C0()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100028654((uint64_t *)&unk_100265EB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)v18 - v8;
  v18[1] = sub_100028654(&qword_100268B68);
  uint64_t v10 = type metadata accessor for LocalizedStringResource();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  LocalizedStringResource.init(stringLiteral:)();
  uint64_t v12 = sub_100028654(&qword_100268B00);
  __n128 v13 = __chkstk_darwin(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56))((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v10, v13);
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  IntentDialog.init(stringLiteral:)();
  uint64_t v15 = type metadata accessor for IntentDialog();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v9, 0, 1, v15);
  v16(v6, 1, 1, v15);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  sub_100137DE4();
  sub_100132B74();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)();
}

uint64_t sub_100137BE4@<X0>(void *a1@<X8>)
{
  uint64_t result = IntentParameter.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100137C20()
{
  return IntentParameter.wrappedValue.setter();
}

unint64_t sub_100137C5C()
{
  unint64_t result = qword_100268B08;
  if (!qword_100268B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100268B08);
  }
  return result;
}

double sub_100137CB0@<D0>(_OWORD *a1@<X8>)
{
  IntentParameter.wrappedValue.getter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_100137CEC()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t sub_100137D28(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100027F14(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

__n128 sub_100137D94@<Q0>(uint64_t a1@<X8>)
{
  IntentParameter.wrappedValue.getter();
  __n128 result = v4;
  *(void *)a1 = v3;
  *(__n128 *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  return result;
}

unint64_t sub_100137DE4()
{
  unint64_t result = qword_100268B70;
  if (!qword_100268B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100268B70);
  }
  return result;
}

unint64_t sub_100137E38()
{
  unint64_t result = qword_10026A030;
  if (!qword_10026A030)
  {
    type metadata accessor for AppIntentError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10026A030);
  }
  return result;
}

uint64_t sub_100137E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_1002686C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100137EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_1002686C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100137F60(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_10015E3F0(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = &v3[32 * v9 + 32];
  if (a1 + 32 < (unint64_t)&v10[32 * v8] && (unint64_t)v10 < a1 + 32 + 32 * v8) {
    goto LABEL_24;
  }
  memcpy(v10, (const void *)(a1 + 32), 32 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = *((void *)v3 + 2);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    *((void *)v3 + 2) = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001380AC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10013CC74(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100138278(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10013CE98(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100138444()
{
  uint64_t v1 = sub_100028654(&qword_100266770);
  uint64_t v2 = *(void *)(*(void *)(v1 - 8) + 64);
  __chkstk_darwin(v1);
  unint64_t v3 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v36 = (uint64_t)v29 - v3;
  uint64_t v4 = type metadata accessor for AttributedString.Index();
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v6 = v5[8];
  __chkstk_darwin(v4);
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = AttributedString.startIndex.getter();
  __chkstk_darwin(v8);
  uint64_t v9 = (char *)v29 - v7;
  uint64_t v35 = v0;
  AttributedString.endIndex.getter();
  sub_10013D658(&qword_100268D90, (void (*)(uint64_t))&type metadata accessor for AttributedString.Index);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    Swift::String v34 = v29;
    __chkstk_darwin(result);
    Swift::String v31 = (char *)v29 - v3;
    uint64_t v11 = sub_100028654(&qword_100268DE0);
    Swift::String v33 = v29;
    uint64_t v12 = v11 - 8;
    __chkstk_darwin(v11);
    uint64_t v14 = (char *)v29 - v7;
    uint64_t v32 = v1;
    uint64_t v15 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v16 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    v29[1] = v13;
    unint64_t v30 = v16;
    Swift::String v37 = &v15[*(int *)(v12 + 56)];
    uint64_t v17 = v37;
    uint64_t v18 = (void (*)(char *, char *, uint64_t))v5[4];
    v18(v15, v14, v4);
    uint64_t v19 = ((uint64_t (*)(char *, char *, uint64_t))v18)(v17, v9, v4);
    v29[0] = v29;
    __chkstk_darwin(v19);
    long long v20 = (char *)v29 - v16;
    uint64_t v21 = (char *)v29 + *(int *)(v12 + 56) - v16;
    Swift::String v22 = (void (*)(char *, char *, uint64_t))v5[2];
    v22(v20, v15, v4);
    v22(v21, v37, v4);
    uint64_t v23 = (uint64_t)v31;
    v18(v31, v20, v4);
    Swift::String v24 = (uint64_t (*)(char *, uint64_t))v5[1];
    uint64_t v25 = v24(v21, v4);
    v29[0] = v29;
    __chkstk_darwin(v25);
    Swift::String v26 = (char *)v29 - v30;
    Swift::String v27 = (char *)v29 + *(int *)(v12 + 56) - v30;
    v18((char *)v29 - v30, v15, v4);
    v18(v27, v37, v4);
    v18((char *)(v23 + *(int *)(v32 + 36)), v27, v4);
    v24(v26, v4);
    uint64_t v28 = v36;
    sub_1000F74A0(v23, v36);
    sub_100027F5C(&qword_100268D80, &qword_100266770);
    AttributedString.removeSubrange<A>(_:)();
    return sub_1000285F8(v28, &qword_100266770);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100138844(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    swift_beginAccess();
    uint64_t v4 = type metadata accessor for AttributedString();
    sub_10013D658(&qword_100266740, (void (*)(uint64_t))&type metadata accessor for AttributedString);
    AttributedString.append<A>(_:)();
    swift_endAccess();
    uint64_t v5 = v2 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel;
    uint64_t v6 = swift_beginAccess();
    uint64_t v7 = *(void *)(v4 - 8);
    __chkstk_darwin(v6);
    uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v10 = type metadata accessor for TranscriptionPresentationModel(0);
    sub_10013B498((uint64_t)v9, *(double *)(v5 + *(int *)(v10 + 36)));
    sub_10013BA18();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v4);
    return swift_endAccess();
  }
  else
  {
    uint64_t v12 = type metadata accessor for AttributedString.CharacterView();
    __chkstk_darwin(v12);
    type metadata accessor for AttributedString();
    sub_10013D658(&qword_100266740, (void (*)(uint64_t))&type metadata accessor for AttributedString);
    dispatch thunk of AttributedStringProtocol.characters.getter();
    sub_10013D658((unint64_t *)&unk_1002699D0, (void (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView);
    uint64_t v13 = String.init<A>(_:)();
    uint64_t v15 = v14;
    uint64_t v16 = v3 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel;
    swift_beginAccess();
    uint64_t v17 = (uint64_t *)(v16 + *(int *)(type metadata accessor for TranscriptionPresentationModel(0) + 32));
    *uint64_t v17 = v13;
    v17[1] = v15;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100138ACC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TranscriptionPresentationModel(0);
  uint64_t v4 = (int *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - v8;
  swift_beginAccess();
  sub_100138444();
  swift_endAccess();
  uint64_t v10 = type metadata accessor for AttributedString();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  AttributedString.init(stringLiteral:)();
  AttributedString.init(stringLiteral:)();
  uint64_t v14 = &v7[v4[8]];
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0xE000000000000000;
  *(void *)&v7[v4[9]] = _swiftEmptyArrayStorage;
  uint64_t v15 = &v7[v4[10]];
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  *(void *)&v7[v4[11]] = 0;
  sub_10013BA18();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_10013D52C((uint64_t)v7, (uint64_t)v9, type metadata accessor for TranscriptionPresentationModel);
  uint64_t v16 = v1 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel;
  swift_beginAccess();
  sub_10013D594((uint64_t)v9, v16);
  return swift_endAccess();
}

uint64_t sub_100138D14()
{
  uint64_t v1 = (int *)type metadata accessor for TranscriptionPresentationModel(0);
  uint64_t v3 = v1[5];
  uint64_t v2 = v1[6];
  uint64_t v65 = v0;
  uint64_t v4 = (uint64_t *)(v0 + v2);
  uint64_t v5 = v4[1];
  uint64_t v72 = *v4;
  unint64_t v73 = v5;
  uint64_t v71 = *(void *)(v0 + v1[7]);
  uint64_t v6 = (char **)(v0 + v3);
  uint64_t v7 = type metadata accessor for AttributedString.Runs();
  uint64_t v66 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v62 = v8;
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AttributedString();
  uint64_t v11 = sub_10013D658(&qword_100266740, (void (*)(uint64_t))&type metadata accessor for AttributedString);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v60 = v6;
  uint64_t v61 = v10;
  Swift::String v64 = (void *)v11;
  dispatch thunk of AttributedStringProtocol.runs.getter();
  uint64_t v12 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_10013D658(&qword_100268DE8, (void (*)(uint64_t))&type metadata accessor for AttributedString.Runs);
  uint64_t v16 = dispatch thunk of Collection.startIndex.getter();
  __chkstk_darwin(v16);
  dispatch thunk of Collection.endIndex.getter();
  sub_10013D658(&qword_100268DF0, (void (*)(uint64_t))&type metadata accessor for AttributedString.Runs.Index);
  LOBYTE(v6) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v13 + 8);
  v17((char *)&v52 - v15, v12);
  v17((char *)&v52 - v15, v12);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v66 + 8);
  uint64_t v63 = v7;
  uint64_t v19 = v7;
  uint64_t v20 = v65;
  v66 += 8;
  v18(v9, v19);
  if ((v6 & 1) == 0)
  {
    uint64_t v59 = v1;
    uint64_t v21 = sub_100028654(&qword_100268D98);
    uint64_t v58 = &v52;
    __chkstk_darwin(v21);
    uint64_t v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    AttributedString.endIndex.getter();
    type metadata accessor for AttributedString.Index();
    sub_10013D658(&qword_100268DA0, (void (*)(uint64_t))&type metadata accessor for AttributedString.Index);
    uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((result & 1) == 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v25 = v61;
    AttributedString.append<A>(_:)();
    uint64_t v26 = type metadata accessor for AttributedSubstring();
    uint64_t v60 = &v52;
    uint64_t v57 = *(void *)(v26 - 8);
    __chkstk_darwin(v26);
    uint64_t v28 = (char *)&v52 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v56 = sub_100027F5C(&qword_100268DA8, &qword_100268D98);
    AttributedString.subscript.getter();
    uint64_t v29 = type metadata accessor for AttributedString.CharacterView();
    uint64_t v55 = v21;
    unint64_t v54 = v18;
    __chkstk_darwin(v29);
    sub_10013D658(&qword_100268D88, (void (*)(uint64_t))&type metadata accessor for AttributedSubstring);
    uint64_t v52 = v28;
    uint64_t v53 = v26;
    dispatch thunk of AttributedStringProtocol.characters.getter();
    sub_10013D658((unint64_t *)&unk_1002699D0, (void (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView);
    v30._uint64_t countAndFlagsBits = String.init<A>(_:)();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    uint64_t v69 = v25;
    Swift::String v70 = v64;
    Swift::String v31 = sub_1000DED60(&v67);
    uint64_t v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v31, v20, v25);
    Swift::String v64 = &v52;
    __chkstk_darwin(v32);
    Swift::String v34 = (char *)&v52 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    dispatch thunk of AttributedStringProtocol.runs.getter();
    uint64_t KeyPath = swift_getKeyPath();
    *(&v52 - 2) = (char *)__chkstk_darwin(KeyPath);
    swift_getKeyPath();
    uint64_t v36 = sub_100028654((uint64_t *)&unk_100268DB0);
    uint64_t v37 = *(void *)(v36 - 8);
    __chkstk_darwin(v36);
    uint64_t v39 = (char *)&v52 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1000E93EC();
    AttributedString.Runs.subscript.getter();
    swift_release();
    v54(v34, v63);
    uint64_t v40 = sub_100105888((uint64_t)v39);
    uint64_t v41 = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v39, v36);
    __chkstk_darwin(v41);
    *(&v52 - 2) = (char *)&v67;
    uint64_t v42 = sub_1001064FC((void (*)(long long *__return_ptr, uint64_t))sub_10013E214, (uint64_t)(&v52 - 4), (uint64_t)v40);
    swift_bridgeObjectRelease();
    sub_10002F48C((uint64_t)&v67);
    sub_100137F60((uint64_t)v42);
    AttributedString.removeSubrange<A>(_:)();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v52, v53);
    sub_1000285F8((uint64_t)v23, &qword_100268D98);
    uint64_t v1 = v59;
  }
  uint64_t v43 = (uint64_t *)(v20 + v1[8]);
  unint64_t v44 = v43[1];
  if (!v44) {
    return v72;
  }
  uint64_t v45 = *v43;
  uint64_t v46 = *v43 & 0xFFFFFFFFFFFFLL;
  if ((v44 & 0x2000000000000000) != 0) {
    uint64_t v46 = HIBYTE(v44) & 0xF;
  }
  if (!v46) {
    return v72;
  }
  uint64_t v47 = HIBYTE(v73) & 0xF;
  if ((v73 & 0x2000000000000000) == 0) {
    uint64_t v47 = v72 & 0xFFFFFFFFFFFFLL;
  }
  if (v47)
  {
    uint64_t v67 = v72;
    unint64_t v68 = v73;
    swift_bridgeObjectRetain();
    v48._uint64_t countAndFlagsBits = 32;
    v48._object = (void *)0xE100000000000000;
    String.append(_:)(v48);
    uint64_t v49 = v67;
    unint64_t v50 = v68;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v67 = v49;
    unint64_t v68 = v50;
    swift_bridgeObjectRetain();
    v51._uint64_t countAndFlagsBits = v45;
    v51._object = (void *)v44;
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v67;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return v45;
}

uint64_t sub_100139590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = AttributedString.init()();
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return result;
  }
  uint64_t v6 = type metadata accessor for AttributedString.Index();
  uint64_t v7 = type metadata accessor for TranscriptionFragment(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v70 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v69 = *(void *)(v8 + 72);
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  Swift::String v76 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v61 = (uint64_t (**)(char *, char *, uint64_t))(v9 + 16);
  v59[1] = a1;
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  uint64_t v68 = 0;
  uint64_t v67 = v6;
  uint64_t v81 = a2;
  uint64_t v60 = v5;
  v59[2] = v7;
  uint64_t v66 = v10;
  while (1)
  {
    unint64_t v73 = v59;
    uint64_t v74 = v12;
    uint64_t v14 = (double *)(v70 + v69 * v12);
    double v15 = v14[2];
    double v16 = *v14;
    __chkstk_darwin(v11);
    unint64_t v17 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v77 = (char *)v59 - v17;
    AttributedString.endIndex.getter();
    uint64_t v18 = type metadata accessor for AttributedSubstring();
    uint64_t v72 = v59;
    uint64_t v79 = v18;
    unint64_t v75 = *(void (**)(char *, uint64_t))(v18 - 8);
    uint64_t v19 = *((void *)v75 + 8);
    __chkstk_darwin(v18);
    sub_100139FB0((uint64_t)v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v16, v14[1]);
    uint64_t v78 = (char *)v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (sub_10013D2E0())
    {
      uint64_t v20 = type metadata accessor for AttributedString();
      uint64_t v21 = *(void *)(v20 - 8);
      __chkstk_darwin(v20);
      uint64_t v23 = (char *)v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
      AttributedString.init(stringLiteral:)();
      static AttributedString.+= infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
      uint64_t v6 = v67;
    }
    sub_10013D658(&qword_100268D88, (void (*)(uint64_t))&type metadata accessor for AttributedSubstring);
    uint64_t v24 = AttributedString.append<A>(_:)();
    __chkstk_darwin(v24);
    uint64_t v25 = (char *)v59 - v17;
    AttributedString.endIndex.getter();
    sub_10013D658(&qword_100268D90, (void (*)(uint64_t))&type metadata accessor for AttributedString.Index);
    uint64_t v26 = v77;
    char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v71 = *v76;
    v71(v25, v6);
    if (v27) {
      break;
    }
    uint64_t v13 = (void (*)(char *, uint64_t))*((void *)v75 + 1);
LABEL_4:
    uint64_t v12 = v74 + 1;
    v13(v78, v79);
    uint64_t v11 = ((uint64_t (*)(char *, uint64_t))v71)(v26, v6);
    uint64_t v10 = v66;
    if (v12 == v5) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v28 = sub_100028654(&qword_100268D98);
  uint64_t v65 = v59;
  __chkstk_darwin(v28);
  Swift::String v30 = (char *)v59 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10013D658(&qword_100268DA0, (void (*)(uint64_t))&type metadata accessor for AttributedString.Index);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if ((result & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v31 = (*v61)(v30, v26, v6);
  Swift::String v64 = v59;
  __chkstk_darwin(v31);
  uint64_t v32 = (char *)v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027F5C(&qword_100268DA8, &qword_100268D98);
  AttributedString.subscript.getter();
  sub_1000285F8((uint64_t)v30, &qword_100268D98);
  uint64_t v33 = type metadata accessor for AttributedString.Runs();
  uint64_t v63 = v59;
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)v59 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of AttributedStringProtocol.runs.getter();
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  v59[-2] = v38;
  swift_getKeyPath();
  uint64_t v39 = sub_100028654((uint64_t *)&unk_100268DB0);
  uint64_t v62 = v59;
  uint64_t v40 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v42 = (char *)v59 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v80 = sub_1000E93EC();
  AttributedString.Runs.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
  uint64_t v43 = v68;
  unint64_t v44 = sub_100105888((uint64_t)v42);
  uint64_t v68 = v43;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
  uint64_t v13 = (void (*)(char *, uint64_t))*((void *)v75 + 1);
  uint64_t v45 = ((unint64_t)v75 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v32, v79);
  uint64_t v46 = v44[2];
  if (!v46)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = v60;
    uint64_t v6 = v67;
    uint64_t v26 = v77;
    goto LABEL_4;
  }
  uint64_t v65 = (void *)v45;
  unint64_t v75 = v13;
  double v47 = v15 - v16;
  uint64_t v48 = type metadata accessor for TimeRangeRun(0);
  uint64_t v49 = (double *)((char *)v44
                 + ((*(unsigned __int8 *)(*(void *)(v48 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v48 - 8) + 80)));
  uint64_t v50 = *(void *)(*(void *)(v48 - 8) + 72);
  Swift::String v64 = v44;
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v51 = (uint64_t)v49 + *(int *)(v48 + 20);
    uint64_t v52 = sub_100028654(&qword_100266770);
    __chkstk_darwin(v52);
    unint64_t v54 = (char *)v59 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1000F7508(v51, (uint64_t)v54);
    uint64_t v55 = swift_getKeyPath();
    __chkstk_darwin(v55);
    v59[-2] = v56;
    uint64_t result = swift_getKeyPath();
    double v57 = v49[1];
    if (v47 + *v49 > v47 + v57) {
      break;
    }
    double v83 = v47 + *v49;
    double v84 = v47 + v57;
    char v85 = 0;
    sub_100027F5C(&qword_100268D80, &qword_100266770);
    uint64_t v58 = (void (*)(char *, void))AttributedString.subscript.modify();
    AttributedSubstring.subscript.setter();
    v58(v82, 0);
    sub_1000285F8((uint64_t)v54, &qword_100266770);
    uint64_t v49 = (double *)((char *)v49 + v50);
    if (!--v46)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v5 = v60;
      uint64_t v6 = v67;
      uint64_t v26 = v77;
      uint64_t v13 = v75;
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100139FB0@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v82 = a1;
  uint64_t v6 = sub_100028654((uint64_t *)&unk_100268DD0);
  __chkstk_darwin(v6 - 8);
  uint64_t v81 = (uint64_t)v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v83 = (void *)type metadata accessor for TimeRangeRun(0);
  uint64_t v8 = *(v83 - 1);
  uint64_t v9 = __chkstk_darwin(v83);
  uint64_t v85 = (uint64_t)v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v80 = (uint64_t)v71 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v84 = (uint64_t)v71 - v14;
  __chkstk_darwin(v13);
  double v16 = (double *)((char *)v71 - v15);
  uint64_t v17 = type metadata accessor for AttributedString.Runs();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for AttributedString();
  uint64_t v22 = sub_10013D658(&qword_100266740, (void (*)(uint64_t))&type metadata accessor for AttributedString);
  uint64_t v78 = v21;
  uint64_t v79 = v3;
  uint64_t v77 = v22;
  dispatch thunk of AttributedStringProtocol.runs.getter();
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v23 = sub_100028654((uint64_t *)&unk_100268DB0);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)v71 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E93EC();
  AttributedString.Runs.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  char v27 = sub_100105888((uint64_t)v26);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  uint64_t v29 = _swiftEmptyArrayStorage;
  Swift::String v87 = _swiftEmptyArrayStorage;
  uint64_t v30 = v27[2];
  if (v30)
  {
    unint64_t v31 = 0;
    while (v31 < v27[2])
    {
      unint64_t v32 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v33 = *(void *)(v8 + 72);
      sub_10013D4C8((uint64_t)v27 + v32 + v33 * v31, (uint64_t)v16);
      double v34 = *v16;
      double v35 = v16[1];
      if (*v16 <= a3) {
        double v36 = *v16;
      }
      else {
        double v36 = a3;
      }
      if (v34 < a2) {
        double v36 = a2;
      }
      if (v35 >= a2) {
        double v37 = v16[1];
      }
      else {
        double v37 = a2;
      }
      if (v35 > a3) {
        double v37 = a3;
      }
      if (v36 == v34 && v37 == v35)
      {
        sub_10013D52C((uint64_t)v16, v85, type metadata accessor for TimeRangeRun);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_10015E880(0, v29[2] + 1, 1);
        }
        uint64_t v29 = v87;
        unint64_t v40 = v87[2];
        unint64_t v39 = v87[3];
        if (v40 >= v39 >> 1)
        {
          sub_10015E880(v39 > 1, v40 + 1, 1);
          uint64_t v29 = v87;
        }
        void v29[2] = v40 + 1;
        uint64_t result = sub_10013D52C(v85, (uint64_t)v29 + v32 + v40 * v33, type metadata accessor for TimeRangeRun);
      }
      else
      {
        uint64_t result = sub_10013D5F8((uint64_t)v16, type metadata accessor for TimeRangeRun);
      }
      if (v30 == ++v31)
      {
        uint64_t v29 = v87;
        goto LABEL_26;
      }
    }
    __break(1u);
    goto LABEL_34;
  }
LABEL_26:
  swift_bridgeObjectRelease();
  uint64_t v41 = v29[2];
  uint64_t v42 = v83;
  uint64_t v43 = v84;
  if (!v41)
  {
    swift_release();
    return AttributedSubstring.init()();
  }
  uint64_t v44 = (uint64_t)v29 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  sub_10013D4C8(v44, v84);
  uint64_t v45 = v44 + *(void *)(v8 + 72) * (v41 - 1);
  uint64_t v46 = v81;
  sub_10013D4C8(v45, v81);
  (*(void (**)(uint64_t, void, uint64_t, void *))(v8 + 56))(v46, 0, 1, v42);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v8 + 48))(v46, 1, v42) == 1)
  {
    sub_10013D5F8(v43, type metadata accessor for TimeRangeRun);
    sub_1000285F8(v46, (uint64_t *)&unk_100268DD0);
    return AttributedSubstring.init()();
  }
  uint64_t v47 = v80;
  sub_10013D52C(v46, v80, type metadata accessor for TimeRangeRun);
  uint64_t v48 = sub_100028654(&qword_100266770);
  uint64_t v49 = *(void *)(*(void *)(v48 - 8) + 64);
  uint64_t v50 = __chkstk_darwin(v48);
  unint64_t v51 = (v49 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v81 = (uint64_t)v71 - v51;
  uint64_t v52 = v47 + *((int *)v42 + 5) + (uint64_t)*(int *)(v50 + 36);
  uint64_t v53 = type metadata accessor for AttributedString.Index();
  sub_10013D658(&qword_100268D90, (void (*)(uint64_t))&type metadata accessor for AttributedString.Index);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    Swift::String v76 = v71;
    __chkstk_darwin(result);
    uint64_t v85 = (uint64_t)v71 - v51;
    uint64_t v54 = sub_100028654(&qword_100268DE0);
    uint64_t v74 = v48;
    unint64_t v75 = v71;
    uint64_t v55 = v54 - 8;
    uint64_t v56 = v52;
    uint64_t v57 = *(void *)(*(void *)(v54 - 8) + 64);
    __chkstk_darwin(v54);
    uint64_t v58 = (char *)v71 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v73 = (v57 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v59 = &v58[*(int *)(v55 + 56)];
    uint64_t v60 = *(void **)(v53 - 8);
    double v83 = v71;
    uint64_t v61 = (void (*)(char *))v60[2];
    v61(v58);
    uint64_t v72 = v59;
    uint64_t v62 = ((uint64_t (*)(char *, uint64_t, uint64_t))v61)(v59, v56, v53);
    v71[1] = v71;
    __chkstk_darwin(v62);
    uint64_t v63 = &v58[*(int *)(v55 + 56)];
    ((void (*)(char *, char *, uint64_t))v61)(v58, v58, v53);
    ((void (*)(char *, char *, uint64_t))v61)(v63, v59, v53);
    Swift::String v64 = (void (*)(uint64_t, char *, uint64_t))v60[4];
    v64(v85, v58, v53);
    uint64_t v65 = (uint64_t (*)(char *, uint64_t))v60[1];
    uint64_t v66 = v65(v63, v53);
    __chkstk_darwin(v66);
    uint64_t v67 = (char *)v71 - v73;
    uint64_t v68 = (char *)v71 + *(int *)(v55 + 56) - v73;
    v64((uint64_t)v71 - v73, v58, v53);
    v64((uint64_t)v68, v72, v53);
    uint64_t v69 = v85;
    v64(v85 + *(int *)(v74 + 36), v68, v53);
    v65(v67, v53);
    uint64_t v70 = v81;
    sub_1000F74A0(v69, v81);
    sub_100027F5C(&qword_100268D80, &qword_100266770);
    dispatch thunk of AttributedStringProtocol.subscript.getter();
    sub_1000285F8(v70, &qword_100266770);
    sub_10013D5F8(v80, type metadata accessor for TimeRangeRun);
    return sub_10013D5F8(v84, type metadata accessor for TimeRangeRun);
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10013A8D0()
{
  type metadata accessor for AttributedString.CharacterView();
  sub_10013D658(&qword_100268DC0, (void (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView);
  uint64_t v0 = 0;
  if ((dispatch thunk of Collection.isEmpty.getter() & 1) == 0)
  {
    uint64_t v1 = type metadata accessor for AttributedString.Index();
    v12[1] = v12;
    uint64_t v2 = *(void *)(v1 - 8);
    uint64_t v3 = __chkstk_darwin(v1);
    uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    __chkstk_darwin(v3);
    uint64_t v7 = (char *)v12 - v6;
    dispatch thunk of Collection.endIndex.getter();
    sub_10013D658(&qword_100268DC8, (void (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView);
    dispatch thunk of BidirectionalCollection.index(before:)();
    uint64_t v8 = *(void (**)(char *, uint64_t))(v2 + 8);
    v8(v7, v1);
    uint64_t v9 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v0 = *v10;
    swift_bridgeObjectRetain();
    v9(v13, 0);
    v8(v5, v1);
  }
  return v0;
}

uint64_t sub_10013AAB8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_liveTranscriptionString;
  uint64_t v2 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10013D5F8(v0 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel, type metadata accessor for TranscriptionPresentationModel);

  return swift_deallocClassInstance();
}

uint64_t sub_10013AB7C()
{
  return type metadata accessor for TranscriptionCompiler(0);
}

uint64_t type metadata accessor for TranscriptionCompiler(uint64_t a1)
{
  return sub_100111A1C(a1, qword_100268BD0);
}

uint64_t sub_10013ABA4()
{
  uint64_t result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for TranscriptionPresentationModel(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for TranscriptionPresentationModel(uint64_t a1)
{
  return sub_100111A1C(a1, qword_100268D30);
}

uint64_t *sub_10013AC90(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AttributedString();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    uint64_t v11 = (uint64_t *)((char *)a1 + v9);
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    void *v11 = *v12;
    v11[1] = v13;
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    uint64_t v14 = a3[8];
    uint64_t v15 = a3[9];
    double v16 = (uint64_t *)((char *)a1 + v14);
    uint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *double v16 = *v17;
    v16[1] = v18;
    *(uint64_t *)((char *)a1 + v15) = *(uint64_t *)((char *)a2 + v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10013ADC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10013AE84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  uint64_t v15 = (void *)(a1 + v13);
  double v16 = (void *)(a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10013AF68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10013B080(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  return a1;
}

uint64_t sub_10013B140(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10013B230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013B244);
}

uint64_t sub_10013B244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10013B308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013B31C);
}

uint64_t sub_10013B31C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10013B3DC()
{
  uint64_t result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10013B498@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v5 = type metadata accessor for TimeRangeRun(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (double *)((char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = v9;
  if (a2 == 0.0)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    return v11(a1, v2, v9);
  }
  else
  {
    uint64_t v43 = v5;
    uint64_t v40 = a1;
    v37[0] = v6;
    v37[1] = v37;
    __chkstk_darwin(v9);
    uint64_t v38 = v14;
    uint64_t v15 = *(void (**)(void))(v14 + 16);
    uint64_t v44 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v15();
    uint64_t v16 = type metadata accessor for AttributedString.Runs();
    uint64_t v41 = v37;
    uint64_t v17 = *(void *)(v16 - 8);
    __chkstk_darwin(v16);
    uint64_t v19 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_10013D658(&qword_100266740, (void (*)(uint64_t))&type metadata accessor for AttributedString);
    uint64_t v39 = v10;
    dispatch thunk of AttributedStringProtocol.runs.getter();
    uint64_t KeyPath = swift_getKeyPath();
    v37[-2] = __chkstk_darwin(KeyPath);
    swift_getKeyPath();
    uint64_t v21 = sub_100028654((uint64_t *)&unk_100268DB0);
    uint64_t v22 = *(void *)(v21 - 8);
    __chkstk_darwin(v21);
    uint64_t v24 = (char *)v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v42 = sub_1000E93EC();
    AttributedString.Runs.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    uint64_t v25 = sub_100105888((uint64_t)v24);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    uint64_t v26 = v25[2];
    if (v26)
    {
      uint64_t v27 = *(unsigned __int8 *)(v37[0] + 80);
      uint64_t v41 = v25;
      uint64_t v28 = (uint64_t)v25 + ((v27 + 32) & ~v27);
      uint64_t v29 = *(void *)(v37[0] + 72);
      while (1)
      {
        sub_10013D4C8(v28, (uint64_t)v8);
        uint64_t v30 = (uint64_t)v8 + *(int *)(v43 + 20);
        uint64_t v31 = sub_100028654(&qword_100266770);
        __chkstk_darwin(v31);
        uint64_t v33 = (char *)v37 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_1000F7508(v30, (uint64_t)v33);
        uint64_t v34 = swift_getKeyPath();
        v37[-2] = __chkstk_darwin(v34);
        uint64_t result = swift_getKeyPath();
        double v35 = v8[1] + a2;
        if (*v8 + a2 > v35) {
          break;
        }
        double v46 = *v8 + a2;
        double v47 = v35;
        char v48 = 0;
        sub_100027F5C(&qword_100268D80, &qword_100266770);
        double v36 = (void (*)(char *, void))AttributedString.subscript.modify();
        AttributedSubstring.subscript.setter();
        v36(v45, 0);
        sub_1000285F8((uint64_t)v33, &qword_100266770);
        sub_10013D5F8((uint64_t)v8, type metadata accessor for TimeRangeRun);
        v28 += v29;
        if (!--v26) {
          goto LABEL_9;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_9:
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 32))(v40, v44, v39);
    }
  }
  return result;
}

uint64_t sub_10013BA18()
{
  uint64_t v1 = type metadata accessor for TranscriptionFormatter.PartialResult();
  __chkstk_darwin(v1);
  uint64_t v3 = (uint64_t)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for TranscriptionPresentationModel(0);
  uint64_t v29 = v0;
  uint64_t v4 = v0 + *(int *)(v28 + 20);
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = sub_10013D658(&qword_100266740, (void (*)(uint64_t))&type metadata accessor for AttributedString);
  AttributedString.append<A>(_:)();
  sub_100145130(v4, 3, v3);
  sub_100028654(&qword_100266770);
  sub_100027F5C(&qword_100268D80, &qword_100266770);
  AttributedString.removeSubrange<A>(_:)();
  uint64_t v7 = type metadata accessor for AttributedString.Runs();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v26[2] = v5;
  uint64_t v27 = v3;
  v26[1] = v6;
  dispatch thunk of AttributedStringProtocol.runs.getter();
  uint64_t v11 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_10013D658(&qword_100268DE8, (void (*)(uint64_t))&type metadata accessor for AttributedString.Runs);
  uint64_t v15 = dispatch thunk of Collection.startIndex.getter();
  __chkstk_darwin(v15);
  dispatch thunk of Collection.endIndex.getter();
  sub_10013D658(&qword_100268DF0, (void (*)(uint64_t))&type metadata accessor for AttributedString.Runs.Index);
  LOBYTE(v3) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v12 + 8);
  v16((char *)v26 - v14, v11);
  v16((char *)v26 - v14, v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v3)
  {
    sub_10013D5F8(v27, (uint64_t (*)(void))type metadata accessor for TranscriptionFormatter.PartialResult);
    uint64_t v17 = v29;
  }
  else
  {
    uint64_t v18 = type metadata accessor for AttributedString.Index();
    uint64_t v19 = *(void *)(v18 - 8);
    __chkstk_darwin(v18);
    uint64_t v21 = (char *)v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v22 = v29;
    AttributedString.endIndex.getter();
    uint64_t v23 = v27;
    AttributedString.append<A>(_:)();
    sub_10013C114((uint64_t)v21);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    sub_10013D5F8(v23, (uint64_t (*)(void))type metadata accessor for TranscriptionFormatter.PartialResult);
    uint64_t v17 = v22;
  }
  uint64_t v24 = (void *)(v17 + *(int *)(v28 + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v24 = 0;
  v24[1] = 0;
  return result;
}

uint64_t sub_10013BE60()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AttributedString();
  uint64_t v3 = *(void **)(v2 - 8);
  uint64_t v4 = v3[8];
  __chkstk_darwin(v2);
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = type metadata accessor for TranscriptionPresentationModel(0);
  uint64_t v7 = v1 + *(int *)(v6 + 20);
  uint64_t v8 = static AttributedString.+ infix(_:_:)();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for AttributedSubstring();
  uint64_t result = __chkstk_darwin(v9 - 8);
  double v12 = *(double *)(v1 + *(int *)(v6 + 36));
  if (v12 < 0.0)
  {
    __break(1u);
  }
  else
  {
    sub_100139FB0((uint64_t)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), 0.0, v12);
    uint64_t v13 = AttributedString.init(_:)();
    uint64_t v21 = &v18;
    __chkstk_darwin(v13);
    uint64_t v14 = sub_100144DF0((uint64_t)&v18 - v5, (uint64_t)&v18 - v5);
    uint64_t v20 = (char *)&v18 - v5;
    __chkstk_darwin(v14);
    AttributedString.init(stringLiteral:)();
    uint64_t v19 = (char *)&v18 - v5;
    uint64_t v15 = (uint64_t (*)(uint64_t, char *, uint64_t))v3[5];
    uint64_t v16 = v15(v7, (char *)&v18 - v5, v2);
    __chkstk_darwin(v16);
    AttributedString.init(stringLiteral:)();
    v15(v1, (char *)&v18 - v5, v2);
    sub_10013BA18();
    uint64_t v17 = (void (*)(char *, uint64_t))v3[1];
    v17((char *)&v18 - v5, v2);
    v17(v20, v2);
    return ((uint64_t (*)(char *, uint64_t))v17)(v19, v2);
  }
  return result;
}

uint64_t sub_10013C114(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AttributedString.Index();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributedString.startIndex.getter();
  char v8 = static AttributedString.Index.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    uint64_t v9 = type metadata accessor for TranscriptionPresentationModel(0);
    String.removeAll(keepingCapacity:)(0);
    uint64_t v10 = *(int *)(v9 + 28);
    swift_bridgeObjectRelease();
    *(void *)(v2 + v10) = &_swiftEmptyArrayStorage;
  }
  uint64_t v11 = type metadata accessor for AttributedSubstring();
  uint64_t v44 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100028654(&qword_100268D98);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10013D658(&qword_100268DA0, (void (*)(uint64_t))&type metadata accessor for AttributedString.Index);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v16, a1, v4);
    sub_100027F5C(&qword_100268DA8, &qword_100268D98);
    AttributedString.subscript.getter();
    sub_1000285F8((uint64_t)v16, &qword_100268D98);
    uint64_t v18 = type metadata accessor for AttributedString.CharacterView();
    __chkstk_darwin(v18);
    sub_10013D658(&qword_100268D88, (void (*)(uint64_t))&type metadata accessor for AttributedSubstring);
    dispatch thunk of AttributedStringProtocol.characters.getter();
    sub_10013D658((unint64_t *)&unk_1002699D0, (void (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView);
    uint64_t v19 = String.init<A>(_:)();
    uint64_t v21 = v20;
    uint64_t v43 = type metadata accessor for TranscriptionPresentationModel(0);
    v22._uint64_t countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    uint64_t v23 = type metadata accessor for AttributedString();
    v45[3] = v23;
    v45[4] = sub_10013D658(&qword_100266740, (void (*)(uint64_t))&type metadata accessor for AttributedString);
    uint64_t v24 = sub_1000DED60(v45);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v24, v2, v23);
    uint64_t v25 = type metadata accessor for AttributedString.Runs();
    unint64_t v42 = v39;
    uint64_t v26 = *(void *)(v25 - 8);
    __chkstk_darwin(v25);
    uint64_t v28 = (char *)v39 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    dispatch thunk of AttributedStringProtocol.runs.getter();
    uint64_t KeyPath = swift_getKeyPath();
    v39[-2] = __chkstk_darwin(KeyPath);
    swift_getKeyPath();
    uint64_t v30 = sub_100028654((uint64_t *)&unk_100268DB0);
    uint64_t v40 = v11;
    uint64_t v41 = v13;
    uint64_t v31 = *(void *)(v30 - 8);
    v39[1] = v2;
    uint64_t v32 = v31;
    __chkstk_darwin(v30);
    uint64_t v34 = v44;
    double v35 = (char *)v39 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1000E93EC();
    AttributedString.Runs.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    double v36 = sub_100105888((uint64_t)v35);
    uint64_t v37 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v35, v30);
    __chkstk_darwin(v37);
    v39[-2] = v45;
    uint64_t v38 = sub_1001064FC((void (*)(long long *__return_ptr, uint64_t))sub_100107024, (uint64_t)&v39[-4], (uint64_t)v36);
    swift_bridgeObjectRelease();
    sub_10002F48C((uint64_t)v45);
    sub_100137F60((uint64_t)v38);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v41, v40);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10013C770@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a2[3];
  char v8 = sub_10001510C(a2, v7);
  uint64_t v9 = (uint64_t)a1 + *(int *)(type metadata accessor for TimeRangeRun(0) + 20);
  uint64_t v10 = sub_100028654(&qword_100266770);
  __chkstk_darwin(v10);
  uint64_t v12 = sub_1000F7508(v9, (uint64_t)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  (*(void (**)(char *, void *, uint64_t))(v14 + 16))((char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v8, v7);
  sub_100027F5C(&qword_100268D80, &qword_100266770);
  uint64_t result = _NSRange.init<A, B>(_:in:)();
  *a3 = v5;
  a3[1] = v6;
  a3[2] = result;
  a3[3] = v16;
  return result;
}

uint64_t type metadata accessor for TimeRangeRun(uint64_t a1)
{
  return sub_100111A1C(a1, (uint64_t *)&unk_100268F10);
}

uint64_t type metadata accessor for TranscriptionFragment(uint64_t a1)
{
  return sub_100111A1C(a1, qword_100268E78);
}

unint64_t sub_10013C960(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    sub_10013CA40(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t sub_10013CA40(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    uint64_t result = sub_10013CAE0(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_10013CB50(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_10013CAE0(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    uint64_t result = sub_1001655A0(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_10013CB50(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      void v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }
      if ((*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      unint64_t v7 = v5;
      return v7 << 16;
    }
    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9)
    {
      return _StringGuts.foreignScalarAlign(_:)();
    }
  }
  return result;
}

uint64_t sub_10013CC74(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100027F5C(&qword_100268E18, &qword_100268E10);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100028654(&qword_100268E10);
          unint64_t v12 = sub_1000E73A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10010350C();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013CE98(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100027F5C((unint64_t *)&unk_100268E00, &qword_100268DF8);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100028654(&qword_100268DF8);
          unint64_t v12 = sub_1000E7338(v16, i, a3);
          uint64_t v14 = *v13;
          swift_unknownObjectRetain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100028654(&qword_100267350);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013D0C0(double *a1, double *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    uint64_t v6 = *(int *)(type metadata accessor for TimeRangeRun(0) + 20);
    uint64_t v7 = (uint64_t)a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    type metadata accessor for AttributedString.Index();
    sub_10013D658(&qword_100268DA0, (void (*)(uint64_t))&type metadata accessor for AttributedString.Index);
    char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v10 = sub_100028654(&qword_100266770);
    v15[1] = v15;
    uint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
    __chkstk_darwin(v10);
    unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v13 = sub_1000F7508(v7, (uint64_t)v15 - v12);
    __chkstk_darwin(v13);
    sub_1000F7508(v8, (uint64_t)v15 - v12);
    if (v9) {
      char v3 = dispatch thunk of static Equatable.== infix(_:_:)();
    }
    else {
      char v3 = 0;
    }
    sub_1000285F8((uint64_t)v15 - v12, &qword_100266770);
    sub_1000285F8((uint64_t)v15 - v12, &qword_100266770);
  }
  else
  {
    char v3 = 0;
  }
  return v3 & 1;
}

unint64_t sub_10013D26C(unint64_t a1, unint64_t a2)
{
  if (Character.isWhitespace.getter()) {
    return 1;
  }
  unint64_t result = sub_10013C960(a1, a2);
  if ((result & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    BOOL v5 = (result - 8232) < 2 || result == 133;
    return (result - 14) > 0xFFFFFFFB || v5;
  }
  return result;
}

uint64_t sub_10013D2E0()
{
  uint64_t v0 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  __chkstk_darwin(v0);
  unint64_t v3 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  AttributedString.characters.getter();
  unint64_t v4 = sub_10013A8D0();
  unint64_t v6 = v5;
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  uint64_t v8 = v7((char *)&v16 - v3, v0);
  if (v6)
  {
    __chkstk_darwin(v8);
    AttributedSubstring.characters.getter();
    unint64_t v9 = sub_10011AAF0();
    unint64_t v11 = v10;
    v7((char *)&v16 - v3, v0);
    if (!v11)
    {
      swift_bridgeObjectRelease();
      char v13 = 0;
      return v13 & 1;
    }
    char v12 = sub_10013D26C(v4, v6);
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      char v14 = sub_10013D26C(v9, v11);
      swift_bridgeObjectRelease();
      char v13 = v14 ^ 1;
      return v13 & 1;
    }
    swift_bridgeObjectRelease();
  }
  char v13 = 0;
  return v13 & 1;
}

uint64_t sub_10013D494()
{
  return 8;
}

uint64_t sub_10013D4A0()
{
  return swift_release();
}

uint64_t sub_10013D4A8(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_10013D4BC(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10013D4C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeRangeRun(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013D52C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10013D594(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TranscriptionPresentationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013D5F8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10013D658(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10013D6A0(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for AttributedString();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_10013D76C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for AttributedString();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

_OWORD *sub_10013D7D4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

void *sub_10013D850(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *sub_10013D8E4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_OWORD *sub_10013D960(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t sub_10013D9DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013D9F0);
}

uint64_t sub_10013D9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_10013DA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013DA74);
}

uint64_t sub_10013DA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_10013DAE8()
{
  uint64_t result = type metadata accessor for AttributedString();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10013DB80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for AttributedString.Index();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    v9(v6, v7, v8);
    uint64_t v10 = sub_100028654(&qword_100266770);
    v9(&v6[*(int *)(v10 + 36)], &v7[*(int *)(v10 + 36)], v8);
  }
  return v3;
}

uint64_t sub_10013DC80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for AttributedString.Index();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v3 - 8), v2, v3);
  uint64_t v4 = v2 + *(int *)(sub_100028654(&qword_100266770) + 36);

  return v6(v4, v3);
}

_OWORD *sub_10013DD24(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for AttributedString.Index();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  v8(v5, v6, v7);
  uint64_t v9 = sub_100028654(&qword_100266770);
  v8(&v5[*(int *)(v9 + 36)], &v6[*(int *)(v9 + 36)], v7);
  return a1;
}

void *sub_10013DDD4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for AttributedString.Index();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24);
  v8(v5, v6, v7);
  uint64_t v9 = sub_100028654(&qword_100266770);
  v8(&v5[*(int *)(v9 + 36)], &v6[*(int *)(v9 + 36)], v7);
  return a1;
}

_OWORD *sub_10013DE8C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for AttributedString.Index();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
  v8(v5, v6, v7);
  uint64_t v9 = sub_100028654(&qword_100266770);
  v8(&v5[*(int *)(v9 + 36)], &v6[*(int *)(v9 + 36)], v7);
  return a1;
}

_OWORD *sub_10013DF3C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for AttributedString.Index();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40);
  v8(v5, v6, v7);
  uint64_t v9 = sub_100028654(&qword_100266770);
  v8(&v5[*(int *)(v9 + 36)], &v6[*(int *)(v9 + 36)], v7);
  return a1;
}

uint64_t sub_10013DFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013E000);
}

uint64_t sub_10013E000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = sub_100028654(&qword_100266770);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_10013E074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013E088);
}

uint64_t sub_10013E088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = sub_100028654(&qword_100266770);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

void sub_10013E100()
{
  sub_10013E198();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10013E198()
{
  if (!qword_100268F20)
  {
    type metadata accessor for AttributedString.Index();
    sub_10013D658(&qword_100268D90, (void (*)(uint64_t))&type metadata accessor for AttributedString.Index);
    unint64_t v0 = type metadata accessor for Range();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100268F20);
    }
  }
}

uint64_t sub_10013E214@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_100107024(a1, a2);
}

id sub_10013E22C(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(os_unfair_lock_s **)(v2 + 24);
  swift_retain();
  os_unfair_lock_lock(v6 + 4);
  swift_release();
  id v7 = [a1 format];
  sub_10013EB00();
  if (static NSObject.== infix(_:_:)())
  {
    id v8 = a1;

    uint64_t v9 = *(os_unfair_lock_s **)(v3 + 24);
    swift_retain();
    os_unfair_lock_unlock(v9 + 4);
    swift_release();
    return v8;
  }
  uint64_t v11 = *(void **)(v3 + 16);
  if (!v11) {
    goto LABEL_9;
  }
  id v12 = [v11 outputFormat];
  if (!v12) {
    goto LABEL_9;
  }
  char v13 = v12;
  id v14 = a2;
  id v15 = v13;
  char v16 = static NSObject.== infix(_:_:)();

  if ((v16 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v17 = *(void **)(v3 + 16);
  if (!v17) {
    goto LABEL_9;
  }
  id v18 = [v17 inputFormat];
  if (!v18
    || (uint64_t v19 = v18,
        id v20 = v7,
        id v21 = v19,
        char v22 = static NSObject.== infix(_:_:)(),
        v21,
        v21,
        v20,
        (v22 & 1) == 0))
  {
LABEL_9:
    id v23 = [objc_allocWithZone((Class)AVAudioConverter) initFromFormat:v7 toFormat:a2];
    uint64_t v24 = *(void **)(v3 + 16);
    *(void *)(v3 + 16) = v23;

    uint64_t v25 = *(void **)(v3 + 16);
    if (!v25)
    {
LABEL_24:
      if (qword_100264530 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      sub_10002272C(v52, (uint64_t)qword_100275340);
      os_log_type_t v53 = static os_log_type_t.error.getter();
      id v54 = a2;
      id v55 = v7;
      id v56 = v54;
      id v42 = v55;
      uint64_t v57 = Logger.logObject.getter();
      if (os_log_type_enabled(v57, v53))
      {
        os_log_type_t type = v53;
        uint64_t v58 = swift_slowAlloc();
        uint64_t v59 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = 138412546;
        id v60 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v59 = v42;

        *(_WORD *)(v58 + 12) = 2112;
        aBlock[0] = v56;
        id v61 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v59[1] = v56;

        _os_log_impl((void *)&_mh_execute_header, v57, type, "Failed to create converter, inputFormat = %@, outputFormat %@", (uint8_t *)v58, 0x16u);
        sub_100028654(&qword_100265560);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      sub_10013EB40();
      swift_allocError();
      *uint64_t v62 = 1;
      swift_willThrow();

      goto LABEL_30;
    }
    [v25 setPrimeMethod:2];
  }
  uint64_t v26 = *(void **)(v3 + 16);
  if (!v26) {
    goto LABEL_24;
  }
  id v27 = v26;
  id v28 = [v27 inputFormat];
  [v28 sampleRate];
  if (v29 <= 0.0) {
    goto LABEL_22;
  }
  unsigned int v30 = [v28 channelCount];

  if (!v30)
  {
LABEL_23:

    goto LABEL_24;
  }
  id v28 = [v27 outputFormat];
  [v28 sampleRate];
  if (v31 <= 0.0)
  {
LABEL_22:

    id v27 = v28;
    goto LABEL_23;
  }
  unsigned int v32 = [v28 channelCount];

  if (!v32) {
    goto LABEL_23;
  }
  id v33 = [v27 outputFormat];
  [v33 sampleRate];
  double v35 = v34;

  id v36 = [v27 inputFormat];
  [v36 sampleRate];
  double v38 = v37;

  double v39 = ceil(v35 / v38 * (double)[a1 frameLength]);
  if ((~*(void *)&v39 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v39 <= -1.0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  if (v39 >= 4294967300.0) {
    goto LABEL_36;
  }
  uint64_t v40 = v39;
  id v41 = [v27 outputFormat];
  id v42 = [objc_allocWithZone((Class)AVAudioPCMBuffer) initWithPCMFormat:v41 frameCapacity:v40];

  if (v42)
  {
    uint64_t v43 = swift_allocObject();
    *(unsigned char *)(v43 + 16) = 0;
    uint64_t v44 = (void *)swift_allocObject();
    void v44[2] = v43;
    v44[3] = a1;
    aBlock[4] = sub_10013EBE4;
    aBlock[5] = v44;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_10013EA30;
    aBlock[3] = &unk_100227A18;
    uint64_t v45 = _Block_copy(aBlock);
    swift_retain();
    id v46 = a1;
    swift_release();
    aBlock[0] = 0;
    id v47 = [v27 convertToBuffer:v42 error:aBlock withInputFromBlock:v45];
    _Block_release(v45);
    id v48 = aBlock[0];
    uint64_t v49 = v48;
    if (v47 != (id)3)
    {

      swift_release();
      uint64_t v65 = *(os_unfair_lock_s **)(v3 + 24);
      swift_retain();
      os_unfair_lock_unlock(v65 + 4);
      swift_release();
      return v42;
    }
    sub_10013EB40();
    swift_allocError();
    *uint64_t v50 = v49;
    id v51 = v49;
    swift_willThrow();

    swift_release();
  }
  else
  {
    sub_10013EB40();
    swift_allocError();
    *Swift::String v64 = 2;
    swift_willThrow();
  }
LABEL_30:
  uint64_t v63 = *(os_unfair_lock_s **)(v3 + 24);
  swift_retain();
  os_unfair_lock_unlock(v63 + 4);
  swift_release();
  return v42;
}

void *sub_10013E9A0(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  id v7 = (unsigned char *)(a3 + 16);
  swift_beginAccess();
  if (*(unsigned char *)(a3 + 16))
  {
    a4 = 0;
    uint64_t v8 = 1;
  }
  else
  {
    id v9 = a4;
    uint64_t v8 = 0;
  }
  *a2 = v8;
  swift_beginAccess();
  *id v7 = 1;
  return a4;
}

id sub_10013EA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v6 = (void *)v5(a2, a3);
  swift_release();

  return v6;
}

uint64_t sub_10013EA9C()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BufferFormatConverter()
{
  return self;
}

unint64_t sub_10013EB00()
{
  unint64_t result = qword_100268FF8;
  if (!qword_100268FF8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100268FF8);
  }
  return result;
}

unint64_t sub_10013EB40()
{
  unint64_t result = qword_100269000;
  if (!qword_100269000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100269000);
  }
  return result;
}

uint64_t sub_10013EB94()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013EBA4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void *sub_10013EBE4(uint64_t a1, uint64_t *a2)
{
  return sub_10013E9A0(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_10013EBEC()
{
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for BufferFormatConverter.Error(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v4 = *a2;
  }
  if ((v4 + 1) <= 1) {
    id v5 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for BufferFormatConverter.Error(void **a1)
{
  uint64_t v1 = *a1;
  int v2 = -1;
  if ((unint64_t)v1 < 0xFFFFFFFF) {
    int v2 = (int)v1;
  }
  if ((v2 + 1) <= 1) {
}
  }

void **assignWithCopy for BufferFormatConverter.Error(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v5) = -1;
  }
  else {
    id v5 = *a1;
  }
  unsigned int v6 = v5 + 1;
  id v7 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v4 = *a2;
  }
  unsigned int v8 = v4 + 1;
  if (v6 > 1)
  {
    if (v8 <= 1)
    {
      *a1 = v7;
      id v10 = v7;
      return a1;
    }
LABEL_12:
    *a1 = v7;
    return a1;
  }
  if (v8 > 1)
  {

    id v7 = *a2;
    goto LABEL_12;
  }
  *a1 = v7;
  id v9 = v7;

  return a1;
}

void *initializeWithTake for BufferFormatConverter.Error(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void **assignWithTake for BufferFormatConverter.Error(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v5) = -1;
  }
  else {
    id v5 = *a1;
  }
  unsigned int v6 = v5 + 1;
  id v7 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v4 = *a2;
  }
  unsigned int v8 = v4 + 1;
  if (v6 > 1) {
    goto LABEL_11;
  }
  if (v8 > 1)
  {

LABEL_11:
    *a1 = v7;
    return a1;
  }
  *a1 = v7;

  return a1;
}

uint64_t getEnumTagSinglePayload for BufferFormatConverter.Error(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) < 2) {
    LODWORD(v3) = 0;
  }
  if (v3 >= 4) {
    return (v3 - 3);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BufferFormatConverter.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 3;
    }
  }
  return result;
}

uint64_t sub_10013EE2C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  if ((v1 + 1) >= 2) {
    return v1;
  }
  else {
    return 0;
  }
}

void *sub_10013EE4C(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    *unint64_t result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BufferFormatConverter.Error()
{
  return &type metadata for BufferFormatConverter.Error;
}

BOOL sub_10013F0A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 8);
  unsigned int v3 = *((unsigned __int8 *)a2 + 8);
  if (!(v2 >> 6)) {
    return v3 < 0x40;
  }
  if (v2 >> 6 == 1) {
    return (v3 & 0xC0) == 0x40;
  }
  uint64_t v4 = *a2;
  if (*(void *)a1 | v2 ^ 0x80)
  {
    int v5 = v3 & 0xC0;
    if (*(unsigned __int8 *)(a1 + 8) == 128 && *(void *)a1 == 1)
    {
      if (v5 != 128 || v4 != 1) {
        return 0;
      }
    }
    else if (v5 != 128 || v4 != 2)
    {
      return 0;
    }
  }
  else if ((v3 & 0xC0) != 0x80 || v4 != 0)
  {
    return 0;
  }
  return v3 == 128;
}

uint64_t sub_10013F2B8(const void *a1)
{
  *(void *)(v1 + 16) = _Block_copy(a1);
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_100269040 + dword_100269040);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10013FCF0;
  return v4();
}

uint64_t sub_10013F360()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 384) = v2;
  uint64_t v3 = *(void *)(v1 + 328);
  uint64_t v4 = *(void *)(v1 + 320);
  if (v2) {
    uint64_t v5 = sub_10013F5CC;
  }
  else {
    uint64_t v5 = sub_10013F490;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10013F490()
{
  uint64_t v2 = *(void **)(v0 + 368);
  uint64_t v1 = *(const void **)(v0 + 376);
  swift_release();
  swift_bridgeObjectRelease();
  _Block_release(v1);

  *(void *)(v0 + 248) = 2;
  *(unsigned char *)(v0 + 256) = 0x80;
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  unsigned int v6 = *(void **)(v0 + 360);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Asset download completed", v7, 2u);
    swift_slowDealloc();
  }

  unsigned int v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10013F5CC()
{
  uint64_t v2 = *(const void **)(v0 + 376);
  uint64_t v1 = *(void *)(v0 + 384);
  os_log_type_t v4 = *(void **)(v0 + 360);
  uint64_t v3 = *(void **)(v0 + 368);
  swift_release();
  swift_willThrow();

  _Block_release(v2);
  *(void *)(v0 + 232) = v1;
  *(unsigned char *)(v0 + 240) = 64;
  swift_errorRetain();
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_errorRelease();
  swift_errorRetain();
  swift_errorRetain();
  BOOL v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    unsigned int v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 280) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unsigned int v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Asset download failed - error = %@", v7, 0xCu);
    sub_100028654(&qword_100265560);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10013F800(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100028654((uint64_t *)&unk_1002699C0);
    swift_allocError();
    *BOOL v5 = a3;
    id v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = *(uint64_t **)(*(void *)(v3 + 64) + 40);
    *uint64_t v9 = v8;
    v9[1] = v10;
    return swift_continuation_throwingResume();
  }
}

id sub_10013F9E0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TranscriptionModelAssetService();
  return [super dealloc];
}

uint64_t assignWithTake for TranscriptionModelAssetService.DownloadState(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_10001576C(v4, v5);
  return a1;
}

uint64_t sub_10013FA64(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 8);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10013FA84(uint64_t result)
{
  *(unsigned char *)(result + 8) &= 0x3Fu;
  return result;
}

uint64_t sub_10013FA94(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    *(unsigned char *)(result + 8) = *(unsigned char *)(result + 8) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(void *)unint64_t result = a2 - 2;
    *(unsigned char *)(result + 8) = 0x80;
  }
  return result;
}

uint64_t sub_10013FAC0()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10013FB00()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013FB38()
{
  return swift_release();
}

uint64_t sub_10013FB40()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_10013FB80(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_100269060);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10013FBE0()
{
  unint64_t result = qword_100269068;
  if (!qword_100269068)
  {
    type metadata accessor for Locale();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100269068);
  }
  return result;
}

uint64_t sub_10013FC3C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  unsigned int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100031604;
  uint64_t v4 = (uint64_t (*)(const void *))((char *)&dword_100269080 + dword_100269080);
  return v4(v2);
}

uint64_t sub_10013FCF4(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7, double a8)
{
  id v15 = *(uint64_t (**)(void *, id, double, double, double, double, double))(a1 + 32);
  id v16 = a2;
  id v17 = a3;
  char v18 = v15(a2, v17, a4, a5, a6, a7, a8);

  return v18 & 1;
}

id sub_10013FEDC(uint64_t a1)
{
  return sub_100141BC0(a1, type metadata accessor for TranscriptView.TranscriptTextView);
}

id sub_10013FF94()
{
  return sub_100141BC0(0, type metadata accessor for TranscriptView.FadeView);
}

double sub_10013FFB0()
{
  double result = 8.0;
  xmmword_100275570 = xmmword_1001F7520;
  *(_OWORD *)&qword_100275580 = xmmword_1001F7520;
  return result;
}

__n128 sub_10013FFC8()
{
  __n128 result = *(__n128 *)&UIEdgeInsetsZero.top;
  long long v1 = *(_OWORD *)&UIEdgeInsetsZero.bottom;
  xmmword_1002690C0 = *(_OWORD *)&UIEdgeInsetsZero.top;
  *(_OWORD *)&qword_1002690D0 = v1;
  return result;
}

uint64_t sub_10013FFE4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100028654(&qword_100269250);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for TranscriptViewModel();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t *)&v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  char v13 = &v17[-v12];
  uint64_t v14 = v2 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
  swift_beginAccess();
  sub_1000235CC(v14, (uint64_t)v13);
  swift_beginAccess();
  sub_1001421E4(a1, v14);
  swift_endAccess();
  sub_1000235CC(v14, (uint64_t)v11);
  char v15 = sub_100168BE0((uint64_t)v13, (uint64_t)v11);
  sub_10002343C((uint64_t)v11);
  if ((v15 & 1) == 0)
  {
    sub_1000235CC((uint64_t)v13, (uint64_t)v6);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    sub_1000102B4((uint64_t)v6);
    sub_1000235CC(v14, (uint64_t)v11);
    sub_10001D33C((uint64_t)v6, v11);
    sub_10002343C((uint64_t)v11);
    sub_100006FD4((uint64_t)v6);
    sub_10000919C((uint64_t)v6);
    sub_10000D088((uint64_t)v6);
    sub_10000E138();
    sub_1000285F8((uint64_t)v6, &qword_100269250);
  }
  sub_10002343C(a1);
  return sub_10002343C((uint64_t)v13);
}

void sub_10014034C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
  [v2 frame];
  [v2 frame];
  uint64_t v3 = v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 16);
  if (!*(void *)(v4 + 16))
  {
    uint64_t v22 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
LABEL_10:
    sub_1000285F8((uint64_t)&v20, &qword_100269290);
    goto LABEL_11;
  }
  uint64_t v5 = NSFontAttributeName;
  unint64_t v6 = sub_100025B80((uint64_t)v5);
  if (v7)
  {
    sub_1000D39B0(*(void *)(v4 + 56) + 40 * v6, (uint64_t)&v20);
  }
  else
  {
    uint64_t v22 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
  }

  if (!*((void *)&v21 + 1)) {
    goto LABEL_10;
  }
  v8.Class isa = AnyHashable._bridgeToObjectiveC()().isa;
  sub_10011BA28((uint64_t)&v20);
  self;
  uint64_t v9 = (void *)swift_dynamicCastObjCClass();
  if (v9) {
    [v9 lineHeight];
  }

LABEL_11:
  [v2 frame];
  double v11 = v10;
  [v2 frame];
  double v12 = nullsub_9(v11);
  char v13 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_topFadeView);
  [v13 setFrame:v12];
  id v14 = [v13 layer];
  id v15 = [v14 mask];

  if (v15)
  {
    [v13 bounds];
    [v15 setFrame:];
  }
  [v2 frame];
  double v16 = nullsub_9(v11);
  id v17 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_bottomFadeView);
  [v17 setFrame:v16];
  id v18 = [v17 layer];
  id v19 = [v18 mask];

  if (v19)
  {
    [v13 bounds];
    [v19 setFrame:];
  }
}

void sub_1001405F0()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView];
  id v2 = [v1 findInteraction];
  if (!v2) {
    return;
  }
  uint64_t v3 = v2;
  Notification.object.getter();
  if (v33 == 0.0)
  {

    char v13 = (long long *)v32;
LABEL_23:
    sub_1000285F8((uint64_t)v13, &qword_100265A10);
    return;
  }
  sub_100025F4C(0, &qword_100269288);
  if ((swift_dynamicCast() & 1) == 0)
  {

    return;
  }
  uint64_t v4 = (void *)v34;
  id v5 = [v0 window];
  unint64_t v6 = v5;
  if (v5)
  {
    id v7 = [v5 screen];

    v32[0] = v7;
    unint64_t v6 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  }
  unsigned int v8 = [(id)v34 isEqual:v6];
  swift_unknownObjectRelease();
  if (!v8)
  {

    return;
  }
  uint64_t v9 = Notification.userInfo.getter();
  if (!v9)
  {
    long long v34 = 0u;
    long long v35 = 0u;
LABEL_22:

    char v13 = &v34;
    goto LABEL_23;
  }
  uint64_t v10 = v9;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v10 + 16) && (unint64_t v11 = sub_10016817C((uint64_t)v32), (v12 & 1) != 0))
  {
    sub_10002F4DC(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v34);
  }
  else
  {
    long long v34 = 0u;
    long long v35 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10011BA28((uint64_t)v32);
  if (!*((void *)&v35 + 1)) {
    goto LABEL_22;
  }
  type metadata accessor for CGRect(0);
  if (swift_dynamicCast())
  {
    double v14 = *(double *)v32;
    double v15 = *(double *)&v32[1];
    double v16 = *(double *)&v32[2];
    double v17 = v33;
    id v18 = [v4 coordinateSpace];
    id v19 = v1;
    [v18 convertRect:v19 toCoordinateSpace:v14, v15, v16, v17];
    CGFloat v21 = v20;
    CGFloat v23 = v22;
    CGFloat v25 = v24;
    CGFloat v27 = v26;
    [v19 bounds];
    v40.origin.CGFloat x = v21;
    v40.origin.CGFloat y = v23;
    v40.size.CGFloat width = v25;
    v40.size.CGFloat height = v27;
    CGRect v37 = CGRectIntersection(v36, v40);
    CGFloat x = v37.origin.x;
    CGFloat y = v37.origin.y;
    CGFloat width = v37.size.width;
    CGFloat height = v37.size.height;
    if ([v3 isFindNavigatorVisible]
      && (v38.origin.CGFloat x = x, v38.origin.y = y, v38.size.width = width, v38.size.height = height, !CGRectIsEmpty(v38)))
    {
      [v19 bounds];
      CGRectGetMaxY(v39);
    }
    else if (qword_100264640 != -1)
    {
      swift_once();
    }
    [v19 contentInset];
    [v19 setContentInset:];

    swift_unknownObjectRelease();
  }
  else
  {
  }
}

void sub_100140998()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1001405F0();
  }
}

void sub_1001409F4(void *a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
  id v4 = [v3 textStorage];
  id v5 = [v4 string];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  swift_bridgeObjectRelease();
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v9)
  {
    [a1 locationInView:v3];
    id v10 = [v3 closestPositionToPoint:];
    if (v10)
    {
      unint64_t v11 = v10;
      id v12 = [v3 beginningOfDocument];
      id v13 = [v3 offsetFromPosition:v12 toPosition:v11];

      sub_10001510C((void *)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller), *(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller + 24));
      sub_10014E2CC((uint64_t)v13, (uint64_t)v17);
      sub_1001420DC((uint64_t)v17, (uint64_t)v18);
      if ((v19 & 1) != 0 || (v14 = v18[0], (uint64_t Strong = swift_unknownObjectWeakLoadStrong()) == 0))
      {
      }
      else
      {
        double v16 = *(void **)(Strong + 56);
        if (v16) {
          [v16 setTargetTime:v14];
        }

        swift_unknownObjectRelease();
      }
    }
  }
}

uint64_t sub_100140BF8(void *a1)
{
  sub_10002F970(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller, (uint64_t)v6);
  sub_10001510C(v6, v6[3]);
  [a1 velocityInView:*(void *)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView)];
  if (v3 <= 150.0)
  {
    if (v3 < -150.0 && swift_unknownObjectWeakLoadStrong())
    {
      char v4 = 1;
      goto LABEL_7;
    }
  }
  else if (swift_unknownObjectWeakLoadStrong())
  {
    char v4 = 0;
LABEL_7:
    sub_1000D3C20(v4);
    swift_unknownObjectRelease();
  }
  return sub_10002F48C((uint64_t)v6);
}

uint64_t sub_100140DC8(uint64_t a1, uint64_t a2, __int16 a3)
{
  if ((a3 & 0x100) != 0) {
    return 0;
  }
  char v5 = a3;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  unint64_t v7 = Strong;
  if (v5)
  {
    if (Strong)
    {
      id v27 = [Strong endOfDocument];
      [v7 caretRectForPosition:v27];
      CGFloat v29 = v28;
      CGFloat v31 = v30;
      CGFloat v33 = v32;
      CGFloat v35 = v34;

      v41.origin.CGFloat x = v29;
      v41.origin.CGFloat y = v31;
      v41.size.CGFloat width = v33;
      v41.size.CGFloat height = v35;
      CGRectGetMaxY(v41);
      [v7 adjustedContentInset];
      [v7 bounds];
      CGRectGetHeight(v42);
      [v7 adjustedContentInset];

      return sub_10011BF04();
    }
    return 0;
  }
  if (!Strong) {
    return 0;
  }
  unint64_t v8 = (void *)swift_unknownObjectWeakLoadStrong();
  if (!v8)
  {

    return 0;
  }
  uint64_t v9 = v8;
  id v10 = [v8 textLayoutManager];
  if (!v10)
  {

    return 0;
  }
  unint64_t v11 = v10;
  id v12 = sub_100016D2C(a1, a2);
  if (!v12)
  {

    return 0;
  }
  id v13 = v12;
  CGSize size = CGRectZero.size;
  CGPoint origin = CGRectZero.origin;
  CGSize v38 = size;
  sub_10011C074(v12);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = &origin;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_100142090;
  *(void *)(v16 + 24) = v15;
  v36[4] = sub_1001420A8;
  v36[5] = v16;
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 1107296256;
  v36[2] = sub_10013FCF4;
  v36[3] = &unk_100227DA0;
  double v17 = _Block_copy(v36);
  swift_retain();
  swift_release();
  [v11 enumerateTextSegmentsInRange:v13 type:1 options:3 usingBlock:v17];
  _Block_release(v17);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v17 & 1) == 0)
  {
    [v9 textContainerInset];
    double v20 = v19;
    double v22 = v21;

    CGFloat v23 = v22 + origin.x;
    CGFloat v24 = v20 + origin.y;
    origin.CGFloat x = v23;
    origin.CGFloat y = v24;
    CGSize v25 = v38;
    swift_release();
    v39.origin.CGFloat x = v23;
    v39.origin.CGFloat y = v24;
    v39.CGSize size = v25;
    CGRectGetMinY(v39);
    [v7 bounds];
    CGRectGetHeight(v40);
    uint64_t v26 = sub_10011BF04();

    return v26;
  }
  __break(1u);
  return result;
}

void sub_1001413B4(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  id v7 = a3;
  swift_unknownObjectRetain();
  id v8 = a1;
  a5();

  swift_unknownObjectRelease();
}

uint64_t sub_100141430(void *a1)
{
  uint64_t v2 = v1;
  double v3 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewTapGestureRecognizer);
  if (!v3) {
    return 1;
  }
  sub_100025F4C(0, &qword_100269238);
  id v5 = v3;
  id v6 = a1;
  LOBYTE(a1) = static NSObject.== infix(_:_:)();

  if ((a1 & 1) == 0) {
    return 1;
  }
  id v7 = *(void **)(v2 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
  [v7 selectedRange];
  if (!v8) {
    return 1;
  }
  id v9 = [v7 findInteraction];
  if (!v9) {
    return 0;
  }
  id v10 = v9;
  id v11 = [v9 isFindNavigatorVisible];

  return (uint64_t)v11;
}

BOOL sub_100141574(void *a1)
{
  uint64_t v2 = v1;
  double v3 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewPanGestureRecognizer);
  if (!v3) {
    return 0;
  }
  sub_100025F4C(0, &qword_100269238);
  id v5 = v3;
  id v6 = a1;
  LOBYTE(a1) = static NSObject.== infix(_:_:)();

  if ((a1 & 1) == 0) {
    return 0;
  }
  sub_100025F4C(0, (unint64_t *)&qword_100269240);
  id v7 = [*(id *)(v2 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView) panGestureRecognizer];
  char v8 = static NSObject.== infix(_:_:)();

  return (v8 & 1) != 0;
}

id sub_1001416CC(uint64_t a1, uint64_t a2)
{
  if ((static Selector.== infix(_:_:)() & 1) == 0)
  {
    sub_10002869C(a2, (uint64_t)v26, &qword_100265A10);
    uint64_t v17 = v27;
    if (v27)
    {
      id v18 = sub_10001510C(v26, v27);
      uint64_t v19 = *(void *)(v17 - 8);
      __n128 v20 = __chkstk_darwin(v18);
      double v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v19 + 16))(v22, v20);
      uint64_t v23 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v17);
      sub_10002F48C((uint64_t)v26);
    }
    else
    {
      uint64_t v23 = 0;
    }
    CGFloat v24 = (objc_class *)type metadata accessor for TranscriptView();
    v25.receiver = v2;
    v25.super_class = v24;
    [super canPerformAction:a1 withSender:v23];
    swift_unknownObjectRelease();
    return v16;
  }
  id v5 = *(void **)&v2[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView];
  id result = [v5 text];
  if (result)
  {
    id v7 = result;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    swift_bridgeObjectRelease();
    [v5 selectedRange];
    uint64_t v12 = v11;
    id result = [v5 text];
    if (result)
    {
      id v13 = result;
      if ((v10 & 0x2000000000000000) != 0) {
        uint64_t v14 = HIBYTE(v10) & 0xF;
      }
      else {
        uint64_t v14 = v8 & 0xFFFFFFFFFFFFLL;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v15 = String.count.getter();
      swift_bridgeObjectRelease();
      if (v14) {
        return (id)(v12 != v15);
      }
      else {
        return 0;
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001419A4(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
  sub_10002869C(a1, (uint64_t)v11, &qword_100265A10);
  uint64_t v3 = v12;
  if (v12)
  {
    char v4 = sub_10001510C(v11, v12);
    uint64_t v5 = *(void *)(v3 - 8);
    __n128 v6 = __chkstk_darwin(v4);
    uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v5 + 16))(v8, v6);
    uint64_t v9 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
    sub_10002F48C((uint64_t)v11);
  }
  else
  {
    uint64_t v9 = 0;
  }
  [v2 selectAll:v9];
  return swift_unknownObjectRelease();
}

void sub_100141B78()
{
}

id sub_100141BA4()
{
  return sub_100141BC0(0, type metadata accessor for TranscriptView);
}

id sub_100141BC0(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return [super dealloc];
}

uint64_t sub_100141D04()
{
  return type metadata accessor for TranscriptView();
}

uint64_t sub_100141D0C()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    sub_10001510C((void *)(result + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller), *(void *)(result + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller + 24));
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v2 = *(void *)(Strong + 40);
      uint64_t v3 = *(unsigned __int8 *)(Strong + 48);
      int v4 = *(unsigned __int8 *)(Strong + 49);
      int v5 = *(unsigned __int8 *)(Strong + 50);
      int v6 = *(unsigned __int8 *)(Strong + 51);
      int v7 = *(unsigned __int8 *)(Strong + 52);
      double v8 = *(double *)(Strong + 56);
      *(unsigned char *)(Strong + 49) = v4;
      *(unsigned char *)(Strong + 50) = v5;
      *(unsigned char *)(Strong + 51) = 1;
      *(unsigned char *)(Strong + 52) = v7;
      uint64_t v9 = *(unsigned __int16 *)(Strong + 32);
      sub_100015758(v2, v3);
      sub_100015758(v2, v3);
      sub_100015758(v2, v3);
      sub_10001576C(v2, v3);
      uint64_t v10 = 256;
      if (!v4) {
        uint64_t v10 = 0;
      }
      uint64_t v11 = v10 | v3;
      uint64_t v12 = 0x10000;
      if (!v5) {
        uint64_t v12 = 0;
      }
      uint64_t v13 = 0x1000000;
      if (!v6) {
        uint64_t v13 = 0;
      }
      uint64_t v14 = v11 | v12 | v13;
      uint64_t v15 = &_mh_execute_header;
      if (!v7) {
        uint64_t v15 = 0;
      }
      sub_100015780(v9, v2, v14 | (unint64_t)v15, v8);
      sub_10001576C(v2, v3);
      sub_10001576C(v2, v3);
      swift_unknownObjectRelease();
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100141E9C()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    sub_10001510C((void *)(result + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller), *(void *)(result + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller + 24));
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v2 = *(void *)(Strong + 40);
      uint64_t v3 = *(unsigned __int8 *)(Strong + 48);
      int v4 = *(unsigned __int8 *)(Strong + 49);
      int v5 = *(unsigned __int8 *)(Strong + 50);
      int v6 = *(unsigned __int8 *)(Strong + 51);
      int v7 = *(unsigned __int8 *)(Strong + 52);
      double v8 = *(double *)(Strong + 56);
      *(unsigned char *)(Strong + 49) = v4;
      *(_WORD *)(Strong + 50) = v5;
      *(unsigned char *)(Strong + 52) = v7;
      uint64_t v9 = *(unsigned __int16 *)(Strong + 32);
      sub_100015758(v2, v3);
      sub_100015758(v2, v3);
      sub_100015758(v2, v3);
      sub_10001576C(v2, v3);
      uint64_t v10 = 256;
      if (!v4) {
        uint64_t v10 = 0;
      }
      uint64_t v11 = v10 | v3;
      uint64_t v12 = 0x10000;
      if (!v5) {
        uint64_t v12 = 0;
      }
      uint64_t v13 = 0x1000000;
      if (!v6) {
        uint64_t v13 = 0;
      }
      uint64_t v14 = v11 | v12 | v13;
      uint64_t v15 = &_mh_execute_header;
      if (!v7) {
        uint64_t v15 = 0;
      }
      sub_100015780(v9, v2, v14 | (unint64_t)v15, v8);
      sub_10001576C(v2, v3);
      sub_10001576C(v2, v3);
      swift_unknownObjectRelease();
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

unint64_t sub_100142028()
{
  unint64_t result = qword_100269260;
  if (!qword_100269260)
  {
    type metadata accessor for UIContentUnavailableConfiguration();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100269260);
  }
  return result;
}

uint64_t sub_100142080()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100142090(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  return sub_10011C284(a3, a4, a5, a6, a1, a2, *(CGRect **)(v6 + 16));
}

uint64_t sub_100142098()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001420A8()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1001420D4()
{
  return swift_release();
}

uint64_t sub_1001420DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100269268);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100142144()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10014217C()
{
}

unint64_t sub_100142198()
{
  unint64_t result = qword_100269270;
  if (!qword_100269270)
  {
    type metadata accessor for NSNotificationCenter.Publisher();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100269270);
  }
  return result;
}

uint64_t sub_1001421E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TranscriptViewModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_100142248()
{
  uint64_t v1 = type metadata accessor for UIContentUnavailableConfiguration();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView;
  type metadata accessor for TranscriptView.TranscriptTextView();
  *(void *)&v0[v2] = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  uint64_t v3 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_searchButton;
  *(void *)&v0[v3] = [objc_allocWithZone((Class)UIButton) init];
  uint64_t v4 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_emptyStateView;
  sub_100025F4C(0, &qword_100269298);
  static UIContentUnavailableConfiguration.empty()();
  *(void *)&v0[v4] = UIContentUnavailableView.init(configuration:)();
  uint64_t v5 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_topFadeView;
  uint64_t v6 = (objc_class *)type metadata accessor for TranscriptView.FadeView();
  id v7 = objc_allocWithZone(v6);
  *(void *)&v0[v5] = sub_1000237D4(0);
  uint64_t v8 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_bottomFadeView;
  id v9 = objc_allocWithZone(v6);
  *(void *)&v0[v8] = sub_1000237D4(1);
  *(void *)&v0[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToLayoutMarginsBottomAnchorConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToSearchTopAnchorConstraint] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewTapGestureRecognizer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewPanGestureRecognizer] = 0;
  uint64_t v10 = &v0[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_animatedContentOffsetTarget];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  unsigned char v10[16] = 1;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v11 = (void *)sub_1000D0E2C((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    uint64_t v11 = &_swiftEmptySetSingleton;
  }
  *(void *)&v0[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_cancellables] = v11;

  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100142470()
{
  sub_10001510C((void *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller), *(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller + 24));
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(result + 40);
    uint64_t v3 = *(unsigned __int8 *)(result + 48);
    int v4 = *(unsigned __int8 *)(result + 49);
    int v5 = *(unsigned __int8 *)(result + 50);
    int v6 = *(unsigned __int8 *)(result + 51);
    int v7 = *(unsigned __int8 *)(result + 52);
    double v8 = *(double *)(result + 56);
    *(unsigned char *)(result + 49) = 0;
    *(unsigned char *)(result + 50) = v5;
    *(unsigned char *)(result + 51) = v6;
    *(unsigned char *)(result + 52) = v7;
    uint64_t v9 = *(unsigned __int16 *)(result + 32);
    sub_100015758(v2, v3);
    sub_100015758(v2, v3);
    sub_100015758(v2, v3);
    sub_10001576C(v2, v3);
    uint64_t v10 = 256;
    if (!v4) {
      uint64_t v10 = 0;
    }
    uint64_t v11 = v10 | v3;
    uint64_t v12 = 0x10000;
    if (!v5) {
      uint64_t v12 = 0;
    }
    uint64_t v13 = 0x1000000;
    if (!v6) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v11 | v12 | v13;
    uint64_t v15 = &_mh_execute_header;
    if (!v7) {
      uint64_t v15 = 0;
    }
    sub_100015780(v9, v2, v14 | (unint64_t)v15, v8);
    sub_10001576C(v2, v3);
    sub_10001576C(v2, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1001425CC()
{
  sub_10001510C((void *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller), *(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller + 24));
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(result + 40);
    uint64_t v3 = *(unsigned __int8 *)(result + 48);
    int v4 = *(unsigned __int8 *)(result + 49);
    int v5 = *(unsigned __int8 *)(result + 50);
    int v6 = *(unsigned __int8 *)(result + 51);
    int v7 = *(unsigned __int8 *)(result + 52);
    double v8 = *(double *)(result + 56);
    *(unsigned char *)(result + 49) = v4;
    *(unsigned char *)(result + 50) = 1;
    *(unsigned char *)(result + 51) = v6;
    *(unsigned char *)(result + 52) = v7;
    uint64_t v9 = *(unsigned __int16 *)(result + 32);
    sub_100015758(v2, v3);
    sub_100015758(v2, v3);
    sub_100015758(v2, v3);
    sub_10001576C(v2, v3);
    uint64_t v10 = 256;
    if (!v4) {
      uint64_t v10 = 0;
    }
    uint64_t v11 = v10 | v3;
    uint64_t v12 = 0x10000;
    if (!v5) {
      uint64_t v12 = 0;
    }
    uint64_t v13 = 0x1000000;
    if (!v6) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v11 | v12 | v13;
    uint64_t v15 = &_mh_execute_header;
    if (!v7) {
      uint64_t v15 = 0;
    }
    sub_100015780(v9, v2, v14 | (unint64_t)v15, v8);
    sub_10001576C(v2, v3);
    sub_10001576C(v2, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10014272C()
{
  sub_10001510C((void *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller), *(void *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller + 24));
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(result + 40);
    uint64_t v3 = *(unsigned __int8 *)(result + 48);
    int v4 = *(unsigned __int8 *)(result + 49);
    int v5 = *(unsigned __int8 *)(result + 50);
    int v6 = *(unsigned __int8 *)(result + 51);
    int v7 = *(unsigned __int8 *)(result + 52);
    double v8 = *(double *)(result + 56);
    *(_WORD *)(result + 49) = v4;
    *(unsigned char *)(result + 51) = v6;
    *(unsigned char *)(result + 52) = v7;
    uint64_t v9 = *(unsigned __int16 *)(result + 32);
    sub_100015758(v2, v3);
    sub_100015758(v2, v3);
    sub_100015758(v2, v3);
    sub_10001576C(v2, v3);
    uint64_t v10 = 256;
    if (!v4) {
      uint64_t v10 = 0;
    }
    uint64_t v11 = v10 | v3;
    uint64_t v12 = 0x10000;
    if (!v5) {
      uint64_t v12 = 0;
    }
    uint64_t v13 = 0x1000000;
    if (!v6) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v11 | v12 | v13;
    uint64_t v15 = &_mh_execute_header;
    if (!v7) {
      uint64_t v15 = 0;
    }
    sub_100015780(v9, v2, v14 | (unint64_t)v15, v8);
    sub_10001576C(v2, v3);
    sub_10001576C(v2, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100142888(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001428DC()
{
  uint64_t v80 = type metadata accessor for TranscriptViewModel();
  uint64_t v1 = __chkstk_darwin(v80);
  uint64_t v81 = (uint64_t)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v74 = (char *)&v68 - v3;
  uint64_t v4 = sub_100028654(&qword_100269258);
  __chkstk_darwin(v4 - 8);
  uint64_t v91 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = sub_10001510C(v0 + 2, v0[5]);
  uint64_t v7 = *v6;
  double v8 = *(void **)(*v6 + 32);
  uint64_t v9 = *(void *)(*v6 + 40);
  uint64_t v10 = *(void **)(*v6 + 48);
  int v11 = *(unsigned __int8 *)(*v6 + 56);
  uint64_t v83 = *(void *)(*v6 + 64);
  int v89 = *(unsigned __int8 *)(v7 + 72);
  int v75 = *(unsigned __int8 *)(v7 + 73);
  uint64_t v12 = *(void *)(v7 + 88);
  id v84 = *(id *)(v7 + 80);
  uint64_t v13 = *(void *)(v7 + 96);
  uint64_t v14 = *(void *)(v7 + 104);
  int v15 = *(unsigned __int8 *)(v7 + 112);
  int v78 = *(unsigned __int8 *)(v7 + 113);
  int v79 = *(unsigned __int8 *)(v7 + 114);
  id v77 = *(id *)(v7 + 120);
  LODWORD(v76) = *(unsigned __int8 *)(v7 + 128);
  uint64_t v85 = v0;
  uint64_t v16 = v0[10];
  Swift::String v92 = v0 + 7;
  uint64_t v17 = *(void **)(*sub_10001510C(v0 + 7, v16) + 56);
  uint64_t v82 = v10;
  uint64_t v88 = (void *)v9;
  int v87 = v11;
  uint64_t v90 = v8;
  uint64_t v69 = v12;
  int v86 = v15;
  swift_bridgeObjectRetain();
  sub_1000181E4(v9, (uint64_t)v10, v11);
  uint64_t v18 = v12;
  uint64_t v19 = v13;
  uint64_t v20 = v14;
  sub_1000181FC((uint64_t)v84, v18, v13, v14, v15);
  if (v17)
  {
    [v17 currentTime];
    double v22 = v21;
  }
  else
  {
    double v22 = 0.0;
  }
  uint64_t v23 = v85;
  uint64_t v24 = v85[13];
  objc_super v25 = v92;
  sub_10001510C(v92, v85[10]);
  swift_bridgeObjectRetain();
  id v26 = sub_1001435A4((uint64_t)v77, v76, v24, 0, v22);
  uint64_t v76 = v27;
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void *)(*sub_10001510C(v25, v23[10]) + 80);
  CGFloat v29 = *(void **)(*sub_10001510C(v25, v23[10]) + 56);
  swift_bridgeObjectRetain();
  if (v29)
  {
    [v29 currentTime];
    double v31 = v30;
  }
  else
  {
    double v31 = 0.0;
  }
  double v32 = v90;
  CGFloat v33 = sub_10001510C(v92, v23[10]);
  double v34 = v88;
  id v77 = v26;
  if (v87 == 255) {
    goto LABEL_10;
  }
  if (v87)
  {
    uint64_t v35 = *(void *)(*v33 + 64);
    unint64_t v36 = *(void *)(*v33 + 72);
    swift_bridgeObjectRetain();
    uint64_t v68 = (void *)sub_100143834(v35, v36, v26 != 0, v32, v34, v82);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1001437AC(v28, (uint64_t)v93, v31);
    sub_1000209F8((uint64_t)v93, (uint64_t)v99, &qword_100269268);
    if (v102)
    {
LABEL_10:
      swift_bridgeObjectRelease();
      uint64_t v68 = &_swiftEmptyArrayStorage;
      goto LABEL_14;
    }
    uint64_t v37 = v100;
    uint64_t v38 = v101;
    sub_100028654(&qword_100269FF0);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_1001F1BD0;
    *(void *)(v39 + 32) = v37;
    *(void *)(v39 + 40) = v38;
    uint64_t v68 = (void *)v39;
    *(void *)(v39 + 48) = v34;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v40 = v69;
  uint64_t v41 = v20;
  uint64_t v42 = (uint64_t)v74;
  if (v89)
  {
    uint64_t v74 = 0;
    uint64_t v73 = 0;
    uint64_t v83 = 0;
  }
  else
  {
    if (qword_100264630 != -1) {
      swift_once();
    }
    uint64_t v74 = (char *)xmmword_100275570;
    uint64_t v73 = qword_100275580;
  }
  uint64_t v43 = v92;
  uint64_t v44 = *(void *)(*sub_10001510C(v92, v23[10]) + 80);
  uint64_t v45 = *(void **)(*sub_10001510C(v43, v23[10]) + 56);
  swift_bridgeObjectRetain();
  if (v45) {
    [v45 currentTime];
  }
  else {
    double v46 = 0.0;
  }
  if (v75 == 2)
  {
    uint64_t v47 = (uint64_t)v84;
    swift_bridgeObjectRelease();
LABEL_26:
    uint64_t v72 = 0;
    uint64_t v70 = 0;
    int v71 = 0;
    int v75 = 1;
    goto LABEL_29;
  }
  if (v75)
  {
    uint64_t v47 = (uint64_t)v84;
    swift_bridgeObjectRelease();
    uint64_t v72 = 0;
    uint64_t v70 = 0;
    int v75 = 0;
    int v71 = 1;
  }
  else
  {
    uint64_t v47 = (uint64_t)v84;
    sub_1001437AC(v44, (uint64_t)v94, v46);
    swift_bridgeObjectRelease();
    sub_1000209F8((uint64_t)v94, (uint64_t)v95, &qword_100269268);
    if (v98) {
      goto LABEL_26;
    }
    int v71 = 0;
    int v75 = 0;
    uint64_t v72 = v96;
    uint64_t v70 = v97;
  }
LABEL_29:
  v103[0] = v47;
  v103[1] = v40;
  v103[2] = v19;
  v103[3] = v20;
  char v104 = v86;
  uint64_t v48 = v91;
  sub_1001432D4((uint64_t)v103, v91);
  uint64_t v49 = v85;
  uint64_t v50 = sub_10001510C(v92, v85[10]);
  uint64_t v51 = v40;
  uint64_t v52 = v41;
  uint64_t v53 = *(void *)(*v50 + 64);
  uint64_t v54 = *(void *)(*v50 + 72);
  uint64_t v55 = v80;
  sub_1001436E4(v48, v42 + *(int *)(v80 + 40));
  id v56 = v77;
  id v84 = v77;
  swift_bridgeObjectRetain();
  sub_1000180E0((uint64_t)v88, (uint64_t)v82, v87);
  sub_1000180F8(v47, v51, v19, v52, v86);
  *(void *)uint64_t v42 = v53;
  *(void *)(v42 + 8) = v54;
  uint64_t v57 = v68;
  *(void *)(v42 + 16) = v90;
  *(void *)(v42 + 24) = v57;
  uint64_t v58 = v83;
  *(void *)(v42 + 32) = v74;
  *(void *)(v42 + 40) = v58;
  *(void *)(v42 + 48) = v73;
  *(void *)(v42 + 56) = v58;
  *(unsigned char *)(v42 + 64) = v89;
  uint64_t v59 = v70;
  *(void *)(v42 + 72) = v72;
  *(void *)(v42 + 80) = v59;
  *(unsigned char *)(v42 + 88) = v71;
  *(unsigned char *)(v42 + 89) = v75;
  uint64_t v60 = v76;
  *(void *)(v42 + 96) = v56;
  *(void *)(v42 + 104) = v60;
  *(unsigned char *)(v42 + *(int *)(v55 + 44)) = v78;
  *(unsigned char *)(v42 + *(int *)(v55 + 48)) = v79;
  id v61 = (void *)(v49[12] + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel);
  swift_beginAccess();
  if ((*v61 != v53 || v61[1] != v54) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v62 = *(void **)(*sub_10001510C(v92, v49[10]) + 56);
    if (v62) {
      [v62 currentTime];
    }
    else {
      uint64_t v63 = 0;
    }
    v49[13] = v63;
  }
  Swift::String v64 = (void *)v49[12];
  uint64_t v65 = v81;
  sub_1000235CC(v42, v81);
  id v66 = v64;
  sub_10013FFE4(v65);

  sub_10002343C(v42);
  return sub_10014374C(v91);
}

uint64_t sub_100143138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = (void *)(a8 + 16);
  swift_beginAccess();
  uint64_t v15 = *(void *)(a8 + 16);
  if (v15 == 1)
  {
    swift_bridgeObjectRetain();
    sub_100028654(&qword_100269490);
    sub_10001DFB8();
    sub_10002DF88();
    uint64_t v19 = _NSRange.init<A, B>(_:in:)();
    uint64_t v21 = v20;
    swift_beginAccess();
    *(void *)(a12 + 16) = v19;
    *(void *)(a12 + 24) = v21;
    *(unsigned char *)(a12 + 32) = 0;
    *a7 = 1;
  }
  else if (!v15)
  {
    swift_bridgeObjectRetain();
    sub_100028654(&qword_100269490);
    sub_10001DFB8();
    sub_10002DF88();
    uint64_t v16 = _NSRange.init<A, B>(_:in:)();
    uint64_t v18 = v17;
    swift_beginAccess();
    *(void *)(a9 + 16) = v16;
    *(void *)(a9 + 24) = v18;
    *(unsigned char *)(a9 + 32) = 0;
  }
  uint64_t result = swift_beginAccess();
  if (__OFADD__(*v14, 1)) {
    __break(1u);
  }
  else {
    ++*v14;
  }
  return result;
}

uint64_t sub_1001432D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  sub_1000209F8(a1, (uint64_t)v19, &qword_100269488);
  uint64_t v3 = v19[0];
  uint64_t v4 = v19[1];
  uint64_t v5 = v19[2];
  uint64_t v6 = v19[3];
  char v7 = v20;
  uint64_t v8 = type metadata accessor for UIContentUnavailableConfiguration();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  int v11 = (char *)&v19[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000209F8(a1, (uint64_t)v21, &qword_100269488);
  if (v21[32] == 255)
  {
    uint64_t v16 = 1;
    uint64_t v15 = v18;
  }
  else
  {
    sub_100143548((uint64_t)v21, (uint64_t)v22);
    sub_100143548((uint64_t)v22, (uint64_t)v23);
    if (v24)
    {
      uint64_t v12 = v23[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      static UIContentUnavailableConfiguration.empty()();
      UIContentUnavailableConfiguration.secondaryText.setter();
      if (v12)
      {
        NSString v13 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v14 = [self systemImageNamed:v13];

        UIContentUnavailableConfiguration.image.setter();
      }
      uint64_t v15 = v18;
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v18, v11, v8);
    }
    else
    {
      sub_100036108(v3, v4, v5, v6, v7 & 1);
      uint64_t v15 = v18;
      static UIContentUnavailableConfiguration.loading()();
      UIContentUnavailableConfiguration.text.setter();
    }
    uint64_t v16 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v15, v16, 1, v8);
}

uint64_t sub_100143500()
{
  sub_10002F48C(v0 + 16);
  sub_10002F48C(v0 + 56);

  return swift_deallocClassInstance();
}

uint64_t sub_100143548(uint64_t a1, uint64_t a2)
{
  return a2;
}

id sub_1001435A4(uint64_t a1, int a2, uint64_t a3, int a4, double a5)
{
  if ((a2 | a4)) {
    return 0;
  }
  if (*(double *)&a3 > a5 || a5 - *(double *)&a3 < *(double *)&a1) {
    return 0;
  }
  id v6 = [objc_allocWithZone((Class)type metadata accessor for TranscriptWaitingViewTextAttachment()) init];
  id v7 = [self attributedStringWithAttachment:v6];
  sub_10001DF18();
  id v8 = objc_allocWithZone((Class)NSMutableAttributedString);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v8 initWithString:v9];

  [v10 appendAttributedString:v7];
  return v10;
}

uint64_t sub_1001436E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100028654(&qword_100269258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014374C(uint64_t a1)
{
  uint64_t v2 = sub_100028654(&qword_100269258);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001437AC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    double v4 = *(double *)(result + 32);
    long long v5 = *(_OWORD *)(result + 40);
    uint64_t v6 = *(void *)(result + 56);
    if (v4 <= a3 && v3 != 1)
    {
      double v8 = *(double *)(result + 64);
      if (v8 <= a3)
      {
        NSString v9 = (double *)(result + 96);
        uint64_t v10 = v3 - 1;
        do
        {
          double v4 = v8;
          int v11 = v9;
          if (!--v10) {
            break;
          }
          v9 += 4;
          double v8 = *v11;
        }
        while (*v11 <= a3);
        uint64_t v6 = *((void *)v11 - 1);
        long long v5 = *(_OWORD *)(v11 - 3);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    long long v5 = 0uLL;
    double v4 = 0.0;
  }
  *(double *)a2 = v4;
  *(_OWORD *)(a2 + 8) = v5;
  *(void *)(a2 + 24) = v6;
  *(unsigned char *)(a2 + 32) = v3 == 0;
  return result;
}

uint64_t sub_100143834(uint64_t a1, unint64_t a2, char a3, void *a4, void *a5, void *a6)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 16) = 0;
  *(unsigned char *)(v9 + 32) = 1;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 16) = 0;
  int64_t v11 = v10 + 16;
  *(unsigned char *)(v10 + 32) = 1;
  v34[0] = a1;
  v34[1] = a2;
  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = v8;
  uint64_t v12[3] = v10;
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100028654(&qword_100269490);
  sub_10002DF88();
  sub_10001DFB8();
  NSString v13 = v34;
  StringProtocol.enumerateSubstrings<A>(in:options:_:)();
  swift_release();
  swift_beginAccess();
  uint64_t v29 = *(void *)(v9 + 24);
  uint64_t v30 = *(void *)(v9 + 16);
  char v14 = *(unsigned char *)(v9 + 32);
  swift_beginAccess();
  uint64_t v15 = *(void *)(v10 + 16);
  uint64_t v16 = *(void *)(v10 + 24);
  uint64_t v17 = (char *)*(unsigned __int8 *)(v10 + 32);
  swift_release();
  swift_release();
  swift_release();
  if (v17)
  {
    uint64_t v17 = (char *)&_swiftEmptyArrayStorage;
    if (v14) {
      return (uint64_t)v17;
    }
    goto LABEL_16;
  }
  unint64_t v18 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v17 = (char *)(v18 - 1);
  if (__OFSUB__(v18, 1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t result = sub_10001DF18();
  unint64_t v18 = result + v20;
  if (__OFADD__(result, v20))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  BOOL v21 = __OFSUB__(v18--, 1);
  if (v21)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if ((uint64_t)v17 >= (uint64_t)v18) {
    goto LABEL_11;
  }
  BOOL v21 = __OFSUB__(v18, v17);
  unint64_t v22 = v18 - (void)v17;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    BOOL v21 = __OFADD__(v16, v22);
    v16 += v22;
    if (!v21)
    {
LABEL_11:
      if (a3) {
        NSString v13 = a4;
      }
      else {
        NSString v13 = a6;
      }
      swift_bridgeObjectRetain();
      uint64_t v17 = sub_10015DDE0(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
      a2 = *((void *)v17 + 2);
      unint64_t v18 = *((void *)v17 + 3);
      int64_t v11 = a2 + 1;
      if (a2 < v18 >> 1)
      {
LABEL_15:
        *((void *)v17 + 2) = v11;
        uint64_t v23 = &v17[24 * a2];
        *((void *)v23 + 4) = v15;
        *((void *)v23 + 5) = v16;
        *((void *)v23 + 6) = v13;
        if (v14) {
          return (uint64_t)v17;
        }
LABEL_16:
        if (a3) {
          char v24 = a4;
        }
        else {
          char v24 = a5;
        }
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = sub_10015DDE0(0, *((void *)v17 + 2) + 1, 1, v17);
        }
        unint64_t v26 = *((void *)v17 + 2);
        unint64_t v25 = *((void *)v17 + 3);
        if (v26 >= v25 >> 1) {
          uint64_t v17 = sub_10015DDE0((char *)(v25 > 1), v26 + 1, 1, v17);
        }
        *((void *)v17 + 2) = v26 + 1;
        uint64_t v27 = &v17[24 * v26];
        *((void *)v27 + 4) = v30;
        *((void *)v27 + 5) = v29;
        *((void *)v27 + 6) = v24;
        return (uint64_t)v17;
      }
LABEL_29:
      uint64_t v17 = sub_10015DDE0((char *)(v18 > 1), v11, 1, v17);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100143BC4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100143BD4()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100143BE4()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100143C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  return sub_100143138(a1, a2, a3, a4, a5, a6, a7, v7[2], v7[3], v7[4], v7[5], v7[6]);
}

id sub_100143C68()
{
  uint64_t v1 = type metadata accessor for SymbolEffectOptions();
  uint64_t v39 = *(void *)(v1 - 8);
  uint64_t v40 = v1;
  __chkstk_darwin(v1);
  uint64_t v38 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for VariableColorSymbolEffect();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v37 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v35 - v7;
  __chkstk_darwin(v9);
  int64_t v11 = (char *)&v35 - v10;
  id v12 = [self preferredFontDescriptorWithTextStyle:UIFontTextStyleLargeTitle];
  id v36 = v12;
  sub_100028654(&qword_1002694C8);
  uint64_t inited = swift_initStackObject();
  long long v35 = xmmword_1001F1BD0;
  *(_OWORD *)(inited + 16) = xmmword_1001F1BD0;
  *(void *)(inited + 32) = UIFontDescriptorTraitsAttribute;
  sub_100028654(&qword_1002694D0);
  uint64_t v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = v35;
  *(void *)(v14 + 32) = UIFontWeightTrait;
  *(UIFontWeight *)(v14 + 40) = UIFontWeightBold;
  uint64_t v15 = UIFontDescriptorTraitsAttribute;
  uint64_t v16 = UIFontWeightTrait;
  unint64_t v17 = sub_10010F0F0(v14);
  *(void *)(inited + 64) = sub_100028654(&qword_1002694D8);
  *(void *)(inited + 40) = v17;
  sub_10010F1FC(inited);
  type metadata accessor for AttributeName(0);
  sub_1001443FC(&qword_100264B20, type metadata accessor for AttributeName);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v19 = [v12 fontDescriptorByAddingAttributes:isa];

  id v20 = [self fontWithDescriptor:v19 size:0.0];
  id v21 = [self configurationWithFont:v20];

  id v22 = v21;
  NSString v23 = String._bridgeToObjectiveC()();
  id v24 = [self systemImageNamed:v23 withConfiguration:v22];

  unint64_t v25 = (objc_class *)type metadata accessor for TranscriptWaitingImageView();
  v41.receiver = v0;
  v41.super_class = v25;
  id v26 = [super initWithImage:v24];
  [v26 setContentMode:1];
  uint64_t v27 = self;
  id v28 = v26;
  id v29 = [v27 systemRedColor];
  [v28 setTintColor:v29];

  id v30 = v28;
  VariableColorSymbolEffect.init()();
  VariableColorSymbolEffect.dimInactiveLayers.getter();
  double v31 = *(void (**)(char *, uint64_t))(v4 + 8);
  v31(v11, v3);
  double v32 = v37;
  VariableColorSymbolEffect.cumulative.getter();
  v31(v8, v3);
  CGFloat v33 = v38;
  static SymbolEffectOptions.default.getter();
  sub_1001443FC(&qword_1002694E0, (void (*)(uint64_t))&type metadata accessor for VariableColorSymbolEffect);
  UIImageView.addSymbolEffect<A>(_:options:animated:completion:)();

  (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v40);
  v31(v32, v3);
  return v30;
}

id sub_1001443A4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TranscriptWaitingImageView();
  [super dealloc];
}

uint64_t type metadata accessor for TranscriptWaitingImageView()
{
  return self;
}

uint64_t sub_1001443FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100144444(int64_t a1, int64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v40 = a4;
  int64_t v41 = a2;
  uint64_t v4 = a3;
  int64_t v5 = a1;
  int64_t v6 = 0;
  int64_t v7 = a1;
  while (1)
  {
    BOOL v8 = v7 <= v41;
    if (a3 > 0) {
      BOOL v8 = v7 >= v41;
    }
    if (v8) {
      break;
    }
    BOOL v9 = __OFADD__(v7, a3);
    v7 += a3;
    if (v9) {
      int64_t v7 = (v7 >> 63) ^ 0x8000000000000000;
    }
    BOOL v9 = __OFADD__(v6++, 1);
    if (v9)
    {
      __break(1u);
      break;
    }
  }
  uint64_t v42 = (unint64_t *)&_swiftEmptyArrayStorage;
  sub_10015E830(0, v6, 0);
  uint64_t v10 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v11 = type metadata accessor for AttributedString.Index();
    uint64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
    uint64_t v38 = *(void *)(v11 - 8);
    uint64_t v39 = v12;
    v36[2] = v38 + 32;
    uint64_t v37 = (void (**)(char *, unint64_t, uint64_t))(v38 + 16);
    while (1)
    {
      uint64_t result = __chkstk_darwin(v11);
      uint64_t v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      BOOL v16 = v5 <= v41;
      if (v4 > 0) {
        BOOL v16 = v5 >= v41;
      }
      if (v16) {
        break;
      }
      if (__OFADD__(v5, v4)) {
        int64_t v17 = ((v5 + v4) >> 63) ^ 0x8000000000000000;
      }
      else {
        int64_t v17 = v5 + v4;
      }
      if (v5 < 0) {
        goto LABEL_42;
      }
      uint64_t v18 = *v40;
      if ((unint64_t)v5 >= *(void *)(*v40 + 16)) {
        goto LABEL_43;
      }
      uint64_t v19 = v4;
      uint64_t v20 = result;
      uint64_t v21 = sub_100028654(&qword_100266770);
      (*v37)(v15, v18+ ((*(unsigned __int8 *)(*(void *)(v21 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v21 - 8) + 80))+ *(void *)(*(void *)(v21 - 8) + 72) * v5+ *(int *)(v21 + 36), v20);
      uint64_t v42 = v10;
      unint64_t v23 = v10[2];
      unint64_t v22 = v10[3];
      if (v23 >= v22 >> 1)
      {
        sub_10015E830(v22 > 1, v23 + 1, 1);
        uint64_t v10 = v42;
      }
      void v10[2] = v23 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v23, v15, v20);
      int64_t v5 = v17;
      --v6;
      uint64_t v11 = v20;
      uint64_t v4 = v19;
      if (!v6) {
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
  }
  else
  {
    int64_t v17 = v5;
LABEL_25:
    BOOL v24 = v17 <= v41;
    if (v4 > 0) {
      BOOL v24 = v17 >= v41;
    }
    if (v24) {
      return (uint64_t)v10;
    }
    uint64_t v25 = type metadata accessor for AttributedString.Index();
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)(v25 - 8);
    uint64_t v39 = *(void *)(v27 + 64);
    uint64_t v37 = (void (**)(char *, unint64_t, uint64_t))(v27 + 32);
    uint64_t v38 = v27 + 16;
    while (1)
    {
      int64_t v28 = __OFADD__(v17, v4) ? ((v17 + v4) >> 63) ^ 0x8000000000000000 : v17 + v4;
      uint64_t result = __chkstk_darwin(v25);
      id v30 = (char *)v36 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v17 < 0) {
        break;
      }
      uint64_t v31 = *v40;
      if ((unint64_t)v17 >= *(void *)(*v40 + 16)) {
        goto LABEL_45;
      }
      uint64_t v32 = sub_100028654(&qword_100266770);
      (*(void (**)(char *, unint64_t, uint64_t))v38)(v30, v31+ ((*(unsigned __int8 *)(*(void *)(v32 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v32 - 8) + 80))+ *(void *)(*(void *)(v32 - 8) + 72) * v17+ *(int *)(v32 + 36), v26);
      uint64_t v42 = v10;
      unint64_t v34 = v10[2];
      unint64_t v33 = v10[3];
      if (v34 >= v33 >> 1)
      {
        sub_10015E830(v33 > 1, v34 + 1, 1);
        uint64_t v10 = v42;
      }
      void v10[2] = v34 + 1;
      uint64_t v25 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v27 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v34, v30, v26);
      BOOL v35 = v28 <= v41;
      if (v4 > 0) {
        BOOL v35 = v28 >= v41;
      }
      int64_t v17 = v28;
      if (v35) {
        return (uint64_t)v10;
      }
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

void *sub_1001448FC(void (*a1)(long long *), uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v21 = a1;
  if (!v20) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v3 = a3;
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  int64_t v5 = &_swiftEmptyArrayStorage;
  uint64_t v19 = v3;
  do
  {
    long long v23 = *(_OWORD *)(v3 + 16 * v4 + 32);
    uint64_t v6 = sub_100028654(&qword_100266770);
    unint64_t v22 = &v19;
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void *)(v7 + 64);
    __chkstk_darwin(v6);
    BOOL v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v10 = sub_100028654(&qword_1002694E8);
    __chkstk_darwin(v10 - 8);
    uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v13 = v24;
    v21(&v23);
    uint64_t v24 = v13;
    if (v13)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v5;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
    {
      sub_1000285F8((uint64_t)v12, &qword_1002694E8);
    }
    else
    {
      uint64_t v14 = sub_1000F74A0((uint64_t)v12, (uint64_t)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
      __chkstk_darwin(v14);
      uint64_t v15 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_1000F74A0((uint64_t)v9, (uint64_t)v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v5 = (void *)sub_10015E14C(0, v5[2] + 1, 1, (unint64_t)v5);
      }
      unint64_t v17 = v5[2];
      unint64_t v16 = v5[3];
      if (v17 >= v16 >> 1) {
        int64_t v5 = (void *)sub_10015E14C(v16 > 1, v17 + 1, 1, (unint64_t)v5);
      }
      v5[2] = v17 + 1;
      sub_1000F74A0((uint64_t)v15, (uint64_t)v5+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v17);
    }
    ++v4;
    uint64_t v3 = v19;
  }
  while (v20 != v4);
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t *sub_100144BCC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  objc_super v2 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v21 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_10015E830(0, v1, 0);
    objc_super v2 = (unint64_t *)&_swiftEmptyArrayStorage;
    uint64_t v20 = sub_100028654(&qword_100266770);
    uint64_t v4 = *(void *)(v20 - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = type metadata accessor for AttributedString.Index();
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v19 = *(void *)(v8 + 64);
    uint64_t v18 = *(void *)(v4 + 72);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v16 = v8 + 16;
    uint64_t v17 = v8 + 32;
    do
    {
      __chkstk_darwin(v6);
      uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
      v15(v10, v5 + *(int *)(v20 + 36), v7);
      uint64_t v21 = v2;
      unint64_t v12 = v2[2];
      unint64_t v11 = v2[3];
      if (v12 >= v11 >> 1)
      {
        sub_10015E830(v11 > 1, v12 + 1, 1);
        objc_super v2 = v21;
      }
      v2[2] = v12 + 1;
      uint64_t v6 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))((unint64_t)v2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v12, v10, v7);
      v5 += v18;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_100144DF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100146284();
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = type metadata accessor for AttributedString();
  if (v5)
  {
    uint64_t v24 = a2;
    v21[1] = v21;
    __chkstk_darwin(v6);
    uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v22 = v10;
    uint64_t v23 = v9;
    (*(void (**)(char *, uint64_t))(v10 + 16))(v8, a1);
    uint64_t v11 = sub_100028654(&qword_1002694E8);
    v21[0] = v21;
    __chkstk_darwin(v11 - 8);
    uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t result = sub_100028654(&qword_100266770);
    uint64_t v15 = result;
    uint64_t v16 = *(void *)(result - 8);
    unint64_t v26 = v4 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    uint64_t v27 = v16 + 56;
    uint64_t v25 = v16 + 48;
    while (v5 <= *(void *)(v4 + 16))
    {
      --v5;
      sub_1000F7508(v26 + *(void *)(v16 + 72) * v5, (uint64_t)v13);
      uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
      v17(v13, 0, 1, v15);
      uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15);
      if (v18 == 1) {
        goto LABEL_7;
      }
      __chkstk_darwin(v18);
      uint64_t v20 = (char *)v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_1000F74A0((uint64_t)v13, (uint64_t)v20);
      sub_100027F5C(&qword_100268D80, &qword_100266770);
      AttributedString.removeSubrange<A>(_:)();
      uint64_t result = sub_1000285F8((uint64_t)v20, &qword_100266770);
      if (!v5)
      {
        v17(v13, 1, 1, v15);
LABEL_7:
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v24, v8, v23);
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100145130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = sub_100146008(a1, 1, a2);
  uint64_t v6 = type metadata accessor for AttributedString.Index();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v109 = v8;
  uint64_t v9 = (char *)v86 - ((unint64_t)(v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100028654(&qword_1002673B8);
  uint64_t v11 = *(char **)(*(void *)(v10 - 8) + 64);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = *(void *)(v5 + 16);
  uint64_t v95 = a3;
  uint64_t v96 = v7;
  if (!v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))((char *)v86 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v6);
    goto LABEL_12;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  int64_t v14 = *(void *)(v7 + 72);
  Swift::String v107 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
  Swift::String v108 = (char *)(v7 + 16);
  v107((char *)v86 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), v5 + v13 + v14 * (v12 - 1), v6);
  char v104 = *(char **)(v7 + 56);
  uint64_t v105 = (void *)(v7 + 56);
  ((void (*)(char *, void, uint64_t, uint64_t))v104)((char *)v86 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v6);
  char v102 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  unint64_t v103 = (void *)(v7 + 48);
  if (v102((char *)v86 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v6) == 1)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    sub_1000285F8((uint64_t)v86 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1002673B8);
    uint64_t v105 = (void *)type metadata accessor for AttributedString();
    uint64_t v31 = (unsigned int (*)(char *, uint64_t, uint64_t))*(v105 - 1);
    __chkstk_darwin(v105);
    Swift::String v108 = (char *)v86 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v33 = AttributedString.init(stringLiteral:)();
    Swift::String v107 = (void (*)(char *, unint64_t, uint64_t))v86;
    uint64_t v17 = v109;
    __chkstk_darwin(v33);
    uint64_t v11 = (char *)v86 - ((unint64_t)(v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v34 = AttributedString.startIndex.getter();
    Swift::String v106 = v86;
    __chkstk_darwin(v34);
    AttributedString.startIndex.getter();
    sub_100147040(&qword_100268D90, (void (*)(uint64_t))&type metadata accessor for AttributedString.Index);
    if (dispatch thunk of static Comparable.<= infix(_:_:)())
    {
      uint64_t v35 = sub_100028654(&qword_100266770);
      unint64_t v109 = (char *)v86;
      uint64_t v101 = v35 - 8;
      __chkstk_darwin(v35 - 8);
      uint64_t v100 = (char *)v86 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v37 = sub_100028654(&qword_100268DE0);
      char v104 = (char *)v86;
      unint64_t v103 = v86;
      uint64_t v38 = v37 - 8;
      uint64_t v39 = *(void (***)(char *, uint64_t))(*(void *)(v37 - 8) + 64);
      __chkstk_darwin(v37);
      char v102 = v31;
      uint64_t v40 = (char *)v86 - (((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF0);
      char v98 = v39;
      Swift::String v99 = (char *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF0);
      int64_t v41 = &v40[*(int *)(v38 + 56)];
      int64_t v97 = (int64_t)v86 - ((unint64_t)(v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v42(v40, v11, v6);
      Swift::String v94 = v41;
      uint64_t v43 = ((uint64_t (*)(char *, int64_t, uint64_t))v42)(v41, v97, v6);
      int64_t v97 = (int64_t)v86;
      __chkstk_darwin(v43);
      uint64_t v44 = &v40[*(int *)(v38 + 56)];
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v45(v40, v40, v6);
      v45(v44, v41, v6);
      uint64_t v46 = (uint64_t)v100;
      v42(v100, v40, v6);
      uint64_t v47 = *(uint64_t (**)(char *, uint64_t))(v96 + 8);
      uint64_t v48 = v47(v44, v6);
      int64_t v97 = (int64_t)v86;
      __chkstk_darwin(v48);
      uint64_t v49 = (char *)((char *)v86 - v99);
      uint64_t v50 = (char *)((char *)v86 - v99 + *(int *)(v38 + 56));
      v42((char *)((char *)v86 - v99), v40, v6);
      v42(v50, v94, v6);
      v42((char *)(v46 + *(int *)(v101 + 44)), v50, v6);
      v47(v49, v6);
      uint64_t v51 = type metadata accessor for TranscriptionFormatter.PartialResult();
      uint64_t v52 = v95;
      sub_1000F74A0(v46, v95 + *(int *)(v51 + 20));
      return (*((uint64_t (**)(uint64_t, char *, void *))v102 + 4))(v52, v108, v105);
    }
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v89 = v13;
  int64_t v97 = v14;
  Swift::String v92 = (void *)v5;
  uint64_t v93 = a1;
  uint64_t v15 = v6;
  uint64_t v100 = *(char **)(v7 + 32);
  uint64_t v101 = v7 + 32;
  ((void (*)(char *, char *, uint64_t))v100)(v9, (char *)v86 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  Swift::String v106 = (void *)type metadata accessor for AttributedString();
  Swift::String v94 = (char *)*(v106 - 1);
  uint64_t v16 = *((void *)v94 + 8);
  __chkstk_darwin(v106);
  Swift::String v99 = (char *)((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (char *)((char *)v86 - v99);
  uint64_t v18 = sub_100028654(&qword_1002694F0);
  char v98 = (void (**)(char *, uint64_t))v86;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100147040(&qword_100268DA0, (void (*)(uint64_t))&type metadata accessor for AttributedString.Index);
  uint64_t v7 = v15;
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v26 = v90;
LABEL_17:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v104)(v11, 1, 1, v26);
    goto LABEL_18;
  }
  v86[2] = v86;
  uint64_t v90 = v15;
  uint64_t v91 = v9;
  v107(v20, (unint64_t)v9, v15);
  uint64_t v21 = type metadata accessor for AttributedSubstring();
  __chkstk_darwin(v21 - 8);
  sub_100027F5C(&qword_1002694F8, &qword_1002694F0);
  AttributedString.subscript.getter();
  sub_1000285F8((uint64_t)v20, &qword_1002694F0);
  uint64_t v22 = AttributedString.init(_:)();
  v86[1] = v86;
  __chkstk_darwin(v22);
  uint64_t v23 = (void (*)(void))*((void *)v94 + 2);
  Swift::String v99 = (char *)((char *)v86 - v99);
  uint64_t v88 = v94 + 16;
  int v87 = (uint64_t (*)(void))v23;
  v23();
  v86[3] = v86;
  uint64_t v24 = v92[2];
  __chkstk_darwin(v92);
  uint64_t v11 = (char *)v86 - ((unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v16;
  if (!v24) {
    goto LABEL_16;
  }
  char v98 = (void (**)(char *, uint64_t))(v96 + 8);
  uint64_t v25 = swift_bridgeObjectRetain();
  uint64_t v26 = v90;
  uint64_t v27 = v25 + v89 + v97 * (v24 - 1);
  int64_t v97 = -v97;
  while (1)
  {
    v107(v11, v27, v26);
    ((void (*)(char *, void, uint64_t, uint64_t))v104)(v11, 0, 1, v26);
    uint64_t v28 = ((uint64_t (*)(char *, uint64_t, uint64_t))v102)(v11, 1, v26);
    if (v28 == 1) {
      break;
    }
    __chkstk_darwin(v28);
    id v30 = (char *)v86 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    ((void (*)(char *, char *, uint64_t))v100)(v30, v11, v26);
    if (qword_100264648 != -1) {
      swift_once();
    }
    --v24;
    sub_10002272C((uint64_t)v106, (uint64_t)qword_1002755A8);
    sub_100147040(&qword_100266740, (void (*)(uint64_t))&type metadata accessor for AttributedString);
    AttributedString.insert<A>(_:at:)();
    (*v98)(v30, v26);
    v27 += v97;
    if (!v24) {
      goto LABEL_17;
    }
  }
LABEL_18:
  uint64_t v54 = swift_bridgeObjectRelease_n();
  uint64_t v105 = v86;
  __chkstk_darwin(v54);
  char v104 = (char *)v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = v99;
  uint64_t v56 = (uint64_t)v106;
  uint64_t v57 = v87();
  unint64_t v103 = v86;
  __chkstk_darwin(v57);
  uint64_t v59 = (char *)v86 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v26;
  AttributedString.startIndex.getter();
  sub_100147040(&qword_100268D90, (void (*)(uint64_t))&type metadata accessor for AttributedString.Index);
  id v61 = v91;
  char v62 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v63 = (void (*)(char *, uint64_t))*((void *)v94 + 1);
  v63(v55, v56);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v63)(v17, v56);
  if (v62)
  {
    uint64_t v64 = sub_100028654(&qword_100266770);
    unint64_t v109 = (char *)v86;
    Swift::String v99 = (char *)(v64 - 8);
    __chkstk_darwin(v64 - 8);
    char v98 = (void (**)(char *, uint64_t))((char *)v86 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v66 = sub_100028654(&qword_100268DE0);
    char v102 = (unsigned int (*)(char *, uint64_t, uint64_t))v86;
    uint64_t v67 = v66 - 8;
    __chkstk_darwin(v66);
    uint64_t v93 = v68;
    uint64_t v69 = (char *)v86 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v70 = (v68 + 15) & 0xFFFFFFFFFFFFFFF0;
    int64_t v97 = v70;
    int v71 = &v69[*(int *)(v67 + 56)];
    uint64_t v72 = (uint64_t (*)(char *, char *, uint64_t))v100;
    ((void (*)(char *, char *, uint64_t))v100)(v69, v59, v60);
    uint64_t v73 = v72(v71, v61, v60);
    Swift::String v92 = v86;
    __chkstk_darwin(v73);
    uint64_t v74 = (char *)v86 - v70;
    int v75 = (char *)v86 + *(int *)(v67 + 56) - v70;
    uint64_t v76 = (char *)v86 - v70;
    id v77 = (void (*)(char *, char *, uint64_t))v107;
    v107(v76, (unint64_t)v69, v60);
    v77(v75, v71, v60);
    uint64_t v78 = (uint64_t)v98;
    v72((char *)v98, v74, v60);
    int v79 = *(uint64_t (**)(char *, uint64_t))(v96 + 8);
    uint64_t v80 = v79(v75, v60);
    uint64_t v81 = (void (*)(char *, uint64_t))v79;
    Swift::String v108 = (char *)v86;
    __chkstk_darwin(v80);
    uint64_t v82 = (char *)v86 - v97;
    uint64_t v83 = (char *)v86 + *(int *)(v67 + 56) - v97;
    v72((char *)v86 - v97, v69, v60);
    v72(v83, v71, v60);
    v72((char *)(v78 + *((int *)v99 + 11)), v83, v60);
    v81(v82, v60);
    uint64_t v84 = type metadata accessor for TranscriptionFormatter.PartialResult();
    uint64_t v85 = v95;
    sub_1000F74A0(v78, v95 + *(int *)(v84 + 20));
    return (*((uint64_t (**)(uint64_t, char *, void *))v94 + 4))(v85, v104, v106);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100145F58()
{
  uint64_t v0 = type metadata accessor for AttributedString();
  sub_100031F50(v0, qword_1002755A8);
  sub_10002272C(v0, (uint64_t)qword_1002755A8);
  uint64_t v1 = type metadata accessor for AttributeContainer();
  __chkstk_darwin(v1 - 8);
  AttributeContainer.init()();
  return AttributedString.init(_:attributes:)();
}

uint64_t sub_100146008(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = sub_100146E24(a1);
  uint64_t v20 = v5;
  if (a2)
  {
    unint64_t v6 = (unint64_t)v5;
    if (v5[2])
    {
      uint64_t v7 = sub_100028654(&qword_100266770);
      uint64_t v8 = *(void *)(v7 - 8);
      __chkstk_darwin(v7);
      uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
      uint64_t v11 = sub_100028654(&qword_1002694E8);
      __chkstk_darwin(v11 - 8);
      unint64_t v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v15 = *(void *)(v6 + 16);
        if (v15)
        {
LABEL_5:
          uint64_t v16 = v15 - 1;
          sub_1000F74A0(v6+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * (v15 - 1), (uint64_t)v13);
          *(void *)(v6 + 16) = v16;
          uint64_t v20 = (void *)v6;
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
          {
            sub_1000285F8((uint64_t)v13, &qword_1002694E8);
            sub_100146C98(*(void *)(v6 + 16) - 1, (uint64_t)v10);
          }
          else
          {
            sub_1000F74A0((uint64_t)v13, (uint64_t)v10);
          }
          sub_1000285F8((uint64_t)v10, &qword_100266770);
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t result = sub_100146E10(v6);
        unint64_t v6 = result;
        uint64_t v15 = *(void *)(result + 16);
        if (v15) {
          goto LABEL_5;
        }
      }
      __break(1u);
      return result;
    }
  }
LABEL_9:
  if (a3 < 2)
  {
    uint64_t v18 = swift_bridgeObjectRetain();
    uint64_t v17 = (uint64_t)sub_100144BCC(v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = sub_100144444(a3 - 1, v20[2], a3, (uint64_t *)&v20);
  }
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_100146284()
{
  uint64_t v1 = type metadata accessor for AttributedString.Index();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v55 = v3;
  unint64_t v54 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (char *)&v51 - v54;
  uint64_t v71 = v0;
  AttributedString.startIndex.getter();
  uint64_t v69 = (void (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v52 = (uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
  unint64_t v70 = (uint64_t (**)(char *, uint64_t))(v2 + 8);
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v53 = v4;
  while (1)
  {
    uint64_t v6 = sub_100028654(&qword_100266770);
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void *)(v7 + 64);
    __chkstk_darwin(v6);
    unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v72 = (uint64_t)&v51 - v9;
    uint64_t v10 = sub_100028654(&qword_1002694E8);
    uint64_t v68 = &v51;
    uint64_t v11 = __chkstk_darwin(v10 - 8);
    uint64_t v76 = (uint64_t)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v67 = &v51;
    uint64_t v13 = __chkstk_darwin(v11);
    uint64_t v66 = (uint64_t)&v51 - v9;
    uint64_t v65 = &v51;
    __chkstk_darwin(v13);
    int64_t v14 = (char *)&v51 - v54;
    AttributedString.endIndex.getter();
    sub_100147040(&qword_100268D90, (void (*)(uint64_t))&type metadata accessor for AttributedString.Index);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) == 0) {
      break;
    }
    uint64_t v58 = &v51;
    uint64_t v63 = &v51;
    uint64_t v64 = v5;
    uint64_t v57 = v8;
    __chkstk_darwin(result);
    int v75 = (char *)&v51 - v9;
    uint64_t v16 = sub_100028654(&qword_100268DE0);
    char v62 = &v51;
    uint64_t v18 = v16 - 8;
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v73 = v7;
    uint64_t v74 = *(void (**)(char *, uint64_t))(v17 + 64);
    __chkstk_darwin(v16);
    uint64_t v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v61 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v21 = &v20[*(int *)(v18 + 56)];
    uint64_t v22 = *v69;
    (*v69)(v20, v4, v1);
    uint64_t v23 = v1;
    uint64_t v77 = v6;
    uint64_t v24 = *v52;
    uint64_t v60 = v21;
    uint64_t v25 = v24(v21, v14, v23);
    uint64_t v59 = &v51;
    __chkstk_darwin(v25);
    uint64_t v26 = &v20[*(int *)(v18 + 56)];
    v22(v20, v20, v23);
    uint64_t v56 = v22;
    v22(v26, v21, v23);
    v24(v75, v20, v23);
    uint64_t v27 = *v70;
    uint64_t v28 = (*v70)(v26, v23);
    uint64_t v59 = &v51;
    __chkstk_darwin(v28);
    uint64_t v29 = (char *)&v51 - v61;
    id v30 = (char *)&v51 + *(int *)(v18 + 56) - v61;
    v24((char *)&v51 - v61, v20, v23);
    v24(v30, v60, v23);
    uint64_t v31 = (uint64_t)v75;
    v24(&v75[*(int *)(v77 + 36)], v30, v23);
    uint64_t v74 = (void (*)(char *, uint64_t))v27;
    v27(v29, v23);
    uint64_t v32 = v66;
    sub_1000F74A0(v31, v66);
    uint64_t v33 = type metadata accessor for AttributedSubstring();
    int v75 = (char *)&v51;
    uint64_t v34 = *(void *)(v33 - 8);
    __chkstk_darwin(v33);
    uint64_t v36 = (char *)&v51 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_100027F5C(&qword_100268D80, &qword_100266770);
    AttributedString.subscript.getter();
    sub_1000285F8(v32, &qword_100266770);
    uint64_t v78 = 11108578;
    unint64_t v79 = 0xA300000000000000;
    uint64_t v37 = sub_100028654(&qword_1002686C0);
    __chkstk_darwin(v37 - 8);
    uint64_t v39 = (char *)&v51 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v40 = type metadata accessor for Locale();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
    sub_100147040(&qword_100268D88, (void (*)(uint64_t))&type metadata accessor for AttributedSubstring);
    sub_10002DF88();
    uint64_t v41 = v76;
    AttributedStringProtocol.range<A>(of:options:locale:)();
    sub_1000285F8((uint64_t)v39, &qword_1002686C0);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
    uint64_t v42 = v77;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v41, 1, v77) == 1)
    {
      v74(v53, v23);
      sub_1000285F8(v76, &qword_1002694E8);
      return (uint64_t)v64;
    }
    uint64_t v43 = v72;
    uint64_t v44 = sub_1000F74A0(v76, v72);
    __chkstk_darwin(v44);
    uint64_t v46 = (char *)&v51 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1000F7508(v43, (uint64_t)v46);
    uint64_t v5 = v64;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = (void *)sub_10015E14C(0, v5[2] + 1, 1, (unint64_t)v5);
    }
    uint64_t v1 = v23;
    uint64_t v47 = v56;
    unint64_t v49 = v5[2];
    unint64_t v48 = v5[3];
    if (v49 >= v48 >> 1) {
      uint64_t v5 = (void *)sub_10015E14C(v48 > 1, v49 + 1, 1, (unint64_t)v5);
    }
    v5[2] = v49 + 1;
    sub_1000F74A0((uint64_t)v46, (uint64_t)v5+ ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80))+ *(void *)(v73 + 72) * v49);
    uint64_t v4 = v53;
    v74(v53, v1);
    uint64_t v50 = v72;
    v47(v4, (char *)(v72 + *(int *)(v42 + 36)), v1);
    sub_1000285F8(v50, &qword_100266770);
  }
  __break(1u);
  return result;
}

uint64_t sub_100146B40(long long *a1, uint64_t a2)
{
  long long v7 = *a1;
  uint64_t v3 = type metadata accessor for AttributedString();
  __chkstk_darwin(v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v3);
  sub_100028654(&qword_100269490);
  sub_100027F5C((unint64_t *)&qword_100269498, &qword_100269490);
  sub_100147040(&qword_100266740, (void (*)(uint64_t))&type metadata accessor for AttributedString);
  return Range<>.init<A, B>(_:in:)();
}

uint64_t sub_100146C98@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = sub_100146E10(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = *(void *)(sub_100028654(&qword_100266770) - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  uint64_t result = sub_1000F74A0(v10, a2);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v9)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_100146E10(unint64_t a1)
{
  return sub_10015E14C(0, *(void *)(a1 + 16), 0, a1);
}