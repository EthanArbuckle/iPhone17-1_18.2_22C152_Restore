uint64_t sub_100A76A34(uint64_t a1)
{
  return sub_100A76AE8(a1, 2036427856, 0xE400000000000000, (uint64_t *)&static AccessibilityString.playbackPlayButtonLabel, (uint64_t)&unk_10112BCD0);
}

void *AccessibilityString.playbackPlayButtonLabel.unsafeMutableAddressor()
{
  if (qword_1010BC568 != -1) {
    swift_once();
  }
  return &static AccessibilityString.playbackPlayButtonLabel;
}

uint64_t static AccessibilityString.playbackPlayButtonLabel.getter()
{
  return sub_100A76D9C(&qword_1010BC568, &static AccessibilityString.playbackPlayButtonLabel);
}

uint64_t sub_100A76AC4(uint64_t a1)
{
  return sub_100A76AE8(a1, 0x656C6666756853, 0xE700000000000000, (uint64_t *)&static AccessibilityString.playbackShuffleButtonLabel, (uint64_t)&unk_10112BCE0);
}

uint64_t sub_100A76AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  v25[0] = a5;
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  v14 = (char *)v25 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)v25 - v15;
  String.LocalizationValue.init(stringLiteral:)();
  v17 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v17(v14, v16, v7);
  if (qword_1010BBBE0 != -1) {
    swift_once();
  }
  v18 = (void *)qword_10112A3A0;
  v17(v11, v14, v7);
  id v19 = v18;
  static Locale.current.getter();
  uint64_t v20 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v22 = v21;
  v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v14, v7);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v16, v7);
  *a4 = v20;
  *(void *)v25[0] = v22;
  return result;
}

void *AccessibilityString.playbackShuffleButtonLabel.unsafeMutableAddressor()
{
  if (qword_1010BC570 != -1) {
    swift_once();
  }
  return &static AccessibilityString.playbackShuffleButtonLabel;
}

uint64_t static AccessibilityString.playbackShuffleButtonLabel.getter()
{
  return sub_100A76D9C(&qword_1010BC570, &static AccessibilityString.playbackShuffleButtonLabel);
}

uint64_t sub_100A76D9C(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

id NSUserDefaults.hasSeenDolbyDownloadFirstTimeAlert.getter()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 BOOLForKey:v1];

  return v2;
}

void NSUserDefaults.hasSeenDolbyDownloadFirstTimeAlert.setter()
{
}

uint64_t NSUserDefaults.showAllTVShows.getter()
{
  strcpy(v1, "showAllTVShows");
  v1[15] = -18;
  sub_10005D1D4();
  NSUserDefaults.subscript.getter((uint64_t)v1, &v2);
  if (v3)
  {
    uint64_t result = swift_dynamicCast();
    if (result) {
      return v1[0];
    }
  }
  else
  {
    sub_10005DE58((uint64_t)&v2);
    return 0;
  }
  return result;
}

void (*NSUserDefaults.hasSeenDolbyDownloadFirstTimeAlert.modify(uint64_t a1))(void **a1)
{
  *(void *)a1 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  unsigned __int8 v4 = [v1 BOOLForKey:v3];

  *(unsigned char *)(a1 + 8) = v4;
  return sub_100A76F90;
}

void sub_100A76F90(void **a1)
{
}

id NSUserDefaults.hasSeenDolbyDownloadConflictAlert.getter()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 BOOLForKey:v1];

  return v2;
}

void NSUserDefaults.hasSeenDolbyDownloadConflictAlert.setter()
{
}

void sub_100A77024()
{
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  id v2 = String._bridgeToObjectiveC()();
  [v0 setValue:isa forKey:v2];
}

void (*NSUserDefaults.hasSeenDolbyDownloadConflictAlert.modify(uint64_t a1))(void **a1)
{
  *(void *)a1 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  unsigned __int8 v4 = [v1 BOOLForKey:v3];

  *(unsigned char *)(a1 + 8) = v4;
  return sub_100A77128;
}

void sub_100A77128(void **a1)
{
}

void sub_100A77144(void **a1)
{
  NSString v1 = *a1;
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setValue:isa forKey:v2];
}

char *DeviceCapabilities.isInternalInstall.unsafeMutableAddressor()
{
  if (qword_1010BC578 != -1) {
    swift_once();
  }
  return &static DeviceCapabilities.isInternalInstall;
}

id static DeviceCapabilities.hasWAPICapability.getter()
{
  return sub_100A77284((uint64_t (*)(void))&_MobileGestalt_get_wapiCapability);
}

id static DeviceCapabilities.hasCellularDataCapability.getter()
{
  return sub_100A77284((uint64_t (*)(void))&_MobileGestalt_get_cellularDataCapability);
}

uint64_t static DeviceCapabilities.isInternalInstall.getter()
{
  return sub_100A77798(&qword_1010BC578, (unsigned __int8 *)&static DeviceCapabilities.isInternalInstall);
}

id static DeviceCapabilities.hasWatchCompanionCapability.getter()
{
  return sub_100A77284((uint64_t (*)(void))&MobileGestalt_get_watchCompanionCapability);
}

id sub_100A77284(uint64_t (*a1)(void))
{
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    NSString v3 = result;
    uint64_t v4 = a1();

    return (id)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100A772D0()
{
  id v0 = (id)MobileGestalt_get_current_device();
  if (v0)
  {
    NSString v1 = v0;
    unsigned int deviceClassNumber = MobileGestalt_get_deviceClassNumber();

    unsigned int v3 = 0x2030100u >> (8 * deviceClassNumber);
    if (deviceClassNumber >= 4) {
      LOBYTE(v3) = 0;
    }
    static DeviceCapabilities.deviceType = v3;
  }
  else
  {
    __break(1u);
  }
}

char *DeviceCapabilities.deviceType.unsafeMutableAddressor()
{
  if (qword_1010BC580 != -1) {
    swift_once();
  }
  return &static DeviceCapabilities.deviceType;
}

uint64_t static DeviceCapabilities.deviceType.getter()
{
  if (qword_1010BC580 != -1) {
    swift_once();
  }
  return static DeviceCapabilities.deviceType;
}

uint64_t sub_100A773C8()
{
  char v0 = 0;
  uint64_t result = MGGetProductType();
  if (result > 2158787295)
  {
    if (result <= 2311900305)
    {
      if (result != 2158787296 && result != 2270970153) {
        goto LABEL_17;
      }
    }
    else if (result != 2311900306 && result != 3645319985 && result != 3242623367)
    {
      goto LABEL_17;
    }
  }
  else if (result <= 820711326)
  {
    if (result != 228444038 && result != 502329937) {
      goto LABEL_17;
    }
  }
  else if (result != 820711327 && result != 1429914406 && result != 1721691077)
  {
LABEL_17:
    char v0 = 1;
  }
  static DeviceCapabilities.supportsHighFrameRateLyricsBackground = v0;
  return result;
}

char *DeviceCapabilities.supportsHighFrameRateLyricsBackground.unsafeMutableAddressor()
{
  if (qword_1010BC588 != -1) {
    swift_once();
  }
  return &static DeviceCapabilities.supportsHighFrameRateLyricsBackground;
}

uint64_t static DeviceCapabilities.supportsHighFrameRateLyricsBackground.getter()
{
  return sub_100A77798(&qword_1010BC588, (unsigned __int8 *)&static DeviceCapabilities.supportsHighFrameRateLyricsBackground);
}

uint64_t sub_100A77544()
{
  uint64_t result = MGGetProductType();
  static DeviceCapabilities.supportsMotionBlur = result != 1325975682;
  return result;
}

char *DeviceCapabilities.supportsMotionBlur.unsafeMutableAddressor()
{
  if (qword_1010BC590 != -1) {
    swift_once();
  }
  return &static DeviceCapabilities.supportsMotionBlur;
}

uint64_t static DeviceCapabilities.supportsMotionBlur.getter()
{
  return sub_100A77798(&qword_1010BC590, (unsigned __int8 *)&static DeviceCapabilities.supportsMotionBlur);
}

void sub_100A775E4()
{
  uint64_t v0 = MGGetProductType();
  BOOL v1 = v0 != 3707345671 && v0 != 2159747553;
  BOOL v2 = v0 != 1119807502 && v1;
  id v3 = (id)MobileGestalt_get_current_device();
  if (v3)
  {
    uint64_t v4 = v3;
    char hevcDecoder8BitSupported = MobileGestalt_get_hevcDecoder8BitSupported();

    static DeviceCapabilities.supportsHEIC = v2 & hevcDecoder8BitSupported;
  }
  else
  {
    __break(1u);
  }
}

char *DeviceCapabilities.supportsHEIC.unsafeMutableAddressor()
{
  if (qword_1010BC598 != -1) {
    swift_once();
  }
  return &static DeviceCapabilities.supportsHEIC;
}

uint64_t static DeviceCapabilities.supportsHEIC.getter()
{
  return sub_100A77798(&qword_1010BC598, (unsigned __int8 *)&static DeviceCapabilities.supportsHEIC);
}

void sub_100A776E0()
{
  id v0 = (id)MobileGestalt_get_current_device();
  if (v0)
  {
    BOOL v1 = v0;
    char hasExtendedColorDisplay = MobileGestalt_get_hasExtendedColorDisplay();

    static DeviceCapabilities.char hasExtendedColorDisplay = hasExtendedColorDisplay;
  }
  else
  {
    __break(1u);
  }
}

char *DeviceCapabilities.hasExtendedColorDisplay.unsafeMutableAddressor()
{
  if (qword_1010BC5A0 != -1) {
    swift_once();
  }
  return &static DeviceCapabilities.hasExtendedColorDisplay;
}

uint64_t static DeviceCapabilities.hasExtendedColorDisplay.getter()
{
  return sub_100A77798(&qword_1010BC5A0, (unsigned __int8 *)&static DeviceCapabilities.hasExtendedColorDisplay);
}

uint64_t sub_100A77798(void *a1, unsigned __int8 *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *a2;
}

id static DeviceCapabilitiesObjC.hasWAPICapability.getter()
{
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    BOOL v1 = result;
    uint64_t wapiCapability = MobileGestalt_get_wapiCapability();

    return (id)wapiCapability;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _s9MusicCore18DeviceCapabilitiesO9diskUsageSDyAC04DiskF8CategoryOs5Int64VGvgZ_0()
{
  if (MGCopyAnswer())
  {
    sub_100063814(&qword_1010C5E50);
    swift_dynamicCast();
    unint64_t v0 = sub_1008F8934((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v1 = v54 + 64;
    uint64_t v2 = 1 << *(unsigned char *)(v54 + 32);
    uint64_t v3 = -1;
    if (v2 < 64) {
      uint64_t v3 = ~(-1 << v2);
    }
    unint64_t v4 = v3 & *(void *)(v54 + 64);
    v47 = (void *)v0;
    int64_t v48 = (unint64_t)(v2 + 63) >> 6;
    v5 = (void *)kMGQDiskUsageTotalSystemCapacity;
    uint64_t v6 = (void *)kMGQDiskUsageTotalSystemAvailable;
    v51 = (void *)kMGQDiskUsageTotalDataCapacity;
    v50 = (void *)kMGQDiskUsageTotalDataAvailable;
    v49 = (void *)kMGQDiskUsageTotalDiskCapacity;
    swift_bridgeObjectRetain();
    int64_t v7 = 0;
    v52 = v5;
    uint64_t v8 = v6;
    if (v4) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v11 < v48)
    {
      unint64_t v12 = *(void *)(v1 + 8 * v11);
      ++v7;
      if (v12) {
        goto LABEL_26;
      }
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v48) {
        goto LABEL_57;
      }
      unint64_t v12 = *(void *)(v1 + 8 * v7);
      if (v12) {
        goto LABEL_26;
      }
      int64_t v7 = v11 + 2;
      if (v11 + 2 >= v48) {
        goto LABEL_57;
      }
      unint64_t v12 = *(void *)(v1 + 8 * v7);
      if (v12) {
        goto LABEL_26;
      }
      int64_t v7 = v11 + 3;
      if (v11 + 3 >= v48) {
        goto LABEL_57;
      }
      unint64_t v12 = *(void *)(v1 + 8 * v7);
      if (v12) {
        goto LABEL_26;
      }
      int64_t v7 = v11 + 4;
      if (v11 + 4 >= v48) {
        goto LABEL_57;
      }
      unint64_t v12 = *(void *)(v1 + 8 * v7);
      if (v12)
      {
LABEL_26:
        unint64_t v4 = (v12 - 1) & v12;
        for (unint64_t i = __clz(__rbit64(v12)) + (v7 << 6); ; unint64_t i = v9 | (v7 << 6))
        {
          uint64_t v14 = 8 * i;
          uint64_t v15 = *(void **)(*(void *)(v54 + 48) + v14);
          uint64_t v53 = *(void *)(*(void *)(v54 + 56) + v14);
          if (!v5) {
            break;
          }
          _s3__C8CFStringCMa_0(0);
          sub_100A780DC();
          id v16 = v15;
          id v17 = v5;
          char v18 = static _CFObject.== infix(_:_:)();

          uint64_t v6 = v8;
          if (v18)
          {
            unsigned __int8 v33 = 0;
LABEL_44:

            goto LABEL_45;
          }
          if (v8) {
            goto LABEL_32;
          }
LABEL_33:
          if (v51)
          {
            _s3__C8CFStringCMa_0(0);
            sub_100A780DC();
            id v23 = v15;
            id v24 = v51;
            char v25 = static _CFObject.== infix(_:_:)();

            if (v25)
            {
              unsigned __int8 v33 = 2;
              goto LABEL_44;
            }
          }
          if (v50)
          {
            _s3__C8CFStringCMa_0(0);
            sub_100A780DC();
            id v26 = v15;
            id v27 = v50;
            char v28 = static _CFObject.== infix(_:_:)();

            if (v28)
            {
              unsigned __int8 v33 = 3;
              goto LABEL_44;
            }
          }
          if (!v49)
          {

            uint64_t v6 = v8;
LABEL_7:

            v5 = v52;
            if (!v4) {
              goto LABEL_9;
            }
            goto LABEL_8;
          }
          _s3__C8CFStringCMa_0(0);
          sub_100A780DC();
          id v29 = v49;
          id v30 = v15;
          id v31 = v29;
          char v32 = static _CFObject.== infix(_:_:)();

          uint64_t v6 = v8;
          if ((v32 & 1) == 0) {
            goto LABEL_7;
          }
          unsigned __int8 v33 = 4;
LABEL_45:
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v36 = sub_1000E728C(v33);
          uint64_t v37 = v47[2];
          BOOL v38 = (v35 & 1) == 0;
          uint64_t v39 = v37 + v38;
          if (__OFADD__(v37, v38)) {
            goto LABEL_59;
          }
          char v40 = v35;
          if (v47[3] >= v39)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_100A32014();
            }
          }
          else
          {
            sub_100A2FF7C(v39, isUniquelyReferenced_nonNull_native);
            unint64_t v41 = sub_1000E728C(v33);
            if ((v40 & 1) != (v42 & 1)) {
              goto LABEL_63;
            }
            unint64_t v36 = v41;
          }
          uint64_t v1 = v54 + 64;
          if (v40)
          {
            *(void *)(v47[7] + 8 * v36) = v53;
          }
          else
          {
            v47[(v36 >> 6) + 8] |= 1 << v36;
            *(unsigned char *)(v47[6] + v36) = v33;
            *(void *)(v47[7] + 8 * v36) = v53;
            uint64_t v43 = v47[2];
            BOOL v44 = __OFADD__(v43, 1);
            uint64_t v45 = v43 + 1;
            if (v44) {
              goto LABEL_60;
            }
            v47[2] = v45;
          }

          swift_bridgeObjectRelease();
          v5 = v52;
          uint64_t v6 = v8;
          if (!v4) {
            goto LABEL_9;
          }
LABEL_8:
          unint64_t v9 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
        id v19 = v15;
        if (!v6) {
          goto LABEL_33;
        }
LABEL_32:
        _s3__C8CFStringCMa_0(0);
        sub_100A780DC();
        id v20 = v15;
        id v21 = v6;
        char v22 = static _CFObject.== infix(_:_:)();

        if (v22)
        {
          unsigned __int8 v33 = 1;
          goto LABEL_44;
        }
        goto LABEL_33;
      }
      int64_t v13 = v11 + 5;
      if (v13 < v48)
      {
        unint64_t v12 = *(void *)(v1 + 8 * v13);
        if (v12)
        {
          int64_t v7 = v13;
          goto LABEL_26;
        }
        while (1)
        {
          int64_t v7 = v13 + 1;
          if (__OFADD__(v13, 1)) {
            goto LABEL_61;
          }
          if (v7 >= v48) {
            break;
          }
          unint64_t v12 = *(void *)(v1 + 8 * v7);
          ++v13;
          if (v12) {
            goto LABEL_26;
          }
        }
      }
    }
LABEL_57:
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v47;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100A77DF4()
{
  unint64_t result = qword_1010C5E18;
  if (!qword_1010C5E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C5E18);
  }
  return result;
}

unint64_t sub_100A77E4C()
{
  unint64_t result = qword_1010C5E20;
  if (!qword_1010C5E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C5E20);
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceCapabilities()
{
  return &type metadata for DeviceCapabilities;
}

unsigned char *storeEnumTagSinglePayload for DeviceCapabilities.DiskUsageCategory(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A77F7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceCapabilities.DiskUsageCategory()
{
  return &type metadata for DeviceCapabilities.DiskUsageCategory;
}

unsigned char *storeEnumTagSinglePayload for DeviceCapabilities.DeviceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A78080);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceCapabilities.DeviceType()
{
  return &type metadata for DeviceCapabilities.DeviceType;
}

uint64_t type metadata accessor for DeviceCapabilitiesObjC()
{
  return self;
}

unint64_t sub_100A780DC()
{
  unint64_t result = qword_1010C5E58;
  if (!qword_1010C5E58)
  {
    _s3__C8CFStringCMa_0(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C5E58);
  }
  return result;
}

uint64_t property wrapper backing initializer of EnvironmentMonitorObserver.networkType()
{
  return Published.init(initialValue:)();
}

uint64_t EnvironmentMonitorObserver.networkType.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100A781EC@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100A78270(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t EnvironmentMonitorObserver.$networkType.getter()
{
  return sub_100063A58((uint64_t)&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__networkType, &qword_1010C5E68);
}

uint64_t EnvironmentMonitorObserver.isNetworkConstrained.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100A7836C@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100A783F0(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t EnvironmentMonitorObserver.$isNetworkConstrained.getter()
{
  return sub_100063A58((uint64_t)&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__isNetworkConstrained, &qword_1010C2400);
}

uint64_t property wrapper backing initializer of EnvironmentMonitorObserver.thermalLevel()
{
  return Published.init(initialValue:)();
}

uint64_t EnvironmentMonitorObserver.thermalLevel.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100A7851C@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100A785A0(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t EnvironmentMonitorObserver.$thermalLevel.getter()
{
  return sub_100063A58((uint64_t)&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__thermalLevel, &qword_1010C5E88);
}

uint64_t sub_100A78628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v9 = sub_100063814(a5);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v14 = __chkstk_darwin(v13);
  id v16 = (char *)&v19 - v15;
  id v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  v17((char *)&v19 - v15, a1, v9, v14);
  ((void (*)(char *, char *, uint64_t))v17)(v12, v16, v9);
  swift_beginAccess();
  sub_100063814(a7);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v9);
}

BOOL static EnvironmentMonitorObserver.ThermalLevel.< infix(_:_:)(char a1, char a2)
{
  return qword_100E4F950[a1] < qword_100E4F950[a2];
}

uint64_t EnvironmentMonitorObserver.ThermalLevel.rawValue.getter(char a1)
{
  return qword_100E4F950[a1];
}

BOOL sub_100A787E0(char *a1, char *a2)
{
  return qword_100E4F950[*a1] == qword_100E4F950[*a2];
}

Swift::Int sub_100A78804()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_100E4F950[v1]);
  return Hasher._finalize()();
}

void sub_100A78854()
{
  Hasher._combine(_:)(qword_100E4F950[*v0]);
}

Swift::Int sub_100A7888C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_100E4F950[v1]);
  return Hasher._finalize()();
}

uint64_t sub_100A788D8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s9MusicCore26EnvironmentMonitorObserverC12ThermalLevelO8rawValueAESgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100A78904(void *a1@<X8>)
{
  *a1 = qword_100E4F950[*v1];
}

BOOL sub_100A7891C(char *a1, char *a2)
{
  return qword_100E4F950[*a1] < qword_100E4F950[*a2];
}

BOOL sub_100A78940(char *a1, char *a2)
{
  return qword_100E4F950[*a2] >= qword_100E4F950[*a1];
}

BOOL sub_100A78964(char *a1, char *a2)
{
  return qword_100E4F950[*a1] >= qword_100E4F950[*a2];
}

BOOL sub_100A78988(char *a1, char *a2)
{
  return qword_100E4F950[*a2] < qword_100E4F950[*a1];
}

unint64_t EnvironmentMonitorObserver.init()()
{
  uint64_t v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver_environmentMonitor;
  unsigned int v4 = self;
  uint64_t v5 = v0;
  id v6 = [v4 sharedMonitor];
  *(void *)&v1[v3] = v6;
  id v7 = [v6 networkType];
  swift_beginAccess();
  id v12 = v7;
  type metadata accessor for ICEnvironmentNetworkType(0);
  Published.init(initialValue:)();
  swift_endAccess();
  LOBYTE(v7) = [v6 isNetworkConstrained];
  swift_beginAccess();
  LOBYTE(v12) = (_BYTE)v7;
  Published.init(initialValue:)();
  swift_endAccess();
  unint64_t result = (unint64_t)[v6 currentThermalLevel];
  if (HIDWORD(result))
  {
    __break(1u);
  }
  else
  {
    char v9 = sub_100A7967C();
    swift_beginAccess();
    LOBYTE(v12) = v9;
    Published.init(initialValue:)();
    swift_endAccess();

    v11.receiver = v5;
    v11.super_class = ObjectType;
    uint64_t v10 = (char *)[super init];
    [*(id *)&v10[OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver_environmentMonitor] registerObserver:v10];
    return (unint64_t)v10;
  }
  return result;
}

id EnvironmentMonitorObserver.__deallocating_deinit()
{
  ObjectType = (objc_class *)swift_getObjectType();
  [*(id *)&v0[OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver_environmentMonitor] unregisterObserver:v0];
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return [super dealloc];
}

uint64_t EnvironmentMonitorObserver.environmentMonitorDidChangeNetworkReachability(_:)(void *a1)
{
  return sub_100A790E0(a1, (uint64_t)&unk_101002A78, (uint64_t)&unk_1010C5EA8);
}

uint64_t sub_100A78DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100A78E38, v7, v6);
}

uint64_t sub_100A78E38()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = *(void **)(v0 + 16);
  swift_release();
  LOBYTE(v1) = [v1 isNetworkConstrained];
  swift_getKeyPath();
  swift_getKeyPath();
  *(unsigned char *)(v0 + 40) = (_BYTE)v1;
  id v3 = v2;
  static Published.subscript.setter();
  unsigned int v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t EnvironmentMonitorObserver.environmentMonitorDidChangeNetworkType(_:)(void *a1)
{
  return sub_100A790E0(a1, (uint64_t)&unk_101002AA0, (uint64_t)&unk_1010C5EB8);
}

uint64_t sub_100A78F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100A78FD8, v7, v6);
}

uint64_t sub_100A78FD8()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = (void *)v0[3];
  swift_release();
  id v3 = [v1 networkType];
  swift_getKeyPath();
  swift_getKeyPath();
  v0[2] = v3;
  id v4 = v2;
  static Published.subscript.setter();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t EnvironmentMonitorObserver.environmentMonitorDidChangeThermalLevel(_:)(void *a1)
{
  return sub_100A790E0(a1, (uint64_t)&unk_101002AC8, (uint64_t)&unk_1010C5EC8);
}

uint64_t sub_100A790E0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100063814(&qword_1010C0040);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  type metadata accessor for MainActor();
  id v10 = v3;
  id v11 = a1;
  uint64_t v12 = static MainActor.shared.getter();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v12;
  v13[3] = &protocol witness table for MainActor;
  v13[4] = v10;
  v13[5] = v11;
  sub_100066A68((uint64_t)v8, a3, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_100A79208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100A792A0, v7, v6);
}

unint64_t sub_100A792A0()
{
  uint64_t v1 = *(void **)(v0 + 24);
  swift_release();
  unint64_t result = (unint64_t)[v1 currentThermalLevel];
  if (HIDWORD(result))
  {
    __break(1u);
  }
  else
  {
    id v3 = *(void **)(v0 + 16);
    char v4 = sub_100A7967C();
    swift_getKeyPath();
    swift_getKeyPath();
    *(unsigned char *)(v0 + 40) = v4;
    id v5 = v3;
    static Published.subscript.setter();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  return result;
}

void sub_100A79398(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_100063814(&qword_1010C0040);
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  type metadata accessor for MainActor();
  id v12 = a3;
  id v13 = a1;
  id v14 = v12;
  uint64_t v15 = static MainActor.shared.getter();
  id v16 = (void *)swift_allocObject();
  v16[2] = v15;
  v16[3] = &protocol witness table for MainActor;
  v16[4] = v13;
  v16[5] = v14;
  sub_100066A68((uint64_t)v10, a5, (uint64_t)v16);
  swift_release();
}

uint64_t EnvironmentMonitorObserver.ThermalLevel.description.getter(char a1)
{
  uint64_t result = 0x6C616E696D6F6ELL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x746867696CLL;
      break;
    case 2:
      uint64_t result = 0x6574617265646F6DLL;
      break;
    case 3:
      uint64_t result = 0x7976616568;
      break;
    case 4:
      unsigned int v3 = 1885434484;
      goto LABEL_7;
    case 5:
      unsigned int v3 = 1701145715;
LABEL_7:
      uint64_t result = v3 | 0x676E697000000000;
      break;
    case 6:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100A795AC()
{
  uint64_t result = 0x6C616E696D6F6ELL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x746867696CLL;
      break;
    case 2:
      uint64_t result = 0x6574617265646F6DLL;
      break;
    case 3:
      uint64_t result = 0x7976616568;
      break;
    case 4:
      unsigned int v2 = 1885434484;
      goto LABEL_7;
    case 5:
      unsigned int v2 = 1701145715;
LABEL_7:
      uint64_t result = v2 | 0x676E697000000000;
      break;
    case 6:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100A7967C()
{
  return 0;
}

uint64_t _s9MusicCore26EnvironmentMonitorObserverC12ThermalLevelO8rawValueAESgSi_tcfC_0(uint64_t a1)
{
  uint64_t v1 = a1 + 1;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
      uint64_t result = 6;
      break;
    case 1:
      uint64_t result = 0;
      break;
    case 11:
      return result;
    case 21:
      uint64_t result = 2;
      break;
    case 31:
      uint64_t result = 3;
      break;
    case 41:
      uint64_t result = 4;
      break;
    case 51:
      uint64_t result = 5;
      break;
    default:
      uint64_t result = 7;
      break;
  }
  return result;
}

uint64_t sub_100A798E8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100081D08;
  return sub_100A78DA0(a1, v4, v5, v7, v6);
}

uint64_t sub_100A799AC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100081D08;
  return sub_100A78F40(a1, v4, v5, v7, v6);
}

uint64_t sub_100A79A70(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100081D08;
  return sub_100A79208(a1, v4, v5, v7, v6);
}

unint64_t sub_100A79B34()
{
  unint64_t result = qword_1010C5ED0;
  if (!qword_1010C5ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C5ED0);
  }
  return result;
}

uint64_t sub_100A79B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1009E6A50(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__networkType, &qword_1010C5E68);
}

uint64_t sub_100A79BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100A78628(a1, a2, a3, a4, (uint64_t *)&unk_1010C5FB0, (uint64_t)&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__networkType, &qword_1010C5E68);
}

uint64_t sub_100A79BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1009E6A50(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__isNetworkConstrained, &qword_1010C2400);
}

uint64_t sub_100A79C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100A78628(a1, a2, a3, a4, &qword_1010C2408, (uint64_t)&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__isNetworkConstrained, &qword_1010C2400);
}

uint64_t sub_100A79C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1009E6A50(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__thermalLevel, &qword_1010C5E88);
}

uint64_t sub_100A79C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100A78628(a1, a2, a3, a4, (uint64_t *)&unk_1010C5FA0, (uint64_t)&OBJC_IVAR____TtC9MusicCore26EnvironmentMonitorObserver__thermalLevel, &qword_1010C5E88);
}

uint64_t sub_100A79C90()
{
  return type metadata accessor for EnvironmentMonitorObserver();
}

uint64_t type metadata accessor for EnvironmentMonitorObserver()
{
  uint64_t result = qword_1010C5F60;
  if (!qword_1010C5F60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100A79CE4()
{
  sub_100A79E14();
  if (v0 <= 0x3F)
  {
    sub_100014014(319, (unint64_t *)&qword_1010C2478);
    if (v1 <= 0x3F)
    {
      sub_100014014(319, &qword_1010C5F80);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_100A79E14()
{
  if (!qword_1010C5F70)
  {
    type metadata accessor for ICEnvironmentNetworkType(255);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1010C5F70);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for EnvironmentMonitorObserver.ThermalLevel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A79F38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentMonitorObserver.ThermalLevel()
{
  return &type metadata for EnvironmentMonitorObserver.ThermalLevel;
}

uint64_t sub_100A79F78(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000154F4;
  return sub_100A78F40(a1, v4, v5, v7, v6);
}

uint64_t *ExplicitRestrictionsController.shared.unsafeMutableAddressor()
{
  if (qword_1010BC5A8 != -1) {
    swift_once();
  }
  return &static ExplicitRestrictionsController.shared;
}

uint64_t ExplicitRestrictionsController.accountVerificationURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100063814(&qword_1010BCBE0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v6 = *(void **)(v1 + 24);
  if (v6)
  {
    id v7 = [v6 verificationURL];
    if (v7)
    {
      uint64_t v8 = v7;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v9 = type metadata accessor for URL();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 0, 1, v9);
    }
    else
    {
      uint64_t v12 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v5, 1, 1, v12);
    }
    return sub_100017820((uint64_t)v5, a1);
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
}

uint64_t sub_100A7A200()
{
  type metadata accessor for ExplicitRestrictionsController();
  swift_allocObject();
  uint64_t result = sub_100A7A298();
  static ExplicitRestrictionsController.shared = result;
  return result;
}

uint64_t static ExplicitRestrictionsController.shared.getter()
{
  if (qword_1010BC5A8 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t sub_100A7A298()
{
  uint64_t v1 = v0;
  *(unsigned char *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  if (qword_1010BC5B0 != -1) {
    swift_once();
  }
  uint64_t v2 = static ExplicitRestrictionsController.symbols;
  uint64_t v3 = unk_10112BD00;
  *(void *)(v1 + 48) = _swiftEmptyArrayStorage;
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  uint64_t v4 = self;
  swift_bridgeObjectRetain();
  id v5 = [v4 sharedRestrictionsMonitor];
  LODWORD(v4) = [v5 allowsExplicitContent];
  swift_beginAccess();
  int v6 = *(unsigned __int8 *)(v1 + 16);
  *(unsigned char *)(v1 + 16) = (_BYTE)v4;
  if (v4 == v6)
  {
    id v7 = v5;
  }
  else
  {
    id v7 = [self defaultCenter];
    if (qword_1010BC5B8 != -1) {
      swift_once();
    }
    [v7 postNotificationName:qword_10112BD20 object:v1];
  }
  sub_100A7A620();
  id v8 = [self defaultManager];
  id v9 = [v8 ageVerificationState];

  sub_100A7AA8C(v9);
  type metadata accessor for Whitetail.Binding();
  uint64_t v10 = (void *)MPRestrictionsMonitorAllowsExplicitContentDidChangeNotification;
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)((uint64_t)v10, 1, (uint64_t)sub_100A7AF78, v11);
  swift_beginAccess();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v1 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 48) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  uint64_t v12 = (void *)ICAgeVerificationStateDidChangeNotification;
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  Whitetail.Binding.__allocating_init(_:needsInitialConfiguration:configurationBlock:)((uint64_t)v12, 1, (uint64_t)sub_100A7AF80, v13);
  swift_beginAccess();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v1 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 48) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100A7A620()
{
  swift_beginAccess();
  uint64_t v1 = (void *)v0[3];
  if (v1 && [v1 treatment] == (id)1)
  {
    if (qword_1010BC5B0 != -1) {
      swift_once();
    }
    uint64_t v2 = &qword_10112BD08;
  }
  else
  {
    if (qword_1010BC5B0 != -1) {
      swift_once();
    }
    uint64_t v2 = &static ExplicitRestrictionsController.symbols;
  }
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  swift_beginAccess();
  v0[4] = v4;
  v0[5] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void sub_100A7A720()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    id v2 = [self sharedRestrictionsMonitor];
    unsigned int v3 = [v2 allowsExplicitContent];
    swift_beginAccess();
    int v4 = *(unsigned __int8 *)(v1 + 16);
    *(unsigned char *)(v1 + 16) = v3;
    if (v3 == v4)
    {
      swift_release();
      id v5 = v2;
    }
    else
    {
      id v5 = [self defaultCenter];
      if (qword_1010BC5B8 != -1) {
        swift_once();
      }
      [v5 postNotificationName:qword_10112BD20 object:v1];
      swift_release();
    }
  }
}

uint64_t sub_100A7A85C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v1 = [self defaultManager];
    id v2 = [v1 ageVerificationState];

    sub_100A7AA8C(v2);
    sub_100A7A620();
    return swift_release();
  }
  return result;
}

void *ExplicitRestrictionsController.explicitContentIsAllowed.getter()
{
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 16) != 1) {
    return 0;
  }
  swift_beginAccess();
  uint64_t result = *(void **)(v0 + 24);
  if (result) {
    return (void *)(((unint64_t)[result status] & 0xFFFFFFFFFFFFFFFDLL) == 1);
  }
  return result;
}

void sub_100A7A97C(char a1)
{
  int v3 = a1 & 1;
  swift_beginAccess();
  int v4 = *(unsigned __int8 *)(v1 + 16);
  *(unsigned char *)(v1 + 16) = a1;
  if (v4 != v3)
  {
    id v5 = [self defaultCenter];
    if (qword_1010BC5B8 != -1) {
      swift_once();
    }
    [v5 postNotificationName:qword_10112BD20 object:v1];
  }
}

void *ExplicitRestrictionsController.ageVerification.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

void sub_100A7AA8C(void *a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  int v4 = *(void **)(v2 + 24);
  *(void *)(v2 + 24) = a1;
  id v5 = a1;
  int v6 = v5;
  if (a1)
  {
    if (v4)
    {
      sub_100A7AF00();
      id v7 = v4;
      id v8 = v6;
      char v9 = static NSObject.== infix(_:_:)();

      if (v9) {
        goto LABEL_9;
      }
    }
  }
  else if (!v4)
  {
    id v7 = 0;
    id v8 = v5;
    goto LABEL_9;
  }
  id v8 = [self defaultCenter];
  if (qword_1010BC5B8 != -1) {
    swift_once();
  }
  [v8 postNotificationName:qword_10112BD18 object:v2];

  id v7 = v6;
LABEL_9:
}

uint64_t *ExplicitRestrictionsController.symbols.unsafeMutableAddressor()
{
  if (qword_1010BC5B0 != -1) {
    swift_once();
  }
  return &static ExplicitRestrictionsController.symbols;
}

uint64_t ExplicitRestrictionsController.symbol.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_100A7AC54()
{
  static ExplicitRestrictionsController.symbols = 3028656112;
  unk_10112BD00 = 0xA400000000000000;
  qword_10112BD08 = 11768802;
  unk_10112BD10 = 0xA300000000000000;
}

uint64_t static ExplicitRestrictionsController.symbols.getter()
{
  if (qword_1010BC5B0 != -1) {
    swift_once();
  }
  uint64_t v0 = static ExplicitRestrictionsController.symbols;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t ExplicitRestrictionsController.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ExplicitRestrictionsController.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

NSString sub_100A7AD7C()
{
  qword_10112BD18 = (uint64_t)String._bridgeToObjectiveC()();
  NSString result = String._bridgeToObjectiveC()();
  qword_10112BD20 = (uint64_t)result;
  return result;
}

uint64_t sub_100A7ADE4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

void sub_100A7AE2C(char *a1)
{
}

id sub_100A7AE54@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  int v4 = *(void **)(v3 + 24);
  *a2 = v4;

  return v4;
}

void sub_100A7AEAC(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  sub_100A7AA8C(v1);
}

uint64_t type metadata accessor for ExplicitRestrictionsController()
{
  return self;
}

unint64_t sub_100A7AF00()
{
  unint64_t result = qword_1010C6078;
  if (!qword_1010C6078)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1010C6078);
  }
  return result;
}

uint64_t sub_100A7AF40()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

void sub_100A7AF78()
{
}

uint64_t sub_100A7AF80()
{
  return sub_100A7A85C();
}

uint64_t LaunchURL.GenericHandler.perform(withURL:)(uint64_t a1, int *a2)
{
  v2[2] = type metadata accessor for MainActor();
  v2[3] = static MainActor.shared.getter();
  id v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  id v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_100A7B088;
  return v7(a1);
}

uint64_t sub_100A7B088(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 40) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v7 = v6;
    uint64_t v8 = sub_100A7B274;
  }
  else
  {
    *(unsigned char *)(v4 + 48) = a1 & 1;
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v7 = v9;
    uint64_t v8 = sub_100A7B20C;
  }
  return _swift_task_switch(v8, v5, v7);
}

uint64_t sub_100A7B20C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 48);
  return v1(v2);
}

uint64_t sub_100A7B274()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100A7B2DC(uint64_t a1)
{
  uint64_t v4 = *v1;
  v2[2] = type metadata accessor for MainActor();
  v2[3] = static MainActor.shared.getter();
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v2[4] = v5;
  void *v5 = v2;
  v5[1] = sub_100A7B3D8;
  return v7(a1);
}

uint64_t sub_100A7B3D8(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 40) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v7 = v6;
    uint64_t v8 = sub_100A7D824;
  }
  else
  {
    *(unsigned char *)(v4 + 48) = a1 & 1;
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v7 = v9;
    uint64_t v8 = sub_100A7D820;
  }
  return _swift_task_switch(v8, v5, v7);
}

void *static LaunchURL.ArrayBuilder.buildBlock(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v3 = _swiftEmptyArrayStorage;
  do
  {
    sub_100A7B694(v2, (uint64_t)v10);
    sub_100A7B6FC((uint64_t)v10, (uint64_t)&v7);
    if (v8)
    {
      sub_100068978(&v7, (uint64_t)v9);
      sub_100068978(v9, (uint64_t)&v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_10087F940(0, v3[2] + 1, 1, v3);
      }
      unint64_t v5 = v3[2];
      unint64_t v4 = v3[3];
      if (v5 >= v4 >> 1) {
        uint64_t v3 = sub_10087F940((void *)(v4 > 1), v5 + 1, 1, v3);
      }
      v3[2] = v5 + 1;
      sub_100068978(&v7, (uint64_t)&v3[5 * v5 + 4]);
    }
    else
    {
      sub_100A7B764((uint64_t)&v7);
    }
    v2 += 40;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100A7B694(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010C6088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100A7B6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010C6088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100A7B764(uint64_t a1)
{
  uint64_t v2 = sub_100063814(&qword_1010C6088);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *static LaunchURL.ArrayBuilder.buildOptional(_:)(uint64_t a1)
{
  sub_100A7B694(a1, (uint64_t)&v3);
  if (v4)
  {
    sub_100068978(&v3, (uint64_t)v5);
    sub_100063814(&qword_1010BDEA8);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_100E251D0;
    sub_100068978(v5, v1 + 32);
  }
  else
  {
    sub_100A7B764((uint64_t)&v3);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v1;
}

uint64_t sub_100A7B854(uint64_t a1)
{
  sub_100063814(&qword_1010BDEA8);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100E251D0;
  sub_1000688E4(a1, v2 + 32);
  return v2;
}

uint64_t LaunchURL.Resolver.init(perform:handlerBuilder:)@<X0>(char a1@<W0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  char v5 = a1 & 1;
  type metadata accessor for LaunchURL.Resolver();
  uint64_t v6 = Logger.init(subsystem:category:)();
  *(unsigned char *)a3 = v5;
  uint64_t result = a2(v6);
  *(void *)(a3 + 8) = result;
  return result;
}

uint64_t LaunchURL.Resolver.perform(withURL:)(uint64_t a1)
{
  v2[36] = a1;
  v2[37] = v1;
  uint64_t v3 = type metadata accessor for URL();
  v2[38] = v3;
  v2[39] = *(void *)(v3 - 8);
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[44] = v4;
  v2[45] = *(void *)(v4 - 8);
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  return _swift_task_switch(sub_100A7BAA4, 0, 0);
}

uint64_t sub_100A7BAA4()
{
  uint64_t v85 = v0;
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 312);
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 296);
  uint64_t v9 = *(int *)(type metadata accessor for LaunchURL.Resolver() + 24);
  *(_DWORD *)(v0 + 504) = v9;
  uint64_t v10 = v8 + v9;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 400) = v11;
  *(void *)(v0 + 408) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v11(v1, v10, v2);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(void *)(v0 + 416) = v12;
  *(void *)(v0 + 424) = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v12(v4, v7, v5);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 352);
  uint64_t v17 = *(void *)(v0 + 360);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v21 = *(void *)(v0 + 304);
  uint64_t v20 = *(void *)(v0 + 312);
  if (v15)
  {
    uint64_t v81 = *(void *)(v0 + 392);
    uint64_t v22 = swift_slowAlloc();
    uint64_t v84 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136446210;
    sub_100A7D05C();
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v22 + 4) = sub_100075E68(v23, v24, &v84);
    swift_bridgeObjectRelease();
    char v25 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v25(v19, v21);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Evaluating URL=%{public}s", (uint8_t *)v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v26 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v26(v81, v18);
  }
  else
  {
    char v25 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v25(*(void *)(v0 + 344), *(void *)(v0 + 304));

    id v26 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v26(v16, v18);
  }
  *(void *)(v0 + 432) = v26;
  *(void *)(v0 + 440) = v25;
  uint64_t v27 = *(void *)(v0 + 296);
  *(void *)(v0 + 280) = _swiftEmptyArrayStorage;
  uint64_t v28 = *(void *)(v27 + 8);
  *(void *)(v0 + 448) = v28;
  uint64_t v29 = *(void *)(v28 + 16);
  *(void *)(v0 + 456) = v29;
  if (v29)
  {
    *(void *)(v0 + 472) = v25;
    *(void *)(v0 + 480) = 0;
    v82 = v26;
    *(void *)(v0 + 464) = v26;
    v79 = v25;
    v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 416);
    v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
    uint64_t v30 = *(void *)(v0 + 384);
    uint64_t v31 = *(void *)(v0 + 352);
    uint64_t v32 = *(void *)(v0 + 336);
    uint64_t v33 = *(void *)(v0 + 304);
    uint64_t v34 = v28 + 32;
    uint64_t v35 = v27 + *(int *)(v0 + 504);
    uint64_t v36 = *(void *)(v0 + 288);
    swift_bridgeObjectRetain();
    sub_1000688E4(v34, v0 + 56);
    v74(v30, v35, v31);
    v76(v32, v36, v33);
    uint64_t v77 = v0 + 96;
    sub_1000688E4(v0 + 56, v0 + 96);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.info.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v40 = *(void *)(v0 + 384);
    uint64_t v41 = *(void *)(v0 + 352);
    uint64_t v42 = *(void *)(v0 + 336);
    uint64_t v43 = *(void *)(v0 + 304);
    if (v39)
    {
      uint64_t v75 = *(void *)(v0 + 352);
      uint64_t v44 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136446466;
      sub_100A7D05C();
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v44 + 4) = sub_100075E68(v45, v46, &v84);
      swift_bridgeObjectRelease();
      v79(v42, v43);
      *(_WORD *)(v44 + 12) = 2082;
      sub_1000688E4(v77, v0 + 16);
      sub_100063814(&qword_1010BDEB0);
      uint64_t v47 = String.init<A>(describing:)();
      *(void *)(v44 + 14) = sub_100075E68(v47, v48, &v84);
      swift_bridgeObjectRelease();
      sub_1000760E4(v77);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Resolving URL=%{public}s with handler=%{public}s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v82(v40, v75);
    }
    else
    {
      v79(*(void *)(v0 + 336), *(void *)(v0 + 304));
      sub_1000760E4(v77);

      v82(v40, v41);
    }
    uint64_t v67 = *(void *)(v0 + 80);
    uint64_t v68 = *(void *)(v0 + 88);
    sub_100068990((void *)(v0 + 56), v67);
    v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 + 8) + **(int **)(v68 + 8));
    v69 = (void *)swift_task_alloc();
    *(void *)(v0 + 488) = v69;
    void *v69 = v0;
    v69[1] = sub_100A7C2EC;
    uint64_t v70 = *(void *)(v0 + 288);
    return v80(v70, v67, v68);
  }
  else
  {
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 416);
    uint64_t v50 = *(void *)(v0 + 320);
    uint64_t v51 = *(void *)(v0 + 304);
    uint64_t v52 = *(void *)(v0 + 288);
    (*(void (**)(void, uint64_t, void))(v0 + 400))(*(void *)(v0 + 368), v27 + *(int *)(v0 + 504), *(void *)(v0 + 352));
    v49(v50, v52, v51);
    swift_bridgeObjectRetain_n();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.info.getter();
    BOOL v55 = os_log_type_enabled(v53, v54);
    v56 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
    v57 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v58 = *(void *)(v0 + 368);
    uint64_t v83 = *(void *)(v0 + 352);
    uint64_t v59 = *(void *)(v0 + 320);
    uint64_t v60 = *(void *)(v0 + 304);
    if (v55)
    {
      uint64_t v78 = *(void *)(v0 + 368);
      uint64_t v61 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 136446466;
      sub_100A7D05C();
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v61 + 4) = sub_100075E68(v62, v63, &v84);
      swift_bridgeObjectRelease();
      v57(v59, v60);
      *(_WORD *)(v61 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_100063814(&qword_1010BDEB0);
      uint64_t v64 = Array.description.getter();
      unint64_t v66 = v65;
      swift_bridgeObjectRelease();
      *(void *)(v61 + 14) = sub_100075E68(v64, v66, &v84);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Successfully evaluated URL=%{public}s using handlers=%{public}s", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v56(v78, v83);
    }
    else
    {
      v57(*(void *)(v0 + 320), *(void *)(v0 + 304));
      swift_bridgeObjectRelease_n();

      v56(v58, v83);
    }
    swift_beginAccess();
    uint64_t v72 = *(void *)(*(void *)(v0 + 280) + 16);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v73 = *(uint64_t (**)(BOOL))(v0 + 8);
    return v73(v72 != 0);
  }
}

uint64_t sub_100A7C2EC(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 508) = a1;
  *(void *)(v3 + 496) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100A7CDA4;
  }
  else
  {
    uint64_t v4 = sub_100A7C414;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100A7C414()
{
  uint64_t v90 = v0;
  uint64_t v1 = v0 + 56;
  uint64_t v2 = (void **)(v0 + 280);
  if (*(unsigned char *)(v0 + 508))
  {
    sub_1000688E4(v0 + 56, v0 + 176);
    uint64_t v3 = *v2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = sub_10087F940(0, v3[2] + 1, 1, v3);
    }
    unint64_t v5 = v3[2];
    unint64_t v4 = v3[3];
    if (v5 >= v4 >> 1) {
      uint64_t v3 = sub_10087F940((void *)(v4 > 1), v5 + 1, 1, v3);
    }
    v3[2] = v5 + 1;
    sub_100068978((long long *)(v0 + 176), (uint64_t)&v3[5 * v5 + 4]);
    *uint64_t v2 = v3;
  }
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 416);
  uint64_t v7 = *(void *)(v0 + 328);
  uint64_t v8 = *(void *)(v0 + 288);
  uint64_t v9 = *(void *)(v0 + 304);
  (*(void (**)(void, void, void))(v0 + 400))(*(void *)(v0 + 376), *(void *)(v0 + 296) + *(int *)(v0 + 504), *(void *)(v0 + 352));
  v6(v7, v8, v9);
  sub_1000688E4(v0 + 56, v0 + 136);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = *(void *)(v0 + 376);
  uint64_t v14 = *(void *)(v0 + 328);
  uint64_t v15 = *(void *)(v0 + 304);
  uint64_t v85 = *(void *)(v0 + 352);
  if (v12)
  {
    v82 = (void (**)(uint64_t, uint64_t))(v0 + 432);
    uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    v79 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
    uint64_t v16 = swift_slowAlloc();
    uint64_t v89 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446466;
    sub_100A7D05C();
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v16 + 4) = sub_100075E68(v17, v18, &v89);
    swift_bridgeObjectRelease();
    v78(v14, v15);
    *(_WORD *)(v16 + 12) = 2082;
    sub_1000688E4(v0 + 136, v0 + 216);
    sub_100063814(&qword_1010BDEB0);
    uint64_t v19 = String.init<A>(describing:)();
    *(void *)(v16 + 14) = sub_100075E68(v19, v20, &v89);
    swift_bridgeObjectRelease();
    sub_1000760E4(v0 + 136);
    os_log_type_t v21 = v11;
    uint64_t v22 = (void (**)(uint64_t, uint64_t))(v0 + 440);
    _os_log_impl((void *)&_mh_execute_header, v10, v21, "Resolved URL=%{public}s with handler=%{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = v0 + 56;
    swift_slowDealloc();

    v79(v13, v85);
  }
  else
  {
    uint64_t v22 = (void (**)(uint64_t, uint64_t))(v0 + 472);
    v82 = (void (**)(uint64_t, uint64_t))(v0 + 464);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 464);
    (*(void (**)(uint64_t, uint64_t))(v0 + 472))(v14, v15);
    sub_1000760E4(v0 + 136);

    v23(v13, v85);
  }
  unint64_t v24 = *v22;
  char v25 = *v82;
  if (*(unsigned char *)(v0 + 508) == 1 && (**(unsigned char **)(v0 + 296) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_1000760E4(v1);
    goto LABEL_17;
  }
  uint64_t v26 = *(void *)(v0 + 456);
  uint64_t v27 = *(void *)(v0 + 480) + 1;
  sub_1000760E4(v1);
  if (v27 == v26)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 416);
    uint64_t v54 = *(void *)(v0 + 320);
    uint64_t v55 = *(void *)(v0 + 288);
    uint64_t v56 = *(void *)(v0 + 304);
    (*(void (**)(void, void, void))(v0 + 400))(*(void *)(v0 + 368), *(void *)(v0 + 296) + *(int *)(v0 + 504), *(void *)(v0 + 352));
    v53(v54, v55, v56);
    swift_bridgeObjectRetain_n();
    v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.info.getter();
    BOOL v59 = os_log_type_enabled(v57, v58);
    uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
    uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v62 = *(void *)(v0 + 368);
    uint64_t v88 = *(void *)(v0 + 352);
    uint64_t v63 = *(void *)(v0 + 320);
    uint64_t v64 = *(void *)(v0 + 304);
    if (v59)
    {
      uint64_t v84 = *(void *)(v0 + 368);
      uint64_t v65 = swift_slowAlloc();
      uint64_t v89 = swift_slowAlloc();
      *(_DWORD *)uint64_t v65 = 136446466;
      sub_100A7D05C();
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v65 + 4) = sub_100075E68(v66, v67, &v89);
      swift_bridgeObjectRelease();
      v61(v63, v64);
      *(_WORD *)(v65 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_100063814(&qword_1010BDEB0);
      uint64_t v68 = Array.description.getter();
      unint64_t v70 = v69;
      swift_bridgeObjectRelease();
      *(void *)(v65 + 14) = sub_100075E68(v68, v70, &v89);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Successfully evaluated URL=%{public}s using handlers=%{public}s", (uint8_t *)v65, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v60(v84, v88);
    }
    else
    {
      v61(*(void *)(v0 + 320), *(void *)(v0 + 304));
      swift_bridgeObjectRelease_n();

      v60(v62, v88);
    }
    swift_beginAccess();
    uint64_t v71 = *(void *)(*(void *)(v0 + 280) + 16);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v72 = *(uint64_t (**)(BOOL))(v0 + 8);
    return v72(v71 != 0);
  }
  uint64_t v28 = *(void *)(v0 + 480) + 1;
  *(void *)(v0 + 472) = v24;
  *(void *)(v0 + 480) = v28;
  *(void *)(v0 + 464) = v25;
  v87 = v25;
  v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 416);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
  uint64_t v30 = *(void *)(v0 + 384);
  uint64_t v31 = *(void *)(v0 + 352);
  uint64_t v83 = v24;
  uint64_t v32 = *(void *)(v0 + 336);
  uint64_t v33 = *(void *)(v0 + 304);
  uint64_t v34 = *(void *)(v0 + 288);
  uint64_t v35 = *(void *)(v0 + 296) + *(int *)(v0 + 504);
  sub_1000688E4(*(void *)(v0 + 448) + 40 * v28 + 32, v1);
  uint64_t v36 = v35;
  uint64_t v37 = v0 + 96;
  v29(v30, v36, v31);
  os_log_type_t v38 = (void *)v1;
  v80(v32, v34, v33);
  sub_1000688E4(v1, v0 + 96);
  BOOL v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.info.getter();
  BOOL v41 = os_log_type_enabled(v39, v40);
  uint64_t v42 = *(void *)(v0 + 384);
  uint64_t v43 = *(void *)(v0 + 352);
  uint64_t v44 = *(void *)(v0 + 336);
  uint64_t v45 = *(void *)(v0 + 304);
  if (v41)
  {
    uint64_t v81 = *(void *)(v0 + 352);
    uint64_t v46 = swift_slowAlloc();
    uint64_t v89 = swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 136446466;
    sub_100A7D05C();
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v46 + 4) = sub_100075E68(v47, v48, &v89);
    swift_bridgeObjectRelease();
    v83(v44, v45);
    *(_WORD *)(v46 + 12) = 2082;
    sub_1000688E4(v37, v0 + 16);
    sub_100063814(&qword_1010BDEB0);
    uint64_t v49 = String.init<A>(describing:)();
    *(void *)(v46 + 14) = sub_100075E68(v49, v50, &v89);
    swift_bridgeObjectRelease();
    sub_1000760E4(v37);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Resolving URL=%{public}s with handler=%{public}s", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v51 = v42;
    uint64_t v52 = v81;
  }
  else
  {
    v83(v44, v45);
    sub_1000760E4(v37);

    uint64_t v51 = v42;
    uint64_t v52 = v43;
  }
  v87(v51, v52);
  uint64_t v74 = *(void *)(v0 + 80);
  uint64_t v75 = *(void *)(v0 + 88);
  sub_100068990(v38, v74);
  uint64_t v86 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 + 8) + **(int **)(v75 + 8));
  v76 = (void *)swift_task_alloc();
  *(void *)(v0 + 488) = v76;
  void *v76 = v0;
  v76[1] = sub_100A7C2EC;
  uint64_t v77 = *(void *)(v0 + 288);
  return v86(v77, v74, v75);
}

uint64_t sub_100A7CDA4()
{
  sub_1000760E4(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100A7CE74(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100A7CF08;
  return LaunchURL.Resolver.perform(withURL:)(a1);
}

uint64_t sub_100A7CF08(char a1)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  unint64_t v4 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (v1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = a1 & 1;
  }
  return v4(v5);
}

uint64_t type metadata accessor for LaunchURL.Resolver()
{
  uint64_t result = qword_1010C6108;
  if (!qword_1010C6108) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_100A7D05C()
{
  unint64_t result = qword_1010C0968;
  if (!qword_1010C0968)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C0968);
  }
  return result;
}

unint64_t sub_100A7D0B8()
{
  unint64_t result = qword_1010C60A0;
  if (!qword_1010C60A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C60A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for LaunchURL()
{
  return &type metadata for LaunchURL;
}

ValueMetadata *type metadata accessor for LaunchURL.GenericHandler()
{
  return &type metadata for LaunchURL.GenericHandler;
}

ValueMetadata *type metadata accessor for LaunchURL.ArrayBuilder()
{
  return &type metadata for LaunchURL.ArrayBuilder;
}

uint64_t *initializeBufferWithCopyOfBuffer for LaunchURL.Resolver(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    a1[1] = a2[1];
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for LaunchURL.Resolver(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A7D50C);
}

uint64_t sub_100A7D50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for LaunchURL.Resolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A7D5D0);
}

uint64_t sub_100A7D5D0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100A7D678()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LaunchURL.Resolver.PerformOption(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A7D7E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LaunchURL.Resolver.PerformOption()
{
  return &type metadata for LaunchURL.Resolver.PerformOption;
}

char *LifecyclePatrol.isEnabled.unsafeMutableAddressor()
{
  return &static LifecyclePatrol.isEnabled;
}

uint64_t static LifecyclePatrol.isEnabled.getter()
{
  return static LifecyclePatrol.isEnabled;
}

uint64_t static LifecyclePatrol.isEnabled.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static LifecyclePatrol.isEnabled = a1;
  return result;
}

uint64_t (*static LifecyclePatrol.isEnabled.modify())()
{
  return j__swift_endAccess;
}

uint64_t LifecyclePatrol.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  return v0;
}

uint64_t LifecyclePatrol.init()()
{
  swift_unknownObjectWeakInit();
  return v0;
}

uint64_t LifecyclePatrol.didInit(_:)()
{
  uint64_t v1 = v0;
  uint64_t result = swift_beginAccess();
  if (static LifecyclePatrol.isEnabled == 1)
  {
    sub_10007B23C();
    int v3 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v4 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = v1;
    swift_retain();
    swift_retain();
    OS_dispatch_queue.asyncAfter(_:block:)((uint64_t)sub_100A7DD7C, v5);

    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100A7DA70()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100A7DAA8()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    if (swift_unknownObjectWeakLoadStrong())
    {
      if (qword_1010BC5C0 != -1) {
        swift_once();
      }
      uint64_t v1 = type metadata accessor for Logger();
      sub_100050A90(v1, (uint64_t)qword_1010C6150);
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain_n();
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v2, v3))
      {
        uint64_t v4 = swift_slowAlloc();
        uint64_t v11 = swift_slowAlloc();
        *(_DWORD *)uint64_t v4 = 136446722;
        swift_getObjectType();
        sub_100063814(&qword_1010C6230);
        uint64_t v5 = String.init<A>(describing:)();
        *(void *)(v4 + 4) = sub_100075E68(v5, v6, &v11);
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v4 + 12) = 2082;
        uint64_t v7 = String.init<A>(describing:)();
        *(void *)(v4 + 14) = sub_100075E68(v7, v8, &v11);
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v4 + 22) = 2082;
        uint64_t v9 = String.init<A>(describing:)();
        *(void *)(v4 + 24) = sub_100075E68(v9, v10, &v11);
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v2, v3, "A new instance of %{public}s<%{public}s> while one already exists <%{public}s>", (uint8_t *)v4, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_unknownObjectRelease();
      }
      else
      {

        swift_unknownObjectRelease_n();
        swift_unknownObjectRelease_n();
      }
    }
    swift_unknownObjectWeakAssign();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100A7DD3C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100A7DD7C()
{
  return sub_100A7DAA8();
}

uint64_t LifecyclePatrol.willDeinit(_:)(uint64_t a1)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = swift_unknownObjectRelease();
    if (v3 == a1)
    {
      return swift_unknownObjectWeakAssign();
    }
  }
  return result;
}

uint64_t LifecyclePatrol.deinit()
{
  sub_100046744(v0 + 16);
  return v0;
}

uint64_t LifecyclePatrol.__deallocating_deinit()
{
  sub_100046744(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LifecyclePatrol()
{
  return self;
}

uint64_t sub_100A7DE70()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100014CA4(v0, qword_1010C6150);
  sub_100050A90(v0, (uint64_t)qword_1010C6150);
  return Logger.init(subsystem:category:)();
}

unint64_t sub_100A7DEF4(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100063814(&qword_1010BFAE0);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v34 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 64);
  unint64_t v6 = &v40;
  int64_t v33 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = (uint64_t *)&unk_1010C62F8;
  unint64_t v10 = &qword_1010C5DC0;
  uint64_t v11 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v5)
    {
      uint64_t v35 = (v5 - 1) & v5;
      int64_t v36 = v8;
      unint64_t v19 = __clz(__rbit64(v5)) | (v8 << 6);
    }
    else
    {
      int64_t v20 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_37;
      }
      if (v20 >= v33)
      {
LABEL_33:
        sub_100048F1C();
        return (unint64_t)v2;
      }
      unint64_t v21 = *(void *)(v34 + 8 * v20);
      int64_t v22 = v8 + 1;
      if (!v21)
      {
        int64_t v22 = v8 + 2;
        if (v8 + 2 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v34 + 8 * v22);
        if (!v21)
        {
          int64_t v22 = v8 + 3;
          if (v8 + 3 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = *(void *)(v34 + 8 * v22);
          if (!v21)
          {
            int64_t v22 = v8 + 4;
            if (v8 + 4 >= v33) {
              goto LABEL_33;
            }
            unint64_t v21 = *(void *)(v34 + 8 * v22);
            if (!v21)
            {
              uint64_t v23 = v8 + 5;
              if (v8 + 5 >= v33) {
                goto LABEL_33;
              }
              unint64_t v21 = *(void *)(v34 + 8 * v23);
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_38;
                  }
                  if (v22 >= v33) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = *(void *)(v34 + 8 * v22);
                  ++v23;
                  if (v21) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v22 = v8 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v35 = (v21 - 1) & v21;
      int64_t v36 = v22;
      unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    unint64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    sub_100076134(*(void *)(v1 + 56) + 32 * v19, (uint64_t)v6);
    v39[0] = v26;
    v39[1] = v25;
    sub_100076134((uint64_t)v6, (uint64_t)v38);
    swift_bridgeObjectRetain_n();
    sub_1000637B8((uint64_t)v39, v9);
    sub_100063814(v10);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100048F1C();
      swift_release();
      return 0;
    }
    unint64_t result = sub_100071D70(v26, v25);
    unint64_t v27 = result;
    if (v28)
    {
      BOOL v12 = v11;
      uint64_t v13 = v10;
      uint64_t v14 = v6;
      uint64_t v15 = v1;
      uint64_t v16 = v9;
      uint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v17 = v26;
      v17[1] = v25;
      uint64_t v9 = v16;
      uint64_t v1 = v15;
      unint64_t v6 = v14;
      unint64_t v10 = v13;
      uint64_t v11 = v12;
      uint64_t v18 = v2[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v18 + 8 * v27) = v37;
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v29 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v29 = v26;
    v29[1] = v25;
    *(void *)(v2[7] + 8 * result) = v37;
    uint64_t v30 = v2[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_36;
    }
    v2[2] = v32;
LABEL_8:
    unint64_t v5 = v35;
    int64_t v8 = v36;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_100A7E278@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (*a1)
  {
    *a4 = a1[1];
    return swift_bridgeObjectRetain();
  }
  else if (a2 {
         && (NSString v8 = String._bridgeToObjectiveC()(),
  }
             id v9 = [a2 dictionaryForBagKey:v8],
             v8,
             v9)
         && (uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(),
             v9,
             unint64_t v11 = sub_100047940(v10),
             uint64_t result = swift_bridgeObjectRelease(),
             v11))
  {
    *a4 = v11;
  }
  else
  {
    uint64_t v12 = (*(uint64_t (**)(void))(a3 + 40))();
    uint64_t result = swift_bridgeObjectRelease();
    *a4 = v12;
  }
  return result;
}

uint64_t sub_100A7E370()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v3 = (uint64_t)&v2[4];
  uint64_t v4 = v2 + 11;
  os_unfair_lock_lock(v2 + 11);
  sub_100A7EA10(v3, (uint64_t)v7);
  os_unfair_lock_unlock(v4);
  id v5 = v7[0];
  if (v7[0])
  {
    if ((v8 & 1) == 0) {
      [v7[0] removeObserverWithToken:v7[2]];
    }

    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

void sub_100A7E448(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)a1;
  if (*(void *)a1)
  {
    long long v11 = *(_OWORD *)(a1 + 8);
    if ((*(unsigned char *)(a1 + 24) & 1) == 0)
    {
      *(void *)a2 = v10;
      *(_OWORD *)(a2 + 8) = v11;
      *(unsigned char *)(a2 + 24) = 0;
      swift_bridgeObjectRetain();
      id v12 = v10;
      return;
    }
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v14 = qword_1010BBDD8;
    id v15 = v10;
    uint64_t v27 = v13;
    swift_bridgeObjectRetain();
    if (v14 != -1) {
      swift_once();
    }
    id v16 = (id)static OS_os_log.musicBag;
    Logger.init(_:)();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      id v25 = v15;
      uint64_t v20 = v19;
      uint64_t v21 = swift_slowAlloc();
      uint64_t v26 = v3;
      uint64_t v28 = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v22 = _typeName(_:qualified:)();
      *(void *)(v20 + 4) = sub_100075E68(v22, v23, &v28);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "    %s wasn't configured with an AMSBag update handler prior to deallocation. This may have caused musicTabs updates to be missed after initialization.", (uint8_t *)v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
}

uint64_t sub_100A7E6D0()
{
  sub_100A7E370();

  return swift_deallocClassInstance();
}

id *destroy for MusicTabsDictionaryProvider.Configuration(id *result)
{
  if ((unint64_t)*result >= 0xFFFFFFFF)
  {

    return (id *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for MusicTabsDictionaryProvider.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    id v6 = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for MusicTabsDictionaryProvider.Configuration(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  if (*(void *)a1 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v5 >= 0xFFFFFFFF)
    {
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      uint64_t v8 = *((void *)a2 + 2);
      *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
      *(void *)(a1 + 16) = v8;
      id v9 = v5;
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v10 = *a2;
    *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
    *(_OWORD *)a1 = v10;
    return a1;
  }
  if ((unint64_t)v5 < 0xFFFFFFFF)
  {

    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(void *)a1 = v5;
  id v6 = v5;

  *(void *)(a1 + 8) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)a2 + 2);
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v7;
  return a1;
}

__n128 initializeWithTake for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MusicTabsDictionaryProvider.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {

    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    return a1;
  }
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MusicTabsDictionaryProvider.Configuration(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MusicTabsDictionaryProvider.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t sub_100A7E9EC(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *(void *)__n128 result = v2;
  return result;
}

void sub_100A7EA10(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_100A7EA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v18 = *(void *)(a1 + 16);
    uint64_t v31 = v14;
    uint64_t v32 = v10;
    if (v18)
    {
      swift_bridgeObjectRetain();
      unint64_t v19 = sub_100071D70(a3, a4);
      if (v20)
      {
        sub_100076134(*(void *)(a1 + 56) + 32 * v19, (uint64_t)&aBlock);
      }
      else
      {
        long long aBlock = 0u;
        long long v37 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v37 + 1))
      {
        sub_100063814(&qword_1010C0328);
        uint64_t v21 = swift_dynamicCast();
        if (v21) {
          uint64_t v22 = v35;
        }
        else {
          uint64_t v22 = 0;
        }
        goto LABEL_12;
      }
    }
    else
    {
      long long aBlock = 0u;
      long long v37 = 0u;
    }
    uint64_t v21 = sub_1000637B8((uint64_t)&aBlock, (uint64_t *)&unk_1010C0270);
    uint64_t v22 = 0;
LABEL_12:
    __chkstk_darwin(v21);
    *(&v30 - 2) = v22;
    uint64_t v24 = (uint64_t)&v23[4];
    id v25 = v23 + 11;
    os_unfair_lock_lock(v23 + 11);
    sub_100A7F3EC(v24, (char *)&aBlock);
    os_unfair_lock_unlock(v25);
    if (aBlock == 1)
    {
      sub_10007B23C();
      uint64_t v26 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v27 = (void *)swift_allocObject();
      uint64_t v28 = v34;
      v27[2] = v33;
      v27[3] = v28;
      v27[4] = v22;
      os_log_type_t v38 = sub_100A7F448;
      BOOL v39 = v27;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v37 = sub_100020238;
      *((void *)&v37 + 1) = &unk_101002F80;
      uint64_t v29 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      static DispatchQoS.unspecified.getter();
      *(void *)&long long aBlock = &_swiftEmptyArrayStorage;
      sub_10001D13C();
      sub_100063814(&qword_1010BFF48);
      sub_10007B0E8();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v29);
      swift_release();

      (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v9);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v16, v13);
    }
    else
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100A7EE20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v41 = v7;
    uint64_t v42 = v3;
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    char v17 = *(unsigned char *)(a1 + 24) & 1;
    uint64_t v46 = a2;
    uint64_t v47 = v15;
    char v48 = v17;
    id v45 = v14;
    *(void *)(a1 + 8) = a2;
    *(unsigned char *)(a1 + 24) = v17;
    uint64_t v18 = qword_1010BBDD8;
    swift_bridgeObjectRetain_n();
    id v19 = v14;
    if (v18 != -1) {
      swift_once();
    }
    id v20 = (id)static OS_os_log.musicBag;
    Logger.init(_:)();
    swift_bridgeObjectRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v40 = a3;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      if (v16)
      {
        uint64_t v24 = v42;
        uint64_t v25 = sub_100075970(v16);
        uint64_t v42 = v24;
      }
      else
      {
        uint64_t v25 = 0;
      }
      uint64_t v44 = v25;
      sub_100063814(&qword_1010C6308);
      uint64_t v32 = String.init<A>(describing:)();
      *(void *)(v23 + 4) = sub_100075E68(v32, v33, &v49);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      swift_beginAccess();
      if (v46)
      {
        uint64_t v34 = swift_bridgeObjectRetain();
        uint64_t v35 = v42;
        uint64_t v36 = sub_100075970(v34);
        uint64_t v42 = v35;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t v43 = v36;
      uint64_t v37 = String.init<A>(describing:)();
      *(void *)(v23 + 14) = sub_100075E68(v37, v38, &v49);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "    AMSBag provided updated musicTabs dictionary.\n    Previous: %s\n    Updated: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v41);
      uint64_t result = swift_bridgeObjectRelease();
      a3 = v40;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v41);

      uint64_t result = swift_bridgeObjectRelease();
    }
    char v31 = 1;
  }
  else
  {
    if (qword_1010BBDD8 != -1) {
      swift_once();
    }
    id v26 = (id)static OS_os_log.musicBag;
    Logger.init(_:)();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      id v45 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      *(void *)(v29 + 4) = sub_100075E68(0xD000000000000047, 0x8000000100DD1DD0, (uint64_t *)&v45);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unexpected update handler call in %s with .userDefaults configuration. This is likely programmer error.", (uint8_t *)v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    char v31 = 0;
  }
  *a3 = v31;
  return result;
}

uint64_t sub_100A7F2D8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100A7F35C()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100A7F394()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100A7F3DC(uint64_t a1)
{
  return sub_100A7EA2C(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100A7F3EC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_100A7EE20(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100A7F408()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100A7F448()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t destroy for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(id *a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v7;
  return a1;
}

uint64_t assignWithTake for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration()
{
  return &type metadata for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration;
}

ValueMetadata *type metadata accessor for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration.State()
{
  return &type metadata for MusicTabsDictionaryProvider.Configuration.AMSBagConfiguration.State;
}

unint64_t PlayActivityFeatureIdentifier.id.getter(char a1)
{
  unint64_t result = 0x65645F6D75626C61;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x736D75626C61;
      break;
    case 2:
      unint64_t result = 0x5F7972617262696CLL;
      break;
    case 3:
      unint64_t result = 0x74616C69706D6F63;
      break;
    case 4:
      unint64_t result = 0x7265736F706D6F63;
      break;
    case 5:
      unint64_t result = 0x7365726E6567;
      break;
    case 6:
      unint64_t result = 0x726F665F6564616DLL;
      break;
    case 7:
      unint64_t result = 0x736569766F6DLL;
      break;
    case 8:
      unint64_t result = 0x69765F636973756DLL;
      break;
    case 9:
      unint64_t result = 0x7473696C79616C70;
      break;
    case 10:
    case 11:
      unint64_t result = 0x7473696C79616C70;
      break;
    case 12:
      unint64_t result = 0x796C746E65636572;
      break;
    case 13:
      unint64_t result = 0xD000000000000013;
      break;
    case 14:
      unint64_t result = 0x73676E6F73;
      break;
    case 15:
      unint64_t result = 0x73776F6873;
      break;
    case 16:
      unint64_t result = 0x7365646F73697065;
      break;
    case 17:
      unint64_t result = 0x79616C705F776F6ELL;
      break;
    case 18:
      unint64_t result = 0x616C705F696E696DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100A7F934(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = PlayActivityFeatureIdentifier.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == PlayActivityFeatureIdentifier.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100A7F9C0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  PlayActivityFeatureIdentifier.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100A7FA24()
{
  PlayActivityFeatureIdentifier.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100A7FA78()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  PlayActivityFeatureIdentifier.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100A7FAD8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _s9MusicCore29PlayActivityFeatureIdentifierO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

unint64_t sub_100A7FB08@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = PlayActivityFeatureIdentifier.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100A7FB34@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = PlayActivityFeatureIdentifier.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t _s9MusicCore29PlayActivityFeatureIdentifierO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x13) {
    return 19;
  }
  else {
    return v0;
  }
}

unint64_t sub_100A7FBB8()
{
  unint64_t result = qword_1010C6318;
  if (!qword_1010C6318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C6318);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PlayActivityFeatureIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PlayActivityFeatureIdentifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *unint64_t result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A7FD68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 18;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayActivityFeatureIdentifier()
{
  return &type metadata for PlayActivityFeatureIdentifier;
}

uint64_t QRCode.init(data:errorCorrectionLevel:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_100A8072C(a1, a2, a3, v6);
  return sub_100A80EAC((uint64_t)v6, a4);
}

void sub_100A7FDDC()
{
  qword_1010C6320 = Int.seconds.getter(10);
}

uint64_t QRCode.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_10007AA40(v1, *(void *)(v0 + 16));
  return v1;
}

id QRCode.image.getter()
{
  return *(id *)(v0 + 24);
}

void sub_100A7FE3C(void *a1, void *a2, CGImage *a3, uint64_t a4, CGContext *a5, double a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, double a11)
{
  [a1 beginPage];
  id v64 = a1;
  uint64_t v18 = (CGContext *)[a1 CGContext];
  if (qword_1010BC5C8 != -1) {
    goto LABEL_66;
  }
  while (1)
  {
    CGContextSetLineWidth(v18, *(CGFloat *)&qword_1010C6320);

    id v19 = self;
    id v20 = [v19 whiteColor];
    [v20 setStroke];

    id v21 = [v19 whiteColor];
    [v21 setFill];

    double v22 = *(double *)&qword_1010C6320;
    double v23 = *(double *)&qword_1010C6320 * a6;
    v68.origin.x = a7;
    v68.origin.y = a8;
    v68.size.width = a9;
    v68.size.height = a10;
    double v24 = CGRectGetWidth(v68) - v23;
    v69.origin.x = a7;
    v69.origin.y = a8;
    v69.size.width = a9;
    v69.size.height = a10;
    double Height = CGRectGetHeight(v69);
    id v26 = self;
    a8 = 0.5;
    v70.origin.x = 0.0;
    v70.origin.y = 0.0;
    v70.size.width = v22 * a6;
    v70.size.height = v22 * a6;
    CGRect v71 = CGRectInset(v70, v22 * 0.5, v22 * 0.5);
    id v27 = [v26 _bezierPathWithPillRect:v71.origin.x, v71.origin.y, v71.size.width, v71.size.height, 10.0];
    if (v27)
    {
      os_log_type_t v28 = v27;
      [v27 setLineWidth:v22];
      [v28 stroke];
      double v29 = v22 * a11;
      v72.origin.x = 0.0;
      v72.origin.y = 0.0;
      v72.size.width = v23;
      v72.size.height = v23;
      a7 = v29 * 0.5;
      a9 = CGRectGetMidX(v72) - v29 * 0.5;
      v73.origin.x = 0.0;
      v73.origin.y = 0.0;
      v73.size.width = v23;
      v73.size.height = v23;
      id v30 = [v26 _bezierPathWithPillRect:a9 cornerRadius:CGRectGetMidY(v73) - v29 * 0.5, v29, v29, 2.0];
      [v30 fill];
    }
    double v31 = Height - v23;
    double v32 = *(double *)&qword_1010C6320;
    v74.origin.y = 0.0;
    v74.origin.x = v24;
    v74.size.width = v23;
    v74.size.height = v23;
    CGRect v75 = CGRectInset(v74, *(double *)&qword_1010C6320 * 0.5, *(double *)&qword_1010C6320 * 0.5);
    id v33 = [v26 _bezierPathWithPillRect:v75.origin.x, v75.origin.y, v75.size.width, v75.size.height, 10.0];
    if (v33)
    {
      uint64_t v34 = v33;
      [v33 setLineWidth:v32];
      [v34 stroke];
      double v35 = v32 * a11;
      v76.origin.y = 0.0;
      v76.origin.x = v24;
      v76.size.width = v23;
      v76.size.height = v23;
      a8 = v35 * 0.5;
      a9 = CGRectGetMidX(v76) - v35 * 0.5;
      v77.origin.y = 0.0;
      v77.origin.x = v24;
      v77.size.width = v23;
      v77.size.height = v23;
      id v36 = [v26 _bezierPathWithPillRect:a9 cornerRadius:CGRectGetMidY(v77) - v35 * 0.5, v35, v35, 2.0];
      [v36 fill];
    }
    double v37 = *(double *)&qword_1010C6320;
    v78.origin.x = 0.0;
    v78.origin.y = v31;
    v78.size.width = v23;
    v78.size.height = v23;
    CGRect v79 = CGRectInset(v78, *(double *)&qword_1010C6320 * 0.5, *(double *)&qword_1010C6320 * 0.5);
    id v38 = [v26 _bezierPathWithPillRect:v79.origin.x, v79.origin.y, v79.size.width, v79.size.height, 10.0];
    if (v38)
    {
      uint64_t v39 = v38;
      [v38 setLineWidth:v37];
      [v39 stroke];
      double v40 = v37 * a11;
      v80.origin.x = 0.0;
      v80.origin.y = v31;
      v80.size.width = v23;
      v80.size.height = v23;
      a9 = v40 * 0.5;
      CGFloat v41 = CGRectGetMidX(v80) - v40 * 0.5;
      v81.origin.x = 0.0;
      v81.origin.y = v31;
      v81.size.width = v23;
      v81.size.height = v23;
      id v42 = [v26 _bezierPathWithPillRect:v41 cornerRadius:CGRectGetMidY(v81) - v40 * 0.5, v40, v40, 2.0];
      [v42 fill];
    }
    [a2 extent];
    double v43 = CGRectGetHeight(v82);
    if ((~*(void *)&v43 & 0x7FF0000000000000) == 0) {
      break;
    }
    if (v43 <= -9.22337204e18) {
      goto LABEL_68;
    }
    if (v43 >= 9.22337204e18) {
      goto LABEL_69;
    }
    uint64_t v44 = (uint64_t)v43;
    if ((uint64_t)v43 < 1) {
      goto LABEL_70;
    }
    uint64_t v18 = a5;
    if ((uint64_t)v43 == 1) {
      return;
    }
    uint64_t v45 = (uint64_t)a6;
    uint64_t v46 = 1;
    a10 = -1.0;
    *(void *)&a11 = (uint64_t)v43;
    while (1)
    {
      if (v46 == v44) {
        goto LABEL_61;
      }
      [a2 extent];
      double Width = CGRectGetWidth(v83);
      if ((~*(void *)&Width & 0x7FF0000000000000) == 0) {
        break;
      }
      if (Width <= -9.22337204e18) {
        goto LABEL_63;
      }
      if (Width >= 9.22337204e18) {
        goto LABEL_64;
      }
      uint64_t v48 = (uint64_t)Width;
      if ((uint64_t)Width < 1) {
        goto LABEL_65;
      }
      if ((uint64_t)Width != 1)
      {
        a9 = (double)(v46 - 1);
        for (uint64_t i = 1; v48 != i; ++i)
        {
          int64_t BytesPerRow = CGImageGetBytesPerRow(a3);
          int64_t v55 = BytesPerRow * v46;
          if ((unsigned __int128)(BytesPerRow * (__int128)v46) >> 64 != (BytesPerRow * v46) >> 63)
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
            goto LABEL_62;
          }
          uint64_t v56 = i * a4;
          if ((unsigned __int128)(i * (__int128)a4) >> 64 != (i * a4) >> 63) {
            goto LABEL_48;
          }
          BOOL v57 = __OFADD__(v55, v56);
          int64_t v58 = v55 + v56;
          if (v57) {
            goto LABEL_49;
          }
          if (!*((unsigned char *)v18 + v58))
          {
            if ((*(void *)&a6 & 0x7FF0000000000000) == 0x7FF0000000000000) {
              goto LABEL_50;
            }
            if (a6 <= -9.22337204e18) {
              goto LABEL_51;
            }
            if (a6 >= 9.22337204e18) {
              goto LABEL_52;
            }
            [a2 extent];
            double v59 = CGRectGetWidth(v85);
            if ((~*(void *)&v59 & 0x7FF0000000000000) == 0) {
              goto LABEL_53;
            }
            if (v59 <= -9.22337204e18) {
              goto LABEL_54;
            }
            if (v59 >= 9.22337204e18) {
              goto LABEL_55;
            }
            uint64_t v60 = (uint64_t)v59;
            if (v46 <= v45)
            {
              if (i <= v45) {
                continue;
              }
              BOOL v57 = __OFSUB__(v60, v45);
              uint64_t v61 = v60 - v45;
              if (v57) {
                goto LABEL_59;
              }
              if (__OFSUB__(v61, 1)) {
                goto LABEL_60;
              }
              if (i >= v61 - 1) {
                continue;
              }
            }
            else
            {
              BOOL v57 = __OFSUB__(v60, v45);
              uint64_t v61 = v60 - v45;
              if (v57) {
                goto LABEL_56;
              }
            }
            BOOL v57 = __OFSUB__(v61, 1);
            uint64_t v62 = v61 - 1;
            if (v57) {
              goto LABEL_57;
            }
            if (v46 < v62 || i > v45)
            {
              if (__OFSUB__(i, 1)) {
                goto LABEL_58;
              }
              CGFloat v50 = *(double *)&qword_1010C6320 * (double)(i - 1);
              CGFloat v51 = *(double *)&qword_1010C6320 * a9;
              CGFloat v52 = *(double *)&qword_1010C6320 + -1.0;
              uint64_t v53 = (CGContext *)[v64 CGContext];
              v84.origin.x = v50;
              v84.origin.y = v51;
              v84.size.width = v52;
              v84.size.height = v52;
              CGContextFillEllipseInRect(v53, v84);

              uint64_t v18 = a5;
            }
          }
        }
      }
      ++v46;
      uint64_t v44 = *(void *)&a11;
      if (v46 == *(void *)&a11) {
        return;
      }
    }
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    swift_once();
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
}

uint64_t QRCode.with(errorCorrectionLevel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *(void *)(v2 + 8);
  unint64_t v5 = *(void *)(v2 + 16);
  sub_10007AA40(v6, v5);
  sub_100A8072C(v6, v5, a1, v8);
  return sub_100A80EAC((uint64_t)v8, a2);
}

double QRCode.dotAdjustedWidth(with:scale:)()
{
  double v1 = (double)*v0;
  UIRoundToScale();
  return v2 * v1;
}

CGMutablePathRef QRCode.dotAlignedPath(with:in:imageBounds:)(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  v18.origin.x = a6;
  v18.origin.y = a7;
  v18.size.width = a8;
  v18.size.height = a9;
  CGRectGetWidth(v18);
  v19.origin.x = a2;
  v19.origin.y = a3;
  v19.size.width = a4;
  v19.size.height = a5;
  CGRectGetMinX(v19);
  v20.origin.x = a2;
  v20.origin.y = a3;
  v20.size.width = a4;
  v20.size.height = a5;
  CGRectGetMinY(v20);
  swift_bridgeObjectRetain();
  CGMutablePathRef result = CGPathCreateMutable();
  if (*(void *)(a1 + 16))
  {
    CGMutablePathRef v15 = result;
    sub_10088155C(0, 1);
    CGMutablePathRef.move(to:transform:)();
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16)
    {
      uint64_t v17 = a1 + 40;
      do
      {
        CGMutablePathRef.addLine(to:transform:)();
        v17 += 16;
        --v16;
      }
      while (v16);
    }
    swift_bridgeObjectRelease();
    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100A8072C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v8 = self;
  sub_10007AA40(a1, a2);
  id v9 = [v8 QRCodeGenerator];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v11 = String._bridgeToObjectiveC()();
  [v9 setValue:isa forKey:v11];

  id v12 = v9;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v14 = String._bridgeToObjectiveC()();
  [v12 setValue:v13 forKey:v14];

  id v15 = [v12 outputImage];
  if (!v15)
  {
    sub_10007A5C4(a1, a2);
LABEL_19:

    CFDataRef v21 = 0;
    goto LABEL_20;
  }
  uint64_t v16 = v15;
  id v17 = [objc_allocWithZone((Class)CIContext) init];
  [v16 extent];
  CGRect v18 = [v17 createCGImage:v16];

  if (!v18)
  {
    sub_10007A5C4(a1, a2);

    goto LABEL_19;
  }
  CGRect v19 = CGImageGetDataProvider(v18);
  CGRect v20 = v19;
  if (!v19)
  {
    sub_10007A5C4(a1, a2);

    CFDataRef v21 = 0;
    goto LABEL_20;
  }
  CFDataRef v21 = CGDataProviderCopyData(v19);

  if (!v21)
  {
    sub_10007A5C4(a1, a2);

    goto LABEL_20;
  }
  CFDataRef v56 = v21;
  BytePtr = CFDataGetBytePtr(v21);
  if (BytePtr)
  {
    double v23 = BytePtr;
    uint64_t v55 = a3;
    uint64_t v24 = (uint64_t)CGImageGetBitsPerPixel(v18) / 8;
    double v25 = Int.seconds.getter(7);
    double v26 = Int.seconds.getter(3);
    [v16 extent];
    double v27 = CGRectGetWidth(v59) + -2.0;
    if (qword_1010BC5C8 != -1) {
      swift_once();
    }
    double v28 = *(double *)&qword_1010C6320;
    double v29 = v27 * *(double *)&qword_1010C6320;
    [v16 extent];
    double v30 = v28 * (CGRectGetHeight(v60) + -2.0);
    id v57 = [objc_allocWithZone((Class)UIGraphicsPDFRenderer) initWithBounds:0.0, 0.0, v29, v30];
    uint64_t v31 = swift_allocObject();
    *(double *)(v31 + 16) = v25;
    *(void *)(v31 + 24) = 0;
    *(void *)(v31 + 32) = 0;
    *(double *)(v31 + 40) = v29;
    *(double *)(v31 + 48) = v30;
    *(double *)(v31 + 56) = v26;
    *(void *)(v31 + 64) = v16;
    *(void *)(v31 + 72) = v18;
    *(void *)(v31 + 80) = v24;
    *(void *)(v31 + 88) = v23;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = sub_100A810C8;
    *(void *)(v32 + 24) = v31;
    aBlock[4] = sub_10001A2C4;
    aBlock[5] = v32;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001A278;
    aBlock[3] = &unk_101003228;
    id v33 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v53 = v18;
    id v54 = v16;
    swift_release();
    id v34 = [v57 PDFDataWithActions:v33];
    _Block_release(v33);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v37;

    CFDataRef v39 = Data._bridgeToObjectiveC()().super.isa;
    double v40 = CGDataProviderCreateWithCFData(v39);

    uint64_t v41 = v55;
    if (v40)
    {
      id v42 = CGPDFDocumentCreateWithProvider(v40);
      if (v42)
      {
        double v43 = v42;
        CGFloat v52 = CGPDFDocumentGetPage(v42, 1uLL);
        if (v52)
        {
          unint64_t v51 = v38;
          id v44 = [self _imageWithCGPDFPage:v52];
          if (v44)
          {
            uint64_t v45 = (uint64_t)v44;
            id v50 = v44;
            [v54 extent];
            double Width = CGRectGetWidth(v61);

            sub_10007A5C4(v36, v51);
            double v47 = Width + -2.0;
            if ((~COERCE__INT64(Width + -2.0) & 0x7FF0000000000000) != 0)
            {
              if (v47 > -9.22337204e18)
              {
                if (v47 < 9.22337204e18)
                {
                  uint64_t v48 = (uint64_t)v47;
                  sub_10007AA40(a1, a2);
                  id v49 = v50;
                  sub_10007A5C4(a1, a2);

                  sub_10007A5C4(a1, a2);
                  swift_release();

LABEL_21:
                  *a4 = v48;
                  a4[1] = a1;
                  a4[2] = a2;
                  a4[3] = v45;
                  a4[4] = v41;
                  return;
                }
                goto LABEL_32;
              }
LABEL_31:
              __break(1u);
LABEL_32:
              __break(1u);
              goto LABEL_33;
            }
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }
          sub_10007A5C4(a1, a2);

          sub_10007A5C4(v36, v38);
        }
        else
        {
          sub_10007A5C4(a1, a2);

          sub_10007A5C4(v36, v38);
        }
      }
      else
      {
        sub_10007A5C4(a1, a2);

        sub_10007A5C4(v36, v38);
      }
    }
    else
    {
      sub_10007A5C4(a1, a2);

      sub_10007A5C4(v36, v38);
    }

    CFDataRef v21 = (const __CFData *)sub_100A810C8;
LABEL_20:
    sub_10007A5C4(a1, a2);
    sub_10006ADFC((uint64_t)v21);
    uint64_t v48 = 0;
    a1 = 0;
    a2 = 0;
    uint64_t v45 = 0;
    uint64_t v41 = 0;
    goto LABEL_21;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_100A80EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010C4D88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void destroy for QRCode(void *a1)
{
  sub_10007A5C4(a1[1], a1[2]);
  double v2 = (void *)a1[3];
}

void *initializeWithCopy for QRCode(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  unint64_t v5 = a2[2];
  sub_10007AA40(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  uint64_t v6 = (void *)a2[3];
  uint64_t v7 = a2[4];
  a1[3] = v6;
  a1[4] = v7;
  id v8 = v6;
  return a1;
}

void *assignWithCopy for QRCode(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  sub_10007AA40(v4, v5);
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_10007A5C4(v6, v7);
  id v8 = (void *)a2[3];
  id v9 = (void *)a1[3];
  a1[3] = v8;
  id v10 = v8;

  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for QRCode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  sub_10007A5C4(v5, v6);
  unint64_t v7 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for QRCode()
{
  return &type metadata for QRCode;
}

uint64_t sub_100A81088()
{
  return swift_deallocObject();
}

void sub_100A810C8(void *a1)
{
  sub_100A7FE3C(a1, *(void **)(v1 + 64), *(CGImage **)(v1 + 72), *(void *)(v1 + 80), *(CGContext **)(v1 + 88), *(double *)(v1 + 16), *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48), *(double *)(v1 + 56));
}

uint64_t sub_100A810E0()
{
  return swift_deallocObject();
}

uint64_t OSSignposter.sharePlay.unsafeMutableAddressor()
{
  return sub_100046A18(&qword_1010BC5D8, (uint64_t)static OSSignposter.sharePlay);
}

uint64_t *OS_os_log.sharePlay.unsafeMutableAddressor()
{
  if (qword_1010BC5E0 != -1) {
    swift_once();
  }
  return &static OS_os_log.sharePlay;
}

uint64_t static OSSignposter.music(_:)()
{
  swift_bridgeObjectRetain();

  return OSSignposter.init(subsystem:category:)();
}

uint64_t static OSSignposter.music(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  __chkstk_darwin(v2 - 8);
  id v3 = a1;
  Logger.init(_:)();
  return OSSignposter.init(logger:)();
}

uint64_t static OSSignposter.launch.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100A81388(&qword_1010BC5D0, (uint64_t)static OSSignposter.launch, a1);
}

uint64_t sub_100A8127C()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for OSSignposter();
  sub_100014CA4(v1, static OSSignposter.sharePlay);
  sub_100050A90(v1, (uint64_t)static OSSignposter.sharePlay);
  if (qword_1010BC5E0 != -1) {
    swift_once();
  }
  id v2 = (id)static OS_os_log.sharePlay;
  Logger.init(_:)();
  return OSSignposter.init(logger:)();
}

uint64_t static OSSignposter.sharePlay.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100A81388(&qword_1010BC5D8, (uint64_t)static OSSignposter.sharePlay, a1);
}

uint64_t sub_100A81388@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for OSSignposter();
  uint64_t v6 = sub_100050A90(v5, a2);
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_100A81420()
{
  sub_100009FB4();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.sharePlay = result;
  return result;
}

id static OS_os_log.sharePlay.getter()
{
  if (qword_1010BC5E0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static OS_os_log.sharePlay;

  return v0;
}

uint64_t sub_100A814E4()
{
  sub_100A8612C(v0, (uint64_t)v7);
  if (v8 == 1)
  {
    uint64_t v1 = *(void **)&v7[0];
    switch(MPModelObject.mediaKitPlayableKind.getter())
    {
      case 1u:

        uint64_t v2 = 0x6F736970652D7674;
        break;
      case 2u:

        uint64_t v2 = 0x73776F68732D7674;
        break;
      case 3u:
      case 4u:
        uint64_t v2 = 0x646564616F6C7075;

        break;
      case 5u:

        uint64_t v2 = 0x736E6F6974617473;
        break;
      case 6u:

        uint64_t v2 = 0x69762D636973756DLL;
        break;
      case 7u:

        uint64_t v2 = 0x6F6D2D636973756DLL;
        break;
      case 8u:

        uint64_t v2 = 0x7473696C79616C70;
        break;
      case 9u:

        uint64_t v2 = 0x736D75626C61;
        break;
      case 0xAu:

        uint64_t v2 = 0x3F74616877;
        break;
      default:

        uint64_t v2 = 0x73676E6F73;
        break;
    }
  }
  else
  {
    sub_100068978(v7, (uint64_t)v5);
    uint64_t v3 = v6;
    sub_100068990(v5, v6);
    uint64_t v2 = sub_100A81724(v3);
    sub_1000760E4((uint64_t)v5);
  }
  return v2;
}

uint64_t sub_100A81724(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Playlist.Entry();
  uint64_t v104 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v105 = (char *)&v97 - v8;
  uint64_t v110 = type metadata accessor for Track();
  uint64_t v107 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  v106 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v108 = (char *)&v97 - v11;
  uint64_t v114 = type metadata accessor for GenericMusicItem();
  uint64_t v109 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  v113 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v112 = (char *)&v97 - v14;
  uint64_t v117 = type metadata accessor for UploadedVideo();
  uint64_t v111 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  v116 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for UploadedAudio();
  uint64_t v115 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  v119 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for TVShow();
  uint64_t v118 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  v122 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for TVEpisode();
  uint64_t v121 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  v125 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for Station();
  uint64_t v124 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  v128 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for Song();
  uint64_t v127 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  v131 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = type metadata accessor for Playlist();
  uint64_t v130 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  v134 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for MusicVideo();
  uint64_t v133 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  v137 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for MusicMovie();
  uint64_t v136 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  v140 = (char *)&v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = type metadata accessor for Album();
  uint64_t v139 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  double v25 = (char *)&v97 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = *(void *)(a1 - 8);
  __chkstk_darwin(v26);
  v102 = (char *)&v97 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  double v30 = (char *)&v97 - v29;
  __chkstk_darwin(v31);
  id v33 = (char *)&v97 - v32;
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v97 - v35;
  if (qword_1010BC5E8 != -1) {
    swift_once();
  }
  v103 = v6;
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v38 = sub_100050A90(v37, (uint64_t)static Logger.capabilityUpsell);
  CFDataRef v39 = *(void (**)(char *, uint64_t, uint64_t))(v144 + 16);
  uint64_t v143 = v2;
  v39(v36, v2, a1);
  uint64_t v101 = v38;
  double v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.debug.getter();
  BOOL v42 = os_log_type_enabled(v40, v41);
  v99 = v33;
  if (v42)
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v98 = v4;
    uint64_t v44 = a1;
    uint64_t v45 = v43;
    uint64_t v46 = swift_slowAlloc();
    v100 = v30;
    uint64_t v145 = v46;
    *(_DWORD *)uint64_t v45 = 136315138;
    v39(v33, (uint64_t)v36, v44);
    uint64_t v47 = String.init<A>(describing:)();
    *(void *)(v45 + 4) = sub_100075E68(v47, v48, &v145);
    swift_bridgeObjectRelease();
    id v49 = *(void (**)(char *, uint64_t))(v144 + 8);
    v49(v36, v44);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "MusicItem - mediaKind =%s", (uint8_t *)v45, 0xCu);
    swift_arrayDestroy();
    double v30 = v100;
    swift_slowDealloc();
    a1 = v44;
    uint64_t v4 = v98;
    swift_slowDealloc();
  }
  else
  {
    id v49 = *(void (**)(char *, uint64_t))(v144 + 8);
    v49(v36, a1);
  }

  uint64_t v50 = v143;
  v39(v30, v143, a1);
  uint64_t v51 = v142;
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v139 + 8))(v25, v51);
    uint64_t v52 = 0x736D75626C61;
    goto LABEL_46;
  }
  id v54 = v140;
  uint64_t v53 = v141;
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v136 + 8))(v54, v53);
    uint64_t v52 = 0x6F6D2D636973756DLL;
    goto LABEL_46;
  }
  CFDataRef v56 = v137;
  uint64_t v55 = v138;
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v56, v55);
    uint64_t v52 = 0x69762D636973756DLL;
    goto LABEL_46;
  }
  int64_t v58 = v134;
  uint64_t v57 = v135;
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v130 + 8))(v58, v57);
    uint64_t v52 = 0x7473696C79616C70;
    goto LABEL_46;
  }
  CGRect v60 = v131;
  uint64_t v59 = v132;
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v60, v59);
    uint64_t v52 = 0x73676E6F73;
    goto LABEL_46;
  }
  CGRect v61 = v128;
  uint64_t v62 = v129;
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v124 + 8))(v61, v62);
    uint64_t v52 = 0x736E6F6974617473;
    goto LABEL_46;
  }
  uint64_t v63 = v125;
  uint64_t v64 = v126;
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v121 + 8))(v63, v64);
    uint64_t v52 = 0x6F736970652D7674;
    goto LABEL_46;
  }
  uint64_t v65 = v122;
  uint64_t v66 = v123;
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v118 + 8))(v65, v66);
    uint64_t v52 = 0x73776F68732D7674;
    goto LABEL_46;
  }
  unint64_t v67 = v119;
  uint64_t v68 = v120;
  if (swift_dynamicCast())
  {
    uint64_t v52 = 0x646564616F6C7075;
    (*(void (**)(char *, uint64_t))(v115 + 8))(v67, v68);
    goto LABEL_46;
  }
  CGRect v69 = v116;
  uint64_t v70 = v117;
  if (swift_dynamicCast())
  {
    uint64_t v52 = 0x646564616F6C7075;
    (*(void (**)(char *, uint64_t))(v111 + 8))(v69, v70);
    goto LABEL_46;
  }
  CGRect v71 = v112;
  uint64_t v72 = v114;
  if (!swift_dynamicCast())
  {
    CGRect v77 = v108;
    uint64_t v78 = v110;
    if (swift_dynamicCast())
    {
      CGRect v79 = v77;
      uint64_t v80 = v107;
      CGRect v81 = v106;
      (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v106, v79, v78);
      Track.musicItem.getter((uint64_t)&v145);
      uint64_t v82 = v146;
      if (v146)
      {
        uint64_t v83 = v147;
        sub_100068990(&v145, v146);
        uint64_t v52 = sub_100A81724(v82, v83);
        (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v78);
LABEL_35:
        sub_1000760E4((uint64_t)&v145);
        goto LABEL_46;
      }
      (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v78);
    }
    else
    {
      CGRect v84 = v105;
      if (!swift_dynamicCast())
      {
        uint64_t v89 = v102;
        v39(v102, v50, a1);
        uint64_t v90 = Logger.logObject.getter();
        os_log_type_t v91 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v90, v91))
        {
          uint64_t v92 = swift_slowAlloc();
          uint64_t v93 = swift_slowAlloc();
          v100 = v30;
          uint64_t v145 = v93;
          *(_DWORD *)uint64_t v92 = 136315138;
          v39(v99, (uint64_t)v89, a1);
          uint64_t v94 = String.init<A>(describing:)();
          *(void *)(v92 + 4) = sub_100075E68(v94, v95, &v145);
          swift_bridgeObjectRelease();
          v49(v89, a1);
          _os_log_impl((void *)&_mh_execute_header, v90, v91, "Unsupported MusicItem kind=%s", (uint8_t *)v92, 0xCu);
          swift_arrayDestroy();
          double v30 = v100;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          v49(v89, a1);
        }

        goto LABEL_45;
      }
      uint64_t v85 = v104;
      uint64_t v86 = v103;
      (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v103, v84, v4);
      sub_100A83D68((uint64_t)&v145);
      uint64_t v87 = v146;
      if (v146)
      {
        uint64_t v88 = v147;
        sub_100068990(&v145, v146);
        uint64_t v52 = sub_100A81724(v87, v88);
        (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v4);
        goto LABEL_35;
      }
      (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v4);
    }
    sub_1000637B8((uint64_t)&v145, &qword_1010C2AB0);
LABEL_45:
    uint64_t v52 = 0;
    goto LABEL_46;
  }
  CGRect v73 = v71;
  uint64_t v74 = v109;
  (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v113, v73, v72);
  sub_100A84388((uint64_t)&v145);
  uint64_t v75 = v146;
  if (v146)
  {
    uint64_t v76 = v147;
    sub_100068990(&v145, v146);
    uint64_t v52 = sub_100A81724(v75, v76);
    sub_1000760E4((uint64_t)&v145);
  }
  else
  {
    sub_1000637B8((uint64_t)&v145, &qword_1010C2AB0);
    uint64_t v52 = 0;
  }
  (*(void (**)(char *, uint64_t))(v74 + 8))(v113, v72);
LABEL_46:
  v49(v30, a1);
  return v52;
}

uint64_t sub_100A82920(uint64_t a1)
{
  uint64_t v122 = type metadata accessor for Playlist.Entry();
  uint64_t v118 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  uint64_t v117 = (char *)&v113 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v119 = (char *)&v113 - v4;
  uint64_t v126 = type metadata accessor for Track();
  uint64_t v121 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v120 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v123 = (char *)&v113 - v7;
  uint64_t v130 = type metadata accessor for GenericMusicItem();
  uint64_t v125 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v124 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v129 = (char *)&v113 - v10;
  uint64_t v134 = type metadata accessor for UploadedVideo();
  uint64_t v128 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v127 = (char *)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v133 = (char *)&v113 - v13;
  uint64_t v138 = type metadata accessor for UploadedAudio();
  uint64_t v132 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  v131 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v137 = (char *)&v113 - v16;
  uint64_t v142 = type metadata accessor for TVShow();
  uint64_t v136 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v135 = (char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v141 = (char *)&v113 - v19;
  uint64_t v146 = type metadata accessor for TVEpisode();
  uint64_t v140 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v139 = (char *)&v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v145 = (char *)&v113 - v22;
  uint64_t v150 = type metadata accessor for Station();
  uint64_t v144 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v143 = (char *)&v113 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v149 = (char *)&v113 - v25;
  uint64_t v154 = type metadata accessor for Song();
  uint64_t v148 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v147 = (char *)&v113 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v153 = (char *)&v113 - v28;
  uint64_t v158 = type metadata accessor for Playlist();
  uint64_t v152 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  v151 = (char *)&v113 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v157 = (char *)&v113 - v31;
  uint64_t v160 = type metadata accessor for MusicVideo();
  uint64_t v156 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  v155 = (char *)&v113 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v113 - v34;
  uint64_t v36 = type metadata accessor for MusicMovie();
  uint64_t v159 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v113 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  os_log_type_t v41 = (char *)&v113 - v40;
  uint64_t v42 = type metadata accessor for Album();
  uint64_t v43 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v45 = (char *)&v113 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  unint64_t v48 = (char *)&v113 - v47;
  uint64_t v49 = *(void *)(a1 - 8);
  __chkstk_darwin(v50);
  v113 = (char *)&v113 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v116 = (char *)&v113 - v53;
  __n128 v55 = __chkstk_darwin(v54);
  uint64_t v57 = (char *)&v113 - v56;
  uint64_t v161 = v49;
  uint64_t v58 = v49 + 16;
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  uint64_t v61 = v60;
  uint64_t v115 = v58;
  uint64_t v114 = v59;
  ((void (*)(char *, char *, __n128))v59)((char *)&v113 - v56, v162, v55);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v45, v48, v42);
    uint64_t v62 = Album.catalogID.getter();
    uint64_t v64 = v63;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
    if (!v64) {
      uint64_t v62 = 0;
    }
    uint64_t v65 = v61;
    goto LABEL_28;
  }
  uint64_t v65 = v61;
  if (swift_dynamicCast())
  {
    uint64_t v66 = v159;
    (*(void (**)(char *, char *, uint64_t))(v159 + 32))(v38, v41, v36);
    uint64_t v62 = MusicMovie.catalogID.getter();
    uint64_t v68 = v67;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v38, v36);
    goto LABEL_26;
  }
  uint64_t v69 = v160;
  if (swift_dynamicCast())
  {
    CGRect v71 = v155;
    uint64_t v70 = v156;
    (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v155, v35, v69);
    uint64_t v72 = MusicVideo.catalogID.getter();
    uint64_t v74 = v73;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v69);
    if (v74) {
      uint64_t v62 = v72;
    }
    else {
      uint64_t v62 = 0;
    }
    goto LABEL_28;
  }
  uint64_t v75 = v157;
  uint64_t v76 = v158;
  if (swift_dynamicCast())
  {
    uint64_t v78 = v151;
    uint64_t v77 = v152;
    (*(void (**)(char *, char *, uint64_t))(v152 + 32))(v151, v75, v76);
    uint64_t v79 = Playlist.catalogID.getter();
LABEL_25:
    uint64_t v62 = v79;
    uint64_t v68 = v80;
    (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v76);
LABEL_26:
    if (!v68) {
      uint64_t v62 = 0;
    }
    goto LABEL_28;
  }
  CGRect v81 = v153;
  uint64_t v76 = v154;
  if (swift_dynamicCast())
  {
    uint64_t v78 = v147;
    uint64_t v77 = v148;
    (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v147, v81, v76);
    uint64_t v79 = Song.catalogID.getter();
    goto LABEL_25;
  }
  uint64_t v82 = v149;
  uint64_t v83 = v150;
  if (swift_dynamicCast())
  {
    uint64_t v84 = v144;
    uint64_t v85 = v143;
    (*(void (**)(char *, char *, uint64_t))(v144 + 32))(v143, v82, v83);
    uint64_t v62 = Station.id.getter();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v83);
LABEL_28:
    uint64_t v90 = v161;
    goto LABEL_29;
  }
  uint64_t v86 = v145;
  uint64_t v76 = v146;
  if (swift_dynamicCast())
  {
    uint64_t v77 = v140;
    uint64_t v78 = v139;
    (*(void (**)(char *, char *, uint64_t))(v140 + 32))(v139, v86, v76);
    uint64_t v79 = TVEpisode.catalogID.getter();
    goto LABEL_25;
  }
  uint64_t v87 = v141;
  uint64_t v76 = v142;
  if (swift_dynamicCast())
  {
    uint64_t v77 = v136;
    uint64_t v78 = v135;
    (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v135, v87, v76);
    uint64_t v79 = TVShow.catalogID.getter();
    goto LABEL_25;
  }
  uint64_t v88 = v137;
  uint64_t v76 = v138;
  if (swift_dynamicCast())
  {
    uint64_t v77 = v132;
    uint64_t v78 = v131;
    (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v131, v88, v76);
    uint64_t v79 = UploadedAudio.catalogID.getter();
    goto LABEL_25;
  }
  uint64_t v89 = v133;
  uint64_t v76 = v134;
  if (swift_dynamicCast())
  {
    uint64_t v77 = v128;
    uint64_t v78 = v127;
    (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v127, v89, v76);
    uint64_t v79 = UploadedVideo.catalogID.getter();
    goto LABEL_25;
  }
  uint64_t v92 = v129;
  uint64_t v93 = v130;
  if (swift_dynamicCast())
  {
    uint64_t v94 = v57;
    uint64_t v95 = v125;
    v96 = v124;
    (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v124, v92, v93);
    sub_100A84388((uint64_t)&v163);
    uint64_t v62 = v164;
    if (v164)
    {
      uint64_t v97 = v165;
      sub_100068990(&v163, v164);
      uint64_t v62 = sub_100A82920(v62, v97);
      sub_1000760E4((uint64_t)&v163);
    }
    else
    {
      sub_1000637B8((uint64_t)&v163, &qword_1010C2AB0);
    }
    uint64_t v90 = v161;
    (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v93);
    uint64_t v57 = v94;
    goto LABEL_29;
  }
  uint64_t v98 = v123;
  uint64_t v99 = v126;
  if (swift_dynamicCast())
  {
    uint64_t v100 = v121;
    uint64_t v101 = v120;
    (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v120, v98, v99);
    Track.musicItem.getter((uint64_t)&v163);
    goto LABEL_37;
  }
  v102 = v119;
  uint64_t v99 = v122;
  if (swift_dynamicCast())
  {
    uint64_t v100 = v118;
    uint64_t v101 = v117;
    (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v117, v102, v99);
    sub_100A83D68((uint64_t)&v163);
LABEL_37:
    uint64_t v62 = v164;
    if (v164)
    {
      uint64_t v103 = v165;
      sub_100068990(&v163, v164);
      uint64_t v62 = sub_100A82920(v62, v103);
      (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v99);
      sub_1000760E4((uint64_t)&v163);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v99);
      sub_1000637B8((uint64_t)&v163, &qword_1010C2AB0);
    }
    goto LABEL_28;
  }
  if (qword_1010BC5E8 != -1) {
    swift_once();
  }
  uint64_t v104 = type metadata accessor for Logger();
  sub_100050A90(v104, (uint64_t)static Logger.capabilityUpsell);
  v105 = v116;
  uint64_t v106 = v61;
  uint64_t v107 = v114;
  v114(v116, v162, v106);
  v108 = Logger.logObject.getter();
  os_log_type_t v109 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v108, v109))
  {
    uint64_t v110 = swift_slowAlloc();
    uint64_t v163 = swift_slowAlloc();
    *(_DWORD *)uint64_t v110 = 136315138;
    v107(v113, v105, v65);
    uint64_t v111 = String.init<A>(describing:)();
    *(void *)(v110 + 4) = sub_100075E68(v111, v112, &v163);
    swift_bridgeObjectRelease();
    uint64_t v90 = v161;
    (*(void (**)(char *, uint64_t))(v161 + 8))(v105, v65);
    _os_log_impl((void *)&_mh_execute_header, v108, v109, "Unsupported MusicItem catalogID=%s", (uint8_t *)v110, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v90 = v161;
    (*(void (**)(char *, uint64_t))(v161 + 8))(v105, v65);
  }

  uint64_t v62 = 0;
LABEL_29:
  (*(void (**)(char *, uint64_t))(v90 + 8))(v57, v65);
  return v62;
}

uint64_t Logger.capabilityUpsell.unsafeMutableAddressor()
{
  if (qword_1010BC5E8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_100050A90(v0, (uint64_t)static Logger.capabilityUpsell);
}

uint64_t sub_100A83B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100A83C34, v6, v5);
}

uint64_t sub_100A83C34()
{
  swift_release();
  id v1 = [self sharedApplication];
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  sub_1008F6A7C((uint64_t)_swiftEmptyArrayStorage);
  _s3__C25OpenExternalURLOptionsKeyVMa_0(0);
  sub_100A86194((unint64_t *)&qword_1010C5E10, _s3__C25OpenExternalURLOptionsKeyVMa_0);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v1 openURL:v4 options:isa completionHandler:0];

  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100A83D68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Playlist.Entry();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Playlist.Entry.InternalItem();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v32 - v12;
  Playlist.Entry.internalItem.getter();
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v13, v7);
  if (v14 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v13, v7);
    uint64_t v15 = type metadata accessor for MusicMovie();
    *(void *)(a1 + 24) = v15;
    uint64_t v16 = (unint64_t *)&unk_1010BE2D0;
    uint64_t v17 = &type metadata accessor for MusicMovie;
LABEL_3:
    *(void *)(a1 + 32) = sub_100A86194(v16, (void (*)(uint64_t))v17);
LABEL_9:
    uint64_t v20 = sub_100068018((uint64_t *)a1);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v20, v13, v15);
  }
  if (v14 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v13, v7);
    uint64_t v18 = type metadata accessor for MusicVideo();
    uint64_t v15 = v18;
    uint64_t v19 = &protocol witness table for MusicVideo;
LABEL_8:
    *(void *)(a1 + 24) = v18;
    *(void *)(a1 + 32) = v19;
    goto LABEL_9;
  }
  if (v14 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v13, v7);
    uint64_t v18 = type metadata accessor for Song();
    uint64_t v15 = v18;
    uint64_t v19 = &protocol witness table for Song;
    goto LABEL_8;
  }
  if (v14 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v13, v7);
    uint64_t v15 = type metadata accessor for TVEpisode();
    *(void *)(a1 + 24) = v15;
    uint64_t v16 = (unint64_t *)&unk_1010BE2D8;
    uint64_t v17 = &type metadata accessor for TVEpisode;
    goto LABEL_3;
  }
  if (v14 == enum case for Playlist.Entry.InternalItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v13, v7);
    uint64_t v15 = type metadata accessor for UploadedAudio();
    *(void *)(a1 + 24) = v15;
    uint64_t v16 = (unint64_t *)&unk_1010BECA0;
    uint64_t v17 = &type metadata accessor for UploadedAudio;
    goto LABEL_3;
  }
  if (v14 == enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v8 + 96))(v13, v7);
    uint64_t v15 = type metadata accessor for UploadedVideo();
    *(void *)(a1 + 24) = v15;
    uint64_t v16 = (unint64_t *)&unk_1010BE2F0;
    uint64_t v17 = &type metadata accessor for UploadedVideo;
    goto LABEL_3;
  }
  if (qword_1010BC5E8 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100050A90(v22, (uint64_t)static Logger.capabilityUpsell);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.fault.getter();
  int v38 = v24;
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (_DWORD *)swift_slowAlloc();
    uint64_t v34 = v25;
    uint64_t v37 = swift_slowAlloc();
    uint64_t v39 = v37;
    *uint64_t v25 = 136315138;
    os_log_t v35 = v23;
    Playlist.Entry.internalItem.getter();
    sub_100A86194(&qword_1010BD120, (void (*)(uint64_t))&type metadata accessor for Playlist.Entry.InternalItem);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v27 = v26;
    uint64_t v28 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v36 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v28(v10, v7);
    unint64_t v29 = sub_100075E68(v33, v27, &v39);
    uint64_t v30 = (uint8_t *)v34;
    *(void *)(v34 + 1) = v29;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    os_log_t v31 = v35;
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v38, "Unknown Entry internalItem=%s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

    uint64_t v28 = *(void (**)(char *, uint64_t))(v8 + 8);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return ((uint64_t (*)(char *, uint64_t))v28)(v13, v7);
}

uint64_t sub_100A84388@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for GenericMusicItem();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16);
  v11((char *)&v27 - v9, v1, v3, v8);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v10, v3);
  if (v12 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    uint64_t v13 = type metadata accessor for Album();
    uint64_t v14 = v13;
    uint64_t v15 = &protocol witness table for Album;
LABEL_14:
    *(void *)(a1 + 24) = v13;
    *(void *)(a1 + 32) = v15;
    goto LABEL_15;
  }
  if (v12 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    uint64_t v14 = type metadata accessor for MusicMovie();
    *(void *)(a1 + 24) = v14;
    uint64_t v16 = (unint64_t *)&unk_1010BE2D0;
    uint64_t v17 = &type metadata accessor for MusicMovie;
LABEL_5:
    *(void *)(a1 + 32) = sub_100A86194(v16, (void (*)(uint64_t))v17);
LABEL_15:
    uint64_t v18 = sub_100068018((uint64_t *)a1);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v18, v10, v14);
  }
  if (v12 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    uint64_t v13 = type metadata accessor for MusicVideo();
    uint64_t v14 = v13;
    uint64_t v15 = &protocol witness table for MusicVideo;
    goto LABEL_14;
  }
  if (v12 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    uint64_t v13 = type metadata accessor for Playlist();
    uint64_t v14 = v13;
    uint64_t v15 = &protocol witness table for Playlist;
    goto LABEL_14;
  }
  if (v12 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    uint64_t v13 = type metadata accessor for Song();
    uint64_t v14 = v13;
    uint64_t v15 = &protocol witness table for Song;
    goto LABEL_14;
  }
  if (v12 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    uint64_t v13 = type metadata accessor for Station();
    uint64_t v14 = v13;
    uint64_t v15 = &protocol witness table for Station;
    goto LABEL_14;
  }
  if (v12 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    uint64_t v14 = type metadata accessor for TVEpisode();
    *(void *)(a1 + 24) = v14;
    uint64_t v16 = (unint64_t *)&unk_1010BE2D8;
    uint64_t v17 = &type metadata accessor for TVEpisode;
    goto LABEL_5;
  }
  if (v12 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    uint64_t v14 = type metadata accessor for TVShow();
    *(void *)(a1 + 24) = v14;
    uint64_t v16 = (unint64_t *)&unk_1010BE2E8;
    uint64_t v17 = &type metadata accessor for TVShow;
    goto LABEL_5;
  }
  if (v12 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    uint64_t v14 = type metadata accessor for UploadedAudio();
    *(void *)(a1 + 24) = v14;
    uint64_t v16 = (unint64_t *)&unk_1010BECA0;
    uint64_t v17 = &type metadata accessor for UploadedAudio;
    goto LABEL_5;
  }
  if (v12 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v10, v3);
    uint64_t v14 = type metadata accessor for UploadedVideo();
    *(void *)(a1 + 24) = v14;
    uint64_t v16 = (unint64_t *)&unk_1010BE2F0;
    uint64_t v17 = &type metadata accessor for UploadedVideo;
    goto LABEL_5;
  }
  if (qword_1010BC5E8 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100050A90(v20, (uint64_t)static Logger.capabilityUpsell);
  ((void (*)(char *, uint64_t, uint64_t))v11)(v6, v1, v3);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = v27;
    *(_DWORD *)uint64_t v23 = 136315138;
    sub_100A86194(&qword_1010BDF70, (void (*)(uint64_t))&type metadata accessor for GenericMusicItem);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v23 + 4) = sub_100075E68(v24, v25, &v28);
    swift_bridgeObjectRelease();
    unint64_t v26 = *(void (**)(char *, uint64_t))(v4 + 8);
    v26(v6, v3);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unsupported GenericMusicItem kind=%s", (uint8_t *)v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v26 = *(void (**)(char *, uint64_t))(v4 + 8);
    v26(v6, v3);
  }

  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return ((uint64_t (*)(char *, uint64_t))v26)(v10, v3);
}

uint64_t sub_100A84A28()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100014CA4(v0, static Logger.capabilityUpsell);
  sub_100050A90(v0, (uint64_t)static Logger.capabilityUpsell);
  return Logger.init(subsystem:category:)();
}

uint64_t static Logger.capabilityUpsell.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1010BC5E8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_100050A90(v2, (uint64_t)static Logger.capabilityUpsell);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void _s9MusicCore27SubscriptionUpsellPresenterV7present3foryAC9PlacementO_tFZ_0(uint64_t a1)
{
  uint64_t v2 = sub_100063814(&qword_1010C0040);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLQueryItem();
  uint64_t v84 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v76 - v9;
  uint64_t v11 = sub_100063814(&qword_1010BCBE0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v86 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v86 + 64);
  __chkstk_darwin(v14);
  uint64_t v82 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v85 = (char *)&v76 - v17;
  if (qword_1010BBD90 != -1) {
    swift_once();
  }
  sub_100063814(&qword_1010C0630);
  UnfairLock.locked<A>(_:)((void (*)(void))sub_10003DA94);
  uint64_t v18 = *(void **)&v92[0];
  if (!*(void *)&v92[0]) {
    goto LABEL_8;
  }
  uint64_t v83 = v14;
  CGRect v81 = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v20 = [v18 stringForBagKey:v19];

  if (!v20)
  {

    goto LABEL_8;
  }
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  *(void *)&v92[0] = 0x2F2F3A636973756DLL;
  *((void *)&v92[0] + 1) = 0xE800000000000000;
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v25 = v86;
  uint64_t v26 = v83;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v13, 1, v83) == 1)
  {

    sub_1000637B8((uint64_t)v13, &qword_1010BCBE0);
LABEL_8:
    if (qword_1010BC5E8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100050A90(v27, (uint64_t)static Logger.capabilityUpsell);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Could not build marketingURL", v30, 2u);
      swift_slowDealloc();
    }

    return;
  }
  os_log_t v31 = *(void (**)(unint64_t, char *, uint64_t))(v25 + 32);
  uint64_t v78 = v25 + 32;
  uint64_t v77 = v31;
  v31((unint64_t)v85, v13, v26);
  sub_100063814(&qword_1010BDF20);
  unint64_t v32 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
  uint64_t v80 = *(void *)(v84 + 72);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_100E251B0;
  uint64_t v79 = (char *)v33;
  unint64_t v76 = v32;
  URLQueryItem.init(name:value:)();
  sub_100A85F3C(a1, (uint64_t)v92);
  if (v93 == 253)
  {
    uint64_t v34 = v85;
  }
  else
  {
    uint64_t v34 = v85;
    if (v93 != 255 && v93 != 254) {
      sub_1002C4030((uint64_t)v92);
    }
  }
  uint64_t v35 = v80;
  URLQueryItem.init(name:value:)();
  swift_bridgeObjectRelease();
  sub_100A85F3C(a1, (uint64_t)v90);
  if (v91 < 0xFDu)
  {
    sub_100A1BED8(v90, v92);
    sub_100A814E4();
    uint64_t v36 = v79;
    if (v37)
    {
      URLQueryItem.init(name:value:)();
      swift_bridgeObjectRelease();
      unint64_t v39 = *((void *)v36 + 2);
      unint64_t v38 = *((void *)v36 + 3);
      if (v39 >= v38 >> 1) {
        uint64_t v36 = (char *)sub_10087EA24(v38 > 1, v39 + 1, 1, v36);
      }
      *((void *)v36 + 2) = v39 + 1;
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(&v36[v76 + v39 * v35], v10, v5);
    }
    else
    {
      if (qword_1010BC5E8 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      sub_100050A90(v40, (uint64_t)static Logger.capabilityUpsell);
      sub_100A8612C((uint64_t)v92, (uint64_t)v90);
      os_log_type_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = swift_slowAlloc();
        uint64_t v89 = swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 136315138;
        sub_100A8612C((uint64_t)v90, (uint64_t)v87);
        uint64_t v44 = String.init<A>(describing:)();
        *(void *)(v43 + 4) = sub_100075E68(v44, v45, &v89);
        swift_bridgeObjectRelease();
        sub_100A86164((uint64_t)v90);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Missing kind for item=%s", (uint8_t *)v43, 0xCu);
        swift_arrayDestroy();
        uint64_t v36 = v79;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100A86164((uint64_t)v90);
      }

      uint64_t v35 = v80;
    }
    sub_100A8612C((uint64_t)v92, (uint64_t)v90);
    if (v91 == 1)
    {
      uint64_t v46 = *(void **)&v90[0];
      MPModelObject.bestIdentifier(for:)(2, 1u);
      uint64_t v48 = v47;

      if (v48)
      {
LABEL_34:
        URLQueryItem.init(name:value:)();
        swift_bridgeObjectRelease();
        unint64_t v50 = *((void *)v36 + 2);
        unint64_t v49 = *((void *)v36 + 3);
        if (v50 >= v49 >> 1) {
          uint64_t v36 = (char *)sub_10087EA24(v49 > 1, v50 + 1, 1, v36);
        }
        uint64_t v34 = v85;
        *((void *)v36 + 2) = v50 + 1;
        (*(void (**)(char *, char *, uint64_t))(v84 + 32))(&v36[v76 + v50 * v35], v7, v5);
        sub_100A86164((uint64_t)v92);
        goto LABEL_44;
      }
    }
    else
    {
      sub_100068978(v90, (uint64_t)v87);
      uint64_t v51 = v88;
      sub_100068990(v87, v88);
      sub_100A82920(v51);
      uint64_t v53 = v52;
      sub_1000760E4((uint64_t)v87);
      if (v53) {
        goto LABEL_34;
      }
    }
    if (qword_1010BC5E8 != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    sub_100050A90(v54, (uint64_t)static Logger.capabilityUpsell);
    sub_100A8612C((uint64_t)v92, (uint64_t)v90);
    __n128 v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = swift_slowAlloc();
      uint64_t v89 = swift_slowAlloc();
      *(_DWORD *)uint64_t v57 = 136315138;
      sub_100A8612C((uint64_t)v90, (uint64_t)v87);
      uint64_t v58 = String.init<A>(describing:)();
      *(void *)(v57 + 4) = sub_100075E68(v58, v59, &v89);
      swift_bridgeObjectRelease();
      sub_100A86164((uint64_t)v90);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Missing id for item=%s", (uint8_t *)v57, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100A86164((uint64_t)v90);
    }
    sub_100A86164((uint64_t)v92);
    uint64_t v34 = v85;
    goto LABEL_44;
  }
  sub_1002C4030((uint64_t)v90);
  uint64_t v36 = v79;
LABEL_44:
  URL.append(queryItems:)((Swift::OpaquePointer)v36);
  swift_bridgeObjectRelease();
  if (qword_1010BC5E8 != -1) {
    swift_once();
  }
  uint64_t v60 = type metadata accessor for Logger();
  sub_100050A90(v60, (uint64_t)static Logger.capabilityUpsell);
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.default.getter();
  BOOL v63 = os_log_type_enabled(v61, v62);
  uint64_t v64 = (uint64_t)v81;
  if (v63)
  {
    uint64_t v65 = swift_slowAlloc();
    *(void *)&v92[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v65 = 136446210;
    swift_beginAccess();
    sub_100A86194((unint64_t *)&qword_1010C0968, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v66 = v83;
    uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v65 + 4) = sub_100075E68(v67, v68, (uint64_t *)v92);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Will present upsell with URL=%{public}s", (uint8_t *)v65, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v66 = v83;
  }
  uint64_t v69 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v64, 1, 1, v69);
  swift_beginAccess();
  uint64_t v70 = v86;
  CGRect v71 = v82;
  (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v82, v34, v66);
  type metadata accessor for MainActor();
  uint64_t v72 = static MainActor.shared.getter();
  uint64_t v73 = v34;
  unint64_t v74 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
  uint64_t v75 = swift_allocObject();
  *(void *)(v75 + 16) = v72;
  *(void *)(v75 + 24) = &protocol witness table for MainActor;
  v77(v75 + v74, v71, v66);
  sub_100066A68(v64, (uint64_t)&unk_1010C6330, v75);
  swift_release();

  (*(void (**)(char *, uint64_t))(v70 + 8))(v73, v66);
}

ValueMetadata *type metadata accessor for SubscriptionUpsellPresenter()
{
  return &type metadata for SubscriptionUpsellPresenter;
}

void destroy for SubscriptionUpsellPresenter.Placement(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 <= 1)
  {
    if (v1 == 1) {

    }
    else {
      sub_1000760E4(a1);
    }
  }
}

uint64_t initializeWithCopy for SubscriptionUpsellPresenter.Placement(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 > 1)
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else if (v3 == 1)
  {
    uint64_t v4 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 40) = 1;
    id v5 = v4;
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t))(v7 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for SubscriptionUpsellPresenter.Placement(uint64_t a1, long long *a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
  unsigned int v5 = *((unsigned __int8 *)a2 + 40);
  if (v4 > 1)
  {
    if (v5 <= 1)
    {
      if (v5 != 1)
      {
LABEL_17:
        uint64_t v11 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v11;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v11 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = 0;
        return a1;
      }
      goto LABEL_8;
    }
LABEL_12:
    long long v8 = *a2;
    long long v9 = a2[1];
    *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v9;
    return a1;
  }
  if (v5 > 1)
  {
    if (v4 == 1) {

    }
    else {
      sub_1000760E4(a1);
    }
    goto LABEL_12;
  }
  if ((long long *)a1 != a2)
  {
    if (v4 == 1) {

    }
    else {
      sub_1000760E4(a1);
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + 40);
    if (v10 >= 2) {
      unsigned int v10 = *(_DWORD *)a2 + 2;
    }
    if (v10 != 1) {
      goto LABEL_17;
    }
LABEL_8:
    long long v6 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 40) = 1;
    id v7 = v6;
  }
  return a1;
}

uint64_t assignWithTake for SubscriptionUpsellPresenter.Placement(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
  unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
  if (v4 > 1)
  {
    if (v5 <= 1)
    {
      if (v5 != 1)
      {
LABEL_17:
        long long v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
        return a1;
      }
      goto LABEL_8;
    }
LABEL_12:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    return a1;
  }
  if (v5 > 1)
  {
    if (v4 == 1) {

    }
    else {
      sub_1000760E4(a1);
    }
    goto LABEL_12;
  }
  if (a1 != a2)
  {
    if (v4 == 1) {

    }
    else {
      sub_1000760E4(a1);
    }
    unsigned int v7 = *(unsigned __int8 *)(a2 + 40);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    if (v7 != 1) {
      goto LABEL_17;
    }
LABEL_8:
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 40) = 1;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionUpsellPresenter.Placement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2) {
    unsigned int v4 = (v3 ^ 0xFF) + 1;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 >= 4) {
    return v4 - 3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SubscriptionUpsellPresenter.Placement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -3 - a2;
    }
  }
  return result;
}

uint64_t sub_100A85C18(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    return (v1 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

double sub_100A85C2C(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 25) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)a1 = a2 - 255;
  }
  else if (a2)
  {
    *(unsigned char *)(a1 + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SubscriptionUpsellPresenter.Placement()
{
  return &type metadata for SubscriptionUpsellPresenter.Placement;
}

void destroy for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {

  }
  else {
    sub_1000760E4(a1);
  }
}

uint64_t initializeWithCopy for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    unsigned int v4 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    id v5 = v4;
    char v6 = 1;
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t))(v7 - 8))(a1);
    char v6 = 0;
  }
  *(unsigned char *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {

    }
    else {
      sub_1000760E4(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      char v6 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 1;
      id v7 = v6;
    }
    else
    {
      uint64_t v8 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {

    }
    else {
      sub_1000760E4(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
    }
    *(unsigned char *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionUpsellPresenter.Placement.Source(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SubscriptionUpsellPresenter.Placement.Source(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)double result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SubscriptionUpsellPresenter.Placement.Source()
{
  return &type metadata for SubscriptionUpsellPresenter.Placement.Source;
}

uint64_t sub_100A85F3C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100A85F74()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_100A86040(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000154F4;
  return sub_100A83B9C(a1, v5, v6, v7);
}

uint64_t sub_100A8612C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100A86164(uint64_t a1)
{
  return a1;
}

uint64_t sub_100A86194(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static ApplicationRecordUtilities.isApplicationInstalled(identifier:)(uint64_t a1, uint64_t a2)
{
  objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  uint64_t result = (uint64_t)sub_100A86C50(a1, a2, 0);
  if (result)
  {

    return 1;
  }
  return result;
}

uint64_t static ApplicationRecordUtilities.openApplication(identifier:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return _swift_task_switch(sub_100A86280, 0, 0);
}

uint64_t sub_100A86280()
{
  id v1 = [self defaultWorkspace];
  v0[17] = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    NSString v3 = String._bridgeToObjectiveC()();
    v0[18] = v3;
    v0[2] = v0;
    v0[7] = v0 + 20;
    v0[3] = sub_100A863C8;
    uint64_t v4 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100A865B8;
    v0[13] = &unk_101003C00;
    v0[14] = v4;
    [v2 openApplicationWithBundleIdentifier:v3 configuration:0 completionHandler:v0 + 10];
    id v1 = v0 + 2;
  }
  else
  {
    __break(1u);
  }
  return _swift_continuation_await(v1);
}

uint64_t sub_100A863C8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = sub_100A86540;
  }
  else {
    uint64_t v2 = sub_100A864D8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100A864D8()
{
  uint64_t v1 = *(void **)(v0 + 144);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100A86540()
{
  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = (void *)v0[17];
  swift_willThrow();

  NSString v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100A865B8(uint64_t a1, char a2, void *a3)
{
  if (a3)
  {
    sub_100063814(&qword_1010C65A8);
    swift_allocError();
    *uint64_t v4 = a3;
    id v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(unsigned char **)(*(void *)(*(void *)(a1 + 32) + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

NSString sub_100A8666C()
{
  NSString result = String._bridgeToObjectiveC()();
  static NSNotificationName.applicationRegistered = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.applicationRegistered.unsafeMutableAddressor()
{
  if (qword_1010C6340 != -1) {
    swift_once();
  }
  return &static NSNotificationName.applicationRegistered;
}

id static NSNotificationName.applicationRegistered.getter()
{
  if (qword_1010C6340 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NSNotificationName.applicationRegistered;

  return v0;
}

id variable initialization expression of BrightnessManager.brightnessClient()
{
  id v0 = objc_allocWithZone((Class)BrightnessSystemClient);

  return [v0 init];
}

unint64_t variable initialization expression of BrightnessManager.minimumBrightness()
{
  return sub_100A86790((uint64_t)&off_1010034E0);
}

unint64_t sub_100A86790(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063814(&qword_1010C6598);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100071DE8(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100A868A4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063814(&qword_1010C6580);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 40);
  while (1)
  {
    unint64_t v5 = *(v4 - 1);
    unint64_t v6 = *v4;
    uint64_t v7 = v4[1];
    uint64_t v8 = v4[2];
    unint64_t v9 = v4[3];
    unint64_t v10 = v4[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100A9A308(v5, v6, v7, v8);
    if (v12) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v13 = (unint64_t *)(v2[6] + 32 * result);
    *uint64_t v13 = v5;
    v13[1] = v6;
    v13[2] = v7;
    v13[3] = v8;
    uint64_t v14 = (unint64_t *)(v2[7] + 16 * result);
    unint64_t *v14 = v9;
    v14[1] = v10;
    uint64_t v15 = v2[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v4 += 6;
    v2[2] = v17;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100A869E4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063814(&qword_1010C6570);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100071DE8(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t variable initialization expression of BrightnessManager.resetBrightness()
{
  return sub_100A86790((uint64_t)&off_101003530);
}

unint64_t variable initialization expression of BrightnessManager.disableCBFeatures()
{
  return sub_1000071E4((uint64_t)&off_101003580);
}

unint64_t variable initialization expression of BrightnessManager.enableCBFeatures()
{
  return sub_1000071E4((uint64_t)&off_1010035B8);
}

uint64_t variable initialization expression of Datavault.logger@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t variable initialization expression of AIDiffingUpdate.insertedIndexPathsSet()
{
  return 0;
}

uint64_t variable initialization expression of WeakArray.items()
{
  type metadata accessor for WeakArray.WeakBox();

  return static Array._allocateUninitialized(_:)();
}

uint64_t variable initialization expression of WeakValuesDictionary.storage()
{
  sub_100A8719C();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();

  return Dictionary.init(dictionaryLiteral:)();
}

id sub_100A86C50(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithBundleIdentifier:v5 allowPlaceholder:a3 & 1 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_100A86D2C(uint64_t a1, uint64_t a2)
{
  return sub_100A8704C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100A86D44()
{
  sub_100A87380(&qword_1010C6520, _s3__C4NameVMa_0);
  sub_100A87380(&qword_1010C6528, _s3__C4NameVMa_0);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100A86E00()
{
  sub_100A87380(&qword_1010C6530, _s3__C3KeyVMa_1);
  sub_100A87380(&qword_1010C6538, _s3__C3KeyVMa_1);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100A86EBC()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100A86F78()
{
  sub_100A87380((unint64_t *)&qword_1010C65D8, type metadata accessor for NSKeyValueChangeKey);
  sub_100A87380(qword_1010C65E0, type metadata accessor for NSKeyValueChangeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100A87034(uint64_t a1, uint64_t a2)
{
  return sub_100A8704C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100A8704C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100A87090(uint64_t a1)
{
  return sub_100A87148(a1, &qword_1010C6558);
}

unint64_t sub_100A8709C(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v1 = result;
    if (result)
    {
      type metadata accessor for IndexPath();
      uint64_t v2 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v2[2] = v1;
    }
    else
    {
      uint64_t v2 = _swiftEmptyArrayStorage;
    }
    type metadata accessor for IndexPath();
    return (unint64_t)v2;
  }
  return result;
}

uint64_t sub_100A87130(uint64_t a1)
{
  return sub_100A87148(a1, &qword_1010C6568);
}

uint64_t sub_100A8713C(uint64_t a1)
{
  return sub_100A87148(a1, &qword_1010C6578);
}

uint64_t sub_100A87148(uint64_t result, uint64_t *a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = result;
    if (result)
    {
      sub_100063814(a2);
      unint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(result + 16) = v2;
    }
    else
    {
      return (uint64_t)_swiftEmptyArrayStorage;
    }
  }
  return result;
}

unint64_t sub_100A8719C()
{
  unint64_t result = qword_1010C6410;
  if (!qword_1010C6410)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1010C6410);
  }
  return result;
}

ValueMetadata *type metadata accessor for ApplicationRecordUtilities()
{
  return &type metadata for ApplicationRecordUtilities;
}

void type metadata accessor for AnimationCurve(uint64_t a1)
{
}

void _s3__C16UILayoutPriorityVMa_0(uint64_t a1)
{
}

void _s3__C23NSDirectionalEdgeInsetsVMa_1(uint64_t a1)
{
}

void type metadata accessor for CTFrame(uint64_t a1)
{
}

void type metadata accessor for Event(uint64_t a1)
{
}

void _s3__C4NameVMa_0(uint64_t a1)
{
}

void _s3__C24MPCPlaybackIntentOptionsVMa_0(uint64_t a1)
{
}

void _s3__C8_NSRangeVMa_0(uint64_t a1)
{
}

void type metadata accessor for Attribute(uint64_t a1)
{
}

void _s3__C7CGPointVMa_2(uint64_t a1)
{
}

void type metadata accessor for CTRun(uint64_t a1)
{
}

void type metadata accessor for CTLine(uint64_t a1)
{
}

uint64_t sub_100A872F0()
{
  return sub_100A87380(&qword_1010C64A0, _s3__C3KeyVMa_1);
}

uint64_t sub_100A87338()
{
  return sub_100A87380(&qword_1010C64A8, _s3__C3KeyVMa_1);
}

uint64_t sub_100A87380(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100A873C8()
{
  return sub_100A87380(&qword_1010C64B0, type metadata accessor for Attribute);
}

uint64_t sub_100A87410()
{
  return sub_100A87380(&qword_1010C64B8, _s3__C24MPCPlaybackIntentOptionsVMa_0);
}

uint64_t sub_100A87458()
{
  return sub_100A87380(&qword_1010C64C0, _s3__C24MPCPlaybackIntentOptionsVMa_0);
}

uint64_t sub_100A874A0()
{
  return sub_100A87380(&qword_1010C64C8, _s3__C24MPCPlaybackIntentOptionsVMa_0);
}

uint64_t sub_100A874E8()
{
  return sub_100A87380(&qword_1010C64D0, _s3__C24MPCPlaybackIntentOptionsVMa_0);
}

uint64_t sub_100A87530()
{
  return sub_100A87380(&qword_1010C64D8, _s3__C4NameVMa_0);
}

uint64_t sub_100A87578()
{
  return sub_100A87380(&qword_1010C64E0, _s3__C4NameVMa_0);
}

uint64_t sub_100A875C0()
{
  return sub_100A87380(&qword_1010C64E8, _s3__C4NameVMa_0);
}

uint64_t sub_100A87608()
{
  return sub_100A87380(&qword_1010C64F0, _s3__C16UILayoutPriorityVMa_0);
}

uint64_t sub_100A87650()
{
  return sub_100A87380(&qword_1010C64F8, _s3__C16UILayoutPriorityVMa_0);
}

uint64_t sub_100A87698()
{
  return sub_100A87380(&qword_1010C6500, _s3__C16UILayoutPriorityVMa_0);
}

unint64_t sub_100A876E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  sub_100063814(&qword_1010C6588);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  char v6 = *(unsigned char *)(a1 + 48);
  unint64_t result = sub_100A9A2DC(v5, v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  char v9 = (unsigned char *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v10 = (uint64_t *)(v3[6] + 16 * result);
    *id v10 = v5;
    v10[1] = v4;
    *(unsigned char *)(v3[7] + result) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 24;
    uint64_t v5 = *((void *)v9 - 2);
    uint64_t v15 = *((void *)v9 - 1);
    char v6 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100A9A2DC(v5, v15);
    char v9 = v14;
    uint64_t v4 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_100A877F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100063814(&qword_1010C6560);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = sub_100A9A394(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_100A878D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100063814(&qword_1010C6550);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      Swift::UInt v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = sub_1000E703C(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

void type metadata accessor for MPModelPlaylistEntryType(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

uint64_t sub_100A879D4()
{
  return sub_100A87380(&qword_1010C65C0, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_100A87A1C()
{
  return sub_100A87380(&qword_1010C65C8, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_100A87A64()
{
  return sub_100A87380(&qword_1010C65D0, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t static ArrayBuilder.buildBlock(_:)()
{
  return Sequence.flatMap<A>(_:)();
}

uint64_t static ArrayBuilder.buildExpression(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  type metadata accessor for _ContiguousArrayStorage();
  uint64_t v3 = *(void *)(v2 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, a1, v2);
  type metadata accessor for Array();
  UIScreen.Dimensions.size.getter(v5);
  swift_getWitnessTable();
  uint64_t v6 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_100A87CC0()
{
  type metadata accessor for Array();
  return UIScreen.Dimensions.size.getter(v0);
}

uint64_t sub_100A87CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t type metadata accessor for ArrayBuilder()
{
  return sub_10004CF5C();
}

uint64_t Whitetail.Binding.configurationBlock.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t Whitetail.Binding.add(_:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100068990(a1, v3);
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v4 + 8);
  swift_retain();
  v6(sub_10007AD28, v5, v3, v4);
  if (v2)
  {
    swift_errorRelease();
    return swift_release_n();
  }
  else
  {
    swift_release_n();
    swift_beginAccess();
    swift_unknownObjectRetain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v1 + 40) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 40) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    return swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Whitetail.Binding.add(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = *((void *)a1._rawValue + 2);
  if (v4)
  {
    uint64_t v5 = (char *)a1._rawValue + 32;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v7 = v5[3];
      uint64_t v6 = v5[4];
      sub_100068990(v5, v7);
      uint64_t v8 = swift_allocObject();
      swift_weakInit();
      uint64_t v9 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v6 + 8);
      swift_retain();
      v9(sub_10007AD28, v8, v7, v6);
      if (v3)
      {
        swift_errorRelease();
        swift_release_n();
        uint64_t v3 = 0;
      }
      else
      {
        swift_release_n();
        swift_beginAccess();
        swift_unknownObjectRetain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*(void *)(v1 + 40) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 40) & 0xFFFFFFFFFFFFFF8)
                                                                                           + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
        swift_unknownObjectRelease();
      }
      v5 += 5;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
}

uint64_t Whitetail.Binding.description.getter()
{
  _StringGuts.grow(_:)(21);
  v0._countAndFlagsBits = 60;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8250;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x6576726573626F20;
  v3._object = (void *)0xEB000000003D7372;
  String.append(_:)(v3);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0;
}

uint64_t Whitetail.Binding.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Whitetail.Binding.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100A88394()
{
  return Whitetail.Binding.description.getter();
}

uint64_t NotificationTrigger.object.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NotificationTrigger.createObserver(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  type metadata accessor for NotificationObserver();
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_retain();
  return NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(a3, a4, 1, 1, (uint64_t)sub_10007A644, v8);
}

uint64_t KeyValueObservationTrigger.createObserver(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v11 = (void *)swift_allocObject();
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = a1;
  v11[5] = a2;
  id v12 = a3;
  swift_retain();
  uint64_t v13 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
  swift_release();

  return v13;
}

uint64_t sub_100A8853C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyValueObservationTrigger.createObserver(_:)(a1, a2, *(void **)v3, *(void *)(v3 + 8), *(void *)(a3 + 16), *(void *)(a3 + 24));
}

char *UserDefaultsKeyValueTrigger.createObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v13 = sub_100023324(a5, a6, a3, a4, (uint64_t)sub_10001D0E0, v12);
  swift_bridgeObjectRelease();
  swift_release();
  return v13;
}

uint64_t PublisherTrigger.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Published.Publisher();
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t PublisherTrigger.createObserver(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v4 = sub_100063814(&qword_1010C6680);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)(a3 + 16);
  uint64_t v7 = (void *)type metadata accessor for Published.Publisher();
  unint64_t v8 = sub_10007B27C();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = WitnessTable;
  uint64_t v23 = sub_10007AC00(&qword_1010C6688, (void (*)(uint64_t))sub_10007B27C);
  id v29 = v7;
  unint64_t v30 = v8;
  uint64_t v31 = WitnessTable;
  uint64_t v32 = v23;
  uint64_t v10 = type metadata accessor for Publishers.ReceiveOn();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - v12;
  swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for Publishers.Drop();
  uint64_t v25 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  char v16 = (char *)&v22 - v15;
  id v29 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v6, 1, 1, v17);
  Publisher.receive<A>(on:options:)();
  sub_100A88AE8((uint64_t)v6);

  Publisher.dropFirst(_:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v18 = (void *)swift_allocObject();
  uint64_t v19 = v27;
  v18[2] = v26;
  v18[3] = v19;
  v18[4] = v28;
  swift_retain();
  swift_getWitnessTable();
  uint64_t v20 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v14);
  return v20;
}

uint64_t sub_100A88A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PublisherTrigger.createObserver(_:)(a1, a2, a3);
}

uint64_t sub_100A88A40()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100A88A78()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100A88AB0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100A88AE8(uint64_t a1)
{
  uint64_t v2 = sub_100063814(&qword_1010C6680);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100A88B48()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100A88B80()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

ValueMetadata *type metadata accessor for Whitetail()
{
  return &type metadata for Whitetail;
}

ValueMetadata *type metadata accessor for DistributedNotificationTrigger()
{
  return &type metadata for DistributedNotificationTrigger;
}

uint64_t assignWithCopy for NotificationTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

id *assignWithTake for NotificationTrigger(id *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NotificationTrigger()
{
  return &type metadata for NotificationTrigger;
}

uint64_t type metadata accessor for KeyValueObservationTrigger()
{
  return sub_10004CF5C();
}

uint64_t getEnumTagSinglePayload for UserDefaultsKeyValueTrigger(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserDefaultsKeyValueTrigger(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserDefaultsKeyValueTrigger()
{
  return &type metadata for UserDefaultsKeyValueTrigger;
}

uint64_t sub_100A88D24()
{
  uint64_t result = type metadata accessor for Published.Publisher();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100A88DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Published.Publisher();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_100A88E24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Published.Publisher();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_100A88E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Published.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_100A88EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Published.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_100A88F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Published.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100A88FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Published.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100A8902C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A89040);
}

uint64_t sub_100A89040(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Published.Publisher();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100A890B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A890C4);
}

uint64_t sub_100A890C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Published.Publisher();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PublisherTrigger()
{
  return sub_10004CF5C();
}

uint64_t sub_100A89150(uint64_t a1)
{
  uint64_t v2 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100A891AC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(_s20KeyValueRegistrationC10IdentifierVMa(0) - 8) + 80);
  uint64_t v2 = v0 + ((v1 + 16) & ~v1);
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_100A892B0()
{
  uint64_t v1 = *(void *)(_s20KeyValueRegistrationC10IdentifierVMa(0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  sub_100ACA2B8(v2);
}

uint64_t NotificationObserver.__allocating_init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(void *a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t NotificationObserver.deinit()
{
  [*(id *)(v0 + 40) removeObserver:v0 name:*(void *)(v0 + 16) object:swift_unknownObjectWeakLoadStrong()];
  swift_unknownObjectRelease();

  sub_100046744(v0 + 24);
  swift_release();
  return v0;
}

uint64_t NotificationObserver.__deallocating_deinit()
{
  [*(id *)(v0 + 40) removeObserver:v0 name:*(void *)(v0 + 16) object:swift_unknownObjectWeakLoadStrong()];
  swift_unknownObjectRelease();

  sub_100046744(v0 + 24);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t NotificationObserver.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = 7104878;
  _StringGuts.grow(_:)(65);
  v3._object = (void *)0x8000000100DD2010;
  v3._countAndFlagsBits = 0xD00000000000002ALL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x3D7463656A626F20;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = Strong;
    if ([Strong respondsToSelector:"description"])
    {
      id v8 = [v7 description];
      swift_unknownObjectRelease();
      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;

      goto LABEL_6;
    }
    swift_unknownObjectRelease();
  }
  uint64_t v10 = (void *)0xE300000000000000;
LABEL_6:
  v11._countAndFlagsBits = v2;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x3D7265746E656320;
  v12._object = (void *)0xE800000000000000;
  String.append(_:)(v12);
  sub_100057778(0, (unint64_t *)&unk_1010C77E0);
  uint64_t v13 = *(void **)(v1 + 40);
  id v14 = [self defaultCenter];
  char v15 = static NSObject.== infix(_:_:)();

  if (v15)
  {
    char v16 = (void *)0xE700000000000000;
    uint64_t v17 = 0x746C7561666564;
  }
  else
  {
    id v18 = [v13 description];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v16 = v19;
  }
  v20._countAndFlagsBits = v17;
  v20._object = v16;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 62;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return 0;
}

uint64_t sub_100A896F4()
{
  return NotificationObserver.debugDescription.getter();
}

uint64_t sub_100A89718()
{
  uint64_t v1 = type metadata accessor for Notification();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t BrightnessManager.__allocating_init(windowScene:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  BrightnessManager.init(windowScene:)(a1);
  return v2;
}

void *BrightnessManager.init(windowScene:)(void *a1)
{
  uint64_t v2 = v1;
  v1[2] = [objc_allocWithZone((Class)BrightnessSystemClient) init];
  v1[3] = sub_100A86790((uint64_t)&off_1010035F0);
  v1[4] = sub_100A86790((uint64_t)&off_101003640);
  v1[5] = sub_1000071E4((uint64_t)&off_101003690);
  v1[6] = sub_1000071E4((uint64_t)&off_1010036C8);
  v1[7] = _swiftEmptyArrayStorage;
  sub_100063814(&qword_1010C6930);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100E252E0;
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for NotificationObserver();
  swift_allocObject();
  id v6 = UISceneWillDeactivateNotification;
  id v7 = a1;
  *(void *)(v4 + 32) = NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(v6, (uint64_t)a1, 1, 1, (uint64_t)sub_100A89A68, v5);
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  swift_allocObject();
  id v9 = v7;
  *(void *)(v4 + 40) = NotificationObserver.init(name:object:dispatchOnMainThread:usesLocalNotificationCenter:handler:)(UISceneDidActivateNotification, (uint64_t)a1, 1, 1, (uint64_t)sub_100A89C08, v8);
  specialized Array._endMutation()();

  v2[7] = v4;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100A89A30()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100A89A68(uint64_t a1)
{
  return sub_100A89BA8(a1, v1, BrightnessManager.resetBrightnessToSystemDefault());
}

Swift::Void __swiftcall BrightnessManager.resetBrightnessToSystemDefault()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  NSString v3 = String._bridgeToObjectiveC()();
  [v1 setProperty:isa forKey:v3];

  Class v4 = Dictionary._bridgeToObjectiveC()().super.isa;
  id v5 = String._bridgeToObjectiveC()();
  [v1 setProperty:v4 forKey:v5];
}

uint64_t sub_100A89BA8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3();
    return swift_release();
  }
  return result;
}

uint64_t sub_100A89C08(uint64_t a1)
{
  return sub_100A89BA8(a1, v1, BrightnessManager.increaseBrightnessIfNeeded());
}

Swift::Void __swiftcall BrightnessManager.increaseBrightnessIfNeeded()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  NSString v3 = String._bridgeToObjectiveC()();
  [v1 setProperty:isa forKey:v3];

  Class v4 = Dictionary._bridgeToObjectiveC()().super.isa;
  id v5 = String._bridgeToObjectiveC()();
  [v1 setProperty:v4 forKey:v5];
}

uint64_t BrightnessManager.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t BrightnessManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BrightnessManager()
{
  return self;
}

uint64_t ControlEventHandler.__allocating_init<A>(control:events:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  ControlEventHandler.init<A>(control:events:handler:)(a1, a2, a3, a4, a5);
  return v10;
}

void *ControlEventHandler.init<A>(control:events:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  void v5[3] = a2;
  Swift::String v11 = (void *)swift_allocObject();
  v11[2] = a5;
  v11[3] = a3;
  v11[4] = a4;
  v5[4] = sub_100A8A020;
  v5[5] = v11;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v13 = (void *)Strong;
    swift_retain();
    [v13 addTarget:v5 action:"handleActionFromControl:" forControlEvents:a2];

    swift_release();
  }

  return v5;
}

void sub_100A89F64(void *a1, void (*a2)(uint64_t))
{
  uint64_t v4 = swift_dynamicCastUnknownClass();
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = a1;
    a2(v5);
  }
}

uint64_t sub_100A89FE8()
{
  swift_release();

  return swift_deallocObject();
}

void sub_100A8A020(void *a1)
{
  sub_100A89F64(a1, *(void (**)(uint64_t))(v1 + 24));
}

uint64_t ControlEventHandler.deinit()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    [Strong removeTarget:v0 action:"handleActionFromControl:" forControlEvents:*(void *)(v0 + 24)];
  }
  swift_unknownObjectWeakDestroy();
  swift_release();
  return v0;
}

uint64_t ControlEventHandler.__deallocating_deinit()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    [Strong removeTarget:v0 action:"handleActionFromControl:" forControlEvents:*(void *)(v0 + 24)];
  }
  swift_unknownObjectWeakDestroy();
  swift_release();

  return swift_deallocClassInstance();
}

void sub_100A8A17C(void *a1, uint64_t a2, void (*a3)(void *))
{
  if ([a1 sender])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1000568AC((uint64_t)v6, (uint64_t)v7);
  if (!v8)
  {
    sub_10005DEB8((uint64_t)v7);
LABEL_8:
    swift_beginAccess();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (!Strong) {
      return;
    }
    goto LABEL_9;
  }
  sub_100057778(0, &qword_1010C6AF8);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t Strong = v5;
LABEL_9:
  a3(Strong);
}

void sub_100A8A284(void *a1, uint64_t a2, void (*a3)(void *))
{
  if ([a1 sender])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1000568AC((uint64_t)v6, (uint64_t)v7);
  if (!v8)
  {
    sub_10005DEB8((uint64_t)v7);
LABEL_8:
    swift_beginAccess();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (!Strong) {
      return;
    }
    goto LABEL_9;
  }
  if (!swift_dynamicCast()) {
    goto LABEL_8;
  }
  uint64_t Strong = v5;
LABEL_9:
  a3(Strong);
}

uint64_t sub_100A8A380()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_100A8A3C0(void *a1)
{
  sub_100A8A284(a1, *(void *)(v1 + 24), *(void (**)(void *))(v1 + 32));
}

void sub_100A8A3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = *v3;
  sub_100057778(0, &qword_1010C6A00);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v9 = (void *)swift_allocObject();
  long long v9[2] = v8;
  v9[3] = a2;
  v9[4] = a3;
  swift_retain();
  id v10 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  [v7 addAction:v10 forControlEvents:a1];
}

uint64_t type metadata accessor for ControlEventHandler()
{
  return self;
}

uint64_t sub_100A8A514()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100A8A54C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_100A8A58C(void *a1)
{
  sub_100A8A17C(a1, *(void *)(v1 + 16), *(void (**)(void *))(v1 + 24));
}

uint64_t Datavault.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14MusicUtilities9Datavault_url;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t Datavault.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger;
  swift_beginAccess();
  return sub_100A8A664(v3, a1);
}

uint64_t sub_100A8A664(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010C6B00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Datavault.logger.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger;
  swift_beginAccess();
  sub_100A8A728(a1, v3);
  return swift_endAccess();
}

uint64_t sub_100A8A728(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010C6B00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*Datavault.logger.modify())()
{
  return j__swift_endAccess;
}

void *Datavault.__allocating_init(url:storageClass:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = URL.path.getter();
  unint64_t v12 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  swift_allocObject();
  uint64_t v13 = sub_100A8AAC0(v10, v12, (uint64_t)v9, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v13;
}

void *Datavault.__allocating_init(path:storageClass:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v14 = (char *)&v17 - v13;
  URL.init(fileURLWithPath:)();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
  swift_allocObject();
  uint64_t v15 = sub_100A8AAC0(a1, a2, (uint64_t)v11, a3, a4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  return v15;
}

void *sub_100A8AAC0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v84 = a5;
  unint64_t v85 = a2;
  uint64_t v75 = a4;
  uint64_t v76 = a1;
  uint64_t v77 = *v5;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v68 - v12;
  __chkstk_darwin(v14);
  char v16 = (char *)&v68 - v15;
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v81 = *(void *)(v17 - 8);
  uint64_t v82 = v17;
  __n128 v18 = __chkstk_darwin(v17);
  Swift::String v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = v5;
  Swift::String v21 = (char *)v5 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger;
  uint64_t v74 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56))((uint64_t)v5 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger, 1, 1, v7, v18);
  uint64_t v83 = a3;
  URL.deletingLastPathComponent()();
  id v22 = [self defaultManager];
  uint64_t v80 = v20;
  uint64_t v23 = v78;
  NSFileManager.createDirectoryIfNeeded(at:)();
  if (!v23)
  {
    id v29 = v10;
    unint64_t v30 = v16;
    uint64_t v78 = v21;
    uint64_t v70 = v13;
    uint64_t v31 = v74;
    uint64_t v73 = v7;
    uint64_t v71 = 0;
    v87[0] = 0;
    uint64_t v32 = v76;
    unint64_t v33 = v85;
    NSString v34 = String._bridgeToObjectiveC()();
    id v72 = v22;
    [v22 fileExistsAtPath:v34 isDirectory:v87];

    unint64_t v35 = v33;
    if (v87[0] == 1)
    {
      String.utf8CString.getter();
      String.utf8CString.getter();
      int v36 = rootless_check_datavault_flag();
      swift_release();
      swift_release();
      if (v36)
      {
        uint64_t v37 = v78;
        swift_beginAccess();
        uint64_t v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
        int v38 = v69(v37, 1, v73);
        uint64_t v25 = v79;
        if (!v38)
        {
          uint64_t v39 = v32;
          (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v30, v78, v73);
          unint64_t v40 = v85;
          swift_bridgeObjectRetain_n();
          os_log_type_t v41 = Logger.logObject.getter();
          os_log_type_t v42 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v41, v42))
          {
            uint64_t v43 = swift_slowAlloc();
            uint64_t v68 = swift_slowAlloc();
            v86[0] = v68;
            *(_DWORD *)uint64_t v43 = 136315138;
            swift_bridgeObjectRetain();
            *(void *)(v43 + 4) = sub_100075F3C(v39, v40, v86);
            uint64_t v32 = v39;
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v41, v42, "Found unsecure directory %s attempting to convert to datavault", (uint8_t *)v43, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v74 + 8))(v30, v73);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            (*(void (**)(char *, uint64_t))(v74 + 8))(v30, v73);
            uint64_t v32 = v39;
          }
        }
        String.utf8CString.getter();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        int v56 = rootless_convert_to_datavault();
        swift_release();
        swift_release();
        if (v56)
        {
          swift_bridgeObjectRelease();
          int v57 = errno.getter();
          sub_100A8B9B8();
          swift_allocError();
          *(_DWORD *)uint64_t v58 = v57;
          *(unsigned char *)(v58 + 4) = 1;
          swift_willThrow();

          uint64_t v24 = v81;
          goto LABEL_4;
        }
        unint64_t v59 = v78;
        swift_beginAccess();
        uint64_t v60 = v73;
        if (v69(v59, 1, v73))
        {
          uint64_t v50 = v81;
          uint64_t v51 = v82;
          (*(void (**)(char *, uint64_t))(v81 + 8))(v80, v82);
          swift_endAccess();

          unint64_t v35 = v85;
        }
        else
        {
          uint64_t v61 = v74;
          os_log_type_t v62 = v70;
          (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v70, v59, v60);
          swift_endAccess();
          unint64_t v35 = v85;
          swift_bridgeObjectRetain_n();
          BOOL v63 = Logger.logObject.getter();
          os_log_type_t v64 = static os_log_type_t.default.getter();
          BOOL v65 = os_log_type_enabled(v63, v64);
          id v66 = v72;
          if (v65)
          {
            uint64_t v67 = swift_slowAlloc();
            v86[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v67 = 136315138;
            swift_bridgeObjectRetain();
            *(void *)(v67 + 4) = sub_100075F3C(v32, v35, v86);
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v63, v64, "Datavault directory conversion successful %s", (uint8_t *)v67, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v61 + 8))(v70, v73);
          }
          else
          {
            swift_bridgeObjectRelease_n();

            (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v60);
          }
          uint64_t v50 = v81;
          uint64_t v51 = v82;
          (*(void (**)(char *, uint64_t))(v81 + 8))(v80, v82);
        }
LABEL_21:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))((uint64_t)v25 + OBJC_IVAR____TtC14MusicUtilities9Datavault_url, v83, v51);
        void v25[2] = v32;
        v25[3] = v35;
        return v25;
      }
      uint64_t v50 = v81;
      uint64_t v51 = v82;
      (*(void (**)(char *, uint64_t))(v81 + 8))(v80, v82);

      swift_bridgeObjectRelease();
      unint64_t v35 = v85;
    }
    else
    {
      uint64_t v44 = v78;
      swift_beginAccess();
      uint64_t v45 = v31;
      uint64_t v46 = v73;
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v44, 1, v73))
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v29, v44, v46);
        swift_bridgeObjectRetain_n();
        uint64_t v47 = Logger.logObject.getter();
        os_log_type_t v48 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v47, v48))
        {
          uint64_t v49 = swift_slowAlloc();
          v86[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v49 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v49 + 4) = sub_100075F3C(v76, v33, v86);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "Creating DataVault directory %s", (uint8_t *)v49, 0xCu);
          swift_arrayDestroy();
          unint64_t v35 = v33;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v45 + 8))(v29, v46);
      }
      S_IRUSR.getter();
      S_IWUSR.getter();
      S_IXUSR.getter();
      uint64_t v52 = v76;
      String.utf8CString.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      int v53 = rootless_mkdir_datavault();
      swift_release();
      swift_release();
      if (v53)
      {
        swift_bridgeObjectRelease();
        int v54 = errno.getter();
        sub_100A8B9B8();
        swift_allocError();
        *(_DWORD *)uint64_t v55 = v54;
        *(unsigned char *)(v55 + 4) = 0;
        swift_willThrow();

        goto LABEL_3;
      }
      uint64_t v50 = v81;
      uint64_t v51 = v82;
      (*(void (**)(char *, uint64_t))(v81 + 8))(v80, v82);

      uint64_t v32 = v52;
    }
    uint64_t v25 = v79;
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
LABEL_3:
  uint64_t v24 = v81;
  uint64_t v25 = v79;
LABEL_4:
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  uint64_t v27 = v82;
  v26(v83, v82);
  v26((uint64_t)v80, v27);
  sub_100A8B63C((uint64_t)v25 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger);
  swift_deallocPartialClassInstance();
  return v25;
}

uint64_t Datavault.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14MusicUtilities9Datavault_url;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100A8B63C(v0 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger);
  return v0;
}

uint64_t sub_100A8B63C(uint64_t a1)
{
  uint64_t v2 = sub_100063814(&qword_1010C6B00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Datavault.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14MusicUtilities9Datavault_url;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100A8B63C(v0 + OBJC_IVAR____TtC14MusicUtilities9Datavault_logger);

  return swift_deallocClassInstance();
}

uint64_t sub_100A8B754()
{
  return type metadata accessor for Datavault();
}

uint64_t type metadata accessor for Datavault()
{
  uint64_t result = qword_1010C6B30;
  if (!qword_1010C6B30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100A8B7A8()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_100A8B880();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100A8B880()
{
  if (!qword_1010C6B40)
  {
    type metadata accessor for Logger();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1010C6B40);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for Datavault.Error(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Datavault.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Datavault.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100A8B978(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u) {
    return *(unsigned __int8 *)(a1 + 4);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100A8B990(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Datavault.Error()
{
  return &type metadata for Datavault.Error;
}

unint64_t sub_100A8B9B8()
{
  unint64_t result = qword_1010C6BD0;
  if (!qword_1010C6BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C6BD0);
  }
  return result;
}

id sub_100A8BADC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DisplayLinkHandler();
  return [super dealloc];
}

uint64_t sub_100A8BB28()
{
  uint64_t result = swift_slowAlloc();
  qword_1010C6BD8 = result;
  return result;
}

id CADisplayLink.init(handler:)(uint64_t a1, uint64_t a2)
{
  int v4 = (objc_class *)type metadata accessor for DisplayLinkHandler();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  uint64_t v6 = &v5[OBJC_IVAR____TtC14MusicUtilitiesP33_A1FC62D80C043A876151FA559C82DA5918DisplayLinkHandler__handler];
  *(void *)uint64_t v6 = a1;
  *((void *)v6 + 1) = a2;
  v14.receiver = v5;
  v14.super_class = v4;
  swift_retain();
  id v7 = [super init];
  id v8 = [swift_getObjCClassFromMetadata() displayLinkWithTarget:v7 selector:"handleDisplayLinkFired:" v14.receiver, v14.super_class];
  uint64_t v9 = qword_1010C6348;
  id v10 = v8;
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = (const void *)qword_1010C6BD8;
  id v12 = v7;
  objc_setAssociatedObject(v10, v11, v12, (void *)1);

  swift_release();
  return v10;
}

uint64_t type metadata accessor for DisplayLinkHandler()
{
  return self;
}

uint64_t EdgePairSequence.next()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Array();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    type metadata accessor for Optional();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(a1, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    swift_getWitnessTable();
    RangeReplaceableCollection.removeFirst()();
    type metadata accessor for Optional();
    uint64_t v4 = swift_getTupleTypeMetadata2();
    swift_getWitnessTable();
    RangeReplaceableCollection<>.popLast()();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a1, 0, 1, v4);
  }
}

uint64_t sub_100A8BE40()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for EdgePairSequence()
{
  return sub_10004CF5C();
}

uint64_t static Task<>.sleep(for:)(double a1)
{
  *(double *)(v1 + 16) = a1;
  return _swift_task_switch(sub_100A8BE94, 0, 0);
}

uint64_t sub_100A8BE94(unint64_t a1)
{
  double v2 = *(double *)(v1 + 16) * 1000000000.0;
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v2 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return static Task<>.sleep(nanoseconds:)(a1);
  }
  unint64_t v3 = (unint64_t)v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100851B38;
  a1 = v3;
  return static Task<>.sleep(nanoseconds:)(a1);
}

uint64_t sub_100A8BF78(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 32) = a5;
  *(void *)(v6 + 40) = a6;
  *(double *)(v6 + 24) = a2;
  *(void *)(v6 + 16) = a1;
  return _swift_task_switch(sub_10000840C, 0, 0);
}

uint64_t sub_100A8BFA0()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t static Task<>.userFeedbackDelayed(task:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100063814(&qword_1010C6C98);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter();
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  uint64_t v10 = static Task<>.delayed(by:priority:task:)((uint64_t)v8, a1, a2, a3, 2.0);
  sub_100066D00((uint64_t)v8);
  return v10;
}

id CASpringAnimation.springParameters.getter()
{
  [v0 mass];
  double v2 = v1;
  [v0 stiffness];
  double v4 = v3;
  [v0 damping];
  double v6 = v5;
  id v7 = objc_allocWithZone((Class)UISpringTimingParameters);

  return [v7 initWithMass:v2 stiffness:v4 damping:v6 initialVelocity:0.0];
}

void CASpringAnimation.springParameters.setter(void *a1)
{
  [a1 mass];
  [v1 setMass:];
  [a1 stiffness];
  [v1 setStiffness:];
  [a1 damping];
  [v1 setDamping:];
  [v1 setInitialVelocity:0.0];
}

void (*CASpringAnimation.springParameters.modify(void *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  [v1 mass];
  double v4 = v3;
  [v1 stiffness];
  double v6 = v5;
  [v1 damping];
  *a1 = [objc_allocWithZone((Class)UISpringTimingParameters) initWithMass:v4 stiffness:v6 damping:v7 initialVelocity:0.0];
  return sub_100A8C2C4;
}

void sub_100A8C2C4(uint64_t a1, char a2)
{
  id v2 = *(id *)a1;
  double v3 = *(void **)(a1 + 8);
  id v5 = *(id *)a1;
  if (a2)
  {
    id v4 = v2;
    [v4 mass];
    [v3 setMass:];
    [v4 stiffness];
    [v3 setStiffness:];
    [v4 damping];
    [v3 setDamping:];
    [v3 setInitialVelocity:0.0];
  }
  else
  {
    [v2 mass];
    [v3 setMass:];
    [v5 stiffness];
    [v3 setStiffness:];
    [v5 damping];
    [v3 setDamping:];
    [v3 setInitialVelocity:0.0];
  }
}

void static UIView.animate(withSpringTimingParameters:delay:options:animations:completion:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, double a7)
{
  [a1 settlingDuration];
  double v15 = v14;
  [a1 mass];
  double v17 = v16;
  [a1 stiffness];
  double v19 = v18;
  [a1 damping];
  double v21 = v20;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v23 = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256;
  uint64_t v25 = sub_100020238;
  uint64_t v26 = &unk_101004708;
  id v22 = _Block_copy(&v23);
  swift_retain();
  swift_release();
  if (a5)
  {
    uint64_t v27 = a5;
    uint64_t v28 = a6;
    uint64_t v23 = _NSConcreteStackBlock;
    uint64_t v24 = 1107296256;
    uint64_t v25 = sub_1001695E8;
    uint64_t v26 = &unk_101004730;
    a5 = _Block_copy(&v23);
    swift_retain();
    swift_release();
  }
  [self _animateUsingSpringWithDuration:a2 delay:v22 options:a5 mass:v15 stiffness:a7 damping:v17 initialVelocity:v19 animations:v21 completion:0.0];
  _Block_release(a5);
  _Block_release(v22);
}

id static UIView.animate(withTimingFunction:duration:delay:options:animations:completion:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, double a7, double a8)
{
  double v16 = self;
  [v16 begin];
  [v16 setAnimationTimingFunction:a1];
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  double v19 = _NSConcreteStackBlock;
  uint64_t v20 = 1107296256;
  double v21 = sub_100020238;
  id v22 = &unk_101004758;
  double v17 = _Block_copy(&v19);
  swift_retain();
  swift_release();
  if (a5)
  {
    uint64_t v23 = a5;
    uint64_t v24 = a6;
    double v19 = _NSConcreteStackBlock;
    uint64_t v20 = 1107296256;
    double v21 = sub_1001695E8;
    id v22 = &unk_101004780;
    a5 = _Block_copy(&v19);
    swift_retain();
    swift_release();
  }
  [self animateWithDuration:a2 delay:v17 options:a5 animations:a7 completion:a8];
  _Block_release(a5);
  _Block_release(v17);
  return [v16 commit];
}

void sub_100A8C77C(void *a1)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating))
  {
    [a1 duration];
    uint64_t v2 = v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration;
    *(void *)uint64_t v2 = v3;
    *(unsigned char *)(v2 + 8) = 0;
    CFTimeInterval v4 = CACurrentMediaTime();
    uint64_t v5 = v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime;
    *(CFTimeInterval *)uint64_t v5 = v4;
    *(unsigned char *)(v5 + 8) = 0;
    id v6 = [self displayLinkWithTarget:v1 selector:"displayLinkFiredWithDisplayLink:"];
    uint64_t v7 = OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink;
    id v8 = *(void **)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink);
    *(void *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink) = v6;

    uint64_t v9 = *(void **)(v1 + v7);
    if (v9)
    {
      uint64_t v10 = self;
      id v11 = v9;
      id v12 = [v10 currentRunLoop];
      [v11 addToRunLoop:v12 forMode:NSDefaultRunLoopMode];
    }
    else
    {
      __break(1u);
    }
  }
}

id sub_100A8C988(void *a1)
{
  id result = [a1 timestamp];
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime + 8))
  {
    __break(1u);
    goto LABEL_9;
  }
  CFTimeInterval v4 = *(void (**)(uint64_t, double))(v1
                                              + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating);
  if (!v4) {
    return result;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration + 8))
  {
LABEL_9:
    __break(1u);
    return result;
  }
  double v5 = (v3 - *(double *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime))
     / *(double *)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration);
  uint64_t v6 = swift_retain();
  v4(v6, v5);

  return (id)sub_10006ADFC((uint64_t)v4);
}

uint64_t CAAnimation.progress.getter()
{
  return sub_100A8CE5C(&OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating, (void (*)(void, void))sub_1000CBB50);
}

uint64_t type metadata accessor for CAAnimationCompletionHandler()
{
  return self;
}

id CAAnimation.progress.setter(uint64_t a1, uint64_t a2)
{
  double v3 = v2;
  id result = [v3 delegate];
  if (result)
  {
    type metadata accessor for CAAnimationCompletionHandler();
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      id v8 = (uint64_t *)(v7 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating);
      uint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating);
      *id v8 = a1;
      v8[1] = a2;
      sub_10006ADFC(v9);
      return (id)swift_unknownObjectRelease();
    }
    id result = (id)swift_unknownObjectRelease();
  }
  if (a1)
  {
    uint64_t v10 = (objc_class *)type metadata accessor for CAAnimationCompletionHandler();
    id v11 = (char *)objc_allocWithZone(v10);
    id v12 = &v11[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    *(void *)id v12 = 0;
    *((void *)v12 + 1) = 0;
    uint64_t v13 = &v11[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    *(void *)uint64_t v13 = 0;
    *((void *)v13 + 1) = 0;
    double v14 = &v11[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime];
    *(void *)double v14 = 0;
    v14[8] = 1;
    double v15 = &v11[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration];
    *(void *)double v15 = 0;
    v15[8] = 1;
    *(void *)&v11[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink] = 0;
    v22.receiver = v11;
    v22.super_class = v10;
    swift_retain_n();
    double v16 = (char *)[super init];
    double v17 = (uint64_t *)&v16[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    uint64_t v18 = *(void *)&v16[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    *double v17 = a1;
    v17[1] = a2;
    sub_10006ADFC(v18);
    double v19 = &v16[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    uint64_t v20 = *(void *)&v16[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    *(void *)double v19 = 0;
    *((void *)v19 + 1) = 0;
    sub_10006ADFC(v20);
    double v21 = v16;
    [v3 setDelegate:v21];
    sub_10006ADFC(a1);

    return (id)sub_10006ADFC(a1);
  }
  return result;
}

uint64_t (*CAAnimation.progress.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t)v1;
  if ([v1 delegate])
  {
    type metadata accessor for CAAnimationCompletionHandler();
    uint64_t v3 = swift_dynamicCastClass();
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating);
      uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating + 8);
      sub_10007B674(v4);
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  *a1 = v4;
  a1[1] = v5;
  return sub_100A8CDFC;
}

uint64_t sub_100A8CDFC(uint64_t *a1, char a2)
{
  return sub_100A8D1B0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CAAnimation.progress.setter, (void (*)(uint64_t, uint64_t))sub_1000CBB50, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBB54);
}

uint64_t CAAnimation.completion.getter()
{
  return sub_100A8CE5C(&OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion, (void (*)(void, void))sub_10007B674);
}

uint64_t sub_100A8CE5C(void *a1, void (*a2)(void, void))
{
  if (![v2 delegate]) {
    return 0;
  }
  type metadata accessor for CAAnimationCompletionHandler();
  uint64_t v5 = swift_dynamicCastClass();
  if (v5)
  {
    uint64_t v6 = (void *)(v5 + *a1);
    uint64_t v7 = *v6;
    a2(*v6, v6[1]);
  }
  else
  {
    uint64_t v7 = 0;
  }
  swift_unknownObjectRelease();
  return v7;
}

id CAAnimation.completion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id result = [v3 delegate];
  if (result)
  {
    type metadata accessor for CAAnimationCompletionHandler();
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      id v8 = (uint64_t *)(v7 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion);
      uint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion);
      *id v8 = a1;
      v8[1] = a2;
      sub_10006ADFC(v9);
      return (id)swift_unknownObjectRelease();
    }
    id result = (id)swift_unknownObjectRelease();
  }
  if (a1)
  {
    uint64_t v10 = (objc_class *)type metadata accessor for CAAnimationCompletionHandler();
    id v11 = (char *)objc_allocWithZone(v10);
    id v12 = &v11[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    *(void *)id v12 = 0;
    *((void *)v12 + 1) = 0;
    uint64_t v13 = &v11[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    *(void *)uint64_t v13 = 0;
    *((void *)v13 + 1) = 0;
    double v14 = &v11[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime];
    *(void *)double v14 = 0;
    v14[8] = 1;
    double v15 = &v11[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration];
    *(void *)double v15 = 0;
    v15[8] = 1;
    *(void *)&v11[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink] = 0;
    v22.receiver = v11;
    v22.super_class = v10;
    swift_retain_n();
    double v16 = [super init];
    double v17 = &v16[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    uint64_t v18 = *(void *)&v16[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animating];
    *(void *)double v17 = 0;
    *((void *)v17 + 1) = 0;
    sub_10006ADFC(v18);
    double v19 = (uint64_t *)&v16[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    uint64_t v20 = *(void *)&v16[OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion];
    *double v19 = a1;
    v19[1] = a2;
    sub_10006ADFC(v20);
    double v21 = v16;
    [v3 setDelegate:v21];
    sub_10006ADFC(a1);

    return (id)sub_10006ADFC(a1);
  }
  return result;
}

uint64_t (*CAAnimation.completion.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t)v1;
  if ([v1 delegate])
  {
    type metadata accessor for CAAnimationCompletionHandler();
    uint64_t v3 = swift_dynamicCastClass();
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion);
      uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion + 8);
      sub_10007B674(v4);
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  *a1 = v4;
  a1[1] = v5;
  return sub_100A8D170;
}

uint64_t sub_100A8D170(uint64_t *a1, char a2)
{
  return sub_100A8D1B0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CAAnimation.completion.setter, (void (*)(uint64_t, uint64_t))sub_10007B674, (uint64_t (*)(uint64_t, uint64_t))sub_10006ADFC);
}

uint64_t sub_100A8D1B0(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t CALayer.addAsyncAnimation(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = type metadata accessor for MainActor();
  v4[7] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v6;
  v4[9] = v5;
  return _swift_task_switch(sub_100A8D2F4, v6, v5);
}

{
  uint64_t v3;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v7 = sub_100063814(&qword_1010C6CE0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v13 = a1;
  double v14 = v3;
  double v15 = a2;
  double v16 = a3;
  (*(void (**)(unsigned char *, void, __n128))(v10 + 104))(&v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v8);
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

uint64_t sub_100A8D2F4()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v4 = v0[2];
  uint64_t v5 = static MainActor.shared.getter();
  v0[10] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[11] = v6;
  _OWORD v6[2] = v4;
  v6[3] = v1;
  v6[4] = v3;
  uint64_t v6[5] = v2;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[12] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100A8D41C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 13, v5, &protocol witness table for MainActor, 0xD00000000000001CLL, 0x8000000100DD2260, sub_100A8DACC, v6, &type metadata for Bool);
}

uint64_t sub_100A8D41C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(void *)(v1 + 64);
  return _swift_task_switch(sub_100A8D57C, v3, v2);
}

uint64_t sub_100A8D57C()
{
  swift_release();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 104);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

id sub_100A8D5E0(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v40 = a3;
  uint64_t v8 = sub_100063814(&qword_1010C6D88);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v12 + v11, (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  CAAnimation.completion.setter((uint64_t)sub_100A8E60C, v12);
  uint64_t v13 = self;
  [v13 begin];
  [v13 setDisableActions:1];
  if (a5) {
    NSString v14 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v14 = 0;
  }
  [v40 addAnimation:a2 forKey:v14];

  self;
  uint64_t v15 = swift_dynamicCastObjCClass();
  if (v15)
  {
    if (a5)
    {
      double v16 = (void *)v15;
      id v17 = a2;
      id v18 = [v16 toValue];
      NSString v19 = String._bridgeToObjectiveC()();
      [v40 setValue:v18 forKey:v19];

      swift_unknownObjectRelease();
    }
    return [v13 commit];
  }
  self;
  uint64_t v20 = swift_dynamicCastObjCClass();
  if (!v20) {
    return [v13 commit];
  }
  double v21 = (void *)v20;
  id v22 = a2;
  id result = [v21 animations];
  unint64_t v24 = (unint64_t)_swiftEmptyArrayStorage;
  if (result)
  {
    uint64_t v25 = result;
    sub_100A8E5C0();
    unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v41 = (unint64_t)_swiftEmptyArrayStorage;
    if (v26 >> 62)
    {
      swift_bridgeObjectRetain();
      id result = (id)_CocoaArrayWrapper.endIndex.getter();
      uint64_t v27 = (uint64_t)result;
      if (result) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id result = (id)swift_bridgeObjectRetain();
      if (v27)
      {
LABEL_11:
        if (v27 < 1) {
          goto LABEL_41;
        }
        for (uint64_t i = 0; i != v27; ++i)
        {
          if ((v26 & 0xC000000000000001) != 0) {
            id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v29 = *(id *)(v26 + 8 * i + 32);
          }
          unint64_t v30 = v29;
          self;
          if (swift_dynamicCastObjCClass())
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v24 = v41;
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v24 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_25:
    id result = (id)swift_bridgeObjectRelease();
  }
  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    id result = (id)swift_bridgeObjectRelease();
    if (v31) {
      goto LABEL_28;
    }
    goto LABEL_38;
  }
  uint64_t v31 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v31)
  {
LABEL_38:

    swift_bridgeObjectRelease();
    return [v13 commit];
  }
LABEL_28:
  id v38 = v22;
  uint64_t v39 = v13;
  if (v31 >= 1)
  {
    for (uint64_t j = 0; j != v31; ++j)
    {
      if ((v24 & 0xC000000000000001) != 0) {
        id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v33 = *(id *)(v24 + 8 * j + 32);
      }
      NSString v34 = v33;
      id v35 = [v33 keyPath:v38];
      if (v35)
      {
        id v36 = v35;
        id v37 = [v34 toValue];
        [v40 setValue:v37 forKey:v36];

        swift_unknownObjectRelease();
        NSString v34 = v36;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = v39;
    return [v13 commit];
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

id sub_100A8DACC(uint64_t a1)
{
  return sub_100A8D5E0(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

id sub_100A8DBF0(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v46 = a5;
  id v47 = a3;
  uint64_t v43 = a4;
  id v45 = a1;
  uint64_t v7 = sub_100063814(&qword_1010C6D70);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __n128 v10 = __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = *(void (**)(char *, void *, uint64_t, __n128))(v8 + 16);
  v44(v11, a1, v7, v10);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = swift_allocObject();
  NSString v14 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  v14(v13 + v12, v11, v7);
  CAAnimation.progress.setter((uint64_t)sub_100A8E4CC, v13);
  ((void (*)(char *, id, uint64_t))v44)(v11, v45, v7);
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v7;
  id v17 = v46;
  v14(v15 + v12, v11, v16);
  CAAnimation.completion.setter((uint64_t)sub_100A8E54C, v15);
  id v18 = self;
  [v18 begin:v43];
  [v18 setDisableActions:1];
  if (v17) {
    NSString v19 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v19 = 0;
  }
  [v47 addAnimation:a2 forKey:v19];

  self;
  uint64_t v20 = swift_dynamicCastObjCClass();
  if (v20)
  {
    if (v17)
    {
      double v21 = (void *)v20;
      id v22 = a2;
      id v23 = [v21 toValue];
      NSString v24 = String._bridgeToObjectiveC()();
      [v47 setValue:v23 forKey:v24];

      swift_unknownObjectRelease();
    }
    return [v18 commit];
  }
  self;
  uint64_t v25 = swift_dynamicCastObjCClass();
  if (!v25) {
    return [v18 commit];
  }
  unint64_t v26 = (void *)v25;
  id v27 = a2;
  id result = [v26 animations];
  unint64_t v29 = (unint64_t)_swiftEmptyArrayStorage;
  if (result)
  {
    unint64_t v30 = result;
    sub_100A8E5C0();
    unint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v48 = (unint64_t)_swiftEmptyArrayStorage;
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain();
      id result = (id)_CocoaArrayWrapper.endIndex.getter();
      uint64_t v32 = (uint64_t)result;
      if (result) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id result = (id)swift_bridgeObjectRetain();
      if (v32)
      {
LABEL_11:
        if (v32 < 1) {
          goto LABEL_41;
        }
        for (uint64_t i = 0; i != v32; ++i)
        {
          if ((v31 & 0xC000000000000001) != 0) {
            id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v34 = *(id *)(v31 + 8 * i + 32);
          }
          id v35 = v34;
          self;
          if (swift_dynamicCastObjCClass())
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v29 = v48;
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v29 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_25:
    id result = (id)swift_bridgeObjectRelease();
  }
  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    id result = (id)swift_bridgeObjectRelease();
    if (v36) {
      goto LABEL_28;
    }
    goto LABEL_38;
  }
  uint64_t v36 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v36)
  {
LABEL_38:

    swift_bridgeObjectRelease();
    return [v18 commit];
  }
LABEL_28:
  id v45 = v27;
  uint64_t v46 = v18;
  if (v36 >= 1)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      if ((v29 & 0xC000000000000001) != 0) {
        id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v38 = *(id *)(v29 + 8 * j + 32);
      }
      uint64_t v39 = v38;
      id v40 = [v38 keyPath];
      if (v40)
      {
        id v41 = v40;
        id v42 = [v39 toValue];
        [v47 setValue:v42 forKey:v41];

        swift_unknownObjectRelease();
        uint64_t v39 = v41;
      }
    }
    swift_bridgeObjectRelease();
    id v18 = v46;
    return [v18 commit];
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

id sub_100A8E158(void *a1)
{
  return sub_100A8DBF0(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100A8E164(double a1)
{
  uint64_t v2 = sub_100063814(&qword_1010C6D80);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = a1;
  char v8 = 0;
  sub_100063814(&qword_1010C6D70);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_100A8E258(char a1)
{
  uint64_t v2 = sub_100063814(&qword_1010C6D80);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a1 & 1;
  char v7 = 1;
  sub_100063814(&qword_1010C6D70);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  AsyncStream.Continuation.finish()();
}

id static CATransaction.performWithoutAnimation(_:)(void (*a1)(id))
{
  uint64_t v2 = self;
  [v2 begin];
  a1([v2 setDisableActions:1]);

  return [v2 commit];
}

ValueMetadata *type metadata accessor for CALayer.AnimationStatus()
{
  return &type metadata for CALayer.AnimationStatus;
}

void sub_100A8E3F0(char a1)
{
  uint64_t v3 = OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_displayLink);
  if (v4)
  {
    [v4 invalidate];
    uint64_t v5 = *(void **)(v1 + v3);
    *(void *)(v1 + v3) = 0;
  }
  uint64_t v6 = v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_animationDuration;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_startTime;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  char v8 = *(void (**)(void))(v1 + OBJC_IVAR____TtC14MusicUtilities28CAAnimationCompletionHandler_completion);
  if (v8)
  {
    swift_retain();
    v8(a1 & 1);
    sub_10006ADFC((uint64_t)v8);
  }
}

uint64_t sub_100A8E4C0()
{
  return sub_10021F5FC(&qword_1010C6D70);
}

uint64_t sub_100A8E4CC(double a1)
{
  sub_100063814(&qword_1010C6D70);

  return sub_100A8E164(a1);
}

uint64_t sub_100A8E540()
{
  return sub_10021F5FC(&qword_1010C6D70);
}

void sub_100A8E54C(char a1)
{
  sub_100063814(&qword_1010C6D70);

  sub_100A8E258(a1);
}

unint64_t sub_100A8E5C0()
{
  unint64_t result = qword_1010C6D78;
  if (!qword_1010C6D78)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1010C6D78);
  }
  return result;
}

uint64_t sub_100A8E600()
{
  return sub_10021F5FC(&qword_1010C6D88);
}

uint64_t sub_100A8E60C()
{
  return CheckedContinuation.resume(returning:)();
}

double CGSize.nonNegative()(double result)
{
  if (result < 0.0) {
    return 0.0;
  }
  return result;
}

double static CGSize.* infix(_:_:)(double a1, double a2, double a3)
{
  return a1 * a3;
}

CGFloat static CGAffineTransform.+ infix(_:_:)@<D0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  long long v4 = a1[1];
  *(_OWORD *)&t1.a = *a1;
  *(_OWORD *)&t1.c = v4;
  *(_OWORD *)&t1.tx = a1[2];
  long long v5 = a2[1];
  *(_OWORD *)&t2.a = *a2;
  *(_OWORD *)&t2.c = v5;
  *(_OWORD *)&t2.tx = a2[2];
  CGAffineTransformConcat(&v9, &t1, &t2);
  CGFloat result = v9.a;
  long long v7 = *(_OWORD *)&v9.c;
  long long v8 = *(_OWORD *)&v9.tx;
  *a3 = *(_OWORD *)&v9.a;
  a3[1] = v7;
  a3[2] = v8;
  return result;
}

void sub_100A8E734()
{
  static CGPoint.topLeft = 0;
  *(void *)algn_10112BDA8 = 0;
}

uint64_t *CGPoint.topLeft.unsafeMutableAddressor()
{
  if (qword_1010C6350 != -1) {
    swift_once();
  }
  return &static CGPoint.topLeft;
}

double static CGPoint.topLeft.getter()
{
  if (qword_1010C6350 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return *(double *)&static CGPoint.topLeft;
}

uint64_t static CGPoint.topLeft.setter(double a1, double a2)
{
  if (qword_1010C6350 != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  static CGPoint.topLeft = *(void *)&a1;
  *(double *)algn_10112BDA8 = a2;
  return result;
}

uint64_t (*static CGPoint.topLeft.modify())()
{
  if (qword_1010C6350 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t *CGPoint.topCenter.unsafeMutableAddressor()
{
  return &static CGPoint.topCenter;
}

double static CGPoint.topCenter.getter()
{
  return *(double *)&static CGPoint.topCenter;
}

uint64_t static CGPoint.topCenter.setter(double a1, double a2)
{
  uint64_t result = swift_beginAccess();
  static CGPoint.topCenter = *(void *)&a1;
  *(double *)algn_1010C6DF8 = a2;
  return result;
}

uint64_t (*static CGPoint.topCenter.modify())()
{
  return j_j__swift_endAccess;
}

double sub_100A8EA0C()
{
  double result = 1.0;
  static CGPoint.topRight = xmmword_100E26B30;
  return result;
}

long long *CGPoint.topRight.unsafeMutableAddressor()
{
  if (qword_1010C6358 != -1) {
    swift_once();
  }
  return &static CGPoint.topRight;
}

double static CGPoint.topRight.getter()
{
  return sub_100A8F0F0(&qword_1010C6358, (uint64_t)&static CGPoint.topRight);
}

uint64_t static CGPoint.topRight.setter(double a1, double a2)
{
  return sub_100A8F178(&qword_1010C6358, (double *)&static CGPoint.topRight, (double *)&static CGPoint.topRight + 1, a1, a2);
}

uint64_t (*static CGPoint.topRight.modify())()
{
  if (qword_1010C6358 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t *CGPoint.centerLeft.unsafeMutableAddressor()
{
  return &static CGPoint.centerLeft;
}

double static CGPoint.centerLeft.getter()
{
  return *(double *)&static CGPoint.centerLeft;
}

uint64_t static CGPoint.centerLeft.setter(double a1, double a2)
{
  uint64_t result = swift_beginAccess();
  static CGPoint.centerLeft = *(void *)&a1;
  unk_1010C6E08 = *(void *)&a2;
  return result;
}

uint64_t (*static CGPoint.centerLeft.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t *CGPoint.center.unsafeMutableAddressor()
{
  return &static CGPoint.center;
}

double static CGPoint.center.getter()
{
  return *(double *)&static CGPoint.center;
}

uint64_t static CGPoint.center.setter(double a1, double a2)
{
  uint64_t result = swift_beginAccess();
  static CGPoint.center = *(void *)&a1;
  unk_1010C6E18 = *(void *)&a2;
  return result;
}

uint64_t (*static CGPoint.center.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t *CGPoint.centerRight.unsafeMutableAddressor()
{
  return &static CGPoint.centerRight;
}

double static CGPoint.centerRight.getter()
{
  return *(double *)&static CGPoint.centerRight;
}

uint64_t static CGPoint.centerRight.setter(double a1, double a2)
{
  uint64_t result = swift_beginAccess();
  static CGPoint.centerRight = *(void *)&a1;
  unk_1010C6E28 = *(void *)&a2;
  return result;
}

uint64_t (*static CGPoint.centerRight.modify())()
{
  return j_j__swift_endAccess;
}

double sub_100A8EE38()
{
  double result = 0.0;
  static CGPoint.bottomLeft = xmmword_100E26B20;
  return result;
}

long long *CGPoint.bottomLeft.unsafeMutableAddressor()
{
  if (qword_1010C6360 != -1) {
    swift_once();
  }
  return &static CGPoint.bottomLeft;
}

double static CGPoint.bottomLeft.getter()
{
  return sub_100A8F0F0(&qword_1010C6360, (uint64_t)&static CGPoint.bottomLeft);
}

uint64_t static CGPoint.bottomLeft.setter(double a1, double a2)
{
  return sub_100A8F178(&qword_1010C6360, (double *)&static CGPoint.bottomLeft, (double *)&static CGPoint.bottomLeft + 1, a1, a2);
}

uint64_t (*static CGPoint.bottomLeft.modify())()
{
  if (qword_1010C6360 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t *CGPoint.bottomCenter.unsafeMutableAddressor()
{
  return &static CGPoint.bottomCenter;
}

double static CGPoint.bottomCenter.getter()
{
  return *(double *)&static CGPoint.bottomCenter;
}

uint64_t static CGPoint.bottomCenter.setter(double a1, double a2)
{
  uint64_t result = swift_beginAccess();
  static CGPoint.bottomCenter = *(void *)&a1;
  unk_1010C6E38 = *(void *)&a2;
  return result;
}

uint64_t (*static CGPoint.bottomCenter.modify())()
{
  return j_j__swift_endAccess;
}

__n128 sub_100A8F06C()
{
  __asm { FMOV            V0.2D, #1.0 }
  static CGPoint.bottomRight = (__int128)result;
  return result;
}

long long *CGPoint.bottomRight.unsafeMutableAddressor()
{
  if (qword_1010C6368 != -1) {
    swift_once();
  }
  return &static CGPoint.bottomRight;
}

double static CGPoint.bottomRight.getter()
{
  return sub_100A8F0F0(&qword_1010C6368, (uint64_t)&static CGPoint.bottomRight);
}

double sub_100A8F0F0(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return *(double *)a2;
}

uint64_t static CGPoint.bottomRight.setter(double a1, double a2)
{
  return sub_100A8F178(&qword_1010C6368, (double *)&static CGPoint.bottomRight, (double *)&static CGPoint.bottomRight + 1, a1, a2);
}

uint64_t sub_100A8F178(void *a1, double *a2, double *a3, double a4, double a5)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  *a2 = a4;
  *a3 = a5;
  return result;
}

uint64_t (*static CGPoint.bottomRight.modify())()
{
  if (qword_1010C6368 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t CGRect.outset(by:for:)()
{
  return CGRect.inset(by:for:)();
}

CTFrameRef CTFramesetterRef.createFrame(_:)(double a1, double a2, double a3, double a4)
{
  long long v5 = CGPathCreateWithRect(*(CGRect *)&a1, 0);
  v8.location = 0;
  v8.length = 0;
  CTFrameRef Frame = CTFramesetterCreateFrame(v4, v8, v5, 0);

  return Frame;
}

double CTFramesetterRef.suggestedFrameSize(constraints:)(double a1, double a2)
{
  v4.location = 0;
  v4.length = 0;
  *(void *)&double result = *(_OWORD *)&CTFramesetterSuggestFrameSizeWithConstraints(v2, v4, 0, *(CGSize *)&a1, 0);
  return result;
}

Swift::Void __swiftcall CTFrameRef.draw(in:)(CGContextRef in)
{
  CTFrameDraw(v1, in);
}

void *CTFrameRef.lines.getter()
{
  return sub_100A8FD6C((uint64_t (*)(uint64_t))&_CTFrameGetLines, type metadata accessor for CTLine);
}

CGPoint **CTFrameRef.lineOrigins.getter()
{
  CFArrayRef v1 = CTFrameGetLines(v0);
  type metadata accessor for CTLine(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = (CGPoint **)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(CGPoint ***)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t v3 = v0;
  CFRange v4 = sub_100A91688(v2, v3);

  return v4;
}

CGPoint **sub_100A8F3FC(CGPoint **result, uint64_t *a2, CTFrameRef frame)
{
  uint64_t v3 = *result;
  if (*result)
  {
    v9.location = 0;
    v9.length = 0;
    CTFrameGetLineOrigins(frame, v9, v3);
    CFArrayRef v7 = CTFrameGetLines(frame);
    type metadata accessor for CTLine(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    double result = (CGPoint **)swift_bridgeObjectRelease();
    *a2 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *CTFrameRef.lineFrames(lines:origins:flippedCoordinates:useExtendedLineBounds:)(unint64_t a1, uint64_t a2, char a3, void *a4)
{
  if (!(a1 >> 62))
  {
    uint64_t v13 = *(const __CTLine **)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_3;
    }
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = (const __CTLine *)_CocoaArrayWrapper.endIndex.getter();
  if (!v13) {
    goto LABEL_39;
  }
LABEL_3:
  unint64_t v39 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    goto LABEL_43;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_45;
  }
  for (uint64_t i = (const __CTLine *)*(id *)(a1 + 32);
        ;
        uint64_t i = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)())
  {
    uint64_t v15 = i;
    uint64_t v4 = *(void *)(a2 + 16);
    if (!v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return _swiftEmptyArrayStorage;
    }
    uint64_t v9 = *(void *)(a2 + 32);
    double v8 = *(double *)(a2 + 40);
    if (a4) {
      CTLineBoundsOptions v16 = 32;
    }
    else {
      CTLineBoundsOptions v16 = 0;
    }
    CTLineBoundsOptions options = v16;
    CGRect BoundsWithOptions = CTLineGetBoundsWithOptions(i, v16);
    CGFloat width = BoundsWithOptions.size.width;
    CGFloat height = BoundsWithOptions.size.height;
    if ((a3 & 1) == 0) {
      double v8 = 0.0;
    }
    long long v5 = v15;
    a4 = _swiftEmptyArrayStorage;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_45:
    }
      a4 = sub_100A9113C(0, a4[2] + 1, 1, a4);
    unint64_t v18 = a4[2];
    unint64_t v17 = a4[3];
    if (v18 >= v17 >> 1) {
      a4 = sub_100A9113C((void *)(v17 > 1), v18 + 1, 1, a4);
    }
    a4[2] = v18 + 1;
    NSString v19 = (CGFloat *)&a4[5 * v18];
    *((void *)v19 + 4) = v5;
    *((void *)v19 + 5) = v9;
    v19[6] = 0.0;
    v19[7] = width;
    v19[8] = height;

    if (v13 == (const __CTLine *)1) {
      goto LABEL_16;
    }
    if (v39)
    {
      uint64_t v20 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_22;
    }
    if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL) {
      break;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    ;
  }
  uint64_t v20 = (const __CTLine *)*(id *)(a1 + 40);
LABEL_22:
  double v21 = v20;
  id v22 = (char *)(v4 - 1);
  if (v4 != 1)
  {
    id v23 = 0;
    NSString v24 = (double *)(a2 + 56);
    uint64_t v25 = (char *)v13 - 2;
    double v26 = 0.0;
    while (1)
    {
      uint64_t v28 = *((void *)v24 - 1);
      double v29 = *v24;
      CGRect v42 = CTLineGetBoundsWithOptions(v21, options);
      CGFloat v30 = v42.size.width;
      CGFloat v31 = v42.size.height;
      double v32 = v26 + v8 - v29;
      if (a3)
      {
        double v8 = v29;
        double v26 = v32;
        double v33 = v32;
      }
      else
      {
        double v33 = 0.0;
      }
      uint64_t v13 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a4 = sub_100A9113C(0, a4[2] + 1, 1, a4);
      }
      unint64_t v35 = a4[2];
      unint64_t v34 = a4[3];
      if (v35 >= v34 >> 1) {
        a4 = sub_100A9113C((void *)(v34 > 1), v35 + 1, 1, a4);
      }
      a4[2] = v35 + 1;
      uint64_t v36 = (double *)&a4[5 * v35];
      *((void *)v36 + 4) = v13;
      *((void *)v36 + 5) = v28;
      v36[6] = v33;
      v36[7] = v30;
      v36[8] = v31;

      if (v25 == v23) {
        break;
      }
      if (v39)
      {
        id v27 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((unint64_t)(v23 + 2) >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_42;
        }
        id v27 = (const __CTLine *)*(id *)(a1 + 8 * (void)v23 + 48);
      }
      double v21 = v27;
      v24 += 2;
      if (v22 == ++v23) {
        goto LABEL_23;
      }
    }
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a4;
  }
LABEL_23:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a4;
}

double CTLineRef.extendedBounds.getter()
{
  return sub_100A8F880(0x20uLL);
}

double CTLineRef.bounds.getter()
{
  return sub_100A8F880(0);
}

double sub_100A8F880(CTLineBoundsOptions options)
{
  *(void *)&double result = (unint64_t)CTLineGetBoundsWithOptions(v1, options);
  return result;
}

CGPoint **CTFrameRef.linesWithFrames(flippedCoordinates:useExtendedLineBounds:)(char a1, char a2)
{
  double v8 = (CGPoint **)v2;
  LOBYTE(v9) = a2;
  CFArrayRef v10 = CTFrameGetLines(v2);
  type metadata accessor for CTLine(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  unint64_t v11 = (double *)_swiftEmptyArrayStorage;
  CFArrayRef v12 = CTFrameGetLines((CTFrameRef)v8);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  if ((unint64_t)_swiftEmptyArrayStorage >> 62) {
    goto LABEL_45;
  }
  uint64_t v13 = *(CGPoint ***)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    NSString v14 = v8;
    double v8 = sub_100A91688(v13, (const __CTFrame *)v14);

    if ((unint64_t)_swiftEmptyArrayStorage >> 62) {
      break;
    }
    uint64_t v15 = *(char **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v15) {
      goto LABEL_50;
    }
LABEL_5:
    unint64_t v36 = (unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) == 0)
    {
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        CTLineBoundsOptions v16 = (const __CTLine *)(id)_swiftEmptyArrayStorage[4];
        goto LABEL_8;
      }
      __break(1u);
LABEL_56:
      NSString v14 = (CGPoint **)sub_100A9113C(0, (int64_t)&v14[2]->x + 1, 1, v14);
      goto LABEL_15;
    }
    while (1)
    {
      CTLineBoundsOptions v16 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_8:
      unint64_t v17 = v16;
      unint64_t v11 = (double *)v8[2];
      if (!v11)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_51;
      }
      CFArrayRef v7 = v8[4];
      double v6 = *((double *)v8 + 5);
      if (v9) {
        CTLineBoundsOptions v18 = 32;
      }
      else {
        CTLineBoundsOptions v18 = 0;
      }
      CGRect BoundsWithOptions = CTLineGetBoundsWithOptions(v16, v18);
      CGFloat width = BoundsWithOptions.size.width;
      CGFloat height = BoundsWithOptions.size.height;
      if ((a1 & 1) == 0) {
        double v6 = 0.0;
      }
      uint64_t v3 = v17;
      NSString v14 = (CGPoint **)_swiftEmptyArrayStorage;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_56;
      }
LABEL_15:
      unint64_t v20 = (unint64_t)v14[2];
      unint64_t v19 = (unint64_t)v14[3];
      if (v20 >= v19 >> 1) {
        NSString v14 = (CGPoint **)sub_100A9113C((void *)(v19 > 1), v20 + 1, 1, v14);
      }
      v14[2] = (CGPoint *)(v20 + 1);
      double v21 = (CGFloat *)&v14[5 * v20];
      *((void *)v21 + 4) = v3;
      *((void *)v21 + 5) = v7;
      v21[6] = 0.0;
      v21[7] = width;
      v21[8] = height;

      if (v15 == (char *)1)
      {
LABEL_18:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_52;
      }
      if (v36)
      {
        id v22 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_24;
      }
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL) {
        break;
      }
LABEL_53:
      __break(1u);
    }
    id v22 = (const __CTLine *)(id)_swiftEmptyArrayStorage[5];
LABEL_24:
    uint64_t v3 = v22;
    unint64_t v35 = (char *)v11 - 1;
    if (v11 == (double *)1)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_52;
    }
    id v23 = 0;
    if (v9) {
      CTLineBoundsOptions v9 = 32;
    }
    else {
      CTLineBoundsOptions v9 = 0;
    }
    unint64_t v11 = (double *)(v8 + 7);
    NSString v24 = v15 - 2;
    CFArrayRef v7 = 0;
    double v25 = 0.0;
    while (v23 + 1 < (char *)v8[2])
    {
      uint64_t v27 = *((void *)v11 - 1);
      double v28 = *v11;
      CGRect v39 = CTLineGetBoundsWithOptions(v3, v9);
      CGFloat width = v39.size.width;
      CGFloat height = v39.size.height;
      double v29 = v25 + v6 - v28;
      if (a1)
      {
        double v6 = v28;
        double v25 = v29;
        double v30 = v29;
      }
      else
      {
        double v30 = 0.0;
      }
      uint64_t v15 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        NSString v14 = (CGPoint **)sub_100A9113C(0, (int64_t)&v14[2]->x + 1, 1, v14);
      }
      unint64_t v32 = (unint64_t)v14[2];
      unint64_t v31 = (unint64_t)v14[3];
      if (v32 >= v31 >> 1) {
        NSString v14 = (CGPoint **)sub_100A9113C((void *)(v31 > 1), v32 + 1, 1, v14);
      }
      v14[2] = (CGPoint *)(v32 + 1);
      double v33 = (double *)&v14[5 * v32];
      *((void *)v33 + 4) = v15;
      *((void *)v33 + 5) = v27;
      v33[6] = v30;
      v33[7] = width;
      v33[8] = height;

      if (v24 == v23) {
        goto LABEL_18;
      }
      if (v36)
      {
        double v26 = (const __CTLine *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((unint64_t)(v23 + 2) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)
                                                      + 0x10))
          goto LABEL_53;
        double v26 = (const __CTLine *)(id)_swiftEmptyArrayStorage[(void)v23 + 6];
      }
      uint64_t v3 = v26;
      ++v23;
      v11 += 2;
      if (v35 == v23) {
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_45:
    swift_bridgeObjectRetain();
    uint64_t v13 = (CGPoint **)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if ((uint64_t)_swiftEmptyArrayStorage < 0) {
    NSString v14 = (CGPoint **)_swiftEmptyArrayStorage;
  }
  else {
    NSString v14 = (CGPoint **)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = (char *)_CocoaArrayWrapper.endIndex.getter();
  if (v15) {
    goto LABEL_5;
  }
LABEL_50:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_51:
  NSString v14 = (CGPoint **)_swiftEmptyArrayStorage;
LABEL_52:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

Swift::Void __swiftcall CTLineRef.draw(in:)(CGContextRef in)
{
  CTLineDraw(v1, in);
}

void *CTLineRef.glyphRuns.getter()
{
  return sub_100A8FD6C((uint64_t (*)(uint64_t))&CTLineGetGlyphRuns, type metadata accessor for CTRun);
}

void *sub_100A8FD6C(uint64_t (*a1)(uint64_t), void (*a2)(void))
{
  id v4 = (id)a1(v2);
  a2(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  return _swiftEmptyArrayStorage;
}

CFIndex CTLineRef.glyphCount.getter()
{
  return CTLineGetGlyphCount(v0);
}

CFIndex CTLineRef.cfStringRange.getter()
{
  return CTLineGetStringRange(v0).location;
}

CGFloat CTLineRef.offset(stringIndex:)(CFIndex charIndex)
{
  return CTLineGetOffsetForStringIndex(v1, charIndex, 0);
}

__C::_NSRange __swiftcall CTRunRef.convertToGlyphRange(textRange:)(__C::_NSRange textRange)
{
  uint64_t v2 = v1;
  Swift::Int length = textRange.length;
  Swift::Int location = textRange.location;
  char Status = CTRunGetStatus(v2);
  CFIndex GlyphCount = CTRunGetGlyphCount(v2);
  CFIndex v8 = GlyphCount;
  if ((Status & 1) == 0)
  {
    if ((GlyphCount & 0x8000000000000000) == 0)
    {
      CTLineBoundsOptions v9 = v2;
      if (v8)
      {
        CFArrayRef v10 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        v10[2] = v8;
      }
      else
      {
        CFArrayRef v10 = _swiftEmptyArrayStorage;
      }
      v25.Swift::Int location = 0;
      v25.Swift::Int length = 0;
      CTRunGetStringIndices(v9, v25, v10 + 4);
      CFIndex GlyphCount = CTRunGetGlyphCount(v9);
      if (v8 >= GlyphCount)
      {
        v10[2] = GlyphCount;

        uint64_t v13 = v10[2];
        if (!v13) {
          goto LABEL_31;
        }
        goto LABEL_15;
      }
      goto LABEL_35;
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (GlyphCount < 0) {
    goto LABEL_34;
  }
  unint64_t v11 = v2;
  if (v8)
  {
    CFArrayRef v12 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v12[2] = v8;
  }
  else
  {
    CFArrayRef v12 = _swiftEmptyArrayStorage;
  }
  v26.Swift::Int location = 0;
  v26.Swift::Int length = 0;
  CTRunGetStringIndices(v11, v26, v12 + 4);
  CFIndex GlyphCount = CTRunGetGlyphCount(v11);
  if (v8 < GlyphCount) {
    goto LABEL_36;
  }
  v12[2] = GlyphCount;

  CFIndex GlyphCount = sub_100A9002C((uint64_t)v12);
  CFArrayRef v10 = (void *)GlyphCount;
  uint64_t v13 = *(void *)(GlyphCount + 16);
  if (!v13) {
    goto LABEL_31;
  }
LABEL_15:
  uint64_t v14 = v10[4];
  if (v14 != location)
  {
    CFIndex v15 = 0;
    while (v13 - 1 != v15)
    {
      uint64_t v16 = v10[v15++ + 5];
      if (v16 == location) {
        goto LABEL_20;
      }
    }
    goto LABEL_31;
  }
  CFIndex v15 = 0;
LABEL_20:
  Swift::Int v17 = location + length;
  if (__OFADD__(location, length)) {
    goto LABEL_37;
  }
  BOOL v18 = __OFSUB__(v17, 1);
  Swift::Int v19 = v17 - 1;
  if (v18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v14 != v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = v13 - 1;
    while (v21 != v20)
    {
      uint64_t v22 = v10[v20++ + 5];
      if (v22 == v19) {
        goto LABEL_27;
      }
    }
    goto LABEL_31;
  }
  uint64_t v20 = 0;
LABEL_27:
  CFIndex GlyphCount = swift_bridgeObjectRelease();
  CFIndex v23 = v20 - v15;
  if (__OFSUB__(v20, v15))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  Swift::Int v7 = v23 + 1;
  if (!__OFADD__(v23, 1)) {
    goto LABEL_32;
  }
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease();
  CFIndex v15 = 0;
  Swift::Int v7 = 0;
LABEL_32:
  CFIndex GlyphCount = v15;
LABEL_40:
  result.Swift::Int length = v7;
  result.Swift::Int location = GlyphCount;
  return result;
}

uint64_t CTRunRef.status.getter()
{
  return CTRunGetStatus(v0);
}

CFIndex CTRunRef.stringIndices.getter()
{
  return sub_100A90394((uint64_t)&type metadata for Int, (void (*)(const __CTRun *, void, void, void *))&_CTRunGetStringIndices);
}

uint64_t sub_100A9002C(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < 2) {
    return v1;
  }
  unint64_t v3 = 0;
  unint64_t v4 = v2 >> 1;
  for (unint64_t i = v2 + 3; ; --i)
  {
    if (v3 == i - 4) {
      goto LABEL_5;
    }
    unint64_t v6 = *(void *)(v1 + 16);
    if (v3 >= v6) {
      break;
    }
    if (i - 4 >= v6) {
      goto LABEL_12;
    }
    uint64_t v7 = *(void *)(v1 + 8 * v3 + 32);
    uint64_t v8 = *(void *)(v1 + 8 * i);
    __C::_NSRange result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      __C::_NSRange result = (uint64_t)sub_100AC6400(v1);
      uint64_t v1 = result;
    }
    *(void *)(v1 + 8 * v3 + 32) = v8;
    *(void *)(v1 + 8 * i) = v7;
LABEL_5:
    if (v4 == ++v3) {
      return v1;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

void sub_100A900E8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v4 = *(id *)(a2 + 32);
      }
      long long v5 = v4;
      sub_100A91A8C();
      char v6 = static NSObject.== infix(_:_:)();

      if ((v6 & 1) == 0)
      {
        for (uint64_t i = 0; ; ++i)
        {
          unint64_t v11 = i + 1;
          if (__OFADD__(i, 1)) {
            break;
          }
          if (v11 == v3) {
            return;
          }
          if ((a2 & 0xC000000000000001) != 0)
          {
            id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_18;
            }
            if (v11 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_19;
            }
            id v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          CTLineBoundsOptions v9 = v8;
          char v10 = static NSObject.== infix(_:_:)();

          if (v10) {
            return;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v3) {
          continue;
        }
      }
      return;
    }
  }
}

Swift::Void __swiftcall CTRunRef.draw(in:range:)(CGContextRef in, __C::_NSRange range)
{
  CTRunDraw(v2, in, (CFRange)range);
}

double CTRunRef.typographicBounds(range:)(CFRange range)
{
  return CTRunGetTypographicBounds(v1, range, 0, 0, 0);
}

double CTRunRef.typographicBounds(forGlyphAtIndex:)(CFRange range)
{
  v3.Swift::Int location = range.location;
  v3.Swift::Int length = 1;
  return CTRunGetTypographicBounds(v1, v3, 0, 0, 0);
}

CFIndex CTRunRef.cfStringRange.getter()
{
  return CTRunGetStringRange(v0).location;
}

CFIndex CTRunRef.positions.getter()
{
  CFIndex result = CTRunGetGlyphCount(v0);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    CFIndex v2 = result;
    if (result)
    {
      _s3__C7CGPointVMa_2(0);
      CFRange v3 = v0;
      id v4 = (CGPoint *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)&v4[1].x = v2;
    }
    else
    {
      long long v5 = v0;
      id v4 = (CGPoint *)_swiftEmptyArrayStorage;
    }
    v6.Swift::Int location = 0;
    v6.Swift::Int length = 0;
    CTRunGetPositions(v0, v6, v4 + 2);
    CFIndex result = CTRunGetGlyphCount(v0);
    if (v2 >= result)
    {
      *(void *)&v4[1].x = result;

      return (CFIndex)v4;
    }
  }
  __break(1u);
  return result;
}

CFIndex CTRunRef.glyphCount.getter()
{
  return CTRunGetGlyphCount(v0);
}

CFIndex CTRunRef.glyphs.getter()
{
  return sub_100A90394((uint64_t)&type metadata for UInt16, (void (*)(const __CTRun *, void, void, void *))&CTRunGetGlyphs);
}

CFIndex sub_100A90394(uint64_t a1, void (*a2)(const __CTRun *, void, void, void *))
{
  CFIndex result = CTRunGetGlyphCount(v2);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    CFIndex v5 = result;
    CFRange v6 = v2;
    if (v5)
    {
      uint64_t v7 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      long long v7[2] = v5;
    }
    else
    {
      uint64_t v7 = _swiftEmptyArrayStorage;
    }
    a2(v6, 0, 0, v7 + 4);
    CFIndex result = CTRunGetGlyphCount(v6);
    if (v5 >= result)
    {
      long long v7[2] = result;

      return (CFIndex)v7;
    }
  }
  __break(1u);
  return result;
}

void *CTLabel.Frame.colorOverride.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride);
  swift_beginAccess();
  CFIndex v2 = *v1;
  id v3 = v2;
  return v2;
}

void CTLabel.Frame.colorOverride.setter(void *a1)
{
  id v3 = (void **)&v1[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride];
  swift_beginAccess();
  id v4 = *v3;
  *id v3 = a1;
  id v5 = a1;

  [v1 setNeedsDisplay];
}

id (*CTLabel.Frame.colorOverride.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_100A90560;
}

id sub_100A90560(uint64_t a1, char a2)
{
  id result = (id)swift_endAccess();
  if ((a2 & 1) == 0)
  {
    id v5 = *(void **)(a1 + 24);
    return [v5 setNeedsDisplay];
  }
  return result;
}

id CTLabel.Frame.__allocating_init(ctFrame:suggestedSize:colorOverride:)(void *a1, void *a2, double a3, double a4)
{
  CTLineBoundsOptions v9 = (char *)objc_allocWithZone(v4);
  char v10 = (void **)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride];
  *(void *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride] = 0;
  *(void *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_ctFrame] = a1;
  unint64_t v11 = (double *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize];
  double *v11 = a3;
  v11[1] = a4;
  swift_beginAccess();
  CFArrayRef v12 = *v10;
  *char v10 = a2;
  id v13 = a1;
  id v14 = a2;

  v17.receiver = v9;
  v17.super_class = v4;
  id v15 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];

  return v15;
}

id CTLabel.Frame.init(ctFrame:suggestedSize:colorOverride:)(void *a1, void *a2, double a3, double a4)
{
  uint64_t v7 = (void **)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride];
  *(void *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride] = 0;
  *(void *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_ctFrame] = a1;
  id v8 = (double *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize];
  *id v8 = a3;
  v8[1] = a4;
  swift_beginAccess();
  CTLineBoundsOptions v9 = *v7;
  *uint64_t v7 = a2;
  id v10 = a1;
  id v11 = a2;

  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for CTLabel.Frame();
  id v12 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];

  return v12;
}

double CTLabel.Frame.sizeThatFits(_:)()
{
  return *(double *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize);
}

void CTLabel.Frame.draw(_:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CTLineBoundsOptions v9 = UIGraphicsGetCurrentContext();
  if (v9)
  {
    id v10 = v9;
    CGContextTranslateCTM(v9, 0.0, *(CGFloat *)(v4 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_suggestedSize + 8));
    CGContextScaleCTM(v10, 1.0, -1.0);
    CTFrameDraw(*(CTFrameRef *)(v4 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_ctFrame), v10);
    id v11 = (id *)(v4 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Frame_colorOverride);
    swift_beginAccess();
    if (*v11)
    {
      id v12 = *v11;
      CGContextSetBlendMode(v10, kCGBlendModeOverlay);
      id v13 = (CGColor *)[v12 CGColor];
      CGContextSetFillColorWithColor(v10, v13);

      v14.origin.x = a1;
      v14.origin.y = a2;
      v14.size.CGFloat width = a3;
      v14.size.CGFloat height = a4;
      CGContextFillRect(v10, v14);
    }
  }
}

void CTLabel.Frame.init(frame:)()
{
}

id CTLabel.Frame.__deallocating_deinit()
{
  return sub_100A91104(type metadata accessor for CTLabel.Frame);
}

id CTLabel.Line.__allocating_init(ctLine:size:useExtendedLineBounds:)(void *a1, char a2, double a3, double a4)
{
  CTLineBoundsOptions v9 = objc_allocWithZone(v4);
  *(void *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine] = a1;
  id v10 = (double *)&v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_size];
  *id v10 = a3;
  v10[1] = a4;
  v9[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_useExtendedLineBounds] = a2;
  v14.receiver = v9;
  v14.super_class = v4;
  id v11 = a1;
  id v12 = [super initWithFrame:0.0, 0.0, a3, a4];
  [v12 setOpaque:0];

  return v12;
}

id CTLabel.Line.init(ctLine:size:useExtendedLineBounds:)(void *a1, char a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine] = a1;
  id v8 = (double *)&v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_size];
  *id v8 = a3;
  v8[1] = a4;
  v4[OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_useExtendedLineBounds] = a2;
  v12.receiver = v4;
  v12.super_class = (Class)type metadata accessor for CTLabel.Line();
  id v9 = a1;
  id v10 = [super initWithFrame:0.0, 0.0, a3, a4];
  [v10 setOpaque:0];

  return v10;
}

void CTLabel.Line.init(frame:)()
{
}

id CTLabel.Line.__deallocating_deinit()
{
  return sub_100A91104(type metadata accessor for CTLabel.Line);
}

id CTLabel.Run.__allocating_init(ctRun:size:range:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  id v11 = (char *)objc_allocWithZone(v5);
  *(void *)&v11[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_ctRun] = a1;
  objc_super v12 = (double *)&v11[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size];
  *objc_super v12 = a4;
  v12[1] = a5;
  id v13 = &v11[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_range];
  *(void *)id v13 = a2;
  *((void *)v13 + 1) = a3;
  v15.receiver = v11;
  v15.super_class = v5;
  return [super initWithFrame:0.0, 0.0, 0.0, 0.0];
}

id CTLabel.Run.init(ctRun:size:range:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  *(void *)&v5[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_ctRun] = a1;
  CFRange v6 = (double *)&v5[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size];
  *CFRange v6 = a4;
  v6[1] = a5;
  uint64_t v7 = &v5[OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_range];
  *(void *)uint64_t v7 = a2;
  *((void *)v7 + 1) = a3;
  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for CTLabel.Run();
  return [super initWithFrame:0.0, 0.0, 0.0, 0.0];
}

double CTLabel.Run.sizeThatFits(_:)()
{
  return *(double *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size);
}

void CTLabel.Run.init(frame:)()
{
}

id CTLabel.Run.__deallocating_deinit()
{
  return sub_100A91104(type metadata accessor for CTLabel.Run);
}

id CTLabel.Glyph.__allocating_init(cgGlyph:size:)(__int16 a1, double a2, double a3)
{
  uint64_t v7 = (char *)objc_allocWithZone(v3);
  *(_WORD *)&v7[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_cgGlyph] = a1;
  id v8 = (double *)&v7[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size];
  *id v8 = a2;
  v8[1] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return [super initWithFrame:0.0, 0.0, 0.0, 0.0];
}

id CTLabel.Glyph.init(cgGlyph:size:)(__int16 a1, double a2, double a3)
{
  *(_WORD *)&v3[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_cgGlyph] = a1;
  uint64_t v4 = (double *)&v3[OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size];
  *uint64_t v4 = a2;
  v4[1] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for CTLabel.Glyph();
  return [super initWithFrame:0.0, 0.0, 0.0, 0.0];
}

double CTLabel.Glyph.sizeThatFits(_:)()
{
  return *(double *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size);
}

void CTLabel.Glyph.init(frame:)()
{
}

void sub_100A910B8()
{
}

id CTLabel.Glyph.__deallocating_deinit()
{
  return sub_100A91104(type metadata accessor for CTLabel.Glyph);
}

id sub_100A91104(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

void *sub_100A9113C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C6F80);
    objc_super v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    objc_super v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100063814(&qword_1010C6F88);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100A91274(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C6F78);
    objc_super v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    objc_super v10 = (char *)_swiftEmptyArrayStorage;
  }
  id v13 = v10 + 32;
  objc_super v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_100A91370(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_1000247E0(a1, a2, a3, a4, &qword_1010C6F40, (uint64_t (*)(void))&type metadata accessor for IndexPath);
}

size_t sub_100A91390(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    id v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100063814(&qword_1010C6F48);
  uint64_t v10 = *(void *)(sub_100063814(&qword_1010C6F50) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  id v13 = (void *)swift_allocObject();
  id result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_100063814(&qword_1010C6F50) - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

char *sub_100A9156C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C6F58);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  id v13 = v10 + 32;
  objc_super v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_100A91668(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_1000247E0(a1, a2, a3, a4, &qword_1010C6F38, (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
}

CGPoint **sub_100A91688(CGPoint **result, const __CTFrame *a2)
{
  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v4 = (CGPoint *)result;
  if (result)
  {
    _s3__C7CGPointVMa_2(0);
    char v5 = (CGPoint *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)&v5[1].x = v4;
  }
  else
  {
    char v5 = (CGPoint *)_swiftEmptyArrayStorage;
  }
  v6[1] = v4;
  CGFloat v7 = 0.0;
  v6[0] = v5 + 2;
  id result = sub_100A8F3FC(v6, (uint64_t *)&v7, a2);
  if (v2)
  {
    if (*(uint64_t *)&v7 <= (uint64_t)v4)
    {
      v5[1].x = v7;
      swift_bridgeObjectRelease();
      return (CGPoint **)v5;
    }
    goto LABEL_12;
  }
  if (*(uint64_t *)&v7 <= (uint64_t)v4)
  {
    v5[1].x = v7;
    return (CGPoint **)v5;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CTLabel.Frame()
{
  return self;
}

uint64_t type metadata accessor for CTLabel.Line()
{
  return self;
}

void _s14MusicUtilities7CTLabelO4LineC4drawyySo6CGRectVF_0()
{
  uint64_t v1 = UIGraphicsGetCurrentContext();
  if (v1)
  {
    c = v1;
    CGContextTranslateCTM(v1, 0.0, *(CGFloat *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_size + 8));
    CGContextScaleCTM(c, 1.0, -1.0);
    if (*(unsigned char *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_useExtendedLineBounds)) {
      CTLineBoundsOptions v2 = 32;
    }
    else {
      CTLineBoundsOptions v2 = 0;
    }
    CTLineGetBoundsWithOptions(*(CTLineRef *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine), v2);
    CGContextRef.textPosition.getter();
    CGContextRef.textPosition.setter();
    CTLineDraw(*(CTLineRef *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel4Line_ctLine), c);
  }
}

uint64_t type metadata accessor for CTLabel.Run()
{
  return self;
}

void _s14MusicUtilities7CTLabelO3RunC4drawyySo6CGRectVF_0()
{
  uint64_t v1 = UIGraphicsGetCurrentContext();
  if (v1)
  {
    c = v1;
    CGContextTranslateCTM(v1, 0.0, *(CGFloat *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_size + 8));
    CGContextScaleCTM(c, 1.0, -1.0);
    CTRunDraw(*(CTRunRef *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_ctRun), c, *(CFRange *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel3Run_range));
  }
}

uint64_t type metadata accessor for CTLabel.Glyph()
{
  return self;
}

CGContext *_s14MusicUtilities7CTLabelO5GlyphC4drawyySo6CGRectVF_0()
{
  id result = UIGraphicsGetCurrentContext();
  if (result)
  {
    CTLineBoundsOptions v2 = result;
    CGContextTranslateCTM(result, 0.0, *(CGFloat *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_size + 8));
    CGContextScaleCTM(v2, 1.0, -1.0);
    sub_100063814(&qword_1010C6F68);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_100E251D0;
    *(_WORD *)(v3 + 32) = *(_WORD *)(v0 + OBJC_IVAR____TtCO14MusicUtilities7CTLabel5Glyph_cgGlyph);
    sub_100063814(&qword_1010C6F70);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_100E251D0;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 40) = 0;
    CGContextRef.showGlyphs(_:at:)((Swift::OpaquePointer)v3, (Swift::OpaquePointer)v4);

    swift_bridgeObjectRelease();
    return (CGContext *)swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for CTLabel()
{
  return &type metadata for CTLabel;
}

unint64_t sub_100A91A8C()
{
  unint64_t result = qword_1010C77D0;
  if (!qword_1010C77D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1010C77D0);
  }
  return result;
}

uint64_t static OS_dispatch_queue.asyncOnMainIfNeeded(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  CGFloat v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  int64_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([self isMainThread]) {
    return a1();
  }
  sub_10007B27C();
  id v13 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = a1;
  aBlock[5] = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100020238;
  aBlock[3] = &unk_1010048D0;
  objc_super v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10001D194();
  sub_100063814(&qword_1010C6670);
  sub_10007B144();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t DeinitTriggeredClosure.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t DeinitTriggeredClosure.init(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t DeinitTriggeredClosure.deinit()
{
  (*(void (**)(void))(v0 + 16))();
  swift_release();
  return v0;
}

uint64_t DeinitTriggeredClosure.__deallocating_deinit()
{
  (*(void (**)(void))(v0 + 16))();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t static OS_dispatch_queue.syncOnMainIfNeeded(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  if ([self isMainThread]) {
    return a1();
  }
  sub_10007B27C();
  uint64_t v5 = static OS_dispatch_queue.main.getter();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  v8[4] = sub_10007A644;
  uint64_t v8[5] = v6;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10007A61C;
  v8[3] = &unk_101004920;
  CGFloat v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v5, v7);

  _Block_release(v7);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v5) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A91F7C()
{
  return swift_deallocObject();
}

uint64_t OS_dispatch_queue.asyncAfter(_:block:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v22 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  objc_super v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v20 - v15;
  static DispatchTime.now()();
  + infix(_:_:)();
  objc_super v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v14, v10);
  aBlock[4] = a1;
  aBlock[5] = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100020238;
  aBlock[3] = &unk_101004948;
  BOOL v18 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  NSString v24 = _swiftEmptyArrayStorage;
  sub_10001D194();
  sub_100063814(&qword_1010C6670);
  sub_10007B144();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v22);
  v17(v16, v10);
  return swift_release();
}

uint64_t OS_dispatch_queue.asyncAfterUIFeedbackDeadline(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v14 - v9;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v11);
  aBlock[4] = a1;
  aBlock[5] = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100020238;
  aBlock[3] = &unk_101004970;
  _Block_copy(aBlock);
  v14[1] = _swiftEmptyArrayStorage;
  sub_10001D194();
  swift_retain();
  sub_100063814(&qword_1010C6670);
  sub_10007B144();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  DispatchWorkItem.init(flags:block:)();
  swift_release();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  v12(v10, v4);
  return swift_release();
}

uint64_t OS_dispatch_queue.asyncAfterUIFeedbackDeadline(_:)()
{
  uint64_t v0 = type metadata accessor for DispatchTime();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v9 - v5;
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v4, v0);
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  return ((uint64_t (*)(char *, uint64_t))v7)(v6, v0);
}

uint64_t static OS_dispatch_queue.UIFeedbackDeadline.getter()
{
  uint64_t v0 = type metadata accessor for DispatchTime();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchTime.now()();
  + infix(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t type metadata accessor for DeinitTriggeredClosure()
{
  return self;
}

void NSFileManager.createDirectoryIfNeeded(at:)()
{
  uint64_t v1 = v0;
  URL.path.getter();
  LOBYTE(v15) = 0;
  NSString v2 = String._bridgeToObjectiveC()();
  unsigned int v3 = [v0 fileExistsAtPath:v2 isDirectory:&v15];
  swift_bridgeObjectRelease();

  if (v3)
  {
    if (v15) {
      return;
    }
    URL._bridgeToObjectiveC()((NSURL *)v15);
    uint64_t v6 = v5;
    uint64_t v15 = 0;
    unsigned int v7 = [v0 removeItemAtURL:v5 error:&v15];

    uint64_t v8 = v15;
    if (!v7) {
      goto LABEL_7;
    }
    uint64_t v9 = v15;
  }
  URL._bridgeToObjectiveC()(v4);
  uint64_t v11 = v10;
  uint64_t v15 = 0;
  unsigned int v12 = [v1 createDirectoryAtURL:v10 withIntermediateDirectories:1 attributes:0 error:&v15];

  uint64_t v8 = v15;
  if (v12)
  {
    uint64_t v13 = v15;
    return;
  }
LABEL_7:
  objc_super v14 = v8;
  _convertNSErrorToError(_:)();

  swift_willThrow();
}

Swift::tuple_exists_Bool_isDirectory_Bool __swiftcall NSFileManager.directoryExists(at:)(Swift::String at)
{
  char v7 = 0;
  NSString v2 = String._bridgeToObjectiveC()();
  unsigned __int8 v3 = [v1 fileExistsAtPath:v2 isDirectory:&v7];

  Swift::Bool v5 = v3;
  result.isDirectory = v4;
  result.exists = v5;
  return result;
}

uint64_t NSFileManager.groupCacheURL(for:)@<X0>(uint64_t a1@<X8>)
{
  NSString v2 = v1;
  uint64_t v4 = sub_100063814(&qword_1010C7038);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  char v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v2 containerURLForSecurityApplicationGroupIdentifier:v14];

  if (v15)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v16(v7, 0, 1, v10);
  }
  else
  {
    unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v16(v7, 1, 1, v10);
  }
  sub_100017888((uint64_t)v7, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100018504((uint64_t)v9);
    uint64_t v17 = 1;
  }
  else
  {
    URL.appendingPathComponent(_:isDirectory:)();
    BOOL v18 = *(void (**)(char *, uint64_t))(v11 + 8);
    v18(v9, v10);
    URL.appendingPathComponent(_:isDirectory:)();
    v18(v13, v10);
    uint64_t v17 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v16)(a1, v17, 1, v10);
}

unint64_t sub_100A92BBC()
{
  unint64_t result = qword_1010C7040;
  if (!qword_1010C7040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7040);
  }
  return result;
}

unsigned char *_s7FailureOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100A92CACLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NSFileManager.Failure()
{
  return &type metadata for NSFileManager.Failure;
}

uint64_t String.sha256Data.getter()
{
  uint64_t v0 = type metadata accessor for SHA256Digest();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for String.Encoding();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v8 = String.data(using:allowLossyConversion:)();
  unint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v10 >> 60 != 15)
  {
    sub_10007AA40(v8, v10);
    Data.Digest.SHA256.getter(v8, v10);
    sub_10007A748(v8, v10);
    uint64_t v16 = v0;
    uint64_t v17 = sub_100A93AFC(&qword_1010C7048, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
    uint64_t v11 = sub_100068018(v15);
    (*(void (**)(uint64_t *, char *, uint64_t))(v1 + 16))(v11, v3, v0);
    sub_100068990(v15, v16);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    uint64_t v12 = v14[1];
    sub_1000760E4((uint64_t)v15);
    sub_10007A748(v8, v10);
    return v12;
  }
  return v8;
}

uint64_t Data.digest.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t Data.Digest.SHA256.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007AA40(a1, a2);
  sub_100A93AFC(&qword_1010C7050, (void (*)(uint64_t))&type metadata accessor for SHA256);
  dispatch thunk of HashFunction.init()();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_10007AA40(a1, a2);
      sub_100A93A1C((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v7, (void (*)(void))&type metadata accessor for SHA256, &qword_1010C7050, (void (*)(uint64_t))&type metadata accessor for SHA256);
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      sub_10007AA40(a1, a2);
      swift_retain();
      swift_retain();
      sub_100A93A1C(v8, v9, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v7, (void (*)(void))&type metadata accessor for SHA256, &qword_1010C7050, (void (*)(uint64_t))&type metadata accessor for SHA256);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v11, 0, 14);
      goto LABEL_7;
    default:
      v11[0] = a1;
      LOWORD(v11[1]) = a2;
      BYTE2(v11[1]) = BYTE2(a2);
      BYTE3(v11[1]) = BYTE3(a2);
      BYTE4(v11[1]) = BYTE4(a2);
      BYTE5(v11[1]) = BYTE5(a2);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  sub_10007A5C4(a1, a2);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_10007A5C4(a1, a2);
}

uint64_t Data.Digest.MD5.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Insecure.MD5();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007AA40(a1, a2);
  sub_100A93AFC(&qword_1010C7058, (void (*)(uint64_t))&type metadata accessor for Insecure.MD5);
  dispatch thunk of HashFunction.init()();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_10007AA40(a1, a2);
      sub_100A93A1C((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v7, (void (*)(void))&type metadata accessor for Insecure.MD5, &qword_1010C7058, (void (*)(uint64_t))&type metadata accessor for Insecure.MD5);
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      sub_10007AA40(a1, a2);
      swift_retain();
      swift_retain();
      sub_100A93A1C(v8, v9, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v7, (void (*)(void))&type metadata accessor for Insecure.MD5, &qword_1010C7058, (void (*)(uint64_t))&type metadata accessor for Insecure.MD5);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v11, 0, 14);
      goto LABEL_7;
    default:
      v11[0] = a1;
      LOWORD(v11[1]) = a2;
      BYTE2(v11[1]) = BYTE2(a2);
      BYTE3(v11[1]) = BYTE3(a2);
      BYTE4(v11[1]) = BYTE4(a2);
      BYTE5(v11[1]) = BYTE5(a2);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  sub_10007A5C4(a1, a2);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_10007A5C4(a1, a2);
}

uint64_t Data.Digest.SHA512.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA512();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007AA40(a1, a2);
  sub_100A93AFC(&qword_1010C7060, (void (*)(uint64_t))&type metadata accessor for SHA512);
  dispatch thunk of HashFunction.init()();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_10007AA40(a1, a2);
      sub_100A93A1C((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v7, (void (*)(void))&type metadata accessor for SHA512, &qword_1010C7060, (void (*)(uint64_t))&type metadata accessor for SHA512);
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      sub_10007AA40(a1, a2);
      swift_retain();
      swift_retain();
      sub_100A93A1C(v8, v9, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v7, (void (*)(void))&type metadata accessor for SHA512, &qword_1010C7060, (void (*)(uint64_t))&type metadata accessor for SHA512);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v11, 0, 14);
      goto LABEL_7;
    default:
      v11[0] = a1;
      LOWORD(v11[1]) = a2;
      BYTE2(v11[1]) = BYTE2(a2);
      BYTE3(v11[1]) = BYTE3(a2);
      BYTE4(v11[1]) = BYTE4(a2);
      BYTE5(v11[1]) = BYTE5(a2);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  sub_10007A5C4(a1, a2);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_10007A5C4(a1, a2);
}

uint64_t sub_100A93A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), unint64_t *a6, void (*a7)(uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      a5(0);
      sub_100A93AFC(a6, a7);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100A93AFC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *_s6DigestVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_10007AA40(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t _s6DigestVwxx(uint64_t a1)
{
  return sub_10007A5C4(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *_s6DigestVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_10007AA40(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_10007A5C4(v5, v6);
  return a1;
}

uint64_t *_s6DigestVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10007A5C4(v3, v4);
  return a1;
}

uint64_t _s6DigestVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s6DigestVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)uint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Data.Digest()
{
  return &type metadata for Data.Digest;
}

uint64_t sub_100A93CC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 >= 1) {
    uint64_t v5 = a4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!a2)
  {
LABEL_19:
    a3 = 0;
    goto LABEL_20;
  }
  if (!a3)
  {
LABEL_20:
    *(void *)uint64_t result = a4;
    *(void *)(result + 8) = a5;
    *(void *)(result + 16) = v5;
    *(unsigned char *)(result + 24) = a5 < 1;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = a4 + a5;
    BOOL v7 = __OFADD__(a4, a5);
    if (v5 > v6) {
      uint64_t v6 = v5;
    }
    if (a5 >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v6 - v5;
      while (!v7)
      {
        if (v9 == v8)
        {
          v5 += v8;
          a3 = v9;
          goto LABEL_20;
        }
        *(void *)(a2 + 8 * v8) = v5 + v8;
        if (a3 - 1 == v8)
        {
          v5 += v8 + 1;
          goto LABEL_20;
        }
        ++v8;
      }
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v5 = 0;
    goto LABEL_19;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t Array.append(_:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = v10(v7);
  if (v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    Array.append(_:)();
  }
  return v11 & 1;
}

uint64_t Array.append<A>(contentsOf:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 - 8);
  __n128 v8 = __chkstk_darwin(a1);
  unint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = v11(v8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, a5);
    Array.append<A>(contentsOf:)();
  }
  return v12 & 1;
}

uint64_t Array.item(where:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.firstIndex(where:)();
  if (v6)
  {
    uint64_t v4 = 1;
  }
  else
  {
    Array.subscript.getter();
    uint64_t v4 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v4, 1, a1);
}

Swift::Void __swiftcall Array.moveItem(at:to:)(Swift::Int at, Swift::Int to)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(at);
  char v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v10 - v8;
  Array.remove(at:)();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
  Array.insert(_:at:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

uint64_t Array.inserting(separator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[2] = a3;
  v4[3] = a1;
  return Array.inserting(separator:)((uint64_t)sub_100A941D4, (uint64_t)v4, a2, a3);
}

uint64_t sub_100A941D4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 16) - 8) + 16))(a1, *(void *)(v1 + 24));
}

uint64_t sub_100A94204(void *a1)
{
  if (*a1) {
    return (*(uint64_t (**)(void))(v1 + 32))();
  }
  else {
    return Array.subscript.getter();
  }
}

unint64_t sub_100A94254()
{
  unint64_t result = qword_1010C7078;
  if (!qword_1010C7078)
  {
    sub_10006389C(&qword_1010C7070);
    sub_100A942D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7078);
  }
  return result;
}

unint64_t sub_100A942D0()
{
  unint64_t result = qword_1010C7080;
  if (!qword_1010C7080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7080);
  }
  return result;
}

uint64_t Set.insert(_:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = __chkstk_darwin(a1);
  char v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v12(v9))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
    char v13 = Set.insert(_:)();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, 1, 1, v7);
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t NSBundle.displayName.getter()
{
  id v1 = [v0 localizedInfoDictionary];
  if (!v1)
  {
    long long v8 = 0u;
    long long v9 = 0u;
    goto LABEL_11;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v3 + 16)
    || (uint64_t v4 = sub_1000240D0(0xD000000000000013, 0x8000000100DD2530, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100071C8C), (v5 & 1) == 0))
  {
    long long v8 = 0u;
    long long v9 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_100076134(*(void *)(v3 + 56) + 32 * v4, (uint64_t)&v8);
  swift_bridgeObjectRelease();
  if (!*((void *)&v9 + 1))
  {
LABEL_11:
    sub_1000637B8((uint64_t)&v8, &qword_1010C6AF0);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v7;
  }
  else {
    return 0;
  }
}

uint64_t NSBundle.exportedTypeDeclarations.getter()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForInfoDictionaryKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1000568AC((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_100063814(&qword_1010C7088);
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_1000637B8((uint64_t)v6, &qword_1010C6AF0);
    return 0;
  }
}

uint64_t Comparable.clamp(to:)()
{
  uint64_t v1 = type metadata accessor for ClosedRange();
  return ClosedRange.clamp(_:)(v0, v1);
}

uint64_t ClosedRange.clamp(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(a1);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  max<A>(_:_:)();
  min<A>(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ClosedRange<>.scaledValue(relativeTo:relativeValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v33 = a5;
  uint64_t v31 = a1;
  uint64_t v32 = a4;
  uint64_t v27 = a2;
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) + 8);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = *(void *)(v7 - 8);
  __chkstk_darwin(v10);
  double v28 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v26 - v13;
  __chkstk_darwin(v15);
  unint64_t v35 = (char *)&v26 - v16;
  __chkstk_darwin(v17);
  Swift::Int v19 = (char *)&v26 - v18;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v26 - v21;
  uint64_t v29 = a3;
  uint64_t v30 = v6;
  uint64_t v26 = *(void *)(v6 + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  LOBYTE(v6) = dispatch thunk of static Comparable.> infix(_:_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v19, v7);
  if (v6)
  {
    ClosedRange.clamp(_:)(v27, v29);
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    dispatch thunk of static FloatingPoint./ infix(_:_:)();
    v23(v14, v7);
    NSString v24 = v28;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    dispatch thunk of static Numeric.* infix(_:_:)();
    v23(v24, v7);
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
    v23(v14, v7);
    v23(v35, v7);
    v23(v19, v7);
    return ((uint64_t (*)(char *, uint64_t))v23)(v22, v7);
  }
  else
  {
    v23(v22, v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v33, v34, v7);
  }
}

uint64_t Data.hexRepresentation.getter(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_10007AA40(a1, a2);
      uint64_t v6 = sub_100A9AE48((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a1, a2);
      uint64_t v8 = v9;
      goto LABEL_8;
    case 2uLL:
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      sub_10007AA40(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v6 = sub_100A9AE48(v4, v5, a2 & 0x3FFFFFFFFFFFFFFFLL, a1, a2);
      uint64_t v8 = v7;
      swift_release();
      swift_release();
LABEL_8:
      sub_10007A5C4(a1, a2);
      goto LABEL_9;
    case 3uLL:
      memset(v11, 0, 14);
      goto LABEL_5;
    default:
      v11[0] = a1;
      LOWORD(v11[1]) = a2;
      BYTE2(v11[1]) = BYTE2(a2);
      BYTE3(v11[1]) = BYTE3(a2);
      BYTE4(v11[1]) = BYTE4(a2);
      BYTE5(v11[1]) = BYTE5(a2);
LABEL_5:
      sub_100A94E10((unint64_t)v11, a1, a2, v12);
      sub_10007A5C4(a1, a2);
      uint64_t v6 = v12[0];
      uint64_t v8 = v12[1];
LABEL_9:
      if (v8) {
        return v6;
      }
      else {
        return 0;
      }
  }
}

uint64_t sub_100A94E10@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v8 - 8);
  unint64_t v9 = a3 >> 62;
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v10) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_41;
      }
      uint64_t v10 = (int)v10;
LABEL_6:
      if (v10 + 0x4000000000000000 < 0) {
        goto LABEL_39;
      }
      unint64_t v14 = swift_slowAlloc();
      if (v9)
      {
        if (v9 == 1)
        {
          LODWORD(v15) = HIDWORD(a2) - a2;
          if (__OFSUB__(HIDWORD(a2), a2))
          {
LABEL_43:
            __break(1u);
            goto LABEL_44;
          }
          uint64_t v15 = (int)v15;
        }
        else
        {
          uint64_t v17 = *(void *)(a2 + 16);
          uint64_t v16 = *(void *)(a2 + 24);
          BOOL v13 = __OFSUB__(v16, v17);
          uint64_t v15 = v16 - v17;
          if (v13)
          {
LABEL_44:
            __break(1u);
            JUMPOUT(0x100A950C8);
          }
        }
        if (v15 < 0)
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v15 = BYTE6(a3);
      }
      if (v15)
      {
        unint64_t v18 = v15 - 1;
        if ((unint64_t)(v15 - 1) >= 0x4000000000000000) {
          unint64_t v19 = 0x4000000000000000;
        }
        else {
          unint64_t v19 = v15 - 1;
        }
        if (v19 <= 0xF) {
          goto LABEL_24;
        }
        if (v18 >= 0x4000000000000000) {
          unint64_t v18 = 0x4000000000000000;
        }
        if (v14 >= v18 + a1 + 1 || v14 + 2 * v18 + 2 <= a1)
        {
          unint64_t v21 = v19 + 1;
          uint64_t v22 = v21 & 0xF;
          if ((v21 & 0xF) == 0) {
            uint64_t v22 = 16;
          }
          unint64_t v20 = v21 - v22;
          v23.i64[0] = 0x9F9F9F9F9F9F9F9FLL;
          v23.i64[1] = 0x9F9F9F9F9F9F9F9FLL;
          v24.i64[0] = 0x5757575757575757;
          v24.i64[1] = 0x5757575757575757;
          v25.i64[0] = 0x3030303030303030;
          v25.i64[1] = 0x3030303030303030;
          v26.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v26.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          v27.i64[0] = 0x909090909090909;
          v27.i64[1] = 0x909090909090909;
          unint64_t v28 = v20;
          uint64_t v29 = (int8x16_t *)a1;
          uint64_t v30 = (char *)v14;
          do
          {
            int8x16_t v31 = *v29++;
            v32.i64[0] = 0x5757575757575757;
            v32.i64[1] = 0x5757575757575757;
            v33.i64[0] = 0x3030303030303030;
            v33.i64[1] = 0x3030303030303030;
            v46.val[0] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v31, v23), (int8x16_t)vsraq_n_u8(v32, (uint8x16_t)v31, 4uLL), (int8x16_t)vsraq_n_u8(v33, (uint8x16_t)v31, 4uLL));
            int8x16_t v34 = vandq_s8(v31, v26);
            v46.val[1] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v34, v27), vaddq_s8(v34, v24), vorrq_s8(v34, v25));
            vst2q_s8(v30, v46);
            v30 += 32;
            v28 -= 16;
          }
          while (v28);
        }
        else
        {
LABEL_24:
          unint64_t v20 = 0;
        }
        unint64_t v35 = v20 - 0x4000000000000000;
        unint64_t v36 = (unsigned char *)(v14 + 2 * v20 + 1);
        uint64_t v37 = v15 - v20;
        id v38 = (unsigned __int8 *)(a1 + v20);
        while (v35)
        {
          unsigned int v40 = *v38++;
          char v39 = v40;
          int v41 = (v40 >> 4) + 87;
          int v42 = (v40 >> 4) | 0x30;
          if (v40 > 0x9F) {
            LOBYTE(v42) = v41;
          }
          *(v36 - 1) = v42;
          if ((v39 & 0xFu) <= 9) {
            char v43 = v39 & 0xF | 0x30;
          }
          else {
            char v43 = (v39 & 0xF) + 87;
          }
          *unint64_t v36 = v43;
          v36 += 2;
          ++v35;
          if (!--v37) {
            goto LABEL_37;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      static String.Encoding.utf8.getter();
      uint64_t result = String.init(bytesNoCopy:length:encoding:freeWhenDone:)();
      *a4 = result;
      a4[1] = v45;
      return result;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v10 = v11 - v12;
      if (!v13) {
        goto LABEL_6;
      }
      goto LABEL_42;
    case 3uLL:
      swift_slowAlloc();
      goto LABEL_37;
    default:
      uint64_t v10 = BYTE6(a3);
      goto LABEL_6;
  }
}

uint64_t sub_100A950D8()
{
  unint64_t v0 = sub_100A876E0((uint64_t)&off_101003700);
  sub_100063814(&qword_1010C71B0);
  uint64_t result = swift_arrayDestroy();
  static Data.Hexadecimal.hexToDecimalMapping = v0;
  return result;
}

uint64_t *Data.Hexadecimal.hexToDecimalMapping.unsafeMutableAddressor()
{
  if (qword_1010C6370 != -1) {
    swift_once();
  }
  return &static Data.Hexadecimal.hexToDecimalMapping;
}

uint64_t static Data.Hexadecimal.hexToDecimalMapping.getter()
{
  if (qword_1010C6370 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static Data.Hexadecimal.hexToDecimalMapping.setter(uint64_t a1)
{
  if (qword_1010C6370 != -1) {
    swift_once();
  }
  swift_beginAccess();
  static Data.Hexadecimal.hexToDecimalMapping = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Data.Hexadecimal.hexToDecimalMapping.modify())()
{
  if (qword_1010C6370 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t Data.init(hexString:)(uint64_t a1, void *a2)
{
  if (String.count.getter())
  {
    v16[0] = 48;
    v16[1] = 0xE100000000000000;
    v4._countAndFlagsBits = a1;
    v4._object = a2;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = 0;
  LOBYTE(v6) = 0;
  long long v17 = xmmword_100E42BD0;
  while (1)
  {
    Swift::String_optional v8 = String.Iterator.next()();
    if (!v8.value._object) {
      break;
    }
    if (qword_1010C6370 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v9 = static Data.Hexadecimal.hexToDecimalMapping;
    if (!*(void *)(static Data.Hexadecimal.hexToDecimalMapping + 16)
      || (uint64_t v10 = sub_1000240D0(v8.value._countAndFlagsBits, (uint64_t)v8.value._object, (void (*)(unsigned char *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100071C8C), (v11 & 1) == 0))
    {
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10007A5C4(v17, *((unint64_t *)&v17 + 1));
      return 0;
    }
    __int16 v12 = *(unsigned __int8 *)(*(void *)(v9 + 56) + v10);
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (v5)
    {
      char v13 = v12 + v6;
      if (((v12 + v6) & 0x100) != 0) {
        goto LABEL_18;
      }
      uint64_t v14 = sub_100063814(&qword_1010C7090);
      v16[3] = v14;
      v16[4] = sub_100063858(&qword_1010C7098, &qword_1010C7090);
      LOBYTE(v16[0]) = v13;
      sub_100068990(v16, v14);
      Data._Representation.replaceSubrange(_:with:count:)();
      sub_1000760E4((uint64_t)v16);
      LOBYTE(v6) = 0;
    }
    else
    {
      __int16 v6 = 16 * (v12 & 0xF) + v6;
      if ((v6 & 0x100) != 0) {
        goto LABEL_17;
      }
    }
    if (__OFADD__(v5++, 1))
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
    }
  }
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_100A955CC()
{
  uint64_t v0 = sub_100063814(&qword_1010C70A0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Calendar.Identifier();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  __int16 v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Calendar();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  char v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014CA4(v9, static Calendar.musicDefaultCalendar);
  uint64_t v12 = sub_100050A90(v7, (uint64_t)static Calendar.musicDefaultCalendar);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Calendar.Identifier.gregorian(_:), v3);
  Calendar.init(identifier:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  TimeZone.init(secondsFromGMT:)();
  uint64_t v13 = type metadata accessor for TimeZone();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v2, 1, v13);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    Calendar.timeZone.setter();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v12, v11, v7);
  }
  return result;
}

uint64_t Calendar.musicDefaultCalendar.unsafeMutableAddressor()
{
  if (qword_1010C6378 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Calendar();

  return sub_100050A90(v0, (uint64_t)static Calendar.musicDefaultCalendar);
}

uint64_t static Calendar.musicDefaultCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1010C6378 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Calendar();
  uint64_t v3 = sub_100050A90(v2, (uint64_t)static Calendar.musicDefaultCalendar);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

id static NSDateFormatter.iso8601ExtendedDateFormatter.getter()
{
  sub_100063814(&qword_1010C70A0);
  __chkstk_darwin();
  uint64_t v1 = (char *)&v13 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [objc_allocWithZone((Class)NSDateFormatter) init];
  Locale.init(identifier:)();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  [v6 setLocale:isa];

  NSString v8 = String._bridgeToObjectiveC()();
  [v6 setDateFormat:v8];

  TimeZone.init(secondsFromGMT:)();
  uint64_t v9 = type metadata accessor for TimeZone();
  uint64_t v10 = *(void *)(v9 - 8);
  Class v11 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v1, 1, v9) != 1)
  {
    Class v11 = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v1, v9);
  }
  [v6 setTimeZone:v11];

  return v6;
}

id static NSDateFormatter.dayNameDateFormatter.getter()
{
  id v0 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setLocalizedDateFormatFromTemplate:v1];

  return v0;
}

void sub_100A95BE4()
{
  uint64_t v0 = type metadata accessor for TimeZone();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v4 setDateStyle:3];
  if (qword_1010C6378 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Calendar();
  sub_100050A90(v5, (uint64_t)static Calendar.musicDefaultCalendar);
  Calendar.timeZone.getter();
  Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  [v4 setTimeZone:isa];

  static NSDateFormatter.releaseDateFormatter = (uint64_t)v4;
}

uint64_t *NSDateFormatter.releaseDateFormatter.unsafeMutableAddressor()
{
  if (qword_1010C6380 != -1) {
    swift_once();
  }
  return &static NSDateFormatter.releaseDateFormatter;
}

id static NSDateFormatter.releaseDateFormatter.getter()
{
  return sub_100916124(&qword_1010C6380, (void **)&static NSDateFormatter.releaseDateFormatter);
}

id sub_100A95DBC()
{
  id v0 = [objc_allocWithZone((Class)NSDateComponentsFormatter) init];
  [v0 setUnitsStyle:3];
  id result = [v0 setAllowedUnits:96];
  static NSDateFormatter.collectionsDurationFormatter = (uint64_t)v0;
  return result;
}

uint64_t *NSDateFormatter.collectionsDurationFormatter.unsafeMutableAddressor()
{
  if (qword_1010C6388 != -1) {
    swift_once();
  }
  return &static NSDateFormatter.collectionsDurationFormatter;
}

id static NSDateFormatter.collectionsDurationFormatter.getter()
{
  return sub_100916124(&qword_1010C6388, (void **)&static NSDateFormatter.collectionsDurationFormatter);
}

uint64_t Dictionary.filterIncludingPairsWithStringValues()(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v52 = *(void *)(a3 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void *)(v10 - 8);
  __chkstk_darwin();
  int v54 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v67 = (char *)v45 - v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v63 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v63 - 8);
  __chkstk_darwin();
  int v56 = (char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  long long v17 = (char *)v45 - v16;
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  uint64_t v55 = a4;
  uint64_t v70 = Dictionary.init(dictionaryLiteral:)();
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v18 = __CocoaDictionary.makeIterator()();
    unint64_t v46 = 0;
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    unint64_t v21 = v18 | 0x8000000000000000;
  }
  else
  {
    uint64_t v22 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = ~v22;
    uint64_t v23 = *(void *)(a1 + 64);
    unint64_t v46 = a1 + 64;
    uint64_t v24 = -v22;
    if (v24 < 64) {
      uint64_t v25 = ~(-1 << v24);
    }
    else {
      uint64_t v25 = -1;
    }
    unint64_t v20 = v25 & v23;
    unint64_t v21 = a1;
  }
  unint64_t v64 = v21;
  uint64_t v48 = v21 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v62 = TupleTypeMetadata2 - 8;
  v45[1] = v19;
  BOOL v65 = (void (**)(char *, char *, uint64_t))(v51 + 16);
  uint64_t v49 = v52 + 16;
  uint64_t v61 = (void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v60 = (void (**)(char *, char *, uint64_t))(v51 + 32);
  uint64_t v58 = (void (**)(char *, uint64_t))(v52 + 8);
  unint64_t v59 = (void (**)(char *, char *, uint64_t))(v52 + 32);
  int v57 = (uint64_t (**)(char *, uint64_t))(v51 + 8);
  int64_t v47 = (unint64_t)(v19 + 64) >> 6;
  v45[0] = v47 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v27 = v64;
  int64_t v28 = 0;
  int v53 = v9;
  uint64_t v29 = v56;
  uint64_t v50 = v5;
  if ((v64 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_32:
  if (__CocoaDictionary.Iterator.next()())
  {
    _forceBridgeFromObjectiveC<A>(_:_:)();
    swift_unknownObjectRelease();
    _forceBridgeFromObjectiveC<A>(_:_:)();
    swift_unknownObjectRelease();
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = 1;
  }
  int64_t v34 = v28;
  uint64_t v66 = v20;
  uint64_t v9 = v53;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
LABEL_36:
          uint64_t v40 = *(void *)(TupleTypeMetadata2 - 8);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v29, v37, 1, TupleTypeMetadata2);
          (*v61)(v17, v29, v63);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v17, 1, TupleTypeMetadata2) == 1)
          {
            sub_100048F1C();
            return v70;
          }
          int v41 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
          (*v60)(v67, v17, a2);
          (*v59)(v9, v41, v5);
          if (swift_dynamicCast())
          {
            id v30 = v68;
            uint64_t v31 = v69;
            goto LABEL_10;
          }
          sub_100057778(0, &qword_1010C70A8);
          if (swift_dynamicCast())
          {
            id v42 = v68;
            id v43 = [v68 description];
            id v30 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v31 = v44;

            uint64_t v9 = v53;
LABEL_10:
            (*v58)(v9, v5);
            uint8x16_t v32 = v67;
            (*v65)(v54, v67, a2);
            id v68 = v30;
            uint64_t v69 = v31;
            type metadata accessor for Dictionary();
            Dictionary.subscript.setter();
            uint64_t result = (*v57)(v32, a2);
            int64_t v28 = v34;
            unint64_t v20 = v66;
            uint64_t v29 = v56;
            unint64_t v27 = v64;
            if ((v64 & 0x8000000000000000) != 0) {
              goto LABEL_32;
            }
            goto LABEL_11;
          }
          (*v58)(v9, v5);
          uint64_t result = (*v57)(v67, a2);
          int64_t v28 = v34;
          unint64_t v20 = v66;
          unint64_t v27 = v64;
          if ((v64 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
LABEL_11:
          if (v20)
          {
            uint64_t v66 = (v20 - 1) & v20;
            unint64_t v33 = __clz(__rbit64(v20)) | (v28 << 6);
            int64_t v34 = v28;
            goto LABEL_13;
          }
          int64_t v34 = v28 + 1;
          if (__OFADD__(v28, 1))
          {
            __break(1u);
            goto LABEL_44;
          }
          if (v34 < v47) {
            break;
          }
          uint64_t v66 = 0;
          uint64_t v37 = 1;
          int64_t v34 = v28;
        }
        unint64_t v38 = *(void *)(v46 + 8 * v34);
        if (!v38) {
          break;
        }
LABEL_17:
        uint64_t v66 = (v38 - 1) & v38;
        unint64_t v33 = __clz(__rbit64(v38)) + (v34 << 6);
LABEL_13:
        unint64_t v35 = v27;
        (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v29, *(void *)(v27 + 48) + *(void *)(v51 + 72) * v33, a2);
        unint64_t v36 = *(void *)(v35 + 56) + *(void *)(v52 + 72) * v33;
        uint64_t v5 = v50;
        (*(void (**)(char *, unint64_t, uint64_t))(v52 + 16))(&v29[*(int *)(TupleTypeMetadata2 + 48)], v36, v50);
        uint64_t v37 = 0;
      }
      if (v28 + 2 < v47) {
        break;
      }
      uint64_t v66 = 0;
      uint64_t v37 = 1;
    }
    unint64_t v38 = *(void *)(v46 + 8 * (v28 + 2));
    if (v38)
    {
      int64_t v34 = v28 + 2;
      goto LABEL_17;
    }
    int64_t v39 = v28 + 3;
    if (v28 + 3 < v47) {
      break;
    }
    uint64_t v66 = 0;
    uint64_t v37 = 1;
    int64_t v34 = v28 + 2;
  }
  unint64_t v38 = *(void *)(v46 + 8 * v39);
  if (v38)
  {
    int64_t v34 = v28 + 3;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v34 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      break;
    }
    if (v34 >= v47)
    {
      uint64_t v66 = 0;
      uint64_t v37 = 1;
      int64_t v34 = v45[0];
      goto LABEL_36;
    }
    unint64_t v38 = *(void *)(v46 + 8 * v34);
    ++v39;
    if (v38) {
      goto LABEL_17;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t Dictionary.filteredDictionary(_:)(uint64_t (*a1)(char *, char *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v61 = a1;
  uint64_t v62 = a2;
  type metadata accessor for Optional();
  __chkstk_darwin();
  uint64_t v49 = (char *)&v41 - v10;
  uint64_t v52 = *(void *)(a5 - 8);
  __chkstk_darwin();
  uint64_t v60 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void *)(a4 - 8);
  __chkstk_darwin();
  uint64_t v48 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v41 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v66 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v66 - 8);
  __chkstk_darwin();
  int v53 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v41 - v18;
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  uint64_t v50 = a6;
  uint64_t v69 = Dictionary.init(dictionaryLiteral:)();
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v20 = __CocoaDictionary.makeIterator()();
    unint64_t v44 = 0;
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    unint64_t v23 = v20 | 0x8000000000000000;
  }
  else
  {
    uint64_t v24 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v21 = ~v24;
    uint64_t v25 = *(void *)(a3 + 64);
    unint64_t v44 = a3 + 64;
    uint64_t v26 = -v24;
    if (v26 < 64) {
      uint64_t v27 = ~(-1 << v26);
    }
    else {
      uint64_t v27 = -1;
    }
    unint64_t v22 = v27 & v25;
    unint64_t v23 = a3;
  }
  uint64_t v46 = v23 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v64 = TupleTypeMetadata2 - 8;
  uint64_t v43 = v21;
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v51 + 16);
  int v54 = (void (**)(char *, char *, uint64_t))(v52 + 16);
  uint64_t v63 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  unint64_t v59 = (void (**)(char *, char *, uint64_t))(v51 + 32);
  uint64_t v58 = (void (**)(char *, char *, uint64_t))(v52 + 32);
  int v56 = (uint64_t (**)(char *, uint64_t))(v51 + 8);
  int v57 = (void (**)(char *, uint64_t))(v52 + 8);
  int64_t v47 = (void (**)(char *, void, uint64_t, uint64_t))(v52 + 56);
  int64_t v45 = (unint64_t)(v21 + 64) >> 6;
  int64_t v42 = v45 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v29 = 0;
  id v30 = v53;
  BOOL v65 = v19;
  unint64_t v67 = v23;
  while ((v23 & 0x8000000000000000) != 0)
  {
    if (__CocoaDictionary.Iterator.next()())
    {
      _forceBridgeFromObjectiveC<A>(_:_:)();
      swift_unknownObjectRelease();
      _forceBridgeFromObjectiveC<A>(_:_:)();
      swift_unknownObjectRelease();
      uint64_t v33 = 0;
    }
    else
    {
      uint64_t v33 = 1;
    }
    int64_t v32 = v29;
    uint64_t v68 = v22;
LABEL_22:
    uint64_t v35 = *(void *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v30, v33, 1, TupleTypeMetadata2);
    unint64_t v36 = v65;
    (*v63)(v65, v30, v66);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v36, 1, TupleTypeMetadata2) == 1)
    {
      sub_100048F1C();
      return v69;
    }
    uint64_t v37 = &v36[*(int *)(TupleTypeMetadata2 + 48)];
    (*v59)(v14, v36, a4);
    unint64_t v38 = v60;
    (*v58)(v60, v37, a5);
    if (v61(v14, v38))
    {
      (*v55)(v48, v14, a4);
      int64_t v39 = v49;
      (*v54)(v49, v38, a5);
      (*v47)(v39, 0, 1, a5);
      type metadata accessor for Dictionary();
      id v30 = v53;
      Dictionary.subscript.setter();
    }
    (*v57)(v38, a5);
    uint64_t result = (*v56)(v14, a4);
    int64_t v29 = v32;
    unint64_t v23 = v67;
    unint64_t v22 = v68;
  }
  if (v22)
  {
    uint64_t v68 = (v22 - 1) & v22;
    unint64_t v31 = __clz(__rbit64(v22)) | (v29 << 6);
    int64_t v32 = v29;
    goto LABEL_12;
  }
  int64_t v32 = v29 + 1;
  if (__OFADD__(v29, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v32 >= v45)
  {
    uint64_t v68 = 0;
    uint64_t v33 = 1;
    int64_t v32 = v29;
    goto LABEL_22;
  }
  unint64_t v34 = *(void *)(v44 + 8 * v32);
  if (v34) {
    goto LABEL_18;
  }
  if (v29 + 2 >= v45)
  {
    uint64_t v68 = 0;
    uint64_t v33 = 1;
    goto LABEL_22;
  }
  unint64_t v34 = *(void *)(v44 + 8 * (v29 + 2));
  if (v34)
  {
    int64_t v32 = v29 + 2;
    unint64_t v23 = v67;
    goto LABEL_18;
  }
  int64_t v40 = v29 + 3;
  if (v29 + 3 >= v45)
  {
    uint64_t v68 = 0;
    uint64_t v33 = 1;
    int64_t v32 = v29 + 2;
    goto LABEL_22;
  }
  unint64_t v34 = *(void *)(v44 + 8 * v40);
  if (v34)
  {
    int64_t v32 = v29 + 3;
    unint64_t v23 = v67;
LABEL_18:
    uint64_t v68 = (v34 - 1) & v34;
    unint64_t v31 = __clz(__rbit64(v34)) + (v32 << 6);
LABEL_12:
    (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v30, *(void *)(v23 + 48) + *(void *)(v51 + 72) * v31, a4);
    (*(void (**)(char *, unint64_t, uint64_t))(v52 + 16))(&v30[*(int *)(TupleTypeMetadata2 + 48)], *(void *)(v23 + 56) + *(void *)(v52 + 72) * v31, a5);
    uint64_t v33 = 0;
    goto LABEL_22;
  }
  unint64_t v23 = v67;
  while (1)
  {
    int64_t v32 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v32 >= v45)
    {
      uint64_t v68 = 0;
      uint64_t v33 = 1;
      int64_t v32 = v42;
      goto LABEL_22;
    }
    unint64_t v34 = *(void *)(v44 + 8 * v32);
    ++v40;
    if (v34) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t IndexPath.safeSection.getter()
{
  if ((unint64_t)(IndexPath.count.getter() - 1) > 1)
  {
    return NSNotFound.getter();
  }
  else
  {
    return IndexPath.subscript.getter();
  }
}

uint64_t IndexPath.safeSection.setter()
{
  uint64_t result = IndexPath.count.getter();
  if ((unint64_t)(result - 1) <= 1)
  {
    return IndexPath.subscript.setter();
  }
  return result;
}

uint64_t (*IndexPath.safeSection.modify(uint64_t *a1))()
{
  a1[1] = v1;
  if ((unint64_t)(IndexPath.count.getter() - 1) > 1) {
    uint64_t v3 = NSNotFound.getter();
  }
  else {
    uint64_t v3 = IndexPath.subscript.getter();
  }
  *a1 = v3;
  return sub_100A96F58;
}

uint64_t sub_100A96F58()
{
  uint64_t result = IndexPath.count.getter();
  if ((unint64_t)(result - 1) <= 1) {
    return IndexPath.subscript.setter();
  }
  return result;
}

uint64_t IndexPath.safeItem.getter()
{
  if ((unint64_t)IndexPath.count.getter() > 1)
  {
    return IndexPath.subscript.getter();
  }
  else
  {
    return NSNotFound.getter();
  }
}

unint64_t IndexPath.safeItem.setter()
{
  unint64_t result = IndexPath.count.getter();
  if (result >= 2)
  {
    return IndexPath.subscript.setter();
  }
  return result;
}

unint64_t (*IndexPath.safeItem.modify(uint64_t *a1))()
{
  a1[1] = v1;
  if ((unint64_t)IndexPath.count.getter() > 1) {
    uint64_t v3 = IndexPath.subscript.getter();
  }
  else {
    uint64_t v3 = NSNotFound.getter();
  }
  *a1 = v3;
  return sub_100A97090;
}

unint64_t sub_100A97090()
{
  unint64_t result = IndexPath.count.getter();
  if (result >= 2) {
    return IndexPath.subscript.setter();
  }
  return result;
}

void *String.nonBreakingSpace.unsafeMutableAddressor()
{
  return &static String.nonBreakingSpace;
}

uint64_t static String.nonBreakingSpace.getter()
{
  return 41154;
}

Swift::String __swiftcall String.trim()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = v3;
  v15[1] = v2;
  id v8 = [self whitespaceAndNewlineCharacterSet];
  static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10005D228();
  uint64_t v9 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v12 = v9;
  uint64_t v13 = v11;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

Swift::String __swiftcall String.removeSpaces()()
{
  sub_10005D228();
  uint64_t v0 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall String.replace(usingRegexPattern:with:options:)(Swift::String usingRegexPattern, Swift::String with, NSRegularExpressionOptions options)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  object = usingRegexPattern._object;
  uint64_t countAndFlagsBits = usingRegexPattern._countAndFlagsBits;
  objc_allocWithZone((Class)NSRegularExpression);
  swift_bridgeObjectRetain();
  id v10 = sub_100A9A200(countAndFlagsBits, (uint64_t)object, options);
  uint64_t v11 = v10;
  if (v10)
  {
    uint64_t v12 = String.count.getter();
    NSString v13 = String._bridgeToObjectiveC()();
    NSString v14 = String._bridgeToObjectiveC()();
    id v15 = [v11 stringByReplacingMatchesInString:v13 options:0 range:0 withTemplate:v14];

    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v16;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v17 = v6;
  uint64_t v18 = v5;
  result._object = v18;
  result._uint64_t countAndFlagsBits = v17;
  return result;
}

Swift::String __swiftcall String.htmlizedString()()
{
  sub_10005D228();
  uint64_t v0 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  sub_100A974C4(v0, v1);
  swift_bridgeObjectRelease();
  uint64_t v2 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t v5 = v2;
  uint64_t v6 = v4;
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

unint64_t sub_100A974C4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010C70B8);
  __chkstk_darwin(v4 - 8);
  int v53 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = 0;
  unint64_t v60 = 0xE000000000000000;
  uint64_t v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v7 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v7 = 11;
  }
  unint64_t v49 = 4 * v6;
  uint64_t v57 = a1;
  unint64_t v58 = a2;
  uint64_t v54 = v7 | (v6 << 16);
  uint64_t v55 = 38;
  unint64_t v56 = 0xE100000000000000;
  unint64_t v8 = 0;
  uint64_t v52 = type metadata accessor for Locale();
  uint64_t v9 = *(void *)(v52 - 8);
  unint64_t v10 = 15;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  uint64_t v50 = v9 + 56;
  uint64_t v51 = v11;
  uint64_t v47 = a1;
  unint64_t v48 = a2;
  while (1)
  {
    uint64_t v13 = (uint64_t)v53;
    v51(v53, 1, 1, v52);
    sub_10005D228();
    unint64_t v14 = StringProtocol.range<A>(of:options:range:locale:)();
    char v16 = v15;
    sub_1000637B8(v13, &qword_1010C70B8);
    unint64_t result = swift_bridgeObjectRelease();
    if (v16) {
      break;
    }
    unint64_t v17 = v14 >> 14;
    if (v14 >> 14 < v8)
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    String.subscript.getter();
    String.append(contentsOf:)();
    unint64_t result = swift_bridgeObjectRelease();
    uint64_t v57 = a1;
    unint64_t v58 = a2;
    uint64_t v55 = 59;
    unint64_t v56 = 0xE100000000000000;
    if (v49 < v17) {
      goto LABEL_34;
    }
    uint64_t v18 = (uint64_t)v53;
    v51(v53, 1, 1, v52);
    StringProtocol.range<A>(of:options:range:locale:)();
    unint64_t v10 = v19;
    char v21 = v20;
    sub_1000637B8(v18, &qword_1010C70B8);
    unint64_t result = swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_31;
    }
    unint64_t v8 = v10 >> 14;
    if (v10 >> 14 < v17) {
      goto LABEL_36;
    }
    unint64_t v22 = String.subscript.getter();
    unint64_t v24 = v23;
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    if (sub_100A9ABDC(8998, 0xE200000000000000, v22, v23))
    {
      unint64_t result = Substring.index(_:offsetBy:)();
      if (v24 >> 14 < result >> 14) {
        goto LABEL_37;
      }
      unint64_t v29 = Substring.subscript.getter();
      unint64_t v31 = v30;
      if (sub_100A9ABDC(120, 0xE100000000000000, v29, v30))
      {
        swift_bridgeObjectRelease();
        uint64_t v32 = 16;
      }
      else
      {
        BOOL v39 = sub_100A9ABDC(88, 0xE100000000000000, v29, v31);
        swift_bridgeObjectRelease();
        if (v39) {
          uint64_t v32 = 16;
        }
        else {
          uint64_t v32 = 10;
        }
      }
      unint64_t v40 = Substring.index(_:offsetBy:)();
      unint64_t result = Substring.index(_:offsetBy:)();
      if (result >> 14 < v40 >> 14) {
        goto LABEL_38;
      }
      unint64_t v41 = Substring.subscript.getter();
      uint64_t v38 = sub_100A98088(v41, v42, v43, v44, v32);
      uint64_t v37 = v45;
      swift_bridgeObjectRelease();
      if (v37)
      {
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
    else
    {
      if (qword_1010C6390 != -1) {
        swift_once();
      }
      uint64_t v33 = off_1010C7068;
      if (*((void *)off_1010C7068 + 2))
      {
        swift_bridgeObjectRetain();
        unint64_t v34 = sub_100A9A308(v22, v24, v26, v28);
        if (v35)
        {
          unint64_t v36 = (uint64_t *)(v33[7] + 16 * v34);
          uint64_t v38 = *v36;
          uint64_t v37 = (void *)v36[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease_n();
LABEL_29:
          v46._uint64_t countAndFlagsBits = v38;
          v46._object = v37;
          String.append(_:)(v46);
          goto LABEL_8;
        }
        swift_bridgeObjectRelease();
      }
    }
    String.append(contentsOf:)();
LABEL_8:
    a1 = v47;
    unint64_t result = swift_bridgeObjectRelease();
    a2 = v48;
    uint64_t v57 = a1;
    unint64_t v58 = v48;
    uint64_t v55 = 38;
    unint64_t v56 = 0xE100000000000000;
    if (v49 < v8) {
      goto LABEL_35;
    }
  }
  unint64_t v17 = v10 >> 14;
LABEL_31:
  if (v49 >= v17)
  {
    String.subscript.getter();
    String.append(contentsOf:)();
    swift_bridgeObjectRelease();
    return v59;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::String __swiftcall String.insensitiveCompareString()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = sub_100063814(&qword_1010C70B8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = 0xE000000000000000;
  uint64_t v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  uint64_t v8 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v25 = v3;
  unint64_t v26 = v2;
  uint64_t v27 = 0;
  uint64_t v28 = v8;
  swift_bridgeObjectRetain();
  Swift::String_optional v9 = String.Iterator.next()();
  if (v9.value._object)
  {
    uint64_t countAndFlagsBits = v9.value._countAndFlagsBits;
    object = v9.value._object;
    do
    {
      if ((Character.isPunctuation.getter() & 1) == 0)
      {
        v13._uint64_t countAndFlagsBits = countAndFlagsBits;
        v13._object = object;
        String.append(_:)(v13);
      }
      swift_bridgeObjectRelease();
      Swift::String_optional v12 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v12.value._countAndFlagsBits;
      object = v12.value._object;
    }
    while (v12.value._object);
    uint64_t v14 = v29;
    unint64_t v7 = v30;
  }
  else
  {
    uint64_t v14 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v25 = v14;
  unint64_t v26 = v7;
  sub_10005D228();
  uint64_t v15 = StringProtocol.localizedLowercase.getter();
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v25 = v15;
  unint64_t v26 = v17;
  static Locale.current.getter();
  uint64_t v18 = type metadata accessor for Locale();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v6, 0, 1, v18);
  uint64_t v19 = StringProtocol.folding(options:locale:)();
  char v21 = v20;
  sub_1000637B8((uint64_t)v6, &qword_1010C70B8);
  swift_bridgeObjectRelease();
  uint64_t v22 = v19;
  unint64_t v23 = v21;
  result._object = v23;
  result._uint64_t countAndFlagsBits = v22;
  return result;
}

id String.BOOLValue.getter()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [v0 BOOLValue];

  return v1;
}

BOOL String.containsExcessiveHeightCharacters.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  sub_100063814(&qword_1010C70C0);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v20 - v5;
  uint64_t v7 = type metadata accessor for CharacterSet();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = CTFontCopySystemUIFontExcessiveLineHeightCharacterSet();
  Swift::String_optional v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v11
    && (Swift::String v13 = (void *)v11,
        v12(v4, 1, 1, v7),
        sub_100A9B958(&qword_1010C70C8, (void (*)(uint64_t))&type metadata accessor for CharacterSet),
        dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)(),
        v13,
        uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48),
        v14(v4, 1, v7) != 1))
  {
    uint64_t v20 = a2;
    unint64_t v17 = v4;
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v18(v6, v17, v7);
    v12(v6, 0, 1, v7);
    if (v14(v6, 1, v7) != 1)
    {
      v18(v10, v6, v7);
      uint64_t v22 = v21;
      uint64_t v23 = v20;
      sub_10005D228();
      StringProtocol.rangeOfCharacter(from:options:range:)();
      BOOL v15 = (v19 & 1) == 0;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return v15;
    }
  }
  else
  {
    v12(v6, 1, 1, v7);
  }
  sub_1000637B8((uint64_t)v6, &qword_1010C70C0);
  return 0;
}

BOOL String.containsCharacter(from:)()
{
  sub_10005D228();
  StringProtocol.rangeOfCharacter(from:options:range:)();
  return (v0 & 1) == 0;
}

void *sub_100A97F74()
{
  sub_100063814(&qword_1010C71A8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100E338D0;
  *(void *)(inited + 32) = Substring.init(_:)();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 56) = v3;
  *(void *)(inited + 64) = 34;
  *(void *)(inited + 72) = 0xE100000000000000;
  *(void *)(inited + 80) = Substring.init(_:)();
  *(void *)(inited + 88) = v4;
  *(void *)(inited + 96) = v5;
  *(void *)(inited + 104) = v6;
  *(void *)(inited + 112) = 38;
  *(void *)(inited + 120) = 0xE100000000000000;
  *(void *)(inited + 128) = Substring.init(_:)();
  *(void *)(inited + 136) = v7;
  *(void *)(inited + 144) = v8;
  *(void *)(inited + 152) = v9;
  *(void *)(inited + 160) = 39;
  *(void *)(inited + 168) = 0xE100000000000000;
  *(void *)(inited + 176) = Substring.init(_:)();
  *(void *)(inited + 184) = v10;
  *(void *)(inited + 192) = v11;
  *(void *)(inited + 200) = v12;
  *(void *)(inited + 208) = 60;
  *(void *)(inited + 216) = 0xE100000000000000;
  *(void *)(inited + 224) = Substring.init(_:)();
  *(void *)(inited + 232) = v13;
  *(void *)(inited + 240) = v14;
  *(void *)(inited + 248) = v15;
  *(void *)(inited + 256) = 62;
  *(void *)(inited + 264) = 0xE100000000000000;
  Swift::String result = (void *)sub_100A868A4(inited);
  off_1010C7068 = result;
  return result;
}

uint64_t sub_100A98088(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((unint64_t)(a5 - 37) < 0xFFFFFFFFFFFFFFDDLL)
  {
    __break(1u);
    return static String._uncheckedFromUTF8(_:)();
  }
  if ((a2 ^ a1) < 0x4000) {
    return 0;
  }
  uint64_t v10 = sub_100A9AD74(a1, a2, a3, a4, a5);
  if ((v10 & 0x10000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_100A9A690(a1, a2, a3, a4, a5);
    swift_bridgeObjectRelease();
    if ((v11 & 0x100000000) != 0) {
      return 0;
    }
  }
  else
  {
    LODWORD(v11) = v10;
    if ((v10 & 0x100000000) != 0) {
      return 0;
    }
  }
  uint64_t result = 0;
  if (WORD1(v11) <= 0x10u && (v11 & 0xFFFFF800) != 0xD800)
  {
    if ((v11 & 0xFFFFFF80) == 0 && v11 > 0xFF)
    {
      __break(1u);
      return result;
    }
    return static String._uncheckedFromUTF8(_:)();
  }
  return result;
}

uint64_t Optional<A>.isEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v3 = v2 == 0;
  return !a2 || v3;
}

uint64_t Optional<A>.nonEmpty.getter(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a1;
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

NSAttributedString __swiftcall NSAttributedString.init(string:attributes:replacingPlaceholder:withImage:imageAttributes:)(Swift::String string, Swift::OpaquePointer attributes, Swift::String replacingPlaceholder, UIImage_optional withImage, Swift::OpaquePointer imageAttributes)
{
  Class isa = withImage.value.super.isa;
  static String.localizedStringWithFormat(_:_:)();
  id v6 = objc_allocWithZone((Class)NSMutableAttributedString);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  _s3__C3KeyVMa_1(0);
  uint64_t v9 = v8;
  sub_100A9B958(&qword_1010C6530, _s3__C3KeyVMa_1);
  uint64_t v23 = v9;
  Class v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [v6 initWithString:v7 attributes:v10];

  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v12 rangeOfString:v13 options:129];
  uint64_t v16 = v15;

  if (isa)
  {
    unint64_t v17 = self;
    Class isa = isa;
    id v18 = [v17 textAttachmentWithImage:isa];
    Class v19 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v20 = [self attributedStringWithAttachment:v18 attributes:v19];
  }
  else
  {
    swift_bridgeObjectRelease();
    id v20 = [objc_allocWithZone((Class)NSAttributedString) init];
  }
  [v11 replaceCharactersInRange:v14 withAttributedString:v16];
  id v21 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithAttributedString:v11];

  return (NSAttributedString)v21;
}

void sub_100A98558()
{
  static Double.epsilon = 0x3E80000000000000;
}

uint64_t *Double.epsilon.unsafeMutableAddressor()
{
  if (qword_1010C6398 != -1) {
    swift_once();
  }
  return &static Double.epsilon;
}

double static Double.epsilon.getter()
{
  if (qword_1010C6398 != -1) {
    swift_once();
  }
  return *(double *)&static Double.epsilon;
}

double TimeIntervalSyntaxSugar.minutes.getter(uint64_t a1, uint64_t a2)
{
  return (*(double (**)(void))(a2 + 16))() * 60.0;
}

double TimeIntervalSyntaxSugar.hours.getter(uint64_t a1, uint64_t a2)
{
  return (*(double (**)(void))(a2 + 24))() * 60.0;
}

double sub_100A98668()
{
  return (double)*v0;
}

double sub_100A98674()
{
  return (double)*v0 * 60.0;
}

double sub_100A9868C()
{
  return (double)*v0 * 60.0 * 60.0;
}

double sub_100A986A8()
{
  return *v0 * 60.0;
}

double sub_100A986BC()
{
  return *v0 * 60.0 * 60.0;
}

uint64_t _NSRange.init(range:in:)()
{
  String.Index.samePosition(in:)();
  if (v0 & 1) != 0 || (String.Index.samePosition(in:)(), (v1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v2 = String.UTF16View.distance(from:to:)();
    String.UTF16View.distance(from:to:)();
    swift_bridgeObjectRelease();
    return v2;
  }
  return result;
}

{
  char v0;
  char v1;
  uint64_t v2;
  uint64_t result;

  String.index(after:)();
  String.Index.samePosition(in:)();
  if (v0 & 1) != 0 || (String.Index.samePosition(in:)(), (v1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v2 = String.UTF16View.distance(from:to:)();
    String.UTF16View.distance(from:to:)();
    swift_bridgeObjectRelease();
    return v2;
  }
  return result;
}

Swift::Bool __swiftcall _NSRange.contains(_:)(__C::_NSRange a1)
{
  if (a1.location >= v1)
  {
    if (__OFADD__(a1.location, a1.length))
    {
      __break(1u);
    }
    else if (!__OFADD__(v1, v2))
    {
      LOBYTE(a1.location) = v1 + v2 >= a1.location + a1.length;
      return a1.location;
    }
    __break(1u);
    return a1.location;
  }
  LOBYTE(a1.location) = 0;
  return a1.location;
}

__C::_NSRange __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _NSRange.convert(from:to:preserveLength:)(Swift::String from, Swift::String to, Swift::Bool preserveLength)
{
  sub_10005D228();
  if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRetain();
    Swift::Int v4 = String.UTF16View.count.getter();
    swift_bridgeObjectRelease();
    NSString v5 = String._bridgeToObjectiveC()();
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 rangeOfString:v6 to._countAndFlagsBits to._object from._countAndFlagsBits from._object];
    Swift::Int v9 = v8;

    v10.Swift::Int location = 0;
    v10.Swift::Int length = v4;
    v11.Swift::Int location = (Swift::Int)v7;
    v11.Swift::Int length = v9;
    __C::_NSRange v14 = _NSRange.convert(from:to:preserveLength:)(v10, v11, preserveLength);
    Swift::Int length = v14.length;
    Swift::Int location = v14.location;
  }
  else
  {
    sub_100A9AF04();
    swift_allocError();
    *uint64_t v15 = 4;
    Swift::Int location = swift_willThrow();
  }
  result.Swift::Int length = length;
  result.Swift::Int location = location;
  return result;
}

__C::_NSRange __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _NSRange.convert(from:to:preserveLength:)(__C::_NSRange from, __C::_NSRange to, Swift::Bool preserveLength)
{
  if (to.location < from.location) {
    goto LABEL_5;
  }
  if (__OFADD__(to.location, to.length))
  {
    __break(1u);
    goto LABEL_19;
  }
  Swift::Int v5 = from.location + from.length;
  if (__OFADD__(from.location, from.length))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v5 < to.location + to.length)
  {
LABEL_5:
    char v6 = 0;
LABEL_6:
    sub_100A9AF04();
    swift_allocError();
    *id v7 = v6;
    from.Swift::Int location = swift_willThrow();
    return from;
  }
  if (v3 < from.location)
  {
LABEL_11:
    char v6 = 1;
    goto LABEL_6;
  }
  uint64_t v8 = v4;
  if (__OFADD__(v3, v4)) {
    goto LABEL_20;
  }
  if (v5 < v3 + v4) {
    goto LABEL_11;
  }
  if (__OFSUB__(v3, to.location))
  {
LABEL_21:
    __break(1u);
    return from;
  }
  v10.Swift::Int location = 0;
  v10.Swift::Int length = v11;
  *(__C::_NSRange_optional *)&from.Swift::Int location = _NSRange.intersection(_:)(v10);
  if (v12)
  {
    char v6 = 2;
    goto LABEL_6;
  }
  if (preserveLength && from.length != v8)
  {
    char v6 = 3;
    goto LABEL_6;
  }
  return from;
}

Swift::Bool __swiftcall _NSRange.intersects(_:)(__C::_NSRange a1)
{
  if (__OFADD__(v1, v2))
  {
    __break(1u);
    goto LABEL_13;
  }
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_13:
    __break(1u);
    return a1.location;
  }
  if (v1 >= a1.location && a1.location + a1.length > v1) {
    return 1;
  }
  LOBYTE(a1.location) = a1.location >= v1 && v1 + v2 > a1.location;
  return a1.location;
}

uint64_t sub_100A98BCC()
{
  uint64_t result = NSNotFound.getter();
  static _NSRange.notFound = result;
  unk_10112BE20 = 0;
  return result;
}

uint64_t *_NSRange.notFound.unsafeMutableAddressor()
{
  if (qword_1010C63A0 != -1) {
    swift_once();
  }
  return &static _NSRange.notFound;
}

uint64_t static _NSRange.notFound.getter()
{
  if (qword_1010C63A0 != -1) {
    swift_once();
  }
  return static _NSRange.notFound;
}

Swift::tuple_first___C__NSRange_second___C__NSRange __swiftcall _NSRange.difference(_:)(__C::_NSRange a1)
{
  Swift::Int v3 = v2;
  Swift::Int v4 = v1;
  Swift::Int v5 = v1 + v2;
  BOOL v6 = __OFADD__(v1, v2);
  if (v1 < a1.location)
  {
    if (!v6) {
      goto LABEL_10;
    }
    __break(1u);
  }
  if (v6)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    swift_once();
    goto LABEL_43;
  }
  if (a1.location + a1.length >= v5)
  {
    if (qword_1010C63A0 == -1)
    {
LABEL_45:
      Swift::Int v4 = static _NSRange.notFound;
      Swift::Int v3 = unk_10112BE20;
      Swift::Int v7 = static _NSRange.notFound;
      Swift::Int v9 = unk_10112BE20;
      goto LABEL_46;
    }
LABEL_48:
    swift_once();
    goto LABEL_45;
  }
LABEL_10:
  Swift::Int v7 = a1.location + a1.length;
  if (__OFADD__(a1.location, a1.length))
  {
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v4 < a1.location || v7 <= v4) {
    goto LABEL_27;
  }
  BOOL v8 = 0;
  Swift::Int v3 = a1.location - v4;
  if (!__OFSUB__(a1.location, v4))
  {
    while (1)
    {
      Swift::Int v9 = v5 - v7;
      if (__OFSUB__(v5, v7)) {
        goto LABEL_50;
      }
      if (!v8) {
        break;
      }
      if (v7 >= v5) {
        goto LABEL_38;
      }
      Swift::Int v5 = v4 + v3;
      if (__OFADD__(v4, v3))
      {
        __break(1u);
LABEL_55:
        Swift::Int v11 = a1.location + a1.length;
        Swift::Int v12 = v9;
        swift_once();
        Swift::Int v9 = v12;
        Swift::Int v7 = v11;
LABEL_42:
        Swift::Int v4 = v7;
        Swift::Int v3 = v9;
        goto LABEL_43;
      }
      if (v5 < v7) {
        goto LABEL_46;
      }
      if (__OFADD__(v7, v9))
      {
        __break(1u);
        goto LABEL_57;
      }
      if (v5 <= v7 + v9) {
        Swift::Int v5 = v7 + v9;
      }
      if (v7 < v4) {
        Swift::Int v4 = a1.location + a1.length;
      }
      Swift::Int v3 = v5 - v4;
      if (!__OFSUB__(v5, v4)) {
        goto LABEL_38;
      }
      __break(1u);
LABEL_27:
      if (a1.location < v4 || v5 <= a1.location) {
        goto LABEL_38;
      }
      BOOL v8 = v4 < a1.location && v3 > 0;
      Swift::Int v3 = a1.location - v4;
      if (__OFSUB__(a1.location, v4)) {
        goto LABEL_37;
      }
    }
    if (v7 < v5)
    {
      if (qword_1010C63A0 != -1) {
        goto LABEL_55;
      }
      goto LABEL_42;
    }
    if (qword_1010C63A0 == -1) {
      goto LABEL_45;
    }
    goto LABEL_48;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  if (qword_1010C63A0 != -1) {
    goto LABEL_53;
  }
LABEL_43:
  Swift::Int v7 = static _NSRange.notFound;
  Swift::Int v9 = unk_10112BE20;
LABEL_46:
  a1.Swift::Int location = v4;
  a1.Swift::Int length = v3;
LABEL_57:
  result.first = a1;
  result.second.Swift::Int length = v9;
  result.second.Swift::Int location = v7;
  return result;
}

uint64_t _NSRange.extendRangeToBounds(of:allowedCharacterSet:forbiddenCharacterSet:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v6 = Range<>.init(_:in:)();
  if (v8)
  {
LABEL_22:
    int v31 = 0;
    uint64_t v30 = 667;
    goto LABEL_25;
  }
  unint64_t v9 = v6;
  unint64_t v10 = v7;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v12 = 4 * v11;
  unint64_t v35 = a2;
  uint64_t v32 = 4 * v11;
LABEL_5:
  if (v9 >= 0x4000)
  {
    unint64_t v15 = String.index(before:)();
    if (v10 >> 14 >= v15 >> 14)
    {
      char v16 = 0;
      unint64_t v17 = v15;
      unint64_t v14 = v10;
      do
      {
        unint64_t v36 = v9;
        uint64_t v18 = String.subscript.getter();
        uint64_t v19 = a1;
        unint64_t v21 = v20;
        __chkstk_darwin(v18);
        uint64_t v30 = v33;
        swift_bridgeObjectRetain();
        char v22 = sub_100A99358((uint64_t (*)(void *))sub_100A9AF58, (uint64_t)v29, v18, v21);
        uint64_t v23 = swift_bridgeObjectRelease();
        __chkstk_darwin(v23);
        uint64_t v30 = v34;
        char v24 = sub_100A9968C(0, (void (*)(uint64_t *__return_ptr, char *, void *))sub_100A9AF78, (uint64_t)v29, v18, v21);
        a1 = v19;
        uint64_t v12 = v32;
        swift_bridgeObjectRelease();
        if (v22 & 1) == 0 || (v24)
        {
          unint64_t v9 = v36;
          if (v16) {
            goto LABEL_18;
          }
        }
        else
        {
          unint64_t v9 = v17;
          unint64_t v14 = v10;
          if ((v16 & 1) == 0) {
            goto LABEL_5;
          }
        }
LABEL_10:
        char v13 = 1;
        if (v12 == v14 >> 14) {
          goto LABEL_9;
        }
        unint64_t v10 = String.index(after:)();
        char v16 = 1;
        unint64_t v17 = v9;
      }
      while (v10 >> 14 >= v9 >> 14);
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  char v13 = 0;
  unint64_t v14 = v10;
LABEL_9:
  if ((v13 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_18:
  swift_bridgeObjectRetain();
  String.Index.samePosition(in:)();
  if (v25)
  {
    int v31 = 0;
    uint64_t v30 = 719;
  }
  else
  {
    String.Index.samePosition(in:)();
    if ((v26 & 1) == 0)
    {
      uint64_t v27 = String.UTF16View.distance(from:to:)();
      String.UTF16View.distance(from:to:)();
      swift_bridgeObjectRelease();
      return v27;
    }
    int v31 = 0;
    uint64_t v30 = 720;
  }
LABEL_25:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100A991CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CharacterSet();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100063814(&qword_1010C70C0);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100A9BAE4(a2, (uint64_t)v9);
  char v10 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    char v10 = CharacterSet.contains(_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v10 & 1;
}

uint64_t sub_100A99358(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  v17[3] = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v16 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v17[0] = a3;
          v17[1] = v16;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v12 = v11;
      LODWORD(v17[0]) = v10;
      char v13 = a1(v17);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return v14 & 1;
      }
      if ((v13 & 1) == 0) {
        break;
      }
      v9 += v12;
      if (v9 >= v5)
      {
        swift_bridgeObjectRelease();
        char v14 = 1;
        return v14 & 1;
      }
    }
    swift_bridgeObjectRelease();
    char v14 = 0;
  }
  else
  {
    char v14 = 1;
  }
  return v14 & 1;
}

uint64_t sub_100A9949C@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CharacterSet();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100063814(&qword_1010C70C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v18 - v14;
  LOBYTE(a1) = *a1;
  sub_100A9BAE4(a2, (uint64_t)&v18 - v14);
  if (a1)
  {
    char v16 = 1;
  }
  else
  {
    sub_100A9BAE4((uint64_t)v15, (uint64_t)v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
    {
      char v16 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
      char v16 = CharacterSet.contains(_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  uint64_t result = sub_1000637B8((uint64_t)v15, &qword_1010C70C0);
  *a3 = v16 & 1;
  return result;
}

uint64_t sub_100A9968C(char a1, void (*a2)(uint64_t *__return_ptr, char *, void *), uint64_t a3, uint64_t a4, unint64_t a5)
{
  BYTE1(v17) = a1;
  if ((a5 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a5) & 0xF;
  }
  else {
    uint64_t v6 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    uint64_t v15 = a5 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
    do
    {
      if ((a5 & 0x1000000000000000) != 0)
      {
        int v11 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          v16[0] = a4;
          v16[1] = v15;
        }
        else if ((a4 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        int v11 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v13 = v12;
      LODWORD(v16[0]) = v11;
      a2(&v17, (char *)&v17 + 1, v16);
      if (v5) {
        break;
      }
      v10 += v13;
      LOBYTE(v13) = v17;
      BYTE1(v17) = v17;
    }
    while (v10 < v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v13) = a1;
  }
  return v13 & 1;
}

Swift::Int_optional __swiftcall _NSRange.NSRangeIterator.next()()
{
  Swift::Int v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v0 + 24))
  {
    Swift::Bool v2 = 1;
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 8);
    if (__OFADD__(*(void *)v0, v3))
    {
      __break(1u);
    }
    else if (v1 >= *(void *)v0 + v3)
    {
      Swift::Int v1 = 0;
      Swift::Bool v2 = 1;
    }
    else
    {
      Swift::Bool v2 = 0;
      *(void *)(v0 + 16) = v1 + 1;
    }
  }
  result.value = v1;
  result.is_nil = v2;
  return result;
}

void sub_100A99810(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (*(unsigned char *)(v1 + 24)) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(v1 + 8);
  if (!__OFADD__(*(void *)v1, v3))
  {
    if (v2 < *(void *)v1 + v3)
    {
      char v4 = 0;
      *(void *)(v1 + 16) = v2 + 1;
LABEL_7:
      *(void *)a1 = v2;
      *(unsigned char *)(a1 + 8) = v4;
      return;
    }
    uint64_t v2 = 0;
LABEL_6:
    char v4 = 1;
    goto LABEL_7;
  }
  __break(1u);
}

void sub_100A99868(uint64_t a1@<X8>)
{
  uint64_t v2 = v1[1];
  if (v2 >= 1) {
    uint64_t v3 = *v1;
  }
  else {
    uint64_t v3 = 0;
  }
  *(void *)a1 = *v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v2 < 1;
}

uint64_t sub_100A99888()
{
  return sub_100A9A514(*v0, v0[1]);
}

uint64_t sub_100A99890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100A93CC8(a1, a2, a3, *v3, v3[1]);
}

uint64_t WeakWrapper.value.setter()
{
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t (*WeakWrapper.value.modify(uint64_t *a1))()
{
  a1[1] = v1;
  *a1 = swift_unknownObjectWeakLoadStrong();
  return sub_100A99924;
}

uint64_t sub_100A99924()
{
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t WeakWrapper.init(value:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t Int.romanNumeral.getter(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  uint64_t v1 = a1;
  for (unint64_t i = 0; i != 13; ++i)
  {
    if (i >= 0xD)
    {
      __break(1u);
      JUMPOUT(0x100A99B30);
    }
    uint64_t v3 = qword_100E51210[*((char *)&off_101003930 + i + 32)];
    if (v1 >= v3)
    {
      char v4 = (void *)0xE100000000000000;
      uint64_t v5 = 77;
      switch(*((unsigned char *)&off_101003930 + i + 32))
      {
        case 1:
          char v4 = (void *)0xE200000000000000;
          uint64_t v5 = 19779;
          break;
        case 2:
          uint64_t v5 = 68;
          break;
        case 3:
          char v4 = (void *)0xE200000000000000;
          uint64_t v5 = 17475;
          break;
        case 4:
          uint64_t v5 = 67;
          break;
        case 5:
          char v4 = (void *)0xE200000000000000;
          uint64_t v5 = 17240;
          break;
        case 6:
          uint64_t v5 = 76;
          break;
        case 7:
          char v4 = (void *)0xE200000000000000;
          uint64_t v5 = 19544;
          break;
        case 8:
          uint64_t v5 = 88;
          break;
        case 9:
          char v4 = (void *)0xE200000000000000;
          uint64_t v5 = 22601;
          break;
        case 0xA:
          uint64_t v5 = 86;
          break;
        case 0xB:
          char v4 = (void *)0xE200000000000000;
          uint64_t v5 = 22089;
          break;
        case 0xC:
          uint64_t v5 = 73;
          break;
        default:
          goto LABEL_19;
      }
      do
      {
LABEL_19:
        v1 -= v3;
        v6._uint64_t countAndFlagsBits = v5;
        v6._object = v4;
        String.append(_:)(v6);
      }
      while (v1 >= v3);
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

_UNKNOWN **static RomanNumerals.allCases.getter()
{
  return &off_101003930;
}

uint64_t RomanNumerals.arabicNumber.getter(char a1)
{
  return qword_100E51210[a1];
}

uint64_t RomanNumerals.rawValue.getter(char a1)
{
  uint64_t result = 77;
  switch(a1)
  {
    case 1:
      uint64_t result = 19779;
      break;
    case 2:
      uint64_t result = 68;
      break;
    case 3:
      uint64_t result = 17475;
      break;
    case 4:
      uint64_t result = 67;
      break;
    case 5:
      uint64_t result = 17240;
      break;
    case 6:
      uint64_t result = 76;
      break;
    case 7:
      uint64_t result = 19544;
      break;
    case 8:
      uint64_t result = 88;
      break;
    case 9:
      uint64_t result = 22601;
      break;
    case 10:
      uint64_t result = 86;
      break;
    case 11:
      uint64_t result = 22089;
      break;
    case 12:
      uint64_t result = 73;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100A99C64(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = RomanNumerals.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == RomanNumerals.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100A99CF0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  RomanNumerals.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100A99D54()
{
  RomanNumerals.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100A99DA8()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  RomanNumerals.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100A99E08@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s14MusicUtilities13RomanNumeralsO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100A99E38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RomanNumerals.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100A99E64(void *a1@<X8>)
{
  *a1 = &off_101003930;
}

Swift::Int sub_100A99E74()
{
  Swift::Int result = sub_100A9B9A0((uint64_t)&off_101003AB8);
  static NSDirectionalEdgeInsets.Edge.all = result;
  return result;
}

uint64_t *NSDirectionalEdgeInsets.Edge.all.unsafeMutableAddressor()
{
  if (qword_1010C63A8 != -1) {
    swift_once();
  }
  return &static NSDirectionalEdgeInsets.Edge.all;
}

uint64_t static NSDirectionalEdgeInsets.Edge.all.getter()
{
  if (qword_1010C63A8 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

double NSDirectionalEdgeInsets.init(edge:length:)(uint64_t a1, double a2)
{
  if (sub_10004414C(0, a1)) {
    double v4 = a2;
  }
  else {
    double v4 = 0.0;
  }
  sub_10004414C(1u, a1);
  sub_10004414C(2u, a1);
  sub_10004414C(3u, a1);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100A99FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for IndexPath();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_100A9B958(&qword_1010C7188, (void (*)(uint64_t))&type metadata accessor for IndexPath),
        uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(),
        uint64_t v8 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_100A9B958(&qword_1010C7190, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

id sub_100A9A200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithPattern:v5 options:a3 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_100A9A2DC(uint64_t a1, uint64_t a2)
{
  return sub_1000240D0(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100071C8C);
}

unint64_t sub_100A9A308(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100A9A3D8(a1, a2, a3, a4, v8);
}

unint64_t sub_100A9A394(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_1000E78F0(a1, v2);
}

unint64_t sub_100A9A3D8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v11 = *(void *)(v5 + 48);
    uint64_t v12 = (unint64_t *)(v11 + 32 * v8);
    unint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    unint64_t v15 = v12[2];
    unint64_t v16 = v12[3];
    unint64_t v17 = a1 >> 16;
    unint64_t v18 = a2 >> 16;
    BOOL v19 = v15 == a3 && v16 == a4;
    BOOL v20 = v19 && v13 >> 16 == v17;
    BOOL v21 = v20 && v14 >> 16 == v18;
    if (!v21 && (_stringCompareInternal(_:_:_:_:expecting:)() & 1) == 0)
    {
      uint64_t v22 = ~v7;
      do
      {
        unint64_t v8 = (v8 + 1) & v22;
        if (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        uint64_t v23 = (void *)(v11 + 32 * v8);
        BOOL v24 = v23[2] == a3 && v23[3] == a4;
        BOOL v25 = v24 && *v23 >> 16 == v17;
        BOOL v26 = v25 && v23[1] >> 16 == v18;
      }
      while (!v26 && (_stringCompareInternal(_:_:_:_:expecting:)() & 1) == 0);
    }
  }
  return v8;
}

uint64_t sub_100A9A514(uint64_t result, uint64_t a2)
{
  uint64_t v2 = _swiftEmptyArrayStorage;
  BOOL v21 = a2 < 1;
  if (a2 < 1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v3 = result;
    if (__OFADD__(result, a2))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v4 = 0;
    if (result <= result + a2) {
      uint64_t v5 = result + a2;
    }
    else {
      uint64_t v5 = result;
    }
    uint64_t v6 = &_swiftEmptyArrayStorage[4];
    while (v5 != v3)
    {
      if (!v4)
      {
        unint64_t v7 = v2[3];
        if ((uint64_t)((v7 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_33;
        }
        int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
        if (v8 <= 1) {
          uint64_t v9 = 1;
        }
        else {
          uint64_t v9 = v8;
        }
        sub_100063814(&qword_1010C6F78);
        id v10 = (void *)swift_allocObject();
        int64_t v11 = j__malloc_size(v10);
        uint64_t v12 = v11 - 32;
        if (v11 < 32) {
          uint64_t v12 = v11 - 25;
        }
        uint64_t v13 = v12 >> 3;
        v10[2] = v9;
        v10[3] = 2 * (v12 >> 3);
        unint64_t v14 = (unint64_t)(v10 + 4);
        uint64_t v15 = v2[3] >> 1;
        if (v2[2])
        {
          if (v10 != v2 || v14 >= (unint64_t)&v2[v15 + 4]) {
            memmove(v10 + 4, v2 + 4, 8 * v15);
          }
          v2[2] = 0;
        }
        uint64_t v6 = (void *)(v14 + 8 * v15);
        uint64_t v4 = (v13 & 0x7FFFFFFFFFFFFFFFLL) - v15;
        Swift::Int result = swift_release();
        uint64_t v2 = v10;
      }
      BOOL v17 = __OFSUB__(v4--, 1);
      if (v17)
      {
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      *v6++ = v3++;
      if (v21) {
        break;
      }
    }
  }
  unint64_t v18 = v2[3];
  if (v18 < 2) {
    return (uint64_t)v2;
  }
  unint64_t v19 = v18 >> 1;
  BOOL v17 = __OFSUB__(v19, v4);
  uint64_t v20 = v19 - v4;
  if (!v17)
  {
    v2[2] = v20;
    return (uint64_t)v2;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_100A9A690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_100A9BB4C();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_100A9AA04();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = sub_100A9A784(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 | ((((unint64_t)v13 >> 32) & 1) << 32);
}

unsigned __int8 *sub_100A9A784(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            unint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__CFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            unint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (v14 < v15) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100A9AA04()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_100A9AA84(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100A9AA84(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_10028E4D4(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          char v11 = sub_100076CD8(v9, 0),
          unint64_t v12 = sub_10028E5D4((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

BOOL sub_100A9ABDC(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 14;
  swift_bridgeObjectRetain();
  if (v5 == a3 >> 14)
  {
LABEL_10:
    object = String.Iterator.next()().value._object;
    swift_bridgeObjectRelease();
    BOOL v13 = object == 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    while (1)
    {
      while (1)
      {
        uint64_t v7 = Substring.subscript.getter();
        uint64_t v9 = v8;
        unint64_t v10 = Substring.index(after:)();
        Swift::String_optional v11 = String.Iterator.next()();
        if (!v11.value._object)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v13 = 1;
          goto LABEL_13;
        }
        if (v7 != v11.value._countAndFlagsBits || v11.value._object != v9) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v5 == v10 >> 14)
        {
LABEL_9:
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        break;
      }
      if (v5 == v10 >> 14) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    BOOL v13 = 0;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_100A9AD74(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    unsigned __int8 v14 = 0;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    Swift::String_optional v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    Swift::String_optional v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    Swift::String_optional v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_100A9AF94((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    unsigned __int8 v14 = BYTE4(result) & 1;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

uint64_t sub_100A9AE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  unint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  uint64_t result = sub_100A94E10(v11, a4, a5, &v12);
  if (!v5) {
    return v12;
  }
  return result;
}

unint64_t sub_100A9AF04()
{
  unint64_t result = qword_1010C70D0;
  if (!qword_1010C70D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C70D0);
  }
  return result;
}

uint64_t sub_100A9AF58(uint64_t a1)
{
  return sub_100A991CC(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100A9AF78@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100A9949C(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100A9AF94(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    unint64_t result = sub_10028DEA4(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_104;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = sub_10028DEA4(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t result = sub_10028DEA4(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_100;
  }
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  unsigned __int8 v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    unsigned __int8 v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v34 = a6 + 55;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v34 = 65;
        }
        if (a6 <= 10) {
          unsigned __int8 v35 = a6 + 48;
        }
        else {
          unsigned __int8 v35 = 58;
        }
        if (v19)
        {
          unsigned int v24 = 0;
          unint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            unsigned int v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                unsigned int v29 = 0;
                unsigned __int8 v30 = 1;
                if (v38 < 0x61 || v38 >= v33) {
                  return v29 | ((unint64_t)v30 << 32);
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            unint64_t v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_96;
            }
            unsigned __int8 v41 = v38 + v39;
            unsigned int v24 = v40 + v41;
            if (__CFADD__(v40, v41)) {
              goto LABEL_96;
            }
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          unsigned __int8 v30 = 0;
          unsigned int v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v42 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v43 = a6 + 55;
      }
      else
      {
        unsigned __int8 v42 = 97;
        unsigned __int8 v43 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v44 = a6 + 48;
      }
      else {
        unsigned __int8 v44 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        while (1)
        {
          unsigned int v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v45 < 0x61 || v45 >= v42) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v46 = -87;
            }
            else
            {
              char v46 = -55;
            }
          }
          else
          {
            char v46 = -48;
          }
          unint64_t v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_96;
          }
          unsigned __int8 v48 = v45 + v46;
          unsigned int v24 = v47 + v48;
          if (__CFADD__(v47, v48)) {
            goto LABEL_96;
          }
          ++v19;
          if (!--result) {
            goto LABEL_94;
          }
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    unsigned int v29 = 0;
    unsigned __int8 v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v22 = a6 + 55;
      }
      else
      {
        unsigned __int8 v21 = 97;
        unsigned __int8 v22 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v23 = a6 + 48;
      }
      else {
        unsigned __int8 v23 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v27 < 0x61 || v27 >= v21) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          unint64_t v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_96;
          }
          unsigned __int8 v32 = v27 + v28;
          unsigned int v24 = v31 - v32;
          if (v31 < v32) {
            goto LABEL_96;
          }
          ++v25;
          if (!--v26) {
            goto LABEL_94;
          }
        }
      }
LABEL_95:
      unsigned int v29 = 0;
      unsigned __int8 v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

unint64_t _s14MusicUtilities13RomanNumeralsO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101003960, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xD) {
    return 13;
  }
  else {
    return v3;
  }
}

unint64_t sub_100A9B40C()
{
  unint64_t result = qword_1010C70D8;
  if (!qword_1010C70D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C70D8);
  }
  return result;
}

unint64_t sub_100A9B464()
{
  unint64_t result = qword_1010C70E0;
  if (!qword_1010C70E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C70E0);
  }
  return result;
}

unint64_t sub_100A9B4BC()
{
  unint64_t result = qword_1010C70E8;
  if (!qword_1010C70E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C70E8);
  }
  return result;
}

uint64_t sub_100A9B510()
{
  return sub_100063858(&qword_1010C70F0, &qword_1010C70F8);
}

unint64_t sub_100A9B550()
{
  unint64_t result = qword_1010C7100[0];
  if (!qword_1010C7100[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1010C7100);
  }
  return result;
}

ValueMetadata *type metadata accessor for Data.Hexadecimal()
{
  return &type metadata for Data.Hexadecimal;
}

unsigned char *_s15ConversionErrorOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A9B680);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _NSRange.ConversionError()
{
  return &type metadata for _NSRange.ConversionError;
}

__n128 _s15NSRangeIteratorVwcp(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s15NSRangeIteratorVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s15NSRangeIteratorVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _NSRange.NSRangeIterator()
{
  return &type metadata for _NSRange.NSRangeIterator;
}

uint64_t type metadata accessor for WeakWrapper()
{
  return sub_10004CF5C();
}

unsigned char *storeEnumTagSinglePayload for RomanNumerals(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *__n128 result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A9B81CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RomanNumerals()
{
  return &type metadata for RomanNumerals;
}

unsigned char *_s4EdgeOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A9B920);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NSDirectionalEdgeInsets.Edge()
{
  return &type metadata for NSDirectionalEdgeInsets.Edge;
}

uint64_t sub_100A9B958(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_100A9B9A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100063814(&qword_1010C7198);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v14 + v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(unsigned char *)(v14 + v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_100A9BAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010C70C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100A9BB4C()
{
  unint64_t result = qword_1010C71A0;
  if (!qword_1010C71A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C71A0);
  }
  return result;
}

BOOL static MPModelObject.LoggingComponent.__derived_enum_less_than(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

uint64_t MPModelObject.humanDescription(including:)(uint64_t a1)
{
  Swift::String v2 = v1;
  swift_getObjectType();
  v4._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  uint64_t v6 = self;
  Swift::UInt v7 = (void *)swift_allocObject();
  long long v7[2] = a1;
  id v7[3] = v14;
  v7[4] = v2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_100A9C0A0;
  *(void *)(v8 + 24) = v7;
  v13[4] = sub_10013DD14;
  v13[5] = v8;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  void v13[2] = sub_10007A61C;
  v13[3] = &unk_101004DF0;
  uint64_t v9 = _Block_copy(v13);
  swift_bridgeObjectRetain();
  id v10 = v2;
  swift_retain();
  swift_release();
  [v6 performWithoutEnforcement:v9];
  _Block_release(v9);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = v14[0];
    swift_release();
    return v12;
  }
  return result;
}

uint64_t sub_100A9BDA8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  Swift::String v5 = sub_100AC7608(v4);
  swift_bridgeObjectRelease();
  *(void *)&v28[0] = v5;
  sub_100A9D144((char **)v28);
  uint64_t v6 = *(void *)&v28[0];
  uint64_t v7 = *(void *)(*(void *)&v28[0] + 16);
  if (v7)
  {
    swift_retain();
    uint64_t v8 = 0;
    while (*(unsigned char *)(v6 + v8 + 32))
    {
      if (*(unsigned char *)(v6 + v8 + 32) == 1)
      {
        *(void *)&v28[0] = 23328;
        *((void *)&v28[0] + 1) = 0xE200000000000000;
        id v18 = [a3 shortDescription];
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unsigned __int8 v21 = v20;

        v22._uint64_t countAndFlagsBits = v19;
        v22._object = v21;
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._uint64_t countAndFlagsBits = 93;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        goto LABEL_4;
      }
      sub_100A9D1B0();
      ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
      InstanceVariable = class_getInstanceVariable(ObjCClassFromMetadata, "_storage");
      if (!InstanceVariable) {
        goto LABEL_6;
      }
      strcpy((char *)v29, " properties=");
      BYTE5(v29[1]) = 0;
      HIWORD(v29[1]) = -5120;
      if (object_getIvar(a3, InstanceVariable))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v28, 0, sizeof(v28));
      }
      sub_100063814(&qword_1010C6AF0);
      v26._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      uint64_t v15 = v29[0];
      uint64_t v16 = v29[1];
LABEL_5:
      uint64_t v17 = v16;
      String.append(_:)(*(Swift::String *)&v15);
      swift_bridgeObjectRelease();
LABEL_6:
      if (v7 == ++v8) {
        return swift_release_n();
      }
    }
    strcpy((char *)v28, " identifiers=");
    HIWORD(v28[0]) = -4864;
    id v9 = [a3 identifiers];
    id v10 = [v9 description];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    v14._uint64_t countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);

    swift_bridgeObjectRelease();
LABEL_4:
    uint64_t v16 = *((void *)&v28[0] + 1);
    uint64_t v15 = *(void *)&v28[0];
    goto LABEL_5;
  }

  return swift_release();
}

uint64_t sub_100A9C060()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100A9C0A0()
{
  return sub_100A9BDA8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100A9C0AC()
{
  return swift_deallocObject();
}

unint64_t sub_100A9C0C0()
{
  unint64_t result = qword_1010C71B8;
  if (!qword_1010C71B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C71B8);
  }
  return result;
}

unsigned char *_s16LoggingComponentOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100A9C1E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MPModelObject.LoggingComponent()
{
  return &type metadata for MPModelObject.LoggingComponent;
}

uint64_t sub_100A9C270()
{
  uint64_t v1 = v0;
  id v2 = [v0 title];
  if (v2)
  {
    int v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unsigned int v6 = v5;
  }
  else
  {
    unsigned int v6 = (void *)0xED0000676E6F5320;
    uint64_t v4 = 0x64656C7469746E55;
  }
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 34;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  id v9 = [v1 album];
  if (v9)
  {
    id v10 = v9;
    id v11 = [v9 shortDescription];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v14 = v13;

    v15._uint64_t countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 0x206D75626C41203BLL;
    v16._object = (void *)0xE800000000000000;
    String.append(_:)(v16);

    swift_bridgeObjectRelease();
  }
  id v17 = [v1 artist];
  if (v17)
  {
    id v18 = v17;
    id v19 = [v17 shortDescription];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v22 = v21;

    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 0x747369747241203BLL;
    v24._object = (void *)0xE900000000000020;
    String.append(_:)(v24);

    swift_bridgeObjectRelease();
  }
  return 0x22203A656C746954;
}

uint64_t sub_100A9C670()
{
  id v1 = [v0 name];
  if (v1)
  {
    id v2 = v1;
    unint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = (void *)0x8000000100DB5700;
    unint64_t v3 = 0xD000000000000011;
  }
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 34;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x22203A656D614ELL;
}

uint64_t sub_100A9C744()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_100A9D0CC;
  *(void *)(v2 + 24) = v1;
  uint64_t v12 = v2;
  id v3 = v0;
  sub_100063814(&qword_1010C71C0);
  v4._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 2236475;
  v5._object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  id v6 = [v3 anyObject:sub_100A9D114, v12];
  Swift::String v7 = v6;
  if (v6)
  {
    id v8 = [v6 shortDescription];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  sub_100063814(&qword_1010C71C8);
  v9._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 34;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0x203A65707954;
}

uint64_t sub_100A9CA7C()
{
  uint64_t v1 = v0;
  id v2 = [v0 title];
  if (v2)
  {
    id v3 = v2;
    unint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = v5;
  }
  else
  {
    id v6 = (void *)0x8000000100DD2680;
    unint64_t v4 = 0xD000000000000010;
  }
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 34;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  id v9 = [v1 show];
  if (v9)
  {
    Swift::String v10 = v9;
    id v11 = [v9 shortDescription];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v14 = v13;

    v15._uint64_t countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 0x20776F6853203BLL;
    v16._object = (void *)0xE700000000000000;
    String.append(_:)(v16);

    swift_bridgeObjectRelease();
  }
  id v17 = [v1 season];
  if (v17)
  {
    id v18 = v17;
    id v19 = [v17 shortDescription];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v22 = v21;

    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 0x6E6F73616553203BLL;
    v24._object = (void *)0xE900000000000020;
    String.append(_:)(v24);

    swift_bridgeObjectRelease();
  }
  return 0x22203A656C746954;
}

id sub_100A9CD80(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v5;
}

uint64_t sub_100A9CDF0()
{
  id v1 = [v0 name];
  if (v1)
  {
    id v2 = v1;
    unint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v5 = v4;
  }
  else
  {
    NSString v5 = (void *)0x8000000100DD2660;
    unint64_t v3 = 0xD000000000000010;
  }
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 34;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x22203A656D614ELL;
}

uint64_t sub_100A9D094()
{
  return swift_deallocObject();
}

id sub_100A9D0CC()
{
  return [*(id *)(v0 + 16) type];
}

uint64_t sub_100A9D0DC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100A9D114@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_100A9D144(char **a1)
{
  id v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v2 = sub_100AC83D8((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_100A9D1F0(v5);
  *a1 = v2;
  return result;
}

unint64_t sub_100A9D1B0()
{
  unint64_t result = qword_1010C71D0;
  if (!qword_1010C71D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1010C71D0);
  }
  return result;
}

uint64_t sub_100A9D1F0(void *a1)
{
  id v2 = a1;
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_138;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v76 = 0;
      uint64_t v77 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v79 = *(unsigned __int8 *)(v77 + i);
        uint64_t v80 = v76;
        do
        {
          unsigned int v81 = *(unsigned __int8 *)(v77 + v80);
          if (v79 >= v81) {
            break;
          }
          if (!v77) {
            goto LABEL_142;
          }
          *(unsigned char *)(v77 + v80 + 1) = v81;
          *(unsigned char *)(v77 + v80--) = v79;
        }
        while (v80 != -1);
        ++v76;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_137;
    }
    uint64_t v92 = result;
    Swift::Int v93 = v3;
    if (v3 > 1)
    {
      uint64_t v6 = v5 >> 1;
      uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(result + 16) = v6;
      Swift::Int v3 = v93;
      unsigned __int8 v91 = (void *)result;
      uint64_t v95 = (unsigned __int8 *)(result + 32);
LABEL_13:
      Swift::Int v8 = 0;
      uint64_t v90 = v2;
      uint64_t v9 = *v2;
      Swift::String v10 = (char *)_swiftEmptyArrayStorage;
      uint64_t v94 = *v2;
      while (1)
      {
        Swift::Int v12 = v8++;
        if (v8 < v3)
        {
          unsigned int v13 = *(unsigned __int8 *)(v9 + v8);
          unsigned int v14 = *(unsigned __int8 *)(v9 + v12);
          Swift::Int v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            unsigned int v15 = v13;
            while (1)
            {
              unsigned int v16 = *(unsigned __int8 *)(v9 + v8);
              if (v13 < v14 == v16 >= v15) {
                break;
              }
              ++v8;
              unsigned int v15 = v16;
              if (v3 == v8)
              {
                Swift::Int v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12) {
              goto LABEL_139;
            }
            if (v12 < v8)
            {
              Swift::Int v17 = v8 - 1;
              Swift::Int v18 = v12;
              do
              {
                if (v18 != v17)
                {
                  if (!v9) {
                    goto LABEL_145;
                  }
                  char v19 = *(unsigned char *)(v9 + v18);
                  *(unsigned char *)(v9 + v18) = *(unsigned char *)(v9 + v17);
                  *(unsigned char *)(v9 + v17) = v19;
                }
                BOOL v58 = ++v18 < v17--;
              }
              while (v58);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12)) {
            goto LABEL_136;
          }
          if (v8 - v12 < v92)
          {
            Swift::Int v20 = v12 + v92;
            if (__OFADD__(v12, v92)) {
              goto LABEL_140;
            }
            if (v20 >= v3) {
              Swift::Int v20 = v3;
            }
            if (v20 < v12)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v8 != v20)
            {
              unsigned __int8 v21 = (unsigned char *)(v9 + v8);
              do
              {
                unsigned int v22 = *(unsigned __int8 *)(v9 + v8);
                Swift::Int v23 = v12;
                Swift::String v24 = v21;
                do
                {
                  unsigned int v25 = *(v24 - 1);
                  if (v22 >= v25) {
                    break;
                  }
                  if (!v9) {
                    goto LABEL_143;
                  }
                  *Swift::String v24 = v25;
                  *--Swift::String v24 = v22;
                  ++v23;
                }
                while (v8 != v23);
                ++v8;
                ++v21;
              }
              while (v8 != v20);
              Swift::Int v8 = v20;
            }
          }
        }
        if (v8 < v12) {
          goto LABEL_131;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100AC82C8(0, *((void *)v10 + 2) + 1, 1, v10);
          Swift::String v10 = (char *)result;
        }
        unint64_t v27 = *((void *)v10 + 2);
        unint64_t v26 = *((void *)v10 + 3);
        unint64_t v11 = v27 + 1;
        uint64_t v9 = v94;
        if (v27 >= v26 >> 1)
        {
          uint64_t result = (uint64_t)sub_100AC82C8((char *)(v26 > 1), v27 + 1, 1, v10);
          uint64_t v9 = v94;
          Swift::String v10 = (char *)result;
        }
        *((void *)v10 + 2) = v11;
        char v28 = v10 + 32;
        unsigned int v29 = &v10[16 * v27 + 32];
        *(void *)unsigned int v29 = v12;
        *((void *)v29 + 1) = v8;
        if (v27)
        {
          while (1)
          {
            unint64_t v30 = v11 - 1;
            if (v11 >= 4)
            {
              unsigned __int8 v35 = &v28[2 * v11];
              uint64_t v36 = *(v35 - 8);
              uint64_t v37 = *(v35 - 7);
              BOOL v41 = __OFSUB__(v37, v36);
              uint64_t v38 = v37 - v36;
              if (v41) {
                goto LABEL_120;
              }
              uint64_t v40 = *(v35 - 6);
              uint64_t v39 = *(v35 - 5);
              BOOL v41 = __OFSUB__(v39, v40);
              uint64_t v33 = v39 - v40;
              char v34 = v41;
              if (v41) {
                goto LABEL_121;
              }
              unint64_t v42 = v11 - 2;
              unsigned __int8 v43 = &v28[2 * v11 - 4];
              uint64_t v45 = *v43;
              uint64_t v44 = v43[1];
              BOOL v41 = __OFSUB__(v44, v45);
              uint64_t v46 = v44 - v45;
              if (v41) {
                goto LABEL_122;
              }
              BOOL v41 = __OFADD__(v33, v46);
              uint64_t v47 = v33 + v46;
              if (v41) {
                goto LABEL_124;
              }
              if (v47 >= v38)
              {
                BOOL v65 = &v28[2 * v30];
                uint64_t v67 = *v65;
                uint64_t v66 = v65[1];
                BOOL v41 = __OFSUB__(v66, v67);
                uint64_t v68 = v66 - v67;
                if (v41) {
                  goto LABEL_130;
                }
                BOOL v58 = v33 < v68;
                goto LABEL_84;
              }
            }
            else
            {
              if (v11 != 3)
              {
                uint64_t v59 = *((void *)v10 + 4);
                uint64_t v60 = *((void *)v10 + 5);
                BOOL v41 = __OFSUB__(v60, v59);
                uint64_t v52 = v60 - v59;
                char v53 = v41;
                goto LABEL_78;
              }
              uint64_t v32 = *((void *)v10 + 4);
              uint64_t v31 = *((void *)v10 + 5);
              BOOL v41 = __OFSUB__(v31, v32);
              uint64_t v33 = v31 - v32;
              char v34 = v41;
            }
            if (v34) {
              goto LABEL_123;
            }
            unint64_t v42 = v11 - 2;
            unsigned __int8 v48 = &v28[2 * v11 - 4];
            uint64_t v50 = *v48;
            uint64_t v49 = v48[1];
            BOOL v51 = __OFSUB__(v49, v50);
            uint64_t v52 = v49 - v50;
            char v53 = v51;
            if (v51) {
              goto LABEL_125;
            }
            uint64_t v54 = &v28[2 * v30];
            uint64_t v56 = *v54;
            uint64_t v55 = v54[1];
            BOOL v41 = __OFSUB__(v55, v56);
            uint64_t v57 = v55 - v56;
            if (v41) {
              goto LABEL_127;
            }
            if (__OFADD__(v52, v57)) {
              goto LABEL_129;
            }
            if (v52 + v57 >= v33)
            {
              BOOL v58 = v33 < v57;
LABEL_84:
              if (v58) {
                unint64_t v30 = v42;
              }
              goto LABEL_86;
            }
LABEL_78:
            if (v53) {
              goto LABEL_126;
            }
            uint64_t v61 = &v28[2 * v30];
            uint64_t v63 = *v61;
            uint64_t v62 = v61[1];
            BOOL v41 = __OFSUB__(v62, v63);
            uint64_t v64 = v62 - v63;
            if (v41) {
              goto LABEL_128;
            }
            if (v64 < v52) {
              goto LABEL_15;
            }
LABEL_86:
            unint64_t v69 = v30 - 1;
            if (v30 - 1 >= v11)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v9) {
              goto LABEL_144;
            }
            uint64_t v70 = &v28[2 * v69];
            uint64_t v71 = *v70;
            id v72 = v28;
            uint64_t v73 = &v28[2 * v30];
            uint64_t v74 = v73[1];
            uint64_t result = sub_100A9D828((unsigned __int8 *)(v9 + *v70), (unsigned __int8 *)(v9 + *v73), v9 + v74, v95);
            if (v1) {
              goto LABEL_114;
            }
            if (v74 < v71) {
              goto LABEL_117;
            }
            if (v30 > *((void *)v10 + 2)) {
              goto LABEL_118;
            }
            *uint64_t v70 = v71;
            v72[2 * v69 + 1] = v74;
            unint64_t v75 = *((void *)v10 + 2);
            if (v30 >= v75) {
              goto LABEL_119;
            }
            unint64_t v11 = v75 - 1;
            uint64_t result = (uint64_t)memmove(v73, v73 + 2, 16 * (v75 - 1 - v30));
            char v28 = v72;
            *((void *)v10 + 2) = v75 - 1;
            uint64_t v9 = v94;
            if (v75 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v11 = 1;
LABEL_15:
        Swift::Int v3 = v93;
        if (v8 >= v93)
        {
          id v2 = v90;
          Swift::String v7 = v91;
          goto LABEL_103;
        }
      }
    }
    Swift::String v7 = _swiftEmptyArrayStorage;
    uint64_t v95 = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    if (v3 == 1)
    {
      unsigned __int8 v91 = _swiftEmptyArrayStorage;
      goto LABEL_13;
    }
    unint64_t v11 = _swiftEmptyArrayStorage[2];
    Swift::String v10 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
    unsigned __int8 v91 = v7;
    if (v11 >= 2)
    {
      uint64_t v82 = *v2;
      do
      {
        unint64_t v83 = v11 - 2;
        if (v11 < 2) {
          goto LABEL_132;
        }
        if (!v82) {
          goto LABEL_146;
        }
        uint64_t v84 = (uint64_t)v10;
        unint64_t v85 = v10 + 32;
        uint64_t v86 = *(void *)&v10[16 * v83 + 32];
        uint64_t v87 = *(void *)&v10[16 * v11 + 24];
        uint64_t result = sub_100A9D828((unsigned __int8 *)(v82 + v86), (unsigned __int8 *)(v82 + v85[2 * v11 - 2]), v82 + v87, v95);
        if (v1) {
          break;
        }
        if (v87 < v86) {
          goto LABEL_133;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100AC83C4(v84);
          uint64_t v84 = result;
        }
        if (v83 >= *(void *)(v84 + 16)) {
          goto LABEL_134;
        }
        uint64_t v88 = (void *)(v84 + 32 + 16 * v83);
        *uint64_t v88 = v86;
        v88[1] = v87;
        unint64_t v89 = *(void *)(v84 + 16);
        if (v11 > v89) {
          goto LABEL_135;
        }
        uint64_t result = (uint64_t)memmove((void *)(v84 + 32 + 16 * (v11 - 1)), (const void *)(v84 + 32 + 16 * v11), 16 * (v89 - v11));
        Swift::String v10 = (char *)v84;
        *(void *)(v84 + 16) = v89 - 1;
        unint64_t v11 = v89 - 1;
      }
      while (v89 > 2);
    }
LABEL_114:
    swift_bridgeObjectRelease();
    v91[2] = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100A9D828(unsigned __int8 *__dst, unsigned __int8 *__src, unint64_t a3, unsigned __int8 *a4)
{
  id v4 = a4;
  uint64_t v6 = __src;
  Swift::String v7 = __dst;
  int64_t v8 = __src - __dst;
  uint64_t v9 = a3 - (void)__src;
  if (__src - __dst < (uint64_t)(a3 - (void)__src))
  {
    if (a4 != __dst || __src <= a4) {
      memmove(a4, __dst, v8);
    }
    Swift::String v10 = &v4[v8];
    if ((unint64_t)v6 >= a3 || v8 < 1)
    {
LABEL_15:
      uint64_t v6 = v7;
      if (v7 != v4) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
    while (1)
    {
      unsigned int v11 = *v6;
      if (v11 >= *v4) {
        break;
      }
      BOOL v12 = v7 == v6++;
      if (!v12) {
        goto LABEL_12;
      }
LABEL_13:
      ++v7;
      if (v4 >= v10 || (unint64_t)v6 >= a3) {
        goto LABEL_15;
      }
    }
    LOBYTE(v11) = *v4;
    BOOL v12 = v7 == v4++;
    if (v12) {
      goto LABEL_13;
    }
LABEL_12:
    *Swift::String v7 = v11;
    goto LABEL_13;
  }
  if (a4 != __src || a3 <= (unint64_t)a4) {
    memmove(a4, __src, a3 - (void)__src);
  }
  Swift::String v10 = &v4[v9];
  if (v7 >= v6 || v9 < 1)
  {
LABEL_36:
    if (v6 != v4) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  unsigned int v13 = (unsigned __int8 *)(a3 - 1);
  unsigned int v14 = v6;
  while (1)
  {
    unsigned int v15 = v13 + 1;
    unsigned int v17 = *--v14;
    unsigned __int8 v16 = v17;
    if (*(v10 - 1) >= v17)
    {
      unsigned __int8 v16 = *(v10 - 1);
      unsigned int v14 = v6;
      if (v15 != v10)
      {
        --v10;
LABEL_32:
        *unsigned int v13 = v16;
        goto LABEL_33;
      }
      if (v13 >= v10--) {
        goto LABEL_32;
      }
    }
    else if (v15 != v6 || v13 >= v6)
    {
      goto LABEL_32;
    }
LABEL_33:
    if (v14 <= v7) {
      break;
    }
    --v13;
    uint64_t v6 = v14;
    if (v10 <= v4)
    {
      uint64_t v6 = v14;
      goto LABEL_36;
    }
  }
  uint64_t v6 = v14;
  if (v14 != v4)
  {
LABEL_38:
    memmove(v6, v4, v10 - v4);
    return 1;
  }
LABEL_37:
  if (v6 >= v10) {
    goto LABEL_38;
  }
  return 1;
}

uint64_t sub_100A9DA00(uint64_t result, uint64_t a2)
{
  if (a2 > result) {
    return a2;
  }
  return result;
}

uint64_t sub_100A9DA0C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_100A9DA14(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)sub_100073394((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100A9DB00(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = (uint64_t)sub_100A9156C((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 16 * v7 + 32), (const void *)(v6 + 32), 16 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

size_t sub_100A9DBE4(size_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  size_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= v3[3] >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = sub_100A91390(result, v11, 1, v3);
  uint64_t v3 = (void *)result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = (v3[3] >> 1) - v3[2];
  uint64_t result = sub_100063814(&qword_1010C6F50);
  if (v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = v3[2];
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    v3[2] = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100A9DD10(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_100A9EFB0(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

size_t sub_100A9DEDC(size_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  size_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= v3[3] >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = sub_100A91668(result, v11, 1, v3);
  uint64_t v3 = (void *)result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = (v3[3] >> 1) - v3[2];
  uint64_t result = type metadata accessor for URLQueryItem();
  if (v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = v3[2];
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    v3[2] = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

char *String.components(wrappedToLineLength:bullet:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CharacterSet();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  BOOL v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  static CharacterSet.newlines.getter();
  sub_10005D228();
  uint64_t v14 = StringProtocol.components(separatedBy:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v15 = (char *)_swiftEmptyArrayStorage;
  unsigned int v22 = (char *)_swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(v14 + 16);
  if (v16)
  {
    swift_bridgeObjectRetain();
    unsigned int v17 = (uint64_t *)(v14 + 40);
    do
    {
      uint64_t v18 = *v17;
      uint64_t v23 = *(v17 - 1);
      uint64_t v24 = v18;
      swift_bridgeObjectRetain();
      sub_100A9E1A0(&v22, &v23, a2, a3, a1, &v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = v21;
      unsigned int v22 = v21;
      v17 += 2;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v15;
}

void sub_100A9E1A0(char **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  unint64_t v71 = a4;
  uint64_t v12 = type metadata accessor for CharacterSet();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v17 = *a1;
  uint64_t v19 = *a2;
  unint64_t v18 = a2[1];
  unint64_t v83 = v17;
  uint64_t v20 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0) {
    uint64_t v20 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (v20)
  {
    uint64_t v68 = (char *)a6;
    uint64_t v69 = v6;
    uint64_t v21 = v14;
    uint64_t v22 = a3;
    id v23 = objc_allocWithZone((Class)NSScanner);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v25 = [v23 initWithString:v24];

    uint64_t v70 = v22;
    v82._uint64_t countAndFlagsBits = sub_100A9E78C(v22, v71, (uint64_t)&v83);
    v82._object = v26;
    swift_beginAccess();
    static CharacterSet.whitespaces.getter();
    uint64_t v27 = NSScanner.scanUpToCharacters(from:)();
    unsigned int v29 = v28;
    uint64_t v31 = *(void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v30 = v13 + 8;
    uint64_t v76 = v31;
    v31(v16, v21);
    id v74 = v25;
    if (v29)
    {
      uint64_t v32 = v21;
      uint64_t v33 = v16;
      unint64_t v34 = HIBYTE(v71) & 0xF;
      if ((v71 & 0x2000000000000000) == 0) {
        unint64_t v34 = v70 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v72 = a5;
      unint64_t v73 = v34;
      uint64_t v75 = v30;
      while (1)
      {
        uint64_t v37 = v32;
        object = (char *)v82._object;
        uint64_t countAndFlagsBits = v82._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v40 = String.count.getter();
        swift_bridgeObjectRelease();
        uint64_t v41 = String.count.getter();
        uint64_t v42 = v40 + v41;
        if (__OFADD__(v40, v41)) {
          break;
        }
        BOOL v43 = __OFADD__(v42, 1);
        uint64_t v44 = v42 + 1;
        if (v43) {
          goto LABEL_39;
        }
        if (v44 <= a5)
        {
          v81._uint64_t countAndFlagsBits = v27;
          v81._object = v29;
          swift_bridgeObjectRetain();
          v35._uint64_t countAndFlagsBits = 32;
          v35._object = (void *)0xE100000000000000;
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          String.append(_:)(v81);
          swift_bridgeObjectRelease();
        }
        else
        {
          v81._uint64_t countAndFlagsBits = countAndFlagsBits;
          v81._object = object;
          uint64_t v79 = 606827356;
          unint64_t v80 = 0xE400000000000000;
          uint64_t v77 = 0;
          unint64_t v78 = 0xE000000000000000;
          sub_10005D228();
          uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v40 = v45;
          swift_bridgeObjectRelease();
          object = v83;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            object = sub_100073394(0, *((void *)object + 2) + 1, 1, object);
          }
          unint64_t v47 = *((void *)object + 2);
          unint64_t v46 = *((void *)object + 3);
          if (v47 >= v46 >> 1) {
            object = sub_100073394((char *)(v46 > 1), v47 + 1, 1, object);
          }
          *((void *)object + 2) = v47 + 1;
          unsigned __int8 v48 = &object[16 * v47];
          *((void *)v48 + 4) = countAndFlagsBits;
          *((void *)v48 + 5) = v40;
          unint64_t v83 = object;
          if (v73)
          {
            uint64_t v49 = String.count.getter();
            Swift::Int v50 = v49 + 1;
            id v25 = v74;
            a5 = v72;
            if (__OFADD__(v49, 1)) {
              goto LABEL_40;
            }
            v51._uint64_t countAndFlagsBits = 32;
            v51._object = (void *)0xE100000000000000;
            Swift::String v53 = String.init(repeating:count:)(v51, v50);
            uint64_t v52 = v53._countAndFlagsBits;
            uint64_t v54 = v53._object;
          }
          else
          {
            uint64_t v52 = 0;
            uint64_t v54 = (void *)0xE000000000000000;
            id v25 = v74;
            a5 = v72;
          }
          v81._uint64_t countAndFlagsBits = v52;
          v81._object = v54;
          swift_bridgeObjectRetain();
          v55._uint64_t countAndFlagsBits = v27;
          v55._object = v29;
          String.append(_:)(v55);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v56._uint64_t countAndFlagsBits = 32;
          v56._object = (void *)0xE100000000000000;
          String.append(_:)(v56);
          swift_bridgeObjectRelease();
          Swift::String v82 = v81;
        }
        static CharacterSet.whitespaces.getter();
        uint64_t v27 = NSScanner.scanUpToCharacters(from:)();
        unsigned int v29 = v36;
        uint64_t v32 = v37;
        v76(v33, v37);
        if (!v29) {
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
    }
    else
    {
LABEL_22:
      uint64_t v57 = ((unint64_t)v82._object >> 56) & 0xF;
      if (((uint64_t)v82._object & 0x2000000000000000) == 0) {
        uint64_t v57 = v82._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (!v57)
      {

        swift_bridgeObjectRelease();
        object = v68;
LABEL_37:
        *(void *)object = v83;
        return;
      }
      Swift::String v81 = v82;
      uint64_t v79 = 606827356;
      unint64_t v80 = 0xE400000000000000;
      uint64_t v77 = 0;
      unint64_t v78 = 0xE000000000000000;
      sub_10005D228();
      uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t countAndFlagsBits = v58;
      swift_bridgeObjectRelease();
      unsigned int v29 = v83;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      object = v68;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_26:
        unint64_t v61 = *((void *)v29 + 2);
        unint64_t v60 = *((void *)v29 + 3);
        if (v61 >= v60 >> 1) {
          unsigned int v29 = sub_100073394((char *)(v60 > 1), v61 + 1, 1, v29);
        }
        *((void *)v29 + 2) = v61 + 1;
        uint64_t v62 = &v29[16 * v61];
        *((void *)v62 + 4) = v40;
        *((void *)v62 + 5) = countAndFlagsBits;
        unint64_t v83 = v29;

        goto LABEL_37;
      }
    }
    unsigned int v29 = sub_100073394(0, *((void *)v29 + 2) + 1, 1, v29);
    goto LABEL_26;
  }
  uint64_t v63 = *((void *)v17 + 2);
  swift_bridgeObjectRetain();
  if (v63)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v17 = sub_100073394(0, v63 + 1, 1, v17);
    }
    unint64_t v65 = *((void *)v17 + 2);
    unint64_t v64 = *((void *)v17 + 3);
    if (v65 >= v64 >> 1) {
      unsigned int v17 = sub_100073394((char *)(v64 > 1), v65 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v65 + 1;
    uint64_t v66 = &v17[16 * v65];
    *((void *)v66 + 4) = v19;
    *((void *)v66 + 5) = v18;
  }
  *a6 = v17;
}

uint64_t sub_100A9E78C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0;
  }
  swift_beginAccess();
  if (*(void *)(*(void *)a3 + 16))
  {
    uint64_t result = String.count.getter();
    Swift::Int v7 = result + 1;
    if (__OFADD__(result, 1))
    {
      __break(1u);
    }
    else
    {
      v8._uint64_t countAndFlagsBits = 32;
      v8._object = (void *)0xE100000000000000;
      return String.init(repeating:count:)(v8, v7)._countAndFlagsBits;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v9._uint64_t countAndFlagsBits = 32;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    return a1;
  }
  return result;
}

char *Array<A>.asciiBoxed()(uint64_t a1)
{
  uint64_t v39 = *(void *)(a1 + 16);
  if (v39)
  {
    uint64_t v1 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v38 = v1;
    do
    {
      uint64_t v40 = *(void *)(v1 + 8 * v2);
      uint64_t v4 = *(void *)(v40 + 16);
      if (v4)
      {
        swift_bridgeObjectRetain();
        uint64_t v5 = v4 - 1;
        if (v5)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v6 = v40 + 56;
          do
          {
            swift_bridgeObjectRetain();
            String.count.getter();
            String.count.getter();
            v6 += 16;
            swift_bridgeObjectRelease();
            --v5;
          }
          while (v5);
          swift_bridgeObjectRelease();
          uint64_t v1 = v38;
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        uint64_t v7 = String.count.getter();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v7 > v3) {
          uint64_t v3 = v7;
        }
      }
      else
      {
        v3 &= ~(v3 >> 63);
      }
      ++v2;
    }
    while (v2 != v39);
    swift_bridgeObjectRelease();
    if (__OFADD__(v3, 2))
    {
      __break(1u);
      goto LABEL_39;
    }
  }
  sub_10005D228();
  uint64_t v42 = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
  uint64_t v45 = v8;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 11441634;
  v9._object = (void *)0xA300000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = v45;
  uint64_t v37 = v42;
  uint64_t v43 = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
  uint64_t v46 = v11;
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = 10786018;
  v12._object = (void *)0xA300000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = v46;
  if (!v39)
  {
LABEL_39:
    uint64_t v15 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_40;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = 0;
  uint64_t v15 = (char *)_swiftEmptyArrayStorage;
  uint64_t v36 = v10;
  do
  {
    if (v14) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = v10;
    }
    uint64_t v17 = *(void *)(a1 + 32 + 8 * v14);
    if (v14) {
      uint64_t v18 = v43;
    }
    else {
      uint64_t v18 = v37;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v41 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v15 = sub_100073394(0, *((void *)v15 + 2) + 1, 1, v15);
    }
    unint64_t v20 = *((void *)v15 + 2);
    unint64_t v19 = *((void *)v15 + 3);
    if (v20 >= v19 >> 1) {
      uint64_t v15 = sub_100073394((char *)(v19 > 1), v20 + 1, 1, v15);
    }
    *((void *)v15 + 2) = v20 + 1;
    uint64_t v21 = &v15[16 * v20];
    *((void *)v21 + 4) = v18;
    *((void *)v21 + 5) = v16;
    uint64_t v22 = *(void *)(v17 + 16);
    if (v22)
    {
      uint64_t v23 = v17 + 40;
      do
      {
        v24._uint64_t countAndFlagsBits = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v25._uint64_t countAndFlagsBits = 8557794;
        v25._object = (void *)0xA300000000000000;
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        unint64_t v27 = *((void *)v15 + 2);
        unint64_t v26 = *((void *)v15 + 3);
        if (v27 >= v26 >> 1) {
          uint64_t v15 = sub_100073394((char *)(v26 > 1), v27 + 1, 1, v15);
        }
        v23 += 16;
        *((void *)v15 + 2) = v27 + 1;
        char v28 = &v15[16 * v27];
        *((void *)v28 + 4) = 545428706;
        *((void *)v28 + 5) = 0xA400000000000000;
        --v22;
      }
      while (v22);
    }
    uint64_t v14 = v41 + 1;
    swift_bridgeObjectRelease();
    uint64_t v13 = v46;
    uint64_t v10 = v36;
  }
  while (v41 + 1 != v39);
  uint64_t v44 = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
  uint64_t v47 = v29;
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = 11507170;
  v30._object = (void *)0xA300000000000000;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  unint64_t v32 = *((void *)v15 + 2);
  unint64_t v31 = *((void *)v15 + 3);
  if (v32 >= v31 >> 1) {
    uint64_t v15 = sub_100073394((char *)(v31 > 1), v32 + 1, 1, v15);
  }
  *((void *)v15 + 2) = v32 + 1;
  uint64_t v33 = &v15[16 * v32];
  *((void *)v33 + 4) = v44;
  *((void *)v33 + 5) = v47;
  swift_bridgeObjectRelease();
LABEL_40:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

{
  uint64_t inited;
  char *v3;

  sub_100063814(&qword_1010C71D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100E251D0;
  *(void *)(inited + 32) = a1;
  swift_bridgeObjectRetain();
  uint64_t v3 = Array<A>.asciiBoxed()(inited);
  swift_setDeallocating();
  sub_100063814(&qword_1010C71E0);
  swift_arrayDestroy();
  return v3;
}

uint64_t Array<A>.appendStringComponents(_:lineLength:bullet:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = type metadata accessor for CharacterSet();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  static CharacterSet.newlines.getter();
  sub_10005D228();
  uint64_t v14 = StringProtocol.components(separatedBy:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v15 = (char *)_swiftEmptyArrayStorage;
  uint64_t v22 = (char *)_swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(v14 + 16);
  if (v16)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = (uint64_t *)(v14 + 40);
    do
    {
      uint64_t v18 = *v17;
      uint64_t v23 = *(v17 - 1);
      uint64_t v24 = v18;
      swift_bridgeObjectRetain();
      sub_100A9E1A0(&v22, &v23, a4, a5, a3, &v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = v21;
      uint64_t v22 = v21;
      v17 += 2;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return sub_100A9DA14((uint64_t)v15);
}

uint64_t sub_100A9EFB0(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_100A9F190();
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            sub_100063814(&qword_1010C71E8);
            uint64_t v10 = sub_100AC4294(v13, i, a3);
            id v12 = *v11;
            ((void (*)(void (**)(id *), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_100A9F150();
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_100A9F150()
{
  unint64_t result = qword_1010C7740;
  if (!qword_1010C7740)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1010C7740);
  }
  return result;
}

unint64_t sub_100A9F190()
{
  unint64_t result = qword_1010C71F0;
  if (!qword_1010C71F0)
  {
    sub_10006389C(&qword_1010C71E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C71F0);
  }
  return result;
}

uint64_t MPCPlaybackIntentOptions.debugDescription.getter(char a1)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v2 = (char *)_swiftEmptyArrayStorage;
    if ((a1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  uint64_t v2 = sub_100073394(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100073394((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  uint64_t v5 = &v2[16 * v4];
  *((void *)v5 + 4) = 0x656D6D4979616C70;
  *((void *)v5 + 5) = 0xEF796C6574616964;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100073394(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v7 = *((void *)v2 + 2);
    unint64_t v6 = *((void *)v2 + 3);
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_100073394((char *)(v6 > 1), v7 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v7 + 1;
    uint64_t v8 = &v2[16 * v7];
    *((void *)v8 + 4) = 0x6575517465736572;
    *((void *)v8 + 5) = 0xEA00000000006575;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100073394(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v10 = *((void *)v2 + 2);
    unint64_t v9 = *((void *)v2 + 3);
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_100073394((char *)(v9 > 1), v10 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v10 + 1;
    uint64_t v11 = &v2[16 * v10];
    *((void *)v11 + 4) = 0x4E70556F54646461;
    *((void *)v11 + 5) = 0xEF64616548747865;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0) {
        goto LABEL_31;
      }
      goto LABEL_26;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100073394(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v13 = *((void *)v2 + 2);
  unint64_t v12 = *((void *)v2 + 3);
  if (v13 >= v12 >> 1) {
    uint64_t v2 = sub_100073394((char *)(v12 > 1), v13 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v13 + 1;
  uint64_t v14 = &v2[16 * v13];
  *((void *)v14 + 4) = 0x4E70556F54646461;
  *((void *)v14 + 5) = 0xEF6C696154747865;
  if ((a1 & 0x10) != 0)
  {
LABEL_26:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100073394(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v16 = *((void *)v2 + 2);
    unint64_t v15 = *((void *)v2 + 3);
    if (v16 >= v15 >> 1) {
      uint64_t v2 = sub_100073394((char *)(v15 > 1), v16 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v16 + 1;
    uint64_t v17 = &v2[16 * v16];
    *((void *)v17 + 4) = 0x5074726174736572;
    *((void *)v17 + 5) = 0xEF6B63616279616CLL;
  }
LABEL_31:
  sub_100063814(&qword_1010C71E0);
  sub_1000664E4();
  uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 93;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return 91;
}

uint64_t sub_100A9F550()
{
  return MPCPlaybackIntentOptions.debugDescription.getter(*v0);
}

void *MPMediaLibraryFilteringOptions.none.unsafeMutableAddressor()
{
  return &static MPMediaLibraryFilteringOptions.none;
}

__C::MPMediaLibraryFilteringOptions __swiftcall MPMediaLibraryFilteringOptions.init(_:)(NSNumber_optional a1)
{
  if (a1.value.super.super.isa)
  {
    Class isa = a1.value.super.super.isa;
    uint64_t v2 = (objc_class *)[(objc_class *)a1.value.super.super.isa unsignedIntegerValue];

    a1.value.super.super.Class isa = v2;
  }
  return (__C::MPMediaLibraryFilteringOptions)a1.value.super.super.isa;
}

uint64_t MPMediaLibraryFilteringOptions.itemRequestFilteringOptions.getter(char a1)
{
  return a1 & 2;
}

ValueMetadata *type metadata accessor for PropertySetCombinator()
{
  return &type metadata for PropertySetCombinator;
}

uint64_t GenericMusicItem.innerMusicItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for GenericMusicItem();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for Album();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for Album;
LABEL_5:
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v11;
LABEL_19:
    uint64_t v14 = sub_100068018((uint64_t *)a1);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v14, v7, v10);
  }
  if (v8 == enum case for GenericMusicItem.artist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for Artist();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for Artist;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.composer(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for Composer();
    *(void *)(a1 + 24) = v10;
    unint64_t v12 = (unint64_t *)&unk_1010C7248;
    unint64_t v13 = &type metadata accessor for Composer;
LABEL_18:
    *(void *)(a1 + 32) = sub_100AA0C98(v12, (void (*)(uint64_t))v13);
    goto LABEL_19;
  }
  if (v8 == enum case for GenericMusicItem.creditArtist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for CreditArtist();
    *(void *)(a1 + 24) = v10;
    unint64_t v12 = (unint64_t *)&unk_1010C7240;
    unint64_t v13 = &type metadata accessor for CreditArtist;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.curator(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for Curator();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for Curator;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.editorialItem(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for EditorialItem();
    *(void *)(a1 + 24) = v10;
    unint64_t v12 = (unint64_t *)&unk_1010C7238;
    unint64_t v13 = &type metadata accessor for EditorialItem;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.genre(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for Genre();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for Genre;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for MusicMovie();
    *(void *)(a1 + 24) = v10;
    unint64_t v12 = (unint64_t *)&unk_1010C7230;
    unint64_t v13 = &type metadata accessor for MusicMovie;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for MusicVideo();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for MusicVideo;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for Playlist();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for Playlist;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.radioShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for RadioShow();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for RadioShow;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.recordLabel(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for RecordLabel();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for RecordLabel;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.socialProfile(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for SocialProfile();
    *(void *)(a1 + 24) = v10;
    unint64_t v12 = (unint64_t *)&unk_1010C7228;
    unint64_t v13 = &type metadata accessor for SocialProfile;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for Song();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for Song;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for Station();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for Station;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for TVEpisode();
    *(void *)(a1 + 24) = v10;
    unint64_t v12 = (unint64_t *)&unk_1010C7220;
    unint64_t v13 = &type metadata accessor for TVEpisode;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for TVSeason();
    *(void *)(a1 + 24) = v10;
    unint64_t v12 = (unint64_t *)&unk_1010C7218;
    unint64_t v13 = &type metadata accessor for TVSeason;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for TVShow();
    *(void *)(a1 + 24) = v10;
    unint64_t v12 = (unint64_t *)&unk_1010C7210;
    unint64_t v13 = &type metadata accessor for TVShow;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for UploadedAudio();
    *(void *)(a1 + 24) = v10;
    unint64_t v12 = (unint64_t *)&unk_1010C7208;
    unint64_t v13 = &type metadata accessor for UploadedAudio;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for UploadedVideo();
    *(void *)(a1 + 24) = v10;
    unint64_t v12 = (unint64_t *)&unk_1010C7200;
    unint64_t v13 = &type metadata accessor for UploadedVideo;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.other(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t GenericMusicItem.catalogID.getter()
{
  uint64_t v0 = type metadata accessor for TVShow();
  uint64_t v37 = *(void *)(v0 - 8);
  uint64_t v38 = v0;
  __chkstk_darwin(v0);
  uint64_t v36 = (char *)&v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for TVSeason();
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v41 = v2;
  __chkstk_darwin(v2);
  uint64_t v39 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TVEpisode();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Song();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  __chkstk_darwin(v6);
  uint64_t v45 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Playlist();
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  __chkstk_darwin(v8);
  unsigned __int8 v48 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MusicVideo();
  uint64_t v52 = *(void *)(v10 - 8);
  uint64_t v53 = v10;
  __chkstk_darwin(v10);
  Swift::String v51 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MusicMovie();
  uint64_t v54 = *(void *)(v12 - 8);
  uint64_t v55 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Artist();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Album();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  Swift::String v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for GenericMusicItem();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unint64_t v26 = (char *)&v36 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v56, v23);
  int v27 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v26, v23);
  if (v27 != enum case for GenericMusicItem.album(_:))
  {
    if (v27 == enum case for GenericMusicItem.artist(_:))
    {
      (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v26, v15);
      uint64_t v28 = Artist.catalogID.getter();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      return v28;
    }
    if (v27 != enum case for GenericMusicItem.composer(_:)
      && v27 != enum case for GenericMusicItem.curator(_:)
      && v27 != enum case for GenericMusicItem.editorialItem(_:)
      && v27 != enum case for GenericMusicItem.genre(_:))
    {
      if (v27 == enum case for GenericMusicItem.musicMovie(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        uint64_t v30 = v54;
        uint64_t v29 = v55;
        (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v14, v26, v55);
        uint64_t v28 = MusicMovie.catalogID.getter();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v29);
        return v28;
      }
      if (v27 == enum case for GenericMusicItem.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        unint64_t v31 = v51;
        uint64_t v32 = v52;
        uint64_t v33 = v53;
        (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v26, v53);
        uint64_t v34 = MusicVideo.catalogID.getter();
LABEL_15:
        uint64_t v28 = v34;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
        return v28;
      }
      if (v27 == enum case for GenericMusicItem.playlist(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        unint64_t v31 = v48;
        uint64_t v32 = v49;
        uint64_t v33 = v50;
        (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v48, v26, v50);
        uint64_t v34 = Playlist.catalogID.getter();
        goto LABEL_15;
      }
      if (v27 != enum case for GenericMusicItem.radioShow(_:)
        && v27 != enum case for GenericMusicItem.recordLabel(_:)
        && v27 != enum case for GenericMusicItem.socialProfile(_:))
      {
        if (v27 == enum case for GenericMusicItem.song(_:))
        {
          (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
          unint64_t v31 = v45;
          uint64_t v32 = v46;
          uint64_t v33 = v47;
          (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v45, v26, v47);
          uint64_t v34 = Song.catalogID.getter();
          goto LABEL_15;
        }
        if (v27 != enum case for GenericMusicItem.station(_:))
        {
          if (v27 == enum case for GenericMusicItem.tvEpisode(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            unint64_t v31 = v42;
            uint64_t v32 = v43;
            uint64_t v33 = v44;
            (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v42, v26, v44);
            uint64_t v34 = TVEpisode.catalogID.getter();
            goto LABEL_15;
          }
          if (v27 == enum case for GenericMusicItem.tvSeason(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            unint64_t v31 = v39;
            uint64_t v32 = v40;
            uint64_t v33 = v41;
            (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, v26, v41);
            uint64_t v34 = TVSeason.catalogID.getter();
            goto LABEL_15;
          }
          if (v27 == enum case for GenericMusicItem.tvShow(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            unint64_t v31 = v36;
            uint64_t v32 = v37;
            uint64_t v33 = v38;
            (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v36, v26, v38);
            uint64_t v34 = TVShow.catalogID.getter();
            goto LABEL_15;
          }
        }
      }
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v26, v19);
  uint64_t v28 = Album.catalogID.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  return v28;
}

uint64_t Playlist.Entry.InternalItem.musicItem.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Playlist.Entry.InternalItem();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v21 - v9, v2, v4);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v10, v4);
  if (v12 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    uint64_t v13 = type metadata accessor for MusicMovie();
    a1[3] = v13;
    uint64_t v14 = (unint64_t *)&unk_1010C7230;
    uint64_t v15 = &type metadata accessor for MusicMovie;
LABEL_3:
    a1[4] = sub_100AA0C98(v14, (void (*)(uint64_t))v15);
LABEL_9:
    uint64_t v18 = sub_100068018(a1);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v18, v10, v13);
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    uint64_t v16 = type metadata accessor for MusicVideo();
    uint64_t v13 = v16;
    uint64_t v17 = &protocol witness table for MusicVideo;
LABEL_8:
    a1[3] = v16;
    a1[4] = (uint64_t)v17;
    goto LABEL_9;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    uint64_t v16 = type metadata accessor for Song();
    uint64_t v13 = v16;
    uint64_t v17 = &protocol witness table for Song;
    goto LABEL_8;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    uint64_t v13 = type metadata accessor for TVEpisode();
    a1[3] = v13;
    uint64_t v14 = (unint64_t *)&unk_1010C7220;
    uint64_t v15 = &type metadata accessor for TVEpisode;
    goto LABEL_3;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    uint64_t v13 = type metadata accessor for UploadedAudio();
    a1[3] = v13;
    uint64_t v14 = (unint64_t *)&unk_1010C7208;
    uint64_t v15 = &type metadata accessor for UploadedAudio;
    goto LABEL_3;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    uint64_t v13 = type metadata accessor for UploadedVideo();
    a1[3] = v13;
    uint64_t v14 = (unint64_t *)&unk_1010C7200;
    uint64_t v15 = &type metadata accessor for UploadedVideo;
    goto LABEL_3;
  }
  v11(v8, v2, v4);
  unint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  unint64_t v21 = 0xD000000000000028;
  unint64_t v22 = 0x8000000100DB1890;
  sub_100AA0C98(&qword_1010C7250, (void (*)(uint64_t))&type metadata accessor for Playlist.Entry.InternalItem);
  v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100AA0C98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100AA0CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100A9156C(0, *(void *)(v5 + 16) + 1, 1, (char *)v5);
    uint64_t v5 = result;
  }
  unint64_t v8 = *(void *)(v5 + 16);
  unint64_t v7 = *(void *)(v5 + 24);
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)sub_100A9156C((char *)(v7 > 1), v8 + 1, 1, (char *)v5);
    uint64_t v5 = result;
  }
  *(void *)(v5 + 16) = v8 + 1;
  unint64_t v9 = v5 + 16 * v8;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_100AA0D84(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100A91390(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    uint64_t v3 = (void *)sub_100A91390(v4 > 1, v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  uint64_t v6 = *(void *)(sub_100063814(&qword_1010C6F50) - 8);
  uint64_t result = sub_10003CABC(a1, (uint64_t)v3+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v5, &qword_1010C6F50);
  *uint64_t v1 = v3;
  return result;
}

uint64_t sub_100AA0E8C(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100A91370(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    uint64_t v3 = (void *)sub_100A91370(v4 > 1, v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))+ *(void *)(*(void *)(v6 - 8) + 72) * v5, a1, v6);
  *uint64_t v1 = v3;
  return result;
}

unint64_t sub_100AA0F74(uint64_t a1, char a2, uint64_t a3)
{
  unint64_t v4 = v3;
  if (a2)
  {
    unint64_t result = sub_100A9A394(a3);
    if ((v9 & 1) == 0) {
      return result;
    }
    unint64_t v10 = result;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v3;
    uint64_t v14 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100AC6D18();
      uint64_t v12 = v14;
    }
    sub_100AB3898(v10, v12);
    *unint64_t v4 = v12;
  }
  else
  {
    char v7 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100AB3C4C(a1, a3, v7);
    *uint64_t v3 = v13;
  }
  return swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_100AA1044()
{
  swift_bridgeObjectRetain();
  sub_100AB3EE0(&v0);
}

uint64_t _sSo14NSUserDefaultsC14MusicUtilitiesE8MigratorV3keyxvg_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t sub_100AA10C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, NSObject *a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, objc_class *a8@<X7>, NSObject *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, NSObject *a15)
{
  void (**v683)(uint8_t **__return_ptr, uint64_t);
  char *v684;
  uint64_t v685;
  void (**v686)(uint8_t **__return_ptr, uint64_t);
  void (**v687)(uint8_t **__return_ptr, uint64_t);
  uint64_t v688;
  void (**v689)(uint8_t **__return_ptr, uint64_t);
  uint64_t v690;
  void (**v691)(uint8_t **__return_ptr, uint64_t);
  void (**v692)(uint8_t **__return_ptr, uint64_t);
  uint8_t *v693;
  unsigned char *v694;
  uint64_t v695;
  uint64_t v696;
  unsigned char *v697;
  char *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  char *v702;
  uint64_t v703;
  char *v704;
  char *v705;
  os_log_t v706;
  char *v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  BOOL v715;
  BOOL v716;
  uint64_t v717;
  void (*v718)(char *, uint64_t);
  uint64_t v719;
  char v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  unint64_t v725;
  uint64_t v726;
  uint64_t v727;
  NSObject *v728;
  int v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  char *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  unint64_t v740;
  uint64_t v741;
  uint64_t v742;
  char v743;
  char *v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  unint64_t v748;
  uint64_t v749;
  unint64_t v750;
  char *v751;
  uint64_t v752;
  NSObject *v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint8_t *v761;
  char **p_TupleTypeMetadata2;
  uint64_t v763;
  uint64_t v764;
  char v765;
  char *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  uint64_t v771;
  unint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint8_t *v779;
  void (*v780)(char *, uint64_t);
  void (*v781)(char *, uint64_t);
  uint64_t v782;
  char *v783;
  uint64_t v784;
  os_log_type_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint8_t *v791;
  char **v792;
  uint64_t v793;
  uint64_t v794;
  NSObject *v795;
  os_log_type_t v796;
  uint64_t v797;
  char *v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint8_t *v804;
  void (*v805)(char *, uint64_t);
  uint64_t v806;
  void (*v807)(char *, uint64_t);
  uint64_t v808;
  uint64_t v809;
  char *v810;
  char *v811;
  uint64_t v812;
  uint64_t v813;
  NSObject *v814;
  NSObject *v815;
  os_log_type_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint8_t *v822;
  void (*v823)(char *, uint64_t);
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  NSObject *v828;
  os_log_type_t v829;
  uint64_t v830;
  uint8_t *v831;
  uint64_t v832;
  uint8_t *v833;
  void (*v834)(char *, uint64_t);
  uint64_t v835;
  uint64_t v836;
  void (**v837)(char *, char *, uint64_t);
  uint64_t v838;
  NSObject *v839;
  os_log_type_t v840;
  uint64_t v841;
  uint8_t *v842;
  void (*v843)(char *, uint64_t);
  uint64_t v844;
  void v845[2];
  void (**v846)(uint64_t, char *);
  void (**v847)(uint64_t);
  uint64_t v848;
  void (*v849)(uint8_t **, void);
  NSObject *v850;
  void (**v851)(char *, uint64_t);
  void (**v852)(char *, uint64_t);
  NSObject *v853;
  void (*v854)(char *, uint64_t);
  void (*v855)(uint64_t, NSObject *);
  void (**v856)(char *, void, uint64_t, uint64_t);
  uint64_t v857;
  void (*v858)(uint64_t, uint64_t);
  uint64_t v859;
  void (*v860)(char *, void, uint64_t, uint64_t);
  int64_t v861;
  void (**v862)(uint64_t, char *, uint64_t);
  unsigned int (**v863)(char *, uint64_t, uint64_t);
  int64_t v864;
  objc_class *v865;
  char *v866;
  uint64_t v867;
  void (**v868)(uint64_t, char *, uint64_t);
  void (**v869)(char *, char *, uint64_t);
  long long v870;
  char *v871;
  uint64_t v872;
  char *v873;
  char *v874;
  char *v875;
  char *v876;
  uint64_t v877;
  void (**v878)(char *, char *, uint64_t);
  void (**v879)(uint64_t, uint64_t);
  void (**v880)(char *, uint64_t);
  os_log_t v881;
  uint64_t v882;
  uint64_t v883;
  unint64_t v884;
  char *v885;
  char *v886;
  char *v887;
  void *v888;
  uint64_t v889;
  os_log_t v890;
  char *v891;
  char *v892;
  char *v893;
  char *v894;
  char *v895;
  char *v896;
  uint64_t AssociatedConformanceWitness;
  char *v898;
  uint64_t v899;
  char *v900;
  char *v901;
  uint64_t v902;
  char *v903;
  char *v904;
  uint64_t *v905;
  uint64_t v906;
  char *TupleTypeMetadata2;
  char *v908;
  uint64_t v909;
  long long v910;
  uint64_t *v911;
  uint64_t v912;
  char *v913;
  uint64_t v914;
  NSObject *v915;
  char *v916;
  char *v917;
  uint64_t v918;
  char *v919;
  char **v920;
  long long v921;
  uint64_t v922;
  char *v923;
  char *v924;
  uint64_t *v925;
  void *v926;
  void (**v927)(char *, uint64_t);
  void (*v928)(char *, uint64_t);
  char *v929;
  uint64_t v930;
  char *v931;
  char *v932;
  char *v933;
  long long v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  NSObject *v940;
  os_log_t v941;
  char *v942;
  uint64_t v943;
  void (**v944)(uint8_t **__return_ptr, uint64_t);
  void (**v945)(uint8_t **__return_ptr, uint64_t);
  void (**v946)(char *);
  uint64_t v947;
  char *v948;
  uint64_t v949;
  NSObject *v950;
  NSObject *v951;
  char *v952;
  uint64_t v953;
  char *v954;
  uint64_t v955;
  uint64_t v956;
  char *v957;
  uint64_t v958;
  void (**v959)(uint64_t, uint64_t, uint64_t);
  void (**v960)(uint8_t **__return_ptr, uint64_t);
  uint64_t v961;
  uint64_t v962;
  void (*v963)(void, uint64_t, uint64_t);
  NSObject *v964;
  uint64_t v965;
  char *v966;
  uint64_t v967;
  uint64_t v968;
  void *WitnessTable;
  char *v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t *v976;
  void (**v977)(uint64_t, uint64_t, uint64_t);
  void v978[5];
  unsigned char *v979;
  uint8_t *v980;
  uint64_t v981;
  char v982;
  void v983[2];
  uint64_t v984;
  void *v985;
  unint64_t v986;
  void *v987;
  unint64_t v988;

  LODWORD(v953) = a6;
  v890 = a5;
  v939 = a4;
  v974 = a3;
  v935 = a2;
  v936 = a11;
  v938 = a10;
  v922 = sub_100063814(&qword_1010C6F50);
  __chkstk_darwin(v922);
  *(void *)&v921 = (char *)v845 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  v940 = a15;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v967 = type metadata accessor for CollectionDifference.Change();
  v880 = *(void (***)(char *, uint64_t))(v967 - 8);
  __chkstk_darwin(v967);
  v976 = (void *)((char *)v845 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  v966 = (char *)v845 - v23;
  uint64_t v24 = type metadata accessor for CollectionDifference();
  uint64_t WitnessTable = (void *)swift_getWitnessTable();
  v914 = type metadata accessor for IndexingIterator();
  v879 = *(void (***)(uint64_t, uint64_t))(v914 - 8);
  __chkstk_darwin(v914);
  v904 = (char *)v845 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v968 = (uint64_t)v845 - v27;
  v909 = *(void *)(v24 - 8);
  __chkstk_darwin(v28);
  v965 = (uint64_t)v845 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v919 = (char *)v845 - v31;
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  v906 = type metadata accessor for Optional();
  v878 = *(void (***)(char *, char *, uint64_t))(v906 - 8);
  __chkstk_darwin(v906);
  v908 = (char *)v845 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v905 = (void *)((char *)v845 - v34);
  v973 = v24;
  uint64_t v35 = type metadata accessor for Optional();
  __chkstk_darwin(v35 - 8);
  v972 = (uint64_t)v845 - v36;
  v882 = sub_100063814(&qword_1010C7408);
  __chkstk_darwin(v882);
  v881 = (os_log_t)((char *)v845 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v38);
  v950 = ((char *)v845 - v39);
  v970 = (char *)AssociatedTypeWitness;
  v884 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v40);
  v902 = (uint64_t)v845 - v41;
  v899 = swift_checkMetadataState();
  v877 = *(void *)(v899 - 8);
  __chkstk_darwin(v899);
  v886 = (char *)v845 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v893 = (char *)v845 - v44;
  v958 = a14;
  v889 = *(void *)(a14 - 8);
  __chkstk_darwin(v45);
  v874 = (char *)v845 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v885 = (char *)v845 - v48;
  __chkstk_darwin(v49);
  v898 = (char *)v845 - v50;
  __chkstk_darwin(v51);
  v913 = (char *)v845 - v52;
  __chkstk_darwin(v53);
  v901 = (char *)v845 - v54;
  v872 = v55;
  __chkstk_darwin(v56);
  v957 = (char *)v845 - v57;
  v971 = type metadata accessor for IndexPath();
  v947 = *(void *)(v971 - 8);
  __chkstk_darwin(v971);
  v894 = (char *)v845 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v59);
  v900 = (char *)v845 - v60;
  __chkstk_darwin(v61);
  v930 = (uint64_t)v845 - v62;
  __chkstk_darwin(v63);
  v923 = (char *)v845 - v64;
  __chkstk_darwin(v65);
  v933 = (char *)v845 - v66;
  __chkstk_darwin(v67);
  v917 = (char *)v845 - v68;
  __chkstk_darwin(v69);
  v931 = (char *)v845 - v70;
  __chkstk_darwin(v71);
  v924 = (char *)v845 - v72;
  __chkstk_darwin(v73);
  v903 = (char *)v845 - v74;
  __chkstk_darwin(v75);
  v949 = (uint64_t)v845 - v76;
  v943 = v77;
  __chkstk_darwin(v78);
  *(void *)&v910 = (char *)v845 - v79;
  uint64_t v80 = sub_100063814(&qword_1010C73E8);
  __chkstk_darwin(v80 - 8);
  v948 = (char *)v845 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v918 = sub_100063814(&qword_1010C7410);
  v937 = *(void *)(v918 - 8);
  __chkstk_darwin(v918);
  v952 = (char *)v845 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v83);
  v892 = (char *)v845 - v84;
  uint64_t v85 = type metadata accessor for Logger();
  v951 = *(NSObject **)(v85 - 8);
  __chkstk_darwin(v85);
  v977 = (void (**)(uint64_t, uint64_t, uint64_t))((char *)v845 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v87);
  v959 = (void (**)(uint64_t, uint64_t, uint64_t))((char *)v845 - v88);
  __chkstk_darwin(v89);
  v896 = (char *)v845 - v90;
  __chkstk_darwin(v91);
  v871 = (char *)v845 - v92;
  __chkstk_darwin(v93);
  v876 = (char *)v845 - v94;
  __chkstk_darwin(v95);
  v875 = (char *)v845 - v96;
  __chkstk_darwin(v97);
  v891 = (char *)v845 - v98;
  __chkstk_darwin(v99);
  v895 = (char *)v845 - v100;
  __chkstk_darwin(v101);
  v887 = (char *)v845 - v102;
  __chkstk_darwin(v103);
  v928 = (void (*)(char *, uint64_t))((char *)v845 - v104);
  __chkstk_darwin(v105);
  v873 = (char *)v845 - v106;
  __chkstk_darwin(v107);
  v929 = (char *)v845 - v108;
  __chkstk_darwin(v109);
  v942 = (char *)v845 - v110;
  __chkstk_darwin(v111);
  v916 = (char *)v845 - v112;
  __chkstk_darwin(v113);
  v932 = (char *)v845 - v114;
  __chkstk_darwin(v115);
  v954 = (char *)v845 - v116;
  __chkstk_darwin(v117);
  v944 = (void (**)(uint8_t **__return_ptr, uint64_t))((char *)v845 - v118);
  __chkstk_darwin(v119);
  v946 = (void (**)(char *))((char *)v845 - v120);
  __chkstk_darwin(v121);
  v927 = (void (**)(char *, uint64_t))((char *)v845 - v122);
  __chkstk_darwin(v123);
  v945 = (void (**)(uint8_t **__return_ptr, uint64_t))((char *)v845 - v124);
  __chkstk_darwin(v125);
  v869 = (void (**)(char *, char *, uint64_t))((char *)v845 - v126);
  __chkstk_darwin(v127);
  *(void *)&v870 = (char *)v845 - v128;
  __chkstk_darwin(v129);
  v131 = (char *)v845 - v130;
  LOBYTE(a9->isa) = 0;
  uint64_t v132 = (int *)type metadata accessor for AIDiffingUpdate();
  v915 = ((char *)a9 + v132[6]);
  IndexSet.init()();
  v912 = (uint64_t)a9 + v132[7];
  IndexSet.init()();
  uint64_t v133 = (Class *)((char *)&a9->isa + v132[8]);
  uint64_t v134 = variable initialization expression of Library.Context.playlistVariants();
  v926 = v133;
  *uint64_t v133 = v134;
  uint64_t v135 = (uint64_t *)((char *)a9 + v132[9]);
  *uint64_t v135 = variable initialization expression of AIDiffingUpdate.insertedIndexPathsSet();
  v135[1] = v136;
  v911 = v135;
  v137 = (uint64_t *)((char *)a9 + v132[10]);
  uint64_t *v137 = variable initialization expression of AIDiffingUpdate.insertedIndexPathsSet();
  v137[1] = v138;
  v925 = v137;
  uint64_t v139 = (uint64_t *)((char *)a9 + v132[11]);
  *uint64_t v139 = variable initialization expression of AIDiffingUpdate.insertedIndexPathsSet();
  v139[1] = v140;
  uint64_t v141 = v132[12];
  uint64_t v142 = a1;
  uint64_t v143 = (char **)((char *)a9 + v141);
  uint64_t v144 = (char *)variable initialization expression of Library.Context.playlistVariants();
  v920 = v143;
  *uint64_t v143 = v144;
  a9[1].Class isa = (Class)a7;
  a9[2].Class isa = a8;
  v941 = a9;
  if (!a1)
  {
    sub_10007B674(a7);
    sub_10006ADFC(a12);
    sub_10006ADFC(v938);
    sub_10006ADFC(a7);
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    LOBYTE(v941->isa) = 1;
    return result;
  }
  v956 = a12;
  v955 = a13;
  if (!v935)
  {
    sub_10007B674(a7);
    sub_10006ADFC(v956);
    sub_10006ADFC(v938);
    sub_10006ADFC(a7);
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_10007B674(a7);
  uint64_t v145 = v958;
  uint64_t v146 = Array.count.getter();
  uint64_t v147 = v938;
  if (v146 <= 0 || (uint64_t v148 = v146, v883 = v142, v149 = Array.count.getter(), v149 < 1))
  {
    sub_10006ADFC(v956);
    sub_10006ADFC(v147);
    sub_10006ADFC(a7);
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v868 = (void (**)(uint64_t, char *, uint64_t))v149;
  v857 = v148;
  v859 = a7;
  v865 = a8;
  uint64_t v150 = sub_100AAB018();
  Class isa = (void (*)(void))v951[2].isa;
  v962 = v150;
  v964 = v951 + 2;
  v963 = (void (*)(void, uint64_t, uint64_t))isa;
  isa(v131);
  uint64_t v152 = swift_allocObject();
  v153 = v940;
  *(void *)(v152 + 16) = v145;
  *(void *)(v152 + 24) = v153;
  uint64_t v154 = swift_allocObject();
  *(void *)(v154 + 16) = v974;
  uint64_t v155 = swift_allocObject();
  *(void *)(v155 + 16) = sub_100AB69BC;
  *(void *)(v155 + 24) = v154;
  swift_bridgeObjectRetain();
  uint64_t v156 = Logger.logObject.getter();
  LODWORD(v960) = static os_log_type_t.default.getter();
  uint64_t v157 = swift_allocObject();
  *(unsigned char *)(v157 + 16) = 32;
  uint64_t v158 = swift_allocObject();
  *(unsigned char *)(v158 + 16) = 8;
  uint64_t v159 = swift_allocObject();
  *(void *)(v159 + 16) = sub_100AB69B4;
  *(void *)(v159 + 24) = v152;
  uint64_t v160 = swift_allocObject();
  *(void *)(v160 + 16) = sub_100AB6A04;
  *(void *)(v160 + 24) = v159;
  uint64_t v161 = swift_allocObject();
  *(void *)(v161 + 16) = sub_100AB6A0C;
  *(void *)(v161 + 24) = v160;
  uint64_t v162 = swift_allocObject();
  *(unsigned char *)(v162 + 16) = 32;
  uint64_t v163 = swift_allocObject();
  *(unsigned char *)(v163 + 16) = 8;
  uint64_t v164 = v156;
  uint64_t v165 = swift_allocObject();
  *(void *)(v165 + 16) = sub_100AB69C8;
  *(void *)(v165 + 24) = v155;
  uint64_t v166 = swift_allocObject();
  *(void *)(v166 + 16) = sub_100AB75F8;
  *(void *)(v166 + 24) = v165;
  v961 = sub_100063814(&qword_1010C7418);
  uint64_t v167 = swift_allocObject();
  v934 = xmmword_100E25700;
  *(_OWORD *)(v167 + 16) = xmmword_100E25700;
  *(void *)(v167 + 32) = sub_100AB69E0;
  *(void *)(v167 + 40) = v157;
  *(void *)(v167 + 48) = sub_100AB7784;
  *(void *)(v167 + 56) = v158;
  *(void *)(v167 + 64) = sub_100AB6A34;
  *(void *)(v167 + 72) = v161;
  *(void *)(v167 + 80) = sub_100AB7784;
  *(void *)(v167 + 88) = v162;
  *(void *)(v167 + 96) = sub_100AB7784;
  *(void *)(v167 + 104) = v163;
  *(void *)(v167 + 112) = sub_100AB6A34;
  *(void *)(v167 + 120) = v166;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  BOOL v168 = os_log_type_enabled(v164, (os_log_type_t)v960);
  v975 = v85;
  if (v168)
  {
    uint64_t v169 = swift_slowAlloc();
    v980 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v169 = 514;
    *(unsigned char *)(v169 + 2) = *(unsigned char *)(v157 + 16);
    swift_release();
    *(unsigned char *)(v169 + 3) = *(unsigned char *)(v158 + 16);
    uint64_t v170 = swift_release();
    uint64_t v171 = (*(uint64_t (**)(uint64_t))(v161 + 16))(v170);
    *(void *)(v169 + 4) = sub_100075F3C(v171, v172, (uint64_t *)&v980);
    swift_bridgeObjectRelease();
    swift_release();
    *(unsigned char *)(v169 + 12) = *(unsigned char *)(v162 + 16);
    swift_release();
    *(unsigned char *)(v169 + 13) = *(unsigned char *)(v163 + 16);
    uint64_t v173 = swift_release();
    uint64_t v174 = (*(uint64_t (**)(uint64_t))(v166 + 16))(v173);
    *(void *)(v169 + 14) = sub_100075F3C(v174, v175, (uint64_t *)&v980);
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v164, (os_log_type_t)v960, "Building update for section with item type %s, visible index paths: %s", (uint8_t *)v169, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v176 = v951[1].isa;
    v177 = v131;
    uint64_t v178 = v975;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v176 = v951[1].isa;
    v177 = v131;
    uint64_t v178 = v85;
  }
  v960 = (void (**)(uint8_t **__return_ptr, uint64_t))v176;
  ((void (*)(char *, uint64_t))v176)(v177, v178);
  uint64_t v180 = v938;
  uint64_t v181 = v958;
  if (v938)
  {
    v182 = (void *)swift_allocObject();
    v183 = v940;
    v182[2] = v181;
    v182[3] = v183;
    uint64_t v184 = v936;
    v182[4] = v180;
    v182[5] = v184;
    v185 = sub_100AB757C;
  }
  else
  {
    v182 = (void *)swift_allocObject();
    v183 = v940;
    v182[2] = v181;
    v182[3] = v183;
    v185 = sub_100AB6A68;
  }
  v186 = (void *)swift_allocObject();
  v186[2] = v181;
  v186[3] = v183;
  v186[4] = v185;
  v186[5] = v182;
  v888 = v186;
  sub_10007B674(v180);
  uint64_t v187 = sub_100A8713C(0);
  v988 = sub_100A869E4(v187);
  v987 = &_swiftEmptySetSingleton;
  v980 = (uint8_t *)v883;
  __chkstk_darwin(v988);
  v845[-4] = v181;
  v845[-3] = v183;
  v845[-2] = &v987;
  uint64_t v188 = type metadata accessor for Array();
  uint64_t v189 = swift_getWitnessTable();
  uint64_t v191 = sub_10004CADC((void (*)(char *, char *))sub_100AB6AA8, (uint64_t)&v845[-6], v188, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, v189, (uint64_t)&protocol witness table for Never, v190);
  v978[0] = v935;
  swift_getWitnessTable();
  uint64_t v192 = Sequence.enumerated()();
  v978[0] = v980;
  __chkstk_darwin(v192);
  v845[-4] = v181;
  v845[-3] = v183;
  v845[-2] = &v988;
  __chkstk_darwin(v193);
  v845[-4] = v181;
  v845[-3] = v183;
  v845[-2] = sub_100AB6ACC;
  v845[-1] = v194;
  uint64_t v195 = type metadata accessor for EnumeratedSequence();
  uint64_t v196 = swift_getWitnessTable();
  uint64_t v198 = sub_100AAB3A0((void (*)(char *, char *))sub_100AB6AD8, (uint64_t)&v845[-6], v195, (char *)&type metadata for String, (uint64_t)&type metadata for Never, v196, (uint64_t)&protocol witness table for Never, v197);
  swift_bridgeObjectRelease();
  uint64_t v199 = v987[2];
  if (v199 != sub_100A9F1EC(v191))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v258 = v977;
    uint64_t v201 = v975;
    v963(v977, v962, v975);
    uint64_t v259 = swift_allocObject();
    *(void *)(v259 + 16) = v191;
    uint64_t v260 = swift_allocObject();
    *(void *)(v260 + 16) = sub_100AB7770;
    *(void *)(v260 + 24) = v259;
    v261 = Logger.logObject.getter();
    os_log_type_t v262 = static os_log_type_t.fault.getter();
    uint64_t v263 = swift_allocObject();
    *(unsigned char *)(v263 + 16) = 34;
    uint64_t v264 = swift_allocObject();
    *(unsigned char *)(v264 + 16) = 8;
    uint64_t v265 = swift_allocObject();
    *(void *)(v265 + 16) = sub_100AB6B54;
    *(void *)(v265 + 24) = v260;
    uint64_t v266 = swift_allocObject();
    *(void *)(v266 + 16) = sub_100AB75F8;
    *(void *)(v266 + 24) = v265;
    uint64_t v267 = swift_allocObject();
    *(_OWORD *)(v267 + 16) = xmmword_100E251F0;
    *(void *)(v267 + 32) = sub_100AB7784;
    *(void *)(v267 + 40) = v263;
    *(void *)(v267 + 48) = sub_100AB7784;
    *(void *)(v267 + 56) = v264;
    *(void *)(v267 + 64) = sub_100AB6A34;
    *(void *)(v267 + 72) = v266;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v261, v262))
    {
      uint64_t v268 = swift_slowAlloc();
      v980 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v268 = 258;
      *(unsigned char *)(v268 + 2) = *(unsigned char *)(v263 + 16);
      swift_release();
      *(unsigned char *)(v268 + 3) = *(unsigned char *)(v264 + 16);
      uint64_t v269 = swift_release();
      uint64_t v270 = (*(uint64_t (**)(uint64_t))(v266 + 16))(v269);
      *(void *)(v268 + 4) = sub_100075F3C(v270, v271, (uint64_t *)&v980);
      swift_bridgeObjectRelease();
      swift_release();
      os_log_type_t v272 = v262;
      v273 = "Found duplicate sections in old items, falling back to reload data. Sections: %{public}s";
LABEL_64:
      _os_log_impl((void *)&_mh_execute_header, v261, v272, v273, (uint8_t *)v268, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_66:
      swift_release();
      sub_10006ADFC(v956);
      sub_10006ADFC(v938);
      sub_10006ADFC(v859);

      ((void (*)(void (**)(uint64_t, uint64_t, uint64_t), uint64_t))v960)(v258, v201);
      LOBYTE(v941->isa) = 1;
      goto LABEL_228;
    }
LABEL_65:
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_66;
  }
  uint64_t v200 = sub_100A9F1EC(v198);
  uint64_t v201 = v975;
  if ((void (**)(uint64_t, char *, uint64_t))v200 != v868)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v258 = v959;
    v963(v959, v962, v201);
    uint64_t v274 = swift_allocObject();
    *(void *)(v274 + 16) = v198;
    uint64_t v275 = swift_allocObject();
    *(void *)(v275 + 16) = sub_100AB7770;
    *(void *)(v275 + 24) = v274;
    v261 = Logger.logObject.getter();
    os_log_type_t v276 = static os_log_type_t.fault.getter();
    uint64_t v277 = swift_allocObject();
    *(unsigned char *)(v277 + 16) = 34;
    uint64_t v278 = swift_allocObject();
    *(unsigned char *)(v278 + 16) = 8;
    uint64_t v279 = swift_allocObject();
    *(void *)(v279 + 16) = sub_100AB6B54;
    *(void *)(v279 + 24) = v275;
    uint64_t v280 = swift_allocObject();
    *(void *)(v280 + 16) = sub_100AB75F8;
    *(void *)(v280 + 24) = v279;
    uint64_t v281 = swift_allocObject();
    *(_OWORD *)(v281 + 16) = xmmword_100E251F0;
    *(void *)(v281 + 32) = sub_100AB7784;
    *(void *)(v281 + 40) = v277;
    *(void *)(v281 + 48) = sub_100AB7784;
    *(void *)(v281 + 56) = v278;
    *(void *)(v281 + 64) = sub_100AB6A34;
    *(void *)(v281 + 72) = v280;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v261, v276))
    {
      uint64_t v268 = swift_slowAlloc();
      v978[0] = swift_slowAlloc();
      *(_WORD *)uint64_t v268 = 258;
      *(unsigned char *)(v268 + 2) = *(unsigned char *)(v277 + 16);
      swift_release();
      *(unsigned char *)(v268 + 3) = *(unsigned char *)(v278 + 16);
      v980 = (uint8_t *)(v268 + 4);
      swift_release();
      sub_100AB6A34(&v980);
      swift_release();
      os_log_type_t v272 = v276;
      v273 = "Found duplicate sections in new items, falling back to reload data. Sections: %{public}s";
      goto LABEL_64;
    }
    goto LABEL_65;
  }
  v977 = 0;
  v978[0] = v191;
  v980 = (uint8_t *)v198;
  sub_100063814(&qword_1010C71E0);
  sub_100063858((unint64_t *)&qword_1010C71F8, &qword_1010C71E0);
  BidirectionalCollection<>.difference<A>(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v202 = sub_100A87130(0);
  unint64_t v203 = sub_100A877F8(v202);
  swift_bridgeObjectRelease();
  v986 = v203;
  v985 = &_swiftEmptySetSingleton;
  v204 = v940;
  v848 = swift_getAssociatedConformanceWitness();
  uint64_t v205 = type metadata accessor for OrderedSet();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  v984 = Dictionary.init(dictionaryLiteral:)();
  static Array._allocateUninitialized(_:)();
  v983[1] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v206 = v974;
  sub_100AA1044();
  uint64_t v207 = v206;
  swift_bridgeObjectRelease();
  uint64_t v208 = sub_100A9DA0C(v207);
  v959 = (void (**)(uint64_t, uint64_t, uint64_t))v205;
  v864 = v208;
  v845[1] = v207;
  if (v208)
  {
    uint64_t v209 = 0;
    v867 = *(void *)(v947 + 16);
    unint64_t v210 = v207 + ((*(unsigned __int8 *)(v947 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v947 + 80));
    v861 = *(void *)(v947 + 72);
    v211 = (void (**)(char *, void, uint64_t, uint64_t))(v947 + 56);
    v863 = (unsigned int (**)(char *, uint64_t, uint64_t))(v947 + 48);
    v862 = (void (**)(uint64_t, char *, uint64_t))(v947 + 32);
    v868 = (void (**)(uint64_t, char *, uint64_t))(v947 + 16);
    v866 = (char *)(v947 + 8);
    v853 = v204 + 5;
    v847 = (void (**)(uint64_t))(v884 + 16);
    v852 = (void (**)(char *, uint64_t))(v877 + 8);
    v846 = (void (**)(uint64_t, char *))(v884 + 8);
    v850 = v204 + 4;
    v851 = (void (**)(char *, uint64_t))(v889 + 8);
    uint64_t v212 = v971;
    uint64_t v213 = v910;
    v214 = v948;
    v856 = (void (**)(void, void, void, void))(v947 + 56);
    ((void (*)(char *, unint64_t, uint64_t))v867)(v948, v210, v971);
    while (1)
    {
      if (__OFADD__(v209, 1)) {
        goto LABEL_315;
      }
      v860 = *v211;
      v860(v214, 0, 1, v212);
      if ((*v863)(v214, 1, v212) == 1) {
        goto LABEL_69;
      }
      v974 = v209 + 1;
      (*v862)(v213, v214, v212);
      if (IndexPath.section.getter() >= v939 && ((v953 & 1) != 0 || IndexPath.section.getter() <= (uint64_t)v890))
      {
        v215 = v903;
        ((void (*)(char *, uint64_t, uint64_t))v867)(v903, v213, v212);
        uint64_t v216 = v949;
        sub_100AB1DF4(v949, v215);
        v858 = *(void (**)(uint64_t, uint64_t))v866;
        v858(v216, v212);
        v978[0] = IndexPath.section.getter();
        Dictionary.subscript.getter();
        uint64_t v217 = v981;
        sub_100AB7500((uint64_t)v980, v981);
        if (!v217)
        {
          uint64_t v218 = IndexPath.section.getter();
          static Array._allocateUninitialized(_:)();
          v980 = (uint8_t *)OrderedSet.init(arrayLiteral:)();
          v981 = v219;
          v978[0] = v218;
          type metadata accessor for Dictionary();
          Dictionary.subscript.setter();
          uint64_t v220 = IndexPath.section.getter();
          uint64_t v221 = IndexPath.item.getter();
          sub_100AA0F74(v221, 0, v220);
        }
        v978[0] = IndexPath.section.getter();
        Dictionary.subscript.getter();
        uint64_t v222 = v981;
        sub_100AB7500((uint64_t)v980, v981);
        if (!v222)
        {
          uint64_t v223 = IndexPath.section.getter();
          static Array._allocateUninitialized(_:)();
          v980 = (uint8_t *)OrderedSet.init(arrayLiteral:)();
          v981 = v224;
          v978[0] = v223;
          type metadata accessor for Dictionary();
          Dictionary.subscript.setter();
        }
        if (__OFSUB__(IndexPath.section.getter(), v939)) {
          goto LABEL_323;
        }
        Array.subscript.getter();
        v978[0] = IndexPath.section.getter();
        Dictionary.subscript.getter();
        uint64_t v225 = v981;
        if (v981)
        {
          v855 = (void (*)(uint64_t, NSObject *))ContiguousArray.count.getter();
          swift_release();
          swift_release();
        }
        else
        {
          v855 = 0;
        }
        v983[0] = IndexPath.section.getter();
        v849 = (void (*)(uint8_t **, void))type metadata accessor for Dictionary();
        v226 = (void (*)(char *, uint64_t))Dictionary.subscript.modify();
        if (*(void *)(v227 + 8))
        {
          v854 = v226;
          v228 = v893;
          ((void (*)(uint64_t, NSObject *))v204[5].isa)(v958, v204);
          v979 = (unsigned char *)IndexPath.item.getter();
          uint64_t v229 = v899;
          v230 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
          uint64_t v231 = v902;
          v232 = v970;
          (*v847)(v902);
          v230(v978, 0);
          (*v852)(v228, v229);
          OrderedSet._append(_:)();
          (*v846)(v231, v232);
          v854((char *)&v980, 0);
        }
        else
        {
          v226((char *)&v980, 0);
        }
        v978[0] = IndexPath.section.getter();
        Dictionary.subscript.getter();
        if (v981)
        {
          uint64_t v233 = ContiguousArray.count.getter();
          uint64_t v213 = v910;
          swift_release();
          swift_release();
          uint64_t v212 = v971;
          v204 = v940;
          v211 = (void (**)(char *, void, uint64_t, uint64_t))v856;
          if (v225 && v855 == (void (*)(uint64_t, NSObject *))v233)
          {
LABEL_294:
            v825 = v212;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v826 = v870;
            v827 = v975;
            v963(v870, v962, v975);
            v828 = Logger.logObject.getter();
            v829 = static os_log_type_t.fault.getter();
            v830 = sub_100A87090(0);
            if (os_log_type_enabled(v828, v829))
            {
              v831 = (uint8_t *)swift_slowAlloc();
              v832 = v937;
              v833 = v831;
              v978[0] = 0;
              v983[0] = 0;
              *(_WORD *)v831 = 0;
              v980 = v831 + 2;
              sub_10027550C(v830, (uint64_t)&v980, (uint64_t)v978, (uint64_t)v983);
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v828, v829, "Found duplicate in old visible items, falling back to reload data.", v833, 2u);
              swift_slowDealloc();
              swift_release();
              sub_10006ADFC(v956);
              sub_10006ADFC(v938);
              sub_10006ADFC(v859);

              ((void (*)(uint64_t, uint64_t))v960)(v826, v827);
              (*v851)(v957, v958);
              v858(v910, v825);
              (*(void (**)(char *, uint64_t))(v832 + 8))(v892, v918);
LABEL_308:
              LOBYTE(v941->isa) = 1;
              goto LABEL_227;
            }
            swift_release();
            swift_bridgeObjectRelease();
            sub_10006ADFC(v956);
            sub_10006ADFC(v938);
            sub_10006ADFC(v859);

            ((void (*)(uint64_t, uint64_t))v960)(v826, v827);
            (*v851)(v957, v958);
            v835 = v910;
            v836 = v825;
LABEL_307:
            v858(v835, v836);
            (*(void (**)(char *, uint64_t))(v937 + 8))(v892, v918);
            goto LABEL_308;
          }
        }
        else
        {
          uint64_t v212 = v971;
          v204 = v940;
          v211 = (void (**)(char *, void, uint64_t, uint64_t))v856;
          if (!v225) {
            goto LABEL_294;
          }
        }
        v234 = v957;
        uint64_t v235 = ((uint64_t (*)(uint64_t, NSObject *))v204[4].isa)(v958, v204);
        if (*(void *)(v988 + 16) && (sub_100071DE8(v235, v236), (v237 & 1) != 0))
        {
          swift_bridgeObjectRelease();
          uint64_t v238 = v958;
          Array.subscript.getter();
          uint64_t v239 = IndexPath.item.getter();
          uint64_t v240 = v213;
          v241 = v893;
          v855 = (void (*)(uint64_t, NSObject *))v204[5].isa;
          v855(v238, v204);
          uint64_t v242 = v899;
          uint64_t v243 = dispatch thunk of Collection.count.getter();
          v244 = *v852;
          (*v852)(v241, v242);
          if (v239 < v243)
          {
            v854 = v244;
            v978[0] = IndexPath.section.getter();
            Dictionary.subscript.getter();
            uint64_t v245 = v981;
            if (v981)
            {
              v845[0] = ContiguousArray.count.getter();
              swift_release();
              swift_release();
            }
            else
            {
              v845[0] = 0;
            }
            v983[0] = IndexPath.section.getter();
            v246 = (void (*)(void, void))Dictionary.subscript.modify();
            if (*(void *)(v247 + 8))
            {
              v248 = v893;
              v849 = (void (*)(uint8_t **, void))v246;
              v855(v958, v204);
              v979 = (unsigned char *)IndexPath.item.getter();
              uint64_t v249 = v899;
              v250 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
              v251 = *v847;
              uint64_t v252 = v902;
              v855 = (void (*)(uint64_t, NSObject *))v245;
              v253 = v970;
              v251(v902);
              v250(v978, 0);
              v854(v248, v249);
              OrderedSet._append(_:)();
              v254 = v253;
              uint64_t v245 = (uint64_t)v855;
              (*v846)(v252, v254);
              v849(&v980, 0);
            }
            else
            {
              v246(&v980, 0);
            }
            v978[0] = IndexPath.section.getter();
            Dictionary.subscript.getter();
            if (v981)
            {
              uint64_t v255 = ContiguousArray.count.getter();
              swift_release();
              swift_release();
              uint64_t v240 = v910;
              if (v245 && v845[0] == v255)
              {
LABEL_303:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v837 = v869;
                v838 = v975;
                v963(v869, v962, v975);
                v839 = Logger.logObject.getter();
                v840 = static os_log_type_t.fault.getter();
                v841 = sub_100A87090(0);
                if (os_log_type_enabled(v839, v840))
                {
                  v842 = (uint8_t *)swift_slowAlloc();
                  v978[0] = 0;
                  v983[0] = 0;
                  *(_WORD *)v842 = 0;
                  v980 = v842 + 2;
                  sub_10027550C(v841, (uint64_t)&v980, (uint64_t)v978, (uint64_t)v983);
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v839, v840, "Found duplicate in new visible items, falling back to reload data.", v842, 2u);
                  swift_slowDealloc();
                  swift_release();
                }
                else
                {
                  swift_release();
                  swift_bridgeObjectRelease();
                }
                sub_10006ADFC(v956);
                sub_10006ADFC(v938);
                sub_10006ADFC(v859);

                ((void (*)(void (**)(char *, char *, uint64_t), uint64_t))v960)(v837, v838);
                v843 = *v851;
                v844 = v958;
                (*v851)(v901, v958);
                v843(v957, v844);
                v835 = v910;
                v836 = v971;
                goto LABEL_307;
              }
            }
            else
            {
              uint64_t v240 = v910;
              if (!v245) {
                goto LABEL_303;
              }
            }
          }
          v256 = *v851;
          uint64_t v257 = v958;
          (*v851)(v901, v958);
          v256(v957, v257);
          uint64_t v212 = v971;
          v858(v240, v971);
          uint64_t v213 = v240;
          v214 = v948;
          v211 = (void (**)(char *, void, uint64_t, uint64_t))v856;
        }
        else
        {
          swift_bridgeObjectRelease();
          (*v851)(v234, v958);
          v858(v213, v212);
          v214 = v948;
        }
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))v866)(v213, v212);
      }
      ++v209;
      v210 += v861;
      if (v974 == v864) {
        break;
      }
      ((void (*)(char *, unint64_t, uint64_t))v867)(v214, v210, v212);
    }
    v860(v214, 1, 1, v212);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v947 + 56))(v948, 1, 1, v971);
  }
LABEL_69:
  swift_bridgeObjectRelease();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  uint64_t v282 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v283 = *(void *)(v984 + 64);
  v902 = v984 + 64;
  v983[0] = v282;
  uint64_t v284 = 1 << *(unsigned char *)(v984 + 32);
  uint64_t v285 = -1;
  if (v284 < 64) {
    uint64_t v285 = ~(-1 << v284);
  }
  unint64_t v286 = v285 & v283;
  *(void *)&v910 = (unint64_t)(v284 + 63) >> 6;
  v903 = (char *)(v909 + 56);
  v948 = (char *)v984;
  swift_bridgeObjectRetain();
  uint64_t v287 = 0;
  uint64_t v288 = v975;
  uint64_t v289 = v937;
  uint64_t v290 = v972;
  while (1)
  {
    if (v286)
    {
      unint64_t v291 = __clz(__rbit64(v286));
      v286 &= v286 - 1;
      v974 = v287;
      unint64_t v292 = v291 | (v287 << 6);
      goto LABEL_87;
    }
    uint64_t v293 = v287 + 1;
    uint64_t v294 = v956;
    if (__OFADD__(v287, 1))
    {
      __break(1u);
LABEL_310:
      __break(1u);
LABEL_311:
      __break(1u);
LABEL_312:
      __break(1u);
LABEL_313:
      __break(1u);
      goto LABEL_314;
    }
    uint64_t v295 = v288;
    v296 = v977;
    if (v293 >= (uint64_t)v910) {
      goto LABEL_89;
    }
    unint64_t v297 = *(void *)(v902 + 8 * v293);
    uint64_t v298 = v287 + 1;
    if (!v297)
    {
      uint64_t v298 = v287 + 2;
      if (v287 + 2 >= (uint64_t)v910) {
        goto LABEL_89;
      }
      unint64_t v297 = *(void *)(v902 + 8 * v298);
      if (!v297) {
        break;
      }
    }
LABEL_86:
    unint64_t v286 = (v297 - 1) & v297;
    v974 = v298;
    unint64_t v292 = __clz(__rbit64(v297)) + (v298 << 6);
LABEL_87:
    uint64_t v300 = *(void *)(*((void *)v948 + 6) + 8 * v292);
    v301 = (uint64_t *)(*((void *)v948 + 7) + 16 * v292);
    uint64_t v303 = *v301;
    uint64_t v302 = v301[1];
    v978[0] = v300;
    swift_retain();
    swift_retain();
    uint64_t v304 = Dictionary.subscript.getter();
    uint64_t v305 = v981;
    if (v981)
    {
      v953 = (uint64_t)v845;
      uint64_t v306 = (uint64_t)v980;
      v978[0] = v303;
      v978[1] = v302;
      __chkstk_darwin(v304);
      v307 = v940;
      v845[-12] = v958;
      v845[-11] = v307;
      v308 = v888;
      v845[-10] = sub_100AB6A70;
      v845[-9] = v308;
      uint64_t v309 = v955;
      v845[-8] = v956;
      v845[-7] = v309;
      v845[-6] = v306;
      v845[-5] = v305;
      v845[-4] = &v986;
      v845[-3] = v300;
      v845[-2] = v941;
      v957 = (char *)v286;
      swift_getWitnessTable();
      uint64_t v288 = v975;
      BidirectionalCollection.difference<A>(from:by:)();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))v903)(v290, 0, 1, v973);
      v980 = (uint8_t *)v300;
      unint64_t v286 = (unint64_t)v957;
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
    uint64_t v289 = v937;
    uint64_t v287 = v974;
  }
  uint64_t v299 = v287 + 3;
  if (v287 + 3 < (uint64_t)v910)
  {
    unint64_t v297 = *(void *)(v902 + 8 * v299);
    if (!v297)
    {
      while (1)
      {
        uint64_t v298 = v299 + 1;
        if (__OFADD__(v299, 1)) {
          break;
        }
        if (v298 >= (uint64_t)v910) {
          goto LABEL_89;
        }
        unint64_t v297 = *(void *)(v902 + 8 * v298);
        ++v299;
        if (v297) {
          goto LABEL_86;
        }
      }
LABEL_314:
      __break(1u);
LABEL_315:
      __break(1u);
LABEL_316:
      __break(1u);
LABEL_317:
      __break(1u);
LABEL_318:
      __break(1u);
LABEL_319:
      __break(1u);
LABEL_320:
      __break(1u);
LABEL_321:
      __break(1u);
LABEL_322:
      __break(1u);
LABEL_323:
      __break(1u);
LABEL_324:
      __break(1u);
LABEL_325:
      __break(1u);
LABEL_326:
      __break(1u);
LABEL_327:
      __break(1u);
LABEL_328:
      __break(1u);
LABEL_329:
      __break(1u);
LABEL_330:
      __break(1u);
LABEL_331:
      __break(1u);
      goto LABEL_332;
    }
    uint64_t v298 = v287 + 3;
    goto LABEL_86;
  }
LABEL_89:
  swift_release();
  v310 = *(void (**)(os_log_t, char *, uint64_t))(v289 + 16);
  os_log_t v311 = v881;
  v948 = (char *)(v289 + 16);
  *(void *)&v910 = v310;
  v310(v881, v892, v918);
  uint64_t v312 = sub_100063858(&qword_1010C7420, &qword_1010C7410);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v313 = v882;
  *(Class *)((char *)&v311->isa + *(int *)(v882 + 36)) = (Class)v980;
  v314 = v950;
  sub_10003CABC((uint64_t)v311, (uint64_t)v950, &qword_1010C7408);
  v315 = (uint8_t **)((char *)v314 + *(int *)(v313 + 36));
  v316 = *v315;
  dispatch thunk of Collection.endIndex.getter();
  if (v316 != v980)
  {
    v903 = (char *)(v937 + 8);
    v890 = v951 + 1;
    v870 = xmmword_100E251F0;
    uint64_t v538 = v918;
    v902 = v312;
    v901 = (char *)v315;
    do
    {
      v542 = (void (*)(uint8_t **, void))dispatch thunk of Collection.subscript.read();
      v544 = (void (**)(uint64_t, uint64_t, uint64_t))*v543;
      uint64_t v545 = (uint64_t)v543[2];
      uint64_t v546 = (uint64_t)v543[3];
      int v547 = *((unsigned __int8 *)v543 + 32);
      int v548 = *((unsigned __int8 *)v543 + 33);
      v957 = v543[1];
      v953 = v545;
      v974 = v546;
      MPCPlaybackEngine.Configuration.options.getter();
      v542(&v980, 0);
      v549 = v952;
      ((void (*)(char *, NSObject *, uint64_t))v910)(v952, v314, v538);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(char *, uint64_t))v903)(v549, v538);
      uint64_t v550 = (uint64_t)v544 + v939;
      BOOL v551 = __OFADD__(v544, v939);
      LODWORD(v972) = v547;
      v959 = v544;
      if (v548)
      {
        if (v551) {
          goto LABEL_316;
        }
        if ((v547 & 1) == 0)
        {
          LODWORD(v882) = v548;
          v977 = v296;
          v552 = (void (**)(char *, char *, uint64_t))(v974 + v939);
          if (__OFADD__(v974, v939)) {
            goto LABEL_321;
          }
          v963(v944, v962, v295);
          uint64_t v553 = swift_allocObject();
          *(void *)(v553 + 16) = v550;
          uint64_t v554 = swift_allocObject();
          v869 = v552;
          *(void *)(v554 + 16) = v552;
          v881 = (os_log_t)Logger.logObject.getter();
          int v555 = static os_log_type_t.default.getter();
          uint64_t v556 = swift_allocObject();
          *(unsigned char *)(v556 + 16) = 2;
          uint64_t v557 = swift_allocObject();
          *(unsigned char *)(v557 + 16) = 8;
          uint64_t v558 = swift_allocObject();
          *(void *)(v558 + 16) = j___s9MusicCore7LibraryO4MenuV7RequestV16filteringOptionsSo07MPMediac9FilteringG0Vvg;
          *(void *)(v558 + 24) = v553;
          uint64_t v559 = swift_allocObject();
          *(void *)(v559 + 16) = sub_100AB7604;
          *(void *)(v559 + 24) = v558;
          uint64_t v560 = swift_allocObject();
          *(unsigned char *)(v560 + 16) = 2;
          uint64_t v561 = swift_allocObject();
          *(unsigned char *)(v561 + 16) = 8;
          uint64_t v562 = swift_allocObject();
          *(void *)(v562 + 16) = j___s9MusicCore7LibraryO4MenuV7RequestV16filteringOptionsSo07MPMediac9FilteringG0Vvg;
          *(void *)(v562 + 24) = v554;
          uint64_t v563 = swift_allocObject();
          *(void *)(v563 + 16) = sub_100AB7604;
          *(void *)(v563 + 24) = v562;
          uint64_t v564 = swift_allocObject();
          *(_OWORD *)(v564 + 16) = v934;
          *(void *)(v564 + 32) = sub_100AB7784;
          *(void *)(v564 + 40) = v556;
          *(void *)(v564 + 48) = sub_100AB7784;
          *(void *)(v564 + 56) = v557;
          *(void *)(v564 + 64) = sub_100AB6CE0;
          *(void *)(v564 + 72) = v559;
          *(void *)(v564 + 80) = sub_100AB7784;
          *(void *)(v564 + 88) = v560;
          *(void *)(v564 + 96) = sub_100AB7784;
          *(void *)(v564 + 104) = v561;
          *(void *)(v564 + 112) = sub_100AB6CE0;
          *(void *)(v564 + 120) = v563;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          LODWORD(v868) = v555;
          if (os_log_type_enabled(v881, (os_log_type_t)v555))
          {
            uint64_t v565 = swift_slowAlloc();
            *(_WORD *)uint64_t v565 = 512;
            *(unsigned char *)(v565 + 2) = *(unsigned char *)(v556 + 16);
            if (v977) {
              goto LABEL_336;
            }
            uint64_t v566 = v565;
            swift_release();
            *(unsigned char *)(v566 + 3) = *(unsigned char *)(v557 + 16);
            uint64_t v567 = swift_release();
            (*(void (**)(uint8_t **__return_ptr, uint64_t))(v559 + 16))(&v980, v567);
            *(void *)(v566 + 4) = v980;
            swift_release();
            *(unsigned char *)(v566 + 12) = *(unsigned char *)(v560 + 16);
            v296 = 0;
            swift_release();
            *(unsigned char *)(v566 + 13) = *(unsigned char *)(v561 + 16);
            v540 = (uint8_t **)v901;
            uint64_t v568 = swift_release();
            (*(void (**)(uint8_t **__return_ptr, uint64_t))(v563 + 16))(&v980, v568);
            *(void *)(v566 + 14) = v980;
            swift_release();
            os_log_t v569 = v881;
            _os_log_impl((void *)&_mh_execute_header, v881, (os_log_type_t)v868, "[Remove] Moving section from %{public}ld to %{public}ld", (uint8_t *)v566, 0x16u);
            swift_slowDealloc();
            uint64_t v294 = v956;
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            uint64_t v294 = v956;
            v296 = v977;
            v540 = (uint8_t **)v901;
            os_log_t v569 = v881;
          }

          uint64_t v295 = v975;
          ((void (*)(void, uint64_t))v960)(v944, v975);
          uint64_t v612 = v550;
          uint64_t v613 = (uint64_t)v869;
LABEL_223:
          sub_100AA0CE0(v612, v613);
          v314 = v950;
          goto LABEL_194;
        }
        v963(v946, v962, v295);
        uint64_t v588 = swift_allocObject();
        Swift::Int v589 = v550;
        *(void *)(v588 + 16) = v550;
        v590 = Logger.logObject.getter();
        os_log_type_t v591 = static os_log_type_t.default.getter();
        uint64_t v592 = swift_allocObject();
        *(unsigned char *)(v592 + 16) = 2;
        uint64_t v593 = swift_allocObject();
        *(unsigned char *)(v593 + 16) = 8;
        uint64_t v594 = swift_allocObject();
        *(void *)(v594 + 16) = j___s9MusicCore7LibraryO4MenuV7RequestV16filteringOptionsSo07MPMediac9FilteringG0Vvg;
        *(void *)(v594 + 24) = v588;
        uint64_t v595 = swift_allocObject();
        *(void *)(v595 + 16) = sub_100AB6CB0;
        *(void *)(v595 + 24) = v594;
        uint64_t v596 = swift_allocObject();
        *(_OWORD *)(v596 + 16) = v870;
        *(void *)(v596 + 32) = sub_100AB7784;
        *(void *)(v596 + 40) = v592;
        *(void *)(v596 + 48) = sub_100AB7784;
        *(void *)(v596 + 56) = v593;
        *(void *)(v596 + 64) = sub_100AB6CE0;
        *(void *)(v596 + 72) = v595;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v590, v591))
        {
          uint64_t v597 = swift_slowAlloc();
          *(_WORD *)uint64_t v597 = 256;
          *(unsigned char *)(v597 + 2) = *(unsigned char *)(v592 + 16);
          if (v296) {
            goto LABEL_333;
          }
          uint64_t v598 = v597;
          swift_release();
          *(unsigned char *)(v598 + 3) = *(unsigned char *)(v593 + 16);
          uint64_t v599 = swift_release();
          (*(void (**)(uint8_t **__return_ptr, uint64_t))(v595 + 16))(&v980, v599);
          *(void *)(v598 + 4) = v980;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v590, v591, "Deleting section %{public}ld", (uint8_t *)v598, 0xCu);
          swift_slowDealloc();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        uint64_t v295 = v975;
        ((void (*)(void (**)(char *), uint64_t))v960)(v946, v975);
        Swift::Int v539 = v589;
      }
      else
      {
        if (v551) {
          goto LABEL_317;
        }
        if ((v547 & 1) == 0)
        {
          LODWORD(v882) = v548;
          v977 = v296;
          v570 = (void (**)(char *, char *, uint64_t))(v974 + v939);
          if (__OFADD__(v974, v939)) {
            goto LABEL_322;
          }
          v963(v927, v962, v295);
          uint64_t v571 = swift_allocObject();
          v869 = v570;
          *(void *)(v571 + 16) = v570;
          uint64_t v572 = swift_allocObject();
          *(void *)(v572 + 16) = v550;
          v881 = (os_log_t)Logger.logObject.getter();
          int v573 = static os_log_type_t.default.getter();
          uint64_t v574 = swift_allocObject();
          *(unsigned char *)(v574 + 16) = 2;
          uint64_t v575 = swift_allocObject();
          *(unsigned char *)(v575 + 16) = 8;
          uint64_t v576 = swift_allocObject();
          *(void *)(v576 + 16) = j___s9MusicCore7LibraryO4MenuV7RequestV16filteringOptionsSo07MPMediac9FilteringG0Vvg;
          *(void *)(v576 + 24) = v571;
          uint64_t v577 = swift_allocObject();
          *(void *)(v577 + 16) = sub_100AB7604;
          *(void *)(v577 + 24) = v576;
          uint64_t v578 = swift_allocObject();
          *(unsigned char *)(v578 + 16) = 2;
          uint64_t v579 = swift_allocObject();
          *(unsigned char *)(v579 + 16) = 8;
          uint64_t v580 = swift_allocObject();
          *(void *)(v580 + 16) = j___s9MusicCore7LibraryO4MenuV7RequestV16filteringOptionsSo07MPMediac9FilteringG0Vvg;
          *(void *)(v580 + 24) = v572;
          uint64_t v581 = swift_allocObject();
          *(void *)(v581 + 16) = sub_100AB7604;
          *(void *)(v581 + 24) = v580;
          uint64_t v582 = swift_allocObject();
          *(_OWORD *)(v582 + 16) = v934;
          *(void *)(v582 + 32) = sub_100AB7784;
          *(void *)(v582 + 40) = v574;
          *(void *)(v582 + 48) = sub_100AB7784;
          *(void *)(v582 + 56) = v575;
          *(void *)(v582 + 64) = sub_100AB6CE0;
          *(void *)(v582 + 72) = v577;
          *(void *)(v582 + 80) = sub_100AB7784;
          *(void *)(v582 + 88) = v578;
          *(void *)(v582 + 96) = sub_100AB7784;
          *(void *)(v582 + 104) = v579;
          *(void *)(v582 + 112) = sub_100AB6CE0;
          *(void *)(v582 + 120) = v581;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          LODWORD(v868) = v573;
          if (os_log_type_enabled(v881, (os_log_type_t)v573))
          {
            uint64_t v583 = swift_slowAlloc();
            *(_WORD *)uint64_t v583 = 512;
            *(unsigned char *)(v583 + 2) = *(unsigned char *)(v574 + 16);
            v296 = v977;
            if (v977) {
              goto LABEL_333;
            }
            uint64_t v584 = v583;
            swift_release();
            *(unsigned char *)(v584 + 3) = *(unsigned char *)(v575 + 16);
            uint64_t v585 = swift_release();
            (*(void (**)(uint8_t **__return_ptr, uint64_t))(v577 + 16))(&v980, v585);
            *(void *)(v584 + 4) = v980;
            swift_release();
            *(unsigned char *)(v584 + 12) = *(unsigned char *)(v578 + 16);
            swift_release();
            *(unsigned char *)(v584 + 13) = *(unsigned char *)(v579 + 16);
            v540 = (uint8_t **)v901;
            uint64_t v586 = swift_release();
            (*(void (**)(uint8_t **__return_ptr, uint64_t))(v581 + 16))(&v980, v586);
            *(void *)(v584 + 14) = v980;
            swift_release();
            os_log_t v587 = v881;
            _os_log_impl((void *)&_mh_execute_header, v881, (os_log_type_t)v868, "[Insert] Moving section from %{public}ld to %{public}ld", (uint8_t *)v584, 0x16u);
            swift_slowDealloc();
            uint64_t v294 = v956;
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            uint64_t v294 = v956;
            v296 = v977;
            v540 = (uint8_t **)v901;
            os_log_t v587 = v881;
          }

          uint64_t v295 = v975;
          ((void (*)(void, uint64_t))v960)(v927, v975);
          uint64_t v612 = (uint64_t)v869;
          uint64_t v613 = v550;
          goto LABEL_223;
        }
        v963(v945, v962, v295);
        uint64_t v600 = swift_allocObject();
        Swift::Int v601 = v550;
        *(void *)(v600 + 16) = v550;
        v602 = Logger.logObject.getter();
        os_log_type_t v603 = static os_log_type_t.default.getter();
        uint64_t v604 = swift_allocObject();
        *(unsigned char *)(v604 + 16) = 2;
        uint64_t v605 = swift_allocObject();
        *(unsigned char *)(v605 + 16) = 8;
        uint64_t v606 = swift_allocObject();
        *(void *)(v606 + 16) = j___s9MusicCore7LibraryO4MenuV7RequestV16filteringOptionsSo07MPMediac9FilteringG0Vvg;
        *(void *)(v606 + 24) = v600;
        uint64_t v607 = swift_allocObject();
        *(void *)(v607 + 16) = sub_100AB7604;
        *(void *)(v607 + 24) = v606;
        uint64_t v608 = swift_allocObject();
        *(_OWORD *)(v608 + 16) = v870;
        *(void *)(v608 + 32) = sub_100AB7784;
        *(void *)(v608 + 40) = v604;
        *(void *)(v608 + 48) = sub_100AB7784;
        *(void *)(v608 + 56) = v605;
        *(void *)(v608 + 64) = sub_100AB6CE0;
        *(void *)(v608 + 72) = v607;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v602, v603))
        {
          uint64_t v609 = swift_slowAlloc();
          *(_WORD *)uint64_t v609 = 256;
          *(unsigned char *)(v609 + 2) = *(unsigned char *)(v604 + 16);
          if (v296) {
            goto LABEL_333;
          }
          uint64_t v610 = v609;
          swift_release();
          *(unsigned char *)(v610 + 3) = *(unsigned char *)(v605 + 16);
          uint64_t v611 = swift_release();
          (*(void (**)(uint8_t **__return_ptr, uint64_t))(v607 + 16))(&v980, v611);
          *(void *)(v610 + 4) = v980;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v602, v603, "Inserting section %{public}ld", (uint8_t *)v610, 0xCu);
          swift_slowDealloc();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        uint64_t v295 = v975;
        ((void (*)(void, uint64_t))v960)(v945, v975);
        Swift::Int v539 = v601;
      }
      IndexSet.insert(_:)(v539);
      uint64_t v294 = v956;
      v540 = (uint8_t **)v901;
LABEL_194:
      sub_100AB6CE4();
      v541 = *v540;
      uint64_t v538 = v918;
      dispatch thunk of Collection.endIndex.getter();
    }
    while (v541 != v980);
  }
  sub_100AB6DDC((uint64_t)v314);
  uint64_t v317 = swift_allocObject();
  uint64_t v318 = sub_100A87130(0);
  unint64_t v319 = sub_100A877F8(v318);
  swift_bridgeObjectRelease();
  v862 = (void (**)(uint64_t, char *, uint64_t))v317;
  *(void *)(v317 + 16) = v319;
  v903 = (char *)(v317 + 16);
  uint64_t v320 = *(void *)(v983[0] + 64);
  v863 = (unsigned int (**)(char *, uint64_t, uint64_t))(v983[0] + 64);
  uint64_t v321 = 1 << *(unsigned char *)(v983[0] + 32);
  uint64_t v322 = -1;
  if (v321 < 64) {
    uint64_t v322 = ~(-1 << v321);
  }
  unint64_t v323 = v322 & v320;
  v324 = TupleTypeMetadata2;
  *(void *)&v870 = TupleTypeMetadata2 - 8;
  v957 = (char *)(v909 + 16);
  v878 += 4;
  v869 = (void (**)(char *, char *, uint64_t))(v909 + 32);
  v881 = v940 + 4;
  v868 = (void (**)(uint64_t, char *, uint64_t))(v879 + 4);
  v946 = (void (**)(char *))(v880 + 2);
  v953 = v909 + 8;
  v945 = (void (**)(uint8_t **__return_ptr, uint64_t))(v880 + 4);
  v950 = v951 + 1;
  v944 = (void (**)(uint8_t **__return_ptr, uint64_t))(v884 + 8);
  v959 = (void (**)(uint64_t, uint64_t, uint64_t))(v947 + 16);
  v926 = (void *)(v947 + 32);
  v927 = (void (**)(char *, uint64_t))(v947 + 8);
  ++v879;
  v880 = (void (**)(char *, uint64_t))(v889 + 8);
  v864 = (unint64_t)(v321 + 63) >> 6;
  v861 = v864 - 1;
  v867 = v983[0];
  swift_bridgeObjectRetain();
  uint64_t v325 = 0;
  v866 = (char *)&type metadata for Any + 8;
  v910 = xmmword_100E251F0;
  uint64_t v326 = v968;
  while (2)
  {
    v327 = v908;
    if (v323)
    {
      unint64_t v328 = __clz(__rbit64(v323));
      uint64_t v329 = (v323 - 1) & v323;
      v882 = v325;
      unint64_t v330 = v328 | (v325 << 6);
      goto LABEL_96;
    }
    int64_t v333 = v325 + 1;
    if (__OFADD__(v325, 1)) {
      goto LABEL_324;
    }
    if (v333 >= v864)
    {
      v882 = v325;
      goto LABEL_102;
    }
    unint64_t v334 = (unint64_t)v863[v333];
    if (!v334)
    {
      uint64_t v530 = v325 + 2;
      if (v325 + 2 >= v864)
      {
        v884 = 0;
        uint64_t v332 = 1;
LABEL_178:
        v882 = v333;
        goto LABEL_103;
      }
      unint64_t v334 = (unint64_t)v863[v530];
      if (v334)
      {
        int64_t v333 = v325 + 2;
        goto LABEL_100;
      }
      int64_t v531 = v325 + 3;
      if (v531 < v864)
      {
        unint64_t v334 = (unint64_t)v863[v531];
        if (v334)
        {
          int64_t v333 = v531;
          goto LABEL_100;
        }
        while (1)
        {
          int64_t v333 = v531 + 1;
          if (__OFADD__(v531, 1)) {
            goto LABEL_330;
          }
          if (v333 >= v864) {
            break;
          }
          unint64_t v334 = (unint64_t)v863[v333];
          ++v531;
          if (v334) {
            goto LABEL_100;
          }
        }
        v884 = 0;
        uint64_t v332 = 1;
        int64_t v333 = v861;
        goto LABEL_178;
      }
      v882 = v530;
LABEL_102:
      v884 = 0;
      uint64_t v332 = 1;
      goto LABEL_103;
    }
LABEL_100:
    uint64_t v329 = (v334 - 1) & v334;
    unint64_t v330 = __clz(__rbit64(v334)) + (v333 << 6);
    v882 = v333;
LABEL_96:
    v884 = v329;
    uint64_t v331 = *(void *)(v867 + 56);
    *(void *)v908 = *(void *)(*(void *)(v867 + 48) + 8 * v330);
    (*(void (**)(char *, unint64_t, uint64_t))(v909 + 16))(&v327[*((int *)v324 + 12)], v331 + *(void *)(v909 + 72) * v330, v973);
    uint64_t v332 = 0;
LABEL_103:
    uint64_t v335 = *((void *)v324 - 1);
    (*(void (**)(char *, uint64_t, uint64_t, char *))(v335 + 56))(v327, v332, 1, v324);
    v336 = v905;
    (*v878)((char *)v905, v327, v906);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, char *))(v335 + 48))(v336, 1, v324) == 1)
    {
      swift_release();
      v615 = 0;
      v922 = (uint64_t)&v940[5];
      v616 = (char *)v940[4].isa;
      v617 = (char **)(v877 + 8);
      v923 = (char *)(v889 + 16);
      v924 = (char *)(v889 + 32);
      uint64_t v618 = v857 & ~(v857 >> 63);
      v921 = xmmword_100E524F0;
      TupleTypeMetadata2 = (char *)&type metadata for Any + 8;
      uint64_t v619 = v937;
      v920 = (char **)(v877 + 8);
      v913 = v616;
      v912 = v618;
      while (1)
      {
        if (v615 == (char *)v618) {
          goto LABEL_326;
        }
        uint64_t v621 = v958;
        Array.subscript.getter();
        uint64_t v622 = ((uint64_t (*)(uint64_t, NSObject *))v616)(v621, v940);
        unint64_t v624 = v988;
        if (*(void *)(v988 + 16))
        {
          uint64_t v625 = sub_100071DE8(v622, v623);
          if (v626) {
            break;
          }
        }
        swift_bridgeObjectRelease();
        (*v880)(v898, v958);
        uint64_t v620 = v938;
LABEL_231:
        if (++v615 == (char *)v857)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          sub_10006ADFC(v294);
          sub_10006ADFC(v620);
          sub_10006ADFC(v859);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v619 + 8))(v892, v918);
          goto LABEL_226;
        }
      }
      uint64_t v627 = *(void *)(*(void *)(v624 + 56) + 8 * v625);
      swift_bridgeObjectRelease();
      v628 = v940;
      v629 = (void (*)(uint64_t, NSObject *))v940[5].isa;
      uint64_t v630 = v958;
      v629(v958, v940);
      v976 = (uint64_t *)v627;
      Array.subscript.getter();
      v631 = v893;
      v629(v630, v628);
      uint64_t v632 = v899;
      uint64_t v633 = dispatch thunk of Collection.count.getter();
      v634 = *v617;
      ((void (*)(char *, uint64_t))*v617)(v631, v632);
      uint64_t v635 = dispatch thunk of Collection.count.getter();
      v968 = v633;
      uint64_t v636 = v635 - v633;
      if (__OFSUB__(v635, v633)) {
        goto LABEL_327;
      }
      v637 = v898;
      uint64_t v638 = v975;
      if (v636 < 0)
      {
        BOOL v639 = __OFSUB__(0, v636);
        uint64_t v636 = v633 - v635;
        if (v639) {
          goto LABEL_331;
        }
      }
      v930 = v635;
      v640 = v903;
      swift_beginAccess();
      uint64_t v641 = *(void *)v640;
      if (*(void *)(v641 + 16) && (unint64_t v642 = sub_100A9A394((uint64_t)v976), (v643 & 1) != 0)) {
        uint64_t v644 = *(void *)(*(void *)(v641 + 56) + 8 * v642);
      }
      else {
        uint64_t v644 = 0;
      }
      v928 = (void (*)(char *, uint64_t))v634;
      v977 = v296;
      swift_endAccess();
      v973 = v636 + v644;
      v974 = v636;
      if (__OFADD__(v636, v644)) {
        goto LABEL_328;
      }
      v967 = dispatch thunk of Collection.count.getter();
      v963(v887, v962, v638);
      uint64_t WitnessTable = (void *)swift_allocObject();
      v931 = v615;
      WitnessTable[2] = v615;
      uint64_t v645 = v889;
      v646 = *(void (**)(char *, char *, uint64_t))(v889 + 16);
      v647 = v874;
      uint64_t v648 = v958;
      v646(v874, v637, v958);
      uint64_t v649 = *(unsigned __int8 *)(v645 + 80);
      uint64_t v650 = (v649 + 32) & ~v649;
      v651 = (char *)(v650 + v872);
      v652 = (v649 | 7);
      uint64_t v653 = swift_allocObject();
      v970 = (char *)v653;
      v654 = v940;
      *(void *)(v653 + 16) = v648;
      *(void *)(v653 + 24) = v654;
      v655 = *(void (**)(uint64_t, char *, uint64_t))(v645 + 32);
      v655(v653 + v650, v647, v648);
      v972 = swift_allocObject();
      *(void *)(v972 + 16) = v976;
      v917 = (char *)v646;
      v646(v647, v885, v648);
      v916 = v651;
      v915 = v652;
      uint64_t v656 = swift_allocObject();
      *(void *)(v656 + 16) = v648;
      *(void *)(v656 + 24) = v654;
      v919 = (char *)v650;
      v914 = (uint64_t)v655;
      v655(v656 + v650, v647, v648);
      uint64_t v657 = swift_allocObject();
      *(void *)(v657 + 16) = v974;
      uint64_t v658 = swift_allocObject();
      *(void *)(v658 + 16) = v973;
      uint64_t v659 = swift_allocObject();
      uint64_t v660 = (uint64_t)v976;
      *(void *)(v659 + 16) = v862;
      *(void *)(v659 + 24) = v660;
      swift_retain();
      v941 = (os_log_t)Logger.logObject.getter();
      LODWORD(v934) = static os_log_type_t.default.getter();
      v946 = (void (**)(char *))swift_allocObject();
      *((unsigned char *)v946 + 16) = 2;
      uint64_t v661 = swift_allocObject();
      *(unsigned char *)(v661 + 16) = 8;
      uint64_t v662 = swift_allocObject();
      v663 = WitnessTable;
      *(void *)(v662 + 16) = j___s9MusicCore7LibraryO4MenuV7RequestV16filteringOptionsSo07MPMediac9FilteringG0Vvg;
      *(void *)(v662 + 24) = v663;
      uint64_t v664 = swift_allocObject();
      *(void *)(v664 + 16) = sub_100AB7604;
      *(void *)(v664 + 24) = v662;
      v942 = (char *)swift_allocObject();
      v942[16] = 34;
      v965 = swift_allocObject();
      *(unsigned char *)(v965 + 16) = 8;
      uint64_t v665 = swift_allocObject();
      v666 = v970;
      *(void *)(v665 + 16) = sub_100AB6E50;
      *(void *)(v665 + 24) = v666;
      uint64_t v667 = swift_allocObject();
      *(void *)(v667 + 16) = sub_100AB75F8;
      *(void *)(v667 + 24) = v665;
      v948 = (char *)swift_allocObject();
      v948[16] = 2;
      v951 = swift_allocObject();
      LOBYTE(v951[2].isa) = 8;
      uint64_t v668 = swift_allocObject();
      uint64_t v669 = v972;
      *(void *)(v668 + 16) = j___s9MusicCore7LibraryO4MenuV7RequestV16filteringOptionsSo07MPMediac9FilteringG0Vvg;
      *(void *)(v668 + 24) = v669;
      uint64_t v670 = swift_allocObject();
      v945 = (void (**)(uint8_t **__return_ptr, uint64_t))v670;
      *(void *)(v670 + 16) = sub_100AB7604;
      *(void *)(v670 + 24) = v668;
      v952 = (char *)swift_allocObject();
      v952[16] = 32;
      v953 = swift_allocObject();
      *(unsigned char *)(v953 + 16) = 8;
      uint64_t v671 = swift_allocObject();
      *(void *)(v671 + 16) = sub_100AB6E50;
      *(void *)(v671 + 24) = v656;
      v944 = (void (**)(uint8_t **__return_ptr, uint64_t))v664;
      uint64_t v672 = swift_allocObject();
      v933 = (char *)v672;
      *(void *)(v672 + 16) = sub_100AB75F8;
      *(void *)(v672 + 24) = v671;
      uint64_t WitnessTable = (void *)swift_allocObject();
      *((unsigned char *)WitnessTable + 16) = 2;
      v954 = (char *)swift_allocObject();
      v954[16] = 8;
      uint64_t v673 = swift_allocObject();
      *(void *)(v673 + 16) = j___s9MusicCore7LibraryO4MenuV7RequestV16filteringOptionsSo07MPMediac9FilteringG0Vvg;
      *(void *)(v673 + 24) = v657;
      v674 = swift_allocObject();
      v960 = (void (**)(uint8_t **__return_ptr, uint64_t))v674;
      v674[2].Class isa = (Class)sub_100AB7604;
      v674[3].Class isa = (Class)v673;
      v966 = (char *)swift_allocObject();
      v966[16] = 2;
      v957 = (char *)swift_allocObject();
      v957[16] = 8;
      uint64_t v675 = swift_allocObject();
      *(void *)(v675 + 16) = j___s9MusicCore7LibraryO4MenuV7RequestV16filteringOptionsSo07MPMediac9FilteringG0Vvg;
      *(void *)(v675 + 24) = v658;
      uint64_t v676 = swift_allocObject();
      v970 = (char *)v676;
      *(void *)(v676 + 16) = sub_100AB7604;
      *(void *)(v676 + 24) = v675;
      v972 = swift_allocObject();
      *(unsigned char *)(v972 + 16) = 34;
      v974 = swift_allocObject();
      *(unsigned char *)(v974 + 16) = 8;
      v932 = (char *)v667;
      uint64_t v677 = swift_allocObject();
      *(void *)(v677 + 16) = sub_100AB6EC0;
      *(void *)(v677 + 24) = v659;
      uint64_t v678 = swift_allocObject();
      *(void *)(v678 + 16) = sub_100AB75F8;
      *(void *)(v678 + 24) = v677;
      uint64_t v679 = v678;
      uint64_t v680 = swift_allocObject();
      *(_OWORD *)(v680 + 16) = v921;
      *(void *)(v680 + 32) = sub_100AB7784;
      *(void *)(v680 + 40) = v946;
      *(void *)(v680 + 48) = sub_100AB7784;
      *(void *)(v680 + 56) = v661;
      *(void *)(v680 + 64) = sub_100AB6CE0;
      *(void *)(v680 + 72) = v664;
      *(void *)(v680 + 80) = sub_100AB7784;
      *(void *)(v680 + 88) = v942;
      *(void *)(v680 + 96) = sub_100AB7784;
      *(void *)(v680 + 104) = v965;
      *(void *)(v680 + 112) = sub_100AB6A34;
      *(void *)(v680 + 120) = v667;
      *(void *)(v680 + 128) = sub_100AB7784;
      *(void *)(v680 + 136) = v948;
      *(void *)(v680 + 144) = sub_100AB7784;
      *(void *)(v680 + 152) = v951;
      *(void *)(v680 + 160) = sub_100AB6CE0;
      *(void *)(v680 + 168) = v945;
      *(void *)(v680 + 176) = sub_100AB7784;
      *(void *)(v680 + 184) = v952;
      *(void *)(v680 + 192) = sub_100AB7784;
      *(void *)(v680 + 200) = v953;
      *(void *)(v680 + 208) = sub_100AB6A34;
      *(void *)(v680 + 216) = v933;
      *(void *)(v680 + 224) = sub_100AB7784;
      *(void *)(v680 + 232) = WitnessTable;
      *(void *)(v680 + 240) = sub_100AB7784;
      *(void *)(v680 + 248) = v954;
      *(void *)(v680 + 256) = sub_100AB6CE0;
      *(void *)(v680 + 264) = v960;
      *(void *)(v680 + 272) = sub_100AB7784;
      *(void *)(v680 + 280) = v966;
      *(void *)(v680 + 288) = sub_100AB7784;
      *(void *)(v680 + 296) = v957;
      *(void *)(v680 + 304) = sub_100AB6CE0;
      *(void *)(v680 + 312) = v970;
      *(void *)(v680 + 320) = sub_100AB7784;
      *(void *)(v680 + 328) = v972;
      *(void *)(v680 + 336) = sub_100AB7784;
      *(void *)(v680 + 344) = v974;
      *(void *)(v680 + 352) = sub_100AB6A34;
      *(void *)(v680 + 360) = v679;
      swift_retain();
      v929 = (char *)v661;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      os_log_t v681 = v941;
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v681, (os_log_type_t)v934))
      {
        v682 = v929;
        v683 = v944;
        v684 = v942;
        v685 = v965;
        v686 = v945;
        v687 = v960;
        v688 = swift_slowAlloc();
        v908 = (char *)swift_slowAlloc();
        v978[4] = v908;
        *(_WORD *)v688 = 1794;
        *(unsigned char *)(v688 + 2) = *((unsigned char *)v946 + 16);
        v296 = v977;
        if (v977) {
          goto LABEL_333;
        }
        v909 = v679;
        swift_release();
        *(unsigned char *)(v688 + 3) = v682[16];
        v689 = v687;
        v690 = swift_release();
        v683[2](&v980, v690);
        *(void *)(v688 + 4) = v980;
        v691 = v686;
        swift_release();
        *(unsigned char *)(v688 + 12) = v684[16];
        swift_release();
        *(unsigned char *)(v688 + 13) = *(unsigned char *)(v685 + 16);
        v979 = (unsigned char *)(v688 + 14);
        v692 = v689;
        swift_release();
        sub_100AB6A34(&v979);
        v693 = (uint8_t *)v688;
        swift_release();
        v694 = v979;
        *v979 = v948[16];
        swift_release();
        v694[1] = v951[2].isa;
        v695 = (uint64_t)v894;
        v696 = swift_release();
        v691[2](&v980, v696);
        *(void *)(v694 + 2) = v980;
        swift_release();
        v694[10] = v952[16];
        swift_release();
        v694[11] = *(unsigned char *)(v953 + 16);
        v979 = v694 + 12;
        swift_release();
        sub_100AB6A34(&v979);
        swift_release();
        v697 = v979;
        *v979 = *((unsigned char *)WitnessTable + 16);
        swift_release();
        v697[1] = v954[16];
        v979 = v697 + 2;
        v698 = v895;
        v699 = v973;
        v700 = swift_release();
        v692[2](&v980, v700);
        *(void *)(v697 + 2) = v980;
        swift_release();
        v697[10] = v966[16];
        swift_release();
        v697[11] = v957[16];
        v701 = v971;
        v702 = v970;
        v703 = swift_release();
        (*((void (**)(uint8_t **__return_ptr, uint64_t))v702 + 2))(&v980, v703);
        *(void *)(v697 + 12) = v980;
        swift_release();
        v697[20] = *(unsigned char *)(v972 + 16);
        swift_release();
        v697[21] = *(unsigned char *)(v974 + 16);
        v979 = v697 + 22;
        v704 = v891;
        swift_release();
        sub_100AB6A34(&v979);
        v705 = v887;
        swift_release();
        v706 = v941;
        _os_log_impl((void *)&_mh_execute_header, v941, (os_log_type_t)v934, "Section %{public}ld(%{public}s) mapped to section %{public}ld(%s): difference=%{public}ld adjustedDifference=%{public}ld diffAdjustmentMap=%{public}s", v693, 0x48u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t WitnessTable = v950->isa;
        ((void (*)(char *, uint64_t))WitnessTable)(v705, v975);
        v707 = v896;
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        uint64_t WitnessTable = v950->isa;
        ((void (*)(char *, uint64_t))WitnessTable)(v887, v975);
        v701 = v971;
        v698 = v895;
        v296 = v977;
        v695 = (uint64_t)v894;
        v707 = v896;
        v704 = v891;
        v699 = v973;
      }
      v708 = swift_allocObject();
      v709 = sub_100A8709C(0);
      v957 = (char *)v708;
      *(void *)(v708 + 16) = v709;
      v710 = (uint64_t *)(v708 + 16);
      v711 = sub_100A9DA00(v968, v930);
      v712 = v711 - 1;
      v713 = (uint64_t)v900;
      if (__OFSUB__(v711, 1)) {
        goto LABEL_329;
      }
      swift_beginAccess();
      v974 = (uint64_t)v710;
      if (sub_100A9DA0C(*v710) < v699)
      {
        v714 = (uint64_t)v931;
        v970 = &v931[v939];
        v715 = __OFADD__(v931, v939);
        LODWORD(v972) = v715;
        if (v967 < v968) {
          v714 = (uint64_t)v976;
        }
        v960 = (void (**)(uint8_t **__return_ptr, uint64_t))(v714 + v939);
        v716 = __OFADD__(v714, v939);
        LODWORD(v965) = v716;
        do
        {
          v976 = (uint64_t *)v712;
          if (v712 < 0)
          {
            v977 = v296;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v809 = v975;
            v963(v698, v962, v975);
            v810 = v874;
            v811 = v898;
            v812 = v958;
            ((void (*)(char *, char *, uint64_t))v917)(v874, v898, v958);
            v813 = swift_allocObject();
            v814 = v940;
            *(void *)(v813 + 16) = v812;
            *(void *)(v813 + 24) = v814;
            ((void (*)(char *, char *, uint64_t))v914)(&v919[v813], v810, v812);
            v815 = Logger.logObject.getter();
            v816 = static os_log_type_t.fault.getter();
            v817 = swift_allocObject();
            *(unsigned char *)(v817 + 16) = 34;
            v818 = swift_allocObject();
            *(unsigned char *)(v818 + 16) = 8;
            v819 = swift_allocObject();
            *(void *)(v819 + 16) = sub_100AB6E50;
            *(void *)(v819 + 24) = v813;
            v820 = swift_allocObject();
            *(void *)(v820 + 16) = sub_100AB75F8;
            *(void *)(v820 + 24) = v819;
            v821 = swift_allocObject();
            *(_OWORD *)(v821 + 16) = v910;
            *(void *)(v821 + 32) = sub_100AB7784;
            *(void *)(v821 + 40) = v817;
            *(void *)(v821 + 48) = sub_100AB7784;
            *(void *)(v821 + 56) = v818;
            *(void *)(v821 + 64) = sub_100AB6A34;
            *(void *)(v821 + 72) = v820;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (!os_log_type_enabled(v815, v816))
            {
              swift_release();
              sub_10006ADFC(v956);
              sub_10006ADFC(v938);
              sub_10006ADFC(v859);

              swift_release();
              swift_release();
              swift_release();
              ((void (*)(char *, uint64_t))WitnessTable)(v698, v809);
              v834 = *v880;
              (*v880)(v885, v812);
              v928(v886, v899);
              v834(v811, v812);
              goto LABEL_297;
            }
            v822 = (uint8_t *)swift_slowAlloc();
            v979 = (unsigned char *)swift_slowAlloc();
            *(_WORD *)v822 = 258;
            v822[2] = *(unsigned char *)(v817 + 16);
            if (!v977)
            {
              swift_release();
              v822[3] = *(unsigned char *)(v818 + 16);
              v980 = v822 + 4;
              swift_release();
              sub_100AB6A34(&v980);
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v815, v816, "We ran out of items while trying to build index paths for section with identifier \"%{public}s\"", v822, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              swift_release();
              sub_10006ADFC(v956);
              sub_10006ADFC(v938);
              sub_10006ADFC(v859);

              ((void (*)(char *, uint64_t))WitnessTable)(v895, v975);
              v823 = *v880;
              v824 = v958;
              (*v880)(v885, v958);
              v928(v886, v899);
              v823(v898, v824);
LABEL_297:
              (*(void (**)(char *, uint64_t))(v937 + 8))(v892, v918);
              if (v976 != (uint64_t *)0x8000000000000000)
              {
                swift_release();
                goto LABEL_226;
              }
LABEL_332:
              __break(1u);
            }
LABEL_333:
            swift_errorRelease();
            __break(1u);
LABEL_334:
            swift_errorRelease();
            __break(1u);
            swift_errorRelease();
            __break(1u);
LABEL_335:
            swift_errorRelease();
            __break(1u);
LABEL_336:
            uint64_t result = swift_errorRelease();
            __break(1u);
            return result;
          }
          if (v972) {
            goto LABEL_320;
          }
          IndexPath.init(item:section:)();
          v719 = (uint64_t)v985;
          swift_bridgeObjectRetain();
          v720 = sub_100A99FEC(v713, v719);
          swift_bridgeObjectRelease();
          if (v720)
          {
            v977 = v296;
            v721 = v975;
            v963(v704, v962, v975);
            v722 = v713;
            v723 = v947;
            v724 = v949;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v947 + 16))(v949, v722, v701);
            v725 = (*(unsigned __int8 *)(v723 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v723 + 80);
            v726 = swift_allocObject();
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v723 + 32))(v726 + v725, v724, v701);
            v727 = swift_allocObject();
            *(void *)(v727 + 16) = sub_100AB7038;
            *(void *)(v727 + 24) = v726;
            v728 = Logger.logObject.getter();
            v729 = static os_log_type_t.default.getter();
            v730 = swift_allocObject();
            *(unsigned char *)(v730 + 16) = 34;
            v731 = v701;
            v732 = swift_allocObject();
            *(unsigned char *)(v732 + 16) = 8;
            v733 = swift_allocObject();
            *(void *)(v733 + 16) = sub_100AB7600;
            *(void *)(v733 + 24) = v727;
            v734 = v704;
            v735 = swift_allocObject();
            *(void *)(v735 + 16) = sub_100AB75F8;
            *(void *)(v735 + 24) = v733;
            v736 = swift_allocObject();
            *(_OWORD *)(v736 + 16) = v910;
            *(void *)(v736 + 32) = sub_100AB7784;
            *(void *)(v736 + 40) = v730;
            *(void *)(v736 + 48) = sub_100AB7784;
            *(void *)(v736 + 56) = v732;
            *(void *)(v736 + 64) = sub_100AB6A34;
            *(void *)(v736 + 72) = v735;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            LODWORD(v966) = v729;
            if (!os_log_type_enabled(v728, (os_log_type_t)v729))
            {

              swift_release();
              swift_release();
              swift_release();
              ((void (*)(char *, uint64_t))WitnessTable)(v734, v721);
              v713 = (uint64_t)v900;
              (*v927)(v900, v731);
              v701 = v731;
              v698 = v895;
              v296 = v977;
              v695 = (uint64_t)v894;
              v707 = v896;
              v704 = v734;
LABEL_279:
              v699 = v973;
              goto LABEL_259;
            }
            v737 = swift_slowAlloc();
            v980 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v737 = 258;
            *(unsigned char *)(v737 + 2) = *(unsigned char *)(v730 + 16);
            v296 = v977;
            if (v977) {
              goto LABEL_333;
            }
            swift_release();
            *(unsigned char *)(v737 + 3) = *(unsigned char *)(v732 + 16);
            v695 = (uint64_t)v894;
            v707 = v896;
            v699 = v973;
            v738 = swift_release();
            v739 = (*(uint64_t (**)(uint64_t))(v735 + 16))(v738);
            *(void *)(v737 + 4) = sub_100075F3C(v739, v740, (uint64_t *)&v980);
            swift_bridgeObjectRelease();
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v728, (os_log_type_t)v966, "%{public}s contained in the visible index paths set, skipping", (uint8_t *)v737, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v704 = v891;
            ((void (*)(char *, uint64_t))WitnessTable)(v891, v975);
            v713 = (uint64_t)v900;
            v701 = v971;
            (*v927)(v900, v971);
            v698 = v895;
          }
          else
          {
            if (v965) {
              goto LABEL_325;
            }
            IndexPath.init(item:section:)();
            if (v967 >= v968)
            {
              v763 = *v925;
              v764 = v925[1];
              swift_retain();
              swift_retain();
              v765 = sub_100AABEE0(v695, v763, v764);
              swift_release();
              swift_release();
              if (v765)
              {
                v977 = v296;
                v766 = v876;
                v767 = v975;
                v963(v876, v962, v975);
                v768 = v947;
                v769 = v949;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v947 + 16))(v949, v695, v701);
                v770 = (*(unsigned __int8 *)(v768 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v768 + 80);
                v771 = swift_allocObject();
                v772 = v771 + v770;
                v751 = v766;
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v768 + 32))(v772, v769, v701);
                v773 = swift_allocObject();
                *(void *)(v773 + 16) = sub_100AB7038;
                *(void *)(v773 + 24) = v771;
                v753 = Logger.logObject.getter();
                LODWORD(v769) = static os_log_type_t.default.getter();
                v774 = swift_allocObject();
                *(unsigned char *)(v774 + 16) = 34;
                v775 = swift_allocObject();
                *(unsigned char *)(v775 + 16) = 8;
                v756 = v767;
                v776 = swift_allocObject();
                *(void *)(v776 + 16) = sub_100AB703C;
                *(void *)(v776 + 24) = v773;
                v758 = v701;
                v777 = swift_allocObject();
                *(void *)(v777 + 16) = sub_100AB75F8;
                *(void *)(v777 + 24) = v776;
                v778 = swift_allocObject();
                *(_OWORD *)(v778 + 16) = v910;
                *(void *)(v778 + 32) = sub_100AB7784;
                *(void *)(v778 + 40) = v774;
                *(void *)(v778 + 48) = sub_100AB7784;
                *(void *)(v778 + 56) = v775;
                *(void *)(v778 + 64) = sub_100AB6A34;
                *(void *)(v778 + 72) = v777;
                swift_retain();
                swift_retain();
                swift_retain();
                swift_bridgeObjectRelease();
                LODWORD(v966) = v769;
                if (!os_log_type_enabled(v753, (os_log_type_t)v769))
                {
LABEL_278:

                  swift_release();
                  swift_release();
                  swift_release();
                  ((void (*)(char *, uint64_t))WitnessTable)(v751, v756);
                  v781 = *v927;
                  v695 = (uint64_t)v894;
                  (*v927)(v894, v758);
                  v713 = (uint64_t)v900;
                  v781(v900, v758);
                  v701 = v758;
                  v698 = v895;
                  v296 = v977;
                  v707 = v896;
                  v704 = v891;
                  goto LABEL_279;
                }
                v779 = (uint8_t *)swift_slowAlloc();
                v979 = (unsigned char *)swift_slowAlloc();
                *(_WORD *)v779 = 258;
                v779[2] = *(unsigned char *)(v774 + 16);
                v296 = v977;
                v707 = v896;
                if (v977) {
                  goto LABEL_333;
                }
                swift_release();
                v779[3] = *(unsigned char *)(v775 + 16);
                v980 = v779 + 4;
                v695 = (uint64_t)v894;
                swift_release();
                sub_100AB6A34(&v980);
                v699 = v973;
                swift_release();
                _os_log_impl((void *)&_mh_execute_header, v753, (os_log_type_t)v966, "%{public}s contained in the deleted index paths set, skipping", v779, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                p_TupleTypeMetadata2 = &v908;
                goto LABEL_277;
              }
            }
            else
            {
              v741 = *v911;
              v742 = v911[1];
              swift_retain();
              swift_retain();
              v743 = sub_100AABEE0(v695, v741, v742);
              swift_release();
              swift_release();
              if (v743)
              {
                v977 = v296;
                v744 = v875;
                v745 = v975;
                v963(v875, v962, v975);
                v746 = v947;
                v747 = v949;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v947 + 16))(v949, v695, v701);
                v748 = (*(unsigned __int8 *)(v746 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v746 + 80);
                v749 = swift_allocObject();
                v750 = v749 + v748;
                v751 = v744;
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v746 + 32))(v750, v747, v701);
                v752 = swift_allocObject();
                *(void *)(v752 + 16) = sub_100AB7038;
                *(void *)(v752 + 24) = v749;
                v753 = Logger.logObject.getter();
                LODWORD(v747) = static os_log_type_t.default.getter();
                v754 = swift_allocObject();
                *(unsigned char *)(v754 + 16) = 34;
                v755 = swift_allocObject();
                *(unsigned char *)(v755 + 16) = 8;
                v756 = v745;
                v757 = swift_allocObject();
                *(void *)(v757 + 16) = sub_100AB7600;
                *(void *)(v757 + 24) = v752;
                v758 = v701;
                v759 = swift_allocObject();
                *(void *)(v759 + 16) = sub_100AB75F8;
                *(void *)(v759 + 24) = v757;
                v760 = swift_allocObject();
                *(_OWORD *)(v760 + 16) = v910;
                *(void *)(v760 + 32) = sub_100AB7784;
                *(void *)(v760 + 40) = v754;
                *(void *)(v760 + 48) = sub_100AB7784;
                *(void *)(v760 + 56) = v755;
                *(void *)(v760 + 64) = sub_100AB6A34;
                *(void *)(v760 + 72) = v759;
                swift_retain();
                swift_retain();
                swift_retain();
                swift_bridgeObjectRelease();
                LODWORD(v966) = v747;
                if (!os_log_type_enabled(v753, (os_log_type_t)v747)) {
                  goto LABEL_278;
                }
                v761 = (uint8_t *)swift_slowAlloc();
                v979 = (unsigned char *)swift_slowAlloc();
                *(_WORD *)v761 = 258;
                v761[2] = *(unsigned char *)(v754 + 16);
                v296 = v977;
                v707 = v896;
                if (v977) {
                  goto LABEL_333;
                }
                swift_release();
                v761[3] = *(unsigned char *)(v755 + 16);
                v980 = v761 + 4;
                v695 = (uint64_t)v894;
                swift_release();
                sub_100AB6A34(&v980);
                v699 = v973;
                swift_release();
                _os_log_impl((void *)&_mh_execute_header, v753, (os_log_type_t)v966, "%{public}s contained in the inserted index paths set, skipping", v761, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                p_TupleTypeMetadata2 = &TupleTypeMetadata2;
LABEL_277:
                ((void (*)(void, uint64_t))WitnessTable)(*(p_TupleTypeMetadata2 - 32), v975);
                v780 = *v927;
                v701 = v971;
                (*v927)((char *)v695, v971);
                v713 = (uint64_t)v900;
                v780(v900, v701);
                v698 = v895;
                v704 = v891;
                goto LABEL_259;
              }
            }
            v717 = v949;
            (*v959)(v949, v695, v701);
            sub_100AA0E8C(v717);
            v718 = *v927;
            (*v927)((char *)v695, v701);
            v713 = (uint64_t)v900;
            v718(v900, v701);
          }
LABEL_259:
          v712 = (uint64_t)v976 - 1;
        }
        while (sub_100A9DA0C(*(void *)v974) < v699);
      }
      v782 = swift_bridgeObjectRetain();
      v783 = v957;
      if (v967 < v968)
      {
        sub_100AAC0A4(v782);
        swift_bridgeObjectRelease();
        v798 = v871;
        v793 = v975;
        v963(v871, v962, v975);
        v784 = swift_allocObject();
        *(void *)(v784 + 16) = sub_100AB6FA8;
        *(void *)(v784 + 24) = v783;
        swift_retain();
        v795 = Logger.logObject.getter();
        v785 = static os_log_type_t.default.getter();
        v786 = swift_allocObject();
        *(unsigned char *)(v786 + 16) = 34;
        v787 = swift_allocObject();
        *(unsigned char *)(v787 + 16) = 8;
        v788 = swift_allocObject();
        *(void *)(v788 + 16) = sub_100AB75FC;
        *(void *)(v788 + 24) = v784;
        v789 = swift_allocObject();
        *(void *)(v789 + 16) = sub_100AB75F8;
        *(void *)(v789 + 24) = v788;
        v790 = swift_allocObject();
        *(_OWORD *)(v790 + 16) = v910;
        *(void *)(v790 + 32) = sub_100AB7784;
        *(void *)(v790 + 40) = v786;
        *(void *)(v790 + 48) = sub_100AB7784;
        *(void *)(v790 + 56) = v787;
        *(void *)(v790 + 64) = sub_100AB6A34;
        *(void *)(v790 + 72) = v789;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v795, v785))
        {
          v791 = (uint8_t *)swift_slowAlloc();
          v979 = (unsigned char *)swift_slowAlloc();
          *(_WORD *)v791 = 258;
          v791[2] = *(unsigned char *)(v786 + 16);
          if (v296) {
            goto LABEL_333;
          }
          swift_release();
          v791[3] = *(unsigned char *)(v787 + 16);
          v980 = v791 + 4;
          v615 = v931;
          swift_release();
          sub_100AB6A34(&v980);
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v795, v785, "Non visible adjustment: inserting %{public}s", v791, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v792 = &v903;
          goto LABEL_288;
        }
      }
      else
      {
        sub_100AAC0A4(v782);
        swift_bridgeObjectRelease();
        v793 = v975;
        v963(v707, v962, v975);
        v794 = swift_allocObject();
        *(void *)(v794 + 16) = sub_100AB6FA8;
        *(void *)(v794 + 24) = v783;
        swift_retain();
        v795 = Logger.logObject.getter();
        v796 = static os_log_type_t.default.getter();
        v797 = swift_allocObject();
        *(unsigned char *)(v797 + 16) = 34;
        v798 = v707;
        v799 = swift_allocObject();
        *(unsigned char *)(v799 + 16) = 8;
        v800 = swift_allocObject();
        *(void *)(v800 + 16) = sub_100AB75FC;
        *(void *)(v800 + 24) = v794;
        v801 = swift_allocObject();
        *(void *)(v801 + 16) = sub_100AB75F8;
        *(void *)(v801 + 24) = v800;
        v802 = swift_allocObject();
        *(_OWORD *)(v802 + 16) = v910;
        *(void *)(v802 + 32) = sub_100AB7784;
        *(void *)(v802 + 40) = v797;
        *(void *)(v802 + 48) = sub_100AB7784;
        *(void *)(v802 + 56) = v799;
        *(void *)(v802 + 64) = sub_100AB6A34;
        *(void *)(v802 + 72) = v801;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v795, v796))
        {
          v804 = (uint8_t *)swift_slowAlloc();
          v979 = (unsigned char *)swift_slowAlloc();
          *(_WORD *)v804 = 258;
          v804[2] = *(unsigned char *)(v797 + 16);
          if (v296) {
            goto LABEL_333;
          }
          swift_release();
          v804[3] = *(unsigned char *)(v799 + 16);
          v980 = v804 + 4;
          v615 = v931;
          swift_release();
          sub_100AB6A34(&v980);
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v795, v796, "Non visible adjustment: deleting %{public}s", v804, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v792 = (char **)&v926;
LABEL_288:
          ((void (*)(void, uint64_t))WitnessTable)(*(v792 - 32), v975);
          v805 = *v880;
          v806 = v958;
          (*v880)(v885, v958);
          v617 = v920;
          v928(v886, v899);
          v805(v898, v806);
          swift_release();
          uint64_t v620 = v938;
          uint64_t v294 = v956;
          uint64_t v619 = v937;
LABEL_290:
          v616 = v913;
          uint64_t v618 = v912;
          goto LABEL_231;
        }
      }

      swift_release();
      swift_release();
      swift_release();
      ((void (*)(char *, uint64_t))WitnessTable)(v798, v793);
      v807 = *v880;
      v808 = v958;
      (*v880)(v885, v958);
      v617 = v920;
      v928(v886, v899);
      v807(v898, v808);
      swift_release();
      uint64_t v620 = v938;
      uint64_t v294 = v956;
      uint64_t v619 = v937;
      v615 = v931;
      goto LABEL_290;
    }
    uint64_t v337 = *v336;
    uint64_t v338 = v973;
    (*v869)(v919, (char *)v336 + *((int *)v324 + 12), v973);
    v972 = v337;
    if (__OFSUB__(v337, v939)) {
      goto LABEL_318;
    }
    uint64_t v339 = v958;
    Array.subscript.getter();
    uint64_t v340 = ((uint64_t (*)(uint64_t))v940[4].isa)(v339);
    unint64_t v342 = v988;
    if (*(void *)(v988 + 16) && (uint64_t v343 = sub_100071DE8(v340, v341), (v344 & 1) != 0))
    {
      uint64_t v345 = *(void *)(*(void *)(v342 + 56) + 8 * v343);
      swift_bridgeObjectRelease();
      v912 = v345;
      sub_100AA0F74(0, 0, v345);
      LODWORD(v951) = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      LODWORD(v951) = 0;
      v912 = 0;
    }
    v346 = v904;
    v952 = *(char **)v957;
    ((void (*)(char *, char *, uint64_t))v952)(v904, v919, v338);
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v347 = v914;
    *(void *)&v346[*(int *)(v914 + 36)] = v980;
    (*v868)(v326, v346, v347);
    v348 = (char *)(v326 + *(int *)(v347 + 36));
    dispatch thunk of Collection.endIndex.getter();
    if (static CollectionDifference.Index.== infix(_:_:)())
    {
LABEL_93:
      (*v879)(v326, v914);
      (*v880)(v913, v958);
      (*(void (**)(char *, uint64_t))v953)(v919, v338);
      uint64_t v294 = v956;
      v324 = TupleTypeMetadata2;
      unint64_t v323 = v884;
      uint64_t v325 = v882;
      continue;
    }
    break;
  }
  v901 = (char *)(v912 + v939);
  BOOL v349 = __OFADD__(v912, v939);
  LODWORD(v902) = v349;
  v948 = v348;
  while (2)
  {
    v351 = v296;
    v352 = (void (*)(uint8_t **, void))dispatch thunk of Collection.subscript.read();
    v353 = v966;
    uint64_t v354 = v967;
    (*v946)(v966);
    v352(&v980, 0);
    uint64_t v355 = v965;
    ((void (*)(uint64_t, uint64_t, uint64_t))v952)(v965, v326, v338);
    dispatch thunk of Collection.formIndex(after:)();
    v356 = *(void (**)(char *, uint64_t))v953;
    (*(void (**)(uint64_t, uint64_t))v953)(v355, v338);
    v357 = v976;
    ((void (*)(uint64_t *, char *, uint64_t))*v945)(v976, v353, v354);
    LODWORD(v354) = swift_getEnumCaseMultiPayload();
    uint64_t v358 = *v357;
    sub_10006389C(&qword_1010C7428);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    v360 = (char *)v357 + *(int *)(TupleTypeMetadata3 + 64);
    uint64_t v361 = *(void *)v360;
    int v362 = v360[8];
    unint64_t v363 = v986;
    uint64_t v364 = *(void *)(v986 + 16);
    v977 = v351;
    if (v354 != 1)
    {
      if (v364)
      {
        unint64_t v367 = sub_100A9A394(v972);
        v368 = v954;
        if ((v369 & 1) != 0 && __OFADD__(v358, *(void *)(*(void *)(v363 + 56) + 8 * v367))) {
          goto LABEL_302;
        }
      }
      else
      {
        v368 = v954;
      }
      v974 = (uint64_t)v976 + *(int *)(TupleTypeMetadata3 + 48);
      if (v951)
      {
        if (v362)
        {
          v427 = sub_100AABA9C(&v980, v912);
          uint64_t v410 = v971;
          if (*(unsigned char *)(v426 + 8))
          {
            ((void (*)(uint8_t **, void))v427)(&v980, 0);
            uint64_t v402 = (uint64_t)v917;
            v428 = v916;
          }
          else
          {
            uint64_t v402 = (uint64_t)v917;
            v428 = v916;
            if (__OFADD__(*(void *)v426, 1)) {
              goto LABEL_319;
            }
            ++*(void *)v426;
            ((void (*)(uint8_t **, void))v427)(&v980, 0);
          }
          if (v902) {
            goto LABEL_312;
          }
          IndexPath.init(item:section:)();
          sub_100AB56F8(v402);
          uint64_t v406 = v975;
          v963(v428, v962, v975);
          uint64_t v500 = v947;
          uint64_t v501 = v949;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v947 + 16))(v949, v402, v410);
          unint64_t v502 = (*(unsigned __int8 *)(v500 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v500 + 80);
          v407 = v428;
          uint64_t v503 = swift_allocObject();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v500 + 32))(v503 + v502, v501, v410);
          uint64_t v504 = swift_allocObject();
          *(void *)(v504 + 16) = sub_100AB7038;
          *(void *)(v504 + 24) = v503;
          v414 = Logger.logObject.getter();
          os_log_type_t v505 = static os_log_type_t.default.getter();
          uint64_t v506 = swift_allocObject();
          *(unsigned char *)(v506 + 16) = 34;
          uint64_t v507 = swift_allocObject();
          *(unsigned char *)(v507 + 16) = 8;
          uint64_t v508 = swift_allocObject();
          *(void *)(v508 + 16) = sub_100AB7600;
          *(void *)(v508 + 24) = v504;
          uint64_t v509 = swift_allocObject();
          *(void *)(v509 + 16) = sub_100AB75F8;
          *(void *)(v509 + 24) = v508;
          uint64_t v510 = swift_allocObject();
          *(_OWORD *)(v510 + 16) = v910;
          *(void *)(v510 + 32) = sub_100AB7784;
          *(void *)(v510 + 40) = v506;
          *(void *)(v510 + 48) = sub_100AB7784;
          *(void *)(v510 + 56) = v507;
          *(void *)(v510 + 64) = sub_100AB6A34;
          *(void *)(v510 + 72) = v509;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (!os_log_type_enabled(v414, v505)) {
            goto LABEL_114;
          }
          uint64_t v511 = swift_slowAlloc();
          v980 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v511 = 258;
          *(unsigned char *)(v511 + 2) = *(unsigned char *)(v506 + 16);
          if (v977) {
            goto LABEL_334;
          }
          swift_release();
          *(unsigned char *)(v511 + 3) = *(unsigned char *)(v507 + 16);
          uint64_t v512 = swift_release();
          uint64_t v513 = (*(uint64_t (**)(uint64_t))(v509 + 16))(v512);
          *(void *)(v511 + 4) = sub_100075F3C(v513, v514, (uint64_t *)&v980);
          swift_bridgeObjectRelease();
          uint64_t v515 = v406;
          v296 = 0;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v414, v505, "Inserting item %{public}s", (uint8_t *)v511, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          ((void (*)(char *, uint64_t))v960)(v916, v515);
          (*v927)(v917, v971);
LABEL_166:
          uint64_t v338 = v973;
          uint64_t v326 = v968;
LABEL_115:
          v350 = v970;
LABEL_116:
          (*v944)((uint8_t **)v974, (uint64_t)v350);
          dispatch thunk of Collection.endIndex.getter();
          if (static CollectionDifference.Index.== infix(_:_:)()) {
            goto LABEL_93;
          }
          continue;
        }
        v466 = v924;
        IndexPath.init(item:section:)();
        v467 = v932;
        uint64_t v468 = v971;
        if (v902) {
          goto LABEL_311;
        }
        IndexPath.init(item:section:)();
        v963(v467, v962, v975);
        uint64_t v469 = v947;
        v470 = *(NSObject **)(v947 + 16);
        uint64_t v471 = v949;
        ((void (*)(uint64_t, char *, uint64_t))v470)(v949, v466, v468);
        unint64_t v472 = (*(unsigned __int8 *)(v469 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v469 + 80);
        uint64_t v473 = swift_allocObject();
        v474 = *(void (**)(unint64_t, uint64_t, uint64_t))(v469 + 32);
        v474(v473 + v472, v471, v468);
        uint64_t v475 = swift_allocObject();
        *(void *)(v475 + 16) = sub_100AB7038;
        *(void *)(v475 + 24) = v473;
        v915 = v470;
        ((void (*)(uint64_t, char *, uint64_t))v470)(v471, v931, v468);
        uint64_t v476 = swift_allocObject();
        v474(v476 + v472, v471, v468);
        uint64_t v477 = swift_allocObject();
        *(void *)(v477 + 16) = sub_100AB7038;
        *(void *)(v477 + 24) = v476;
        v960 = (void (**)(uint8_t **__return_ptr, uint64_t))Logger.logObject.getter();
        LODWORD(v470) = static os_log_type_t.default.getter();
        uint64_t v478 = swift_allocObject();
        *(unsigned char *)(v478 + 16) = 34;
        uint64_t v479 = swift_allocObject();
        *(unsigned char *)(v479 + 16) = 8;
        uint64_t v480 = swift_allocObject();
        *(void *)(v480 + 16) = sub_100AB7600;
        *(void *)(v480 + 24) = v475;
        uint64_t v481 = swift_allocObject();
        *(void *)(v481 + 16) = sub_100AB75F8;
        *(void *)(v481 + 24) = v480;
        uint64_t v482 = swift_allocObject();
        *(unsigned char *)(v482 + 16) = 34;
        uint64_t v483 = swift_allocObject();
        *(unsigned char *)(v483 + 16) = 8;
        uint64_t v484 = swift_allocObject();
        uint64_t v485 = v975;
        uint64_t v486 = v484;
        *(void *)(v484 + 16) = sub_100AB7600;
        *(void *)(v484 + 24) = v477;
        uint64_t v487 = swift_allocObject();
        *(void *)(v487 + 16) = sub_100AB75F8;
        *(void *)(v487 + 24) = v486;
        uint64_t v488 = swift_allocObject();
        *(_OWORD *)(v488 + 16) = v934;
        *(void *)(v488 + 32) = sub_100AB7784;
        *(void *)(v488 + 40) = v478;
        *(void *)(v488 + 48) = sub_100AB7784;
        *(void *)(v488 + 56) = v479;
        *(void *)(v488 + 64) = sub_100AB6A34;
        *(void *)(v488 + 72) = v481;
        *(void *)(v488 + 80) = sub_100AB7784;
        *(void *)(v488 + 88) = v482;
        *(void *)(v488 + 96) = sub_100AB7784;
        *(void *)(v488 + 104) = v483;
        *(void *)(v488 + 112) = sub_100AB6A34;
        *(void *)(v488 + 120) = v487;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        LODWORD(v890) = v470;
        os_log_type_t v489 = v470;
        v490 = v960;
        if (os_log_type_enabled((os_log_t)v960, v489))
        {
          uint64_t v491 = swift_slowAlloc();
          v980 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v491 = 514;
          *(unsigned char *)(v491 + 2) = *(unsigned char *)(v478 + 16);
          if (v977) {
            goto LABEL_335;
          }
          swift_release();
          *(unsigned char *)(v491 + 3) = *(unsigned char *)(v479 + 16);
          v296 = 0;
          uint64_t v492 = swift_release();
          uint64_t v493 = (*(uint64_t (**)(uint64_t))(v481 + 16))(v492);
          *(void *)(v491 + 4) = sub_100075F3C(v493, v494, (uint64_t *)&v980);
          swift_bridgeObjectRelease();
          v495 = v932;
          swift_release();
          *(unsigned char *)(v491 + 12) = *(unsigned char *)(v482 + 16);
          swift_release();
          *(unsigned char *)(v491 + 13) = *(unsigned char *)(v483 + 16);
          uint64_t v496 = swift_release();
          uint64_t v497 = (*(uint64_t (**)(uint64_t))(v487 + 16))(v496);
          *(void *)(v491 + 14) = sub_100075F3C(v497, v498, (uint64_t *)&v980);
          swift_bridgeObjectRelease();
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v490, (os_log_type_t)v890, "[Insert] Moving item %{public}s to %{public}s", (uint8_t *)v491, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v960 = (void (**)(uint8_t **__return_ptr, uint64_t))v950->isa;
          ((void (*)(char *, uint64_t))v960)(v495, v975);
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();

          v960 = (void (**)(uint8_t **__return_ptr, uint64_t))v950->isa;
          ((void (*)(char *, uint64_t))v960)(v932, v485);
          v296 = v977;
        }
        uint64_t v338 = v973;
        uint64_t v516 = v921;
        uint64_t v517 = v921 + *(int *)(v922 + 48);
        v518 = v924;
        uint64_t v519 = v971;
        os_log_t v520 = v915;
        ((void (*)(void, char *, uint64_t))v915)(v921, v924, v971);
        v521 = v931;
        ((void (*)(uint64_t, char *, uint64_t))v520)(v517, v931, v519);
        sub_100AA0D84(v516);
        v522 = *v927;
        (*v927)(v521, v519);
        v522(v518, v519);
        v350 = v970;
LABEL_171:
        uint64_t v326 = v968;
        goto LABEL_116;
      }
      uint64_t v429 = v975;
      v963(v368, v962, v975);
      uint64_t v430 = swift_allocObject();
      *(void *)(v430 + 16) = v972;
      uint64_t v431 = swift_allocObject();
      *(void *)(v431 + 16) = v358;
      v915 = Logger.logObject.getter();
      int v432 = static os_log_type_t.default.getter();
      uint64_t v433 = swift_allocObject();
      *(unsigned char *)(v433 + 16) = 2;
      uint64_t v434 = swift_allocObject();
      *(unsigned char *)(v434 + 16) = 8;
      uint64_t v435 = swift_allocObject();
      *(void *)(v435 + 16) = Library.Menu.Request.filteringOptions.getter;
      *(void *)(v435 + 24) = v430;
      uint64_t v436 = swift_allocObject();
      *(void *)(v436 + 16) = sub_100AB7604;
      *(void *)(v436 + 24) = v435;
      uint64_t v437 = swift_allocObject();
      *(unsigned char *)(v437 + 16) = 2;
      uint64_t v438 = swift_allocObject();
      *(unsigned char *)(v438 + 16) = 8;
      uint64_t v439 = swift_allocObject();
      *(void *)(v439 + 16) = j___s9MusicCore7LibraryO4MenuV7RequestV16filteringOptionsSo07MPMediac9FilteringG0Vvg;
      *(void *)(v439 + 24) = v431;
      uint64_t v440 = swift_allocObject();
      *(void *)(v440 + 16) = sub_100AB7604;
      *(void *)(v440 + 24) = v439;
      uint64_t v441 = swift_allocObject();
      *(_OWORD *)(v441 + 16) = v934;
      *(void *)(v441 + 32) = sub_100AB7784;
      *(void *)(v441 + 40) = v433;
      *(void *)(v441 + 48) = sub_100AB7784;
      *(void *)(v441 + 56) = v434;
      *(void *)(v441 + 64) = sub_100AB6CE0;
      *(void *)(v441 + 72) = v436;
      *(void *)(v441 + 80) = sub_100AB7784;
      *(void *)(v441 + 88) = v437;
      *(void *)(v441 + 96) = sub_100AB7784;
      *(void *)(v441 + 104) = v438;
      *(void *)(v441 + 112) = sub_100AB6CE0;
      *(void *)(v441 + 120) = v440;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v890) = v432;
      os_log_type_t v442 = v432;
      v443 = v915;
      if (os_log_type_enabled(v915, v442))
      {
        uint64_t v444 = swift_slowAlloc();
        *(_WORD *)uint64_t v444 = 512;
        *(unsigned char *)(v444 + 2) = *(unsigned char *)(v433 + 16);
        v296 = v977;
        if (v977) {
          goto LABEL_333;
        }
        uint64_t v445 = v444;
        swift_release();
        *(unsigned char *)(v445 + 3) = *(unsigned char *)(v434 + 16);
        uint64_t v446 = swift_release();
        (*(void (**)(uint8_t **__return_ptr, uint64_t))(v436 + 16))(&v980, v446);
        *(void *)(v445 + 4) = v980;
        swift_release();
        *(unsigned char *)(v445 + 12) = *(unsigned char *)(v437 + 16);
        swift_release();
        *(unsigned char *)(v445 + 13) = *(unsigned char *)(v438 + 16);
        uint64_t v447 = swift_release();
        (*(void (**)(uint8_t **__return_ptr, uint64_t))(v440 + 16))(&v980, v447);
        *(void *)(v445 + 14) = v980;
        uint64_t v326 = v968;
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v443, (os_log_type_t)v890, "Skipping insert for [%{public}ld,%{public}ld]", (uint8_t *)v445, 0x16u);
        swift_slowDealloc();

        v448 = (uint64_t *)&v982;
LABEL_154:
        ((void (*)(void, uint64_t))v960)(*(v448 - 32), v975);
        v350 = v970;
        uint64_t v338 = v973;
        goto LABEL_116;
      }
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      v499 = (uint64_t *)&v982;
LABEL_168:
      ((void (*)(void, uint64_t))v960)(*(v499 - 32), v429);
      v296 = v977;
      v350 = v970;
      uint64_t v338 = v973;
      goto LABEL_171;
    }
    break;
  }
  if (v364)
  {
    unint64_t v365 = sub_100A9A394(v972);
    if (v366) {
      uint64_t v364 = *(void *)(*(void *)(v363 + 56) + 8 * v365);
    }
    else {
      uint64_t v364 = 0;
    }
  }
  if (__OFADD__(v358, v364))
  {
    __break(1u);
LABEL_302:
    __break(1u);
    goto LABEL_303;
  }
  if (!v951)
  {
    uint64_t v372 = (uint64_t)v976 + *(int *)(TupleTypeMetadata3 + 48);
    if (v362) {
      goto LABEL_140;
    }
    v974 = (uint64_t)v976 + *(int *)(TupleTypeMetadata3 + 48);
    uint64_t v429 = v975;
    v963(v942, v962, v975);
    uint64_t v449 = swift_allocObject();
    *(void *)(v449 + 16) = v972;
    uint64_t v450 = swift_allocObject();
    *(void *)(v450 + 16) = v361;
    v451 = Logger.logObject.getter();
    LODWORD(v915) = static os_log_type_t.default.getter();
    uint64_t v452 = swift_allocObject();
    *(unsigned char *)(v452 + 16) = 2;
    uint64_t v453 = swift_allocObject();
    *(unsigned char *)(v453 + 16) = 8;
    uint64_t v454 = swift_allocObject();
    *(void *)(v454 + 16) = j___s9MusicCore7LibraryO4MenuV7RequestV16filteringOptionsSo07MPMediac9FilteringG0Vvg;
    *(void *)(v454 + 24) = v449;
    uint64_t v455 = swift_allocObject();
    *(void *)(v455 + 16) = sub_100AB7604;
    *(void *)(v455 + 24) = v454;
    uint64_t v456 = swift_allocObject();
    *(unsigned char *)(v456 + 16) = 2;
    uint64_t v457 = swift_allocObject();
    *(unsigned char *)(v457 + 16) = 8;
    uint64_t v458 = swift_allocObject();
    *(void *)(v458 + 16) = j___s9MusicCore7LibraryO4MenuV7RequestV16filteringOptionsSo07MPMediac9FilteringG0Vvg;
    *(void *)(v458 + 24) = v450;
    uint64_t v459 = swift_allocObject();
    *(void *)(v459 + 16) = sub_100AB7604;
    *(void *)(v459 + 24) = v458;
    uint64_t v460 = swift_allocObject();
    *(_OWORD *)(v460 + 16) = v934;
    *(void *)(v460 + 32) = sub_100AB7784;
    *(void *)(v460 + 40) = v452;
    *(void *)(v460 + 48) = sub_100AB7784;
    *(void *)(v460 + 56) = v453;
    *(void *)(v460 + 64) = sub_100AB6CE0;
    *(void *)(v460 + 72) = v455;
    *(void *)(v460 + 80) = sub_100AB7784;
    *(void *)(v460 + 88) = v456;
    *(void *)(v460 + 96) = sub_100AB7784;
    *(void *)(v460 + 104) = v457;
    *(void *)(v460 + 112) = sub_100AB6CE0;
    *(void *)(v460 + 120) = v459;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v451, (os_log_type_t)v915))
    {
      v461 = v451;
      uint64_t v462 = swift_slowAlloc();
      *(_WORD *)uint64_t v462 = 512;
      *(unsigned char *)(v462 + 2) = *(unsigned char *)(v452 + 16);
      v296 = v977;
      if (v977) {
        goto LABEL_333;
      }
      uint64_t v463 = v462;
      swift_release();
      *(unsigned char *)(v463 + 3) = *(unsigned char *)(v453 + 16);
      uint64_t v464 = swift_release();
      (*(void (**)(uint8_t **__return_ptr, uint64_t))(v455 + 16))(&v980, v464);
      *(void *)(v463 + 4) = v980;
      swift_release();
      *(unsigned char *)(v463 + 12) = *(unsigned char *)(v456 + 16);
      swift_release();
      *(unsigned char *)(v463 + 13) = *(unsigned char *)(v457 + 16);
      uint64_t v465 = swift_release();
      (*(void (**)(uint8_t **__return_ptr, uint64_t))(v459 + 16))(&v980, v465);
      *(void *)(v463 + 14) = v980;
      uint64_t v326 = v968;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v461, (os_log_type_t)v915, "Skipping insert for [%{public}ld,%{public}ld]", (uint8_t *)v463, 0x16u);
      swift_slowDealloc();

      v448 = &v974;
      goto LABEL_154;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v499 = &v974;
    goto LABEL_168;
  }
  v371 = sub_100AABA9C(&v980, v912);
  if (*(unsigned char *)(v370 + 8) != 1)
  {
    if (__OFSUB__(*(void *)v370, 1)) {
      goto LABEL_310;
    }
    --*(void *)v370;
  }
  ((void (*)(uint8_t **, void))v371)(&v980, 0);
  uint64_t v372 = (uint64_t)v976 + *(int *)(TupleTypeMetadata3 + 48);
  if ((v362 & 1) == 0)
  {
    v373 = v923;
    IndexPath.init(item:section:)();
    if (v902) {
      goto LABEL_313;
    }
    v974 = v372;
    IndexPath.init(item:section:)();
    v963(v929, v962, v975);
    uint64_t v374 = v971;
    uint64_t v375 = v947;
    v376 = *(NSObject **)(v947 + 16);
    uint64_t v377 = v949;
    ((void (*)(uint64_t, char *, uint64_t))v376)(v949, v373, v971);
    unint64_t v378 = (*(unsigned __int8 *)(v375 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v375 + 80);
    uint64_t v379 = swift_allocObject();
    v380 = *(void (**)(unint64_t, uint64_t, uint64_t))(v375 + 32);
    v380(v379 + v378, v377, v374);
    uint64_t v381 = swift_allocObject();
    *(void *)(v381 + 16) = sub_100AB7038;
    *(void *)(v381 + 24) = v379;
    v915 = v376;
    ((void (*)(uint64_t, uint64_t, uint64_t))v376)(v377, v930, v374);
    uint64_t v382 = swift_allocObject();
    v380(v382 + v378, v377, v374);
    uint64_t v383 = swift_allocObject();
    *(void *)(v383 + 16) = sub_100AB7038;
    *(void *)(v383 + 24) = v382;
    v384 = Logger.logObject.getter();
    LODWORD(v377) = static os_log_type_t.default.getter();
    uint64_t v385 = swift_allocObject();
    *(unsigned char *)(v385 + 16) = 34;
    uint64_t v386 = swift_allocObject();
    *(unsigned char *)(v386 + 16) = 8;
    uint64_t v387 = swift_allocObject();
    *(void *)(v387 + 16) = sub_100AB7600;
    *(void *)(v387 + 24) = v381;
    uint64_t v388 = swift_allocObject();
    *(void *)(v388 + 16) = sub_100AB75F8;
    *(void *)(v388 + 24) = v387;
    uint64_t v389 = swift_allocObject();
    *(unsigned char *)(v389 + 16) = 34;
    uint64_t v390 = swift_allocObject();
    *(unsigned char *)(v390 + 16) = 8;
    uint64_t v391 = swift_allocObject();
    *(void *)(v391 + 16) = sub_100AB7600;
    *(void *)(v391 + 24) = v383;
    uint64_t v392 = swift_allocObject();
    *(void *)(v392 + 16) = sub_100AB75F8;
    *(void *)(v392 + 24) = v391;
    uint64_t v393 = swift_allocObject();
    *(_OWORD *)(v393 + 16) = v934;
    *(void *)(v393 + 32) = sub_100AB7784;
    *(void *)(v393 + 40) = v385;
    *(void *)(v393 + 48) = sub_100AB7784;
    *(void *)(v393 + 56) = v386;
    *(void *)(v393 + 64) = sub_100AB6A34;
    *(void *)(v393 + 72) = v388;
    *(void *)(v393 + 80) = sub_100AB7784;
    *(void *)(v393 + 88) = v389;
    *(void *)(v393 + 96) = sub_100AB7784;
    *(void *)(v393 + 104) = v390;
    *(void *)(v393 + 112) = sub_100AB6A34;
    *(void *)(v393 + 120) = v392;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v960) = v377;
    if (os_log_type_enabled(v384, (os_log_type_t)v377))
    {
      v890 = v384;
      uint64_t v394 = swift_slowAlloc();
      v980 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v394 = 514;
      *(unsigned char *)(v394 + 2) = *(unsigned char *)(v385 + 16);
      v296 = v977;
      if (v977) {
        goto LABEL_333;
      }
      swift_release();
      *(unsigned char *)(v394 + 3) = *(unsigned char *)(v386 + 16);
      uint64_t v395 = swift_release();
      uint64_t v396 = (*(uint64_t (**)(uint64_t))(v388 + 16))(v395);
      *(void *)(v394 + 4) = sub_100075F3C(v396, v397, (uint64_t *)&v980);
      swift_bridgeObjectRelease();
      swift_release();
      *(unsigned char *)(v394 + 12) = *(unsigned char *)(v389 + 16);
      swift_release();
      *(unsigned char *)(v394 + 13) = *(unsigned char *)(v390 + 16);
      uint64_t v398 = swift_release();
      uint64_t v399 = (*(uint64_t (**)(uint64_t))(v392 + 16))(v398);
      *(void *)(v394 + 14) = sub_100075F3C(v399, v400, (uint64_t *)&v980);
      swift_bridgeObjectRelease();
      swift_release();
      os_log_t v401 = v890;
      _os_log_impl((void *)&_mh_execute_header, v890, (os_log_type_t)v960, "[Remove] Moving item %{public}s to %{public}s", (uint8_t *)v394, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v960 = (void (**)(uint8_t **__return_ptr, uint64_t))v950->isa;
      ((void (*)(char *, uint64_t))v960)(v929, v975);
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      v960 = (void (**)(uint8_t **__return_ptr, uint64_t))v950->isa;
      ((void (*)(char *, uint64_t))v960)(v929, v975);
      v296 = v977;
    }
    uint64_t v326 = v968;
    uint64_t v523 = v921;
    uint64_t v524 = v921 + *(int *)(v922 + 48);
    v525 = v923;
    uint64_t v526 = v971;
    os_log_t v527 = v915;
    ((void (*)(void, char *, uint64_t))v915)(v921, v923, v971);
    uint64_t v528 = v930;
    ((void (*)(uint64_t, uint64_t, uint64_t))v527)(v524, v930, v526);
    sub_100AA0D84(v523);
    v529 = *v927;
    (*v927)((char *)v528, v526);
    v529(v525, v526);
    v350 = v970;
    uint64_t v338 = v973;
    goto LABEL_116;
  }
LABEL_140:
  uint64_t v402 = (uint64_t)v933;
  v403 = (char *)v928;
  IndexPath.init(item:section:)();
  uint64_t v404 = (uint64_t)v985;
  swift_bridgeObjectRetain();
  char v405 = sub_100A99FEC(v402, v404);
  swift_bridgeObjectRelease();
  if (v405)
  {
    v974 = v372;
    sub_100AB56F8(v402);
    uint64_t v406 = v975;
    v963(v403, v962, v975);
    v407 = v403;
    uint64_t v408 = v947;
    uint64_t v409 = v949;
    uint64_t v410 = v971;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v947 + 16))(v949, v402, v971);
    unint64_t v411 = (*(unsigned __int8 *)(v408 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v408 + 80);
    uint64_t v412 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v408 + 32))(v412 + v411, v409, v410);
    uint64_t v413 = swift_allocObject();
    *(void *)(v413 + 16) = sub_100AB7038;
    *(void *)(v413 + 24) = v412;
    v414 = Logger.logObject.getter();
    os_log_type_t v415 = static os_log_type_t.default.getter();
    uint64_t v416 = swift_allocObject();
    *(unsigned char *)(v416 + 16) = 34;
    uint64_t v417 = swift_allocObject();
    *(unsigned char *)(v417 + 16) = 8;
    uint64_t v418 = swift_allocObject();
    *(void *)(v418 + 16) = sub_100AB7600;
    *(void *)(v418 + 24) = v413;
    uint64_t v419 = swift_allocObject();
    *(void *)(v419 + 16) = sub_100AB75F8;
    *(void *)(v419 + 24) = v418;
    uint64_t v420 = swift_allocObject();
    *(_OWORD *)(v420 + 16) = v910;
    *(void *)(v420 + 32) = sub_100AB7784;
    *(void *)(v420 + 40) = v416;
    *(void *)(v420 + 48) = sub_100AB7784;
    *(void *)(v420 + 56) = v417;
    *(void *)(v420 + 64) = sub_100AB6A34;
    *(void *)(v420 + 72) = v419;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v414, v415))
    {
      uint64_t v421 = swift_slowAlloc();
      v980 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v421 = 258;
      *(unsigned char *)(v421 + 2) = *(unsigned char *)(v416 + 16);
      if (v977) {
        goto LABEL_334;
      }
      swift_release();
      *(unsigned char *)(v421 + 3) = *(unsigned char *)(v417 + 16);
      uint64_t v422 = swift_release();
      uint64_t v423 = (*(uint64_t (**)(uint64_t))(v419 + 16))(v422);
      *(void *)(v421 + 4) = sub_100075F3C(v423, v424, (uint64_t *)&v980);
      swift_bridgeObjectRelease();
      uint64_t v425 = v406;
      v296 = 0;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v414, v415, "Deleting item %{public}s", (uint8_t *)v421, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(void, uint64_t))v960)(v928, v425);
      (*v927)(v933, v971);
      goto LABEL_166;
    }
LABEL_114:

    swift_release();
    swift_release();
    swift_release();
    ((void (*)(char *, uint64_t))v960)(v407, v406);
    (*v927)((char *)v402, v410);
    uint64_t v338 = v973;
    uint64_t v326 = v968;
    v296 = v977;
    goto LABEL_115;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v532 = v873;
  uint64_t v533 = v975;
  v963(v873, v962, v975);
  v534 = Logger.logObject.getter();
  os_log_type_t v535 = static os_log_type_t.error.getter();
  uint64_t v536 = sub_100A87090(0);
  if (os_log_type_enabled(v534, v535))
  {
    v537 = (uint8_t *)swift_slowAlloc();
    v978[0] = 0;
    *(_WORD *)v537 = 0;
    v979 = 0;
    v980 = v537 + 2;
    sub_10027550C(v536, (uint64_t)&v980, (uint64_t)v978, (uint64_t)&v979);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v534, v535, "Tried to delete an index path from the visible items diff that is not present in the visible index paths set. The visible index paths are likely not consecutive and the diff would be inconsistent, bailing and reloading data.", v537, 2u);
    swift_slowDealloc();
    swift_release();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  sub_10006ADFC(v956);
  sub_10006ADFC(v938);
  sub_10006ADFC(v859);

  ((void (*)(char *, uint64_t))v960)(v532, v533);
  (*v927)(v933, v971);
  (*v879)(v968, v914);
  (*v880)(v913, v958);
  v356(v919, v973);
  swift_release();
  (*(void (**)(char *, uint64_t))(v937 + 8))(v892, v918);
  v614 = v970;
  LOBYTE(v941->isa) = 1;
  (*v944)((uint8_t **)v372, (uint64_t)v614);
LABEL_226:
  swift_release();
LABEL_227:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_228:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100AAB018()
{
  if (qword_1010C63B0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_100050A90(v0, (uint64_t)qword_1010C7258);
}

uint64_t sub_100AAB07C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return swift_getAssociatedTypeWitness();
}

uint64_t sub_100AAB114@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100AAB1FC@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 32);
  Swift::Int v7 = v6(a1, a2);
  sub_100AB2118(&v11, v7, v8);
  swift_bridgeObjectRelease();
  uint64_t result = v6(a1, a2);
  *a3 = result;
  a3[1] = v10;
  return result;
}

uint64_t sub_100AAB2BC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  char v9 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 32);
  uint64_t v10 = v9(a4, a5);
  uint64_t v12 = v11;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *a3;
  *a3 = 0x8000000000000000;
  sub_100AB3D7C(a1, v10, v12, isUniquelyReferenced_nonNull_native);
  *a3 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9(a4, a5);
}

uint64_t sub_100AAB3A0(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  uint64_t v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v55 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v53 = (char *)&v40 - v13;
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v41 = (char *)&v40 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  __chkstk_darwin(v18);
  uint64_t v51 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v40 - v21;
  __chkstk_darwin(v23);
  uint64_t v40 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v50 = *((void *)v15 - 1);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  uint64_t v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v30 = (char *)&v40 - v29;
  Swift::Int v31 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v61 = ContiguousArray.init()();
  uint64_t v56 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v31);
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  uint64_t v59 = v30;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    uint64_t v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      uint64_t result = (*v33)(v22, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v22, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v22, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v22, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      if (!--v31)
      {
        uint64_t v35 = v54;
        uint64_t v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  uint64_t v36 = v51;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    uint64_t v38 = (void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v39 = v41;
    uint64_t v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

void (*sub_100AABA9C(void *a1, uint64_t a2))(void *a1)
{
  unint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  void v4[4] = sub_100AB54D4(v4, a2);
  return sub_1002531D4;
}

void (*sub_100AABAFC(void *a1, uint64_t a2, uint64_t a3, void *a4))(void *a1)
{
  uint64_t v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[4] = a3;
  uint64_t v8[5] = a4;
  swift_bridgeObjectRetain();
  void v8[6] = sub_100AB55C4(v8, a2, a3, a4);
  return sub_100AABB88;
}

void sub_100AABB88(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 40);
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t sub_100AABBEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, __n128), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v32 = a8;
  uint64_t v15 = type metadata accessor for IndexPath();
  uint64_t v16 = *(void *)(v15 - 8);
  __n128 v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v20 = a3(a1, a2, v17);
  if ((v20 & 1) == 0 || !a5) {
    return v20 & 1;
  }
  swift_retain();
  if ((a5(a1, a2) & 1) != 0
    || (uint64_t v30 = v16,
        uint64_t v31 = a7,
        swift_getAssociatedTypeWitness(),
        swift_getAssociatedConformanceWitness(),
        swift_getAssociatedTypeWitness(),
        swift_getAssociatedConformanceWitness(),
        uint64_t v21 = OrderedSet._find(_:)(),
        (v22 & 1) != 0))
  {
    sub_10006ADFC((uint64_t)a5);
    return v20 & 1;
  }
  uint64_t v23 = v21;
  uint64_t v24 = *a9;
  uint64_t v25 = *(void *)(*a9 + 16);
  if (v25)
  {
    unint64_t v26 = sub_100A9A394(a10);
    if (v27) {
      uint64_t v25 = *(void *)(*(void *)(v24 + 56) + 8 * v26);
    }
    else {
      uint64_t v25 = 0;
    }
  }
  uint64_t result = v23 + v25;
  if (!__OFADD__(v23, v25))
  {
    IndexPath.init(item:section:)();
    type metadata accessor for AIDiffingUpdate();
    sub_100AB56F8((uint64_t)v19);
    sub_10006ADFC((uint64_t)a5);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v15);
    return v20 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_100AABE48(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)(a1 + 16) + 16)) {
    sub_100A9A394(a2);
  }
  swift_endAccess();
  sub_100063814(&qword_1010C7428);
  return String.init<A>(describing:)();
}

uint64_t sub_100AABEE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  uint64_t v12 = *(void *)(a3 + 16);
  if (a2)
  {
    swift_retain();
    sub_100AB5E0C(a1, v11, v12, (void *)(a2 + 16), a2 + 32);
    char v14 = v13;
    swift_release();
    LOBYTE(v12) = (v14 & 1) == 0;
  }
  else if (v12)
  {
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
    uint64_t v16 = v7 + 16;
    __n128 v17 = v18;
    uint64_t v19 = *(void *)(v16 + 56);
    uint64_t v20 = v12 - 1;
    do
    {
      uint64_t v21 = v20;
      v17(v10, v11, v6, v8);
      sub_100AB75B0(&qword_1010C7190, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      LOBYTE(v12) = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v10, v6);
      if (v12) {
        break;
      }
      uint64_t v20 = v21 - 1;
      v11 += v19;
    }
    while (v21);
  }
  return v12 & 1;
}

uint64_t sub_100AAC0A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)v27 - v7;
  uint64_t v8 = sub_100063814(&qword_1010C73E8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void *)(a1 + 16);
  v27[2] = a1;
  if (v37)
  {
    char v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    unint64_t v32 = (*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64);
    uint64_t v36 = a1 + v32;
    uint64_t v39 = *(void *)(v11 + 56);
    uint64_t v34 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    uint64_t v31 = (void (**)(uint64_t, char *, uint64_t))(v11 + 16);
    char v14 = (void (**)(char *, uint64_t))(v11 - 8);
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    uint64_t v35 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 40);
    v27[1] = (v11 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v16 = (uint64_t)v40;
    uint64_t v33 = v10;
    uint64_t v28 = v13;
    uint64_t v29 = v11;
    while (1)
    {
      v12(v10, v36 + v39 * v15, v2);
      __n128 v17 = *v35;
      (*v35)(v10, 0, 1, v2);
      if ((*v34)(v10, 1, v2) == 1) {
        return swift_bridgeObjectRelease();
      }
      uint64_t v30 = v17;
      (*v31)(v16, v10, v2);
      uint64_t v19 = *v38;
      uint64_t v18 = v38[1];
      uint64_t v20 = v18 + v32;
      uint64_t v21 = *(void *)(v18 + 16);
      if (*v38)
      {
        swift_retain();
        uint64_t v12 = v28;
        sub_100AB5E0C(v16, v20, v21, (void *)(v19 + 16), v19 + 32);
        char v23 = v22;
        swift_release();
        if ((v23 & 1) == 0) {
          goto LABEL_4;
        }
        uint64_t v16 = (uint64_t)v40;
      }
      else if (v21)
      {
        do
        {
          v12(v5, v20, v2);
          sub_100AB75B0(&qword_1010C7190, (void (*)(uint64_t))&type metadata accessor for IndexPath);
          char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v14)(v5, v2);
          if (v24) {
            goto LABEL_4;
          }
          uint64_t v16 = (uint64_t)v40;
          v20 += v39;
        }
        while (--v21);
      }
      sub_100AB590C(v16);
LABEL_4:
      ++v15;
      uint64_t v16 = (uint64_t)v40;
      (*v14)(v40, v2);
      uint64_t v10 = v33;
      if (v15 == v37)
      {
        v30(v33, 1, 1, v2);
        return swift_bridgeObjectRelease();
      }
    }
  }
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  swift_bridgeObjectRetain();
  v25(v10, 1, 1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100AAC450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v30 - v9;
  uint64_t v11 = sub_100063814(&qword_1010C73E8);
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *(void *)(a2 + 16);
  v30[1] = a2;
  v30[2] = a1;
  if (v39)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v14 = v5 + 16;
    uint64_t v15 = v16;
    unint64_t v34 = (*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64);
    uint64_t v38 = a2 + v34;
    uint64_t v41 = *(void *)(v14 + 56);
    uint64_t v36 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 32);
    uint64_t v33 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    __n128 v17 = (void (**)(char *, uint64_t))(v14 - 8);
    swift_retain();
    swift_retain();
    uint64_t v18 = 0;
    uint64_t v37 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 40);
    v30[0] = (v14 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v35 = v13;
    uint64_t v42 = v10;
    v30[3] = v14;
    unint64_t v32 = v16;
    while (1)
    {
      v15(v13, v38 + v41 * v18, v4);
      uint64_t v19 = *v37;
      (*v37)(v13, 0, 1, v4);
      if ((*v36)(v13, 1, v4) == 1) {
        goto LABEL_15;
      }
      uint64_t v31 = v19;
      (*v33)(v10, v13, v4);
      uint64_t v21 = *v40;
      uint64_t v20 = v40[1];
      uint64_t v22 = (uint64_t)v10;
      uint64_t v23 = v20 + v34;
      uint64_t v24 = *(void *)(v20 + 16);
      if (*v40)
      {
        swift_retain();
        sub_100AB5E0C(v22, v23, v24, (void *)(v21 + 16), v21 + 32);
        char v26 = v25;
        swift_release();
        uint64_t v15 = v32;
        if ((v26 & 1) == 0) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v15 = v32;
        if (v24)
        {
          do
          {
            v15(v7, v23, v4);
            sub_100AB75B0(&qword_1010C7190, (void (*)(uint64_t))&type metadata accessor for IndexPath);
            char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*v17)(v7, v4);
            if (v27) {
              goto LABEL_4;
            }
            v23 += v41;
          }
          while (--v24);
        }
      }
      sub_100AB590C((uint64_t)v42);
LABEL_4:
      ++v18;
      uint64_t v10 = v42;
      (*v17)(v42, v4);
      char v13 = v35;
      if (v18 == v39)
      {
        v31(v35, 1, 1, v4);
        goto LABEL_15;
      }
    }
  }
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  swift_retain();
  swift_retain();
  v28(v13, 1, 1, v4);
LABEL_15:
  swift_release();
  return swift_release();
}

uint64_t UICollectionView.calculateAIDiff<A>(oldItems:newItems:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, objc_class *a7@<X6>, uint64_t a8@<X7>, NSObject *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, NSObject *a14)
{
  int v23 = a5 & 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v20 = [v14 indexPathsForVisibleItems];
  type metadata accessor for IndexPath();
  uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10007B674(a6);
  sub_10007B674(a8);
  sub_10007B674(a11);
  return sub_100AA10C4(a1, a2, v21, a3, a4, v23, a6, a7, a9, a8, a10, a11, a12, a13, a14);
}

uint64_t UICollectionView.calculateAIDiff<A>(oldItems:newItems:sectionIndex:modelUpdateHandler:identityComparator:visualComparator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, NSObject *a3@<X2>, uint64_t a4@<X3>, objc_class *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, NSObject *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v46 = a4;
  uint64_t v50 = a7;
  uint64_t v51 = a8;
  uint64_t v47 = a5;
  uint64_t v52 = a9;
  uint64_t v53 = a3;
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v48 = a10;
  uint64_t v49 = a6;
  uint64_t v11 = *(void *)(a11 - 8);
  __chkstk_darwin(a1);
  char v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _DiffableSection();
  uint64_t v54 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __n128 v18 = __chkstk_darwin(v17);
  id v20 = (uint64_t *)((char *)&v42 - v19);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
  v21(v13, v42, a11, v18);
  uint64_t v55 = v20;
  *id v20 = 0;
  v20[1] = 0xE000000000000000;
  uint64_t v22 = (char *)v20 + *(int *)(v14 + 44);
  int v23 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v23(v22, v13, a11);
  ((void (*)(char *, uint64_t, uint64_t))v21)(v13, v43, a11);
  void *v16 = 0;
  v16[1] = 0xE000000000000000;
  uint64_t v24 = (char *)v16 + *(int *)(v14 + 44);
  uint64_t v44 = v16;
  v23(v24, v13, a11);
  type metadata accessor for _ContiguousArrayStorage();
  uint64_t v25 = v54;
  swift_allocObject();
  uint64_t v26 = static Array._adoptStorage(_:count:)();
  char v27 = *(void (**)(uint64_t, void *, uint64_t))(v25 + 16);
  v27(v28, v55, v14);
  sub_100A87CC0();
  swift_allocObject();
  uint64_t v29 = static Array._adoptStorage(_:count:)();
  v27(v30, v16, v14);
  id v31 = [v45 indexPathsForVisibleItems];
  type metadata accessor for IndexPath();
  uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v34 = v46;
  uint64_t v33 = v47;
  sub_10007B674(v46);
  uint64_t v35 = v49;
  uint64_t v36 = v50;
  sub_10007B674(v49);
  uint64_t v37 = v51;
  uint64_t v38 = v48;
  sub_10007B674(v51);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100AA10C4(v26, v29, v32, (uint64_t)v53, v53, 0, v34, v33, v52, v35, v36, v37, v38, v14, WitnessTable);
  uint64_t v40 = *(void (**)(void *, uint64_t))(v54 + 8);
  v40(v44, v14);
  return ((uint64_t (*)(void *, uint64_t))v40)(v55, v14);
}

uint64_t type metadata accessor for _DiffableSection()
{
  return sub_10004CF5C();
}

uint64_t UICollectionView.performSectionedAIDiff<A>(oldItems:newItems:startingSectionIndex:finalSectionIndex:animated:modelUpdateHandler:identityComparator:visualComparator:alongsideUpdates:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, char a5, int a6, uint64_t a7, objc_class *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void), uint64_t a14, void (*a15)(uint64_t), uint64_t a16, uint64_t a17, NSObject *a18)
{
  uint64_t v39 = a3;
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  int v45 = a6;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v43 = a14;
  uint64_t v44 = a13;
  uint64_t v42 = a15;
  uint64_t v40 = a4;
  uint64_t v41 = a16;
  uint64_t v35 = a18;
  uint64_t v36 = a17;
  uint64_t v32 = a11;
  int v37 = a5 & 1;
  uint64_t v19 = type metadata accessor for AIDiffingUpdate();
  uint64_t v38 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v21 = ((char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v22 = [v18 indexPathsForVisibleItems];
  type metadata accessor for IndexPath();
  uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = v33;
  uint64_t v25 = v34;
  sub_10007B674(v33);
  sub_10007B674(a9);
  uint64_t v26 = v32;
  sub_10007B674(v32);
  sub_100AA10C4(v30, v31, v23, v39, v40, v37, v24, v25, v21, a9, a10, v26, a12, v36, v35);
  sub_100063814(&qword_1010C7270);
  unint64_t v27 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_100E251D0;
  sub_100AB0798((uint64_t)v21, v28 + v27);
  UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(v28, v45, v44, v43, v42, v41);
  swift_bridgeObjectRelease();
  return sub_100AB07FC((uint64_t)v21);
}

uint64_t UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(uint64_t a1, int a2, void (*a3)(void), uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v137 = a6;
  uint64_t v143 = a5;
  uint64_t v144 = a3;
  int v134 = a2;
  uint64_t v10 = type metadata accessor for IndexSet();
  uint64_t v132 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v131 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for AIDiffingUpdate();
  uint64_t v155 = (void *)*((void *)v12 - 1);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v131 - v16;
  swift_unknownObjectWeakInit();
  if (qword_1010C63B0 != -1) {
    goto LABEL_47;
  }
  while (1)
  {
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = sub_100050A90(v18, (uint64_t)qword_1010C7258);
    swift_bridgeObjectRetain();
    uint64_t v135 = v19;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    id v136 = v7;
    if (v22)
    {
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 134217984;
      *(void *)(v23 + 4) = *(void *)(a1 + 16);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "applyUpdates called with %ld updates", (uint8_t *)v23, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    uint64_t v145 = swift_allocBox();
    uint64_t v25 = v24;
    IndexSet.init()();
    uint64_t v133 = v10;
    uint64_t v146 = swift_allocBox();
    uint64_t v152 = v26;
    IndexSet.init()();
    uint64_t v27 = swift_allocObject();
    uint64_t v148 = v27;
    *(void *)(v27 + 16) = _swiftEmptyArrayStorage;
    v153 = (void *)(v27 + 16);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = 0;
    uint64_t v149 = v10 + 16;
    *(void *)(v10 + 24) = _swiftEmptyArrayStorage;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = 0;
    uint64_t v150 = v28 + 16;
    *(void *)(v28 + 24) = _swiftEmptyArrayStorage;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = 0;
    uint64_t v151 = v29 + 16;
    uint64_t v141 = v29;
    *(void *)(v29 + 24) = _swiftEmptyArrayStorage;
    uint64_t v30 = swift_allocObject();
    uint64_t v140 = v30;
    *(void *)(v30 + 16) = _swiftEmptyArrayStorage;
    uint64_t v154 = (void *)(v30 + 16);
    uint64_t v31 = *(void *)(a1 + 16);
    uint64_t v147 = v28;
    uint64_t v139 = v10;
    uint64_t v142 = a4;
    uint64_t v138 = a1;
    if (!v31)
    {
LABEL_14:
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Final update:", v43, 2u);
        swift_slowDealloc();
      }

      swift_retain_n();
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136315138;
        swift_beginAccess();
        uint64_t v47 = v132;
        uint64_t v48 = v131;
        uint64_t v49 = v133;
        (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v131, v25, v133);
        sub_100AB75B0(&qword_1010C7278, (void (*)(uint64_t))&type metadata accessor for IndexSet);
        uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v52 = v51;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
        *(void *)(v46 + 4) = sub_100075F3C(v50, v52, aBlock);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, " - Inserted sections: %s", (uint8_t *)v46, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      swift_retain_n();
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = swift_slowAlloc();
        uint64_t v155 = (void *)swift_slowAlloc();
        aBlock[0] = (uint64_t)v155;
        *(_DWORD *)uint64_t v55 = 136315138;
        uint64_t v56 = v152;
        swift_beginAccess();
        uint64_t v57 = v132;
        uint64_t v58 = v131;
        uint64_t v59 = v56;
        uint64_t v60 = v133;
        (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v131, v59, v133);
        sub_100AB75B0(&qword_1010C7278, (void (*)(uint64_t))&type metadata accessor for IndexSet);
        uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v63 = v62;
        (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v60);
        *(void *)(v55 + 4) = sub_100075F3C(v61, v63, aBlock);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v53, v54, " - Deleted sections: %s", (uint8_t *)v55, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      swift_retain_n();
      uint64_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v66 = 136315138;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        sub_100063814(&qword_1010C6568);
        uint64_t v67 = Array.description.getter();
        unint64_t v69 = v68;
        swift_bridgeObjectRelease();
        *(void *)(v66 + 4) = sub_100075F3C(v67, v69, aBlock);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v64, v65, " - Section move pairs: %s", (uint8_t *)v66, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      swift_retain_n();
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v72 = 136315138;
        swift_beginAccess();
        type metadata accessor for IndexPath();
        swift_retain();
        uint64_t v73 = Array.description.getter();
        unint64_t v75 = v74;
        swift_release();
        *(void *)(v72 + 4) = sub_100075F3C(v73, v75, aBlock);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v70, v71, " - Inserted index paths: %s", (uint8_t *)v72, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      swift_retain_n();
      uint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v78 = 136315138;
        swift_beginAccess();
        type metadata accessor for IndexPath();
        swift_retain();
        uint64_t v79 = Array.description.getter();
        unint64_t v81 = v80;
        swift_release();
        *(void *)(v78 + 4) = sub_100075F3C(v79, v81, aBlock);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v76, v77, " - Deleted index paths: %s", (uint8_t *)v78, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v82 = v141;
      swift_retain_n();
      uint64_t v83 = Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v85 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v85 = 136315138;
        swift_beginAccess();
        type metadata accessor for IndexPath();
        swift_retain();
        uint64_t v86 = Array.description.getter();
        unint64_t v88 = v87;
        swift_release();
        uint64_t v89 = v141;
        *(void *)(v85 + 4) = sub_100075F3C(v86, v88, aBlock);
        swift_release_n();
        uint64_t v82 = v89;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v83, v84, " - Updated index paths: %s", (uint8_t *)v85, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v90 = v140;
      swift_retain_n();
      uint64_t v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v91, v92))
      {
        uint64_t v93 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v93 = 136315138;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        sub_100063814(&qword_1010C6F50);
        uint64_t v94 = Array.description.getter();
        unint64_t v96 = v95;
        swift_bridgeObjectRelease();
        uint64_t v97 = v141;
        *(void *)(v93 + 4) = sub_100075F3C(v94, v96, aBlock);
        swift_release_n();
        uint64_t v82 = v97;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v91, v92, " - Item move pairs: %s", (uint8_t *)v93, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      id v98 = v136;
      a1 = v138;
      uint64_t v99 = v147;
      uint64_t v10 = v139;
      char v100 = v134;
      uint64_t v101 = v146;
      goto LABEL_41;
    }
    if (v31 == 1) {
      break;
    }
    uint64_t v7 = (void *)(a1 + ((*((unsigned __int8 *)v155 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v155 + 80)));
    swift_bridgeObjectRetain();
    a4 = 0;
    while (1)
    {
      a1 = a4 + 1;
      if (__OFADD__(a4, 1)) {
        break;
      }
      sub_100AB0798((uint64_t)v7 + v155[9] * a4, (uint64_t)v14);
      if (*v14 == 1)
      {
        uint64_t v102 = v138;
        swift_bridgeObjectRelease();
        sub_100AAE800(v102, (uint64_t)v158, v144, v142, v143);
        sub_100AB07FC((uint64_t)v14);
        swift_unknownObjectWeakDestroy();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_39;
      }
      IndexSet.formUnion(_:)();
      IndexSet.formUnion(_:)();
      uint64_t v32 = swift_bridgeObjectRetain();
      sub_100A9DB00(v32);
      uint64_t v33 = (uint64_t *)&v14[v12[9]];
      uint64_t v34 = *v33;
      uint64_t v35 = v33[1];
      swift_retain();
      swift_retain();
      sub_100AAC450(v34, v35);
      swift_release();
      swift_release();
      uint64_t v36 = (uint64_t *)&v14[v12[10]];
      uint64_t v37 = *v36;
      uint64_t v38 = v36[1];
      swift_retain();
      swift_retain();
      sub_100AAC450(v37, v38);
      swift_release();
      swift_release();
      uint64_t v39 = &v14[v12[11]];
      uint64_t v17 = *(unsigned char **)v39;
      uint64_t v10 = *((void *)v39 + 1);
      swift_retain();
      swift_retain();
      sub_100AAC450((uint64_t)v17, v10);
      swift_release();
      swift_release();
      size_t v40 = swift_bridgeObjectRetain();
      sub_100A9DBE4(v40);
      sub_100AB07FC((uint64_t)v14);
      ++a4;
      if (a1 == v31)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_47:
    swift_once();
  }
  sub_100AB0798(a1 + ((*((unsigned __int8 *)v155 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v155 + 80)), (uint64_t)v17);
  if (*v17 == 1)
  {
    sub_100AAE800(a1, (uint64_t)v158, v144, a4, v143);
    sub_100AB07FC((uint64_t)v17);
    swift_unknownObjectWeakDestroy();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_39:
    swift_release();
    swift_release();
LABEL_43:
    swift_release();
    uint64_t v124 = 0;
    return sub_10006ADFC((uint64_t)v124);
  }
  uint64_t v103 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v132 + 24);
  uint64_t v104 = v133;
  v103(v25, &v17[v12[6]], v133);
  v103(v152, &v17[v12[7]], v104);
  void *v153 = *(void *)&v17[v12[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v105 = &v17[v12[9]];
  uint64_t v106 = v105[1];
  *(void *)(v10 + 16) = *v105;
  *(void *)(v10 + 24) = v106;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v107 = &v17[v12[10]];
  uint64_t v108 = v107[1];
  *(void *)(v147 + 16) = *v107;
  *(void *)(v147 + 24) = v108;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v109 = &v17[v12[11]];
  uint64_t v110 = v109[1];
  uint64_t v111 = v141;
  *(void *)(v141 + 16) = *v109;
  *(void *)(v111 + 24) = v110;
  swift_retain();
  swift_retain();
  uint64_t v99 = v147;
  swift_release();
  swift_release();
  uint64_t v112 = *(void *)&v17[v12[12]];
  swift_bridgeObjectRetain();
  sub_100AB07FC((uint64_t)v17);
  *uint64_t v154 = v112;
  swift_bridgeObjectRelease();
  id v98 = v136;
  uint64_t v90 = v140;
  uint64_t v101 = v146;
  char v100 = v134;
  uint64_t v82 = v111;
LABEL_41:
  uint64_t v113 = (void *)swift_allocObject();
  v113[2] = v98;
  v113[3] = a1;
  uint64_t v114 = v145;
  v113[4] = v101;
  v113[5] = v114;
  v113[6] = v148;
  v113[7] = v10;
  v113[8] = v99;
  v113[9] = v90;
  uint64_t v115 = v142;
  v113[10] = v144;
  v113[11] = v115;
  uint64_t v116 = v143;
  v113[12] = v82;
  v113[13] = v116;
  uint64_t v117 = v82;
  uint64_t v118 = v137;
  v113[14] = v137;
  if (v100)
  {
    swift_bridgeObjectRetain();
    uint64_t v119 = v145;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v120 = v143;
    sub_10007B674((uint64_t)v143);
    uint64_t v121 = v144;
    uint64_t v122 = v142;
    sub_10007B674((uint64_t)v144);
    id v123 = v98;
    sub_100AAEA6C(v123, a1, v146, v119, v148, v10, v147, v140, (uint64_t)v121, v122, v117, (uint64_t)v120, v118);
    swift_release();
    swift_unknownObjectWeakDestroy();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_43;
  }
  uint64_t v155 = self;
  uint64_t v125 = swift_allocObject();
  *(void *)(v125 + 16) = sub_100AB0968;
  *(void *)(v125 + 24) = v113;
  uint64_t v126 = swift_allocObject();
  uint64_t v124 = sub_10007A644;
  *(void *)(v126 + 16) = sub_10007A644;
  *(void *)(v126 + 24) = v125;
  aBlock[4] = (uint64_t)sub_10013DD14;
  uint64_t v157 = (void *)v126;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10007A61C;
  aBlock[3] = (uint64_t)&unk_101005008;
  uint64_t v154 = _Block_copy(aBlock);
  v153 = v157;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10007B674((uint64_t)v143);
  sub_10007B674((uint64_t)v144);
  id v127 = v136;
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v128 = v154;
  [v155 performWithoutAnimation:v154];
  _Block_release(v128);
  swift_release();
  swift_unknownObjectWeakDestroy();
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return sub_10006ADFC((uint64_t)v124);
  }
  __break(1u);
  return result;
}

uint64_t UICollectionView.performAIDiff<A>(oldItems:newItems:sectionIndex:animated:modelUpdateHandler:identityComparator:visualComparator:completion:)(uint64_t a1, uint64_t a2, NSObject *a3, int a4, uint64_t a5, objc_class *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t), uint64_t a12, long long a13)
{
  uint64_t v27 = a8;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v24 = a5;
  int v30 = a4;
  uint64_t v28 = a12;
  uint64_t v29 = a11;
  long long v23 = a13;
  uint64_t v16 = type metadata accessor for AIDiffingUpdate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = ((char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  UICollectionView.calculateAIDiff<A>(oldItems:newItems:sectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(a1, a2, a3, v24, v25, v26, v27, a9, v19, a10, a13);
  sub_100063814(&qword_1010C7270);
  unint64_t v20 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100E251D0;
  sub_100AB0798((uint64_t)v19, v21 + v20);
  UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(v21, v30, 0, 0, v29, v28);
  swift_bridgeObjectRelease();
  return sub_100AB07FC((uint64_t)v19);
}

void sub_100AAE800(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v25 = a4;
  uint64_t v8 = type metadata accessor for AIDiffingUpdate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010C63B0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100050A90(v12, (uint64_t)qword_1010C7258);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Found update with needsReloadData=true, reloading", v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    uint64_t v24 = a3;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v18 = *(void *)(v9 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_100AB0798(v17, (uint64_t)v11);
      uint64_t v19 = (void (*)(uint64_t))*((void *)v11 + 1);
      sub_10007B674((uint64_t)v19);
      uint64_t v20 = sub_100AB07FC((uint64_t)v11);
      if (v19)
      {
        v19(v20);
        sub_10006ADFC((uint64_t)v19);
      }
      v17 += v18;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    a3 = v24;
  }
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    BOOL v22 = Strong;
    [Strong reloadData];
  }
  if (a3) {
    a3();
  }
  if (a5) {
    a5(1);
  }
}

uint64_t sub_100AAEA6C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  type metadata accessor for IndexSet();
  uint64_t v18 = swift_projectBox();
  uint64_t v19 = swift_projectBox();
  uint64_t v20 = a5 + 16;
  uint64_t v21 = a6 + 16;
  uint64_t v22 = a8 + 16;
  id v23 = [a1 indexPathsForVisibleItems];
  type metadata accessor for IndexPath();
  uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v25 = sub_100AB6590(v24);
  swift_bridgeObjectRelease();
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = a2;
  v26[3] = a1;
  v26[4] = v18;
  v26[5] = v19;
  v26[6] = v20;
  v26[7] = v21;
  v26[8] = a7 + 16;
  v26[9] = v22;
  v26[10] = v25;
  v26[11] = a9;
  v26[12] = a10;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = sub_100AB6890;
  *(void *)(v27 + 24) = v26;
  uint64_t v39 = sub_10013DF0C;
  size_t v40 = (void *)v27;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v36 = 1107296256;
  uint64_t v37 = sub_10007A61C;
  uint64_t v38 = &unk_1010050D8;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  id v29 = a1;
  sub_10007B674(a9);
  swift_retain();
  swift_release();
  int v30 = (void *)swift_allocObject();
  v30[2] = a11;
  v30[3] = v29;
  void v30[4] = a12;
  v30[5] = a13;
  uint64_t v39 = sub_100AB6930;
  size_t v40 = v30;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v36 = 1107296256;
  uint64_t v37 = sub_1001695E8;
  uint64_t v38 = &unk_101005128;
  uint64_t v31 = _Block_copy(&aBlock);
  id v32 = v29;
  swift_retain();
  sub_10007B674(a12);
  swift_release();
  [v32 performBatchUpdates:v28 completion:v31];
  _Block_release(v31);
  _Block_release(v28);
  swift_release();
  LOBYTE(v31) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v31) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AAED78(uint64_t a1, id a2, uint64_t a3, void (*a4)(void, void, void), uint64_t *a5, unsigned int (**a6)(uint64_t, uint64_t, uint64_t), uint64_t *a7, uint64_t *a8, char *a9, unint64_t a10)
{
  uint64_t v139 = a8;
  id v127 = a7;
  uint64_t v138 = a6;
  id v136 = a5;
  uint64_t v135 = a4;
  uint64_t v121 = a3;
  uint64_t v12 = type metadata accessor for IndexPath();
  uint64_t v126 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v118 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v142 = (char *)&v113 - v15;
  __chkstk_darwin(v16);
  uint64_t v140 = (char *)&v113 - v17;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v113 - v19;
  uint64_t v21 = sub_100063814(&qword_1010C73E8);
  __chkstk_darwin(v21 - 8);
  int v134 = (char *)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100063814(&qword_1010C73F8);
  __chkstk_darwin(v23 - 8);
  uint64_t v141 = (char *)&v113 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for IndexSet();
  uint64_t v25 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v119 = (char *)&v113 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for AIDiffingUpdate() - 8;
  __chkstk_darwin(v27);
  int v30 = (char *)&v113 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(a1 + 16);
  id v137 = a2;
  if (v31)
  {
    uint64_t v32 = a1 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
    uint64_t v33 = *(void *)(v28 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_100AB0798(v32, (uint64_t)v30);
      uint64_t v34 = (void (*)(uint64_t))*((void *)v30 + 1);
      sub_10007B674((uint64_t)v34);
      uint64_t v35 = sub_100AB07FC((uint64_t)v30);
      if (v34)
      {
        v34(v35);
        sub_10006ADFC((uint64_t)v34);
      }
      v32 += v33;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
    a2 = v137;
  }
  uint64_t v36 = v121;
  swift_beginAccess();
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  uint64_t v38 = v119;
  uint64_t v39 = v120;
  v37(v119, v36, v120);
  IndexSet._bridgeToObjectiveC()(v40);
  os_log_type_t v42 = v41;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v25 + 8);
  v43(v38, v39);
  [a2 deleteSections:v42];

  uint64_t v44 = v135;
  swift_beginAccess();
  uint64_t v116 = v25 + 16;
  uint64_t v115 = v37;
  v37(v38, (uint64_t)v44, v39);
  IndexSet._bridgeToObjectiveC()(v45);
  uint64_t v47 = v46;
  uint64_t v117 = v25 + 8;
  uint64_t v114 = v43;
  v43(v38, v39);
  [a2 insertSections:v47];

  uint64_t v48 = v136;
  swift_beginAccess();
  uint64_t v49 = *v48;
  uint64_t v50 = *(void *)(*v48 + 16);
  uint64_t v51 = (uint64_t)v141;
  if (v50)
  {
    swift_bridgeObjectRetain();
    unint64_t v52 = (void *)(v49 + 40);
    do
    {
      [a2 moveSection:*(v52 - 1) toSection:*v52];
      v52 += 2;
      --v50;
    }
    while (v50);
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  swift_retain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_endAccess();
  swift_release();
  [a2 insertItemsAtIndexPaths:isa];

  swift_beginAccess();
  swift_retain();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  swift_endAccess();
  swift_release();
  [a2 deleteItemsAtIndexPaths:v54];

  uint64_t v55 = v139;
  swift_beginAccess();
  uint64_t v56 = *v55;
  uint64_t v57 = *(void *)(v56 + 16);
  uint64_t v135 = (void (*)(void, void, void))v56;
  if (v57)
  {
    uint64_t v58 = sub_100063814(&qword_1010C6F50);
    uint64_t v59 = *(void *)(v58 - 8);
    uint64_t v60 = v56 + ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80));
    id v136 = *(uint64_t **)(v59 + 72);
    uint64_t v139 = (uint64_t *)(v59 + 56);
    uint64_t v138 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
    uint64_t v61 = (void (**)(char *, uint64_t, uint64_t))(v126 + 32);
    unint64_t v62 = (void (**)(char *, uint64_t))(v126 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100AB693C(v60, v51);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))*v139)(v51, 0, 1, v58);
      if ((*v138)(v51, 1, v58) == 1) {
        break;
      }
      unint64_t v63 = *v61;
      (*v61)(v20, v51 + *(int *)(v58 + 48), v12);
      uint64_t v64 = v140;
      v63(v140, v51, v12);
      Class v65 = IndexPath._bridgeToObjectiveC()().super.isa;
      uint64_t v66 = *v62;
      (*v62)(v64, v12);
      Class v67 = IndexPath._bridgeToObjectiveC()().super.isa;
      [v137 moveItemAtIndexPath:v65 toIndexPath:v67];

      v66(v20, v12);
      uint64_t v51 = (uint64_t)v141;
      v60 += (uint64_t)v136;
      if (!--v57) {
        goto LABEL_17;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_17:
    uint64_t v68 = sub_100063814(&qword_1010C6F50);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v51, 1, 1, v68);
  }
  swift_bridgeObjectRelease();
  uint64_t v144 = _swiftEmptyArrayStorage;
  id v69 = [v137 _indexPathsForPreparedItems];
  uint64_t v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v132 = *(char **)(v70 + 16);
  if (v132)
  {
    uint64_t v71 = v126;
    unint64_t v128 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
    unint64_t v131 = v70 + v128;
    swift_beginAccess();
    swift_beginAccess();
    unint64_t v72 = 0;
    uint64_t v141 = (char *)(v71 + 16);
    uint64_t v129 = v71 + 48;
    id v136 = (uint64_t *)(v71 + 32);
    uint64_t v140 = a9;
    uint64_t v139 = (uint64_t *)(a9 + 56);
    uint64_t v73 = (void (**)(char *, uint64_t))(v71 + 8);
    uint64_t v130 = v71 + 56;
    unint64_t v113 = (v71 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v74 = (uint64_t)v142;
    unint64_t v75 = v134;
    uint64_t v125 = v70;
    while (1)
    {
      if (v72 >= *(void *)(v70 + 16))
      {
        __break(1u);
        goto LABEL_56;
      }
      uint64_t v76 = *(void *)(v71 + 72);
      os_log_type_t v77 = *(void (**)(char *, unint64_t, uint64_t))(v71 + 16);
      v77(v75, v131 + v76 * v72, v12);
      uint64_t v124 = *(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56);
      v124(v75, 0, 1, v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v75, 1, v12) == 1) {
        goto LABEL_47;
      }
      uint64_t v138 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v72;
      uint64_t v135 = (void (*)(void, void, void))*v136;
      v135(v74, v75, v12);
      if (*((void *)v140 + 2)
        && (uint64_t v78 = v140,
            sub_100AB75B0(&qword_1010C7188, (void (*)(uint64_t))&type metadata accessor for IndexPath),
            uint64_t v79 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v80 = -1 << v78[32],
            unint64_t v81 = v79 & ~v80,
            ((*(unint64_t *)((char *)v139 + ((v81 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v81) & 1) != 0))
      {
        uint64_t v82 = ~v80;
        while (1)
        {
          v77(v20, *((void *)v140 + 6) + v81 * v76, v12);
          sub_100AB75B0(&qword_1010C7190, (void (*)(uint64_t))&type metadata accessor for IndexPath);
          char v83 = dispatch thunk of static Equatable.== infix(_:_:)();
          os_log_type_t v84 = *v73;
          (*v73)(v20, v12);
          if (v83) {
            break;
          }
          unint64_t v81 = (v81 + 1) & v82;
          if (((*(unint64_t *)((char *)v139 + ((v81 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v81) & 1) == 0) {
            goto LABEL_30;
          }
        }
      }
      else
      {
LABEL_30:
        uint64_t v85 = *v127;
        uint64_t v86 = v127[1];
        uint64_t v87 = v86 + v128;
        uint64_t v88 = *(void *)(v86 + 16);
        uint64_t v133 = (unint64_t)v73 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        if (v85)
        {
          id v123 = (void *)(v85 + 16);
          uint64_t v122 = v85 + 32;
          swift_retain();
          swift_retain();
          uint64_t v89 = (uint64_t)v142;
          sub_100AB5E0C((uint64_t)v142, v87, v88, v123, v122);
          char v91 = v90;
          swift_release();
          swift_release();
          uint64_t v71 = v126;
          if (v91) {
            goto LABEL_37;
          }
          os_log_type_t v84 = *v73;
        }
        else
        {
          swift_retain();
          if (!v88)
          {
LABEL_36:
            swift_release();
            uint64_t v71 = v126;
            uint64_t v89 = (uint64_t)v142;
LABEL_37:
            uint64_t v93 = v119;
            uint64_t v94 = v120;
            v115(v119, v121, v120);
            Swift::Int v95 = IndexPath.section.getter();
            Swift::Bool v96 = IndexSet.contains(_:)(v95);
            v114(v93, v94);
            uint64_t v74 = v89;
            if (!v96)
            {
              v77(v118, v89, v12);
              uint64_t v97 = v144;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v97 = (void *)sub_100A91370(0, v97[2] + 1, 1, (char *)v97);
              }
              id v98 = (void (*)(char *, char *, uint64_t))v135;
              unint64_t v100 = v97[2];
              unint64_t v99 = v97[3];
              if (v100 >= v99 >> 1) {
                uint64_t v97 = (void *)sub_100A91370(v99 > 1, v100 + 1, 1, (char *)v97);
              }
              v97[2] = v100 + 1;
              v98((char *)v97 + v128 + v100 * v76, v118, v12);
              uint64_t v144 = v97;
            }
            (*v73)((char *)v74, v12);
            goto LABEL_22;
          }
          while (1)
          {
            v77(v20, v87, v12);
            sub_100AB75B0(&qword_1010C7190, (void (*)(uint64_t))&type metadata accessor for IndexPath);
            char v92 = dispatch thunk of static Equatable.== infix(_:_:)();
            os_log_type_t v84 = *v73;
            (*v73)(v20, v12);
            if (v92) {
              break;
            }
            v87 += v76;
            if (!--v88) {
              goto LABEL_36;
            }
          }
          swift_release();
          uint64_t v71 = v126;
        }
      }
      uint64_t v74 = (uint64_t)v142;
      v84(v142, v12);
LABEL_22:
      unint64_t v75 = v134;
      uint64_t v70 = v125;
      unint64_t v72 = (unint64_t)v138 + 1;
      if ((char *)v138 + 1 == v132)
      {
        v124(v134, 1, 1, v12);
        goto LABEL_47;
      }
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v126 + 56))(v134, 1, 1, v12);
LABEL_47:
  swift_bridgeObjectRelease();
  unint64_t v72 = a10;
  if (qword_1010C63B0 != -1) {
LABEL_56:
  }
    swift_once();
  uint64_t v101 = type metadata accessor for Logger();
  sub_100050A90(v101, (uint64_t)qword_1010C7258);
  uint64_t v102 = Logger.logObject.getter();
  os_log_type_t v103 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v102, v103))
  {
    uint64_t v104 = swift_slowAlloc();
    uint64_t v143 = swift_slowAlloc();
    *(_DWORD *)uint64_t v104 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v105 = Array.description.getter();
    unint64_t v107 = v106;
    swift_bridgeObjectRelease();
    *(void *)(v104 + 4) = sub_100075F3C(v105, v107, &v143);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v102, v103, "Cleaning up prefetched cells by reloading index paths: %s", (uint8_t *)v104, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  swift_bridgeObjectRetain();
  Class v108 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v137 reloadItemsAtIndexPaths:v108];

  if (v72)
  {
    swift_retain();
    uint64_t v109 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v109, v110))
    {
      uint64_t v111 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v111 = 0;
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "Performing alongside updates", v111, 2u);
      swift_slowDealloc();
    }

    ((void (*)(void))v72)();
    sub_10006ADFC(v72);
  }
  return swift_bridgeObjectRelease();
}

void sub_100AAFE84(int a1, uint64_t a2, void *a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for IndexPath();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100063814(&qword_1010C73E8);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = a2 + 16;
  if (qword_1010C63B0 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100050A90(v17, (uint64_t)qword_1010C7258);
  swift_retain_n();
  uint64_t v18 = Logger.logObject.getter();
  int v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, (os_log_type_t)v57))
  {
    os_log_t v46 = v18;
    uint64_t v48 = a3;
    int v49 = a1;
    uint64_t v50 = a5;
    uint64_t v51 = a4;
    uint64_t v19 = (_DWORD *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    uint64_t v63 = v44;
    os_log_type_t v45 = v19;
    *uint64_t v19 = 136315138;
    swift_beginAccess();
    uint64_t v20 = *(void *)(a2 + 16);
    uint64_t v21 = *(void *)(a2 + 24);
    uint64_t v47 = a2;
    uint64_t v64 = 0;
    unint64_t v65 = 0xE000000000000000;
    swift_retain();
    swift_retain();
    v22._uint64_t countAndFlagsBits = 91;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    uint64_t v23 = *(void *)(v21 + 16);
    uint64_t v43 = v20;
    uint64_t v52 = v21;
    if (v23)
    {
      unint64_t v42 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      uint64_t v24 = v21 + v42;
      uint64_t v61 = *(void *)(v11 + 72);
      uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
      swift_retain();
      swift_retain();
      v25(v16, v24, v10);
      uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v26(v16, 0, 1, v10);
      uint64_t v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      uint64_t v60 = v11 + 48;
      if (v59(v16, 1, v10) != 1)
      {
        uint64_t v58 = v26;
        v41[1] = (v11 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        uint64_t v56 = v11 + 32;
        v55(v13, v16, v10);
        sub_100063814(&qword_1010C73F0);
        uint64_t v27 = swift_allocObject();
        long long v54 = xmmword_100E251D0;
        *(_OWORD *)(v27 + 16) = xmmword_100E251D0;
        *(void *)(v27 + 56) = v10;
        uint64_t v28 = sub_100068018((uint64_t *)(v27 + 32));
        v25((char *)v28, (uint64_t)v13, v10);
        print<A>(_:separator:terminator:to:)();
        swift_bridgeObjectRelease();
        uint64_t v53 = *(void (**)(char *, uint64_t))(v11 + 8);
        v53(v13, v10);
        uint64_t v29 = v23 - 1;
        if (v23 == 1)
        {
          v58(v16, 1, 1, v10);
        }
        else
        {
          uint64_t v31 = v52 + v61 + v42;
          uint64_t v32 = v58;
          while (1)
          {
            v25(v16, v31, v10);
            v32(v16, 0, 1, v10);
            if (v59(v16, 1, v10) == 1) {
              break;
            }
            v55(v13, v16, v10);
            v33._uint64_t countAndFlagsBits = 8236;
            v33._object = (void *)0xE200000000000000;
            String.append(_:)(v33);
            sub_100063814(&qword_1010C73F0);
            uint64_t v34 = swift_allocObject();
            *(_OWORD *)(v34 + 16) = v54;
            *(void *)(v34 + 56) = v10;
            uint64_t v35 = sub_100068018((uint64_t *)(v34 + 32));
            v25((char *)v35, (uint64_t)v13, v10);
            print<A>(_:separator:terminator:to:)();
            uint64_t v32 = v58;
            swift_bridgeObjectRelease();
            v53(v13, v10);
            v31 += v61;
            if (!--v29)
            {
              v32(v16, 1, 1, v10);
              break;
            }
          }
        }
      }
    }
    else
    {
      int v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      swift_retain();
      swift_retain();
      v30(v16, 1, 1, v10);
    }
    swift_release();
    swift_release();
    v36._uint64_t countAndFlagsBits = 93;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    swift_release();
    swift_release();
    unint64_t v37 = sub_100075F3C(v64, v65, &v63);
    uint64_t v38 = (uint8_t *)v45;
    *(void *)(v45 + 1) = v37;
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v39 = v46;
    _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v57, "Reconfiguring index paths: %s", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a4 = v51;
    LOBYTE(a1) = v49;
    a3 = v48;
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  swift_retain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_endAccess();
  swift_release();
  [a3 reconfigureItemsAtIndexPaths:isa];

  if (a4) {
    a4(a1 & 1);
  }
}

uint64_t sub_100AB0544()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100014CA4(v0, qword_1010C7258);
  sub_100050A90(v0, (uint64_t)qword_1010C7258);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100AB05B8(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  type metadata accessor for IndexPath();
  uint64_t v1 = Array.description.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_100AB0624(void (*a1)(__n128))
{
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v4);
  sub_100AB75B0((unint64_t *)&unk_1010C77C0, (void (*)(uint64_t))&type metadata accessor for IndexPath);
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v7;
}

uint64_t type metadata accessor for AIDiffingUpdate()
{
  uint64_t result = qword_1010C72D8;
  if (!qword_1010C72D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100AB0798(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AIDiffingUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AB07FC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AIDiffingUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100AB0858()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100AB0890()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100AB08D0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 80)) {
    swift_release();
  }
  swift_release();
  if (*(void *)(v0 + 104)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_100AB0968()
{
  return sub_100AAEA6C(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));
}

uint64_t sub_100AB09A8()
{
  return swift_deallocObject();
}

char *sub_100AB09B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C73E0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *initializeBufferWithCopyOfBuffer for AIDiffingUpdate(uint64_t a1, void *a2, int *a3)
{
  uint64_t v4 = (char *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (char *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[1];
    if (v7)
    {
      uint64_t v8 = a2[2];
      *((void *)v4 + 1) = v7;
      *((void *)v4 + 2) = v8;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    }
    uint64_t v10 = a3[6];
    size_t v11 = &v4[v10];
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for IndexSet();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v14(&v4[a3[7]], (char *)a2 + a3[7], v13);
    uint64_t v15 = a3[9];
    *(void *)&v4[a3[8]] = *(void *)((char *)a2 + a3[8]);
    uint64_t v16 = &v4[v15];
    uint64_t v17 = (void *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *(void *)uint64_t v16 = *v17;
    *((void *)v16 + 1) = v18;
    uint64_t v19 = a3[10];
    uint64_t v20 = a3[11];
    uint64_t v21 = &v4[v19];
    Swift::String v22 = (void *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *(void *)uint64_t v21 = *v22;
    *((void *)v21 + 1) = v23;
    uint64_t v24 = &v4[v20];
    uint64_t v25 = (void *)((char *)a2 + v20);
    uint64_t v26 = v25[1];
    *(void *)uint64_t v24 = *v25;
    *((void *)v24 + 1) = v26;
    *(void *)&v4[a3[12]] = *(void *)((char *)a2 + a3[12]);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AIDiffingUpdate(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8)) {
    swift_release();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for IndexSet();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + *(int *)(a2 + 28), v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AIDiffingUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for IndexSet();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12(a1 + a3[7], a2 + a3[7], v11);
  uint64_t v13 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = a3[10];
  uint64_t v18 = a3[11];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  Swift::String v22 = (void *)(a1 + v18);
  uint64_t v23 = (void *)(a2 + v18);
  uint64_t v24 = v23[1];
  *Swift::String v22 = *v23;
  v22[1] = v24;
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AIDiffingUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v8 = (_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  if (!*(void *)(a1 + 8))
  {
    if (v7)
    {
      uint64_t v10 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v10;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *uint64_t v6 = *v8;
    goto LABEL_8;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v9;
  swift_retain();
  swift_release();
LABEL_8:
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for IndexSet();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24);
  v15(v12, v13, v14);
  v15(a1 + a3[7], a2 + a3[7], v14);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  swift_retain();
  swift_release();
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_retain();
  swift_release();
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  swift_retain();
  swift_release();
  *(void *)(v20 + 8) = *(void *)(v21 + 8);
  swift_retain();
  swift_release();
  uint64_t v22 = a3[11];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)(a1 + v22) = *(void *)(a2 + v22);
  swift_retain();
  swift_release();
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AIDiffingUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v7;
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for IndexSet();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v12(a1 + a3[7], a2 + a3[7], v11);
  uint64_t v13 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  uint64_t v14 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for AIDiffingUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v8 = (_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  if (!*(void *)(a1 + 8))
  {
    if (v7)
    {
      uint64_t v10 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v10;
      goto LABEL_8;
    }
LABEL_7:
    *uint64_t v6 = *v8;
    goto LABEL_8;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v9;
  swift_release();
LABEL_8:
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for IndexSet();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  v15(a1 + a3[7], a2 + a3[7], v14);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  swift_release();
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_release();
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  swift_release();
  *(void *)(v20 + 8) = *(void *)(v21 + 8);
  swift_release();
  uint64_t v22 = a3[11];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)(a1 + v22) = *(void *)(a2 + v22);
  swift_release();
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AIDiffingUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100AB139C);
}

uint64_t sub_100AB139C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndexSet();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 32));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AIDiffingUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100AB1474);
}

uint64_t sub_100AB1474(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for IndexSet();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100AB1534()
{
  uint64_t result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100AB15F4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100AB1690(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t sub_100AB1798(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_100AB180C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  swift_bridgeObjectRetain();
  v6(v8, v9, v5);
  return a1;
}

void *sub_100AB189C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *sub_100AB1934(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_100AB19BC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_100AB1B5C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x100AB1DBCLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t sub_100AB1DE4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t sub_100AB1DEC(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t sub_100AB1DF4(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100AB75B0(&qword_1010C7188, (void (*)(uint64_t))&type metadata accessor for IndexPath);
  swift_bridgeObjectRetain();
  Swift::String v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unsigned int v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unsigned int v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    int v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_100AB75B0(&qword_1010C7190, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unsigned int v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unsigned int v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100AB29A4((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100AB2118(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unsigned int v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100AB2C44(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100AB22C8()
{
  unint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100063814(&qword_1010C7400);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    unint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unsigned int v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100AB75B0(&qword_1010C7188, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v6;
  return result;
}

uint64_t sub_100AB26C4()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100063814(&qword_1010C7438);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *int64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_100AB29A4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100AB22C8();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100AB2DE0();
      goto LABEL_12;
    }
    sub_100AB3238();
  }
  uint64_t v13 = *v3;
  sub_100AB75B0(&qword_1010C7188, (void (*)(uint64_t))&type metadata accessor for IndexPath);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    int64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_100AB75B0(&qword_1010C7190, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100AB2C44(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100AB26C4();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100AB3084();
      goto LABEL_22;
    }
    sub_100AB35E8();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_100AB2DE0()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063814(&qword_1010C7400);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    *unint64_t v1 = v8;
    return result;
  }
  uint64_t v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    unint64_t v1 = v22;
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_100AB3084()
{
  unint64_t v1 = v0;
  sub_100063814(&qword_1010C7438);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100AB3238()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100063814(&qword_1010C7400);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100AB75B0(&qword_1010C7188, (void (*)(uint64_t))&type metadata accessor for IndexPath);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100AB35E8()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100063814(&qword_1010C7438);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_100AB3898(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            unint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              void *v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            int64_t v16 = (void *)(v15 + 8 * v3);
            unint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              void *v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100AB3A30(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48) + 24 * v6;
        uint64_t v10 = *(void *)(v9 + 8);
        unint64_t v11 = *(void **)(v9 + 16);
        Hasher.init(_seed:)();
        if (v10)
        {
          Hasher._combine(_:)(1uLL);
          id v12 = v11;
          swift_bridgeObjectRetain();
          String.hash(into:)();
        }
        else
        {
          Hasher._combine(_:)(0);
          id v13 = v11;
        }
        Swift::Int v14 = Hasher._finalize()();

        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8) {
            goto LABEL_5;
          }
        }
        else if (v15 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_14:
          uint64_t v16 = *(void *)(a2 + 48);
          unint64_t v17 = v16 + 24 * v3;
          int64_t v18 = (long long *)(v16 + 24 * v6);
          if (v3 != v6 || v17 >= (unint64_t)v18 + 24)
          {
            long long v19 = *v18;
            *(void *)(v17 + 16) = *((void *)v18 + 2);
            *(_OWORD *)unint64_t v17 = v19;
          }
          uint64_t v20 = *(void *)(a2 + 56);
          uint64_t v21 = (void *)(v20 + 8 * v3);
          BOOL v22 = (void *)(v20 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v21 >= v22 + 1))
          {
            *uint64_t v21 = *v22;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1 << result) - 1;
  }
  *uint64_t v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100AB3C4C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100A9A394(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100AC6D18();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v18 = 8 * v10;
    *(void *)(v16[6] + v18) = a2;
    *(void *)(v16[7] + v18) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      void v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_100AC643C(result, a3 & 1);
  uint64_t result = sub_100A9A394(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    uint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100AB3D7C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100071DE8(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100AC6EA8();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100AC66E4(result, a4 & 1);
  uint64_t result = sub_100071DE8(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  BOOL v20 = (uint64_t *)(v18[6] + 16 * v12);
  *BOOL v20 = a2;
  v20[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;

  return swift_bridgeObjectRetain();
}

void sub_100AB3EE0(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for IndexPath() - 8);
  int64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v3 = (void *)sub_100AC83EC(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_100AB3F88(v5);
  *a1 = v3;
}

void sub_100AB3F88(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void **)(v4 - 8);
  __chkstk_darwin(v4);
  id v136 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v151 = (char *)&v131 - v8;
  __chkstk_darwin(v9);
  uint64_t v146 = (char *)&v131 - v10;
  __chkstk_darwin(v11);
  uint64_t v147 = (char *)&v131 - v12;
  Swift::Int v13 = a1[1];
  Swift::Int v14 = _minimumMergeRunLength(_:)(v13);
  if (v14 >= v13)
  {
    if (v13 < 0) {
      goto LABEL_141;
    }
    if (v13) {
      sub_100AB4AFC(0, v13, 1, a1);
    }
    return;
  }
  if (v13 >= 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v13 + 1;
  }
  if (v13 < -1) {
    goto LABEL_140;
  }
  uint64_t v149 = v4;
  uint64_t v150 = a1;
  Swift::Int v133 = v14;
  if (v13 > 1)
  {
    uint64_t v16 = v15 >> 1;
    uint64_t v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v17 + 16) = v16;
    unint64_t v18 = (*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80);
    uint64_t v132 = (void *)v17;
    unint64_t v138 = v17 + v18;
LABEL_12:
    Swift::Int v20 = 0;
    uint64_t v144 = (void (**)(char *, uint64_t))(v5 + 1);
    uint64_t v145 = v5 + 2;
    uint64_t v154 = (void (**)(char *, uint64_t, uint64_t))(v5 + 4);
    char v19 = (char *)_swiftEmptyArrayStorage;
    uint64_t v139 = v5;
    while (1)
    {
      Swift::Int v22 = v20;
      Swift::Int v23 = v20 + 1;
      Swift::Int v137 = v20;
      if (v20 + 1 >= v13) {
        break;
      }
      uint64_t v24 = v149;
      uint64_t v25 = *v150;
      uint64_t v141 = v25;
      Swift::Int v142 = v20 + 1;
      Swift::Int v153 = v139[9];
      Swift::Int v26 = v153;
      BOOL v27 = (void (*)(char *, uint64_t, uint64_t))v139[2];
      v27(v147, v25 + v153 * v23, v149);
      uint64_t v28 = v25 + v26 * v22;
      int64_t v29 = v146;
      v27(v146, v28, v24);
      uint64_t v30 = sub_100AB75B0(&qword_1010C7430, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      BOOL v31 = v147;
      Swift::Int v148 = v30;
      LODWORD(v152) = dispatch thunk of static Comparable.< infix(_:_:)();
      Swift::Int v32 = v13;
      uint64_t v33 = (void (*)(char *, uint64_t))v139[1];
      uint64_t v34 = v29;
      Swift::Int v22 = v137;
      v33(v34, v24);
      v33(v31, v24);
      Swift::Int v35 = v153;
      Swift::Int v23 = v22 + 2;
      Swift::Int v143 = v32;
      if (v22 + 2 >= v32)
      {
        Swift::Int v13 = v143;
        if ((v152 & 1) == 0) {
          break;
        }
      }
      else
      {
        int v134 = v19;
        uint64_t v131 = v2;
        v142 *= v153;
        uint64_t v36 = v141;
        Swift::Int v37 = v153 * v23;
        while (1)
        {
          Swift::Int v38 = v23;
          uint64_t v39 = v147;
          uint64_t v40 = v149;
          v27(v147, v36 + v37, v149);
          uint64_t v41 = v146;
          v27(v146, v36 + v142, v40);
          int v42 = dispatch thunk of static Comparable.< infix(_:_:)();
          v33(v41, v40);
          v33(v39, v40);
          if ((v152 ^ v42)) {
            break;
          }
          Swift::Int v23 = v38 + 1;
          Swift::Int v35 = v153;
          v36 += v153;
          if (v143 == v38 + 1)
          {
            Swift::Int v13 = v143;
            Swift::Int v23 = v143;
            uint64_t v2 = v131;
            char v19 = v134;
            Swift::Int v22 = v137;
            if (v152) {
              goto LABEL_25;
            }
            goto LABEL_37;
          }
        }
        uint64_t v2 = v131;
        char v19 = v134;
        Swift::Int v23 = v38;
        Swift::Int v22 = v137;
        Swift::Int v13 = v143;
        Swift::Int v35 = v153;
        if ((v152 & 1) == 0) {
          break;
        }
      }
LABEL_25:
      if (v23 < v22) {
        goto LABEL_142;
      }
      if (v22 >= v23) {
        break;
      }
      int v134 = v19;
      uint64_t v43 = 0;
      uint64_t v44 = v35 * (v23 - 1);
      Swift::Int v45 = v23 * v35;
      uint64_t v46 = v22 * v35;
      uint64_t v47 = v150;
      Swift::Int v148 = v23;
      do
      {
        if (v22 != v23 + v43 - 1)
        {
          uint64_t v49 = v141;
          if (!v141) {
            goto LABEL_147;
          }
          uint64_t v50 = v2;
          unint64_t v51 = v141 + v46;
          uint64_t v52 = (char *)(v141 + v44);
          uint64_t v152 = *v154;
          v152(v136, v141 + v46, v149);
          if (v46 < v44 || v51 >= v49 + v45)
          {
            uint64_t v48 = v149;
            swift_arrayInitWithTakeFrontToBack();
          }
          else
          {
            uint64_t v48 = v149;
            if (v46 != v44) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          v152(v52, (uint64_t)v136, v48);
          uint64_t v2 = v50;
          uint64_t v47 = v150;
          Swift::Int v23 = v148;
          Swift::Int v35 = v153;
        }
        ++v22;
        --v43;
        v44 -= v35;
        v45 -= v35;
        v46 += v35;
      }
      while (v22 < v23 + v43);
      char v19 = v134;
      Swift::Int v22 = v137;
      Swift::Int v13 = v143;
LABEL_38:
      uint64_t v53 = v149;
      if (v23 < v13)
      {
        if (__OFSUB__(v23, v22)) {
          goto LABEL_139;
        }
        if (v23 - v22 < v133)
        {
          if (__OFADD__(v22, v133)) {
            goto LABEL_143;
          }
          if (v22 + v133 >= v13) {
            Swift::Int v54 = v13;
          }
          else {
            Swift::Int v54 = v22 + v133;
          }
          if (v54 < v22)
          {
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
            return;
          }
          if (v23 != v54)
          {
            int v134 = v19;
            uint64_t v131 = v2;
            uint64_t v55 = v139[9];
            uint64_t v140 = (void (*)(char *, uint64_t, uint64_t))v139[2];
            uint64_t v141 = v55;
            uint64_t v56 = v55 * (v23 - 1);
            Swift::Int v57 = v23 * v55;
            Swift::Int v135 = v54;
            do
            {
              uint64_t v59 = 0;
              Swift::Int v148 = v23;
              Swift::Int v142 = v57;
              Swift::Int v143 = v56;
              while (1)
              {
                uint64_t v60 = *v47;
                uint64_t v152 = (void (*)(char *, uint64_t, uint64_t))(v57 + v59);
                Swift::Int v153 = v22;
                Swift::Int v61 = v57 + v59 + v60;
                uint64_t v62 = v147;
                uint64_t v63 = v47;
                uint64_t v64 = v140;
                v140(v147, v61, v53);
                uint64_t v65 = v56 + v59 + v60;
                uint64_t v66 = v146;
                v64(v146, v65, v53);
                sub_100AB75B0(&qword_1010C7430, (void (*)(uint64_t))&type metadata accessor for IndexPath);
                LOBYTE(v60) = dispatch thunk of static Comparable.< infix(_:_:)();
                Class v67 = *v144;
                (*v144)(v66, v53);
                v67(v62, v53);
                if ((v60 & 1) == 0) {
                  break;
                }
                uint64_t v68 = *v63;
                if (!*v63) {
                  goto LABEL_145;
                }
                Swift::Int v57 = v142;
                uint64_t v56 = v143;
                id v69 = (char *)(v68 + v143 + v59);
                uint64_t v70 = *v154;
                uint64_t v71 = v149;
                (*v154)(v151, v68 + v142 + v59, v149);
                uint64_t v53 = v71;
                swift_arrayInitWithTakeFrontToBack();
                v70(v69, (uint64_t)v151, v71);
                v59 -= v141;
                Swift::Int v22 = v153 + 1;
                Swift::Int v58 = v148;
                uint64_t v47 = v150;
                if (v148 == v153 + 1) {
                  goto LABEL_49;
                }
              }
              Swift::Int v58 = v148;
              uint64_t v53 = v149;
              uint64_t v47 = v63;
              Swift::Int v57 = v142;
              uint64_t v56 = v143;
LABEL_49:
              Swift::Int v23 = v58 + 1;
              v56 += v141;
              v57 += v141;
              Swift::Int v22 = v137;
            }
            while (v23 != v135);
            Swift::Int v23 = v135;
            uint64_t v2 = v131;
            char v19 = v134;
          }
        }
      }
      if (v23 < v22) {
        goto LABEL_134;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      Swift::Int v148 = v23;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        char v19 = sub_100AC82C8(0, *((void *)v19 + 2) + 1, 1, v19);
      }
      unint64_t v74 = *((void *)v19 + 2);
      unint64_t v73 = *((void *)v19 + 3);
      unint64_t v21 = v74 + 1;
      if (v74 >= v73 >> 1) {
        char v19 = sub_100AC82C8((char *)(v73 > 1), v74 + 1, 1, v19);
      }
      *((void *)v19 + 2) = v21;
      unint64_t v75 = v19 + 32;
      uint64_t v76 = &v19[16 * v74 + 32];
      Swift::Int v77 = v148;
      *(void *)uint64_t v76 = v22;
      *((void *)v76 + 1) = v77;
      if (v74)
      {
        while (1)
        {
          unint64_t v78 = v21 - 1;
          if (v21 >= 4)
          {
            char v83 = &v75[16 * v21];
            uint64_t v84 = *((void *)v83 - 8);
            uint64_t v85 = *((void *)v83 - 7);
            BOOL v89 = __OFSUB__(v85, v84);
            uint64_t v86 = v85 - v84;
            if (v89) {
              goto LABEL_123;
            }
            uint64_t v88 = *((void *)v83 - 6);
            uint64_t v87 = *((void *)v83 - 5);
            BOOL v89 = __OFSUB__(v87, v88);
            uint64_t v81 = v87 - v88;
            char v82 = v89;
            if (v89) {
              goto LABEL_124;
            }
            unint64_t v90 = v21 - 2;
            char v91 = &v75[16 * v21 - 32];
            uint64_t v93 = *(void *)v91;
            uint64_t v92 = *((void *)v91 + 1);
            BOOL v89 = __OFSUB__(v92, v93);
            uint64_t v94 = v92 - v93;
            if (v89) {
              goto LABEL_125;
            }
            BOOL v89 = __OFADD__(v81, v94);
            uint64_t v95 = v81 + v94;
            if (v89) {
              goto LABEL_127;
            }
            if (v95 >= v86)
            {
              unint64_t v113 = &v75[16 * v78];
              uint64_t v115 = *(void *)v113;
              uint64_t v114 = *((void *)v113 + 1);
              BOOL v89 = __OFSUB__(v114, v115);
              uint64_t v116 = v114 - v115;
              if (v89) {
                goto LABEL_133;
              }
              BOOL v106 = v81 < v116;
              goto LABEL_94;
            }
          }
          else
          {
            if (v21 != 3)
            {
              uint64_t v107 = *((void *)v19 + 4);
              uint64_t v108 = *((void *)v19 + 5);
              BOOL v89 = __OFSUB__(v108, v107);
              uint64_t v100 = v108 - v107;
              char v101 = v89;
              goto LABEL_88;
            }
            uint64_t v80 = *((void *)v19 + 4);
            uint64_t v79 = *((void *)v19 + 5);
            BOOL v89 = __OFSUB__(v79, v80);
            uint64_t v81 = v79 - v80;
            char v82 = v89;
          }
          if (v82) {
            goto LABEL_126;
          }
          unint64_t v90 = v21 - 2;
          Swift::Bool v96 = &v75[16 * v21 - 32];
          uint64_t v98 = *(void *)v96;
          uint64_t v97 = *((void *)v96 + 1);
          BOOL v99 = __OFSUB__(v97, v98);
          uint64_t v100 = v97 - v98;
          char v101 = v99;
          if (v99) {
            goto LABEL_128;
          }
          uint64_t v102 = &v75[16 * v78];
          uint64_t v104 = *(void *)v102;
          uint64_t v103 = *((void *)v102 + 1);
          BOOL v89 = __OFSUB__(v103, v104);
          uint64_t v105 = v103 - v104;
          if (v89) {
            goto LABEL_130;
          }
          if (__OFADD__(v100, v105)) {
            goto LABEL_132;
          }
          if (v100 + v105 >= v81)
          {
            BOOL v106 = v81 < v105;
LABEL_94:
            if (v106) {
              unint64_t v78 = v90;
            }
            goto LABEL_96;
          }
LABEL_88:
          if (v101) {
            goto LABEL_129;
          }
          uint64_t v109 = &v75[16 * v78];
          uint64_t v111 = *(void *)v109;
          uint64_t v110 = *((void *)v109 + 1);
          BOOL v89 = __OFSUB__(v110, v111);
          uint64_t v112 = v110 - v111;
          if (v89) {
            goto LABEL_131;
          }
          if (v112 < v100) {
            goto LABEL_14;
          }
LABEL_96:
          unint64_t v117 = v78 - 1;
          if (v78 - 1 >= v21)
          {
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
            goto LABEL_144;
          }
          if (!*v150) {
            goto LABEL_146;
          }
          uint64_t v118 = v19;
          uint64_t v119 = &v75[16 * v117];
          uint64_t v120 = *(void *)v119;
          uint64_t v121 = &v75[16 * v78];
          uint64_t v122 = *((void *)v121 + 1);
          sub_100AB4E1C(*v150 + v139[9] * *(void *)v119, *v150 + v139[9] * *(void *)v121, *v150 + v139[9] * v122, v138);
          if (v2) {
            goto LABEL_117;
          }
          if (v122 < v120) {
            goto LABEL_120;
          }
          if (v78 > *((void *)v118 + 2)) {
            goto LABEL_121;
          }
          id v123 = v118;
          *(void *)uint64_t v119 = v120;
          *(void *)&v75[16 * v117 + 8] = v122;
          unint64_t v124 = *((void *)v118 + 2);
          if (v78 >= v124) {
            goto LABEL_122;
          }
          char v19 = v123;
          unint64_t v21 = v124 - 1;
          memmove(&v75[16 * v78], v121 + 16, 16 * (v124 - 1 - v78));
          *((void *)v19 + 2) = v124 - 1;
          if (v124 <= 2) {
            goto LABEL_14;
          }
        }
      }
      unint64_t v21 = 1;
LABEL_14:
      Swift::Int v13 = v150[1];
      Swift::Int v20 = v148;
      uint64_t v5 = v139;
      if (v148 >= v13) {
        goto LABEL_106;
      }
    }
LABEL_37:
    uint64_t v47 = v150;
    goto LABEL_38;
  }
  char v19 = (char *)_swiftEmptyArrayStorage;
  unint64_t v138 = (unint64_t)_swiftEmptyArrayStorage
       + ((*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80));
  uint64_t v132 = _swiftEmptyArrayStorage;
  if (v13 == 1) {
    goto LABEL_12;
  }
  unint64_t v21 = _swiftEmptyArrayStorage[2];
LABEL_106:
  if (v21 >= 2)
  {
    uint64_t v125 = *v150;
    do
    {
      unint64_t v126 = v21 - 2;
      if (v21 < 2) {
        goto LABEL_135;
      }
      if (!v125) {
        goto LABEL_148;
      }
      uint64_t v127 = *(void *)&v19[16 * v126 + 32];
      uint64_t v128 = *(void *)&v19[16 * v21 + 24];
      sub_100AB4E1C(v125 + v5[9] * v127, v125 + v5[9] * *(void *)&v19[16 * v21 + 16], v125 + v5[9] * v128, v138);
      if (v2) {
        break;
      }
      if (v128 < v127) {
        goto LABEL_136;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v19 = sub_100AC83C4((uint64_t)v19);
      }
      if (v126 >= *((void *)v19 + 2)) {
        goto LABEL_137;
      }
      uint64_t v129 = &v19[16 * v126 + 32];
      *(void *)uint64_t v129 = v127;
      *((void *)v129 + 1) = v128;
      unint64_t v130 = *((void *)v19 + 2);
      if (v21 > v130) {
        goto LABEL_138;
      }
      memmove(&v19[16 * v21 + 16], &v19[16 * v21 + 32], 16 * (v130 - v21));
      *((void *)v19 + 2) = v130 - 1;
      unint64_t v21 = v130 - 1;
    }
    while (v130 > 2);
  }
LABEL_117:
  swift_bridgeObjectRelease();
  v132[2] = 0;
  swift_bridgeObjectRelease();
}

void sub_100AB4AFC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v31 = a1;
  uint64_t v7 = type metadata accessor for IndexPath();
  __chkstk_darwin(v7);
  uint64_t v41 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  Swift::Int v37 = (char *)&v29 - v10;
  __n128 v13 = __chkstk_darwin(v11);
  uint64_t v36 = (char *)&v29 - v14;
  uint64_t v39 = a3;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void (**)(void, void, void, __n128))(v12 + 16);
    uint64_t v15 = v12 + 16;
    uint64_t v17 = *(void *)(v15 + 56);
    Swift::Int v32 = (void (**)(char *, uint64_t))(v15 - 8);
    uint64_t v33 = v16;
    uint64_t v34 = a4;
    uint64_t v35 = v15;
    uint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v44 = v17 * (v39 - 1);
    uint64_t v38 = v17;
    uint64_t v43 = v17 * v39;
LABEL_5:
    uint64_t v18 = 0;
    uint64_t v42 = v31;
    while (1)
    {
      uint64_t v19 = *a4;
      uint64_t v20 = v43 + v18 + *a4;
      unint64_t v21 = v36;
      Swift::Int v22 = (void (*)(char *, uint64_t, uint64_t))v33;
      v33(v36, v20, v7, v13);
      Swift::Int v23 = v37;
      v22(v37, v44 + v18 + v19, v7);
      sub_100AB75B0(&qword_1010C7430, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      LOBYTE(v22) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v24 = *v32;
      (*v32)(v23, v7);
      uint64_t v25 = v21;
      a4 = v34;
      v24(v25, v7);
      if ((v22 & 1) == 0)
      {
LABEL_4:
        v44 += v38;
        v43 += v38;
        if (++v39 == v30) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v26 = *a4;
      if (!*a4) {
        break;
      }
      BOOL v27 = (char *)(v26 + v44 + v18);
      uint64_t v28 = *v40;
      (*v40)(v41, v26 + v43 + v18, v7);
      swift_arrayInitWithTakeFrontToBack();
      v28(v27, (uint64_t)v41, v7);
      v18 -= v38;
      if (v39 == ++v42) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

void sub_100AB4E1C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Swift::Int v57 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v56 = (char *)&v48 - v12;
  uint64_t v54 = *(void *)(v13 + 72);
  if (!v54)
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    return;
  }
  if (a2 - a1 == 0x8000000000000000 && v54 == -1) {
    goto LABEL_67;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v54 == -1) {
    goto LABEL_68;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v54;
  unint64_t v60 = a1;
  unint64_t v59 = a4;
  if (v15 >= v14 / v54)
  {
    uint64_t v17 = v14 / v54 * v54;
    if (a4 < a2 || a2 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
      uint64_t v18 = v9;
    }
    else
    {
      uint64_t v18 = v9;
      if (a4 != a2) {
        swift_arrayInitWithTakeBackToFront();
      }
    }
    unint64_t v34 = a4 + v17;
    unint64_t v58 = a4 + v17;
    unint64_t v60 = a2;
    unint64_t v52 = a1;
    if (v17 >= 1 && a1 < a2)
    {
      unint64_t v36 = -v54;
      uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v18 + 16);
      uint64_t v37 = v18 + 16;
      uint64_t v50 = v37 - 8;
      unint64_t v51 = v38;
      unint64_t v53 = -v54;
      uint64_t v55 = v37;
      unint64_t v49 = a4;
      uint64_t v39 = v56;
      uint64_t v40 = (void (**)(char *, uint64_t))(v37 - 8);
      do
      {
        uint64_t v54 = a3 + v36;
        uint64_t v41 = v51;
        v51(v39, v34 + v36, v8);
        unint64_t v42 = a2 + v36;
        unint64_t v43 = a3;
        uint64_t v44 = v57;
        v41(v57, v42, v8);
        sub_100AB75B0(&qword_1010C7430, (void (*)(uint64_t))&type metadata accessor for IndexPath);
        LOBYTE(v41) = dispatch thunk of static Comparable.< infix(_:_:)();
        Swift::Int v45 = *v40;
        (*v40)(v44, v8);
        v45(v39, v8);
        if (v41)
        {
          a3 = v54;
          if (v43 < a2 || v54 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v46 = v49;
          }
          else
          {
            unint64_t v46 = v49;
            if (v43 != a2) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v36 = v53;
          v60 += v53;
        }
        else
        {
          unint64_t v47 = v58;
          a3 = v54;
          v58 += v53;
          if (v43 < v47 || v54 >= v47)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v42 = a2;
            unint64_t v46 = v49;
          }
          else
          {
            unint64_t v46 = v49;
            if (v43 != v47) {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v42 = a2;
          }
          unint64_t v36 = v53;
        }
        unint64_t v34 = v58;
        if (v58 <= v46) {
          break;
        }
        a2 = v42;
      }
      while (v42 > v52);
    }
  }
  else
  {
    uint64_t v16 = v15 * v54;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v53 = a4 + v16;
    unint64_t v58 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v55 = v9 + 16;
      unint64_t v21 = (void (**)(char *, uint64_t))(v9 + 8);
      do
      {
        unint64_t v22 = a3;
        Swift::Int v23 = v56;
        v20(v56, a2, v8);
        unint64_t v24 = a4;
        uint64_t v25 = v57;
        v20(v57, v24, v8);
        sub_100AB75B0(&qword_1010C7430, (void (*)(uint64_t))&type metadata accessor for IndexPath);
        char v26 = dispatch thunk of static Comparable.< infix(_:_:)();
        BOOL v27 = *v21;
        (*v21)(v25, v8);
        v27(v23, v8);
        unint64_t v28 = v60;
        if (v26)
        {
          uint64_t v29 = v54;
          unint64_t v30 = a2 + v54;
          if (v60 < a2 || v60 >= v30)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v22;
          }
          else
          {
            a3 = v22;
            if (v60 == a2) {
              unint64_t v28 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          uint64_t v29 = v54;
          unint64_t v32 = v59 + v54;
          if (v60 < v59 || v60 >= v32)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v22;
          }
          else
          {
            a3 = v22;
            if (v60 != v59) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v59 = v32;
          unint64_t v30 = a2;
        }
        unint64_t v60 = v28 + v29;
        a4 = v59;
        if (v59 >= v53) {
          break;
        }
        a2 = v30;
      }
      while (v30 < a3);
    }
  }
  sub_100AB53F0(&v60, &v59, (uint64_t *)&v58);
}

uint64_t sub_100AB53F0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_17;
  }
  if (v3 < v4 || v3 >= v4 + (uint64_t)(v5 - v4) / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

void (*sub_100AB54D4(void *a1, uint64_t a2))(uint64_t a1)
{
  unint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_1003FA1D8(v4);
  v4[9] = sub_100AB607C(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_100AB5564;
}

void sub_100AB5564(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);

  free(v1);
}

void (*sub_100AB55C4(void *a1, uint64_t a2, uint64_t a3, void *a4))(uint64_t a1)
{
  uint64_t v8 = malloc(0x60uLL);
  *a1 = v8;
  v8[8] = a3;
  v8[9] = a4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  id v10 = a4;
  v8[10] = sub_100AB6474(v8);
  v8[11] = sub_100AB62CC(v8 + 4, a2, a3, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
  return sub_100AB5680;
}

void sub_100AB5680(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 80);
  unint64_t v3 = *(void **)(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 88))();
  swift_bridgeObjectRelease();

  v2(v1, 0);

  free(v1);
}

uint64_t sub_100AB56F8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for IndexPath();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v10 = v8 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v11 = *(void *)(v8 + 16);
  if (*v1)
  {
    swift_retain();
    sub_100AB5E0C(a1, v10, v11, (void *)(v9 + 16), v9 + 32);
    char v13 = v12;
    swift_release();
    if ((v13 & 1) == 0) {
      return 0;
    }
  }
  else if (v11)
  {
    v20[1] = v1;
    uint64_t v15 = 0;
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16);
    uint64_t v17 = v4 + 16;
    uint64_t v16 = v18;
    uint64_t v21 = *(void *)(v17 + 56);
    uint64_t v22 = v11;
    do
    {
      v16(v7, v10, v3, v5);
      sub_100AB75B0(&qword_1010C7190, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v17 - 8))(v7, v3);
      if (v19) {
        return 0;
      }
      ++v15;
      v10 += v21;
    }
    while (v22 != v15);
  }
  sub_100AB590C(a1);
  return 1;
}

uint64_t sub_100AB590C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  uint64_t v9 = v2 + 1;
  uint64_t v10 = v2[1];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v2[1] = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100ACF520(0, *(void *)(v10 + 16) + 1, 1);
    uint64_t v10 = *v9;
  }
  unint64_t v13 = *(void *)(v10 + 16);
  unint64_t v12 = *(void *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    sub_100ACF520(v12 > 1, v13 + 1, 1);
    uint64_t v10 = *v9;
  }
  *(void *)(v10 + 16) = v13 + 1;
  uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v13, v8, v4);
  v2[1] = v10;
  uint64_t v15 = *(void *)(v10 + 16);
  if (*v2)
  {
    swift_beginAccess();
    if (static _HashTable.maximumCapacity(forScale:)() >= v15)
    {
      uint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v16 = *v2;
      if (!result)
      {
        if (!v16)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        uint64_t v16 = _HashTable.copy()();
        uint64_t result = swift_release();
        *uint64_t v2 = v16;
      }
      if (v16) {
        return _HashTable.UnsafeHandle.subscript.setter();
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v15 < 0x10)
  {
    return result;
  }
  return sub_100AB5B48();
}

uint64_t sub_100AB5B48()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  if (*v0)
  {
    swift_beginAccess();
    uint64_t v3 = *(void *)(v1 + 24) & 0x3FLL;
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = *(void *)(v2 + 16);
  }
  if (v4 < 0x10)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v6 = static _HashTable.scale(forCapacity:)();
  if (v3 <= v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v3;
  }
  uint64_t v5 = sub_100AB5BEC(v2, v7, 0, v3);
LABEL_11:
  uint64_t result = swift_release();
  uint64_t *v0 = v5;
  return result;
}

uint64_t sub_100AB5BEC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = static _HashTable.scale(forCapacity:)();
  uint64_t v9 = 0;
  if (a3) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = a2;
  }
  if (v10 <= v8) {
    uint64_t v10 = v8;
  }
  if (v10 <= a4) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v11 >= 5)
  {
    uint64_t v9 = _HashTable.init(scale:reservedScale:)();
    sub_100AB5C80(v9 + 16, v9 + 32, a1);
  }
  return v9;
}

uint64_t sub_100AB5C80(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v3 = (void *)result;
    type metadata accessor for IndexPath();
    sub_100AB75B0(&qword_1010C7188, (void (*)(uint64_t))&type metadata accessor for IndexPath);
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      if (__OFSUB__(1 << *v3, 1)) {
        break;
      }
      if (_HashTable.UnsafeHandle._startIterator(bucket:)())
      {
        while (1)
          _HashTable.BucketIterator.advance()();
      }
      uint64_t result = _HashTable.BucketIterator.currentValue.setter();
      if (++v4 == v6) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100AB5E0C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v27 = a2;
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100AB75B0(&qword_1010C7188, (void (*)(uint64_t))&type metadata accessor for IndexPath);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = 1 << *a4;
  BOOL v13 = __OFSUB__(v12, 1);
  uint64_t v14 = v12 - 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = v14 & result;
    uint64_t v16 = _HashTable.UnsafeHandle._startIterator(bucket:)();
    *(void *)&long long v36 = a4;
    *((void *)&v36 + 1) = a5;
    *(void *)&long long v37 = v15;
    *((void *)&v37 + 1) = v16;
    *(void *)&long long v38 = v17;
    *((void *)&v38 + 1) = v18;
    char v39 = 0;
    uint64_t v19 = _HashTable.BucketIterator.currentValue.getter();
    long long v28 = v36;
    long long v29 = v37;
    long long v30 = v38;
    char v31 = v39;
    if ((v20 & 1) == 0)
    {
      Swift::Int v23 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
      uint64_t v21 = v8 + 16;
      uint64_t v22 = v23;
      uint64_t v24 = *(void *)(v21 + 56);
      do
      {
        v22(v10, v27 + v24 * v19, v7);
        sub_100AB75B0(&qword_1010C7190, (void (*)(uint64_t))&type metadata accessor for IndexPath);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v21 - 8))(v10, v7);
        if (v25) {
          break;
        }
        _HashTable.BucketIterator.advance()();
        long long v32 = v28;
        long long v33 = v29;
        long long v34 = v30;
        char v35 = v31;
        uint64_t v19 = _HashTable.BucketIterator.currentValue.getter();
      }
      while ((v26 & 1) == 0);
    }
    return v19;
  }
  return result;
}

void (*sub_100AB607C(void *a1, uint64_t a2, char a3))(uint64_t **a1, char a2)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[2] = a2;
  v8[3] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_100A9A394(a2);
  *((unsigned char *)v8 + 9) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  char v13 = v10 ^ 1;
  uint64_t v14 = v12 + ((v10 ^ 1) & 1);
  if (__OFADD__(v12, (v10 ^ 1) & 1))
  {
    __break(1u);
  }
  else
  {
    unsigned __int8 v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[4] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *uint64_t v8 = v17;
        *((unsigned char *)v8 + 8) = v13 & 1;
        return sub_100AB61BC;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100AC6D18();
      goto LABEL_7;
    }
    sub_100AC643C(v14, a3 & 1);
    unint64_t v18 = sub_100A9A394(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[4] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100AB61BC(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  LOBYTE(v4) = *((unsigned char *)*a1 + 8);
  LOBYTE(v5) = *((unsigned char *)*a1 + 9);
  if (a2)
  {
    if ((*a1)[1]) {
      goto LABEL_8;
    }
    unint64_t v6 = v2[4];
    uint64_t v4 = *(void **)v2[3];
    if (*((unsigned char *)*a1 + 9)) {
      goto LABEL_11;
    }
    uint64_t v7 = v2[2];
    v4[(v6 >> 6) + 8] |= 1 << v6;
    uint64_t v8 = 8 * v6;
    *(void *)(v4[6] + v8) = v7;
    uint64_t v5 = v4[7];
    *(void *)(v5 + v8) = v3;
    uint64_t v9 = v4[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v3 = v9 + 1;
    if (!v10)
    {
LABEL_13:
      v4[2] = v3;
      goto LABEL_14;
    }
    __break(1u);
  }
  if (v4)
  {
LABEL_8:
    if (v5) {
      sub_100AB3898(v2[4], *(void *)v2[3]);
    }
    goto LABEL_14;
  }
  unint64_t v6 = v2[4];
  uint64_t v4 = *(void **)v2[3];
  if ((v5 & 1) == 0)
  {
    uint64_t v11 = v2[2];
    v4[(v6 >> 6) + 8] |= 1 << v6;
    uint64_t v12 = 8 * v6;
    *(void *)(v4[6] + v12) = v11;
    *(void *)(v4[7] + v12) = v3;
    uint64_t v13 = v4[2];
    BOOL v10 = __OFADD__(v13, 1);
    uint64_t v3 = v13 + 1;
    if (v10)
    {
      __break(1u);
      return;
    }
    goto LABEL_13;
  }
LABEL_11:
  *(void *)(v4[7] + 8 * v6) = v3;
LABEL_14:

  free(v2);
}

void (*sub_100AB62CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5))(uint64_t **a1)
{
  unint64_t v6 = v5;
  uint64_t v12 = malloc(0x38uLL);
  *a1 = v12;
  v12[3] = a4;
  v12[4] = v5;
  v12[1] = a2;
  void v12[2] = a3;
  uint64_t v13 = *v5;
  unint64_t v15 = sub_100023D64(a2, a3, a4);
  *((unsigned char *)v12 + 48) = v14 & 1;
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    char v19 = v14;
    uint64_t v20 = *(void *)(v13 + 24);
    if (v20 >= v18 && (a5 & 1) != 0)
    {
LABEL_7:
      v12[5] = v15;
      if (v19)
      {
LABEL_8:
        uint64_t v21 = *(void *)(*(void *)(*v6 + 56) + 8 * v15);
LABEL_12:
        *uint64_t v12 = v21;
        return sub_100AB6420;
      }
LABEL_11:
      uint64_t v21 = 0;
      goto LABEL_12;
    }
    if (v20 >= v18 && (a5 & 1) == 0)
    {
      sub_100AC7214();
      goto LABEL_7;
    }
    sub_100024164(v18, a5 & 1);
    unint64_t v22 = sub_100023D64(a2, a3, a4);
    if ((v19 & 1) == (v23 & 1))
    {
      unint64_t v15 = v22;
      v12[5] = v22;
      if (v19) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100AB6420(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_100AB64A4(*a1, *((unsigned char *)*a1 + 48), (uint64_t *)(*a1)[4], (*a1)[5], (*a1)[1], (*a1)[2], (void *)(*a1)[3]);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*sub_100AB6474(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_100AB7608;
}

uint64_t *sub_100AB64A4(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v9 = *result;
  if (*result)
  {
    BOOL v10 = (void *)*a3;
    if (a2)
    {
      *(void *)(v10[7] + 8 * a4) = v9;
    }
    else
    {
      v10[(a4 >> 6) + 8] |= 1 << a4;
      uint64_t v12 = (void *)(v10[6] + 24 * a4);
      *uint64_t v12 = a5;
      v12[1] = a6;
      void v12[2] = a7;
      *(void *)(v10[7] + 8 * a4) = v9;
      uint64_t v13 = v10[2];
      BOOL v14 = __OFADD__(v13, 1);
      uint64_t v15 = v13 + 1;
      if (v14)
      {
        __break(1u);
        return result;
      }
      v10[2] = v15;
      swift_bridgeObjectRetain();
      id v16 = a7;
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_100AB3A30(a4, *a3);
  }

  return (uint64_t *)swift_bridgeObjectRetain();
}

uint64_t sub_100AB6590(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  long long v28 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v27 = (char *)v21 - v6;
  uint64_t v7 = sub_100063814(&qword_1010C73E8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  sub_100AB75B0(&qword_1010C7188, (void (*)(uint64_t))&type metadata accessor for IndexPath);
  uint64_t v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = v11 + 40;
    uint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    char v25 = v12;
    unint64_t v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v23 = v14;
    uint64_t v26 = v11;
    id v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    BOOL v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      char v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      sub_100AB1DF4(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    char v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

uint64_t sub_100AB6838()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 88)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_100AB6890()
{
  return sub_100AAED78(*(void *)(v0 + 16), *(id *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void, void, void))(v0 + 40), *(uint64_t **)(v0 + 48), *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v0 + 56), *(uint64_t **)(v0 + 64), *(uint64_t **)(v0 + 72), *(char **)(v0 + 80), *(void *)(v0 + 88));
}

uint64_t sub_100AB68D0()
{
  return swift_deallocObject();
}

uint64_t sub_100AB68E0()
{
  swift_release();

  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return swift_deallocObject();
}

void sub_100AB6930(int a1)
{
  sub_100AAFE84(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(void))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100AB693C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010C6F50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AB69A4()
{
  return swift_deallocObject();
}

uint64_t sub_100AB69B4()
{
  return sub_100AAB07C();
}

uint64_t sub_100AB69BC@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100AB69C8()
{
  return sub_100AB05B8(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_100AB69D0()
{
  return swift_deallocObject();
}

unsigned char **sub_100AB69E0(unsigned char **result)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *(unsigned char *)(v1 + 16);
  *uint64_t result = v2 + 1;
  return result;
}

uint64_t sub_100AB69F4()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6A04()
{
  return sub_100ACB910(*(void (**)(void))(v0 + 16));
}

uint64_t sub_100AB6A0C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100AB6A38()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6A48()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6A58()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6A68@<X0>(unsigned char *a1@<X8>)
{
  return sub_100AAB114(a1);
}

uint64_t sub_100AB6A70()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 32))(&v2);
  return v2;
}

uint64_t sub_100AB6AA8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100AAB1FC(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100AB6ACC(uint64_t a1, uint64_t a2)
{
  return sub_100AAB2BC(a1, a2, *(uint64_t **)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100AB6AD8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, char *))(v2 + 32);
  uint64_t v6 = *a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = v5(v6, (char *)a1 + *(int *)(TupleTypeMetadata2 + 48));
  *a2 = result;
  a2[1] = v9;
  return result;
}

uint64_t sub_100AB6B58()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6B68()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6B78()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100AB6BB0()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  uint64_t v1 = Array.description.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_100AB6C18()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6C28()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6C38(uint64_t a1, uint64_t a2)
{
  return sub_100AABBEC(a1, a2, *(uint64_t (**)(uint64_t, uint64_t, __n128))(v2 + 32), *(void *)(v2 + 40), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72), *(uint64_t **)(v2 + 80), *(void *)(v2 + 88)) & 1;
}

uint64_t sub_100AB6C80()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6C90()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6CA0()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6CB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_100AB6CE4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100AB6CEC()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6CFC()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6D0C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6D1C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6D2C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6D3C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6D4C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6D5C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6D6C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6D7C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6D8C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6D9C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6DAC()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6DBC()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6DCC()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6DDC(uint64_t a1)
{
  uint64_t v2 = sub_100063814(&qword_1010C7408);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100AB6E3C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6E54()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6E68()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6E78()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6E88()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100AB6EC0()
{
  return sub_100AABE48(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100AB6EC8()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6ED8()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6EE8()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6EF8()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6F08()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6F18()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6F28()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6F38()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6F48()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6F58()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6F68()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6F78()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6F88()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6F98()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6FAC()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6FBC()
{
  return swift_deallocObject();
}

uint64_t sub_100AB6FCC@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100AB7014()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7024()
{
  return swift_deallocObject();
}

uint64_t sub_100AB703C()
{
  return sub_100AB0624(*(void (**)(__n128))(v0 + 16));
}

uint64_t sub_100AB7044()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7054()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7068()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7078()
{
  return swift_deallocObject();
}

uint64_t sub_100AB708C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB709C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB70B0()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t sub_100AB7138()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 32))();
}

uint64_t sub_100AB71A4()
{
  return swift_deallocObject();
}

uint64_t sub_100AB71B4()
{
  return swift_deallocObject();
}

uint64_t sub_100AB71C8()
{
  return swift_deallocObject();
}

uint64_t sub_100AB71D8()
{
  return swift_deallocObject();
}

uint64_t sub_100AB71E8()
{
  return swift_deallocObject();
}

uint64_t sub_100AB71F8()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7208()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7218()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7228()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7238()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7250()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7260()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7270()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7280()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7290()
{
  return swift_deallocObject();
}

uint64_t sub_100AB72A0()
{
  return swift_deallocObject();
}

uint64_t sub_100AB72B0()
{
  return swift_deallocObject();
}

uint64_t sub_100AB72C0()
{
  return swift_deallocObject();
}

uint64_t sub_100AB72D0()
{
  return swift_deallocObject();
}

uint64_t sub_100AB72E0()
{
  return swift_deallocObject();
}

void *sub_100AB72F0(void **a1)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  uint64_t v4 = *a1;
  *uint64_t v4 = v5;
  *a1 = v4 + 1;
  return result;
}

uint64_t sub_100AB733C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB734C()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7364()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_100AB73F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for IndexPath();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return v5(a1, v6, v3);
}

uint64_t sub_100AB7468()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7478()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7488()
{
  return swift_deallocObject();
}

uint64_t sub_100AB7498()
{
  return swift_deallocObject();
}

uint64_t sub_100AB74A8(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(v3 + 16))();
  unint64_t v8 = sub_100075F3C(v6, v7, a3);
  uint64_t v9 = (void *)*a1;
  *(void *)*a1 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v9 + 1;
  return result;
}

uint64_t sub_100AB7500(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100AB7544()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100AB757C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100AB75B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100AB7788()
{
  sub_100ABC08C();

  return static ApproximatelyEquatable<>.==~ infix(_:_:)();
}

uint64_t static ApproximatelyComparable<>.<~ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100AB781C(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of static Comparable.< infix(_:_:));
}

uint64_t static ApproximatelyComparable<>.>~ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100AB781C(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of static Comparable.> infix(_:_:));
}

uint64_t sub_100AB781C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (dispatch thunk of static ApproximatelyEquatable.==~ infix(_:_:)()) {
    return 0;
  }
  else {
    return a7(a1, a2, a3, a6) & 1;
  }
}

uint64_t Result.init(success:failure:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v38 = a5;
  uint64_t v37 = type metadata accessor for Optional();
  uint64_t v35 = *(void *)(v37 - 8);
  __chkstk_darwin();
  long long v33 = (char *)&v31 - v8;
  uint64_t v34 = *(void *)(a4 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a3 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Result();
  uint64_t v15 = *(void *)(v14 - 8);
  __n128 v16 = __chkstk_darwin();
  uint64_t v18 = (char *)&v31 - v17;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v11 + 48))(a1, 1, a3, v16) != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
    v27(v13, a1, a3);
    v27(v18, (uint64_t)v13, a3);
    uint64_t v25 = v38;
LABEL_6:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v25, v18, v14);
    uint64_t v26 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v25, v26, 1, v14);
  }
  long long v32 = v10;
  uint64_t v19 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
  uint64_t v20 = v35;
  uint64_t v21 = v33;
  uint64_t v22 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v33, v36, v37);
  uint64_t v23 = v34;
  int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v21, 1, a4);
  uint64_t v25 = v38;
  if (v24 != 1)
  {
    long long v28 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    uint64_t v29 = v32;
    v28(v32, v21, a4);
    v28(v18, v29, a4);
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v22);
  uint64_t v26 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v25, v26, 1, v14);
}

uint64_t Collection.limited(to:)(uint64_t a1, uint64_t a2)
{
  __n128 v5 = __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a2, v5);
  if (dispatch thunk of Collection.count.getter() > a1 && __OFSUB__(dispatch thunk of Collection.count.getter(), a1)) {
    __break(1u);
  }
  return Sequence.dropLast(_:)();
}

uint64_t Collection.asyncMap<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  uint64_t v6[5] = a2;
  uint64_t v7 = type metadata accessor for Optional();
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  return _swift_task_switch(sub_100AB7E50, 0, 0);
}

void sub_100AB7E50()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 48);
  long long v12 = *(_OWORD *)(v0 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v1, 1, 1, v6);
  uint64_t v8 = dispatch thunk of Collection.count.getter();
  uint64_t v9 = sub_100ABAC40(v1, v8, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  *(void *)(v0 + 16) = v9;
  swift_getTupleTypeMetadata2();
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 104) = v10;
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v6;
  *(void *)(v10 + 32) = v5;
  *(void *)(v10 + 40) = v3;
  *(_OWORD *)(v10 + 48) = v12;
  *(void *)(v10 + 64) = v0 + 16;
  uint64_t v13 = (char *)&dword_1010C7458 + dword_1010C7458;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v11;
  void *v11 = v0;
  v11[1] = sub_100AB8020;
  __asm { BR              X0; sub_100AB92BC }
}

uint64_t sub_100AB8020()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100AB8270;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100AB813C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100AB813C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v0 + 24) = *(void *)(v0 + 16);
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 56);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v4 = Sequence.compactMap<A>(_:)();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

uint64_t sub_100AB8270()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100AB82E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a8;
  v8[10] = v17;
  v8[7] = a6;
  v8[8] = a7;
  uint64_t v8[5] = a4;
  void v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  uint64_t v9 = type metadata accessor for Optional();
  v8[11] = v9;
  v8[12] = *(void *)(v9 - 8);
  v8[13] = swift_task_alloc();
  v8[14] = *(void *)(v17 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[15] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v8[16] = v11;
  v8[17] = *(void *)(v11 + 64);
  v8[18] = swift_task_alloc();
  sub_100063814(&qword_1010C6C98);
  v8[19] = swift_task_alloc();
  v8[20] = swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  v8[21] = swift_task_alloc();
  v8[22] = sub_10006389C(&qword_1010C65A8);
  uint64_t v12 = type metadata accessor for ThrowingTaskGroup.Iterator();
  v8[23] = v12;
  v8[24] = *(void *)(v12 - 8);
  v8[25] = swift_task_alloc();
  v8[26] = swift_getTupleTypeMetadata2();
  uint64_t v13 = type metadata accessor for Optional();
  v8[27] = v13;
  v8[28] = *(void *)(v13 - 8);
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  v8[31] = type metadata accessor for EnumeratedSequence();
  v8[32] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for EnumeratedSequence.Iterator();
  v8[33] = v14;
  v8[34] = *(void *)(v14 - 8);
  v8[35] = swift_task_alloc();
  return _swift_task_switch(sub_100AB868C, 0, 0);
}

uint64_t sub_100AB868C()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 128);
  Sequence.enumerated()();
  EnumeratedSequence.makeIterator()();
  uint64_t v22 = v3;
  uint64_t v23 = v2;
  uint64_t v24 = v2 - 8;
  while (1)
  {
    uint64_t v5 = *(void *)(v0 + 232);
    uint64_t v4 = *(void *)(v0 + 240);
    uint64_t v7 = *(void *)(v0 + 208);
    uint64_t v6 = *(void *)(v0 + 216);
    EnumeratedSequence.Iterator.next()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v4, v5, v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 48))(v4, 1, v7) == 1) {
      break;
    }
    uint64_t v8 = *(uint64_t **)(v0 + 240);
    uint64_t v9 = *(void *)(v0 + 152);
    uint64_t v10 = *(char **)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 120);
    uint64_t v27 = *(void *)(v0 + 80);
    uint64_t v12 = *(void *)(v0 + 48);
    uint64_t v28 = *(void *)(v0 + 40);
    uint64_t v13 = (char *)v8 + *(int *)(v23 + 48);
    uint64_t v26 = *v8;
    uint64_t v14 = type metadata accessor for TaskPriority();
    long long v25 = *(_OWORD *)(v0 + 64);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v15(v10, v13, v11);
    unint64_t v16 = (*(unsigned __int8 *)(v22 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = 0;
    *(void *)(v17 + 24) = 0;
    *(_OWORD *)(v17 + 32) = v25;
    *(void *)(v17 + 48) = v27;
    *(void *)(v17 + 56) = v26;
    *(void *)(v17 + 64) = v28;
    *(void *)(v17 + 72) = v12;
    v15((char *)(v17 + v16), v10, v11);
    type metadata accessor for ThrowingTaskGroup();
    swift_retain();
    sub_100AB90E8(v9, (uint64_t)&unk_1010C75F0, v17);
    sub_100066D00(v9);
  }
  (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 264));
  ThrowingTaskGroup.makeAsyncIterator()();
  *(void *)(v0 + 288) = type metadata accessor for Array();
  Array._makeMutableAndUnique()();
  Array._makeMutableAndUnique()();
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v18;
  void *v18 = v0;
  v18[1] = sub_100AB89EC;
  uint64_t v19 = *(void *)(v0 + 184);
  uint64_t v20 = *(void *)(v0 + 168);
  return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v20, 0, 0, v19, v0 + 16);
}

uint64_t sub_100AB89EC()
{
  swift_task_dealloc();
  if (v0) {
    uint64_t v1 = sub_100AB8DB4;
  }
  else {
    uint64_t v1 = sub_100AB8AFC;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100AB8AFC()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = (unint64_t *)v0[21];
  if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(v1 - 8) + 48))(v2, 1, v1) == 1)
  {
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = v0[12];
    uint64_t v6 = v0[13];
    uint64_t v7 = v0[11];
    uint64_t v8 = v0[9];
    uint64_t v9 = (uint64_t *)v0[7];
    unint64_t v10 = *v2;
    uint64_t v11 = (char *)v2 + *(int *)(v1 + 48);
    uint64_t v12 = *(void *)(v8 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v6, v11, v8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v8);
    Array._makeMutableAndUnique()();
    uint64_t v13 = *v9;
    sub_100ABABEC(v10, v13);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 40))(v13+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v10, v6, v7);
    uint64_t v14 = (void *)swift_task_alloc();
    v0[37] = v14;
    void *v14 = v0;
    v14[1] = sub_100AB89EC;
    uint64_t v15 = v0[23];
    uint64_t v16 = v0[21];
    return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v16, 0, 0, v15, v0 + 2);
  }
}

uint64_t sub_100AB8DB4()
{
  (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100AB8EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a7;
  v7[7] = v9;
  v7[4] = a5;
  v7[5] = a6;
  long long v7[2] = a1;
  id v7[3] = a4;
  return _swift_task_switch(sub_100AB8EE4, 0, 0);
}

uint64_t sub_100AB8EE4()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = (int *)v0[4];
  uint64_t v3 = (void *)v0[2];
  uint64_t v4 = (char *)v3 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  *uint64_t v3 = v2;
  uint64_t v8 = (uint64_t (*)(char *, uint64_t))((char *)v1 + *v1);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  void *v5 = v0;
  v5[1] = sub_100AB8FF4;
  uint64_t v6 = v0[6];
  return v8(v4, v6);
}

uint64_t sub_100AB8FF4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100AB90E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_100063814(&qword_1010C6C98);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007F600(a1, (uint64_t)v9);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100066D00((uint64_t)v9);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t sub_100AB92BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v9 + 16) = v18;
  void *v18 = v9;
  v18[1] = sub_1000154F4;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

BOOL Collection<>.contains(approximatelyMatching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v15[-v11];
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a1;
  Sequence.first(where:)();
  BOOL v13 = (*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v12, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
  return v13;
}

uint64_t Collection<>.first(approximatelyMatching:)()
{
  return Sequence.first(where:)();
}

uint64_t Collection<>.firstIndex(approximatelyMatching:)()
{
  return Collection.firstIndex(where:)();
}

uint64_t static DisplayUnit.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v37 = *(void *)(a3 - 8);
  uint64_t v4 = __chkstk_darwin(a1);
  long long v32 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v31 = (char *)&v30 - v6;
  uint64_t v34 = v7;
  uint64_t v8 = type metadata accessor for DisplayUnit();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v30 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v17 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v20 = (char *)&v30 + *(int *)(v17 + 48) - v18;
  uint64_t v33 = v9;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v21((char *)&v30 - v18, v35, v8);
  v21(v20, v36, v8);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v21(v14, (uint64_t)v19, v8);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v27 = v37;
      uint64_t v28 = v31;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v31, v20, a3);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      long long v25 = *(void (**)(char *, uint64_t))(v27 + 8);
      v25(v28, a3);
      uint64_t v26 = v14;
      goto LABEL_6;
    }
LABEL_8:
    (*(void (**)(char *, uint64_t))(v37 + 8))(v14, a3);
    char v24 = 0;
    uint64_t v8 = TupleTypeMetadata2;
    goto LABEL_9;
  }
  v21(v12, (uint64_t)v19, v8);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v14 = v12;
    goto LABEL_8;
  }
  uint64_t v22 = v37;
  uint64_t v23 = v32;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v32, v20, a3);
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  long long v25 = *(void (**)(char *, uint64_t))(v22 + 8);
  v25(v23, a3);
  uint64_t v26 = v12;
LABEL_6:
  v25(v26, a3);
  uint64_t v16 = v33;
LABEL_9:
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v8);
  return v24 & 1;
}

uint64_t sub_100AB99B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DisplayUnit.__derived_enum_equals(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t ClosedRange<>.linearMap(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - v9;
  __n128 v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v17 - v13, v3, v4, v12);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  dispatch thunk of static Numeric.* infix(_:_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, v4);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v15(v10, v4);
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, v4);
}

uint64_t ClosedRange<>.normalize(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v11 - v7;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  dispatch thunk of static FloatingPoint./ infix(_:_:)();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v5, v2);
  return ((uint64_t (*)(char *, uint64_t))v9)(v8, v2);
}

uint64_t ClosedRange<>.clampedNormalize(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClosedRange.clamp(_:)(v7, v8);
  ClosedRange<>.normalize(_:)((uint64_t)v6, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t Array.extract(_:)()
{
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v1 = _ArrayProtocol.filter(_:)();
  if (!v0)
  {
    swift_getWitnessTable();
    swift_getWitnessTable();
    RangeReplaceableCollection<>.removeAll(where:)();
  }
  return v1;
}

uint64_t Array.extractFirst(where:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Collection.firstIndex(where:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v2)
  {
    if (v6)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 1, 1);
    }
    else
    {
      Array.remove(at:)();
      return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 0, 1);
    }
  }
  return result;
}

uint64_t Array.removingDuplicates<A>(with:)()
{
  Set.init()();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v0 = _ArrayProtocol.filter(_:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100ABA10C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(class metadata base offset for KeyPath + *a3 + 8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  __chkstk_darwin();
  char v6 = (char *)&v9 - v5;
  swift_getAtKeyPath();
  type metadata accessor for Set();
  char v7 = Set.insert(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7 & 1;
}

uint64_t Collection.removingDuplicates<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = Set.init()();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = &v20;
  uint64_t v19 = a1;
  uint64_t v12 = Sequence.filter(_:)();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100ABA3D0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(class metadata base offset for KeyPath + *a3 + 8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(a1);
  __chkstk_darwin(v5);
  char v7 = (char *)&v10 - v6;
  swift_getAtKeyPath();
  type metadata accessor for Set();
  char v8 = Set.insert(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v8 & 1;
}

uint64_t Sequence.sorted<A>(by:comparator:)()
{
  return Sequence.sorted(by:)();
}

uint64_t sub_100ABA584(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(class metadata base offset for KeyPath + *a5 + 8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v16 - v11;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  char v13 = a3(v12, v9);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v14(v12, v6);
  return v13 & 1;
}

uint64_t Sequence<>.excluding(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  uint64_t v8[5] = a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = Sequence.exclude(_:)((uint64_t)sub_100ABC180, (uint64_t)v8, a2, a3);
  swift_release();
  return v9;
}

{
  uint64_t v7;
  void *v8;
  uint64_t v9;

  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v7 = Set.init<A>(_:)();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  uint64_t v8[5] = v7;
  uint64_t v9 = Sequence.exclude(_:)((uint64_t)sub_100ABC118, (uint64_t)v8, a2, a3);
  swift_release();
  return v9;
}

uint64_t sub_100ABA7A8()
{
  return Sequence<>.contains(_:)() & 1;
}

uint64_t Sequence.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __chkstk_darwin(a1);
  (*(void (**)(unsigned char *, uint64_t))(v10 + 16))(&v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  return Sequence.filter(_:)();
}

uint64_t Sequence<>.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[2] = a2;
  void v5[3] = a3;
  v5[4] = a4;
  v5[5] = a1;
  return Sequence.exclude(_:)((uint64_t)sub_100ABB000, (uint64_t)v5, a2, a3);
}

{
  void v5[8];

  void v5[2] = a2;
  void v5[3] = a3;
  v5[4] = a4;
  v5[5] = a1;
  return Sequence.exclude(_:)((uint64_t)sub_100ABB080, (uint64_t)v5, a2, a3);
}

uint64_t Sequence<>.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[2] = a2;
  v4[3] = a3;
  void v4[4] = a1;
  return Sequence.exclude(_:)((uint64_t)sub_100ABB06C, (uint64_t)v4, a2, a3);
}

uint64_t _s14MusicUtilities16EquatableIgnoredV12wrappedValuexvs_0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t _s14MusicUtilities16EquatableIgnoredV12wrappedValueACyxGx_tcfC_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t sub_100ABABEC(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_100ABAC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = static Array._allocateUninitialized(_:)();
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = result;
    if (a2)
    {
      uint64_t v9 = v7;
      uint64_t v10 = *(void *)(a3 - 8);
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v11(v7, a1, a3);
      uint64_t v12 = a2 - 1;
      if (v12)
      {
        uint64_t v13 = *(void *)(v10 + 72);
        uint64_t v14 = v9 + v13;
        do
        {
          v11(v14, a1, a3);
          v14 += v13;
          --v12;
        }
        while (v12);
      }
    }
    type metadata accessor for Array();
    return v8;
  }
  return result;
}

void sub_100ABAD44()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100081D08;
  uint64_t v2 = (char *)&dword_1010C7448 + dword_1010C7448;
  __asm { BR              X9; sub_100AB82E4 }
}

uint64_t sub_100ABAE44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_100ABAEB8()
{
  return sub_100ABAED4() & 1;
}

uint64_t sub_100ABAED4()
{
  return dispatch thunk of static ApproximatelyEquatable.==~ infix(_:_:)() & 1;
}

uint64_t type metadata accessor for DisplayUnit()
{
  return sub_10004CF5C();
}

uint64_t sub_100ABAF5C(uint64_t a1)
{
  return sub_100ABA10C(a1, *(void *)(v1 + 24), *(void **)(v1 + 32)) & 1;
}

uint64_t sub_100ABAF80(uint64_t a1)
{
  return sub_100ABA3D0(a1, *(void *)(v1 + 40), *(void **)(v1 + 48)) & 1;
}

uint64_t sub_100ABAFA8(uint64_t a1, uint64_t a2)
{
  return sub_100ABA584(a1, a2, *(uint64_t (**)(char *, char *))(v2 + 40), *(void *)(v2 + 48), *(void **)(v2 + 56)) & 1;
}

BOOL sub_100ABAFD0()
{
  return ((*(uint64_t (**)(void))(v0 + 32))() & 1) == 0;
}

uint64_t sub_100ABB000()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

BOOL sub_100ABB06C(void *a1)
{
  return *a1 == *(void *)(v1 + 32);
}

uint64_t sub_100ABB080()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_100ABB0F8()
{
  return swift_getWitnessTable();
}

uint64_t sub_100ABB114()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_100ABB1A0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(_DWORD *)(v4 + 80);
  if (v6 <= 7 && (unint64_t)(v5 + 1) <= 0x18 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    unsigned int v10 = a2[v5];
    if (v10 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_18;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_18;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_18;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_18:
          int v13 = (v12 | ((v10 - 2) << (8 * v5))) + 2;
          unsigned int v14 = v12 + 2;
          if (v5 >= 4) {
            unsigned int v10 = v14;
          }
          else {
            unsigned int v10 = v13;
          }
          break;
        default:
          break;
      }
    }
    (*(void (**)(void *))(v4 + 16))(a1);
    *((unsigned char *)v3 + v5) = v10 == 1;
  }
  else
  {
    uint64_t v9 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return v3;
}

uint64_t sub_100ABB308(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_10;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_10:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  BOOL v10 = v5 == 1;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
  *(unsigned char *)(a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_100ABB428(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 64);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v9 = a2[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_11;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_11;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_11;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_11:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    BOOL v14 = v9 == 1;
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
    a1[v8] = v14;
  }
  return a1;
}

uint64_t sub_100ABB590(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_10;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_10:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  BOOL v10 = v5 == 1;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
  *(unsigned char *)(a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_100ABB6B0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 64);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v9 = a2[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_11;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_11;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_11;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_11:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    BOOL v14 = v9 == 1;
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
    a1[v8] = v14;
  }
  return a1;
}

uint64_t sub_100ABB818(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_20;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v8 < 2)
    {
LABEL_20:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_20;
  }
LABEL_12:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void sub_100ABB940(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_32:
        __break(1u);
        JUMPOUT(0x100ABBAFCLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_20;
      case 3:
        goto LABEL_32;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      default:
LABEL_20:
        if (a2) {
LABEL_21:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_100ABBB24(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_10;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_10;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_10;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_10:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_100ABBBD0(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for EquatableIgnored()
{
  return sub_10004CF5C();
}

uint64_t sub_100ABBCD8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_100ABBE34(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x100ABC04CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for HashableIgnored()
{
  return sub_10004CF5C();
}

unint64_t sub_100ABC08C()
{
  unint64_t result = qword_1010C75E0;
  if (!qword_1010C75E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C75E0);
  }
  return result;
}

uint64_t sub_100ABC0E0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100ABC118(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();

  return Set.contains(_:)(a1, v3, AssociatedTypeWitness, v4);
}

uint64_t sub_100ABC180()
{
  return sub_100ABA7A8();
}

uint64_t sub_100ABC18C()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

void sub_100ABC27C()
{
  swift_getAssociatedTypeWitness();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000154F4;
  uint64_t v2 = (char *)&dword_1010C75E8 + dword_1010C75E8;
  __asm { BR              X9; sub_100AB8EB4 }
}

uint64_t Text.withChevron<A>(_:tintColor:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  char v37 = a4 & 1;
  uint64_t v10 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  id v11 = a1;
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [self systemImageNamed:v12 withConfiguration:v11];

  if (v13)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v14._uint64_t countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v14);
    v15._uint64_t countAndFlagsBits = 41154;
    v15._object = (void *)0xA200000000000000;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v15);
    v16._uint64_t countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v16);
    id v17 = [v13 imageWithRenderingMode:2];
    Image.init(uiImage:)();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release();
    v18._uint64_t countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v18);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v19 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v21 = v20;
    char v23 = v22 & 1;
    uint64_t v24 = Text.foregroundStyle<A>(_:)();
    uint64_t v36 = v13;
    uint64_t v26 = v25;
    char v28 = v27 & 1;
    sub_1000D1500(v19, v21, v23);
    swift_bridgeObjectRelease();
    uint64_t v29 = static Text.+ infix(_:_:)();
    uint64_t v31 = v30;
    LOBYTE(v21) = v32;
    a5 = v33;

    char v34 = v21 & 1;
    sub_1000D1500(v24, v26, v28);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a6 = v29;
  }
  else
  {
    *(void *)a6 = a2;
    uint64_t v31 = a3;
    char v34 = v37;
    sub_1001CC8D0(a2, a3, v37);
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)(a6 + 8) = v31;
  *(unsigned char *)(a6 + 16) = v34;
  *(void *)(a6 + 24) = a5;
  return result;
}

uint64_t Text.playableForegroundStyle<A>(_:isPlayable:)(uint64_t a1, char a2)
{
  __n128 v4 = __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7, v4);
  if (swift_dynamicCast())
  {
    if (a2) {
      int v8 = v10[7];
    }
    else {
      int v8 = static HierarchicalShapeStyle.tertiary.getter();
    }
    v10[3] = v8;
  }
  return Text.foregroundStyle<A>(_:)();
}

uint64_t View.playableForegroundStyle<A>(_:isPlayable:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a5;
  uint64_t v8 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PlayableForegroundStyle();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = __chkstk_darwin(v11);
  Swift::String v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v10, a1, a4, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a4);
  v15[*(int *)(v11 + 36)] = a2;
  View.modifier<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for PlayableForegroundStyle()
{
  return sub_10004CF5C();
}

uint64_t sub_100ABC9C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v64 = a1;
  uint64_t v67 = a3;
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for _ViewModifier_Content();
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v58 = *(void *)(a2 + 24);
  uint64_t v68 = type metadata accessor for _ForegroundStyleModifier();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v61 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v59 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v60 = (char *)&v56 - v10;
  sub_10006389C(&qword_1010C7710);
  uint64_t v69 = v5;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v57 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  __n128 v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  Swift::String v16 = (char *)&v56 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v56 - v18;
  uint64_t v20 = *(void *)(v6 - 8);
  __chkstk_darwin(v21);
  char v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = v24;
  uint64_t v25 = type metadata accessor for _ConditionalContent();
  uint64_t v65 = *(void *)(v25 - 8);
  uint64_t v66 = v25;
  __n128 v26 = __chkstk_darwin(v25);
  uint64_t v63 = (char *)&v56 - v27;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))(v23, v3, v6, v26);
  if (swift_dynamicCast())
  {
    uint64_t v61 = v7;
    uint64_t v28 = v57;
    uint64_t v29 = v19;
    uint64_t v30 = v16;
    uint64_t v31 = v62;
    if (*(unsigned char *)(v3 + *(int *)(a2 + 36))) {
      int v32 = v84;
    }
    else {
      int v32 = static HierarchicalShapeStyle.quaternary.getter();
    }
    int v84 = v32;
    uint64_t WitnessTable = swift_getWitnessTable();
    unint64_t v60 = (char *)WitnessTable;
    View.foregroundStyle<A>(_:)();
    uint64_t v46 = sub_100063858(&qword_1010C7718, &qword_1010C7710);
    uint64_t v72 = WitnessTable;
    uint64_t v73 = v46;
    uint64_t v64 = swift_getWitnessTable();
    unint64_t v47 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
    v47(v29, v30, v31);
    uint64_t v48 = *(void (**)(char *, uint64_t))(v28 + 8);
    v48(v30, v31);
    v47(v13, v29, v31);
    uint64_t v49 = swift_getWitnessTable();
    uint64_t v70 = v60;
    uint64_t v71 = v49;
    swift_getWitnessTable();
    unint64_t v42 = v63;
    sub_100ABD158((uint64_t)v13, v31);
    v48(v13, v31);
    v48(v29, v31);
    uint64_t v44 = v65;
    uint64_t v43 = v66;
  }
  else
  {
    uint64_t v33 = swift_getWitnessTable();
    uint64_t v34 = (uint64_t)v59;
    View.foregroundStyle<A>(_:)();
    uint64_t v35 = swift_getWitnessTable();
    uint64_t v82 = v33;
    uint64_t v83 = v35;
    uint64_t v64 = swift_getWitnessTable();
    uint64_t v36 = v61;
    char v37 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
    uint64_t v38 = v60;
    v37(v60, v34, v7);
    char v39 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v39(v34, v7);
    v37((char *)v34, (uint64_t)v38, v7);
    uint64_t v40 = sub_100063858(&qword_1010C7718, &qword_1010C7710);
    uint64_t v80 = v33;
    uint64_t v81 = v40;
    uint64_t v41 = v62;
    swift_getWitnessTable();
    unint64_t v42 = v63;
    sub_100ABD250(v34, v41, v7);
    v39(v34, v7);
    v39((uint64_t)v38, v7);
    uint64_t v44 = v65;
    uint64_t v43 = v66;
  }
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v51 = sub_100063858(&qword_1010C7718, &qword_1010C7710);
  uint64_t v78 = v50;
  uint64_t v79 = v51;
  uint64_t v52 = swift_getWitnessTable();
  uint64_t v53 = swift_getWitnessTable();
  uint64_t v76 = v50;
  uint64_t v77 = v53;
  uint64_t v54 = swift_getWitnessTable();
  uint64_t v74 = v52;
  uint64_t v75 = v54;
  swift_getWitnessTable();
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v67, v42, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v42, v43);
}

uint64_t sub_100ABD158(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  __n128 v5 = __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(a2 - 8) + 16))((char *)&v8 - v6, a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_100ABD250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for _ConditionalContent.Storage();
  __n128 v6 = __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(a3 - 8) + 16))((char *)&v9 - v7, a1, a3, v6);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t ListChevron.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  sub_100063814(&qword_1010C75F8);
  sub_100ABDA68();

  return Button.init(action:label:)();
}

uint64_t sub_100ABD400()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100ABD438@<X0>(uint64_t a1@<X8>)
{
  uint64_t v49 = a1;
  uint64_t v48 = sub_100063814(&qword_1010C7620);
  __chkstk_darwin(v48);
  uint64_t v54 = (char *)&v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for Image.Scale();
  uint64_t v2 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v51 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100063814(&qword_1010C7720);
  uint64_t v4 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  __n128 v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_100063814(&qword_1010C7618);
  __chkstk_darwin(v50);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100063814(&qword_1010C7728);
  uint64_t v45 = *(void *)(v9 - 8);
  uint64_t v46 = v9;
  __chkstk_darwin(v9);
  uint64_t v44 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100063814(&qword_1010C7610);
  __chkstk_darwin(v11 - 8);
  unint64_t v47 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = Image.init(systemName:)();
  uint64_t v14 = static Font.body.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v55 = v13;
  uint64_t v56 = KeyPath;
  unint64_t v57 = v14;
  static Font.Weight.semibold.getter();
  sub_100063814(&qword_1010C7630);
  sub_100ABDD0C();
  View.fontWeight(_:)();
  uint64_t v16 = v50;
  swift_release();
  swift_release();
  swift_release();
  uint64_t v18 = v51;
  uint64_t v17 = v52;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v51, enum case for Image.Scale.small(_:), v52);
  uint64_t v19 = swift_getKeyPath();
  uint64_t v20 = (uint64_t *)&v8[*(int *)(v16 + 36)];
  uint64_t v21 = sub_100063814(&qword_1010C7658);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)v20 + *(int *)(v21 + 28), v18, v17);
  *uint64_t v20 = v19;
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v43 = v8;
  char v23 = v8;
  uint64_t v24 = v53;
  v22(v23, v6, v53);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v18, v17);
  uint64_t v25 = v6;
  uint64_t v26 = (uint64_t)v54;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v25, v24);
  uint64_t v27 = enum case for DynamicTypeSize.accessibility1(_:);
  uint64_t v28 = type metadata accessor for DynamicTypeSize();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104))(v26, v27, v28);
  sub_100ABE610((unint64_t *)&unk_1010C7730, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    unint64_t v30 = sub_100ABDC38();
    uint64_t v31 = sub_100063858(&qword_1010C7660, &qword_1010C7620);
    uint64_t v32 = (uint64_t)v43;
    uint64_t v33 = v44;
    uint64_t v34 = v48;
    View.dynamicTypeSize<A>(_:)();
    sub_1000637B8(v26, &qword_1010C7620);
    sub_1000637B8(v32, &qword_1010C7618);
    uint64_t v55 = v16;
    uint64_t v56 = v34;
    unint64_t v57 = v30;
    uint64_t v58 = v31;
    swift_getOpaqueTypeConformance2();
    uint64_t v35 = v46;
    uint64_t v36 = (uint64_t)v47;
    View.accessibilityHidden(_:)();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v35);
    id v37 = [self tertiaryLabelColor];
    uint64_t v38 = Color.init(uiColor:)();
    uint64_t v39 = swift_getKeyPath();
    uint64_t v55 = v38;
    swift_retain();
    uint64_t v40 = AnyShapeStyle.init<A>(_:)();
    uint64_t v41 = v49;
    sub_100ABE6B0(v36, v49);
    swift_release();
    unint64_t v42 = (uint64_t *)(v41 + *(int *)(sub_100063814(&qword_1010C75F8) + 36));
    *unint64_t v42 = v39;
    v42[1] = v40;
    return sub_1000637B8(v36, &qword_1010C7610);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100ABDA68()
{
  unint64_t result = qword_1010C7600;
  if (!qword_1010C7600)
  {
    sub_10006389C(&qword_1010C75F8);
    sub_100ABDB08();
    sub_100063858(&qword_1010C7670, &qword_1010C7678);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7600);
  }
  return result;
}

unint64_t sub_100ABDB08()
{
  unint64_t result = qword_1010C7608;
  if (!qword_1010C7608)
  {
    sub_10006389C(&qword_1010C7610);
    sub_10006389C(&qword_1010C7618);
    sub_10006389C(&qword_1010C7620);
    sub_100ABDC38();
    sub_100063858(&qword_1010C7660, &qword_1010C7620);
    swift_getOpaqueTypeConformance2();
    sub_100ABE610(&qword_1010C7668, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7608);
  }
  return result;
}

unint64_t sub_100ABDC38()
{
  unint64_t result = qword_1010C7628;
  if (!qword_1010C7628)
  {
    sub_10006389C(&qword_1010C7618);
    sub_10006389C(&qword_1010C7630);
    sub_100ABDD0C();
    swift_getOpaqueTypeConformance2();
    sub_100063858(&qword_1010C7650, &qword_1010C7658);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7628);
  }
  return result;
}

unint64_t sub_100ABDD0C()
{
  unint64_t result = qword_1010C7638;
  if (!qword_1010C7638)
  {
    sub_10006389C(&qword_1010C7630);
    sub_100063858(&qword_1010C7640, &qword_1010C7648);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7638);
  }
  return result;
}

uint64_t sub_100ABDDAC()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  sub_100063814(&qword_1010C75F8);
  sub_100ABDA68();

  return Button.init(action:label:)();
}

uint64_t _UIHostingView.init(content:)(uint64_t a1)
{
  __n128 v1 = __chkstk_darwin(a1);
  v2(v1);
  return dispatch thunk of _UIHostingView.__allocating_init(rootView:)();
}

uint64_t sub_100ABDEEC()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ListChevron()
{
  return &type metadata for ListChevron;
}

void *sub_100ABDF18()
{
  return &protocol witness table for Text;
}

uint64_t sub_100ABDF24()
{
  return swift_getWitnessTable();
}

uint64_t sub_100ABDFB8()
{
  return sub_100063858(&qword_1010C7680, qword_1010C7688);
}

uint64_t sub_100ABDFF4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100ABE08C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_22;
      }
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_14;
    }
  }
LABEL_22:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + v6);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void sub_100ABE21C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x100ABE45CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFE)
        {
          a1[v9] = a2 + 1;
        }
        else
        {
          uint64_t v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

uint64_t sub_100ABE484()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100ABE4C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100ABE4F4()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_100ABE520()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_100ABE544(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Image.Scale();
  __n128 v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return EnvironmentValues.imageScale.setter();
}

uint64_t sub_100ABE610(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100ABE658@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100ABE684()
{
  return EnvironmentValues.tint.setter();
}

uint64_t sub_100ABE6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010C7610);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100ABE718()
{
  return swift_getWitnessTable();
}

uint64_t sub_100ABE8B8(unint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v1 = v3;
  if (!result || (v3 & 0x8000000000000000) != 0 || (v3 & 0x4000000000000000) != 0)
  {
    uint64_t result = sub_100659910(v3);
    unint64_t v3 = result;
    *unint64_t v1 = result;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v5 + 8 * a1;
    uint64_t v9 = *(void *)(v8 + 32);
    memmove((void *)(v8 + 32), (const void *)(v8 + 40), 8 * (v6 - 1 - a1));
    *(void *)(v5 + 16) = v7;
    specialized Array._endMutation()();
    return v9;
  }
  return result;
}

size_t sub_100ABE950@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  size_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    size_t result = sub_100AC6428(v5);
    uint64_t v5 = (void *)result;
  }
  unint64_t v7 = v5[2];
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v8 = v7 - 1;
    uint64_t v9 = *(void *)(_s9_ObserverC18HandlerAssociationVMa(0) - 8);
    uint64_t v10 = *(void *)(v9 + 72);
    unint64_t v11 = (unint64_t)v5
        + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + v10 * a1;
    size_t result = sub_100AC541C(v11, a2);
    if (v10 > 0 || v11 >= v11 + v10 + v10 * (v8 - a1))
    {
      size_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10)
    {
      size_t result = swift_arrayInitWithTakeBackToFront();
    }
    void v5[2] = v8;
    *uint64_t v2 = v5;
  }
  return result;
}

UIBarButtonItem __swiftcall UIBarButtonItem.init(image:style:)(UIImage_optional image, UIBarButtonItemStyle style)
{
  Class isa = image.value.super.isa;
  id v3 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithImage:image.value.super.isa style:*(void *)&image.is_nil target:0 action:0];

  return (UIBarButtonItem)v3;
}

void *UIBarButtonItem.spacerBarButtonTag.unsafeMutableAddressor()
{
  return &static UIBarButtonItem.spacerBarButtonTag;
}

uint64_t static UIBarButtonItem.spacerBarButtonTag.getter()
{
  return 9999;
}

double static UIBarButtonItem.preferredFixedSpace.getter()
{
  if (qword_1010C63B8 != -1) {
    swift_once();
  }
  return *(double *)&static UIBarButtonItem.preferredFixedSpace;
}

id static UIBarButtonItem.spacerBarButtonItem()()
{
  uint64_t v0 = self;
  if (qword_1010C63B8 != -1) {
    swift_once();
  }
  id v1 = [v0 fixedSpaceItemOfWidth:*(double *)&static UIBarButtonItem.preferredFixedSpace];
  [v1 setTag:9999];
  return v1;
}

UIBarButtonItem_optional __swiftcall UINavigationItem.existingBarButtonItem(for:)(UIView a1)
{
  uint64_t v2 = v1;
  id v3 = [v1 rightBarButtonItems];
  if (v3)
  {
    uint64_t v4 = v3;
    sub_100057778(0, (unint64_t *)&qword_1010C7740);
    unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v32 = v2;
    if (v5 >> 62) {
      goto LABEL_14;
    }
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t v7 = a1.super.super.isa;
    swift_bridgeObjectRetain();
    for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v8 = 4;
      while (1)
      {
        id v9 = (v5 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : *(id *)(v5 + 8 * v8);
        uint64_t v10 = v9;
        uint64_t v11 = v8 - 3;
        if (__OFADD__(v8 - 4, 1)) {
          break;
        }
        id v12 = [v9 customView];
        if (v12)
        {
          int v13 = v12;
          sub_100057778(0, (unint64_t *)&qword_1010C7748);
          unsigned int v14 = a1.super.super.isa;
          id v15 = v13;
          LOBYTE(v13) = static NSObject.== infix(_:_:)();

          if (v13)
          {

            swift_bridgeObjectRelease_n();
            goto LABEL_33;
          }
        }

        ++v8;
        if (v11 == v6) {
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_14:
      int v17 = a1.super.super.isa;
      swift_bridgeObjectRetain();
    }
LABEL_15:

    swift_bridgeObjectRelease_n();
    uint64_t v2 = v32;
  }
  id v18 = [v2 leftBarButtonItems:v32];
  if (v18)
  {
    uint64_t v19 = v18;
    sub_100057778(0, (unint64_t *)&qword_1010C7740);
    unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v20 >> 62) {
      goto LABEL_30;
    }
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v22 = a1.super.super.isa;
    swift_bridgeObjectRetain();
    for (; v21; uint64_t v21 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v23 = 4;
      while (1)
      {
        id v24 = (v20 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(v20 + 8 * v23);
        uint64_t v10 = v24;
        uint64_t v25 = v23 - 3;
        if (__OFADD__(v23 - 4, 1)) {
          break;
        }
        id v26 = [v24 customView];
        if (v26)
        {
          uint64_t v27 = v26;
          sub_100057778(0, (unint64_t *)&qword_1010C7748);
          uint64_t v28 = a1.super.super.isa;
          id v29 = v27;
          LOBYTE(v27) = static NSObject.== infix(_:_:)();

          if (v27)
          {

            swift_bridgeObjectRelease();
            goto LABEL_32;
          }
        }

        ++v23;
        if (v25 == v21) {
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_30:
      unint64_t v30 = a1.super.super.isa;
      swift_bridgeObjectRetain();
    }
LABEL_31:

    swift_bridgeObjectRelease();
    uint64_t v10 = 0;
LABEL_32:
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_33:
  uint64_t v31 = (objc_class *)v10;
  result.value.super.super.Class isa = v31;
  result.is_nil = v16;
  return result;
}

uint64_t Collection<>.first(embedding:)()
{
  Sequence.first(where:)();
  return v1;
}

void *UINavigationItem.existingBarButtonItems(for:)(unint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = [v1 rightBarButtonItems];
  if (v4)
  {
    unint64_t v5 = v4;
    sub_100057778(0, (unint64_t *)&qword_1010C7740);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    unint64_t v7 = sub_100AC4564(v6, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100A9DD10((unint64_t)v7);
  }
  id v8 = [v2 leftBarButtonItems];
  if (v8)
  {
    id v9 = v8;
    sub_100057778(0, (unint64_t *)&qword_1010C7740);
    unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    uint64_t v11 = sub_100AC4564(v10, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100A9DD10((unint64_t)v11);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t Collection<>.all(embedding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v7 = __chkstk_darwin(a1);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v9 + 16))(&v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v3, a2, v7);
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a1;
  return Sequence.filter(_:)();
}

id sub_100ABF1D4(id *a1, void *a2)
{
  id result = [*a1 customView];
  if (result)
  {
    id v4 = result;
    sub_100057778(0, (unint64_t *)&qword_1010C7748);
    id v5 = a2;
    id v6 = v4;
    char v7 = static NSObject.== infix(_:_:)();

    return (id)(v7 & 1);
  }
  return result;
}

id sub_100ABF278(id *a1, unint64_t a2)
{
  id result = [*a1 customView];
  if (result)
  {
    id v4 = result;
    char v5 = sub_100ACE668((uint64_t)result, a2);

    return (id)(v5 & 1);
  }
  return result;
}

void UIWindowScene.mainWindow.getter()
{
  if ([v0 delegate])
  {
    uint64_t v1 = (void *)swift_dynamicCastObjCProtocolConditional();
    if (v1)
    {
      uint64_t v2 = v1;
      if ([v1 respondsToSelector:"window"])
      {
        [v2 window];
        swift_unknownObjectRelease();
        return;
      }
    }
    swift_unknownObjectRelease();
  }
  id v3 = [v0 windows];
  sub_100057778(0, &qword_1010C7750);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v6) {
      goto LABEL_11;
    }
  }
  else if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  if ((v4 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_11;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v5 = *(id *)(v4 + 32);
    goto LABEL_11;
  }
  __break(1u);
}

id UIWindowScene.rootViewController.getter()
{
  UIWindowScene.mainWindow.getter();
  uint64_t v1 = v0;
  id v2 = [v0 rootViewController];

  return v2;
}

uint64_t static UICollectionReusableView.reuseIdentifier.getter()
{
  return String.init<A>(describing:)();
}

void UICollectionView.register<A>(_:reuseIdentifier:)()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v2 = String._bridgeToObjectiveC()();
  [v0 registerClass:ObjCClassFromMetadata forCellWithReuseIdentifier:v2];
}

void UICollectionView.register<A>(_:ofKind:reuseIdentifier:)()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = String._bridgeToObjectiveC()();
  [v0 registerClass:ObjCClassFromMetadata forSupplementaryViewOfKind:v2 withReuseIdentifier:v3];
}

uint64_t UICollectionView.dequeue<A>(_:forItemAt:reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v9 = String._bridgeToObjectiveC()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v11 = [v3 dequeueReusableCellWithReuseIdentifier:v9 forIndexPath:isa];

  uint64_t result = swift_dynamicCastUnknownClass();
  if (!result)
  {

    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
    unint64_t v16 = 0;
    unint64_t v17 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    unint64_t v16 = 0xD00000000000001ELL;
    unint64_t v17 = 0x8000000100DD2780;
    v13._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 544497952;
    v14._object = (void *)0xE400000000000000;
    String.append(_:)(v14);
    sub_100AC4D84((unint64_t *)&unk_1010C77C0, (void (*)(uint64_t))&type metadata accessor for IndexPath);
    v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t UICollectionView.dequeue<A>(_:ofKind:for:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  v20[1] = a1;
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v14 = [v5 dequeueReusableSupplementaryViewOfKind:v11 withReuseIdentifier:v12 forIndexPath:isa];

  uint64_t result = swift_dynamicCastUnknownClass();
  if (!result)
  {

    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
    void v20[2] = 0;
    v20[3] = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v16._object = (void *)0x8000000100DD27A0;
    v16._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 544497952;
    v18._object = (void *)0xE400000000000000;
    String.append(_:)(v18);
    sub_100AC4D84((unint64_t *)&unk_1010C77C0, (void (*)(uint64_t))&type metadata accessor for IndexPath);
    v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t UICollectionView.globalIndex(for:)()
{
  id v1 = [v0 numberOfSections];
  uint64_t result = IndexPath.section.getter();
  if (__OFADD__(result, 1))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result + 1 >= (uint64_t)v1) {
    uint64_t v3 = (uint64_t)v1;
  }
  else {
    uint64_t v3 = result + 1;
  }
  if (v3 < 0) {
    goto LABEL_20;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  while (1)
  {
    if (v3 == v5)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    uint64_t v6 = (uint64_t)[v0 numberOfItemsInSection:v5];
    uint64_t result = IndexPath.section.getter();
    if (v5 == result) {
      break;
    }
    BOOL v7 = __OFADD__(v4, v6);
    v4 += v6;
    if (v7) {
      goto LABEL_18;
    }
    if (v3 == ++v5) {
      return 0;
    }
  }
  if (IndexPath.item.getter() >= v6) {
    return 0;
  }
  uint64_t v8 = IndexPath.item.getter();
  BOOL v7 = __OFADD__(v4, v8);
  uint64_t result = v4 + v8;
  if (v7) {
    goto LABEL_21;
  }
  return result;
}

uint64_t UICollectionView.indexPath(forGlobalIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100063814(&qword_1010C73E8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for IndexPath();
  unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v10(a2, 1, 1, v9);
  uint64_t result = (uint64_t)[v3 numberOfSections];
  if (result < 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    uint64_t v12 = result;
    uint64_t v17 = a2;
    if (result)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      while (1)
      {
        if (v12 == v14)
        {
          __break(1u);
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }
        uint64_t result = (uint64_t)[v3 numberOfItemsInSection:v14];
        if (__OFADD__(v13, result)) {
          goto LABEL_13;
        }
        if (v13 + result > a1) {
          break;
        }
        ++v14;
        v13 += result;
        if (v12 == v14) {
          return result;
        }
      }
      uint64_t result = a1 - v13;
      if (__OFSUB__(a1, v13)) {
        goto LABEL_15;
      }
      IndexPath.init(item:section:)();
      uint64_t v15 = v17;
      sub_100AC4894(v17);
      v10((uint64_t)v8, 0, 1, v9);
      return sub_100AC48F4((uint64_t)v8, v15);
    }
  }
  return result;
}

unint64_t UICollectionView.totalItemCount.getter()
{
  unint64_t result = (unint64_t)[v0 numberOfSections];
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v2 = 0;
    unint64_t v3 = result;
    if (!result) {
      return v2;
    }
    uint64_t v4 = 0;
    while (1)
    {
      unint64_t result = (unint64_t)[v0 numberOfItemsInSection:v4];
      BOOL v5 = __OFADD__(v2, result);
      v2 += result;
      if (v5) {
        break;
      }
      if (v3 == ++v4) {
        return v2;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

char *UICollectionView.isLast(indexPath:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = IndexPath.section.getter();
  unint64_t result = (char *)[v2 numberOfSections];
  unint64_t v10 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  if ((char *)v8 == v10)
  {
    uint64_t v11 = IndexPath.item.getter();
    uint64_t v12 = (char *)[v2 numberOfItemsInSection:v8];
    unint64_t result = (char *)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (!__OFSUB__(v12, 1)) {
      return (char *)(v11 == (void)(v12 - 1));
    }
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return 0;
}

uint64_t UICollectionView.visibleSupplementaryElements(of:)(uint64_t a1, uint64_t a2)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v2 indexPathsForVisibleSupplementaryElementsOfKind:v5];

  type metadata accessor for IndexPath();
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v2;
  v8[3] = a1;
  v8[4] = a2;
  id v9 = v2;
  swift_bridgeObjectRetain();
  return v7;
}

void sub_100ABFFE4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(int *)(sub_100063814(&qword_1010C7858) + 48);
  uint64_t v7 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a3, a1, v7);
  NSString v8 = String._bridgeToObjectiveC()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v10 = [a2 supplementaryViewForElementKind:v8 atIndexPath:isa];

  *(void *)(a3 + v6) = v10;
}

id UICollectionView.clearSelection(using:animated:)(void *a1, int a2)
{
  unint64_t v3 = v2;
  int v39 = a2;
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  NSString v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100063814(&qword_1010C73E8);
  *(void *)&double v10 = __chkstk_darwin(v9 - 8).n128_u64[0];
  uint64_t v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v40 = v3;
  id result = [v3 indexPathsForSelectedItems];
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (a1)
    {
      uint64_t v16 = swift_allocObject();
      id v17 = v40;
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = v17;
      *(unsigned char *)(v16 + 32) = v39 & 1;
      uint64_t v45 = sub_100AC49B0;
      uint64_t v46 = v16;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v42 = 1107296256;
      uint64_t v43 = sub_1007AF420;
      uint64_t v44 = &unk_101007108;
      Swift::String v18 = _Block_copy(&aBlock);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      id v19 = v17;
      swift_release();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v15;
      *(void *)(v20 + 24) = v19;
      uint64_t v45 = sub_100AC4A10;
      uint64_t v46 = v20;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v42 = 1107296256;
      uint64_t v43 = sub_1007AF420;
      uint64_t v44 = &unk_101007158;
      uint64_t v21 = _Block_copy(&aBlock);
      id v22 = v19;
      swift_release();
      [a1 animateAlongsideTransition:v18 completion:v21];
      _Block_release(v21);
      _Block_release(v18);
      return (id)swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v23 = *(void *)(v15 + 16);
      if (v23)
      {
        uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
        uint64_t v24 = v6 + 16;
        unint64_t v26 = v15 + ((*(unsigned __int8 *)(v24 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 64));
        uint64_t v36 = *(void *)(v24 + 56);
        id v37 = v25;
        unint64_t v27 = v24 + 40;
        uint64_t v28 = v24;
        id v29 = (unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 32);
        uint64_t v30 = v15;
        uint64_t v38 = v28;
        uint64_t v31 = (void (**)(char *, uint64_t))(v28 - 8);
        v34[1] = v30;
        uint64_t v35 = (void (**)(char *, char *, uint64_t))(v28 + 16);
        swift_bridgeObjectRetain();
        v34[0] = v27 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        while (1)
        {
          v37(v12, v26, v5);
          uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v27;
          (*(void (**)(char *, void, uint64_t, uint64_t))v27)(v12, 0, 1, v5);
          if ((*v29)(v12, 1, v5) == 1) {
            break;
          }
          (*v35)(v8, v12, v5);
          Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
          [v40 deselectItemAtIndexPath:isa, v39 & 1, v34[0]];

          (*v31)(v8, v5);
          v26 += v36;
          if (!--v23) {
            goto LABEL_10;
          }
        }
      }
      else
      {
        uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        swift_bridgeObjectRetain();
LABEL_10:
        v32(v12, 1, 1, v5);
      }
      return (id)swift_bridgeObjectRelease_n();
    }
  }
  return result;
}

uint64_t sub_100AC04D4(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  id v30 = a3;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100063814(&qword_1010C73E8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v24 = a2;
  if (v13)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v14 = v7 + 16;
    uint64_t v16 = a2 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v27 = *(void *)(v14 + 56);
    uint64_t v28 = v15;
    unint64_t v17 = v14 + 40;
    Swift::String v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 32);
    unint64_t v26 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v29 = v14;
    id v19 = (void (**)(char *, uint64_t))(v14 - 8);
    swift_bridgeObjectRetain();
    unint64_t v23 = v17 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    unsigned int v25 = a4 & 1;
    while (1)
    {
      v28(v12, v16, v6);
      uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v17;
      (*(void (**)(char *, void, uint64_t, uint64_t))v17)(v12, 0, 1, v6);
      if ((*v18)(v12, 1, v6) == 1) {
        break;
      }
      (*v26)(v9, v12, v6);
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      [v30 deselectItemAtIndexPath:isa v25 v23 v24];

      (*v19)(v9, v6);
      v16 += v27;
      if (!--v13) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
LABEL_7:
    v20(v12, 1, 1, v6);
  }
  return swift_bridgeObjectRelease();
}

id sub_100AC0740(void *a1, uint64_t a2, void *a3)
{
  id v29 = a3;
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100063814(&qword_1010C73E8);
  *(void *)&double v10 = __chkstk_darwin(v9 - 8).n128_u64[0];
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [a1 isCancelled];
  if (result)
  {
    uint64_t v14 = *(void *)(a2 + 16);
    v24[2] = a2;
    if (v14)
    {
      uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      uint64_t v15 = v6 + 16;
      uint64_t v17 = a2 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64));
      uint64_t v18 = *(void *)(v15 + 56);
      id v19 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 40);
      uint64_t v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 32);
      uint64_t v28 = v16;
      unsigned int v25 = (void (**)(char *, char *, uint64_t))(v15 + 16);
      uint64_t v26 = v18;
      uint64_t v20 = (void (**)(char *, uint64_t))(v15 - 8);
      swift_bridgeObjectRetain();
      v24[1] = (v15 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      while (1)
      {
        v28(v12, v17, v5);
        uint64_t v21 = *v19;
        (*v19)(v12, 0, 1, v5);
        if ((*v27)(v12, 1, v5) == 1) {
          break;
        }
        (*v25)(v8, v12, v5);
        uint64_t v22 = v15;
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        [v29 selectItemAtIndexPath:isa animated:0 scrollPosition:0];

        uint64_t v15 = v22;
        (*v20)(v8, v5);
        v17 += v26;
        if (!--v14) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      swift_bridgeObjectRetain();
LABEL_8:
      v21(v12, 1, 1, v5);
    }
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t UICollectionView.isDraggingCell(at:)()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for UICellConfigurationState.DragState();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = type metadata accessor for UICellConfigurationState();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v14 = [v1 cellForItemAtIndexPath:isa];

  if (v14)
  {
    id v15 = [v14 _bridgedConfigurationState];
    static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)();

    UICellConfigurationState.cellDragState.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for UICellConfigurationState.DragState.dragging(_:), v2);
    char v16 = static UICellConfigurationState.DragState.== infix(_:_:)();

    uint64_t v17 = *(void (**)(char *, uint64_t))(v3 + 8);
    v17(v5, v2);
    v17(v8, v2);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

void *UICollectionView.elementKindGlobalHeader.unsafeMutableAddressor()
{
  return &static UICollectionView.elementKindGlobalHeader;
}

unint64_t static UICollectionView.elementKindGlobalHeader.getter()
{
  return 0xD000000000000023;
}

id UIColor.interpolate(to:ratio:)(void *a1, double a2)
{
  double v4 = fmin(a2, 1.0);
  if (a2 < 0.0) {
    double v5 = 0.0;
  }
  else {
    double v5 = v4;
  }
  double v13 = 0.0;
  double v14 = 0.0;
  double v11 = 0.0;
  double v12 = 0.0;
  double v9 = 0.0;
  double v10 = 0.0;
  double v7 = 0.0;
  double v8 = 0.0;
  [v2 getRed:&v14 green:&v12 blue:&v10 alpha:&v8];
  [a1 getRed:&v13 green:&v11 blue:&v9 alpha:&v7];
  return [objc_allocWithZone((Class)UIColor) initWithRed:(1.0 - v5) * v14 + v5 * v13 green:(1.0 - v5) * v12 + v5 * v11 blue:(1.0 - v5) * v10 + v5 * v9 alpha:(1.0 - v5) * v8 + v5 * v7];
}

double UIColor.hsba.getter()
{
  return sub_100AC0E34((SEL *)&selRef_getHue_saturation_brightness_alpha_);
}

double UIColor.rgba.getter()
{
  return sub_100AC0E34((SEL *)&selRef_getRed_green_blue_alpha_);
}

double sub_100AC0E34(SEL *a1)
{
  double v6 = 0.0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v3 = 0;
  [v1 *a1:&v6:&v5:&v4:&v3];
  return v6;
}

UIImage_optional __swiftcall UIImage.init(systemName:font:scale:)(Swift::String systemName, UIFont font, UIImageSymbolScale scale)
{
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [self configurationWithFont:font.super.isa scale:scale];
  double v8 = (objc_class *)[ObjCClassFromMetadata systemImageNamed:v6 withConfiguration:v7];

  double v10 = v8;
  result.value.super.Class isa = v10;
  result.is_nil = v9;
  return result;
}

UIImage_optional __swiftcall UIImage.byCroppingToUniformCenter()()
{
  id v1 = v0;
  uint64_t v2 = v0;
  [(objc_class *)v2 size];
  double v4 = v3;
  double v6 = v5;
  if (static ApproximatelyEquatable.!=~ infix(_:_:)())
  {
    if (v6 >= v4)
    {
      double v9 = round((v6 - v4) * 0.5);
      double v8 = 0.0;
      double v10 = v4;
      double v11 = v4;
    }
    else
    {
      double v8 = round((v4 - v6) * 0.5);
      double v9 = 0.0;
      double v10 = v6;
      double v11 = v6;
    }
    id v1 = (objc_class *)UIImage.byCropping(to:)(v8, v9, v10, v11);
  }
  double v12 = v1;
  result.value.super.Class isa = v12;
  result.is_nil = v7;
  return result;
}

id UIImage.byCropping(to:)(double a1, double a2, double a3, double a4)
{
  double v5 = v4;
  double v10 = (CGImage *)[v4 CGImage];
  if (!v10) {
    return 0;
  }
  double v11 = v10;
  _s3__C6CGSizeVMa_2(0);
  if ((static ApproximatelyEquatable.!=~ infix(_:_:)() & 1) == 0) {
    goto LABEL_7;
  }
  [v4 scale:0, 0, *(void *)&a3, *(void *)&a4];
  double v13 = v12;
  char v14 = static ApproximatelyEquatable.!=~ infix(_:_:)();
  double v15 = v13 * a1;
  double v16 = v13 * a2;
  double v17 = v13 * a3;
  double v18 = v13 * a4;
  if ((v14 & 1) == 0)
  {
    double v18 = a4;
    double v17 = a3;
    double v16 = a2;
    double v15 = a1;
  }
  CGImageRef v19 = CGImageCreateWithImageInRect(v11, *(CGRect *)&v15);
  if (!v19)
  {
LABEL_7:

    return 0;
  }
  CGImageRef v20 = v19;
  id v21 = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:scale:orientation:", v19, objc_msgSend(v5, "imageOrientation", 0x3FF0000000000000), v13);

  return v21;
}

UIViewController_optional __swiftcall UINavigationController.removeViewController(_:animated:)(UIViewController _, Swift::Bool animated)
{
  double v3 = v2;
  id v6 = [v2 viewControllers];
  sub_100057778(0, (unint64_t *)&qword_1010C77D0);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  sub_100A900E8((uint64_t)_.super.super.isa, v7);
  unint64_t v9 = v8;
  LOBYTE(v6) = v10;
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = sub_100ABE8B8(v9);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v3 setViewControllers:isa animated:animated];
  }
  char v14 = (objc_class *)v11;
  result.value.super.super.Class isa = v14;
  result.is_nil = v13;
  return result;
}

double UIScrollView.normalizedContentOffset.getter()
{
  [v0 adjustedContentInset];
  double v2 = v1;
  [v0 contentOffset];
  return v2 + v3;
}

uint64_t UIScrollView.isScrolling.getter()
{
  if (([v0 isDragging] & 1) != 0
    || ([v0 isDecelerating] & 1) != 0
    || ([v0 _isVerticalBouncing] & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (uint64_t)[v0 _isHorizontalBouncing];
  }
}

uint64_t static UIStackView.SpacerView.layerClass.getter()
{
  return sub_100057778(0, &qword_1010C77D8);
}

id UIStackView.SpacerView.init(frame:)(double a1, double a2, double a3, double a4)
{
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  return [super initWithFrame:a1 a2:a2 a3:a3 a4:a4];
}

id UIStackView.SpacerView.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  [super initWithCoder:a1];

  return v3;
}

id UIStackView.SpacerView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  return [super dealloc];
}

double UIView.Shadow.opacity.getter()
{
  return *(double *)(v0 + 8);
}

void UIView.Shadow.opacity.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

double UIView.Shadow.offset.getter()
{
  return *(double *)(v0 + 24);
}

void UIView.Shadow.offset.setter(double a1, double a2)
{
  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

void UIView.Shadow.hash(into:)()
{
  id v1 = *(id *)v0;
  NSObject.hash(into:)();
  sub_10003CB20((id *)v0);
  if ((*(void *)(v0 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)(v0 + 8);
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((*(void *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)(v0 + 16);
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  Swift::UInt64 v4 = *(void *)(v0 + 32);
  if ((*(void *)(v0 + 24) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)(v0 + 24);
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v4;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
}

BOOL static UIView.Shadow.__derived_struct_equals(_:_:)(double *a1, double *a2)
{
  return (static NSObject.== infix(_:_:)() & 1) != 0
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4];
}

Swift::Int UIView.Shadow.hashValue.getter()
{
  Hasher.init(_seed:)();
  id v1 = *(id *)v0;
  NSObject.hash(into:)();
  sub_10003CB20((id *)v0);
  if ((*(void *)(v0 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)(v0 + 8);
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((*(void *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)(v0 + 16);
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  Swift::UInt64 v4 = *(void *)(v0 + 32);
  if ((*(void *)(v0 + 24) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)(v0 + 24);
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v4;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int sub_100AC17E0()
{
  return UIView.Shadow.hashValue.getter();
}

void sub_100AC181C()
{
}

Swift::Int sub_100AC1858()
{
  id v1 = *(void **)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  Swift::UInt64 v3 = *(void *)(v0 + 16);
  double v4 = *(double *)(v0 + 24);
  double v5 = *(double *)(v0 + 32);
  Hasher.init(_seed:)();
  id v6 = v1;
  NSObject.hash(into:)();

  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v2;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v3;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  sub_100AC4320(v4, v5);
  return Hasher._finalize()();
}

BOOL sub_100AC18EC(double *a1, double *a2)
{
  double v2 = a1[1];
  double v3 = a1[2];
  double v5 = a1[3];
  double v4 = a1[4];
  double v6 = a2[1];
  double v7 = a2[2];
  double v9 = a2[3];
  double v8 = a2[4];
  sub_100057778(0, (unint64_t *)&unk_1010C77E0);
  char v10 = static NSObject.== infix(_:_:)();
  BOOL result = 0;
  if ((v10 & 1) != 0 && v2 == v6 && v3 == v7) {
    return v4 == v8 && v5 == v9;
  }
  return result;
}

id UIView.shadowPathIsBounds.getter()
{
  id v1 = [v0 layer];
  id v2 = [v1 shadowPathIsBounds];

  return v2;
}

void UIView.shadowPathIsBounds.setter(char a1)
{
  id v3 = [v1 layer];
  [v3 setShadowPathIsBounds:a1 & 1];
}

void (*UIView.shadowPathIsBounds.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  id v3 = [v1 layer];
  unsigned __int8 v4 = [v3 shadowPathIsBounds];

  *(unsigned char *)(a1 + 8) = v4;
  return sub_100AC1AC8;
}

void sub_100AC1AC8(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  id v2 = [*(id *)a1 layer];
  [v2 setShadowPathIsBounds:v1];
}

void UIView.shadow.getter(uint64_t a1@<X8>)
{
  id v3 = [self clearColor];
  id v4 = [v1 layer];
  id v5 = [v4 shadowColor];

  if (v5)
  {
    id v6 = [objc_allocWithZone((Class)UIColor) initWithCGColor:v5];

    id v3 = v6;
  }
  id v7 = [v1 layer];
  [v7 shadowOpacity];
  float v9 = v8;

  double v10 = v9;
  id v11 = [v1 layer];
  [v11 shadowRadius];
  uint64_t v13 = v12;

  id v14 = [v1 layer];
  [v14 shadowOffset];
  uint64_t v16 = v15;
  uint64_t v18 = v17;

  *(void *)a1 = v3;
  *(double *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + 24) = v16;
  *(void *)(a1 + 32) = v18;
}

void (*UIView.shadow.modify(void *a1))(uint64_t *a1, char a2)
{
  id v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  UIView.shadow.getter((uint64_t)(v3 + 10));
  return sub_100AC1CFC;
}

void sub_100AC1CFC(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 80;
  long long v4 = *(_OWORD *)(*a1 + 96);
  if (a2)
  {
    *(_OWORD *)uint64_t v2 = *(_OWORD *)v3;
    *(_OWORD *)(v2 + 16) = v4;
    *(void *)(v2 + 32) = *(void *)(v3 + 32);
    id v5 = *(id *)v2;
    UIView.shadow.setter(v2);
  }
  else
  {
    *(_OWORD *)(v2 + 40) = *(_OWORD *)v3;
    *(_OWORD *)(v2 + 56) = v4;
    *(void *)(v2 + 72) = *(void *)(v3 + 32);
    UIView.shadow.setter(v2 + 40);
  }

  free((void *)v2);
}

uint64_t UIView.Border.init(view:)(void *a1)
{
  uint64_t v2 = sub_100AC4A3C(a1);

  return v2;
}

uint64_t sub_100AC1DC8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 8))
  {
    return 0;
  }
  if (*(double *)a1 == *(double *)a2)
  {
    sub_100057778(0, (unint64_t *)&unk_1010C77E0);
    return static NSObject.== infix(_:_:)() & 1;
  }
  return 0;
}

uint64_t UIView.border.getter()
{
  id v1 = v0;
  uint64_t v2 = sub_100AC4A3C(v1);

  return v2;
}

void (*UIView.border.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[3] = (uint64_t)v1;
  id v3 = v1;
  uint64_t v4 = sub_100AC4A3C(v3);
  uint64_t v6 = v5;
  uint64_t v8 = v7;

  *a1 = v4;
  a1[1] = v6;
  a1[2] = v8;
  return sub_100AC1F14;
}

void sub_100AC1F14(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)a1[2];
  if (a2)
  {
    id v5 = v4;
    UIView.border.setter(v2, v3, v4);
  }
  else
  {
    UIView.border.setter(*a1, v3, v4);
  }
}

double UIView.untransformedFrame.getter()
{
  [v0 bounds];
  CGFloat v2 = v1;
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  [v0 center];
  double v10 = v9;
  v17.origin.x = v2;
  v17.origin.y = v4;
  v17.size.CGFloat width = v6;
  v17.size.CGFloat height = v8;
  double Width = CGRectGetWidth(v17);
  id v12 = [v0 layer];
  [v12 anchorPoint];
  double v14 = v13;

  v18.origin.x = v2;
  v18.origin.y = v4;
  v18.size.CGFloat width = v6;
  v18.size.CGFloat height = v8;
  CGRectGetHeight(v18);
  id v15 = [v0 layer];
  [v15 anchorPoint];

  v19.origin.x = v2;
  v19.origin.y = v4;
  v19.size.CGFloat width = v6;
  v19.size.CGFloat height = v8;
  CGRectGetWidth(v19);
  v20.origin.x = v2;
  v20.origin.y = v4;
  v20.size.CGFloat width = v6;
  v20.size.CGFloat height = v8;
  CGRectGetHeight(v20);
  return v10 - Width * v14;
}

void (*UIView.untransformedFrame.modify(double **a1))(CGFloat **a1)
{
  double v3 = (double *)malloc(0x28uLL);
  *a1 = v3;
  *((void *)v3 + 4) = v1;
  *double v3 = UIView.untransformedFrame.getter();
  *((void *)v3 + 1) = v4;
  *((void *)v3 + 2) = v5;
  *((void *)v3 + 3) = v6;
  return sub_100AC2150;
}

void sub_100AC2150(CGFloat **a1)
{
  uint64_t v1 = *a1;
  UIView.untransformedFrame.setter(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);

  free(v1);
}

float UIView.contentCompressionResistancePriority.getter()
{
  id v1 = v0;
  [v1 contentCompressionResistancePriorityForAxis:0];
  float v3 = v2;
  [v1 contentCompressionResistancePriorityForAxis:1];

  return v3;
}

float UIView.CompressionResistancePriority.init(view:)(void *a1)
{
  [a1 contentCompressionResistancePriorityForAxis:0];
  float v3 = v2;
  [a1 contentCompressionResistancePriorityForAxis:1];

  return v3;
}

id UIView.contentCompressionResistancePriority.setter(double a1, float a2)
{
  [v2 setContentCompressionResistancePriority:0 forAxis:];
  *(float *)&double v4 = a2;

  return [v2 setContentCompressionResistancePriority:1 forAxis:v4];
}

id (*UIView.contentCompressionResistancePriority.modify(uint64_t a1))(uint64_t a1, double a2)
{
  *(void *)a1 = v1;
  id v3 = v1;
  [v3 contentCompressionResistancePriorityForAxis:0];
  int v5 = v4;
  [v3 contentCompressionResistancePriorityForAxis:1];
  int v7 = v6;

  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v7;
  return sub_100AC2338;
}

id sub_100AC2338(uint64_t a1, double a2)
{
  id v2 = *(id *)a1;
  LODWORD(a2) = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  [*(id *)a1 setContentCompressionResistancePriority:0 forAxis:a2];
  LODWORD(v4) = v3;

  return [v2 setContentCompressionResistancePriority:1 forAxis:v4];
}

void UIView.CompressionResistancePriority.horizontal.setter(float a1)
{
  *id v1 = a1;
}

float UIView.CompressionResistancePriority.vertical.getter(double a1, float a2)
{
  return a2;
}

double UIView.maxReadableContentWidth(for:)()
{
  return 1500.0;
}

UIImage *UIView.screenshot.getter()
{
  [v0 bounds];
  CGFloat v2 = v1;
  CGFloat v4 = v3;
  unsigned __int8 v5 = [v0 isOpaque];
  v8.CGFloat width = v2;
  v8.CGFloat height = v4;
  UIGraphicsBeginImageContextWithOptions(v8, v5, 0.0);
  [v0 bounds];
  [v0 drawViewHierarchyInRect:1];
  int v6 = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  return v6;
}

Swift::Void __swiftcall UIView.visualizeLayout(with:)(UIColor with)
{
  CGFloat v2 = v1;
  CGFloat v4 = (objc_class *)[v2 viewWithTag:1234];
  if (v4)
  {
    Class isa = v4;
    [v2 bringSubviewToFront:];
  }
  else
  {
    id v5 = [objc_allocWithZone((Class)UIView) init];
    id v6 = [(objc_class *)with.super.isa colorWithAlphaComponent:0.2];
    [v5 setBackgroundColor:v6];

    int v7 = with.super.isa;
    UIView.border.setter(0x3FF0000000000000, 1, with.super.isa);
    [v5 setTranslatesAutoresizingMaskIntoConstraints:0];
    [v5 setTag:1234];
    [v5 setUserInteractionEnabled:0];
    [v2 addSubview:v5];
    CGSize v8 = self;
    sub_100063814(&qword_1010C6930);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100E251E0;
    id v10 = [v5 topAnchor];
    id v11 = [v2 topAnchor];
    id v12 = [v10 constraintEqualToAnchor:v11];

    *(void *)(v9 + 32) = v12;
    id v13 = [v5 bottomAnchor];
    id v14 = [v2 bottomAnchor];
    id v15 = [v13 constraintEqualToAnchor:v14];

    *(void *)(v9 + 40) = v15;
    id v16 = [v5 leadingAnchor];
    id v17 = [v2 leadingAnchor];
    id v18 = [v16 constraintEqualToAnchor:v17];

    *(void *)(v9 + 48) = v18;
    id v19 = [v5 trailingAnchor];
    id v20 = [v2 trailingAnchor];
    id v21 = [v19 constraintEqualToAnchor:v20];

    *(void *)(v9 + 56) = v21;
    specialized Array._endMutation()();
    sub_100057778(0, (unint64_t *)&unk_1010C77F0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v8 activateConstraints:isa];
  }
}

void sub_100AC27AC(UIColor a1)
{
}

void UIView.traverseViewHierarchy(_:)(void (*a1)(void *, char *), uint64_t a2)
{
  double v3 = v2;
  char v15 = 0;
  a1(v3, &v15);
  if (v15) {
    return;
  }
  id v6 = [v3 subviews];
  sub_100057778(0, (unint64_t *)&qword_1010C7748);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_4:
      if ((v7 & 0xC000000000000001) != 0)
      {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8;
      }
      else
      {
        uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8;
        if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v10 = *(id *)(v7 + 32);
      }
      uint64_t v11 = 0;
      uint64_t v12 = v8 - 1;
      while (1)
      {
        sub_100AC4B4C(v10, a1, a2, &v15);

        if (v12 == v11) {
          break;
        }
        unint64_t v13 = v11 + 1;
        if ((v7 & 0xC000000000000001) != 0)
        {
          id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v13 >= *(void *)(v9 + 16)) {
            goto LABEL_20;
          }
          id v14 = *(id *)(v7 + 8 * v11 + 40);
        }
        id v10 = v14;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        ++v11;
        if (v15 == 1)
        {

          break;
        }
      }
    }
  }

  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall UILayoutGuide.visualizeLayout(with:)(UIColor with)
{
  CGFloat v2 = v1;
  id v4 = [v2 owningView];
  if (v4)
  {
    id v5 = v4;
    id v6 = (objc_class *)[v4 viewWithTag:1234];
    if (v6)
    {
      Class isa = v6;
      [v5 bringSubviewToFront:];
    }
    else
    {
      id v7 = [objc_allocWithZone((Class)UIView) init];
      id v8 = [(objc_class *)with.super.isa colorWithAlphaComponent:0.2];
      [v7 setBackgroundColor:v8];

      uint64_t v9 = with.super.isa;
      UIView.border.setter(0x3FF0000000000000, 1, with.super.isa);
      [v7 setTranslatesAutoresizingMaskIntoConstraints:0];
      [v7 setTag:1234];
      [v7 setUserInteractionEnabled:0];
      [v5 addSubview:v7];
      id v10 = self;
      sub_100063814(&qword_1010C6930);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_100E251E0;
      id v12 = [v7 topAnchor];
      id v13 = [v2 topAnchor];
      id v14 = [v12 constraintEqualToAnchor:v13];

      *(void *)(v11 + 32) = v14;
      id v15 = [v7 bottomAnchor];
      id v16 = [v2 bottomAnchor];
      id v17 = [v15 constraintEqualToAnchor:v16];

      *(void *)(v11 + 40) = v17;
      id v18 = [v7 leadingAnchor];
      id v19 = [v2 leadingAnchor];
      id v20 = [v18 constraintEqualToAnchor:v19];

      *(void *)(v11 + 48) = v20;
      id v21 = [v7 trailingAnchor];
      id v22 = [v2 trailingAnchor];
      id v23 = [v21 constraintEqualToAnchor:v22];

      *(void *)(v11 + 56) = v23;
      specialized Array._endMutation()();
      sub_100057778(0, (unint64_t *)&unk_1010C77F0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v10 activateConstraints:isa];

      id v5 = v7;
    }
  }
}

void sub_100AC2D5C(UIColor a1)
{
}

BOOL UIViewController.canPresentViewControllers.getter()
{
  id v1 = [v0 popoverPresentationController];
  id v2 = v1;
  if (v1) {

  }
  return v2 == 0;
}

BOOL UIViewController.canBeDismissed.getter()
{
  id v1 = [v0 presentingViewController];
  id v2 = v1;
  if (v1) {

  }
  return v2 != 0;
}

Swift::Void __swiftcall UIViewController.dismiss(after:)(Swift::Double after)
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  double v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v18 = *(void *)(v4 - 8);
  uint64_t v19 = v4;
  __chkstk_darwin(v4);
  id v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v13 = (char *)&v17 - v12;
  sub_100057778(0, (unint64_t *)&qword_1010C6668);
  id v14 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  id v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, v7);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_100AC4D7C;
  uint64_t aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100020238;
  aBlock[3] = &unk_1010071A8;
  id v16 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100AC4D84((unint64_t *)&qword_1010C7800, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100063814(&qword_1010C6670);
  sub_10007B144();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v19);
  v17(v13, v7);
}

void sub_100AC3210()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    id v2 = [Strong presentingViewController];
    if (v2)
    {
      double v3 = v2;
      id v4 = [v2 presentedViewController];
      if (v4)
      {
        id v5 = v4;
        sub_100057778(0, (unint64_t *)&unk_1010C77E0);
        if (static NSObject.== infix(_:_:)()) {
          [v3 dismissViewControllerAnimated:1 completion:0];
        }

        uint64_t v1 = v3;
      }
      else
      {
        id v5 = v3;
      }

      uint64_t v1 = v5;
    }
  }
}

Swift::Void __swiftcall UIViewController.add(_:)(UIViewController a1)
{
  [v1 addChildViewController:a1.super.super.isa];
  if ([v1 isViewLoaded])
  {
    id v3 = [v1 view];
    if (v3)
    {
      id v4 = v3;
      id v5 = [(objc_class *)a1.super.super.isa view];
      if (v5)
      {
        id v6 = v5;
        [v4 addSubview:v5];

        id v7 = [v1 view];
        if (v7)
        {
          uint64_t v8 = v7;
          [v7 setNeedsLayout];

          goto LABEL_6;
        }
LABEL_11:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_6:

  [(objc_class *)a1.super.super.isa didMoveToParentViewController:v1];
}

Swift::Void __swiftcall UIViewController.remove(_:)(UIViewController a1)
{
  id v3 = [(objc_class *)a1.super.super.isa parentViewController];
  if (!v3) {
    return;
  }
  id v4 = v3;

  if (v4 != v1) {
    return;
  }
  [(objc_class *)a1.super.super.isa willMoveToParentViewController:0];
  if (![v1 isViewLoaded]
    || ![(objc_class *)a1.super.super.isa isViewLoaded])
  {
    goto LABEL_11;
  }
  id v5 = [(objc_class *)a1.super.super.isa view];
  if (!v5)
  {
    __break(1u);
    goto LABEL_15;
  }
  id v6 = v5;
  id v7 = [v1 view];
  if (!v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = v7;
  unsigned int v9 = [v6 isDescendantOfView:v7];

  if (v9)
  {
    id v10 = [(objc_class *)a1.super.super.isa view];
    if (v10)
    {
      uint64_t v11 = v10;
      [v10 removeFromSuperview];

      goto LABEL_11;
    }
LABEL_16:
    __break(1u);
    return;
  }
LABEL_11:

  [(objc_class *)a1.super.super.isa removeFromParentViewController];
}

Swift::Bool __swiftcall UIViewController.isDescendant(of:)(UIViewController of)
{
  id v3 = (objc_class *)[v1 parentViewController];
  if (v3 && (id v4 = v3, v3, v4 == of.super.super.isa))
  {
    LOBYTE(v5) = 1;
  }
  else
  {
    id v5 = [v1 parentViewController];
    if (v5)
    {
      id v6 = v5;
      Swift::Bool v7 = UIViewController.isDescendant(of:)(of);

      LOBYTE(v5) = v7;
    }
  }
  return (char)v5;
}

void UIViewController.traverseViewControllerHierarchy(_:)(void (*a1)(void *, char *), uint64_t a2)
{
  id v3 = v2;
  char v15 = 0;
  a1(v3, &v15);
  id v6 = [v3 childViewControllers];
  sub_100057778(0, (unint64_t *)&qword_1010C77D0);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62) {
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v8)
  {
    swift_beginAccess();
    uint64_t v9 = 4;
    while (1)
    {
      id v10 = (v7 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v7 + 8 * v9);
      uint64_t v11 = v10;
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      if (v15)
      {

        goto LABEL_12;
      }
      sub_100AC4DCC(v10, a1, a2, &v15);

      ++v9;
      if (v12 == v8) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_12:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if ((v15 & 1) == 0)
  {
    id v13 = [v3 presentedViewController];
    if (v13)
    {
      id v14 = v13;
      sub_100AC4DCC(v13, a1, a2, &v15);
    }
  }
}

uint64_t sub_100AC37B0(uint64_t a1, unsigned char *a2, void (*a3)(uint64_t, unsigned char *), uint64_t a4, unsigned char *a5)
{
  swift_beginAccess();
  a3(a1, a5);
  swift_endAccess();
  uint64_t result = swift_beginAccess();
  *a2 = *a5;
  return result;
}

NSLayoutConstraint __swiftcall NSLayoutConstraint.with(priority:)(__C::UILayoutPriority priority)
{
  [v1 setPriority:*(double *)&priority.rawValue];

  return (NSLayoutConstraint)v3;
}

void UIView.constrainToBounds(of:useLayoutMarginsGuide:padding:)()
{
  sub_100063814(&qword_1010C7818);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100E26B70;
  *(void *)(inited + 32) = 3;
  *(void *)(inited + 40) = 0x3FF0000000000000;
  *(void *)(inited + 48) = 5;
  *(void *)(inited + 56) = 0x3FF0000000000000;
  *(void *)(inited + 64) = 6;
  *(void *)(inited + 72) = 0xBFF0000000000000;
  *(void *)(inited + 80) = 4;
  *(void *)(inited + 88) = 0xBFF0000000000000;
  unint64_t v1 = sub_100A878D0(inited);
  swift_setDeallocating();
  sub_100AC436C(v1, (void (*)(void, double))sub_100AC4FF0);
  swift_bridgeObjectRelease();
  id v2 = self;
  sub_100057778(0, (unint64_t *)&unk_1010C77F0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v2 activateConstraints:isa];
  swift_bridgeObjectRelease();
}

id sub_100AC39C4(uint64_t a1, void *a2, char a3, void *a4, double a5, double a6)
{
  v17[3] = sub_100057778(0, (unint64_t *)&qword_1010C7748);
  v17[0] = a2;
  id v12 = a2;
  if (a3) {
    id v13 = [a4 layoutMarginsGuide];
  }
  else {
    id v13 = a4;
  }
  id v14 = v13;
  sub_100057778(0, (unint64_t *)&unk_1010C77F0);
  v16[3] = sub_100057778(0, (unint64_t *)&unk_1010C77E0);
  v16[0] = v14;
  return sub_100AC3ABC(v17, a1, 0, v16, a1, 1.0, a5 * a6);
}

id sub_100AC3ABC(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, double a6, double a7)
{
  sub_100068990(a1, a1[3]);
  uint64_t v14 = _bridgeAnythingToObjectiveC<A>(_:)();
  uint64_t v15 = a4[3];
  if (v15)
  {
    id v16 = sub_100068990(a4, a4[3]);
    uint64_t v24 = a5;
    uint64_t v25 = a2;
    uint64_t v17 = a3;
    uint64_t v18 = *(void *)(v15 - 8);
    __chkstk_darwin(v16);
    uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v18 + 16))(v20);
    uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v15);
    a3 = v17;
    a5 = v24;
    a2 = v25;
    sub_1000760E4((uint64_t)a4);
  }
  else
  {
    uint64_t v21 = 0;
  }
  id v22 = [(id)swift_getObjCClassFromMetadata() constraintWithItem:v14 attribute:a2 relatedBy:a3 toItem:v21 attribute:a5 multiplier:a6 constant:a7];
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1000760E4((uint64_t)a1);
  return v22;
}

void Array<A>.activate()(uint64_t a1)
{
}

void UIView.addSubviewAnchoredToBounds(_:useLayoutMarginsGuide:padding:)(void *a1)
{
  [a1 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v1 addSubview:a1];
  UIView.constrainToBounds(of:useLayoutMarginsGuide:padding:)();
}

void Array<A>.deactivate()(uint64_t a1)
{
}

void sub_100AC3D18(uint64_t a1, SEL *a2)
{
  id v3 = self;
  sub_100057778(0, (unint64_t *)&unk_1010C77F0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v3 *a2];
}

uint64_t NSTextAlignment.init(languageCode:)()
{
  uint64_t v0 = type metadata accessor for Locale.Language();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Locale.Language.init(identifier:)();
  uint64_t v4 = Locale.Language.characterDirection.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v5 = 4;
  if (v4 == 2) {
    uint64_t v5 = 2;
  }
  if (v4 == 1) {
    return 0;
  }
  else {
    return v5;
  }
}

Swift::Void __swiftcall NSTextAlignment.flip()()
{
  if (*v0)
  {
    if (*v0 != 2) {
      return;
    }
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v1 = 2;
  }
  uint64_t *v0 = v1;
}

uint64_t NSTextAlignment.ctTextAlignment.getter(unint64_t a1)
{
  if (a1 >= 5) {
    return 4;
  }
  else {
    return (0x403010200uLL >> (8 * a1));
  }
}

uint64_t UIViewPropertyAnimator.UpdateReason.init(rawValue:)(unint64_t a1)
{
  if (a1 >= 4) {
    return 3;
  }
  else {
    return 0x2010003u >> (8 * a1);
  }
}

void *sub_100AC3F08@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result >= 4uLL) {
    char v2 = 3;
  }
  else {
    char v2 = 0x2010003u >> (8 * *result);
  }
  *a2 = v2;
  return result;
}

void UIViewPropertyAnimator.addModifiedAnimations(with:animations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[4] = a2;
  v5[5] = a3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  void v5[2] = sub_100020238;
  void v5[3] = &unk_1010071D0;
  uint64_t v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  [v3 addAnimations:v4];
  _Block_release(v4);
}

UIViewPropertyAnimator __swiftcall UIViewPropertyAnimator.init(springTimingParameters:)(UISpringTimingParameters springTimingParameters)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  [(objc_class *)springTimingParameters.super.isa settlingDuration];
  id v3 = [v2 initWithDuration:springTimingParameters.super.isa];

  return (UIViewPropertyAnimator)v3;
}

id UISpringTimingParameters.init(dampingRatio:response:)(double a1, double a2)
{
  double v2 = 6.28318531 / a2 * (6.28318531 / a2);
  double v3 = sqrt(v2);
  double v4 = (v3 + v3) * a1;
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return [v5 initWithMass:1.0 stiffness:v2 damping:v4 initialVelocity:0.0];
}

id UIView.setAnchorPoint(_:preserveFrame:)(char a1, double a2, double a3)
{
  if (a1)
  {
    double v6 = UIView.untransformedFrame.getter();
    CGFloat v8 = v7;
    CGFloat v10 = v9;
    CGFloat v12 = v11;
    [v3 setAnchorPoint:a2, a3];
    return UIView.untransformedFrame.setter(v6, v8, v10, v12);
  }
  else
  {
    return [v3 setAnchorPoint:];
  }
}

double sub_100AC4170()
{
  static UIView.Shadow.identity = (uint64_t)[self blackColor];
  unk_10112BE40 = xmmword_100E52500;
  double result = 0.0;
  unk_10112BE50 = xmmword_100E52510;
  return result;
}

uint64_t *UIView.Shadow.identity.unsafeMutableAddressor()
{
  if (qword_1010C63C0 != -1) {
    swift_once();
  }
  return &static UIView.Shadow.identity;
}

id static UIView.Shadow.identity.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1010C63C0 != -1) {
    swift_once();
  }
  double v2 = (void *)static UIView.Shadow.identity;
  *(void *)a1 = static UIView.Shadow.identity;
  *(_OWORD *)(a1 + 8) = unk_10112BE40;
  *(_OWORD *)(a1 + 24) = unk_10112BE50;

  return v2;
}

void (*sub_100AC4294(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  double v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100544064(v6, a2, a3);
  return sub_100543F9C;
}

unint64_t sub_100AC42FC(id *a1)
{
  return (unint64_t)sub_100ABF1D4(a1, *(void **)(v1 + 32)) & 1;
}

void sub_100AC4320(double a1, double a2)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
}

void *sub_100AC436C(uint64_t a1, void (*a2)(void, double))
{
  uint64_t v3 = *(void *)(a1 + 16);
  double result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    double result = (void *)sub_100642FD0(a1);
    uint64_t v5 = (uint64_t)result;
    int v7 = v6;
    uint64_t v8 = 0;
    uint64_t v9 = a1 + 64;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
    {
      unint64_t v11 = (unint64_t)v5 >> 6;
      if ((*(void *)(v9 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(a1 + 36) != v7) {
        goto LABEL_23;
      }
      uint64_t v18 = v8;
      a2(*(void *)(*(void *)(a1 + 48) + 8 * v5), *(double *)(*(void *)(a1 + 56) + 8 * v5));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      double result = (void *)specialized ContiguousArray._endMutation()();
      int64_t v10 = 1 << *(unsigned char *)(a1 + 32);
      if (v5 >= v10) {
        goto LABEL_24;
      }
      uint64_t v12 = *(void *)(v9 + 8 * v11);
      if ((v12 & (1 << v5)) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(a1 + 36) != v7) {
        goto LABEL_26;
      }
      unint64_t v13 = v12 & (-2 << (v5 & 0x3F));
      if (v13)
      {
        int64_t v10 = __clz(__rbit64(v13)) | v5 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v14 = v11 + 1;
        unint64_t v15 = (unint64_t)(v10 + 63) >> 6;
        if (v11 + 1 < v15)
        {
          unint64_t v16 = *(void *)(v9 + 8 * v14);
          if (v16)
          {
LABEL_18:
            int64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
          }
          else
          {
            while (v15 - 2 != v11)
            {
              unint64_t v16 = *(void *)(a1 + 80 + 8 * v11++);
              if (v16)
              {
                unint64_t v14 = v11 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v8 = v18 + 1;
      uint64_t v5 = v10;
      if (v18 + 1 == v3) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

void *sub_100AC4564(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_42;
  }
  uint64_t v21 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v21)
  {
    while (1)
    {
      unint64_t v4 = 0;
      uint64_t v26 = v3 & 0xFFFFFFFFFFFFFF8;
      unint64_t v27 = v3 & 0xC000000000000001;
      uint64_t v23 = a2 & 0xFFFFFFFFFFFFFF8;
      unint64_t v22 = a2 & 0xC000000000000001;
      unint64_t v24 = a2 >> 62;
      uint64_t v25 = v3 + 32;
      unint64_t v28 = a2;
      uint64_t v3 = v21;
      while (1)
      {
        if (v27)
        {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v4 >= *(void *)(v26 + 16))
          {
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
          id v5 = *(id *)(v25 + 8 * v4);
        }
        int v6 = v5;
        if (__OFADD__(v4++, 1)) {
          goto LABEL_39;
        }
        id v8 = [v5 customView];
        if (v8) {
          break;
        }

LABEL_5:
        if (v4 == v3) {
          return _swiftEmptyArrayStorage;
        }
      }
      uint64_t v9 = v8;
      if (!v24) {
        break;
      }
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      if (!v10) {
        goto LABEL_35;
      }
LABEL_13:
      if (v22) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v11 = *(id *)(a2 + 32);
      }
      uint64_t v12 = v11;
      uint64_t v3 = sub_100057778(0, (unint64_t *)&qword_1010C7748);
      char v13 = static NSObject.== infix(_:_:)();

      if (v13)
      {

LABEL_32:
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v3 = v21;
        goto LABEL_5;
      }
      if (v10 == 1)
      {
LABEL_24:

LABEL_25:
        swift_bridgeObjectRelease();
        uint64_t v3 = v21;
        goto LABEL_5;
      }
      if (v22)
      {
        uint64_t v14 = 1;
        while (1)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          a2 = v14 + 1;
          if (__OFADD__(v14, 1)) {
            goto LABEL_40;
          }
          char v15 = static NSObject.== infix(_:_:)();
          swift_unknownObjectRelease();
          if (v15) {
            goto LABEL_31;
          }
          ++v14;
          BOOL v16 = a2 == v10;
          a2 = v28;
          if (v16) {
            goto LABEL_24;
          }
        }
      }
      uint64_t v17 = 5;
      while (1)
      {
        a2 = v17 - 3;
        if (__OFADD__(v17 - 4, 1)) {
          break;
        }
        id v18 = *(id *)(v28 + 8 * v17);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19)
        {
LABEL_31:

          a2 = v28;
          goto LABEL_32;
        }
        ++v17;
        if (a2 == v10)
        {

          a2 = v28;
          goto LABEL_25;
        }
      }
LABEL_41:
      __break(1u);
LABEL_42:
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      if (!v21) {
        return _swiftEmptyArrayStorage;
      }
    }
    uint64_t v10 = *(void *)(v23 + 16);
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_13;
    }
LABEL_35:

    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  return _swiftEmptyArrayStorage;
}

unint64_t sub_100AC4870(id *a1)
{
  return (unint64_t)sub_100ABF278(a1, *(void *)(v1 + 32)) & 1;
}

uint64_t sub_100AC4894(uint64_t a1)
{
  uint64_t v2 = sub_100063814(&qword_1010C73E8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100AC48F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010C73E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AC495C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_100AC499C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100ABFFE4(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_100AC49A8()
{
  return sub_100AC49C4();
}

uint64_t sub_100AC49B0(uint64_t a1)
{
  return sub_100AC04D4(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t sub_100AC49BC()
{
  return sub_100AC49C4();
}

uint64_t sub_100AC49C4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

id sub_100AC4A10(void *a1)
{
  return sub_100AC0740(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t type metadata accessor for UIStackView.SpacerView()
{
  return self;
}

uint64_t sub_100AC4A3C(void *a1)
{
  id v2 = [a1 layer];
  [v2 borderWidth];
  double v4 = v3;

  if (v4 <= 0.0) {
    return 0;
  }
  id v5 = [a1 layer];
  id v6 = [v5 borderColor];

  if (!v6) {
    return 0;
  }
  id v7 = [a1 layer];
  [v7 borderWidth];
  uint64_t v9 = v8;

  uint64_t v10 = v9;
  [objc_allocWithZone((Class)UIColor) initWithCGColor:v6];

  return v10;
}

void sub_100AC4B4C(void *a1, void (*a2)(void *, char *), uint64_t a3, char *a4)
{
  void v15[2] = a2;
  uint64_t v15[3] = a3;
  v15[4] = a4;
  a2(a1, a4);
  char v16 = *a4;
  if ((v16 & 1) == 0)
  {
    id v6 = [a1 subviews];
    sub_100057778(0, (unint64_t *)&qword_1010C7748);
    unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v7 >> 62) {
      goto LABEL_20;
    }
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v8)
    {
      if ((v7 & 0xC000000000000001) != 0)
      {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8;
      }
      else
      {
        uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8;
        if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v10 = *(id *)(v7 + 32);
      }
      uint64_t v11 = 0;
      uint64_t v12 = v8 - 1;
      while (1)
      {
        sub_100AC4B4C(v10, sub_100AC53D4, v15, &v16);

        if (v12 == v11) {
          goto LABEL_16;
        }
        unint64_t v13 = v11 + 1;
        if ((v7 & 0xC000000000000001) != 0)
        {
          id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v13 >= *(void *)(v9 + 16)) {
            goto LABEL_19;
          }
          id v14 = *(id *)(v7 + 8 * v11 + 40);
        }
        id v10 = v14;
        if (__OFADD__(v13, 1)) {
          break;
        }
        ++v11;
        if (v16 == 1)
        {

LABEL_16:
          swift_bridgeObjectRelease();
          return;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100AC4D44()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_100AC4D7C()
{
}

uint64_t sub_100AC4D84(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100AC4DCC(void *a1, void (*a2)(void *, char *), uint64_t a3, char *a4)
{
  void v16[2] = a2;
  v16[3] = a3;
  void v16[4] = a4;
  swift_beginAccess();
  a2(a1, a4);
  swift_endAccess();
  swift_beginAccess();
  char v17 = *a4;
  id v7 = [a1 childViewControllers];
  sub_100057778(0, (unint64_t *)&qword_1010C77D0);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62) {
    goto LABEL_17;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    swift_beginAccess();
    uint64_t v10 = 4;
    while (1)
    {
      id v11 = (v8 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v8 + 8 * v10);
      uint64_t v12 = v11;
      uint64_t v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      if (v17 == 1)
      {

        goto LABEL_12;
      }
      sub_100AC4DCC(v11, sub_100AC53C8, v16, &v17);

      ++v10;
      if (v13 == v9) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_12:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if ((v17 & 1) == 0)
  {
    id v14 = [a1 presentedViewController];
    if (v14)
    {
      char v15 = v14;
      sub_100AC4DCC(v14, sub_100AC53C8, v16, &v17);
    }
  }
}

id sub_100AC4FF0(uint64_t a1, double a2)
{
  return sub_100AC39C4(a1, *(void **)(v2 + 16), *(unsigned char *)(v2 + 24), *(void **)(v2 + 32), a2, *(double *)(v2 + 40));
}

unint64_t sub_100AC5008()
{
  unint64_t result = qword_1010C7820;
  if (!qword_1010C7820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7820);
  }
  return result;
}

unint64_t sub_100AC5060()
{
  unint64_t result = qword_1010C7828;
  if (!qword_1010C7828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7828);
  }
  return result;
}

uint64_t _s6ShadowVwcp(uint64_t a1, uint64_t a2)
{
  double v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  id v4 = v3;
  return a1;
}

uint64_t _s6ShadowVwca(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t _s6ShadowVwta(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for UIView.Shadow()
{
  return &type metadata for UIView.Shadow;
}

uint64_t _s6BorderVwCP(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  double v3 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  id v4 = v3;
  return a1;
}

void _s6BorderVwxx(uint64_t a1)
{
}

uint64_t _s6BorderVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v3;
  id v4 = (void *)a2[2];
  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  return a1;
}

__n128 _s6BorderVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _s6BorderVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for UIView.Border()
{
  return &type metadata for UIView.Border;
}

void *_s29CompressionResistancePriorityVwCP(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for UIView.CompressionResistancePriority()
{
  return &type metadata for UIView.CompressionResistancePriority;
}

unsigned char *_s12UpdateReasonOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100AC5390);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIViewPropertyAnimator.UpdateReason()
{
  return &type metadata for UIViewPropertyAnimator.UpdateReason;
}

uint64_t sub_100AC53C8(uint64_t a1, unsigned char *a2)
{
  return sub_100AC37B0(a1, a2, *(void (**)(uint64_t, unsigned char *))(v2 + 16), *(void *)(v2 + 24), *(unsigned char **)(v2 + 32));
}

uint64_t sub_100AC53D4(uint64_t a1, unsigned char *a2)
{
  unsigned int v4 = *(unsigned char **)(v2 + 32);
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(v2 + 16))(a1, v4);
  *a2 = *v4;
  return result;
}

uint64_t sub_100AC541C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s9_ObserverC18HandlerAssociationVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t URL.appending(_:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t URL.init(string:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100063814(&qword_1010C7038);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    goto LABEL_4;
  }
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    sub_1000637B8((uint64_t)v6, &qword_1010C7038);
LABEL_4:
    uint64_t v9 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 1, 1, v9);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
}

uint64_t URL.parametrize(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100063814(&qword_1010C7038);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for URLQueryItem();
  uint64_t v8 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v67 = (char *)&v48 - v12;
  __chkstk_darwin(v13);
  uint64_t v63 = (char *)&v48 - v14;
  uint64_t v15 = sub_100063814(&qword_1010C78C0);
  __chkstk_darwin(v15 - 8);
  char v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for URLComponents();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v54 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v53 = *(void *)(v21 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(a2, v2, v21);
  if (*(void *)(a1 + 16))
  {
    URLComponents.init(url:resolvingAgainstBaseURL:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    {
      return sub_1000637B8((uint64_t)v17, &qword_1010C78C0);
    }
    else
    {
      uint64_t v51 = v19;
      uint64_t v52 = v18;
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v54, v17, v18);
      uint64_t v23 = URLComponents.queryItems.getter();
      if (v23) {
        unint64_t v24 = (void *)v23;
      }
      else {
        unint64_t v24 = _swiftEmptyArrayStorage;
      }
      uint64_t v25 = swift_bridgeObjectRetain();
      uint64_t v26 = sub_100AC76E0(v25);
      swift_bridgeObjectRelease();
      uint64_t v69 = v26;
      sub_100AC759C(&v69);
      unint64_t v27 = v69;
      uint64_t v62 = v69[2];
      if (v62)
      {
        uint64_t v48 = v21;
        uint64_t v49 = v7;
        uint64_t v50 = a2;
        unint64_t v28 = 0;
        unint64_t v60 = v69;
        uint64_t v61 = v69 + 4;
        uint64_t v65 = (void (**)(char *, char *, uint64_t))(v8 + 16);
        uint64_t v66 = (void (**)(char *, uint64_t))(v8 + 8);
        uint64_t v57 = v8 + 32;
        uint64_t v58 = v8;
        uint64_t v55 = (void (**)(char *, char *, uint64_t))(v8 + 40);
        unint64_t v56 = (v8 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        id v29 = v24;
        unint64_t v59 = v10;
        while (v28 < v27[2])
        {
          unint64_t v64 = v28;
          uint64_t v32 = &v61[4 * v28];
          uint64_t v33 = *v32;
          uint64_t v34 = v32[1];
          uint64_t v35 = v29;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          URLQueryItem.init(name:value:)();
          swift_bridgeObjectRelease();
          uint64_t v36 = v29[2];
          if (v36)
          {
            unint64_t v37 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
            uint64_t v38 = *(void *)(v8 + 72);
            int v39 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
            swift_bridgeObjectRetain();
            unint64_t v40 = 0;
            while (1)
            {
              v39(v67, (char *)v29 + v37, v68);
              if (URLQueryItem.name.getter() == v33 && v41 == v34) {
                break;
              }
              char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              (*v66)(v67, v68);
              if (v42) {
                goto LABEL_25;
              }
              ++v40;
              v37 += v38;
              id v29 = v35;
              if (v36 == v40)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v8 = v58;
                uint64_t v10 = v59;
                goto LABEL_20;
              }
            }
            swift_bridgeObjectRelease();
            (*v66)(v67, v68);
LABEL_25:
            swift_bridgeObjectRelease();
            id v29 = v35;
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              id v29 = (void *)sub_100AC6414(v35);
            }
            uint64_t v10 = v59;
            if (v40 >= v29[2]) {
              goto LABEL_36;
            }
            (*v55)((char *)v29 + v37, v63, v68);
            uint64_t v8 = v58;
          }
          else
          {
            swift_bridgeObjectRelease();
            int v39 = *v65;
LABEL_20:
            uint64_t v43 = v63;
            v39(v10, v63, v68);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              id v29 = (void *)sub_100A91668(0, v29[2] + 1, 1, v29);
            }
            unint64_t v45 = v29[2];
            unint64_t v44 = v29[3];
            if (v45 >= v44 >> 1) {
              id v29 = (void *)sub_100A91668(v44 > 1, v45 + 1, 1, v29);
            }
            void v29[2] = v45 + 1;
            unint64_t v30 = (unint64_t)v29
                + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
                + *(void *)(v8 + 72) * v45;
            uint64_t v31 = v68;
            (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v30, v10, v68);
            (*(void (**)(char *, uint64_t))(v8 + 8))(v43, v31);
          }
          unint64_t v28 = v64 + 1;
          unint64_t v27 = v60;
          if (v64 + 1 == v62)
          {
            swift_release();
            a2 = v50;
            uint64_t v7 = v49;
            uint64_t v21 = v48;
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
        uint64_t result = swift_release();
        __break(1u);
      }
      else
      {
        swift_release();
LABEL_31:
        uint64_t v46 = v54;
        URLComponents.queryItems.setter();
        URLComponents.url.getter();
        (*(void (**)(char *, uint64_t))(v51 + 8))(v46, v52);
        uint64_t v47 = v53;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v7, 1, v21) == 1)
        {
          return sub_1000637B8((uint64_t)v7, &qword_1010C7038);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(v47 + 8))(a2, v21);
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(a2, v7, v21);
        }
      }
    }
  }
  return result;
}

uint64_t static URL.+ infix(_:_:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t URLComponents.queryItemsDictionary.getter()
{
  uint64_t v0 = type metadata accessor for URLQueryItem();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = URLComponents.queryItems.getter();
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v7 = (void *)sub_100034940((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  uint64_t v8 = v1 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 64);
  v33[1] = v5;
  uint64_t v34 = v3;
  uint64_t v11 = v5 + ((v10 + 32) & ~v10);
  unint64_t v37 = (void (**)(char *, uint64_t))(v8 - 8);
  uint64_t v38 = v9;
  uint64_t v39 = v8;
  uint64_t v12 = *(void *)(v8 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v12;
  v9(v3, v11, v0);
  while (1)
  {
    uint64_t v14 = URLQueryItem.value.getter();
    if (v15) {
      break;
    }
LABEL_6:
    (*v37)(v3, v0);
    v11 += v36;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
    v38(v3, v11, v0);
  }
  uint64_t v40 = v15;
  uint64_t v16 = v14;
  URLQueryItem.name.getter();
  Swift::String v17 = String.lowercased()();
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v41 = v7;
  unint64_t v20 = sub_100071DE8(v17._countAndFlagsBits, (uint64_t)v17._object);
  uint64_t v21 = v7[2];
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (!__OFADD__(v21, v22))
  {
    char v24 = v19;
    if (v7[3] < v23)
    {
      sub_100AC69F0(v23, isUniquelyReferenced_nonNull_native);
      uint64_t v25 = sub_100071DE8(v17._countAndFlagsBits, (uint64_t)v17._object);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_26;
      }
      unint64_t v20 = v25;
      uint64_t v27 = v40;
      uint64_t v7 = v41;
      if ((v24 & 1) == 0) {
        goto LABEL_16;
      }
LABEL_4:
      uint64_t v13 = (uint64_t *)(v7[7] + 16 * v20);
      swift_bridgeObjectRelease();
      *uint64_t v13 = v16;
      v13[1] = v27;
LABEL_5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v3 = v34;
      uint64_t v0 = v35;
      goto LABEL_6;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v27 = v40;
      uint64_t v7 = v41;
      if (v19) {
        goto LABEL_4;
      }
    }
    else
    {
      sub_100AC7058();
      uint64_t v27 = v40;
      uint64_t v7 = v41;
      if (v24) {
        goto LABEL_4;
      }
    }
LABEL_16:
    v7[(v20 >> 6) + 8] |= 1 << v20;
    *(Swift::String *)(v7[6] + 16 * v20) = v17;
    unint64_t v28 = (uint64_t *)(v7[7] + 16 * v20);
    *unint64_t v28 = v16;
    v28[1] = v27;
    uint64_t v29 = v7[2];
    BOOL v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_25;
    }
    long long v7[2] = v31;
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_100AC6048(void *result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(unsigned char *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_100AC61DC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    void *v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    void v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v27 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = 16 * v16;
    uint64_t v21 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    char v24 = (uint64_t *)(*(void *)(a4 + 56) + v20);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    void *v11 = v23;
    v11[1] = v22;
    v11[2] = v25;
    void v11[3] = v26;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 4;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v27;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

char *sub_100AC6400(uint64_t a1)
{
  return sub_100A91274(0, *(void *)(a1 + 16), 0, (char *)a1);
}

size_t sub_100AC6414(void *a1)
{
  return sub_100A91668(0, a1[2], 0, a1);
}

size_t sub_100AC6428(void *a1)
{
  return sub_1000247C0(0, a1[2], 0, a1);
}

uint64_t sub_100AC643C(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100063814(&qword_1010C6560);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    uint64_t v34 = v3;
    int64_t v8 = 0;
    unint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *unint64_t v9 = v32;
              }
              int v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *int v3 = v7;
  return result;
}

uint64_t sub_100AC66E4(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100063814(&qword_1010C6570);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          int v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int v3 = v34;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

uint64_t sub_100AC69F0(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100063814(&qword_1010C6548);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          int v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    int64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int v3 = v39;
  int64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

void *sub_100AC6D18()
{
  uint64_t v1 = v0;
  sub_100063814(&qword_1010C6560);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AC6EA8()
{
  uint64_t v1 = v0;
  sub_100063814(&qword_1010C6570);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AC7058()
{
  uint64_t v1 = v0;
  sub_100063814(&qword_1010C6548);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v23 = v19;
    v23[1] = v18;
    unint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *unint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AC7214()
{
  uint64_t v1 = v0;
  sub_100063814(&qword_1010C6540);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 24 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)v17[2];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = *v17;
    v22[1] = v18;
    v22[2] = v19;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id v23 = v19;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AC73E4()
{
  uint64_t v1 = v0;
  sub_100063814(&qword_1010C65A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100AC759C(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100AC8400(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  uint64_t result = sub_100AC78F4(v5);
  *a1 = v2;
  return result;
}

void *sub_100AC7608(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100063814(&qword_1010C78E0);
  uint64_t v3 = swift_allocObject();
  size_t v4 = j__malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * v4 - 64;
  uint64_t v5 = sub_100AC6048(&v7, (unsigned char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_100048F1C();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v3;
}

void *sub_100AC76E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100063814(&qword_1010C78C8);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 1;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 5);
  uint64_t v6 = sub_100AC61DC((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_100048F1C();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t _s9ComponentOwxx()
{
  return sub_100AC77DC();
}

uint64_t sub_100AC77DC()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s9ComponentOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  Library.Menu.Revision.Version.selected.getter();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s9ComponentOwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  Library.Menu.Revision.Version.selected.getter();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_100AC77DC();
  return a1;
}

__n128 _s9ComponentOwtk(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t _s9ComponentOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_100AC77DC();
  return a1;
}

ValueMetadata *type metadata accessor for URL.Component()
{
  return &type metadata for URL.Component;
}

uint64_t sub_100AC78F4(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_100AC7FB4(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_151;
  }
  uint64_t v108 = result;
  uint64_t v105 = a1;
  if (v3 <= 1)
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v111 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      uint64_t v10 = (char *)_swiftEmptyArrayStorage;
LABEL_117:
      uint64_t result = (uint64_t)v10;
      uint64_t v107 = v7;
      if (v11 >= 2)
      {
        uint64_t v97 = *v105;
        do
        {
          unint64_t v98 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_146;
          }
          if (!v97) {
            goto LABEL_159;
          }
          uint64_t v99 = result;
          uint64_t v100 = *(void *)(result + 32 + 16 * v98);
          uint64_t v101 = *(void *)(result + 32 + 16 * (v11 - 1) + 8);
          uint64_t result = sub_100AC8098((char *)(v97 + 32 * v100), (char *)(v97 + 32 * *(void *)(result + 32 + 16 * (v11 - 1))), v97 + 32 * v101, v111);
          if (v1) {
            break;
          }
          if (v101 < v100) {
            goto LABEL_147;
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_100AC83C4(v99);
            uint64_t v99 = result;
          }
          if (v98 >= *(void *)(v99 + 16)) {
            goto LABEL_148;
          }
          uint64_t v102 = (void *)(v99 + 32 + 16 * v98);
          void *v102 = v100;
          v102[1] = v101;
          unint64_t v103 = *(void *)(v99 + 16);
          if (v11 > v103) {
            goto LABEL_149;
          }
          memmove((void *)(v99 + 32 + 16 * (v11 - 1)), (const void *)(v99 + 32 + 16 * v11), 16 * (v103 - v11));
          uint64_t result = v99;
          *(void *)(v99 + 16) = v103 - 1;
          unint64_t v11 = v103 - 1;
        }
        while (v103 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v107[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v107 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    sub_100063814(&qword_1010C78D0);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = v6;
    uint64_t v107 = (void *)result;
    uint64_t v111 = (char *)(result + 32);
  }
  Swift::Int v8 = 0;
  uint64_t v9 = *a1;
  uint64_t v106 = *a1 + 8;
  uint64_t v104 = *a1 + 24;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v109 = v3;
  uint64_t v110 = *a1;
  while (1)
  {
    Swift::Int v12 = v8++;
    if (v8 >= v3) {
      goto LABEL_45;
    }
    int64_t v13 = (uint64_t *)(v9 + 32 * v8);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = (uint64_t *)(v9 + 32 * v12);
    uint64_t result = *v16;
    if (*v16 == v14 && v16[1] == v15)
    {
      Swift::Int v19 = v12 + 2;
      if (v12 + 2 >= v3) {
        goto LABEL_44;
      }
      int v18 = 0;
    }
    else
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      int v18 = result;
      Swift::Int v19 = v12 + 2;
      if (v12 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v20 = (void *)(v106 + 32 * v19);
    do
    {
      int64_t v22 = (uint64_t *)(v9 + 32 * v8);
      uint64_t result = *v22;
      if (*v22 == *(v20 - 1) && v22[1] == *v20)
      {
        if (v18) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((v18 ^ result)) {
          goto LABEL_36;
        }
      }
      v20 += 4;
      Swift::Int v21 = v19 + 1;
      Swift::Int v8 = v19;
      Swift::Int v19 = v21;
    }
    while (v21 < v3);
    Swift::Int v19 = v21;
LABEL_36:
    Swift::Int v8 = v19;
    if (v18)
    {
LABEL_37:
      if (v19 < v12) {
        goto LABEL_155;
      }
      if (v12 < v19)
      {
        uint64_t v24 = 32 * v19;
        uint64_t v25 = 32 * v12;
        Swift::Int v26 = v19;
        Swift::Int v27 = v12;
        do
        {
          if (v27 != --v26)
          {
            if (!v9) {
              goto LABEL_158;
            }
            unint64_t v28 = (_OWORD *)(v9 + v25);
            uint64_t v29 = v9 + v24;
            long long v30 = *(_OWORD *)(v9 + v25);
            uint64_t v31 = *(void *)(v9 + v25 + 16);
            uint64_t v32 = *(void *)(v9 + v25 + 24);
            long long v33 = *(_OWORD *)(v9 + v24 - 16);
            *unint64_t v28 = *(_OWORD *)(v9 + v24 - 32);
            v28[1] = v33;
            *(_OWORD *)(v29 - 32) = v30;
            *(void *)(v29 - 16) = v31;
            *(void *)(v29 - 8) = v32;
          }
          ++v27;
          v24 -= 32;
          v25 += 32;
        }
        while (v27 < v26);
      }
LABEL_44:
      Swift::Int v8 = v19;
    }
LABEL_45:
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v12)) {
        goto LABEL_150;
      }
      if (v8 - v12 < v108) {
        break;
      }
    }
LABEL_66:
    if (v8 < v12) {
      goto LABEL_145;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100AC82C8(0, *((void *)v10 + 2) + 1, 1, v10);
      uint64_t v10 = (char *)result;
    }
    unint64_t v47 = *((void *)v10 + 2);
    unint64_t v46 = *((void *)v10 + 3);
    unint64_t v11 = v47 + 1;
    if (v47 >= v46 >> 1)
    {
      uint64_t result = (uint64_t)sub_100AC82C8((char *)(v46 > 1), v47 + 1, 1, v10);
      uint64_t v10 = (char *)result;
    }
    *((void *)v10 + 2) = v11;
    uint64_t v48 = v10 + 32;
    uint64_t v49 = &v10[16 * v47 + 32];
    *(void *)uint64_t v49 = v12;
    *((void *)v49 + 1) = v8;
    if (v47)
    {
      uint64_t v9 = v110;
      while (1)
      {
        unint64_t v50 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v55 = &v48[2 * v11];
          uint64_t v56 = *(v55 - 8);
          uint64_t v57 = *(v55 - 7);
          BOOL v61 = __OFSUB__(v57, v56);
          uint64_t v58 = v57 - v56;
          if (v61) {
            goto LABEL_134;
          }
          uint64_t v60 = *(v55 - 6);
          uint64_t v59 = *(v55 - 5);
          BOOL v61 = __OFSUB__(v59, v60);
          uint64_t v53 = v59 - v60;
          char v54 = v61;
          if (v61) {
            goto LABEL_135;
          }
          unint64_t v62 = v11 - 2;
          uint64_t v63 = &v48[2 * v11 - 4];
          uint64_t v65 = *v63;
          uint64_t v64 = v63[1];
          BOOL v61 = __OFSUB__(v64, v65);
          uint64_t v66 = v64 - v65;
          if (v61) {
            goto LABEL_136;
          }
          BOOL v61 = __OFADD__(v53, v66);
          uint64_t v67 = v53 + v66;
          if (v61) {
            goto LABEL_138;
          }
          if (v67 >= v58)
          {
            uint64_t v85 = &v48[2 * v50];
            uint64_t v87 = *v85;
            uint64_t v86 = v85[1];
            BOOL v61 = __OFSUB__(v86, v87);
            uint64_t v88 = v86 - v87;
            if (v61) {
              goto LABEL_144;
            }
            BOOL v78 = v53 < v88;
            goto LABEL_104;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v79 = *((void *)v10 + 4);
            uint64_t v80 = *((void *)v10 + 5);
            BOOL v61 = __OFSUB__(v80, v79);
            uint64_t v72 = v80 - v79;
            char v73 = v61;
            goto LABEL_98;
          }
          uint64_t v52 = *((void *)v10 + 4);
          uint64_t v51 = *((void *)v10 + 5);
          BOOL v61 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          char v54 = v61;
        }
        if (v54) {
          goto LABEL_137;
        }
        unint64_t v62 = v11 - 2;
        uint64_t v68 = &v48[2 * v11 - 4];
        uint64_t v70 = *v68;
        uint64_t v69 = v68[1];
        BOOL v71 = __OFSUB__(v69, v70);
        uint64_t v72 = v69 - v70;
        char v73 = v71;
        if (v71) {
          goto LABEL_139;
        }
        uint64_t v74 = &v48[2 * v50];
        uint64_t v76 = *v74;
        uint64_t v75 = v74[1];
        BOOL v61 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v61) {
          goto LABEL_141;
        }
        if (__OFADD__(v72, v77)) {
          goto LABEL_143;
        }
        if (v72 + v77 >= v53)
        {
          BOOL v78 = v53 < v77;
LABEL_104:
          if (v78) {
            unint64_t v50 = v62;
          }
          goto LABEL_106;
        }
LABEL_98:
        if (v73) {
          goto LABEL_140;
        }
        uint64_t v81 = &v48[2 * v50];
        uint64_t v83 = *v81;
        uint64_t v82 = v81[1];
        BOOL v61 = __OFSUB__(v82, v83);
        uint64_t v84 = v82 - v83;
        if (v61) {
          goto LABEL_142;
        }
        if (v84 < v72) {
          goto LABEL_15;
        }
LABEL_106:
        unint64_t v89 = v50 - 1;
        if (v50 - 1 >= v11)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v9) {
          goto LABEL_157;
        }
        unint64_t v90 = v10;
        uint64_t v91 = v9;
        uint64_t v92 = &v48[2 * v89];
        uint64_t v93 = *v92;
        uint64_t v94 = &v48[2 * v50];
        uint64_t v95 = v94[1];
        uint64_t result = sub_100AC8098((char *)(v91 + 32 * *v92), (char *)(v91 + 32 * *v94), v91 + 32 * v95, v111);
        if (v1) {
          goto LABEL_114;
        }
        if (v95 < v93) {
          goto LABEL_131;
        }
        if (v50 > *((void *)v90 + 2)) {
          goto LABEL_132;
        }
        *uint64_t v92 = v93;
        v48[2 * v89 + 1] = v95;
        unint64_t v96 = *((void *)v90 + 2);
        if (v50 >= v96) {
          goto LABEL_133;
        }
        uint64_t v10 = v90;
        unint64_t v11 = v96 - 1;
        uint64_t result = (uint64_t)memmove(&v48[2 * v50], v94 + 2, 16 * (v96 - 1 - v50));
        *((void *)v90 + 2) = v96 - 1;
        BOOL v78 = v96 > 2;
        uint64_t v9 = v110;
        if (!v78) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v11 = 1;
    uint64_t v9 = v110;
LABEL_15:
    Swift::Int v3 = v109;
    if (v8 >= v109)
    {
      uint64_t v7 = v107;
      goto LABEL_117;
    }
  }
  if (__OFADD__(v12, v108)) {
    goto LABEL_153;
  }
  if (v12 + v108 >= v3) {
    Swift::Int v34 = v3;
  }
  else {
    Swift::Int v34 = v12 + v108;
  }
  if (v34 >= v12)
  {
    if (v8 != v34)
    {
      int64_t v35 = (void *)(v104 + 32 * v8);
      do
      {
        uint64_t v36 = (uint64_t *)(v9 + 32 * v8);
        uint64_t v37 = *v36;
        uint64_t v38 = v36[1];
        Swift::Int v39 = v12;
        int64_t v40 = v35;
        do
        {
          uint64_t result = *(v40 - 7);
          uint64_t v41 = (long long *)(v40 - 7);
          if (result == v37 && *(v40 - 6) == v38) {
            break;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            break;
          }
          if (!v9) {
            goto LABEL_156;
          }
          long long v44 = *v41;
          long long v43 = *(_OWORD *)(v40 - 5);
          *(v40 - 4) = *v40;
          v40 -= 4;
          uint64_t v37 = v40[1];
          uint64_t v38 = v40[2];
          uint64_t v45 = v40[3];
          void v41[2] = v44;
          v41[3] = v43;
          *(v40 - 3) = v37;
          *(v40 - 2) = v38;
          *(v40 - 1) = v45;
          ++v39;
        }
        while (v8 != v39);
        ++v8;
        v35 += 4;
      }
      while (v8 != v34);
      Swift::Int v8 = v34;
    }
    goto LABEL_66;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
  return result;
}

uint64_t sub_100AC7FB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 32 * a3 + 24;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 32 * v4);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = v6;
    int64_t v13 = (void *)v8;
    while (1)
    {
      uint64_t result = *(v13 - 7);
      uint64_t v14 = (long long *)(v13 - 7);
      BOOL v15 = result == v10 && *(v13 - 6) == v11;
      if (v15 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 32;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      long long v17 = *v14;
      long long v16 = *(_OWORD *)(v13 - 5);
      *(v13 - 4) = *v13;
      v13 -= 4;
      uint64_t v10 = v13[1];
      uint64_t v11 = v13[2];
      uint64_t v18 = v13[3];
      void v14[2] = v17;
      void v14[3] = v16;
      *(v13 - 3) = v10;
      *(v13 - 2) = v11;
      *(v13 - 1) = v18;
      if (v4 == ++v12) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100AC8098(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = __src - __dst + 31;
  if (__src - __dst >= 0) {
    int64_t v9 = __src - __dst;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 31;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 5;
  if (v10 >= v12 >> 5)
  {
    if (a4 != __src || &__src[32 * v13] <= a4) {
      memmove(a4, __src, 32 * v13);
    }
    uint64_t v14 = &v4[32 * v13];
    if (v7 >= v6 || v11 < 32) {
      goto LABEL_48;
    }
    uint64_t v18 = (char *)(a3 - 32);
    while (1)
    {
      Swift::Int v19 = v18 + 32;
      uint64_t v20 = v6 - 32;
      BOOL v21 = *((void *)v6 - 4) == *((void *)v14 - 4) && *((void *)v6 - 3) == *((void *)v14 - 3);
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v20 = v14 - 32;
        if (v19 != v14)
        {
          v14 -= 32;
LABEL_45:
          long long v23 = *((_OWORD *)v20 + 1);
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v20;
          *((_OWORD *)v18 + 1) = v23;
          goto LABEL_46;
        }
        BOOL v22 = v18 >= v14;
        v14 -= 32;
        if (v22) {
          goto LABEL_45;
        }
      }
      else
      {
        if (v19 != v6)
        {
          v6 -= 32;
          goto LABEL_45;
        }
        BOOL v22 = v18 >= v6;
        v6 -= 32;
        if (v22) {
          goto LABEL_45;
        }
      }
LABEL_46:
      if (v6 > v7)
      {
        v18 -= 32;
        if (v14 > v4) {
          continue;
        }
      }
      goto LABEL_48;
    }
  }
  if (a4 != __dst || &__dst[32 * v10] <= a4) {
    memmove(a4, __dst, 32 * v10);
  }
  uint64_t v14 = &v4[32 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (1)
    {
      BOOL v15 = *(void *)v4 == *(void *)v6 && *((void *)v4 + 1) == *((void *)v6 + 1);
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      long long v16 = v6;
      BOOL v15 = v7 == v6;
      v6 += 32;
      if (!v15) {
        goto LABEL_20;
      }
LABEL_21:
      v7 += 32;
      if (v4 >= v14 || (unint64_t)v6 >= a3) {
        goto LABEL_23;
      }
    }
    long long v16 = v4;
    BOOL v15 = v7 == v4;
    v4 += 32;
    if (v15) {
      goto LABEL_21;
    }
LABEL_20:
    long long v17 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v16;
    *((_OWORD *)v7 + 1) = v17;
    goto LABEL_21;
  }
LABEL_23:
  uint64_t v6 = v7;
LABEL_48:
  if (v6 != v4 || v6 >= &v4[(v14 - v4 + (v14 - v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0]) {
    memmove(v6, v4, 32 * ((v14 - v4) / 32));
  }
  return 1;
}

char *sub_100AC82C8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C78D8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100AC83C4(uint64_t a1)
{
  return sub_100AC82C8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_100AC83D8(uint64_t a1)
{
  return sub_100ACF540(0, *(void *)(a1 + 16), 0, (char *)a1);
}

size_t sub_100AC83EC(void *a1)
{
  return sub_100ACF62C(0, a1[2], 0, a1);
}

void *sub_100AC8400(void *a1)
{
  return sub_100ACF800(0, a1[2], 0, a1);
}

uint64_t static NSUserDefaults.observe<A>(_:in:valueChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v37 = a2;
  uint64_t v9 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  int64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = _s20KeyValueRegistrationC10IdentifierVMa(0);
  uint64_t v13 = v12 - 8;
  uint64_t v34 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v34 + 64);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v35 = (uint64_t)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v36 = (uint64_t)&v34 - v17;
  __chkstk_darwin(v16);
  Swift::Int v19 = (char *)&v34 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a6);
  swift_bridgeObjectRetain();
  uint64_t v20 = String.init<A>(_:)();
  uint64_t v22 = v21;
  UUID.init()();
  long long v23 = &v19[*(int *)(v13 + 28)];
  *(void *)long long v23 = v37;
  *((void *)v23 + 1) = a3;
  uint64_t v24 = (uint64_t *)&v19[*(int *)(v13 + 32)];
  *uint64_t v24 = v20;
  v24[1] = v22;
  if (qword_1010C63C8 != -1) {
    swift_once();
  }
  uint64_t v25 = qword_1010C78E8;
  uint64_t v26 = *(void *)(qword_1010C78E8
                  + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v26 + 16));
  uint64_t v27 = v40;
  sub_100023618(v25, (uint64_t)v19, v38, v39);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 16));
  if (v27)
  {
    sub_100ACE518((uint64_t)v19, _s20KeyValueRegistrationC10IdentifierVMa);
  }
  else
  {
    uint64_t v28 = v36;
    sub_100024AAC((uint64_t)v19, v36);
    uint64_t v29 = v35;
    sub_100024BB0((uint64_t)v19, v35, _s20KeyValueRegistrationC10IdentifierVMa);
    unint64_t v30 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    uint64_t v31 = swift_allocObject();
    sub_100024BB0(v29, v31 + v30, _s20KeyValueRegistrationC10IdentifierVMa);
    type metadata accessor for NSUserDefaults.KeyValueRegistration(0);
    uint64_t v26 = swift_allocObject();
    sub_100024BB0(v28, v26 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, _s20KeyValueRegistrationC10IdentifierVMa);
    uint64_t v32 = (void (**)())(v26 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate);
    *uint64_t v32 = sub_100A892B0;
    v32[1] = (void (*)())v31;
  }
  return v26;
}

uint64_t UserDefault.init<A>(wrappedValue:defaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, char *a7@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v22 = a6;
  uint64_t v20 = a7;
  __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  __n128 v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))((char *)&v19 - v16, a1, v13, v15);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a3, a5);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  return UserDefault.init(wrappedValue:defaults:key:)((uint64_t)v17, v21, (uint64_t)v12, a4, v20);
}

uint64_t UserDefault.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  sub_100ACBCC0(a1, a2);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

void (*UserDefault.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  char v5 = malloc(0x30uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  void v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  UserDefault.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_100AC8A6C;
}

void sub_100AC8A6C(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_100ACBCC0((uint64_t)v3, v7);
    size_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    sub_100ACBCC0((*a1)[5], v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t UserDefault.defaultValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

void NSUserDefaults.Suite.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t static NSUserDefaults.Suite.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return a4 == 0;
  }
  if (!a4) {
    return 0;
  }
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int NSUserDefaults.Suite.hashValue.getter(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int sub_100AC8CF0()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_100AC8D60()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_100AC8DD8()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_100AC8E44(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (!v3) {
    return v4 == 0;
  }
  if (!v4) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

void (*NSUserDefaults.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2)
{
  uint64_t v9 = malloc(0x70uLL);
  *a1 = v9;
  v9[9] = a4;
  v9[10] = v4;
  v9[8] = a3;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = v10;
  v9[11] = v10;
  size_t v12 = *(void *)(v10 + 64);
  v9[12] = malloc(v12);
  v9[13] = malloc(v12);
  (*(void (**)(void))(v11 + 16))();
  NSUserDefaults.subscript.getter(a2, v9);
  return sub_100AC8F94;
}

void sub_100AC8F94(uint64_t *a1, char a2)
{
  uint64_t v2 = (uint64_t *)*a1;
  uint64_t v4 = *(void **)(*a1 + 96);
  uint64_t v3 = *(void **)(*a1 + 104);
  if (a2)
  {
    uint64_t v5 = v2[11];
    uint64_t v6 = v2[8];
    sub_100058DE8(*a1, (uint64_t)(v2 + 4));
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v4, v3, v6);
    NSUserDefaults.subscript.setter((uint64_t)(v2 + 4), (uint64_t)v4, v6);
    sub_10005DEB8((uint64_t)v2);
  }
  else
  {
    NSUserDefaults.subscript.setter(*a1, v2[13], v2[8]);
  }
  free(v3);
  free(v4);

  free(v2);
}

void (*NSUserDefaults.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t *a1, char a2)
{
  uint64_t v10 = malloc(0x70uLL);
  *a1 = v10;
  v10[10] = a5;
  v10[11] = v5;
  _DWORD v10[8] = a3;
  v10[9] = a4;
  uint64_t v11 = *(void *)(a3 - 8);
  uint64_t v12 = v11;
  v10[12] = v11;
  v10[13] = malloc(*(void *)(v11 + 64));
  (*(void (**)(void))(v12 + 16))();
  NSUserDefaults.subscript.getter(v10);
  return sub_100AC9160;
}

void sub_100AC9160(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    uint64_t v4 = v2[12];
    uint64_t v3 = (void *)v2[13];
    uint64_t v5 = v2[8];
    sub_100058DE8(*a1, (uint64_t)(v2 + 4));
    sub_10005DA28((uint64_t)(v2 + 4));
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
    sub_10005DEB8((uint64_t)v2);
  }
  else
  {
    uint64_t v6 = v2[12];
    uint64_t v3 = (void *)v2[13];
    uint64_t v7 = v2[8];
    sub_10005DA28(*a1);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v7);
  }
  free(v3);

  free(v2);
}

uint64_t NSUserDefaults.Migrator.init(userDefaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  uint64_t v6 = (char *)a4 + *(int *)(type metadata accessor for NSUserDefaults.Migrator() + 44);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);

  return v7(v6, a2, a3);
}

uint64_t NSUserDefaults.Migrator.init<A>(userDefaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, char *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
  *(void *)a5 = a1;
  uint64_t v13 = type metadata accessor for NSUserDefaults.Migrator();
  return (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(&a5[*(int *)(v13 + 44)], v12, a3);
}

uint64_t NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v51 = a6;
  BOOL v61 = a4;
  uint64_t v66 = a3;
  uint64_t v67 = a2;
  uint64_t v57 = a1;
  uint64_t v52 = a7;
  uint64_t v63 = a5;
  uint64_t v55 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v62 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = v10;
  uint64_t v11 = v10 - 8;
  uint64_t v64 = *(void *)(v10 - 8);
  __chkstk_darwin(v12);
  uint64_t v53 = (id *)((char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void *)(v11 + 24);
  uint64_t v65 = *(void *)(v14 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v18;
  uint64_t v59 = type metadata accessor for Optional();
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  char v54 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v74 = (char *)&v51 - v21;
  uint64_t v22 = *(void *)(v11 + 32);
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v69 = v23;
  uint64_t v70 = v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v51 - v25;
  uint64_t v27 = v7 + *(int *)(v11 + 52);
  NSUserDefaults.subscript.getter(v27, v73);
  sub_100058DE8((uint64_t)v73, (uint64_t)&v71);
  sub_100063814(&qword_1010C6AF0);
  int v28 = swift_dynamicCast();
  uint64_t v29 = *(void *)(v22 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, v28 ^ 1u, 1, v22);
  sub_100058DE8((uint64_t)v73, (uint64_t)&v71);
  uint64_t v30 = *((void *)&v72 + 1);
  sub_10005DEB8((uint64_t)&v71);
  if (v30 && (*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v26, 1, v22) == 1)
  {
    _s8MigratorV5ErrorOMa();
    swift_getWitnessTable();
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v31, v27, v14);
    swift_willThrow();
LABEL_5:
    sub_10005DEB8((uint64_t)v73);
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v26, v69);
  }
  id v32 = v68;
  v67(v26);
  if (v32) {
    goto LABEL_5;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v17, v27, v14);
  long long v71 = 0u;
  long long v72 = 0u;
  NSUserDefaults.subscript.setter((uint64_t)&v71, (uint64_t)v17, v14);
  uint64_t v34 = v53;
  uint64_t v35 = v56;
  (*(void (**)(id *, uint64_t, uint64_t))(v64 + 16))(v53, v8, v56);
  uint64_t v36 = v61;
  if (v61)
  {
    id v68 = v61;
  }
  else
  {
    id v37 = *v34;
    uint64_t v36 = v61;
    id v68 = v37;
  }
  uint64_t v38 = v62;
  uint64_t v39 = v63;
  uint64_t v40 = v58;
  uint64_t v41 = *(void (**)(id *, uint64_t))(v64 + 8);
  id v42 = v36;
  v41(v34, v35);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v38, v57, v39);
  long long v43 = v54;
  uint64_t v44 = v59;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v54, v74, v59);
  uint64_t v45 = v60;
  uint64_t v46 = *(void *)(v60 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v43, 1, v60) == 1)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v44);
    long long v71 = 0u;
    long long v72 = 0u;
  }
  else
  {
    *((void *)&v72 + 1) = v45;
    unint64_t v47 = sub_100068018((uint64_t *)&v71);
    (*(void (**)(uint64_t *, char *, uint64_t))(v46 + 32))(v47, v43, v45);
  }
  uint64_t v48 = v52;
  uint64_t v49 = v68;
  uint64_t v50 = v69;
  NSUserDefaults.subscript.setter((uint64_t)&v71, v62, v63);

  sub_10005DEB8((uint64_t)v73);
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v48, v74, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v26, v50);
}

uint64_t NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v19 = a5;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v16 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v13 = (char *)&v15 - v12;
  dispatch thunk of RawRepresentable.rawValue.getter();
  NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)((uint64_t)v13, a1, a2, v17, AssociatedTypeWitness, v16, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t NSUserDefaults.Migrator.migrateValue<A>(to:destination:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)(a1, (void (*)(char *))sub_100A87CFC, v12, a2, a4, a5, a6);
  return swift_release();
}

uint64_t (*static NSUserDefaults.ValueTransformer<>.identity.getter(uint64_t a1))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(swift_allocObject() + 16) = a1;
  return sub_100A87CFC;
}

uint64_t NSUserDefaults.Migrator.migrateValue<A>(to:destination:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v12 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v12 - v9;
  dispatch thunk of RawRepresentable.rawValue.getter();
  NSUserDefaults.Migrator.migrateValue<A>(to:destination:)((uint64_t)v10, a1, a2, AssociatedTypeWitness, v12, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t NSUserDefaults.migrateValue<A, B>(for:to:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v19 = a5;
  uint64_t v20 = a2;
  uint64_t v9 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NSUserDefaults.Migrator();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, a1, a3, v14);
  *(void *)uint64_t v16 = v5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[*(int *)(v12 + 44)], v11, a3);
  id v17 = v5;
  NSUserDefaults.Migrator.migrateValue<A>(to:destination:)(a1, v20, v12, a3, a4, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t NSUserDefaults.migrateValue<A, B>(for:to:)@<X0>(void *a1@<X1>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v8 = (char *)&v10 - v7;
  dispatch thunk of RawRepresentable.rawValue.getter();
  NSUserDefaults.migrateValue<A, B>(for:to:)((uint64_t)v8, a1, AssociatedTypeWitness, v10, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
}

Swift::Void __swiftcall NSUserDefaults.KeyValueRegistration.invalidate()()
{
  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
}

uint64_t NSUserDefaults.KeyValueRegistration.deinit()
{
  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
  sub_100ACE518(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, _s20KeyValueRegistrationC10IdentifierVMa);
  swift_release();
  return v0;
}

uint64_t NSUserDefaults.KeyValueRegistration.__deallocating_deinit()
{
  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
  sub_100ACE518(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, _s20KeyValueRegistrationC10IdentifierVMa);
  swift_release();

  return swift_deallocClassInstance();
}

void sub_100ACA2B8(uint64_t a1)
{
  if (qword_1010C63C8 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1010C78E8;
  uint64_t v3 = *(void *)(qword_1010C78E8
                 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + 16));
  sub_100ACA5A4(v2, a1);
  uint64_t v4 = *(os_unfair_lock_s **)(v3 + 16);

  os_unfair_lock_unlock(v4);
}

uint64_t static NSUserDefaults.observe<A>(_:in:valueChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v17[0] = a5;
  v17[1] = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  __n128 v14 = (char *)v17 - v13;
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v15 = static NSUserDefaults.observe<A>(_:in:valueChanged:)((uint64_t)v14, a2, a3, a4, v17[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  return v15;
}

uint64_t sub_100ACA4A0()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(_s20KeyValueRegistrationC10IdentifierVMa(0) - 8) + 80);
  uint64_t v2 = v0 + ((v1 + 16) & ~v1);
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100ACA5A4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = _s9_ObserverC18HandlerAssociationVMa(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t *)(a1
                 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites);
  swift_beginAccess();
  uint64_t v10 = *v9;
  uint64_t v49 = a2;
  swift_bridgeObjectRetain();
  unint64_t v47 = (void (*)(unsigned char *, void))sub_100024C18((uint64_t (*)(void *))sub_100ACE5FC, (uint64_t)v48, v10);
  uint64_t v12 = v11;
  __n128 v14 = v13;
  uint64_t v16 = v15;
  uint64_t v17 = v2;
  uint64_t result = swift_bridgeObjectRelease();
  if (v14)
  {
    uint64_t v19 = _s20KeyValueRegistrationC10IdentifierVMa(0);
    if (*(void *)(v16 + 16))
    {
      uint64_t v46 = a1;
      uint64_t v20 = (uint64_t *)(a2 + *(int *)(v19 + 24));
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      uint64_t v45 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_100071DE8(v21, v22);
      if (v24)
      {
        uint64_t v44 = v12;
        uint64_t v25 = *(void *)(*(void *)(v16 + 56) + 8 * v23);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v53 = v25;
        uint64_t v26 = *(void *)(v25 + 16);
        if (v26)
        {
          v43[1] = v17;
          unint64_t v27 = v25 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
          uint64_t v28 = *(void *)(v6 + 72);
          swift_bridgeObjectRetain();
          unint64_t v29 = 0;
          while ((static UUID.== infix(_:_:)() & 1) == 0)
          {
            ++v29;
            v27 += v28;
            if (v26 == v29)
            {

              swift_bridgeObjectRelease_n();
              goto LABEL_11;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v30 = v44;
          swift_bridgeObjectRetain();
          id v31 = v14;
          sub_100ABE950(v29, (uint64_t)v8);
          sub_100ACE518((uint64_t)v8, _s9_ObserverC18HandlerAssociationVMa);
          uint64_t v32 = v53;
          if (!*(void *)(v53 + 16))
          {
            id v33 = v31;
            NSString v34 = String._bridgeToObjectiveC()();
            [v33 removeObserver:v46 forKeyPath:v34];
          }
          swift_bridgeObjectRetain();
          id v35 = v31;
          uint64_t v36 = sub_100ACAF84();
          uint64_t v38 = sub_100AABAFC(v51, (uint64_t)v47, v30, v35);
          if (*v37)
          {
            uint64_t v39 = v37;
            unint64_t v47 = (void (*)(unsigned char *, void))v36;
            uint64_t v41 = *v45;
            uint64_t v40 = v45[1];
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v50 = *v39;
            *uint64_t v39 = 0x8000000000000000;
            sub_100023F60(v32, v41, v40, isUniquelyReferenced_nonNull_native);
            *uint64_t v39 = v50;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ((void (*)(void *, void))v38)(v51, 0);

            swift_bridgeObjectRelease();
            v47(v52, 0);
          }
          else
          {
            swift_bridgeObjectRelease();
            ((void (*)(void *, void))v38)(v51, 0);

            swift_bridgeObjectRelease();
            ((void (*)(unsigned char *, void))v36)(v52, 0);
          }

          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL sub_100ACA9D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)(a2 + *(int *)(_s20KeyValueRegistrationC10IdentifierVMa(0) + 20));
  uint64_t v5 = v4[1];
  if (!v3) {
    return v5 == 0;
  }
  if (!v5) {
    return 0;
  }
  if (v2 == *v4 && v3 == v5) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

void sub_100ACAA60(uint64_t a1, void *a2, uint64_t a3, Class isa, uint64_t a5)
{
  NSString v9 = a2;
  uint64_t v36 = a1;
  if (!a2)
  {
LABEL_9:
    sub_100058DE8(a3, (uint64_t)&v39);
    uint64_t v20 = *((void *)&v40 + 1);
    if (*((void *)&v40 + 1))
    {
      uint64_t v21 = sub_100068990(&v39, *((uint64_t *)&v40 + 1));
      uint64_t v22 = *(void *)(v20 - 8);
      __n128 v23 = __chkstk_darwin(v21);
      uint64_t v25 = (char *)&v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v22 + 16))(v25, v23);
      uint64_t v26 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v20);
      sub_1000760E4((uint64_t)&v39);
      if (!isa)
      {
LABEL_12:
        unint64_t v27 = (objc_class *)_s9_ObserverCMa();
        v38.receiver = v5;
        v38.super_class = v27;
        [super observeValueForKeyPath:v9 ofObject:v26 change:isa context:a5];

        swift_unknownObjectRelease();
LABEL_13:

        return;
      }
    }
    else
    {
      uint64_t v26 = 0;
      if (!isa) {
        goto LABEL_12;
      }
    }
    type metadata accessor for NSKeyValueChangeKey(0);
    sub_100ACE4C0();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    goto LABEL_12;
  }
  sub_100058DE8(a3, (uint64_t)&v39);
  if (!*((void *)&v40 + 1))
  {
    sub_10005DEB8((uint64_t)&v39);
    goto LABEL_8;
  }
  sub_100057778(0, &qword_1010C7D38);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    NSString v9 = String._bridgeToObjectiveC()();
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)&v5[OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 16));
  swift_beginAccess();
  Class isa = (Class)v37;
  uint64_t v11 = swift_bridgeObjectRetain();
  sub_100ACB94C(v11, isa);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();

  if (!v13) {
    goto LABEL_16;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_100ACBAE8(v15, v36, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17) {
    swift_bridgeObjectRelease();
  }
  else {
LABEL_16:
  }
    uint64_t v19 = _swiftEmptyArrayStorage;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 16));
  uint64_t v28 = v19[2];
  if (!v28)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v29 = _s9_ObserverC18HandlerAssociationVMa(0);
  uint64_t v30 = (char *)v19
      + ((*(unsigned __int8 *)(*(void *)(v29 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v29 - 8) + 80));
  uint64_t v31 = *(void *)(*(void *)(v29 - 8) + 72);
  id v35 = v19;
  swift_bridgeObjectRetain();
  do
  {
    uint64_t v32 = *(void (**)(long long *))&v30[*(int *)(v29 + 20)];
    NSString v33 = String._bridgeToObjectiveC()();
    id v34 = -[objc_class valueForKey:](isa, "valueForKey:", v33, v35);

    if (v34)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v39 = 0u;
      long long v40 = 0u;
    }
    v32(&v39);
    sub_10005DEB8((uint64_t)&v39);
    v30 += v31;
    --v28;
  }
  while (v28);

  swift_bridgeObjectRelease_n();
}

uint64_t (*sub_100ACAF84())()
{
  return j__swift_endAccess;
}

Swift::Int sub_100ACAFE0()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_100ACB060()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_100ACB0E8()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_100ACB164(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      BOOL v5 = *a1 == *a2 && v3 == v4;
      if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_8;
      }
    }
  }
  else if (!v4)
  {
LABEL_8:
    sub_100057778(0, (unint64_t *)&unk_1010C77E0);
    return static NSObject.== infix(_:_:)() & 1;
  }
  return 0;
}

id sub_100ACB1F0()
{
  v2.receiver = v0;
  v2.super_class = (Class)_s9_ObserverCMa();
  return [super dealloc];
}

uint64_t NSUserDefaults.encodeValue(_:forKey:)(void *a1)
{
  objc_super v2 = v1;
  sub_100068990(a1, a1[3]);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v5 = v4;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v7 = String._bridgeToObjectiveC()();
  [v2 setValue:isa forKey:v7];

  return sub_10007A5C4(v3, v5);
}

uint64_t NSUserDefaults.decodeValue<A>(_:forKey:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v2 valueForKey:v5];

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_1000568AC((uint64_t)v11, (uint64_t)v12);
  if (!v12[3])
  {
    sub_10005DEB8((uint64_t)v12);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    uint64_t v7 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v7, 1, a1);
  }
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_10007A5C4(v9, v10);
  swift_release();
  uint64_t v7 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v7, 1, a1);
}

uint64_t sub_100ACB890()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100014CA4(v0, qword_1010C78F0);
  sub_100050A90(v0, (uint64_t)qword_1010C78F0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100ACB910(void (*a1)(void))
{
  a1();

  return _typeName(_:qualified:)();
}

uint64_t sub_100ACB94C(uint64_t result, void *a2)
{
  int64_t v3 = 0;
  uint64_t v4 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v12 >= v8) {
      return 0;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      int64_t v3 = v12 + 1;
      if (v12 + 1 >= v8) {
        return 0;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v3);
      if (!v13)
      {
        int64_t v3 = v12 + 2;
        if (v12 + 2 >= v8) {
          return 0;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v3);
        if (!v13)
        {
          int64_t v3 = v12 + 3;
          if (v12 + 3 >= v8) {
            return 0;
          }
          unint64_t v13 = *(void *)(v4 + 8 * v3);
          if (!v13)
          {
            int64_t v14 = v12 + 4;
            if (v14 >= v8) {
              return 0;
            }
            unint64_t v13 = *(void *)(v4 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                int64_t v3 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_27;
                }
                if (v3 >= v8) {
                  return 0;
                }
                unint64_t v13 = *(void *)(v4 + 8 * v3);
                ++v14;
                if (v13) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v3 = v14;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = *(void *)(result + 48);
    if (*(void **)(v11 + 24 * v10 + 16) == a2)
    {
      uint64_t v15 = *(void *)(v11 + 24 * v10);
      swift_bridgeObjectRetain();
      id v16 = a2;
      swift_bridgeObjectRetain();
      return v15;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100ACBAE8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int64_t v6 = 0;
  uint64_t v7 = result + 64;
  uint64_t v8 = 1 << *(unsigned char *)(result + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(result + 64);
  int64_t v19 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v12 = v11 | (v6 << 6);
      goto LABEL_22;
    }
    int64_t v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v19) {
      return 0;
    }
    unint64_t v14 = *(void *)(v7 + 8 * v13);
    ++v6;
    if (!v14)
    {
      int64_t v6 = v13 + 1;
      if (v13 + 1 >= v19) {
        return 0;
      }
      unint64_t v14 = *(void *)(v7 + 8 * v6);
      if (!v14)
      {
        int64_t v6 = v13 + 2;
        if (v13 + 2 >= v19) {
          return 0;
        }
        unint64_t v14 = *(void *)(v7 + 8 * v6);
        if (!v14)
        {
          int64_t v6 = v13 + 3;
          if (v13 + 3 >= v19) {
            return 0;
          }
          unint64_t v14 = *(void *)(v7 + 8 * v6);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v6 << 6);
LABEL_22:
    id v16 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v12);
    uint64_t v17 = *v16;
    if (*v16 == a2 && v16[1] == a3)
    {
      uint64_t v17 = a2;
LABEL_29:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return v17;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_29;
    }
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v19) {
    return 0;
  }
  unint64_t v14 = *(void *)(v7 + 8 * v15);
  if (v14)
  {
    int64_t v6 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v6 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v6 >= v19) {
      return 0;
    }
    unint64_t v14 = *(void *)(v7 + 8 * v6);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100ACBCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a2 + 16);
  __chkstk_darwin(v8);
  int64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v2 + *(int *)(a2 + 44), v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  uint64_t v15 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    long long v18 = 0u;
    long long v19 = 0u;
  }
  else
  {
    *((void *)&v19 + 1) = v5;
    id v16 = sub_100068018((uint64_t *)&v18);
    (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 32))(v16, v10, v5);
  }
  return NSUserDefaults.subscript.setter((uint64_t)&v18, (uint64_t)v13, v11);
}

uint64_t type metadata accessor for NSUserDefaults.Migrator()
{
  return sub_10004CF5C();
}

uint64_t _s8MigratorV5ErrorOMa()
{
  return sub_10004CF5C();
}

uint64_t sub_100ACBF20()
{
  return swift_deallocObject();
}

unint64_t sub_100ACBF34()
{
  unint64_t result = qword_1010C7910[0];
  if (!qword_1010C7910[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1010C7910);
  }
  return result;
}

void **sub_100ACBF88(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(v4 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v8 + v10;
  if (*(_DWORD *)(v9 + 84)) {
    size_t v12 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  else {
    size_t v12 = *(void *)(*(void *)(v4 - 8) + 64) + 1;
  }
  int v13 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  uint64_t v14 = (char *)*a2;
  *a1 = *a2;
  if ((v10 | v7) > 7 || v13 != 0 || v12 + ((v8 + v10 + ((v7 + 8) & ~v7)) & ~v10) > 0x18)
  {
    uint64_t v17 = &v14[((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16)];
    swift_retain();
  }
  else
  {
    uint64_t v18 = ~v10;
    uint64_t v25 = a1;
    uint64_t v19 = ((unint64_t)a1 + v7 + 8) & ~v7;
    uint64_t v20 = ((unint64_t)a2 + v7 + 8) & ~v7;
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    uint64_t v22 = v14;
    v21(v19, v20, v5);
    __n128 v23 = (void *)((v19 + v11) & v18);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v20 + v11) & v18, 1, v4))
    {
      memcpy(v23, (const void *)((v20 + v11) & v18), v12);
    }
    else
    {
      (*(void (**)(void *, uint64_t, uint64_t))(v9 + 16))(v23, (v20 + v11) & v18, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v23, 0, 1, v4);
    }
    return v25;
  }
  return (void **)v17;
}

void **sub_100ACC1A0(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)a1 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)a2 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 40);
  uint64_t v15 = *(void *)(a3 + 24);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = v14 + v17;
  uint64_t v19 = (void *)((v18 + v12) & ~v17);
  uint64_t v20 = (void *)((v18 + v13) & ~v17);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v13) = v21(v19, 1, v15);
  int v22 = v21(v20, 1, v15);
  if (v13)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v19, v20, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
      return a1;
    }
    int v23 = *(_DWORD *)(v16 + 84);
    size_t v24 = *(void *)(v16 + 64);
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v19, v20, v15);
      return a1;
    }
    uint64_t v26 = *(void (**)(void *, uint64_t))(v16 + 8);
    uint64_t v25 = v16 + 8;
    v26(v19, v15);
    int v23 = *(_DWORD *)(v25 + 76);
    size_t v24 = *(void *)(v25 + 56);
  }
  if (v23) {
    size_t v27 = v24;
  }
  else {
    size_t v27 = v24 + 1;
  }
  memcpy(v19, v20, v27);
  return a1;
}

void *sub_100ACC37C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32);
  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = v10 + v13;
  uint64_t v15 = (void *)((v14 + v8) & ~v13);
  uint64_t v16 = (const void *)((v14 + v9) & ~v13);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11))
  {
    if (*(_DWORD *)(v12 + 84)) {
      size_t v17 = *(void *)(v12 + 64);
    }
    else {
      size_t v17 = *(void *)(v12 + 64) + 1;
    }
    memcpy(v15, v16, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v15, v16, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  return a1;
}

void **sub_100ACC4D8(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 8) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 8) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = v12 + v15;
  size_t v17 = (void *)((v16 + v10) & ~v15);
  uint64_t v18 = (void *)((v16 + v11) & ~v15);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v11) = v19(v17, 1, v13);
  int v20 = v19(v18, 1, v13);
  if (v11)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v17, v18, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
      return a1;
    }
    int v21 = *(_DWORD *)(v14 + 84);
    size_t v22 = *(void *)(v14 + 64);
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v17, v18, v13);
      return a1;
    }
    size_t v24 = *(void (**)(void *, uint64_t))(v14 + 8);
    uint64_t v23 = v14 + 8;
    v24(v17, v13);
    int v21 = *(_DWORD *)(v23 + 76);
    size_t v22 = *(void *)(v23 + 56);
  }
  if (v21) {
    size_t v25 = v22;
  }
  else {
    size_t v25 = v22 + 1;
  }
  memcpy(v17, v18, v25);
  return a1;
}

uint64_t sub_100ACC6B0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  unsigned int v10 = v9 - 1;
  if (!v9) {
    unsigned int v10 = 0;
  }
  if (v5 <= v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v4 + 84);
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = *(void *)(*(void *)(v6 - 8) + 64);
  if (!v9) {
    ++v16;
  }
  if (!a2) {
    return 0;
  }
  int v17 = a2 - v12;
  if (a2 <= v12) {
    goto LABEL_31;
  }
  uint64_t v18 = v16 + ((v14 + v15 + ((v13 + 8) & ~v13)) & ~v15);
  char v19 = 8 * v18;
  if (v18 > 3) {
    goto LABEL_14;
  }
  unsigned int v21 = ((v17 + ~(-1 << v19)) >> v19) + 1;
  if (HIWORD(v21))
  {
    int v20 = *(_DWORD *)((char *)a1 + v18);
    if (v20) {
      goto LABEL_21;
    }
LABEL_31:
    if ((v11 & 0x80000000) == 0)
    {
      uint64_t v25 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v25) = -1;
      }
      return (v25 + 1);
    }
    uint64_t v27 = ((unint64_t)a1 + v13 + 8) & ~v13;
    if (v5 == v12)
    {
      uint64_t v28 = *(uint64_t (**)(uint64_t))(v4 + 48);
      return v28(v27);
    }
    if (v9 >= 2)
    {
      unsigned int v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v27 + v14 + v15) & ~v15, v9, v6);
      if (v29 >= 2) {
        return v29 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  if (v21 > 0xFF)
  {
    int v20 = *(unsigned __int16 *)((char *)a1 + v18);
    if (*(unsigned __int16 *)((char *)a1 + v18)) {
      goto LABEL_21;
    }
    goto LABEL_31;
  }
  if (v21 < 2) {
    goto LABEL_31;
  }
LABEL_14:
  int v20 = *((unsigned __int8 *)a1 + v18);
  if (!*((unsigned char *)a1 + v18)) {
    goto LABEL_31;
  }
LABEL_21:
  int v22 = (v20 - 1) << v19;
  if (v18 > 3) {
    int v22 = 0;
  }
  if (v18)
  {
    if (v18 <= 3) {
      int v23 = v18;
    }
    else {
      int v23 = 4;
    }
    switch(v23)
    {
      case 2:
        int v24 = *a1;
        break;
      case 3:
        int v24 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v24 = *(_DWORD *)a1;
        break;
      default:
        int v24 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v24 = 0;
  }
  return v12 + (v24 | v22) + 1;
}

void sub_100ACC948(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = *(void *)(v7 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  unsigned int v15 = v11 - 1;
  if (!v11) {
    unsigned int v15 = 0;
  }
  if (v8 <= v15) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v7 + 84);
  }
  if (v16 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  else {
    unsigned int v17 = v16;
  }
  if (v11) {
    uint64_t v18 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  else {
    uint64_t v18 = *(void *)(*(void *)(v9 - 8) + 64) + 1;
  }
  size_t v19 = v18 + ((v13 + v14 + ((v12 + 8) & ~v12)) & ~v14);
  BOOL v20 = a3 >= v17;
  unsigned int v21 = a3 - v17;
  if (v21 == 0 || !v20)
  {
LABEL_21:
    if (v17 < a2) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  if (v19 > 3)
  {
    int v6 = 1;
    if (v17 < a2) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  unsigned int v22 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
  if (!HIWORD(v22))
  {
    if (v22 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v22 > 1;
    }
    goto LABEL_21;
  }
  int v6 = 4;
  if (v17 < a2)
  {
LABEL_22:
    unsigned int v23 = ~v17 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v25 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v25;
          a1[2] = BYTE2(v25);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v25;
        }
        else
        {
          *a1 = v25;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_56;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
LABEL_29:
  switch(v6)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 3:
LABEL_56:
      __break(1u);
      JUMPOUT(0x100ACCC80);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_33;
    default:
LABEL_33:
      if (a2)
      {
LABEL_34:
        if ((v16 & 0x80000000) != 0)
        {
          unint64_t v27 = (unint64_t)&a1[v12 + 8] & ~v12;
          if (v8 == v17)
          {
            uint64_t v28 = *(void (**)(unint64_t))(v7 + 56);
            v28(v27);
          }
          else if (v11 >= 2)
          {
            unint64_t v29 = (v27 + v13 + v14) & ~v14;
            uint64_t v30 = a2 + 1;
            uint64_t v31 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
            v31(v29, v30, v11, v9);
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v26 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v26 = a2 - 1;
          }
          *(void *)a1 = v26;
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for NSUserDefaults.Suite()
{
  return &type metadata for NSUserDefaults.Suite;
}

uint64_t type metadata accessor for NSUserDefaults.ValueTransformer()
{
  return sub_10004CF5C();
}

uint64_t sub_100ACCCD4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void **sub_100ACCD74(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = (char *)*a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (void **)&v9[(v6 & 0xF8 ^ 0x1F8) & (v6 + 16)];
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    unsigned int v15 = v9;
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_100ACCE78(id *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void **sub_100ACCEEC(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  id v11 = v4;
  v7(v9, v10, v5);
  return a1;
}

void **sub_100ACCF7C(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

void *sub_100ACD008(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void **sub_100ACD078(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_100ACD100(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_100ACD2A0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x100ACD4FCLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          BOOL v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t sub_100ACD524()
{
  return type metadata accessor for NSUserDefaults.KeyValueRegistration(0);
}

uint64_t *sub_100ACD52C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    size_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t sub_100ACD600(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t sub_100ACD678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  return a1;
}

uint64_t sub_100ACD700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100ACD794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100ACD810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_100ACD898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100ACD8AC);
}

uint64_t sub_100ACD8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100ACD96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100ACD980);
}

uint64_t sub_100ACD980(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

void _s9_ObserverC16SuiteAssociationVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 16);
}

void *_s9_ObserverC16SuiteAssociationVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *_s9_ObserverC16SuiteAssociationVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

uint64_t _s9_ObserverC16SuiteAssociationVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t sub_100ACDB64(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState();
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8);
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t sub_100ACDC0C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_100ACDD68(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x100ACDF80);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t *sub_100ACDFA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    unsigned int v10 = (uint64_t *)((char *)a1 + v8);
    int v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unsigned int v10 = *v11;
    v10[1] = v12;
    int v13 = (uint64_t *)((char *)a1 + v9);
    unsigned int v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *int v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100ACE098(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100ACE120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  int v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100ACE1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100ACE26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  int v13 = (void *)(a1 + v12);
  unsigned int v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *int v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100ACE314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100ACE328);
}

uint64_t sub_100ACE328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100ACE3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100ACE400);
}

uint64_t sub_100ACE400(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

unint64_t sub_100ACE4C0()
{
  unint64_t result = qword_1010C65D8;
  if (!qword_1010C65D8)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C65D8);
  }
  return result;
}

uint64_t sub_100ACE518(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL sub_100ACE578(uint64_t *a1)
{
  return sub_100ACA9D0(a1, *(void *)(v1 + 16));
}

unint64_t sub_100ACE598()
{
  unint64_t result = qword_1010C7D40;
  if (!qword_1010C7D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7D40);
  }
  return result;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

BOOL sub_100ACE5FC(uint64_t *a1)
{
  return sub_100ACE578(a1);
}

uint64_t sub_100ACE620(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0;
  }
}

uint64_t sub_100ACE668(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_5:
      uint64_t v6 = v5;
      sub_100ACF924();
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

void sub_100ACE7E0()
{
  qword_1010C7D48 = (uint64_t)&off_101003AE0;
}

void sub_100ACE7F4()
{
  qword_1010C7D50 = (uint64_t)&off_101003B10;
}

void sub_100ACE808()
{
  off_1010C7D58 = &off_101003B40;
}

uint64_t sub_100ACE81C()
{
  if (qword_1010C63E8 != -1) {
    swift_once();
  }
  uint64_t v0 = off_1010C7D58;
  if (qword_1010C63D8 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t result = sub_100A9DA14(v1);
  qword_10112BE70 = (uint64_t)v0;
  return result;
}

uint64_t sub_100ACE8E0()
{
  if (qword_1010C63E8 != -1) {
    swift_once();
  }
  uint64_t v0 = (char *)off_1010C7D58;
  int64_t v1 = *((void *)off_1010C7D58 + 2);
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_100076FA8(0, v1, 0);
    uint64_t v2 = (uint64_t *)(v0 + 40);
    do
    {
      uint64_t v9 = *(v2 - 1);
      uint64_t v10 = *v2;
      swift_bridgeObjectRetain_n();
      v3._uint64_t countAndFlagsBits = 115;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      unint64_t v5 = _swiftEmptyArrayStorage[2];
      unint64_t v4 = _swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1) {
        sub_100076FA8((char *)(v4 > 1), v5 + 1, 1);
      }
      v2 += 2;
      _swiftEmptyArrayStorage[2] = v5 + 1;
      uint64_t v6 = &_swiftEmptyArrayStorage[2 * v5];
      v6[4] = v9;
      uint64_t v6[5] = v10;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  if (qword_1010C63E0 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_100A9DA14(v7);
  uint64_t result = swift_bridgeObjectRelease();
  qword_10112BE78 = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

uint64_t URL.replacingSchemeWithHTTP.getter@<X0>(uint64_t a1@<X8>)
{
  sub_100063814(&qword_1010C78C0);
  __chkstk_darwin();
  Swift::String v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_1000637B8((uint64_t)v3, &qword_1010C78C0);
LABEL_9:
    uint64_t v12 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  uint64_t v8 = URLComponents.scheme.getter();
  if (!v9)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    goto LABEL_9;
  }
  uint64_t v10 = v8;
  uint64_t v11 = v9;
  if (qword_1010C63F8 != -1) {
    swift_once();
  }
  if (sub_1003C85DC(v10, v11, (void *)qword_10112BE78))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1010C63F0 != -1) {
      swift_once();
    }
    char v14 = sub_1003C85DC(v10, v11, (void *)qword_10112BE70);
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0) {
      goto LABEL_14;
    }
  }
  URLComponents.scheme.setter();
LABEL_14:
  URLComponents.url.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Void __swiftcall URLComponents.appendPath(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v3 = URLComponents.path.getter();
  uint64_t v5 = sub_100ACEEE8(v3, v4);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    if (v5 == 47 && v7 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t v9 = (void (*)(void *, void))URLComponents.path.modify();
      v10._uint64_t countAndFlagsBits = countAndFlagsBits;
      v10._object = object;
      String.append(_:)(v10);
      v9(v18, 0);
      return;
    }
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_100ACE620(countAndFlagsBits, (unint64_t)object);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (v13)
  {
    if (v11 == 47 && v13 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_12;
    }
  }
  v18[0] = 47;
  v18[1] = 0xE100000000000000;
  v15._uint64_t countAndFlagsBits = countAndFlagsBits;
  v15._object = object;
  String.append(_:)(v15);
  uint64_t countAndFlagsBits = 47;
  object = (void *)0xE100000000000000;
LABEL_14:
  uint64_t v16 = (void (*)(void *, void))URLComponents.path.modify();
  v17._uint64_t countAndFlagsBits = countAndFlagsBits;
  v17._object = object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v16(v18, 0);
}

uint64_t sub_100ACEEE8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  String.index(before:)();
  return String.subscript.getter();
}

Swift::Void __swiftcall URLComponents.appendQueryItems(_:)(Swift::OpaquePointer a1)
{
  if (URLComponents.queryItems.getter())
  {
    size_t v1 = swift_bridgeObjectRetain();
    sub_100A9DEDC(v1);
  }
  else
  {
    swift_bridgeObjectRetain();
  }

  URLComponents.queryItems.setter();
}

BOOL URL.isSafariScriptURL.getter()
{
  uint64_t v0 = type metadata accessor for URLQueryItem();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  unint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v34 - v5;
  uint64_t v7 = sub_100063814(&qword_1010C7D60);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100063814(&qword_1010C78C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URLComponents();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1000637B8((uint64_t)v12, &qword_1010C78C0);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  uint64_t v17 = URLComponents.queryItems.getter();
  if (!v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return 0;
  }
  long long v39 = v16;
  uint64_t v18 = *(void *)(v17 + 16);
  if (!v18)
  {
    uint64_t v31 = 1;
    uint64_t v32 = v39;
    goto LABEL_24;
  }
  uint64_t v35 = v14;
  uint64_t v36 = v13;
  id v37 = v9;
  uint64_t v38 = v1;
  unsigned int v21 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
  uint64_t v20 = v1 + 16;
  unint64_t v19 = v21;
  unint64_t v22 = v17 + ((*(unsigned __int8 *)(v20 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 64));
  unsigned int v23 = (void (**)(char *, uint64_t))(v20 - 8);
  uint64_t v43 = *(void *)(v20 + 56);
  uint64_t v34 = v17;
  swift_bridgeObjectRetain();
  uint64_t v42 = (v20 - 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v41 = "registeredSuites";
  unint64_t v40 = 0x8000000100DD2930;
  while (1)
  {
    v19(v6, v22, v0);
    if (URLQueryItem.name.getter() == 0x6E6F69746361 && v25 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      v19(v4, (unint64_t)v6, v0);
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v19(v4, (unint64_t)v6, v0);
      if ((v26 & 1) == 0) {
        goto LABEL_6;
      }
    }
    uint64_t v27 = URLQueryItem.value.getter();
    if (!v28)
    {
LABEL_6:
      int v24 = *v23;
      (*v23)(v4, v0);
      goto LABEL_7;
    }
    if (v27 == 0xD000000000000016 && v28 == v40) {
      break;
    }
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    int v24 = *v23;
    (*v23)(v4, v0);
    if (v29) {
      goto LABEL_22;
    }
LABEL_7:
    v24(v6, v0);
    v22 += v43;
    if (!--v18)
    {
      swift_bridgeObjectRelease();
      uint64_t v31 = 1;
      uint64_t v9 = v37;
      uint64_t v1 = v38;
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease();
  (*v23)(v4, v0);
LABEL_22:
  swift_bridgeObjectRelease();
  uint64_t v9 = v37;
  uint64_t v1 = v38;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v6, v0);
  uint64_t v31 = 0;
LABEL_23:
  uint64_t v14 = v35;
  uint64_t v13 = v36;
  uint64_t v32 = v39;
LABEL_24:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v9, v31, 1, v0);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v32, v13);
  swift_bridgeObjectRelease();
  BOOL v30 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v9, 1, v0) != 1;
  sub_1000637B8((uint64_t)v9, &qword_1010C7D60);
  return v30;
}

ValueMetadata *type metadata accessor for URL.ITMSSchemes()
{
  return &type metadata for URL.ITMSSchemes;
}

size_t sub_100ACF520(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100ACF62C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100ACF540(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C78E0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

size_t sub_100ACF62C(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100063814(&qword_1010C6F40);
  uint64_t v10 = *(void *)(type metadata accessor for IndexPath() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for IndexPath() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

void *sub_100ACF800(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C78C8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100063814(&qword_1010C78D0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

unint64_t sub_100ACF924()
{
  unint64_t result = qword_1010C7748;
  if (!qword_1010C7748)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1010C7748);
  }
  return result;
}

const char *Feature.MediaPlayer.domain.getter()
{
  return "MediaPlayer";
}

const char *Feature.MediaPlayer.feature.getter(char a1)
{
  unint64_t result = "image_decoding";
  switch(a1)
  {
    case 1:
      unint64_t result = "UpgradeOnPlay";
      break;
    case 2:
      unint64_t result = "QueueFA";
      break;
    case 3:
      unint64_t result = "RSuntory";
      break;
    default:
      return result;
  }
  return result;
}

const char *sub_100ACF9F8()
{
  unint64_t result = "image_decoding";
  switch(*v0)
  {
    case 1:
      unint64_t result = "UpgradeOnPlay";
      break;
    case 2:
      unint64_t result = "QueueFA";
      break;
    case 3:
      unint64_t result = "RSuntory";
      break;
    default:
      return result;
  }
  return result;
}

const char *Feature.MediaControls.domain.getter()
{
  return "MediaControls";
}

const char *Feature.MediaControls.feature.getter()
{
  return "NewVolumeControlsMusic";
}

const char *Feature.MusicKit.domain.getter()
{
  return "MusicKit";
}

const char *Feature.MusicKit.feature.getter()
{
  return "yuma";
}

unint64_t sub_100ACFAC8()
{
  unint64_t result = qword_1010C7D68;
  if (!qword_1010C7D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7D68);
  }
  return result;
}

unint64_t sub_100ACFB20()
{
  unint64_t result = qword_1010C7D70;
  if (!qword_1010C7D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7D70);
  }
  return result;
}

unint64_t sub_100ACFB78()
{
  unint64_t result = qword_1010C7D78;
  if (!qword_1010C7D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7D78);
  }
  return result;
}

unint64_t sub_100ACFBD0()
{
  unint64_t result = qword_1010C7D80;
  if (!qword_1010C7D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7D80);
  }
  return result;
}

unsigned char *_s11MediaPlayerOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100ACFCF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Feature.MediaPlayer()
{
  return &type metadata for Feature.MediaPlayer;
}

ValueMetadata *type metadata accessor for Feature.MediaControls()
{
  return &type metadata for Feature.MediaControls;
}

ValueMetadata *type metadata accessor for Feature.MusicKit()
{
  return &type metadata for Feature.MusicKit;
}

unsigned char *_s13MediaControlsOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100ACFDE8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Feature.MediaRemote()
{
  return &type metadata for Feature.MediaRemote;
}

unint64_t sub_100ACFE4C()
{
  unint64_t result = qword_1010C7D88;
  if (!qword_1010C7D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7D88);
  }
  return result;
}

unsigned char *_s5MusicOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100ACFF6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Feature.Music()
{
  return &type metadata for Feature.Music;
}

unint64_t sub_100ACFFA8()
{
  unint64_t result = qword_1010C7DA0;
  if (!qword_1010C7DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7DA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Feature.UIP()
{
  return &type metadata for Feature.UIP;
}

ValueMetadata *_s3UIPO5UIKitOMa()
{
  return &_s3UIPO5UIKitON;
}

unsigned char *_s3UIPOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100AD00ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s3UIPO5MusicOMa()
{
  return &_s3UIPO5MusicON;
}

unint64_t sub_100AD0128()
{
  unint64_t result = qword_1010C7DA8;
  if (!qword_1010C7DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7DA8);
  }
  return result;
}

unint64_t sub_100AD0180()
{
  unint64_t result = qword_1010C7DB0;
  if (!qword_1010C7DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7DB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Feature()
{
  return &type metadata for Feature;
}

uint64_t GestureRecognizerHandler.__allocating_init<A>(gestureRecognizer:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  GestureRecognizerHandler.init<A>(gestureRecognizer:handler:)(a1, a2, a3, a4);
  return v8;
}

uint64_t sub_100AD024C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t GestureRecognizerHandler.deinit()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    [Strong removeTarget:v0 action:"handleActionFromGestureRecognizer:"];
  }
  swift_unknownObjectWeakDestroy();
  swift_release();
  return v0;
}

uint64_t GestureRecognizerHandler.__deallocating_deinit()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    [Strong removeTarget:v0 action:"handleActionFromGestureRecognizer:"];
  }
  swift_unknownObjectWeakDestroy();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_100AD03CC(void *a1, void (*a2)(void *, id), uint64_t a3, uint64_t a4)
{
  void v5[3] = a4;
  v5[4] = &protocol witness table for UIGestureRecognizer;
  v5[0] = a1;
  a2(v5, [a1 state]);
  return sub_1000760E4((uint64_t)v5);
}

uint64_t sub_100AD0430(void *a1)
{
  return sub_100AD03CC(a1, *(void (**)(void *, id))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 16));
}

void UIGestureRecognizerHandling<>.removeHandler(_:)(uint64_t a1)
{
  if (qword_1010C6400 != -1) {
    swift_once();
  }
  if (objc_getAssociatedObject(v1, (const void *)qword_1010C7DB8))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_1000568AC((uint64_t)v7, (uint64_t)v8);
  if (!v9)
  {
    sub_10005DEB8((uint64_t)v8);
    goto LABEL_10;
  }
  sub_100063814(&qword_1010C7DC0);
  if (!swift_dynamicCast())
  {
LABEL_10:
    int v3 = _swiftEmptyArrayStorage;
    goto LABEL_11;
  }
  int v3 = v6;
LABEL_11:
  swift_retain();
  sub_100AD05E8((unint64_t)v3, a1);
  swift_bridgeObjectRelease();
  swift_release();
  unsigned int v4 = (const void *)qword_1010C7DB8;
  type metadata accessor for GestureRecognizerHandler();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_setAssociatedObject(v1, v4, isa, (void *)1);
}

uint64_t sub_100AD05A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UIGestureRecognizerHandling<>.addHandler(_:)(a1, a2, a3);
}

void sub_100AD05C4(uint64_t a1)
{
}

void *sub_100AD05E8(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_16:
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      for (unint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_13:
            __break(1u);
            return _swiftEmptyArrayStorage;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          uint64_t v6 = *(void *)(a1 + 8 * i + 32);
          swift_retain();
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_13;
          }
        }
        if (v6 == a2)
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        if (v7 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

double KeyboardAvoidance.beginFrame.getter()
{
  return *(double *)v0;
}

double KeyboardAvoidance.endFrame.getter()
{
  return *(double *)(v0 + 32);
}

double KeyboardAvoidance.animationDuration.getter()
{
  return *(double *)(v0 + 64);
}

uint64_t KeyboardAvoidance.animationCurve.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t KeyboardAvoidance.local.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t KeyboardAvoidance.animationOptions.getter()
{
  uint64_t result = *(void *)(v0 + 72) << 16;
  if (result < 0) {
    __break(1u);
  }
  return result;
}

uint64_t KeyboardAvoidance.init(notification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100AD1884(a1, (uint64_t)v4);
  return sub_10003CABC((uint64_t)v4, a2, &qword_1010C7E90);
}

void KeyboardAvoidance.animate(alongsideKeyboard:completion:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 72) << 16;
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = a1;
    uint64_t v14 = a2;
    uint64_t v9 = _NSConcreteStackBlock;
    uint64_t v10 = 1107296256;
    int64_t v11 = sub_100020238;
    uint64_t v12 = &unk_101007D50;
    uint64_t v8 = _Block_copy(&v9);
    swift_retain();
    swift_release();
    if (a3)
    {
      uint64_t v13 = a3;
      uint64_t v14 = a4;
      uint64_t v9 = _NSConcreteStackBlock;
      uint64_t v10 = 1107296256;
      int64_t v11 = sub_1001695E8;
      uint64_t v12 = &unk_101007D78;
      a3 = _Block_copy(&v9);
      swift_retain();
      swift_release();
    }
    [self animateWithDuration:v5 delay:v8 options:a3 animations:*(double *)(v4 + 64) completion:0.0];
    _Block_release(a3);
    _Block_release(v8);
  }
}

void KeyboardAvoidance.animate(alongsideKeyboard:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = self;
  uint64_t v6 = *(void *)(v2 + 72) << 16;
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = (void *)v5;
    double v8 = *(double *)(v2 + 64);
    v10[4] = a1;
    v10[5] = a2;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100020238;
    v10[3] = &unk_101007DA0;
    uint64_t v9 = _Block_copy(v10);
    swift_retain();
    swift_release();
    [v7 animateWithDuration:v6 delay:v9 options:0 animations:v8 completion:0.0];
    _Block_release(v9);
  }
}

Swift::Void __swiftcall KeyboardAvoidance.animateContentScrollView(in:)(UIViewController in)
{
  uint64_t v3 = swift_allocObject();
  long long v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v3 + 64) = v4;
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(v1 + 64);
  *(unsigned char *)(v3 + 96) = *(unsigned char *)(v1 + 80);
  long long v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 32) = v5;
  *(UIViewController *)(v3 + 104) = in;
  uint64_t v6 = self;
  uint64_t v7 = *(void *)(v1 + 72) << 16;
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    double v8 = (void *)v6;
    double v9 = *(double *)(v1 + 64);
    void v12[4] = sub_100AD1DB4;
    v12[5] = v3;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    void v12[2] = sub_100020238;
    v12[3] = &unk_101007DF0;
    uint64_t v10 = _Block_copy(v12);
    int64_t v11 = in.super.super.isa;
    swift_retain();
    swift_release();
    [v8 animateWithDuration:v7 delay:v10 options:0 animations:v9 completion:0.0];
    _Block_release(v10);
    swift_release();
  }
}

Swift::Void __swiftcall KeyboardAvoidance.applyAdditionalSafeAreaInsets(to:)(UIViewController to)
{
  if ([(objc_class *)to.super.super.isa isViewLoaded])
  {
    id v3 = [(objc_class *)to.super.super.isa view];
    if (v3)
    {
      long long v4 = v3;
      [v3 convertRect:0 fromView:v1[4], v1[5], v1[6], v1[7]];
      CGFloat v6 = v5;
      CGFloat v8 = v7;
      CGFloat v10 = v9;
      CGFloat v12 = v11;
      id v13 = [(objc_class *)to.super.super.isa view];
      if (v13)
      {
        uint64_t v14 = v13;
        [v13 safeAreaInsets];
        double v16 = v15;

        [(objc_class *)to.super.super.isa additionalSafeAreaInsets];
        double v18 = v16 - v17;
        [v4 frame];
        double Height = CGRectGetHeight(v23);
        v24.origin.x = v6;
        v24.origin.y = v8;
        v24.size.CGFloat width = v10;
        v24.size.CGFloat height = v12;
        double MinY = CGRectGetMinY(v24);

        if (Height - MinY - v18 < 0.0) {
          double v21 = 0.0;
        }
        else {
          double v21 = Height - MinY - v18;
        }
        -[objc_class setAdditionalSafeAreaInsets:](to.super.super.isa, "setAdditionalSafeAreaInsets:", 0.0, 0.0, v21, 0.0);
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void KeyboardAvoidance.additionalSafeAreaInsets(for:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v5 = 0.0;
  if (![a1 isViewLoaded]
    || (id v6 = [a1 view]) == 0)
  {
    char v24 = 1;
LABEL_8:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(double *)(a2 + 16) = v5;
    *(void *)(a2 + 24) = 0;
    *(unsigned char *)(a2 + 32) = v24;
    return;
  }
  double v7 = v6;
  [v6 convertRect:0 fromView:v2[4], v2[5], v2[6], v2[7]];
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;
  id v16 = [a1 view];
  if (v16)
  {
    double v17 = v16;
    [v16 safeAreaInsets];
    double v19 = v18;

    [a1 additionalSafeAreaInsets];
    double v21 = v19 - v20;
    [v7 frame];
    double Height = CGRectGetHeight(v25);
    v26.origin.x = v9;
    v26.origin.y = v11;
    v26.size.CGFloat width = v13;
    v26.size.CGFloat height = v15;
    double MinY = CGRectGetMinY(v26);

    char v24 = 0;
    if (Height - MinY - v21 < 0.0) {
      double v5 = 0.0;
    }
    else {
      double v5 = Height - MinY - v21;
    }
    goto LABEL_8;
  }
  __break(1u);
}

void KeyboardAvoidance.recommendedScrollRect(in:preferredVisibleRect:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = swift_allocObject();
  sub_100AD207C(a1, (uint64_t)v50);
  sub_10003CABC((uint64_t)v50, (uint64_t)v53, &qword_1010C7E98);
  if (v54 == 1)
  {
    swift_deallocUninitializedObject();
LABEL_12:
    char v38 = 1;
    CGFloat x = 0.0;
    CGFloat v34 = 0.0;
    CGFloat width = 0.0;
    double v39 = 0.0;
    goto LABEL_13;
  }
  long long v8 = v53[1];
  *(_OWORD *)(v7 + 16) = v53[0];
  *(_OWORD *)(v7 + 32) = v8;
  id v9 = [a1 contentScrollViewForEdge:1];
  if (!v9) {
    goto LABEL_11;
  }
  double v10 = v9;
  id v11 = [a1 view];
  if (v11)
  {
    double v12 = v11;
    id v13 = [v11 window];

    if (!v13
      || (id v14 = [v13 windowScene], v13, !v14)
      || (id v15 = [v14 screen], v14, !v15))
    {
      swift_release();

      goto LABEL_12;
    }
    *(void *)(v7 + 16) = 0;
    uint64_t v16 = swift_allocObject();
    [v10 bounds];
    CGFloat v18 = v17;
    double v20 = v19;
    CGFloat v22 = v21;
    *(double *)(v16 + 16) = v17;
    *(double *)(v16 + 24) = v19;
    *(double *)(v16 + 32) = v21;
    id v23 = [v15 coordinateSpace];
    double v24 = v3[4];
    double v25 = v3[5];
    double v26 = v3[6];
    double v27 = v3[7];
    id v28 = v10;
    [v23 convertRect:v28 toCoordinateSpace:v24, v25, v26, v27];
    double v30 = v29;

    swift_unknownObjectRelease();
    double v31 = v30 - v20;
    *(double *)(v16 + 40) = v30 - v20;
    v55.origin.CGFloat x = v18;
    v55.origin.CGFloat y = v20;
    v55.size.CGFloat width = v22;
    v55.size.CGFloat height = v30 - v20;
    double Height = CGRectGetHeight(v55);
    if (CGRectGetHeight(*(CGRect *)(v7 + 16)) > Height)
    {
      CGFloat x = *(double *)(v7 + 16);
      CGFloat v34 = *(double *)(v7 + 24);
      CGFloat width = *(double *)(v7 + 32);
      double v36 = *(double *)(v7 + 40);
      v56.origin.CGFloat x = v18;
      v56.origin.CGFloat y = v20;
      v56.size.CGFloat width = v22;
      v56.size.CGFloat height = v31;
      double v37 = CGRectGetHeight(v56);
      swift_release();
      swift_release();

      char v38 = 0;
      double v39 = v36 - v37;
LABEL_13:
      *(CGFloat *)a3 = x;
      *(CGFloat *)(a3 + 8) = v34;
      *(CGFloat *)(a3 + 16) = width;
      *(double *)(a3 + 24) = v39;
      *(unsigned char *)(a3 + 32) = v38;
      return;
    }
    sub_10003CABC(a2, (uint64_t)&v51, &qword_1010C7E98);
    if ((v52 & 1) == 0)
    {
      CGFloat y = v51.origin.y;
      CGRect v58 = CGRectUnion(*(CGRect *)(v7 + 16), v51);
      CGFloat x = v58.origin.x;
      CGFloat v34 = v58.origin.y;
      CGFloat width = v58.size.width;
      double v39 = v58.size.height;
      v58.origin.CGFloat x = v18;
      v58.origin.CGFloat y = v20;
      v58.size.CGFloat width = v22;
      v58.size.CGFloat height = v31;
      double v49 = CGRectGetHeight(v58);
      v59.origin.CGFloat x = x;
      v59.origin.CGFloat y = v34;
      v59.size.CGFloat width = width;
      v59.size.CGFloat height = v39;
      if (CGRectGetHeight(v59) <= v49)
      {
        v60.origin.CGFloat x = v18;
        v60.origin.CGFloat y = v20;
        v60.size.CGFloat width = v22;
        v60.size.CGFloat height = v31;
        double v44 = CGRectGetWidth(v60);
        v61.origin.CGFloat x = x;
        v61.origin.CGFloat y = v34;
        v61.size.CGFloat width = width;
        v61.size.CGFloat height = v39;
        if (CGRectGetWidth(v61) <= v44) {
          goto LABEL_22;
        }
      }
      CGFloat v43 = y;
LABEL_21:
      CGFloat x = sub_100AD21BC(v7, v16, v28, v43);
      CGFloat v34 = v45;
      CGFloat width = v46;
      double v39 = v47;
LABEL_22:
      swift_release();

      swift_release();
      char v38 = 0;
      goto LABEL_13;
    }
    [v28 contentOffset];
    double v41 = v40;
    if (v40 > CGRectGetMinY(*(CGRect *)(v7 + 16))
      || (v57.origin.CGFloat x = v18,
          v57.origin.CGFloat y = v20,
          v57.size.CGFloat width = v22,
          v57.size.CGFloat height = v31,
          CGFloat v42 = v41 + CGRectGetHeight(v57),
          CGRectGetMaxY(*(CGRect *)(v7 + 16)) > v42))
    {
      CGFloat v43 = v41;
      goto LABEL_21;
    }
    swift_release();

LABEL_11:
    swift_release();
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t static KeyboardAvoidance.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2)
    && CGRectEqualToRect(*(CGRect *)(a1 + 32), *(CGRect *)(a2 + 32))
    && *(double *)(a1 + 64) == *(double *)(a2 + 64)
    && *(void *)(a1 + 72) == *(void *)(a2 + 72))
  {
    char v4 = ((*(unsigned char *)(a1 + 80) & 1) == 0) ^ *(unsigned char *)(a2 + 80);
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_100AD1318(uint64_t a1, uint64_t a2)
{
  CGFloat v2 = *(double *)(a1 + 48);
  CGFloat v15 = *(double *)(a1 + 40);
  CGFloat v16 = *(double *)(a1 + 32);
  CGFloat v4 = *(double *)(a1 + 56);
  double v3 = *(double *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  int v6 = *(unsigned __int8 *)(a1 + 80);
  CGFloat v7 = *(double *)(a2 + 32);
  CGFloat v8 = *(double *)(a2 + 40);
  CGFloat v9 = *(double *)(a2 + 48);
  CGFloat v10 = *(double *)(a2 + 56);
  double v11 = *(double *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  int v13 = *(unsigned __int8 *)(a2 + 80);
  uint64_t result = CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2);
  if (result)
  {
    v17.origin.CGFloat y = v15;
    v17.origin.CGFloat x = v16;
    v17.size.CGFloat width = v2;
    v17.size.CGFloat height = v4;
    v18.origin.CGFloat x = v7;
    v18.origin.CGFloat y = v8;
    v18.size.CGFloat width = v9;
    v18.size.CGFloat height = v10;
    uint64_t result = CGRectEqualToRect(v17, v18);
    if (result)
    {
      uint64_t result = 0;
      if (v3 == v11)
      {
        if (v5 == v12) {
          return v6 ^ v13 ^ 1u;
        }
        else {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t KeyboardObserver.update.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t KeyboardObserver.init(options:update:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  uint64_t v6 = swift_bridgeObjectRetain();
  sub_100AD15EC(v6, a2, a3);
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_100AD14A4(uint64_t a1, uint64_t (*a2)(uint64_t, _OWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Notification();
  __chkstk_darwin(v7);
  CGFloat v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t))(v10 + 16))(v9, a1);
  sub_100AD1884((uint64_t)v9, (uint64_t)v12);
  uint64_t result = sub_10003CABC((uint64_t)v12, (uint64_t)v13, &qword_1010C7E90);
  if (v14 != 2)
  {
    void v15[2] = v13[2];
    uint64_t v15[3] = v13[3];
    v15[4] = v13[4];
    char v16 = v14;
    v15[0] = v13[0];
    v15[1] = v13[1];
    return a2(a4, v15);
  }
  return result;
}

void *sub_100AD15EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    int64_t v6 = sub_1004F5170(v3);
    int v8 = v7;
    char v10 = v9 & 1;
    uint64_t v24 = v3 + 56;
    uint64_t result = self;
    id v22 = result;
    uint64_t v23 = v3;
    while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(v3 + 32))
    {
      if (((*(void *)(v24 + (((unint64_t)v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_11;
      }
      if (*(_DWORD *)(v3 + 36) != v8) {
        goto LABEL_12;
      }
      uint64_t v11 = *(char *)(*(void *)(v3 + 48) + v6);
      uint64_t v12 = *(void **)*(&off_101008010 + v11);
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = a2;
      *(void *)(v13 + 24) = a3;
      *(unsigned char *)(v13 + 32) = v11;
      type metadata accessor for NotificationObserver();
      uint64_t v14 = swift_allocObject();
      swift_unknownObjectWeakInit();
      *(void *)(v14 + 16) = v12;
      swift_unknownObjectWeakAssign();
      *(unsigned char *)(v14 + 32) = 1;
      *(void *)(v14 + 48) = sub_100AD26E4;
      *(void *)(v14 + 56) = v13;
      id v15 = v12;
      swift_retain();
      swift_retain();
      id v16 = [v22 defaultCenter];
      *(void *)(v14 + 40) = v16;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      id v18 = v15;
      id v19 = v16;
      swift_retain();
      [v19 addObserver:v14 selector:"handleNotification:" name:v18 object:Strong];

      swift_release();
      swift_unknownObjectRelease();

      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      uint64_t v3 = v23;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t result = (void *)sub_1004F5214(v6, v8, v10 & 1, v23);
      int64_t v6 = (int64_t)result;
      int v8 = v20;
      char v10 = v21 & 1;
      if (!--v4)
      {
        sub_1001995CC((uint64_t)result, v20, v21 & 1);
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t sub_100AD1884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = Notification.userInfo.getter();
  if (!v4) {
    goto LABEL_32;
  }
  uint64_t v5 = v4;
  id v41 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v6 = sub_100076DAC((uint64_t)v46), (v7 & 1) != 0))
  {
    sub_100076134(*(void *)(v5 + 56) + 32 * v6, (uint64_t)&v47);
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
  }
  sub_100076EB8((uint64_t)v46);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_29;
  }
  sub_100057778(0, (unint64_t *)&qword_1010C6410);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_31;
  }
  [v41 CGRectValue];
  uint64_t v40 = v8;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;

  id v42 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v15 = sub_100076DAC((uint64_t)v46), (v16 & 1) != 0))
  {
    sub_100076134(*(void *)(v5 + 56) + 32 * v15, (uint64_t)&v47);
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
  }
  sub_100076EB8((uint64_t)v46);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_29;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_31;
  }
  [v42 CGRectValue];
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;

  id v43 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v25 = sub_100076DAC((uint64_t)v46), (v26 & 1) != 0))
  {
    sub_100076134(*(void *)(v5 + 56) + 32 * v25, (uint64_t)&v47);
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
  }
  sub_100076EB8((uint64_t)v46);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_29;
  }
  sub_100057778(0, &qword_1010C70A8);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  [v43 floatValue];
  float v28 = v27;

  id v44 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v29 = sub_100076DAC((uint64_t)v46), (v30 & 1) != 0))
  {
    sub_100076134(*(void *)(v5 + 56) + 32 * v29, (uint64_t)&v47);
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
  }
  sub_100076EB8((uint64_t)v46);
  if (!*((void *)&v48 + 1))
  {
LABEL_29:
    swift_bridgeObjectRelease();
LABEL_30:
    sub_10005DEB8((uint64_t)&v47);
    goto LABEL_32;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_31;
  }
  id v31 = [v44 integerValue];

  id v45 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v32 = sub_100076DAC((uint64_t)v46), (v33 & 1) != 0))
  {
    sub_100076134(*(void *)(v5 + 56) + 32 * v32, (uint64_t)&v47);
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100076EB8((uint64_t)v46);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_30;
  }
  if (swift_dynamicCast())
  {
    unsigned __int8 v37 = [v45 BOOLValue];

    double v38 = v28;
    uint64_t v39 = type metadata accessor for Notification();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(a1, v39);
    uint64_t v36 = v40;
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v34 = type metadata accessor for Notification();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(a1, v34);
  id v31 = 0;
  uint64_t v36 = 0;
  uint64_t v10 = 0;
  unsigned __int8 v37 = 2;
  uint64_t v12 = 0;
  uint64_t v14 = 0;
  uint64_t v18 = 0;
  uint64_t v20 = 0;
  uint64_t v22 = 0;
  uint64_t v24 = 0;
  double v38 = 0.0;
LABEL_33:
  *(void *)a2 = v36;
  *(void *)(a2 + 8) = v10;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v18;
  *(void *)(a2 + 40) = v20;
  *(void *)(a2 + 48) = v22;
  *(void *)(a2 + 56) = v24;
  *(double *)(a2 + 64) = v38;
  *(void *)(a2 + 72) = v31;
  *(unsigned char *)(a2 + 80) = v37;
  return result;
}

uint64_t sub_100AD1D7C()
{
  return swift_deallocObject();
}

void sub_100AD1DB4()
{
  uint64_t v1 = *(void **)(v0 + 104);
  KeyboardAvoidance.applyAdditionalSafeAreaInsets(to:)((UIViewController)v1);

  sub_100AD1E08(v1);
}

uint64_t sub_100AD1DF8()
{
  return swift_deallocObject();
}

void sub_100AD1E08(void *a1)
{
  id v1 = [a1 contentScrollView];
  if (v1)
  {
    id v29 = v1;
    id v2 = [v1 firstResponder];
    if (v2)
    {
      uint64_t v3 = v2;
      self;
      uint64_t v4 = swift_dynamicCastObjCClass();
      if (v4)
      {
        uint64_t v5 = (void *)v4;
        id v6 = v3;
        id v7 = [v5 superview];
        if (v7)
        {
          id v8 = v7;
          sub_100057778(0, (unint64_t *)&qword_1010C7748);
          while (1)
          {
            id v9 = v8;
            id v10 = v29;
            char v11 = static NSObject.== infix(_:_:)();

            if (v11) {
              break;
            }
            self;
            if (swift_dynamicCastObjCClass() || (self, swift_dynamicCastObjCClass()))
            {
              id v9 = v9;

              uint64_t v5 = v9;
              break;
            }
            id v8 = [v9 superview];

            if (!v8) {
              goto LABEL_10;
            }
          }
        }
        else
        {
LABEL_10:
          id v9 = 0;
        }
        [v5 frame];
        double v13 = v12;
        double v15 = v14;
        double v17 = v16;
        double v19 = v18;
        id v20 = [v5 superview];
        [v29 convertRect:v20 fromView:v13];
        double v22 = v21;
        double v24 = v23;
        double v26 = v25;
        double v28 = v27;

        [v29 scrollRectToVisible:0 v22 v24 v26 v28];
        id v29 = v5;
      }
    }
  }
}

void sub_100AD207C(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = 1;
  id v4 = [a1 contentScrollViewForEdge:1];
  uint64_t v5 = 0;
  if (!v4) {
    goto LABEL_7;
  }
  id v6 = v4;
  id v7 = [v4 firstResponder];
  if (!v7)
  {
LABEL_6:

    char v3 = 1;
LABEL_7:
    uint64_t v22 = 0;
    uint64_t v24 = 0;
    uint64_t v26 = 0;
    goto LABEL_8;
  }
  id v8 = v7;
  self;
  id v9 = (void *)swift_dynamicCastObjCClass();
  if (!v9)
  {

    goto LABEL_6;
  }
  id v10 = v9;
  [v9 frame];
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  id v19 = [v10 superview];
  [v6 convertRect:v19 fromView:v12, v14, v16, v18];
  uint64_t v5 = v20;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;

  char v3 = 0;
LABEL_8:
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v22;
  *(void *)(a2 + 16) = v24;
  *(void *)(a2 + 24) = v26;
  *(unsigned char *)(a2 + 32) = v3;
}

double sub_100AD21BC(uint64_t a1, uint64_t a2, void *a3, CGFloat a4)
{
  swift_beginAccess();
  double v8 = *(double *)(a1 + 16);
  swift_beginAccess();
  CGRectGetHeight(*(CGRect *)(a2 + 16));
  swift_beginAccess();
  CGRectGetHeight(*(CGRect *)(a1 + 16));
  swift_beginAccess();
  if (CGRectGetMinY(*(CGRect *)(a1 + 16)) > a4)
  {
    [a3 adjustedContentInset];
    swift_beginAccess();
    CGRectGetMaxY(*(CGRect *)(a1 + 16));
  }
  return v8;
}

unint64_t sub_100AD2300()
{
  unint64_t result = qword_1010C7EA0;
  if (!qword_1010C7EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C7EA0);
  }
  return result;
}

__n128 initializeWithCopy for KeyboardAvoidance(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for KeyboardAvoidance(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyboardAvoidance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyboardAvoidance()
{
  return &type metadata for KeyboardAvoidance;
}

uint64_t destroy for KeyboardObserver()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KeyboardObserver(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for KeyboardObserver(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for KeyboardObserver(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for KeyboardObserver()
{
  return &type metadata for KeyboardObserver;
}

unsigned char *storeEnumTagSinglePayload for KeyboardObserver.Option(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100AD2674);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyboardObserver.Option()
{
  return &type metadata for KeyboardObserver.Option;
}

uint64_t sub_100AD26AC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100AD26E4(uint64_t a1)
{
  return sub_100AD14A4(a1, *(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t Signpost.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for OSSignpostID();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

id Signpost.log.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for Signpost() + 20));

  return v1;
}

uint64_t Signpost.name.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Signpost() + 24));
}

uint64_t Signpost.init(name:id:log:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, unsigned char *a6@<X8>)
{
  int v22 = a3;
  sub_100063814(&qword_1010C7EA8);
  __chkstk_darwin();
  double v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for OSSignpostID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin();
  double v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10004D5B4(a4, (uint64_t)v12);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    id v17 = a5;
    OSSignpostID.init(log:)();
    sub_10004D554(a4);
    sub_10004D554((uint64_t)v12);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(a6, v16, v13);
  }
  else
  {
    sub_10004D554(a4);
    double v18 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32);
    v18(v16, v12, v13);
    v18(a6, v16, v13);
  }
  uint64_t result = type metadata accessor for Signpost();
  *(void *)&a6[*(int *)(result + 20)] = a5;
  uint64_t v20 = &a6[*(int *)(result + 24)];
  *(void *)uint64_t v20 = a1;
  *((void *)v20 + 1) = a2;
  v20[16] = v22;
  return result;
}

uint64_t Signpost.emit(dso:)(uint64_t a1)
{
  return sub_100042E0C(a1, (void (*)(void))&static os_signpost_type_t.event.getter);
}

uint64_t Signpost.emit(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100AD2A04(a1, a2, a3, a4, a5, (void (*)(void))&static os_signpost_type_t.event.getter);
}

uint64_t Signpost.begin(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100AD2A04(a1, a2, a3, a4, a5, (void (*)(void))&static os_signpost_type_t.begin.getter);
}

uint64_t Signpost.end(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100AD2A04(a1, a2, a3, a4, a5, (void (*)(void))&static os_signpost_type_t.end.getter);
}

uint64_t sub_100AD2A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  return os_signpost(_:dso:log:name:signpostID:_:_:)();
}

uint64_t static Signpost.interval<A>(name:log:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v30[2] = a6;
  id v31 = a5;
  int v33 = a3;
  uint64_t v32 = a2;
  v30[1] = a7;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  double v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063814(&qword_1010C7EA8);
  __chkstk_darwin();
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  double v16 = (char *)v30 - v15;
  uint64_t v17 = type metadata accessor for Signpost();
  __n128 v18 = __chkstk_darwin();
  uint64_t v20 = (char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v16, 1, 1, v9, v18);
  sub_10004D5B4((uint64_t)v16, (uint64_t)v14);
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9);
  id v22 = a4;
  id v23 = v22;
  if (v21 == 1)
  {
    id v24 = v22;
    OSSignpostID.init(log:)();
    sub_10004D554((uint64_t)v16);
    sub_10004D554((uint64_t)v14);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v20, v12, v9);
  }
  else
  {
    sub_10004D554((uint64_t)v16);
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v25(v12, v14, v9);
    v25(v20, v12, v9);
  }
  *(void *)&v20[*(int *)(v17 + 20)] = v23;
  uint64_t v26 = &v20[*(int *)(v17 + 24)];
  uint64_t v27 = v32;
  *(void *)uint64_t v26 = a1;
  *((void *)v26 + 1) = v27;
  v26[16] = v33;
  static os_signpost_type_t.begin.getter();
  uint64_t v28 = os_signpost(_:dso:log:name:signpostID:)();
  v31(v28);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return sub_100042D3C((uint64_t)v20);
}

uint64_t *initializeBufferWithCopyOfBuffer for Signpost(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for OSSignpostID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    uint64_t v11 = (char *)a1 + v9;
    double v12 = (char *)a2 + v9;
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    unsigned char v11[16] = v12[16];
    id v13 = v10;
  }
  return a1;
}

uint64_t assignWithCopy for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  return a1;
}

uint64_t initializeWithTake for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  return a1;
}

uint64_t assignWithTake for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  return a1;
}

uint64_t sub_100AD3038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100AD30F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t UnfairLock.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = 0;
  return v0;
}

uint64_t UnfairLock.deinit()
{
  swift_slowDealloc();
  return v0;
}

uint64_t UnfairLock.__deallocating_deinit()
{
  swift_slowDealloc();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall UnfairLock.assertOwned()()
{
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v0 + 16));
}

Swift::Void __swiftcall UnfairLock.assertNotOwned()()
{
  os_unfair_lock_assert_not_owner(*(const os_unfair_lock **)(v0 + 16));
}

uint64_t WeakArray.subscript.getter()
{
  uint64_t v0 = type metadata accessor for WeakArray.WeakBox();
  Array.subscript.getter();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(v0 - 8) + 8))(v3, v0);
  return Strong;
}

{
  char v0;
  uint64_t result;

  type metadata accessor for WeakArray.WeakBox();
  type metadata accessor for Array();
  swift_getWitnessTable();
  RandomAccessCollection<>.indices.getter();
  sub_100063814(&qword_1010C7070);
  uint64_t v0 = Range.contains(_:)();
  uint64_t result = 0;
  if (v0) {
    return WeakArray.subscript.getter();
  }
  return result;
}

Swift::Int __swiftcall WeakArray.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AD33F8()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_100AD3448()
{
  return sub_100AD33F8();
}

uint64_t WeakArray.remove(at:)()
{
  uint64_t v0 = type metadata accessor for WeakArray.WeakBox();
  type metadata accessor for Array();
  Array.remove(at:)();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(v0 - 8) + 8))(v3, v0);
  return Strong;
}

uint64_t WeakArray.remove(_:)()
{
  return RangeReplaceableCollection<>.removeAll(where:)();
}

Swift::Void __swiftcall WeakArray.reap()()
{
}

uint64_t sub_100AD3688()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    swift_unknownObjectRelease();
    return v3 == v1;
  }
  return result;
}

BOOL sub_100AD36D0()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong) {
    swift_unknownObjectRelease();
  }
  return Strong == 0;
}

uint64_t sub_100AD3710@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

uint64_t sub_100AD3730()
{
  return swift_getWitnessTable();
}

uint64_t sub_100AD374C()
{
  return swift_getWitnessTable();
}

void (*sub_100AD3768(uint64_t **a1))(void *a1)
{
  long long v2 = (uint64_t *)malloc(0x30uLL);
  *a1 = v2;
  uint64_t v3 = sub_100AD3828(v2);
  v2[4] = v4;
  v2[5] = (uint64_t)v3;
  return sub_100AD37E0;
}

void sub_100AD37E0(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 40))(*a1);

  free(v1);
}

uint64_t (*sub_100AD3828(uint64_t *a1))()
{
  *a1 = WeakArray.subscript.getter();
  return sub_1008E4228;
}

void sub_100AD3888(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_100AD38A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100AD3C18(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))&type metadata accessor for Range, (uint64_t (*)(char *, char *, uint64_t, uint64_t))&dispatch thunk of static Comparable.< infix(_:_:));
}

uint64_t sub_100AD38E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100AD3C18(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))&type metadata accessor for ClosedRange, (uint64_t (*)(char *, char *, uint64_t, uint64_t))&dispatch thunk of static Comparable.<= infix(_:_:));
}

void *sub_100AD3928@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *sub_100AD3940(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

uint64_t sub_100AD3958(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t sub_100AD39AC()
{
  swift_getWitnessTable();
  uint64_t v0 = j___ss32_copyCollectionToContiguousArrayys0dE0Vy7ElementQzGxSlRzlF();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100AD3A08(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Range();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v17 - v10;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v8, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    double v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v8, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_100AD3C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  id v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v16);
  __n128 v18 = (char *)&v22 - v17;
  char v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v20 = v23(v18, &v14[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t WeakValuesDictionary.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  WeakValuesDictionary.init()();
  return v0;
}

uint64_t WeakValuesDictionary.init()()
{
  sub_100A8719C();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  *(void *)(v0 + 16) = Dictionary.init(dictionaryLiteral:)();
  return v0;
}

uint64_t WeakValuesDictionary.subscript.getter()
{
  swift_beginAccess();
  sub_100A8719C();
  swift_bridgeObjectRetain();
  Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  if (v3[0])
  {
    if ([v3[0] weakObjectValue])
    {
      _bridgeAnyObjectToAny(_:)();

      swift_unknownObjectRelease();
    }
    else
    {

      memset(v2, 0, sizeof(v2));
    }
    sub_1000568AC((uint64_t)v2, (uint64_t)v3);
    if (v3[3])
    {
      if (swift_dynamicCast()) {
        return v1;
      }
    }
    else
    {
      sub_10005DEB8((uint64_t)v3);
    }
  }
  return 0;
}

void WeakValuesDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)v2 + 80);
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v8 = __chkstk_darwin(a1);
  if (v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)&v12 - v7, a2, v5, v8);
    uint64_t v12 = a1;
    swift_unknownObjectRetain();
    uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v11 = [self valueWithWeakObject:v10];
    swift_unknownObjectRelease();
    id v13 = v11;
    swift_beginAccess();
    sub_100A8719C();
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_endAccess();
    swift_unknownObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v5);
  }
  else
  {
    swift_beginAccess();
    sub_100A8719C();
    type metadata accessor for Dictionary();
    Dictionary.removeValue(forKey:)();
    swift_endAccess();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v5);
  }
}

void (*WeakValuesDictionary.subscript.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[1] = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  v3[2] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  v3[3] = v5;
  size_t v7 = *(void *)(v5 + 64);
  id v3[4] = malloc(v7);
  v3[5] = malloc(v7);
  (*(void (**)(void))(v6 + 16))();
  *uint64_t v3 = WeakValuesDictionary.subscript.getter();
  return sub_100AD4428;
}

void sub_100AD4428(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v2[3] + 32))((*a1)[4], v4, v2[2]);
    uint64_t v5 = swift_unknownObjectRetain();
    WeakValuesDictionary.subscript.setter(v5, (uint64_t)v3);
    swift_unknownObjectRelease();
  }
  else
  {
    WeakValuesDictionary.subscript.setter(**a1, (uint64_t)v4);
  }
  free(v4);
  free(v3);

  free(v2);
}

Swift::Void __swiftcall WeakValuesDictionary.compact()()
{
  uint64_t v65 = *v0;
  uint64_t v1 = *(void *)(v65 + 80);
  uint64_t v56 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v50 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  CGRect v58 = (char *)&v45 - v3;
  uint64_t v46 = v4;
  __chkstk_darwin();
  CGRect v60 = (char *)&v45 - v5;
  unint64_t v53 = sub_100A8719C();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v63 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v63 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v11 = (char *)&v45 - v10;
  uint64_t v70 = static Array._allocateUninitialized(_:)();
  double v49 = v0 + 2;
  swift_beginAccess();
  unint64_t v12 = v0[2];
  if ((v12 & 0xC000000000000001) != 0)
  {
    uint64_t v13 = __CocoaDictionary.makeIterator()();
    unint64_t v51 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    unint64_t v16 = v13 | 0x8000000000000000;
  }
  else
  {
    uint64_t v17 = -1 << *(unsigned char *)(v12 + 32);
    uint64_t v14 = ~v17;
    uint64_t v18 = *(void *)(v12 + 64);
    unint64_t v51 = v12 + 64;
    uint64_t v19 = -v17;
    if (v19 < 64) {
      uint64_t v20 = ~(-1 << v19);
    }
    else {
      uint64_t v20 = -1;
    }
    unint64_t v15 = v20 & v18;
    unint64_t v16 = v12;
  }
  uint64_t v55 = v16 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v61 = TupleTypeMetadata2 - 8;
  uint64_t v48 = v14;
  uint64_t v67 = (void (**)(char *, char *, uint64_t))(v56 + 16);
  uint64_t v62 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  CGRect v59 = (void (**)(char *, char *, uint64_t))(v56 + 32);
  uint64_t v66 = (void (**)(char *, uint64_t))(v56 + 8);
  int64_t v54 = (unint64_t)(v14 + 64) >> 6;
  int64_t v47 = v54 - 1;
  swift_bridgeObjectRetain();
  int64_t v21 = 0;
  CGRect v57 = (char *)&type metadata for Any + 8;
  char v52 = (char *)&type metadata for Swift.AnyObject + 8;
  for (unint64_t i = v16; ; v16 = i)
  {
    if ((v16 & 0x8000000000000000) != 0)
    {
      if (__CocoaDictionary.Iterator.next()())
      {
        uint64_t v30 = v29;
        _forceBridgeFromObjectiveC<A>(_:_:)();
        swift_unknownObjectRelease();
        uint64_t v31 = *(int *)(TupleTypeMetadata2 + 48);
        *(void *)&v68[0] = v30;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v32 = v69[0];
        swift_unknownObjectRelease();
        *(void *)&v9[v31] = v32;
        uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v9, 0, 1, TupleTypeMetadata2);
      }
      else
      {
        uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v9, 1, 1, TupleTypeMetadata2);
      }
      int64_t v28 = v21;
      uint64_t v22 = v15;
    }
    else
    {
      if (v15)
      {
        uint64_t v22 = (v15 - 1) & v15;
        unint64_t v23 = __clz(__rbit64(v15)) | (v21 << 6);
        int64_t v24 = v21;
LABEL_14:
        (*(void (**)(char *, unint64_t, uint64_t))(v56 + 16))(v9, *(void *)(v16 + 48) + *(void *)(v56 + 72) * v23, v1);
        uint64_t v25 = *(void **)(*(void *)(v16 + 56) + 8 * v23);
        *(void *)&v9[*(int *)(TupleTypeMetadata2 + 48)] = v25;
        uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v9, 0, 1, TupleTypeMetadata2);
        id v27 = v25;
        int64_t v28 = v24;
        goto LABEL_35;
      }
      int64_t v24 = v21 + 1;
      if (__OFADD__(v21, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        return;
      }
      int64_t v28 = v21;
      if (v24 < v54)
      {
        unint64_t v33 = *(void *)(v51 + 8 * v24);
        unint64_t v16 = i;
        if (v33) {
          goto LABEL_20;
        }
        int64_t v28 = v21 + 1;
        if (v21 + 2 < v54)
        {
          unint64_t v33 = *(void *)(v51 + 8 * (v21 + 2));
          unint64_t v16 = i;
          if (v33)
          {
            int64_t v24 = v21 + 2;
LABEL_20:
            uint64_t v22 = (v33 - 1) & v33;
            unint64_t v23 = __clz(__rbit64(v33)) + (v24 << 6);
            goto LABEL_14;
          }
          int64_t v34 = v21 + 3;
          int64_t v28 = v21 + 2;
          if (v21 + 3 < v54)
          {
            unint64_t v33 = *(void *)(v51 + 8 * v34);
            unint64_t v16 = i;
            if (v33)
            {
              int64_t v24 = v21 + 3;
              goto LABEL_20;
            }
            while (1)
            {
              int64_t v24 = v34 + 1;
              if (__OFADD__(v34, 1)) {
                goto LABEL_54;
              }
              if (v24 >= v54) {
                break;
              }
              unint64_t v33 = *(void *)(v51 + 8 * v24);
              ++v34;
              if (v33) {
                goto LABEL_20;
              }
            }
            int64_t v28 = v47;
          }
        }
      }
      uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v9, 1, 1, TupleTypeMetadata2);
      uint64_t v22 = 0;
    }
LABEL_35:
    (*v62)(v11, v9, v63);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v11, 1, TupleTypeMetadata2) == 1) {
      break;
    }
    uint64_t v35 = *(void **)&v11[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v36 = v60;
    (*v59)(v60, v11, v1);
    if ([v35 weakObjectValue])
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v68, 0, sizeof(v68));
    }
    sub_1000568AC((uint64_t)v68, (uint64_t)v69);
    if (!v69[3])
    {
      sub_10005DEB8((uint64_t)v69);
LABEL_9:
      (*v67)(v58, v36, v1);
      type metadata accessor for Array();
      Array.append(_:)();

      goto LABEL_10;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_9;
    }

    swift_unknownObjectRelease();
LABEL_10:
    (*v66)(v36, v1);
    int64_t v21 = v28;
    unint64_t v15 = v22;
  }
  sub_100048F1C();
  uint64_t v37 = v70;
  uint64_t v38 = Array.endIndex.getter();
  uint64_t v39 = v56;
  uint64_t v40 = v50;
  if (!v38) {
    goto LABEL_52;
  }
  uint64_t v41 = 0;
  while (2)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v40, v37+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v41, v1);
      uint64_t v43 = v41 + 1;
      if (__OFADD__(v41, 1)) {
        break;
      }
      goto LABEL_46;
    }
    uint64_t v44 = _ArrayBuffer._getElementSlowPath(_:)();
    if (v46 != 8) {
      goto LABEL_55;
    }
    v69[0] = v44;
    (*v67)(v40, (char *)v69, v1);
    swift_unknownObjectRelease();
    uint64_t v43 = v41 + 1;
    if (!__OFADD__(v41, 1))
    {
LABEL_46:
      swift_beginAccess();
      type metadata accessor for Dictionary();
      Dictionary.removeValue(forKey:)();
      swift_endAccess();

      (*v66)(v40, v1);
      ++v41;
      if (v43 == Array.endIndex.getter()) {
        goto LABEL_52;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_52:
  swift_bridgeObjectRelease();
}

uint64_t WeakValuesDictionary.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100AD4EB0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for WeakValuesDictionary()
{
  return sub_10004CF5C();
}

void sub_100AD5724(id a1)
{
  uint64_t v1 = objc_alloc_init(MusicMonogramArtworkDataSource);
  uint64_t v2 = (void *)qword_10110E640;
  qword_10110E640 = (uint64_t)v1;
}

void sub_100AD57B4(id a1)
{
  uint64_t v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.Music.MusicMonogramArtworkDataSource.loadingQueue", v3);
  uint64_t v2 = (void *)qword_10110E650;
  qword_10110E650 = (uint64_t)v1;
}

void sub_100AD5910(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) token];
  [*(id *)(a1 + 32) fittingSize];
  double v4 = v3;
  double v6 = v5;
  [*(id *)(a1 + 32) destinationScale];
  double v8 = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100AD5A0C;
  v10[3] = &unk_1010081E0;
  uint64_t v9 = *(void **)(a1 + 40);
  id v11 = *(id *)(a1 + 32);
  double v13 = v4;
  double v14 = v6;
  id v12 = *(id *)(a1 + 48);
  [v9 _monogramImageForToken:v2 fittingSize:v10 scale:v4 completionHandler:v6];
}

void sub_100AD5A0C(uint64_t a1, void *a2)
{
  double v3 = *(void **)(a1 + 32);
  id v4 = a2;
  double v5 = [v3 visualIdenticalityIdentifier];
  +[MPArtworkRepresentation representationForVisualIdentity:withSize:image:](MPArtworkRepresentation, "representationForVisualIdentity:withSize:image:", v5, v4, *(double *)(a1 + 48), *(double *)(a1 + 56));
  id v6 = (id)objc_claimAutoreleasedReturnValue();

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100AD5F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100AD5FA8(uint64_t a1)
{
  sub_100AD6000();
  Class result = objc_getClass("CNAvatarImageRenderer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_100AD69A0();
  }
  qword_10110E660 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100AD6000()
{
  v0[0] = 0;
  if (!qword_10110E668)
  {
    v0[1] = _NSConcreteStackBlock;
    v0[2] = (void *)3221225472;
    v0[3] = sub_100AD60F4;
    v0[4] = &unk_101008268;
    v0[5] = v0;
    long long v1 = off_101008250;
    uint64_t v2 = 0;
    qword_10110E668 = _sl_dlopen();
  }
  if (!qword_10110E668) {
    sub_100AD6A1C(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_100AD60F4()
{
  uint64_t result = _sl_dlopen();
  qword_10110E668 = result;
  return result;
}

Class sub_100AD6168(uint64_t a1)
{
  sub_100AD6000();
  Class result = objc_getClass("CNAvatarImageRendererSettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_100AD6A9C();
  }
  qword_10110E670 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_100AD61C0(uint64_t a1)
{
  sub_100AD6000();
  Class result = objc_getClass("CNAvatarImageRenderingScope");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_100AD6B18();
  }
  qword_10110E678 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_100AD6218(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_10110E688)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_100AD6344;
    id v3[4] = &unk_101008268;
    v3[5] = v3;
    long long v4 = off_101008288;
    uint64_t v5 = 0;
    qword_10110E688 = _sl_dlopen();
  }
  if (!qword_10110E688) {
    sub_100AD6B94(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("CNContact");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_100AD6C14();
  }
  qword_10110E680 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100AD6344()
{
  uint64_t result = _sl_dlopen();
  qword_10110E688 = result;
  return result;
}

id sub_100AD63B8(uint64_t a1, void *a2)
{
  return _[a2 darwinNotificationReceived];
}

void sub_100AD6644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100AD6660(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_10110E698)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_100AD678C;
    id v3[4] = &unk_101008268;
    v3[5] = v3;
    long long v4 = off_1010082A0;
    uint64_t v5 = 0;
    qword_10110E698 = _sl_dlopen();
  }
  if (!qword_10110E698) {
    sub_100AD6C90(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("AFPreferences");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_100AD6D10();
  }
  qword_10110E690 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100AD678C()
{
  uint64_t result = _sl_dlopen();
  qword_10110E698 = result;
  return result;
}

Class sub_100AD6800(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_10110E6A8)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_100AD692C;
    id v3[4] = &unk_101008268;
    v3[5] = v3;
    long long v4 = off_1010082B8;
    uint64_t v5 = 0;
    qword_10110E6A8 = _sl_dlopen();
  }
  if (!qword_10110E6A8) {
    sub_100AD6D8C(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("VTPreferences");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_100AD6E0C();
  }
  qword_10110E6A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100AD692C()
{
  uint64_t result = _sl_dlopen();
  qword_10110E6A8 = result;
  return result;
}

void sub_100AD69A0()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getCNAvatarImageRendererClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"MonogramArtworkDataSource.m" lineNumber:21 description:@"Unable to find class %s" "CNAvatarImageRenderer"];

  __break(1u);
}

void sub_100AD6A1C(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  double v3 = +[NSString stringWithUTF8String:"void *ContactsUILibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"MonogramArtworkDataSource.m" lineNumber:20 description:@"%s" a1];

  __break(1u);
}

void sub_100AD6A9C()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getCNAvatarImageRendererSettingsClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"MonogramArtworkDataSource.m" lineNumber:23 description:@"Unable to find class %s" arguments:("CNAvatarImageRendererSettings")];

  __break(1u);
}

void sub_100AD6B18()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getCNAvatarImageRenderingScopeClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"MonogramArtworkDataSource.m" lineNumber:22 description:@"Unable to find class %s" "CNAvatarImageRenderingScope"];

  __break(1u);
}

void sub_100AD6B94(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  double v3 = +[NSString stringWithUTF8String:"void *ContactsLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"MonogramArtworkDataSource.m" lineNumber:28 description:@"%s" *a1];

  __break(1u);
}

void sub_100AD6C14()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getCNContactClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"MonogramArtworkDataSource.m" lineNumber:29 description:@"Unable to find class %s" arguments:@"CNContact"];

  __break(1u);
}

void sub_100AD6C90(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  double v3 = +[NSString stringWithUTF8String:"void *AssistantServicesLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"MusicSiriUtilities.m" lineNumber:16 description:@"%s" *a1];

  __break(1u);
}

void sub_100AD6D10()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getAFPreferencesClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"MusicSiriUtilities.m" lineNumber:17 description:@"Unable to find class %s" @"AFPreferences"];

  __break(1u);
}

void sub_100AD6D8C(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  double v3 = +[NSString stringWithUTF8String:"void *VoiceTriggerLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"MusicSiriUtilities.m" lineNumber:19 description:@"%s" *a1];

  __break(1u);
}

void sub_100AD6E0C()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getVTPreferencesClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"MusicSiriUtilities.m" lineNumber:20 description:@"Unable to find class %s" v1, @"VTPreferences"];

  __break(1u);
}

void variable initialization expression of Artwork.caching(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

id variable initialization expression of Artwork.decoration@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for Artwork.Decoration(0);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  double v3 = (char *)a1 + v2[5];
  uint64_t v4 = type metadata accessor for UIView.Corner();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v2[6];
  id result = [self blackColor];
  *(void *)((char *)a1 + v5) = result;
  *(void *)((char *)a1 + v2[7]) = 1;
  return result;
}

uint64_t variable initialization expression of Artwork.size()
{
  return 0;
}

double variable initialization expression of Artwork.View._laidBounds()
{
  return 0.0;
}

uint64_t variable initialization expression of Artwork.Decoration.corner@<X0>(uint64_t a1@<X8>)
{
  return sub_100AD917C((uint64_t (*)(void))&type metadata accessor for UIView.Corner, a1);
}

id variable initialization expression of Artwork.Decoration.fillColor()
{
  id v0 = [self blackColor];

  return v0;
}

id variable initialization expression of Artwork.Placeholder.background()
{
  id v0 = [self secondarySystemFillColor];

  return v0;
}

uint64_t variable initialization expression of Artwork.Placeholder.tint()
{
  if (qword_1010C8370 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1010C9250;
  id v1 = (id)qword_1010C9250;
  return v0;
}

id variable initialization expression of Artwork.Placeholder.symbolConfiguration()
{
  id v0 = [self configurationWithWeight:4];

  return v0;
}

double variable initialization expression of Artwork.Placeholder.imageScaleFactor()
{
  return 0.5;
}

double static CGFloat.squareAspectRatio.getter()
{
  return 1.0;
}

id variable initialization expression of Artwork.Placeholder.View.contentView()
{
  id v0 = objc_allocWithZone((Class)UIImageView);

  return [v0 init];
}

unint64_t variable initialization expression of Lyrics.translationMap()
{
  return sub_100AF0E14((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t variable initialization expression of LyricsLoader.lyricsOperations()
{
  return sub_100AF0F30((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of LyricsLoader.accessQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  double v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  sub_100057778(0, (unint64_t *)&qword_1010C8910);
  static DispatchQoS.unspecified.getter();
  v5[1] = _swiftEmptyArrayStorage;
  sub_100AD9EC0((unint64_t *)&unk_1010C9B80, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100063814((uint64_t *)&unk_1010C8920);
  sub_100AD7344();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

unint64_t sub_100AD7344()
{
  unint64_t result = qword_1010C9B90;
  if (!qword_1010C9B90)
  {
    sub_10006389C((uint64_t *)&unk_1010C8920);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C9B90);
  }
  return result;
}

id variable initialization expression of LyricsLoader.operationQueue()
{
  id v0 = [objc_allocWithZone((Class)NSOperationQueue) init];
  [v0 setMaxConcurrentOperationCount:1];
  return v0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.firstLineStartingPosition()
{
  return 60.0;
}

void variable initialization expression of SyncedLyricsViewController.Specs.selectedLinePosition(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x4028000000000000;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineSpacing()
{
  return 25.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsTopSpacing()
{
  return 15.0;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsDeselectedTransform@<D0>(_OWORD *a1@<X8>)
{
  return sub_100AD80E8(a1, 0.9);
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineDelay()
{
  return 0.05;
}

uint64_t variable initialization expression of SyncedLyricsViewController.Specs.font()
{
  return static UIFont.preferredFont(forTextStyle:weight:)();
}

uint64_t variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsFont()
{
  return static UIFont.shortEmphasizedPreferredFont(forTextStyle:)();
}

id variable initialization expression of SyncedLyricsViewController.Specs.writtenByFont()
{
  return sub_100AD74E8((double *)&UIFontWeightBold);
}

id variable initialization expression of SyncedLyricsViewController.Specs.songwritersNamesFont()
{
  return sub_100AD74E8((double *)&UIFontWeightMedium);
}

id sub_100AD74E8(double *a1)
{
  id v1 = [self systemFontOfSize:22.0 weight:*a1];

  return v1;
}

double variable initialization expression of SyncedLyricsViewController.Specs.emphasizingScaleRange()
{
  return 1.0;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedTextColor()
{
  return sub_100AD7DF8((SEL *)&selRef_labelColor, (uint64_t)&unk_101008B90, (uint64_t)sub_100AD81EC, (uint64_t)&unk_101008BA8);
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedUpcomingTextColor()
{
  id v0 = self;
  id v1 = [v0 whiteColor];
  id v2 = [v1 colorWithAlphaComponent:0.35];

  id v3 = [v0 labelColor];
  id v4 = [v3 colorWithAlphaComponent:0.85];

  id v5 = objc_allocWithZone((Class)UIColor);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v2;
  void v12[4] = sub_100ADACFC;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = sub_10004DA48;
  v12[3] = &unk_101008BF8;
  double v7 = _Block_copy(v12);
  id v8 = v4;
  id v9 = v2;
  swift_release();
  id v10 = [v5 initWithDynamicProvider:v7];

  _Block_release(v7);
  return v10;
}

id variable initialization expression of SyncedLyricsViewController.Specs.deselectedTextColor()
{
  id v0 = self;
  id v1 = [v0 whiteColor];
  id v2 = [v1 colorWithAlphaComponent:0.175];

  id v3 = [v0 labelColor];
  id v4 = [v3 colorWithAlphaComponent:0.4];

  id v5 = objc_allocWithZone((Class)UIColor);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v2;
  void v12[4] = sub_100ADACFC;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = sub_10004DA48;
  v12[3] = &unk_101008C48;
  double v7 = _Block_copy(v12);
  id v8 = v4;
  id v9 = v2;
  swift_release();
  id v10 = [v5 initWithDynamicProvider:v7];

  _Block_release(v7);
  return v10;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedBackgroundVocalsTextColor()
{
  id v0 = self;
  id v1 = [v0 whiteColor];
  id v2 = [v1 colorWithAlphaComponent:0.35];

  id v3 = [v0 labelColor];
  id v4 = [v3 colorWithAlphaComponent:0.85];

  id v5 = objc_allocWithZone((Class)UIColor);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v2;
  void v12[4] = sub_100ADACFC;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = sub_10004DA48;
  v12[3] = &unk_101008C98;
  double v7 = _Block_copy(v12);
  id v8 = v4;
  id v9 = v2;
  swift_release();
  id v10 = [v5 initWithDynamicProvider:v7];

  _Block_release(v7);
  return v10;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedUpcomingBackgroundVocalsTextColor()
{
  id v0 = self;
  id v1 = [v0 whiteColor];
  id v2 = [v1 colorWithAlphaComponent:0.175];

  id v3 = [v0 labelColor];
  id v4 = [v3 colorWithAlphaComponent:0.65];

  id v5 = objc_allocWithZone((Class)UIColor);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v2;
  void v12[4] = sub_100ADACFC;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = sub_10004DA48;
  v12[3] = &unk_101008CE8;
  double v7 = _Block_copy(v12);
  id v8 = v4;
  id v9 = v2;
  swift_release();
  id v10 = [v5 initWithDynamicProvider:v7];

  _Block_release(v7);
  return v10;
}

id variable initialization expression of SyncedLyricsViewController.Specs.deselectedScrollTextColor()
{
  id v0 = self;
  id v1 = [v0 whiteColor];
  id v2 = [v1 colorWithAlphaComponent:0.4];

  id v3 = [v0 labelColor];
  id v4 = [v3 colorWithAlphaComponent:0.4];

  id v5 = objc_allocWithZone((Class)UIColor);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v2;
  void v12[4] = sub_100ADACFC;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = sub_10004DA48;
  v12[3] = &unk_101008D38;
  double v7 = _Block_copy(v12);
  id v8 = v4;
  id v9 = v2;
  swift_release();
  id v10 = [v5 initWithDynamicProvider:v7];

  _Block_release(v7);
  return v10;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.deselectedTransform@<D0>(_OWORD *a1@<X8>)
{
  return sub_100AD80E8(a1, 0.98);
}

id variable initialization expression of SyncedLyricsViewController.Specs.hiddenTextColor()
{
  id v0 = [self clearColor];

  return v0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineTapProgressFreezeDuration()
{
  return 0.1;
}

double static SegueResponseContext.defaultExpirationTimeoutInterval.getter()
{
  return 5.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.glowRange()
{
  return 0.0;
}

id variable initialization expression of SyncedLyricsViewController.Specs.lineProgressionGradientColor()
{
  return sub_100AD7DF8((SEL *)&selRef_tintColor, (uint64_t)&unk_101008D70, (uint64_t)sub_100ADACFC, (uint64_t)&unk_101008D88);
}

id sub_100AD7DF8(SEL *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7 = self;
  id v8 = [v7 whiteColor];
  id v9 = [v7 *a1];
  id v10 = objc_allocWithZone((Class)UIColor);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v9;
  *(void *)(v11 + 24) = v8;
  void v17[4] = a3;
  v17[5] = v11;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  void v17[2] = sub_10004DA48;
  v17[3] = a4;
  id v12 = _Block_copy(v17);
  id v13 = v9;
  id v14 = v8;
  swift_release();
  id v15 = [v10 initWithDynamicProvider:v12];

  _Block_release(v12);
  return v15;
}

id variable initialization expression of SyncedLyricsViewController.Specs.lineProgressionBackgroundVocalsGradientColor()
{
  id v0 = self;
  id v1 = [v0 whiteColor];
  id v2 = [v1 colorWithAlphaComponent:0.175];

  id v3 = [v0 tintColor];
  id v4 = [v3 colorWithAlphaComponent:0.175];

  id v5 = objc_allocWithZone((Class)UIColor);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v2;
  void v12[4] = sub_100ADACFC;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = sub_10004DA48;
  v12[3] = &unk_101008DD8;
  double v7 = _Block_copy(v12);
  id v8 = v4;
  id v9 = v2;
  swift_release();
  id v10 = [v5 initWithDynamicProvider:v7];

  _Block_release(v7);
  return v10;
}

double variable initialization expression of JSStoreHTTPRequest.timeout()
{
  return 30.0;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.touchDownTransform@<D0>(_OWORD *a1@<X8>)
{
  return sub_100AD80E8(a1, 0.95);
}

CGFloat sub_100AD80E8@<D0>(_OWORD *a1@<X8>, CGFloat a2@<D0>)
{
  CGAffineTransformMakeScale(&v6, a2, a2);
  CGFloat result = v6.a;
  long long v4 = *(_OWORD *)&v6.c;
  long long v5 = *(_OWORD *)&v6.tx;
  *a1 = *(_OWORD *)&v6.a;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

double variable initialization expression of SyncedLyricsViewController.Specs.vocalGroupWidthCoefficient()
{
  return 0.85;
}

id variable initialization expression of SyncedLyricsViewController.Specs.highlightViewBackgroundColor()
{
  id v0 = objc_allocWithZone((Class)UIColor);

  return [v0 initWithWhite:1.0 alpha:0.08];
}

double variable initialization expression of SyncedLyricsViewController.Specs.highlightViewMargin()
{
  return 16.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.instrumentalBreakVisualizationMinSeconds()
{
  return 7.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.instrumentalBreakViewHeight()
{
  return 40.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.syllableLift()
{
  return 2.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineFinishProgressAnimationDuration()
{
  return 0.25;
}

uint64_t sub_100AD81AC()
{
  return swift_deallocObject();
}

id sub_100AD81EC(void *a1)
{
  return sub_100B27448(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

double variable initialization expression of SyncedLyricsViewController.bottomTapAreaHeight()
{
  return Int.seconds.getter(0);
}

void *variable initialization expression of SyncedLyricsViewController.specs@<X0>(void *a1@<X8>)
{
  sub_100B2794C(0, v3);
  return memcpy(a1, v3, 0x219uLL);
}

id variable initialization expression of SyncedLyricsViewController.scrollView()
{
  id v0 = objc_allocWithZone((Class)UIScrollView);

  return [v0 init];
}

id variable initialization expression of SyncedLyricsViewController.tapFeedbackGenerator()
{
  id v0 = objc_allocWithZone((Class)UISelectionFeedbackGenerator);

  return [v0 init];
}

id variable initialization expression of LineProgressGradientView.gradientView()
{
  return sub_100AD8B34((void (*)(void))type metadata accessor for LineProgressGradientView.GradientView);
}

uint64_t variable initialization expression of NoticePresenter._notice@<X0>(uint64_t a1@<X8>)
{
  return sub_100AD917C(type metadata accessor for Notice, a1);
}

__n128 variable initialization expression of NoticePresenter.uiKitConfiguration@<Q0>(uint64_t a1@<X8>)
{
  if (qword_1010C85B0 != -1) {
    swift_once();
  }
  uint64_t v2 = static NoticePresenter.defaultEdgePadding;
  __n128 v6 = *(__n128 *)&NSDirectionalEdgeInsetsZero.top;
  CGFloat bottom = NSDirectionalEdgeInsetsZero.bottom;
  CGFloat trailing = NSDirectionalEdgeInsetsZero.trailing;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(a1 + 8) = 2;
  *(void *)(a1 + 16) = v2;
  __n128 result = v6;
  *(__n128 *)(a1 + 24) = v6;
  *(CGFloat *)(a1 + 40) = bottom;
  *(CGFloat *)(a1 + 48) = trailing;
  return result;
}

uint64_t variable initialization expression of NoticePresentingModifier._controller()
{
  type metadata accessor for NoticePresenter();
  sub_100AD9EC0(&qword_1010C8938, (void (*)(uint64_t))type metadata accessor for NoticePresenter);

  return EnvironmentObject.init()();
}

double variable initialization expression of ArtistRazzmatazzView._rowHeight()
{
  return 75.0;
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View._placeholderStyle@<X0>(uint64_t *a1@<X8>)
{
  return sub_100AD8D84(&qword_1010C8940, a1);
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View._colorSchemeContrast@<X0>(uint64_t *a1@<X8>)
{
  return sub_100AD8D84(&qword_1010C8948, a1);
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View.Style.blendMode@<X0>(uint64_t a1@<X8>)
{
  return sub_100AD917C((uint64_t (*)(void))&type metadata accessor for BlendMode, a1);
}

uint64_t variable initialization expression of Card.DisplayStyle._displayCornerRadius()
{
  return swift_getKeyPath();
}

uint64_t sub_100AD8480@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.displayCornerRadius.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100AD84B4()
{
  return EnvironmentValues.displayCornerRadius.setter();
}

uint64_t variable initialization expression of Collaboration.Flow.View._dismiss@<X0>(uint64_t *a1@<X8>)
{
  return sub_100AD8D84(&qword_1010C8950, a1);
}

uint64_t sub_100AD84F8()
{
  return EnvironmentValues.dismiss.getter();
}

double variable initialization expression of Card.ViewController.maxRegularWidth()
{
  return 414.0;
}

uint64_t variable initialization expression of CarouselView.selectedItem@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Binding();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t variable initialization expression of CarouselView._scrollViewProxy@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ScrollViewProxy();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t variable initialization expression of CarouselView._layoutDirection@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_100063814(&qword_1010C8958);

  return swift_storeEnumTagMultiPayload();
}

uint64_t variable initialization expression of CircularProgressView._state()
{
  return 0;
}

id variable initialization expression of CircularProgressView.trackLayer()
{
  id v0 = objc_allocWithZone((Class)CAShapeLayer);

  return [v0 init];
}

uint64_t variable initialization expression of Collaboration.Management.Model._hasNetworkConnectivity()
{
  static ApplicationCapabilities.shared.getter((uint64_t)v1);
  sub_10005E8DC((uint64_t)v1);
  return v1[1];
}

uint64_t variable initialization expression of Collaboration.Management.Model.$__lazy_storage_$_artworkViewModel@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100063814((uint64_t *)&unk_1010C8960);
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t variable initialization expression of Collaboration.Management.View._dynamicTypeSize@<X0>(uint64_t *a1@<X8>)
{
  return sub_100AD8D84((uint64_t *)&unk_1010CD530, a1);
}

uint64_t variable initialization expression of Collaboration.Management.View._openURL@<X0>(uint64_t *a1@<X8>)
{
  return sub_100AD8D84((uint64_t *)&unk_1010C8970, a1);
}

uint64_t variable initialization expression of PlaylistCurators.View._horizontalSizeClass@<X0>(uint64_t *a1@<X8>)
{
  return sub_100AD8D84(&qword_1010CD5C0, a1);
}

uint64_t sub_100AD8788(uint64_t a1)
{
  sub_100063814(&qword_1010C8CB8);
  __chkstk_darwin();
  sub_10006CAB8(a1, (uint64_t)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1010C8CB8);
  return EnvironmentValues.horizontalSizeClass.setter();
}

uint64_t variable initialization expression of Collaboration.Flow.Collaborator.artwork@<X0>(uint64_t a1@<X8>)
{
  return sub_100AD917C((uint64_t (*)(void))&type metadata accessor for Artwork, a1);
}

uint64_t variable initialization expression of InlineProfileEditingView._imagePickerSourceType()
{
  return 1;
}

uint64_t variable initialization expression of MoreLabel._layoutDirection@<X0>(uint64_t *a1@<X8>)
{
  return sub_100AD8D84(&qword_1010C8958, a1);
}

uint64_t variable initialization expression of MoreLabel._accessibilityShowButtonShapes()
{
  return swift_getKeyPath();
}

uint64_t variable initialization expression of LoadingView.style()
{
  return 0x10000000000;
}

id variable initialization expression of LoadingView.label()
{
  id v0 = objc_allocWithZone((Class)UILabel);

  return [v0 initWithFrame:0.0, 0.0, 0.0, 0.0];
}

id variable initialization expression of LoadingView.activityIndicator()
{
  id v0 = objc_allocWithZone((Class)UIActivityIndicatorView);

  return [v0 initWithActivityIndicatorStyle:100];
}

uint64_t variable initialization expression of NoticeView._dismiss()
{
  return swift_getKeyPath();
}

UIFontTextStyle variable initialization expression of SymbolButton.Configuration.symbol@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = UIFontTextStyleSubheadline;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = xmmword_100E33E40;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = -1;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0x3FF0000000000000;
  *(void *)(a1 + 112) = 0;
  return UIFontTextStyleSubheadline;
}

UIFontTextStyle SymbolButton.Title.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = UIFontTextStyleSubheadline;
  *(UIFontWeight *)(a1 + 24) = UIFontWeightSemibold;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0x3FF0000000000000;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  return UIFontTextStyleSubheadline;
}

double variable initialization expression of SymbolButton.Configuration.material@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  return result;
}

double variable initialization expression of SymbolButton.Configuration.customView@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double variable initialization expression of SymbolButton.Configuration.symbolToTextSpacing()
{
  return 4.0;
}

double variable initialization expression of SymbolButton.Configuration.minimumSize()
{
  return sub_100AD8FAC(&qword_1010C8818, (uint64_t)&static SymbolButton.Configuration.platterMinimumSize);
}

CGFloat variable initialization expression of SymbolButton.Configuration.contentInsets()
{
  return NSDirectionalEdgeInsetsZero.top;
}

uint64_t variable initialization expression of SymbolButton.Configuration.accessibility()
{
  return 1;
}

uint64_t variable initialization expression of PlayIntentButtonWrapper._playIntentButtonMaterial()
{
  return swift_getKeyPath();
}

char *variable initialization expression of PlayIntentLayoutHelper.playButton()
{
  return SymbolButton.__allocating_init(intent:)(0);
}

char *variable initialization expression of PlayIntentLayoutHelper.shuffleButton()
{
  return SymbolButton.__allocating_init(intent:)(1);
}

uint64_t variable initialization expression of PlayIntentLayoutHelper.configuration()
{
  return 513;
}

id variable initialization expression of QRCodeOverlayViewController.backgroundView()
{
  id v0 = objc_allocWithZone((Class)UIVisualEffectView);

  return [v0 init];
}

id variable initialization expression of QRCodeOverlayViewController.qrCodeView()
{
  return sub_100AD8B34((void (*)(void))type metadata accessor for QRCodeOverlayViewController.ContainerView);
}

id sub_100AD8B34(void (*a1)(void))
{
  a1(0);
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return [v1 init];
}

id variable initialization expression of QRCodeOverlayViewController.logoView()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [objc_allocWithZone((Class)UIImageView) initWithImage:v1];
  return v2;
}

id variable initialization expression of QRCodeOverlayViewController.titleLabel()
{
  id v0 = objc_allocWithZone((Class)UILabel);

  return [v0 init];
}

id variable initialization expression of QRCodeOverlayViewController.subtitleLabelEffectView()
{
  if (qword_1010C87A0 != -1) {
    swift_once();
  }
  id v0 = [self effectForBlurEffect:qword_10112CE08];
  id v1 = [objc_allocWithZone((Class)UIVisualEffectView) initWithEffect:v0];

  return v1;
}

id variable initialization expression of QRCodeOverlayViewController.ContainerView.imageView()
{
  return sub_100AD8DEC((Class *)UIImageView_ptr);
}

id variable initialization expression of QRCodeOverlayViewController.ContainerView.overlayLayer()
{
  id v0 = objc_allocWithZone((Class)CALayer);

  return [v0 init];
}

uint64_t variable initialization expression of QRCodeOverlayViewController.ImageViewRepresentable._foregroundColor()
{
  return swift_getKeyPath();
}

uint64_t sub_100AD8D44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.effectiveForegroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of Reactions.StackView._colorScheme@<X0>(uint64_t *a1@<X8>)
{
  return sub_100AD8D84(&qword_1010C89E0, a1);
}

uint64_t sub_100AD8D84@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = swift_getKeyPath();
  sub_100063814(a1);

  return swift_storeEnumTagMultiPayload();
}

id variable initialization expression of SliderView.stackView()
{
  return sub_100AD8DEC((Class *)UIStackView_ptr);
}

id variable initialization expression of SliderView.remainingTrack()
{
  return sub_100AD8DEC((Class *)UIView_ptr);
}

id sub_100AD8DEC(Class *a1)
{
  id v1 = [objc_allocWithZone(*a1) init];
  id v2 = UIView.forAutolayout.getter();

  return v2;
}

id variable initialization expression of SliderView.feedbackGenerator()
{
  id v0 = objc_allocWithZone((Class)UIImpactFeedbackGenerator);

  return [v0 initWithStyle:0];
}

id variable initialization expression of SliderView.trackLayoutGuide()
{
  id v0 = objc_allocWithZone((Class)UILayoutGuide);

  return [v0 init];
}

id variable initialization expression of SliderView.elapsedTrackColor()
{
  id v0 = [self whiteColor];

  return v0;
}

id variable initialization expression of SliderView.remainingTrackColor()
{
  id v0 = [self systemFillColor];

  return v0;
}

id variable initialization expression of SliderView.trackingColor()
{
  if (qword_1010C8418 != -1) {
    swift_once();
  }
  id v0 = (void *)static UIColor.MusicTint.normal;

  return v0;
}

double variable initialization expression of SymbolButton.hitRectMinimumSize()
{
  return sub_100AD8FAC(&qword_1010C8820, (uint64_t)&static SymbolButton.Configuration.hitRectMinimumSize);
}

double sub_100AD8FAC(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

id variable initialization expression of SymbolButton.containerView()
{
  id v0 = objc_allocWithZone((Class)UIView);

  return [v0 init];
}

id variable initialization expression of SymbolButton.materialView()
{
  uint64_t v4 = 1;
  id v0 = (objc_class *)type metadata accessor for SymbolButton.MaterialView();
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v7 = 0;
  v3.receiver = objc_allocWithZone(v0);
  v3.super_class = v0;
  id v1 = [super initWithEffect:0];
  sub_100C2A83C((uint64_t)&v4);

  return v1;
}

id variable initialization expression of SymbolButton.backgroundView()
{
  if (qword_1010C87F8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  double v0 = *(double *)&static SymbolButton.Background.clear;
  id v1 = (void *)qword_10112CF98;
  uint64_t v2 = qword_10112CFA0;
  uint64_t v3 = qword_10112CFA8;
  objc_allocWithZone((Class)type metadata accessor for SymbolButton.BackgroundView());
  swift_bridgeObjectRetain();
  id v4 = v1;
  return sub_100C2AC78(v1, v0, v2, v3);
}

uint64_t variable initialization expression of SymbolButton.$__lazy_storage_$_metrics@<X0>(uint64_t a1@<X8>)
{
  return sub_100AD917C(type metadata accessor for SymbolButton.Metrics, a1);
}

uint64_t sub_100AD917C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

double variable initialization expression of SymbolButton.Update.animationOptions()
{
  return 0.0;
}

UIFontTextStyle variable initialization expression of SymbolButton.Symbol.style()
{
  return UIFontTextStyleSubheadline;
}

uint64_t variable initialization expression of JSSocialOnboardingWelcomeViewModel.textAlignment()
{
  return 6;
}

uint64_t variable initialization expression of JSStaticImageViewModel.imageResource()
{
  return 0;
}

UIFontWeight variable initialization expression of SymbolButton.Title.weight()
{
  return UIFontWeightSemibold;
}

CGFloat variable initialization expression of SymbolButton.CustomView.insets()
{
  return UIEdgeInsetsZero.top;
}

double variable initialization expression of VerticalToggleSlider.packageDefinition@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

float variable initialization expression of VerticalToggleSlider.minLevelOffsetRatio()
{
  if (qword_1010C8888 != -1) {
    swift_once();
  }
  double v0 = *((double *)&static VerticalToggleSlider.DesignSpecs.expandedSize + 1);
  if (qword_1010C8878 != -1) {
    swift_once();
  }
  return 1.0 / v0 * *(double *)&qword_10112D0F8;
}

uint64_t variable initialization expression of VerticalToggleSlider.growAnchorPoint()
{
  return 8;
}

double variable initialization expression of VerticalToggleSlider.internalValueRange()
{
  return 0.0;
}

float variable initialization expression of VerticalToggleSlider._maxValue()
{
  return 1.0;
}

id variable initialization expression of VerticalToggleSlider.blurEffect()
{
  if (qword_1010C8860 != -1) {
    swift_once();
  }
  id v0 = [self effectWithBlurRadius:*(double *)&qword_1010D1090];

  return v0;
}

double variable initialization expression of VerticalToggleSlider.shapeChange()
{
  if (qword_1010C8868 != -1) {
    swift_once();
  }
  return *(double *)&xmmword_1010D1098;
}

void variable initialization expression of VerticalToggleSlider.growTransform(void *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0x3FF0000000000000;
  a1[4] = 0;
  a1[5] = 0;
}

id variable initialization expression of WaveformPlayIndicator.colorPalette()
{
  id v0 = self;
  id v1 = [v0 tintColor];
  id v2 = [v0 labelColor];
  id v3 = [v2 colorWithAlphaComponent:0.35];

  id v4 = [v0 labelColor];
  id v5 = [v4 colorWithAlphaComponent:0.2];

  id v6 = [v0 labelColor];
  id v7 = [v6 colorWithAlphaComponent:0.6];

  return v1;
}

id variable initialization expression of WaveformPlayIndicator.waveform()
{
  id v0 = [self zero];

  return v0;
}

uint64_t variable initialization expression of WaveformPlayIndicator.cannedAnimationAsset()
{
  return sub_100C4AD50();
}

uint64_t sub_100AD95A0(uint64_t a1, uint64_t a2)
{
  return sub_100AD9E7C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

NSNumber sub_100AD95B8()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_100AD95C0(uint64_t a1, uint64_t a2)
{
  uint64_t result = static CGFloat._forceBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t sub_100AD9614(uint64_t a1, uint64_t a2)
{
  char v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t sub_100AD966C@<X0>(void *a1@<X8>)
{
  uint64_t result = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = v3;
  return result;
}

BOOL sub_100AD9694(double *a1, double *a2)
{
  return *a1 == *a2;
}

double sub_100AD96A8@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

uint64_t sub_100AD96B4()
{
  sub_100AD9EC0(&qword_1010C8CA8, type metadata accessor for UIContentSizeCategory);
  sub_100AD9EC0(&qword_1010C8CB0, type metadata accessor for UIContentSizeCategory);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100AD9770()
{
  sub_100AD9EC0(&qword_1010C8C98, _s3__C9TextStyleVMa_0);
  sub_100AD9EC0(&qword_1010C8CA0, _s3__C9TextStyleVMa_0);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100AD982C()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100AD98F4()
{
  sub_100AD9EC0(&qword_1010C8C70, type metadata accessor for FeatureKey);
  sub_100AD9EC0(&qword_1010C8C78, type metadata accessor for FeatureKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100AD99B0()
{
  sub_100AD9EC0((unint64_t *)&qword_1010C8C60, _s3__C13AttributeNameVMa_0);
  sub_100AD9EC0(&qword_1010C8C68, _s3__C13AttributeNameVMa_0);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100AD9A6C()
{
  sub_100AD9EC0(&qword_1010C8D50, type metadata accessor for NLLanguage);
  sub_100AD9EC0(&qword_1010C8D58, type metadata accessor for NLLanguage);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100AD9B28()
{
  sub_100AD9EC0((unint64_t *)&qword_1010C8D70, _s3__C3KeyVMa_2);
  sub_100AD9EC0(&qword_1010C8D78, _s3__C3KeyVMa_2);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100AD9BE4()
{
  sub_100AD9EC0(&qword_1010C8D60, _s3__C25OpenExternalURLOptionsKeyVMa_1);
  sub_100AD9EC0(&qword_1010C8D68, _s3__C25OpenExternalURLOptionsKeyVMa_1);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100AD9CA0()
{
  sub_100AD9EC0(&qword_1010C8C40, type metadata accessor for CAGradientLayerType);
  sub_100AD9EC0(&qword_1010C8C48, type metadata accessor for CAGradientLayerType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100AD9D5C()
{
  sub_100AD9EC0(&qword_1010C8C50, type metadata accessor for InfoKey);
  sub_100AD9EC0(&qword_1010C8C58, type metadata accessor for InfoKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_100AD9E18()
{
  return Double.hashValue.getter(*v0);
}

void sub_100AD9E20()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t sub_100AD9E54()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t sub_100AD9E64(uint64_t a1, uint64_t a2)
{
  return sub_100AD9E7C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100AD9E7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100AD9EC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void _s3__C12UIEdgeInsetsVMa_0(uint64_t a1)
{
}

void type metadata accessor for KeyframeAnimationOptions(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceStyle(uint64_t a1)
{
}

void type metadata accessor for CGPath(uint64_t a1)
{
}

void type metadata accessor for CAGradientLayerType(uint64_t a1)
{
}

void _s3__C6CTLineCMa_0(uint64_t a1)
{
}

void _s3__C7CTFrameCMa_0(uint64_t a1)
{
}

void type metadata accessor for CTFramesetter(uint64_t a1)
{
}

void _s3__C15NSTextAlignmentOMa_0(uint64_t a1)
{
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

__n128 _s11PlaceholderVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void _s3__C17CGAffineTransformVMa_0(uint64_t a1)
{
}

void type metadata accessor for UIAxis(uint64_t a1)
{
}

void type metadata accessor for UIRectCorner(uint64_t a1)
{
}

void _s3__C7CGPointVMa_0(uint64_t a1)
{
}

void type metadata accessor for InfoKey(uint64_t a1)
{
}

void _s3__C13AttributeNameVMa_0(uint64_t a1)
{
}

void type metadata accessor for FeatureKey(uint64_t a1)
{
}

void type metadata accessor for UIOffset(uint64_t a1)
{
}

void type metadata accessor for SymbolScale(uint64_t a1)
{
}

void type metadata accessor for SymbolWeight(uint64_t a1)
{
}

void type metadata accessor for Weight(uint64_t a1)
{
}

void _s3__C9TextStyleVMa_0(uint64_t a1)
{
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
}

void _s3__C23NSDirectionalEdgeInsetsVMa_0(uint64_t a1)
{
}

uint64_t sub_100ADA13C()
{
  return sub_100AD9EC0(&qword_1010C8B58, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_100ADA184()
{
  return sub_100AD9EC0(&qword_1010C8B60, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_100ADA1CC()
{
  return sub_100AD9EC0(&qword_1010C8B68, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_100ADA214()
{
  return sub_100AD9EC0(&qword_1010C8B70, _s3__C9TextStyleVMa_0);
}

uint64_t sub_100ADA25C()
{
  return sub_100AD9EC0(&qword_1010C8B78, _s3__C9TextStyleVMa_0);
}

uint64_t sub_100ADA2A4()
{
  return sub_100AD9EC0(&qword_1010C8B80, _s3__C9TextStyleVMa_0);
}

uint64_t sub_100ADA2EC()
{
  return sub_100AD9EC0(&qword_1010C8B88, type metadata accessor for Weight);
}

uint64_t sub_100ADA334()
{
  return sub_100AD9EC0(&qword_1010C8B90, type metadata accessor for Weight);
}

uint64_t sub_100ADA37C()
{
  return sub_100AD9EC0(&qword_1010C8B98, type metadata accessor for Weight);
}

uint64_t sub_100ADA3C4()
{
  return sub_100AD9EC0(&qword_1010C8BA0, type metadata accessor for FeatureKey);
}

uint64_t sub_100ADA40C()
{
  return sub_100AD9EC0(&qword_1010C8BA8, type metadata accessor for FeatureKey);
}

uint64_t sub_100ADA454()
{
  return sub_100AD9EC0(&qword_1010C8BB0, type metadata accessor for FeatureKey);
}

uint64_t sub_100ADA49C()
{
  return sub_100AD9EC0(&qword_1010C8BB8, _s3__C13AttributeNameVMa_0);
}

uint64_t sub_100ADA4E4()
{
  return sub_100AD9EC0(&qword_1010C8BC0, _s3__C13AttributeNameVMa_0);
}

uint64_t sub_100ADA52C()
{
  return sub_100AD9EC0(&qword_1010C8BC8, type metadata accessor for InfoKey);
}

uint64_t sub_100ADA574()
{
  return sub_100AD9EC0(&qword_1010C8BD0, type metadata accessor for InfoKey);
}

uint64_t sub_100ADA5BC()
{
  return sub_100AD9EC0(&qword_1010C8BD8, type metadata accessor for UIAxis);
}

uint64_t sub_100ADA604()
{
  return sub_100AD9EC0(&qword_1010C8BE0, type metadata accessor for UIAxis);
}

uint64_t sub_100ADA64C()
{
  return sub_100AD9EC0(&qword_1010C8BE8, type metadata accessor for UIAxis);
}

uint64_t sub_100ADA694()
{
  return sub_100AD9EC0(&qword_1010C8BF0, type metadata accessor for UIAxis);
}

uint64_t sub_100ADA6DC()
{
  return sub_100AD9EC0(&qword_1010C8BF8, type metadata accessor for CAGradientLayerType);
}

uint64_t sub_100ADA724()
{
  return sub_100AD9EC0(&qword_1010C8C00, type metadata accessor for CAGradientLayerType);
}

uint64_t sub_100ADA76C()
{
  return sub_100AD9EC0(&qword_1010C8C08, type metadata accessor for CAGradientLayerType);
}

uint64_t sub_100ADA7B4()
{
  return sub_100AD9EC0(&qword_1010C8C10, type metadata accessor for KeyframeAnimationOptions);
}

uint64_t sub_100ADA7FC()
{
  return sub_100AD9EC0(&qword_1010C8C18, type metadata accessor for KeyframeAnimationOptions);
}

uint64_t sub_100ADA844()
{
  return sub_100AD9EC0(&qword_1010C8C20, type metadata accessor for KeyframeAnimationOptions);
}

uint64_t sub_100ADA88C()
{
  return sub_100AD9EC0(&qword_1010C8C28, type metadata accessor for KeyframeAnimationOptions);
}

uint64_t sub_100ADA8D4()
{
  return sub_100AD9EC0(&qword_1010C8C30, type metadata accessor for InfoKey);
}

uint64_t sub_100ADA91C()
{
  return sub_100AD9EC0(&qword_1010C8C38, _s3__C13AttributeNameVMa_0);
}

unint64_t sub_100ADA964()
{
  unint64_t result = qword_1010C8C90;
  if (!qword_1010C8C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C8C90);
  }
  return result;
}

void type metadata accessor for NLLanguage(uint64_t a1)
{
}

void _s3__C25OpenExternalURLOptionsKeyVMa_1(uint64_t a1)
{
}

void type metadata accessor for CTParagraphStyle(uint64_t a1)
{
}

void _s3__C5CTRunCMa_0(uint64_t a1)
{
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceLayoutDirection(uint64_t a1)
{
}

uint64_t sub_100ADAA30()
{
  return sub_100AD9EC0(&qword_1010C8D08, _s3__C3KeyVMa_2);
}

uint64_t sub_100ADAA78()
{
  return sub_100AD9EC0(&qword_1010C8D10, _s3__C3KeyVMa_2);
}

uint64_t sub_100ADAAC0()
{
  return sub_100AD9EC0(&qword_1010C8D18, _s3__C25OpenExternalURLOptionsKeyVMa_1);
}

uint64_t sub_100ADAB08()
{
  return sub_100AD9EC0(&qword_1010C8D20, _s3__C25OpenExternalURLOptionsKeyVMa_1);
}

uint64_t sub_100ADAB50()
{
  return sub_100AD9EC0(&qword_1010C8D28, type metadata accessor for NLLanguage);
}

uint64_t sub_100ADAB98()
{
  return sub_100AD9EC0(&qword_1010C8D30, type metadata accessor for NLLanguage);
}

uint64_t sub_100ADABE0()
{
  return sub_100AD9EC0(&qword_1010C8D38, type metadata accessor for NLLanguage);
}

uint64_t sub_100ADAC28()
{
  return sub_100AD9EC0(&qword_1010C8D40, _s3__C25OpenExternalURLOptionsKeyVMa_1);
}

void Card.ViewController.hostingController.setter()
{
}

uint64_t Artwork.caching.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10006CAB8(v1, a1, &qword_1010C8F00);
}

uint64_t Artwork.caching.setter(uint64_t a1)
{
  return sub_10002D09C(a1, v1, &qword_1010C8F00);
}

void *Artwork.content.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  sub_100ADAD80(v1, *(void **)(v0 + 32));
  return v1;
}

id sub_100ADAD80(id result, void *a2)
{
  if (a2)
  {
    id v2 = result;
    return a2;
  }
  return result;
}

void Artwork.content.setter(uint64_t a1, uint64_t a2)
{
  sub_10006BC54(*(void **)(v2 + 24), *(void **)(v2 + 32));
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
}

uint64_t Artwork.decoration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Artwork(0);
  return sub_10006CB30(v1 + *(int *)(v3 + 24), a1, type metadata accessor for Artwork.Decoration);
}

uint64_t Artwork.decoration.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Artwork(0) + 24);

  return sub_1004C540C(a1, v3);
}

double (*Artwork.decoration.modify())(double)
{
  return UIScreen.Dimensions.size.getter;
}

uint64_t Artwork.placeholder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Artwork(0);
  return sub_10006CAB8(v1 + *(int *)(v3 + 28), a1, &qword_1010C8F08);
}

uint64_t Artwork.placeholder.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Artwork(0);
  return sub_10002D09C(a1, v1 + *(int *)(v3 + 28), &qword_1010C8F08);
}

double (*Artwork.placeholder.modify())(double)
{
  return UIScreen.Dimensions.size.getter;
}

uint64_t Artwork.size.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Artwork(0) + 32));
}

uint64_t Artwork.size.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = type metadata accessor for Artwork(0);
  uint64_t v10 = v4 + *(int *)(result + 32);
  *(void *)uint64_t v10 = a1;
  *(void *)(v10 + 8) = a2;
  *(void *)(v10 + 16) = a3;
  *(unsigned char *)(v10 + 24) = a4;
  return result;
}

double (*Artwork.size.modify())(double)
{
  return UIScreen.Dimensions.size.getter;
}

char *sub_100ADB070()
{
  __chkstk_darwin();
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006CB30(v0, (uint64_t)v2, type metadata accessor for Artwork);
  id v3 = objc_allocWithZone((Class)type metadata accessor for Artwork.View(0));
  uint64_t v4 = Artwork.View.init(configuration:)((uint64_t)v2);
  sub_10007426C(&qword_1010C8FB0, (void (*)(uint64_t))type metadata accessor for Artwork.View);
  return v4;
}

uint64_t sub_100ADB144@<X0>(uint64_t a1@<X8>)
{
  return sub_10006CB30(v1, a1, type metadata accessor for Artwork);
}

char *Artwork.View.__allocating_init(configuration:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return Artwork.View.init(configuration:)(a1);
}

uint64_t Artwork.View.typedConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess();
  return sub_10006CB30(v3, a1, type metadata accessor for Artwork);
}

void (*Artwork.View.typedConfiguration.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  size_t v4 = *(void *)(*(void *)(type metadata accessor for Artwork(0) - 8) + 64);
  id v3[4] = malloc(v4);
  uint64_t v5 = malloc(v4);
  v3[5] = v5;
  uint64_t v6 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess();
  sub_10006CB30(v6, (uint64_t)v5, type metadata accessor for Artwork);
  return sub_100ADB314;
}

void sub_100ADB314(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  size_t v4 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    sub_10006CB30(*(void *)(*(void *)a1 + 40), (uint64_t)v3, type metadata accessor for Artwork);
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
    sub_10006CCF0((uint64_t)v4, type metadata accessor for Artwork);
  }
  else
  {
    Artwork.View.typedConfiguration.setter(*(void *)(*(void *)a1 + 40));
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t Artwork.View.imageDidChangeHandler.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler);
  swift_beginAccess();
  uint64_t v2 = *v1;
  sub_10007B674(*v1);
  return v2;
}

uint64_t Artwork.View.imageDidChangeHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler);
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t *v5 = a1;
  v5[1] = a2;
  return sub_10006ADFC(v6);
}

uint64_t (*Artwork.View.imageDidChangeHandler.modify())()
{
  return j__swift_endAccess;
}

double Artwork.View.intrinsicContentSize.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess();
  uint64_t v2 = v1 + *(int *)(type metadata accessor for Artwork(0) + 32);
  if (*(unsigned char *)(v2 + 8) == 2 && *(unsigned char *)(v2 + 24) == 2)
  {
    double v3 = *(double *)(v2 + 16);
    double v4 = *(double *)v2;
  }
  else
  {
    double v4 = 0.0;
    double v3 = 0.0;
  }
  return Artwork.View.fittingImageSize(in:)(v4, v3);
}

double Artwork.Size.computedSize(in:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
  sub_10003B7E4(a5, a6, a1, a2);
  double v11 = v10;
  sub_10003B7E4(a5, a6, a3, a4);
  return v11;
}

void Gradient.View.init(frame:)()
{
}

uint64_t sub_100ADB86C@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for Artwork(0);
  a1[4] = sub_10007426C(&qword_1010C8F60, (void (*)(uint64_t))type metadata accessor for Artwork);
  double v3 = sub_100068018(a1);
  uint64_t v4 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess();
  return sub_10006CB30(v4, (uint64_t)v3, type metadata accessor for Artwork);
}

uint64_t sub_100ADB924(uint64_t a1)
{
  type metadata accessor for Artwork(0);
  __chkstk_darwin();
  double v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000688E4(a1, (uint64_t)v6);
  sub_100063814(&qword_1010C9220);
  swift_dynamicCast();
  Artwork.View.typedConfiguration.setter((uint64_t)v3);
  return sub_1000760E4(a1);
}

void (*sub_100ADB9E0(uint64_t **a1))(uint64_t *a1, char a2)
{
  double v3 = (uint64_t *)malloc(0xD0uLL);
  *a1 = v3;
  v3[23] = v1;
  uint64_t v4 = type metadata accessor for Artwork(0);
  v3[24] = v4;
  v3[25] = (uint64_t)malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[3] = v4;
  id v3[4] = sub_10007426C(&qword_1010C8F60, (void (*)(uint64_t))type metadata accessor for Artwork);
  uint64_t v5 = sub_100068018(v3);
  uint64_t v6 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess();
  sub_10006CB30(v6, (uint64_t)v5, type metadata accessor for Artwork);
  return sub_100ADBAFC;
}

void sub_100ADBAFC(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  double v3 = *(void **)(*a1 + 200);
  if (a2)
  {
    sub_1000688E4(*a1, (uint64_t)v2 + 40);
    sub_1000688E4((uint64_t)v2 + 40, (uint64_t)v2 + 80);
    sub_100063814(&qword_1010C9220);
    swift_dynamicCast();
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
    sub_1000760E4((uint64_t)v2 + 40);
  }
  else
  {
    sub_1000688E4(*a1, (uint64_t)v2 + 120);
    sub_100063814(&qword_1010C9220);
    swift_dynamicCast();
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
  }
  sub_1000760E4((uint64_t)v2);
  free(v3);

  free(v2);
}

uint64_t sub_100ADBBF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();

  return UIContentView.supports(_:)(a1, ObjectType, a3);
}

uint64_t Artwork.Caching.init(reference:identifier:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  swift_weakInit();
  *a3 = a1;
  a3[1] = a2;
  swift_weakAssign();

  return swift_release();
}

uint64_t Artwork.Caching.init(reference:)@<X0>(void *a1@<X8>)
{
  swift_weakInit();
  swift_weakAssign();
  uint64_t result = swift_release();
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x8000000100DD3020;
  return result;
}

void *Artwork.Caching.Reference.defaultIdentifier.unsafeMutableAddressor()
{
  return &static Artwork.Caching.Reference.defaultIdentifier;
}

unint64_t static Artwork.Caching.Reference.defaultIdentifier.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t Artwork.Caching.Reference.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t static Artwork.Content.__derived_struct_equals(_:_:)(void *a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    if (a3)
    {
      uint64_t v4 = a1;
      sub_100057778(0, (unint64_t *)&qword_1010D0F70);
      id v5 = a3;
      id v6 = v4;
      LOBYTE(v4) = static NSObject.== infix(_:_:)();

      if (v4) {
        goto LABEL_4;
      }
    }
  }
  else if (!a3)
  {
LABEL_4:
    sub_100057778(0, (unint64_t *)&qword_1010CAA20);
    return static NSObject.== infix(_:_:)() & 1;
  }
  return 0;
}

uint64_t sub_100ADBE04(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  double v3 = *a2;
  if (*a1)
  {
    if (v3)
    {
      sub_100057778(0, (unint64_t *)&qword_1010D0F70);
      id v4 = v3;
      id v5 = v2;
      char v6 = static NSObject.== infix(_:_:)();

      if (v6) {
        goto LABEL_4;
      }
    }
  }
  else if (!v3)
  {
LABEL_4:
    sub_100057778(0, (unint64_t *)&qword_1010CAA20);
    return static NSObject.== infix(_:_:)() & 1;
  }
  return 0;
}

uint64_t Artwork.Decoration.border.getter()
{
  uint64_t v1 = *v0;
  id v2 = (id)v0[2];
  return v1;
}

void Artwork.Decoration.border.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t v3 = a1;
  *(void *)(v3 + 8) = a2;
  *(void *)(v3 + 16) = a3;
}

uint64_t Artwork.Decoration.corner.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Artwork.Decoration(0);
  return sub_10006CAB8(v1 + *(int *)(v3 + 20), a1, &qword_1010D0AB0);
}

uint64_t Artwork.Decoration.corner.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Artwork.Decoration(0);
  return sub_10002D09C(a1, v1 + *(int *)(v3 + 20), &qword_1010D0AB0);
}

double (*Artwork.Decoration.corner.modify())(double)
{
  return UIScreen.Dimensions.size.getter;
}

id Artwork.Decoration.fillColor.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for Artwork.Decoration(0) + 24));

  return v1;
}

void Artwork.Decoration.fillColor.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Artwork.Decoration(0) + 24);

  *(void *)(v1 + v3) = a1;
}

double (*Artwork.Decoration.fillColor.modify())(double)
{
  return UIScreen.Dimensions.size.getter;
}

uint64_t Artwork.Decoration.fillAxes.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Artwork.Decoration(0) + 28));
}

uint64_t Artwork.Decoration.fillAxes.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for Artwork.Decoration(0);
  *(void *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

double (*Artwork.Decoration.fillAxes.modify())(double)
{
  return UIScreen.Dimensions.size.getter;
}

uint64_t static Artwork.Decoration.with(_:)@<X0>(uint64_t (*a1)(void *)@<X0>, void *a2@<X8>)
{
  id v4 = (int *)type metadata accessor for Artwork.Decoration(0);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  id v5 = (char *)a2 + v4[5];
  uint64_t v6 = type metadata accessor for UIView.Corner();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v4[6];
  *(void *)((char *)a2 + v7) = [self blackColor];
  *(void *)((char *)a2 + v4[7]) = 1;
  return a1(a2);
}

BOOL static Artwork.Size.Dimension.__derived_enum_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    BOOL v4 = *(double *)&a1 == *(double *)&a3;
    if (a4 != 1) {
      BOOL v4 = 0;
    }
    BOOL v5 = a4 == 2 && *(double *)&a1 == *(double *)&a3;
    if (a2 == 1) {
      return v4;
    }
    else {
      return v5;
    }
  }
  else
  {
    return !a4 && *(double *)&a1 == *(double *)&a3;
  }
}

uint64_t sub_100ADC2C0(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 8) == 1)
    {
      if (v4 == 1 && v2 == v3) {
        return 1;
      }
    }
    else if (v4 == 2 && v2 == v3)
    {
      return 1;
    }
  }
  else if (!*(unsigned char *)(a2 + 8) && v2 == v3)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_100ADC344(uint64_t a1, uint64_t a2)
{
  return _s11MusicCoreUI7ArtworkV4SizeV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(unsigned char *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

uint64_t sub_100ADC36C(uint64_t a1)
{
  return sub_100ADC40C(a1, static Artwork.Decoration.grid, &qword_1010C8490, (uint64_t)static UIView.Corner.medium);
}

uint64_t Artwork.Decoration.grid.unsafeMutableAddressor()
{
  return sub_100ADC638(&qword_1010C8358, (uint64_t)static Artwork.Decoration.grid);
}

uint64_t static Artwork.Decoration.grid.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100ADC884(&qword_1010C8358, (uint64_t)static Artwork.Decoration.grid, a1);
}

uint64_t sub_100ADC3E0(uint64_t a1)
{
  return sub_100ADC40C(a1, static Artwork.Decoration.list, &qword_1010C8488, (uint64_t)static UIView.Corner.small);
}

uint64_t sub_100ADC40C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = sub_100063814(&qword_1010D0AB0);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = (int *)type metadata accessor for Artwork.Decoration(0);
  sub_100014CA4((uint64_t)v10, a2);
  double v11 = (void *)sub_100050A90((uint64_t)v10, (uint64_t)a2);
  if (qword_1010C8470 != -1) {
    swift_once();
  }
  uint64_t v12 = static UIView.Border.artwork;
  uint64_t v13 = byte_10112C168;
  uint64_t v14 = *a3;
  id v15 = (id)qword_10112C170;
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for UIView.Corner();
  uint64_t v17 = sub_100050A90(v16, a4);
  uint64_t v18 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v9, v17, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v9, 0, 1, v16);
  id v19 = [self blackColor];
  void *v11 = v12;
  v11[1] = v13;
  _OWORD v11[2] = v15;
  uint64_t result = sub_100ADE454((uint64_t)v9, (uint64_t)v11 + v10[5]);
  *(void *)((char *)v11 + v10[6]) = v19;
  *(void *)((char *)v11 + v10[7]) = 1;
  return result;
}

uint64_t Artwork.Decoration.list.unsafeMutableAddressor()
{
  return sub_100ADC638(&qword_1010C8360, (uint64_t)static Artwork.Decoration.list);
}

uint64_t sub_100ADC638(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Artwork.Decoration(0);

  return sub_100050A90(v3, a2);
}

uint64_t static Artwork.Decoration.list.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100ADC884(&qword_1010C8360, (uint64_t)static Artwork.Decoration.list, a1);
}

uint64_t sub_100ADC6B0()
{
  sub_100063814(&qword_1010D0AB0);
  __chkstk_darwin();
  uint64_t v1 = (char *)&v11 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v2 = (int *)type metadata accessor for Artwork.Decoration(0);
  sub_100014CA4((uint64_t)v2, static Artwork.Decoration.round);
  uint64_t v3 = (void *)sub_100050A90((uint64_t)v2, (uint64_t)static Artwork.Decoration.round);
  if (qword_1010C8470 != -1) {
    swift_once();
  }
  uint64_t v4 = static UIView.Border.artwork;
  uint64_t v5 = byte_10112C168;
  uint64_t v6 = qword_10112C170;
  id v7 = (id)qword_10112C170;
  static UIView.Corner.rounded.getter();
  uint64_t v8 = type metadata accessor for UIView.Corner();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v1, 0, 1, v8);
  id v9 = [self blackColor];
  *uint64_t v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  uint64_t result = sub_100ADE454((uint64_t)v1, (uint64_t)v3 + v2[5]);
  *(void *)((char *)v3 + v2[6]) = v9;
  *(void *)((char *)v3 + v2[7]) = 1;
  return result;
}

uint64_t Artwork.Decoration.round.unsafeMutableAddressor()
{
  return sub_100ADC638(&qword_1010C8368, (uint64_t)static Artwork.Decoration.round);
}

uint64_t static Artwork.Decoration.round.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100ADC884(&qword_1010C8368, (uint64_t)static Artwork.Decoration.round, a1);
}

uint64_t sub_100ADC884@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Artwork.Decoration(0);
  uint64_t v6 = sub_100050A90(v5, a2);
  return sub_10006CB30(v6, a3, type metadata accessor for Artwork.Decoration);
}

uint64_t Artwork.Decoration.scaled(using:compatibleWith:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  sub_100063814(&qword_1010D0AB0);
  __chkstk_darwin();
  id v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UIView.Corner.Radius();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  int64_t v28 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v14 = (char *)&v27 - v13;
  sub_10006CB30(v4, a3, type metadata accessor for Artwork.Decoration);
  if (*(void *)(v4 + 16) && *(void *)(a3 + 16))
  {
    int v15 = *(_DWORD *)(v4 + 8);
    [a1 scaledValueForValue:a2 compatibleWithTraitCollection:*(double *)v4];
    *(void *)a3 = v16;
    *(unsigned char *)(a3 + 8) = v15 & 1;
  }
  id v29 = a1;
  uint64_t v30 = a2;
  uint64_t v17 = type metadata accessor for Artwork.Decoration(0);
  sub_10006CAB8(v4 + *(int *)(v17 + 20), (uint64_t)v9, &qword_1010D0AB0);
  uint64_t v18 = type metadata accessor for UIView.Corner();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v20(v9, 1, v18) == 1) {
    return sub_1000637B8((uint64_t)v9, &qword_1010D0AB0);
  }
  UIView.Corner.radius.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v18);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v22 != enum case for UIView.Corner.Radius.value(_:)) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v11 + 96))(v14, v10);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(a3 + *(int *)(v17 + 20), 1, v18);
  if (!result)
  {
    char v24 = v14[8];
    [v29 scaledValueForValue:v30 compatibleWithTraitCollection:*(double *)v14];
    uint64_t v25 = v28;
    *int64_t v28 = v26;
    *((unsigned char *)v25 + 8) = v24;
    (*(void (**)(void *, uint64_t, uint64_t))(v11 + 104))(v25, v23, v10);
    return UIView.Corner.radius.setter();
  }
  return result;
}

uint64_t _s11MusicCoreUI7ArtworkV7CachingV23__derived_struct_equalsySbAE_AEtFZ_0(void *a1, void *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (v3 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v3 & 1) != 0))
  {
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t v6 = swift_weakLoadStrong();
    uint64_t v7 = v6;
    if (Strong)
    {
      swift_release();
      if (v7)
      {
        swift_release();
        if (Strong == v7) {
          return 1;
        }
      }
    }
    else
    {
      if (!v6) {
        return 1;
      }
      swift_release();
    }
    return 0;
  }
  return result;
}

uint64_t sub_100ADCCB8()
{
  return swift_deallocObject();
}

void _s11MusicCoreUI7ArtworkV4ViewC5coderAESgSo7NSCoderC_tcfc_0()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  BOOL v2 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  *(_OWORD *)BOOL v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  uint64_t v3 = OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView;
  *(void *)&v0[v3] = [objc_allocWithZone((Class)UIImageView) init];
  uint64_t v4 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100ADCDC4()
{
  return sub_10007426C(&qword_1010C8F28, (void (*)(uint64_t))type metadata accessor for Artwork.View);
}

uint64_t sub_100ADCE0C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10007426C(&qword_1010C8F58, (void (*)(uint64_t))type metadata accessor for Artwork);
  uint64_t result = sub_10007426C(&qword_1010C8F60, (void (*)(uint64_t))type metadata accessor for Artwork);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100ADCE90()
{
  return sub_10007426C(&qword_1010C8F68, (void (*)(uint64_t))type metadata accessor for Artwork);
}

uint64_t sub_100ADCED8(uint64_t a1)
{
  uint64_t result = sub_10007426C(&qword_1010C8FB0, (void (*)(uint64_t))type metadata accessor for Artwork.View);
  *(void *)(a1 + 8) = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for Artwork(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    if (v7)
    {
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      swift_weakCopyInit();
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
    }
    id v9 = (void **)(a2 + 3);
    uint64_t v10 = (void *)a2[4];
    if (v10)
    {
      uint64_t v11 = *v9;
      a1[3] = v11;
      a1[4] = v10;
      id v12 = v11;
      id v13 = v10;
    }
    else
    {
      *(_OWORD *)(a1 + 3) = *(_OWORD *)v9;
    }
    uint64_t v47 = a3;
    uint64_t v14 = *(int *)(a3 + 24);
    int v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)int v15 = *(void *)((char *)a2 + v14);
    v15[8] = *((unsigned char *)a2 + v14 + 8);
    uint64_t v17 = *(void **)((char *)a2 + v14 + 16);
    *((void *)v15 + 2) = v17;
    uint64_t v18 = type metadata accessor for Artwork.Decoration(0);
    uint64_t v19 = *(int *)(v18 + 20);
    __dst = &v15[v19];
    uint64_t v46 = v18;
    uint64_t v20 = &v16[v19];
    uint64_t v21 = type metadata accessor for UIView.Corner();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    id v24 = v17;
    if (v23(v20, 1, v21))
    {
      uint64_t v25 = sub_100063814(&qword_1010D0AB0);
      memcpy(__dst, v20, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
    }
    uint64_t v26 = *(int *)(v46 + 24);
    uint64_t v27 = *(void **)&v16[v26];
    *(void *)&v15[v26] = v27;
    *(void *)&v15[*(int *)(v46 + 28)] = *(void *)&v16[*(int *)(v46 + 28)];
    uint64_t v28 = *(int *)(v47 + 28);
    id v29 = (char *)a1 + v28;
    uint64_t v30 = (char *)a2 + v28;
    uint64_t v31 = *(void **)((char *)a2 + v28 + 24);
    id v32 = v27;
    if (v31)
    {
      unint64_t v33 = *(void **)v30;
      int64_t v34 = (void *)*((void *)v30 + 1);
      *(void *)id v29 = *(void *)v30;
      *((void *)v29 + 1) = v34;
      uint64_t v35 = (void *)*((void *)v30 + 2);
      *((void *)v29 + 2) = v35;
      *((void *)v29 + 3) = v31;
      *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
      id v36 = v33;
      id v37 = v34;
      id v38 = v35;
      id v39 = v31;
    }
    else
    {
      long long v40 = *((_OWORD *)v30 + 1);
      *(_OWORD *)id v29 = *(_OWORD *)v30;
      *((_OWORD *)v29 + 1) = v40;
      *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
    }
    uint64_t v41 = *(int *)(v47 + 32);
    id v42 = (_OWORD *)((char *)a1 + v41);
    uint64_t v43 = (_OWORD *)((char *)a2 + v41);
    *id v42 = *v43;
    *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)v43 + 9);
  }
  return a1;
}

uint64_t sub_100ADD1E0(uint64_t a1)
{
  return a1;
}

id *sub_100ADD214(id *a1)
{
  return a1;
}

uint64_t sub_100ADD248(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for Artwork(uint64_t a1, uint64_t a2, int *a3)
{
  if (*(void *)(a2 + 8))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_weakTakeInit();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + v6);
  *(void *)(v7 + 16) = *(void *)(a2 + v6 + 16);
  id v9 = (int *)type metadata accessor for Artwork.Decoration(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = (void *)(v7 + v10);
  id v12 = (const void *)(v8 + v10);
  uint64_t v13 = type metadata accessor for UIView.Corner();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = sub_100063814(&qword_1010D0AB0);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(void *)(v7 + v9[6]) = *(void *)(v8 + v9[6]);
  *(void *)(v7 + v9[7]) = *(void *)(v8 + v9[7]);
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = (_OWORD *)(a1 + v16);
  uint64_t v19 = (_OWORD *)(a2 + v16);
  long long v20 = v19[1];
  _OWORD *v18 = *v19;
  v18[1] = v20;
  v18[2] = v19[2];
  uint64_t v21 = (_OWORD *)(a1 + v17);
  uint64_t v22 = (_OWORD *)(a2 + v17);
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)((char *)v22 + 9);
  *uint64_t v21 = *v22;
  return a1;
}

uint64_t assignWithTake for Artwork(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  if (*(void *)(a1 + 8))
  {
    if (v6)
    {
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v6;
      swift_bridgeObjectRelease();
      swift_weakTakeAssign();
      goto LABEL_8;
    }
    sub_100ADD1E0(a1);
  }
  else if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_weakTakeInit();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = a2[2];
LABEL_8:
  if (*(void *)(a1 + 32))
  {
    if (a2[4])
    {
      uint64_t v7 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = a2[3];

      uint64_t v8 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = a2[4];

      goto LABEL_13;
    }
    sub_100ADD214((id *)(a1 + 24));
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
LABEL_13:
  uint64_t v37 = a3;
  id v38 = a2;
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  *(void *)uint64_t v10 = *(void *)((char *)a2 + v9);
  *(unsigned char *)(v10 + 8) = *((unsigned char *)a2 + v9 + 8);
  id v12 = *(void **)(a1 + v9 + 16);
  *(void *)(v10 + 16) = *(void *)((char *)a2 + v9 + 16);

  id v36 = (int *)type metadata accessor for Artwork.Decoration(0);
  uint64_t v13 = v36[5];
  uint64_t v14 = (void *)(v10 + v13);
  uint64_t v15 = &v11[v13];
  uint64_t v16 = type metadata accessor for UIView.Corner();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
LABEL_18:
    uint64_t v21 = sub_100063814(&qword_1010D0AB0);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, char *, uint64_t))(v17 + 40))(v14, v15, v16);
LABEL_19:
  uint64_t v22 = v36[6];
  uint64_t v23 = *(void **)(v10 + v22);
  *(void *)(v10 + v22) = *(void *)&v11[v22];

  *(void *)(v10 + v36[7]) = *(void *)&v11[v36[7]];
  uint64_t v24 = *(int *)(v37 + 28);
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (char *)v38 + v24;
  if (!*(void *)(a1 + v24 + 24))
  {
LABEL_23:
    long long v31 = *((_OWORD *)v26 + 1);
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    *(_OWORD *)(v25 + 16) = v31;
    goto LABEL_24;
  }
  if (!*((void *)v26 + 3))
  {
    sub_100ADD248(v25);
    goto LABEL_23;
  }
  uint64_t v27 = *(void **)v25;
  *(void *)uint64_t v25 = *(void *)v26;

  uint64_t v28 = *(void **)(v25 + 8);
  *(void *)(v25 + 8) = *((void *)v26 + 1);

  id v29 = *(void **)(v25 + 16);
  *(void *)(v25 + 16) = *((void *)v26 + 2);

  uint64_t v30 = *(void **)(v25 + 24);
  *(void *)(v25 + 24) = *((void *)v26 + 3);

LABEL_24:
  *(_OWORD *)(v25 + 32) = *((_OWORD *)v26 + 2);
  uint64_t v32 = *(int *)(v37 + 32);
  unint64_t v33 = (_OWORD *)(a1 + v32);
  int64_t v34 = (_OWORD *)((char *)v38 + v32);
  *unint64_t v33 = *v34;
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)((char *)v34 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Artwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100ADD7B4);
}

uint64_t sub_100ADD7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for Artwork.Decoration(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for Artwork(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100ADD884);
}

uint64_t sub_100ADD884(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Artwork.Decoration(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100ADD92C()
{
  return type metadata accessor for Artwork.View(0);
}

uint64_t destroy for Artwork.Caching()
{
  swift_bridgeObjectRelease();

  return swift_weakDestroy();
}

void *initializeWithCopy for Artwork.Caching(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  return a1;
}

void *assignWithCopy for Artwork.Caching(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_weakCopyAssign();
  return a1;
}

_OWORD *initializeWithTake for Artwork.Caching(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_weakTakeInit();
  return a1;
}

void *assignWithTake for Artwork.Caching(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  swift_weakTakeAssign();
  return a1;
}

uint64_t type metadata accessor for Artwork.Caching.Reference()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for Artwork.Content(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  unint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t assignWithCopy for Artwork.Content(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for Artwork.Content(uint64_t a1, _OWORD *a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for Artwork.Content()
{
  return &type metadata for Artwork.Content;
}

void *initializeBufferWithCopyOfBuffer for Artwork.Decoration(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = (void *)a2[2];
    *(void *)(a1 + 16) = v7;
    uint64_t v8 = a3[5];
    id v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UIView.Corner();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    id v14 = v7;
    if (v13(v10, 1, v11))
    {
      uint64_t v15 = sub_100063814(&qword_1010D0AB0);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v17 = a3[6];
    uint64_t v18 = a3[7];
    int v19 = *(void **)((char *)a2 + v17);
    *(void *)((char *)v4 + v17) = v19;
    *(void *)((char *)v4 + v18) = *(uint64_t *)((char *)a2 + v18);
    id v20 = v19;
  }
  return v4;
}

uint64_t assignWithCopy for Artwork.Decoration(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = (void *)a2[2];
  uint64_t v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  id v9 = v7;

  uint64_t v10 = a3[5];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UIView.Corner();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_100063814(&qword_1010D0AB0);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v19 = a3[6];
  id v20 = *(void **)((char *)a2 + v19);
  uint64_t v21 = *(void **)(a1 + v19);
  *(void *)(a1 + v19) = v20;
  id v22 = v20;

  *(void *)(a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for Artwork.Decoration(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UIView.Corner();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100063814(&qword_1010D0AB0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for Artwork.Decoration(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UIView.Corner();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100063814(&qword_1010D0AB0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  int v17 = *(void **)(a1 + v16);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);

  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100ADE1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100063814(&qword_1010D0AB0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_100ADE2C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100063814(&qword_1010D0AB0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

__n128 initializeWithCopy for Artwork.Size(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Artwork.Size(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Artwork.Size(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Artwork.Size()
{
  return &type metadata for Artwork.Size;
}

uint64_t sub_100ADE43C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Artwork.Size.Dimension()
{
  return &type metadata for Artwork.Size.Dimension;
}

uint64_t sub_100ADE454(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010D0AB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100ADE4BC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100ADE4F4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100ADE52C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100ADE574()
{
  swift_release();

  return swift_deallocObject();
}

_OWORD *sub_100ADE5C4(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  swift_weakTakeInit();
  return a2;
}

void *Artwork.Placeholder.tint.getter()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

double Radiosity.Specs.Radiosity.blurRadius.getter()
{
  return *(double *)(v0 + 32);
}

void Radiosity.Specs.Radiosity.blurRadius.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

id sub_100ADE644()
{
  id result = [self tertiaryLabelColor];
  qword_1010C9250 = (uint64_t)result;
  return result;
}

__n128 static Artwork.Placeholder.with(_:)@<Q0>(void (*a1)(long long *)@<X0>, uint64_t a2@<X8>)
{
  id v4 = [self secondarySystemFillColor];
  if (qword_1010C8370 != -1) {
    swift_once();
  }
  int v5 = (void *)qword_1010C9250;
  uint64_t v6 = self;
  id v7 = v5;
  *(void *)&long long v11 = v4;
  *((void *)&v11 + 1) = v5;
  uint64_t v12 = 0;
  id v13 = [v6 configurationWithWeight:4];
  long long v14 = xmmword_100E37710;
  a1(&v11);
  uint64_t v8 = v12;
  id v9 = v13;
  __n128 result = (__n128)v14;
  *(_OWORD *)a2 = v11;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v9;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

id Artwork.Placeholder.preferredSymbolConfiguration(in:)(double a1, double a2)
{
  if (a1 > a2) {
    double v3 = a1;
  }
  else {
    double v3 = a2;
  }
  if (a2 < a1) {
    a1 = a2;
  }
  if (v3 * *(double *)(v2 + 32) >= a1) {
    double v4 = a1;
  }
  else {
    double v4 = v3 * *(double *)(v2 + 32);
  }
  int v5 = *(void **)(v2 + 24);
  id v6 = [self configurationWithPointSize:v4];
  id v7 = [v5 configurationByApplyingConfiguration:v6];

  return v7;
}

uint64_t Artwork.Placeholder.image(with:graphicsFormat:)(uint64_t a1, double a2, double a3)
{
  double v4 = (_OWORD *)v3;
  id v5 = [objc_allocWithZone((Class)UIGraphicsImageRenderer) initWithSize:a1 format:a2];
  uint64_t v16 = 0;
  sub_10003CABC(v3, (uint64_t)&v19, &qword_1010C9268);
  sub_10003CABC(v3 + 8, (uint64_t)&v18, &qword_1010C9268);
  sub_10003CABC(v3 + 16, (uint64_t)&v17, &qword_1010C9270);
  id v6 = *(void **)(v3 + 24);
  uint64_t v7 = swift_allocObject();
  long long v8 = v4[1];
  *(_OWORD *)(v7 + 16) = *v4;
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = v4[2];
  *(void *)(v7 + 64) = &v16;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100ADED64;
  *(void *)(v9 + 24) = v7;
  v15[4] = sub_10001A2C4;
  _OWORD v15[5] = v9;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  void v15[2] = sub_10001A278;
  uint64_t v15[3] = &unk_101009A20;
  uint64_t v10 = _Block_copy(v15);
  sub_10003CB4C(&v19);
  sub_10003CB4C(&v18);
  sub_10003CB4C(&v17);
  id v11 = v6;
  swift_retain();
  swift_release();
  id v12 = [v5 imageWithActions:v10];

  _Block_release(v10);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = v16;
    swift_release();
    return v14;
  }
  return result;
}

void sub_100ADEA38(void *a1, uint64_t a2, void **a3)
{
  id v6 = [a1 format];
  [v6 bounds];
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;

  id v15 = [self secondarySystemBackgroundColor];
  [v15 setFill];

  uint64_t v16 = self;
  id v17 = [v16 bezierPathWithRect:v8, v10, v12, v14];
  [v17 fill];

  if (*(void *)a2)
  {
    id v18 = *(id *)a2;
    [v18 setFill];
    id v19 = [v16 bezierPathWithRect:v8, v10, v12, v14];
    [v19 fill];
  }
  if (v12 > v14) {
    double v20 = v12;
  }
  else {
    double v20 = v14;
  }
  if (v14 >= v12) {
    double v21 = v12;
  }
  else {
    double v21 = v14;
  }
  double v22 = v20 * *(double *)(a2 + 32);
  if (v22 >= v21) {
    double v23 = v21;
  }
  else {
    double v23 = v22;
  }
  uint64_t v24 = *(void **)(a2 + 24);
  id v25 = [self configurationWithPointSize:v23];
  id v26 = [v24 configurationByApplyingConfiguration:v25];

  sub_10003CABC(a2 + 16, (uint64_t)v37, &qword_1010C9270);
  sub_10003CABC((uint64_t)v37, (uint64_t)&v38, &qword_1010C9270);
  if (v38)
  {
    id v27 = [v38 imageWithSymbolConfiguration:v26];
    if (v27)
    {
      uint64_t v28 = v27;
      id v29 = *(void **)(a2 + 8);
      if (v29)
      {
        id v30 = v29;
        id v31 = [v28 imageWithTintColor:v30];

        uint64_t v28 = v31;
      }
      [v28 size];
      uint64_t v33 = v32;
      id v34 = [self mainScreen];
      [v34 scale];

      CGRect.centeringAlong(axes:bounds:scale:)();
      [v28 drawInRect:v33];
    }
  }
  id v35 = [a1 currentImage];

  id v36 = *a3;
  *a3 = v35;
}

uint64_t sub_100ADED5C()
{
  return sub_10000FC78();
}

void sub_100ADED64(void *a1)
{
  sub_100ADEA38(a1, v1 + 16, *(void ***)(v1 + 64));
}

uint64_t sub_100ADED70()
{
  return swift_deallocObject();
}

char *Artwork.Placeholder.View.__allocating_init(configuration:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return Artwork.Placeholder.View.init(configuration:)(a1);
}

void Artwork.Placeholder.View.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView;
  *(void *)&v0[v1] = [objc_allocWithZone((Class)UIImageView) init];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id Artwork.Placeholder.View.typedConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess();
  double v4 = *(void **)v3;
  id v5 = *(void **)(v3 + 8);
  id v6 = *(void **)(v3 + 16);
  id v11 = *(id *)(v3 + 24);
  *(void *)a1 = *(void *)v3;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
  id v7 = v4;
  id v8 = v5;
  id v9 = v6;

  return v11;
}

void (*Artwork.Placeholder.View.typedConfiguration.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0xC8uLL);
  *a1 = v3;
  v3[24] = v1;
  uint64_t v4 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess();
  id v5 = *(void **)v4;
  id v6 = *(void **)(v4 + 8);
  id v7 = *(void **)(v4 + 16);
  id v8 = *(void **)(v4 + 24);
  v3[6] = *(void *)v4;
  v3[7] = v6;
  v3 += 6;
  v3[2] = v7;
  v3[3] = v8;
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v4 + 32);
  id v9 = v7;
  id v10 = v8;
  id v11 = v5;
  id v12 = v6;
  return sub_100ADF014;
}

void sub_100ADF014(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (_OWORD *)(*a1 + 48);
  long long v4 = *(_OWORD *)(*a1 + 64);
  if (a2)
  {
    *(_OWORD *)uint64_t v2 = *v3;
    *(_OWORD *)(v2 + 16) = v4;
    *(_OWORD *)(v2 + 32) = v3[2];
    sub_10003CABC(v2, v2 + 168, &qword_1010C9268);
    sub_10003CABC(v2 + 8, v2 + 176, &qword_1010C9268);
    sub_10003CABC(v2 + 16, v2 + 184, &qword_1010C9270);
    id v5 = *(void **)(v2 + 24);
    sub_10003CB4C((id *)(v2 + 168));
    sub_10003CB4C((id *)(v2 + 176));
    sub_10003CB4C((id *)(v2 + 184));
    id v6 = v5;
    Artwork.Placeholder.View.typedConfiguration.setter(v2);
    id v7 = *(void **)(v2 + 48);
    id v8 = *(void **)(v2 + 56);
    id v9 = *(void **)(v2 + 64);
  }
  else
  {
    *(_OWORD *)(v2 + 96) = *v3;
    *(_OWORD *)(v2 + 112) = v4;
    *(_OWORD *)(v2 + 128) = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter(v2 + 96);
  }

  free((void *)v2);
}

char *sub_100ADF1BC(_OWORD *a1)
{
  long long v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  void v5[2] = a1[2];
  id v3 = objc_allocWithZone(v1);
  return Artwork.Placeholder.View.init(configuration:)((uint64_t)v5);
}

id sub_100ADF204@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess();
  long long v4 = *(void **)v3;
  id v11 = *(id *)(v3 + 8);
  id v5 = *(void **)(v3 + 16);
  id v6 = *(void **)(v3 + 24);
  *(void *)a1 = *(void *)v3;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
  id v7 = v5;
  id v8 = v6;
  id v9 = v4;

  return v11;
}

void sub_100ADF290(_OWORD *a1)
{
  long long v1 = a1[1];
  v2[0] = *a1;
  v2[1] = v1;
  _OWORD v2[2] = a1[2];
  Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)v2);
}

void (*sub_100ADF2C4(void *a1))(void *a1)
{
  long long v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Artwork.Placeholder.View.typedConfiguration.modify(v2);
  return sub_1005D7350;
}

id sub_100ADF31C@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = (uint64_t)&type metadata for Artwork.Placeholder;
  a1[4] = sub_100074760();
  uint64_t v3 = swift_allocObject();
  *a1 = v3;
  uint64_t v4 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess();
  id v5 = *(void **)v4;
  id v12 = *(id *)(v4 + 8);
  id v6 = *(void **)(v4 + 16);
  id v7 = *(void **)(v4 + 24);
  *(void *)(v3 + 16) = *(void *)v4;
  *(void *)(v3 + 24) = v12;
  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 40) = v7;
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v4 + 32);
  id v8 = v6;
  id v9 = v7;
  id v10 = v5;

  return v12;
}

void (*sub_100ADF3D8(void *a1))(_OWORD **a1, char a2)
{
  uint64_t v3 = malloc(0x128uLL);
  *a1 = v3;
  v3[36] = v1;
  v3[26] = &type metadata for Artwork.Placeholder;
  v3[27] = sub_100074760();
  uint64_t v4 = swift_allocObject();
  v3[23] = v4;
  uint64_t v5 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess();
  id v6 = *(void **)v5;
  id v7 = *(void **)(v5 + 8);
  id v8 = *(void **)(v5 + 16);
  id v9 = *(void **)(v5 + 24);
  *(void *)(v4 + 16) = *(void *)v5;
  *(void *)(v4 + 24) = v7;
  *(void *)(v4 + 32) = v8;
  *(void *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v5 + 32);
  id v10 = v8;
  id v11 = v9;
  id v12 = v6;
  id v13 = v7;
  return sub_100ADF4BC;
}

void sub_100ADF4BC(_OWORD **a1, char a2)
{
  long long v2 = *a1;
  uint64_t v3 = *a1 + 6;
  uint64_t v4 = (uint64_t)(*a1 + 9);
  uint64_t v5 = (uint64_t)*a1 + 184;
  if (a2)
  {
    sub_1000688E4((uint64_t)*a1 + 184, (uint64_t)(v2 + 14));
    sub_1000688E4((uint64_t)(v2 + 14), v4);
    sub_100063814(&qword_1010C9220);
    swift_dynamicCast();
    long long v6 = v3[1];
    *long long v2 = *v3;
    v2[1] = v6;
    _OWORD v2[2] = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)v2);
    sub_1000760E4((uint64_t)(v2 + 14));
  }
  else
  {
    sub_1000688E4((uint64_t)*a1 + 184, v4);
    sub_100063814(&qword_1010C9220);
    swift_dynamicCast();
    long long v7 = v3[1];
    _OWORD v2[3] = *v3;
    v2[4] = v7;
    v2[5] = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)(v2 + 3));
  }
  sub_1000760E4(v5);

  free(v2);
}

char *sub_100ADF5DC()
{
  long long v1 = v0[1];
  long long v8 = *v0;
  v9[0] = v1;
  v9[1] = v0[2];
  sub_10003CABC((uint64_t)&v8, (uint64_t)&v10, &qword_1010C9268);
  sub_10003CABC((uint64_t)&v8 + 8, (uint64_t)&v11, &qword_1010C9268);
  sub_10003CABC((uint64_t)v9, (uint64_t)&v12, &qword_1010C9270);
  long long v2 = (void *)*((void *)&v9[0] + 1);
  id v3 = objc_allocWithZone((Class)type metadata accessor for Artwork.Placeholder.View());
  sub_10003CB4C(&v10);
  sub_10003CB4C(&v11);
  sub_10003CB4C(&v12);
  id v4 = v2;
  uint64_t v5 = Artwork.Placeholder.View.init(configuration:)((uint64_t)&v8);
  sub_100AE3504(&qword_1010C9238, v6, (void (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View);
  return v5;
}

id sub_100ADF6D0@<X0>(uint64_t a1@<X8>)
{
  long long v2 = *(void **)v1;
  id v9 = *(id *)(v1 + 8);
  id v3 = *(void **)(v1 + 16);
  id v4 = *(void **)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  id v5 = v3;
  id v6 = v4;
  id v7 = v2;

  return v9;
}

BOOL sub_100ADF738(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  _OWORD v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return _s11MusicCoreUI7ArtworkV11PlaceholderV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v7, (uint64_t)v8);
}

double sub_100ADF780()
{
  uint64_t v0 = self;
  id v1 = [v0 blackColor];
  id v2 = [v1 colorWithAlphaComponent:0.1];

  id v3 = [v0 whiteColor];
  id v4 = [v3 colorWithAlphaComponent:0.12];

  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [self _systemImageNamed:v5];

  id v7 = [self configurationWithWeight:3];
  static Artwork.Placeholder.nowPlaying = (uint64_t)v2;
  unk_10112BEF0 = v4;
  qword_10112BEF8 = (uint64_t)v6;
  unk_10112BF00 = v7;
  double result = 0.46;
  xmmword_10112BF08 = xmmword_100E52530;
  return result;
}

uint64_t *Artwork.Placeholder.nowPlaying.unsafeMutableAddressor()
{
  if (qword_1010C8378 != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.nowPlaying;
}

id static Artwork.Placeholder.nowPlaying.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1010C8378 != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.nowPlaying;
  id v3 = (void *)unk_10112BEF0;
  NSString v5 = (void *)qword_10112BEF8;
  uint64_t v4 = unk_10112BF00;
  id v10 = (id)unk_10112BF00;
  *(void *)a1 = static Artwork.Placeholder.nowPlaying;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10112BF08;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

id static Artwork.Placeholder.miniPlayer.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1010C8380 != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.miniPlayer;
  id v3 = (void *)unk_10112BF20;
  NSString v5 = (void *)qword_10112BF28;
  uint64_t v4 = unk_10112BF30;
  id v10 = (id)unk_10112BF30;
  *(void *)a1 = static Artwork.Placeholder.miniPlayer;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10112BF38;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

void static Artwork.Placeholder.device(representing:basedOn:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v6 = *(void **)a2;
  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a2 + 24);
  id v9 = self;
  id v10 = v7;
  id v11 = v8;
  id v12 = v6;
  id v13 = [v9 _symbolImageForRoute:a1];
  double v14 = v13;
  if (v7)
  {
    uint64_t v32 = v6;
    id v15 = self;
    id v16 = v10;
    id v17 = v14;
    id v18 = [v15 secondaryLabelColor];
    sub_100057778(0, (unint64_t *)&qword_1010D0F70);
    char v19 = static NSObject.== infix(_:_:)();

    if (v19)
    {

      id v20 = [v15 labelColor];
    }
    else
    {
      id v24 = v16;
      id v25 = [v15 tertiaryLabelColor];
      char v26 = static NSObject.== infix(_:_:)();

      if (v26)
      {

        id v20 = [v15 secondaryLabelColor];
      }
      else
      {
        id v23 = v24;
        id v27 = [v15 quaternaryLabelColor];
        char v28 = static NSObject.== infix(_:_:)();

        if ((v28 & 1) == 0)
        {
LABEL_12:
          id v6 = v32;
          goto LABEL_13;
        }

        id v20 = [v15 tertiaryLabelColor];
      }
    }
    id v23 = v20;
    goto LABEL_12;
  }
  uint64_t v21 = qword_1010C8370;
  id v22 = v13;
  if (v21 != -1) {
    swift_once();
  }
  id v23 = (id)qword_1010C9250;
LABEL_13:
  uint64_t v29 = *(void *)(a2 + 40);
  id v30 = [self configurationWithHierarchicalColor:v23];
  id v31 = [v11 configurationByApplyingConfiguration:v30];

  *a3 = v6;
  a3[1] = v7;
  a3[2] = v14;
  a3[3] = v31;
  a3[4] = 0x3FE0000000000000;
  a3[5] = v29;
}

id sub_100ADFCF4()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [self configurationWithWeight:3];
  id v3 = [self secondarySystemFillColor];
  if (qword_1010C8370 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_1010C9250;
  static Artwork.Placeholder.music = (uint64_t)v3;
  unk_10112BF50 = qword_1010C9250;
  qword_10112BF58 = (uint64_t)v1;
  unk_10112BF60 = v2;
  xmmword_10112BF68 = xmmword_100E52540;

  return v4;
}

uint64_t *Artwork.Placeholder.music.unsafeMutableAddressor()
{
  if (qword_1010C8388 != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.music;
}

id static Artwork.Placeholder.music.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1010C8388 != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.music;
  id v3 = (void *)unk_10112BF50;
  NSString v5 = (void *)qword_10112BF58;
  uint64_t v4 = unk_10112BF60;
  id v10 = (id)unk_10112BF60;
  *(void *)a1 = static Artwork.Placeholder.music;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10112BF68;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

id sub_100ADFEFC()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [self configurationWithWeight:5];
  id v3 = [self secondarySystemFillColor];
  if (qword_1010C8370 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_1010C9250;
  static Artwork.Placeholder.musicVideo = (uint64_t)v3;
  unk_10112BF80 = qword_1010C9250;
  qword_10112BF88 = (uint64_t)v1;
  unk_10112BF90 = v2;
  xmmword_10112BF98 = xmmword_100E37710;

  return v4;
}

uint64_t *Artwork.Placeholder.musicVideo.unsafeMutableAddressor()
{
  if (qword_1010C8390 != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.musicVideo;
}

id static Artwork.Placeholder.musicVideo.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1010C8390 != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.musicVideo;
  id v3 = (void *)unk_10112BF80;
  NSString v5 = (void *)qword_10112BF88;
  uint64_t v4 = unk_10112BF90;
  id v10 = (id)unk_10112BF90;
  *(void *)a1 = static Artwork.Placeholder.musicVideo;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10112BF98;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

id sub_100AE0114()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [self configurationWithWeight:5];
  id v3 = [self secondarySystemFillColor];
  if (qword_1010C8370 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_1010C9250;
  static Artwork.Placeholder.tv = (uint64_t)v3;
  unk_10112BFB0 = qword_1010C9250;
  qword_10112BFB8 = (uint64_t)v1;
  unk_10112BFC0 = v2;
  xmmword_10112BFC8 = xmmword_100E37710;

  return v4;
}

uint64_t *Artwork.Placeholder.tv.unsafeMutableAddressor()
{
  if (qword_1010C8398 != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.tv;
}

id static Artwork.Placeholder.tv.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1010C8398 != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.tv;
  id v3 = (void *)unk_10112BFB0;
  NSString v5 = (void *)qword_10112BFB8;
  uint64_t v4 = unk_10112BFC0;
  id v10 = (id)unk_10112BFC0;
  *(void *)a1 = static Artwork.Placeholder.tv;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10112BFC8;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

id sub_100AE0314()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [self configurationWithWeight:4];
  id v3 = [self secondarySystemFillColor];
  if (qword_1010C8370 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_1010C9250;
  static Artwork.Placeholder.microphone = (uint64_t)v3;
  unk_10112BFE0 = qword_1010C9250;
  qword_10112BFE8 = (uint64_t)v1;
  unk_10112BFF0 = v2;
  xmmword_10112BFF8 = xmmword_100E52530;

  return v4;
}

uint64_t *Artwork.Placeholder.microphone.unsafeMutableAddressor()
{
  if (qword_1010C83A0 != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.microphone;
}

id static Artwork.Placeholder.microphone.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1010C83A0 != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.microphone;
  id v3 = (void *)unk_10112BFE0;
  NSString v5 = (void *)qword_10112BFE8;
  uint64_t v4 = unk_10112BFF0;
  id v10 = (id)unk_10112BFF0;
  *(void *)a1 = static Artwork.Placeholder.microphone;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10112BFF8;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

id sub_100AE0524()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [self configurationWithWeight:3];
  id v3 = [self secondarySystemFillColor];
  if (qword_1010C8370 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_1010C9250;
  static Artwork.Placeholder.person = (uint64_t)v3;
  unk_10112C010 = qword_1010C9250;
  qword_10112C018 = (uint64_t)v1;
  unk_10112C020 = v2;
  xmmword_10112C028 = xmmword_100E37710;

  return v4;
}

uint64_t *Artwork.Placeholder.person.unsafeMutableAddressor()
{
  if (qword_1010C83A8 != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.person;
}

id static Artwork.Placeholder.person.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1010C83A8 != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.person;
  id v3 = (void *)unk_10112C010;
  NSString v5 = (void *)qword_10112C018;
  uint64_t v4 = unk_10112C020;
  id v10 = (id)unk_10112C020;
  *(void *)a1 = static Artwork.Placeholder.person;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10112C028;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

double sub_100AE0738()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [self configurationWithWeight:3];
  static Artwork.Placeholder.newPlaylist = (uint64_t)[self secondarySystemFillColor];
  unk_10112C040 = 0;
  qword_10112C048 = (uint64_t)v1;
  unk_10112C050 = v2;
  double result = 0.5;
  xmmword_10112C058 = xmmword_100E37710;
  return result;
}

uint64_t *Artwork.Placeholder.newPlaylist.unsafeMutableAddressor()
{
  if (qword_1010C83B0 != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.newPlaylist;
}

id static Artwork.Placeholder.newPlaylist.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1010C83B0 != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.newPlaylist;
  id v3 = (void *)unk_10112C040;
  NSString v5 = (void *)qword_10112C048;
  uint64_t v4 = unk_10112C050;
  id v10 = (id)unk_10112C050;
  *(void *)a1 = static Artwork.Placeholder.newPlaylist;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10112C058;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

double static Artwork.Placeholder.playlist(ofType:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100063814(&qword_1010C9288);
  __chkstk_darwin();
  NSString v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Playlist.Variant();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  id v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MPModelPlaylistType.variant.getter(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Playlist.Variant.regular(_:), v6);
    sub_100AE2D6C((uint64_t)v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  }
  double v10 = sub_100AE2DCC((uint64_t)v9, (uint64_t)v13);
  (*(void (**)(char *, uint64_t, double))(v7 + 8))(v9, v6, v10);
  long long v11 = v13[1];
  *a2 = v13[0];
  a2[1] = v11;
  double result = *(double *)&v14;
  a2[2] = v14;
  return result;
}

double static Artwork.Placeholder.playlist(withVariant:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100AE2DCC(a1, (uint64_t)v5);
  long long v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  double result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

id sub_100AE0AE0()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [self configurationWithWeight:4];
  id v3 = [self secondarySystemFillColor];
  if (qword_1010C8370 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_1010C9250;
  static Artwork.Placeholder.radio = (uint64_t)v3;
  unk_10112C070 = qword_1010C9250;
  qword_10112C078 = (uint64_t)v1;
  unk_10112C080 = v2;
  xmmword_10112C088 = xmmword_100E52540;

  return v4;
}

uint64_t *Artwork.Placeholder.radio.unsafeMutableAddressor()
{
  if (qword_1010C83B8 != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.radio;
}

id static Artwork.Placeholder.radio.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1010C83B8 != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.radio;
  id v3 = (void *)unk_10112C070;
  NSString v5 = (void *)qword_10112C078;
  uint64_t v4 = unk_10112C080;
  id v10 = (id)unk_10112C080;
  *(void *)a1 = static Artwork.Placeholder.radio;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10112C088;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

__n128 Artwork.Placeholder.withSolidBackgroundColor()@<Q0>(__n128 *a1@<X8>)
{
  id v2 = v1;
  uint64_t v4 = (void *)v1[1].n128_u64[0];
  NSString v5 = (void *)v1[1].n128_u64[1];
  id v6 = (id)v1->n128_u64[0];
  id v7 = (void *)v1->n128_u64[1];
  if (v1->n128_u64[0])
  {
    id v8 = self;
    id v22 = v4;
    id v9 = v4;
    id v10 = v5;
    id v11 = v6;
    id v12 = v7;
    id v13 = [v8 secondarySystemFillColor];
    sub_100057778(0, (unint64_t *)&qword_1010D0F70);
    char v14 = static NSObject.== infix(_:_:)();

    if (v14)
    {
      if (qword_1010C83C0 != -1) {
        swift_once();
      }
      id v6 = (id)qword_1010C9258;

      uint64_t v4 = v22;
    }
    else
    {
      id v18 = v11;
      id v19 = [v8 tertiarySystemFillColor];
      char v20 = static NSObject.== infix(_:_:)();

      uint64_t v4 = v22;
      if (v20)
      {
        if (qword_1010C83C8 != -1) {
          swift_once();
        }
        id v6 = (id)qword_1010C9260;
      }
    }
  }
  else
  {
    id v15 = v4;
    id v16 = v5;
    id v17 = v7;
  }
  a1->n128_u64[0] = (unint64_t)v6;
  a1->n128_u64[1] = (unint64_t)v7;
  a1[1].n128_u64[0] = (unint64_t)v4;
  a1[1].n128_u64[1] = (unint64_t)v5;
  __n128 result = v2[2];
  a1[2] = result;
  return result;
}

id Artwork.Placeholder.withBackground(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = *(void **)(v2 + 8);
  uint64_t v4 = *(void **)(v2 + 16);
  id v9 = *(id *)(v2 + 24);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v9;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  id v5 = a1;
  id v6 = v3;
  id v7 = v4;

  return v9;
}

id Artwork.Placeholder.withScaleFactor(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  id v3 = *(void **)v2;
  uint64_t v4 = *(void **)(v2 + 8);
  id v5 = *(void **)(v2 + 16);
  id v11 = *(id *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 40);
  *(void *)a1 = *(void *)v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v11;
  *(double *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = v6;
  id v7 = v3;
  id v8 = v4;
  id v9 = v5;

  return v11;
}

id Artwork.Placeholder.withTint(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)v2;
  id v5 = *(void **)(v2 + 16);
  id v10 = *(id *)(v2 + 24);
  *(void *)a2 = *(void *)v2;
  *(void *)(a2 + 8) = a1;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v10;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  id v6 = v4;
  id v7 = a1;
  id v8 = v5;

  return v10;
}

uint64_t sub_100AE0FF0(uint64_t a1)
{
  return sub_100011EEC(a1, (uint64_t)sub_100AE1018, (uint64_t)&unk_101009B00, &qword_1010C9258);
}

id sub_100AE1018(void *a1)
{
  return sub_100AE1068(a1, 38, 41, 233, 234);
}

uint64_t sub_100AE102C(uint64_t a1)
{
  return sub_100011EEC(a1, (uint64_t)sub_100AE1054, (uint64_t)&unk_101009B28, &qword_1010C9260);
}

id sub_100AE1054(void *a1)
{
  return sub_100AE1068(a1, 44, 46, 245, 245);
}

id sub_100AE1068(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = [a1 userInterfaceStyle];
  sub_100057778(0, (unint64_t *)&qword_1010D0F70);
  if (v9 == (id)2)
  {
    uint64_t v10 = a2;
    uint64_t v11 = a2;
    uint64_t v12 = a3;
  }
  else
  {
    uint64_t v10 = a4;
    uint64_t v11 = a4;
    uint64_t v12 = a5;
  }
  return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v10, v11, v12, 1.0);
}

double sub_100AE1240()
{
  sub_100063814(&qword_1010CF870);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100E251D0;
  *(void *)(v1 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v1 + 40) = v2;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v4 = self;
  id v5 = [v4 propertySetWithProperties:isa];

  LODWORD(isa) = [v0 hasLoadedValuesForPropertySet:v5];
  double v6 = 1.0;
  if (isa && [v0 hasVideo])
  {
    if (qword_1010C83D0 != -1) {
      swift_once();
    }
    double v6 = *(double *)&static Artwork.Size.musicVideoAspectRatio;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_100E251D0;
    *(void *)(v7 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v7 + 40) = v8;
    Class v9 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v10 = [v4 propertySetWithProperties:v9];

    unsigned int v11 = [v0 hasLoadedValuesForPropertySet:v10];
    if (v11)
    {
      id v12 = [v0 artworkCatalog];
      if (v12)
      {
        id v13 = v12;
        double v14 = COERCE_DOUBLE(MPArtworkCatalog.expectedRatio.getter());
        if ((v15 & 1) == 0 && v14 < 1.0)
        {
          if (qword_1010C83D8 != -1) {
            swift_once();
          }
          double v6 = *(double *)&static Artwork.Size.verticalMusicVideoAspectRatio;
        }
      }
    }
  }
  return v6;
}

uint64_t *Artwork.Size.musicVideoAspectRatio.unsafeMutableAddressor()
{
  if (qword_1010C83D0 != -1) {
    swift_once();
  }
  return &static Artwork.Size.musicVideoAspectRatio;
}

uint64_t *Artwork.Size.verticalMusicVideoAspectRatio.unsafeMutableAddressor()
{
  if (qword_1010C83D8 != -1) {
    swift_once();
  }
  return &static Artwork.Size.verticalMusicVideoAspectRatio;
}

id static MPModelPlaylist.artworkPlaceholderImage(for:)()
{
  return sub_100AE3128();
}

id MPModelPlaylist.artworkPlaceholderImage.getter()
{
  if ([v0 hasLoadedValueForKey:MPModelPropertyPlaylistType])
  {
    [v0 type];
    return sub_100AE3128();
  }
  else
  {
    NSString v2 = String._bridgeToObjectiveC()();
    id v3 = [self _systemImageNamed:v2];

    return v3;
  }
}

void sub_100AE15E8()
{
  static Artwork.Size.musicVideoAspectRatio = 0x3FFC71C71C71C71CLL;
}

double static Artwork.Size.musicVideoAspectRatio.getter()
{
  return sub_100AE17DC(&qword_1010C83D0, (uint64_t)&static Artwork.Size.musicVideoAspectRatio);
}

void sub_100AE1628()
{
  static Artwork.Size.verticalMusicVideoAspectRatio = 0x3FE2000000000000;
}

double static Artwork.Size.verticalMusicVideoAspectRatio.getter()
{
  return sub_100AE17DC(&qword_1010C83D8, (uint64_t)&static Artwork.Size.verticalMusicVideoAspectRatio);
}

double sub_100AE165C(uint64_t a1)
{
  return sub_100AE1724(a1, &qword_1010C83D0, (double *)&static Artwork.Size.musicVideoAspectRatio, &static Artwork.Size.videoAspectRatio);
}

void *Artwork.Size.videoAspectRatio.unsafeMutableAddressor()
{
  if (qword_1010C83E0 != -1) {
    swift_once();
  }
  return &static Artwork.Size.videoAspectRatio;
}

double static Artwork.Size.videoAspectRatio.getter()
{
  return sub_100AE17DC(&qword_1010C83E0, (uint64_t)&static Artwork.Size.videoAspectRatio);
}

double sub_100AE16F8(uint64_t a1)
{
  return sub_100AE1724(a1, &qword_1010C83D8, (double *)&static Artwork.Size.verticalMusicVideoAspectRatio, &static Artwork.Size.verticalVideoAspectRatio);
}

double sub_100AE1724(uint64_t a1, void *a2, double *a3, void *a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  double result = *a3;
  *a4 = *(void *)a3;
  return result;
}

void *Artwork.Size.verticalVideoAspectRatio.unsafeMutableAddressor()
{
  if (qword_1010C83E8 != -1) {
    swift_once();
  }
  return &static Artwork.Size.verticalVideoAspectRatio;
}

double static Artwork.Size.verticalVideoAspectRatio.getter()
{
  return sub_100AE17DC(&qword_1010C83E8, (uint64_t)&static Artwork.Size.verticalVideoAspectRatio);
}

double sub_100AE17DC(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

void MPModelObject.artworkPlaceholder.getter(void *a1@<X8>)
{
  sub_100063814(&qword_1010C9288);
  __chkstk_darwin();
  uint64_t v4 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Playlist.Variant();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v9 = swift_dynamicCastObjCClass();
  if (v9)
  {
    id v10 = (void *)v9;
    id v11 = v1;
    id v12 = [v10 anyObject];
    if (v12)
    {
      id v13 = v12;
      MPModelObject.artworkPlaceholder.getter(v38);

LABEL_23:
      uint64_t v22 = v38[4];
      uint64_t v23 = v38[5];
      uint64_t v21 = (void *)v38[2];
      id v25 = (id)v38[3];
      id v18 = (void *)v38[0];
      id v19 = (void *)v38[1];
      goto LABEL_24;
    }
    if (qword_1010C8388 != -1) {
      swift_once();
    }
    id v18 = (void *)static Artwork.Placeholder.music;
    id v19 = (void *)unk_10112BF50;
    uint64_t v21 = (void *)qword_10112BF58;
    char v20 = (void *)unk_10112BF60;
    uint64_t v23 = *((void *)&xmmword_10112BF68 + 1);
    uint64_t v22 = xmmword_10112BF68;
    id v24 = (id)qword_10112BF58;
    id v25 = v20;
    id v26 = v18;
    id v27 = v19;
  }
  else
  {
    self;
    uint64_t v14 = swift_dynamicCastObjCClass();
    if (v14)
    {
      char v15 = (void *)v14;
      uint64_t v16 = MPModelPropertyPlaylistType;
      id v17 = v1;
      if ([v15 hasLoadedValueForKey:v16])
      {
        MPModelPlaylistType.variant.getter((uint64_t)[v15 type], (uint64_t)v4);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
        {
          (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for Playlist.Variant.regular(_:), v5);
          sub_100AE2D6C((uint64_t)v4);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
        }
        double v37 = sub_100AE2DCC((uint64_t)v8, (uint64_t)v38);
        (*(void (**)(char *, uint64_t, double))(v6 + 8))(v8, v5, v37);

        goto LABEL_23;
      }
      if (qword_1010C8388 != -1) {
        swift_once();
      }
      id v18 = (void *)static Artwork.Placeholder.music;
      id v19 = (void *)unk_10112BF50;
      uint64_t v21 = (void *)qword_10112BF58;
      uint64_t v33 = (void *)unk_10112BF60;
      uint64_t v23 = *((void *)&xmmword_10112BF68 + 1);
      uint64_t v22 = xmmword_10112BF68;
      id v34 = (id)qword_10112BF58;
      id v25 = v33;
      id v35 = v18;
      id v36 = v19;
    }
    else
    {
      self;
      if (swift_dynamicCastObjCClass()
        || (self, swift_dynamicCastObjCClass())
        || (self, swift_dynamicCastObjCClass()))
      {
        if (qword_1010C83A0 != -1) {
          swift_once();
        }
        char v28 = &static Artwork.Placeholder.microphone;
      }
      else
      {
        self;
        if (swift_dynamicCastObjCClass())
        {
          if (qword_1010C83A8 != -1) {
            swift_once();
          }
          char v28 = &static Artwork.Placeholder.person;
        }
        else
        {
          self;
          if (swift_dynamicCastObjCClass()
            || (self, swift_dynamicCastObjCClass())
            || (self, swift_dynamicCastObjCClass())
            || (self, swift_dynamicCastObjCClass()))
          {
            if (qword_1010C8398 != -1) {
              swift_once();
            }
            char v28 = &static Artwork.Placeholder.tv;
          }
          else
          {
            if (qword_1010C8388 != -1) {
              swift_once();
            }
            char v28 = &static Artwork.Placeholder.music;
          }
        }
      }
      id v18 = (void *)*v28;
      id v19 = (void *)v28[1];
      uint64_t v21 = (void *)v28[2];
      uint64_t v29 = (void *)v28[3];
      uint64_t v22 = v28[4];
      uint64_t v23 = v28[5];
      id v30 = v21;
      id v25 = v29;
      id v31 = v18;
      id v32 = v19;
    }
  }
LABEL_24:
  *a1 = v18;
  a1[1] = v19;
  a1[2] = v21;
  a1[3] = v25;
  a1[4] = v22;
  a1[5] = v23;
}

id MusicItem.artworkPlaceholder.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v131 = a2;
  uint64_t v93 = type metadata accessor for Station();
  uint64_t v91 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v94 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for MusicMovie();
  uint64_t v92 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  unint64_t v96 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for TVSeason();
  uint64_t v95 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v99 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for TVEpisode();
  uint64_t v98 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v102 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = type metadata accessor for TVShow();
  uint64_t v101 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v106 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for Playlist.Folder();
  uint64_t v105 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v112 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100063814(&qword_1010C9288);
  __chkstk_darwin(v9 - 8);
  uint64_t v111 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for Playlist.Variant();
  uint64_t v118 = *(void *)(v114 - 8);
  uint64_t v11 = __chkstk_darwin(v114);
  uint64_t v104 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v110 = (char *)&v90 - v13;
  uint64_t v117 = type metadata accessor for Playlist();
  uint64_t v109 = *(void *)(v117 - 8);
  uint64_t v14 = __chkstk_darwin(v117);
  uint64_t v108 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v115 = (char *)&v90 - v16;
  uint64_t v120 = type metadata accessor for MusicVideo();
  uint64_t v116 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v121 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = type metadata accessor for SocialProfile();
  uint64_t v119 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  id v123 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for Curator();
  uint64_t v122 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  unint64_t v126 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Composer();
  uint64_t v125 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for RecordLabel();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  id v26 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Artist();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  id v31 = (char *)&v90 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v90 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = v34;
  (*(void (**)(char *, void, uint64_t))(v34 + 16))(v33, v128, a1);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
    uint64_t v35 = v131;
    uint64_t v36 = a1;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v130 + 8))(v33, v36);
    if (qword_1010C83A0 != -1) {
      swift_once();
    }
    double v37 = &static Artwork.Placeholder.microphone;
    goto LABEL_18;
  }
  uint64_t v36 = a1;
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    uint64_t v35 = v131;
    goto LABEL_5;
  }
  int v38 = swift_dynamicCast();
  uint64_t v35 = v131;
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v125 + 8))(v22, v20);
  }
  else
  {
    long long v40 = v126;
    uint64_t v39 = v127;
    if (swift_dynamicCast())
    {
      uint64_t v41 = v122;
    }
    else
    {
      long long v40 = v123;
      uint64_t v39 = v124;
      if (!swift_dynamicCast())
      {
        uint64_t v51 = v120;
        if (swift_dynamicCast())
        {
          char v52 = v33;
          if (qword_1010C8390 != -1) {
            swift_once();
          }
          id v42 = (void *)static Artwork.Placeholder.musicVideo;
          uint64_t v43 = (void *)unk_10112BF80;
          uint64_t v45 = (void *)qword_10112BF88;
          unint64_t v53 = (void *)unk_10112BF90;
          long long v128 = xmmword_10112BF98;
          int64_t v54 = *(void (**)(char *, uint64_t))(v116 + 8);
          id v55 = (id)static Artwork.Placeholder.musicVideo;
          id v56 = v43;
          id v57 = v45;
          id v47 = v53;
          v54(v121, v51);
          id result = (id)(*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v52, v36);
          goto LABEL_19;
        }
        CGRect v58 = v115;
        uint64_t v59 = v117;
        if (swift_dynamicCast())
        {
          uint64_t v60 = v109;
          uint64_t v61 = v108;
          (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v108, v58, v59);
          uint64_t v62 = (uint64_t)v111;
          Playlist.variant.getter();
          uint64_t v63 = v118;
          uint64_t v64 = v114;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48))(v62, 1, v114) == 1)
          {
            uint64_t v65 = (uint64_t)v110;
            (*(void (**)(char *, void, uint64_t))(v63 + 104))(v110, enum case for Playlist.Variant.regular(_:), v64);
            sub_100AE2D6C(v62);
          }
          else
          {
            uint64_t v65 = (uint64_t)v110;
            (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v110, v62, v64);
          }
          double v73 = sub_100AE2DCC(v65, (uint64_t)v132);
          (*(void (**)(uint64_t, uint64_t, double))(v63 + 8))(v65, v64, v73);
          (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v59);
        }
        else
        {
          uint64_t v66 = v112;
          uint64_t v67 = v113;
          int v68 = swift_dynamicCast();
          uint64_t v69 = v118;
          if (!v68)
          {
            uint64_t v74 = v106;
            uint64_t v75 = v107;
            if (swift_dynamicCast())
            {
              uint64_t v76 = v132;
            }
            else
            {
              uint64_t v74 = v102;
              uint64_t v75 = v103;
              if (swift_dynamicCast())
              {
                uint64_t v76 = (uint64_t *)&v129;
              }
              else
              {
                uint64_t v74 = v99;
                uint64_t v75 = v100;
                if (swift_dynamicCast())
                {
                  uint64_t v76 = &v127;
                }
                else
                {
                  uint64_t v74 = v96;
                  uint64_t v75 = v97;
                  if (!swift_dynamicCast())
                  {
                    uint64_t v77 = v93;
                    if (swift_dynamicCast())
                    {
                      BOOL v78 = v33;
                      if (qword_1010C83B8 != -1) {
                        swift_once();
                      }
                      id v42 = (void *)static Artwork.Placeholder.radio;
                      uint64_t v43 = (void *)unk_10112C070;
                      uint64_t v45 = (void *)qword_10112C078;
                      uint64_t v79 = (void *)unk_10112C080;
                      long long v128 = xmmword_10112C088;
                      uint64_t v80 = *(void (**)(char *, uint64_t))(v91 + 8);
                      id v81 = (id)static Artwork.Placeholder.radio;
                      id v82 = v43;
                      id v83 = v45;
                      id v47 = v79;
                      v80(v94, v77);
                      id result = (id)(*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v78, v36);
                    }
                    else
                    {
                      uint64_t v84 = v33;
                      if (qword_1010C8388 != -1) {
                        swift_once();
                      }
                      id v42 = (void *)static Artwork.Placeholder.music;
                      uint64_t v43 = (void *)unk_10112BF50;
                      uint64_t v45 = (void *)qword_10112BF58;
                      uint64_t v85 = (void *)unk_10112BF60;
                      long long v128 = xmmword_10112BF68;
                      uint64_t v86 = *(uint64_t (**)(char *, uint64_t))(v130 + 8);
                      id v87 = (id)static Artwork.Placeholder.music;
                      id v88 = v43;
                      id v89 = v45;
                      id v47 = v85;
                      id result = (id)v86(v84, v36);
                    }
                    goto LABEL_19;
                  }
                  uint64_t v76 = &v124;
                }
              }
            }
            (*(void (**)(char *, uint64_t))(*(v76 - 32) + 8))(v74, v75);
            (*(void (**)(char *, uint64_t))(v130 + 8))(v33, v36);
            if (qword_1010C8398 != -1) {
              swift_once();
            }
            double v37 = &static Artwork.Placeholder.tv;
            goto LABEL_18;
          }
          uint64_t v70 = (uint64_t)v104;
          uint64_t v71 = v114;
          (*(void (**)(char *, void, uint64_t))(v118 + 104))(v104, enum case for Playlist.Variant.folder(_:), v114);
          double v72 = sub_100AE2DCC(v70, (uint64_t)v132);
          (*(void (**)(uint64_t, uint64_t, double))(v69 + 8))(v70, v71, v72);
          (*(void (**)(char *, uint64_t))(v105 + 8))(v66, v67);
        }
        id result = (id)(*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v33, v36);
        long long v50 = v133;
        uint64_t v45 = (void *)v132[2];
        id v47 = (id)v132[3];
        id v42 = (void *)v132[0];
        uint64_t v43 = (void *)v132[1];
        goto LABEL_20;
      }
      uint64_t v41 = v119;
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v39);
  }
  (*(void (**)(char *, uint64_t))(v130 + 8))(v33, a1);
  if (qword_1010C83A8 != -1) {
    swift_once();
  }
  double v37 = &static Artwork.Placeholder.person;
LABEL_18:
  id v42 = (void *)*v37;
  uint64_t v43 = (void *)v37[1];
  uint64_t v45 = (void *)v37[2];
  uint64_t v44 = (void *)v37[3];
  long long v128 = *((_OWORD *)v37 + 2);
  id v46 = v45;
  id v47 = v44;
  id v48 = v42;
  id result = v43;
LABEL_19:
  long long v50 = v128;
LABEL_20:
  *(void *)uint64_t v35 = v42;
  *(void *)(v35 + 8) = v43;
  *(void *)(v35 + 16) = v45;
  *(void *)(v35 + 24) = v47;
  *(_OWORD *)(v35 + 32) = v50;
  return result;
}

uint64_t sub_100AE2D6C(uint64_t a1)
{
  uint64_t v2 = sub_100063814(&qword_1010C9288);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_100AE2DCC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Playlist.Variant();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v22[-v9];
  uint64_t v11 = *(void (**)(unsigned char *))(v5 + 104);
  int v23 = enum case for Playlist.Variant.folder(_:);
  v11(&v22[-v9]);
  sub_100AE3504(&qword_1010C9338, 255, (void (*)(uint64_t))&type metadata accessor for Playlist.Variant);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v12 = v24;
  uint64_t v13 = v25;
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v14(v10, v4);
  uint64_t v15 = 0;
  if (v13 != v12)
  {
    if (qword_1010C8370 != -1) {
      swift_once();
    }
    uint64_t v15 = qword_1010C9250;
    id v16 = (id)qword_1010C9250;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  int v17 = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 88))(v8, v4);
  if (v17 != enum case for Playlist.Variant.smart(_:) && v17 != enum case for Playlist.Variant.genius(_:) && v17 != v23) {
    v14(v8, v4);
  }
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v19 = [self _systemImageNamed:v18];

  id v20 = [self configurationWithWeight:3];
  *(void *)a2 = [self secondarySystemFillColor];
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v19;
  *(void *)(a2 + 24) = v20;
  double result = 0.4;
  *(_OWORD *)(a2 + 32) = xmmword_100E52540;
  return result;
}

id sub_100AE3128()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  return v1;
}

unint64_t sub_100AE3200()
{
  unint64_t result = qword_1010C9290;
  if (!qword_1010C9290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C9290);
  }
  return result;
}

uint64_t sub_100AE3254(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100AE3504(&qword_1010C9238, a2, (void (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100AE32AC(uint64_t a1, uint64_t a2)
{
  return sub_100AE3504(&qword_1010C92D8, a2, (void (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View);
}

unint64_t sub_100AE32F4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100AE3324();
  unint64_t result = sub_100074760();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100AE3324()
{
  unint64_t result = qword_1010C9308;
  if (!qword_1010C9308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C9308);
  }
  return result;
}

uint64_t _s11PlaceholderVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  uint64_t v10 = *(void **)(a1 + 16);
  uint64_t v11 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v11;
  id v12 = v11;

  uint64_t v13 = *(void **)(a2 + 24);
  uint64_t v14 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v13;
  id v15 = v13;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t _s11PlaceholderVwta(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  *(_OWORD *)(a1 + 32) = a2[2];
  return a1;
}

uint64_t _s11PlaceholderVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s11PlaceholderVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_100AE34FC()
{
  return sub_10000FC78();
}

uint64_t sub_100AE3504(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

__n128 CAPackageDefinition.transform.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 56);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 CAPackageDefinition.transform.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 40) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 56) = result;
  return result;
}

__n128 CAPackageDefinition.init(name:bundle:transform:states:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  long long v6 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a6 + 24) = *(_OWORD *)a4;
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(_OWORD *)(a6 + 40) = v6;
  __n128 result = *(__n128 *)(a4 + 32);
  *(__n128 *)(a6 + 56) = result;
  *(void *)(a6 + 72) = a5;
  return result;
}

uint64_t sub_100AE35B4(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  _OWORD v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  _OWORD v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return _s11MusicCoreUI19CAPackageDefinitionV23__derived_struct_equalsySbAC_ACtFZ_0(v8, v9) & 1;
}

uint64_t sub_100AE3610()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

id static CAPackageDefinition.pause.getter@<X0>(void *a1@<X8>)
{
  return sub_10005463C(0x7375615079616C50, 0xED0000706F745365, (uint64_t)&off_101008438, a1);
}

id static CAPackageDefinition.stop.getter@<X0>(void *a1@<X8>)
{
  return sub_10005463C(0x7375615079616C50, 0xED0000706F745365, (uint64_t)&off_101008468, a1);
}

id static CAPackageDefinition.favoriteDark.getter@<X0>(void *a1@<X8>)
{
  return sub_10005463C(0x657469726F766146, 0xEC0000006B726144, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.favoriteHighContrastDark.getter@<X0>(void *a1@<X8>)
{
  return sub_10005463C(0xD000000000000018, 0x8000000100DD3250, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.favoriteHighContrastLight.getter@<X0>(void *a1@<X8>)
{
  return sub_10005463C(0xD000000000000019, 0x8000000100DD3270, (uint64_t)_swiftEmptyArrayStorage, a1);
}

uint64_t _s11MusicCoreUI19CAPackageDefinitionV23__derived_struct_equalsySbAC_ACtFZ_0(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  sub_100057778(0, (unint64_t *)&qword_1010CAA20);
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static CGAffineTransform.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  long long v5 = (void *)a1[9];
  long long v6 = (void *)a2[9];

  return sub_100054E98(v5, v6);
}

uint64_t sub_100AE3804()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100AE3844()
{
  return swift_deallocObject();
}

uint64_t destroy for CAPackageDefinition(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CAPackageDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  BOOL v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  id v5 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CAPackageDefinition(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BOOL v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for CAPackageDefinition(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for CAPackageDefinition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100AE3A3C()
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_10007A5C4(*(void *)(v0 + 40), *(void *)(v0 + 48));

  return swift_deallocObject();
}

id CoreAnimationPackageView.__allocating_init(definition:)(_OWORD *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CoreAnimationPackageView.init(definition:)(a1);
}

uint64_t CoreAnimationPackageView.definition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 8);
  id v5 = *(void **)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 72);
  *(void *)a1 = *(void *)v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v3 + 56);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  id v7 = v5;
  return swift_bridgeObjectRetain();
}

void (*CoreAnimationPackageView.definition.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = (char *)malloc(0x118uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition;
  *((void *)v3 + 33) = v1;
  *((void *)v3 + 34) = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 8);
  id v7 = *(void **)(v5 + 16);
  *((void *)v3 + 20) = *(void *)v5;
  *((void *)v3 + 21) = v6;
  v3 += 160;
  uint64_t v8 = *(void *)(v5 + 72);
  *((void *)v3 + 2) = v7;
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v5 + 24);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(v5 + 56);
  *((void *)v3 + 9) = v8;
  swift_bridgeObjectRetain();
  id v9 = v7;
  swift_bridgeObjectRetain();
  return sub_100AE3C34;
}

void sub_100AE3C34(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 160);
  uint64_t v4 = *(void *)(*a1 + 168);
  uint64_t v5 = *(void **)(*a1 + 176);
  uint64_t v7 = *(void *)(*a1 + 184);
  uint64_t v6 = *(void *)(*a1 + 192);
  uint64_t v9 = *(void *)(*a1 + 200);
  uint64_t v8 = *(void *)(*a1 + 208);
  uint64_t v11 = *(void *)(*a1 + 216);
  uint64_t v10 = *(void *)(*a1 + 224);
  uint64_t v12 = *(void *)(*a1 + 232);
  uint64_t v13 = *(void *)(*a1 + 264) + *(void *)(*a1 + 272);
  if (a2)
  {
    *(_OWORD *)uint64_t v2 = *(_OWORD *)v13;
    long long v14 = *(_OWORD *)(v13 + 16);
    long long v15 = *(_OWORD *)(v13 + 32);
    long long v16 = *(_OWORD *)(v13 + 64);
    *(_OWORD *)(v2 + 48) = *(_OWORD *)(v13 + 48);
    *(_OWORD *)(v2 + 64) = v16;
    *(_OWORD *)(v2 + 16) = v14;
    *(_OWORD *)(v2 + 32) = v15;
    int v17 = *(void **)(v13 + 16);
    *(void *)uint64_t v13 = v3;
    *(void *)(v13 + 8) = v4;
    *(void *)(v13 + 16) = v5;
    *(void *)(v13 + 24) = v7;
    *(void *)(v13 + 32) = v6;
    *(void *)(v13 + 40) = v9;
    *(void *)(v13 + 48) = v8;
    *(void *)(v13 + 56) = v11;
    *(void *)(v13 + 64) = v10;
    *(void *)(v13 + 72) = v12;
    swift_bridgeObjectRetain_n();
    id v18 = v5;
    swift_bridgeObjectRetain_n();
    id v19 = v18;
    sub_100054C58(v2);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_100054CA0((uint64_t *)v2);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_100054C14(v2);
    id v20 = *(void **)(v2 + 176);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v13;
    long long v21 = *(_OWORD *)(v13 + 16);
    long long v22 = *(_OWORD *)(v13 + 32);
    long long v23 = *(_OWORD *)(v13 + 64);
    *(_OWORD *)(v2 + 128) = *(_OWORD *)(v13 + 48);
    *(_OWORD *)(v2 + 144) = v23;
    *(_OWORD *)(v2 + 96) = v21;
    *(_OWORD *)(v2 + 112) = v22;
    uint64_t v24 = *(void **)(v13 + 16);
    *(void *)uint64_t v13 = v3;
    *(void *)(v13 + 8) = v4;
    *(void *)(v13 + 16) = v5;
    *(void *)(v13 + 24) = v7;
    *(void *)(v13 + 32) = v6;
    *(void *)(v13 + 40) = v9;
    *(void *)(v13 + 48) = v8;
    *(void *)(v13 + 56) = v11;
    *(void *)(v13 + 64) = v10;
    *(void *)(v13 + 72) = v12;
    sub_100054C58(v2 + 80);
    swift_bridgeObjectRetain();
    id v25 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_100054CA0((uint64_t *)(v2 + 80));
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_100054C14(v2 + 80);
  }

  free((void *)v2);
}

uint64_t CoreAnimationPackageView.stateName.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CoreAnimationPackageView.stateName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t *v5 = a1;
  v5[1] = a2;
  sub_100058628(v6, v7);
  return swift_bridgeObjectRelease();
}

void (*CoreAnimationPackageView.stateName.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = (void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = v5[1];
  v3[3] = *v5;
  id v3[4] = v6;
  swift_bridgeObjectRetain();
  return sub_100AE3F54;
}

void sub_100AE3F54(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v5 = *(void *)(*(void *)a1 + 40);
  uint64_t v4 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 32);
  uint64_t v7 = (uint64_t *)(v5 + v4);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  *uint64_t v7 = v3;
  v7[1] = v6;
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_100058628(v9, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100058628(v9, v8);
  }
  swift_bridgeObjectRelease();

  free(v2);
}

void *CoreAnimationPackageView.foregroundColor.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void (*CoreAnimationPackageView.foregroundColor.modify(void *a1))(void **a1, char a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor;
  v3[3] = v1;
  id v3[4] = v4;
  swift_beginAccess();
  return sub_100AE40A4;
}

void sub_100AE40A4(void **a1, char a2)
{
  id v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = v3[3];
    if (*(void *)(v4 + v3[4]))
    {
      sub_10005486C();
    }
    else
    {
      uint64_t v5 = *(void **)(v4 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
      if (v5)
      {
        id v6 = v5;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        [v6 setFilters:isa];
      }
    }
  }

  free(v3);
}

Swift::Void __swiftcall CoreAnimationPackageView.set(stateName:forSublayer:)(Swift::String stateName, Swift::String forSublayer)
{
  id v3 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
  if (v3)
  {
    object = forSublayer._object;
    uint64_t countAndFlagsBits = forSublayer._countAndFlagsBits;
    id v6 = [v3 sublayers];
    if (v6)
    {
      uint64_t v7 = v6;
      sub_100057778(0, &qword_1010C9480);
      unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      id v17 = sub_100AE4AB8(v8, countAndFlagsBits, (uint64_t)object);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v17)
      {
        NSString v9 = String._bridgeToObjectiveC()();
        id v10 = [v17 stateWithName:v9];

        if (v10)
        {
          uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController);
          if (v11)
          {
            uint64_t v12 = self;
            id v13 = v11;
            id v14 = v10;
            id v10 = v17;
            unsigned int v15 = [v12 areAnimationsEnabled];
            double v16 = 0.0;
            if (v15) {
              *(float *)&double v16 = 1.0;
            }
            [v13 setState:v14 ofLayer:v10 transitionSpeed:v16];
          }
        }
      }
    }
  }
}

Swift::Void __swiftcall CoreAnimationPackageView.advanceState()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates);
  uint64_t v3 = *v2;
  if (*(void *)(*v2 + 16)
    || (uint64_t v4 = v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition,
        swift_beginAccess(),
        *uint64_t v2 = *(void *)(v4 + 72),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        uint64_t v3 = *v2,
        *(void *)(*v2 + 16)))
  {
    uint64_t v6 = *(void *)(v3 + 32);
    uint64_t v5 = *(void *)(v3 + 40);
    swift_bridgeObjectRetain();
    sub_100AE4C4C(0, 1);
    uint64_t v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
    swift_beginAccess();
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    *uint64_t v7 = v6;
    v7[1] = v5;
    sub_100058628(v8, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall CoreAnimationPackageView.startCyclingThroughStates(with:)(Swift::Double with)
{
  uint64_t v3 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer);
  if (!v4 || ([v4 timeInterval], v5 != with))
  {
    uint64_t v6 = self;
    uint64_t v7 = swift_allocObject();
    swift_unknownObjectWeakInit();
    void v12[4] = sub_100AE4D9C;
    v12[5] = v7;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    void v12[2] = sub_10023B98C;
    v12[3] = &unk_101009CC8;
    uint64_t v8 = _Block_copy(v12);
    swift_release();
    id v9 = [v6 scheduledTimerWithTimeInterval:1 repeats:v8 block:with];
    _Block_release(v8);
    id v10 = *(void **)(v1 + v3);
    *(void *)(v1 + v3) = v9;
    id v11 = v9;
    [v10 invalidate];
  }
}

void sub_100AE4560()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    CoreAnimationPackageView.advanceState()();
  }
}

Swift::Void __swiftcall CoreAnimationPackageView.stopCyclingThroughStates()()
{
  uint64_t v1 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer;
  if (*(void *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer))
  {
    CoreAnimationPackageView.reset()();
    uint64_t v2 = *(void **)(v0 + v1);
    id v3 = v2;
    *(void *)(v0 + v1) = 0;
    [v2 invalidate];
  }
}

void CoreAnimationPackageView.init(frame:)()
{
}

id CoreAnimationPackageView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreAnimationPackageView();
  return [super dealloc];
}

void sub_100AE4788(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_14;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_100063814(&qword_1010C94B8);
      uint64_t v7 = *(void *)(type metadata accessor for PlaylistCurators.Curator(0) - 8);
      uint64_t v8 = *(void *)(v7 + 72);
      unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      id v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      if (!v8)
      {
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
        return;
      }
      if (v11 - v9 == 0x8000000000000000 && v8 == -1) {
        goto LABEL_16;
      }
      v10[2] = v5;
      v10[3] = 2 * ((uint64_t)(v11 - v9) / v8);
      if (v4 != a3)
      {
LABEL_10:
        type metadata accessor for PlaylistCurators.Curator(0);
        swift_arrayInitWithCopy();
        return;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
}

void *sub_100AE4920(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100063814(&qword_1010C94B0);
  uint64_t v3 = swift_allocObject();
  size_t v4 = j__malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * v4 - 64;
  uint64_t v5 = sub_100AC6048(&v7, (unsigned char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_100048F1C();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v3;
}

void sub_100AE49F8()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *sub_100AE4AB8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v10 = [v7 name];
      if (v10)
      {
        size_t v11 = v10;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v8;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_18;
        }
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_21:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100AE4C4C(uint64_t result, int64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  size_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = result;
  int64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    size_t v4 = sub_100073498(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  __n128 result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_19;
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_25;
  }
  unsigned int v15 = &v4[16 * a2 + 32];
  if (v6 != a2 || &v4[16 * v6 + 32] >= &v15[16 * v14]) {
    __n128 result = (uint64_t)memmove(&v4[16 * v6 + 32], v15, 16 * v14);
  }
  uint64_t v16 = *((void *)v4 + 2);
  BOOL v13 = __OFADD__(v16, v8);
  uint64_t v17 = v16 - v7;
  if (!v13)
  {
    *((void *)v4 + 2) = v17;
LABEL_19:
    *objc_super v2 = v4;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100AE4D64()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_100AE4D9C()
{
}

uint64_t sub_100AE4DA4(uint64_t a1, uint64_t a2)
{
  return sub_100AE5084(a1, a2, (unint64_t *)&qword_1010CAC50);
}

uint64_t sub_100AE4DB8(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!((unint64_t)*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 < v2) {
    goto LABEL_28;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v21 + v5;
    if (!__OFADD__(v21, v5)) {
      goto LABEL_8;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if ((unint64_t)*v3 >> 62) {
    goto LABEL_31;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_33;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      *uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v12 = v11 + 32;
  BOOL v13 = (char *)(v11 + 32 + 8 * v4);
  type metadata accessor for SyncedLyricsLineView();
  uint64_t result = swift_arrayDestroy();
  if (v5)
  {
    if ((unint64_t)*v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v16 = v22 - v2;
      if (!__OFSUB__(v22, v2)) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v16 = v15 - v2;
      if (!__OFSUB__(v15, v2))
      {
LABEL_17:
        uint64_t v17 = (char *)(v12 + 8 * v2);
        if (v4 != v2 || v13 >= &v17[8 * v16]) {
          uint64_t result = (uint64_t)memmove(v13, v17, 8 * v16);
        }
        if (!((unint64_t)*v3 >> 62))
        {
          uint64_t v18 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v19 = v18 + v5;
          if (!__OFADD__(v18, v5))
          {
LABEL_22:
            *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
            goto LABEL_23;
          }
LABEL_40:
          __break(1u);
          return result;
        }
LABEL_38:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v19 = v23 + v5;
        if (!__OFADD__(v23, v5)) {
          goto LABEL_22;
        }
        goto LABEL_40;
      }
    }
    __break(1u);
    goto LABEL_38;
  }
LABEL_23:

  return specialized Array._endMutation()();
}

uint64_t sub_100AE5070(uint64_t a1, uint64_t a2)
{
  return sub_100AE5084(a1, a2, (unint64_t *)&qword_1010CD3B0);
}

uint64_t sub_100AE5084(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    uint64_t v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v3) {
    goto LABEL_28;
  }
LABEL_4:
  uint64_t v7 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v8 = (unint64_t *)(v5 - v3);
  if (__OFSUB__(0, v7))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v10 = (char *)v8 + v23;
    if (!__OFADD__(v23, v8)) {
      goto LABEL_8;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if ((unint64_t)*v4 >> 62) {
    goto LABEL_31;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v10 = (char *)(v9 - v7);
  if (__OFADD__(v9, v8)) {
    goto LABEL_33;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, (uint64_t)v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    uint64_t v7 = (uint64_t)v8;
    uint64_t v8 = v6;
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      *uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v13 = *v4 & 0xFFFFFFFFFFFFFF8;
      uint64_t v6 = v8;
      uint64_t v8 = (unint64_t *)v7;
      goto LABEL_14;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v14 = v13 + 32;
  uint64_t v15 = (char *)(v13 + 32 + 8 * v5);
  sub_100057778(0, v6);
  uint64_t result = swift_arrayDestroy();
  if (v8)
  {
    if ((unint64_t)*v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v18 = v24 - v3;
      if (!__OFSUB__(v24, v3)) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v18 = v17 - v3;
      if (!__OFSUB__(v17, v3))
      {
LABEL_17:
        uint64_t v19 = (char *)(v14 + 8 * v3);
        if (v5 != v3 || v15 >= &v19[8 * v18]) {
          uint64_t result = (uint64_t)memmove(v15, v19, 8 * v18);
        }
        if (!((unint64_t)*v4 >> 62))
        {
          uint64_t v20 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v21 = (char *)v8 + v20;
          if (!__OFADD__(v20, v8))
          {
LABEL_22:
            *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v21;
            goto LABEL_23;
          }
LABEL_40:
          __break(1u);
          return result;
        }
LABEL_38:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v21 = (char *)v8 + v25;
        if (!__OFADD__(v25, v8)) {
          goto LABEL_22;
        }
        goto LABEL_40;
      }
    }
    __break(1u);
    goto LABEL_38;
  }
LABEL_23:

  return specialized Array._endMutation()();
}

unint64_t sub_100AE5374()
{
  unint64_t result = qword_1010C94E0;
  if (!qword_1010C94E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C94E0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CoreAnimationPackageView.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100AE5464);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreAnimationPackageView.Error()
{
  return &type metadata for CoreAnimationPackageView.Error;
}

unint64_t sub_100AE54A0()
{
  unint64_t result = qword_1010C94E8;
  if (!qword_1010C94E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C94E8);
  }
  return result;
}

id sub_100AE54F4()
{
  if (qword_1010C8350 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_10112BE80;
  static NSBundle.musicCoreUIBundle = qword_10112BE80;

  return v0;
}

uint64_t *NSBundle.musicCoreUIBundle.unsafeMutableAddressor()
{
  if (qword_1010C83F8 != -1) {
    swift_once();
  }
  return &static NSBundle.musicCoreUIBundle;
}

id static NSBundle.musicCoreUIBundle.getter()
{
  if (qword_1010C83F8 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NSBundle.musicCoreUIBundle;

  return v0;
}

void MusicLibrary.ActionableState.updateSymbolConfiguration(from:traitCollection:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  uint64_t v7 = sub_100063814(&qword_1010D0AB0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010C8818 != -1) {
    swift_once();
  }
  unsigned int v10 = a4;
  long long v11 = static SymbolButton.Configuration.platterMinimumSize;
  uint64_t v12 = (int *)type metadata accessor for SymbolButton.Configuration(0);
  *(_OWORD *)(a1 + v12[13]) = v11;
  static UIView.Corner.rounded.getter();
  uint64_t v13 = type metadata accessor for UIView.Corner();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v9, 0, 1, v13);
  sub_100AE596C((uint64_t)v9, a1 + v12[9]);
  uint64_t v14 = a1 + v12[10];
  if (*(void *)v14)
  {
    long long v15 = *(_OWORD *)&UIEdgeInsetsZero.bottom;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)&UIEdgeInsetsZero.top;
    *(_OWORD *)(v14 + 24) = v15;
  }

  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 56) = 2;
  objc_storeStrong((id *)(a1 + 24), UIFontTextStyleSubheadline);
  *(void *)(a1 + 48) = 6;
  switch(v10 >> 8)
  {
    case 2u:
      swift_bridgeObjectRelease();
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      goto LABEL_16;
    case 3u:
      swift_bridgeObjectRelease();
      *(_OWORD *)a1 = xmmword_100E52580;
      *(void *)(a1 + 48) = 7;
      goto LABEL_16;
    case 4u:
      swift_bridgeObjectRelease();
      long long v20 = xmmword_100E52570;
      goto LABEL_15;
    case 5u:
      swift_bridgeObjectRelease();
      long long v20 = xmmword_100E52560;
      goto LABEL_15;
    default:
      if ((v10 & 0x100) != 0)
      {
        swift_bridgeObjectRelease();
        long long v20 = xmmword_100E52590;
LABEL_15:
        *(_OWORD *)a1 = v20;
LABEL_16:
        sub_100AE59D4(*(void **)v14, *(void *)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24), *(void *)(v14 + 32), *(void *)(v14 + 40), *(void **)(v14 + 48));
        *(void *)(v14 + 48) = 0;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)uint64_t v14 = 0u;
      }
      else
      {
        uint64_t v16 = *(void **)v14;
        if (*(void *)v14
          && (type metadata accessor for CircularProgressView(), (uint64_t v17 = swift_dynamicCastClass()) != 0))
        {
          uint64_t v18 = (char *)v17;
          id v19 = v16;
        }
        else
        {
          id v21 = objc_allocWithZone((Class)type metadata accessor for CircularProgressView());
          uint64_t v18 = CircularProgressView.init(size:)(0.0, 0.0);
        }
        CircularProgressView.setState(_:animated:)(a3, v10 & 1, 1);
        sub_1001773EC(*(void *)(a1 + 192), *(void **)(a1 + 200));
        *(_OWORD *)(a1 + 192) = xmmword_100E26B10;
        *(void *)(a1 + 208) = 0;
        *(void *)(a1 + 216) = 0;
        swift_bridgeObjectRelease();
        *(_OWORD *)a1 = xmmword_100E525A0;
        *(void *)(a1 + 56) = 1;
        uint64_t v22 = UIFontTextStyleFootnote;

        *(void *)(a1 + 24) = v22;
        long long v25 = *(_OWORD *)&UIEdgeInsetsZero.top;
        CGFloat bottom = UIEdgeInsetsZero.bottom;
        CGFloat right = UIEdgeInsetsZero.right;
        sub_100AE59D4(*(void **)v14, *(void *)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24), *(void *)(v14 + 32), *(void *)(v14 + 40), *(void **)(v14 + 48));
        *(void *)uint64_t v14 = v18;
        *(_OWORD *)(v14 + 8) = v25;
        *(CGFloat *)(v14 + 24) = bottom;
        *(CGFloat *)(v14 + 32) = right;
        *(_OWORD *)(v14 + 40) = xmmword_100E26B30;
      }
      return;
  }
}

uint64_t sub_100AE596C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010D0AB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_100AE59D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a1)
  {
  }
}

uint64_t sub_100AE5A14()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100014CA4(v0, qword_10112C0C0);
  sub_100050A90(v0, (uint64_t)qword_10112C0C0);
  sub_100009FF4();
  OS_os_log.init(musicCategory:)();
  return Logger.init(_:)();
}

uint64_t ArtworkImageViewModelAttributeProviding.cropStyle.getter@<X0>(uint64_t a1@<X8>)
{
  static Artwork.CropStyle.boundedBox.getter();
  uint64_t v2 = type metadata accessor for Artwork.CropStyle();
  int v3 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 0, 1, v2);
}

uint64_t sub_100AE5B00@<X0>(void (*a1)(uint64_t)@<X0>, void (*a2)(uint64_t)@<X1>, char *a3@<X8>)
{
  uint64_t v6 = sub_100063814(&qword_1010C94F8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100063814((uint64_t *)&unk_1010CEE80);
  __chkstk_darwin(v9 - 8);
  long long v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Artwork();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  id v19 = (char *)&v26 - v18;
  a1(v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1000637B8((uint64_t)v11, (uint64_t *)&unk_1010CEE80);
    uint64_t v20 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a3, 1, 1, v20);
  }
  else
  {
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v22(v19, v11, v12);
    uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 16))(v16, v19, v12);
    a2(v23);
    uint64_t v24 = type metadata accessor for Artwork.CropStyle();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v8, 0, 1, v24);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    v22(a3, v16, v12);
    uint64_t v25 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100AE64A4((uint64_t)v8, (uint64_t)&a3[*(int *)(v25 + 20)]);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(a3, 0, 1, v25);
  }
}

uint64_t sub_100AE5E00@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&UploadedVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100AE5E2C@<X0>(unsigned char *a1@<X8>)
{
  sub_100063814(&qword_1010C94F8);
  __chkstk_darwin();
  int v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100063814((uint64_t *)&unk_1010CEE80);
  __chkstk_darwin();
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Artwork();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  long long v11 = &v17[-v10];
  sub_100063814(&qword_1010C9530);
  swift_allocObject();
  MusicAttributeProperty.init(_:)();
  Artist.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1000637B8((uint64_t)v5, (uint64_t *)&unk_1010CEE80);
    uint64_t v12 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    uint64_t v14 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32);
    v14(v11, v5, v6);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(v9, v11, v6);
    static Artwork.CropStyle.boundedBox.getter();
    uint64_t v15 = type metadata accessor for Artwork.CropStyle();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v3, 0, 1, v15);
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v11, v6);
    v14(a1, v9, v6);
    uint64_t v16 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100AE64A4((uint64_t)v3, (uint64_t)&a1[*(int *)(v16 + 20)]);
    return (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 0, 1, v16);
  }
}

uint64_t ArtworkImageViewModelAttributeProviding.artworkViewModel.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v7 = sub_100063814(&qword_1010C94F8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100063814((uint64_t *)&unk_1010CEE80);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Artwork();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v19 = (char *)&v25 - v18;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  uint64_t v26 = v3;
  v20(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1000637B8((uint64_t)v12, (uint64_t *)&unk_1010CEE80);
    uint64_t v21 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a3, 1, 1, v21);
  }
  else
  {
    uint64_t v25 = a1;
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v23(v19, v12, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
    (*(void (**)(uint64_t, uint64_t))(a2 + 24))(v25, a2);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    v23(a3, v17, v13);
    uint64_t v24 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100AE64A4((uint64_t)v9, (uint64_t)&a3[*(int *)(v24 + 20)]);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a3, 0, 1, v24);
  }
}

uint64_t sub_100AE64A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010C94F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AE650C@<X0>(uint64_t a1@<X8>)
{
  return sub_100AE839C((void (*)(void))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100AE6524@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100AE6564()
{
  sub_100063814(&qword_1010C9530);
  swift_allocObject();
  MusicAttributeProperty.init(_:)();
  Artist.subscript.getter();

  return swift_release();
}

uint64_t sub_100AE6670@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&Curator.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100AE66B4@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&EditorialItem.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100AE66F8@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&Genre.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100AE673C@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&MusicVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100AE677C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Artwork();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100063814((uint64_t *)&unk_1010CEE80);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v17 - v10;
  Playlist.artwork.getter();
  sub_10006CAB8((uint64_t)v11, (uint64_t)v9, (uint64_t *)&unk_1010CEE80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    uint64_t v12 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v5, v2);
    uint64_t v13 = type metadata accessor for ArtworkImage.ViewModel(0);
    uint64_t v14 = a1 + *(int *)(v13 + 20);
    static Artwork.CropStyle.squareCenterCrop.getter();
    uint64_t v15 = type metadata accessor for Artwork.CropStyle();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 0, 1, v15);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 0, 1, v13);
  }
  return sub_1000637B8((uint64_t)v11, (uint64_t *)&unk_1010CEE80);
}

uint64_t Playlist.artworkViewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v82 = a1;
  uint64_t v2 = sub_100063814(&qword_1010C94F8);
  __chkstk_darwin(v2 - 8);
  double v73 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Artwork();
  uint64_t v78 = *(void *)(v4 - 8);
  uint64_t v79 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  double v72 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v77 = (char *)&v71 - v7;
  uint64_t v8 = sub_100063814((uint64_t *)&unk_1010CEE80);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v76 = (char *)&v71 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v71 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v71 - v17;
  uint64_t v19 = type metadata accessor for Playlist();
  uint64_t v80 = *(void *)(v19 - 8);
  uint64_t v81 = v19;
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v75 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v71 - v22;
  uint64_t v24 = sub_100063814((uint64_t *)&unk_1010C8960);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v74 = (char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v71 - v27;
  uint64_t v29 = sub_100063814(&qword_1010C9288);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v32 = (char *)&v71 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v71 - v33;
  Playlist.variant.getter();
  uint64_t v35 = type metadata accessor for Playlist.Variant();
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35) == 1) {
    goto LABEL_2;
  }
  sub_10006CAB8((uint64_t)v34, (uint64_t)v32, &qword_1010C9288);
  int v38 = (*(uint64_t (**)(char *, uint64_t))(v36 + 88))(v32, v35);
  if (v38 != enum case for Playlist.Variant.regular(_:) && v38 != enum case for Playlist.Variant.smart(_:))
  {
    if (v38 == enum case for Playlist.Variant.genius(_:)) {
      goto LABEL_2;
    }
    if (v38 == enum case for Playlist.Variant.favoriteSongs(_:)) {
      goto LABEL_7;
    }
    if (v38 == enum case for Playlist.Variant.folder(_:)) {
      goto LABEL_14;
    }
    if (v38 != enum case for Playlist.Variant.subscribed(_:))
    {
      if (v38 != enum case for Playlist.Variant.admin(_:))
      {
        if (v38 == enum case for Playlist.Variant.personalMix(_:))
        {
          uint64_t v57 = (uint64_t)v76;
          Playlist.editorialArtwork.getter();
          sub_10006CAB8(v57, (uint64_t)v11, (uint64_t *)&unk_1010CEE80);
          uint64_t v59 = v78;
          uint64_t v58 = v79;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v11, 1, v79) == 1)
          {
            uint64_t v60 = type metadata accessor for ArtworkImage.ViewModel(0);
            uint64_t v61 = (uint64_t)v74;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v74, 1, 1, v60);
          }
          else
          {
            uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
            uint64_t v62 = v77;
            v71(v77, v11, v58);
            uint64_t v63 = v72;
            (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v72, v62, v58);
            uint64_t v64 = (uint64_t)v73;
            static Artwork.CropStyle.featuredContentCrop170T100B.getter();
            uint64_t v65 = type metadata accessor for Artwork.CropStyle();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v64, 0, 1, v65);
            uint64_t v61 = (uint64_t)v74;
            v71(v74, v63, v58);
            uint64_t v60 = type metadata accessor for ArtworkImage.ViewModel(0);
            sub_100AE64A4(v64, v61 + *(int *)(v60 + 20));
            (*(void (**)(char *, uint64_t))(v59 + 8))(v62, v58);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v61, 0, 1, v60);
          }
          uint64_t v67 = v81;
          uint64_t v66 = v82;
          uint64_t v68 = v80;
          uint64_t v69 = v75;
          sub_1000637B8(v57, (uint64_t *)&unk_1010CEE80);
          (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v69, v1, v67);
          type metadata accessor for ArtworkImage.ViewModel(0);
          uint64_t v70 = *(void *)(v60 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v61, 1, v60) == 1)
          {
            sub_100AE677C(v66);
            (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v67);
            sub_1000637B8(v61, (uint64_t *)&unk_1010C8960);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v67);
            sub_10022A964(v61, v66);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v66, 0, 1, v60);
          }
          goto LABEL_15;
        }
        (*(void (**)(char *, uint64_t))(v36 + 8))(v32, v35);
LABEL_14:
        uint64_t v56 = type metadata accessor for ArtworkImage.ViewModel(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v82, 1, 1, v56);
LABEL_15:
        unint64_t v53 = &qword_1010C9288;
        uint64_t v54 = (uint64_t)v34;
        return sub_1000637B8(v54, v53);
      }
LABEL_2:
      sub_1000637B8((uint64_t)v34, &qword_1010C9288);
      return sub_100AE677C(v82);
    }
  }
LABEL_7:
  sub_1000637B8((uint64_t)v34, &qword_1010C9288);
  sub_100AE677C((uint64_t)v28);
  uint64_t v39 = v80;
  uint64_t v40 = v1;
  uint64_t v41 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v23, v40, v81);
  uint64_t v42 = type metadata accessor for ArtworkImage.ViewModel(0);
  uint64_t v43 = *(void *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v28, 1, v42) == 1)
  {
    Playlist.tracksTiledArtwork.getter();
    sub_10006CAB8((uint64_t)v18, (uint64_t)v16, (uint64_t *)&unk_1010CEE80);
    uint64_t v45 = v78;
    uint64_t v44 = v79;
    uint64_t v46 = 1;
    BOOL v47 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v16, 1, v79) == 1;
    uint64_t v48 = v82;
    if (!v47)
    {
      double v49 = v77;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v77, v16, v44);
      long long v50 = v49;
      (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v82, v49, v44);
      uint64_t v51 = v82 + *(int *)(v42 + 20);
      static Artwork.CropStyle.boundedBox.getter();
      uint64_t v52 = type metadata accessor for Artwork.CropStyle();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v51, 0, 1, v52);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v50, v44);
      uint64_t v48 = v82;
      uint64_t v46 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v48, v46, 1, v42);
    sub_1000637B8((uint64_t)v18, (uint64_t *)&unk_1010CEE80);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v23, v81);
    unint64_t v53 = (uint64_t *)&unk_1010C8960;
    uint64_t v54 = (uint64_t)v28;
    return sub_1000637B8(v54, v53);
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v23, v41);
  uint64_t v55 = v82;
  sub_10022A964((uint64_t)v28, v82);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v55, 0, 1, v42);
}

uint64_t sub_100AE7428@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&Song.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100AE746C@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&Playlist.Entry.InternalItem.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100AE74B0@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&RadioShow.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t RecentlyAddedMusicItem.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v46 = a1;
  uint64_t v1 = type metadata accessor for UploadedVideo();
  uint64_t v35 = *(void *)(v1 - 8);
  uint64_t v36 = v1;
  __chkstk_darwin(v1);
  uint64_t v34 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for MusicVideo();
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  __chkstk_darwin(v3);
  uint64_t v42 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TVSeason();
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  __chkstk_darwin(v5);
  double v37 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Playlist();
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MusicMovie();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Album();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for RecentlyAddedMusicItem();
  uint64_t v19 = *(void *)(v18 - 8);
  __n128 v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))(v22, v45, v18, v20);
  int v23 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v22, v18);
  if (v23 == enum case for RecentlyAddedMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v22, v18);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v22, v14);
    sub_100AE5B00((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v46);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  uint64_t v25 = v46;
  if (v23 == enum case for RecentlyAddedMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v22, v18);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v22, v10);
    sub_100AE5B00((void (*)(uint64_t))&MusicMovie.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (v23 == enum case for RecentlyAddedMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v22, v18);
    uint64_t v27 = v42;
    uint64_t v26 = v43;
    uint64_t v28 = v44;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v42, v22, v44);
    uint64_t v29 = &MusicVideo.artwork.getter;
  }
  else
  {
    if (v23 == enum case for RecentlyAddedMusicItem.playlist(_:))
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v22, v18);
      uint64_t v31 = v40;
      uint64_t v30 = v41;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v9, v22, v41);
      Playlist.artworkViewModel.getter((uint64_t)v25);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v9, v30);
    }
    if (v23 == enum case for RecentlyAddedMusicItem.tvSeason(_:))
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v22, v18);
      uint64_t v27 = v37;
      uint64_t v26 = v38;
      uint64_t v28 = v39;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v22, v39);
      uint64_t v29 = &TVSeason.artwork.getter;
    }
    else
    {
      if (v23 != enum case for RecentlyAddedMusicItem.uploadedVideo(_:))
      {
        uint64_t v32 = type metadata accessor for ArtworkImage.ViewModel(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v25, 1, 1, v32);
        return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v18);
      }
      (*(void (**)(char *, uint64_t))(v19 + 96))(v22, v18);
      uint64_t v27 = v34;
      uint64_t v26 = v35;
      uint64_t v28 = v36;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v34, v22, v36);
      uint64_t v29 = &UploadedVideo.artwork.getter;
    }
  }
  sub_100AE5B00((void (*)(uint64_t))v29, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v27, v28);
}

uint64_t sub_100AE7C28@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&RecordLabel.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100AE7C6C@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&MusicMovie.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100AE7CB4@<X0>(uint64_t a1@<X8>)
{
  return sub_100AE839C((void (*)(void))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t sub_100AE7CCC@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&SocialProfile.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t sub_100AE7D10@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&Station.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t TVEpisode.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v1 = sub_100063814(&qword_1010C94F8);
  __chkstk_darwin(v1 - 8);
  uint64_t v35 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100063814((uint64_t *)&unk_1010CEE80);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - v7;
  uint64_t v9 = type metadata accessor for Artwork();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v35 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v35 - v17;
  TVEpisode.previewArtwork.getter();
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v19(v8, 1, v9) == 1)
  {
    __n128 v20 = v13;
    uint64_t v21 = (uint64_t)v35;
    sub_1000637B8((uint64_t)v8, (uint64_t *)&unk_1010CEE80);
    TVEpisode.artwork.getter();
    int v22 = v19(v6, 1, v9);
    int v23 = v36;
    if (v22 == 1)
    {
      sub_1000637B8((uint64_t)v6, (uint64_t *)&unk_1010CEE80);
      uint64_t v24 = type metadata accessor for ArtworkImage.ViewModel(0);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
    }
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v33(v20, v6, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v20, v9);
    static Artwork.CropStyle.boundedBox.getter();
    uint64_t v34 = type metadata accessor for Artwork.CropStyle();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v21, 0, 1, v34);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v20, v9);
    v33(v23, v16, v9);
    uint64_t v30 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100AE64A4(v21, (uint64_t)&v23[*(int *)(v30 + 20)]);
    uint64_t v31 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56);
    uint64_t v32 = v23;
  }
  else
  {
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v26(v18, v8, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v18, v9);
    uint64_t v27 = (uint64_t)v35;
    static Artwork.CropStyle.boundedBox.getter();
    uint64_t v28 = type metadata accessor for Artwork.CropStyle();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 0, 1, v28);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
    uint64_t v29 = v36;
    v26(v36, v16, v9);
    uint64_t v30 = type metadata accessor for ArtworkImage.ViewModel(0);
    sub_100AE64A4(v27, (uint64_t)&v29[*(int *)(v30 + 20)]);
    uint64_t v31 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56);
    uint64_t v32 = v29;
  }
  return v31((uint64_t)v32, 0, 1, v30);
}

uint64_t sub_100AE81D8@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&TVShow.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100AE821C@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&TVSeason.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100AE8260@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&UploadedVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t sub_100AE82A4@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&UploadedAudio.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t _s8MusicKit7StationV0A6CoreUIE9cropStyleAA7ArtworkV0aB8InternalE04CropG0VSgvg_0@<X0>(uint64_t a1@<X8>)
{
  static Artwork.CropStyle.specificRectangle.getter();
  uint64_t v2 = type metadata accessor for Artwork.CropStyle();
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 0, 1, v2);
}

uint64_t sub_100AE8358@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&UserProfile.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t sub_100AE839C@<X0>(void (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  a1();
  uint64_t v3 = type metadata accessor for Artwork.CropStyle();
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 0, 1, v3);
}

uint64_t sub_100AE8410@<X0>(char *a1@<X8>)
{
  return sub_100AE5B00((void (*)(uint64_t))&CreditArtist.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t Track.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MusicVideo();
  uint64_t v20 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Song();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Track();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v2, v11);
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v14, v11);
  if (v15 == enum case for Track.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
    sub_100AE5B00((void (*)(uint64_t))&Song.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else if (v15 == enum case for Track.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
    uint64_t v17 = v20;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v6, v14, v4);
    sub_100AE5B00((void (*)(uint64_t))&MusicVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
  }
  else
  {
    uint64_t v18 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a1, 1, 1, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t GenericMusicItem.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v118 = a1;
  uint64_t v1 = type metadata accessor for CreditArtist();
  uint64_t v116 = *(void *)(v1 - 8);
  uint64_t v117 = v1;
  __chkstk_darwin();
  uint64_t v115 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for SocialProfile();
  uint64_t v89 = *(void *)(v90 - 8);
  __chkstk_darwin();
  id v88 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for UploadedVideo();
  uint64_t v68 = *(void *)(v69 - 8);
  __chkstk_darwin();
  uint64_t v67 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for UploadedAudio();
  uint64_t v71 = *(void *)(v72 - 8);
  __chkstk_darwin();
  uint64_t v70 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for TVShow();
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin();
  double v73 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for TVSeason();
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin();
  uint64_t v76 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for TVEpisode();
  uint64_t v80 = *(void *)(v81 - 8);
  __chkstk_darwin();
  uint64_t v79 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for RecordLabel();
  uint64_t v92 = *(void *)(v93 - 8);
  __chkstk_darwin();
  uint64_t v91 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for RadioShow();
  uint64_t v95 = *(void *)(v96 - 8);
  __chkstk_darwin();
  uint64_t v94 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for Station();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin();
  uint64_t v82 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for Song();
  uint64_t v86 = *(void *)(v87 - 8);
  __chkstk_darwin();
  uint64_t v85 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for Playlist();
  uint64_t v98 = *(void *)(v99 - 8);
  __chkstk_darwin();
  uint64_t v97 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for MusicVideo();
  uint64_t v101 = *(void *)(v14 - 8);
  uint64_t v102 = v14;
  __chkstk_darwin();
  uint64_t v100 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for MusicMovie();
  uint64_t v104 = *(void *)(v16 - 8);
  uint64_t v105 = v16;
  __chkstk_darwin();
  uint64_t v103 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Genre();
  uint64_t v107 = *(void *)(v18 - 8);
  uint64_t v108 = v18;
  __chkstk_darwin();
  uint64_t v106 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for EditorialItem();
  uint64_t v110 = *(void *)(v20 - 8);
  uint64_t v111 = v20;
  __chkstk_darwin();
  uint64_t v109 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Curator();
  uint64_t v113 = *(void *)(v22 - 8);
  uint64_t v114 = v22;
  __chkstk_darwin();
  uint64_t v112 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Artist();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin();
  uint64_t v27 = (char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Album();
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin();
  uint64_t v31 = (char *)&v64 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for GenericMusicItem();
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin();
  uint64_t v66 = (char *)&v64 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v35 = __chkstk_darwin();
  double v37 = (char *)&v64 - v36;
  uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v33 + 16);
  v65((char *)&v64 - v36, v119, v32, v35);
  int v38 = (*(uint64_t (**)(char *, uint64_t))(v33 + 88))(v37, v32);
  if (v38 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v31, v37, v28);
    sub_100AE5B00((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v118);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  }
  uint64_t v40 = v118;
  if (v38 == enum case for GenericMusicItem.artist(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v37, v24);
    sub_100AE5E2C(v40);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  }
  if (v38 == enum case for GenericMusicItem.composer(_:))
  {
    uint64_t v41 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1, v41);
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v37, v32);
  }
  if (v38 == enum case for GenericMusicItem.creditArtist(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    uint64_t v42 = v115;
    uint64_t v43 = v116;
    uint64_t v44 = v117;
    (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v115, v37, v117);
    uint64_t v45 = &CreditArtist.artwork.getter;
LABEL_13:
    uint64_t v46 = (void (*)(uint64_t))v45;
    BOOL v47 = &static Artwork.CropStyle.boundedBox.getter;
LABEL_14:
    sub_100AE5B00(v46, (void (*)(uint64_t))v47, v40);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v44);
  }
  if (v38 == enum case for GenericMusicItem.curator(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    uint64_t v42 = v112;
    uint64_t v43 = v113;
    uint64_t v44 = v114;
    (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v112, v37, v114);
    uint64_t v45 = &Curator.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.editorialItem(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    uint64_t v42 = v109;
    uint64_t v43 = v110;
    uint64_t v44 = v111;
    (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v109, v37, v111);
    uint64_t v45 = &EditorialItem.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.genre(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    double v49 = v106;
    uint64_t v48 = v107;
    uint64_t v50 = v108;
    (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v106, v37, v108);
    uint64_t v51 = &Genre.artwork.getter;
LABEL_22:
    uint64_t v52 = (void (*)(uint64_t))v51;
    unint64_t v53 = &static Artwork.CropStyle.boundedBox.getter;
LABEL_23:
    sub_100AE5B00(v52, (void (*)(uint64_t))v53, v40);
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v49, v50);
  }
  if (v38 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    double v49 = v103;
    uint64_t v48 = v104;
    uint64_t v50 = v105;
    (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v103, v37, v105);
    uint64_t v51 = &MusicMovie.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    double v49 = v100;
    uint64_t v48 = v101;
    uint64_t v50 = v102;
    (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v100, v37, v102);
    uint64_t v51 = &MusicVideo.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    uint64_t v48 = v98;
    double v49 = v97;
    uint64_t v50 = v99;
    (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v97, v37, v99);
    Playlist.artworkViewModel.getter((uint64_t)v40);
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v49, v50);
  }
  if (v38 == enum case for GenericMusicItem.radioShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    uint64_t v48 = v95;
    double v49 = v94;
    uint64_t v50 = v96;
    (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v94, v37, v96);
    uint64_t v51 = &RadioShow.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.recordLabel(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    uint64_t v48 = v92;
    double v49 = v91;
    uint64_t v50 = v93;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v91, v37, v93);
    uint64_t v51 = &RecordLabel.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.socialProfile(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    uint64_t v48 = v89;
    double v49 = v88;
    uint64_t v50 = v90;
    (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v88, v37, v90);
    uint64_t v52 = (void (*)(uint64_t))&SocialProfile.artwork.getter;
    unint64_t v53 = &static Artwork.CropStyle.specificRectangle.getter;
    goto LABEL_23;
  }
  if (v38 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    uint64_t v48 = v86;
    double v49 = v85;
    uint64_t v50 = v87;
    (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v85, v37, v87);
    uint64_t v51 = &Song.artwork.getter;
    goto LABEL_22;
  }
  if (v38 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    uint64_t v43 = v83;
    uint64_t v42 = v82;
    uint64_t v44 = v84;
    (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v82, v37, v84);
    uint64_t v46 = (void (*)(uint64_t))&Station.artwork.getter;
    BOOL v47 = &static Artwork.CropStyle.specificRectangle.getter;
    goto LABEL_14;
  }
  if (v38 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    uint64_t v43 = v80;
    uint64_t v42 = v79;
    uint64_t v44 = v81;
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v79, v37, v81);
    TVEpisode.artworkViewModel.getter(v40);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v44);
  }
  if (v38 == enum case for GenericMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    uint64_t v43 = v77;
    uint64_t v42 = v76;
    uint64_t v44 = v78;
    (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v76, v37, v78);
    uint64_t v45 = &TVSeason.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    uint64_t v43 = v74;
    uint64_t v42 = v73;
    uint64_t v44 = v75;
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v73, v37, v75);
    uint64_t v45 = &TVShow.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    uint64_t v43 = v71;
    uint64_t v42 = v70;
    uint64_t v44 = v72;
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v70, v37, v72);
    uint64_t v45 = &UploadedAudio.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    uint64_t v43 = v68;
    uint64_t v42 = v67;
    uint64_t v44 = v69;
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v67, v37, v69);
    uint64_t v45 = &UploadedVideo.artwork.getter;
    goto LABEL_13;
  }
  if (v38 == enum case for GenericMusicItem.other(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v37, v32);
    swift_bridgeObjectRelease();
    uint64_t v54 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v40, 1, 1, v54);
  }
  else
  {
    if (qword_1010C8628 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    sub_100050A90(v55, (uint64_t)static Logger.artwork);
    ((void (*)(char *, uint64_t, uint64_t))v65)(v66, v119, v32);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v119 = swift_slowAlloc();
      uint64_t v120 = v119;
      *(_DWORD *)uint64_t v58 = 136315394;
      *(void *)(v58 + 4) = sub_100076010(0xD000000000000010, 0x8000000100DD3410, &v120);
      *(_WORD *)(v58 + 12) = 2080;
      sub_100AEB15C();
      uint64_t v59 = v66;
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v58 + 14) = sub_100076010(v60, v61, &v120);
      swift_bridgeObjectRelease();
      uint64_t v62 = *(void (**)(char *, uint64_t))(v33 + 8);
      v62(v59, v32);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Unhandled case for %s: %s", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v62 = *(void (**)(char *, uint64_t))(v33 + 8);
      v62(v66, v32);
    }

    uint64_t v63 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v40, 1, 1, v63);
    return ((uint64_t (*)(char *, uint64_t))v62)(v37, v32);
  }
}

uint64_t ArtworkImage.ViewModel.image(for:)(double a1, double a2)
{
  *(void *)(v3 + 32) = v2;
  *(double *)(v3 + 16) = a1;
  *(double *)(v3 + 24) = a2;
  sub_100063814(&qword_1010C94F8);
  *(void *)(v3 + 40) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Artwork.CropStyle();
  *(void *)(v3 + 48) = v4;
  *(void *)(v3 + 56) = *(void *)(v4 - 8);
  *(void *)(v3 + 64) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Artwork();
  *(void *)(v3 + 72) = v5;
  *(void *)(v3 + 80) = *(void *)(v5 - 8);
  *(void *)(v3 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_100AE9FFC, 0, 0);
}

uint64_t sub_100AE9FFC()
{
  uint64_t v1 = *((void *)v0 + 6);
  uint64_t v2 = *((void *)v0 + 7);
  uint64_t v4 = *((void *)v0 + 4);
  uint64_t v3 = *((void *)v0 + 5);
  (*(void (**)(void, uint64_t, void))(*((void *)v0 + 10) + 16))(*((void *)v0 + 11), v4, *((void *)v0 + 9));
  uint64_t v5 = type metadata accessor for ArtworkImage.ViewModel(0);
  sub_10006CAB8(v4 + *(int *)(v5 + 20), v3, &qword_1010C94F8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    if (qword_1010C8618 != -1) {
      swift_once();
    }
    uint64_t v7 = *((void *)v0 + 7);
    uint64_t v6 = *((void *)v0 + 8);
    uint64_t v9 = *((void *)v0 + 5);
    uint64_t v8 = *((void *)v0 + 6);
    uint64_t v10 = sub_100050A90(v8, (uint64_t)static Artwork.CropStyle.fallback);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
    sub_1000637B8(v9, &qword_1010C94F8);
  }
  else
  {
    (*(void (**)(void, void, void))(*((void *)v0 + 7) + 32))(*((void *)v0 + 8), *((void *)v0 + 5), *((void *)v0 + 6));
  }
  if (qword_1010C8620 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Artwork.ImageFormat();
  uint64_t v12 = sub_100050A90(v11, (uint64_t)static Artwork.ImageFormat.fallback);
  uint64_t v13 = (void *)swift_task_alloc();
  *((void *)v0 + 12) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_100AEA1E4;
  uint64_t v14 = *((void *)v0 + 8);
  double v15 = v0[2];
  double v16 = v0[3];
  return Artwork.image(for:cropStyle:format:)(v14, v12, v15, v16);
}

uint64_t sub_100AEA1E4(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  v4[13] = v1;
  swift_task_dealloc();
  uint64_t v6 = v4[11];
  uint64_t v7 = v4[10];
  uint64_t v8 = v4[9];
  uint64_t v9 = v4[7];
  uint64_t v10 = v4[6];
  if (v1)
  {
    (*(void (**)(void, uint64_t))(v9 + 8))(v4[8], v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    return _swift_task_switch(sub_100AEA444, 0, 0);
  }
  else
  {
    (*(void (**)(void, uint64_t))(v9 + 8))(v4[8], v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(uint64_t))v5[1];
    return v11(a1);
  }
}

uint64_t sub_100AEA444()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Artwork.image(for:cropStyle:format:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(void *)(v5 + 40) = a2;
  *(void *)(v5 + 48) = v4;
  *(void *)(v5 + 32) = a1;
  *(double *)(v5 + 16) = a3;
  *(double *)(v5 + 24) = a4;
  sub_100063814(&qword_1010C9518);
  *(void *)(v5 + 56) = swift_task_alloc();
  sub_100063814(&qword_1010C94F8);
  *(void *)(v5 + 64) = swift_task_alloc();
  return _swift_task_switch(sub_100AEA58C, 0, 0);
}

uint64_t sub_100AEA58C()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  id v5 = [self currentTraitCollection];
  [v5 displayScale];
  double v7 = v6;

  uint64_t v8 = type metadata accessor for Artwork.CropStyle();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v2, v4, v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v2, 0, 1, v8);
  uint64_t v10 = type metadata accessor for Artwork.ImageFormat();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v1, v3, v10);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v1, 0, 1, v10);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[9] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100AEA788;
  uint64_t v14 = v0[7];
  uint64_t v15 = v0[8];
  v16.n128_u64[0] = v0[2];
  v17.n128_u64[0] = v0[3];
  v13.n128_f64[0] = 1.0 / v7;
  return Artwork.image(width:height:pixelLength:cropStyle:format:cacheOwner:)(v15, v14, 0, 0, v16, v17, v13);
}

uint64_t sub_100AEA788(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v4 + 64);
  sub_1000637B8(*(void *)(v4 + 56), &qword_1010C9518);
  sub_1000637B8(v6, &qword_1010C94F8);
  if (v1)
  {
    return _swift_task_switch(sub_100AEA938, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    double v7 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v7(a1);
  }
}

uint64_t sub_100AEA938()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100AEA9A4(double a1, double a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1002C7E14;
  return ArtworkImage.ViewModel.image(for:)(a1, a2);
}

uint64_t ArtworkImageFetching<>.image(for:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(void *)(v5 + 40) = a2;
  *(void *)(v5 + 48) = v4;
  *(void *)(v5 + 32) = a1;
  *(double *)(v5 + 16) = a3;
  *(double *)(v5 + 24) = a4;
  sub_100063814(&qword_1010C94F8);
  *(void *)(v5 + 56) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Artwork.CropStyle();
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + 72) = *(void *)(v6 - 8);
  *(void *)(v5 + 80) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Artwork();
  *(void *)(v5 + 88) = v7;
  *(void *)(v5 + 96) = *(void *)(v7 - 8);
  *(void *)(v5 + 104) = swift_task_alloc();
  return _swift_task_switch(sub_100AEAB9C, 0, 0);
}

uint64_t sub_100AEAB9C()
{
  uint64_t v1 = *((void *)v0 + 8);
  uint64_t v2 = *((void *)v0 + 9);
  uint64_t v3 = *((void *)v0 + 7);
  uint64_t v5 = *((void *)v0 + 4);
  uint64_t v4 = *((void *)v0 + 5);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v4);
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v5, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    if (qword_1010C8618 != -1) {
      swift_once();
    }
    uint64_t v7 = *((void *)v0 + 9);
    uint64_t v6 = *((void *)v0 + 10);
    uint64_t v9 = *((void *)v0 + 7);
    uint64_t v8 = *((void *)v0 + 8);
    uint64_t v10 = sub_100050A90(v8, (uint64_t)static Artwork.CropStyle.fallback);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
    sub_1000637B8(v9, &qword_1010C94F8);
  }
  else
  {
    (*(void (**)(void, void, void))(*((void *)v0 + 9) + 32))(*((void *)v0 + 10), *((void *)v0 + 7), *((void *)v0 + 8));
  }
  if (qword_1010C8620 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Artwork.ImageFormat();
  uint64_t v12 = sub_100050A90(v11, (uint64_t)static Artwork.ImageFormat.fallback);
  __n128 v13 = (void *)swift_task_alloc();
  *((void *)v0 + 14) = v13;
  *__n128 v13 = v0;
  v13[1] = sub_100AEAD94;
  uint64_t v14 = *((void *)v0 + 10);
  double v15 = v0[2];
  double v16 = v0[3];
  return Artwork.image(for:cropStyle:format:)(v14, v12, v15, v16);
}

uint64_t sub_100AEAD94(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  v4[15] = v1;
  swift_task_dealloc();
  uint64_t v6 = v4[13];
  uint64_t v7 = v4[12];
  uint64_t v8 = v4[11];
  uint64_t v9 = v4[9];
  uint64_t v10 = v4[8];
  if (v1)
  {
    (*(void (**)(void, uint64_t))(v9 + 8))(v4[10], v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    return _swift_task_switch(sub_100AEAFF4, 0, 0);
  }
  else
  {
    (*(void (**)(void, uint64_t))(v9 + 8))(v4[10], v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(uint64_t))v5[1];
    return v11(a1);
  }
}

uint64_t sub_100AEAFF4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

char *sub_100AEB070(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C9DD0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_100AEB15C()
{
  unint64_t result = qword_1010C9500;
  if (!qword_1010C9500)
  {
    type metadata accessor for GenericMusicItem();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C9500);
  }
  return result;
}

Swift::Bool __swiftcall Text.StringOption.evaluate(_:)(Swift::String a1)
{
  uint64_t v1 = HIBYTE(a1._object) & 0xF;
  if (((uint64_t)a1._object & 0x2000000000000000) == 0) {
    uint64_t v1 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  return v1 != 0;
}

uint64_t Text.init(optional:options:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2
    && (swift_bridgeObjectRetain(),
        char v6 = sub_100AEC488(a3, a1, a2),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v6 & 1) != 0))
  {
    sub_10005D27C();
    return Text.init<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t static Edge.Set.on(_:)()
{
  uint64_t v0 = Edge.Set.init(rawValue:)();
  unsigned __int8 v1 = static Axis.Set.horizontal.getter();
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() == v1)
  {
    unsigned __int8 v2 = static Edge.Set.leading.getter();
    unsigned __int8 v3 = static Edge.Set.trailing.getter();
    unsigned __int8 v4 = Edge.Set.init(rawValue:)();
    Edge.Set.init(rawValue:)();
    if (Edge.Set.init(rawValue:)() != v2) {
      unsigned __int8 v4 = Edge.Set.init(rawValue:)();
    }
    Edge.Set.init(rawValue:)();
    if (Edge.Set.init(rawValue:)() != v3) {
      unsigned __int8 v4 = Edge.Set.init(rawValue:)();
    }
    Edge.Set.init(rawValue:)();
    if (Edge.Set.init(rawValue:)() != v4) {
      uint64_t v0 = Edge.Set.init(rawValue:)();
    }
  }
  unsigned __int8 v5 = static Axis.Set.vertical.getter();
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v5) {
    return v0;
  }
  unsigned __int8 v6 = static Edge.Set.top.getter();
  unsigned __int8 v7 = static Edge.Set.bottom.getter();
  unsigned __int8 v8 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v6) {
    unsigned __int8 v8 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v7) {
    unsigned __int8 v8 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() == v8) {
    return v0;
  }

  return Edge.Set.init(rawValue:)();
}

double EdgeInsets.init(_:length:)(char a1, double a2)
{
  if (a1) {
    static Axis.Set.vertical.getter();
  }
  else {
    static Axis.Set.horizontal.getter();
  }
  static Edge.Set.on(_:)();

  return _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(a2);
}

double EdgeInsets.init(_:length:)(double a1)
{
  static Edge.Set.on(_:)();

  return _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(a1);
}

double EdgeInsets.init(horizontal:vertical:)(double a1, double a2)
{
  return a2;
}

void EdgeInsets.affecting(_:)(uint64_t a1)
{
  static Edge.Set.all.getter();
  _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(0.0);
  int64_t v2 = 0;
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    while (v6)
      v6 &= v6 - 1;
    int64_t v8 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v8 >= v7) {
      return;
    }
    uint64_t v9 = *(void *)(v3 + 8 * v8);
    ++v2;
    if (!v9)
    {
      int64_t v2 = v8 + 1;
      if (v8 + 1 >= v7) {
        return;
      }
      uint64_t v9 = *(void *)(v3 + 8 * v2);
      if (!v9)
      {
        int64_t v2 = v8 + 2;
        if (v8 + 2 >= v7) {
          return;
        }
        uint64_t v9 = *(void *)(v3 + 8 * v2);
        if (!v9)
        {
          int64_t v2 = v8 + 3;
          if (v8 + 3 >= v7) {
            return;
          }
          uint64_t v9 = *(void *)(v3 + 8 * v2);
          if (!v9)
          {
            int64_t v2 = v8 + 4;
            if (v8 + 4 >= v7) {
              return;
            }
            uint64_t v9 = *(void *)(v3 + 8 * v2);
            if (!v9) {
              break;
            }
          }
        }
      }
    }
LABEL_23:
    uint64_t v6 = (v9 - 1) & v9;
  }
  int64_t v10 = v8 + 5;
  if (v10 >= v7) {
    return;
  }
  uint64_t v9 = *(void *)(v3 + 8 * v10);
  if (v9)
  {
    int64_t v2 = v10;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v2 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v2 >= v7) {
      return;
    }
    uint64_t v9 = *(void *)(v3 + 8 * v2);
    ++v10;
    if (v9) {
      goto LABEL_23;
    }
  }
LABEL_26:
  __break(1u);
}

double EdgeInsets.affecting(_:)(char a1)
{
  char v1 = a1 & 1;
  sub_100063814(&qword_1010C9538);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100E251D0;
  *(unsigned char *)(inited + 32) = v1;
  Swift::Int v3 = sub_100AEC650(inited);
  swift_setDeallocating();
  EdgeInsets.affecting(_:)(v3);
  double v5 = v4;
  swift_bridgeObjectRelease();
  return v5;
}

double EdgeInsets.value(for:)(char a1, double a2, double a3, double a4, double a5)
{
  double result = a2 + a4;
  double v6 = a3 + a5;
  if ((a1 & 1) == 0) {
    return v6;
  }
  return result;
}

double EdgeInsets.horizontal.getter(double a1, double a2, double a3, double a4)
{
  return a2 + a4;
}

double EdgeInsets.vertical.getter(double a1, double a2, double a3)
{
  return a1 + a3;
}

double sub_100AEB738()
{
  double result = 0.0;
  static EdgeInsets.zero = 0u;
  *(_OWORD *)&qword_10112C0E8 = 0u;
  return result;
}

long long *EdgeInsets.zero.unsafeMutableAddressor()
{
  if (qword_1010C8408 != -1) {
    swift_once();
  }
  return &static EdgeInsets.zero;
}

double static EdgeInsets.zero.getter()
{
  if (qword_1010C8408 != -1) {
    swift_once();
  }
  return *(double *)&static EdgeInsets.zero;
}

double CGSize.length(for:)(char a1, double a2, double a3)
{
  if (a1) {
    return a3;
  }
  return result;
}

BOOL CGSize.fitsWithin(_:)(double a1, double a2, double a3, double a4)
{
  return a4 <= a2 && a3 <= a1;
}

BOOL Axis.orthogonal.getter(char a1)
{
  return (a1 & 1) == 0;
}

uint64_t Axis.isOrthogonal(to:)(char a1, char a2)
{
  if (a2)
  {
    if ((a1 & 1) == 0) {
      return 1;
    }
  }
  else if (a1)
  {
    return 1;
  }
  return 0;
}

uint64_t Optional<A>.isOrthogonal(to:)(char a1, char a2)
{
  if (a2 == 2) {
    return 1;
  }
  if (a2)
  {
    if ((a1 & 1) == 0) {
      return 1;
    }
  }
  else if (a1)
  {
    return 1;
  }
  return 0;
}

uint64_t Axis.Set.init(_:)(char a1)
{
  if (a1) {
    return static Axis.Set.vertical.getter();
  }
  else {
    return static Axis.Set.horizontal.getter();
  }
}

uint64_t View.always(perform:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  a1();
  double v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16);

  return v6(a3, v3, a2);
}

double DynamicTypeSize.scaledValue(_:relativeTo:)(uint64_t a1, double a2)
{
  sub_100063814(&qword_1010C9540);
  __chkstk_darwin();
  double v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:a1];
  uint64_t v8 = type metadata accessor for DynamicTypeSize();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v6, v2, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  int64_t v10 = (void *)UIContentSizeCategory.init(_:)();
  id v11 = [self traitCollectionWithPreferredContentSizeCategory:v10];
  [v7 scaledValueForValue:v11 compatibleWithTraitCollection:a2];
  double v13 = v12;

  return v13;
}

uint64_t static Color.random(opacity:)()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002C7F14(0x20000000000001uLL);
  sub_1002C7F14(0x20000000000001uLL);
  sub_1002C7F14(0x20000000000001uLL);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Color.RGBColorSpace.sRGB(_:), v0);
  return Color.init(_:red:green:blue:opacity:)();
}

uint64_t RoundedRectangle.outset(horizontal:vertical:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for LayoutDirection();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  id v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  double v13 = (char *)&v21 - v12;
  type metadata accessor for RoundedRectangle();
  __chkstk_darwin();
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100AED1B8(v4, (uint64_t)v15, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v16 = enum case for LayoutDirection.leftToRight(_:);
  __n128 v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v17(v13, enum case for LayoutDirection.leftToRight(_:), v8);
  sub_100AED1B8((uint64_t)v15, a1, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v18 = (int *)_s21OmnidirectionalOutsetVMa();
  *(double *)(a1 + v18[5]) = a3;
  *(double *)(a1 + v18[6]) = a2;
  *(double *)(a1 + v18[7]) = a3;
  *(double *)(a1 + v18[8]) = a2;
  v17(v11, v16, v8);
  LOBYTE(v16) = static LayoutDirection.== infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v13, v8);
  sub_1006C1F5C((uint64_t)v15);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v11, v8);
  *(void *)(a1 + v18[9]) = (v16 & 1) == 0;
  return result;
}

uint64_t RoundedRectangle.outset(top:leading:bottom:trailing:layoutDirection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v7 = v6;
  uint64_t v14 = type metadata accessor for LayoutDirection();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  __n128 v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v25 - v18;
  type metadata accessor for RoundedRectangle();
  __chkstk_darwin();
  uint64_t v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100AED1B8(v7, (uint64_t)v21, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v19, a1, v14);
  sub_100AED1B8((uint64_t)v21, a2, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v22 = (int *)_s21OmnidirectionalOutsetVMa();
  *(double *)(a2 + v22[5]) = a3;
  *(double *)(a2 + v22[6]) = a4;
  *(double *)(a2 + v22[7]) = a5;
  *(double *)(a2 + v22[8]) = a6;
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for LayoutDirection.leftToRight(_:), v14);
  LOBYTE(v7) = static LayoutDirection.== infix(_:_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v19, v14);
  sub_1006C1F5C((uint64_t)v21);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v17, v14);
  *(void *)(a2 + v22[9]) = (v7 & 1) == 0;
  return result;
}

double sub_100AEC064@<D0>(int *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5 = v3;
  sub_100AED1B8(v5, a2, (uint64_t (*)(void))_s21OmnidirectionalOutsetVMa);
  uint64_t v8 = a1[6];
  *(double *)(a2 + a1[5]) = *(double *)(a2 + a1[5]) - a3;
  *(double *)(a2 + v8) = *(double *)(a2 + v8) - a3;
  uint64_t v9 = a1[8];
  *(double *)(a2 + a1[7]) = *(double *)(a2 + a1[7]) - a3;
  double result = *(double *)(a2 + v9) - a3;
  *(double *)(a2 + v9) = result;
  return result;
}

double sub_100AEC0EC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RoundedCornerStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRect.outset(by:for:)();
  sub_100AED1B8(v2, (uint64_t)v10, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, &v10[*(int *)(v8 + 28)], v4);
  Path.init(roundedRect:cornerSize:style:)();
  double result = *(double *)&v14;
  long long v12 = v15;
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v12;
  *(unsigned char *)(a1 + 32) = v16;
  return result;
}

uint64_t sub_100AEC2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100AEDA48(&qword_1010C9620, (void (*)(uint64_t))_s21OmnidirectionalOutsetVMa);

  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100AEC378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100AEDA48(&qword_1010C9620, (void (*)(uint64_t))_s21OmnidirectionalOutsetVMa);

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100AEC40C(uint64_t a1)
{
  uint64_t v2 = sub_100AEDA48(&qword_1010C9620, (void (*)(uint64_t))_s21OmnidirectionalOutsetVMa);

  return Shape.body.getter(a1, v2);
}

uint64_t sub_100AEC488(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3 = 0;
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t result = a1 + 56;
  uint64_t v5 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(result - 24);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  uint64_t v9 = v8 & v5;
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v11 = a2 & 0xFFFFFFFFFFFFLL;
  }
  while (1)
  {
    if (!v9)
    {
      int64_t v12 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (v12 >= v10) {
        return 1;
      }
      uint64_t v9 = *(void *)(result + 8 * v12);
      ++v3;
      if (!v9)
      {
        int64_t v3 = v12 + 1;
        if (v12 + 1 >= v10) {
          return 1;
        }
        uint64_t v9 = *(void *)(result + 8 * v3);
        if (!v9)
        {
          int64_t v3 = v12 + 2;
          if (v12 + 2 >= v10) {
            return 1;
          }
          uint64_t v9 = *(void *)(result + 8 * v3);
          if (!v9)
          {
            int64_t v3 = v12 + 3;
            if (v12 + 3 >= v10) {
              return 1;
            }
            uint64_t v9 = *(void *)(result + 8 * v3);
            if (!v9) {
              break;
            }
          }
        }
      }
    }
LABEL_7:
    v9 &= v9 - 1;
    if (!v11) {
      return 0;
    }
  }
  int64_t v13 = v12 + 4;
  if (v13 >= v10) {
    return 1;
  }
  uint64_t v9 = *(void *)(result + 8 * v13);
  if (v9)
  {
    int64_t v3 = v13;
    goto LABEL_7;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v10) {
      return 1;
    }
    uint64_t v9 = *(void *)(result + 8 * v3);
    ++v13;
    if (v9) {
      goto LABEL_7;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

double _s7SwiftUI10EdgeInsetsV09MusicCoreB0E_6lengthAcA0C0O3SetV_0F8Graphics7CGFloatVtcfC_0(double a1)
{
  unsigned __int8 v2 = static Edge.Set.top.getter();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() == v2) {
    double v3 = a1;
  }
  else {
    double v3 = 0.0;
  }
  static Edge.Set.leading.getter();
  Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  static Edge.Set.bottom.getter();
  Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  static Edge.Set.trailing.getter();
  Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  return v3;
}

Swift::Int sub_100AEC650(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100063814(&qword_1010C9660);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      char v7 = *(unsigned char *)(v6 + v4);
      Hasher.init(_seed:)();
      Swift::UInt8 v8 = Axis.rawValue.getter();
      Hasher._combine(_:)(v8);
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        int v15 = Axis.rawValue.getter();
        Swift::Int result = Axis.rawValue.getter();
        if (v15 == result) {
          goto LABEL_3;
        }
        uint64_t v16 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v16;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          int v17 = Axis.rawValue.getter();
          Swift::Int result = Axis.rawValue.getter();
          if (v17 == result) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(unsigned char *)(*(void *)(v3 + 48) + v11) = v7;
      uint64_t v18 = *(void *)(v3 + 16);
      BOOL v19 = __OFADD__(v18, 1);
      uint64_t v20 = v18 + 1;
      if (v19)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v20;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t _s21OmnidirectionalOutsetVMa()
{
  uint64_t result = qword_1010C95B0;
  if (!qword_1010C95B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_100AEC810()
{
  unint64_t result = qword_1010C9548;
  if (!qword_1010C9548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C9548);
  }
  return result;
}

unsigned char *_s12StringOptionOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100AEC900);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.StringOption()
{
  return &type metadata for Text.StringOption;
}

uint64_t sub_100AEC938()
{
  return sub_100AEDA48(&qword_1010C9550, (void (*)(uint64_t))_s21OmnidirectionalOutsetVMa);
}

uint64_t *sub_100AEC980(uint64_t *a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = *(int *)(type metadata accessor for RoundedRectangle() + 20);
    Swift::UInt8 v8 = (char *)v4 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v11) = *(uint64_t *)((char *)a2 + v11);
    uint64_t v12 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v12) = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  }
  return v4;
}

uint64_t sub_100AECA98(uint64_t a1)
{
  uint64_t v1 = a1 + *(int *)(type metadata accessor for RoundedRectangle() + 20);
  uint64_t v2 = type metadata accessor for RoundedCornerStyle();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

_OWORD *sub_100AECB0C(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for RoundedRectangle() + 20);
  uint64_t v7 = (char *)a1 + v6;
  Swift::UInt8 v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

void *sub_100AECBD4(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(type metadata accessor for RoundedRectangle() + 20);
  uint64_t v7 = (char *)a1 + v6;
  Swift::UInt8 v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_100AECCAC(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for RoundedRectangle() + 20);
  uint64_t v7 = (char *)a1 + v6;
  Swift::UInt8 v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_100AECD74(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for RoundedRectangle() + 20);
  uint64_t v7 = (char *)a1 + v6;
  Swift::UInt8 v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t sub_100AECE3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100AECE50);
}

uint64_t sub_100AECE50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100AECEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100AECED0);
}

uint64_t sub_100AECED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_100AECF40()
{
  uint64_t result = type metadata accessor for RoundedRectangle();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100AECFE4()
{
  unint64_t result = qword_1010C95F8;
  if (!qword_1010C95F8)
  {
    sub_10006389C(&qword_1010C9600);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C95F8);
  }
  return result;
}

unint64_t sub_100AED044()
{
  unint64_t result = qword_1010C9608;
  if (!qword_1010C9608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C9608);
  }
  return result;
}

uint64_t sub_100AED098()
{
  return sub_100AEDA48(&qword_1010C9610, (void (*)(uint64_t))_s21OmnidirectionalOutsetVMa);
}

uint64_t sub_100AED0E0()
{
  return sub_100AEDA48(&qword_1010C9618, (void (*)(uint64_t))_s21OmnidirectionalOutsetVMa);
}

uint64_t sub_100AED128()
{
  return sub_100AEDA48(&qword_1010C9620, (void (*)(uint64_t))_s21OmnidirectionalOutsetVMa);
}

uint64_t sub_100AED170()
{
  return sub_100AEDA48(&qword_1010C9550, (void (*)(uint64_t))_s21OmnidirectionalOutsetVMa);
}

uint64_t sub_100AED1B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

Swift::Int sub_100AED220(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100063814(&qword_1010C9650);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      double v7 = *(double *)(v6 + 8 * v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(0);
      if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v8 = *(void *)&v7;
      }
      else {
        Swift::UInt64 v8 = 0;
      }
      Hasher._combine(_:)(v8);
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      uint64_t v15 = *(void *)(v3 + 48);
      if (((1 << v11) & v13) != 0)
      {
        if (*(double *)(v15 + 8 * v11) == v7) {
          goto LABEL_3;
        }
        uint64_t v16 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v16;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          if (*(double *)(v15 + 8 * v11) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(double *)(v15 + 8 * v11) = v7;
      uint64_t v17 = *(void *)(v3 + 16);
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v19;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_100AED378(unint64_t a1)
{
}

Swift::Int sub_100AED398(uint64_t a1)
{
  return sub_1000C7CFC(a1, &qword_1010C9628);
}

void sub_100AED3A4(unint64_t a1)
{
}

void sub_100AED3C4(unint64_t a1, uint64_t *a2, void (*a3)(void))
{
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      sub_100063814(a2);
      uint64_t v6 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v6 = &_swiftEmptySetSingleton;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return;
  }
LABEL_9:
  uint64_t v10 = (char *)(v6 + 7);
  uint64_t v46 = v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v13 = __OFADD__(v11++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v14 = v12;
      Swift::Int v15 = NSObject._rawHashValue(seed:)(v6[5]);
      uint64_t v16 = -1 << *((unsigned char *)v6 + 32);
      unint64_t v17 = v15 & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
      uint64_t v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        a3(0);
        id v21 = *(id *)(v6[6] + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v23 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v23;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
          uint64_t v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0) {
            break;
          }
          id v24 = *(id *)(v6[6] + 8 * v17);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v10[8 * v18] = v20 | v19;
      *(void *)(v6[6] + 8 * v17) = v14;
      uint64_t v26 = v6[2];
      BOOL v13 = __OFADD__(v26, 1);
      uint64_t v27 = v26 + 1;
      if (v13) {
        goto LABEL_37;
      }
      _OWORD v6[2] = v27;
LABEL_12:
      if (v11 == v46) {
        return;
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v44 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v28 != v44)
  {
    Swift::Int v29 = v6[5];
    id v30 = *(id *)(a1 + 32 + 8 * v28);
    Swift::Int v31 = NSObject._rawHashValue(seed:)(v29);
    uint64_t v32 = -1 << *((unsigned char *)v6 + 32);
    unint64_t v33 = v31 & ~v32;
    unint64_t v34 = v33 >> 6;
    uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
    uint64_t v36 = 1 << v33;
    if (((1 << v33) & v35) != 0)
    {
      a3(0);
      id v37 = *(id *)(v6[6] + 8 * v33);
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_23;
      }
      uint64_t v39 = ~v32;
      unint64_t v33 = (v33 + 1) & v39;
      unint64_t v34 = v33 >> 6;
      uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
      uint64_t v36 = 1 << v33;
      if ((v35 & (1 << v33)) != 0)
      {
        while (1)
        {
          id v40 = *(id *)(v6[6] + 8 * v33);
          char v41 = static NSObject.== infix(_:_:)();

          if (v41) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v39;
          unint64_t v34 = v33 >> 6;
          uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
          uint64_t v36 = 1 << v33;
          if ((v35 & (1 << v33)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v8 = v46;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v8 = v46;
    }
    *(void *)&v10[8 * v34] = v36 | v35;
    *(void *)(v6[6] + 8 * v33) = v30;
    uint64_t v42 = v6[2];
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_38;
    }
    _OWORD v6[2] = v43;
LABEL_24:
    if (++v28 == v8) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

void *sub_100AED730(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  unint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v36 = (char *)&v29 - v6;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    sub_100063814(&qword_1010C9630);
    uint64_t v8 = static _SetStorage.allocate(capacity:)();
    uint64_t v9 = 0;
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v10 = v3 + 16;
    unint64_t v34 = v11;
    uint64_t v35 = v8 + 56;
    uint64_t v12 = *(unsigned __int8 *)(v10 + 64);
    uint64_t v31 = v7;
    uint64_t v32 = a1 + ((v12 + 32) & ~v12);
    uint64_t v13 = *(void *)(v10 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v10 - 8);
    id v30 = (uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 16);
    while (1)
    {
      uint64_t v33 = v9;
      v34(v36, v32 + v13 * v9, v2);
      sub_100AEDA48(&qword_1010C9638, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v16 = ~(-1 << *(unsigned char *)(v8 + 32));
      unint64_t v17 = v15 & v16;
      unint64_t v18 = (v15 & (unint64_t)v16) >> 6;
      uint64_t v19 = *(void *)(v35 + 8 * v18);
      uint64_t v20 = 1 << (v15 & v16);
      if ((v20 & v19) != 0)
      {
        while (1)
        {
          uint64_t v21 = v10;
          v34(v5, *(void *)(v8 + 48) + v17 * v13, v2);
          sub_100AEDA48(&qword_1010C9640, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
          char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v23 = *v14;
          (*v14)(v5, v2);
          if (v22) {
            break;
          }
          unint64_t v17 = (v17 + 1) & v16;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)(v35 + 8 * (v17 >> 6));
          uint64_t v20 = 1 << v17;
          uint64_t v10 = v21;
          if ((v19 & (1 << v17)) == 0) {
            goto LABEL_8;
          }
        }
        v23(v36, v2);
        uint64_t v10 = v21;
      }
      else
      {
LABEL_8:
        id v24 = v36;
        *(void *)(v35 + 8 * v18) = v20 | v19;
        Swift::Int result = (void *)(*v30)(*(void *)(v8 + 48) + v17 * v13, v24, v2);
        uint64_t v26 = *(void *)(v8 + 16);
        BOOL v27 = __OFADD__(v26, 1);
        uint64_t v28 = v26 + 1;
        if (v27)
        {
          __break(1u);
          return result;
        }
        *(void *)(v8 + 16) = v28;
      }
      uint64_t v9 = v33 + 1;
      if (v33 + 1 == v31) {
        return (void *)v8;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_100AEDA48(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_100AEDA90(uint64_t a1)
{
  return sub_1000C7CFC(a1, &qword_1010C9648);
}

unint64_t sub_100AEDA9C()
{
  unint64_t result = qword_1010C9658;
  if (!qword_1010C9658)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1010C9658);
  }
  return result;
}

uint64_t sub_100AEDADC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100014CA4(v0, qword_10112C0F8);
  sub_100050A90(v0, (uint64_t)qword_10112C0F8);
  sub_100009FF4();
  static OS_os_log.disabled.getter();
  return Logger.init(_:)();
}

unint64_t SymbolButton.Configuration.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100063814(&qword_1010D0AB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v226 = (uint64_t)&v217 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (void *)type metadata accessor for UIView.Corner();
  uint64_t v227 = (void (**)(char *, uint64_t, id))*(v4 - 1);
  id v228 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v224 = (char *)&v217 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v225 = (char *)&v217 - v7;
  unint64_t v237 = 0xD00000000000001CLL;
  unint64_t v238 = 0x8000000100DD3430;
  v231._uint64_t countAndFlagsBits = 0;
  v231._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v231._uint64_t countAndFlagsBits = 0xD000000000000017;
  v231._object = (void *)0x8000000100DD3450;
  uint64_t v8 = (int *)type metadata accessor for SymbolButton.Configuration(0);
  v9._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 10;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  String.append(_:)(v231);
  swift_bridgeObjectRelease();
  v231._uint64_t countAndFlagsBits = 0;
  v231._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v231._uint64_t countAndFlagsBits = 0x6D756D696E696D20;
  v231._object = (void *)0xEF203A20657A6953;
  v11._uint64_t countAndFlagsBits = CGSize.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 10;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  String.append(_:)(v231);
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v0 + v8[14] + 16) & 1) == 0)
  {
    v231._uint64_t countAndFlagsBits = 0;
    v231._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v231._uint64_t countAndFlagsBits = 0xD000000000000014;
    v231._object = (void *)0x8000000100DD3810;
    v13._uint64_t countAndFlagsBits = CGSize.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 10;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
  }
  v231._uint64_t countAndFlagsBits = 0;
  v231._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v236._uint64_t countAndFlagsBits = 0xD000000000000011;
  v236._object = (void *)0x8000000100DD3470;
  uint64_t v15 = v0 + v8[15];
  long long v16 = *(_OWORD *)(v15 + 16);
  Swift::String v231 = *(Swift::String *)v15;
  long long v232 = v16;
  _s3__C23NSDirectionalEdgeInsetsVMa_0(0);
  v17._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 10;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  String.append(_:)(v236);
  swift_bridgeObjectRelease();
  int v19 = *(unsigned __int8 *)(v0 + v8[19]);
  if (v19 == 2)
  {
    v20._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v20._object = (void *)0x8000000100DD3490;
    String.append(_:)(v20);
  }
  else
  {
    v231._uint64_t countAndFlagsBits = 0;
    v231._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v231._uint64_t countAndFlagsBits = 0xD000000000000010;
    v231._object = (void *)0x8000000100DD37F0;
    if (v19) {
      uint64_t v21 = 1702195828;
    }
    else {
      uint64_t v21 = 0x65736C6166;
    }
    if (v19) {
      unint64_t v22 = 0xE400000000000000;
    }
    else {
      unint64_t v22 = 0xE500000000000000;
    }
    unint64_t v23 = v22;
    String.append(_:)(*(Swift::String *)&v21);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 10;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
  }
  v231._uint64_t countAndFlagsBits = 0x3A206168706C6120;
  v231._object = (void *)0xE900000000000020;
  v25._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 10;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  String.append(_:)(v231);
  swift_bridgeObjectRelease();
  v231._uint64_t countAndFlagsBits = 0x203A20746E697420;
  v231._object = (void *)0xE800000000000000;
  v230 = v8;
  v236._uint64_t countAndFlagsBits = *(void *)(v0 + v8[18]);
  id v27 = (id)v236._countAndFlagsBits;
  uint64_t v229 = sub_100063814(&qword_1010C9268);
  v28._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 10;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  String.append(_:)(v231);
  swift_bridgeObjectRelease();
  id v30 = *(void **)(v0 + 8);
  if (v30)
  {
    uint64_t v31 = *(void **)(v0 + 16);
    uint64_t v32 = *(void **)(v0 + 24);
    char v33 = *(unsigned char *)(v0 + 40);
    uint64_t v34 = *(void *)(v0 + 48);
    uint64_t v221 = *(void *)(v0 + 56);
    uint64_t v219 = *(void *)(v0 + 64);
    uint64_t v218 = *(void **)(v0 + 72);
    LODWORD(v222) = *(unsigned __int8 *)(v0 + 80);
    uint64_t v35 = *(void **)(v0 + 96);
    uint64_t v220 = *(void *)(v0 + 88);
    id v223 = *(id *)(v0 + 112);
    uint64_t v36 = *(void *)v0;
    swift_bridgeObjectRetain();
    v37._uint64_t countAndFlagsBits = 0x6D7953209480E220;
    v37._object = (void *)0xAE000A7B206C6F62;
    String.append(_:)(v37);
    v231._uint64_t countAndFlagsBits = 0x656D616E20202020;
    v231._object = (void *)0xEB00000000203A20;
    v38._uint64_t countAndFlagsBits = v36;
    v38._object = v30;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 10;
    v39._object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    if (v31)
    {
      id v40 = [v31 bundlePath];
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;

      v231._uint64_t countAndFlagsBits = 0;
      v231._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)&v231, "    bundle : ");
      HIWORD(v231._object) = -4864;
      v44._uint64_t countAndFlagsBits = v41;
      v44._object = v43;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._uint64_t countAndFlagsBits = 10;
      v45._object = (void *)0xE100000000000000;
      String.append(_:)(v45);
      String.append(_:)(v231);
      swift_bridgeObjectRelease();
    }
    strcpy((char *)&v231, "    style : ");
    BYTE5(v231._object) = 0;
    HIWORD(v231._object) = -5120;
    v236._uint64_t countAndFlagsBits = (uint64_t)v32;
    _s3__C9TextStyleVMa_0(0);
    id v46 = v32;
    v47._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._uint64_t countAndFlagsBits = 10;
    v48._object = (void *)0xE100000000000000;
    String.append(_:)(v48);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0)
    {
      v231._uint64_t countAndFlagsBits = 0;
      v231._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v231._uint64_t countAndFlagsBits = 0xD000000000000014;
      v231._object = (void *)0x8000000100DD37D0;
      v49._uint64_t countAndFlagsBits = Double.description.getter();
      String.append(_:)(v49);
      swift_bridgeObjectRelease();
      v50._uint64_t countAndFlagsBits = 10;
      v50._object = (void *)0xE100000000000000;
      String.append(_:)(v50);
      String.append(_:)(v231);
      swift_bridgeObjectRelease();
    }
    v231._uint64_t countAndFlagsBits = 0;
    v231._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v231, "    weight : ");
    HIWORD(v231._object) = -4864;
    v236._uint64_t countAndFlagsBits = v34;
    type metadata accessor for SymbolWeight(0);
    v51._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52._uint64_t countAndFlagsBits = 10;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    strcpy((char *)&v231, "    scale : ");
    BYTE5(v231._object) = 0;
    HIWORD(v231._object) = -5120;
    v236._uint64_t countAndFlagsBits = v221;
    type metadata accessor for SymbolScale(0);
    v53._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    v54._uint64_t countAndFlagsBits = 10;
    v54._object = (void *)0xE100000000000000;
    String.append(_:)(v54);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    char v55 = v222;
    if (v222 != 255)
    {
      v231._uint64_t countAndFlagsBits = 0;
      v231._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)&v236, "    offset : ");
      HIWORD(v236._object) = -4864;
      v231._uint64_t countAndFlagsBits = v219;
      v231._object = v218;
      LOBYTE(v232) = v55 & 1;
      sub_100063814(&qword_1010D0FC0);
      v56._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      v57._uint64_t countAndFlagsBits = 10;
      v57._object = (void *)0xE100000000000000;
      String.append(_:)(v57);
      String.append(_:)(v236);
      swift_bridgeObjectRelease();
    }
    strcpy((char *)&v231, "    alpha : ");
    BYTE5(v231._object) = 0;
    HIWORD(v231._object) = -5120;
    v58._uint64_t countAndFlagsBits = Double.description.getter();
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    v59._uint64_t countAndFlagsBits = 10;
    v59._object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    v231._uint64_t countAndFlagsBits = 0x746E697420202020;
    v231._object = (void *)0xEB00000000203A20;
    v236._uint64_t countAndFlagsBits = (uint64_t)v223;
    id v60 = v223;
    v61._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v62._uint64_t countAndFlagsBits = 10;
    v62._object = (void *)0xE100000000000000;
    String.append(_:)(v62);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    if (v35)
    {
      v231._uint64_t countAndFlagsBits = 0;
      v231._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v231._uint64_t countAndFlagsBits = 0xD000000000000018;
      v231._object = (void *)0x8000000100DD37B0;
      v63._uint64_t countAndFlagsBits = v220;
      v63._object = v35;
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      v64._uint64_t countAndFlagsBits = 10;
      v64._object = (void *)0xE100000000000000;
      String.append(_:)(v64);
      String.append(_:)(v231);
      swift_bridgeObjectRelease();
    }
    v65._uint64_t countAndFlagsBits = 687392;
    v65._object = (void *)0xE300000000000000;
    String.append(_:)(v65);
  }
  else
  {
    v66._object = (void *)0x8000000100DD34B0;
    v66._uint64_t countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v66);
  }
  uint64_t v67 = *(void **)(v1 + 128);
  if (v67)
  {
    uint64_t v68 = *(void **)(v1 + 160);
    uint64_t v222 = *(void *)(v1 + 152);
    LODWORD(v223) = *(unsigned __int8 *)(v1 + 184);
    uint64_t v69 = *(void **)(v1 + 176);
    uint64_t v70 = *(void *)(v1 + 144);
    uint64_t v71 = *(void **)(v1 + 136);
    uint64_t v72 = *(void *)(v1 + 120);
    swift_bridgeObjectRetain();
    v73._object = (void *)0xAD00000A7B20656CLL;
    v73._uint64_t countAndFlagsBits = 0x746954209480E220;
    String.append(_:)(v73);
    v231._uint64_t countAndFlagsBits = 0x7478657420202020;
    v231._object = (void *)0xEB00000000203A20;
    v74._uint64_t countAndFlagsBits = v72;
    v74._object = v67;
    String.append(_:)(v74);
    swift_bridgeObjectRelease();
    v75._uint64_t countAndFlagsBits = 10;
    v75._object = (void *)0xE100000000000000;
    String.append(_:)(v75);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    strcpy((char *)&v231, "    style : ");
    BYTE5(v231._object) = 0;
    HIWORD(v231._object) = -5120;
    v236._uint64_t countAndFlagsBits = (uint64_t)v71;
    _s3__C9TextStyleVMa_0(0);
    id v76 = v71;
    v77._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v77);
    swift_bridgeObjectRelease();
    v78._uint64_t countAndFlagsBits = 10;
    v78._object = (void *)0xE100000000000000;
    String.append(_:)(v78);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    v231._uint64_t countAndFlagsBits = 0;
    v231._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v231, "    weight : ");
    HIWORD(v231._object) = -4864;
    v236._uint64_t countAndFlagsBits = v70;
    type metadata accessor for Weight(0);
    v79._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v79);
    swift_bridgeObjectRelease();
    v80._uint64_t countAndFlagsBits = 10;
    v80._object = (void *)0xE100000000000000;
    String.append(_:)(v80);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    strcpy((char *)&v231, "    alpha : ");
    BYTE5(v231._object) = 0;
    HIWORD(v231._object) = -5120;
    v81._uint64_t countAndFlagsBits = Double.description.getter();
    String.append(_:)(v81);
    swift_bridgeObjectRelease();
    v82._uint64_t countAndFlagsBits = 10;
    v82._object = (void *)0xE100000000000000;
    String.append(_:)(v82);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    v231._uint64_t countAndFlagsBits = 0x746E697420202020;
    v231._object = (void *)0xEB00000000203A20;
    v236._uint64_t countAndFlagsBits = (uint64_t)v69;
    id v83 = v69;
    v84._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v84);
    swift_bridgeObjectRelease();
    v85._uint64_t countAndFlagsBits = 10;
    v85._object = (void *)0xE100000000000000;
    String.append(_:)(v85);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    v231._uint64_t countAndFlagsBits = 0;
    v231._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v231, "    hidden : ");
    HIWORD(v231._object) = -4864;
    if (v223) {
      uint64_t v86 = 1702195828;
    }
    else {
      uint64_t v86 = 0x65736C6166;
    }
    if (v223) {
      unint64_t v87 = 0xE400000000000000;
    }
    else {
      unint64_t v87 = 0xE500000000000000;
    }
    unint64_t v88 = v87;
    String.append(_:)(*(Swift::String *)&v86);
    swift_bridgeObjectRelease();
    v89._uint64_t countAndFlagsBits = 10;
    v89._object = (void *)0xE100000000000000;
    String.append(_:)(v89);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    if (v68)
    {
      v231._uint64_t countAndFlagsBits = 0;
      v231._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v231._uint64_t countAndFlagsBits = 0xD000000000000018;
      v231._object = (void *)0x8000000100DD37B0;
      v90._uint64_t countAndFlagsBits = v222;
      v90._object = v68;
      String.append(_:)(v90);
      swift_bridgeObjectRelease();
      v91._uint64_t countAndFlagsBits = 10;
      v91._object = (void *)0xE100000000000000;
      String.append(_:)(v91);
      String.append(_:)(v231);
      swift_bridgeObjectRelease();
    }
    uint64_t v92 = 687392;
    unint64_t v93 = 0xE300000000000000;
  }
  else
  {
    uint64_t v92 = 0x1000000000000011;
    unint64_t v93 = 0x8000000100DD34D0;
  }
  String.append(_:)(*(Swift::String *)&v92);
  uint64_t v94 = *(void **)(v1 + 200);
  if (v94 == (void *)1)
  {
    v95._uint64_t countAndFlagsBits = 0x1000000000000016;
    v95._object = (void *)0x8000000100DD34F0;
    String.append(_:)(v95);
  }
  else
  {
    uint64_t v97 = *(void *)(v1 + 208);
    uint64_t v96 = *(void **)(v1 + 216);
    swift_bridgeObjectRetain();
    id v98 = v94;
    v99._object = (void *)0x8000000100DD3790;
    v99._uint64_t countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v99);
    strcpy((char *)&v231, "    alpha : ");
    BYTE5(v231._object) = 0;
    HIWORD(v231._object) = -5120;
    v100._uint64_t countAndFlagsBits = Double.description.getter();
    String.append(_:)(v100);
    swift_bridgeObjectRelease();
    v101._uint64_t countAndFlagsBits = 10;
    v101._object = (void *)0xE100000000000000;
    String.append(_:)(v101);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    v231._uint64_t countAndFlagsBits = 0x746E697420202020;
    v231._object = (void *)0xEB00000000203A20;
    v236._uint64_t countAndFlagsBits = (uint64_t)v94;
    id v102 = v98;
    v103._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v103);
    swift_bridgeObjectRelease();
    v104._uint64_t countAndFlagsBits = 10;
    v104._object = (void *)0xE100000000000000;
    String.append(_:)(v104);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    if (v96)
    {
      v231._uint64_t countAndFlagsBits = 0;
      v231._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v231._uint64_t countAndFlagsBits = 0xD000000000000018;
      v231._object = (void *)0x8000000100DD37B0;
      v105._uint64_t countAndFlagsBits = v97;
      v105._object = v96;
      String.append(_:)(v105);
      swift_bridgeObjectRelease();
      v106._uint64_t countAndFlagsBits = 10;
      v106._object = (void *)0xE100000000000000;
      String.append(_:)(v106);
      String.append(_:)(v231);
      swift_bridgeObjectRelease();
    }
    v107._uint64_t countAndFlagsBits = 687392;
    v107._object = (void *)0xE300000000000000;
    String.append(_:)(v107);
    swift_bridgeObjectRelease();
  }
  uint64_t v108 = *(void **)(v1 + 288);
  if (v108)
  {
    int v109 = *(_DWORD *)(v1 + 280);
    uint64_t v110 = *(void *)(v1 + 272);
    v231._uint64_t countAndFlagsBits = 0;
    v231._object = (void *)0xE000000000000000;
    id v111 = v108;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v236._uint64_t countAndFlagsBits = 0x726F42209480E220;
    v236._object = (void *)0xAE00203A20726564;
    v231._uint64_t countAndFlagsBits = v110;
    LOBYTE(v231._object) = v109 & 1;
    *(void *)&long long v232 = v111;
    id v112 = v111;
    v113._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v113);
    swift_bridgeObjectRelease();
    v114._uint64_t countAndFlagsBits = 10;
    v114._object = (void *)0xE100000000000000;
    String.append(_:)(v114);
    String.append(_:)(v236);

    swift_bridgeObjectRelease();
  }
  else
  {
    v115._object = (void *)0x8000000100DD3510;
    v115._uint64_t countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v115);
  }
  uint64_t v116 = v230;
  uint64_t v117 = v226;
  sub_100AEF70C(v1 + v230[9], v226);
  uint64_t v119 = v227;
  id v118 = v228;
  if (((unsigned int (*)(uint64_t, uint64_t, id))v227[6])(v117, 1, v228) == 1)
  {
    sub_100AEF774(v117);
    v120._object = (void *)0x8000000100DD3530;
    v120._uint64_t countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v120);
  }
  else
  {
    uint64_t v121 = v225;
    v119[4](v225, v117, v118);
    v231._uint64_t countAndFlagsBits = 0;
    v231._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v231._uint64_t countAndFlagsBits = 0x726F43209480E220;
    v231._object = (void *)0xAE00203A2072656ELL;
    v119[2](v224, (uint64_t)v121, v118);
    v122._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v122);
    swift_bridgeObjectRelease();
    v123._uint64_t countAndFlagsBits = 10;
    v123._object = (void *)0xE100000000000000;
    String.append(_:)(v123);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    ((void (*)(char *, id))v119[1])(v121, v118);
  }
  uint64_t v124 = *(void **)(v1 + 224);
  if (v124 == (void *)1)
  {
    v125._uint64_t countAndFlagsBits = 0x1000000000000014;
    v125._object = (void *)0x8000000100DD3550;
    String.append(_:)(v125);
  }
  else
  {
    uint64_t v127 = *(void **)(v1 + 232);
    unint64_t v126 = *(void **)(v1 + 240);
    long long v128 = *(void **)(v1 + 264);
    uint64_t v226 = *(void *)(v1 + 256);
    uint64_t v129 = *(unsigned __int8 *)(v1 + 248);
    swift_bridgeObjectRetain();
    id v130 = v124;
    id v228 = v127;
    uint64_t v227 = v126;
    v131._uint64_t countAndFlagsBits = 0x1000000000000010;
    v131._object = (void *)0x8000000100DD3710;
    String.append(_:)(v131);
    if (v124)
    {
      v231._uint64_t countAndFlagsBits = 0;
      v231._object = (void *)0xE000000000000000;
      id v132 = v130;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      v231._uint64_t countAndFlagsBits = 0xD000000000000017;
      v231._object = (void *)0x8000000100DD3770;
      id v133 = v132;
      id v134 = [v133 description];
      uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v137 = v136;

      v138._uint64_t countAndFlagsBits = v135;
      v138._object = v137;
      String.append(_:)(v138);
      swift_bridgeObjectRelease();
      v139._uint64_t countAndFlagsBits = 10;
      v139._object = (void *)0xE100000000000000;
      String.append(_:)(v139);
      String.append(_:)(v231);

      swift_bridgeObjectRelease();
    }
    if (v127)
    {
      v231._uint64_t countAndFlagsBits = 0;
      v231._object = (void *)0xE000000000000000;
      id v140 = v228;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      v231._uint64_t countAndFlagsBits = 0xD000000000000017;
      v231._object = (void *)0x8000000100DD3750;
      id v141 = v140;
      id v142 = [v141 description];
      uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v145 = v144;

      v146._uint64_t countAndFlagsBits = v143;
      v146._object = v145;
      String.append(_:)(v146);
      swift_bridgeObjectRelease();
      v147._uint64_t countAndFlagsBits = 10;
      v147._object = (void *)0xE100000000000000;
      String.append(_:)(v147);
      String.append(_:)(v231);

      swift_bridgeObjectRelease();
    }
    if (v126)
    {
      v231._uint64_t countAndFlagsBits = 0;
      v231._object = (void *)0xE000000000000000;
      Swift::Int v148 = v227;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v231._uint64_t countAndFlagsBits = 0xD000000000000014;
      v231._object = (void *)0x8000000100DD3730;
      uint64_t v149 = v148;
      id v150 = [v149 description];
      uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v153 = v152;

      v154._uint64_t countAndFlagsBits = v151;
      v154._object = v153;
      String.append(_:)(v154);
      swift_bridgeObjectRelease();
      v155._uint64_t countAndFlagsBits = 10;
      v155._object = (void *)0xE100000000000000;
      String.append(_:)(v155);
      String.append(_:)(v231);

      swift_bridgeObjectRelease();
    }
    uint64_t v116 = v230;
    if (v129 != 2)
    {
      strcpy((char *)&v231, "    color : ");
      BYTE5(v231._object) = 0;
      HIWORD(v231._object) = -5120;
      LOBYTE(v236._countAndFlagsBits) = v129 & 1;
      v156._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v156);
      swift_bridgeObjectRelease();
      v157._uint64_t countAndFlagsBits = 10;
      v157._object = (void *)0xE100000000000000;
      String.append(_:)(v157);
      String.append(_:)(v231);
      swift_bridgeObjectRelease();
    }
    if (v128)
    {
      strcpy((char *)&v231, "    group : ");
      BYTE5(v231._object) = 0;
      HIWORD(v231._object) = -5120;
      swift_bridgeObjectRetain();
      v158._uint64_t countAndFlagsBits = v226;
      v158._object = v128;
      String.append(_:)(v158);
      swift_bridgeObjectRelease();
      v159._uint64_t countAndFlagsBits = 10;
      v159._object = (void *)0xE100000000000000;
      String.append(_:)(v159);
      String.append(_:)(v231);
      swift_bridgeObjectRelease();
    }
    v160._uint64_t countAndFlagsBits = 687392;
    v160._object = (void *)0xE300000000000000;
    String.append(_:)(v160);
    swift_bridgeObjectRelease();
  }
  uint64_t v161 = v1 + v116[10];
  uint64_t v162 = *(void **)v161;
  if (*(void *)v161)
  {
    uint64_t v164 = *(void *)(v161 + 40);
    uint64_t v163 = *(void **)(v161 + 48);
    uint64_t v166 = *(void *)(v161 + 24);
    uint64_t v165 = *(void *)(v161 + 32);
    uint64_t v167 = *(void **)(v161 + 8);
    uint64_t v168 = *(void *)(v161 + 16);
    v231._uint64_t countAndFlagsBits = 0;
    v231._object = (void *)0xE000000000000000;
    sub_100AEF7D4(v162, (uint64_t)v167, v168, v166, v165, v164, v163);
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v236._uint64_t countAndFlagsBits = 0x1000000000000013;
    v236._object = (void *)0x8000000100DD36F0;
    v231._uint64_t countAndFlagsBits = (uint64_t)v162;
    v231._object = v167;
    *(void *)&long long v232 = v168;
    *((void *)&v232 + 1) = v166;
    uint64_t v233 = v165;
    uint64_t v234 = v164;
    uint64_t v235 = v163;
    id v169 = v163;
    id v170 = v162;
    v171._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v171);
    swift_bridgeObjectRelease();
    v172._uint64_t countAndFlagsBits = 10;
    v172._object = (void *)0xE100000000000000;
    String.append(_:)(v172);
    String.append(_:)(v236);
    swift_bridgeObjectRelease();
    uint64_t v173 = v164;
    uint64_t v116 = v230;
    sub_100AE59D4(v162, (uint64_t)v167, v168, v166, v165, v173, v163);
  }
  else
  {
    v174._uint64_t countAndFlagsBits = 0x1000000000000017;
    v174._object = (void *)0x8000000100DD3570;
    String.append(_:)(v174);
  }
  unint64_t v175 = (uint64_t *)(v1 + v116[11]);
  v176 = (void *)v175[2];
  if (v176 == (void *)1)
  {
    v177._uint64_t countAndFlagsBits = 0x1000000000000011;
    v177._object = (void *)0x8000000100DD3590;
    String.append(_:)(v177);
  }
  else
  {
    uint64_t v179 = *v175;
    uint64_t v178 = v175[1];
    id v180 = v176;
    v181._uint64_t countAndFlagsBits = 0x646142209480E220;
    v181._object = (void *)0xAD00000A7B206567;
    String.append(_:)(v181);
    v231._uint64_t countAndFlagsBits = 0;
    v231._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v231._uint64_t countAndFlagsBits = 0xD000000000000014;
    v231._object = (void *)0x8000000100DD36D0;
    v182._uint64_t countAndFlagsBits = Double.description.getter();
    String.append(_:)(v182);
    swift_bridgeObjectRelease();
    v183._uint64_t countAndFlagsBits = 10;
    v183._object = (void *)0xE100000000000000;
    String.append(_:)(v183);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    strcpy((char *)&v231, "    alpha : ");
    BYTE5(v231._object) = 0;
    HIWORD(v231._object) = -5120;
    v184._uint64_t countAndFlagsBits = Double.description.getter();
    String.append(_:)(v184);
    swift_bridgeObjectRelease();
    v185._uint64_t countAndFlagsBits = 10;
    v185._object = (void *)0xE100000000000000;
    String.append(_:)(v185);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    v231._uint64_t countAndFlagsBits = 0x746E697420202020;
    v231._object = (void *)0xEB00000000203A20;
    v236._uint64_t countAndFlagsBits = (uint64_t)v176;
    id v186 = v180;
    v187._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v187);
    swift_bridgeObjectRelease();
    v188._uint64_t countAndFlagsBits = 10;
    v188._object = (void *)0xE100000000000000;
    String.append(_:)(v188);
    String.append(_:)(v231);
    swift_bridgeObjectRelease();
    v189._uint64_t countAndFlagsBits = 687392;
    v189._object = (void *)0xE300000000000000;
    String.append(_:)(v189);
    sub_1008329C4(v179, v178, (uint64_t)v176);
  }
  uint64_t v190 = (unsigned __int8 *)(v1 + v230[16]);
  int v191 = *v190;
  uint64_t v192 = (void *)*((void *)v190 + 1);
  uint64_t v193 = (void *)*((void *)v190 + 2);
  int v194 = v190[24];
  v195._uint64_t countAndFlagsBits = 0x1000000000000015;
  v195._object = (void *)0x8000000100DD35B0;
  String.append(_:)(v195);
  v231._uint64_t countAndFlagsBits = 0;
  v231._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v231._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v231._object = (void *)0x8000000100DD35D0;
  if (v191) {
    uint64_t v196 = 1702195828;
  }
  else {
    uint64_t v196 = 0x65736C6166;
  }
  if (v191) {
    unint64_t v197 = 0xE400000000000000;
  }
  else {
    unint64_t v197 = 0xE500000000000000;
  }
  unint64_t v198 = v197;
  String.append(_:)(*(Swift::String *)&v196);
  swift_bridgeObjectRelease();
  v199._uint64_t countAndFlagsBits = 10;
  v199._object = (void *)0xE100000000000000;
  String.append(_:)(v199);
  String.append(_:)(v231);
  swift_bridgeObjectRelease();
  if (v192)
  {
    v231._uint64_t countAndFlagsBits = 0;
    v231._object = (void *)0xE000000000000000;
    id v200 = v192;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    v231._uint64_t countAndFlagsBits = 0xD000000000000021;
    v231._object = (void *)0x8000000100DD36A0;
    v236._uint64_t countAndFlagsBits = (uint64_t)v200;
    type metadata accessor for UIContentSizeCategory(0);
    id v201 = v200;
    v202._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v202);
    swift_bridgeObjectRelease();
    v203._uint64_t countAndFlagsBits = 10;
    v203._object = (void *)0xE100000000000000;
    String.append(_:)(v203);
    String.append(_:)(v231);

    swift_bridgeObjectRelease();
    if (v193)
    {
LABEL_72:
      v231._uint64_t countAndFlagsBits = 0;
      v231._object = (void *)0xE000000000000000;
      id v204 = v193;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      v231._uint64_t countAndFlagsBits = 0xD000000000000021;
      v231._object = (void *)0x8000000100DD3670;
      v236._uint64_t countAndFlagsBits = (uint64_t)v204;
      type metadata accessor for UIContentSizeCategory(0);
      id v205 = v204;
      v206._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v206);
      swift_bridgeObjectRelease();
      v207._uint64_t countAndFlagsBits = 10;
      v207._object = (void *)0xE100000000000000;
      String.append(_:)(v207);
      String.append(_:)(v231);

      swift_bridgeObjectRelease();
      goto LABEL_75;
    }
  }
  else
  {
    v208._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    v208._object = (void *)0x8000000100DD35F0;
    String.append(_:)(v208);
    if (v193) {
      goto LABEL_72;
    }
  }
  v209._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v209._object = (void *)0x8000000100DD3620;
  String.append(_:)(v209);
LABEL_75:
  v231._uint64_t countAndFlagsBits = 0;
  v231._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v231._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v231._object = (void *)0x8000000100DD3650;
  if (v194) {
    uint64_t v210 = 1702195828;
  }
  else {
    uint64_t v210 = 0x65736C6166;
  }
  if (v194) {
    unint64_t v211 = 0xE400000000000000;
  }
  else {
    unint64_t v211 = 0xE500000000000000;
  }
  unint64_t v212 = v211;
  String.append(_:)(*(Swift::String *)&v210);
  swift_bridgeObjectRelease();
  v213._uint64_t countAndFlagsBits = 10;
  v213._object = (void *)0xE100000000000000;
  String.append(_:)(v213);
  String.append(_:)(v231);
  swift_bridgeObjectRelease();
  v214._uint64_t countAndFlagsBits = 687392;
  v214._object = (void *)0xE300000000000000;
  String.append(_:)(v214);
  v215._uint64_t countAndFlagsBits = 41;
  v215._object = (void *)0xE100000000000000;
  String.append(_:)(v215);
  return v237;
}

uint64_t sub_100AEF70C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010D0AB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AEF774(uint64_t a1)
{
  uint64_t v2 = sub_100063814(&qword_1010D0AB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100AEF7D4(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (result)
  {
    id v8 = result;
    id v7 = a7;
    return v8;
  }
  return result;
}

id static UIColor.MusicTint.normal.getter()
{
  return sub_100916124(&qword_1010C8418, (void **)&static UIColor.MusicTint.normal);
}

uint64_t sub_100AEF83C(uint64_t a1)
{
  return sub_100011EEC(a1, (uint64_t)sub_100AEF864, (uint64_t)&unk_10100A2E8, &static UIColor.MusicTint.rollover);
}

id sub_100AEF864(void *a1)
{
  id v2 = [a1 userInterfaceStyle];
  id v3 = [a1 accessibilityContrast];
  id v4 = v3;
  if (!v2) {
    goto LABEL_6;
  }
  if (v2 == (id)2)
  {
    sub_10004DD0C();
    double v5 = 1.0;
    uint64_t v6 = 255;
    if (v4 == (id)1)
    {
      uint64_t v7 = 138;
      uint64_t v8 = 156;
    }
    else
    {
      uint64_t v7 = 95;
      uint64_t v8 = 122;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_10004DD0C();
      double v5 = 1.0;
      uint64_t v6 = 162;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      sub_10004DD0C();
      double v5 = 1.0;
      uint64_t v6 = 198;
      uint64_t v7 = 0;
      uint64_t v8 = 7;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *UIColor.MusicTint.rollover.unsafeMutableAddressor()
{
  if (qword_1010C8420 != -1) {
    swift_once();
  }
  return &static UIColor.MusicTint.rollover;
}

id static UIColor.MusicTint.rollover.getter()
{
  return sub_100916124(&qword_1010C8420, (void **)&static UIColor.MusicTint.rollover);
}

uint64_t sub_100AEF9FC(uint64_t a1)
{
  return sub_100011EEC(a1, (uint64_t)sub_100AEFA24, (uint64_t)&unk_10100A2C0, &static UIColor.MusicTint.pressed);
}

id sub_100AEFA24(void *a1)
{
  id v2 = [a1 userInterfaceStyle];
  id v3 = [a1 accessibilityContrast];
  id v4 = v3;
  if (!v2) {
    goto LABEL_6;
  }
  if (v2 == (id)2)
  {
    sub_10004DD0C();
    double v5 = 1.0;
    uint64_t v6 = 255;
    if (v4 == (id)1)
    {
      uint64_t v7 = 113;
      uint64_t v8 = 131;
    }
    else
    {
      uint64_t v7 = 70;
      uint64_t v8 = 97;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_10004DD0C();
      double v5 = 1.0;
      uint64_t v6 = 187;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      sub_10004DD0C();
      double v5 = 1.0;
      uint64_t v6 = 224;
      uint64_t v7 = 9;
      uint64_t v8 = 33;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *UIColor.MusicTint.pressed.unsafeMutableAddressor()
{
  if (qword_1010C8428 != -1) {
    swift_once();
  }
  return &static UIColor.MusicTint.pressed;
}

id static UIColor.MusicTint.pressed.getter()
{
  return sub_100916124(&qword_1010C8428, (void **)&static UIColor.MusicTint.pressed);
}

uint64_t sub_100AEFBBC(uint64_t a1)
{
  return sub_100011EEC(a1, (uint64_t)sub_100AEFBE4, (uint64_t)&unk_10100A298, &static UIColor.MusicTint.deepPressed);
}

id sub_100AEFBE4(void *a1)
{
  id v2 = [a1 userInterfaceStyle];
  id v3 = [a1 accessibilityContrast];
  id v4 = v3;
  if (!v2) {
    goto LABEL_6;
  }
  if (v2 == (id)2)
  {
    sub_10004DD0C();
    double v5 = 1.0;
    uint64_t v6 = 255;
    if (v4 == (id)1)
    {
      uint64_t v7 = 138;
      uint64_t v8 = 156;
    }
    else
    {
      uint64_t v7 = 95;
      uint64_t v8 = 122;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_10004DD0C();
      double v5 = 1.0;
      uint64_t v6 = 162;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      sub_10004DD0C();
      double v5 = 1.0;
      uint64_t v6 = 198;
      uint64_t v7 = 0;
      uint64_t v8 = 7;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *UIColor.MusicTint.deepPressed.unsafeMutableAddressor()
{
  if (qword_1010C8430 != -1) {
    swift_once();
  }
  return &static UIColor.MusicTint.deepPressed;
}

id static UIColor.MusicTint.deepPressed.getter()
{
  return sub_100916124(&qword_1010C8430, (void **)&static UIColor.MusicTint.deepPressed);
}

uint64_t sub_100AEFD7C(uint64_t a1)
{
  return sub_100011EEC(a1, (uint64_t)sub_100AEFDA4, (uint64_t)&unk_10100A270, &static UIColor.MusicTint.disabled);
}

id sub_100AEFDA4(void *a1)
{
  id v2 = [a1 userInterfaceStyle];
  id v3 = [a1 accessibilityContrast];
  id v4 = v3;
  if (!v2) {
    goto LABEL_6;
  }
  if (v2 == (id)2)
  {
    sub_10004DD0C();
    uint64_t v5 = 250;
    if (v4 == (id)1)
    {
      uint64_t v6 = 88;
      uint64_t v7 = 106;
    }
    else
    {
      uint64_t v6 = 45;
      uint64_t v7 = 72;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v5, v6, v7, 0.35);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      sub_10004DD0C();
      uint64_t v5 = 214;
      uint64_t v6 = 0;
      uint64_t v7 = 23;
    }
    else
    {
      sub_10004DD0C();
      uint64_t v5 = 250;
      uint64_t v6 = 35;
      uint64_t v7 = 59;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v5, v6, v7, 0.35);
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *UIColor.MusicTint.disabled.unsafeMutableAddressor()
{
  if (qword_1010C8438 != -1) {
    swift_once();
  }
  return &static UIColor.MusicTint.disabled;
}

id static UIColor.MusicTint.disabled.getter()
{
  return sub_100916124(&qword_1010C8438, (void **)&static UIColor.MusicTint.disabled);
}

uint64_t sub_100AEFF54(uint64_t a1)
{
  return sub_100AF01F0(a1, &qword_1010C8418, (id *)&static UIColor.MusicTint.normal, &static Color.MusicTint.normal);
}

uint64_t *Color.MusicTint.normal.unsafeMutableAddressor()
{
  if (qword_1010C8440 != -1) {
    swift_once();
  }
  return &static Color.MusicTint.normal;
}

uint64_t static Color.MusicTint.normal.getter()
{
  return sub_100AF02B0(&qword_1010C8440);
}

uint64_t sub_100AEFFF0(uint64_t a1)
{
  return sub_100AF01F0(a1, &qword_1010C8420, (id *)&static UIColor.MusicTint.rollover, &static Color.MusicTint.rollover);
}

uint64_t *Color.MusicTint.rollover.unsafeMutableAddressor()
{
  if (qword_1010C8448 != -1) {
    swift_once();
  }
  return &static Color.MusicTint.rollover;
}

uint64_t static Color.MusicTint.rollover.getter()
{
  return sub_100AF02B0(&qword_1010C8448);
}

uint64_t sub_100AF008C(uint64_t a1)
{
  return sub_100AF01F0(a1, &qword_1010C8428, (id *)&static UIColor.MusicTint.pressed, &static Color.MusicTint.pressed);
}

uint64_t *Color.MusicTint.pressed.unsafeMutableAddressor()
{
  if (qword_1010C8450 != -1) {
    swift_once();
  }
  return &static Color.MusicTint.pressed;
}

uint64_t static Color.MusicTint.pressed.getter()
{
  return sub_100AF02B0(&qword_1010C8450);
}

uint64_t sub_100AF0128(uint64_t a1)
{
  return sub_100AF01F0(a1, &qword_1010C8430, (id *)&static UIColor.MusicTint.deepPressed, &static Color.MusicTint.deepPressed);
}

uint64_t *Color.MusicTint.deepPressed.unsafeMutableAddressor()
{
  if (qword_1010C8458 != -1) {
    swift_once();
  }
  return &static Color.MusicTint.deepPressed;
}

uint64_t static Color.MusicTint.deepPressed.getter()
{
  return sub_100AF02B0(&qword_1010C8458);
}

uint64_t sub_100AF01C4(uint64_t a1)
{
  return sub_100AF01F0(a1, &qword_1010C8438, (id *)&static UIColor.MusicTint.disabled, &static Color.MusicTint.disabled);
}

uint64_t sub_100AF01F0(uint64_t a1, void *a2, id *a3, uint64_t *a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  id v6 = *a3;
  uint64_t result = Color.init(_:)();
  *a4 = result;
  return result;
}

uint64_t *Color.MusicTint.disabled.unsafeMutableAddressor()
{
  if (qword_1010C8460 != -1) {
    swift_once();
  }
  return &static Color.MusicTint.disabled;
}

uint64_t static Color.MusicTint.disabled.getter()
{
  return sub_100AF02B0(&qword_1010C8460);
}

uint64_t sub_100AF02B0(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_retain();
}

ValueMetadata *type metadata accessor for UIColor.MusicTint()
{
  return &type metadata for UIColor.MusicTint;
}

ValueMetadata *type metadata accessor for Color.MusicTint()
{
  return &type metadata for Color.MusicTint;
}

UITraitCollection __swiftcall UITraitCollection.init(mediaLibrary:)(MPMediaLibrary_optional mediaLibrary)
{
  Class isa = mediaLibrary.value.super.isa;
  sub_100063814(&qword_1010C9B10);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100E251C0;
  id v3 = self;
  id v4 = isa;
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v3 _traitCollectionWithValue:v4 forTraitNamed:v5];

  if (v6)
  {
    uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    *(void *)(v2 + 32) = v6;
    specialized Array._endMutation()();
    sub_100057778(0, &qword_1010C9478);
    Class v9 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v10 = [ObjCClassFromMetadata traitCollectionWithTraitsFromCollections:v9];

    return (UITraitCollection)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id UITraitCollection.mediaLibrary.getter()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 _valueForTraitNamed:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100056914((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_100057778(0, &qword_1010C9668);
    if (swift_dynamicCast()) {
      return (id)v4;
    }
  }
  else
  {
    sub_10005DF18((uint64_t)v6);
  }
  id result = [self deviceMediaLibrary];
  if (!result) {
    __break(1u);
  }
  return result;
}

UITraitCollection __swiftcall UITraitCollection.init(legacyLibraryFilter:)(__C::MPMediaLibraryFilteringOptions legacyLibraryFilter)
{
  sub_100AF0920(legacyLibraryFilter.rawValue);
  return result;
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.legacyLibraryFilter.getter()
{
  return sub_100AF0A90();
}

BOOL UITraitCollection.isMediaPicker.getter()
{
  uint64_t v0 = (void *)UITraitCollection.mediaPickerConfiguration.getter();
  NSString v1 = v0;
  if (v0) {

  }
  return v1 != 0;
}

uint64_t UITraitCollection.mediaPickerConfiguration.getter()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 _valueForTraitNamed:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100056914((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    sub_100057778(0, &qword_1010C9678);
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_10005DF18((uint64_t)v6);
    return 0;
  }
}

uint64_t UITraitCollection.init(mediaPickerConfiguration:)(void *a1)
{
  id v2 = self;
  id v3 = a1;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v2 _traitCollectionWithValue:v3 forTraitNamed:v4];

  if (v5)
  {
    v6.rawValue = *(void *)MPMediaLibraryFilteringOptions.none.unsafeMutableAddressor();
    if (![v3 showsItemsWithProtectedAssets]) {
      v6.rawValue |= 0x20;
    }
    if (![v3 showsCloudItems]) {
      v6.rawValue |= 2;
    }
    sub_100057778(0, &qword_1010C9478);
    Class isa = UITraitCollection.init(mediaPickerLibraryFilter:)(v6).super.isa;
    uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    sub_100063814(&qword_1010C9B10);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100E252E0;
    *(void *)(v9 + 32) = v5;
    *(void *)(v9 + 40) = isa;
    specialized Array._endMutation()();
    id v10 = v5;
    Swift::String v11 = isa;
    Class v12 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v13 = [ObjCClassFromMetadata traitCollectionWithTraitsFromCollections:v12];

    return (uint64_t)v13;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

UITraitCollection __swiftcall UITraitCollection.init(mediaPickerLibraryFilter:)(__C::MPMediaLibraryFilteringOptions mediaPickerLibraryFilter)
{
  sub_100AF0920(mediaPickerLibraryFilter.rawValue);
  return result;
}

void sub_100AF0920(uint64_t a1)
{
  sub_100063814(&qword_1010C9B10);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100E251C0;
  id v3 = self;
  id v4 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:a1];
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v3 _traitCollectionWithValue:v4 forTraitNamed:v5];

  if (v6)
  {
    uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    *(void *)(v2 + 32) = v6;
    specialized Array._endMutation()();
    sub_100057778(0, &qword_1010C9478);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [ObjCClassFromMetadata traitCollectionWithTraitsFromCollections:isa];
  }
  else
  {
    __break(1u);
  }
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.mediaPickerLibraryFilter.getter()
{
  return sub_100AF0A90();
}

__C::MPMediaLibraryFilteringOptions sub_100AF0A90()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 _valueForTraitNamed:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100056914((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    sub_100057778(0, &qword_1010C9670);
    if (swift_dynamicCast()) {
      v3.value.super.super.Class isa = v5;
    }
    else {
      v3.value.super.super.Class isa = 0;
    }
  }
  else
  {
    sub_10005DF18((uint64_t)v7);
    v3.value.super.super.Class isa = 0;
  }
  return MPMediaLibraryFilteringOptions.init(_:)(v3);
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.combinedLibraryRequestFilter.getter()
{
  Swift::UInt rawValue = UITraitCollection.legacyLibraryFilter.getter().rawValue;
  return (__C::MPMediaLibraryFilteringOptions)(UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | rawValue);
}

uint64_t UITraitCollection.configure<A, B>(libraryRequest:)(void *a1)
{
  id v2 = [a1 mediaLibrary];
  id v3 = UITraitCollection.mediaLibrary.getter();
  id v4 = v3;
  if (v2)
  {
    sub_100057778(0, &qword_1010C9668);
    id v5 = v2;
    char v6 = static NSObject.== infix(_:_:)();

    if (v6)
    {
      uint64_t v7 = 0;
      goto LABEL_6;
    }
  }
  else
  {
  }
  id v8 = UITraitCollection.mediaLibrary.getter();
  [a1 setMediaLibrary:v8];

  uint64_t v7 = 1;
LABEL_6:
  unint64_t v9 = (unint64_t)[a1 filteringOptions];
  Swift::UInt rawValue = UITraitCollection.legacyLibraryFilter.getter().rawValue;
  if (((UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | rawValue) & ~v9) != 0)
  {
    Swift::UInt v11 = UITraitCollection.legacyLibraryFilter.getter().rawValue;
    [a1 setFilteringOptions:UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | v11 | (unint64_t)[a1 filteringOptions]];
    return 1;
  }
  return v7;
}

unint64_t sub_100AF0CE4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    id v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063814(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  id v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10006CAB8(v11, (uint64_t)&v18, a3);
    uint64_t v12 = v18;
    unint64_t result = a4(v18);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v12;
    unint64_t result = (unint64_t)sub_10007664C(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100AF0E14(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063814(&qword_1010C96F8);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  id v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100071D70(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    _OWORD v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100AF0F30(uint64_t a1)
{
  return sub_100AF0F3C(a1, &qword_1010C96F0);
}

unint64_t sub_100AF0F3C(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063814(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    id v8 = *v5;
    swift_bridgeObjectRetain();
    id v9 = v8;
    unint64_t result = sub_100071D70(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v12 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100AF1054(uint64_t a1)
{
  return sub_100AF0CE4(a1, &qword_1010C96D8, &qword_1010C96E0, sub_100019FA8);
}

unint64_t sub_100AF107C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100063814(&qword_1010C96B8);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (id *)(a1 + 40);
  while (1)
  {
    char v5 = *((unsigned char *)v4 - 8);
    id v6 = *v4;
    unint64_t result = sub_100AFD08C(v5);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    *(void *)(v2[7] + 8 * result) = v6;
    uint64_t v9 = v2[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    _OWORD v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void static UIButton.Configuration.barButtonConfiguration(imageName:)()
{
  uint64_t v0 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.gray()();
  id v8 = [self configurationWithPointSize:6 weight:2 scale:15.0];
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [self systemImageNamed:v9];

  if (v10)
  {
    id v11 = [v10 imageWithConfiguration:v8];
  }
  UIButton.Configuration.image.setter();
  id v12 = [self tertiarySystemFillColor];
  UIButton.Configuration.baseBackgroundColor.setter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v4);
  UIButton.Configuration.cornerStyle.setter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for UIButton.Configuration.Size.small(_:), v0);
  UIButton.Configuration.buttonSize.setter();
}

void static UIButton.Configuration.selectedBarButtonConfiguration(imageName:)()
{
  uint64_t v0 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.gray()();
  id v8 = [self configurationWithPointSize:6 weight:2 scale:15.0];
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [self systemImageNamed:v9];

  if (v10)
  {
    id v11 = [v10 imageWithConfiguration:v8];
  }
  UIButton.Configuration.image.setter();
  id v12 = self;
  id v13 = [v12 tintColor];
  UIButton.Configuration.baseBackgroundColor.setter();
  id v14 = [v12 systemBackgroundColor];
  UIButton.Configuration.baseForegroundColor.setter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v4);
  UIButton.Configuration.cornerStyle.setter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for UIButton.Configuration.Size.small(_:), v0);
  UIButton.Configuration.buttonSize.setter();
}

id sub_100AF1690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = *(uint64_t (**)(long long *, uint64_t))(a1 + 32);
  if (a2)
  {
    *((void *)&v9 + 1) = swift_getObjectType();
    *(void *)&long long v8 = a2;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  long long v8 = 0u;
  long long v9 = 0u;
  if (a3)
  {
LABEL_3:
    sub_100057778(0, &qword_1010C9728);
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
LABEL_4:
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v6 = (void *)v5(&v8, v3);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10005DF18((uint64_t)&v8);

  return v6;
}

id static UIBarButtonItem.contextBarButtonItem(_:)(uint64_t a1, uint64_t a2)
{
  id v2 = _sSo8UIButtonC11MusicCoreUIE16contextBarButtonyABSo6UIMenuCSgypSg_SaySo0H7ElementCGSgtcSgFZ_0(a1, a2);
  id v3 = [objc_allocWithZone((Class)UIBarButtonItem) initWithCustomView:v2];

  return v3;
}

uint64_t UITraitCollection.isAccessibilitySizeCategory.getter()
{
  id v1 = [v0 preferredContentSizeCategory];
  char v2 = UIContentSizeCategory.isAccessibilityCategory.getter();

  return v2 & 1;
}

Swift::Bool __swiftcall UIViewController.scrollToTopIfPossible()()
{
  id v1 = [v0 contentScrollView];
  if (!v1) {
    return 0;
  }
  char v2 = v1;
  unsigned __int8 v3 = [v1 _scrollToTopIfPossible:1];

  return v3;
}

Swift::Bool __swiftcall UIViewController.focusOnSearchBarIfPossible()()
{
  id v1 = [v0 navigationItem];
  id v2 = [v1 searchController];

  if (!v2) {
    return 0;
  }
  id v3 = [v2 searchBar];
  unsigned int v4 = [v3 canBecomeFirstResponder];

  if (v4)
  {
    id v5 = [v2 searchBar];
    unsigned __int8 v6 = [v5 becomeFirstResponder];

    id v2 = v5;
  }
  else
  {
    unsigned __int8 v6 = 0;
  }

  return v6;
}

id static UIKeyCommand.findKeyCommand(affecting:)()
{
  uint64_t v0 = type metadata accessor for Locale();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for String.LocalizationValue();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  id v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  uint64_t v7 = &v15[-v6];
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100057778(0, &qword_1010C9688);
  swift_retain();
  String.LocalizationValue.init(stringLiteral:)();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v2 + 16))(v5, v7, v1);
  if (qword_1010C8350 != -1) {
    swift_once();
  }
  id v9 = (id)qword_10112BE80;
  static Locale.current.getter();
  uint64_t v10 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v12 = v11;
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v7, v1);
  id v13 = UIKeyCommand.init(title:input:modifierFlags:handler:)(v10, v12, 102, 0xE100000000000000, 1572864, (uint64_t)sub_100AF29CC, v8);
  swift_release();
  return v13;
}

void sub_100AF1BA8()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    [Strong setActive:1];
    id v2 = [v1 searchBar];
    [v2 becomeFirstResponder];

    uint64_t v3 = UISearchController.searchText.getter();
    if (v4)
    {
      uint64_t v5 = v3;
      unint64_t v6 = v4;
      swift_bridgeObjectRelease();
      uint64_t v7 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) == 0) {
        uint64_t v7 = v5 & 0xFFFFFFFFFFFFLL;
      }
      if (v7)
      {
        id v8 = [v1 searchBar];
        id v9 = [v8 searchTextField];

        [v9 selectAll:v1];
      }
    }
  }
}

uint64_t UISearchController.searchText.getter()
{
  uint64_t v1 = type metadata accessor for CharacterSet();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [v0 searchBar];
  id v6 = [v5 text];

  if (!v6) {
    return 0;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v15[0] = v7;
  v15[1] = v9;
  static CharacterSet.newlines.getter();
  sub_10005D27C();
  uint64_t v10 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRelease();
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v10;
}

id static UIKeyCommand.findKeyCommand(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Locale();
  __chkstk_darwin();
  uint64_t v4 = type metadata accessor for String.LocalizationValue();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v9 = &v15[-v8];
  sub_100057778(0, &qword_1010C9688);
  String.LocalizationValue.init(stringLiteral:)();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v7, v9, v4);
  if (qword_1010C8350 != -1) {
    swift_once();
  }
  id v10 = (id)qword_10112BE80;
  static Locale.current.getter();
  uint64_t v11 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v13 = v12;
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v9, v4);
  swift_retain();
  return UIKeyCommand.init(title:input:modifierFlags:handler:)(v11, v13, 102, 0xE100000000000000, 1572864, a1, a2);
}

id UIKeyCommand.init(title:input:modifierFlags:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [ObjCClassFromMetadata keyCommandWithInput:v11 modifierFlags:a5 action:"music_handleKeyCommand:"];

  id v13 = v12;
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 setTitle:v14];

  uint64_t v15 = qword_1010C8468;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  BOOL v16 = (const void *)qword_1010C9680;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a6;
  *(void *)(v17 + 24) = a7;
  swift_retain();
  sub_100063814(&qword_1010C9690);
  uint64_t v18 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  objc_setAssociatedObject(v13, v16, v18, (void *)3);

  swift_unknownObjectRelease();
  swift_release_n();
  return v13;
}

uint64_t UIKeyCommand.handler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_1010C8468 != -1) {
    swift_once();
  }
  uint64_t v6 = (const void *)qword_1010C9680;
  if (a1)
  {
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = a1;
    *(void *)(v7 + 24) = a2;
    swift_retain();
    sub_100063814(&qword_1010C9690);
    uint64_t v8 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  }
  else
  {
    uint64_t v8 = 0;
  }
  objc_setAssociatedObject(v3, v6, v8, (void *)3);
  sub_10006ADFC(a1);
  return swift_unknownObjectRelease();
}

uint64_t (*UIKeyCommand.handler.getter())(uint64_t a1)
{
  if (qword_1010C8468 != -1) {
    swift_once();
  }
  if (objc_getAssociatedObject(v0, (const void *)qword_1010C9680))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  sub_100056914((uint64_t)v3, (uint64_t)v4);
  if (v5)
  {
    sub_100063814(&qword_1010C9690);
    if (swift_dynamicCast())
    {
      *(_OWORD *)(swift_allocObject() + 16) = v2;
      return sub_10004ACB8;
    }
  }
  else
  {
    sub_10005DF18((uint64_t)v4);
  }
  return 0;
}

void (*UIKeyCommand.handler.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  id v3[4] = v1;
  *uint64_t v3 = UIKeyCommand.handler.getter();
  v3[1] = v4;
  return sub_100AF248C;
}

void sub_100AF248C(uint64_t **a1, char a2)
{
  long long v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  if (a2)
  {
    sub_10007B674(**a1);
    if (qword_1010C8468 != -1) {
      swift_once();
    }
    uint64_t v5 = (const void *)qword_1010C9680;
    if (v4)
    {
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v4;
      *(void *)(v6 + 24) = v3;
      _OWORD v2[2] = (uint64_t)sub_10083D284;
      _OWORD v2[3] = v6;
      swift_retain();
      sub_100063814(&qword_1010C9690);
      uint64_t v7 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }
    else
    {
      uint64_t v7 = 0;
    }
    objc_setAssociatedObject((id)v2[4], v5, v7, (void *)3);
    sub_10006ADFC(v4);
    swift_unknownObjectRelease();
    sub_10006ADFC(*v2);
  }
  else
  {
    if (qword_1010C8468 != -1) {
      swift_once();
    }
    uint64_t v8 = (const void *)qword_1010C9680;
    if (v4)
    {
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v4;
      *(void *)(v9 + 24) = v3;
      _OWORD v2[2] = (uint64_t)sub_10083D284;
      _OWORD v2[3] = v9;
      swift_retain();
      sub_100063814(&qword_1010C9690);
      id v10 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }
    else
    {
      id v10 = 0;
    }
    objc_setAssociatedObject((id)v2[4], v8, v10, (void *)3);
    sub_10006ADFC(v4);
    swift_unknownObjectRelease();
  }

  free(v2);
}

uint64_t sub_100AF266C()
{
  uint64_t result = swift_slowAlloc();
  qword_1010C9680 = result;
  return result;
}

id UIKeyCommand.pioritizedOverSystemBehavior(_:)(char a1)
{
  [v1 setWantsPriorityOverSystemBehavior:a1 & 1];

  return v3;
}

id UIFont.monospacedDigits()()
{
  swift_getObjectType();
  sub_100063814(&qword_1010C9698);
  uint64_t inited = swift_initStackObject();
  long long v2 = (void *)UIFontFeatureTypeIdentifierKey_ForNewSwiftAPI;
  *(void *)(inited + 32) = UIFontFeatureTypeIdentifierKey_ForNewSwiftAPI;
  *(void *)(inited + 40) = 6;
  *(_OWORD *)(inited + 16) = xmmword_100E251B0;
  id v3 = (void *)UIFontFeatureSelectorIdentifierKey_ForNewSwiftAPI;
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + 72) = v3;
  *(void *)(inited + 104) = &type metadata for Int;
  *(void *)(inited + 80) = 0;
  id v4 = v2;
  id v5 = v3;
  unint64_t v6 = sub_100AF0CE4(inited, &qword_1010C9710, &qword_1010C9718, sub_100019FA8);
  id v7 = [v0 fontDescriptor];
  sub_100063814(&qword_1010C96A0);
  uint64_t v8 = swift_initStackObject();
  *(_OWORD *)(v8 + 16) = xmmword_100E251D0;
  *(void *)(v8 + 32) = UIFontDescriptorFeatureSettingsAttribute;
  sub_100063814(&qword_1010C96A8);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100E251D0;
  *(void *)(v9 + 32) = v6;
  *(void *)(v8 + 64) = sub_100063814(&qword_1010C96B0);
  *(void *)(v8 + 40) = v9;
  id v10 = UIFontDescriptorFeatureSettingsAttribute;
  sub_100AF0CE4(v8, &qword_1010C9700, &qword_1010C9708, sub_100019FA8);
  _s3__C13AttributeNameVMa_0(0);
  sub_100AF2A0C();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = [v7 fontDescriptorByAddingAttributes:isa];

  id v13 = [(id)swift_getObjCClassFromMetadata() fontWithDescriptor:v12 size:0.0];
  return v13;
}

uint64_t sub_100AF2994()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_100AF29CC()
{
}

uint64_t sub_100AF29D4()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t sub_100AF2A0C()
{
  unint64_t result = qword_1010C8C60;
  if (!qword_1010C8C60)
  {
    _s3__C13AttributeNameVMa_0(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C8C60);
  }
  return result;
}

uint64_t *UIView.Border.artwork.unsafeMutableAddressor()
{
  if (qword_1010C8470 != -1) {
    swift_once();
  }
  return &static UIView.Border.artwork;
}

uint64_t UIView.Corner.medium.unsafeMutableAddressor()
{
  return sub_100AF30D4(&qword_1010C8490, (uint64_t)static UIView.Corner.medium);
}

uint64_t UIView.Corner.small.unsafeMutableAddressor()
{
  return sub_100AF30D4(&qword_1010C8488, (uint64_t)static UIView.Corner.small);
}

void sub_100AF2B08()
{
  id v0 = objc_allocWithZone((Class)UIColor);
  v5[4] = sub_1007C345C;
  void v5[5] = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  _OWORD v5[2] = sub_10004DA48;
  _OWORD v5[3] = &unk_10100A450;
  uint64_t v1 = _Block_copy(v5);
  [v0 initWithDynamicProvider:v1];
  _Block_release(v1);
  swift_release();
  UIView.Border.init(thickness:color:)();
  static UIView.Border.artwork = v2;
  byte_10112C168 = v3 & 1;
  qword_10112C170 = v4;
}

uint64_t static UIView.Border.artwork.getter()
{
  if (qword_1010C8470 != -1) {
    swift_once();
  }
  uint64_t v0 = static UIView.Border.artwork;
  id v1 = (id)qword_10112C170;
  return v0;
}

void sub_100AF2C68()
{
  id v0 = [self currentDevice];
  id v1 = [v0 userInterfaceIdiom];

  byte_1010C9738 = v1 == (id)6;
}

uint64_t sub_100AF2CCC()
{
  uint64_t v0 = type metadata accessor for UIView.Corner();
  sub_100014CA4(v0, static UIView.Corner.extraSmall);
  sub_100050A90(v0, (uint64_t)static UIView.Corner.extraSmall);
  if (qword_1010C8478 != -1) {
    swift_once();
  }
  return static UIView.Corner.value(_:continuous:)();
}

uint64_t UIView.Corner.extraSmall.unsafeMutableAddressor()
{
  return sub_100AF30D4(&qword_1010C8480, (uint64_t)static UIView.Corner.extraSmall);
}

uint64_t static UIView.Corner.extraSmall.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100AF314C(&qword_1010C8480, (uint64_t)static UIView.Corner.extraSmall, a1);
}

uint64_t sub_100AF2DB0()
{
  uint64_t v0 = type metadata accessor for UIView.Corner();
  sub_100014CA4(v0, static UIView.Corner.small);
  sub_100050A90(v0, (uint64_t)static UIView.Corner.small);
  if (qword_1010C8478 != -1) {
    swift_once();
  }
  return static UIView.Corner.value(_:continuous:)();
}

uint64_t static UIView.Corner.small.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100AF314C(&qword_1010C8488, (uint64_t)static UIView.Corner.small, a1);
}

uint64_t sub_100AF2E70()
{
  uint64_t v0 = type metadata accessor for UIView.Corner();
  sub_100014CA4(v0, static UIView.Corner.medium);
  sub_100050A90(v0, (uint64_t)static UIView.Corner.medium);
  if (qword_1010C8478 != -1) {
    swift_once();
  }
  return static UIView.Corner.value(_:continuous:)();
}

uint64_t static UIView.Corner.medium.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100AF314C(&qword_1010C8490, (uint64_t)static UIView.Corner.medium, a1);
}

uint64_t sub_100AF2F30()
{
  uint64_t v0 = type metadata accessor for UIView.Corner();
  sub_100014CA4(v0, static UIView.Corner.large);
  sub_100050A90(v0, (uint64_t)static UIView.Corner.large);
  if (qword_1010C8478 != -1) {
    swift_once();
  }
  return static UIView.Corner.value(_:continuous:)();
}

uint64_t UIView.Corner.large.unsafeMutableAddressor()
{
  return sub_100AF30D4(&qword_1010C8498, (uint64_t)static UIView.Corner.large);
}

uint64_t static UIView.Corner.large.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100AF314C(&qword_1010C8498, (uint64_t)static UIView.Corner.large, a1);
}

uint64_t sub_100AF3014()
{
  uint64_t v0 = type metadata accessor for UIView.Corner();
  sub_100014CA4(v0, static UIView.Corner.extraLarge);
  sub_100050A90(v0, (uint64_t)static UIView.Corner.extraLarge);
  if (qword_1010C8478 != -1) {
    swift_once();
  }
  return static UIView.Corner.value(_:continuous:)();
}

uint64_t UIView.Corner.extraLarge.unsafeMutableAddressor()
{
  return sub_100AF30D4(&qword_1010C84A0, (uint64_t)static UIView.Corner.extraLarge);
}

uint64_t sub_100AF30D4(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for UIView.Corner();

  return sub_100050A90(v3, a2);
}

uint64_t static UIView.Corner.extraLarge.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100AF314C(&qword_1010C84A0, (uint64_t)static UIView.Corner.extraLarge, a1);
}

uint64_t sub_100AF314C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for UIView.Corner();
  uint64_t v6 = sub_100050A90(v5, a2);
  id v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_100AF31E4(uint64_t a1)
{
  return sub_100011EEC(a1, (uint64_t)sub_100AF320C, (uint64_t)&unk_10100A4C0, &static HI.Color.prominentTextColor);
}

id sub_100AF320C(void *a1)
{
  return sub_100AF32C4(a1, 224, 9, 33);
}

void *HI.Color.prominentTextColor.unsafeMutableAddressor()
{
  if (qword_1010C84A8 != -1) {
    swift_once();
  }
  return &static HI.Color.prominentTextColor;
}

id static HI.Color.prominentTextColor.getter()
{
  return sub_100916124(&qword_1010C84A8, (void **)&static HI.Color.prominentTextColor);
}

uint64_t sub_100AF328C(uint64_t a1)
{
  return sub_100011EEC(a1, (uint64_t)sub_100AF32B4, (uint64_t)&unk_10100A498, &static HI.Color.prominentBackgroundColor);
}

id sub_100AF32B4(void *a1)
{
  return sub_100AF32C4(a1, 250, 35, 59);
}

id sub_100AF32C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = [a1 userInterfaceStyle];
  sub_10004DD0C();
  if (v7 == (id)2)
  {
    uint64_t v8 = 250;
    uint64_t v9 = 45;
    uint64_t v10 = 72;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = a3;
    uint64_t v10 = a4;
  }
  return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v8, v9, v10, 1.0);
}

void *HI.Color.prominentBackgroundColor.unsafeMutableAddressor()
{
  if (qword_1010C84B0 != -1) {
    swift_once();
  }
  return &static HI.Color.prominentBackgroundColor;
}

id static HI.Color.prominentBackgroundColor.getter()
{
  return sub_100916124(&qword_1010C84B0, (void **)&static HI.Color.prominentBackgroundColor);
}

ValueMetadata *type metadata accessor for HI.Color()
{
  return &type metadata for HI.Color;
}

double HI.SizeClass.rawValue.getter(char a1)
{
  return dbl_100E54FE0[a1];
}

double HI.SizeClass.gutter.getter(char a1)
{
  return dbl_100E54EC0[a1];
}

double HI.SizeClass.peek.getter()
{
  return 36.0;
}

_UNKNOWN **static HI.SizeClass.allCases.getter()
{
  return &off_101008558;
}

BOOL sub_100AF3408(char *a1, char *a2)
{
  return sub_100AF53DC(*a1, *a2);
}

uint64_t sub_100AF3414@<X0>(double *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s11MusicCoreUI2HIO9SizeClassO8rawValueAESg0B8Graphics7CGFloatV_tcfC_0(*a1);
  *a2 = result;
  return result;
}

double sub_100AF3440@<D0>(double *a1@<X8>)
{
  double result = dbl_100E54FE0[*v1];
  *a1 = result;
  return result;
}

void sub_100AF3458(void *a1@<X8>)
{
  *a1 = &off_101008558;
}

BOOL sub_100AF3468(char *a1, char *a2)
{
  return _s11MusicCoreUI2HIO9SizeClassO1loiySbAE_AEtFZ_0(*a1, *a2);
}

BOOL sub_100AF3474(char *a1, char *a2)
{
  return sub_100AF3480(*a1, *a2);
}

BOOL sub_100AF3480(char a1, char a2)
{
  return dbl_100E54FE0[a2] >= dbl_100E54FE0[a1];
}

BOOL sub_100AF34A4(char *a1, char *a2)
{
  return sub_100AF34B0(*a1, *a2);
}

BOOL sub_100AF34B0(char a1, char a2)
{
  return dbl_100E54FE0[a1] >= dbl_100E54FE0[a2];
}

BOOL sub_100AF34D4(char *a1, char *a2)
{
  return sub_100AF34E0(*a1, *a2);
}

BOOL sub_100AF34E0(char a1, char a2)
{
  return dbl_100E54FE0[a2] < dbl_100E54FE0[a1];
}

Swift::Int sub_100AF3504()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100AF3554((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_100AF354C(uint64_t a1)
{
  sub_100AF3554(a1, *v1);
}

void sub_100AF3554(uint64_t a1, char a2)
{
}

uint64_t sub_100AF3588()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100AF3618()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100AF3554((uint64_t)v3, v1);
  return Hasher._finalize()();
}

double sub_100AF365C(char a1, char a2, char a3)
{
  switch(a3)
  {
    case 1:
      double result = 1.0;
      switch(a1)
      {
        case 1:
          goto LABEL_20;
        case 2:
          double result = 3.0;
          break;
        case 3:
          if (a2) {
            double result = 4.0;
          }
          break;
        default:
          return result;
      }
      return result;
    case 2:
      double result = 3.0;
      switch(a1)
      {
        case 1:
          return result;
        case 2:
          double result = 4.0;
          break;
        case 3:
LABEL_20:
          double result = 2.0;
          break;
        default:
          double result = 1.0;
          if (a2) {
            double result = 3.0;
          }
          break;
      }
      return result;
    case 3:
      uint64_t v3 = a1;
      uint64_t v4 = (double *)&unk_100E54F60;
      return v4[v3];
    case 4:
      uint64_t v3 = a1;
      uint64_t v4 = (double *)&unk_100E54F80;
      return v4[v3];
    case 5:
      double result = 3.0;
      switch(a1)
      {
        case 1:
          double result = 6.0;
          break;
        case 2:
          double result = 7.0;
          break;
        case 3:
          double result = 5.0;
          if (a2) {
            double result = 9.0;
          }
          break;
        default:
          return result;
      }
      return result;
    case 6:
      double result = 7.0;
      switch(a1)
      {
        case 1:
          return result;
        case 2:
          double result = 8.0;
          break;
        case 3:
          double result = 6.0;
          if (a2) {
            double result = 28.0;
          }
          break;
        default:
          double result = 4.0;
          if (a2) {
            double result = 7.0;
          }
          break;
      }
      return result;
    case 7:
      double result = 5.0;
      switch(a1)
      {
        case 1:
          double result = 10.0;
          break;
        case 2:
          double result = 12.0;
          break;
        case 3:
          double result = 7.0;
          if (a2) {
            double result = 15.0;
          }
          break;
        default:
          return result;
      }
      return result;
    default:
      uint64_t v3 = a1;
      uint64_t v4 = (double *)&unk_100E54F40;
      return v4[v3];
  }
}

double sub_100AF38A0(char a1, char a2, char a3)
{
  switch(a3)
  {
    case 1:
      if (a1 != 3) {
        return 1.0;
      }
      double result = 3.0;
      if ((a2 & 1) == 0) {
        return 1.0;
      }
      return result;
    case 2:
      if (!a1) {
        goto LABEL_11;
      }
      return 1.0;
    case 5:
    case 7:
      if (a1 != 3) {
        return 1.0;
      }
      goto LABEL_11;
    case 6:
      if (a1 != 3)
      {
        if (!a1)
        {
LABEL_11:
          double result = 2.0;
          if (a2) {
            return result;
          }
        }
        return 1.0;
      }
      double result = 5.0;
      if ((a2 & 1) == 0) {
        return 1.0;
      }
      return result;
    default:
      return 1.0;
  }
}

_UNKNOWN **static HI.Grid.Variant.allCases.getter()
{
  return &off_101008580;
}

void sub_100AF3958(void *a1@<X8>)
{
  *a1 = &off_1010085A8;
}

uint64_t Lyrics.TextLine.agentAlignment.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t Lyrics.TextLine.direction.getter()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t Lyrics.TextLine.lyricsDirection.getter()
{
  return *(unsigned __int8 *)(v0 + 26);
}

double Lyrics.TextLine.primaryVocalsStartTime.getter()
{
  return *(double *)(v0 + 40);
}

double Lyrics.TextLine.primaryVocalsEndTime.getter()
{
  return *(double *)(v0 + 48);
}

void HI.Grid.Metrics.init(width:variant:swiping:isAccessibilitySize:)(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  if (a5 <= 374.0)
  {
    char v13 = 0;
    double v10 = 10.0;
    double v11 = 16.0;
    goto LABEL_19;
  }
  double v10 = 12.0;
  double v11 = 20.0;
  if (a5 <= 500.0)
  {
    char v13 = 1;
    goto LABEL_19;
  }
  if (a5 <= 726.0)
  {
    char v13 = 2;
    goto LABEL_19;
  }
  double v10 = 20.0;
  if (a5 <= 981.0)
  {
    char v13 = 3;
LABEL_18:
    double v11 = 34.0;
    goto LABEL_19;
  }
  if (a5 <= 1194.0)
  {
    char v13 = 4;
    goto LABEL_18;
  }
  if (a5 <= 2500.0) {
    char v12 = 6;
  }
  else {
    char v12 = 7;
  }
  if (a5 > 1500.0) {
    char v13 = v12;
  }
  else {
    char v13 = 5;
  }
  double v11 = 34.0;
LABEL_19:
  double v14 = a5 - (v11 + v11);
  if (a3)
  {
    id v15 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:UIFontTextStyleBody];
    [v15 scaledValueForValue:1.0];
    double v17 = v16;

    double v18 = round(sub_100AF365C(a1, a2 & 1, v13) * (1.0 / (v17 * 0.7)));
  }
  else
  {
    double v18 = sub_100AF365C(a1, a2 & 1, v13);
  }
  char v19 = a2 & 1;
  double v20 = sub_100AF38A0(a1, v19, v13);
  double v21 = v20 * ((v14 - v10 * (v18 + -1.0)) / v18);
  double v22 = v20 + -1.0;
  double v23 = v10 * v22;
  BOOL v24 = v22 <= 0.0;
  double v25 = -0.0;
  if (!v24) {
    double v25 = v23;
  }
  double v26 = v25 + v21;
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = v10;
  *(double *)(a4 + 16) = v11;
  *(unsigned char *)(a4 + 24) = v13;
  BOOL v27 = v18 == 1.0 || v26 > 300.0;
  *(unsigned char *)(a4 + 25) = a1;
  *(unsigned char *)(a4 + 26) = v19;
  *(double *)(a4 + 32) = v14;
  *(double *)(a4 + 40) = v18;
  if ((a3 & 1) == 0) {
    BOOL v27 = 0;
  }
  *(double *)(a4 + 48) = v26;
  *(unsigned char *)(a4 + 56) = v27;
}

void HI.Grid.Metrics.hash(into:)()
{
  if ((*(void *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *(void *)v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((*(void *)(v0 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)(v0 + 8);
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((*(void *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)(v0 + 16);
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(qword_100E54FA0[*(char *)(v0 + 24)]);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 25));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 26) & 1);
  if ((*(void *)(v0 + 32) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)(v0 + 32);
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((*(void *)(v0 + 40) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)(v0 + 40);
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((*(void *)(v0 + 48) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = *(void *)(v0 + 48);
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 56) & 1);
}

Swift::Int HI.Grid.Metrics.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100AF3D18()
{
  return Hasher._finalize()();
}

uint64_t sub_100AF3D54(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  long long v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return _s11MusicCoreUI2HIO4GridO7MetricsV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)v5, (uint64_t)v7) & 1;
}

const char *HI.IndexBar.NumberOfItemsRequirement.artists.unsafeMutableAddressor()
{
  return "2";
}

uint64_t static HI.IndexBar.NumberOfItemsRequirement.artists.getter()
{
  return 50;
}

const char *HI.IndexBar.NumberOfItemsRequirement.default.unsafeMutableAddressor()
{
  return "d";
}

uint64_t static HI.IndexBar.NumberOfItemsRequirement.default.getter()
{
  return 100;
}

double sub_100AF3DD8()
{
  double result = 12.0;
  static Corner.search = xmmword_100E525B0;
  byte_10112C210 = 0;
  return result;
}

long long *Corner.search.unsafeMutableAddressor()
{
  if (qword_1010C84B8 != -1) {
    swift_once();
  }
  return &static Corner.search;
}

uint64_t static Corner.search.getter()
{
  if (qword_1010C84B8 != -1) {
    swift_once();
  }
  return static Corner.search;
}

double sub_100AF3E94()
{
  double result = 16.0;
  static Corner.featured = xmmword_100E525C0;
  byte_10112C230 = 0;
  return result;
}

long long *Corner.featured.unsafeMutableAddressor()
{
  if (qword_1010C84C0 != -1) {
    swift_once();
  }
  return &static Corner.featured;
}

uint64_t static Corner.featured.getter()
{
  if (qword_1010C84C0 != -1) {
    swift_once();
  }
  return static Corner.featured;
}

void sub_100AF3F50()
{
  static HI.HoverOutset.list = 0x4024000000000000;
}

uint64_t *HI.HoverOutset.list.unsafeMutableAddressor()
{
  if (qword_1010C84C8 != -1) {
    swift_once();
  }
  return &static HI.HoverOutset.list;
}

double static HI.HoverOutset.list.getter()
{
  return sub_100AE17DC(&qword_1010C84C8, (uint64_t)&static HI.HoverOutset.list);
}

void sub_100AF3FD0()
{
  static HI.HoverOutset.grid = 0x4028000000000000;
}

uint64_t *HI.HoverOutset.grid.unsafeMutableAddressor()
{
  if (qword_1010C84D0 != -1) {
    swift_once();
  }
  return &static HI.HoverOutset.grid;
}

double static HI.HoverOutset.grid.getter()
{
  return sub_100AE17DC(&qword_1010C84D0, (uint64_t)&static HI.HoverOutset.grid);
}

void sub_100AF4050()
{
  static HI.HoverOutset.text = 0x4010000000000000;
}

uint64_t *HI.HoverOutset.text.unsafeMutableAddressor()
{
  if (qword_1010C84D8 != -1) {
    swift_once();
  }
  return &static HI.HoverOutset.text;
}

double static HI.HoverOutset.text.getter()
{
  return sub_100AE17DC(&qword_1010C84D8, (uint64_t)&static HI.HoverOutset.text);
}

void sub_100AF40D0()
{
  static HI.BottomPlayer.Ornament.overlappingdouble Height = Int.seconds.getter(20);
}

uint64_t *HI.BottomPlayer.Ornament.overlappingHeight.unsafeMutableAddressor()
{
  if (qword_1010C84E0 != -1) {
    swift_once();
  }
  return &static HI.BottomPlayer.Ornament.overlappingHeight;
}

double static HI.BottomPlayer.Ornament.overlappingHeight.getter()
{
  return sub_100AE17DC(&qword_1010C84E0, (uint64_t)&static HI.BottomPlayer.Ornament.overlappingHeight);
}

double sub_100AF4164()
{
  if (qword_1010C84E0 != -1) {
    swift_once();
  }
  double result = -*(double *)&static HI.BottomPlayer.Ornament.overlappingHeight;
  static HI.BottomPlayer.Ornament.offset = 0;
  *(double *)&qword_10112C260 = -*(double *)&static HI.BottomPlayer.Ornament.overlappingHeight;
  return result;
}

uint64_t *HI.BottomPlayer.Ornament.offset.unsafeMutableAddressor()
{
  if (qword_1010C84E8 != -1) {
    swift_once();
  }
  return &static HI.BottomPlayer.Ornament.offset;
}

double static HI.BottomPlayer.Ornament.offset.getter()
{
  if (qword_1010C84E8 != -1) {
    swift_once();
  }
  return *(double *)&static HI.BottomPlayer.Ornament.offset;
}

double static HI.BottomPlayer.size(dynamicTypeSize:)(uint64_t a1)
{
  sub_100063814(&qword_1010C9540);
  __chkstk_darwin();
  long long v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DynamicTypeSize();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  id v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v14 - v8;
  sub_100AF4754(a1, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100AF47BC((uint64_t)v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v3, v4);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DynamicTypeSize.accessibility1(_:), v4);
    sub_100AF481C();
    char v10 = dispatch thunk of static Comparable.< infix(_:_:)();
    double v11 = *(void (**)(char *, uint64_t))(v5 + 8);
    v11(v7, v4);
    v11(v9, v4);
    if ((v10 & 1) == 0) {
      return 924.0;
    }
  }
  return 784.0;
}

void sub_100AF4468()
{
  static HI.BottomPlayer.buttonSpacing = Int.seconds.getter(16);
}

uint64_t *HI.BottomPlayer.buttonSpacing.unsafeMutableAddressor()
{
  if (qword_1010C84F0 != -1) {
    swift_once();
  }
  return &static HI.BottomPlayer.buttonSpacing;
}

double static HI.BottomPlayer.buttonSpacing.getter()
{
  return sub_100AE17DC(&qword_1010C84F0, (uint64_t)&static HI.BottomPlayer.buttonSpacing);
}

void sub_100AF44FC()
{
  static HI.BottomPlayer.contentHorizontalPadding = Int.seconds.getter(16);
}

uint64_t *HI.BottomPlayer.contentHorizontalPadding.unsafeMutableAddressor()
{
  if (qword_1010C84F8 != -1) {
    swift_once();
  }
  return &static HI.BottomPlayer.contentHorizontalPadding;
}

double static HI.BottomPlayer.contentHorizontalPadding.getter()
{
  return sub_100AE17DC(&qword_1010C84F8, (uint64_t)&static HI.BottomPlayer.contentHorizontalPadding);
}

uint64_t _s11MusicCoreUI2HIO4GridO7MetricsV23__derived_struct_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16)
    && dbl_100E54FE0[*(char *)(a1 + 24)] == dbl_100E54FE0[*(char *)(a2 + 24)]
    && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25)
    && ((*(unsigned __int8 *)(a1 + 26) ^ *(unsigned __int8 *)(a2 + 26)) & 1) == 0
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48))
  {
    return (((*(unsigned char *)(a1 + 56) & 1) == 0) ^ *(unsigned __int8 *)(a2 + 56)) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL _s11MusicCoreUI2HIO9SizeClassO1loiySbAE_AEtFZ_0(char a1, char a2)
{
  return dbl_100E54FE0[a1] < dbl_100E54FE0[a2];
}

uint64_t _s11MusicCoreUI2HIO9SizeClassO8rawValueAESg0B8Graphics7CGFloatV_tcfC_0(double a1)
{
  if (a1 == 374.0) {
    return 0;
  }
  if (a1 == 500.0) {
    return 1;
  }
  if (a1 == 726.0) {
    return 2;
  }
  if (a1 == 981.0) {
    return 3;
  }
  if (a1 == 1194.0) {
    return 4;
  }
  if (a1 == 2501.0) {
    int v2 = 7;
  }
  else {
    int v2 = 8;
  }
  if (a1 == 2500.0) {
    unsigned int v3 = 6;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a1 == 1500.0) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_100AF4754(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100063814(&qword_1010C9540);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AF47BC(uint64_t a1)
{
  uint64_t v2 = sub_100063814(&qword_1010C9540);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100AF481C()
{
  unint64_t result = qword_1010CDF60;
  if (!qword_1010CDF60)
  {
    type metadata accessor for DynamicTypeSize();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010CDF60);
  }
  return result;
}

uint64_t sub_100AF4874()
{
  return sub_1005CE490(&qword_1010C9740, &qword_1010C9748);
}

unint64_t sub_100AF48A0()
{
  unint64_t result = qword_1010C9750;
  if (!qword_1010C9750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C9750);
  }
  return result;
}

uint64_t sub_100AF48F4()
{
  return sub_1005CE490(&qword_1010C9758, &qword_1010C9760);
}

unint64_t sub_100AF4920()
{
  unint64_t result = qword_1010C9768;
  if (!qword_1010C9768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C9768);
  }
  return result;
}

unint64_t sub_100AF4978()
{
  unint64_t result = qword_1010C9770;
  if (!qword_1010C9770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C9770);
  }
  return result;
}

ValueMetadata *type metadata accessor for HI()
{
  return &type metadata for HI;
}

unsigned char *storeEnumTagSinglePayload for HI.SizeClass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100AF4AA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.SizeClass()
{
  return &type metadata for HI.SizeClass;
}

ValueMetadata *type metadata accessor for HI.Grid()
{
  return &type metadata for HI.Grid;
}

unsigned char *storeEnumTagSinglePayload for HI.Grid.Variant(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100AF4BBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.Grid.Variant()
{
  return &type metadata for HI.Grid.Variant;
}

__n128 initializeWithCopy for HI.Grid.Metrics(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for HI.Grid.Metrics(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 26);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HI.Grid.Metrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 26) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.Grid.Metrics()
{
  return &type metadata for HI.Grid.Metrics;
}

ValueMetadata *type metadata accessor for HI.IndexBar()
{
  return &type metadata for HI.IndexBar;
}

ValueMetadata *type metadata accessor for HI.IndexBar.NumberOfItemsRequirement()
{
  return &type metadata for HI.IndexBar.NumberOfItemsRequirement;
}

ValueMetadata *type metadata accessor for HI.HoverOutset()
{
  return &type metadata for HI.HoverOutset;
}

ValueMetadata *type metadata accessor for HI.BottomPlayer()
{
  return &type metadata for HI.BottomPlayer;
}

ValueMetadata *type metadata accessor for HI.BottomPlayer.Ornament()
{
  return &type metadata for HI.BottomPlayer.Ornament;
}

void sub_100AF4D18()
{
  qword_10112C278 = Int.seconds.getter(32);
}

double sub_100AF4D3C(uint64_t a1, uint64_t a2, char a3, char a4)
{
  id v7 = [self currentTraitCollection];
  id v8 = [v7 userInterfaceIdiom];

  double result = 512.0;
  switch(a4)
  {
    case 1:
    case 4:
      double result = 540.0;
      if (v8 == (id)6) {
        double result = 512.0;
      }
      break;
    case 2:
      double result = 540.0;
      if ((a3 & 1) == 0 && *(double *)&a1 > 1194.0) {
        double result = 712.0;
      }
      break;
    case 3:
      return result;
    default:
      double result = 540.0;
      if (v8 == (id)6) {
        double result = 512.0;
      }
      break;
  }
  return result;
}

double static HI.Modal.modalSize(modalType:sceneSize:canExceedSceneSize:navigationBarHeight:)(char a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  int v7 = a4 & 1;
  double v8 = sub_100AF4D3C(a2, a3, a4 & 1, a1);
  id v9 = [self currentTraitCollection];
  id v10 = [v9 userInterfaceIdiom];

  BOOL v11 = v10 == (id)6 && v7 == 0;
  if (v11 && (a5 & 1) == 0)
  {
    double v12 = *(double *)&a2;
    if (qword_1010C8500 != -1)
    {
      swift_once();
      double v12 = *(double *)&a2;
    }
    if (v8 + *(double *)&qword_10112C278 + *(double *)&qword_10112C278 > v12) {
      return v12 - (*(double *)&qword_10112C278 + *(double *)&qword_10112C278);
    }
  }
  return v8;
}

unint64_t sub_100AF5010()
{
  unint64_t result = qword_1010C9778;
  if (!qword_1010C9778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C9778);
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.Modal()
{
  return &type metadata for HI.Modal;
}

unsigned char *_s5ModalO9ModalTypeOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100AF5140);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.Modal.ModalType()
{
  return &type metadata for HI.Modal.ModalType;
}

void *sub_100AF5178(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    double v25 = _swiftEmptyArrayStorage;
    sub_100AFC174(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    unsigned int v4 = (void *)(a1 + 128);
    do
    {
      uint64_t v5 = *(v4 - 12);
      uint64_t v6 = *(v4 - 11);
      uint64_t v19 = *(v4 - 10);
      char v7 = *((unsigned char *)v4 - 72);
      char v8 = *((unsigned char *)v4 - 71);
      char v18 = *((unsigned char *)v4 - 70);
      uint64_t v9 = *(v4 - 8);
      uint64_t v10 = *(v4 - 7);
      uint64_t v11 = *(v4 - 6);
      uint64_t v17 = *(v4 - 5);
      long long v20 = *((_OWORD *)v4 - 1);
      long long v21 = *((_OWORD *)v4 - 2);
      uint64_t v12 = *v4;
      unint64_t v13 = v2[2];
      unint64_t v14 = v2[3];
      double v25 = v2;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      if (v13 >= v14 >> 1)
      {
        sub_100AFC174((void *)(v14 > 1), v13 + 1, 1);
        uint64_t v2 = v25;
      }
      double v23 = &type metadata for Lyrics.TextLine;
      BOOL v24 = &protocol witness table for Lyrics.TextLine;
      uint64_t v15 = swift_allocObject();
      *(void *)&long long v22 = v15;
      *(void *)(v15 + 16) = v5;
      *(void *)(v15 + 24) = v6;
      *(void *)(v15 + 32) = v19;
      *(unsigned char *)(v15 + 40) = v7;
      *(unsigned char *)(v15 + 41) = v8;
      *(unsigned char *)(v15 + 42) = v18;
      *(void *)(v15 + 48) = v9;
      *(void *)(v15 + 56) = v10;
      *(void *)(v15 + 64) = v11;
      *(void *)(v15 + 72) = v17;
      *(_OWORD *)(v15 + 80) = v21;
      *(_OWORD *)(v15 + 96) = v20;
      *(void *)(v15 + 112) = v12;
      _OWORD v2[2] = v13 + 1;
      sub_100068978(&v22, (uint64_t)&v2[5 * v13 + 4]);
      v4 += 13;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_100AF532C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x7365756E6576;
  }
  else {
    uint64_t v3 = 0x652D6D617A616873;
  }
  if (v2) {
    unint64_t v4 = 0xED000073746E6576;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x7365756E6576;
  }
  else {
    uint64_t v5 = 0x652D6D617A616873;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xED000073746E6576;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

BOOL sub_100AF53DC(char a1, char a2)
{
  return dbl_100E55878[a1] == dbl_100E55878[a2];
}

uint64_t sub_100AF5400(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000015;
  unint64_t v3 = 0x8000000100DD2EB0;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD000000000000014;
    }
    else {
      unint64_t v5 = 0xD000000000000015;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x8000000100DD2ED0;
    }
    else {
      unint64_t v6 = 0x8000000100DD2EF0;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v5 = 0xD000000000000015;
    unint64_t v6 = 0x8000000100DD2EB0;
    int v7 = a2;
    if (!a2) {
      goto LABEL_12;
    }
  }
  if (v7 == 1)
  {
    unint64_t v2 = 0xD000000000000014;
    unint64_t v3 = 0x8000000100DD2ED0;
  }
  else
  {
    unint64_t v3 = 0x8000000100DD2EF0;
  }
LABEL_12:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100AF54F8(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x73736572646461;
    }
    else {
      uint64_t v3 = 7300455;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE700000000000000;
    }
    else {
      unint64_t v4 = 0xE300000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x73736572646461;
      }
      else {
        uint64_t v6 = 7300455;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE700000000000000;
      }
      else {
        unint64_t v7 = 0xE300000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1701667182;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1701667182)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100AF55F4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x7365756E6576;
  }
  else {
    uint64_t v3 = 0x73747369747261;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x7365756E6576;
  }
  else {
    uint64_t v5 = 0x73747369747261;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100AF5698(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 1701669236;
  }
  else {
    uint64_t v2 = 1701667182;
  }
  if (a2) {
    uint64_t v3 = 1701669236;
  }
  else {
    uint64_t v3 = 1701667182;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

BOOL sub_100AF5704(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (double *)(a1 + 40);
  char v4 = (double *)(a2 + 40);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    double v7 = *v3++;
    double v8 = v7;
    double v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_100AF5770(uint64_t a1, uint64_t a2)
{
  return sub_10003C5B4(a1, a2, (uint64_t)&qword_1010C9A18);
}

uint64_t sub_100AF5784(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1;
    }
    uint64_t v3 = (float64x2_t *)(a2 + 80);
    for (unint64_t i = (float64x2_t *)(a1 + 80); ; unint64_t i = (float64x2_t *)((char *)i + 56))
    {
      int32x2_t v5 = vmovn_s64(vceqq_f64(i[-3], v3[-3]));
      if ((v5.i32[0] & v5.i32[1] & 1) == 0) {
        break;
      }
      float64_t v7 = i[-1].f64[0];
      float64_t v6 = i[-1].f64[1];
      float64_t v8 = i->f64[0];
      float64_t v10 = v3[-1].f64[0];
      float64_t v9 = v3[-1].f64[1];
      float64_t v11 = v3->f64[0];
      if (*(void *)&i[-2].f64[0] == *(void *)&v3[-2].f64[0]
        && *(void *)&i[-2].f64[1] == *(void *)&v3[-2].f64[1])
      {
        uint64_t result = 0;
      }
      else
      {
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v13 & 1) == 0) {
          return result;
        }
      }
      if (*(void *)&v7 != *(void *)&v10 || *(void *)&v6 != *(void *)&v9 || *(void *)&v8 != *(void *)&v11) {
        return result;
      }
      uint64_t v3 = (float64x2_t *)((char *)v3 + 56);
      if (!--v2) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t _s11MusicCoreUI16PlaylistCuratorsO4ViewV13ConfigurationV23__derived_struct_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Artwork();
  uint64_t v33 = *(void *)(v4 - 8);
  __chkstk_darwin();
  float64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063814((uint64_t *)&unk_1010CEE80);
  __chkstk_darwin();
  float64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100063814(&qword_1010C9A20);
  __chkstk_darwin();
  float64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlaylistCurators.Curator(0);
  __chkstk_darwin();
  char v13 = (void (***)(char *, uint64_t, uint64_t))((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v17 = (void (***)(char *, uint64_t, uint64_t))((char *)&v30 - v16);
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 == *(void *)(a2 + 16))
  {
    uint64_t v40 = v9;
    uint64_t v41 = v8;
    if (!v18 || a1 == a2) {
      return 1;
    }
    uint64_t v31 = v6;
    unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v34 = *(void *)(v15 + 72);
    uint64_t v35 = a2;
    Swift::String v37 = (unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
    uint64_t v38 = v14;
    id v30 = (void (**)(char *, uint64_t, uint64_t))(v33 + 32);
    uint64_t v32 = (void (**)(uint64_t, uint64_t))(v33 + 8);
    uint64_t v20 = (uint64_t)v41;
    uint64_t v36 = a1;
    Swift::String v39 = v13;
    while (1)
    {
      sub_100B042BC(a1 + v19, (uint64_t)v17);
      sub_100B042BC(a2 + v19, (uint64_t)v13);
      BOOL v21 = *v17 == *v13 && v17[1] == v13[1];
      if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      uint64_t v22 = *(int *)(v38 + 20);
      uint64_t v23 = (uint64_t)v13 + v22;
      uint64_t v24 = (uint64_t)&v11[*(int *)(v40 + 48)];
      sub_10006CAB8((uint64_t)v17 + v22, (uint64_t)v11, (uint64_t *)&unk_1010CEE80);
      sub_10006CAB8(v23, v24, (uint64_t *)&unk_1010CEE80);
      double v25 = *v37;
      if ((*v37)(v11, 1, v4) == 1)
      {
        if (v25((char *)v24, 1, v4) != 1) {
          goto LABEL_19;
        }
        sub_1000637B8((uint64_t)v11, (uint64_t *)&unk_1010CEE80);
        char v13 = v39;
      }
      else
      {
        sub_10006CAB8((uint64_t)v11, v20, (uint64_t *)&unk_1010CEE80);
        if (v25((char *)v24, 1, v4) == 1)
        {
          (*v32)(v20, v4);
LABEL_19:
          sub_1000637B8((uint64_t)v11, &qword_1010C9A20);
          char v13 = v39;
          break;
        }
        double v26 = v31;
        (*v30)(v31, v24, v4);
        sub_100B046AC(&qword_1010CE2B0, (void (*)(uint64_t))&type metadata accessor for Artwork);
        LODWORD(v33) = dispatch thunk of static Equatable.== infix(_:_:)();
        BOOL v27 = *v32;
        uint64_t v28 = (uint64_t)v26;
        uint64_t v20 = (uint64_t)v41;
        (*v32)(v28, v4);
        v27(v20, v4);
        sub_1000637B8((uint64_t)v11, (uint64_t *)&unk_1010CEE80);
        char v13 = v39;
        if ((v33 & 1) == 0) {
          break;
        }
      }
      sub_100B04320((uint64_t)v13);
      sub_100B04320((uint64_t)v17);
      a2 = v35;
      v19 += v34;
      --v18;
      a1 = v36;
      if (!v18) {
        return 1;
      }
    }
    sub_100B04320((uint64_t)v13);
    sub_100B04320((uint64_t)v17);
  }
  return 0;
}

Swift::Int sub_100AF5D0C()
{
  return Hasher._finalize()();
}

double TimedElement.duration.getter(uint64_t a1, uint64_t a2)
{
  double v4 = (*(double (**)(void))(a2 + 16))();
  return v4 - (*(double (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
}

void TimedElement.timeRange.getter(uint64_t a1, uint64_t a2)
{
  double v4 = (*(double (**)(void))(a2 + 8))();
  if (v4 > (*(double (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2)) {
    __break(1u);
  }
}

double Lyrics.Word.startTime.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(void *)(v1 + 16)) {
    return *(double *)(v1 + 32);
  }
  else {
    return 0.0;
  }
}

double Lyrics.Word.endTime.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2) {
    return *(double *)(v1 + 56 * v2 - 16);
  }
  else {
    return 0.0;
  }
}

uint64_t Lyrics.Word.range.getter()
{
  return sub_100AFF498(*(void *)(v0 + 16));
}

uint64_t Lyrics.Word.emphasis.getter()
{
  return *(void *)(v0 + 24);
}

double Lyrics.Word.Emphasis.factor.getter(uint64_t a1, char a2)
{
  double result = *(double *)&a1;
  if (a2) {
    return 0.0;
  }
  return result;
}

void Lyrics.Word.Emphasis.hash(into:)(uint64_t a1, Swift::UInt64 a2, char a3)
{
  if (a3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = a2;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
}

uint64_t static Lyrics.Word.Emphasis.__derived_enum_equals(_:_:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4)
{
  if ((a2 | a4)) {
    char v4 = a2 & a4;
  }
  else {
    char v4 = *(double *)&a1 == *(double *)&a3;
  }
  return v4 & 1;
}

Swift::Int Lyrics.Word.Emphasis.hashValue.getter(Swift::UInt64 a1, char a2)
{
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = a1;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

Swift::Int sub_100AF5FE4()
{
  return Lyrics.Word.Emphasis.hashValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

void sub_100AF5FF0()
{
  if (*(unsigned char *)(v0 + 8))
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v1 = *(void *)v0;
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v2 = v1;
    }
    else {
      Swift::UInt64 v2 = 0;
    }
    Hasher._combine(_:)(v2);
  }
}

Swift::Int sub_100AF6040()
{
  Swift::UInt64 v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v3 = v1;
    }
    else {
      Swift::UInt64 v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

uint64_t sub_100AF60AC(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0) {
    return *(double *)a1 == *(double *)a2;
  }
  return result;
}

void Lyrics.Word.hash(into:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  sub_100AFF240(a1, v3);
  swift_bridgeObjectRelease();
  sub_1009A9B50((uint64_t *)(v1 + 24), (uint64_t)v6);
  sub_1009A9B50(v6, (uint64_t)&v7);
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v4 = v7;
    Hasher._combine(_:)(1uLL);
    if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v5 = v4;
    }
    else {
      Swift::UInt64 v5 = 0;
    }
    Hasher._combine(_:)(v5);
  }
}

uint64_t static Lyrics.Word.__derived_struct_equals(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v5 & 1) != 0))
  {
    if (sub_100AF5784(a1[2], a2[2]))
    {
      sub_1009A9B50(a1 + 3, (uint64_t)v9);
      sub_1009A9B50(a2 + 3, (uint64_t)v8);
      sub_1009A9B50(v9, (uint64_t)&v10);
      if (v11 == 1)
      {
        sub_1009A9B50(v8, (uint64_t)&v12);
        if (v13) {
          return 1;
        }
      }
      else
      {
        double v7 = v10;
        sub_1009A9B50(v8, (uint64_t)&v12);
        if ((v13 & 1) == 0 && v7 == v12) {
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

Swift::Int Lyrics.Word.hashValue.getter()
{
  Hasher.init(_seed:)();
  Lyrics.Word.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100AF62C8()
{
  long long v1 = v0[1];
  long long v4 = *v0;
  long long v5 = v1;
  char v6 = *((unsigned char *)v0 + 32);
  Hasher.init(_seed:)();
  Lyrics.Word.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

void sub_100AF631C(uint64_t a1)
{
}

Swift::Int sub_100AF6358()
{
  long long v1 = v0[1];
  long long v4 = *v0;
  long long v5 = v1;
  char v6 = *((unsigned char *)v0 + 32);
  Hasher.init(_seed:)();
  Lyrics.Word.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t sub_100AF63A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  double v3 = *(double *)(a1 + 24);
  int v4 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 16);
  double v6 = *(double *)(a2 + 24);
  int v7 = *(unsigned __int8 *)(a2 + 32);
  BOOL v8 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v8 || (char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v9 & 1) != 0))
  {
    int v11 = sub_100AF5784(v2, v5);
    int v12 = v11 ^ 1 | v4;
    if ((v12 | v7)) {
      return v11 & v7 & v12;
    }
    else {
      return v3 == v6;
    }
  }
  return result;
}

uint64_t Lyrics.TextLine.BackgroundVocals.range.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t Lyrics.Syllable.wordLength.getter()
{
  return *(void *)(v0 + 48);
}

void Lyrics.Syllable.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  sub_10058C54C((uint64_t)v0);
  String.hash(into:)();
  sub_10058C578((uint64_t)v0);
  Swift::UInt v3 = v0[5];
  Hasher._combine(_:)(v0[4]);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v0[6]);
}

Swift::Int Lyrics.Syllable.hashValue.getter()
{
  Hasher.init(_seed:)();
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  sub_10058C54C((uint64_t)v0);
  String.hash(into:)();
  sub_10058C578((uint64_t)v0);
  Swift::UInt v3 = v0[5];
  Hasher._combine(_:)(v0[4]);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v0[6]);
  return Hasher._finalize()();
}

Swift::Int sub_100AF65A8()
{
  return Lyrics.Syllable.hashValue.getter();
}

void sub_100AF65EC()
{
}

Swift::Int sub_100AF6630()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt v3 = v0[4];
  Swift::UInt v4 = v0[5];
  Swift::UInt v5 = v0[6];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v1;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v2;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

BOOL sub_100AF66F0(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  _OWORD v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return _s11MusicCoreUI6LyricsC8SyllableV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v5, (uint64_t)v7);
}

uint64_t Lyrics.TextLine.words.getter()
{
  return (*(uint64_t (**)(void))(v0 + 72))();
}

uint64_t Lyrics.TextLine.text.getter()
{
  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t Lyrics.TextLine.backgroundVocals.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))(v1 + 88))(v4);
  return sub_10003CABC((uint64_t)v4, a1, &qword_1010C9780);
}

uint64_t Lyrics.TextLine.backgroundText.getter()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 88))(v3);
  sub_10003CABC((uint64_t)v3, (uint64_t)v4, &qword_1010C9780);
  if (!v6) {
    return 0;
  }
  uint64_t v1 = v5;
  swift_bridgeObjectRetain();
  sub_100AFF4D8(v3);
  return v1;
}

uint64_t Lyrics.TextLine.debugDescription.getter()
{
  _StringGuts.grow(_:)(54);
  v1._object = (void *)0x8000000100DD39C0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x6954747261747320;
  v3._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v3);
  Double.write<A>(to:)();
  v4._uint64_t countAndFlagsBits = 0x656D6954646E6520;
  v4._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v4);
  Double.write<A>(to:)();
  v5._uint64_t countAndFlagsBits = 0x3D7478657420;
  v5._object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(v0 + 56))();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t Lyrics.TextLine.textAlignment.getter()
{
  if (*(unsigned char *)(v0 + 26))
  {
    if ((*(unsigned char *)(v0 + 24) & 1) == 0) {
      return 2;
    }
  }
  else if (*(unsigned char *)(v0 + 24))
  {
    return 2;
  }
  return 0;
}

_UNKNOWN **static Lyrics.Capability.allCases.getter()
{
  return &off_1010085D0;
}

uint64_t Lyrics.TextLine.init(lineIndex:startTime:endTime:primaryVocalsStartTime:primaryVocalsEndTime:agentAlignment:direction:lyricsDirection:capabilities:localizedTextProvider:localizedWordsProvider:localizedBackgroundVocalsProvider:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, long long a14, uint64_t a15)
{
  *(double *)a9 = a10;
  *(double *)(a9 + 8) = a11;
  *(void *)(a9 + 16) = result;
  *(unsigned char *)(a9 + 24) = a2 & 1;
  *(unsigned char *)(a9 + 25) = a3 & 1;
  *(unsigned char *)(a9 + 26) = a4 & 1;
  *(void *)(a9 + 32) = a5;
  *(double *)(a9 + 40) = a12;
  *(double *)(a9 + 48) = a13;
  *(void *)(a9 + 56) = a6;
  *(void *)(a9 + 64) = a7;
  *(void *)(a9 + 72) = a8;
  *(_OWORD *)(a9 + 80) = a14;
  *(void *)(a9 + 96) = a15;
  return result;
}

uint64_t Lyrics.TextLine.hash(into:)()
{
  Hasher._combine(_:)(*(void *)(v0 + 16));
  if ((*(void *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *(void *)v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((*(void *)(v0 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)(v0 + 8);
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  (*(void (**)(void))(v0 + 56))();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t Lyrics.TextLine.BackgroundVocals.direction.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t Lyrics.TextLine.BackgroundVocals.words.getter()
{
  return swift_bridgeObjectRetain();
}

Swift::Int Lyrics.TextLine.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_100AF6B0C()
{
  if (*(unsigned char *)(v0 + 26))
  {
    if (*(unsigned char *)(v0 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(v0 + 24) & 1) == 0)
  {
    return 0;
  }
  return 2;
}

Swift::Int sub_100AF6B34()
{
  return Hasher._finalize()();
}

uint64_t sub_100AF6B74(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  uint64_t v12 = *(void *)(a1 + 96);
  long long v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  _OWORD v11[2] = *(_OWORD *)(a1 + 32);
  void v11[3] = v4;
  long long v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 96);
  v13[4] = v8;
  _OWORD v13[5] = v9;
  _OWORD v13[2] = v6;
  v13[3] = v7;
  return _s11MusicCoreUI6LyricsC8TextLineV2eeoiySbAE_AEtFZ_0((uint64_t)v11, (uint64_t)v13) & 1;
}

double JSContainerDetail.LyricsSnippetData.endTime.getter(double a1, double a2)
{
  return a2;
}

uint64_t Lyrics.InstrumentalLine.lyricsDirection.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t Lyrics.InstrumentalLine.textAlignment.getter(uint64_t a1, char a2)
{
  return 2 * (a2 & 1u);
}

uint64_t Lyrics.InstrumentalLine.debugDescription.getter()
{
  _StringGuts.grow(_:)(54);
  v0._object = (void *)0x8000000100DD39E0;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x6954747261747320;
  v2._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v2);
  Double.write<A>(to:)();
  v3._uint64_t countAndFlagsBits = 0x656D6954646E6520;
  v3._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v3);
  Double.write<A>(to:)();
  return 0;
}

uint64_t Lyrics.SongwritersLine.textAlignment.getter()
{
  if (*(unsigned char *)(v0 + 24)) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t sub_100AF6D38()
{
  return Lyrics.InstrumentalLine.debugDescription.getter();
}

uint64_t Lyrics.SongwritersLine.debugDescription.getter()
{
  _StringGuts.grow(_:)(68);
  v1._object = (void *)0x8000000100DD3A00;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x6954747261747320;
  v3._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v3);
  Double.write<A>(to:)();
  v4._uint64_t countAndFlagsBits = 0x656D6954646E6520;
  v4._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v4);
  Double.write<A>(to:)();
  v5._uint64_t countAndFlagsBits = 0x697277676E6F7320;
  v5._object = (void *)0xED00003D73726574;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  sub_100AFF558(v0);
  return 0;
}

uint64_t sub_100AF6EBC()
{
  return Lyrics.SongwritersLine.debugDescription.getter();
}

uint64_t JSApplication.SubscriptionFlowConfiguration.options.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Lyrics.availableLanguages.getter()
{
  return swift_bridgeObjectRetain();
}

double Lyrics.leadingSilence.getter()
{
  return *(double *)(v0 + 88);
}

uint64_t Lyrics.vocalistsType.getter()
{
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t Lyrics.songwriters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Lyrics.currentLanguage.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Lyrics.currentLanguage.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*Lyrics.currentLanguage.modify())()
{
  return j__swift_endAccess;
}

uint64_t Lyrics.staticText.getter()
{
  if (*(void *)(v0 + 144))
  {
    uint64_t v1 = *(void *)(v0 + 136);
  }
  else
  {
    uint64_t v1 = sub_100AF7084(v0);
    *(void *)(v0 + 136) = v1;
    *(void *)(v0 + 144) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100AF7084(uint64_t a1)
{
  void (*v17)(uint64_t *__return_ptr);
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t countAndFlagsBits;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30[8];
  unsigned char v31[16];
  uint64_t v32;
  uint64_t v33;

  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v28 = 0;
  Swift::String v29 = 0xE000000000000000;
  double v26 = *(void *)(v1 + 16);
  if (v26)
  {
    double v25 = v1 + 32;
    swift_bridgeObjectRetain_n();
    uint64_t v2 = 0;
    do
    {
      uint64_t v6 = *(void *)(v25 + 8 * v2);
      uint64_t v3 = v28;
      unint64_t v4 = v29;
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v27 = v2;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v8 = v6 + 128;
        do
        {
          uint64_t v16 = *(uint64_t (**)(uint64_t))(v8 - 40);
          uint64_t v17 = *(void (**)(uint64_t *__return_ptr))(v8 - 8);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          uint64_t v18 = swift_retain();
          if ((v29 & 0xF00000000000000) != 0)
          {
            v19._uint64_t countAndFlagsBits = 10;
            v19._object = (void *)0xE100000000000000;
            String.append(_:)(v19);
          }
          uint64_t v20 = v16(v18);
          uint64_t v22 = v21;
          v17(v30);
          sub_10003CABC((uint64_t)v30, (uint64_t)v31, &qword_1010C9780);
          uint64_t v12 = v33;
          if (v33)
          {
            uint64_t v9 = v32;
            swift_bridgeObjectRetain();
            sub_100AFF4D8(v30);
            v10._uint64_t countAndFlagsBits = v9;
            v10._object = (void *)v12;
            String.append(_:)(v10);
            v11._uint64_t countAndFlagsBits = 41;
            v11._object = (void *)0xE100000000000000;
            String.append(_:)(v11);
            swift_bridgeObjectRelease();
            uint64_t v12 = 40;
            char v13 = (void *)0xE100000000000000;
          }
          else
          {
            char v13 = (void *)0xE000000000000000;
          }
          swift_bridgeObjectRetain();
          v14._uint64_t countAndFlagsBits = v12;
          v14._object = v13;
          String.append(_:)(v14);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v15._uint64_t countAndFlagsBits = v20;
          v15._object = v22;
          String.append(_:)(v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          v8 += 104;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        unint64_t v4 = v29;
        uint64_t v2 = v27;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      ++v2;
      uint64_t v28 = v3;
      Swift::String v29 = v4;
      v5._uint64_t countAndFlagsBits = 10;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
    }
    while (v2 != v26);
    swift_bridgeObjectRelease_n();
  }
  uint64_t countAndFlagsBits = String.trim()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t Lyrics.staticText.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*Lyrics.staticText.modify(uint64_t *a1))(void *a1)
{
  a1[2] = v1;
  *a1 = Lyrics.staticText.getter();
  a1[1] = v3;
  return sub_100AF7380;
}

uint64_t sub_100AF7380(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  *(void *)(v1 + 136) = *a1;
  *(void *)(v1 + 144) = v2;
  return swift_bridgeObjectRelease();
}

uint64_t Lyrics.alignment(for:default:)(void *a1, uint64_t a2, char a3)
{
  if (*(unsigned char *)(v3 + 96))
  {
    uint64_t v4 = a1[3];
    uint64_t v5 = a1[4];
    sub_100068990(a1, v4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  }
  else
  {
    sub_1000688E4((uint64_t)a1, (uint64_t)v11);
    if (a3)
    {
      uint64_t v9 = v12;
      uint64_t v10 = v13;
      sub_100068990(v11, v12);
      a2 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
    }
    sub_1000760E4((uint64_t)v11);
    return a2;
  }
}

double *Lyrics.originalLine(for:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(void *)(v3 + 16);
  long long v5 = 0uLL;
  if (!v4)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    long long v25 = 0uLL;
    long long v26 = 0uLL;
    long long v27 = 0uLL;
    goto LABEL_20;
  }
  uint64_t v6 = result;
  uint64_t v31 = a2;
  double v7 = *result;
  swift_bridgeObjectRetain_n();
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = v3 + v8;
    long long v10 = *(_OWORD *)(v3 + v8 + 32);
    if (*(double *)&v10 != v7 || *((double *)&v10 + 1) != v6[1]) {
      goto LABEL_3;
    }
    uint64_t v38 = *(void *)(v9 + 48);
    uint64_t v34 = *(unsigned __int8 *)(v9 + 56);
    int v32 = *(unsigned __int8 *)(v9 + 57);
    int v33 = *(unsigned __int8 *)(v9 + 58);
    long long v35 = *(_OWORD *)(v3 + v8 + 32);
    long long v36 = *(_OWORD *)(v9 + 72);
    Swift::String v11 = *(uint64_t (**)(void))(v9 + 88);
    long long v40 = *(_OWORD *)(v9 + 112);
    long long v41 = *(_OWORD *)(v9 + 96);
    uint64_t v12 = *(void *)(v9 + 128);
    uint64_t v39 = *(void *)(v9 + 64);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v13 = swift_retain();
    Swift::String v37 = v11;
    uint64_t v14 = v11(v13);
    uint64_t v16 = v15;
    if (v14 == (*((uint64_t (**)(void))v6 + 7))() && v16 == v17) {
      break;
    }
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_15;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_3:
    v8 += 104;
    if (!--v4)
    {
      uint64_t result = (double *)swift_bridgeObjectRelease_n();
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      long long v25 = 0uLL;
      long long v26 = 0uLL;
      long long v27 = 0uLL;
      a2 = v31;
      long long v5 = 0uLL;
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_15:
  uint64_t result = (double *)swift_bridgeObjectRelease_n();
  uint64_t v28 = 256;
  if (!v32) {
    uint64_t v28 = 0;
  }
  uint64_t v29 = v28 | v34;
  uint64_t v30 = 0x10000;
  if (!v33) {
    uint64_t v30 = 0;
  }
  uint64_t v21 = v29 | v30;
  long long v5 = v35;
  long long v25 = v36;
  a2 = v31;
  uint64_t v23 = v37;
  uint64_t v20 = v38;
  uint64_t v24 = v12;
  uint64_t v22 = v39;
  long long v27 = v40;
  long long v26 = v41;
LABEL_20:
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v20;
  *(void *)(a2 + 24) = v21;
  *(void *)(a2 + 32) = v22;
  *(_OWORD *)(a2 + 40) = v25;
  *(void *)(a2 + 56) = v23;
  *(_OWORD *)(a2 + 64) = v26;
  *(_OWORD *)(a2 + 80) = v27;
  *(void *)(a2 + 96) = v24;
  return result;
}

void sub_100AF76CC(void *a1@<X8>)
{
  *a1 = &off_1010085F8;
}

NLLanguage sub_100AF76DC()
{
  sub_100063814(&qword_1010C9AE0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100E251B0;
  *(void *)(v0 + 32) = NLLanguageArabic;
  *(void *)(v0 + 40) = NLLanguageHebrew;
  qword_10112C280 = v0;
  uint64_t v1 = NLLanguageArabic;

  return NLLanguageHebrew;
}

NLLanguage sub_100AF775C()
{
  sub_100063814(&qword_1010C9AE0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100E251F0;
  *(void *)(v0 + 32) = NLLanguageJapanese;
  *(void *)(v0 + 40) = NLLanguageSimplifiedChinese;
  *(void *)(v0 + 48) = NLLanguageTraditionalChinese;
  qword_10112C288 = v0;
  uint64_t v1 = NLLanguageJapanese;
  uint64_t v2 = NLLanguageSimplifiedChinese;

  return NLLanguageTraditionalChinese;
}

uint64_t Lyrics.audioAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

void Lyrics.AudioAttribute.hash(into:)(double a1)
{
  Hasher._combine(_:)(0);
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

BOOL static Lyrics.AudioAttribute.__derived_enum_equals(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

Swift::Int Lyrics.AudioAttribute.hashValue.getter(double a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_100AF78B4()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100AF790C()
{
  Swift::UInt64 v1 = *v0;
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100AF7950()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void Lyrics.spatialOffset.getter()
{
  uint64_t v1 = *(void *)(v0 + 152);
  char v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = -1;
  if (1 << v2 < 64) {
    uint64_t v3 = ~(-1 << (1 << v2));
  }
  if ((v3 & *(void *)(v1 + 56)) == 0)
  {
    unsigned int v4 = v2 & 0x3F;
    if (v4 > 6
      && !*(void *)(v1 + 64)
      && v4 >= 8
      && !*(void *)(v1 + 72)
      && !*(void *)(v1 + 80)
      && v4 >= 9
      && !*(void *)(v1 + 88))
    {
      unint64_t v5 = (unint64_t)((1 << v2) + 63) >> 6;
      if (v5 <= 5) {
        unint64_t v5 = 5;
      }
      unint64_t v6 = v5 - 5;
      double v7 = (uint64_t *)(v1 + 96);
      uint64_t v8 = 256;
      do
      {
        if (!v6) {
          break;
        }
        uint64_t v9 = *v7++;
        --v6;
        v8 += 64;
      }
      while (!v9);
    }
  }
}

uint64_t Lyrics.__allocating_init(identifier:songInfo:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  Lyrics.init(identifier:songInfo:)(a1, a2, a3);
  return v6;
}

uint64_t Lyrics.init(identifier:songInfo:)(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&long long v198 = type metadata accessor for Locale.Language();
  int64_t v196 = *(void *)(v198 - 8);
  __chkstk_darwin(v198);
  Swift::String v195 = (char *)v179 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[14] = 0;
  v3[15] = 0;
  unint64_t v8 = sub_100AF0E14((uint64_t)_swiftEmptyArrayStorage);
  id v180 = v3;
  v3[16] = v8;
  uint64_t v9 = v3 + 16;
  v3[17] = 0;
  v3[18] = 0;
  _OWORD v3[2] = a1;
  v3[3] = a2;
  unint64_t v197 = a3;
  id v10 = [a3 language];
  if (v10)
  {
    Swift::String v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v15 = v180;
  v180[8] = v12;
  v15[9] = v14;
  uint64_t v16 = v197;
  id v17 = [v197 availableTranslations];
  uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v15[10] = v18;
  uint64_t v20 = v15[8];
  uint64_t v19 = v15[9];
  swift_beginAccess();
  v15[14] = v20;
  v15[15] = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v21 = sub_100AF0E14((uint64_t)_swiftEmptyArrayStorage);
  swift_beginAccess();
  unsigned char v15[16] = v21;
  swift_bridgeObjectRelease();
  [v16 leadingSilence];
  v15[11] = v22;
  id v23 = [v16 songwriters];
  v179[1] = sub_100057778(0, &qword_1010C9788);
  unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_6;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    long long v27 = _swiftEmptyArrayStorage;
    goto LABEL_17;
  }
  uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v25) {
    goto LABEL_16;
  }
LABEL_6:
  *(void *)&long long v200 = _swiftEmptyArrayStorage;
  sub_100076FC8(0, v25 & ~(v25 >> 63), 0);
  if (v25 < 0)
  {
    __break(1u);
LABEL_107:
    swift_bridgeObjectRetain();
    uint64_t v98 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v98) {
      goto LABEL_108;
    }
LABEL_70:
    if (v98 < 1)
    {
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    *(void *)&long long v199 = v15;
    uint64_t v99 = 0;
    Swift::String v100 = (char *)_swiftEmptyArrayStorage;
    Swift::String v187 = _swiftEmptyArrayStorage;
    while (1)
    {
      if ((v24 & 0xC000000000000001) != 0) {
        id v101 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v101 = *(id *)(v24 + 8 * v99 + 32);
      }
      id v102 = v101;
      id v103 = [v101 lines];
      sub_100057778(0, &qword_1010C97A0);
      uint64_t v104 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      Swift::String v105 = sub_100B01BE8(v104, v181, v182, v183, v197, v186, (uint64_t)v194, v184);
      swift_bridgeObjectRelease();
      uint64_t v106 = *((void *)v105 + 2);
      int64_t v107 = *((void *)v100 + 2);
      int64_t v108 = v107 + v106;
      if (__OFADD__(v107, v106)) {
        goto LABEL_98;
      }
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      uint64_t v110 = v100;
      if (isUniquelyReferenced_nonNull_native && v108 <= *((void *)v100 + 3) >> 1)
      {
        if (!*((void *)v105 + 2)) {
          goto LABEL_87;
        }
      }
      else
      {
        if (v107 <= v108) {
          int64_t v113 = v107 + v106;
        }
        else {
          int64_t v113 = v107;
        }
        uint64_t v110 = sub_100AFB3D4(isUniquelyReferenced_nonNull_native, v113, 1, v100);
        if (!*((void *)v105 + 2))
        {
LABEL_87:
          Swift::String v100 = v110;
          if (v106) {
            goto LABEL_99;
          }
          goto LABEL_88;
        }
      }
      if ((*((void *)v110 + 3) >> 1) - *((void *)v110 + 2) < v106) {
        goto LABEL_100;
      }
      Swift::String v100 = v110;
      swift_arrayInitWithCopy();
      if (v106)
      {
        uint64_t v111 = *((void *)v100 + 2);
        BOOL v68 = __OFADD__(v111, v106);
        uint64_t v112 = v111 + v106;
        if (v68) {
          goto LABEL_102;
        }
        *((void *)v100 + 2) = v112;
      }
LABEL_88:
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String v187 = sub_100AFB784(0, v187[2] + 1, 1, v187, &qword_1010C97A8, &qword_1010C9A70);
      }
      unint64_t v115 = v187[2];
      unint64_t v114 = v187[3];
      if (v115 >= v114 >> 1) {
        Swift::String v187 = sub_100AFB784((void *)(v114 > 1), v115 + 1, 1, v187, &qword_1010C97A8, &qword_1010C9A70);
      }
      ++v99;
      uint64_t v116 = v187;
      v187[2] = v115 + 1;
      v116[v115 + 4] = v105;

      if (v98 == v99)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_109;
      }
    }
  }
  int v194 = (_UNKNOWN **)v9;
  uint64_t v26 = 0;
  long long v27 = (void *)v200;
  *(void *)&long long v199 = v24 & 0xC000000000000001;
  unint64_t v28 = v24;
  uint64_t v29 = v25;
  do
  {
    if ((void)v199) {
      id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v30 = *(id *)(v24 + 8 * v26 + 32);
    }
    uint64_t v31 = v30;
    id v32 = [v30 name];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    *(void *)&long long v200 = v27;
    unint64_t v37 = v27[2];
    unint64_t v36 = v27[3];
    if (v37 >= v36 >> 1)
    {
      sub_100076FC8((char *)(v36 > 1), v37 + 1, 1);
      long long v27 = (void *)v200;
    }
    ++v26;
    v27[2] = v37 + 1;
    uint64_t v38 = &v27[2 * v37];
    v38[4] = v33;
    v38[5] = v35;
    unint64_t v24 = v28;
  }
  while (v29 != v26);
  swift_bridgeObjectRelease();
  uint64_t v9 = v194;
LABEL_17:
  v180[13] = v27;
  id v39 = [v197 audioAttributes];
  if (v39)
  {
    long long v40 = v39;
    long long v41 = &selRef_isDragging;
    if ([v39 isSpatialRole])
    {
      [v40 lyricsOffset];
      uint64_t v43 = v42;

      sub_100063814(&qword_1010C97B0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100E251D0;
      *(void *)(inited + 32) = v43;
      Swift::String v45 = (void *)sub_100AED220(inited);
      swift_setDeallocating();
    }
    else
    {

      Swift::String v45 = &_swiftEmptySetSingleton;
    }
  }
  else
  {
    Swift::String v45 = &_swiftEmptySetSingleton;
    long long v41 = &selRef_isDragging;
  }
  id v46 = v180;
  v180[19] = v45;
  Swift::String v47 = v197;
  id v48 = [v197 type];
  char v49 = v48 == (id)1;
  if (v48 == (id)2) {
    char v49 = 2;
  }
  *((unsigned char *)v46 + 56) = v49;
  uint64_t v184 = swift_allocObject();
  v179[0] = v184 + 16;
  swift_weakInit();
  Swift::String v183 = (BOOL *)swift_allocObject();
  v183[16] = 0;
  uint64_t v182 = swift_allocObject();
  *(void *)(v182 + 16) = 0;
  id v50 = [v47 v41[127]];
  if (v50)
  {
    Swift::String v51 = v50;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    Swift::String v52 = v195;
    Locale.Language.init(identifier:)();
    BOOL v186 = Locale.Language.characterDirection.getter() == 2;
    (*(void (**)(char *, void))(v196 + 8))(v52, v198);
    swift_bridgeObjectRelease();
  }
  else
  {
    BOOL v186 = 0;
  }
  id v53 = [v197 v41[127]];
  if (v53)
  {
    Swift::String v54 = v53;
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v57 = v56;
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v57 = 0;
  }
  int v194 = sub_100AFF604(v55, v57);
  swift_bridgeObjectRelease();
  id v58 = [v197 translationsMap];
  sub_100063814(&qword_1010C9790);
  uint64_t v59 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v60 = 0;
  uint64_t v61 = *(void *)(v59 + 64);
  Swift::String v195 = (char *)(v59 + 64);
  *(void *)&long long v198 = v59;
  uint64_t v62 = 1 << *(unsigned char *)(v59 + 32);
  uint64_t v63 = -1;
  if (v62 < 64) {
    uint64_t v63 = ~(-1 << v62);
  }
  unint64_t v64 = v63 & v61;
  int64_t v196 = (unint64_t)(v62 + 63) >> 6;
  while (1)
  {
    if (v64)
    {
      unint64_t v66 = __clz(__rbit64(v64));
      v64 &= v64 - 1;
      *(void *)&long long v199 = v60;
      unint64_t v67 = v66 | (v60 << 6);
      goto LABEL_48;
    }
    BOOL v68 = __OFADD__(v60, 1);
    int64_t v69 = v60 + 1;
    if (v68) {
      goto LABEL_97;
    }
    if (v69 >= v196) {
      break;
    }
    unint64_t v70 = *(void *)&v195[8 * v69];
    if (!v70)
    {
      int64_t v71 = v69 + 1;
      if (v69 + 1 >= v196) {
        break;
      }
      unint64_t v70 = *(void *)&v195[8 * v71];
      if (!v70)
      {
        int64_t v71 = v69 + 2;
        if (v69 + 2 >= v196) {
          break;
        }
        unint64_t v70 = *(void *)&v195[8 * v71];
        if (!v70)
        {
          int64_t v71 = v69 + 3;
          if (v69 + 3 >= v196) {
            break;
          }
          unint64_t v70 = *(void *)&v195[8 * v71];
          if (!v70)
          {
            while (1)
            {
              int64_t v69 = v71 + 1;
              if (__OFADD__(v71, 1)) {
                goto LABEL_101;
              }
              if (v69 >= v196) {
                goto LABEL_63;
              }
              unint64_t v70 = *(void *)&v195[8 * v69];
              ++v71;
              if (v70) {
                goto LABEL_47;
              }
            }
          }
        }
      }
      int64_t v69 = v71;
    }
LABEL_47:
    unint64_t v64 = (v70 - 1) & v70;
    *(void *)&long long v199 = v69;
    unint64_t v67 = __clz(__rbit64(v70)) + (v69 << 6);
LABEL_48:
    uint64_t v72 = (uint64_t *)(*(void *)(v198 + 48) + 16 * v67);
    uint64_t v73 = *v72;
    uint64_t v74 = v72[1];
    swift_bridgeObjectRetain_n();
    Swift::String v75 = v197;
    uint64_t v76 = swift_bridgeObjectRetain();
    Swift::String v77 = sub_100B0186C(v76, v75, v73, v74);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_beginAccess();
    char v78 = swift_isUniquelyReferenced_nonNull_native();
    Swift::String v203 = (void *)*v9;
    Swift::String v79 = v203;
    Swift::String v80 = v9;
    *uint64_t v9 = 0x8000000000000000;
    unint64_t v82 = sub_100071D70(v73, v74);
    uint64_t v83 = v79[2];
    BOOL v84 = (v81 & 1) == 0;
    uint64_t v85 = v83 + v84;
    if (__OFADD__(v83, v84))
    {
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    char v86 = v81;
    if (v79[3] >= v85)
    {
      if (v78)
      {
        if (v81) {
          goto LABEL_33;
        }
      }
      else
      {
        sub_100AFE3F4();
        Swift::String v79 = v203;
        if (v86) {
          goto LABEL_33;
        }
      }
    }
    else
    {
      sub_100AFD448(v85, v78);
      Swift::String v79 = v203;
      unint64_t v87 = sub_100071D70(v73, v74);
      if ((v86 & 1) != (v88 & 1)) {
        goto LABEL_164;
      }
      unint64_t v82 = v87;
      if (v86)
      {
LABEL_33:
        uint64_t v65 = v79[7];
        swift_bridgeObjectRelease();
        *(void *)(v65 + 8 * v82) = v77;
        goto LABEL_34;
      }
    }
    v79[(v82 >> 6) + 8] |= 1 << v82;
    Swift::String v89 = (uint64_t *)(v79[6] + 16 * v82);
    *Swift::String v89 = v73;
    v89[1] = v74;
    *(void *)(v79[7] + 8 * v82) = v77;
    uint64_t v90 = v79[2];
    BOOL v68 = __OFADD__(v90, 1);
    uint64_t v91 = v90 + 1;
    if (v68) {
      goto LABEL_96;
    }
    v79[2] = v91;
    swift_bridgeObjectRetain();
LABEL_34:
    uint64_t v9 = v80;
    *Swift::String v80 = v79;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v60 = v199;
  }
LABEL_63:
  swift_release();
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
  {
LABEL_64:
    uint64_t v92 = &_swiftEmptySetSingleton;
    goto LABEL_65;
  }
LABEL_103:
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_64;
  }
  sub_100AED378((unint64_t)_swiftEmptyArrayStorage);
  uint64_t v92 = v121;
LABEL_65:
  uint64_t v93 = swift_allocObject();
  Swift::String v181 = (char *)v93;
  *(void *)(v93 + 16) = v92;
  uint64_t v15 = (void *)(v93 + 16);
  id v94 = [v197 lyricsSections];
  sub_100057778(0, &qword_1010C9798);
  unint64_t v95 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v95 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v96 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v96 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v96 <= 0)
  {
    uint64_t v117 = v197;
    id v118 = [v197 lyricsLines];
    sub_100057778(0, &qword_1010C97A0);
    uint64_t v119 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    Swift::String v100 = sub_100B01BE8(v119, v181, v182, v183, v117, v186, (uint64_t)v194, v184);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100063814(&qword_1010C97A8);
    uint64_t v120 = swift_allocObject();
    *(_OWORD *)(v120 + 16) = xmmword_100E251D0;
    Swift::String v187 = (void *)v120;
    *(void *)(v120 + 32) = v100;
    swift_bridgeObjectRetain();
    goto LABEL_109;
  }
  id v97 = [v197 lyricsSections];
  unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v24 >> 62) {
    goto LABEL_107;
  }
  uint64_t v98 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v98) {
    goto LABEL_70;
  }
LABEL_108:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v100 = (char *)_swiftEmptyArrayStorage;
  Swift::String v187 = _swiftEmptyArrayStorage;
LABEL_109:
  swift_beginAccess();
  uint64_t v122 = swift_bridgeObjectRetain();
  char v123 = sub_100B02980(v122);
  swift_bridgeObjectRelease();
  uint64_t v124 = v180;
  *((unsigned char *)v180 + 96) = v123;
  v124[6] = v100;
  uint64_t v125 = *((void *)v100 + 2);
  Swift::String v185 = v100;
  if (v125)
  {
    int64_t v126 = *((void *)v100 + 14);
    uint64_t v127 = (char *)*((void *)v100 + 12);
    long long v128 = (_UNKNOWN **)*((void *)v100 + 8);
    double v129 = *((double *)v100 + 4);
    double v130 = *((double *)v100 + 5);
    swift_bridgeObjectRetain_n();
    int v194 = v128;
    swift_bridgeObjectRetain();
    Swift::String v195 = v127;
    swift_retain();
    int64_t v196 = v126;
    swift_retain();
    swift_retain();
    uint64_t v131 = 0;
    uint64_t v132 = 0;
    id v133 = _swiftEmptyArrayStorage;
    while (1)
    {
      double v135 = *(double *)&v185[v131 + 32];
      double v134 = *(double *)&v185[v131 + 40];
      int v136 = v185[v131 + 56];
      int v137 = v185[v131 + 57];
      int v138 = v185[v131 + 58];
      Swift::String v139 = *(char ***)&v185[v131 + 64];
      long long v140 = *(_OWORD *)&v185[v131 + 72];
      uint64_t v141 = *(void *)&v185[v131 + 88];
      long long v199 = *(_OWORD *)&v185[v131 + 96];
      long long v198 = *(_OWORD *)&v185[v131 + 112];
      uint64_t v142 = *(void *)&v185[v131 + 128];
      long long v193 = v140;
      int v192 = v136;
      int v191 = v137;
      int v190 = v138;
      uint64_t v189 = v141;
      if (v132 || v129 <= 7.0)
      {
        if (v135 - v130 <= 7.0)
        {
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v133 = sub_100AFB4F4(0, v133[2] + 1, 1, v133);
          }
          unint64_t v147 = v133[2];
          unint64_t v146 = v133[3];
          if (v147 >= v146 >> 1) {
            id v133 = sub_100AFB4F4((void *)(v146 > 1), v147 + 1, 1, v133);
          }
          id v201 = &type metadata for Lyrics.InstrumentalLine;
          Swift::String v202 = &protocol witness table for Lyrics.InstrumentalLine;
          uint64_t v148 = swift_allocObject();
          *(void *)&long long v200 = v148;
          *(void *)(v148 + 16) = v132;
          *(double *)(v148 + 24) = v130 + 0.1;
          *(double *)(v148 + 32) = v135;
          *(unsigned char *)(v148 + 40) = v186;
          v133[2] = v147 + 1;
          sub_100068978(&v200, (uint64_t)&v133[5 * v147 + 4]);
          BOOL v68 = __OFADD__(v132++, 1);
          if (v68) {
            goto LABEL_159;
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v133 = sub_100AFB4F4(0, v133[2] + 1, 1, v133);
        }
        unint64_t v144 = v133[2];
        unint64_t v143 = v133[3];
        if (v144 >= v143 >> 1) {
          id v133 = sub_100AFB4F4((void *)(v143 > 1), v144 + 1, 1, v133);
        }
        id v201 = &type metadata for Lyrics.InstrumentalLine;
        Swift::String v202 = &protocol witness table for Lyrics.InstrumentalLine;
        uint64_t v145 = swift_allocObject();
        *(void *)&long long v200 = v145;
        *(void *)(v145 + 16) = 0;
        *(void *)(v145 + 24) = 0;
        *(double *)(v145 + 32) = v129;
        *(unsigned char *)(v145 + 40) = v186;
        v133[2] = v144 + 1;
        sub_100068978(&v200, (uint64_t)&v133[5 * v144 + 4]);
        uint64_t v132 = 1;
      }
      uint64_t v188 = v125;
      swift_bridgeObjectRetain_n();
      uint64_t v149 = (char *)v199;
      swift_retain_n();
      int64_t v150 = v198;
      swift_retain_n();
      swift_retain_n();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v133 = sub_100AFB4F4(0, v133[2] + 1, 1, v133);
      }
      unint64_t v152 = v133[2];
      unint64_t v151 = v133[3];
      Swift::Int v153 = v133;
      if (v152 >= v151 >> 1) {
        Swift::Int v153 = sub_100AFB4F4((void *)(v151 > 1), v152 + 1, 1, v133);
      }
      id v201 = &type metadata for Lyrics.TextLine;
      Swift::String v202 = &protocol witness table for Lyrics.TextLine;
      uint64_t v154 = swift_allocObject();
      *(void *)&long long v200 = v154;
      *(double *)(v154 + 16) = v135;
      *(double *)(v154 + 24) = v134;
      *(void *)(v154 + 32) = v132;
      *(unsigned char *)(v154 + 40) = v192;
      *(unsigned char *)(v154 + 41) = v191;
      *(unsigned char *)(v154 + 42) = v190;
      *(void *)(v154 + 48) = v139;
      *(_OWORD *)(v154 + 56) = v193;
      *(void *)(v154 + 72) = v189;
      long long v155 = v198;
      *(_OWORD *)(v154 + 80) = v199;
      *(_OWORD *)(v154 + 96) = v155;
      *(void *)(v154 + 112) = v142;
      v153[2] = v152 + 1;
      id v133 = v153;
      sub_100068978(&v200, (uint64_t)&v153[5 * v152 + 4]);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      BOOL v68 = __OFADD__(v132++, 1);
      if (v68) {
        break;
      }
      v131 += 104;
      double v129 = v135;
      double v130 = v134;
      int v194 = (_UNKNOWN **)v139;
      Swift::String v195 = v149;
      int64_t v196 = v150;
      uint64_t v125 = v188 - 1;
      if (v188 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_135;
      }
    }
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    swift_bridgeObjectRetain();
    uint64_t v158 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v132 = 0;
    id v133 = _swiftEmptyArrayStorage;
    double v134 = 0.0;
LABEL_135:
    Swift::String v139 = &selRef_isDragging;
    id v156 = [v197 songwriters];
    unint64_t v157 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v157 >> 62) {
      goto LABEL_160;
    }
    uint64_t v158 = *(void *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v158)
  {
    swift_bridgeObjectRelease();
    goto LABEL_157;
  }
  id v159 = [v197 v139[216]];
  unint64_t v160 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v160 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v161 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v161 = *(void *)((v160 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *(void *)&long long v198 = v133;
  if (!v161)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v163 = _swiftEmptyArrayStorage;
    goto LABEL_152;
  }
  *(void *)&long long v200 = _swiftEmptyArrayStorage;
  sub_100076FC8(0, v161 & ~(v161 >> 63), 0);
  if (v161 < 0) {
    goto LABEL_163;
  }
  uint64_t v162 = 0;
  uint64_t v163 = (void *)v200;
  *(void *)&long long v199 = v160 & 0xC000000000000001;
  unint64_t v164 = v160;
  do
  {
    if ((void)v199) {
      id v165 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v165 = *(id *)(v160 + 8 * v162 + 32);
    }
    uint64_t v166 = v165;
    id v167 = [v165 name];
    uint64_t v168 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v170 = v169;

    *(void *)&long long v200 = v163;
    unint64_t v172 = v163[2];
    unint64_t v171 = v163[3];
    if (v172 >= v171 >> 1)
    {
      sub_100076FC8((char *)(v171 > 1), v172 + 1, 1);
      uint64_t v163 = (void *)v200;
    }
    ++v162;
    v163[2] = v172 + 1;
    uint64_t v173 = &v163[2 * v172];
    v173[4] = v168;
    v173[5] = v170;
    unint64_t v160 = v164;
  }
  while (v161 != v162);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_152:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    *(void *)&long long v198 = sub_100AFB4F4(0, *(void *)(v198 + 16) + 1, 1, (void *)v198);
  }
  unint64_t v175 = *(void *)(v198 + 16);
  unint64_t v174 = *(void *)(v198 + 24);
  if (v175 >= v174 >> 1) {
    *(void *)&long long v198 = sub_100AFB4F4((void *)(v174 > 1), v175 + 1, 1, (void *)v198);
  }
  id v201 = &type metadata for Lyrics.SongwritersLine;
  Swift::String v202 = &protocol witness table for Lyrics.SongwritersLine;
  uint64_t v176 = swift_allocObject();
  *(void *)&long long v200 = v176;
  *(void *)(v176 + 16) = v132;
  *(double *)(v176 + 24) = v134;
  *(void *)(v176 + 32) = 0x7FF0000000000000;
  *(unsigned char *)(v176 + 40) = v186;
  *(void *)(v176 + 48) = v163;
  id v133 = (void *)v198;
  *(void *)(v198 + 16) = v175 + 1;
  sub_100068978(&v200, (uint64_t)&v133[5 * v175 + 4]);
LABEL_157:

  Swift::String v177 = v180;
  v180[4] = v187;
  v177[5] = v133;
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (uint64_t)v177;
}

void *sub_100AF92A0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100076FC8(0, v1, 0);
    uint64_t v3 = a1 + 32;
    do
    {
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v5;
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_100076FC8((char *)(v7 > 1), v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      uint64_t v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v4;
      _OWORD v9[5] = v6;
      v3 += 8;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100AF937C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_19;
  }
  unint64_t v8 = (void *)Strong;
  swift_beginAccess();
  uint64_t v9 = v8[15];
  if (!v9
    || ((uint64_t v10 = v8[9]) != 0 ? (v11 = a3 == 0) : (v11 = 1),
        v11
     || ((uint64_t v12 = v8[14], v12 == v8[8]) ? (v13 = v9 == v10) : (v13 = 0),
         v13
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (swift_beginAccess(), uint64_t v14 = v8[16], !*(void *)(v14 + 16)))))
  {
    swift_release();
LABEL_19:
    swift_bridgeObjectRetain();
    return a4;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_100071D70(v12, v9);
  if ((v16 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v17 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v17 + 16) || (unint64_t v18 = sub_100071D70(a2, a3), (v19 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_23;
  }
  uint64_t v20 = (uint64_t *)(*(void *)(v17 + 56) + 88 * v18);
  uint64_t v22 = v20[2];
  uint64_t v21 = v20[3];
  uint64_t v23 = v20[5];
  uint64_t v27 = v20[1];
  uint64_t v28 = v20[4];
  uint64_t v24 = v20[6];
  uint64_t v26 = *v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100B045C4(v21, v28, v23, v24);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v27)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  a4 = v26;
  sub_100B04608(v26, v27, v22, v21, v28, v23, v24);
  swift_bridgeObjectRelease();
  return a4;
}

uint64_t sub_100AF95F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_16;
  }
  unint64_t v8 = (void *)Strong;
  swift_beginAccess();
  uint64_t v9 = v8[15];
  if (!v9) {
    goto LABEL_15;
  }
  uint64_t v10 = v8[9];
  if (!v10) {
    goto LABEL_15;
  }
  if (!a3) {
    goto LABEL_15;
  }
  uint64_t v11 = v8[14];
  if (v11 == v8[8] && v9 == v10) {
    goto LABEL_15;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_15;
  }
  swift_beginAccess();
  uint64_t v12 = v8[16];
  if (!*(void *)(v12 + 16)) {
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_100071D70(v11, v9);
  if ((v14 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    swift_beginAccess();
    uint64_t v19 = *(void *)(a4 + 16);
    swift_bridgeObjectRetain();
    return v19;
  }
  uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v15 + 16) || (unint64_t v16 = sub_100071D70(a2, a3), (v17 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  unint64_t v18 = (void *)(*(void *)(v15 + 56) + 88 * v16);
  uint64_t v19 = v18[2];
  uint64_t v20 = v18[3];
  uint64_t v21 = v18[4];
  uint64_t v22 = v18[5];
  uint64_t v23 = v18[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100B045C4(v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100AFF514(v20, v21, v22, v23);
  return v19;
}

uint64_t sub_100AF9848@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t *a4@<X8>)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_16;
  }
  uint64_t v9 = (void *)Strong;
  swift_beginAccess();
  uint64_t v10 = v9[15];
  if (!v10) {
    goto LABEL_15;
  }
  uint64_t v11 = v9[9];
  if (!v11) {
    goto LABEL_15;
  }
  if (!a2) {
    goto LABEL_15;
  }
  uint64_t v12 = v9[14];
  if (v12 == v9[8] && v10 == v11) {
    goto LABEL_15;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_15;
  }
  swift_beginAccess();
  uint64_t v13 = v9[16];
  if (!*(void *)(v13 + 16)) {
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_100071D70(v12, v10);
  if ((v15 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    swift_beginAccess();
    uint64_t v20 = a3[2];
    uint64_t v21 = a3[3];
    uint64_t v22 = a3[4];
    uint64_t v23 = a3[5];
    uint64_t v24 = a3[6];
    uint64_t v25 = a3[7];
    uint64_t v27 = a3[8];
    uint64_t v26 = a3[9];
    uint64_t result = sub_100B045C4(v20, v21, v22, v23);
    goto LABEL_17;
  }
  uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v16 + 16) || (unint64_t v17 = sub_100071D70(a1, a2), (v18 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  uint64_t v19 = (void *)(*(void *)(v16 + 56) + 88 * v17);
  uint64_t v20 = v19[3];
  uint64_t v21 = v19[4];
  uint64_t v22 = v19[5];
  uint64_t v23 = v19[6];
  uint64_t v24 = v19[7];
  uint64_t v25 = v19[8];
  uint64_t v27 = v19[9];
  uint64_t v26 = v19[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100B045C4(v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100B045C4(v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_100AFF514(v20, v21, v22, v23);
LABEL_17:
  *a4 = v20;
  a4[1] = v21;
  a4[2] = v22;
  a4[3] = v23;
  a4[4] = v24;
  a4[5] = v25;
  a4[6] = v27;
  a4[7] = v26;
  return result;
}

void Lyrics.line(before:useOriginalLines:)(char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (a1)
  {
    uint64_t v6 = sub_100AF5178(*(void *)(v3 + 48));
    uint64_t v7 = v6[2];
    if (!v7) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v6 = *(void **)(v3 + 40);
    swift_bridgeObjectRetain();
    uint64_t v7 = v6[2];
    if (!v7)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return;
    }
  }
  unint64_t v8 = v6 + 4;
  sub_1000688E4((uint64_t)(v6 + 4), (uint64_t)&v29);
  uint64_t v10 = *((void *)&v30 + 1);
  uint64_t v9 = v31;
  sub_100068990(&v29, *((uint64_t *)&v30 + 1));
  double v11 = (*(double (**)(uint64_t))(*(void *)(v9 + 8) + 8))(v10);
  sub_1000760E4((uint64_t)&v29);
  if (v11 > a3) {
    goto LABEL_6;
  }
  uint64_t v12 = 0;
  uint64_t v13 = v7 - 1;
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v14 = v13;
  while (!__OFSUB__(v14, v12))
  {
    unint64_t v15 = v12 + (v14 - v12) / 2;
    if (__OFADD__(v12, (v14 - v12) / 2)) {
      goto LABEL_25;
    }
    if ((v15 & 0x8000000000000000) != 0) {
      goto LABEL_26;
    }
    if (v15 >= v6[2]) {
      goto LABEL_27;
    }
    sub_1000688E4((uint64_t)&v8[5 * v15], (uint64_t)v26);
    uint64_t v17 = v27;
    uint64_t v16 = v28;
    sub_100068990(v26, v27);
    double v18 = (*(double (**)(uint64_t))(*(void *)(v16 + 8) + 8))(v17);
    double v19 = v18;
    if ((uint64_t)v15 >= v13)
    {
      double v22 = INFINITY;
      if (v18 > a3) {
        goto LABEL_8;
      }
    }
    else
    {
      if (v15 + 1 >= v6[2]) {
        goto LABEL_28;
      }
      sub_1000688E4((uint64_t)&v8[5 * v15 + 5], (uint64_t)v23);
      uint64_t v21 = v24;
      uint64_t v20 = v25;
      sub_100068990(v23, v24);
      double v22 = (*(double (**)(uint64_t))(*(void *)(v20 + 8) + 8))(v21);
      sub_1000760E4((uint64_t)v23);
      if (v19 > a3)
      {
LABEL_8:
        uint64_t v14 = v15 - 1;
        goto LABEL_9;
      }
    }
    if (v22 >= a3)
    {
      sub_1000637B8((uint64_t)&v29, &qword_1010CAAF0);
      swift_bridgeObjectRelease();
      sub_1000688E4((uint64_t)v26, (uint64_t)&v29);
      sub_1000760E4((uint64_t)v26);
      goto LABEL_23;
    }
    uint64_t v12 = v15 + 1;
LABEL_9:
    sub_1000760E4((uint64_t)v26);
    if (v14 < v12)
    {
      swift_bridgeObjectRelease();
LABEL_23:
      sub_10003CABC((uint64_t)&v29, a2, &qword_1010CAAF0);
      return;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t Lyrics.line(after:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100068990(a1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  uint64_t v7 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v8 = *(void *)(v2 + 40);
  if (v7 >= *(void *)(v8 + 16))
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  if (v7 < 0) {
    goto LABEL_9;
  }

  return sub_1000688E4(v8 + 40 * v7 + 32, a2);
}

BOOL sub_100AF9E40(id *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  [*a1 characterRange];
  v9._uint64_t countAndFlagsBits = a2;
  v9._object = a3;
  v10._uint64_t countAndFlagsBits = a4;
  v10._object = a5;
  __C::_NSRange v11 = _NSRange.convert(from:to:preserveLength:)(v9, v10, 1);
  if (!v12) {
    return _NSRange.contains(_:)(v11);
  }
  swift_errorRelease();
  return 0;
}

BOOL sub_100AF9EE4(id *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = *a1;
  [*a1 characterRange];
  v10._uint64_t countAndFlagsBits = a2;
  v10._object = a3;
  v11._uint64_t countAndFlagsBits = a4;
  v11._object = a5;
  __C::_NSRange v12 = _NSRange.convert(from:to:preserveLength:)(v10, v11, 0);
  if (!v13) {
    return _NSRange.intersects(_:)(v12);
  }
  if (qword_1010C8518 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100050A90(v14, (uint64_t)static Logger.lyrics);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  id v15 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  id v16 = v15;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v24 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136446978;
    [v16 characterRange];
    uint64_t v20 = _NSRange.description.getter();
    *(void *)(v19 + 4) = sub_100076010(v20, v21, &v25);

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v19 + 14) = sub_100076010(a4, (unint64_t)a5, &v25);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 22) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v19 + 24) = sub_100076010(a2, (unint64_t)a3, &v25);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 32) = 2114;
    swift_errorRetain();
    uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v19 + 34) = v22;
    *uint64_t v24 = v22;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "    Wasn't able to convert syllable range from primaryVocalText to lyricsText indicating a parsing issue.\n    MSVLyricsWord.characterRange=%{public}s\n    primaryVocalsText=%{public}s\n    lyricsText=%{public}s\n    thrownError=%{public}@", (uint8_t *)v19, 0x2Au);
    sub_100063814(&qword_1010C9230);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    swift_errorRelease();
    swift_errorRelease();
  }
  return 0;
}

uint64_t Logger.lyrics.unsafeMutableAddressor()
{
  if (qword_1010C8518 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_100050A90(v0, (uint64_t)static Logger.lyrics);
}

void sub_100AFA298(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_100057778(0, (unint64_t *)&qword_1010C9658);
    sub_100B0437C();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v25;
    uint64_t v24 = v26;
    uint64_t v2 = v27;
    uint64_t v3 = v28;
    unint64_t v4 = v29;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v22 = v2;
  int64_t v23 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    uint64_t v9 = v3;
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_37;
      }
      sub_100057778(0, (unint64_t *)&qword_1010C9658);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v12 = v30;
      swift_unknownObjectRelease();
      if (!v30) {
        goto LABEL_37;
      }
      goto LABEL_32;
    }
    if (!v4) {
      break;
    }
    unint64_t v10 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v11 = v10 | (v3 << 6);
LABEL_31:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v11);
    if (!v12) {
      goto LABEL_37;
    }
LABEL_32:
    id v16 = [v12 type];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = v1;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      if (v19 == 0x70756F7267 && v21 == 0xE500000000000000)
      {

        swift_bridgeObjectRelease();
LABEL_37:
        sub_100048F1C();
        return;
      }
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      uint64_t v1 = v18;
      if (v8) {
        goto LABEL_37;
      }
    }
    else
    {
    }
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v23) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v13);
    ++v3;
    if (!v14)
    {
      uint64_t v3 = v9 + 2;
      if (v9 + 2 >= v23) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v3);
      if (!v14)
      {
        uint64_t v3 = v9 + 3;
        if (v9 + 3 >= v23) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v3);
        if (!v14)
        {
          uint64_t v3 = v9 + 4;
          if (v9 + 4 >= v23) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v24 + 8 * v3);
          if (!v14)
          {
            uint64_t v3 = v9 + 5;
            if (v9 + 5 >= v23) {
              goto LABEL_37;
            }
            unint64_t v14 = *(void *)(v24 + 8 * v3);
            if (!v14)
            {
              uint64_t v15 = v9 + 6;
              while (v23 != v15)
              {
                unint64_t v14 = *(void *)(v24 + 8 * v15++);
                if (v14)
                {
                  uint64_t v3 = v15 - 1;
                  goto LABEL_30;
                }
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_30:
    unint64_t v4 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v3 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

void sub_100AFA61C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_100057778(0, (unint64_t *)&qword_1010C9658);
    sub_100B0437C();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v25;
    uint64_t v24 = v26;
    uint64_t v2 = v27;
    uint64_t v3 = v28;
    unint64_t v4 = v29;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v22 = v2;
  int64_t v23 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    uint64_t v9 = v3;
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_37;
      }
      sub_100057778(0, (unint64_t *)&qword_1010C9658);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v12 = v30;
      swift_unknownObjectRelease();
      if (!v30) {
        goto LABEL_37;
      }
      goto LABEL_32;
    }
    if (!v4) {
      break;
    }
    unint64_t v10 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v11 = v10 | (v3 << 6);
LABEL_31:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v11);
    if (!v12) {
      goto LABEL_37;
    }
LABEL_32:
    id v16 = [v12 type];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = v1;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      if (v19 == 0x726568746FLL && v21 == 0xE500000000000000)
      {

        swift_bridgeObjectRelease();
LABEL_37:
        sub_100048F1C();
        return;
      }
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      uint64_t v1 = v18;
      if (v8) {
        goto LABEL_37;
      }
    }
    else
    {
    }
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v23) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v13);
    ++v3;
    if (!v14)
    {
      uint64_t v3 = v9 + 2;
      if (v9 + 2 >= v23) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v3);
      if (!v14)
      {
        uint64_t v3 = v9 + 3;
        if (v9 + 3 >= v23) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v3);
        if (!v14)
        {
          uint64_t v3 = v9 + 4;
          if (v9 + 4 >= v23) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v24 + 8 * v3);
          if (!v14)
          {
            uint64_t v3 = v9 + 5;
            if (v9 + 5 >= v23) {
              goto LABEL_37;
            }
            unint64_t v14 = *(void *)(v24 + 8 * v3);
            if (!v14)
            {
              uint64_t v15 = v9 + 6;
              while (v23 != v15)
              {
                unint64_t v14 = *(void *)(v24 + 8 * v15++);
                if (v14)
                {
                  uint64_t v3 = v15 - 1;
                  goto LABEL_30;
                }
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_30:
    unint64_t v4 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v3 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

uint64_t Lyrics.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Lyrics.__deallocating_deinit()
{
  Lyrics.deinit();

  return swift_deallocClassInstance();
}

id sub_100AFAA44(id *a1)
{
  return [*a1 isBackgroundVocal];
}

id sub_100AFAA78()
{
  return [*v0 startTime];
}

id sub_100AFAA88()
{
  return [*v0 endTime];
}

uint64_t MSVLyricsAgent.isEqual(_:)(uint64_t a1)
{
  sub_10006CAB8(a1, (uint64_t)v48, &qword_1010CAD00);
  if (!v49)
  {
    sub_1000637B8((uint64_t)v48, &qword_1010CAD00);
    goto LABEL_46;
  }
  sub_100057778(0, (unint64_t *)&qword_1010C9658);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_46:
    char v34 = 0;
    return v34 & 1;
  }
  id v2 = [v1 type];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  id v7 = [v47 type];
  if (v7)
  {
    char v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    if (v6)
    {
      if (!v11) {
        goto LABEL_44;
      }
      if (v4 == v9 && v6 == v11)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0) {
          goto LABEL_51;
        }
      }
    }
    else if (v11)
    {
      goto LABEL_44;
    }
  }
  else if (v6)
  {
    goto LABEL_44;
  }
  id v13 = [v1 name];
  if (v13)
  {
    unint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
  }
  id v18 = [v47 name];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    if (v17)
    {
      if (!v22) {
        goto LABEL_44;
      }
      if (v15 == v20 && v17 == v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0) {
          goto LABEL_51;
        }
      }
    }
    else if (v22)
    {
      goto LABEL_44;
    }
  }
  else if (v17)
  {
    goto LABEL_44;
  }
  id v24 = [v1 artistID];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v28 = 0;
  }
  id v29 = [v47 artistID];
  if (!v29)
  {
    if (v28) {
      goto LABEL_44;
    }
    goto LABEL_49;
  }
  long long v30 = v29;
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  if (!v28)
  {
    if (v33) {
      goto LABEL_44;
    }
    goto LABEL_49;
  }
  if (!v33) {
    goto LABEL_44;
  }
  if (v26 == v31 && v28 == v33)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v36 & 1) == 0)
  {
LABEL_51:

    goto LABEL_46;
  }
LABEL_49:
  id v37 = [v1 identifier];
  if (v37)
  {
    uint64_t v38 = v37;
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;
  }
  else
  {
    uint64_t v39 = 0;
    uint64_t v41 = 0;
  }
  id v42 = [v47 identifier];
  if (!v42)
  {
    if (!v41)
    {

      char v34 = 1;
      return v34 & 1;
    }
    goto LABEL_44;
  }
  uint64_t v43 = v42;
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v45;

  if (!v41)
  {

    if (!v46)
    {
      char v34 = 1;
      return v34 & 1;
    }
    goto LABEL_45;
  }
  if (!v46)
  {
LABEL_44:

LABEL_45:
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  if (v39 == v44 && v41 == v46) {
    char v34 = 1;
  }
  else {
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v34 & 1;
}

uint64_t sub_100AFAF4C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100014CA4(v0, static Logger.lyrics);
  sub_100050A90(v0, (uint64_t)static Logger.lyrics);
  return static Logger.music(_:)();
}

uint64_t static Logger.lyrics.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1010C8518 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_100050A90(v2, (uint64_t)static Logger.lyrics);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void *sub_100AFB050(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C9AC0);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100063814(&qword_1010C9AC8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100AFB188(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C9AD0);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100063814(&qword_1010C9AD8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100AFB2C0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C9AB8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  char v12 = v10 + 32;
  id v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100AFB3D4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C9A78);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  char v12 = v10 + 32;
  id v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8]) {
      memmove(v12, v13, 104 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100AFB4F4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C9A60);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100063814(&qword_1010C9A68);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100AFB62C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C99B0);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[8 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, v8 << 6);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100063814(&qword_1010C99B8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_100AFB750(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_100AFB9F0(a1, a2, a3, a4, &qword_1010C9A28, type metadata accessor for Razzmatazz);
}

void *sub_100AFB770(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100AFB784(a1, a2, a3, a4, &qword_1010C9A30, &qword_1010C9A38);
}

void *sub_100AFB784(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100063814(a5);
    id v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    _OWORD v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    id v13 = _swiftEmptyArrayStorage;
  }
  if (v8)
  {
    if (v13 != a4 || v13 + 4 >= &a4[v11 + 4]) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100063814(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

void *sub_100AFB8AC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C9A40);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100063814(&qword_1010C9A48);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_100AFB9D0(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_100AFB9F0(a1, a2, a3, a4, &qword_1010C9990, (uint64_t (*)(void))&type metadata accessor for Playlist.Collaborator);
}

size_t sub_100AFB9F0(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100063814(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v16;
}

char *sub_100AFBBCC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C9A08);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 120);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[120 * v8]) {
      memmove(v12, v13, 120 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100AFBCE8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C99F8);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8]) {
      memmove(v12, v13, 88 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100AFBE04(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C99D8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100AFBF08(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C99C8);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100063814(&qword_1010C99D0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100AFC02C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C94C0);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_100AFC134(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100AFC2CC(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100AFC154(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100AFC4A8(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_100AFC174(void *a1, int64_t a2, char a3)
{
  size_t result = sub_100AFC5BC(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100AFC194(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100AFC6F4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100AFC1B4(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100AFC814(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_100AFC1D4(void *a1, int64_t a2, char a3)
{
  size_t result = sub_100AFC910(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100AFC1F4(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100AFCA34(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_100AFC214(void *a1, int64_t a2, char a3)
{
  size_t result = sub_100AFCB30(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

size_t sub_100AFC234(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100AFCC54(a1, a2, a3, (void *)*v3, &qword_1010C9A28, type metadata accessor for Razzmatazz);
  *uint64_t v3 = result;
  return result;
}

size_t sub_100AFC270(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100AFCC54(a1, a2, a3, (void *)*v3, &qword_1010C9A50, (uint64_t (*)(void))&type metadata accessor for Artist);
  *uint64_t v3 = result;
  return result;
}

char *sub_100AFC2AC(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100AFCF1C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

size_t sub_100AFC2CC(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100063814(&qword_1010C8CC8);
  uint64_t v10 = *(void *)(sub_100063814(&qword_1010C8CC0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  _OWORD v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_100063814(&qword_1010C8CC0) - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

char *sub_100AFC4A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C9AB8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void *sub_100AFC5BC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C9A60);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100063814(&qword_1010C9A68);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_100AFC6F4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C9AB0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_100AFC814(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C99C0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

void *sub_100AFC910(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C99B0);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[8 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, v8 << 6);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100063814(&qword_1010C99B8);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_100AFCA34(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C9998);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_release();
  return v10;
}

void *sub_100AFCB30(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C99A0);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100063814(&qword_1010C99A8);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

size_t sub_100AFCC54(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100063814(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v16;
}

char *sub_100AFCE30(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C94B0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

char *sub_100AFCF1C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100063814(&qword_1010C99F0);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

unint64_t sub_100AFD020(uint64_t a1)
{
  Hasher.init(_seed:)();
  PlaylistCovers.Cover.Representation.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100AFD158(a1, v2);
}

unint64_t sub_100AFD08C(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100AFD2A4(a1, v2);
}

unint64_t sub_100AFD158(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v7 = *(void *)(v2 + 48) + 56 * i;
    long long v9 = *(_OWORD *)(v7 + 16);
    long long v8 = *(_OWORD *)(v7 + 32);
    long long v10 = *(_OWORD *)v7;
    uint64_t v22 = *(void *)(v7 + 48);
    v21[1] = v9;
    void v21[2] = v8;
    v21[0] = v10;
    sub_100477F64((uint64_t)v21);
    char v11 = static PlaylistCovers.Cover.Representation.== infix(_:_:)(v21, a1);
    sub_100477FBC((uint64_t)v21);
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      for (unint64_t i = (i + 1) & v12; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
      {
        uint64_t v13 = *(void *)(v2 + 48) + 56 * i;
        long long v15 = *(_OWORD *)(v13 + 16);
        long long v14 = *(_OWORD *)(v13 + 32);
        long long v16 = *(_OWORD *)v13;
        uint64_t v20 = *(void *)(v13 + 48);
        v19[1] = v15;
        v19[2] = v14;
        v19[0] = v16;
        sub_100477F64((uint64_t)v19);
        char v17 = static PlaylistCovers.Cover.Representation.== infix(_:_:)(v19, a1);
        sub_100477FBC((uint64_t)v19);
        if (v17) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_100AFD2A4(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v14 = ~v3;
    while (1)
    {
      int v5 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v4);
      if (v5 == 1) {
        unint64_t v6 = 0xD000000000000014;
      }
      else {
        unint64_t v6 = 0xD000000000000015;
      }
      if (v5 == 1) {
        unint64_t v7 = 0x8000000100DD2ED0;
      }
      else {
        unint64_t v7 = 0x8000000100DD2EF0;
      }
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4)) {
        unint64_t v8 = v6;
      }
      else {
        unint64_t v8 = 0xD000000000000015;
      }
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4)) {
        unint64_t v9 = v7;
      }
      else {
        unint64_t v9 = 0x8000000100DD2EB0;
      }
      if (a1)
      {
        if (a1 == 1) {
          unint64_t v10 = 0xD000000000000014;
        }
        else {
          unint64_t v10 = 0xD000000000000015;
        }
        if (a1 == 1) {
          unint64_t v11 = 0x8000000100DD2ED0;
        }
        else {
          unint64_t v11 = 0x8000000100DD2EF0;
        }
        if (v8 != v10) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v11 = 0x8000000100DD2EB0;
        if (v8 != 0xD000000000000015) {
          goto LABEL_26;
        }
      }
      if (v9 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_26:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v14;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

uint64_t sub_100AFD448(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100063814(&qword_1010C96F8);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    id v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100AFD760(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100063814(&qword_1010C96F0);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    id v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100AFDA70(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100063814(&qword_1010C9A10);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_10007664C((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_100076F0C(v25, (uint64_t)&v38);
      sub_100076134(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_10007664C(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100AFDD88(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100063814(&qword_1010C9A00);
  char v52 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  id v50 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v48 = v2;
  int64_t v49 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  uint64_t v51 = v5;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v53 = v13;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v49) {
      break;
    }
    unint64_t v23 = v50;
    unint64_t v24 = v50[v22];
    int64_t v25 = v13 + 1;
    if (!v24)
    {
      int64_t v25 = v22 + 1;
      if (v22 + 1 >= v49) {
        goto LABEL_33;
      }
      unint64_t v24 = v50[v25];
      if (!v24)
      {
        int64_t v26 = v22 + 2;
        if (v26 >= v49)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v48;
          if ((v52 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = v50[v26];
        if (!v24)
        {
          while (1)
          {
            int64_t v25 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v25 >= v49) {
              goto LABEL_33;
            }
            unint64_t v24 = v50[v25];
            ++v26;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v25 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    int64_t v53 = v25;
    unint64_t v21 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_31:
    uint64_t v31 = *(void *)(v5 + 56);
    uint64_t v32 = *(void *)(v5 + 48) + 56 * v21;
    char v33 = *(unsigned char *)v32;
    uint64_t v35 = *(void **)(v32 + 8);
    uint64_t v34 = *(void **)(v32 + 16);
    uint64_t v37 = *(void **)(v32 + 24);
    uint64_t v36 = *(void **)(v32 + 32);
    long long v39 = *(void **)(v32 + 40);
    long long v38 = *(void **)(v32 + 48);
    uint64_t v40 = v31 + 120 * v21;
    Swift::String v54 = *(void **)v40;
    uint64_t v55 = *(void *)(v40 + 8);
    uint64_t v56 = *(void **)(v40 + 16);
    uint64_t v57 = *(void **)(v40 + 24);
    unint64_t v67 = *(void **)(v40 + 48);
    BOOL v68 = *(void **)(v40 + 40);
    uint64_t v65 = *(void *)(v40 + 64);
    unint64_t v66 = *(void **)(v40 + 56);
    uint64_t v63 = *(void *)(v40 + 80);
    uint64_t v64 = *(void *)(v40 + 72);
    uint64_t v61 = *(void *)(v40 + 96);
    uint64_t v62 = *(void *)(v40 + 88);
    uint64_t v60 = *(void *)(v40 + 104);
    id v58 = *(void **)(v40 + 32);
    uint64_t v59 = *(void *)(v40 + 112);
    if ((v52 & 1) == 0)
    {
      id v41 = v35;
      id v42 = v34;
      id v43 = v37;
      id v44 = v36;
      id v45 = v39;
      id v46 = v38;
      sub_100477388(v54, v55, v56, v57, v58, v68, v67, v66);
      sub_10047741C(v63);
    }
    LOBYTE(v69) = v33;
    *((void *)&v69 + 1) = v35;
    *(void *)&long long v70 = v34;
    *((void *)&v70 + 1) = v37;
    *(void *)&long long v71 = v36;
    *((void *)&v71 + 1) = v39;
    Hasher.init(_seed:)();
    PlaylistCovers.Cover.Representation.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v5 = v51;
      int64_t v13 = v53;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      uint64_t v5 = v51;
      int64_t v13 = v53;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = *(void *)(v7 + 48) + 56 * v17;
    *(_OWORD *)uint64_t v18 = v69;
    *(_OWORD *)(v18 + 16) = v70;
    *(_OWORD *)(v18 + 32) = v71;
    *(void *)(v18 + 48) = v38;
    unint64_t v19 = (void *)(*(void *)(v7 + 56) + 120 * v17);
    *unint64_t v19 = v54;
    v19[1] = v55;
    v19[2] = v56;
    _OWORD v19[3] = v57;
    void v19[4] = v58;
    v19[5] = v68;
    v19[6] = v67;
    v19[7] = v66;
    v19[8] = v65;
    v19[9] = v64;
    v19[10] = v63;
    v19[11] = v62;
    v19[12] = v61;
    v19[13] = v60;
    v19[14] = v59;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v48;
  unint64_t v23 = v50;
  if ((v52 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v47 = 1 << *(unsigned char *)(v5 + 32);
  if (v47 >= 64) {
    bzero(v23, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v47;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_100AFE1E4(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void *sub_100AFE22C()
{
  uint64_t v1 = v0;
  sub_100063814(&qword_1010C9730);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    unint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_10007AA40(v24, *((unint64_t *)&v24 + 1));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AFE3F4()
{
  uint64_t v1 = v0;
  sub_100063814(&qword_1010C96F8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v2 + 16);
  if (!v5)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v7 = v2 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v8)
  {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v8);
    uint64_t v5 = *(void *)(v2 + 16);
  }
  int64_t v10 = 0;
  *(void *)(v4 + 16) = v5;
  uint64_t v11 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v2 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v2 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v4 + 48) + v17);
    *unint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100AFE5AC()
{
  uint64_t v1 = v0;
  sub_100063814(&qword_1010C96F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AFE760()
{
  uint64_t v1 = v0;
  sub_100063814(&qword_1010C9A10);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_100076F0C(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_100076134(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    id result = sub_10007664C(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AFE948()
{
  sub_100063814(&qword_1010C9A00);
  id v44 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t v43 = v3;
    id result = (void *)swift_release();
    *id v44 = v43;
    return result;
  }
  id result = (void *)(v2 + 64);
  unint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  __src = (void *)(v1 + 64);
  BOOL v6 = v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5;
  uint64_t v48 = v3;
  if (v6)
  {
    id result = memmove(result, __src, 8 * v5);
    uint64_t v3 = v48;
  }
  int64_t v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v1 + 64);
  int64_t v46 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v47 = v1;
  while (1)
  {
    if (v10)
    {
      uint64_t v49 = (v10 - 1) & v10;
      int64_t v50 = v7;
      unint64_t v11 = __clz(__rbit64(v10)) | (v7 << 6);
      uint64_t v12 = v47;
      uint64_t v3 = v48;
      goto LABEL_12;
    }
    int64_t v39 = v7 + 1;
    uint64_t v12 = v47;
    uint64_t v3 = v48;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v39 >= v46) {
      goto LABEL_26;
    }
    unint64_t v40 = *((void *)__src + v39);
    int64_t v41 = v7 + 1;
    if (!v40)
    {
      int64_t v41 = v7 + 2;
      if (v7 + 2 >= v46) {
        goto LABEL_26;
      }
      unint64_t v40 = *((void *)__src + v41);
      if (!v40) {
        break;
      }
    }
LABEL_25:
    uint64_t v49 = (v40 - 1) & v40;
    int64_t v50 = v41;
    unint64_t v11 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_12:
    uint64_t v13 = 56 * v11;
    uint64_t v14 = *(void *)(v12 + 48) + 56 * v11;
    uint64_t v15 = 120 * v11;
    uint64_t v16 = *(void *)(v12 + 56) + v15;
    uint64_t v18 = *(void **)v16;
    uint64_t v17 = *(void *)(v16 + 8);
    long long v20 = *(void **)(v16 + 16);
    long long v19 = *(void **)(v16 + 24);
    int64_t v21 = *(void **)(v16 + 32);
    unint64_t v22 = *(void **)(v16 + 40);
    int64_t v23 = *(void **)(v16 + 48);
    int64_t v24 = *(void **)(v16 + 56);
    uint64_t v25 = *(void *)(v16 + 64);
    uint64_t v26 = *(void *)(v16 + 72);
    uint64_t v27 = *(void *)(v16 + 88);
    uint64_t v53 = *(void *)(v16 + 80);
    uint64_t v28 = *(void *)(v16 + 104);
    uint64_t v52 = *(void *)(v16 + 96);
    uint64_t v29 = *(void *)(v16 + 112);
    uint64_t v30 = *(void *)(v3 + 48) + v13;
    long long v31 = *(_OWORD *)(v14 + 8);
    long long v54 = *(_OWORD *)(v14 + 24);
    long long v55 = *(_OWORD *)(v14 + 40);
    *(unsigned char *)uint64_t v30 = *(unsigned char *)v14;
    *(_OWORD *)(v30 + 8) = v31;
    uint64_t v51 = (void *)*((void *)&v31 + 1);
    *(_OWORD *)(v30 + 24) = v54;
    *(_OWORD *)(v30 + 40) = v55;
    uint64_t v32 = (void *)(*(void *)(v3 + 56) + v15);
    *uint64_t v32 = v18;
    v32[1] = v17;
    v32[2] = v20;
    v32[3] = v19;
    v32[4] = v21;
    v32[5] = v22;
    v32[6] = v23;
    v32[7] = v24;
    v32[8] = v25;
    v32[9] = v26;
    v32[10] = v53;
    v32[11] = v27;
    v32[12] = v52;
    v32[13] = v28;
    v32[14] = v29;
    id v33 = (id)v31;
    id v34 = v51;
    id v35 = (id)v54;
    id v36 = *((id *)&v54 + 1);
    id v37 = (id)v55;
    id v38 = *((id *)&v55 + 1);
    sub_100477388(v18, v17, v20, v19, v21, v22, v23, v24);
    id result = (void *)sub_10047741C(v53);
    unint64_t v10 = v49;
    int64_t v7 = v50;
  }
  uint64_t v42 = v7 + 3;
  if (v7 + 3 >= v46) {
    goto LABEL_26;
  }
  unint64_t v40 = *((void *)__src + v42);
  if (v40)
  {
    int64_t v41 = v7 + 3;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v41 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v41 >= v46) {
      goto LABEL_26;
    }
    unint64_t v40 = *((void *)__src + v41);
    ++v42;
    if (v40) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100AFEC38(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    sub_100AFED9C((unint64_t *)((char *)&v11 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    uint64_t v7 = v6;
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v5);
    sub_100AFED9C((unint64_t *)v8, v4, v2);
    uint64_t v7 = v9;
    swift_release();
    swift_slowDealloc();
  }
  return v7;
}

void sub_100AFED9C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a2;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v26 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_21:
    id v14 = *(id *)(*(void *)(a3 + 48) + 8 * v10);
    id v15 = [v14 type];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      if (v17 == 0x6E6F73726570 && v19 == 0xE600000000000000)
      {

        swift_bridgeObjectRelease();
LABEL_29:
        *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        if (__OFADD__(v25++, 1))
        {
          __break(1u);
LABEL_32:
          swift_retain();
          sub_100AFEFE0(a1, v23, v25, a3);
          return;
        }
      }
      else
      {
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_29;
        }
      }
    }
    else
    {
    }
  }
  int64_t v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v11 >= v26) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v11);
  ++v4;
  if (v12) {
    goto LABEL_20;
  }
  int64_t v4 = v11 + 1;
  if (v11 + 1 >= v26) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12) {
    goto LABEL_20;
  }
  int64_t v4 = v11 + 2;
  if (v11 + 2 >= v26) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_20:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_21;
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v26) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v26) {
      goto LABEL_32;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_34:
  __break(1u);
}

uint64_t sub_100AFEFE0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100063814((uint64_t *)&unk_1010CE7F0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  unint64_t v9 = (void *)result;
  uint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    Swift::Int v18 = v9[5];
    id v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1 << *((unsigned char *)v9 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_100AFF240(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      Swift::UInt64 v5 = *v4;
      Swift::UInt v6 = v4[3];
      Swift::UInt v7 = v4[4];
      Swift::UInt v8 = v4[5];
      if ((*(v4 - 1) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v9 = *(v4 - 1);
      }
      else {
        Swift::UInt64 v9 = 0;
      }
      Hasher._combine(_:)(v9);
      if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v10 = v5;
      }
      else {
        Swift::UInt64 v10 = 0;
      }
      Hasher._combine(_:)(v10);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      swift_bridgeObjectRelease();
      v4 += 7;
      --v3;
    }
    while (v3);
  }
}

BOOL _s11MusicCoreUI6LyricsC8SyllableV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
    return 0;
  }
  BOOL v4 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v5 & 1) != 0))
  {
    if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40)) {
      return *(void *)(a1 + 48) == *(void *)(a2 + 48);
    }
    return 0;
  }
  return result;
}

uint64_t _s11MusicCoreUI6LyricsC8TextLineV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16)
    && *(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48))
  {
    uint64_t v3 = (*(uint64_t (**)(void))(a1 + 56))();
    uint64_t v5 = v4;
    if (v3 == (*(uint64_t (**)(void))(a2 + 56))() && v5 == v6) {
      char v7 = 1;
    }
    else {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t sub_100AFF498(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result + 56 * v1;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v3 = *(void *)(v2 + 16);
  BOOL v5 = __OFADD__(v4, v3);
  uint64_t v6 = v4 + v3;
  if (v5) {
    goto LABEL_7;
  }
  BOOL result = *(void *)(result + 64);
  if (__OFSUB__(v6, result))
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  return result;
}

uint64_t *sub_100AFF4D8(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100AFF514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100AFF558(uint64_t a1)
{
  return a1;
}

uint64_t sub_100AFF584()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100AFF5BC()
{
  return swift_deallocObject();
}

uint64_t sub_100AFF5CC()
{
  return swift_deallocObject();
}

_UNKNOWN **sub_100AFF604(uint64_t a1, uint64_t a2)
{
  v27[1] = a1;
  uint64_t v3 = sub_100063814(&qword_1010C9AF0);
  __chkstk_darwin(v3 - 8);
  BOOL v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale.Language();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::UInt64 v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Locale.LanguageCode();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)v27 - v15;
  __chkstk_darwin(v17);
  if (!a2) {
    return &off_101008698;
  }
  id v19 = (char *)v27 - v18;
  swift_bridgeObjectRetain();
  Locale.Language.init(identifier:)();
  Locale.Language.languageCode.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    sub_1000637B8((uint64_t)v5, &qword_1010C9AF0);
    return &off_101008698;
  }
  unint64_t v21 = v19;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v5, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v19, v10);
  Locale.LanguageCode.init(stringLiteral:)();
  sub_100B046AC(&qword_1010C9AF8, (void (*)(uint64_t))&type metadata accessor for Locale.LanguageCode);
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v13, v10);
  if ((v22 & 1) != 0
    || (Locale.LanguageCode.init(stringLiteral:)(),
        char v24 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v23(v13, v10),
        (v24 & 1) != 0))
  {
    v23(v16, v10);
    v23(v21, v10);
    return &off_101008620;
  }
  Locale.LanguageCode.init(stringLiteral:)();
  char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  v23(v13, v10);
  if (v25)
  {
    v23(v16, v10);
LABEL_11:
    v23(v21, v10);
    return &off_101008648;
  }
  Locale.LanguageCode.init(stringLiteral:)();
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  v23(v13, v10);
  v23(v16, v10);
  if (v26) {
    goto LABEL_11;
  }
  v23(v21, v10);
  return &off_101008670;
}

uint64_t sub_100AFFA7C(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, int a6, char a7, char a8)
{
  v184._object = a5;
  v184._uint64_t countAndFlagsBits = a4;
  unint64_t v8 = a1;
  unint64_t v224 = a1;
  if ((a8 & 1) == 0)
  {
    if (a7)
    {
      swift_bridgeObjectRetain();
      NSString v205 = String._bridgeToObjectiveC()();
      uint64_t result = String.count.getter();
      if (result < 0) {
        goto LABEL_131;
      }
      uint64_t v37 = result;
      if (!result)
      {
        uint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
        swift_bridgeObjectRelease();

        return (uint64_t)v12;
      }
      id v38 = 0;
      uint64_t v39 = 0;
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
      int64x2_t v199 = vdupq_n_s64(1uLL);
      uint64_t v188 = result;
      while (1)
      {
        while (1)
        {
          if (__OFSUB__(++v39, v38)) {
            goto LABEL_123;
          }
          unint64_t v40 = v38;
          uint64_t v222 = v38;
          id v223 = (char *)(v39 - (void)v38);
          __chkstk_darwin(result);
          uint64_t v41 = sub_100063814(&qword_1010C9AA0);
          unint64_t v8 = 0;
          uint64_t result = Array.extractFirst(where:)(v41, (uint64_t)v220);
          id v209 = v220[0];
          if (v220[0]) {
            break;
          }
          id v38 = v40;
          if (v39 == v37) {
            goto LABEL_118;
          }
        }
        if (v224 >> 62)
        {
          id v45 = v220[0];
          swift_bridgeObjectRetain();
          unint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v8)
          {
LABEL_22:
            uint64_t v43 = v222;
            id v44 = v223;
            goto LABEL_26;
          }
        }
        else
        {
          unint64_t v8 = *(void *)((v224 & 0xFFFFFFFFFFFFFF8) + 0x10);
          id v42 = v220[0];
          if (v8) {
            goto LABEL_22;
          }
        }
        int64_t v46 = (char *)[v205 length];
        id v44 = (char *)(v46 - (char *)v40);
        if (__OFSUB__(v46, v40)) {
          goto LABEL_126;
        }
        uint64_t v43 = v40;
        uint64_t v222 = v40;
        id v223 = v44;
LABEL_26:
        uint64_t v193 = v39;
        long long v198 = v43;
        uint64_t v47 = (uint64_t)v44;
        _NSRange.makeIterator()();
        v220[0] = v48;
        v220[1] = v49;
        v220[2] = v50;
        char v221 = v51 & 1;
        Swift::Int_optional v225 = _NSRange.NSRangeIterator.next()();
        uint64_t v195 = v47;
        if (!v225.is_nil)
        {
          Swift::Int value = v225.value;
          uint64_t v53 = 0;
          double v54 = (double)v47;
          while (1)
          {
            long long v55 = v12;
            if (__OFADD__(v53, 1)) {
              break;
            }
            id v56 = [v205 substringWithRange:value];
            uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v213 = v58;
            uint64_t v217 = v57;

            sub_100063814(&qword_1010C9AB0);
            uint64_t v59 = swift_allocObject();
            *(_OWORD *)(v59 + 16) = xmmword_100E251D0;
            [v209 startTime];
            double v61 = v60;
            id v62 = v209;
            [v62 endTime];
            double v64 = v63;
            [v62 startTime];
            double v66 = v65;

            double v67 = v61 + (v64 - v66) / v54 * (double)v53;
            [v62 startTime];
            double v69 = v68;
            id v70 = v62;
            [v70 endTime];
            double v72 = v71;
            [v70 startTime];
            double v74 = v73;

            id v75 = [v205 substringWithRange:value];
            uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v78 = v77;

            *(double *)(v59 + 32) = v67;
            *(double *)(v59 + 40) = v69 + (v72 - v74) / v54 * (double)(v53 + 1);
            *(void *)(v59 + 48) = v76;
            *(void *)(v59 + 56) = v78;
            *(void *)(v59 + 64) = value;
            *(int64x2_t *)(v59 + 72) = v199;
            uint64_t v12 = v55;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v12 = sub_100AFB2C0(0, *((void *)v55 + 2) + 1, 1, v55);
            }
            unint64_t v8 = *((void *)v12 + 2);
            unint64_t v79 = *((void *)v12 + 3);
            if (v8 >= v79 >> 1) {
              uint64_t v12 = sub_100AFB2C0((char *)(v79 > 1), v8 + 1, 1, v12);
            }
            *((void *)v12 + 2) = v8 + 1;
            Swift::String v80 = &v12[40 * v8];
            *((void *)v80 + 4) = v217;
            *((void *)v80 + 5) = v213;
            *((void *)v80 + 6) = v59;
            *((void *)v80 + 7) = 0;
            v80[64] = 1;
            Swift::Int_optional v226 = _NSRange.NSRangeIterator.next()();
            Swift::Int value = v226.value;
            ++v53;
            if (v226.is_nil) {
              goto LABEL_34;
            }
          }
          __break(1u);
          goto LABEL_120;
        }
LABEL_34:

        id v38 = (void *)((char *)v198 + v195);
        if (__OFADD__(v198, v195)) {
          goto LABEL_124;
        }
        uint64_t v37 = v188;
        uint64_t v39 = v193;
        if (v193 == v188) {
          goto LABEL_118;
        }
      }
    }
    uint64_t v81 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v81 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (!v81)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_116:
      swift_bridgeObjectRelease();
      return (uint64_t)v12;
    }
    uint64_t v180 = 4 * v81;
    int v82 = a6 ^ 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v83 = 0;
    unint64_t v84 = 0;
    uint64_t v85 = 0;
    unint64_t v8 = 0;
    LOBYTE(v86) = 1;
    unint64_t v87 = 15;
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
    Swift::String v181 = _swiftEmptyArrayStorage;
    uint64_t v218 = _swiftEmptyArrayStorage;
    unsigned int v194 = v82;
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v183 = String.index(after:)();
      swift_bridgeObjectRelease();
      BOOL v88 = (v86 & 1) == 0;
      if (v86) {
        unint64_t v89 = v87;
      }
      else {
        unint64_t v89 = v83;
      }
      unint64_t v90 = v87;
      if (v88) {
        unint64_t v87 = v84;
      }
      unint64_t v91 = v90;
      if (v89 >> 14 > (unint64_t)String.index(after:)() >> 14)
      {
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
        goto LABEL_125;
      }
      unint64_t v200 = v89 >> 14;
      swift_bridgeObjectRetain();
      uint64_t v92 = _NSRange.init(range:in:)();
      if (v8 < v87 >> 14) {
        goto LABEL_122;
      }
      uint64_t v94 = v93;
      unint64_t v210 = v8;
      unint64_t v214 = v89;
      Swift::String v185 = v85;
      uint64_t v95 = v92;
      swift_bridgeObjectRetain();
      unint64_t v206 = v87;
      unint64_t v96 = v91;
      uint64_t v202 = _NSRange.init(range:in:)();
      uint64_t v98 = v97;
      __chkstk_darwin(v202);
      uint64_t v196 = v95;
      uint64_t v99 = sub_100063814(&qword_1010C9AA0);
      Array.extractFirst(where:)(v99, (uint64_t)v220);
      unint64_t v86 = (unint64_t)v220[0];
      String.subscript.getter();
      uint64_t v100 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
      if ((v100 & 1) == 0) {
        break;
      }
      uint64_t v101 = v194;
      id v102 = (void *)v86;
      if (v86)
      {
        id v103 = v185;
        if (v185) {
          goto LABEL_54;
        }
LABEL_61:
        id v112 = v102;
        LOBYTE(v86) = 0;
        unint64_t v8 = v214;
        unint64_t v83 = v214;
        goto LABEL_62;
      }
      if (v185)
      {
        id v113 = v185;
        [v113 characterRange];
        v114._uint64_t countAndFlagsBits = a2;
        v114._object = (void *)a3;
        __C::_NSRange v115 = _NSRange.convert(from:to:preserveLength:)(v184, v114, 0);
        if (v116)
        {
          swift_errorRelease();

          LOBYTE(v86) = 0;
LABEL_78:
          unint64_t v8 = v214;
          unint64_t v83 = v214;
          unint64_t v84 = v206;
          uint64_t v85 = v185;
          goto LABEL_79;
        }
        if (!_NSRange.contains(_:)(v115))
        {

          LOBYTE(v86) = 0;
          goto LABEL_78;
        }
        id v189 = v113;
        String.subscript.getter();
        uint64_t v117 = static String._fromSubstring(_:)();
        uint64_t v186 = v118;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v218 = sub_100AFB188(0, v218[2] + 1, 1, v218);
        }
        unint64_t v120 = v218[2];
        unint64_t v119 = v218[3];
        if (v120 >= v119 >> 1) {
          uint64_t v218 = sub_100AFB188((void *)(v119 > 1), v120 + 1, 1, v218);
        }
        v218[2] = v120 + 1;
        uint64_t v121 = &v218[5 * v120];
        v121[4] = v189;
        v121[5] = v117;
        v121[6] = v186;
        v121[7] = v202;
        v121[8] = v98;
        String.subscript.getter();
        uint64_t v122 = static String._fromSubstring(_:)();
        uint64_t v124 = v123;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::String v181 = sub_100AFB050(0, v181[2] + 1, 1, v181);
        }
        unint64_t v86 = v181[2];
        unint64_t v125 = v181[3];
        if (v86 >= v125 >> 1) {
          Swift::String v181 = sub_100AFB050((void *)(v125 > 1), v86 + 1, 1, v181);
        }
        v181[2] = v86 + 1;
        int64_t v126 = &v181[5 * v86];
        v126[4] = v122;
        v126[5] = v124;
        v126[6] = v218;
        v126[7] = v196;
        v126[8] = v94;

        unint64_t v83 = 0;
        unint64_t v84 = 0;
        uint64_t v85 = 0;
        LOBYTE(v86) = 1;
        uint64_t v218 = _swiftEmptyArrayStorage;
        unint64_t v8 = v214;
      }
      else
      {
        LOBYTE(v86) = 0;
        uint64_t v85 = 0;
        unint64_t v8 = v214;
        unint64_t v83 = v214;
        unint64_t v84 = v206;
      }
LABEL_79:
      if (v210 == (unint64_t)String.index(before:)() >> 14 && v85)
      {
        if (v210 >= v200)
        {
          unint64_t v176 = v84;
          unint64_t v177 = v83;
          char v178 = v86;
          uint64_t v182 = v102;
          swift_bridgeObjectRetain();
          Swift::String v187 = v85;
          id v127 = v85;
          uint64_t v211 = _NSRange.init(range:in:)();
          uint64_t v203 = v128;
          swift_bridgeObjectRetain();
          uint64_t v201 = _NSRange.init(range:in:)();
          uint64_t v130 = v129;
          swift_bridgeObjectRetain();
          id v179 = v127;
          String.index(after:)();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          uint64_t v131 = static String._fromSubstring(_:)();
          uint64_t v133 = v132;
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v218 = sub_100AFB188(0, v218[2] + 1, 1, v218);
          }
          unint64_t v135 = v218[2];
          unint64_t v134 = v218[3];
          if (v135 >= v134 >> 1) {
            uint64_t v218 = sub_100AFB188((void *)(v134 > 1), v135 + 1, 1, v218);
          }
          v218[2] = v135 + 1;
          int v136 = &v218[5 * v135];
          v136[4] = v179;
          v136[5] = v131;
          v136[6] = v133;
          v136[7] = v201;
          v136[8] = v130;
          swift_bridgeObjectRetain();
          String.index(after:)();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          uint64_t v137 = static String._fromSubstring(_:)();
          uint64_t v139 = v138;
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::String v181 = sub_100AFB050(0, v181[2] + 1, 1, v181);
          }
          unint64_t v141 = v181[2];
          unint64_t v140 = v181[3];
          if (v141 >= v140 >> 1) {
            Swift::String v181 = sub_100AFB050((void *)(v140 > 1), v141 + 1, 1, v181);
          }
          v181[2] = v141 + 1;
          uint64_t v142 = &v181[5 * v141 + 4];
          *uint64_t v142 = v137;
          v142[1] = v139;
          v142[2] = (uint64_t)v218;
          v142[3] = v211;
          v142[4] = v203;
          v220[0] = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain();
          sub_100AFC154(0, v141 + 1, 0);
          uint64_t v143 = 0;
          unint64_t v144 = v220[0];
          unint64_t v190 = v141;
          while (1)
          {
            uint64_t v145 = &v181[5 * v143 + 4];
            uint64_t v146 = *v145;
            unint64_t v8 = v145[2];
            uint64_t v215 = v145[1];
            uint64_t v219 = v145[4];
            uint64_t v147 = *(void *)(v8 + 16);
            uint64_t v212 = v143;
            uint64_t v207 = v146;
            if (v147)
            {
              id v204 = v144;
              uint64_t v148 = *(void **)(v8 + 40 * v147 - 8);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              [v148 endTime];
              if (!*(void *)(v8 + 16))
              {
LABEL_120:
                __break(1u);
                goto LABEL_121;
              }
              double v150 = v149;
              uint64_t v151 = v101;
              [*(id *)(v8 + 32) startTime];
              double v153 = v150 - v152;
              unint64_t v154 = v8;
              int64_t v155 = *(void *)(v8 + 16);
              if (v155)
              {
                uint64_t v222 = _swiftEmptyArrayStorage;
                swift_bridgeObjectRetain();
                sub_100AFC194(0, v155, 0);
                id v156 = v222;
                unint64_t v157 = (uint64_t *)(v154 + 64);
                do
                {
                  uint64_t v158 = *(v157 - 3);
                  uint64_t v159 = *(v157 - 2);
                  uint64_t v160 = *(v157 - 1);
                  uint64_t v161 = *v157;
                  id v162 = (id)*(v157 - 4);
                  swift_bridgeObjectRetain();
                  [v162 startTime];
                  uint64_t v164 = v163;
                  [v162 endTime];
                  uint64_t v166 = v165;

                  uint64_t v222 = v156;
                  unint64_t v168 = v156[2];
                  unint64_t v167 = v156[3];
                  if (v168 >= v167 >> 1)
                  {
                    sub_100AFC194((char *)(v167 > 1), v168 + 1, 1);
                    id v156 = v222;
                  }
                  v157 += 5;
                  v156[2] = v168 + 1;
                  uint64_t v169 = &v156[7 * v168];
                  v169[4] = v164;
                  v169[5] = v166;
                  v169[6] = v158;
                  v169[7] = v159;
                  v169[8] = v160;
                  v169[9] = v161;
                  v169[10] = v219;
                  --v155;
                }
                while (v155);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v101 = v194;
                unint64_t v141 = v190;
                unint64_t v144 = v204;
                goto LABEL_102;
              }
              unint64_t v144 = v204;
              uint64_t v101 = v151;
            }
            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              double v153 = 0.0;
            }
            swift_bridgeObjectRelease();
            id v156 = _swiftEmptyArrayStorage;
LABEL_102:
            char v170 = 1;
            double v171 = 0.0;
            if (!(v101 & 1 | (v153 <= 1.0)) && v219 <= 7)
            {
              double v172 = v153 + -1.0;
              if (v153 > 2.0) {
                double v172 = 1.0;
              }
              if (v153 < 1.0) {
                double v172 = 0.0;
              }
              if (v172 > 0.0)
              {
                char v170 = 0;
                double v171 = v172;
              }
            }
            v220[0] = v144;
            unint64_t v174 = v144[2];
            unint64_t v173 = v144[3];
            if (v174 >= v173 >> 1)
            {
              sub_100AFC154((char *)(v173 > 1), v174 + 1, 1);
              unint64_t v144 = v220[0];
            }
            v144[2] = v174 + 1;
            unint64_t v175 = (double *)&v144[5 * v174];
            *((void *)v175 + 4) = v207;
            *((void *)v175 + 5) = v215;
            *((void *)v175 + 6) = v156;
            v175[7] = v171;
            *((unsigned char *)v175 + 64) = v170;
            uint64_t v143 = v212 + 1;
            if (v212 == v141)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              uint64_t v12 = (char *)v144;
              uint64_t v218 = _swiftEmptyArrayStorage;
              unint64_t v87 = v183;
              uint64_t v85 = v187;
              LOBYTE(v86) = v178;
              unint64_t v83 = v177;
              unint64_t v84 = v176;
              goto LABEL_42;
            }
          }
        }
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        swift_bridgeObjectRetain();
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        if (v9) {
          goto LABEL_4;
        }
LABEL_128:
        swift_bridgeObjectRelease();
        return (uint64_t)_swiftEmptyArrayStorage;
      }

      unint64_t v87 = v183;
LABEL_42:
      unint64_t v8 = v87 >> 14;
      if (v87 >> 14 == v180)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_116;
      }
    }
    uint64_t v101 = v194;
    id v102 = (void *)v86;
    if (!v86) {
      goto LABEL_78;
    }
    id v103 = v185;
    if (!v185) {
      goto LABEL_61;
    }
LABEL_54:
    id v104 = v103;
    id v105 = v102;
    id v106 = v104;
    String.subscript.getter();
    uint64_t v107 = static String._fromSubstring(_:)();
    uint64_t v109 = v108;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v218 = sub_100AFB188(0, v218[2] + 1, 1, v218);
    }
    unint64_t v86 = v218[2];
    unint64_t v110 = v218[3];
    if (v86 >= v110 >> 1) {
      uint64_t v218 = sub_100AFB188((void *)(v110 > 1), v86 + 1, 1, v218);
    }
    v218[2] = v86 + 1;
    uint64_t v111 = &v218[5 * v86];
    v111[4] = v106;
    v111[5] = v107;
    v111[6] = v109;
    v111[7] = v202;
    v111[8] = v98;

    LOBYTE(v86) = 0;
    unint64_t v8 = v214;
    unint64_t v83 = v214;
LABEL_62:
    unint64_t v84 = v96;
    uint64_t v85 = v102;
    goto LABEL_79;
  }
  if (a1 >> 62) {
    goto LABEL_127;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_128;
  }
LABEL_4:
  v220[0] = _swiftEmptyArrayStorage;
  uint64_t result = (uint64_t)sub_100AFC154(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (char *)v220[0];
    unint64_t v208 = v8 & 0xC000000000000001;
    unint64_t v216 = v8;
    do
    {
      unint64_t v197 = v12;
      if (v208) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(v8 + 8 * v11 + 32);
      }
      uint64_t v14 = v13;
      id v15 = [v13 lyricsText];
      id v16 = [v15 string];

      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      sub_100063814(&qword_1010C9AB0);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_100E251D0;
      [v14 startTime];
      uint64_t v22 = v21;
      [v14 endTime];
      uint64_t v24 = v23;
      id v25 = [v14 lyricsText];
      id v26 = [v25 string];

      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;

      id v30 = [v14 characterRange];
      uint64_t v32 = v31;
      [v14 characterRange];
      *(void *)(v20 + 32) = v22;
      *(void *)(v20 + 40) = v24;
      *(void *)(v20 + 48) = v27;
      *(void *)(v20 + 56) = v29;
      *(void *)(v20 + 64) = v30;
      *(void *)(v20 + 72) = v32;
      *(void *)(v20 + 80) = v33;

      uint64_t v12 = v197;
      v220[0] = v197;
      unint64_t v35 = *((void *)v197 + 2);
      unint64_t v34 = *((void *)v197 + 3);
      if (v35 >= v34 >> 1)
      {
        sub_100AFC154((char *)(v34 > 1), v35 + 1, 1);
        uint64_t v12 = (char *)v220[0];
      }
      ++v11;
      *((void *)v12 + 2) = v35 + 1;
      id v36 = &v12[40 * v35];
      *((void *)v36 + 4) = v17;
      *((void *)v36 + 5) = v19;
      *((void *)v36 + 6) = v20;
      *((void *)v36 + 7) = 0;
      v36[64] = 1;
      unint64_t v8 = v216;
    }
    while (v9 != v11);
    goto LABEL_116;
  }
  __break(1u);
LABEL_131:
  __break(1u);
  return result;
}

uint64_t sub_100B00E70(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = [a1 words];
  if (v6)
  {
    uint64_t v7 = v6;
    sub_100057778(0, &qword_1010C9A98);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v8 = sub_100063814(&qword_1010C9AA0);
    uint64_t v9 = sub_100063858(&qword_1010C9AA8, &qword_1010C9AA0);
    uint64_t v10 = (void *)Sequence.exclude(_:)((uint64_t)sub_100AFAA44, 0, v8, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (qword_1010C8510 != -1) {
    swift_once();
  }
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = sub_100AF92A0(v11);
  swift_bridgeObjectRelease();
  if (a3) {
    char v13 = sub_1003C85DC(a2, a3, v12);
  }
  else {
    char v13 = 0;
  }
  swift_bridgeObjectRelease();
  if (qword_1010C8508 != -1) {
    swift_once();
  }
  uint64_t v14 = swift_bridgeObjectRetain();
  id v15 = sub_100AF92A0(v14);
  swift_bridgeObjectRelease();
  if (a3) {
    char v16 = sub_1003C85DC(a2, a3, v15);
  }
  else {
    char v16 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = sub_100AFF604(a2, a3);
  id v18 = [a1 primaryVocalText];
  id v19 = [v18 string];

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v22 = v21;

  id v23 = [a1 lyricsText];
  id v24 = [v23 string];

  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  id v28 = a1;
  [v28 endTime];
  [v28 startTime];

  LOBYTE(v28) = sub_1003C8DC4(2, (uint64_t)v17);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_100AFFA7C((unint64_t)v10, v20, v22, v25, v27, v28 & 1, v13 & 1, v16 & 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v29;
}

unint64_t sub_100B011A8()
{
  uint64_t v0 = type metadata accessor for Locale.Language();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = self;
  NSString v5 = String._bridgeToObjectiveC()();
  unint64_t v6 = (unint64_t)[v4 dominantLanguageForString:v5];

  if (v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Locale.Language.init(identifier:)();
    uint64_t v7 = Locale.Language.characterDirection.getter();

    unint64_t v6 = v7 == 2;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return v6;
}

unint64_t sub_100B012E0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v9 = [a1 subwords];
  if (!v9) {
    goto LABEL_10;
  }
  uint64_t v10 = v9;
  sub_100057778(0, &qword_1010C9A98);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    swift_bridgeObjectRelease();
LABEL_10:
    [a1 startTime];
    uint64_t v4 = v16;
    goto LABEL_11;
  }
LABEL_4:
  if ((v11 & 0xC000000000000001) != 0)
  {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_39;
    }
    id v12 = *(id *)(v11 + 32);
  }
  char v13 = v12;
  swift_bridgeObjectRelease();
  [v13 startTime];
  uint64_t v4 = v14;

LABEL_11:
  id v17 = [a1 subwords];
  if (!v17)
  {
LABEL_22:
    [a1 endTime];
    uint64_t v25 = v26;
    goto LABEL_23;
  }
  id v18 = v17;
  sub_100057778(0, &qword_1010C9A98);
  unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v19 >> 62))
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v20) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v20)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
LABEL_14:
  unint64_t result = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if ((v19 & 0xC000000000000001) != 0)
  {
LABEL_40:
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_19;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (result >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_42:
    __break(1u);
    return result;
  }
  id v22 = *(id *)(v19 + 8 * result + 32);
LABEL_19:
  id v23 = v22;
  swift_bridgeObjectRelease();
  [v23 endTime];
  uint64_t v25 = v24;

LABEL_23:
  if (qword_1010C8510 != -1) {
    swift_once();
  }
  uint64_t v27 = swift_bridgeObjectRetain();
  id v28 = sub_100AF92A0(v27);
  swift_bridgeObjectRelease();
  if (a3) {
    char v56 = sub_1003C85DC(a2, a3, v28);
  }
  else {
    char v56 = 0;
  }
  swift_bridgeObjectRelease();
  id v29 = [a1 lyricsText];
  id v30 = [v29 string];

  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v32;
  uint64_t v60 = v31;

  id v33 = [a1 characterRange];
  uint64_t v57 = v34;
  id v58 = v33;
  id v35 = [a1 lyricsText];
  id v36 = [v35 string];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v37 = sub_100B011A8();
  swift_bridgeObjectRelease();
  id v38 = [a1 subwords];
  if (v38)
  {
    uint64_t v39 = v38;
    uint64_t v55 = a2;
    sub_100057778(0, &qword_1010C9A98);
    unint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    id v41 = [a1 lyricsText];
    id v42 = [v41 string];

    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;

    id v46 = [a1 lyricsText];
    id v47 = [v46 string];

    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    int64_t v50 = v49;

    if (qword_1010C8508 != -1) {
      swift_once();
    }
    uint64_t v51 = swift_bridgeObjectRetain();
    uint64_t v52 = sub_100AF92A0(v51);
    swift_bridgeObjectRelease();
    if (a3) {
      char v53 = sub_1003C85DC(v55, a3, v52);
    }
    else {
      char v53 = 0;
    }
    swift_bridgeObjectRelease();
    double v54 = (void *)sub_100AFFA7C(v40, v43, v45, v48, v50, 0, v56 & 1, v53 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    double v54 = _swiftEmptyArrayStorage;
  }
  unint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v4;
  *(void *)(a4 + 8) = v25;
  *(void *)(a4 + 16) = v60;
  *(void *)(a4 + 24) = v59;
  *(void *)(a4 + 32) = v58;
  *(void *)(a4 + 40) = v57;
  *(unsigned char *)(a4 + 48) = v37 & 1;
  *(void *)(a4 + 56) = v54;
  return result;
}

void *sub_100B0186C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_100063814(&qword_1010C9AE8);
  unint64_t result = (void *)static _DictionaryStorage.copy(original:)();
  int64_t v8 = 0;
  uint64_t v54 = a1;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v10 = a1 + 64;
  uint64_t v9 = v11;
  uint64_t v12 = 1 << *(unsigned char *)(v10 - 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v9;
  uint64_t v47 = v10;
  int64_t v48 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v52 = result;
  char v53 = result + 8;
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  if (!v14) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v56 = (v14 - 1) & v14;
  for (unint64_t i = __clz(__rbit64(v14)) | (v8 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v8 << 6))
  {
    uint64_t v19 = *(void *)(v54 + 56);
    uint64_t v20 = (uint64_t *)(*(void *)(v54 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v65 = *v20;
    id v22 = *(void **)(v19 + 8 * i);
    uint64_t v58 = v21;
    swift_bridgeObjectRetain();
    id v23 = v22;
    id v24 = [a2 type];
    id v25 = [v23 lyricsText];
    id v26 = [v25 string];

    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;

    int64_t v57 = v8;
    if (v24 == (id)2)
    {
      uint64_t v49 = v27;
      id v30 = (void *)sub_100B00E70(v23, a3, a4);
      id v31 = [v23 backgroundVocals];
      if (v31)
      {
        uint64_t v32 = v31;
        swift_bridgeObjectRetain();
        sub_100B012E0(v32, a3, a4, (uint64_t)&v59);
        uint64_t v33 = v60;
        uint64_t v34 = v61;
        long long v45 = v62;
        long long v46 = v59;
        uint64_t v35 = v63;
        uint64_t v36 = v64;

        long long v38 = v45;
        long long v37 = v46;
      }
      else
      {

        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        long long v37 = 0uLL;
        long long v38 = 0uLL;
      }
      unint64_t result = v52;
      uint64_t v39 = v65;
      uint64_t v27 = v49;
    }
    else
    {

      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      long long v37 = 0uLL;
      long long v38 = 0uLL;
      id v30 = _swiftEmptyArrayStorage;
      unint64_t result = v52;
      uint64_t v39 = v65;
    }
    *(void *)((char *)v53 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    unint64_t v40 = (void *)(result[6] + 16 * i);
    *unint64_t v40 = v39;
    v40[1] = v58;
    uint64_t v41 = result[7] + 88 * i;
    *(void *)uint64_t v41 = v27;
    *(void *)(v41 + 8) = v29;
    *(void *)(v41 + 16) = v30;
    *(_OWORD *)(v41 + 24) = v37;
    *(void *)(v41 + 40) = v33;
    *(void *)(v41 + 48) = v34;
    *(_OWORD *)(v41 + 56) = v38;
    *(void *)(v41 + 72) = v35;
    *(void *)(v41 + 80) = v36;
    uint64_t v42 = result[2];
    BOOL v43 = __OFADD__(v42, 1);
    uint64_t v44 = v42 + 1;
    if (v43)
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    result[2] = v44;
    a3 = v50;
    a4 = v51;
    unint64_t v14 = v56;
    int64_t v8 = v57;
    if (v56) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_30;
    }
    if (v16 >= v48) {
      return result;
    }
    unint64_t v17 = *(void *)(v47 + 8 * v16);
    ++v8;
    if (!v17)
    {
      int64_t v8 = v16 + 1;
      if (v16 + 1 >= v48) {
        return result;
      }
      unint64_t v17 = *(void *)(v47 + 8 * v8);
      if (!v17)
      {
        int64_t v8 = v16 + 2;
        if (v16 + 2 >= v48) {
          return result;
        }
        unint64_t v17 = *(void *)(v47 + 8 * v8);
        if (!v17) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v56 = (v17 - 1) & v17;
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v48) {
    return result;
  }
  unint64_t v17 = *(void *)(v47 + 8 * v18);
  if (v17)
  {
    int64_t v8 = v18;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v8 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v8 >= v48) {
      return result;
    }
    unint64_t v17 = *(void *)(v47 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_18;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

char *sub_100B01BE8(uint64_t a1, char *a2, uint64_t a3, BOOL *a4, void *a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v136 = a8;
  uint64_t v147 = a7;
  LOBYTE(v8) = a6;
  id v139 = a5;
  uint64_t v128 = type metadata accessor for Locale.Language();
  uint64_t v13 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  id v127 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153[0] = a1;
  swift_getKeyPath();
  sub_100063814(&qword_1010C9A88);
  sub_100063858(&qword_1010C9A90, &qword_1010C9A88);
  unint64_t v15 = Sequence.sorted<A>(by:comparator:)();
  unint64_t result = (char *)swift_release();
  unint64_t v137 = v15;
  if (v15 >> 62) {
    goto LABEL_100;
  }
  uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  id v18 = v139;
  if (v17)
  {
    if (v17 >= 1)
    {
      int v132 = v8 & 1;
      int64_t v126 = a2 + 16;
      uint64_t v133 = v17;
      unint64_t v135 = v15 & 0xC000000000000001;
      id v134 = self;
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      uint64_t v123 = (id *)(a3 + 16);
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      uint64_t v129 = a4 + 16;
      swift_beginAccess();
      uint64_t v19 = 0;
      uint64_t v138 = 0;
      unint64_t v125 = (void (**)(char *, uint64_t))(v13 + 8);
      double v149 = (char *)_swiftEmptyArrayStorage;
      while (1)
      {
        uint64_t v146 = v19;
        if (v135) {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v20 = *(id *)(v15 + 8 * v19 + 32);
        }
        uint64_t v21 = v20;
        id v22 = [v20 agent];
        double v150 = v21;
        if (!v22) {
          goto LABEL_19;
        }
        id v23 = v22;
        swift_beginAccess();
        id v24 = v23;
        sub_100BB8288(v152, v24);
        swift_endAccess();

        id v25 = [v24 type];
        if (!v25)
        {

          goto LABEL_19;
        }
        id v26 = v25;
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v29 = v28;

        BOOL v30 = v27 == 0x6E6F73726570 && v29 == 0xE600000000000000;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          id v31 = [v24 identifier];
          if (v31)
          {
            uint64_t v32 = v31;
            uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v35 = v34;
          }
          else
          {
            uint64_t v33 = 0;
            uint64_t v35 = 0;
          }
          if (*v123 && (id v37 = [*v123 identifier]) != 0)
          {
            long long v38 = v37;
            uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v41 = v40;

            if (v35) {
              goto LABEL_27;
            }
          }
          else
          {
            uint64_t v39 = 0;
            uint64_t v41 = 0;
            if (v35)
            {
LABEL_27:
              if (!v41)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                id v18 = v139;
                goto LABEL_42;
              }
              if (v33 == v39 && v35 == v41)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                id v18 = v139;
              }
              else
              {
                char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                id v18 = v139;
                if ((v42 & 1) == 0) {
                  goto LABEL_41;
                }
              }
              goto LABEL_33;
            }
          }
          id v18 = v139;
          if (v41)
          {
            swift_bridgeObjectRelease();
LABEL_41:
            swift_bridgeObjectRelease();
LABEL_42:
            uint64_t v44 = v123;
            id v45 = *v123;
            long long v46 = v129;
            uint64_t v21 = v150;
            if (*v123)
            {
              *uint64_t v129 = !*v129;
              id v45 = *v44;
            }
            *uint64_t v44 = v23;

            int v36 = *v46;
            goto LABEL_45;
          }
        }
LABEL_33:
        if (v27 == 0x70756F7267 && v29 == 0xE500000000000000)
        {

          swift_bridgeObjectRelease();
          int v140 = 0;
          uint64_t v21 = v150;
          goto LABEL_46;
        }
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v21 = v150;
        if (v43)
        {

          swift_bridgeObjectRelease();
          int v140 = 0;
          goto LABEL_46;
        }
        if (v27 == 0x726568746FLL && v29 == 0xE500000000000000)
        {

          swift_bridgeObjectRelease();
          int v36 = 1;
          goto LABEL_45;
        }
        char v105 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        if (v105)
        {
          int v36 = 1;
          goto LABEL_45;
        }
LABEL_19:
        int v36 = *v129;
LABEL_45:
        int v140 = v36;
LABEL_46:
        id v47 = [v21 translationKey];
        if (v47)
        {
          int64_t v48 = v47;
          uint64_t v144 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v145 = v49;
        }
        else
        {
          uint64_t v144 = 0;
          uint64_t v145 = 0;
        }
        id v50 = [v18 type];
        uint64_t v51 = &selRef_primaryVocalText;
        if (v50 != (id)2) {
          uint64_t v51 = &selRef_lyricsText;
        }
        id v52 = [v21 *v51];
        id v53 = [v52 string];

        uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v56 = v55;

        uint64_t v141 = v54;
        uint64_t v142 = v56;
        NSString v57 = String._bridgeToObjectiveC()();
        a4 = (BOOL *)[v134 dominantLanguageForString:v57];

        if (a4)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v58 = v127;
          Locale.Language.init(identifier:)();
          uint64_t v59 = Locale.Language.characterDirection.getter();

          BOOL v143 = v59 == 2;
          (*v125)(v58, v128);
        }
        else
        {
          BOOL v143 = 0;
        }
        id v60 = [v21 words];
        if (v60)
        {
          uint64_t v61 = v60;
          sub_100057778(0, &qword_1010C9A98);
          uint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v151 = v62;
          uint64_t v63 = sub_100063814(&qword_1010C9AA0);
          uint64_t v64 = sub_100063858(&qword_1010C9AA8, &qword_1010C9AA0);
          uint64_t v65 = v63;
          a4 = v138;
          uint64_t v13 = Sequence.exclude(_:)((uint64_t)sub_100AFAA44, 0, v65, v64);
          uint64_t v138 = a4;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v13 = (uint64_t)_swiftEmptyArrayStorage;
        }
        uint64_t v66 = swift_allocObject();
        uint64_t v148 = v66;
        *(void *)(v66 + 16) = _swiftEmptyArrayStorage;
        double v67 = (uint64_t *)(v66 + 16);
        uint64_t v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = 0u;
        a3 = v68 + 16;
        *(_OWORD *)(v68 + 32) = 0u;
        *(_OWORD *)(v68 + 48) = 0u;
        *(_OWORD *)(v68 + 64) = 0u;
        if ([v18 type] == (id)2)
        {
          id v69 = [v18 language];
          if (v69)
          {
            id v70 = v69;
            uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v73 = v72;
          }
          else
          {
            uint64_t v71 = 0;
            uint64_t v73 = 0;
          }
          double v74 = v150;
          uint64_t v75 = sub_100B00E70(v150, v71, v73);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          *double v67 = v75;
          swift_bridgeObjectRelease();
          id v76 = [v74 backgroundVocals];
          if (v76)
          {
            uint64_t v124 = v68 + 16;
            id v77 = v76;
            id v78 = [v139 language];
            if (v78)
            {
              unint64_t v79 = v78;
              uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v82 = v81;
            }
            else
            {

              uint64_t v80 = 0;
              uint64_t v82 = 0;
            }
            sub_100B012E0(v77, v80, v82, (uint64_t)v153);
            uint64_t v83 = v153[0];
            uint64_t v84 = v153[1];
            uint64_t v85 = v153[2];
            a4 = (BOOL *)v153[3];
            uint64_t v86 = v153[4];
            uint64_t v130 = v154;
            uint64_t v131 = v153[5];
            uint64_t v87 = v155;

            a3 = v124;
          }
          else
          {
            uint64_t v83 = 0;
            uint64_t v84 = 0;
            uint64_t v85 = 0;
            a4 = 0;
            uint64_t v86 = 0;
            uint64_t v130 = 0;
            uint64_t v131 = 0;
            uint64_t v87 = 0;
          }
          swift_beginAccess();
          uint64_t v88 = *(void *)(v68 + 16);
          uint64_t v89 = *(void *)(v68 + 24);
          uint64_t v90 = *(void *)(v68 + 32);
          uint64_t v91 = *(void *)(v68 + 40);
          *(void *)(v68 + 16) = v83;
          *(void *)(v68 + 24) = v84;
          *(void *)(v68 + 32) = v85;
          *(void *)(v68 + 40) = a4;
          uint64_t v92 = v131;
          *(void *)(v68 + 48) = v86;
          *(void *)(v68 + 56) = v92;
          *(void *)(v68 + 64) = v130;
          *(void *)(v68 + 72) = v87;
          sub_100AFF514(v88, v89, v90, v91);
          uint64_t v21 = v150;
        }
        a2 = (char *)[v21 lineIndex];
        [v21 startTime];
        uint64_t v94 = v93;
        [v21 endTime];
        uint64_t v96 = v95;
        if ((unint64_t)v13 >> 62)
        {
          if (v13 < 0) {
            a4 = (BOOL *)v13;
          }
          else {
            a4 = (BOOL *)(v13 & 0xFFFFFFFFFFFFFF8);
          }
          swift_bridgeObjectRetain();
          uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
          if (!v8)
          {
LABEL_86:
            swift_bridgeObjectRelease();
            [v21 startTime];
            uint64_t v99 = v106;
            swift_bridgeObjectRelease();
            [v21 endTime];
            uint64_t v104 = v107;
            goto LABEL_87;
          }
        }
        else
        {
          uint64_t v8 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v8) {
            goto LABEL_86;
          }
        }
        if ((v13 & 0xC000000000000001) != 0)
        {
          uint64_t v97 = (BOOL *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            swift_bridgeObjectRetain();
            unint64_t v15 = v137;
            uint64_t v121 = _CocoaArrayWrapper.endIndex.getter();
            unint64_t result = (char *)swift_bridgeObjectRelease();
            uint64_t v17 = v121;
            goto LABEL_3;
          }
          uint64_t v97 = (BOOL *)*(id *)(v13 + 32);
        }
        a4 = v97;
        swift_bridgeObjectRelease();
        [a4 startTime];
        uint64_t v99 = v98;

        unint64_t v100 = v8 - 1;
        if (__OFSUB__(v8, 1)) {
          goto LABEL_97;
        }
        if ((v13 & 0xC000000000000001) != 0)
        {
          id v101 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v100 & 0x8000000000000000) != 0) {
            goto LABEL_98;
          }
          if (v100 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_99;
          }
          id v101 = *(id *)(v13 + 8 * v100 + 32);
        }
        id v102 = v101;
        swift_bridgeObjectRelease();
        [v102 endTime];
        uint64_t v104 = v103;

LABEL_87:
        uint64_t v108 = (void *)swift_allocObject();
        uint64_t v109 = v136;
        uint64_t v111 = v144;
        uint64_t v110 = v145;
        v108[2] = v136;
        v108[3] = v111;
        uint64_t v112 = v141;
        v108[4] = v110;
        v108[5] = v112;
        v108[6] = v142;
        id v113 = (void *)swift_allocObject();
        v113[2] = v109;
        v113[3] = v111;
        uint64_t v114 = v148;
        v113[4] = v110;
        v113[5] = v114;
        __C::_NSRange v115 = (void *)swift_allocObject();
        v115[2] = v109;
        v115[3] = v111;
        v115[4] = v110;
        v115[5] = v68;
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v149 = sub_100AFB3D4(0, *((void *)v149 + 2) + 1, 1, v149);
        }
        unint64_t v117 = *((void *)v149 + 2);
        unint64_t v116 = *((void *)v149 + 3);
        id v18 = v139;
        if (v117 >= v116 >> 1) {
          double v149 = sub_100AFB3D4((char *)(v116 > 1), v117 + 1, 1, v149);
        }
        uint64_t v118 = v146 + 1;
        unint64_t v119 = v149;
        *((void *)v149 + 2) = v117 + 1;
        unint64_t v120 = &v119[104 * v117];
        *((void *)v120 + 4) = v94;
        *((void *)v120 + 5) = v96;
        *((void *)v120 + 6) = a2;
        uint64_t v19 = v118;
        v120[56] = v140;
        v120[57] = v143;
        v120[58] = v132;
        *((void *)v120 + 8) = v147;
        *((void *)v120 + 9) = v99;
        *((void *)v120 + 10) = v104;
        *((void *)v120 + 11) = sub_100B044FC;
        *((void *)v120 + 12) = v108;
        *((void *)v120 + 13) = sub_100B04510;
        *((void *)v120 + 14) = v113;
        *((void *)v120 + 15) = sub_100B04568;
        *((void *)v120 + 16) = v115;

        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        unint64_t v15 = v137;
        if (v133 == v19) {
          goto LABEL_95;
        }
      }
    }
    __break(1u);
  }
  else
  {
    double v149 = (char *)_swiftEmptyArrayStorage;
LABEL_95:
    swift_bridgeObjectRelease();
    return v149;
  }
  return result;
}

Swift::Int sub_100B02980(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a1 + 16) > 1uLL)
    {
      uint64_t v21 = swift_bridgeObjectRetain();
      uint64_t v2 = sub_100AFEC38(v21);
      if ((v2 & 0xC000000000000001) != 0) {
        goto LABEL_34;
      }
      goto LABEL_30;
    }
    return 0;
  }
  if (__CocoaSet.count.getter() <= 1) {
    return 0;
  }
  uint64_t v2 = (uint64_t)&_swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_33;
  }
  sub_100057778(0, (unint64_t *)&qword_1010C9658);
  do
  {
    swift_dynamicCast();
    id v3 = [v30 type];
    if (!v3)
    {
LABEL_5:

      continue;
    }
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    if (v5 == 0x6E6F73726570 && v7 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0) {
        goto LABEL_5;
      }
    }
    unint64_t v10 = *((void *)&_swiftEmptySetSingleton + 2);
    if (*((void *)&_swiftEmptySetSingleton + 3) <= v10) {
      sub_100BB8EE4(v10 + 1);
    }
    Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
    uint64_t v12 = (char *)&_swiftEmptySetSingleton + 56;
    uint64_t v13 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
    unint64_t v14 = result & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*((void *)&_swiftEmptySetSingleton + (v14 >> 6) + 7)) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*((void *)&_swiftEmptySetSingleton + (v14 >> 6) + 7))) | v14 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v17 = 0;
      unint64_t v18 = (unint64_t)(63 - v13) >> 6;
      do
      {
        if (++v15 == v18 && (v17 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        BOOL v19 = v15 == v18;
        if (v15 == v18) {
          unint64_t v15 = 0;
        }
        v17 |= v19;
        uint64_t v20 = *(void *)&v12[8 * v15];
      }
      while (v20 == -1);
      unint64_t v16 = __clz(__rbit64(~v20)) + (v15 << 6);
    }
    *(void *)&v12[(v16 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v16;
    *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v16) = v30;
    ++*((void *)&_swiftEmptySetSingleton + 2);
  }
  while (__CocoaSet.Iterator.next()());
  uint64_t v2 = (uint64_t)&_swiftEmptySetSingleton;
LABEL_33:
  swift_release();
  if (((unint64_t)&_swiftEmptySetSingleton & 0xC000000000000001) == 0)
  {
LABEL_30:
    unint64_t v22 = *(void *)(v2 + 16);
    goto LABEL_35;
  }
LABEL_34:
  unint64_t v22 = __CocoaSet.count.getter();
LABEL_35:
  swift_release();
  sub_100AFA298(a1);
  char v24 = v23;
  sub_100AFA61C(a1);
  if (v22 == 2) {
    unsigned int v26 = 1;
  }
  else {
    unsigned int v26 = 2;
  }
  if (v22 == 1) {
    unsigned int v26 = 0;
  }
  if (v22 >= 3) {
    unsigned int v27 = 2;
  }
  else {
    unsigned int v27 = 0x10000u >> (8 * v22);
  }
  if (v24) {
    unsigned int v26 = v27;
  }
  if (v22 == 2) {
    unsigned int v28 = 1;
  }
  else {
    unsigned int v28 = 2;
  }
  if (v22 >= 3) {
    unsigned int v29 = 2;
  }
  else {
    unsigned int v29 = 0x10200u >> (8 * v22);
  }
  if ((v24 & 1) == 0) {
    unsigned int v28 = v29;
  }
  if (v25) {
    return v28;
  }
  else {
    return v26;
  }
}

uint64_t sub_100B02CE4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100B02D34()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100B02D6C()
{
  return swift_deallocObject();
}

unint64_t sub_100B02D80()
{
  unint64_t result = qword_1010C97B8;
  if (!qword_1010C97B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C97B8);
  }
  return result;
}

unint64_t sub_100B02DD8()
{
  unint64_t result = qword_1010C97C0;
  if (!qword_1010C97C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C97C0);
  }
  return result;
}

unint64_t sub_100B02E30()
{
  unint64_t result = qword_1010C97C8;
  if (!qword_1010C97C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C97C8);
  }
  return result;
}

unint64_t sub_100B02E88()
{
  unint64_t result = qword_1010C97D0;
  if (!qword_1010C97D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C97D0);
  }
  return result;
}

unint64_t sub_100B02EE0()
{
  unint64_t result = qword_1010C97D8;
  if (!qword_1010C97D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C97D8);
  }
  return result;
}

unint64_t sub_100B02F38()
{
  unint64_t result = qword_1010C97E0;
  if (!qword_1010C97E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C97E0);
  }
  return result;
}

unint64_t sub_100B02F90()
{
  unint64_t result = qword_1010C97E8;
  if (!qword_1010C97E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C97E8);
  }
  return result;
}

unint64_t sub_100B02FE8()
{
  unint64_t result = qword_1010C97F0;
  if (!qword_1010C97F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C97F0);
  }
  return result;
}

unint64_t sub_100B03040()
{
  unint64_t result = qword_1010C97F8;
  if (!qword_1010C97F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C97F8);
  }
  return result;
}

uint64_t sub_100B03094()
{
  return sub_100063858(&qword_1010C9800, &qword_1010C9808);
}

unint64_t sub_100B030D4()
{
  unint64_t result = qword_1010C9810;
  if (!qword_1010C9810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C9810);
  }
  return result;
}

uint64_t type metadata accessor for Lyrics()
{
  return self;
}

uint64_t destroy for Lyrics.Word()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Lyrics.Word(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Lyrics.Word(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  return a1;
}

__n128 _s14descr100FBE369V5SpecsV20SelectedLinePositionOwcp(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Lyrics.Word(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.Word(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.Word(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Word()
{
  return &type metadata for Lyrics.Word;
}

ValueMetadata *type metadata accessor for Lyrics.Word.Emphasis()
{
  return &type metadata for Lyrics.Word.Emphasis;
}

uint64_t initializeWithCopy for Lyrics.Syllable(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Lyrics.Syllable(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

__n128 initializeWithTake for SymbolButton.CustomView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Lyrics.Syllable(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.Syllable(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.Syllable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Syllable()
{
  return &type metadata for Lyrics.Syllable;
}

uint64_t destroy for Lyrics.TextLine()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for Lyrics.TextLine(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(void *)(a1 + 96) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Lyrics.TextLine(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for Lyrics.TextLine(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Lyrics.TextLine(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.TextLine(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.TextLine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.TextLine()
{
  return &type metadata for Lyrics.TextLine;
}

uint64_t destroy for Lyrics.TextLine.BackgroundVocals()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Lyrics.TextLine.BackgroundVocals(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Lyrics.TextLine.BackgroundVocals(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for Gradient(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Lyrics.TextLine.BackgroundVocals(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Lyrics.TextLine.BackgroundVocals()
{
  return &type metadata for Lyrics.TextLine.BackgroundVocals;
}

uint64_t getEnumTagSinglePayload for Lyrics.InstrumentalLine(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.InstrumentalLine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.InstrumentalLine()
{
  return &type metadata for Lyrics.InstrumentalLine;
}

uint64_t destroy for Lyrics.SongwritersLine()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Lyrics.SongwritersLine(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Lyrics.SongwritersLine(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Lyrics.SongwritersLine(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.SongwritersLine(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.SongwritersLine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.SongwritersLine()
{
  return &type metadata for Lyrics.SongwritersLine;
}

ValueMetadata *type metadata accessor for Lyrics.LyricsType()
{
  return &type metadata for Lyrics.LyricsType;
}

ValueMetadata *type metadata accessor for Lyrics.VocalistsType()
{
  return &type metadata for Lyrics.VocalistsType;
}

ValueMetadata *type metadata accessor for Lyrics.AgentAlignment()
{
  return &type metadata for Lyrics.AgentAlignment;
}

unsigned char *_s11MusicCoreUI6LyricsC14AgentAlignmentOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100B03D44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Direction()
{
  return &type metadata for Lyrics.Direction;
}

unsigned char *_s11MusicCoreUI6LyricsC10CapabilityOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100B03E48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Capability()
{
  return &type metadata for Lyrics.Capability;
}

void *initializeBufferWithCopyOfBuffer for Lyrics.AudioAttribute(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.AudioAttribute()
{
  return &type metadata for Lyrics.AudioAttribute;
}

uint64_t destroy for Lyrics.LineTranslationMetadata(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v6;
    long long v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 24);
  uint64_t v5 = (long long *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v6)
    {
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100B04100(a1 + 24);
      long long v7 = *(_OWORD *)(a2 + 72);
      long long v9 = *v5;
      long long v8 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v7;
      *uint64_t v4 = v9;
      *(_OWORD *)(a1 + 40) = v8;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *v5;
    long long v11 = *(_OWORD *)(a2 + 40);
    long long v12 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v12;
    *uint64_t v4 = v10;
    *(_OWORD *)(a1 + 40) = v11;
  }
  return a1;
}

uint64_t sub_100B04100(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 48)) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 48);
  if (!v5)
  {
    sub_100B04100(a1 + 24);
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v6;
    long long v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v7;
    return a1;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.LineTranslationMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.LineTranslationMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.LineTranslationMetadata()
{
  return &type metadata for Lyrics.LineTranslationMetadata;
}

uint64_t sub_100B042BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlaylistCurators.Curator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B04320(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlaylistCurators.Curator(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100B0437C()
{
  unint64_t result = qword_1010C9A80;
  if (!qword_1010C9A80)
  {
    sub_100057778(255, (unint64_t *)&qword_1010C9658);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1010C9A80);
  }
  return result;
}

const char *sub_100B043E4()
{
  return "startTime";
}

id sub_100B043F0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 startTime];
  *a2 = v4;
  return result;
}

id sub_100B04424(double *a1, id *a2)
{
  return [*a2 setStartTime:*a1];
}

uint64_t sub_100B04438()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100B04470()
{
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t sub_100B044B4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_100B044FC()
{
  return sub_100AF937C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100B04510()
{
  return sub_100AF95F0(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100B04520()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100B04568@<X0>(uint64_t *a1@<X8>)
{
  return sub_100AF9848(*(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), a1);
}

BOOL sub_100B04574(id *a1)
{
  return sub_100AF9EE4(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

BOOL sub_100B0459C(id *a1)
{
  return sub_100AF9E40(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100B045C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_100B04608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100AFF514(a4, a5, a6, a7);
  }
}

uint64_t sub_100B046AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static LyricsLoader.supportsLyrics(for:)(char *a1)
{
  uint64_t v2 = type metadata accessor for Song();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  long long v6 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v138 = (char *)&v130 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v137 = (char *)&v130 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v136 = (char *)&v130 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v131 = (char *)&v130 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v130 = (char *)&v130 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  BOOL v19 = (char *)&v130 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  unint64_t v22 = (char *)&v130 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v133 = (char *)&v130 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  int v132 = (char *)&v130 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  unint64_t v135 = (char *)&v130 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  id v134 = (char *)&v130 - v30;
  __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v130 - v31;
  char v33 = Song.hasLyrics.getter();
  uint64_t v139 = v3;
  uint64_t v34 = a1;
  uint64_t v35 = a1;
  int v36 = (char *)v2;
  id v37 = *(char **)(v3 + 16);
  ((void (*)(char *, char *, char *))v37)(v32, v35, v36);
  if (v33)
  {
    long long v38 = v32;
    uint64_t v39 = *(void (**)(char *, char *))(v3 + 8);
    v39(v38, v36);
  }
  else
  {
    char v40 = Song.hasCustomLyrics.getter();
    uint64_t v41 = v32;
    uint64_t v39 = *(void (**)(char *, char *))(v3 + 8);
    v39(v41, v36);
    if ((v40 & 1) == 0)
    {
      if (qword_1010C8518 != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      sub_100050A90(v57, (uint64_t)static Logger.lyrics);
      ((void (*)(char *, char *, char *))v37)(v6, v34, v36);
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = swift_slowAlloc();
        BOOL v143 = (char *)swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 136446210;
        uint64_t v61 = sub_100B0578C();
        *(void *)(v60 + 4) = sub_100076010(v61, v62, (uint64_t *)&v143);
        swift_bridgeObjectRelease();
        v39(v6, v36);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Loader supportsLyrics=false [hasLyrics and hasCustomLyrics were false] %{public}s", (uint8_t *)v60, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v39(v6, v36);
      }

      char v114 = 0;
      return v114 & 1;
    }
  }
  BagProvider.shared.unsafeMutableAddressor();
  swift_retain();
  char v42 = (char *)BagProvider.bag.getter();
  swift_release();
  char v43 = v34;
  if (!v42)
  {
    if (qword_1010C8518 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_100050A90(v45, (uint64_t)static Logger.lyrics);
    ((void (*)(char *, char *, char *))v37)(v22, v34, v36);
    unint64_t v135 = v37;
    ((void (*)(char *, char *, char *))v37)(v19, v34, v36);
    long long v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      id v134 = v36;
      uint64_t v49 = v48;
      uint64_t v133 = (char *)swift_slowAlloc();
      BOOL v143 = v133;
      *(_DWORD *)uint64_t v49 = 136446466;
      char v50 = Song.hasCustomLyrics.getter();
      BOOL v51 = (v50 & 1) == 0;
      if (v50) {
        uint64_t v52 = 1702195828;
      }
      else {
        uint64_t v52 = 0x65736C6166;
      }
      if (v51) {
        unint64_t v53 = 0xE500000000000000;
      }
      else {
        unint64_t v53 = 0xE400000000000000;
      }
      *(void *)(v49 + 4) = sub_100076010(v52, v53, (uint64_t *)&v143);
      swift_bridgeObjectRelease();
      uint64_t v54 = v22;
      uint64_t v44 = v39;
      v39(v54, v134);
      *(_WORD *)(v49 + 12) = 2082;
      uint64_t v55 = sub_100B0578C();
      *(void *)(v49 + 14) = sub_100076010(v55, v56, (uint64_t *)&v143);
      swift_bridgeObjectRelease();
      v39(v19, v134);
      char v43 = v34;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Loader supportsLyrics=%{public}s [bag is nil] %{public}s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      int v36 = v134;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v80 = v22;
      uint64_t v44 = v39;
      v39(v80, v36);
      v39(v19, v36);
    }

    id v37 = v135;
LABEL_34:
    char v81 = Song.hasLyrics.getter();
    uint64_t v82 = v138;
    uint64_t v83 = v137;
    uint64_t v84 = v136;
    if ((v81 & 1) == 0) {
      goto LABEL_41;
    }
    static ApplicationCapabilities.shared.getter((uint64_t)v141);
    uint64_t v85 = v37;
    uint64_t v86 = v142;
    swift_bridgeObjectRetain();
    sub_10005E8DC((uint64_t)v141);
    char v87 = sub_100B058BC(2u, v86);
    id v37 = v85;
    swift_bridgeObjectRelease();
    if (v87)
    {
      static ApplicationCapabilities.shared.getter((uint64_t)&v143);
      sub_10005E8DC((uint64_t)&v143);
      if (v144)
      {
        char v114 = 1;
        return v114 & 1;
      }
      if (qword_1010C8518 != -1) {
        swift_once();
      }
      uint64_t v88 = type metadata accessor for Logger();
      sub_100050A90(v88, (uint64_t)static Logger.lyrics);
      uint64_t v89 = v130;
      ((void (*)(char *, char *, char *))v85)(v130, v43, v36);
      uint64_t v90 = v131;
      ((void (*)(char *, char *, char *))v85)(v131, v43, v36);
      uint64_t v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v91, v92))
      {
        uint64_t v93 = swift_slowAlloc();
        uint64_t v140 = swift_slowAlloc();
        *(_DWORD *)uint64_t v93 = 67240450;
        int v94 = Song.hasCustomLyrics.getter() & 1;
        v44(v89, v36);
        *(_DWORD *)(v93 + 4) = v94;
        *(_WORD *)(v93 + 8) = 2082;
        uint64_t v95 = sub_100B0578C();
        *(void *)(v93 + 10) = sub_100076010(v95, v96, &v140);
        swift_bridgeObjectRelease();
        v44(v90, v36);
        uint64_t v97 = "Loader supportsLyrics=%{BOOL,public}d [not supported by subscription] subscriptionCapabilities.contains(.c"
              "atalogLyricsViewing)=false %{public}s";
        uint64_t v98 = v91;
        os_log_type_t v99 = v92;
        unint64_t v100 = (uint8_t *)v93;
        uint32_t v101 = 18;
LABEL_45:
        _os_log_impl((void *)&_mh_execute_header, v98, v99, v97, v100, v101);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
LABEL_48:

        char v114 = Song.hasCustomLyrics.getter();
        return v114 & 1;
      }
      v44(v89, v36);
      id v113 = v90;
    }
    else
    {
LABEL_41:
      if (qword_1010C8518 != -1) {
        swift_once();
      }
      uint64_t v102 = type metadata accessor for Logger();
      sub_100050A90(v102, (uint64_t)static Logger.lyrics);
      ((void (*)(char *, char *, char *))v37)(v84, v43, v36);
      ((void (*)(char *, char *, char *))v37)(v83, v43, v36);
      ((void (*)(char *, char *, char *))v37)(v82, v43, v36);
      uint64_t v91 = Logger.logObject.getter();
      os_log_type_t v103 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v91, v103))
      {
        uint64_t v104 = swift_slowAlloc();
        unint64_t v135 = v43;
        uint64_t v105 = v104;
        uint64_t v140 = swift_slowAlloc();
        *(_DWORD *)uint64_t v105 = 67240962;
        int v106 = Song.hasCustomLyrics.getter() & 1;
        v44(v84, v36);
        *(_DWORD *)(v105 + 4) = v106;
        *(_WORD *)(v105 + 8) = 1026;
        int v107 = Song.hasLyrics.getter() & 1;
        v44(v83, v36);
        *(_DWORD *)(v105 + 10) = v107;
        *(_WORD *)(v105 + 14) = 1026;
        static ApplicationCapabilities.shared.getter((uint64_t)&v143);
        uint64_t v108 = v145;
        swift_bridgeObjectRetain();
        sub_10005E8DC((uint64_t)&v143);
        char v109 = sub_100B058BC(2u, v108);
        swift_bridgeObjectRelease();
        *(_DWORD *)(v105 + 16) = v109 & 1;
        *(_WORD *)(v105 + 20) = 2082;
        uint64_t v110 = v138;
        uint64_t v111 = sub_100B0578C();
        *(void *)(v105 + 22) = sub_100076010(v111, v112, &v140);
        swift_bridgeObjectRelease();
        v44(v110, v36);
        uint64_t v97 = "Loader supportsLyrics=%{BOOL,public}d [can't support store lyrics] song.hasLyrics=%{BOOL,public}d allowsSu"
              "bscriptionContent=%{BOOL,public}d %{public}s";
        uint64_t v98 = v91;
        os_log_type_t v99 = v103;
        unint64_t v100 = (uint8_t *)v105;
        uint32_t v101 = 30;
        goto LABEL_45;
      }
      v44(v83, v36);
      v44(v84, v36);
      id v113 = v82;
    }
    v44(v113, v36);
    goto LABEL_48;
  }
  if ([self supportsLyricsForURLBag:v42])
  {

    uint64_t v44 = v39;
    goto LABEL_34;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v63 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v64 = [v42 dictionaryForBagKey:v63];

  if (v64)
  {

    if (qword_1010C8518 != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    sub_100050A90(v65, (uint64_t)static Logger.lyrics);
    uint64_t v66 = v134;
    ((void (*)(char *, char *, char *))v37)(v134, v34, v36);
    double v67 = v135;
    ((void (*)(char *, char *, char *))v37)(v135, v34, v36);
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v68, v69))
    {
      id v70 = v66;
      uint64_t v71 = swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      uint64_t v138 = v42;
      BOOL v143 = (char *)v72;
      *(_DWORD *)uint64_t v71 = 136446466;
      char v73 = Song.hasCustomLyrics.getter();
      BOOL v74 = (v73 & 1) == 0;
      if (v73) {
        uint64_t v75 = 1702195828;
      }
      else {
        uint64_t v75 = 0x65736C6166;
      }
      if (v74) {
        unint64_t v76 = 0xE500000000000000;
      }
      else {
        unint64_t v76 = 0xE400000000000000;
      }
      *(void *)(v71 + 4) = sub_100076010(v75, v76, (uint64_t *)&v143);
      swift_bridgeObjectRelease();
      v39(v70, v36);
      *(_WORD *)(v71 + 12) = 2082;
      id v77 = v135;
      uint64_t v78 = sub_100B0578C();
      *(void *)(v71 + 14) = sub_100076010(v78, v79, (uint64_t *)&v143);
      swift_bridgeObjectRelease();
      v39(v77, v36);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Loader supportsLyrics=%{public}s [no lyrics keys in bag] %{public}s", (uint8_t *)v71, 0x16u);
      swift_arrayDestroy();
      char v42 = v138;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v39(v66, v36);
      v39(v67, v36);
    }
  }
  else
  {
    uint64_t v138 = v42;
    if (qword_1010C8518 != -1) {
      swift_once();
    }
    uint64_t v115 = type metadata accessor for Logger();
    sub_100050A90(v115, (uint64_t)static Logger.lyrics);
    unint64_t v116 = v132;
    ((void (*)(char *, char *, char *))v37)(v132, v34, v36);
    unint64_t v117 = v133;
    ((void (*)(char *, char *, char *))v37)(v133, v43, v36);
    uint64_t v118 = Logger.logObject.getter();
    os_log_type_t v119 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v118, v119))
    {
      unint64_t v120 = v116;
      uint64_t v121 = swift_slowAlloc();
      BOOL v143 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v121 = 136446466;
      char v122 = Song.hasCustomLyrics.getter();
      BOOL v123 = (v122 & 1) == 0;
      if (v122) {
        uint64_t v124 = 1702195828;
      }
      else {
        uint64_t v124 = 0x65736C6166;
      }
      if (v123) {
        unint64_t v125 = 0xE500000000000000;
      }
      else {
        unint64_t v125 = 0xE400000000000000;
      }
      *(void *)(v121 + 4) = sub_100076010(v124, v125, (uint64_t *)&v143);
      swift_bridgeObjectRelease();
      v39(v120, v36);
      *(_WORD *)(v121 + 12) = 2082;
      int64_t v126 = v133;
      uint64_t v127 = sub_100B0578C();
      *(void *)(v121 + 14) = sub_100076010(v127, v128, (uint64_t *)&v143);
      swift_bridgeObjectRelease();
      v39(v126, v36);
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "Loader supportsLyrics=%{public}s [no musicSubscription key in bag] %{public}s", (uint8_t *)v121, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v39(v116, v36);
      v39(v117, v36);
    }

    char v42 = v138;
  }
  char v114 = Song.hasCustomLyrics.getter();

  return v114 & 1;
}

uint64_t sub_100B0578C()
{
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = Song.title.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 0x64692E676E6F7320;
  v1._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v1);
  Song.id.getter();
  v2._uint64_t countAndFlagsBits = MusicItemID.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3._object = (void *)0x8000000100DD3BF0;
  v3._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v3);
  Song.catalogID.getter();
  sub_100063814(&qword_1010C9DE8);
  v4._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0x7469742E676E6F73;
}

uint64_t sub_100B058BC(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    ApplicationCapabilities.Service.rawValue.getter(a1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v4 = Hasher._finalize()();
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v6 = v4 & ~v5;
    if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
    {
      uint64_t v7 = ~v5;
      uint64_t v8 = a1;
      while (1)
      {
        unint64_t v9 = 0xE500000000000000;
        unint64_t v10 = 0x636973756DLL;
        switch(*(unsigned char *)(*(void *)(a2 + 48) + v6))
        {
          case 1:
            unint64_t v10 = 0x646956636973756DLL;
            unint64_t v9 = 0xEB00000000736F65;
            break;
          case 2:
            unint64_t v9 = 0x8000000100DB11A0;
            goto LABEL_13;
          case 3:
            unint64_t v9 = 0xE600000000000000;
            unint64_t v10 = 0x6C6169636F73;
            break;
          case 4:
            unint64_t v10 = 0x6F69646172;
            break;
          case 5:
            unint64_t v9 = 0xE600000000000000;
            unint64_t v10 = 0x73656E757469;
            break;
          case 6:
            unint64_t v10 = 0x74634170756F7267;
            unint64_t v9 = 0xED00007974697669;
            break;
          case 7:
            unint64_t v10 = 0x746963696C707865;
            unint64_t v9 = 0xEF746E65746E6F43;
            break;
          case 8:
            unint64_t v9 = 0x8000000100DB1180;
LABEL_13:
            unint64_t v10 = 0xD000000000000013;
            break;
          case 9:
            unint64_t v10 = 0xD000000000000011;
            unint64_t v9 = 0x8000000100DB1160;
            break;
          case 0xA:
            unint64_t v10 = 0x6C62616E45696C6DLL;
            unint64_t v9 = 0xEA00000000006465;
            break;
          default:
            break;
        }
        unint64_t v11 = 0xE500000000000000;
        unint64_t v12 = 0x636973756DLL;
        switch(v8)
        {
          case 1:
            unint64_t v11 = 0xEB00000000736F65;
            if (v10 == 0x646956636973756DLL) {
              goto LABEL_35;
            }
            goto LABEL_36;
          case 2:
            unint64_t v11 = 0x8000000100DB11A0;
            goto LABEL_31;
          case 3:
            unint64_t v11 = 0xE600000000000000;
            if (v10 != 0x6C6169636F73) {
              goto LABEL_36;
            }
            goto LABEL_35;
          case 4:
            if (v10 != 0x6F69646172) {
              goto LABEL_36;
            }
            goto LABEL_35;
          case 5:
            unint64_t v11 = 0xE600000000000000;
            if (v10 != 0x73656E757469) {
              goto LABEL_36;
            }
            goto LABEL_35;
          case 6:
            unint64_t v11 = 0xED00007974697669;
            if (v10 != 0x74634170756F7267) {
              goto LABEL_36;
            }
            goto LABEL_35;
          case 7:
            unint64_t v11 = 0xEF746E65746E6F43;
            if (v10 != 0x746963696C707865) {
              goto LABEL_36;
            }
            goto LABEL_35;
          case 8:
            unint64_t v11 = 0x8000000100DB1180;
LABEL_31:
            if (v10 != 0xD000000000000013) {
              goto LABEL_36;
            }
            goto LABEL_35;
          case 9:
            unint64_t v12 = 0xD000000000000011;
            unint64_t v11 = 0x8000000100DB1160;
            goto LABEL_34;
          case 10:
            unint64_t v11 = 0xEA00000000006465;
            if (v10 != 0x6C62616E45696C6DLL) {
              goto LABEL_36;
            }
            goto LABEL_35;
          default:
LABEL_34:
            if (v10 != v12) {
              goto LABEL_36;
            }
LABEL_35:
            if (v9 == v11)
            {
              swift_bridgeObjectRelease_n();
              char v13 = 1;
              return v13 & 1;
            }
LABEL_36:
            char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v13) {
              return v13 & 1;
            }
            unint64_t v6 = (v6 + 1) & v7;
            if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
              return v13 & 1;
            }
            break;
        }
      }
    }
  }
  char v13 = 0;
  return v13 & 1;
}

uint64_t sub_100B05CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Playlist.Collaborator();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_100B10290(&qword_1010C9C80, (void (*)(uint64_t))&type metadata accessor for Playlist.Collaborator),
        uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(),
        uint64_t v8 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    unint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_100B10290(&qword_1010C9C88, (void (*)(uint64_t))&type metadata accessor for Playlist.Collaborator);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t LyricsLoader.loadLyrics(for:)(uint64_t a1)
{
  v2[67] = v1;
  v2[66] = a1;
  uint64_t v3 = type metadata accessor for String.Encoding();
  v2[68] = v3;
  v2[69] = *(void *)(v3 - 8);
  v2[70] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Song();
  v2[71] = v4;
  v2[72] = *(void *)(v4 - 8);
  v2[73] = swift_task_alloc();
  v2[74] = swift_task_alloc();
  v2[75] = swift_task_alloc();
  v2[76] = swift_task_alloc();
  v2[77] = swift_task_alloc();
  v2[78] = swift_task_alloc();
  v2[79] = swift_task_alloc();
  v2[80] = swift_task_alloc();
  v2[81] = swift_task_alloc();
  v2[82] = swift_task_alloc();
  v2[83] = swift_task_alloc();
  return _swift_task_switch(sub_100B0609C, 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return _swift_task_switch(sub_100B0875C, 0, 0);
}

uint64_t sub_100B0609C()
{
  char v40 = v0;
  uint64_t v1 = v0[83];
  uint64_t v2 = v0[72];
  uint64_t v3 = v0[71];
  uint64_t v4 = v0[66];
  char v5 = Song.hasLyrics.getter();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[84] = v6;
  v0[85] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v3);
  uint64_t v7 = v0[83];
  uint64_t v8 = v0[72];
  uint64_t v9 = v0[71];
  if (v5)
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v10(v0[83], v0[71]);
LABEL_4:
    v0[86] = v10;
    sub_100063814(&qword_1010C9B10);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_100E251C0;
    sub_100063814(&qword_1010C9B18);
    *(void *)(v12 + 32) = static PartialMusicProperty<A>.customLyrics.getter();
    v39[0] = v12;
    specialized Array._endMutation()();
    uint64_t v13 = v12;
    v0[87] = v12;
    uint64_t v14 = (void *)swift_task_alloc();
    v0[88] = v14;
    uint64_t v15 = sub_100B10290((unint64_t *)&unk_1010C9B20, (void (*)(uint64_t))&type metadata accessor for Song);
    void *v14 = v0;
    v14[1] = sub_100B06564;
    uint64_t v16 = v0[82];
    uint64_t v17 = v0[71];
    return MusicItem<>.with(_:)(v16, v13, v17, &protocol witness table for Song, &protocol witness table for Song, v15);
  }
  char v11 = Song.hasCustomLyrics.getter();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v10(v7, v9);
  if (v11) {
    goto LABEL_4;
  }
  if (qword_1010C8518 != -1) {
    swift_once();
  }
  uint64_t v18 = v0[76];
  uint64_t v19 = v0[71];
  uint64_t v20 = (void *)v0[67];
  uint64_t v21 = v0[66];
  uint64_t v22 = type metadata accessor for Logger();
  sub_100050A90(v22, (uint64_t)static Logger.lyrics);
  v6(v18, v21, v19);
  id v23 = v20;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v27 = v0[76];
  uint64_t v28 = v0[71];
  uint64_t v29 = (void *)v0[67];
  if (v26)
  {
    uint64_t v38 = v0[71];
    uint64_t v30 = swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136446466;
    v0[62] = v29;
    uint64_t v31 = String.init<A>(describing:)();
    *(void *)(v30 + 4) = sub_100076010(v31, v32, v39);

    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2082;
    uint64_t v33 = sub_100B0578C();
    *(void *)(v30 + 14) = sub_100076010(v33, v34, v39);
    swift_bridgeObjectRelease();
    v10(v27, v38);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Loader<%{public}s> loadLyrics(for:completion:) returned without loading lyrics [hasLyrics and hasCustomLyrics were false] %{public}s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    v10(v27, v28);
  }

  sub_100B0CBA8();
  swift_allocError();
  *uint64_t v35 = 1;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

uint64_t sub_100B06564()
{
  *(void *)(*(void *)v1 + 712) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100B0798C;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100B06680;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B06680()
{
  uint64_t v114 = v0;
  uint64_t v1 = Song.customLyrics.getter();
  if (v2)
  {
    uint64_t v3 = v1;
    unint64_t v4 = v2;
    uint64_t v5 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0) {
      uint64_t v5 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (v5)
    {
      id v6 = [self standardUserDefaults];
      NSString v7 = String._bridgeToObjectiveC()();
      unsigned int v8 = [v6 BOOLForKey:v7];

      if (!v8) {
        goto LABEL_9;
      }
      if (*DeviceCapabilities.isInternalInstall.unsafeMutableAddressor() != 1) {
        goto LABEL_9;
      }
      String.trim()();
      char v9 = sub_100B08114();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0) {
        goto LABEL_9;
      }
      uint64_t v10 = *(void *)(v0 + 560);
      uint64_t v11 = *(void *)(v0 + 552);
      uint64_t v12 = *(void *)(v0 + 544);
      static String.Encoding.utf8.getter();
      uint64_t v13 = String.data(using:allowLossyConversion:)();
      unint64_t v15 = v14;
      *(void *)(v0 + 720) = v13;
      *(void *)(v0 + 728) = v14;
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      if (v15 >> 60 != 15)
      {
        swift_bridgeObjectRelease();
        id v105 = objc_allocWithZone((Class)MSVLyricsTTMLParser);
        sub_10007AA40(v13, v15);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v107 = [v105 initWithTTMLData:isa];
        *(void *)(v0 + 736) = v107;
        sub_10007A748(v13, v15);

        *(void *)(v0 + 16) = v0;
        *(void *)(v0 + 56) = v0 + 480;
        *(void *)(v0 + 24) = sub_100B07460;
        uint64_t v108 = swift_continuation_init();
        *(void *)(v0 + 368) = _NSConcreteStackBlock;
        *(void *)(v0 + 376) = 0x40000000;
        *(void *)(v0 + 384) = sub_100B0827C;
        *(void *)(v0 + 392) = &unk_10100B408;
        *(void *)(v0 + 400) = v108;
        [v107 parseWithCompletion:v0 + 368];
        return _swift_continuation_await(v0 + 16);
      }
      else
      {
LABEL_9:
        (*(void (**)(void, void))(v0 + 688))(*(void *)(v0 + 656), *(void *)(v0 + 568));
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v16 = *(uint64_t (**)(uint64_t, unint64_t, void))(v0 + 8);
        return v16(v3, v4, 0);
      }
    }
    swift_bridgeObjectRelease();
  }
  if ((Song.hasLyrics.getter() & 1) == 0)
  {
    if (qword_1010C8518 == -1)
    {
LABEL_22:
      uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
      uint64_t v58 = *(void *)(v0 + 656);
      uint64_t v59 = *(void *)(v0 + 648);
      uint64_t v60 = *(void *)(v0 + 640);
      uint64_t v61 = *(void *)(v0 + 632);
      uint64_t v62 = *(void *)(v0 + 568);
      typea = *(void **)(v0 + 536);
      uint64_t v63 = *(void *)(v0 + 528);
      uint64_t v64 = type metadata accessor for Logger();
      sub_100050A90(v64, (uint64_t)static Logger.lyrics);
      v57(v59, v63, v62);
      v57(v60, v58, v62);
      v57(v61, v63, v62);
      id v65 = typea;
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.default.getter();
      BOOL v68 = os_log_type_enabled(v66, v67);
      os_log_type_t v69 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
      uint64_t v70 = *(void *)(v0 + 648);
      uint64_t v71 = *(void *)(v0 + 640);
      uint64_t v72 = *(void *)(v0 + 632);
      uint64_t v73 = *(void *)(v0 + 568);
      BOOL v74 = *(void **)(v0 + 536);
      if (v68)
      {
        os_log_type_t type = v67;
        uint64_t v109 = *(void *)(v0 + 632);
        uint64_t v75 = swift_slowAlloc();
        v113[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v75 = 136446978;
        *(void *)(v0 + 488) = v74;
        uint64_t v76 = String.init<A>(describing:)();
        *(void *)(v75 + 4) = sub_100076010(v76, v77, v113);

        swift_bridgeObjectRelease();
        *(_WORD *)(v75 + 12) = 2082;
        char v78 = Song.hasCustomLyrics.getter();
        BOOL v79 = (v78 & 1) == 0;
        if (v78) {
          uint64_t v80 = 1702195828;
        }
        else {
          uint64_t v80 = 0x65736C6166;
        }
        if (v79) {
          unint64_t v81 = 0xE500000000000000;
        }
        else {
          unint64_t v81 = 0xE400000000000000;
        }
        *(void *)(v75 + 14) = sub_100076010(v80, v81, v113);
        swift_bridgeObjectRelease();
        v69(v70, v73);
        *(_WORD *)(v75 + 22) = 2082;
        *(void *)(v0 + 448) = Song.customLyrics.getter();
        *(void *)(v0 + 456) = v82;
        sub_100063814(&qword_1010D0B40);
        uint64_t v83 = String.init<A>(describing:)();
        *(void *)(v75 + 24) = sub_100076010(v83, v84, v113);
        swift_bridgeObjectRelease();
        v69(v71, v73);
        *(_WORD *)(v75 + 32) = 2082;
        uint64_t v85 = sub_100B0578C();
        *(void *)(v75 + 34) = sub_100076010(v85, v86, v113);
        swift_bridgeObjectRelease();
        v69(v109, v73);
        _os_log_impl((void *)&_mh_execute_header, v66, type, "Loader<%{public}s> loadLyrics(for:completion:) didn't load lyrics [no lyrics found] song.hasLyrics=false song.hasCustomLyrics=%{public}s song.customLyrics=%{public}s %{public}s", (uint8_t *)v75, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        v69(v70, v73);
        v69(v71, v73);
        v69(v72, v73);
      }

      char v87 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
      uint64_t v88 = *(void *)(v0 + 656);
      uint64_t v89 = *(void *)(v0 + 568);
      sub_100B0CBA8();
      swift_allocError();
      *uint64_t v90 = 1;
      swift_willThrow();
      uint64_t v91 = v88;
      uint64_t v92 = v89;
LABEL_34:
      v87(v91, v92);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v96 = *(uint64_t (**)(void))(v0 + 8);
      return v96();
    }
LABEL_44:
    swift_once();
    goto LABEL_22;
  }
  uint64_t v18 = *(char **)(v0 + 536);
  uint64_t v19 = Song.id.getter();
  uint64_t v21 = v20;
  *(void *)(v0 + 464) = 0;
  uint64_t v22 = *(void **)&v18[OBJC_IVAR___MusicLyricsLoader_accessQueue];
  id v23 = (void *)swift_allocObject();
  v23[2] = v0 + 464;
  void v23[3] = v18;
  v23[4] = v19;
  v23[5] = v21;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = sub_100B0CC00;
  *(void *)(v24 + 24) = v23;
  *(void *)(v0 + 352) = sub_10013DD14;
  *(void *)(v0 + 360) = v24;
  *(void *)(v0 + 320) = _NSConcreteStackBlock;
  *(void *)(v0 + 328) = 1107296256;
  *(void *)(v0 + 336) = sub_10007A61C;
  *(void *)(v0 + 344) = &unk_10100B3E0;
  os_log_type_t v25 = _Block_copy((const void *)(v0 + 320));
  BOOL v26 = v18;
  uint64_t v27 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v27, v25);

  _Block_release(v25);
  LOBYTE(v25) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v25)
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v28 = *(void **)(v0 + 464);
  swift_bridgeObjectRelease();
  swift_release();

  if (v28
    || (static ApplicationCapabilities.shared.getter(v0 + 200), sub_10005E8DC(v0 + 200), (*(unsigned char *)(v0 + 210) & 1) == 0))
  {
    id v29 = [self sharedController];
    id v30 = [v29 musicSubscriptionStatus];

    static ApplicationCapabilities.shared.getter(v0 + 80);
    sub_10005E8DC(v0 + 80);
    uint64_t v31 = *(void *)(v0 + 88);
    if (qword_1010C8518 != -1) {
      swift_once();
    }
    unint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
    uint64_t v33 = *(void *)(v0 + 616);
    uint64_t v34 = *(void *)(v0 + 568);
    uint64_t v35 = *(void **)(v0 + 536);
    uint64_t v36 = *(void *)(v0 + 528);
    uint64_t v37 = type metadata accessor for Logger();
    sub_100050A90(v37, (uint64_t)static Logger.lyrics);
    v32(v33, v36, v34);
    id v38 = v35;
    id v39 = v30;
    id v40 = v38;
    id v41 = v39;
    char v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
    uint64_t v46 = *(void *)(v0 + 616);
    uint64_t v47 = *(void *)(v0 + 568);
    uint64_t v48 = *(void **)(v0 + 536);
    if (v44)
    {
      uint64_t v110 = v41;
      uint64_t v49 = swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 136446978;
      *(void *)(v0 + 472) = v48;
      uint64_t v50 = String.init<A>(describing:)();
      *(void *)(v49 + 4) = sub_100076010(v50, v51, v113);

      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2082;
      *(void *)(v0 + 520) = v30;
      id v52 = v110;
      sub_100063814(&qword_1010C9B38);
      uint64_t v53 = String.init<A>(describing:)();
      *(void *)(v49 + 14) = sub_100076010(v53, v54, v113);

      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 22) = 1026;
      *(_DWORD *)(v49 + 24) = WORD1(v31) & 1;
      *(_WORD *)(v49 + 28) = 2082;
      uint64_t v55 = sub_100B0578C();
      *(void *)(v49 + 30) = sub_100076010(v55, v56, v113);
      swift_bridgeObjectRelease();
      v45(v46, v47);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Loader<%{public}s> loadLyrics(for:completion:) didn't load store lyrics [not supported by subscription] subscriptionStatus=%{public}s subscriptionStatus.capabilities.contains(.catalogLyricsViewing)=%{BOOL,public}d %{public}s", (uint8_t *)v49, 0x26u);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v41 = v110;
      swift_slowDealloc();
    }
    else
    {

      v45(v46, v47);
    }

    char v87 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
    uint64_t v93 = *(void *)(v0 + 656);
    uint64_t v94 = *(void *)(v0 + 568);
    sub_100B0CBA8();
    swift_allocError();
    *uint64_t v95 = 2;
    swift_willThrow();

    uint64_t v91 = v93;
    uint64_t v92 = v94;
    goto LABEL_34;
  }
  uint64_t v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
  uint64_t v98 = *(void *)(v0 + 624);
  uint64_t v99 = *(void *)(v0 + 568);
  uint64_t v100 = *(void *)(v0 + 536);
  uint64_t v101 = *(void *)(v0 + 528);
  sub_100057778(0, (unint64_t *)&unk_1010C9B40);
  v97(v98, v101, v99);
  uint64_t v102 = MPStoreLyricsRequest.init(song:)();
  *(void *)(v0 + 752) = v102;
  os_log_type_t v103 = (void *)swift_task_alloc();
  *(void *)(v0 + 760) = v103;
  v103[2] = v100;
  v103[3] = v102;
  v103[4] = v101;
  uint64_t v104 = (void *)swift_task_alloc();
  *(void *)(v0 + 768) = v104;
  *uint64_t v104 = v0;
  v104[1] = sub_100B07700;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 408, 0, 0, 0xD000000000000010, 0x8000000100DD3B10, sub_100B0CC1C, v103, &type metadata for LyricsLoader.Result);
}

uint64_t sub_100B07460()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 744) = v1;
  if (v1) {
    unint64_t v2 = sub_100B07AA8;
  }
  else {
    unint64_t v2 = sub_100B07570;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B07570()
{
  uint64_t v1 = (void *)v0[92];
  unint64_t v2 = v0[91];
  uint64_t v3 = v0[90];
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[86];
  uint64_t v5 = v0[82];
  uint64_t v6 = v0[71];
  NSString v7 = (void *)v0[60];
  type metadata accessor for Lyrics();
  swift_allocObject();
  uint64_t v10 = Lyrics.init(identifier:songInfo:)(0, 0, v7);

  sub_10007A748(v3, v2);
  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v8 = (uint64_t (*)(uint64_t, void, uint64_t))v0[1];
  return v8(v10, 0, 1);
}

uint64_t sub_100B07700()
{
  *(void *)(*(void *)v1 + 776) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_100B07FD0;
  }
  else {
    unint64_t v2 = sub_100B07834;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B07834()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 568);

  v1(v2, v3);
  uint64_t v7 = *(void *)(v0 + 416);
  uint64_t v8 = *(void *)(v0 + 408);
  unsigned int v6 = *(unsigned __int8 *)(v0 + 424);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, void))(v0 + 8);
  return v4(v8, v7, v6);
}

uint64_t sub_100B0798C()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100B07AA8()
{
  uint64_t v48 = v0;
  swift_willThrow();
  if (qword_1010C8518 != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[84];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[75];
  uint64_t v4 = v0[74];
  uint64_t v5 = v0[73];
  uint64_t v6 = v0[71];
  typea = (void *)v0[67];
  uint64_t v7 = v0[66];
  uint64_t v8 = type metadata accessor for Logger();
  sub_100050A90(v8, (uint64_t)static Logger.lyrics);
  v1(v3, v7, v6);
  v1(v4, v2, v6);
  v1(v5, v7, v6);
  id v9 = typea;
  swift_errorRetain();
  id v10 = v9;
  swift_errorRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = v0[93];
  unint64_t v15 = (void (*)(uint64_t, uint64_t))v0[86];
  uint64_t v16 = v0[75];
  uint64_t v46 = v0[74];
  uint64_t v17 = v0[73];
  uint64_t v18 = v0[71];
  uint64_t v19 = (void *)v0[67];
  if (v13)
  {
    os_log_type_t type = v12;
    uint64_t v43 = v0[73];
    uint64_t v20 = swift_slowAlloc();
    v47[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136447234;
    v0[63] = v19;
    uint64_t v21 = String.init<A>(describing:)();
    *(void *)(v20 + 4) = sub_100076010(v21, v22, v47);

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2082;
    v0[64] = v14;
    swift_errorRetain();
    sub_100063814(&qword_1010C94D8);
    uint64_t v23 = String.init<A>(describing:)();
    *(void *)(v20 + 14) = sub_100076010(v23, v24, v47);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v20 + 22) = 2082;
    char v25 = Song.hasCustomLyrics.getter();
    BOOL v26 = (v25 & 1) == 0;
    if (v25) {
      uint64_t v27 = 1702195828;
    }
    else {
      uint64_t v27 = 0x65736C6166;
    }
    if (v26) {
      unint64_t v28 = 0xE500000000000000;
    }
    else {
      unint64_t v28 = 0xE400000000000000;
    }
    *(void *)(v20 + 24) = sub_100076010(v27, v28, v47);
    swift_bridgeObjectRelease();
    v15(v16, v18);
    *(_WORD *)(v20 + 32) = 2082;
    v0[54] = Song.customLyrics.getter();
    v0[55] = v29;
    sub_100063814(&qword_1010D0B40);
    uint64_t v30 = String.init<A>(describing:)();
    *(void *)(v20 + 34) = sub_100076010(v30, v31, v47);
    swift_bridgeObjectRelease();
    v15(v46, v18);
    *(_WORD *)(v20 + 42) = 2082;
    uint64_t v32 = sub_100B0578C();
    *(void *)(v20 + 44) = sub_100076010(v32, v33, v47);
    swift_bridgeObjectRelease();
    v15(v43, v18);
    _os_log_impl((void *)&_mh_execute_header, v11, type, "Loader<%{public}s> loadLyrics(for:completion:) didn't parse TTML custom lyrics with error=%{public}s song.hasCustomLyrics=%{public}s song.customLyrics=%{public}s %{public}s", (uint8_t *)v20, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    v15(v16, v18);
    v15(v46, v18);
    v15(v17, v18);
  }

  uint64_t v34 = (void *)v0[92];
  unint64_t v35 = v0[91];
  uint64_t v36 = v0[90];
  uint64_t v37 = (void (*)(uint64_t, uint64_t))v0[86];
  uint64_t v38 = v0[82];
  uint64_t v39 = v0[71];
  sub_100B0CBA8();
  swift_allocError();
  *id v40 = 0;
  swift_willThrow();

  swift_errorRelease();
  sub_10007A748(v36, v35);
  v37(v38, v39);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v41 = (uint64_t (*)(void))v0[1];
  return v41();
}

uint64_t sub_100B07FD0()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 568);

  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100B08114()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      Swift::String_optional v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      Swift::String_optional v4 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  BOOL v7 = v6 == 0;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_100B0827C(uint64_t result, void *a2, void *a3)
{
  if (a3)
  {
    sub_100063814(&qword_1010C94D8);
    swift_allocError();
    *Swift::String_optional v4 = a3;
    id v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(void **)(*(void *)(*(void *)(result + 32) + 64) + 40) = a2;
    id v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B0833C(uint64_t a1, char *a2, void *a3, uint64_t a4)
{
  uint64_t v19 = a2;
  uint64_t v7 = sub_100063814(&qword_1010C9DE0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin();
  uint64_t v10 = type metadata accessor for Song();
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = __chkstk_darwin();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a4, v10, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v15 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v16 + v15, (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  sub_100B0D120(a3, (uint64_t)v14, (uint64_t)sub_100B105B4, v16, v19);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}