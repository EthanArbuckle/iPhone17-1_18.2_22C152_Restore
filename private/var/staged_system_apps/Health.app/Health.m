void sub_100003DD8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_10001D414(255, (unint64_t *)&qword_100106A40);
    v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_100003E4C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_100003EB0@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D360(*v1 + qword_1001068D0, a1);
}

uint64_t sub_100003EDC@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D360(*v1 + qword_1001068D8, a1);
}

void sub_100003F08()
{
  if (!qword_1001058B8)
  {
    sub_1000047EC();
    type metadata accessor for MutableArrayDataSourceWithLayout();
    sub_10001889C(&qword_1001058C0, (void (*)(uint64_t))sub_1000047EC);
    unint64_t v0 = type metadata accessor for PrimarySecondaryDataSource();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001058B8);
    }
  }
}

uint64_t sub_100003FC4(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100008C60(a1, 0, 0);
    return swift_release();
  }
  return result;
}

void sub_10000408C(uint64_t a1, uint64_t a2, void *a3)
{
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t type metadata accessor for SummaryPinnedContentGradientColorProvider()
{
  return self;
}

unint64_t sub_100004128()
{
  unint64_t result = qword_100104658;
  if (!qword_100104658)
  {
    type metadata accessor for CloudSyncRestoreState();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100104658);
  }
  return result;
}

uint64_t sub_100004180(uint64_t a1)
{
  v3 = (void *)(v1 + qword_100106900);
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t sub_1000041D4()
{
  sub_10001881C(0, &qword_1001079C8, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, sub_10001C410, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  v4 = (char *)&v13 - v3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = HAFeatureFlagShowTrendsInSummary();
  if ((result & 1) == 0)
  {
    static Logger.dataSource.getter();
    v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Show Trends in Summary feature flag is disabled. Hiding Trends.", v12, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for HideableDataSource.Visibility.hidden<A>(_:), v1);
    return dispatch thunk of HideableDataSource.visibility.setter();
  }
  return result;
}

uint64_t sub_100004414()
{
  type metadata accessor for CompoundDataSourceCollectionViewController();
  uint64_t v0 = (uint64_t (*)(void))method lookup function for CompoundDataSourceCollectionViewController();
  uint64_t v1 = v0();
  sub_10001E254(0, &qword_100106AA8);
  uint64_t v2 = static UITraitCollection.systemTraitsAffectingColorAppearance.getter();
  sub_1000046A0(v2);
  return v1;
}

uint64_t sub_100004494()
{
  uint64_t v3 = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v4 = &v2;
    uint64_t v5 = &unk_1000CC470;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for SummaryFeedDataSourceProvider()
{
  return self;
}

uint64_t sub_10000456C()
{
  uint64_t result = type metadata accessor for Presentation();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for AppDelegate()
{
  return self;
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v5 = (objc_class *)type metadata accessor for AppDelegate();
  uint64_t v6 = NSStringFromClass(v5);
  UIApplicationMain(argc, (char **)argv, 0, v6);

  return 0;
}

uint64_t sub_1000046A0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_1000059FC(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = &v3[16 * v9 + 32];
  if (a1 + 32 < (unint64_t)&v10[16 * v8] && (unint64_t)v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  memcpy(v10, (const void *)(a1 + 32), 16 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = *((void *)v3 + 2);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    *((void *)v3 + 2) = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    void *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000047EC()
{
  if (!qword_1001058A8)
  {
    type metadata accessor for DownloadingDataDataSource(255);
    type metadata accessor for PinnedContentDataSource();
    sub_10001889C(&qword_1001058B0, (void (*)(uint64_t))&type metadata accessor for PinnedContentDataSource);
    unint64_t v0 = type metadata accessor for PrimarySecondaryDataSource();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001058A8);
    }
  }
}

uint64_t sub_100004920()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000084C8();
    return swift_release();
  }
  return result;
}

uint64_t sub_100004978()
{
  uint64_t result = type metadata accessor for EmptyStateCollectionViewCellItem();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100004A10(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    int64_t v4 = *(void **)(result + 16);
    *(void *)(result + 16) = 0;

    sub_10000AA7C(a2);
    return swift_release();
  }
  return result;
}

uint64_t SummaryPinnedContentGradientColorProvider.relevantTraits.getter()
{
  sub_100004B04(0, &qword_1001051E8, (uint64_t (*)(uint64_t))sub_100020334, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1000CBFD0;
  *(void *)(v0 + 32) = type metadata accessor for UITraitUserInterfaceStyle();
  *(void *)(v0 + 40) = &protocol witness table for UITraitUserInterfaceStyle;
  return v0;
}

void sub_100004B04(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_100004B68(uint64_t a1)
{
  sub_100004D14(0, &qword_1001060E8, (uint64_t (*)(uint64_t))type metadata accessor for PersonalizedFeedDataSource, sub_10001AE10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for DelayedDataSource.DataSourceState);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v8 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - v5, a1, v3);
  if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v6, v3) != enum case for DelayedDataSource.DataSourceState.initialized<A>(_:)) {
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10000764C();
    return swift_release();
  }
  return result;
}

void sub_100004D14(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t sub_100004D94(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = __CocoaSet.startIndex.getter();
    uint64_t v7 = v6;
    __CocoaSet.endIndex.getter();
    char v8 = static __CocoaSet.Index.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_3:
      sub_10001EDCC(v5, v7, v4 != 0);
      return 0;
    }
LABEL_7:
    sub_10006CEA8(v5, v7, v4 != 0, a1, a2);
    uint64_t v9 = v13;
    sub_10001EDCC(v5, v7, v4 != 0);
    return v9;
  }
  uint64_t result = sub_10006D11C(a1);
  if ((v12 & 1) == 0)
  {
    uint64_t v7 = v11;
    if (*(_DWORD *)(a1 + 36) == v11)
    {
      uint64_t v5 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_100004EBC()
{
  id result = [v0 collectionView];
  if (result)
  {
    type metadata accessor for DiffableCollectionViewAdaptor();
    dispatch thunk of CompoundDataSourceCollectionViewController.dataSource.getter();
    return (id)DiffableCollectionViewAdaptor.__allocating_init(collectionView:backingDataSource:prefetchCellsWhenPerformingReloadData:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *sub_100004F38(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100004F9C()
{
  return swift_retain();
}

uint64_t sub_100004FE0()
{
  if (*(void *)(v0 + 40))
  {
    uint64_t v1 = *(void *)(v0 + 40);
  }
  else
  {
    uint64_t v2 = v0;
    uint64_t v3 = *(void **)(v0 + 16);
    type metadata accessor for CloudSyncStartupManager();
    swift_allocObject();
    uint64_t v1 = sub_10000D94C(v3);
    *(void *)(v2 + 40) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_10000505C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1000202CC();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  static NSDiffableDataSourceSnapshot._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  SummaryPinnedContentDataSource.snapshotDidChange(dataSourceID:snapshot:animated:)(v11, v13, (uint64_t)v10, a5);
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100005198(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10000528C()
{
  return UICollectionView.registerCell<A>(_:)();
}

uint64_t sub_100005388(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_1000053CC(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10001E254(0, &qword_100106EC0);
    sub_100017328(&qword_100106EC8, &qword_100106EC0);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    a1 = v49[1];
    uint64_t v37 = v49[2];
    uint64_t v11 = v49[3];
    uint64_t v12 = v49[4];
    unint64_t v13 = v49[5];
  }
  else
  {
    uint64_t v14 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v11 = ~v14;
    uint64_t v16 = -v14;
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    else {
      uint64_t v17 = -1;
    }
    unint64_t v13 = v17 & v15;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v12 = 0;
  }
  v35[2] = a1 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v36 = (unint64_t)(v11 + 64) >> 6;
  v43 = (uint64_t (**)(char *, uint64_t))(v3 + 8);
  v44 = (void (**)(char *, uint64_t))(v6 + 8);
  *(void *)&long long v10 = 136446466;
  long long v39 = v10;
  v38 = (char *)&type metadata for Any + 8;
  v35[1] = (char *)&type metadata for Swift.AnyObject + 8;
  v40 = v8;
  uint64_t v45 = v11;
  while (a1 < 0)
  {
    uint64_t v23 = __CocoaSet.Iterator.next()();
    if (!v23) {
      return sub_10001B2F8();
    }
    v49[0] = v23;
    sub_10001E254(0, &qword_100106EC0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v24 = v50;
    swift_unknownObjectRelease();
    uint64_t v22 = v12;
    uint64_t v20 = v13;
    if (!v24) {
      return sub_10001B2F8();
    }
LABEL_31:
    unint64_t v47 = v20;
    uint64_t v48 = v22;
    static Logger.general.getter();
    id v28 = v24;
    v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v32 = (void *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      v49[0] = v42;
      *(_DWORD *)uint64_t v31 = v39;
      v50 = (void *)ObjectType;
      swift_getMetatypeMetadata();
      uint64_t v33 = String.init<A>(describing:)();
      *(void *)(v31 + 4) = sub_100018DA0(v33, v34, v49);
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2112;
      *(void *)(v31 + 14) = v28;
      void *v32 = v24;

      _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%{public}s]: Opening URL: %@", (uint8_t *)v31, 0x16u);
      sub_10007D3F0(0, (unint64_t *)&qword_100106ED0, &qword_100104890);
      swift_arrayDestroy();
      uint64_t v8 = v40;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*v44)(v8, v46);
    id v18 = [v28 URL];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    id v19 = [v28 options];
    sub_10007CD90((uint64_t)v5, v19);

    uint64_t result = (*v43)(v5, v2);
    unint64_t v13 = v47;
    uint64_t v12 = v48;
  }
  if (v13)
  {
    uint64_t v20 = (v13 - 1) & v13;
    unint64_t v21 = __clz(__rbit64(v13)) | (v12 << 6);
    uint64_t v22 = v12;
LABEL_30:
    id v24 = *(id *)(*(void *)(a1 + 48) + 8 * v21);
    if (!v24) {
      return sub_10001B2F8();
    }
    goto LABEL_31;
  }
  int64_t v25 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v25 >= v36) {
      return sub_10001B2F8();
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    uint64_t v22 = v12 + 1;
    if (!v26)
    {
      uint64_t v22 = v12 + 2;
      if (v12 + 2 >= v36) {
        return sub_10001B2F8();
      }
      unint64_t v26 = *(void *)(v37 + 8 * v22);
      if (!v26)
      {
        uint64_t v22 = v12 + 3;
        if (v12 + 3 >= v36) {
          return sub_10001B2F8();
        }
        unint64_t v26 = *(void *)(v37 + 8 * v22);
        if (!v26)
        {
          uint64_t v22 = v12 + 4;
          if (v12 + 4 >= v36) {
            return sub_10001B2F8();
          }
          unint64_t v26 = *(void *)(v37 + 8 * v22);
          if (!v26)
          {
            uint64_t v27 = v12 + 5;
            while (v36 != v27)
            {
              unint64_t v26 = *(void *)(v37 + 8 * v27++);
              if (v26)
              {
                uint64_t v22 = v27 - 1;
                goto LABEL_29;
              }
            }
            return sub_10001B2F8();
          }
        }
      }
    }
LABEL_29:
    uint64_t v20 = (v26 - 1) & v26;
    unint64_t v21 = __clz(__rbit64(v26)) + (v22 << 6);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

char *sub_1000059FC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000837C(0, &qword_1001051E8, (uint64_t (*)(uint64_t))sub_100020334, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      long long v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      unint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      long long v10 = (char *)&_swiftEmptyArrayStorage;
      unint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100036FBC(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

id sub_100005B38()
{
  return sub_100005B5C();
}

id sub_100005B5C()
{
  uint64_t v1 = qword_1001068E0;
  uint64_t v2 = *(void **)(v0 + qword_1001068E0);
  if (v2)
  {
    id v3 = *(id *)(v0 + qword_1001068E0);
  }
  else
  {
    uint64_t v4 = v0;
    type metadata accessor for ProfileBarButton();
    char v5 = (void *)ProfileBarButton.__allocating_init()();
    unint64_t v6 = *(void **)(v0 + v1);
    *(void *)(v4 + v1) = v5;
    id v3 = v5;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

uint64_t sub_100005BCC()
{
  if (*(void *)(v0 + 32))
  {
    uint64_t v1 = *(void *)(v0 + 32);
  }
  else
  {
    type metadata accessor for DiskHealthExperienceStore();
    uint64_t v1 = static DiskHealthExperienceStore.shared.getter();
    *(void *)(v0 + 32) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

id sub_100005C34()
{
  id v5 = *v0;
  id v1 = [*v0 selectedViewController];
  if (v1)
  {
    uint64_t v2 = v1;
    self;
    if (swift_dynamicCastObjCClass())
    {
      unint64_t v3 = (unint64_t)UINavigationController.rootViewController()();

      if (v3) {
        return (id)v3;
      }
    }
    else
    {
    }
  }

  return v5;
}

uint64_t sub_100005CD8()
{
  if (*(void *)(v0 + 48))
  {
    uint64_t v1 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v2 = v0;
    type metadata accessor for PinnedContentManager();
    id v3 = *(id *)(v0 + 16);
    uint64_t v1 = PinnedContentManager.__allocating_init(healthStore:domain:)();
    *(void *)(v2 + 48) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

id sub_100005D48()
{
  uint64_t v1 = OBJC_IVAR____TtC6Health20MainTabBarController____lazy_storage___providedHealthToolbox;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC6Health20MainTabBarController____lazy_storage___providedHealthToolbox);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC6Health20MainTabBarController____lazy_storage___providedHealthToolbox);
  }
  else
  {
    id v4 = [self sharedInstanceForHealthStore:*(void *)(v0 + OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthStore)];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t sub_100005DD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for Presentation.summaryFeed(_:);
  uint64_t v3 = type metadata accessor for Presentation();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

void sub_100005E44()
{
  type metadata accessor for SummaryPinnedContentDataSource(0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = [self bundleForClass:ObjCClassFromMetadata];
  v2._countAndFlagsBits = 0xD000000000000017;
  v5._countAndFlagsBits = 0xD000000000000035;
  v5._object = (void *)0x80000001000D2960;
  v2._object = (void *)0x80000001000D2920;
  v3._object = (void *)0x80000001000D2940;
  v3._countAndFlagsBits = 0xD000000000000010;
  Swift::String v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v5);

  xmmword_100105860 = (__int128)v4;
}

uint64_t sub_100005F20(uint64_t a1, void *a2)
{
  sub_10001D360(a1, (uint64_t)v9);
  Swift::String v3 = self;
  id v4 = a2;
  id v5 = [v3 primaryProfile];
  id v6 = objc_allocWithZone((Class)type metadata accessor for PersonalizedFeedDataSource());
  uint64_t v7 = sub_100018B34(1, v9, (uint64_t)v5, a2, 1);

  return v7;
}

id sub_10000605C()
{
  uint64_t v1 = OBJC_IVAR____TtC6Health11AppDelegate____lazy_storage___pluginNotificationRouter;
  Swift::String v2 = *(void **)&v0[OBJC_IVAR____TtC6Health11AppDelegate____lazy_storage___pluginNotificationRouter];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR____TtC6Health11AppDelegate____lazy_storage___pluginNotificationRouter];
  }
  else
  {
    id v4 = v0;
    type metadata accessor for PluginNotificationRouter();
    id v5 = (void *)PluginNotificationRouter.__allocating_init()();
    sub_10002069C((unint64_t *)&unk_1001065E0, v6, (void (*)(uint64_t))type metadata accessor for AppDelegate);
    uint64_t v7 = v4;
    dispatch thunk of PluginNotificationRouter.sceneProvider.setter();
    uint64_t v8 = *(void **)&v4[v1];
    *(void *)&v4[v1] = v5;
    id v3 = v5;

    Swift::String v2 = 0;
  }
  id v9 = v2;
  return v3;
}

void sub_100006118()
{
  type metadata accessor for SummaryPinnedContentDataSource(0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = [self bundleForClass:ObjCClassFromMetadata];
  v5._countAndFlagsBits = 0xD00000000000003DLL;
  v5._object = (void *)0x80000001000D2A20;
  v2._object = (void *)0x80000001000D29E0;
  v3._object = (void *)0x80000001000D2A00;
  v2._countAndFlagsBits = 0xD000000000000017;
  v3._countAndFlagsBits = 0x100000000000001ALL;
  Swift::String v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v5);

  xmmword_100105870 = (__int128)v4;
}

uint64_t sub_1000061F4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100006234()
{
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100006274(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = a3;
  id v10 = a1;
  sub_10000782C();
  Date.init()();
  dispatch thunk of PersonalizedFeedTrainer.visibleFeedItemsDidChange(at:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100006378@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100106908;
  swift_beginAccess();
  return sub_10001D360(v3, a1);
}

uint64_t sub_1000063CC(uint64_t a1)
{
  uint64_t v41 = a1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E6EC();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CloudSyncRestoreState();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v35 - v15;
  __chkstk_darwin(v14);
  id v18 = (char *)&v35 - v17;
  uint64_t v40 = v1;
  uint64_t v19 = v1 + qword_1001078A8;
  swift_beginAccess();
  sub_10001E624(v19, (uint64_t)v8, (uint64_t (*)(void))sub_10001E6EC);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10001E68C((uint64_t)v8, (uint64_t (*)(void))sub_10001E6EC);
    goto LABEL_12;
  }
  v35 = v5;
  uint64_t v36 = v3;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v8, v9);
  uint64_t v20 = *(void (**)(void))(v10 + 104);
  unsigned int v39 = enum case for CloudSyncRestoreState.activelyRestoring(_:);
  v38 = (void (*)(char *, void, uint64_t))v20;
  v20(v16);
  sub_1000188E4(&qword_1001079C0, (void (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v37 = v2;
  if (v44 == v42 && v45 == v43) {
    char v21 = 1;
  }
  else {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v16, v9);
  if ((v21 & 1) == 0) {
    goto LABEL_11;
  }
  v38(v13, v39, v9);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v44 != v42 || v45 != v43)
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22(v13, v9);
    if (v30) {
      goto LABEL_16;
    }
LABEL_11:
    v22(v18, v9);
LABEL_12:
    char v23 = CloudSyncRestoreState.isOngoing.getter();
    swift_retain();
    uint64_t v24 = dispatch thunk of PrimarySecondaryDataSource.primaryDataSource.getter();
    swift_release();
    if (v23)
    {
      sub_100003DD8(0, (unint64_t *)&qword_100104860, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_1000CBFD0;
      uint64_t v26 = v24 + qword_100105880;
      uint64_t v27 = type metadata accessor for EmptyStateCollectionViewCellItem();
      *(void *)(v25 + 56) = v27;
      *(void *)(v25 + 64) = sub_1000188E4(&qword_100105228, (void (*)(uint64_t))&type metadata accessor for EmptyStateCollectionViewCellItem);
      id v28 = sub_100004F38((uint64_t *)(v25 + 32));
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v28, v26, v27);
      dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)();
      return swift_release();
    }
  }
  swift_bridgeObjectRelease_n();
  v22(v13, v9);
LABEL_16:
  uint64_t v31 = v35;
  static Logger.view.getter();
  v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Our previous cloud sync state is inProgress. Skipping notifying delegate.", v34, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v37);
  return ((uint64_t (*)(char *, uint64_t))v22)(v18, v9);
}

void sub_100006A28(uint64_t a1)
{
  id v1 = [self sharedInstanceForHealthStore:a1];
  id v2 = [self sharedApplication];
  [v1 setApplicationProvider:v2];
}

Swift::String_optional __swiftcall PersonalizedFeedDataSource.reuseIdentifierForItem(with:)(Swift::String with)
{
  uint64_t v1 = type metadata accessor for HostingCellReusePolicy();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ContentKind();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of FetchedResultsControllerDataSource.item(for:)();
  if (!v23)
  {
    sub_10006B904((uint64_t)v22);
    goto LABEL_7;
  }
  sub_10001AE44();
  type metadata accessor for FeedItem();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    uint64_t v12 = 0;
    uint64_t v14 = 0;
    goto LABEL_8;
  }
  uint64_t v20 = v2;
  uint64_t v9 = v21;
  FeedItem.contentKind.getter();
  int v10 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  int v11 = enum case for ContentKind.app(_:);
  uint64_t v12 = FeedItem.reuseIdentifier.getter();
  uint64_t v14 = v13;
  if (v10 == v11)
  {
    HostingCellReusePolicy.init(reuseIdentifier:)();
    type metadata accessor for HostViewCell();
    HostingCellReusePolicy.override<A>(reusableCellClass:)();
    uint64_t v12 = HostingCellReusePolicy.reuseIdentifier.getter();
    uint64_t v14 = v15;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

LABEL_8:
  uint64_t v16 = v12;
  uint64_t v17 = v14;
  result.value._object = v17;
  result.value._countAndFlagsBits = v16;
  return result;
}

uint64_t sub_100006D34@<X0>(uint64_t a1@<X8>)
{
  sub_1000207E0(0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v14[-v7];
  uint64_t v9 = v1 + qword_1001078A0;
  swift_beginAccess();
  sub_10001E624(v9, (uint64_t)v8, (uint64_t (*)(void))sub_1000207E0);
  sub_100020814(0);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v12 + 32))(a1, v8, v11);
  }
  sub_10001E68C((uint64_t)v8, (uint64_t (*)(void))sub_1000207E0);
  type metadata accessor for CloudSyncRestoreState();
  static LegacyObservable.create()();
  swift_retain();
  dispatch thunk of CloudSyncStateObserver.firstRestoreStateChangeHandler.setter();
  dispatch thunk of CloudSyncStateObserver.startFirstRestoreIfNeeded()();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v6, a1, v11);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v11);
  swift_beginAccess();
  sub_100020778((uint64_t)v6, v9, (uint64_t (*)(void))sub_1000207E0);
  return swift_endAccess();
}

uint64_t sub_100006F78()
{
  if (*(void *)(v0 + 64))
  {
    uint64_t v1 = *(void *)(v0 + 64);
  }
  else
  {
    uint64_t v2 = v0;
    id v3 = *(id *)(v0 + 16);
    sub_100005CD8();
    type metadata accessor for PinnedContentManager();
    type metadata accessor for HealthAppAnalyticsManager();
    swift_allocObject();
    uint64_t v1 = HealthAppAnalyticsManager.init(healthStore:pinnedContentManager:)();
    *(void *)(v2 + 64) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void sub_10000702C(uint64_t a1)
{
}

void sub_100007050(char a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  sub_10001881C(0, &qword_1001079C8, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, sub_10001C410, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)aBlock - v15;
  sub_10001881C(0, &qword_1001079D8, (uint64_t (*)(uint64_t))sub_10001C444, sub_10001C500, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  __chkstk_darwin(v17);
  if (a1)
  {
    id v20 = objc_allocWithZone((Class)type metadata accessor for DeleteFeedOperation());
    char v21 = (void *)DeleteFeedOperation.init(feedKinds:)();
    uint64_t v22 = swift_allocObject();
    swift_weakInit();
    uint64_t v23 = (void *)swift_allocObject();
    v23[2] = v22;
    v23[3] = a2;
    v23[4] = a3;
    v23[5] = v8;
    aBlock[4] = sub_10009D0A4;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100005388;
    aBlock[3] = &unk_1000F85E0;
    uint64_t v24 = _Block_copy(aBlock);
    swift_retain();
    sub_10004CF94((uint64_t)a2);
    sub_10004CF94((uint64_t)sub_10009D0A4);
    swift_release();
    [v21 setCompletionBlock:v24];
    _Block_release(v24);
    swift_release();
    swift_release();
    sub_10001E254(0, (unint64_t *)&qword_100105858);
    uint64_t v25 = (void *)static NSOperationQueue.userInitiated.getter();
    [v25 addOperation:v21];
  }
  else
  {
    uint64_t v26 = enum case for HideableDataSource.Visibility.visible<A>(_:);
    (*(void (**)(char *, void))(v19 + 104))((char *)aBlock - v18, enum case for HideableDataSource.Visibility.visible<A>(_:));
    dispatch thunk of HideableDataSource.visibility.setter();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v16, v26, v10);
    if (HAFeatureFlagShowTrendsInSummary())
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
      dispatch thunk of HideableDataSource.visibility.setter();
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    uint64_t v27 = (uint64_t *)((char *)v4 + qword_1001078E8);
    id v28 = [*(id *)((char *)v4 + qword_1001078F0) profileIdentifier];
    sub_10000CDF0(v27, v28);

    if (a2) {
      a2();
    }
  }
}

uint64_t sub_1000074B8(void *a1)
{
  self;
  uint64_t v3 = swift_dynamicCastObjCClass();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    sub_10001D360(v1 + 16, (uint64_t)&v19);
    uint64_t v5 = *(void **)(v1 + 56);
    sub_10001D360(v1 + 64, (uint64_t)v18);
    id v6 = a1;
    id v7 = v5;
    id v8 = [v4 collectionView];
    type metadata accessor for SummaryFeedDataSource(0);
    swift_allocObject();
    uint64_t v9 = sub_1000174C0(&v19, v7, (uint64_t)v18, v8);

    return v9;
  }
  else
  {
    _StringGuts.grow(_:)(62);
    v11._object = (void *)0x80000001000D4C90;
    v11._countAndFlagsBits = 0xD00000000000003CLL;
    String.append(_:)(v11);
    id v12 = a1;
    id v13 = [v12 description];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    v17._countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10000764C()
{
  sub_100004D14(0, &qword_1001060C8, (uint64_t (*)(uint64_t))sub_10001F2C4, sub_10001F32C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for Publishers.Drop);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v4 = (char *)v6 - v3;
  v6[1] = static FeatureStatusSupport.isHealthChecklistAvailablePublisher()();
  sub_10001F2C4();
  sub_10001F32C();
  Publisher.dropFirst(_:)();
  swift_allocObject();
  swift_weakInit();
  sub_10001F360();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  return swift_release();
}

uint64_t sub_10000782C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PersonalizedFeedTrainer.DwellPolicy();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = qword_1001068E8;
  if (*(void *)&v0[qword_1001068E8])
  {
    uint64_t v4 = *(void *)&v0[qword_1001068E8];
  }
  else
  {
    sub_100019DF4(&qword_100106AB8, (void (*)(uint64_t))type metadata accessor for SummaryFeedViewController);
    static PersonalizedFeedTrainer.DwellPolicy.summary.getter();
    type metadata accessor for PersonalizedFeedTrainer();
    swift_allocObject();
    uint64_t v5 = v0;
    uint64_t v4 = PersonalizedFeedTrainer.init(delegate:dwellPolicy:)();
    *(void *)&v1[v3] = v4;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v4;
}

uint64_t sub_10000794C()
{
  sub_10001F0FC();
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  DelayedDataSource.$dataSourceState.getter();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_10001AD80(&qword_1001060F0, (void (*)(uint64_t))sub_10001F0FC);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

id sub_100007AFC()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v2 = *(id *)(v0 + 24);
  }
  else
  {
    uint64_t v3 = v0;
    id v4 = [objc_allocWithZone((Class)type metadata accessor for InteractiveGenerationListener()) init];
    id v5 = [self sharedApplication];
    sub_10001ED50();
    dispatch thunk of InteractiveGenerationListener.applicationStateProvider.setter();
    uint64_t v6 = *(void **)(v3 + 24);
    *(void *)(v3 + 24) = v4;
    id v2 = v4;

    uint64_t v1 = 0;
  }
  id v7 = v1;
  return v2;
}

void sub_100007BA4(char a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = (objc_class *)type metadata accessor for SummaryFeedViewController();
  v11.receiver = v2;
  v11.super_class = v8;
  [super viewDidAppear:a1 & 1];
  sub_10000782C();
  Date.init()();
  dispatch thunk of PersonalizedFeedTrainer.feedDidBeginDisplay(at:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v9 = [v2 userActivity];
  if (v9)
  {
    uint64_t v10 = v9;
    [v2 submitUserActivityForRestoration:v9];
  }
  if (qword_1001040A8 != -1) {
    swift_once();
  }
  sub_100012E34();
  sub_1000109BC();
}

uint64_t sub_100007D30()
{
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)HKHealthStore) init];
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(unsigned char *)(v0 + 72) = 0;
  id v1 = [self standardUserDefaults];
  UserDefault.init(key:userDefaults:fallbackValue:isAppleInternalOnly:)();
  id v2 = [self defaultCenter];
  [v2 addObserver:v0 selector:"applicationDidEnterBackgroundWithNotification:" name:UIApplicationDidEnterBackgroundNotification object:0];

  return v0;
}

void *sub_100007E40()
{
  id v1 = *(void **)(v0 + qword_1001068F8);
  id v2 = v1;
  return v1;
}

uint64_t sub_100007E78(uint64_t a1)
{
  sub_100008318(0, (unint64_t *)&qword_100107320, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  id v7 = &v13[-v6];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = type metadata accessor for CloudSyncRestoreState();
    uint64_t v11 = *(void *)(v10 - 8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v7, a1, v10);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    sub_1000080D8((uint64_t)v7, (uint64_t)v5);
    uint64_t v12 = v9 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_lastKnownFirstRestoreState;
    swift_beginAccess();
    sub_100008044((uint64_t)v5, v12);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_100008044(uint64_t a1, uint64_t a2)
{
  sub_100008318(0, (unint64_t *)&qword_100107320, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000080D8(uint64_t a1, uint64_t a2)
{
  sub_100008318(0, (unint64_t *)&qword_100107320, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10000816C()
{
  sub_100008318(319, &qword_1001040E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LegacyObservable);
  if (v0 <= 0x3F)
  {
    sub_100008318(319, (unint64_t *)&qword_100107320, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1000082B4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_100008318(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10000837C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1000083E0(void *a1, uint64_t a2, void *a3, void *a4)
{
  type metadata accessor for CompoundDataSourceCollectionViewController();
  uint64_t v7 = (void (*)(void *, id))method lookup function for CompoundDataSourceCollectionViewController();
  swift_unknownObjectRetain();
  id v8 = a4;
  id v9 = a1;
  v7(a3, v8);
  id v10 = [a3 traitCollection];
  id v11 = [v10 horizontalSizeClass];

  if (v11 != [v8 horizontalSizeClass]) {
    sub_1000109BC();
  }

  return swift_unknownObjectRelease();
}

uint64_t sub_1000084C8()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v42 = *(void *)(v1 - 8);
  uint64_t v43 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v40 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  unsigned int v39 = (char *)v38 - v4;
  uint64_t v5 = type metadata accessor for CloudSyncRestoreState();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000206E4();
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008318(0, (unint64_t *)&qword_100107320, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v38[1] = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  v38[0] = (uint64_t)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)v38 - v17;
  __chkstk_darwin(v16);
  id v20 = (char *)v38 - v19;
  uint64_t v41 = v0;
  uint64_t v21 = v0 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_lastKnownFirstRestoreState;
  swift_beginAccess();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v20, enum case for CloudSyncRestoreState.failed(_:), v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
  uint64_t v22 = (uint64_t)&v12[*(int *)(v10 + 56)];
  sub_100008B84(v21, (uint64_t)v12);
  sub_100008B84((uint64_t)v20, v22);
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v23((uint64_t)v12, 1, v5) == 1)
  {
    sub_100008AF8((uint64_t)v20);
    if (v23(v22, 1, v5) == 1)
    {
      sub_100008AF8((uint64_t)v12);
LABEL_12:
      unint64_t v34 = v39;
      static Logger.cloudSync.getter();
      v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Starting first restore since last first restore has failed", v37, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v43);
      return dispatch thunk of CloudSyncStateObserver.startFirstRestoreIfNeeded()();
    }
    goto LABEL_6;
  }
  sub_100008B84((uint64_t)v12, (uint64_t)v18);
  if (v23(v22, 1, v5) == 1)
  {
    sub_100008AF8((uint64_t)v20);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
LABEL_6:
    uint64_t v24 = v21;
    sub_100022E04((uint64_t)v12);
    goto LABEL_7;
  }
  uint64_t v24 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v22, v5);
  sub_100004128();
  char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  os_log_type_t v33 = *(void (**)(char *, uint64_t))(v6 + 8);
  v33(v8, v5);
  sub_100008AF8((uint64_t)v20);
  v33(v18, v5);
  sub_100008AF8((uint64_t)v12);
  if (v32) {
    goto LABEL_12;
  }
LABEL_7:
  uint64_t v25 = v40;
  static Logger.cloudSync.getter();
  swift_retain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    id v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)id v28 = 136446210;
    sub_100008B84(v24, v38[0]);
    uint64_t v29 = String.init<A>(describing:)();
    uint64_t v44 = sub_100018DA0(v29, v30, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Skipping start first restore since last known first restore state did not fail: %{public}s", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v25, v43);
}

uint64_t sub_100008AF8(uint64_t a1)
{
  sub_100008318(0, (unint64_t *)&qword_100107320, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100008B84(uint64_t a1, uint64_t a2)
{
  sub_100008318(0, (unint64_t *)&qword_100107320, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100008C18(void *a1)
{
  id v1 = a1;
  sub_100019B04();
}

uint64_t sub_100008C60(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v71 = a3;
  v73 = a2;
  sub_10001881C(0, &qword_1001079C8, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, sub_10001C410, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v64 = *(void *)(v5 - 8);
  uint64_t v65 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  v58 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v63 = (char *)&v56 - v8;
  sub_10001881C(0, &qword_1001079D8, (uint64_t (*)(uint64_t))sub_10001C444, sub_10001C500, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v62 = v9;
  uint64_t v61 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  v60 = (char *)&v56 - v10;
  sub_1000206E4();
  uint64_t v67 = v11;
  __chkstk_darwin(v11);
  uint64_t v68 = (uint64_t)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CloudSyncRestoreState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  v57 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v56 - v17;
  sub_10001E6EC();
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v59 = (uint64_t)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  v69 = (char *)&v56 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v56 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v56 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v56 - v30;
  sub_1000063CC(a1);
  uint64_t v72 = v3;
  uint64_t v32 = v3 + qword_1001078A8;
  swift_beginAccess();
  v74 = v31;
  sub_10001E624(v32, (uint64_t)v31, (uint64_t (*)(void))sub_10001E6EC);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v29, a1, v13);
  v66 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
  v66(v29, 0, 1, v13);
  sub_1000080D8((uint64_t)v29, (uint64_t)v26);
  swift_beginAccess();
  sub_100020778((uint64_t)v26, v32, (uint64_t (*)(void))sub_10001E6EC);
  swift_endAccess();
  uint64_t v33 = v14;
  unint64_t v34 = *(void (**)(char *, void, uint64_t))(v14 + 104);
  v34(v18, enum case for CloudSyncRestoreState.completed(_:), v13);
  sub_1000188E4(&qword_1001079C0, (void (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
  uint64_t v35 = a1;
  char v36 = 1;
  uint64_t v70 = v35;
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v77 != v75 || v78 != v76) {
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v14 + 8);
  v37(v18, v13);
  uint64_t v38 = (uint64_t)v74;
  if (v36)
  {
    v56 = (void (*)(uint64_t, uint64_t))v37;
    uint64_t v39 = (uint64_t)v69;
    v34(v69, enum case for CloudSyncRestoreState.activelyRestoring(_:), v13);
    v66((char *)v39, 0, 1, v13);
    uint64_t v40 = v68;
    uint64_t v41 = v68 + *(int *)(v67 + 48);
    sub_10001E624(v38, v68, (uint64_t (*)(void))sub_10001E6EC);
    sub_10001E624(v39, v41, (uint64_t (*)(void))sub_10001E6EC);
    uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    if (v42(v40, 1, v13) == 1)
    {
      sub_10001E68C(v39, (uint64_t (*)(void))sub_10001E6EC);
      if (v42(v41, 1, v13) == 1)
      {
        sub_10001E68C(v40, (uint64_t (*)(void))sub_10001E6EC);
        uint64_t v38 = (uint64_t)v74;
LABEL_12:
        char v48 = 1;
LABEL_19:
        sub_100007050(v48, v73, v71);
        return sub_10001E68C(v38, (uint64_t (*)(void))sub_10001E6EC);
      }
      goto LABEL_10;
    }
    uint64_t v43 = v59;
    sub_10001E624(v40, v59, (uint64_t (*)(void))sub_10001E6EC);
    if (v42(v41, 1, v13) == 1)
    {
      sub_10001E68C((uint64_t)v69, (uint64_t (*)(void))sub_10001E6EC);
      v56(v43, v13);
LABEL_10:
      sub_10001E68C(v40, (uint64_t (*)(void))sub_1000206E4);
      uint64_t v38 = (uint64_t)v74;
      goto LABEL_13;
    }
    uint64_t v44 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v57, v41, v13);
    sub_1000188E4((unint64_t *)&qword_100104658, (void (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
    char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v46 = v44;
    unint64_t v47 = v56;
    v56((uint64_t)v46, v13);
    sub_10001E68C((uint64_t)v69, (uint64_t (*)(void))sub_10001E6EC);
    v47(v43, v13);
    sub_10001E68C(v40, (uint64_t (*)(void))sub_10001E6EC);
    uint64_t v38 = (uint64_t)v74;
    if (v45) {
      goto LABEL_12;
    }
  }
LABEL_13:
  if ((CloudSyncRestoreState.isOngoing.getter() & 1) == 0)
  {
    char v48 = 0;
    goto LABEL_19;
  }
  uint64_t v49 = enum case for HideableDataSource.Visibility.hidden<A>(_:);
  (*(void (**)(char *, void, uint64_t))(v61 + 104))(v60, enum case for HideableDataSource.Visibility.hidden<A>(_:), v62);
  dispatch thunk of HideableDataSource.visibility.setter();
  v51 = v63;
  uint64_t v50 = v64;
  uint64_t v52 = v49;
  uint64_t v53 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 104))(v63, v52, v65);
  if (HAFeatureFlagShowTrendsInSummary())
  {
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v58, v51, v53);
    dispatch thunk of HideableDataSource.visibility.setter();
  }
  uint64_t v54 = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v51, v53);
  if (v73) {
    ((void (*)(uint64_t))v73)(v54);
  }
  return sub_10001E68C(v38, (uint64_t (*)(void))sub_10001E6EC);
}

void sub_100009594(void *a1, void *a2, void *a3)
{
  sub_10001881C(0, &qword_100107A50, (uint64_t (*)(uint64_t))&type metadata accessor for NoticesDataSource, sub_10001C598, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v10 = v35 - v9 + 88;
  sub_10001D360((uint64_t)a2, (uint64_t)v35);
  id v11 = [a1 profileIdentifier];
  id v12 = objc_allocWithZone((Class)type metadata accessor for NoticesDataSource());
  NoticesDataSource.init(healthExperienceStore:associatedProfileIdentifier:)();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for HideableDataSource.Visibility.visible<A>(_:), v7);
  sub_10001881C(0, &qword_100107A58, (uint64_t (*)(uint64_t))&type metadata accessor for NoticesDataSource, sub_10001C598, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
  swift_allocObject();
  uint64_t v13 = HideableDataSource.init(source:visibility:)();
  uint64_t v14 = self;
  id v15 = [v14 sharedBehavior];
  if (!v15)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v16 = v15;
  unsigned int v17 = [v15 isiPad];

  if (!v17)
  {
LABEL_13:
    sub_10001C534(&qword_100107A60, &qword_100107A58, (uint64_t (*)(uint64_t))&type metadata accessor for NoticesDataSource, sub_10001C598);
    return;
  }
  id v18 = [v14 sharedBehavior];
  if (!v18) {
    goto LABEL_17;
  }
  uint64_t v19 = v18;
  id v20 = [v18 features];

  if (!v20)
  {
LABEL_18:
    __break(1u);
    return;
  }
  unsigned int v21 = [v20 stanley];

  if (!v21) {
    goto LABEL_13;
  }
  sub_1000190DC(a2, a2[3]);
  dispatch thunk of HealthExperienceStore.viewContext.getter();
  id v22 = [a1 profileIdentifier];
  type metadata accessor for SummaryHeaderProfileNameCell();
  type metadata accessor for HealthKitProfileInformationDataSource();
  swift_allocObject();
  HealthKitProfileInformationDataSource.init(context:profileIdentifier:viewClass:layoutConstructor:)();
  if (a3)
  {
    swift_retain();
    id v23 = [a3 viewController];
    if (v23)
    {
      uint64_t v24 = v23;
      swift_getObjectType();
      if (swift_conformsToProtocol2()) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      if (!v25) {
    }
      }
  }
  else
  {
    swift_retain();
  }
  dispatch thunk of SingleUserDataDataSource.cardStackChangeDelegate.setter();
  swift_release();
  uint64_t v26 = dispatch thunk of SingleUserDataDataSource.asProfileHeader(healthStore:healthExperienceStore:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  sub_100010958(0, &qword_100107A68, (uint64_t (*)(uint64_t))sub_10009D1D0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000CC0F0;
  *(void *)(inited + 32) = 1;
  unint64_t v32 = sub_10009D240();
  uint64_t v33 = sub_10001C534(&qword_100107A60, &qword_100107A58, (uint64_t (*)(uint64_t))&type metadata accessor for NoticesDataSource, sub_10001C598);
  *(void *)(inited + 40) = v13;
  *(void *)(inited + 48) = v32;
  *(void *)(inited + 56) = v33;
  *(void *)(inited + 64) = 2;
  *(void *)(inited + 72) = v26;
  *(void *)(inited + 80) = v28;
  *(void *)(inited + 88) = v30;
  sub_100095304(inited);
  swift_setDeallocating();
  sub_10009D1D0();
  swift_retain();
  swift_unknownObjectRetain();
  swift_arrayDestroy();
  type metadata accessor for SizeClassResponsiveDataSource();
  swift_allocObject();
  swift_unknownObjectRetain();
  SizeClassResponsiveDataSource.init(dataSources:defaultDataSource:)();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
}

uint64_t sub_100009AD0()
{
  uint64_t v0 = type metadata accessor for LayoutConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = &v12[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  type metadata accessor for ListLayoutConfiguration();
  swift_allocBox();
  static ListLayoutConfiguration.withoutHeader.getter();
  static LayoutConfiguration.shared.getter();
  LayoutConfiguration.interItemInset.getter();
  uint64_t v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v6 = (void (*)(unsigned char *, void))ListLayoutConfiguration.additionalContentInsets.modify();
  *(void *)(v7 + 16) = v5;
  v6(v12, 0);
  type metadata accessor for MutableArrayDataSourceWithLayout();
  sub_10001E974();
  uint64_t v8 = swift_allocObject();
  long long v11 = xmmword_1000CBFD0;
  *(_OWORD *)(v8 + 16) = xmmword_1000CBFD0;
  sub_100003DD8(0, (unint64_t *)&qword_100104860, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = v11;
  if (qword_100103FE8 != -1) {
    swift_once();
  }
  *(void *)(v9 + 56) = type metadata accessor for TitleEmptyStateCollectionViewCellItem();
  *(void *)(v9 + 64) = sub_10001889C((unint64_t *)&unk_1001059A0, (void (*)(uint64_t))&type metadata accessor for TitleEmptyStateCollectionViewCellItem);
  sub_100004F38((uint64_t *)(v9 + 32));
  swift_bridgeObjectRetain();
  TitleEmptyStateCollectionViewCellItem.init(title:)();
  *(void *)(v8 + 32) = v9;
  return MutableArrayDataSourceWithLayout.__allocating_init(_:collapseEmptySections:layoutConstructor:)();
}

id sub_100009D3C()
{
  uint64_t v0 = type metadata accessor for Date();
  __chkstk_darwin(v0);
  id result = [self currentOSBuild];
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    id v6 = [self standardUserDefaults];
    type metadata accessor for IntroFlowThrottledCheck();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v3;
    *(void *)(v7 + 24) = v5;
    id v8 = v6;
    UserDefault.init(key:userDefaults:fallbackValue:isAppleInternalOnly:)();
    static Date.distantPast.getter();
    id result = (id)UserDefault.init(key:userDefaults:fallbackValue:isAppleInternalOnly:)();
    qword_100108BD8 = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100009ED4()
{
  uint64_t v0 = type metadata accessor for ListLayoutConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ListLayoutConfiguration.withoutHeader.getter();
  uint64_t v4 = ListLayoutConfiguration.layout(for:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t *sub_100009FA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  v8[3] = type metadata accessor for SummaryPinnedContentDataSource(0);
  v8[4] = &protocol witness table for SummaryPinnedContentDataSource;
  v8[0] = a1;
  sub_10001F198();
  swift_allocObject();
  a2[2] = CurrentValueSubject.init(_:)();
  a2[8] = (uint64_t)&_swiftEmptySetSingleton;
  sub_10001D360((uint64_t)v8, (uint64_t)(a2 + 3));
  swift_beginAccess();
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  sub_10001F22C();
  sub_100019DF4((unint64_t *)&qword_100106AA0, (void (*)(uint64_t))sub_10001F22C);
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v8);
  return a2;
}

uint64_t sub_10000A330()
{
  uint64_t v0 = type metadata accessor for ListLayoutConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ListLayoutConfiguration.withoutHeader.getter();
  uint64_t v4 = ListLayoutConfiguration.layout(for:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

id sub_10000A404()
{
  uint64_t v0 = type metadata accessor for Date();
  __chkstk_darwin(v0);
  id result = [self currentOSBuild];
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    id v6 = [self standardUserDefaults];
    type metadata accessor for IntroFlowThrottledCheck();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v3;
    *(void *)(v7 + 24) = v5;
    id v8 = v6;
    UserDefault.init(key:userDefaults:fallbackValue:isAppleInternalOnly:)();
    static Date.distantPast.getter();
    id result = (id)UserDefault.init(key:userDefaults:fallbackValue:isAppleInternalOnly:)();
    qword_100108BD0 = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10000A59C(void *a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v15 = (char *)&v35 - v14;
  if (qword_100104008 != -1) {
    swift_once();
  }
  if (sub_10000E2D8())
  {
    uint64_t v37 = v8;
    uint64_t v39 = (uint64_t)a2;
    static Logger.general.getter();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v35 = a1;
      id v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v38 = v9;
      aBlock[0] = v19;
      *(_DWORD *)id v18 = 136446210;
      uint64_t v36 = a3;
      uint64_t v20 = _typeName(_:qualified:)();
      uint64_t v41 = sub_100018DA0(v20, v21, aBlock);
      a3 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a1 = v35;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%{public}s]: Should check SOS Contacts intro flow step", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v38);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    }
    sub_10005F964();
    id v29 = [a1 resolvedHealthToolbox];
    id v30 = [v29 createContactConsolidationControllerInViewController:a1];

    uint64_t v31 = (void *)v4[2];
    v4[2] = v30;

    unint64_t v32 = (void *)v4[2];
    if (v32)
    {
      aBlock[4] = v39;
      aBlock[5] = a3;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100005388;
      aBlock[3] = (uint64_t)&unk_1000F6BC0;
      uint64_t v33 = _Block_copy(aBlock);
      id v34 = v32;
      swift_retain();
      swift_release();
      [v34 presentContactConsolidationAlertWithCompletionHandler:v33];
      _Block_release(v33);
    }
  }
  else
  {
    static Logger.general.getter();
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v38 = v9;
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v39 = (uint64_t)a2;
      aBlock[0] = v25;
      *(_DWORD *)uint64_t v24 = 136446210;
      uint64_t v26 = _typeName(_:qualified:)();
      uint64_t v41 = sub_100018DA0(v26, v27, aBlock);
      a2 = (void (*)(uint64_t))v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "[%{public}s]: SOS Contacts check is throttled, moving on", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v38);
    }
    else
    {

      uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
    a2(v28);
  }
}

void sub_10000AA7C(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v53 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v53 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v53 - v15;
  if (qword_100104000 != -1) {
    swift_once();
  }
  if (sub_10000E2D8())
  {
    v58 = v1;
    static Logger.general.getter();
    os_log_type_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v56 = v5;
    v57 = a1;
    uint64_t v55 = v3;
    if (v19)
    {
      uint64_t v59 = v4;
      uint64_t v20 = swift_slowAlloc();
      uint64_t v54 = v11;
      unint64_t v21 = (uint8_t *)v20;
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v21 = 136446210;
      uint64_t v22 = _typeName(_:qualified:)();
      uint64_t v61 = sub_100018DA0(v22, v23, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v4 = v59;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%{public}s]: Should check IH&A intro flow step", v21, 0xCu);
      swift_arrayDestroy();
      uint64_t v5 = v56;
      swift_slowDealloc();
      uint64_t v11 = v54;
      swift_slowDealloc();
    }

    uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v16, v4);
    sub_10005F964();
    uint64_t v25 = self;
    if ([v25 needsRequestedPermission])
    {
      static Logger.general.getter();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        uint64_t v59 = v4;
        aBlock[0] = v29;
        *(_DWORD *)uint64_t v28 = 136446210;
        uint64_t v30 = _typeName(_:qualified:)();
        uint64_t v61 = sub_100018DA0(v30, v31, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%{public}s]: IH&A needs requested permission, presenting flow", v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        unint64_t v32 = v14;
        uint64_t v33 = v59;
      }
      else
      {

        unint64_t v32 = v14;
        uint64_t v33 = v4;
      }
      v24(v32, v33);
      swift_getKeyPath();
      swift_getKeyPath();
      LOBYTE(aBlock[0]) = 1;
      swift_retain();
      static Published.subscript.setter();
      uint64_t v46 = swift_allocObject();
      swift_weakInit();
      uint64_t v47 = swift_allocObject();
      char v48 = v57;
      *(void *)(v47 + 16) = v46;
      *(void *)(v47 + 24) = v48;
      aBlock[4] = (uint64_t)sub_100055AC8;
      aBlock[5] = v47;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100053760;
      aBlock[3] = (uint64_t)&unk_1000F6B98;
      uint64_t v49 = _Block_copy(aBlock);
      id v50 = v48;
      swift_release();
      [v25 presentInViewController:v50 completion:v49];
      _Block_release(v49);
    }
    else
    {
      static Logger.general.getter();
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 136446210;
        uint64_t v44 = _typeName(_:qualified:)();
        uint64_t v61 = sub_100018DA0(v44, v45, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "[%{public}s]: IH&A prompting is not needed, continuing to IHR", v43, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      v24(v11, v4);
      v51 = v57;
      id v52 = [objc_allocWithZone((Class)HKHealthStore) init];
      sub_1000537B4(v51, v52);
    }
  }
  else
  {
    static Logger.general.getter();
    id v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = v5;
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      uint64_t v59 = v4;
      aBlock[0] = v38;
      *(_DWORD *)uint64_t v37 = 136446210;
      uint64_t v39 = _typeName(_:qualified:)();
      uint64_t v61 = sub_100018DA0(v39, v40, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "[%{public}s]: IH&A dialog is throttled, moving on to notification authorization if necessary", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v59);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    sub_10000D4B8();
  }
}

uint64_t sub_10000B28C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v29 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = self;
  if (![v10 isBuddyDisabled])
  {
    if ([v10 shouldShowBuddy])
    {
      static Logger.advertisableFeatures.getter();
      os_log_type_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        BOOL v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        *(_DWORD *)BOOL v19 = 136315138;
        uint64_t v20 = _typeName(_:qualified:)();
        uint64_t v29 = sub_100018DA0(v20, v21, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%s] Should show due to version check or force state", v19, 0xCu);
        uint64_t v16 = 1;
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v1 + 8))(v7, v0);
        return v16;
      }

      (*(void (**)(char *, uint64_t))(v1 + 8))(v7, v0);
    }
    else
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      char v22 = dispatch thunk of HealthWelcomeFlowSignalProviding.shouldShowHealthWelcomeFlowOnNextLaunch.getter();
      swift_unknownObjectRelease();
      if ((v22 & 1) == 0) {
        return 0;
      }
      static Logger.advertisableFeatures.getter();
      unint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136315138;
        uint64_t v26 = _typeName(_:qualified:)();
        uint64_t v29 = sub_100018DA0(v26, v27, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%s] Should show due to advertisable feature signal check", v25, 0xCu);
        uint64_t v16 = 1;
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
        return v16;
      }

      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    }
    return 1;
  }
  static Logger.advertisableFeatures.getter();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v14 = _typeName(_:qualified:)();
    uint64_t v29 = sub_100018DA0(v14, v15, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%s] Buddy explicitly disabled or in store demo mode.", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v9, v0);
  return 0;
}

void sub_10000B7CC()
{
  uint64_t v1 = v0;
  type metadata accessor for CompoundDataSourceCollectionViewController();
  uint64_t v2 = (void (*)(void))method lookup function for CompoundDataSourceCollectionViewController();
  v2();
  id v3 = [v0 collectionView];
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = v3;
  type metadata accessor for HostViewCell();
  UICollectionView.registerCell<A>(_:)();

  id v5 = [v1 collectionView];
  if (!v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = v5;
  type metadata accessor for EmptyStateCollectionViewCell();
  UICollectionView.registerCell<A>(_:)();

  id v7 = [v1 collectionView];
  if (!v7)
  {
LABEL_9:
    __break(1u);
    return;
  }
  type metadata accessor for TitleEmptyStateCollectionViewCell();
  UICollectionView.registerCell<A>(_:)();
}

void sub_10000B8F0()
{
  uint64_t v1 = v0;

  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for MainTabBarController();
  [super viewDidLoad];
  id v2 = [v0 view];
  if (v2)
  {
    id v3 = v2;
    NSString v4 = String._bridgeToObjectiveC()();
    [v3 setAccessibilityIdentifier:v4];

    id v5 = [self mainBundle];
    v10._countAndFlagsBits = 0xD00000000000001ELL;
    v10._object = (void *)0x80000001000D2400;
    v6._countAndFlagsBits = 0x686372616553;
    v6._object = (void *)0xE600000000000000;
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v10);

    sub_10001E254(0, &qword_100105848);
    uint64_t v8 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
    [v1 addKeyCommand:v8];
  }
  else
  {
    __break(1u);
  }
}

void sub_10000BA9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  Swift::String v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    v13[1] = a1;
    objc_super v9 = (uint8_t *)v8;
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)objc_super v9 = 136446210;
    uint64_t v10 = _typeName(_:qualified:)();
    v13[2] = sub_100018DA0(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] starting interactive generation listener", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v12 = sub_100007AFC();
  dispatch thunk of InteractiveGenerationListener.start()();
}

uint64_t sub_10000BC94()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for EmptyStateCollectionViewCellItem();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LoadingPersonalizedHighlightsDataSource();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v9 = [self bundleForClass:ObjCClassFromMetadata];
  v25._countAndFlagsBits = 0xD00000000000001DLL;
  v25._object = (void *)0x80000001000D64B0;
  v10._object = (void *)0x80000001000D6470;
  v11._object = (void *)0x80000001000D6490;
  v10._countAndFlagsBits = 0xD000000000000012;
  v11._countAndFlagsBits = 0x1000000000000015;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v25);

  EmptyStateCollectionViewCellItem.init(title:showSpinner:)();
  sub_10000C200(0, &qword_100104858, (void (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection);
  type metadata accessor for ArrayDataSourceSection();
  uint64_t v12 = swift_allocObject();
  long long v22 = xmmword_1000CBFD0;
  *(_OWORD *)(v12 + 16) = xmmword_1000CBFD0;
  sub_10000C200(0, (unint64_t *)&qword_100104860, (void (*)(uint64_t))sub_10001AE44);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = v22;
  *(void *)(v13 + 56) = v4;
  *(void *)(v13 + 64) = sub_100020654(&qword_100105228, (void (*)(uint64_t))&type metadata accessor for EmptyStateCollectionViewCellItem);
  uint64_t v14 = sub_100004F38((uint64_t *)(v13 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 16))(v14, v7, v4);
  ArrayDataSourceSection.init(arrayLiteral:)();
  uint64_t v23 = 0x3C53447961727241;
  unint64_t v24 = 0xE800000000000000;
  UUID.init()();
  uint64_t v15 = UUID.uuidString.getter();
  os_log_type_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 62;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  uint64_t v20 = ArrayDataSource.init(arrangedSections:identifier:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v20;
}

void sub_10000C070(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10000C0D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10000C138(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10000C19C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10000C200(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for _ContiguousArrayStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10000C254()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  uint64_t v18 = *(void *)(v0 - 8);
  uint64_t v19 = v0;
  __chkstk_darwin();
  uint64_t v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LogCategory();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OSSignposter();
  uint64_t v7 = *(void *)(v17 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.healthSubsystem.getter();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for LogCategory.general(_:), v3);
  LogCategory.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  OSSignposter.init(subsystem:category:)();
  static OSSignpostID.exclusive.getter();
  Swift::String v10 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)Swift::String v10 = 0;
  Swift::String v11 = OSSignposter.logHandle.getter();
  os_signpost_type_t v12 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, v12, v13, "sceneWillEnterForeground_HKCountryMonitorControl", "", v10, 2u);
  [self checkCurrentCountryWithHealthStore:*(void *)(v16 + 16)];
  LOBYTE(v4) = static os_signpost_type_t.end.getter();
  os_signpost_id_t v14 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, (os_signpost_type_t)v4, v14, "sceneWillEnterForeground_HKCountryMonitorControl", "", v10, 2u);

  swift_slowDealloc();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v2, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v17);
}

id sub_10000C578()
{
  *(void *)&v0[OBJC_IVAR____TtC6Health20MainTabBarController____lazy_storage___providedHealthToolbox] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC6Health20MainTabBarController_providedPresentation];
  uint64_t v2 = enum case for Presentation.summaryFeed(_:);
  uint64_t v3 = type metadata accessor for Presentation();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104))(v1, v2, v3);
  id v4 = objc_allocWithZone((Class)HKHealthStore);
  uint64_t v5 = v0;
  id v6 = [v4 init];
  uint64_t v7 = OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthStore;
  *(void *)&v5[OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthStore] = v6;
  if (qword_1001040A8 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_100005BCC();
  uint64_t v9 = (uint64_t *)&v5[OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthExperienceStore];
  v9[3] = type metadata accessor for DiskHealthExperienceStore();
  v9[4] = (uint64_t)&protocol witness table for DiskHealthExperienceStore;
  *uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for PinnedContentManager();
  id v11 = *(id *)&v5[v7];
  uint64_t v12 = PinnedContentManager.__allocating_init(healthStore:domain:)();
  os_signpost_id_t v13 = (uint64_t *)&v5[OBJC_IVAR____TtC6Health20MainTabBarController_pinnedContentManager];
  void v13[3] = v10;
  v13[4] = (uint64_t)&protocol witness table for PinnedContentManager;
  *os_signpost_id_t v13 = v12;

  v18.receiver = v5;
  v18.super_class = (Class)type metadata accessor for MainTabBarController();
  [super initWithNibName:0 bundle:0];
  sub_1000125C0();
  sub_10001E254(0, (unint64_t *)&qword_100108820);
  id v15 = v14;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v15 setViewControllers:isa];

  return v15;
}

uint64_t sub_10000C768(unint64_t *a1)
{
  unint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    swift_retain();
    swift_release();
    _s6Health41SummaryPinnedContentGradientColorProviderC6colors4fromSaySo7UIColorCGSay0A8Platform8FeedItemCG_tFZ_0(v1);
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_10000C814(uint64_t a1, unint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v16 = a1;
    uint64_t v12 = v11;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = ObjectType;
    *(_DWORD *)uint64_t v12 = 136446466;
    swift_getMetatypeMetadata();
    uint64_t v17 = v5;
    uint64_t v13 = String.init<A>(describing:)();
    uint64_t v19 = sub_100018DA0(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2082;
    uint64_t v19 = sub_100018DA0(v16, a2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%{public}s]: Lifecycle: %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v17);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_10000CA54()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  id v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = ObjectType;
    *(_DWORD *)uint64_t v7 = 136446466;
    swift_getMetatypeMetadata();
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t v12 = sub_100018DA0(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    uint64_t v12 = sub_100018DA0(0xD00000000000001CLL, 0x80000001000D5170, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s]: Lifecycle: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (qword_1001040A8 != -1) {
    swift_once();
  }
  return sub_10000C254();
}

uint64_t sub_10000CCB8()
{
  return sub_10000CCD4();
}

uint64_t sub_10000CCD4()
{
  uint64_t v0 = type metadata accessor for ListLayoutConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = swift_projectBox();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t v5 = ListLayoutConfiguration.layout(for:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

uint64_t sub_10000CDF0(void *a1, void *a2)
{
  unint64_t v32 = a2;
  uint64_t v34 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v33 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  __chkstk_darwin(v4);
  unint64_t v31 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v29 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  os_log_type_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000190DC(a1, a1[3]);
  uint64_t v17 = (void *)dispatch thunk of HealthExperienceStore.sharedBackgroundContext.getter();
  sub_10001E254(0, (unint64_t *)&qword_100105730);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.userInitiated(_:), v13);
  uint64_t v30 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  static DispatchTime.now()();
  type metadata accessor for SummaryTabFeedPopulationManager();
  static SummaryTabFeedPopulationManager.highlightsSectionTimeout.getter();
  + infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v10, v6);
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v32;
  *(void *)(v19 + 16) = v17;
  *(void *)(v19 + 24) = v20;
  aBlock[4] = sub_10009D148;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = &unk_1000F8680;
  unint64_t v21 = _Block_copy(aBlock);
  id v22 = v20;
  id v23 = v17;
  unint64_t v24 = v31;
  static DispatchQoS.unspecified.getter();
  uint64_t v38 = &_swiftEmptyArrayStorage;
  sub_1000188E4((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010958(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_10001EF54();
  Swift::String v25 = v33;
  uint64_t v26 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unint64_t v27 = (void *)v30;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v36);
  v18(v12, v29);
  return swift_release();
}

uint64_t sub_10000D2C4(uint64_t a1, void *a2, uint64_t a3)
{
  sub_10001D360(a1, (uint64_t)v11);
  uint64_t v5 = self;
  id v6 = a2;
  id v7 = [v5 primaryProfile];
  id v8 = objc_allocWithZone((Class)type metadata accessor for PersonalizedFeedDataSource());
  uint64_t v9 = sub_100018B34(a3, v11, (uint64_t)v7, a2, 0);

  return v9;
}

id sub_10000D370()
{
  id v0 = [objc_allocWithZone((Class)HKChangesSyncRequest) initWithPush:0 pull:1 lite:1];
  id v1 = [objc_allocWithZone((Class)HKContextSyncRequest) initWithPush:1 pull:1];
  id v2 = [objc_allocWithZone((Class)HKStateSyncRequest) init];
  id v3 = objc_allocWithZone((Class)HKMedicalIDSyncRequest);
  id v4 = v0;
  id v5 = v1;
  id v6 = v2;
  id v7 = [v3 init];
  id v8 = [objc_allocWithZone((Class)HKSummarySharingSyncRequest) initWithPush:0 pull:1];
  id v9 = [objc_allocWithZone((Class)HKCloudSyncRequest) initWithChangesSyncRequest:v4 contextSyncRequest:v5 stateSyncRequest:v6 medicalIDSyncRequest:v7 summarySharingSyncRequest:v8];

  return v9;
}

uint64_t sub_10000D4B8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v8 = (char *)&v28 - v7;
  uint64_t v9 = *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC6Health16IntroFlowManager_healthAppNotificationManager);
  os_log_type_t v10 = (void *)dispatch thunk of HealthAppNotificationManager.getNotificationSettings()();
  id v11 = [v10 authorizationStatus];

  if (v11)
  {
    static Logger.general.getter();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v31 = v2;
      *(_DWORD *)uint64_t v14 = 136446210;
      uint64_t v15 = _typeName(_:qualified:)();
      uint64_t v32 = sub_100018DA0(v15, v16, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%{public}s]: Not showing notification authorization, ending presentation", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v31);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v33) = 0;
    swift_retain();
    return static Published.subscript.setter();
  }
  else
  {
    uint64_t v30 = v1;
    int v17 = sub_1000519FC();
    static Logger.notifications.getter();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v31 = v2;
      uint64_t v20 = swift_slowAlloc();
      int v29 = v17;
      unint64_t v21 = (uint8_t *)v20;
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)unint64_t v21 = 136446210;
      uint64_t v28 = v21 + 4;
      uint64_t v22 = _typeName(_:qualified:)();
      uint64_t v32 = sub_100018DA0(v22, v23, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%{public}s]: Requesting notification authorization because not already determined", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v24 = v30;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v31);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      uint64_t v24 = v30;
    }
    uint64_t v26 = swift_allocObject();
    swift_weakInit();
    unint64_t v27 = (void *)swift_allocObject();
    v27[2] = v9;
    v27[3] = v26;
    v27[4] = v24;
    swift_retain();
    swift_retain();
    dispatch thunk of HealthAppNotificationManager.requestAuthorization(addCriticalAlerts:completionHandler:)();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_10000D94C(void *a1)
{
  uint64_t v2 = v1;
  sub_100008318(0, &qword_1001040E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LegacyObservable);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)v22 - v10;
  uint64_t v12 = v2 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_lastKnownFirstRestoreState;
  uint64_t v13 = type metadata accessor for CloudSyncRestoreState();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(void *)(v2 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_notificationCenterObserver) = 0;
  uint64_t v14 = (objc_class *)type metadata accessor for CloudSyncStateObserver();
  memset(v22, 0, sizeof(v22));
  uint64_t v23 = 0;
  id v15 = objc_allocWithZone(v14);
  id v16 = a1;
  *(void *)(v2 + 16) = CloudSyncStateObserver.init(healthStore:store:)();
  id v17 = [objc_allocWithZone((Class)HKCloudSyncControl) initWithHealthStore:v16];
  *(void *)(v2 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_cloudSyncControl) = v17;
  static LegacyObservable.create()();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v2 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_observable, v11, v5);
  id v18 = *(id *)(v2 + 16);
  swift_retain();
  dispatch thunk of CloudSyncStateObserver.firstRestoreStateChangeHandler.setter();

  id v19 = [self mainQueue];
  swift_allocObject();
  swift_weakInit();
  sub_100020848();
  ObservableConvertible.afterChange(on:_:)();
  swift_release();

  swift_release();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v9, v5);
  v20(v11, v5);
  return v2;
}

uint64_t sub_10000DC44()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v21 - v5;
  id v7 = [self standardUserDefaults];
  NSString v8 = String._bridgeToObjectiveC()();
  unsigned int v9 = [v7 BOOLForKey:v8];

  if (v9)
  {
    static Logger.general.getter();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446210;
      uint64_t v13 = _typeName(_:qualified:)();
      uint64_t v21 = sub_100018DA0(v13, v14, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%{public}s] FeedItemFetchRequestNoFaults ENABLED", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  }
  else
  {
    static Logger.general.getter();
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)id v18 = 136446210;
      uint64_t v19 = _typeName(_:qualified:)();
      uint64_t v21 = sub_100018DA0(v19, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%{public}s] FeedItemFetchRequestNoFaults DISABLED", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  }
}

uint64_t sub_10000DFD8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  sub_10001D360(a1, v4 + qword_100107960);
  *(void *)(v4 + qword_100107968) = a2;
  sub_10001D360(a1, (uint64_t)v27);
  NSString v8 = self;
  swift_retain();
  id v9 = a2;
  id v10 = [v8 primaryProfile];
  id v11 = objc_allocWithZone((Class)type metadata accessor for PersonalizedFeedDataSource());
  uint64_t v12 = sub_100018B34(2, v27, (uint64_t)v10, a3, 1);

  uint64_t v13 = qword_100107950;
  *(void *)(v4 + qword_100107950) = v12;
  type metadata accessor for MutableArrayDataSourceWithLayout();
  sub_10001E974();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1000CBFD0;
  sub_100003DD8(0, (unint64_t *)&qword_100104860, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1000CBFD0;
  *(void *)(v15 + 56) = type metadata accessor for ContentConfigurationItem();
  *(void *)(v15 + 64) = sub_1000188E4(&qword_100104870, (void (*)(uint64_t))&type metadata accessor for ContentConfigurationItem);
  id v16 = sub_100004F38((uint64_t *)(v15 + 32));
  sub_10001015C(a1, v9, (uint64_t)v16);
  *(void *)(v14 + 32) = v15;
  MutableArrayDataSourceWithLayout.__allocating_init(_:collapseEmptySections:layoutConstructor:)();
  uint64_t v17 = SnapshotDataSource.withCellRegistration(_:)();
  swift_release();
  uint64_t v18 = qword_100107958;
  *(void *)(v4 + qword_100107958) = v17;
  swift_release();
  sub_10001E9E8();
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1000CC0F0;
  unint64_t v20 = *(void **)(v4 + v13);
  uint64_t v21 = sub_10001AE10();
  *(void *)(v19 + 32) = v20;
  *(void *)(v19 + 40) = v21;
  uint64_t v22 = *(void *)(v4 + v18);
  uint64_t v23 = sub_1000188E4(&qword_1001058E0, (void (*)(uint64_t))sub_10009D160);
  *(void *)(v19 + 48) = v22;
  *(void *)(v19 + 56) = v23;
  id v24 = v20;
  swift_retain();
  uint64_t v25 = CompoundSectionedDataSource.init(_:)();
  _s6Health23OpenSleepScheduleIntentVwxx_0(a1);
  return v25;
}

uint64_t sub_10000E2D8()
{
  sub_10000E670();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v32 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E6C8();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v16 = (char *)&v29 - v15;
  if ([self isRunningStoreDemoMode]) {
    goto LABEL_2;
  }
  Date.init()();
  uint64_t v30 = v0;
  uint64_t v31 = v2;
  uint64_t v18 = v3;
  uint64_t v19 = v0 + OBJC_IVAR____TtC6Health23IntroFlowThrottledCheck__lastCheckDate;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v19, v6);
  UserDefault.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  Date.timeIntervalSince(_:)();
  double v21 = v20;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v14, v10);
  v22(v16, v10);
  uint64_t v23 = v30;
  uint64_t v24 = v30 + OBJC_IVAR____TtC6Health23IntroFlowThrottledCheck__lastCheckVersion;
  swift_beginAccess();
  uint64_t v26 = v31;
  uint64_t v25 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v32, v24, v31);
  UserDefault.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v26);
  if (v33 != *(void *)(v23 + 16) || v34 != *(void *)(v23 + 24))
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v21 <= 86400.0)
    {
      char v17 = v27 ^ 1;
      return v17 & 1;
    }
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  if (v21 > 86400.0)
  {
LABEL_8:
    char v17 = 1;
    return v17 & 1;
  }
LABEL_2:
  char v17 = 0;
  return v17 & 1;
}

void sub_10000E670()
{
  if (!qword_100106248)
  {
    unint64_t v0 = type metadata accessor for UserDefault();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106248);
    }
  }
}

void sub_10000E6C8()
{
  if (!qword_100106250)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for UserDefault();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106250);
    }
  }
}

void PersonalizedFeedDataSource.supplementaryItem(ofKind:at:)(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v33[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v37 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = &v33[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for UIListContentConfiguration();
  __chkstk_darwin(v11 - 8);
  type metadata accessor for PersonalizedFeedDataSource();
  sub_10001ADC8(&qword_100106088, (void (*)(uint64_t))type metadata accessor for PersonalizedFeedDataSource);
  SnapshotDataSource.item(at:)();
  sub_10001AE44();
  type metadata accessor for FeedItem();
  if (swift_dynamicCast())
  {
    id v12 = v38;
    id v13 = [v38 feedSection];
    if (v13)
    {
      id v14 = v13;
      id v15 = [v13 identifier];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      if (ForYouSectionKind.init(rawValue:)() != 4)
      {
        ForYouSectionKind.localizedTitle.getter();
        static UIListContentConfiguration.extraProminentInsetGroupedHeader()();
        uint64_t v30 = type metadata accessor for HeaderItem();
        swift_allocObject();
        uint64_t v29 = HeaderItem.init(title:buttonText:buttonWasTapped:configuration:automationIdentifier:)();
        a2[3] = v30;
        a2[4] = sub_10001ADC8((unint64_t *)&unk_100105760, (void (*)(uint64_t))&type metadata accessor for HeaderItem);

LABEL_10:
        *a2 = v29;
        return;
      }
    }
    static Logger.view.getter();
    id v14 = v12;
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    int v18 = v17;
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v19 = swift_slowAlloc();
      int v34 = v18;
      uint64_t v20 = v19;
      uint64_t v35 = swift_slowAlloc();
      v39[0] = v35;
      *(_DWORD *)uint64_t v20 = 136315394;
      id v21 = [v14 uniqueIdentifier];
      uint64_t v36 = v8;
      id v22 = v21;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v25 = v24;

      id v38 = (id)sub_100018DA0(v23, v25, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2080;
      id v38 = [v14 feedSection];
      sub_10006BA18(0, &qword_100106518, (void (*)(uint64_t))&type metadata accessor for FeedSection);
      uint64_t v26 = String.init<A>(describing:)();
      id v38 = (id)sub_100018DA0(v26, v27, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v34, "Could not resolve feedSection from feedItem %s: %s. It should be deleted during the next picking operation", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(unsigned char *, uint64_t))(v37 + 8))(v10, v36);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v37 + 8))(v10, v8);
    }
    uint64_t v28 = type metadata accessor for HeaderItem();
    static UIListContentConfiguration.extraProminentInsetGroupedHeader()();
    uint64_t v29 = HeaderItem.__allocating_init(hkType:title:showShowAll:configuration:automationIdentifier:)();
    a2[3] = v28;
    a2[4] = sub_10001ADC8((unint64_t *)&unk_100105760, (void (*)(uint64_t))&type metadata accessor for HeaderItem);
    goto LABEL_10;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v39[0] = 0;
  v39[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(59);
  v31._object = (void *)0x80000001000D40E0;
  v31._countAndFlagsBits = 0xD000000000000039;
  String.append(_:)(v31);
  sub_10001ADC8(&qword_100106510, (void (*)(uint64_t))&type metadata accessor for IndexPath);
  v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10000EDD4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v30 = a2;
  sub_10001881C(0, &qword_1001079D8, (uint64_t (*)(uint64_t))sub_10001C444, sub_10001C500, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v31 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  Swift::String v32 = (char *)&v30 - v11;
  sub_100020A4C(0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  id v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  os_log_type_t v17 = (char *)&v30 - v16;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  Feed.Kind.earliestDisplayDateUpdated.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_10001E68C((uint64_t)v17, (uint64_t (*)(void))sub_100020A4C);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v15, v21, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
    id v22 = objc_allocWithZone((Class)type metadata accessor for FeedObjectDataSource());
    id v23 = a3;
    unint64_t v24 = (void *)sub_10001DD50(2, a3, (uint64_t)v15, a4);
    sub_100020384();
    type metadata accessor for LoadingPersonalizedHighlightsDataSource();
    swift_allocObject();
    id v25 = v24;
    sub_10000BC94();
    PrimarySecondaryDataSource.__allocating_init(primaryDataSource:secondaryDataSource:activeDataSourceResolver:)();
    sub_10001D360(a1, (uint64_t)v33);
    type metadata accessor for HighlightsFeedWithShowAllHighlightsDataSource(0);
    swift_allocObject();
    id v26 = a5;
    id v27 = v30;
    sub_10000DFD8((uint64_t)v33, v27, a5);

    sub_10001C444();
    swift_retain();
    swift_retain();
    PrimarySecondaryDataSource.__allocating_init(primaryDataSource:secondaryDataSource:activeDataSourceResolver:)();
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v32, enum case for HideableDataSource.Visibility.visible<A>(_:), v31);
    sub_10001881C(0, &qword_100107A30, (uint64_t (*)(uint64_t))sub_10001C444, sub_10001C500, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
    swift_allocObject();
    uint64_t v28 = HideableDataSource.init(source:visibility:)();

    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    return v28;
  }
  return result;
}

uint64_t sub_10000F2BC()
{
  uint64_t v1 = v0;
  if (qword_100103FC0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_cloudSyncControl);
  id v3 = (id)qword_100108A48;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t v16 = sub_10001F8D4;
  uint64_t v17 = v1;
  uint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  uint64_t v14 = sub_10000408C;
  id v15 = &unk_1000F5628;
  uint64_t v5 = _Block_copy(&v12);
  swift_retain();
  swift_release();
  [v2 syncWithRequest:v3 reason:v4 completion:v5];
  _Block_release(v5);

  dispatch thunk of CloudSyncStateObserver.startFirstRestoreIfNeeded()();
  id v6 = [self defaultCenter];
  id v7 = [self mainQueue];
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = sub_10001F8DC;
  uint64_t v17 = v8;
  uint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  uint64_t v14 = sub_100005198;
  id v15 = &unk_1000F5650;
  uint64_t v9 = _Block_copy(&v12);
  swift_release();
  id v10 = [v6 addObserverForName:UIApplicationDidBecomeActiveNotification object:0 queue:v7 usingBlock:v9];

  _Block_release(v9);
  *(void *)(v1 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_notificationCenterObserver) = v10;
  return swift_unknownObjectRelease();
}

uint64_t sub_10000F540()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v33 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v6 - 8);
  uint64_t v32 = v6;
  __chkstk_darwin(v6);
  id v30 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v28 = v1;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v26 = v8;
    id v15 = (uint8_t *)v14;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v29 = v3;
    aBlock[0] = v16;
    uint64_t v27 = v4;
    *(_DWORD *)id v15 = 136446210;
    uint64_t v17 = _typeName(_:qualified:)();
    uint64_t v34 = sub_100018DA0(v17, v18, aBlock);
    uint64_t v4 = v27;
    uint64_t v1 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%{public}s] enqueuing interactive generation", v15, 0xCu);
    swift_arrayDestroy();
    uint64_t v3 = v29;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v26);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  sub_10001E254(0, (unint64_t *)&qword_100105730);
  uint64_t v19 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v1;
  *(void *)(v20 + 24) = v2;
  aBlock[4] = (uint64_t)sub_10001FF8C;
  aBlock[5] = v20;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100005388;
  aBlock[3] = (uint64_t)&unk_1000F87C8;
  id v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v22 = v30;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
  sub_100019DAC((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100013598(0, (unint64_t *)&qword_100105740, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100013B78((unint64_t *)&qword_100105A10, (unint64_t *)&qword_100105740, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  id v23 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v23, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v22, v32);
}

uint64_t sub_10000FA18(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - v11;
  if (a1)
  {
    static Logger.cloudSync.getter();
    swift_retain_n();
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v32 = a3;
      uint64_t v33 = v16;
      uint64_t v31 = v6;
      *(_DWORD *)id v15 = 136315138;
      type metadata accessor for CloudSyncStartupManager();
      swift_retain();
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v32 = sub_100018DA0(v17, v18, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s: Successfully requested lite sync pull, context sync and state sync.", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v31);
    }

    swift_release_n();
    uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    uint64_t v29 = v12;
  }
  else
  {
    static Logger.cloudSync.getter();
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v31 = v6;
      uint64_t v32 = a3;
      uint64_t v33 = v23;
      *(_DWORD *)uint64_t v22 = 136315394;
      type metadata accessor for CloudSyncStartupManager();
      swift_retain();
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v32 = sub_100018DA0(v24, v25, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v32 = a2;
      swift_errorRetain();
      sub_100008318(0, (unint64_t *)&qword_100104660, (uint64_t (*)(uint64_t))sub_10001E8C0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      uint64_t v26 = String.init<A>(describing:)();
      uint64_t v32 = sub_100018DA0(v26, v27, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s: Failed to request lite sync pull, context sync and state sync with error: %s.", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v31);
    }
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();

    uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    uint64_t v29 = v10;
  }
  return v28(v29, v6);
}

uint64_t sub_10000FE84()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E254(0, (unint64_t *)&qword_100105858);
  uint64_t v4 = (void *)static NSOperationQueue.utility.getter();
  uint64_t v5 = sub_100005BCC();
  v19[3] = type metadata accessor for DiskHealthExperienceStore();
  v19[4] = (uint64_t)&protocol witness table for DiskHealthExperienceStore;
  v19[0] = v5;
  id v6 = objc_allocWithZone((Class)type metadata accessor for HealthExperienceStoreIncrementalCoreSpotlightOperation());
  uint64_t v7 = (void *)HealthExperienceStoreIncrementalCoreSpotlightOperation.init(store:)();
  [v4 addOperation:v7];

  type metadata accessor for MedicalIDCache();
  uint64_t v8 = (void *)static MedicalIDCache.primary.getter();
  dispatch thunk of MedicalIDCache.enqueueMedicalIDFetch()();

  sub_100004FE0();
  sub_10000F2BC();
  swift_release();
  static Logger.general.getter();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v17 = v0;
    v19[0] = v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    uint64_t v13 = _typeName(_:qualified:)();
    uint64_t v18 = sub_100018DA0(v13, v14, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[[%{public}s]] enqueueStartupOperations finished", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v17);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return sub_10000DC44();
}

uint64_t sub_10001015C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v54 = a3;
  uint64_t v4 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  __chkstk_darwin(v4);
  v51 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v49 = *(void *)(v6 - 8);
  uint64_t v50 = v6;
  __chkstk_darwin(v6);
  char v48 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010958(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v8 - 8);
  uint64_t v47 = (char *)&v40 - v9;
  sub_100010958(0, &qword_100104AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v10 - 8);
  uint64_t v44 = (char *)&v40 - v11;
  uint64_t v12 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions();
  uint64_t v45 = *(void *)(v12 - 8);
  uint64_t v46 = v12;
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for UICellAccessory.DisplayedState();
  uint64_t v15 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for UIListContentConfiguration();
  uint64_t v40 = *(void *)(v55 - 8);
  uint64_t v18 = v40;
  __chkstk_darwin(v55);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentConfigurationCollectionViewListCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v22 = [self bundleForClass:ObjCClassFromMetadata];
  static UIListContentConfiguration.cell()();
  id v23 = v22;
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [self imageNamed:v24 inBundle:v23];

  UIListContentConfiguration.image.setter();
  v59._countAndFlagsBits = 0xD00000000000001ELL;
  v59._object = (void *)0x80000001000D6810;
  v26._object = (void *)0x80000001000D67D0;
  v27._object = (void *)0x80000001000D67F0;
  v26._countAndFlagsBits = 0xD000000000000013;
  v27._countAndFlagsBits = 0xD000000000000013;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)v23, v27, v59);
  UIListContentConfiguration.text.setter();
  sub_10001D360(v41, (uint64_t)&v56);
  uint64_t v28 = swift_allocObject();
  sub_10001CD68(&v56, v28 + 16);
  *(void *)(v28 + 56) = a2;
  *(void *)&long long v56 = 0;
  *((void *)&v56 + 1) = 0xE000000000000000;
  id v29 = a2;
  _StringGuts.grow(_:)(20);
  uint64_t v30 = _typeName(_:qualified:)();
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  *(void *)&long long v56 = v30;
  *((void *)&v56 + 1) = v32;
  v33._countAndFlagsBits = 0xD000000000000012;
  v33._object = (void *)0x80000001000D28E0;
  String.append(_:)(v33);
  uint64_t v34 = v55;
  uint64_t v41 = *((void *)&v56 + 1);
  uint64_t v43 = v56;
  uint64_t v57 = v55;
  v58 = &protocol witness table for UIListContentConfiguration;
  uint64_t v35 = sub_100004F38((uint64_t *)&v56);
  (*(void (**)(uint64_t *, char *, uint64_t))(v18 + 16))(v35, v20, v34);
  sub_100010958(0, &qword_100104AC0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for UICellAccessory();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000CBFD0;
  uint64_t v36 = v42;
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for UICellAccessory.DisplayedState.always(_:), v42);
  uint64_t v37 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v44, 1, 1, v37);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)();
  static UICellAccessory.disclosureIndicator(displayed:options:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v46);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v36);
  uint64_t v38 = type metadata accessor for UIBackgroundConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v47, 1, 1, v38);
  (*(void (**)(char *, void, uint64_t))(v49 + 104))(v48, enum case for CellDeselectionBehavior.default(_:), v50);
  (*(void (**)(char *, void, uint64_t))(v52 + 104))(v51, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v53);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();

  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v20, v55);
}

void sub_100010958(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1000109BC()
{
  id v1 = [v0 traitCollection];
  id v2 = [v1 horizontalSizeClass];

  if ((unint64_t)v2 >= 2)
  {
    if (v2 == (id)2)
    {
      type metadata accessor for SummaryFeedViewController();
      sub_100019DF4(&qword_100106AB0, (void (*)(uint64_t))type metadata accessor for SummaryFeedViewController);
      ProfileButtonDisplaying<>.updateProfileButtonForRegularSizeClass()();
      id v10 = [v0 navigationItem];
      [v10 setTitle:0];
    }
  }
  else
  {
    id v3 = [self mainBundle];
    v12._object = (void *)0x80000001000D4C70;
    v4._countAndFlagsBits = 0x7972616D6D7553;
    v4._object = (void *)0xE700000000000000;
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    v12._countAndFlagsBits = 0xD000000000000011;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v12);

    id v6 = [v0 navigationItem];
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v6 setTitle:v7];

    uint64_t v8 = type metadata accessor for SummaryFeedViewController();
    uint64_t v9 = sub_100019DF4(&qword_100106AB0, (void (*)(uint64_t))type metadata accessor for SummaryFeedViewController);
    ProfileButtonDisplaying<>.updateProfileButtonForCompactSizeClass()(v8, v9);
  }
}

uint64_t SummaryPinnedContentDataSource.snapshotDidChange(dataSourceID:snapshot:animated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CompoundSectionedDataSource();
  Swift::String v12 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))method lookup function for CompoundSectionedDataSource();
  v12(a1, a2, a3, a4);
  if (PrimarySecondaryDataSource.identifier.getter() == a1 && v13 == a2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      return result;
    }
  }
  unint64_t v17 = (unint64_t)sub_10001CD80();
  static Logger.pinnedContent.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    v32[0] = v28;
    *(_DWORD *)uint64_t v20 = 136315650;
    uint64_t v21 = _typeName(_:qualified:)();
    uint64_t v31 = sub_100018DA0(v21, v22, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2048;
    uint64_t v29 = v9;
    uint64_t v30 = v8;
    if (v17 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v31 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2080;
    type metadata accessor for FeedItem();
    swift_bridgeObjectRetain();
    uint64_t v24 = Array.description.getter();
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    uint64_t v31 = sub_100018DA0(v24, v26, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%s]: Received updates to pinned content, sending update with %ld items: %s", (uint8_t *)v20, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  swift_beginAccess();
  uint64_t v31 = v17;
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100011014(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v36 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  sub_100020968();
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1 + OBJC_IVAR____TtC6Health16LifecycleManager__preloadPluginsAfterLaunch, v15);
  UserDefault.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (v39 == 1)
  {
    uint64_t v37 = a2;
    static Logger.general.getter();
    os_log_type_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v36 = v5;
      *(_DWORD *)uint64_t v21 = 136446210;
      uint64_t v22 = _typeName(_:qualified:)();
      uint64_t v38 = sub_100018DA0(v22, v23, &v39);
      uint64_t v5 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "[%{public}s] Preloading plugins in a background thread asynchronously", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v13, v4);
    type metadata accessor for FoundationPluginBundleProvider();
    static FoundationPluginBundleProvider.sharedInstance.getter();
    dispatch thunk of PluginBundleProvider.loadAllPlugins()();
    swift_release();
    static Logger.general.getter();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136446210;
      uint64_t v28 = _typeName(_:qualified:)();
      uint64_t v37 = v4;
      uint64_t v38 = sub_100018DA0(v28, v29, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "[%{public}s] Finished preloading plugins", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return ((uint64_t (*)(char *, uint64_t))v24)(v11, v37);
    }
    else
    {

      return ((uint64_t (*)(char *, uint64_t))v24)(v11, v4);
    }
  }
  else
  {
    static Logger.general.getter();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      Swift::String v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)Swift::String v33 = 136446210;
      uint64_t v34 = _typeName(_:qualified:)();
      uint64_t v38 = sub_100018DA0(v34, v35, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "[%{public}s] Skipping preload plugins after app launch", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t sub_1000115B8(char *a1)
{
  char v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(unsigned char *)(result + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_canPresentDeepLinks) = v1;
    sub_100011628();
    return swift_release();
  }
  return result;
}

uint64_t sub_100011628()
{
  char v1 = v0;
  uint64_t v63 = *v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v64 = v2;
  uint64_t v65 = v3;
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v62 = (char *)v58 - v8;
  __chkstk_darwin(v7);
  uint64_t v61 = (char *)v58 - v9;
  sub_1000120A4(0, &qword_100104C38, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  v60 = (char *)v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v58 - v13;
  uint64_t v15 = type metadata accessor for DeepLinkContentKind(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  os_log_type_t v19 = (char *)v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)v58 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  unint64_t v25 = (char *)v58 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)v58 - v26;
  uint64_t v28 = (uint64_t)v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink;
  swift_beginAccess();
  sub_100012108(v28, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_100011EAC((uint64_t)v14, (uint64_t)&qword_100104C38, (uint64_t)type metadata accessor for DeepLinkContentKind, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(void))sub_1000120A4);
    static Logger.view.getter();
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v67 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136446210;
      uint64_t v66 = v63;
      swift_getMetatypeMetadata();
      uint64_t v32 = String.init<A>(describing:)();
      uint64_t v66 = sub_100018DA0(v32, v33, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%{public}s]: No pending deep link to execute", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v65 + 8))(v6, v64);
    goto LABEL_14;
  }
  sub_1000319FC((uint64_t)v14, (uint64_t)v27);
  uint64_t v34 = (uint64_t)v27;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_canPresentDeepLinks) != 1)
  {
    uint64_t v46 = v62;
    static Logger.view.getter();
    sub_100031A60(v34, (uint64_t)v19);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc();
      v60 = (char *)swift_slowAlloc();
      uint64_t v67 = v60;
      *(_DWORD *)uint64_t v49 = 136446466;
      uint64_t v61 = (char *)v34;
      uint64_t v66 = v63;
      swift_getMetatypeMetadata();
      uint64_t v50 = String.init<A>(describing:)();
      uint64_t v66 = sub_100018DA0(v50, v51, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2082;
      sub_100031A60((uint64_t)v19, (uint64_t)v22);
      uint64_t v52 = String.init<A>(describingSensitive:)();
      uint64_t v66 = sub_100018DA0(v52, v53, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002FB04((uint64_t)v19);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "[%{public}s]: deep link is not eligible for presentation %{public}s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v65 + 8))(v62, v64);
      uint64_t v54 = (uint64_t)v61;
    }
    else
    {

      sub_10002FB04((uint64_t)v19);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v46, v64);
      uint64_t v54 = v34;
    }
    sub_10002FB04(v54);
LABEL_14:
    char v56 = 0;
    return v56 & 1;
  }
  unint64_t v35 = v61;
  static Logger.view.getter();
  sub_100031A60(v34, (uint64_t)v25);
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  int v38 = v37;
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v39 = swift_slowAlloc();
    os_log_t v59 = v36;
    uint64_t v40 = v39;
    uint64_t v62 = (char *)swift_slowAlloc();
    uint64_t v67 = v62;
    *(_DWORD *)uint64_t v40 = 136446466;
    v58[1] = v40 + 4;
    uint64_t v66 = v63;
    swift_getMetatypeMetadata();
    uint64_t v41 = String.init<A>(describing:)();
    LODWORD(v63) = v38;
    uint64_t v66 = sub_100018DA0(v41, v42, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2082;
    sub_100031A60((uint64_t)v25, (uint64_t)v22);
    uint64_t v43 = String.init<A>(describingSensitive:)();
    uint64_t v66 = sub_100018DA0(v43, v44, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002FB04((uint64_t)v25);
    os_log_t v45 = v59;
    _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v63, "[%{public}s]: executing pending deep link: %{public}s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v65 + 8))(v61, v64);
  }
  else
  {
    sub_10002FB04((uint64_t)v25);

    (*(void (**)(char *, uint64_t))(v65 + 8))(v35, v64);
  }
  uint64_t v55 = (uint64_t)v60;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v60, 1, 1, v15);
  swift_beginAccess();
  sub_100031AC4(v55, v28);
  swift_endAccess();
  char v56 = sub_10002FD6C(v34);
  sub_10002FB04(v34);
  return v56 & 1;
}

uint64_t sub_100011EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_100011F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_100011F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t, uint64_t, void *))
{
  uint64_t v5 = a4(0, a2, a3, &type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_100011FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_100012044(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1000120A4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_100012108(uint64_t a1, uint64_t a2)
{
  sub_1000120A4(0, &qword_100104C38, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DeepLinkContentKind(uint64_t a1)
{
  return sub_1000172F0(a1, qword_100104BB8);
}

uint64_t sub_1000121BC()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v20 = v1;
    uint64_t v10 = v9;
    uint64_t v21 = swift_slowAlloc();
    *(void *)&long long aBlock = ObjectType;
    *(_DWORD *)uint64_t v10 = 136446466;
    swift_getMetatypeMetadata();
    uint64_t v11 = String.init<A>(describing:)();
    *(void *)&long long aBlock = sub_100018DA0(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2082;
    *(void *)&long long aBlock = sub_100018DA0(0xD00000000000002ELL, 0x80000001000D42B0, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%{public}s]: Lifecycle: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (kTCCServiceMotion)
  {
    id v14 = kTCCServiceMotion;
    uint64_t v24 = ConfigurationIntentResponseCode.rawValue.getter;
    uint64_t v25 = 0;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v23 = sub_10001EDD8;
    *((void *)&v23 + 1) = &unk_1000F7378;
    uint64_t v15 = _Block_copy(&aBlock);
    TCCAccessRequest();
    _Block_release(v15);

    id v16 = [self sharedApplication];
    sub_1000157EC();
    sub_10001E254(0, &qword_1001065F8);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v16 setShortcutItems:isa];

    id v18 = [self currentNotificationCenter];
    id v19 = sub_10000605C();
    [v18 setDelegate:v19];

    type metadata accessor for AppDependencyManager();
    static AppDependencyManager.shared.getter();
    sub_10001E254(0, (unint64_t *)&qword_100106600);
    long long aBlock = 0u;
    long long v23 = 0u;
    uint64_t v24 = 0;
    AppDependencyManager.add<A>(key:dependency:)();

    swift_release();
    sub_10001EB64((uint64_t)&aBlock);
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000125C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthExperienceStore;
  sub_10001D360(v0 + OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthExperienceStore, (uint64_t)v34);
  uint64_t v3 = OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthStore;
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthStore);
  uint64_t v5 = v0 + OBJC_IVAR____TtC6Health20MainTabBarController_pinnedContentManager;
  sub_10001D360(v0 + OBJC_IVAR____TtC6Health20MainTabBarController_pinnedContentManager, (uint64_t)v33);
  id v6 = objc_allocWithZone((Class)type metadata accessor for SummaryFeedViewController());
  id v7 = v4;
  id v8 = sub_10001C6B0((uint64_t)v34, v7, (uint64_t)v33);

  id v9 = [objc_allocWithZone((Class)HKNavigationController) initWithRootViewController:v8];
  id v10 = [v9 navigationBar];
  [v10 setPrefersLargeTitles:1];

  sub_10001D360(v2, (uint64_t)v34);
  uint64_t v11 = *(void **)(v1 + v3);
  sub_10001D360(v5, (uint64_t)v33);
  id v12 = objc_allocWithZone((Class)type metadata accessor for BrowseViewController());
  id v13 = v11;
  uint64_t v32 = (void *)BrowseViewController.init(healthExperienceStore:healthStore:pinnedContentManager:)();
  id v14 = [objc_allocWithZone((Class)HKNavigationController) initWithRootViewController:v32];
  id v15 = [v14 navigationBar];
  [v15 setPrefersLargeTitles:1];

  sub_10001D360(v2, (uint64_t)v34);
  id v16 = *(void **)(v1 + v3);
  sub_10001D360(v5, (uint64_t)v33);
  id v17 = objc_allocWithZone((Class)type metadata accessor for SharingOverviewViewController());
  id v18 = v16;
  id v19 = (void *)SharingOverviewViewController.init(healthExperienceStore:healthStore:pinnedContentManager:)();
  id v20 = [objc_allocWithZone((Class)HKNavigationController) initWithRootViewController:v19];
  id v21 = [v20 navigationBar];
  [v21 setPrefersLargeTitles:1];

  sub_10001E918();
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1000CC530;
  *(void *)(v22 + 32) = v9;
  *(void *)(v22 + 40) = v20;
  *(void *)(v22 + 48) = v14;
  v34[0] = v22;
  specialized Array._endMutation()();
  uint64_t v23 = v34[0];
  if (v34[0] >> 62)
  {
    sub_10001E254(0, (unint64_t *)&qword_100108820);
    id v29 = v9;
    id v30 = v20;
    id v31 = v14;
    swift_bridgeObjectRetain();
    uint64_t v27 = _bridgeCocoaArray<A>(_:)();

    swift_bridgeObjectRelease();
  }
  else
  {
    id v24 = v9;
    id v25 = v20;
    id v26 = v14;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_10001E254(0, (unint64_t *)&qword_100108820);

    uint64_t v27 = v23;
  }
  swift_bridgeObjectRelease();

  return v27;
}

void sub_1000128F4()
{
  uint64_t v1 = type metadata accessor for DeepLinkActivityType();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v31[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = (objc_class *)type metadata accessor for SummaryFeedViewController();
  v35.receiver = v0;
  v35.super_class = v5;
  [super viewDidLoad];
  sub_1000109BC();
  id v6 = [self mainBundle];
  v36._object = (void *)0x80000001000D4C70;
  v7._countAndFlagsBits = 0x7972616D6D7553;
  v7._object = (void *)0xE700000000000000;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v36._countAndFlagsBits = 0xD000000000000011;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v36);

  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v4, enum case for DeepLinkActivityType.summary(_:), v1);
  id v9 = (void *)static HAUserActivity.createActivity(title:restorationType:profileIdentifier:eligibleForSearch:eligibleForHandoff:eligibleForPrediction:)();
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  [v0 setUserActivity:v9];

  id v10 = self;
  if ([v10 isAppleInternalInstall])
  {
    unint64_t v11 = (unint64_t)TapToRadarButtonDisplaying.makeTapToRadarButtonIfNeeded()();
    if (v11)
    {
      id v12 = (void *)v11;
      id v13 = [v0 navigationItem];
      [v13 setRightBarButtonItem:v12];
    }
  }
  id v14 = [v10 sharedBehavior];
  if (!v14)
  {
    __break(1u);
    goto LABEL_12;
  }
  id v15 = v14;
  id v16 = [v14 features];

  if (!v16)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unsigned int v17 = [v16 summaryGradient];

  if (v17)
  {
    dispatch thunk of CompoundDataSourceCollectionViewController.dataSource.getter();
    type metadata accessor for SummaryFeedDataSource(0);
    uint64_t v18 = *(void *)(swift_dynamicCastClassUnconditional() + qword_100108D60);
    swift_retain();
    swift_release();
    uint64_t v19 = type metadata accessor for SummaryPinnedContentGradientColorProvider();
    id v20 = (uint64_t *)swift_allocObject();
    id v21 = sub_100009FA8(v18, v20);
    uint64_t v33 = v19;
    uint64_t v34 = sub_100019DF4((unint64_t *)&unk_100106A70, (void (*)(uint64_t))type metadata accessor for SummaryPinnedContentGradientColorProvider);
    *(void *)&long long v32 = v21;
    uint64_t v22 = (uint64_t)v0 + qword_100106908;
    swift_beginAccess();
    swift_retain();
    _s6Health23OpenSleepScheduleIntentVwxx_0(v22);
    sub_10001CD68(&v32, v22);
    swift_endAccess();
    swift_release();
    sub_100019DF4(&qword_100106A58, (void (*)(uint64_t))type metadata accessor for SummaryFeedViewController);
    GradientBackgroundPresenting.configureGradientBackground()();
  }
  id v23 = [v0 collectionView];
  if (!v23) {
    goto LABEL_13;
  }
  id v24 = v23;
  sub_10001E81C(0, (unint64_t *)&qword_100107330, (uint64_t)&type metadata for String, (uint64_t (*)(void, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1000CC0F0;
  *(void *)(v25 + 32) = 0xD000000000000019;
  *(void *)(v25 + 40) = 0x80000001000CE300;
  strcpy((char *)(v25 + 48), "CollectionView");
  *(unsigned char *)(v25 + 63) = -18;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v27 = (id)HKUIJoinStringsForAutomationIdentifier();

  [v24 setAccessibilityIdentifier:v27];
  id v28 = [v0 collectionView];
  if (v28)
  {
    id v29 = v28;
    id v30 = [self clearColor];
    [v29 setBackgroundColor:v30];

    return;
  }
LABEL_14:
  __break(1u);
}

uint64_t sub_100012E34()
{
  uint64_t v1 = v0;
  uint64_t v46 = *v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v44 = *(void *)(v6 - 8);
  uint64_t v45 = v6;
  __chkstk_darwin(v6);
  Swift::String v8 = (void *)((char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v48 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v43 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v47 = (char *)v34 - v12;
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v42 = v13;
  __chkstk_darwin(v13);
  id v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v16);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t result = __chkstk_darwin(v17);
  id v21 = (char *)v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v0[9] & 1) == 0)
  {
    *((unsigned char *)v0 + 72) = 1;
    uint64_t v39 = v19;
    uint64_t v40 = result;
    v34[1] = sub_10001E254(0, (unint64_t *)&qword_100105730);
    static DispatchQoS.background.getter();
    aBlock[0] = &_swiftEmptyArrayStorage;
    uint64_t v38 = v3;
    sub_100019DAC(&qword_1001066F8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    uint64_t v35 = v9;
    os_log_type_t v37 = v5;
    sub_100013598(0, (unint64_t *)&unk_100106F20, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    uint64_t v36 = v2;
    sub_100013B78(&qword_100106700, (unint64_t *)&unk_100106F20, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, void, uint64_t))(v41 + 104))(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v42);
    uint64_t v42 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    uint64_t v22 = v43;
    static DispatchTime.now()();
    *Swift::String v8 = 100;
    uint64_t v24 = v44;
    uint64_t v23 = v45;
    (*(void (**)(void *, void, uint64_t))(v44 + 104))(v8, enum case for DispatchTimeInterval.milliseconds(_:), v45);
    uint64_t v25 = v47;
    + infix(_:_:)();
    (*(void (**)(void *, uint64_t))(v24 + 8))(v8, v23);
    id v26 = *(void (**)(char *, uint64_t))(v48 + 8);
    uint64_t v27 = v35;
    v26(v22, v35);
    uint64_t v28 = swift_allocObject();
    uint64_t v29 = v46;
    *(void *)(v28 + 16) = v1;
    *(void *)(v28 + 24) = v29;
    aBlock[4] = sub_10001FF84;
    aBlock[5] = v28;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100005388;
    aBlock[3] = &unk_1000F8818;
    id v30 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v49 = &_swiftEmptyArrayStorage;
    sub_100019DAC((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100013598(0, (unint64_t *)&qword_100105740, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100013B78((unint64_t *)&qword_100105A10, (unint64_t *)&qword_100105740, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    id v31 = v37;
    uint64_t v32 = v36;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v33 = (void *)v42;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v30);

    (*(void (**)(char *, uint64_t))(v38 + 8))(v31, v32);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v21, v40);
    v26(v25, v27);
    return swift_release();
  }
  return result;
}

void sub_1000134D0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_100013534(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_100013598(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Array();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1000135EC()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v0 - 8);
  uint64_t v25 = v0;
  __chkstk_darwin(v0);
  uint64_t v23 = (char *)v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ProfileGradientView();
  static ProfileGradientView.preloadRenderPipelineStateIfNeeded()();
  if (qword_1001040A8 != -1) {
    swift_once();
  }
  uint64_t v9 = *(void **)(qword_100108D90 + 16);
  v18[1] = sub_10001E254(0, (unint64_t *)&qword_100105730);
  id v10 = v9;
  static DispatchQoS.userInteractive.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_100013EA0(&qword_1001066F8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array;
  sub_100013BC8(0, (unint64_t *)&unk_100106F20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_100013B14(&qword_100106700, (unint64_t *)&unk_100106F20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v20);
  uint64_t v11 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  aBlock[4] = sub_10002010C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = &unk_1000F7A30;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v10;
  static DispatchQoS.unspecified.getter();
  id v26 = &_swiftEmptyArrayStorage;
  sub_100013EA0((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100013BC8(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, v19);
  sub_100013B14((unint64_t *)&qword_100105A10, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  id v15 = v23;
  uint64_t v16 = v25;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v16);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v22);
  return swift_release();
}

uint64_t sub_100013B14(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100013BC8(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100013B78(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100013598(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100013BC8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_100013C2C(void *a1@<X8>)
{
  uint64_t v2 = self;
  id v3 = [v2 sharedBehavior];
  if (!v3)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v4 = v3;
  unsigned int v5 = [v3 isiPad];

  if (!v5) {
    goto LABEL_7;
  }
  id v6 = [v2 sharedBehavior];
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = v6;
  id v8 = [v6 features];

  if (v8)
  {
    unsigned int v9 = [v8 stanley];

    if (v9)
    {
      id v10 = [objc_allocWithZone((Class)type metadata accessor for MainSplitViewController()) init];
      uint64_t v11 = type metadata accessor for MainSplitViewController;
      uint64_t v12 = sub_100013EA0(&qword_100106F00, (void (*)(uint64_t))type metadata accessor for MainSplitViewController);
      uint64_t v13 = sub_100013EA0(&qword_100106F08, (void (*)(uint64_t))type metadata accessor for MainSplitViewController);
      uint64_t v14 = sub_100013EA0((unint64_t *)&unk_100106F10, (void (*)(uint64_t))type metadata accessor for MainSplitViewController);
      id v15 = (unint64_t *)&unk_1001063C0;
LABEL_8:
      uint64_t v16 = sub_100013EA0(v15, (void (*)(uint64_t))v11);
      *a1 = v10;
      a1[1] = v12;
      a1[2] = v13;
      a1[3] = v14;
      a1[4] = v16;
      return;
    }
LABEL_7:
    id v10 = [objc_allocWithZone((Class)type metadata accessor for MainTabBarController()) init];
    uint64_t v11 = type metadata accessor for MainTabBarController;
    uint64_t v12 = sub_100013EA0(&qword_100106EE0, (void (*)(uint64_t))type metadata accessor for MainTabBarController);
    uint64_t v13 = sub_100013EA0(&qword_100106EE8, (void (*)(uint64_t))type metadata accessor for MainTabBarController);
    uint64_t v14 = sub_100013EA0((unint64_t *)&unk_100106EF0, (void (*)(uint64_t))type metadata accessor for MainTabBarController);
    id v15 = (unint64_t *)&qword_1001057C0;
    goto LABEL_8;
  }
LABEL_11:
  __break(1u);
}

uint64_t sub_100013EA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for MainTabBarController()
{
  uint64_t result = qword_1001057B0;
  if (!qword_1001057B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100013F34(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  sub_1000147D8(0, &qword_100106070, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderFooterDataSourceWithLayout, (uint64_t)&protocol witness table for CompoundSectionedDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v27 = v6;
  __chkstk_darwin(v6);
  uint64_t v25 = (char *)&v23 - v7;
  sub_1000147D8(0, &qword_100106078, (uint64_t (*)(uint64_t))&type metadata accessor for MutableArrayDataSourceWithLayout, (uint64_t)&protocol witness table for MutableArrayDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = type metadata accessor for DispatchTime();
  __chkstk_darwin(v13 - 8);
  *(void *)(v3 + qword_100106018) = &_swiftEmptySetSingleton;
  sub_100004D14(0, &qword_100106080, (uint64_t (*)(uint64_t))type metadata accessor for PersonalizedFeedDataSource, sub_10001AE10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for DelayedDataSource);
  uint64_t v28 = a1;
  sub_10001D360(a1, (uint64_t)v29);
  uint64_t v14 = swift_allocObject();
  sub_10001CD68(v29, v14 + 16);
  *(void *)(v14 + 56) = a2;
  id v24 = a2;
  swift_retain();
  static DispatchTime.now()();
  *(void *)(v3 + qword_100106008) = DelayedDataSource.__allocating_init(delay:dataSource:)();
  type metadata accessor for MutableArrayDataSourceWithLayout();
  sub_100015038(0, (unint64_t *)&qword_100104FC0, (uint64_t (*)(uint64_t))sub_100033CC4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v15 = swift_allocObject();
  long long v23 = xmmword_1000CBFD0;
  *(_OWORD *)(v15 + 16) = xmmword_1000CBFD0;
  sub_100015038(0, (unint64_t *)&qword_100104860, (uint64_t (*)(uint64_t))sub_10001AE44, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = v23;
  *(void *)(v16 + 56) = type metadata accessor for ContentConfigurationItem();
  *(void *)(v16 + 64) = sub_10001AD80(&qword_100104870, (void (*)(uint64_t))&type metadata accessor for ContentConfigurationItem);
  uint64_t v17 = sub_100004F38((uint64_t *)(v16 + 32));
  sub_100014844((uint64_t)v17);
  *(void *)(v15 + 32) = v16;
  MutableArrayDataSourceWithLayout.__allocating_init(_:collapseEmptySections:layoutConstructor:)();
  char v18 = static FeatureStatusSupport.isHealthChecklistAvailable()();
  uint64_t v19 = *(void (**)(char *, void, uint64_t))(v10 + 104);
  if (v18)
  {
    v19(v12, enum case for HideableDataSource.Visibility.visible<A>(_:), v9);
    uint64_t v20 = enum case for HideableDataSource.Visibility.hidden<A>(_:);
  }
  else
  {
    uint64_t v20 = enum case for HideableDataSource.Visibility.hidden<A>(_:);
    v19(v12, enum case for HideableDataSource.Visibility.hidden<A>(_:), v9);
  }
  sub_1000147D8(0, &qword_100106090, (uint64_t (*)(uint64_t))&type metadata accessor for MutableArrayDataSourceWithLayout, (uint64_t)&protocol witness table for MutableArrayDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
  swift_allocObject();
  swift_retain();
  *(void *)(v3 + qword_100106010) = HideableDataSource.init(source:visibility:)();
  sub_100020570();
  sub_10001C614();
  sub_1000204D0();
  sub_100020440();
  type metadata accessor for HeaderFooterDataSourceWithLayout();
  swift_allocObject();
  swift_retain();
  swift_retain();
  HeaderFooterDataSourceWithLayout.init(headerDataSource:mainDataSource:footerDataSource:)();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v25, v20, v27);
  swift_retain();
  uint64_t v21 = HideableDataSource.init(source:visibility:)();
  swift_retain();
  sub_10000794C();
  swift_release();
  swift_release();

  swift_release();
  _s6Health23OpenSleepScheduleIntentVwxx_0(v28);
  return v21;
}

uint64_t sub_100014514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1000147D8(0, &qword_100106070, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderFooterDataSourceWithLayout, (uint64_t)&protocol witness table for CompoundSectionedDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v21 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - v8;
  sub_1000202CC();
  uint64_t v20 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  static NSDiffableDataSourceSnapshot._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000147D8(0, &qword_1001060C0, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderFooterDataSourceWithLayout, (uint64_t)&protocol witness table for CompoundSectionedDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
  uint64_t v17 = (void (*)(uint64_t, uint64_t, char *, uint64_t))method lookup function for HideableDataSource();
  swift_retain();
  v17(v14, v16, v13, a5);
  dispatch thunk of HideableDataSource.wrappedDataSource.getter();
  HeaderFooterDataSourceWithLayout.mainDataSource.getter();
  swift_release();
  swift_getObjectType();
  LOBYTE(a5) = SnapshotDataSource.isEmpty.getter();
  swift_unknownObjectRelease();
  char v18 = (unsigned int *)&enum case for HideableDataSource.Visibility.hidden<A>(_:);
  if ((a5 & 1) == 0) {
    char v18 = (unsigned int *)&enum case for HideableDataSource.Visibility.visible<A>(_:);
  }
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *v18, v21);
  dispatch thunk of HideableDataSource.visibility.setter();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v20);
}

void sub_1000147D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_100014844@<X0>(uint64_t a1@<X8>)
{
  uint64_t v52 = a1;
  uint64_t v1 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v50 = *(void *)(v1 - 8);
  uint64_t v51 = v1;
  __chkstk_darwin(v1);
  uint64_t v49 = (char *)v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v47 = *(void *)(v3 - 8);
  uint64_t v48 = v3;
  __chkstk_darwin(v3);
  uint64_t v46 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015038(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5 - 8);
  uint64_t v45 = (char *)v36 - v6;
  sub_100015038(0, &qword_100104AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v7 - 8);
  uint64_t v42 = (char *)v36 - v8;
  uint64_t v9 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions();
  uint64_t v43 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for UICellAccessory.DisplayedState();
  uint64_t v12 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for UIListContentConfiguration();
  uint64_t v15 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v17 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIListContentConfiguration.cell()();
  type metadata accessor for DiffableCollectionViewAdaptor();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v19 = self;
  id v20 = [v19 bundleForClass:ObjCClassFromMetadata];
  NSString v21 = String._bridgeToObjectiveC()();
  uint64_t v22 = self;
  id v39 = v20;
  id v23 = [v22 imageNamed:v21 inBundle:v20];

  UIListContentConfiguration.image.setter();
  type metadata accessor for GetMoreFromHealthDataSource();
  v38.super.Class isa = (Class)[v19 bundleForClass:swift_getObjCClassFromMetadata()];
  v24._countAndFlagsBits = 0xD000000000000010;
  v57._countAndFlagsBits = 0xD000000000000033;
  v57._object = (void *)0x80000001000D3870;
  v25._object = (void *)0x80000001000D3830;
  v24._object = (void *)0x80000001000D3850;
  v25._countAndFlagsBits = 0xD000000000000015;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, v38, v24, v57);
  UIListContentConfiguration.text.setter();
  uint64_t v53 = 0;
  unint64_t v54 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  uint64_t v26 = _typeName(_:qualified:)();
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  uint64_t v53 = v26;
  unint64_t v54 = v28;
  v29._countAndFlagsBits = 0xD000000000000014;
  v29._object = (void *)0x80000001000D38B0;
  String.append(_:)(v29);
  uint64_t v41 = v53;
  v36[1] = v54;
  uint64_t v30 = v37;
  uint64_t v55 = v37;
  char v56 = &protocol witness table for UIListContentConfiguration;
  id v31 = sub_100004F38(&v53);
  (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 16))(v31, v17, v30);
  sub_100015038(0, &qword_100104AC0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for UICellAccessory();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000CBFD0;
  uint64_t v32 = v40;
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for UICellAccessory.DisplayedState.always(_:), v40);
  uint64_t v33 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v42, 1, 1, v33);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)();
  static UICellAccessory.disclosureIndicator(displayed:options:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v44);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v32);
  uint64_t v34 = type metadata accessor for UIBackgroundConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v45, 1, 1, v34);
  (*(void (**)(char *, void, uint64_t))(v47 + 104))(v46, enum case for CellDeselectionBehavior.default(_:), v48);
  (*(void (**)(char *, void, uint64_t))(v50 + 104))(v49, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v51);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();

  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v30);
}

void sub_100015038(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t SummaryPinnedContentDataSource.init(healthExperienceStore:healthStore:pinnedContentManager:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher;
  v32[0] = &_swiftEmptyArrayStorage;
  sub_10001F22C();
  swift_allocObject();
  swift_retain();
  *(void *)(v3 + v7) = CurrentValueSubject.init(_:)();
  *(void *)(v3 + qword_1001058A0) = 0;
  uint64_t v8 = sub_10001CB20((uint64_t)a1, a3);
  type metadata accessor for ListLayoutConfiguration();
  swift_allocBox();
  static ListLayoutConfiguration.withHeader.getter();
  ListLayoutConfiguration.interGroupSpacing.setter();
  uint64_t v9 = (void (*)(void *, void))ListLayoutConfiguration.additionalContentInsets.modify();
  *(void *)(v10 + 16) = 0;
  v9(v32, 0);
  type metadata accessor for MutableArrayDataSourceWithLayout();
  sub_10001E974();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1000CBFD0;
  *(void *)(v11 + 32) = &_swiftEmptyArrayStorage;
  swift_retain();
  MutableArrayDataSourceWithLayout.__allocating_init(_:collapseEmptySections:layoutConstructor:)();
  uint64_t v32[3] = type metadata accessor for HeaderItem();
  v32[4] = sub_10001889C((unint64_t *)&unk_100105760, (void (*)(uint64_t))&type metadata accessor for HeaderItem);
  v32[0] = v8;
  swift_retain();
  uint64_t v30 = SnapshotDataSource.withSupplementaryItem(_:)();
  swift_release();
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v32);
  type metadata accessor for DownloadingDataDataSource(0);
  swift_allocObject();
  uint64_t v12 = qword_100103FF0;
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  EmptyStateCollectionViewCellItem.init(title:showSpinner:)();
  swift_release();
  MutableArrayDataSourceWithLayout.init(arrangedSections:collapseEmptySections:layoutSectionProvider:)();
  sub_10001D360(a3, (uint64_t)v32);
  sub_1000190DC(a1, a1[3]);
  dispatch thunk of HealthExperienceStore.viewContext.getter();
  id v13 = objc_allocWithZone((Class)type metadata accessor for PinnedContentDataSource());
  uint64_t v14 = (void *)PinnedContentDataSource.init(pinnedContentManager:context:)();
  sub_1000047EC();
  swift_allocObject();
  swift_retain();
  id v28 = v14;
  *(void *)(v4 + direct field offset for SummaryPinnedContentDataSource.pinnedContentWithCloudStateDataSource) = PrimarySecondaryDataSource.init(primaryDataSource:secondaryDataSource:)();
  sub_100009AD0();
  sub_100003F08();
  swift_allocObject();
  uint64_t v29 = a3;
  swift_retain();
  swift_retain();
  uint64_t v15 = PrimarySecondaryDataSource.init(primaryDataSource:secondaryDataSource:)();
  uint64_t v16 = direct field offset for SummaryPinnedContentDataSource.cloudStateOrPinnedContentOrEmptyStateDataSource;
  *(void *)(v4 + direct field offset for SummaryPinnedContentDataSource.cloudStateOrPinnedContentOrEmptyStateDataSource) = v15;
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1000CBFD0;
  sub_100003DD8(0, (unint64_t *)&qword_100104860, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1000CBFD0;
  *(void *)(v18 + 56) = type metadata accessor for ContentConfigurationItem();
  *(void *)(v18 + 64) = sub_10001889C(&qword_100104870, (void (*)(uint64_t))&type metadata accessor for ContentConfigurationItem);
  uint64_t v19 = sub_100004F38((uint64_t *)(v18 + 32));
  sub_10001D464((uint64_t)a1, a2, (uint64_t)v19);
  *(void *)(v17 + 32) = v18;
  MutableArrayDataSourceWithLayout.__allocating_init(_:collapseEmptySections:layoutConstructor:)();
  uint64_t v20 = SnapshotDataSource.withCellRegistration(_:)();
  swift_release();
  sub_10001E9E8();
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1000CD120;
  uint64_t v22 = sub_100015740(&qword_1001058C8, &qword_1001058D0, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for Supplementary);
  *(void *)(v21 + 32) = v30;
  *(void *)(v21 + 40) = v22;
  uint64_t v23 = *(void *)(v4 + v16);
  uint64_t v24 = sub_10001889C(&qword_1001058D8, (void (*)(uint64_t))sub_100003F08);
  *(void *)(v21 + 48) = v23;
  *(void *)(v21 + 56) = v24;
  uint64_t v25 = sub_100015740(&qword_1001058E0, (unint64_t *)&qword_1001058E8, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for CellRegistering);
  *(void *)(v21 + 64) = v20;
  *(void *)(v21 + 72) = v25;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v26 = CompoundSectionedDataSource.init(_:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  sub_10001CD80();
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  _s6Health23OpenSleepScheduleIntentVwxx_0(v29);
  swift_release();
  swift_bridgeObjectRelease();
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)a1);
  return v26;
}

uint64_t sub_100015740(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void *))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100015784(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100015784(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void *))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for MutableArrayDataSourceWithLayout();
    unint64_t v7 = a3(a1, v6, &protocol witness table for MutableArrayDataSource);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

id sub_1000157EC()
{
  uint64_t v0 = type metadata accessor for DeepLinkActivityType();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v50 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v49 = (char *)&v49 - v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v55 = (char *)&v49 - v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v49 - v8;
  id result = [self sharedBehavior];
  if (result)
  {
    uint64_t v11 = result;
    unsigned int v52 = [result isiPad];

    sub_10001E81C(0, (unint64_t *)&qword_1001057E0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(void, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_1000CD1C0;
    uint64_t v12 = v1 + 104;
    id v13 = *(void (**)(char *, void, uint64_t))(v1 + 104);
    v13(v9, enum case for DeepLinkActivityType.summary(_:), v0);
    DeepLinkActivityType.userActivityType.getter();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v1 + 8);
    v14(v9, v0);
    NSString v15 = String._bridgeToObjectiveC()();
    uint64_t v16 = self;
    id v17 = [v16 iconWithSystemImageName:v15];

    id v18 = objc_allocWithZone((Class)UIApplicationShortcutItem);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v20 = String._bridgeToObjectiveC()();
    id v21 = [v18 initWithType:v19 localizedTitle:v20 localizedSubtitle:0 icon:v17 userInfo:0];

    uint64_t v22 = v51;
    *(void *)(v51 + 32) = v21;
    uint64_t v23 = v55;
    uint64_t v53 = v12;
    unint64_t v54 = v13;
    v13(v55, enum case for DeepLinkActivityType.sharingOverview(_:), v0);
    DeepLinkActivityType.userActivityType.getter();
    uint64_t v24 = v0;
    uint64_t v55 = (char *)v14;
    v14(v23, v0);
    NSString v25 = String._bridgeToObjectiveC()();
    id v26 = [v16 iconWithSystemImageName:v25];

    id v27 = objc_allocWithZone((Class)UIApplicationShortcutItem);
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v29 = String._bridgeToObjectiveC()();
    id v30 = [v27 initWithType:v28 localizedTitle:v29 localizedSubtitle:0 icon:v26 userInfo:0];

    *(void *)(v22 + 40) = v30;
    uint64_t v56 = v22;
    specialized Array._endMutation()();
    if ((v52 & 1) == 0)
    {
      id v31 = v49;
      v54(v49, enum case for DeepLinkActivityType.browse(_:), v24);
      DeepLinkActivityType.userActivityType.getter();
      ((void (*)(char *, uint64_t))v55)(v31, v24);
      NSString v32 = String._bridgeToObjectiveC()();
      id v33 = [v16 iconWithSystemImageName:v32];

      id v34 = objc_allocWithZone((Class)UIApplicationShortcutItem);
      NSString v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v36 = String._bridgeToObjectiveC()();
      id v37 = [v34 initWithType:v35 localizedTitle:v36 localizedSubtitle:0 icon:v33 userInfo:0];

      id v38 = v37;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    id v39 = [self shared];
    unsigned __int8 v40 = [v39 isMedicalIDAvailable];

    if (v40)
    {
      uint64_t v41 = v50;
      v54(v50, enum case for DeepLinkActivityType.medicalID(_:), v24);
      DeepLinkActivityType.userActivityType.getter();
      ((void (*)(char *, uint64_t))v55)(v41, v24);
      NSString v42 = String._bridgeToObjectiveC()();
      id v43 = [v16 iconWithSystemImageName:v42];

      id v44 = objc_allocWithZone((Class)UIApplicationShortcutItem);
      NSString v45 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v46 = String._bridgeToObjectiveC()();
      id v47 = [v44 initWithType:v45 localizedTitle:v46 localizedSubtitle:0 icon:v43 userInfo:0];

      id v48 = v47;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    return (id)v56;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100015EF0(void (*a1)(char *, uint64_t), void *a2, void *a3)
{
  uint64_t v4 = v3;
  v149 = a1;
  uint64_t ObjectType = swift_getObjectType();
  sub_100017378(0, &qword_100106E60, (uint64_t (*)(void, void *))&type metadata accessor for Published.Publisher);
  uint64_t v141 = v8;
  uint64_t v140 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v138 = (char *)&v131 - v9;
  sub_10001F3FC();
  uint64_t v11 = v10;
  uint64_t v142 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v139 = (char *)&v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  v147 = (char *)&v131 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  v135 = (char *)&v131 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v137 = (char *)&v131 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v144 = (char *)&v131 - v22;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v131 - v23;
  static Logger.general.getter();
  NSString v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  v145 = a3;
  id v136 = a2;
  uint64_t v143 = v11;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v148 = v4;
    uint64_t v29 = v28;
    uint64_t v156 = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136446466;
    *(void *)&long long v153 = ObjectType;
    swift_getMetatypeMetadata();
    uint64_t v146 = ObjectType;
    uint64_t v30 = String.init<A>(describing:)();
    *(void *)&long long v153 = sub_100018DA0(v30, v31, &v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2082;
    *(void *)&long long v153 = sub_100018DA0(0xD00000000000001FLL, 0x80000001000D50E0, &v156);
    uint64_t ObjectType = v146;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "[%{public}s]: Lifecycle: %{public}s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v148;
    swift_slowDealloc();
  }

  NSString v32 = *(void (**)(char *, uint64_t))(v14 + 8);
  v32(v24, v13);
  self;
  id v33 = v149;
  uint64_t v34 = swift_dynamicCastObjCClass();
  if (v34)
  {
    uint64_t v35 = v34;
    NSString v36 = self;
    id v37 = v33;
    id v38 = [v36 sharedApplication];
    unsigned int v39 = [v38 isProtectedDataAvailable];

    if (v39)
    {
      v149 = v32;
      sub_1000135EC();
      if (qword_1001040A8 != -1) {
        swift_once();
      }
      sub_10000FE84();
      sub_10000F540();
      sub_10001E254(0, &qword_100106E78);
      id v40 = [(id)swift_getObjCClassFromMetadata() appearance];
      id v41 = [self systemGroupedBackgroundColor];
      [v40 setBackgroundColor:v41];

      id v42 = [objc_allocWithZone((Class)UIWindow) initWithWindowScene:v35];
      uint64_t v43 = OBJC_IVAR____TtC6Health13SceneDelegate_window;
      id v44 = *(void **)(v4 + OBJC_IVAR____TtC6Health13SceneDelegate_window);
      *(void *)(v4 + OBJC_IVAR____TtC6Health13SceneDelegate_window) = v42;

      sub_100013C2C(&v153);
      NSString v45 = v155;
      long long v46 = v154;
      id v47 = (uint64_t *)(v4 + OBJC_IVAR____TtC6Health13SceneDelegate_rootViewController);
      id v48 = *(void **)(v4 + OBJC_IVAR____TtC6Health13SceneDelegate_rootViewController);
      *(_OWORD *)id v47 = v153;
      *((_OWORD *)v47 + 1) = v46;
      v47[4] = (uint64_t)v45;

      uint64_t v49 = *(void **)(v4 + v43);
      if (v49) {
        [v49 setRootViewController:*v47];
      }
      uint64_t v146 = ObjectType;
      v147 = v37;
      uint64_t v131 = v14;
      uint64_t v148 = v4;
      uint64_t v132 = v13;
      uint64_t v50 = (void *)*v47;
      if (!*v47)
      {
        __break(1u);
        goto LABEL_46;
      }
      uint64_t v51 = type metadata accessor for AppDeepLinkHandler(0);
      uint64_t v52 = swift_allocObject();
      uint64_t v53 = v52 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink;
      uint64_t v54 = type metadata accessor for DeepLinkContentKind(0);
      uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56);
      long long v134 = *(_OWORD *)(v47 + 1);
      long long v133 = *(_OWORD *)(v47 + 3);
      v55(v53, 1, 1, v54);
      *(void *)(v52 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_canPresentDeepLinksCancellable) = 0;
      sub_10001E254(0, (unint64_t *)&unk_100106E80);
      id v56 = v50;
      static NSUserDefaults.healthAppShared.getter();
      LOBYTE(v153) = 0;
      UserDefault.init(key:userDefaults:fallbackValue:isAppleInternalOnly:)();
      uint64_t v57 = v52 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController;
      *(void *)uint64_t v57 = v56;
      *(_OWORD *)(v57 + 8) = v134;
      *(_OWORD *)(v57 + 24) = v133;
      *(unsigned char *)(v52 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_canPresentDeepLinks) = 1;
      uint64_t v58 = OBJC_IVAR____TtC6Health13SceneDelegate_deepLinkHandler;
      uint64_t v59 = v148;
      *(void *)(v148 + OBJC_IVAR____TtC6Health13SceneDelegate_deepLinkHandler) = v52;
      swift_release();
      uint64_t v60 = *(void *)(v59 + v58);
      if (v60)
      {
        swift_retain();
        sub_1000173C8();
        swift_beginAccess();
        sub_100017378(0, (unint64_t *)&qword_100105D08, (uint64_t (*)(void, void *))&type metadata accessor for Published);
        uint64_t v61 = v138;
        Published.projectedValue.getter();
        swift_endAccess();
        sub_10001F088();
        uint64_t v62 = v139;
        uint64_t v63 = v141;
        Publisher.map<A>(_:)();
        (*(void (**)(char *, uint64_t))(v140 + 8))(v61, v63);
        sub_100013EA0((unint64_t *)&unk_100106E90, (void (*)(uint64_t))sub_10001F3FC);
        uint64_t v64 = v143;
        uint64_t v65 = Publisher.eraseToAnyPublisher()();
        (*(void (**)(char *, uint64_t))(v142 + 8))(v62, v64);
        swift_release();
        uint64_t v66 = OBJC_IVAR____TtC6Health18AppDeepLinkHandler_canPresentDeepLinksCancellable;
        if (*(void *)(v60 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_canPresentDeepLinksCancellable))
        {
          swift_retain();
          AnyCancellable.cancel()();
          swift_release();
        }
        *(void *)&long long v153 = v65;
        swift_allocObject();
        swift_weakInit();
        sub_10001F2C4();
        sub_100013EA0(&qword_100106EA0, (void (*)(uint64_t))sub_10001F2C4);
        uint64_t v67 = Publisher<>.sink(receiveValue:)();
        swift_release();
        *(void *)(v60 + v66) = v67;
        swift_release();
        swift_release();
        swift_release();
        uint64_t v59 = v148;
      }
      [*(id *)(v59 + v43) makeKeyAndVisible:v131];
      uint64_t v68 = sub_1000173C8();
      v69 = (void *)*v47;
      uint64_t v70 = *(void *)(v59 + v58);
      if (v70)
      {
        *((void *)&v154 + 1) = v51;
        v155 = &off_1000F5988;
        *(void *)&long long v153 = v70;
        uint64_t v72 = v144;
        uint64_t v71 = v145;
        if (v69)
        {
LABEL_16:
          swift_retain();
          id v73 = v69;
          if (sub_10000B28C())
          {
            swift_getKeyPath();
            swift_getKeyPath();
            LOBYTE(v156) = 1;
            swift_retain();
            static Published.subscript.setter();
            uint64_t v74 = swift_allocObject();
            *(void *)(v74 + 16) = v68;
            *(void *)(v74 + 24) = v73;
            id v75 = v73;
            swift_retain();
            sub_10008C528(v75, (uint64_t)&v153, (uint64_t)sub_10007D524, v74);
          }
          else
          {
            uint64_t v82 = swift_allocObject();
            swift_weakInit();
            uint64_t v83 = swift_allocObject();
            *(void *)(v83 + 16) = v82;
            *(void *)(v83 + 24) = v73;
            id v75 = v73;
            swift_retain();
            sub_10000A59C(v75, (void (*)(uint64_t))sub_100020054, v83);
            swift_release();
          }
          swift_release();
          swift_release();

LABEL_25:
          sub_10001FC00((uint64_t)&v153);
          id v84 = [v71 shortcutItem];
          if (v84)
          {
            v85 = v84;
            static Logger.general.getter();
            id v86 = v85;
            v87 = Logger.logObject.getter();
            os_log_type_t v88 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v87, v88))
            {
              uint64_t v89 = swift_slowAlloc();
              uint64_t v143 = swift_slowAlloc();
              uint64_t v156 = v143;
              *(_DWORD *)uint64_t v89 = 136446466;
              *(void *)&long long v153 = v146;
              swift_getMetatypeMetadata();
              uint64_t v90 = String.init<A>(describing:)();
              *(void *)&long long v153 = sub_100018DA0(v90, v91, &v156);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v89 + 12) = 2082;
              uint64_t v146 = v89 + 14;
              id v92 = v86;
              id v93 = v86;
              id v94 = [v92 description];
              uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v97 = v96;

              id v86 = v93;
              *(void *)&long long v153 = sub_100018DA0(v95, v97, &v156);
              uint64_t v71 = v145;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v87, v88, "[%{public}s]: performing shortcut item from connectionOptions: %{public}s", (uint8_t *)v89, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              v98 = v144;
            }
            else
            {

              v98 = v72;
            }
            v149(v98, v132);
            sub_10007C2DC(v86);
          }
          else
          {
            id v99 = [v71 userActivities];
            sub_10001E254(0, &qword_1001065D0);
            sub_100017328(&qword_100106EB8, &qword_1001065D0);
            uint64_t v100 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

            v101 = (void *)sub_10001EDB8(v100);
            swift_bridgeObjectRelease();
            if (v101)
            {
              v102 = v137;
              static Logger.general.getter();
              id v86 = v101;
              v103 = Logger.logObject.getter();
              os_log_type_t v104 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v103, v104))
              {
                uint64_t v105 = swift_slowAlloc();
                uint64_t v156 = swift_slowAlloc();
                *(_DWORD *)uint64_t v105 = 136446466;
                *(void *)&long long v153 = v146;
                swift_getMetatypeMetadata();
                uint64_t v106 = String.init<A>(describing:)();
                *(void *)&long long v153 = sub_100018DA0(v106, v107, &v156);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v105 + 12) = 2080;
                *(void *)&long long v153 = v86;
                id v108 = v86;
                uint64_t v109 = String.init<A>(reflecting:)();
                *(void *)&long long v153 = sub_100018DA0(v109, v110, &v156);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v103, v104, "[%{public}s]: continuing userActivity from connectionOptions: %s", (uint8_t *)v105, 0x16u);
                swift_arrayDestroy();
                uint64_t v71 = v145;
                swift_slowDealloc();
                swift_slowDealloc();

                v111 = v137;
              }
              else
              {

                v111 = v102;
              }
              v149(v111, v132);
              v124 = v86;
              int v125 = 2;
            }
            else
            {
              id v112 = [v136 stateRestorationActivity];
              if (!v112) {
                goto LABEL_42;
              }
              v113 = v112;
              v114 = v135;
              static Logger.general.getter();
              id v86 = v113;
              v115 = Logger.logObject.getter();
              os_log_type_t v116 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v115, v116))
              {
                uint64_t v117 = swift_slowAlloc();
                *(void *)&long long v153 = swift_slowAlloc();
                *(_DWORD *)uint64_t v117 = 136446466;
                uint64_t v118 = sub_10007BDE8();
                uint64_t v156 = sub_100018DA0(v118, v119, (uint64_t *)&v153);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v117 + 12) = 2080;
                uint64_t v156 = (uint64_t)v86;
                id v120 = v86;
                uint64_t v121 = String.init<A>(reflecting:)();
                uint64_t v156 = sub_100018DA0(v121, v122, (uint64_t *)&v153);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v115, v116, "[%{public}s]: restoring app from state restoration activity: %s", (uint8_t *)v117, 0x16u);
                swift_arrayDestroy();
                uint64_t v71 = v145;
                swift_slowDealloc();
                swift_slowDealloc();

                v123 = v135;
              }
              else
              {

                v123 = v114;
              }
              v149(v123, v132);
              v124 = v86;
              int v125 = 0;
            }
            sub_10007BF08(v124, v125);
          }

LABEL_42:
          id v126 = [v71 URLContexts];
          sub_10001E254(0, &qword_100106EC0);
          sub_100017328(&qword_100106EC8, &qword_100106EC0);
          uint64_t v127 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          sub_1000053CC(v127);
          swift_bridgeObjectRelease();
          sub_100006F78();
          v128 = (void *)*v47;
          if (*v47)
          {
            uint64_t v150 = *v47;
            long long v129 = *(_OWORD *)(v47 + 3);
            long long v151 = *(_OWORD *)(v47 + 1);
            long long v152 = v129;
            id v130 = v128;
            dispatch thunk of HealthAppAnalyticsManager.submitLaunchInteraction(using:)();

            swift_release();
            return;
          }
LABEL_46:
          __break(1u);
          return;
        }
      }
      else
      {
        v155 = 0;
        long long v153 = 0u;
        long long v154 = 0u;
        uint64_t v72 = v144;
        uint64_t v71 = v145;
        if (v69) {
          goto LABEL_16;
        }
      }
      swift_retain();
      swift_release();
      goto LABEL_25;
    }
    uint64_t v76 = v147;
    static Logger.general.getter();
    uint64_t v77 = Logger.logObject.getter();
    int v78 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v77, (os_log_type_t)v78))
    {
      uint64_t v79 = swift_slowAlloc();
      uint64_t v156 = swift_slowAlloc();
      *(_DWORD *)uint64_t v79 = 136446466;
      v149 = v32;
      *(void *)&long long v153 = ObjectType;
      swift_getMetatypeMetadata();
      uint64_t v80 = String.init<A>(describing:)();
      *(void *)&long long v153 = sub_100018DA0(v80, v81, &v156);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v79 + 12) = 2082;
      *(void *)&long long v153 = sub_100018DA0(0xD00000000000001FLL, 0x80000001000D50E0, &v156);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v78, "[%{public}s]: %{public}s isProtectedDataAvailable is false. Ending early!", (uint8_t *)v79, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v149(v147, v13);
    }
    else
    {

      v32(v76, v13);
    }
  }
}

uint64_t sub_1000172F0(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100017328(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001E254(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100017378(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for Bool);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1000173C8()
{
  uint64_t v1 = OBJC_IVAR____TtC6Health13SceneDelegate____lazy_storage___introFlowManager;
  if (*(void *)(v0 + OBJC_IVAR____TtC6Health13SceneDelegate____lazy_storage___introFlowManager))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC6Health13SceneDelegate____lazy_storage___introFlowManager);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for HealthWelcomeFlowSignalProvider();
    swift_allocObject();
    uint64_t v4 = HealthWelcomeFlowSignalProvider.init()();
    type metadata accessor for IntroFlowManager();
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = 0;
    Published.init(initialValue:)();
    uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC6Health16IntroFlowManager_healthWelcomeFlowSignalProvider);
    *uint64_t v5 = v4;
    v5[1] = (uint64_t)&protocol witness table for HealthWelcomeFlowSignalProvider;
    type metadata accessor for HealthAppNotificationManager();
    *(void *)(v2 + OBJC_IVAR____TtC6Health16IntroFlowManager_healthAppNotificationManager) = HealthAppNotificationManager.__allocating_init()();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1000174C0(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  sub_100020814(0);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v129 = (uint64_t)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v128 = (char *)&v114 - v15;
  sub_10001E6EC();
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v121 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  int v125 = (char *)&v114 - v19;
  uint64_t v20 = type metadata accessor for CloudSyncRestoreState();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v122 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001881C(0, &qword_100107A10, (uint64_t (*)(uint64_t))sub_10001C5CC, (uint64_t (*)(void))sub_10001C614, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v138 = v23;
  uint64_t v143 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  v139 = (char *)&v114 - v24;
  uint64_t v25 = type metadata accessor for DispatchTime();
  __chkstk_darwin(v25 - 8);
  v137 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001881C(0, &qword_1001079D8, (uint64_t (*)(uint64_t))sub_10001C444, sub_10001C500, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v134 = *(void *)(v27 - 8);
  uint64_t v135 = v27;
  uint64_t v28 = __chkstk_darwin(v27);
  id v120 = (char *)&v114 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v123 = (char *)&v114 - v30;
  sub_10001881C(0, &qword_1001079C8, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, sub_10001C410, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v133 = v31;
  uint64_t v136 = *(void *)(v31 - 8);
  uint64_t v32 = __chkstk_darwin(v31);
  unint64_t v119 = (char *)&v114 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v132 = (char *)&v114 - v34;
  uint64_t v130 = v12;
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  uint64_t v131 = v11;
  v35(v5 + qword_1001078A0, 1, 1, v11);
  uint64_t v126 = v21;
  NSString v36 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56);
  uint64_t v127 = v20;
  uint64_t v118 = v21 + 56;
  uint64_t v117 = v36;
  v36(v5 + qword_1001078A8, 1, 1, v20);
  sub_10001D360((uint64_t)a1, v5 + qword_1001078E8);
  *(void *)(v5 + qword_1001078F0) = a2;
  uint64_t v140 = a3;
  sub_10001D360(a3, v5 + qword_1001078F8);
  id v37 = self;
  id v38 = a2;
  swift_retain();
  id v39 = [v37 standardUserDefaults];
  uint64_t v147 = type metadata accessor for DefaultCloudSyncStateStore();
  uint64_t v148 = &protocol witness table for DefaultCloudSyncStateStore;
  sub_100004F38((uint64_t *)&v146);
  DefaultCloudSyncStateStore.init(userDefaults:)();
  id v40 = objc_allocWithZone((Class)type metadata accessor for CloudSyncStateObserver());
  *(void *)(v5 + qword_1001078B0) = CloudSyncStateObserver.init(healthStore:store:)();
  v144 = a4;
  sub_100009594(v38, a1, a4);
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  NSString v45 = (void *)(v5 + qword_1001078B8);
  *NSString v45 = v41;
  v45[1] = v43;
  swift_unknownObjectRetain();
  long long v46 = sub_100018B18(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  unint64_t v48 = *((void *)v46 + 2);
  unint64_t v47 = *((void *)v46 + 3);
  if (v48 >= v47 >> 1) {
    long long v46 = sub_100018B18((char *)(v47 > 1), v48 + 1, 1, v46);
  }
  *((void *)v46 + 2) = v48 + 1;
  uint64_t v49 = &v46[16 * v48];
  *((void *)v49 + 4) = v42;
  *((void *)v49 + 5) = v44;
  sub_10001D360((uint64_t)a1, (uint64_t)&v146);
  sub_10001D360(v140, (uint64_t)v145);
  type metadata accessor for SummaryPinnedContentDataSource(0);
  swift_allocObject();
  id v50 = v38;
  uint64_t v51 = SummaryPinnedContentDataSource.init(healthExperienceStore:healthStore:pinnedContentManager:)(&v146, v50, (uint64_t)v145);
  *(void *)(v5 + qword_100108D60) = v51;
  unint64_t v52 = *((void *)v46 + 2);
  unint64_t v53 = *((void *)v46 + 3);
  swift_retain();
  if (v52 >= v53 >> 1) {
    long long v46 = sub_100018B18((char *)(v53 > 1), v52 + 1, 1, v46);
  }
  *((void *)v46 + 2) = v52 + 1;
  uint64_t v54 = &v46[16 * v52];
  *((void *)v54 + 4) = v51;
  *((void *)v54 + 5) = &protocol witness table for CompoundSectionedDataSource;
  sub_1000190DC(a1, a1[3]);
  dispatch thunk of HealthExperienceStore.viewContext.getter();
  static SourceProfile.primary.getter();
  type metadata accessor for SummaryFeedTrendsSectionDataSource();
  swift_allocObject();
  SummaryFeedTrendsSectionDataSource.init(context:sourceProfile:additionalPredicates:significantTrendsDataSourceLoadingCompletion:)();
  uint64_t v55 = *(void (**)(void))(v136 + 104);
  unsigned int v142 = enum case for HideableDataSource.Visibility.visible<A>(_:);
  uint64_t v116 = v136 + 104;
  v115 = (void (*)(char *, void, uint64_t))v55;
  v55(v132);
  sub_10001881C(0, &qword_100107A18, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, sub_10001C410, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
  swift_allocObject();
  uint64_t v56 = HideableDataSource.init(source:visibility:)();
  *(void *)(v5 + qword_1001078C0) = v56;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v46 = sub_100018B18(0, *((void *)v46 + 2) + 1, 1, v46);
  }
  unint64_t v58 = *((void *)v46 + 2);
  unint64_t v57 = *((void *)v46 + 3);
  if (v58 >= v57 >> 1) {
    long long v46 = sub_100018B18((char *)(v57 > 1), v58 + 1, 1, v46);
  }
  uint64_t v59 = sub_10001C534(&qword_100107A20, &qword_100107A18, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, sub_10001C410);
  *((void *)v46 + 2) = v58 + 1;
  uint64_t v60 = &v46[16 * v58];
  *((void *)v60 + 4) = v56;
  *((void *)v60 + 5) = v59;
  id v61 = [v50 profileIdentifier];
  sub_1000190DC(a1, a1[3]);
  uint64_t v62 = (void *)dispatch thunk of HealthExperienceStore.viewContext.getter();
  uint64_t v63 = sub_10000EDD4((uint64_t)a1, v50, v61, v62, v144);

  dispatch thunk of HideableDataSource.wrappedSource.getter();
  LOBYTE(v61) = dispatch thunk of PrimarySecondaryDataSource.shouldUsePrimaryDataSource.getter();
  swift_release();
  if (v61)
  {
    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v134 + 104);
    uint64_t v65 = v123;
    uint64_t v66 = v142;
  }
  else
  {
    uint64_t v66 = enum case for HideableDataSource.Visibility.hidden<A>(_:);
    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v134 + 104);
    uint64_t v65 = v123;
  }
  v114 = v64;
  v64(v65, v66, v135);
  dispatch thunk of HideableDataSource.visibility.setter();
  *(void *)(v5 + qword_100108D68) = v63;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v46 = sub_100018B18(0, *((void *)v46 + 2) + 1, 1, v46);
  }
  unint64_t v68 = *((void *)v46 + 2);
  unint64_t v67 = *((void *)v46 + 3);
  if (v68 >= v67 >> 1) {
    long long v46 = sub_100018B18((char *)(v67 > 1), v68 + 1, 1, v46);
  }
  uint64_t v69 = sub_10001C534(&qword_100107A28, &qword_100107A30, (uint64_t (*)(uint64_t))sub_10001C444, sub_10001C500);
  *((void *)v46 + 2) = v68 + 1;
  uint64_t v70 = &v46[16 * v68];
  v123 = (char *)v63;
  *((void *)v70 + 4) = v63;
  *((void *)v70 + 5) = v69;
  sub_10001D360((uint64_t)a1, (uint64_t)&v146);
  type metadata accessor for GetMoreFromHealthDataSource();
  swift_allocObject();
  uint64_t v71 = v144;
  uint64_t v72 = v144;
  uint64_t v73 = sub_100013F34((uint64_t)&v146, v71);
  *(void *)(v5 + qword_1001078C8) = v73;
  unint64_t v75 = *((void *)v46 + 2);
  unint64_t v74 = *((void *)v46 + 3);
  swift_retain();
  id v124 = v50;
  if (v75 >= v74 >> 1) {
    long long v46 = sub_100018B18((char *)(v74 > 1), v75 + 1, 1, v46);
  }
  uint64_t v76 = sub_1000188E4(&qword_100107A38, (void (*)(uint64_t))type metadata accessor for GetMoreFromHealthDataSource);
  *((void *)v46 + 2) = v75 + 1;
  uint64_t v77 = &v46[16 * v75];
  *((void *)v77 + 4) = v73;
  *((void *)v77 + 5) = v76;
  sub_10001C5CC(0);
  sub_10001D360((uint64_t)a1, (uint64_t)&v146);
  uint64_t v78 = swift_allocObject();
  sub_10001CD68(&v146, v78 + 16);
  *(void *)(v78 + 56) = v144;
  id v79 = v72;
  static DispatchTime.now()();
  DelayedDataSource.__allocating_init(delay:dataSource:)();
  uint64_t v80 = *(void (**)(char *, void, uint64_t))(v143 + 104);
  v143 += 104;
  v80(v139, v142, v138);
  sub_10001881C(0, &qword_100107A40, (uint64_t (*)(uint64_t))sub_10001C5CC, (uint64_t (*)(void))sub_10001C614, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
  swift_allocObject();
  uint64_t v81 = HideableDataSource.init(source:visibility:)();
  *(void *)(v5 + qword_1001078D0) = v81;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v46 = sub_100018B18(0, *((void *)v46 + 2) + 1, 1, v46);
  }
  unint64_t v83 = *((void *)v46 + 2);
  unint64_t v82 = *((void *)v46 + 3);
  uint64_t v141 = a1;
  if (v83 >= v82 >> 1) {
    long long v46 = sub_100018B18((char *)(v82 > 1), v83 + 1, 1, v46);
  }
  uint64_t v84 = sub_10001C534(&qword_100107A48, &qword_100107A40, (uint64_t (*)(uint64_t))sub_10001C5CC, (uint64_t (*)(void))sub_10001C614);
  *((void *)v46 + 2) = v83 + 1;
  v85 = &v46[16 * v83];
  *((void *)v85 + 4) = v81;
  *((void *)v85 + 5) = v84;
  sub_10001D360((uint64_t)v141, (uint64_t)&v146);
  uint64_t v86 = swift_allocObject();
  sub_10001CD68(&v146, v86 + 16);
  *(void *)(v86 + 56) = v144;
  id v87 = v79;
  static DispatchTime.now()();
  DelayedDataSource.__allocating_init(delay:dataSource:)();
  v80(v139, v142, v138);
  swift_allocObject();
  uint64_t v88 = HideableDataSource.init(source:visibility:)();
  *(void *)(v5 + qword_1001078D8) = v88;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v46 = sub_100018B18(0, *((void *)v46 + 2) + 1, 1, v46);
  }
  uint64_t v89 = v126;
  unint64_t v91 = *((void *)v46 + 2);
  unint64_t v90 = *((void *)v46 + 3);
  if (v91 >= v90 >> 1) {
    long long v46 = sub_100018B18((char *)(v90 > 1), v91 + 1, 1, v46);
  }
  *((void *)v46 + 2) = v91 + 1;
  id v92 = &v46[16 * v91];
  *((void *)v92 + 4) = v88;
  *((void *)v92 + 5) = v84;
  *(void *)(v5 + qword_1001078E0) = v144;
  id v93 = v87;
  swift_release();
  uint64_t v94 = CompoundSectionedDataSource.init(_:)();
  swift_retain();
  sub_1000041D4();
  uint64_t v95 = (uint64_t)v125;
  dispatch thunk of CloudSyncStateObserver.cachedFirstRestoreState.getter();
  uint64_t v96 = v127;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v95, 1, v127) == 1)
  {
    sub_10001E68C(v95, (uint64_t (*)(void))sub_10001E6EC);
  }
  else
  {
    unint64_t v97 = v122;
    (*(void (**)(char *, uint64_t, uint64_t))(v89 + 32))(v122, v95, v96);
    if (CloudSyncRestoreState.isOngoing.getter())
    {
      uint64_t v98 = (uint64_t)v121;
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v121, v97, v96);
      v117(v98, 0, 1, v96);
      uint64_t v99 = v94 + qword_1001078A8;
      swift_beginAccess();
      sub_100020778(v98, v99, (uint64_t (*)(void))sub_10001E6EC);
      swift_endAccess();
      uint64_t v100 = enum case for HideableDataSource.Visibility.hidden<A>(_:);
      v101 = v119;
      uint64_t v102 = v133;
      v115(v119, enum case for HideableDataSource.Visibility.hidden<A>(_:), v133);
      if (HAFeatureFlagShowTrendsInSummary())
      {
        (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v132, v101, v102);
        dispatch thunk of HideableDataSource.visibility.setter();
      }
      (*(void (**)(char *, uint64_t))(v136 + 8))(v101, v102);
      v114(v120, v100, v135);
      dispatch thunk of HideableDataSource.visibility.setter();
      swift_retain();
      uint64_t v103 = dispatch thunk of PrimarySecondaryDataSource.primaryDataSource.getter();
      swift_release();
      sub_100003DD8(0, (unint64_t *)&qword_100104860, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      uint64_t v104 = swift_allocObject();
      *(_OWORD *)(v104 + 16) = xmmword_1000CBFD0;
      uint64_t v105 = v103 + qword_100105880;
      uint64_t v106 = type metadata accessor for EmptyStateCollectionViewCellItem();
      *(void *)(v104 + 56) = v106;
      *(void *)(v104 + 64) = sub_1000188E4(&qword_100105228, (void (*)(uint64_t))&type metadata accessor for EmptyStateCollectionViewCellItem);
      unint64_t v107 = sub_100004F38((uint64_t *)(v104 + 32));
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v106 - 8) + 16))(v107, v105, v106);
      dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)();
      swift_release();
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v89 + 8))(v97, v96);
  }
  uint64_t v108 = v129;
  sub_100006D34(v129);
  id v109 = [self mainQueue];
  swift_allocObject();
  swift_weakInit();
  sub_1000188E4((unint64_t *)&qword_100104648, sub_100020814);
  unint64_t v110 = v128;
  uint64_t v111 = v131;
  ObservableConvertible.afterChange(on:_:)();
  swift_release();

  swift_release();
  swift_release();
  _s6Health23OpenSleepScheduleIntentVwxx_0(v140);
  id v112 = *(void (**)(uint64_t, uint64_t))(v130 + 8);
  v112(v108, v111);
  v112((uint64_t)v110, v111);
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v141);
  return v94;
}

void sub_10001881C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t sub_10001889C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000188E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *sub_10001892C(char *result, int64_t a2, char a3, char *a4, unint64_t *a5, unint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = *((void *)a4 + 3);
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = *((void *)a4 + 2);
    if (v10 <= v11) {
      uint64_t v12 = *((void *)a4 + 2);
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_100018A5C(0, a5, a6);
      uint64_t v13 = (char *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      *((void *)v13 + 2) = v11;
      *((void *)v13 + 3) = 2 * (v15 >> 4);
      uint64_t v16 = v13 + 32;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v16 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[16 * v11 + 32]) {
          memmove(v16, a4 + 32, 16 * v11);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10001EA50(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void sub_100018A5C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_10001D414(255, a3);
    unint64_t v4 = type metadata accessor for _ContiguousArrayStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_100018AB8(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_10001D414(255, a3);
    unint64_t v4 = type metadata accessor for _ContiguousArrayStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

char *sub_100018B18(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10001892C(a1, a2, a3, a4, (unint64_t *)&qword_100104AA8, &qword_100104AB0);
}

uint64_t sub_100018B34(uint64_t a1, void *a2, uint64_t a3, void *a4, char a5)
{
  v5[qword_100106520] = a5;
  sub_1000190DC(a2, a2[3]);
  char v8 = v5;
  unint64_t v9 = (void *)dispatch thunk of HealthExperienceStore.viewContext.getter();
  uint64_t v10 = NSManagedObjectContext.makeFeedItemsFetchedResultsController(for:associatedProfileIdentifier:)();

  Class v11 = (Class)[v10 fetchRequest];
  id v12 = [(objc_class *)v11 relationshipKeyPathsForPrefetching];
  if (!v12)
  {
    [(objc_class *)v11 setRelationshipKeyPathsForPrefetching:0];
    goto LABEL_14;
  }
  uint64_t v13 = v12;
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v16 = *(void *)(v14 + 16);
  int64_t v17 = v16 + 2;
  if (__OFADD__(v16, 2))
  {
    __break(1u);
  }
  else
  {
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0
      || (unint64_t v15 = *(void *)(v14 + 24), v19 = v15 >> 1, (uint64_t)(v15 >> 1) < v17))
    {
      if (v16 <= v17) {
        int64_t v20 = v16 + 2;
      }
      else {
        int64_t v20 = v16;
      }
      uint64_t v14 = (uint64_t)sub_1000369DC((char *)isUniquelyReferenced_nonNull_native, v20, 1, (char *)v14);
      unint64_t v15 = *(void *)(v14 + 24);
      unint64_t v19 = v15 >> 1;
    }
    int64_t v17 = *(void *)(v14 + 16);
    int64_t v16 = v17 + 1;
    if (v19 > v17) {
      goto LABEL_10;
    }
  }
  uint64_t v14 = (uint64_t)sub_1000369DC((char *)(v15 > 1), v16, 1, (char *)v14);
  unint64_t v15 = *(void *)(v14 + 24);
  unint64_t v19 = v15 >> 1;
LABEL_10:
  *(void *)(v14 + 16) = v16;
  uint64_t v21 = v14 + 16 * v17;
  *(void *)(v21 + 32) = 0x7463655364656566;
  *(void *)(v21 + 40) = 0xEB000000006E6F69;
  int64_t v22 = v17 + 2;
  if ((uint64_t)v19 < v22) {
    uint64_t v14 = (uint64_t)sub_1000369DC((char *)(v15 > 1), v22, 1, (char *)v14);
  }
  *(void *)(v14 + 16) = v22;
  uint64_t v23 = v14 + 16 * v16;
  *(void *)(v23 + 32) = 0xD000000000000010;
  *(void *)(v23 + 40) = 0x80000001000D4180;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [(objc_class *)v11 setRelationshipKeyPathsForPrefetching:isa];

  Class v11 = isa;
LABEL_14:

  *(void *)&v8[qword_100106528] = a4;
  id v25 = a4;

  uint64_t v26 = FetchedResultsControllerDataSource.init(_:)();
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)a2);
  return v26;
}

uint64_t sub_100018DA0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100018F20(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100018EC4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100018EC4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v12);
  return v7;
}

uint64_t _s6Health23OpenSleepScheduleIntentVwxx_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100018EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100018F20(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100019120(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_1000190DC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100019120(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000191B8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10004496C(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10004496C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000191B8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100019330(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100019330(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1000193A8(0, &qword_100105990);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

void sub_1000193A8(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for _ContiguousArrayStorage();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void *_s6Health41SummaryPinnedContentGradientColorProviderC6colors4fromSaySo7UIColorCGSay0A8Platform8FeedItemCG_tFZ_0(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    unint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v46 = v3;
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    unint64_t v46 = v3;
    if (v3)
    {
LABEL_3:
      unint64_t v3 = 0;
      unint64_t v45 = a1 & 0xC000000000000001;
      uint64_t v4 = (uint64_t)&_swiftEmptyDictionarySingleton;
      uint64_t v5 = 4;
      while (1)
      {
        if (v45) {
          id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v6 = *(id *)(a1 + 8 * v5);
        }
        uint64_t v7 = v6;
        uint64_t v8 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        uint64_t v9 = (void *)FeedItem.associatedDisplayCategory.getter();
        if (v9)
        {
          id v10 = v9;
          sub_100019AF4(v3);
          unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v47 = v4;
          unint64_t v3 = sub_100019994((uint64_t)v10);
          uint64_t v12 = *(void *)(v4 + 16);
          BOOL v13 = (v11 & 1) == 0;
          uint64_t v14 = v12 + v13;
          if (__OFADD__(v12, v13)) {
            goto LABEL_26;
          }
          char v15 = v11;
          if (*(void *)(v4 + 24) >= v14)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100037E50();
              uint64_t v4 = v47;
            }
          }
          else
          {
            sub_10001AFB0(v14, isUniquelyReferenced_nonNull_native);
            unint64_t isUniquelyReferenced_nonNull_native = sub_10001E254(0, (unint64_t *)&qword_100105328);
            uint64_t v4 = v47;
            uint64_t v16 = v47;
            unint64_t v17 = sub_100019994((uint64_t)v10);
            if ((v15 & 1) != (v18 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              swift_release();
              __break(1u);
              goto LABEL_67;
            }
            unint64_t v3 = v17;
          }
          swift_bridgeObjectRelease();
          if (v15)
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            *(void *)(v4 + 8 * (v3 >> 6) + 64) |= 1 << v3;
            uint64_t v19 = 8 * v3;
            *(void *)(*(void *)(v4 + 48) + v19) = v10;
            *(void *)(*(void *)(v4 + 56) + v19) = 0;
            uint64_t v20 = *(void *)(v4 + 16);
            uint64_t v21 = v20 + 1;
            unint64_t isUniquelyReferenced_nonNull_native = __OFADD__(v20, 1);
            swift_bridgeObjectRetain();
            if (isUniquelyReferenced_nonNull_native) {
              goto LABEL_28;
            }
            *(void *)(v4 + 16) = v21;
            id v22 = v10;
          }
          uint64_t v23 = *(void *)(v4 + 56);
          swift_bridgeObjectRelease();
          uint64_t v24 = *(void *)(v23 + 8 * v3);
          BOOL v25 = __OFADD__(v24, 1);
          uint64_t v26 = v24 + 1;
          if (v25) {
            goto LABEL_27;
          }
          *(void *)(v23 + 8 * v3) = v26;

          unint64_t v3 = (unint64_t)sub_10003761C;
        }

        ++v5;
        if (v8 == v46) {
          goto LABEL_31;
        }
      }
    }
  }
  uint64_t v4 = (uint64_t)&_swiftEmptyDictionarySingleton;
LABEL_31:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  uint64_t v27 = sub_10001AE9C(v4);
  swift_bridgeObjectRelease();
  unint64_t v47 = (unint64_t)v27;
  sub_10001B504((void **)&v47);
  swift_bridgeObjectRelease();
  unint64_t v28 = v47;
  uint64_t v16 = (uint64_t)_swiftEmptyArrayStorage;
  unint64_t v47 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v29 = *(void *)(v28 + 16);
  if (v29)
  {
    swift_retain();
    uint64_t v30 = 32;
    do
    {
      if (objc_msgSend(*(id *)(v28 + v30), "color", v45))
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t isUniquelyReferenced_nonNull_native = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (isUniquelyReferenced_nonNull_native >= *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v30 += 16;
      --v29;
    }
    while (v29);
    swift_release();
    uint64_t v16 = v47;
  }
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = (unint64_t)v16 >> 62;
  if (!((unint64_t)v16 >> 62))
  {
    if (*(uint64_t *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 4) {
      uint64_t v31 = 4;
    }
    else {
      uint64_t v31 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if ((v16 & 0xC000000000000001) == 0) {
      goto LABEL_47;
    }
    goto LABEL_44;
  }
  if (v16 < 0) {
    uint64_t v34 = v16;
  }
  else {
    uint64_t v34 = v16 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v35 < 0)
  {
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
LABEL_67:
  if (v4 >= 4) {
    uint64_t v43 = 4;
  }
  else {
    uint64_t v43 = v4;
  }
  if (v4 >= 0) {
    uint64_t v31 = v43;
  }
  else {
    uint64_t v31 = 4;
  }
  swift_bridgeObjectRetain();
  uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v44 < v31) {
    __break(1u);
  }
  if ((v16 & 0xC000000000000001) != 0)
  {
LABEL_44:
    if (v31)
    {
      sub_10001E254(0, &qword_1001040F0);
      Swift::Int v32 = 0;
      do
      {
        Swift::Int v33 = v32 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v32);
        Swift::Int v32 = v33;
      }
      while (v31 != v33);
    }
  }
LABEL_47:
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v35 = v36;
    uint64_t v4 = v37;
    unint64_t isUniquelyReferenced_nonNull_native = v38;
    swift_bridgeObjectRelease_n();
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_52;
    }
LABEL_51:
    id v39 = sub_10008FC38(v34, v35, v4, isUniquelyReferenced_nonNull_native);
    goto LABEL_58;
  }
  uint64_t v4 = 0;
  uint64_t v34 = v16 & 0xFFFFFFFFFFFFFF8;
  uint64_t v35 = (v16 & 0xFFFFFFFFFFFFFF8) + 32;
  unint64_t isUniquelyReferenced_nonNull_native = (2 * v31) | 1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_51;
  }
LABEL_52:
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  id v40 = (void *)swift_dynamicCastClass();
  if (!v40)
  {
    swift_unknownObjectRelease();
    id v40 = _swiftEmptyArrayStorage;
  }
  uint64_t v41 = v40[2];
  swift_release();
  if (__OFSUB__(isUniquelyReferenced_nonNull_native >> 1, v4)) {
    goto LABEL_64;
  }
  if (v41 != (isUniquelyReferenced_nonNull_native >> 1) - v4)
  {
LABEL_65:
    swift_unknownObjectRelease();
    goto LABEL_51;
  }
  id v39 = (void *)swift_dynamicCastClass();
  if (!v39)
  {
    swift_unknownObjectRelease();
    id v39 = _swiftEmptyArrayStorage;
  }
LABEL_58:
  swift_unknownObjectRelease();
  sub_100019AF4(v3);
  return v39;
}

unint64_t sub_100019994(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1000199D8(a1, v4);
}

unint64_t sub_1000199D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10001E254(0, (unint64_t *)&qword_100105328);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_100019AF4(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

id sub_100019B04()
{
  uint64_t v1 = v0;
  id result = [v0 view];
  if (!result)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = result;
  id v4 = [result window];

  if (!v4)
  {
LABEL_7:
    v9.receiver = v1;
    v9.super_class = (Class)type metadata accessor for SummaryFeedViewController();
    [super viewWillLayoutSubviews];
    id result = [v1 collectionView];
    if (result)
    {
      uint64_t v8 = result;
      [result contentOffset];

      sub_100019DF4(&qword_100106A58, (void (*)(uint64_t))type metadata accessor for SummaryFeedViewController);
      return (id)GradientBackgroundPresenting.layoutGradient(yOffset:)();
    }
    goto LABEL_10;
  }
  id result = (id)dispatch thunk of CompoundDataSourceCollectionViewController.dataSourceAdaptor.getter();
  if (result)
  {
    dispatch thunk of DiffableCollectionViewAdaptor.loadIfNeeded()();
    swift_release();
    if ((*((unsigned char *)v1 + qword_1001068B8) & 1) == 0)
    {
      if (HAFeatureFlagPreloadSummaryCells())
      {
        sub_100013534(0, (unint64_t *)&unk_100106A60, (uint64_t (*)(uint64_t))type metadata accessor for Mode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
        uint64_t v5 = swift_allocObject();
        *(_OWORD *)(v5 + 16) = xmmword_1000CBFD0;
        *(void *)(v5 + 32) = NSRunLoopCommonModes;
        type metadata accessor for Mode(0);
        id v6 = NSRunLoopCommonModes;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v1 performSelector:"setVisibleRectEdgeInsetsIfNeeded" withObject:0 afterDelay:isa inModes:0.0];
      }
    }
    goto LABEL_7;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100019D1C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100019D64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100019DAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100019DF4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100019E3C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SummaryFeedViewController()
{
  uint64_t result = qword_100106918;
  if (!qword_100106918) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void PersonalizedFeedDataSource.layout(for:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v117 = type metadata accessor for CollectionViewLayoutContext();
  uint64_t v115 = *(void *)(v117 - 8);
  uint64_t v4 = __chkstk_darwin(v117);
  id v6 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v111 = (char *)&v101 - v8;
  __chkstk_darwin(v7);
  unint64_t v110 = (char *)&v101 - v9;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v113 = *(void *)(v10 - 8);
  uint64_t v114 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v121 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v108 = (char *)&v101 - v13;
  uint64_t v106 = type metadata accessor for GridLayoutEngine();
  uint64_t v107 = *(void *)(v106 - 8);
  uint64_t v14 = __chkstk_darwin(v106);
  v101 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v102 = (char *)&v101 - v16;
  uint64_t v105 = type metadata accessor for ListLayoutConfiguration();
  uint64_t v104 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v103 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for LayoutConfiguration();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v118 = v18;
  uint64_t v119 = v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v116 = (char *)&v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  os_log_t v109 = (os_log_t)((char *)&v101 - v22);
  uint64_t v23 = type metadata accessor for IndexPath();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v27 = CollectionViewLayoutContext.section.getter();
  type metadata accessor for PersonalizedFeedDataSource();
  sub_10001ADC8(&qword_100106088, (void (*)(uint64_t))type metadata accessor for PersonalizedFeedDataSource);
  if (SnapshotDataSource.numberOfItems(in:)(v27) < 1)
  {
LABEL_12:
    uint64_t v43 = v121;
    static Logger.view.getter();
    uint64_t v44 = v115;
    uint64_t v45 = v117;
    (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v6, a1, v117);
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      unint64_t v48 = v6;
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 134217984;
      uint64_t v50 = CollectionViewLayoutContext.section.getter();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v48, v45);
      v123[0] = v50;
      uint64_t v43 = v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "PersonalizedFeedDataSource section %ld is empty but we've been asked for a layout; returning empty",
        v49,
        0xCu);
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v6, v45);
    }
    uint64_t v52 = v113;
    uint64_t v51 = v114;

    (*(void (**)(char *, uint64_t))(v52 + 8))(v43, v51);
    unint64_t v53 = v116;
    static LayoutConfiguration.empty.getter();
    LayoutConfiguration.layoutSection.getter();
    (*(void (**)(char *, uint64_t))(v119 + 8))(v53, v118);
    return;
  }
  uint64_t v112 = a1;
  CollectionViewLayoutContext.section.getter();
  IndexPath.init(item:section:)();
  SnapshotDataSource.item(at:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  sub_10001AE44();
  type metadata accessor for FeedItem();
  if ((swift_dynamicCast() & 1) == 0)
  {
    a1 = v112;
    goto LABEL_12;
  }
  uint64_t v121 = v122;
  id v28 = [v122 feedSection];
  if (!v28)
  {
    uint64_t v54 = v108;
    static Logger.view.getter();
    uint64_t v55 = v115;
    uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v115 + 16);
    uint64_t v57 = v112;
    uint64_t v58 = v117;
    v56(v110, v112, v117);
    v56(v111, v57, v58);
    uint64_t v59 = v121;
    id v60 = v2;
    id v61 = v59;
    id v62 = v60;
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    int v65 = v64;
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v66 = swift_slowAlloc();
      uint64_t v121 = (char *)swift_slowAlloc();
      v123[0] = (uint64_t)v121;
      *(_DWORD *)uint64_t v66 = 136315906;
      LODWORD(v112) = v65;
      uint64_t v107 = v66 + 4;
      id v67 = [v61 uniqueIdentifier];
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      os_log_t v109 = v63;
      unint64_t v70 = v69;

      unint64_t v122 = (char *)sub_100018DA0(v68, v70, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v66 + 12) = 1024;
      unsigned int v71 = [v61 isDeleted];

      LODWORD(v122) = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v66 + 18) = 2048;
      uint64_t v72 = v110;
      Swift::Int v73 = CollectionViewLayoutContext.section.getter();
      unint64_t v74 = (char *)SnapshotDataSource.numberOfItems(in:)(v73);

      unint64_t v75 = *(void (**)(char *, uint64_t))(v115 + 8);
      uint64_t v76 = v72;
      uint64_t v77 = v117;
      v75(v76, v117);
      unint64_t v122 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v66 + 28) = 2048;
      uint64_t v78 = v111;
      id v79 = (char *)CollectionViewLayoutContext.section.getter();
      v75(v78, v77);
      unint64_t v122 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v80 = v109;
      _os_log_impl((void *)&_mh_execute_header, v109, (os_log_type_t)v112, "feedItem %s is in the feed without a section! isDeleted=%{BOOL}d, %ld items in section %ld", (uint8_t *)v66, 0x26u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v113 + 8))(v108, v114);
    }
    else
    {
      uint64_t v81 = *(void (**)(char *, uint64_t))(v55 + 8);
      uint64_t v82 = v117;
      v81(v111, v117);

      v81(v110, v82);
      (*(void (**)(char *, uint64_t))(v113 + 8))(v54, v114);
    }
    unint64_t v83 = v116;
    static LayoutConfiguration.empty.getter();
    LayoutConfiguration.layoutSection.getter();

    (*(void (**)(char *, uint64_t))(v119 + 8))(v83, v118);
    return;
  }
  uint64_t v29 = v28;
  os_log_t v30 = v109;
  static LayoutConfiguration.card.getter();
  if (*((unsigned char *)v2 + qword_100106520) == 1)
  {
    LayoutConfiguration.interItemInset.getter();
    uint64_t v32 = v31;
    Swift::Int v33 = (void (*)(uint64_t *, void))LayoutConfiguration.additionalContentInsets.modify();
    *(void *)(v34 + 16) = v32;
    v33(v123, 0);
  }
  uint64_t v35 = v29;
  id v36 = [v29 identifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  char v37 = ForYouSectionKind.init(rawValue:)();
  uint64_t v38 = v120;
  switch(v37)
  {
    case 1:
      id v84 = [self sharedBehavior];
      if (!v84) {
        goto LABEL_36;
      }
      v85 = v84;
      id v86 = [v84 features];

      if (!v86) {
        goto LABEL_37;
      }
      unsigned __int8 v87 = [v86 stanley];

      if ((v87 & 1) == 0) {
        goto LABEL_30;
      }
      goto LABEL_23;
    case 2:
      id v90 = [self sharedBehavior];
      if (!v90) {
        goto LABEL_38;
      }
      unint64_t v91 = v90;
      id v92 = [v90 features];

      if (!v92) {
        goto LABEL_39;
      }
      unsigned int v93 = [v92 stanley];

      if (!v93) {
        goto LABEL_30;
      }
      uint64_t v88 = v101;
      static GridLayoutEngine.articles.getter();
      uint64_t v89 = GridLayoutEngine.layout(for:)();
      if (v38) {
        goto LABEL_29;
      }
      goto LABEL_32;
    case 3:
      uint64_t v98 = v103;
      static ListLayoutConfiguration.apps.getter();
      CollectionViewLayoutContext.environment.getter();
      ListLayoutConfiguration.layout(for:)();

      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v104 + 8))(v98, v105);
      goto LABEL_33;
    case 4:
      goto LABEL_30;
    default:
      id v39 = [self sharedBehavior];
      if (!v39)
      {
        __break(1u);
        goto LABEL_35;
      }
      id v40 = v39;
      id v41 = [v39 features];

      if (!v41)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }
      unsigned int v42 = [v41 stanley];

      if (v42)
      {
LABEL_23:
        uint64_t v88 = v102;
        static GridLayoutEngine.largeCard.getter();
        uint64_t v89 = GridLayoutEngine.layout(for:)();
        if (v38)
        {
LABEL_29:

          (*(void (**)(char *, uint64_t))(v107 + 8))(v88, v106);
          (*(void (**)(os_log_t, uint64_t))(v119 + 8))(v30, v118);
        }
        else
        {
LABEL_32:
          uint64_t v99 = (void *)v89;
          (*(void (**)(char *, uint64_t))(v107 + 8))(v88, v106);
          id v100 = [self estimatedDimension:100.0];
          NSCollectionLayoutSection.withHeader(height:alignment:)((NSCollectionLayoutDimension)v100, NSRectAlignmentTopLeading);

LABEL_33:
          (*(void (**)(os_log_t, uint64_t))(v119 + 8))(v30, v118);
        }
      }
      else
      {
LABEL_30:
        uint64_t v95 = v118;
        uint64_t v94 = v119;
        uint64_t v96 = v116;
        (*(void (**)(char *, os_log_t, uint64_t))(v119 + 16))(v116, v30, v118);
        LayoutConfiguration.layoutSection.getter();

        unint64_t v97 = *(void (**)(char *, uint64_t))(v94 + 8);
        v97(v96, v95);
        v97((char *)v30, v95);
      }
      return;
  }
}

BOOL sub_10001ACE8()
{
  return (SnapshotDataSource.isEmpty.getter() & 1) == 0;
}

uint64_t type metadata accessor for PersonalizedFeedDataSource()
{
  uint64_t result = qword_100106530;
  if (!qword_100106530) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001AD80(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001ADC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001AE10()
{
  return sub_10001AD80(&qword_100106088, (void (*)(uint64_t))type metadata accessor for PersonalizedFeedDataSource);
}

unint64_t sub_10001AE44()
{
  unint64_t result = qword_100106A40;
  if (!qword_100106A40)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_100106A40);
  }
  return result;
}

void *sub_10001AE9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10001C280(0, &qword_1001074D0, (uint64_t (*)(uint64_t))sub_10001ECD4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  id v6 = sub_10001B300(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10001B2F8();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_10001AFB0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10001B27C();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0) {
      id v33 = v31;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

void sub_10001B27C()
{
  if (!qword_100105330)
  {
    sub_10001E254(255, (unint64_t *)&qword_100105328);
    sub_10001EC6C();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105330);
    }
  }
}

uint64_t sub_10001B2F8()
{
  return swift_release();
}

void *sub_10001B300(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    uint64_t v20 = 8 * v16;
    unint64_t v21 = *(void **)(*(void *)(a4 + 48) + v20);
    ++v13;
    uint64_t v22 = *(void *)(*(void *)(a4 + 56) + v20);
    *int64_t v11 = v21;
    v11[1] = v22;
    if (v13 == v10)
    {
      id v23 = v21;
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = v21;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_10001B504(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_100091334(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_10001B570(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_10001B570(uint64_t *a1)
{
  Swift::Int v2 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v2);
  if (result >= v2)
  {
    if (v2 < 0) {
      goto LABEL_160;
    }
    if (v2) {
      return sub_10001BEDC(0, v2, 1, a1);
    }
    return result;
  }
  if (v2 >= 0) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = v2 + 1;
  }
  if (v2 < -1) {
    goto LABEL_168;
  }
  Swift::Int v133 = result;
  uint64_t v142 = v1;
  if (v2 < 2)
  {
    uint64_t v6 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v141 = (id *)((char *)&_swiftEmptyArrayStorage + 32);
    if (v2 != 1)
    {
      unint64_t v9 = *((void *)&_swiftEmptyArrayStorage + 2);
      uint64_t v8 = (char *)&_swiftEmptyArrayStorage;
LABEL_126:
      uint64_t v135 = v6;
      if (v9 >= 2)
      {
        uint64_t v125 = *a1;
        do
        {
          unint64_t v126 = v9 - 2;
          if (v9 < 2) {
            goto LABEL_155;
          }
          if (!v125) {
            goto LABEL_167;
          }
          uint64_t v127 = v8;
          uint64_t v128 = *(void *)&v8[16 * v126 + 32];
          uint64_t v129 = *(void *)&v8[16 * v9 + 24];
          sub_1000376C0((id *)(v125 + 16 * v128), (id *)(v125 + 16 * *(void *)&v8[16 * v9 + 16]), (id *)(v125 + 16 * v129), v141);
          if (v142) {
            goto LABEL_123;
          }
          if (v129 < v128) {
            goto LABEL_156;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v127 = sub_10009130C((uint64_t)v127);
          }
          if (v126 >= *((void *)v127 + 2)) {
            goto LABEL_157;
          }
          uint64_t v130 = &v127[16 * v126 + 32];
          *(void *)uint64_t v130 = v128;
          *((void *)v130 + 1) = v129;
          unint64_t v131 = *((void *)v127 + 2);
          if (v9 > v131) {
            goto LABEL_158;
          }
          memmove(&v127[16 * v9 + 16], &v127[16 * v9 + 32], 16 * (v131 - v9));
          uint64_t v8 = v127;
          *((void *)v127 + 2) = v131 - 1;
          unint64_t v9 = v131 - 1;
        }
        while (v131 > 2);
      }
      swift_bridgeObjectRelease();
      *((void *)v135 + 2) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v5 = v4 >> 1;
    sub_10001ECD4();
    uint64_t v6 = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    *((void *)v6 + 2) = v5;
    uint64_t v141 = (id *)(v6 + 32);
  }
  uint64_t v135 = v6;
  Swift::Int v7 = 0;
  uint64_t v143 = *a1;
  uint64_t v132 = *a1 + 24;
  uint64_t v8 = (char *)&_swiftEmptyArrayStorage;
  Swift::Int v137 = v2;
  while (1)
  {
    Swift::Int v10 = v7;
    Swift::Int v11 = v7 + 1;
    uint64_t v138 = v8;
    Swift::Int v139 = v7;
    if (v7 + 1 >= v2) {
      goto LABEL_49;
    }
    uint64_t v12 = v143 + 16 * v11;
    uint64_t v13 = *(void *)(v12 + 8);
    uint64_t v14 = v143 + 16 * v7;
    uint64_t v15 = *(void *)(v14 + 8);
    if (v13 == v15)
    {
      unint64_t v16 = *(void **)v14;
      id v17 = *(id *)v12;
      id v18 = v16;
      uint64_t v147 = v17;
      id v19 = [v17 categoryName];
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v21;

      id v23 = [v18 categoryName];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v25;

      if (v20 == v24 && v22 == v26) {
        int v28 = 0;
      }
      else {
        int v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      Swift::Int v2 = v137;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      int v28 = v15 < v13;
    }
    Swift::Int v11 = v10 + 2;
    if (v10 + 2 >= v2)
    {
LABEL_39:
      if ((v28 & 1) == 0) {
        goto LABEL_49;
      }
LABEL_42:
      if (v11 < v10) {
        goto LABEL_161;
      }
      if (v10 < v11)
      {
        uint64_t v44 = 16 * v11;
        uint64_t v45 = 16 * v10;
        Swift::Int v46 = v11;
        Swift::Int v47 = v10;
        while (1)
        {
          if (v47 != --v46)
          {
            if (!v143) {
              goto LABEL_166;
            }
            uint64_t v48 = v143 + v44;
            uint64_t v49 = *(void *)(v143 + v45);
            uint64_t v50 = *(void *)(v143 + v45 + 8);
            *(_OWORD *)(v143 + v45) = *(_OWORD *)(v143 + v44 - 16);
            *(void *)(v48 - 16) = v49;
            *(void *)(v48 - 8) = v50;
          }
          ++v47;
          v44 -= 16;
          v45 += 16;
          if (v47 >= v46) {
            goto LABEL_49;
          }
        }
      }
      goto LABEL_49;
    }
    uint64_t v29 = v132 + 16 * v10;
    int v148 = v28;
    while (1)
    {
      uint64_t v30 = *(void *)(v29 + 16);
      if (v30 == *(void *)v29)
      {
        Swift::Int v144 = v11;
        uint64_t v31 = *(void **)(v29 - 8);
        id v32 = *(id *)(v29 + 8);
        id v33 = v31;
        id v34 = [v32 categoryName];
        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v37 = v36;

        id v38 = [v33 categoryName];
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v41 = v40;

        BOOL v42 = v35 == v39 && v37 == v41;
        int v43 = v42 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
        int v28 = v148;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        Swift::Int v11 = v144;
        Swift::Int v10 = v139;
      }
      else
      {
        int v43 = *(void *)v29 < v30;
      }
      if ((v28 ^ v43)) {
        break;
      }
      ++v11;
      v29 += 16;
      if (v137 == v11)
      {
        Swift::Int v2 = v137;
        Swift::Int v11 = v137;
        goto LABEL_39;
      }
    }
    Swift::Int v2 = v137;
    if (v28) {
      goto LABEL_42;
    }
LABEL_49:
    if (v11 >= v2) {
      goto LABEL_73;
    }
    if (__OFSUB__(v11, v10)) {
      goto LABEL_159;
    }
    if (v11 - v10 >= v133) {
      goto LABEL_73;
    }
    Swift::Int v51 = v10 + v133;
    if (__OFADD__(v10, v133)) {
      goto LABEL_162;
    }
    if (v51 >= v2) {
      Swift::Int v51 = v2;
    }
    if (v51 < v10) {
      break;
    }
    if (v11 == v51) {
      goto LABEL_73;
    }
    uint64_t v52 = v143;
    uint64_t v53 = v143 + 16 * v11;
    Swift::Int v136 = v51;
    while (2)
    {
      uint64_t v54 = v52 + 16 * v11;
      uint64_t v55 = *(void **)v54;
      uint64_t v56 = *(void *)(v54 + 8);
      Swift::Int v57 = v10;
      uint64_t v140 = v53;
      uint64_t v58 = v53;
      Swift::Int v145 = v11;
      while (1)
      {
        id v60 = *(void **)(v58 - 16);
        uint64_t v59 = *(void *)(v58 - 8);
        if (v56 != v59)
        {
          if (v59 >= v56) {
            goto LABEL_59;
          }
          goto LABEL_69;
        }
        id v61 = v55;
        id v62 = v60;
        v149 = v61;
        id v63 = [v61 categoryName];
        uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v66 = v65;

        id v67 = v62;
        id v68 = [v62 categoryName];
        uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v71 = v70;

        if (v64 == v69 && v66 == v71) {
          break;
        }
        char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v52 = v143;
        Swift::Int v11 = v145;
        if ((v73 & 1) == 0) {
          goto LABEL_59;
        }
LABEL_69:
        if (!v52) {
          goto LABEL_164;
        }
        uint64_t v55 = *(void **)v58;
        uint64_t v56 = *(void *)(v58 + 8);
        *(_OWORD *)uint64_t v58 = *(_OWORD *)(v58 - 16);
        *(void *)(v58 - 8) = v56;
        *(void *)(v58 - 16) = v55;
        v58 -= 16;
        if (v11 == ++v57) {
          goto LABEL_59;
        }
      }

      swift_bridgeObjectRelease_n();
      uint64_t v52 = v143;
      Swift::Int v11 = v145;
LABEL_59:
      ++v11;
      Swift::Int v10 = v139;
      uint64_t v53 = v140 + 16;
      if (v11 != v136) {
        continue;
      }
      break;
    }
    Swift::Int v11 = v136;
LABEL_73:
    if (v11 < v10) {
      goto LABEL_154;
    }
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v8 = v138;
    }
    else {
      uint64_t v8 = sub_100091098(0, *((void *)v138 + 2) + 1, 1, v138);
    }
    unint64_t v75 = *((void *)v8 + 2);
    unint64_t v74 = *((void *)v8 + 3);
    unint64_t v9 = v75 + 1;
    if (v75 >= v74 >> 1) {
      uint64_t v8 = sub_100091098((char *)(v74 > 1), v75 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v9;
    uint64_t v76 = v8 + 32;
    uint64_t v77 = &v8[16 * v75 + 32];
    *(void *)uint64_t v77 = v10;
    *((void *)v77 + 1) = v11;
    Swift::Int v146 = v11;
    if (v75)
    {
      uint64_t v78 = v8;
      while (1)
      {
        unint64_t v79 = v9 - 1;
        if (v9 >= 4)
        {
          id v84 = &v76[16 * v9];
          uint64_t v85 = *((void *)v84 - 8);
          uint64_t v86 = *((void *)v84 - 7);
          BOOL v90 = __OFSUB__(v86, v85);
          uint64_t v87 = v86 - v85;
          if (v90) {
            goto LABEL_143;
          }
          uint64_t v89 = *((void *)v84 - 6);
          uint64_t v88 = *((void *)v84 - 5);
          BOOL v90 = __OFSUB__(v88, v89);
          uint64_t v82 = v88 - v89;
          char v83 = v90;
          if (v90) {
            goto LABEL_144;
          }
          unint64_t v91 = v9 - 2;
          id v92 = &v76[16 * v9 - 32];
          uint64_t v94 = *(void *)v92;
          uint64_t v93 = *((void *)v92 + 1);
          BOOL v90 = __OFSUB__(v93, v94);
          uint64_t v95 = v93 - v94;
          if (v90) {
            goto LABEL_146;
          }
          BOOL v90 = __OFADD__(v82, v95);
          uint64_t v96 = v82 + v95;
          if (v90) {
            goto LABEL_149;
          }
          if (v96 >= v87)
          {
            uint64_t v115 = &v76[16 * v79];
            uint64_t v117 = *(void *)v115;
            uint64_t v116 = *((void *)v115 + 1);
            BOOL v90 = __OFSUB__(v116, v117);
            uint64_t v118 = v116 - v117;
            uint64_t v97 = v143;
            if (v90) {
              goto LABEL_153;
            }
            BOOL v108 = v82 < v118;
            goto LABEL_112;
          }
        }
        else
        {
          if (v9 != 3)
          {
            uint64_t v109 = *((void *)v8 + 4);
            uint64_t v110 = *((void *)v8 + 5);
            BOOL v90 = __OFSUB__(v110, v109);
            uint64_t v102 = v110 - v109;
            char v103 = v90;
            uint64_t v97 = v143;
            goto LABEL_106;
          }
          uint64_t v81 = *((void *)v8 + 4);
          uint64_t v80 = *((void *)v8 + 5);
          BOOL v90 = __OFSUB__(v80, v81);
          uint64_t v82 = v80 - v81;
          char v83 = v90;
        }
        uint64_t v97 = v143;
        if (v83) {
          goto LABEL_145;
        }
        unint64_t v91 = v9 - 2;
        uint64_t v98 = &v76[16 * v9 - 32];
        uint64_t v100 = *(void *)v98;
        uint64_t v99 = *((void *)v98 + 1);
        BOOL v101 = __OFSUB__(v99, v100);
        uint64_t v102 = v99 - v100;
        char v103 = v101;
        if (v101) {
          goto LABEL_148;
        }
        uint64_t v104 = &v76[16 * v79];
        uint64_t v106 = *(void *)v104;
        uint64_t v105 = *((void *)v104 + 1);
        BOOL v90 = __OFSUB__(v105, v106);
        uint64_t v107 = v105 - v106;
        if (v90) {
          goto LABEL_151;
        }
        if (__OFADD__(v102, v107)) {
          goto LABEL_152;
        }
        if (v102 + v107 >= v82)
        {
          BOOL v108 = v82 < v107;
LABEL_112:
          if (v108) {
            unint64_t v79 = v91;
          }
          goto LABEL_114;
        }
LABEL_106:
        if (v103) {
          goto LABEL_147;
        }
        uint64_t v111 = &v76[16 * v79];
        uint64_t v113 = *(void *)v111;
        uint64_t v112 = *((void *)v111 + 1);
        BOOL v90 = __OFSUB__(v112, v113);
        uint64_t v114 = v112 - v113;
        if (v90) {
          goto LABEL_150;
        }
        if (v114 < v102)
        {
          uint64_t v8 = v78;
          goto LABEL_14;
        }
LABEL_114:
        unint64_t v119 = v79 - 1;
        if (v79 - 1 >= v9)
        {
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
          goto LABEL_163;
        }
        if (!v97) {
          goto LABEL_165;
        }
        uint64_t v120 = &v76[16 * v119];
        uint64_t v121 = *(void *)v120;
        unint64_t v122 = &v76[16 * v79];
        uint64_t v123 = *((void *)v122 + 1);
        sub_1000376C0((id *)(v97 + 16 * *(void *)v120), (id *)(v97 + 16 * *(void *)v122), (id *)(v97 + 16 * v123), v141);
        if (v142)
        {
LABEL_123:
          swift_bridgeObjectRelease();
          *((void *)v135 + 2) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v123 < v121) {
          goto LABEL_140;
        }
        if (v79 > *((void *)v78 + 2)) {
          goto LABEL_141;
        }
        *(void *)uint64_t v120 = v121;
        *(void *)&v76[16 * v119 + 8] = v123;
        unint64_t v124 = *((void *)v78 + 2);
        if (v79 >= v124) {
          goto LABEL_142;
        }
        uint64_t v142 = 0;
        unint64_t v9 = v124 - 1;
        memmove(&v76[16 * v79], v122 + 16, 16 * (v124 - 1 - v79));
        uint64_t v8 = v78;
        *((void *)v78 + 2) = v124 - 1;
        if (v124 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v9 = 1;
LABEL_14:
    Swift::Int v2 = v137;
    Swift::Int v7 = v146;
    uint64_t v6 = v135;
    if (v146 >= v137) {
      goto LABEL_126;
    }
  }
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  __break(1u);
LABEL_168:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001BEDC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v26 = result;
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 16 * a3;
    uint64_t v28 = *a4;
LABEL_6:
    uint64_t v6 = v4 + 16 * a3;
    Swift::Int v7 = *(void **)v6;
    uint64_t v8 = *(void *)(v6 + 8);
    uint64_t v9 = v26;
    uint64_t v27 = v5;
    uint64_t v29 = a3;
    while (1)
    {
      Swift::Int v11 = *(void **)(v5 - 16);
      uint64_t v10 = *(void *)(v5 - 8);
      if (v8 == v10)
      {
        id v12 = v7;
        id v13 = v11;
        uint64_t v30 = v12;
        id v14 = [v12 categoryName];
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;

        id v18 = v13;
        id v19 = [v13 categoryName];
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v22 = v21;

        if (v15 == v20 && v17 == v22)
        {

          Swift::Int result = swift_bridgeObjectRelease_n();
          uint64_t v4 = v28;
          a3 = v29;
LABEL_5:
          ++a3;
          uint64_t v5 = v27 + 16;
          if (a3 == a2) {
            return result;
          }
          goto LABEL_6;
        }
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        Swift::Int result = swift_bridgeObjectRelease();
        uint64_t v4 = v28;
        a3 = v29;
        if ((v24 & 1) == 0) {
          goto LABEL_5;
        }
      }
      else if (v10 >= v8)
      {
        goto LABEL_5;
      }
      if (!v4) {
        break;
      }
      Swift::Int v7 = *(void **)v5;
      uint64_t v8 = *(void *)(v5 + 8);
      *(_OWORD *)uint64_t v5 = *(_OWORD *)(v5 - 16);
      *(void *)(v5 - 8) = v8;
      *(void *)(v5 - 16) = v7;
      v5 -= 16;
      if (a3 == ++v9) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

void sub_10001C08C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10001C0F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10001C154(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10001C1B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10001C21C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10001C280(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10001C2E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10001C348(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10001C3AC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_10001C410()
{
  return sub_1000188E4(&qword_1001079D0, (void (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource);
}

void sub_10001C444()
{
  if (!qword_1001079E0)
  {
    type metadata accessor for HighlightsFeedWithShowAllHighlightsDataSource(255);
    sub_100020384();
    sub_1000188E4(&qword_1001079F8, (void (*)(uint64_t))sub_100020384);
    unint64_t v0 = type metadata accessor for PrimarySecondaryDataSource();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001079E0);
    }
  }
}

uint64_t sub_10001C500()
{
  return sub_1000188E4(&qword_100107A00, (void (*)(uint64_t))sub_10001C444);
}

uint64_t sub_10001C534(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001881C(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001C598()
{
  return sub_1000188E4(&qword_100107A08, (void (*)(uint64_t))&type metadata accessor for NoticesDataSource);
}

void sub_10001C5CC(uint64_t a1)
{
}

unint64_t sub_10001C614()
{
  unint64_t result = qword_1001060A8;
  if (!qword_1001060A8)
  {
    sub_100004D14(255, &qword_100106080, (uint64_t (*)(uint64_t))type metadata accessor for PersonalizedFeedDataSource, sub_10001AE10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for DelayedDataSource);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001060A8);
  }
  return result;
}

id sub_10001C6B0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = &v3[qword_1001068B0];
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((_OWORD *)v7 + 1) = xmmword_1000CE2D0;
  v3[qword_1001068B8] = 0;
  unint64_t v8 = (uint64_t *)&v3[qword_1001068C0];
  type metadata accessor for SidebarDataSourceItem();
  uint64_t v9 = v3;
  *unint64_t v8 = static SidebarDataSourceItem.summarySidebarItemIdentifier.getter();
  v8[1] = v10;
  *(void *)&v9[qword_1001068E0] = 0;
  *(void *)&v9[qword_1001068E8] = 0;
  *(void *)&v9[qword_1001068F0] = 0;
  Swift::Int v11 = &v9[qword_1001068F8];
  id v12 = [objc_allocWithZone((Class)type metadata accessor for ProfileGradientWithFadeView()) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v13 = (void *)ProfileGradientWithFadeView.gradientView.getter();
  dispatch thunk of ProfileGradientView.delayAnimation.setter();

  *Swift::Int v11 = v12;
  v11[1] = &protocol witness table for ProfileGradientWithFadeView;
  *(void *)&v9[qword_100106900] = 0;
  v9[qword_100106910] = 0;
  sub_10001D360(a1, (uint64_t)&v9[qword_1001068D0]);
  *(void *)&v9[qword_1001068C8] = a2;
  sub_10001D360(a3, (uint64_t)&v9[qword_1001068D8]);
  uint64_t v39 = type metadata accessor for EmptyGradientColorProvider();
  uint64_t v40 = &protocol witness table for EmptyGradientColorProvider;
  sub_100004F38((uint64_t *)&v38);
  id v14 = a2;
  EmptyGradientColorProvider.init()();
  sub_10001CD68(&v38, (uint64_t)&v9[qword_100106908]);

  v37.receiver = v9;
  v37.super_class = (Class)type metadata accessor for SummaryFeedViewController();
  id v15 = [super initWithCollectionViewLayout:0];
  sub_10001D360(a1, (uint64_t)&v38);
  sub_10001D360(a3, (uint64_t)v36);
  uint64_t v16 = type metadata accessor for SummaryFeedDataSourceProvider();
  uint64_t v17 = swift_allocObject();
  sub_10001CD68(&v38, v17 + 16);
  *(void *)(v17 + 56) = v14;
  sub_10001CD68(v36, v17 + 64);
  uint64_t v39 = v16;
  uint64_t v40 = (void *)sub_100019DF4(&qword_100106AC0, (void (*)(uint64_t))type metadata accessor for SummaryFeedDataSourceProvider);
  *(void *)&long long v38 = v17;
  id v18 = v14;
  id v19 = v15;
  dispatch thunk of CompoundDataSourceCollectionViewController.dataSourceProvider.setter();
  uint64_t v20 = self;
  id v21 = v19;
  id v22 = [v20 mainBundle];
  v41._object = (void *)0x80000001000D4C70;
  v23._countAndFlagsBits = 0x7972616D6D7553;
  v23._object = (void *)0xE700000000000000;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v41._countAndFlagsBits = 0xD000000000000011;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v41);

  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v21 setTitle:v25];

  id v26 = v21;
  id v27 = [v20 mainBundle];
  v42._object = (void *)0x80000001000D4C70;
  v28._countAndFlagsBits = 0x7972616D6D7553;
  v28._object = (void *)0xE700000000000000;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  v42._countAndFlagsBits = 0xD000000000000011;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v42);

  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = [self systemImageNamed:v30];

  id v32 = objc_allocWithZone((Class)UITabBarItem);
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v34 = [v32 initWithTitle:v33 image:v31 selectedImage:0];

  [v26 setTabBarItem:v34];
  _s6Health23OpenSleepScheduleIntentVwxx_0(a3);
  _s6Health23OpenSleepScheduleIntentVwxx_0(a1);
  return v26;
}

uint64_t sub_10001CB20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UIListContentConfiguration();
  __chkstk_darwin(v4 - 8);
  type metadata accessor for EditFavoritesCollectionViewController();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v6 = self;
  id v7 = [v6 bundleForClass:ObjCClassFromMetadata];
  v17._countAndFlagsBits = 0xD000000000000019;
  v17._object = (void *)0x80000001000D29A0;
  v8._countAndFlagsBits = 0x44454E4E4950;
  v8._object = (void *)0xE600000000000000;
  v9._countAndFlagsBits = 0x64656E6E6950;
  v9._object = (void *)0xE600000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v17);

  id v10 = [v6 bundleForClass:ObjCClassFromMetadata];
  v18._object = (void *)0x80000001000D29C0;
  v11._countAndFlagsBits = 1414087749;
  v11._object = (void *)0xE400000000000000;
  v12._countAndFlagsBits = 1953064005;
  v12._object = (void *)0xE400000000000000;
  v18._countAndFlagsBits = 0xD000000000000010;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v18);

  sub_10001D360(a2, (uint64_t)v16);
  sub_10001D360(a1, (uint64_t)v15);
  uint64_t v13 = swift_allocObject();
  sub_10001CD68(v16, v13 + 16);
  sub_10001CD68(v15, v13 + 56);
  static UIListContentConfiguration.extraProminentInsetGroupedHeader()();
  type metadata accessor for HeaderItem();
  swift_allocObject();
  return HeaderItem.init(title:buttonText:buttonWasTapped:configuration:automationIdentifier:)();
}

uint64_t sub_10001CD68(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *sub_10001CD80()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v24 = *(void *)(v0 - 8);
  uint64_t v25 = v0;
  __chkstk_darwin();
  long long v2 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DCEC(0, &qword_100105998, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v24 - v3;
  uint64_t v5 = type metadata accessor for ArrayDataSourceSection();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  Swift::String v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of PrimarySecondaryDataSource.currentDataSource.getter();
  swift_getObjectType();
  uint64_t v9 = SnapshotDataSource.numberOfSections.getter();
  swift_unknownObjectRelease();
  if (v9 != 1)
  {
LABEL_7:
    static Logger.pinnedContent.getter();
    swift_retain_n();
    Swift::String v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      v28[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      uint64_t v14 = _typeName(_:qualified:)();
      v26[0] = sub_100018DA0(v14, v15, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2080;
      dispatch thunk of PrimarySecondaryDataSource.currentDataSource.getter();
      swift_getObjectType();
      uint64_t v16 = SnapshotDataSource.numberOfSections.getter();
      swift_unknownObjectRelease();
      v26[0] = v16;
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      v26[0] = sub_100018DA0(v17, v18, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%s]: Unexpected number of sections when resolving gradient content: %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v2, v25);
    return &_swiftEmptyArrayStorage;
  }
  dispatch thunk of PrimarySecondaryDataSource.currentDataSource.getter();
  swift_getObjectType();
  uint64_t v10 = SnapshotDataSource.contentsAsArray()();
  swift_unknownObjectRelease();
  if (*(void *)(v10 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v4, v10 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100044AD8((uint64_t)v4);
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  uint64_t v20 = ArrayDataSourceSection.arrangedItems.getter();
  id v19 = &_swiftEmptyArrayStorage;
  unint64_t v29 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    uint64_t v25 = v20;
    uint64_t v22 = v20 + 32;
    do
    {
      sub_10001D360(v22, (uint64_t)v28);
      sub_10001D360((uint64_t)v28, (uint64_t)v26);
      sub_10001D414(0, (unint64_t *)&qword_100106A40);
      type metadata accessor for FeedItem();
      if ((swift_dynamicCast() & 1) == 0) {
        uint64_t v27 = 0;
      }
      _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v28);
      if (v27)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v22 += 40;
      --v21;
    }
    while (v21);
    id v19 = (void *)v29;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v19;
}

uint64_t sub_10001D360(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001D3C4(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10001D414(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10001D464@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v48 = a1;
  uint64_t v56 = a3;
  uint64_t v3 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v54 = *(void *)(v3 - 8);
  uint64_t v55 = v3;
  __chkstk_darwin(v3);
  uint64_t v53 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v51 = *(void *)(v5 - 8);
  uint64_t v52 = v5;
  __chkstk_darwin(v5);
  uint64_t v50 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DCEC(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v7 - 8);
  Swift::Int v47 = (char *)v43 - v8;
  sub_10001DCEC(0, &qword_100104AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v9 - 8);
  uint64_t v44 = (char *)v43 - v10;
  uint64_t v46 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions();
  uint64_t v45 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  os_log_type_t v12 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UICellAccessory.DisplayedState();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for UIListContentConfiguration();
  v43[0] = *(void *)(v57 - 8);
  uint64_t v17 = v43[0];
  __chkstk_darwin(v57);
  id v19 = (char *)v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentConfigurationCollectionViewListCell();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v21 = [self bundleForClass:ObjCClassFromMetadata];
  static UIListContentConfiguration.cell()();
  id v22 = v21;
  NSString v23 = String._bridgeToObjectiveC()();
  id v24 = [self imageNamed:v23 inBundle:v22];

  UIListContentConfiguration.image.setter();
  v25._countAndFlagsBits = 0xD000000000000014;
  v65._countAndFlagsBits = 0xD00000000000001FLL;
  v65._object = (void *)0x80000001000D28C0;
  v25._object = (void *)0x80000001000D2880;
  v26._object = (void *)0x80000001000D28A0;
  v26._countAndFlagsBits = 0xD000000000000014;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v25, (Swift::String_optional)0, (NSBundle)v22, v26, v65);
  UIListContentConfiguration.text.setter();
  uint64_t v61 = 0;
  unint64_t v62 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  uint64_t v27 = _typeName(_:qualified:)();
  unint64_t v29 = v28;
  swift_bridgeObjectRelease();
  uint64_t v61 = v27;
  unint64_t v62 = v29;
  v30._object = (void *)0x80000001000D28E0;
  v30._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v30);
  v43[2] = v61;
  v43[1] = v62;
  uint64_t v31 = v57;
  uint64_t v63 = v57;
  uint64_t v64 = &protocol witness table for UIListContentConfiguration;
  id v32 = sub_100004F38(&v61);
  (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 16))(v32, v19, v31);
  sub_10001DCEC(0, &qword_100104AC0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for UICellAccessory();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000CBFD0;
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for UICellAccessory.DisplayedState.always(_:), v13);
  uint64_t v33 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v44, 1, 1, v33);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)();
  static UICellAccessory.disclosureIndicator(displayed:options:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v46);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  sub_10001D360(v48, (uint64_t)v60);
  uint64_t v34 = swift_allocObject();
  uint64_t v35 = v49;
  *(void *)(v34 + 16) = v49;
  sub_10001CD68(v60, v34 + 24);
  uint64_t v36 = type metadata accessor for UIBackgroundConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v47, 1, 1, v36);
  uint64_t v58 = 0;
  unint64_t v59 = 0xE000000000000000;
  id v37 = v35;
  _StringGuts.grow(_:)(20);
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v40 = v39;
  swift_bridgeObjectRelease();
  uint64_t v58 = v38;
  unint64_t v59 = v40;
  v41._object = (void *)0x80000001000D2900;
  v41._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v41);
  (*(void (**)(char *, void, uint64_t))(v51 + 104))(v50, enum case for CellDeselectionBehavior.default(_:), v52);
  (*(void (**)(char *, void, uint64_t))(v54 + 104))(v53, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v55);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();

  return (*(uint64_t (**)(char *, uint64_t))(v43[0] + 8))(v19, v57);
}

void sub_10001DCEC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_10001DD50(char a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  id v32 = a4;
  sub_10001E290(0, &qword_100104D78, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v5 + qword_100104FD8) = a1;
  *(void *)(v5 + qword_100104FE0) = a2;
  sub_10001E348(a3, v5 + qword_100108AC8);
  sub_10001E918();
  uint64_t v30 = v16;
  uint64_t v17 = swift_allocObject();
  long long v29 = xmmword_1000CC620;
  *(_OWORD *)(v17 + 16) = xmmword_1000CC620;
  type metadata accessor for Feed();
  id v31 = a2;
  *(void *)(v17 + 32) = static Feed.predicate(kind:associatedProfileIdentifier:feedPrefixKeyPath:)();
  uint64_t v35 = v17;
  specialized Array._endMutation()();
  uint64_t v33 = a3;
  sub_10001E348(a3, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1000209C0((uint64_t)v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    sub_10001E290(0, &qword_100105050, (uint64_t (*)(uint64_t))sub_10001E868, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1000CC0F0;
    sub_10001E254(0, &qword_100105040);
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_10001EFDC();
    *(void *)(v18 + 32) = 0x6164705565746164;
    *(void *)(v18 + 40) = 0xEB00000000646574;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    *(void *)(v18 + 96) = sub_10001E254(0, &qword_100105068);
    *(void *)(v18 + 104) = sub_10001EBE4();
    *(void *)(v18 + 72) = isa;
    NSPredicate.init(format:_:)();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  uint64_t v20 = (void *)static Feed.fetchRequest()();
  sub_10001E254(0, &qword_100105040);
  Class v21 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v22 = [self andPredicateWithSubpredicates:v21];

  [v20 setPredicate:v22];
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = v29;
  sub_10001E254(0, &qword_100105048);
  swift_getKeyPath();
  *(void *)(v23 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t v34 = v23;
  specialized Array._endMutation()();
  Class v24 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v20 setSortDescriptors:v24];

  id v25 = objc_allocWithZone((Class)NSFetchedResultsController);
  Swift::String v26 = v32;
  [v25 initWithFetchRequest:v20 managedObjectContext:v32 sectionNameKeyPath:0 cacheName:0];
  uint64_t v27 = JustObservingFetchedResultsControllerDataSource.init(frc:)();

  sub_1000209C0(v33);
  return v27;
}

uint64_t sub_10001E254(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_10001E290(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10001E2F4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10001E348(uint64_t a1, uint64_t a2)
{
  sub_10001E290(0, &qword_100104D78, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001E3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E3EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E40C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E41C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E42C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E43C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E44C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E45C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E46C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E47C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E48C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E49C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E4BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E4CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E50C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E51C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E52C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E53C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E54C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001E560()
{
  return swift_release();
}

uint64_t sub_10001E568()
{
  return swift_release();
}

uint64_t sub_10001E570()
{
  return swift_release();
}

uint64_t sub_10001E578()
{
  return swift_release();
}

uint64_t sub_10001E580()
{
  return swift_release();
}

uint64_t sub_10001E588()
{
  return swift_release();
}

uint64_t sub_10001E590()
{
  return swift_release();
}

uint64_t sub_10001E598()
{
  return swift_release();
}

uint64_t sub_10001E5A0()
{
  return swift_release();
}

uint64_t sub_10001E5A8()
{
  return swift_release();
}

uint64_t sub_10001E5B0()
{
  return swift_release();
}

uint64_t sub_10001E5B8()
{
  return swift_release();
}

uint64_t sub_10001E5C0()
{
  return swift_release();
}

uint64_t sub_10001E5C8()
{
  return swift_release();
}

uint64_t sub_10001E5D0()
{
  return swift_release();
}

uint64_t sub_10001E5D8()
{
  return swift_release();
}

uint64_t sub_10001E5E0()
{
  return swift_release();
}

uint64_t sub_10001E5E8()
{
  return swift_release();
}

uint64_t sub_10001E5F0()
{
  return swift_release();
}

uint64_t sub_10001E5F8()
{
  return swift_release();
}

uint64_t sub_10001E600()
{
  return swift_release();
}

uint64_t sub_10001E608()
{
  return swift_release();
}

uint64_t sub_10001E610()
{
  return swift_release();
}

uint64_t sub_10001E618()
{
  return swift_release();
}

uint64_t sub_10001E624(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001E68C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_10001E6EC()
{
  if (!qword_100107320)
  {
    type metadata accessor for CloudSyncRestoreState();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107320);
    }
  }
}

id sub_10001E744()
{
  return [v0 applicationState];
}

uint64_t sub_10001E754(unint64_t *a1)
{
  return sub_10000C768(a1);
}

id sub_10001E75C()
{
  return *(id *)(*v0 + qword_1001068C8);
}

uint64_t sub_10001E770(uint64_t a1)
{
  return sub_100007E78(a1);
}

uint64_t sub_10001E77C(char *a1)
{
  return sub_1000115B8(a1);
}

uint64_t type metadata accessor for IntroFlowManager()
{
  uint64_t result = qword_100105CF8;
  if (!qword_100105CF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unsigned char *sub_10001E7D0@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*result & 1) == 0;
  return result;
}

uint64_t sub_10001E7F4(uint64_t a1)
{
  return sub_100004B68(a1);
}

const char *sub_10001E7FC()
{
  return "dateUpdated";
}

void sub_10001E81C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_10001E868()
{
  unint64_t result = qword_100105058;
  if (!qword_100105058)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_100105058);
  }
  return result;
}

unint64_t sub_10001E8C0()
{
  unint64_t result = qword_100104178;
  if (!qword_100104178)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_100104178);
  }
  return result;
}

void sub_10001E918()
{
  if (!qword_1001057E0)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001057E0);
    }
  }
}

void sub_10001E974()
{
  if (!qword_100104FC0)
  {
    sub_100003DD8(255, &qword_100104FC8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104FC0);
    }
  }
}

void sub_10001E9E8()
{
  if (!qword_100104AA8)
  {
    sub_10002F260(255, &qword_100104AB0);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104AA8);
    }
  }
}

uint64_t sub_10001EA50(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      sub_10001D414(0, a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001EB64(uint64_t a1)
{
  sub_10001E81C(0, &qword_100106608, (uint64_t)&type metadata for AnyHashable, (uint64_t (*)(void, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10001EBE4()
{
  unint64_t result = qword_100105070;
  if (!qword_100105070)
  {
    sub_10001E254(255, &qword_100105068);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105070);
  }
  return result;
}

id sub_10001EC4C()
{
  id result = sub_10000D370();
  qword_100108A48 = (uint64_t)result;
  return result;
}

unint64_t sub_10001EC6C()
{
  unint64_t result = qword_100105338;
  if (!qword_100105338)
  {
    sub_10001E254(255, (unint64_t *)&qword_100105328);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105338);
  }
  return result;
}

void sub_10001ECD4()
{
  if (!qword_100105340)
  {
    sub_10001E254(255, (unint64_t *)&qword_100105328);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100105340);
    }
  }
}

unint64_t sub_10001ED50()
{
  unint64_t result = qword_100107C78;
  if (!qword_100107C78)
  {
    sub_10001E254(255, &qword_100107C80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107C78);
  }
  return result;
}

uint64_t sub_10001EDB8(uint64_t a1)
{
  return sub_100004D94(a1, &qword_1001065D0);
}

uint64_t sub_10001EDCC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10001EDD8(uint64_t a1, int a2)
{
  uint64_t v2 = *(void (**)(BOOL))(a1 + 32);
  BOOL v3 = a2 != 0;
  swift_retain();
  v2(v3);

  return swift_release();
}

void sub_10001EE30(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = sub_10001E254(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_10001EE98(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_10001E254(255, a3);
    unint64_t v4 = type metadata accessor for Array();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_10001EEF0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_10001EF54()
{
  unint64_t result = qword_100105A10;
  if (!qword_100105A10)
  {
    sub_10000C070(255, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105A10);
  }
  return result;
}

unint64_t sub_10001EFDC()
{
  unint64_t result = qword_100105060;
  if (!qword_100105060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105060);
  }
  return result;
}

void sub_10001F030()
{
  if (!qword_100105D08)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105D08);
    }
  }
}

unint64_t sub_10001F088()
{
  unint64_t result = qword_100106E70;
  if (!qword_100106E70)
  {
    sub_100017378(255, &qword_100106E60, (uint64_t (*)(void, void *))&type metadata accessor for Published.Publisher);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106E70);
  }
  return result;
}

void sub_10001F0FC()
{
  if (!qword_1001060E0)
  {
    sub_100004D14(255, &qword_1001060E8, (uint64_t (*)(uint64_t))type metadata accessor for PersonalizedFeedDataSource, sub_10001AE10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for DelayedDataSource.DataSourceState);
    unint64_t v0 = type metadata accessor for Published.Publisher();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001060E0);
    }
  }
}

void sub_10001F198()
{
  if (!qword_1001040E8)
  {
    sub_10001EE30(255, (unint64_t *)&unk_100106A80, &qword_1001040F0, (uint64_t)UIColor_ptr, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    unint64_t v0 = type metadata accessor for CurrentValueSubject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001040E8);
    }
  }
}

void sub_10001F22C()
{
  if (!qword_100106A90)
  {
    sub_1000082B4(255, &qword_1001040F8, (uint64_t (*)(uint64_t))&type metadata accessor for FeedItem, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    unint64_t v0 = type metadata accessor for CurrentValueSubject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106A90);
    }
  }
}

void sub_10001F2C4()
{
  if (!qword_1001060D0)
  {
    unint64_t v0 = type metadata accessor for AnyPublisher();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001060D0);
    }
  }
}

uint64_t sub_10001F32C()
{
  return sub_10001AD80(&qword_100106EA0, (void (*)(uint64_t))sub_10001F2C4);
}

unint64_t sub_10001F360()
{
  unint64_t result = qword_1001060D8;
  if (!qword_1001060D8)
  {
    sub_100004D14(255, &qword_1001060C8, (uint64_t (*)(uint64_t))sub_10001F2C4, sub_10001F32C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for Publishers.Drop);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001060D8);
  }
  return result;
}

void sub_10001F3FC()
{
  if (!qword_100106E68)
  {
    sub_100017378(255, &qword_100106E60, (uint64_t (*)(void, void *))&type metadata accessor for Published.Publisher);
    sub_10001F088();
    unint64_t v0 = type metadata accessor for Publishers.Map();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106E68);
    }
  }
}

uint64_t sub_10001F484()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for LoadingPersonalizedHighlightsDataSource()
{
  uint64_t result = qword_1001077E0;
  if (!qword_1001077E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001F514()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SummaryPinnedContentDataSource(uint64_t a1)
{
  return sub_1000172F0(a1, (uint64_t *)&unk_100105940);
}

uint64_t sub_10001F590(void *a1)
{
  return sub_1000074B8(a1);
}

uint64_t sub_10001F5B4()
{
  return swift_initClassMetadata2();
}

void sub_10001F608(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
}

uint64_t sub_10001F62C()
{
  return swift_initClassMetadata2();
}

void sub_10001F6C4(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  sub_100007BA4(a3);
}

void sub_10001F718(void *a1)
{
  id v1 = a1;
  sub_1000128F4();
}

void sub_10001F764()
{
  sub_10000E670();
  if (v0 <= 0x3F)
  {
    sub_10000E6C8();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for IntroFlowThrottledCheck()
{
  uint64_t result = qword_100106238;
  if (!qword_100106238) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for CloudSyncStartupManager()
{
  uint64_t result = qword_100104560;
  if (!qword_100104560) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001F8D4(char a1, uint64_t a2)
{
  return sub_10000FA18(a1, a2, v2);
}

uint64_t sub_10001F8DC()
{
  return sub_100004920();
}

void sub_10001F8E4()
{
  sub_1000207E0(319);
  if (v0 <= 0x3F)
  {
    sub_10001E6EC();
    if (v1 <= 0x3F) {
      swift_initClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for SummaryFeedDataSource(uint64_t a1)
{
  return sub_1000172F0(a1, (uint64_t *)&unk_100107900);
}

uint64_t sub_10001FA1C(uint64_t a1)
{
  return sub_100003FC4(a1);
}

uint64_t sub_10001FA24()
{
  return sub_10000D2C4(v0 + 16, *(void **)(v0 + 56), 4);
}

uint64_t sub_10001FA48()
{
  return sub_10000D2C4(v0 + 16, *(void **)(v0 + 56), 0);
}

void sub_10001FAD8()
{
  sub_10001E290(319, &qword_100104D78, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t type metadata accessor for FeedObjectDataSource()
{
  uint64_t result = qword_100104FE8;
  if (!qword_100104FE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001FC00(uint64_t a1)
{
  sub_100013BC8(0, (unint64_t *)&qword_100106EA8, (uint64_t (*)(uint64_t))sub_10001FC8C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10001FC8C()
{
  unint64_t result = qword_100106EB0;
  if (!qword_100106EB0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_100106EB0);
  }
  return result;
}

void sub_10001FCE4()
{
  sub_1000120A4(319, &qword_100104C38, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F)
  {
    sub_1000208D0(319, (unint64_t *)&qword_100104C40, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for UserDefault);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for AppDeepLinkHandler(uint64_t a1)
{
  return sub_1000172F0(a1, (uint64_t *)&unk_100104C28);
}

void sub_10001FE3C()
{
  sub_100020968();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for LifecycleManager()
{
  uint64_t result = qword_100107AB0;
  if (!qword_100107AB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001FF44()
{
  type metadata accessor for LifecycleManager();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_100007D30();
  qword_100108D90 = v0;
  return result;
}

uint64_t sub_10001FF84()
{
  return sub_100011014(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10001FF8C()
{
  sub_10000BA9C(*(void *)(v0 + 16));
}

void sub_10001FF94()
{
  sub_10001F030();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_100020054()
{
  return sub_100004A10(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t type metadata accessor for SceneDelegate()
{
  return self;
}

void sub_10002010C()
{
  sub_100006A28(*(void *)(v0 + 16));
}

uint64_t sub_10002016C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for HighlightsFeedWithShowAllHighlightsDataSource(uint64_t a1)
{
  return sub_1000172F0(a1, (uint64_t *)&unk_100107970);
}

uint64_t type metadata accessor for DownloadingDataDataSource(uint64_t a1)
{
  return sub_1000172F0(a1, (uint64_t *)&unk_1001058F0);
}

uint64_t sub_100020214()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for GetMoreFromHealthDataSource()
{
  uint64_t result = qword_100106020;
  if (!qword_100106020) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000202C0()
{
  return sub_100005F20(v0 + 16, *(void **)(v0 + 56));
}

void sub_1000202CC()
{
  if (!qword_100104AA0)
  {
    unint64_t v0 = type metadata accessor for NSDiffableDataSourceSnapshot();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104AA0);
    }
  }
}

unint64_t sub_100020334()
{
  unint64_t result = qword_1001051F0;
  if (!qword_1001051F0)
  {
    sub_10001D414(255, (unint64_t *)&qword_1001051F8);
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1001051F0);
  }
  return result;
}

void sub_100020384()
{
  if (!qword_1001079E8)
  {
    type metadata accessor for FeedObjectDataSource();
    type metadata accessor for LoadingPersonalizedHighlightsDataSource();
    sub_1000188E4(&qword_1001079F0, (void (*)(uint64_t))type metadata accessor for FeedObjectDataSource);
    unint64_t v0 = type metadata accessor for PrimarySecondaryDataSource();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001079E8);
    }
  }
}

unint64_t sub_100020440()
{
  unint64_t result = qword_1001060B8;
  if (!qword_1001060B8)
  {
    sub_1000147D8(255, &qword_100106090, (uint64_t (*)(uint64_t))&type metadata accessor for MutableArrayDataSourceWithLayout, (uint64_t)&protocol witness table for MutableArrayDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001060B8);
  }
  return result;
}

unint64_t sub_1000204D0()
{
  unint64_t result = qword_1001060B0;
  if (!qword_1001060B0)
  {
    sub_1000147D8(255, &qword_100106090, (uint64_t (*)(uint64_t))&type metadata accessor for MutableArrayDataSourceWithLayout, (uint64_t)&protocol witness table for MutableArrayDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001060B0);
  }
  return result;
}

unint64_t sub_100020570()
{
  unint64_t result = qword_100106098;
  if (!qword_100106098)
  {
    sub_100004D14(255, &qword_100106080, (uint64_t (*)(uint64_t))type metadata accessor for PersonalizedFeedDataSource, sub_10001AE10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for DelayedDataSource);
    sub_10001AD80(&qword_1001060A0, (void (*)(uint64_t))type metadata accessor for PersonalizedFeedDataSource);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106098);
  }
  return result;
}

uint64_t sub_100020654(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002069C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000206E4()
{
  if (!qword_100104650)
  {
    sub_100008318(255, (unint64_t *)&qword_100107320, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100104650);
    }
  }
}

uint64_t sub_100020778(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void sub_1000207E0(uint64_t a1)
{
}

void sub_100020814(uint64_t a1)
{
}

unint64_t sub_100020848()
{
  unint64_t result = qword_100104648;
  if (!qword_100104648)
  {
    sub_100008318(255, &qword_1001040E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LegacyObservable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100104648);
  }
  return result;
}

void sub_1000208D0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_10002091C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_100020968()
{
  if (!qword_100104C40)
  {
    unint64_t v0 = type metadata accessor for UserDefault();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104C40);
    }
  }
}

uint64_t sub_1000209C0(uint64_t a1)
{
  sub_10001E290(0, &qword_100104D78, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100020A4C(uint64_t a1)
{
}

uint64_t sub_100020A80()
{
  return sub_100020AA8();
}

uint64_t sub_100020A94()
{
  return sub_100020AA8();
}

uint64_t sub_100020AA8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100020B18(uint64_t a1, uint64_t a2, void *a3)
{
  v22[1] = a1;
  sub_1000082B4(0, &qword_100104180, (uint64_t (*)(uint64_t))sub_100021950, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v22 - v8;
  sub_1000082B4(0, &qword_100104158, (uint64_t (*)(uint64_t))sub_1000218B4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v22 - v13;
  uint64_t v15 = v3 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel__mostRecentSentInstruction;
  uint64_t v23 = 0;
  char v24 = 0;
  sub_1000218B4();
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v15, v14, v11);
  uint64_t v16 = v3 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel__instructionsQueryResult;
  uint64_t v23 = _swiftEmptyArrayStorage;
  char v24 = 0;
  sub_100021950();
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v16, v9, v6);
  *(void *)(v3 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_notificationInstructionQuery) = 0;
  *(void *)(v3 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_healthStore) = a3;
  id v17 = objc_allocWithZone((Class)HKNotificationSyncStore);
  id v18 = a3;
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v20 = [v17 initWithClientIdentifier:v19 healthStore:v18];

  *(void *)(v3 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_notificationSyncStore) = v20;
  return v3;
}

uint64_t sub_100020DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  return _swift_task_switch(sub_100020DDC, 0, 0);
}

uint64_t sub_100020DDC()
{
  uint64_t v1 = v0[18];
  id v2 = sub_100022468(v0[15], v0[16], v0[17]);
  v0[19] = v2;
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_notificationSyncStore);
  v0[2] = v0;
  v0[3] = sub_100020EF4;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100021180;
  v0[13] = &unk_1000F5460;
  v0[14] = v4;
  [v3 sendNotificationInstruction:v2 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100020EF4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    id v2 = sub_1000210B8;
  }
  else {
    id v2 = sub_100021004;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100021004()
{
  uint64_t v1 = *(void *)(v0 + 152);
  swift_getKeyPath();
  swift_getKeyPath();
  *(void *)(v0 + 80) = v1;
  *(unsigned char *)(v0 + 88) = 0;
  swift_retain();
  static Published.subscript.setter();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000210B8()
{
  id v2 = *(void **)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  swift_willThrow();

  swift_getKeyPath();
  swift_getKeyPath();
  *(void *)(v0 + 80) = v1;
  *(unsigned char *)(v0 + 88) = 1;
  swift_retain();
  static Published.subscript.setter();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100021180(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    a1 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(a1);
  }
  if (!a3)
  {
    __break(1u);
    return _swift_continuation_throwingResume(a1);
  }
  sub_10001E8C0();
  uint64_t v5 = swift_allocError();
  *uint64_t v6 = a3;
  id v7 = a3;

  return _swift_continuation_throwingResumeWithError(v3, v5);
}

uint64_t sub_10002121C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    swift_errorRetain();
  }
  else
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
  }
  return static Published.subscript.setter();
}

uint64_t sub_100021338()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel__mostRecentSentInstruction;
  sub_1000082B4(0, &qword_100104158, (uint64_t (*)(uint64_t))sub_1000218B4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel__instructionsQueryResult;
  sub_1000082B4(0, &qword_100104180, (uint64_t (*)(uint64_t))sub_100021950, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_1000214A8@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for NotificationSyncStoreModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of AllHealthDataDataSource.$__lazy_storage_$_firstRestoreState@<X0>(uint64_t a1@<X8>)
{
  sub_1000082B4(0, &qword_1001040E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LegacyObservable);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t variable initialization expression of SummaryPinnedContentGradientColorProvider.colors()
{
  return sub_10002164C((void (*)(void))sub_10001F198);
}

void *variable initialization expression of SummaryPinnedContentGradientColorProvider.cancellables()
{
  return &_swiftEmptySetSingleton;
}

uint64_t variable initialization expression of DownloadingDataDataSource.downloadingDataItem()
{
  if (qword_100103FF0 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();

  return EmptyStateCollectionViewCellItem.init(title:showSpinner:)();
}

uint64_t variable initialization expression of SummaryPinnedContentDataSource.pinnedFeedItemsPublisher()
{
  return sub_10002164C((void (*)(void))sub_10001F22C);
}

uint64_t sub_10002164C(void (*a1)(void))
{
  return CurrentValueSubject.init(_:)();
}

uint64_t variable initialization expression of SummaryPinnedContentDataSource.pinnedContentChangesCancellable()
{
  return 0;
}

uint64_t variable initialization expression of AllHealthDataViewController.providedPresentation@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for Presentation.showAllData(_:);
  uint64_t v3 = type metadata accessor for Presentation();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_100021720()
{
  return type metadata accessor for NotificationSyncStoreModel();
}

uint64_t type metadata accessor for NotificationSyncStoreModel()
{
  uint64_t result = qword_100104140;
  if (!qword_100104140) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100021774()
{
  sub_1000082B4(319, &qword_100104158, (uint64_t (*)(uint64_t))sub_1000218B4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  if (v0 <= 0x3F)
  {
    sub_1000082B4(319, &qword_100104180, (uint64_t (*)(uint64_t))sub_100021950, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1000218B4()
{
  if (!qword_100104160)
  {
    sub_10001EE30(255, &qword_100104168, &qword_100104170, (uint64_t)HKNotificationInstruction_ptr, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    sub_10001E8C0();
    unint64_t v0 = type metadata accessor for Result();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104160);
    }
  }
}

void sub_100021950()
{
  if (!qword_100104188)
  {
    sub_10001EE30(255, &qword_100104190, (unint64_t *)&qword_100104198, (uint64_t)HKNotificationInstructionDiagnosticDescription_ptr, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    sub_10001E8C0();
    unint64_t v0 = type metadata accessor for Result();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104188);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PluginPPT(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithTake for PluginPPT(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100021A30(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100021A50(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for HKDisplayCategoryIdentifier(uint64_t a1)
{
}

uint64_t sub_100021AA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100021AF4(a1);
}

uint64_t sub_100021AB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100021BA0(a1, a2, a3, a4, (uint64_t)&unk_1000CB4A0, (uint64_t)&unk_1000CB4C8, (void (*)(uint64_t, uint64_t))sub_100022644);
}

uint64_t sub_100021AE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100021AF4(a1);
}

uint64_t sub_100021AF4@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_100021B78(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100021BA0(a1, a2, a3, a4, (uint64_t)&unk_1000CB4E8, (uint64_t)&unk_1000CB510, (void (*)(uint64_t, uint64_t))sub_100022650);
}

uint64_t sub_100021BA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t v8 = *a1;
  uint64_t v9 = *((unsigned __int8 *)a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  a7(v8, v9);
  swift_retain();
  return static Published.subscript.setter();
}

BOOL sub_100021C34(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100021C48(uint64_t a1, uint64_t a2)
{
  return sub_1000222D0(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100021C74(uint64_t a1, uint64_t a2)
{
  return sub_1000222D0(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

void *sub_100021C8C()
{
  return &protocol witness table for ObservableObjectPublisher;
}

Swift::Int sub_100021C98()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100021CE0()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100021D0C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100021D50(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100021DC8(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100021E48@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void *sub_100021E90@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100021EA0(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100021EB0(uint64_t a1)
{
  uint64_t v2 = sub_100022778(&qword_1001065F0, type metadata accessor for LaunchOptionsKey);
  uint64_t v3 = sub_100022778(&qword_100104480, type metadata accessor for LaunchOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100021F6C(uint64_t a1)
{
  uint64_t v2 = sub_100022778(&qword_100104488, type metadata accessor for OpenURLOptionsKey);
  uint64_t v3 = sub_100022778(&qword_100104490, type metadata accessor for OpenURLOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100022028@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100022070@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10002209C(uint64_t a1)
{
  uint64_t v2 = sub_100022778(&qword_100104498, type metadata accessor for Mode);
  uint64_t v3 = sub_100022778(&qword_1001044A0, type metadata accessor for Mode);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100022158(uint64_t a1)
{
  uint64_t v2 = sub_100022778(&qword_100104508, type metadata accessor for HKCategoryTypeIdentifier);
  uint64_t v3 = sub_100022778(&qword_100104510, type metadata accessor for HKCategoryTypeIdentifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100022214(uint64_t a1)
{
  uint64_t v2 = sub_100022778(&qword_1001044F8, type metadata accessor for HKQuantityTypeIdentifier);
  uint64_t v3 = sub_100022778(&qword_100104500, type metadata accessor for HKQuantityTypeIdentifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000222D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100022314()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100022368()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000223DC()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

id sub_100022468(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v20 - v11;
  if (a3)
  {
    uint64_t v13 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v13 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v13) {
      swift_bridgeObjectRetain();
    }
  }
  Date.init()();
  Date.addingTimeInterval(_:)();
  id v14 = objc_allocWithZone((Class)HKNotificationInstruction);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v17 = [v14 initWithAction:a1 categoryIdentifier:v15 expirationDate:isa];

  id v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v10, v6);
  v18(v12, v6);
  return v17;
}

id sub_100022644(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

uint64_t sub_100022650(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

void type metadata accessor for UNAuthorizationStatus(uint64_t a1)
{
}

void type metadata accessor for Column(uint64_t a1)
{
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
}

void type metadata accessor for OpenURLOptionsKey(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceSizeClass(uint64_t a1)
{
}

void type metadata accessor for Mode(uint64_t a1)
{
}

void type metadata accessor for HKEmergencyOnboardingStatus(uint64_t a1)
{
}

uint64_t sub_1000226E8()
{
  return sub_100022778(&qword_1001043D0, type metadata accessor for Mode);
}

uint64_t sub_100022730()
{
  return sub_100022778(&qword_1001043D8, type metadata accessor for Mode);
}

uint64_t sub_100022778(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000227C0()
{
  return sub_100022778(&qword_1001043E0, type metadata accessor for Mode);
}

uint64_t sub_100022808()
{
  return sub_100022778(&qword_1001043E8, type metadata accessor for OpenURLOptionsKey);
}

uint64_t sub_100022850()
{
  return sub_100022778(&qword_1001043F0, type metadata accessor for OpenURLOptionsKey);
}

uint64_t sub_100022898()
{
  return sub_100022778(&qword_1001043F8, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_1000228E0()
{
  return sub_100022778(&qword_100104400, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_100022928()
{
  return sub_100022778(&qword_100104408, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_100022970()
{
  return sub_100022778(&qword_100104410, type metadata accessor for OpenURLOptionsKey);
}

uint64_t sub_1000229B8()
{
  return sub_100022778(&qword_100104418, type metadata accessor for UIUserInterfaceSizeClass);
}

void type metadata accessor for HKTimeScope(uint64_t a1)
{
}

void type metadata accessor for _HKDataTypeCode(uint64_t a1)
{
}

void type metadata accessor for HKQuantityTypeIdentifier(uint64_t a1)
{
}

void type metadata accessor for HKCategoryTypeIdentifier(uint64_t a1)
{
}

void sub_100022A50(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_100022A98()
{
  return sub_100022778(&qword_1001044C8, type metadata accessor for HKCategoryTypeIdentifier);
}

uint64_t sub_100022AE0()
{
  return sub_100022778(&qword_1001044D0, type metadata accessor for HKCategoryTypeIdentifier);
}

uint64_t sub_100022B28()
{
  return sub_100022778(&qword_1001044D8, type metadata accessor for HKCategoryTypeIdentifier);
}

uint64_t sub_100022B70()
{
  return sub_100022778(&qword_1001044E0, type metadata accessor for HKQuantityTypeIdentifier);
}

uint64_t sub_100022BB8()
{
  return sub_100022778(&qword_1001044E8, type metadata accessor for HKQuantityTypeIdentifier);
}

uint64_t sub_100022C00()
{
  return sub_100022778(&qword_1001044F0, type metadata accessor for HKQuantityTypeIdentifier);
}

uint64_t sub_100022C5C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_notificationCenterObserver);
  if (v1)
  {
    uint64_t v2 = self;
    swift_unknownObjectRetain();
    id v3 = [v2 defaultCenter];
    [v3 removeObserver:v1];
    swift_unknownObjectRelease();
  }
  uint64_t v4 = v0 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_observable;
  sub_100008318(0, &qword_1001040E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LegacyObservable);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_100008AF8(v0 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_lastKnownFirstRestoreState);

  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100022DC4()
{
  return type metadata accessor for CloudSyncStartupManager();
}

uint64_t sub_100022DCC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100022E04(uint64_t a1)
{
  sub_1000206E4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100022E64(uint64_t a1)
{
  uint64_t v52 = a1;
  uint64_t v47 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v44 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000262C8(0, &qword_100104730, (uint64_t (*)(void))sub_100025C18, (uint64_t)&type metadata for OpenDataTypeIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v53 = v2;
  uint64_t v54 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v43 - v4;
  sub_1000262C8(0, &qword_100104738, (uint64_t (*)(void))sub_100025C18, (uint64_t)&type metadata for OpenDataTypeIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase.StringInterpolation);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v50 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v48 = (char *)v43 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v46 = (char *)v43 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v43[2] = (char *)v43 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  __chkstk_darwin(v15);
  sub_100025C18();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v16._countAndFlagsBits = 0x206E65704FLL;
  v16._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  swift_getKeyPath();
  v43[1] = sub_100026274();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v17._countAndFlagsBits = 0x6174616420;
  v17._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v49 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v18 = v54 + 8;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v54 + 8);
  v51(v5, v53);
  uint64_t v54 = v18;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v19._countAndFlagsBits = 0x206E65704FLL;
  v19._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v20._countAndFlagsBits = 0x6E69206174616420;
  v20._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  id v22 = v44;
  uint64_t v21 = v45;
  uint64_t v23 = v47;
  (*(void (**)(char *, void, uint64_t))(v45 + 104))(v44, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v47);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v23);
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v47 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v25 = v53;
  Swift::String v26 = v51;
  v51(v5, v53);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v27._countAndFlagsBits = 0x20656D20776F6853;
  v27._object = (void *)0xEB0000000020796DLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v28._countAndFlagsBits = 0x6174616420;
  v28._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v45 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v26(v5, v25);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v29._countAndFlagsBits = 0x20656D20656B6154;
  v29._object = (void *)0xEE0020796D206F74;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v30._countAndFlagsBits = 0x6174616420;
  v30._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v30);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v46 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v26(v5, v53);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v31._object = (void *)0x80000001000D1340;
  v31._countAndFlagsBits = 0xD000000000000011;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v31);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v32._countAndFlagsBits = 0x6174616420;
  v32._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v32);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v48 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v33 = v53;
  uint64_t v34 = v51;
  v51(v5, v53);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v35._countAndFlagsBits = 0xD000000000000013;
  v35._object = (void *)0x80000001000D1360;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v35);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v36._countAndFlagsBits = 0x3F6174616420;
  v36._object = (void *)0xE600000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v36);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v37 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v34(v5, v33);
  sub_100026330();
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_1000CBFC0;
  uint64_t v39 = v47;
  *(void *)(v38 + 32) = v49;
  *(void *)(v38 + 40) = v39;
  unint64_t v40 = v46;
  *(void *)(v38 + 48) = v45;
  *(void *)(v38 + 56) = v40;
  *(void *)(v38 + 64) = v48;
  *(void *)(v38 + 72) = v37;
  uint64_t v41 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v41;
}

uint64_t sub_100023730()
{
  uint64_t v0 = type metadata accessor for _AssistantIntent.Value();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  sub_100026274();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  sub_100025C18();
  _AssistantIntent.Value.init<A>(for:builder:)();
  uint64_t v4 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_100025DDC(0, &qword_1001046C0, (uint64_t (*)(uint64_t))sub_100025F5C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1000CBFD0;
  *(void *)(v5 + 32) = v4;
  uint64_t v6 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1000238C4()
{
  uint64_t v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  sub_100025DDC(0, &qword_1001046D0, (uint64_t (*)(uint64_t))sub_100025F90, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1000CBFC0;
  *(void *)(v6 + 32) = v0;
  *(void *)(v6 + 40) = v1;
  *(void *)(v6 + 48) = v2;
  *(void *)(v6 + 56) = v3;
  *(void *)(v6 + 64) = v4;
  *(void *)(v6 + 72) = v5;
  uint64_t v7 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_100023A20(uint64_t a1)
{
  uint64_t v62 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v68 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v61 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000262C8(0, &qword_100104708, (uint64_t (*)(void))sub_100025C6C, (uint64_t)&type metadata for OpenViewIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v66 = v3;
  uint64_t v67 = v4;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v51 - v5;
  sub_1000262C8(0, &qword_100104710, (uint64_t (*)(void))sub_100025C6C, (uint64_t)&type metadata for OpenViewIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase.StringInterpolation);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v56 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v51 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v52 = (char *)&v51 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  __chkstk_darwin(v14);
  unint64_t v15 = sub_100025C6C();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v16._countAndFlagsBits = 0x206E65704FLL;
  v16._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  swift_getKeyPath();
  uint64_t v59 = sub_100026070((unint64_t *)&qword_100104700, (void (*)(uint64_t))type metadata accessor for HealthViewEntity);
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v55 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v67 + 8);
  v67 += 8;
  id v60 = v18;
  v18(v6, v66);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v19._countAndFlagsBits = 0x206E65704FLL;
  v19._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  swift_getKeyPath();
  uint64_t v57 = a1;
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v20._countAndFlagsBits = 544106784;
  v20._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  unsigned int v58 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  uint64_t v21 = v68;
  id v22 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 104);
  uint64_t v64 = v68 + 104;
  Swift::String v65 = v22;
  uint64_t v23 = v61;
  uint64_t v24 = v62;
  ((void (*)(char *))v22)(v61);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v68 = v21 + 8;
  uint64_t v63 = v25;
  v25(v23, v24);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  unint64_t v51 = v15;
  uint64_t v53 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v27 = v66;
  Swift::String v28 = v60;
  v60(v6, v66);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v29._countAndFlagsBits = 0x20656D20656B6154;
  v29._object = (void *)0xEB00000000206F74;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v30._countAndFlagsBits = 544106784;
  v30._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v30);
  Swift::String v32 = v61;
  uint64_t v31 = v62;
  uint64_t v33 = v58;
  v65(v61, v58, v62);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v63(v32, v31);
  v34._countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v34);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v52 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v28(v6, v27);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v35._countAndFlagsBits = 0x20656D20776F6853;
  v35._object = (void *)0xEC00000020656874;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v35);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v36._countAndFlagsBits = 0x6E69206567617020;
  v36._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v36);
  uint64_t v37 = v61;
  uint64_t v38 = v33;
  uint64_t v39 = v62;
  v65(v61, v38, v62);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v63(v37, v39);
  v40._countAndFlagsBits = 0;
  v40._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v40);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v54 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v41 = v60;
  v60(v6, v66);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v42._countAndFlagsBits = 0x6568742077656956;
  v42._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v42);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v43._countAndFlagsBits = 0x6E69206567617020;
  v43._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v43);
  v65(v37, v58, v39);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v63(v37, v39);
  v44._countAndFlagsBits = 0;
  v44._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v44);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v45 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v41(v6, v66);
  sub_100026178();
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1000CBFE0;
  uint64_t v47 = v53;
  *(void *)(v46 + 32) = v55;
  *(void *)(v46 + 40) = v47;
  uint64_t v48 = v54;
  *(void *)(v46 + 48) = v52;
  *(void *)(v46 + 56) = v48;
  *(void *)(v46 + 64) = v45;
  uint64_t v49 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v49;
}

uint64_t sub_100024330(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HealthViewEntity();
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1000260B8(a1, (uint64_t)&v9 - v6);
  sub_1000260B8((uint64_t)v7, (uint64_t)v5);
  IntentParameter.wrappedValue.setter();
  return sub_10002611C((uint64_t)v7);
}

uint64_t sub_1000243F0()
{
  uint64_t v0 = type metadata accessor for _AssistantIntent.Value();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  sub_100026070((unint64_t *)&qword_100104700, (void (*)(uint64_t))type metadata accessor for HealthViewEntity);
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  sub_100025C6C();
  _AssistantIntent.Value.init<A>(for:builder:)();
  uint64_t v4 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_100025DDC(0, &qword_1001046C0, (uint64_t (*)(uint64_t))sub_100025F5C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1000CBFD0;
  *(void *)(v5 + 32) = v4;
  uint64_t v6 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1000245B4()
{
  uint64_t v16 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v15 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v14 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v13 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v12 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v6 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v7 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v8 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  sub_100025DDC(0, &qword_1001046D0, (uint64_t (*)(uint64_t))sub_100025F90, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1000CBFF0;
  *(void *)(v9 + 32) = v16;
  *(void *)(v9 + 40) = v15;
  *(void *)(v9 + 48) = v14;
  *(void *)(v9 + 56) = v13;
  *(void *)(v9 + 64) = v12;
  *(void *)(v9 + 72) = v0;
  *(void *)(v9 + 80) = v1;
  *(void *)(v9 + 88) = v2;
  *(void *)(v9 + 96) = v3;
  *(void *)(v9 + 104) = v4;
  *(void *)(v9 + 112) = v5;
  *(void *)(v9 + 120) = v6;
  *(void *)(v9 + 128) = v7;
  *(void *)(v9 + 136) = v8;
  uint64_t v10 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100024868(uint64_t a1)
{
  uint64_t v46 = a1;
  sub_1000262C8(0, &qword_1001046E0, (uint64_t (*)(void))sub_100025CC0, (uint64_t)&type metadata for OpenSearchIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase);
  uint64_t v56 = v1;
  uint64_t v54 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v39 - v2;
  uint64_t v52 = type metadata accessor for _AssistantIntent.PhraseToken();
  uint64_t v4 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000262C8(0, &qword_1001046E8, (uint64_t (*)(void))sub_100025CC0, (uint64_t)&type metadata for OpenSearchIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase.StringInterpolation);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v45 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  Swift::String v43 = (char *)&v39 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  __chkstk_darwin(v12);
  unint64_t v51 = sub_100025CC0();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v13._countAndFlagsBits = 0x20686372616553;
  v13._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v13);
  swift_getKeyPath();
  uint64_t v47 = sub_100026070(&qword_1001046B8, (void (*)(uint64_t))&type metadata accessor for StringSearchCriteria);
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v14._countAndFlagsBits = 544106784;
  v14._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v14);
  unsigned int v53 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  uint64_t v55 = *(void (**)(char *))(v4 + 104);
  uint64_t v15 = v52;
  v55(v6);
  uint64_t v48 = v4 + 104;
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v6, v15);
  uint64_t v49 = v16;
  uint64_t v50 = v4 + 8;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v44 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v54 + 8);
  v54 += 8;
  Swift::String v40 = v18;
  v18(v3, v56);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v19._countAndFlagsBits = 0x20686372616553;
  v19._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  ((void (*)(char *, void, uint64_t))v55)(v6, v53, v15);
  uint64_t v41 = v6;
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v16(v6, v15);
  v20._countAndFlagsBits = 0x20726F6620;
  v20._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v21);
  uint64_t v39 = v3;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v42 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v22 = v56;
  uint64_t v23 = v40;
  v40(v3, v56);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v24._countAndFlagsBits = 0x20646E6946;
  v24._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v25._countAndFlagsBits = 544106784;
  v25._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v25);
  Swift::String v26 = v41;
  uint64_t v27 = v52;
  ((void (*)(char *, void, uint64_t))v55)(v41, v53, v52);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v49(v26, v27);
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  Swift::String v29 = v39;
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  Swift::String v43 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v23(v29, v22);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v30._countAndFlagsBits = 0x726F66206B6F6F4CLL;
  v30._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v30);
  swift_getKeyPath();
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  swift_release();
  v31._countAndFlagsBits = 544106784;
  v31._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v31);
  uint64_t v32 = v52;
  ((void (*)(char *, void, uint64_t))v55)(v26, v53, v52);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)();
  v49(v26, v32);
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v33);
  _AssistantIntent.Phrase.init(stringInterpolation:)();
  uint64_t v34 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v23(v29, v56);
  sub_100025FE8();
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1000CC000;
  uint64_t v36 = v42;
  *(void *)(v35 + 32) = v44;
  *(void *)(v35 + 40) = v36;
  *(void *)(v35 + 48) = v43;
  *(void *)(v35 + 56) = v34;
  uint64_t v37 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v37;
}

uint64_t sub_100025060(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StringSearchCriteria();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  IntentParameter.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t sub_100025194()
{
  uint64_t v0 = type metadata accessor for _AssistantIntent.Value();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  sub_100026070(&qword_1001046B8, (void (*)(uint64_t))&type metadata accessor for StringSearchCriteria);
  _AssistantIntent.IntentProjection.subscript.getter();
  swift_release();
  sub_100025CC0();
  _AssistantIntent.Value.init<A>(for:builder:)();
  uint64_t v4 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_100025DDC(0, &qword_1001046C0, (uint64_t (*)(uint64_t))sub_100025F5C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1000CBFD0;
  *(void *)(v5 + 32) = v4;
  uint64_t v6 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100025358()
{
  uint64_t v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  uint64_t v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  sub_100025DDC(0, &qword_1001046D0, (uint64_t (*)(uint64_t))sub_100025F90, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1000CBFC0;
  *(void *)(v6 + 32) = v0;
  *(void *)(v6 + 40) = v1;
  *(void *)(v6 + 48) = v2;
  *(void *)(v6 + 56) = v3;
  *(void *)(v6 + 64) = v4;
  *(void *)(v6 + 72) = v5;
  uint64_t v7 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1000254B0()
{
  sub_1000262C8(0, &qword_1001046A0, (uint64_t (*)(void))sub_100025D54, (uint64_t)&type metadata for OpenSleepScheduleIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v14 - v3;
  sub_100025D54();
  _AssistantIntent.Phrase.init(stringLiteral:)();
  uint64_t v17 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  uint64_t v5 = *(void (**)(char *, uint64_t))(v2 + 8);
  v5(v4, v1);
  _AssistantIntent.Phrase.init(stringLiteral:)();
  uint64_t v16 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v5(v4, v1);
  _AssistantIntent.Phrase.init(stringLiteral:)();
  uint64_t v15 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v5(v4, v1);
  _AssistantIntent.Phrase.init(stringLiteral:)();
  uint64_t v6 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v5(v4, v1);
  _AssistantIntent.Phrase.init(stringLiteral:)();
  uint64_t v7 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v5(v4, v1);
  _AssistantIntent.Phrase.init(stringLiteral:)();
  uint64_t v8 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v5(v4, v1);
  _AssistantIntent.Phrase.init(stringLiteral:)();
  uint64_t v9 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)();
  v5(v4, v1);
  sub_100025E40();
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1000CC010;
  uint64_t v11 = v16;
  *(void *)(v10 + 32) = v17;
  *(void *)(v10 + 40) = v11;
  *(void *)(v10 + 48) = v15;
  *(void *)(v10 + 56) = v6;
  *(void *)(v10 + 64) = v7;
  *(void *)(v10 + 72) = v8;
  *(void *)(v10 + 80) = v9;
  uint64_t v12 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v12;
}

void sub_100025830()
{
  qword_100108A50 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_10002584C()
{
  if (qword_100103FC8 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for HealthIntentPhrases()
{
  return &type metadata for HealthIntentPhrases;
}

id sub_1000258B8()
{
  uint64_t v0 = type metadata accessor for _AssistantIntent();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v16 - v5;
  v19[0] = sub_100069588();
  sub_100025C18();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  uint64_t v7 = static _AssistantIntent.Builder.buildExpression(_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v6, v0);
  v19[0] = sub_1000BEF74();
  sub_100025C6C();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  uint64_t v9 = static _AssistantIntent.Builder.buildExpression(_:)();
  v8(v6, v0);
  v19[0] = sub_100080AE0();
  sub_100025CC0();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)();
  uint64_t v10 = static _AssistantIntent.Builder.buildExpression(_:)();
  v8(v6, v0);
  id result = [self defaultWorkspace];
  if (result)
  {
    id v12 = result;
    unint64_t v17 = sub_100025D14();
    uint64_t v18 = &off_1000F5CB0;
    *(void *)&long long v16 = v12;
    sub_10001CD68(&v16, (uint64_t)v19);
    sub_100025D54();
    _AssistantIntent.init<A>(_:phrases:parameterValues:)();
    uint64_t v13 = static _AssistantIntent.Builder.buildExpression(_:)();
    v8(v4, v0);
    sub_100025DDC(0, &qword_100104690, (uint64_t (*)(uint64_t))sub_100025DA8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1000CC000;
    *(void *)(v14 + 32) = v7;
    *(void *)(v14 + 40) = v9;
    *(void *)(v14 + 48) = v10;
    *(void *)(v14 + 56) = v13;
    uint64_t v15 = static _AssistantIntent.Builder.buildBlock(_:)();
    swift_bridgeObjectRelease();
    return (id)v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100025C18()
{
  unint64_t result = qword_100104668;
  if (!qword_100104668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100104668);
  }
  return result;
}

unint64_t sub_100025C6C()
{
  unint64_t result = qword_100104670;
  if (!qword_100104670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100104670);
  }
  return result;
}

unint64_t sub_100025CC0()
{
  unint64_t result = qword_100104678;
  if (!qword_100104678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100104678);
  }
  return result;
}

unint64_t sub_100025D14()
{
  unint64_t result = qword_100104680;
  if (!qword_100104680)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100104680);
  }
  return result;
}

unint64_t sub_100025D54()
{
  unint64_t result = qword_100104688;
  if (!qword_100104688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100104688);
  }
  return result;
}

void sub_100025DA8(uint64_t a1)
{
}

void sub_100025DDC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_100025E40()
{
  if (!qword_1001046A8)
  {
    sub_100025EC4(255, &qword_1001046B0, &qword_1001046A0, (uint64_t (*)(void))sub_100025D54, (uint64_t)&type metadata for OpenSleepScheduleIntent);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001046A8);
    }
  }
}

void sub_100025EC4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  if (!*a2)
  {
    sub_1000262C8(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase);
    unint64_t v6 = type metadata accessor for Array();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_100025F34()
{
  return IntentParameter.wrappedValue.getter();
}

void sub_100025F5C(uint64_t a1)
{
}

void sub_100025F90()
{
  if (!qword_1001046D8)
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001046D8);
    }
  }
}

void sub_100025FE8()
{
  if (!qword_1001046F0)
  {
    sub_100025EC4(255, &qword_1001046F8, &qword_1001046E0, (uint64_t (*)(void))sub_100025CC0, (uint64_t)&type metadata for OpenSearchIntent);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001046F0);
    }
  }
}

uint64_t sub_100026070(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000260B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HealthViewEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002611C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HealthViewEntity();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100026178()
{
  if (!qword_100104718)
  {
    sub_100025EC4(255, &qword_100104720, &qword_100104708, (uint64_t (*)(void))sub_100025C6C, (uint64_t)&type metadata for OpenViewIntent);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104718);
    }
  }
}

uint64_t sub_1000261FC@<X0>(void *a1@<X8>)
{
  uint64_t result = IntentParameter.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100026238(id *a1)
{
  id v1 = *a1;
  return IntentParameter.wrappedValue.setter();
}

unint64_t sub_100026274()
{
  unint64_t result = qword_100104728;
  if (!qword_100104728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100104728);
  }
  return result;
}

void sub_1000262C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_100026330()
{
  if (!qword_100104740)
  {
    sub_100025EC4(255, &qword_100104748, &qword_100104730, (uint64_t (*)(void))sub_100025C18, (uint64_t)&type metadata for OpenDataTypeIntent);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104740);
    }
  }
}

uint64_t type metadata accessor for ImportExportDataSource()
{
  uint64_t result = qword_100104760;
  if (!qword_100104760) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100026404()
{
  return swift_initClassMetadata2();
}

void sub_10002645C(void *a1)
{
  sub_10001C08C(0, (unint64_t *)&unk_1001048D0, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for UTType();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000CBFD0;
  static UTType.commaSeparatedText.getter();
  id v3 = objc_allocWithZone((Class)UIDocumentPickerViewController);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v3 initForOpeningContentTypes:isa asCopy:1];

  unint64_t v6 = *(void **)(v1 + qword_100104758);
  uint64_t v7 = (objc_class *)type metadata accessor for ImportExportDataSourceDocumentPickerDelegate();
  unint64_t v8 = (char *)objc_allocWithZone(v7);
  *(void *)&v8[OBJC_IVAR____TtC6HealthP33_9FDE690F091037398242CA42A360B38544ImportExportDataSourceDocumentPickerDelegate_healthStore] = v6;
  v15.receiver = v8;
  v15.super_class = v7;
  id v9 = v6;
  id v10 = [super init];
  uint64_t v11 = qword_100104750;
  id v12 = *(void **)(v1 + qword_100104750);
  *(void *)(v1 + qword_100104750) = v10;

  [v5 setDelegate:*(void *)(v1 + v11)];
  id v13 = [a1 navigationController];
  if (v13)
  {
    uint64_t v14 = v13;
    [v13 presentViewController:v5 animated:1 completion:0];
  }
}

uint64_t sub_100026648(void *a1)
{
  uint64_t v3 = type metadata accessor for ExportDatasetView(0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  unint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v18 - v7;
  sub_1000A4A44((uint64_t)*(id *)(v1 + qword_100104758), (uint64_t *)((char *)&v18 - v7));
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  uint64_t v10 = *((void *)v8 + 1);
  id v11 = a1;
  sub_100019AF4(v10);
  *((void *)v8 + 1) = sub_100028EE4;
  *((void *)v8 + 2) = v9;
  sub_100028EEC((uint64_t)v8, (uint64_t)v6);
  sub_100028F50();
  id v13 = objc_allocWithZone(v12);
  uint64_t v14 = (void *)UIHostingController.init(rootView:)();
  id v15 = [v11 navigationController];
  if (v15)
  {
    long long v16 = v15;
    [v15 presentViewController:v14 animated:1 completion:0];
  }
  return sub_10002902C((uint64_t)v8);
}

void sub_1000267B0(void *a1)
{
  id v1 = [a1 navigationController];
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = [v1 presentedViewController];

    if (v3)
    {
      [v3 dismissViewControllerAnimated:1 completion:0];
    }
  }
}

void sub_100026850()
{
}

void sub_100026880()
{
  id v1 = *(void **)(v0 + qword_100104758);
}

uint64_t sub_1000268C0()
{
  uint64_t v0 = MutableArrayDataSource.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_100026920()
{
  return type metadata accessor for ImportExportDataSource();
}

unint64_t sub_100026928@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002B8B8(a1);
}

uint64_t sub_1000269A4(uint64_t a1, uint64_t a2)
{
  return sub_10002B8D0(a1, a2);
}

uint64_t sub_100026A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  uint64_t v8 = type metadata accessor for Calendar.Identifier();
  v7[22] = v8;
  v7[23] = *(void *)(v8 - 8);
  v7[24] = swift_task_alloc();
  type metadata accessor for Calendar();
  v7[25] = swift_task_alloc();
  sub_10001C08C(0, &qword_1001048A8, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v7[26] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v7[27] = v9;
  v7[28] = *(void *)(v9 - 8);
  v7[29] = swift_task_alloc();
  v7[30] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SampleDataDecoder();
  v7[31] = v10;
  v7[32] = *(void *)(v10 - 8);
  v7[33] = swift_task_alloc();
  type metadata accessor for MainActor();
  v7[34] = static MainActor.shared.getter();
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  v7[35] = v12;
  v7[36] = v11;
  return _swift_task_switch(sub_100026C4C, v12, v11);
}

uint64_t sub_100026C4C()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[22];
  sub_100028BEC(v0[18], v0[19]);
  static Logger.general.getter();
  uint64_t v5 = type metadata accessor for DateComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 1, 1, v5);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v3, enum case for Calendar.Identifier.gregorian(_:), v4);
  Calendar.init(identifier:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  SampleDataDecoder.init(fileData:logger:calendar:dateShift:)();
  unint64_t v6 = SampleDataDecoder.decodeSamples()();
  uint64_t v7 = *(void **)(v0[20]
                + OBJC_IVAR____TtC6HealthP33_9FDE690F091037398242CA42A360B38544ImportExportDataSourceDocumentPickerDelegate_healthStore);
  if (v6 >> 62)
  {
    sub_10001E254(0, (unint64_t *)&unk_1001048B0);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_10001E254(0, (unint64_t *)&unk_1001048B0);
  }
  swift_bridgeObjectRelease();
  sub_10001E254(0, (unint64_t *)&unk_1001048B0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[37] = isa;
  swift_bridgeObjectRelease();
  v0[2] = v0;
  v0[3] = sub_1000271C4;
  uint64_t v9 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000276C8;
  v0[13] = &unk_1000F56E0;
  v0[14] = v9;
  [v7 saveObjects:isa withCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000271C4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 304) = v2;
  uint64_t v3 = *(void *)(v1 + 288);
  uint64_t v4 = *(void *)(v1 + 280);
  if (v2) {
    uint64_t v5 = sub_1000273C4;
  }
  else {
    uint64_t v5 = sub_1000272F4;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1000272F4()
{
  uint64_t v1 = (void *)v0[37];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[32];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000273C4()
{
  uint64_t v22 = v0;
  uint64_t v1 = (void *)v0[37];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[32];
  swift_release();
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);

  static Logger.general.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v18 = v0[28];
    uint64_t v19 = v0[27];
    uint64_t v20 = v0[29];
    uint64_t v7 = v0[21];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446466;
    v0[15] = v7;
    swift_getMetatypeMetadata();
    uint64_t v10 = String.init<A>(describing:)();
    v0[16] = sub_100018DA0(v10, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s]: Failed at some point trying to open CSV or write. Error: %@", (uint8_t *)v8, 0x16u);
    sub_100028B84();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
  }
  else
  {
    uint64_t v14 = v0[28];
    uint64_t v13 = v0[29];
    uint64_t v15 = v0[27];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_1000276C8(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    a1 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(a1);
  }
  if (!a3)
  {
    __break(1u);
    return _swift_continuation_throwingResume(a1);
  }
  sub_10001D3C4(0, (unint64_t *)&qword_100104178);
  uint64_t v5 = swift_allocError();
  *os_log_type_t v6 = a3;
  id v7 = a3;

  return _swift_continuation_throwingResumeWithError(v3, v5);
}

id sub_100027838()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ImportExportDataSourceDocumentPickerDelegate();
  return [super dealloc];
}

uint64_t type metadata accessor for ImportExportDataSourceDocumentPickerDelegate()
{
  return self;
}

uint64_t sub_1000278A4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100028FE4(&qword_100104840, (void (*)(uint64_t))type metadata accessor for ImportExportDataSource);
  uint64_t result = sub_100028FE4(&qword_100104848, (void (*)(uint64_t))type metadata accessor for ImportExportDataSource);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100027928(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v66 = type metadata accessor for SectionedDataSourceContainerViewType();
  unint64_t v78 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  Swift::String v65 = (char *)v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C08C(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5 - 8);
  uint64_t v72 = (char *)v58 - v6;
  uint64_t v73 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v7 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v9 = (char *)v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ContentConfigurationItem();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v68 = v10;
  uint64_t v69 = v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v67 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v77 = (char *)v58 - v14;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v2 + qword_100104750) = 0;
  *(void *)(v2 + qword_100104758) = a1;
  v80[0] = 0;
  v80[1] = 0xE000000000000000;
  id v19 = a1;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v80, "MutableArray<");
  HIWORD(v80[1]) = -4864;
  UUID.init()();
  uint64_t v20 = UUID.uuidString.getter();
  uint64_t v22 = v21;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v74 = v15;
  v23(v18, v15);
  unint64_t v75 = v23;
  uint64_t v76 = v16 + 8;
  v24._countAndFlagsBits = v20;
  v24._object = v22;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 62;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  uint64_t v70 = MutableArrayDataSource.init(arrangedSections:identifier:)();
  swift_retain_n();
  uint64_t v71 = v18;
  UUID.init()();
  uint64_t v64 = UUID.uuidString.getter();
  uint64_t v63 = v26;
  v23(v18, v15);
  uint64_t v59 = type metadata accessor for UIListContentConfiguration();
  uint64_t v81 = v59;
  uint64_t v82 = &protocol witness table for UIListContentConfiguration;
  sub_100004F38(v80);
  static UIListContentConfiguration.cell()();
  UIListContentConfiguration.text.setter();
  uint64_t v27 = self;
  id v28 = [v27 tintColor];
  Swift::String v29 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v29(v79, 0);
  Swift::String v30 = v9;
  *uint64_t v9 = 1;
  unsigned int v60 = enum case for CellDeselectionBehavior.deselectOnDidSelect(_:);
  Swift::String v31 = *(void (**)(void))(v7 + 104);
  uint64_t v61 = v7 + 104;
  uint64_t v62 = (void (*)(unsigned char *, void, uint64_t))v31;
  v31(v9);
  uint64_t v32 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v33 = *(void *)(v32 - 8);
  v58[0] = *(void *)(v33 + 56);
  v58[1] = v33 + 56;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v58[0])(v72, 1, 1, v32);
  uint64_t v34 = enum case for SectionedDataSourceContainerViewType.collectionView(_:);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 104);
  v78 += 104;
  uint64_t v36 = v65;
  uint64_t v37 = v66;
  v35(v65, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v66);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();
  swift_retain();
  uint64_t v38 = v71;
  UUID.init()();
  uint64_t v64 = UUID.uuidString.getter();
  uint64_t v63 = v39;
  v75(v38, v74);
  uint64_t v81 = v59;
  uint64_t v82 = &protocol witness table for UIListContentConfiguration;
  sub_100004F38(v80);
  static UIListContentConfiguration.cell()();
  UIListContentConfiguration.text.setter();
  id v40 = [v27 tintColor];
  uint64_t v41 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v41(v79, 0);
  *Swift::String v30 = 1;
  v62(v30, v60, v73);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v58[0])(v72, 1, 1, v32);
  v35(v36, v34, v37);
  uint64_t v42 = v67;
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();
  sub_10001C08C(0, &qword_100104858, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v43 = *(void *)(type metadata accessor for ArrayDataSourceSection() - 8);
  unint64_t v44 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_1000CBFD0;
  unint64_t v78 = v45 + v44;
  sub_1000282D4();
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1000CC0F0;
  uint64_t v47 = v68;
  *(void *)(v46 + 56) = v68;
  uint64_t v48 = sub_100028FE4(&qword_100104870, (void (*)(uint64_t))&type metadata accessor for ContentConfigurationItem);
  *(void *)(v46 + 64) = v48;
  uint64_t v49 = sub_100004F38((uint64_t *)(v46 + 32));
  uint64_t v50 = v69;
  unint64_t v51 = *(void (**)(uint64_t *, char *, uint64_t))(v69 + 16);
  uint64_t v52 = v77;
  v51(v49, v77, v47);
  *(void *)(v46 + 96) = v47;
  *(void *)(v46 + 104) = v48;
  unsigned int v53 = sub_100004F38((uint64_t *)(v46 + 72));
  v51(v53, v42, v47);
  uint64_t v54 = v70;
  swift_retain();
  uint64_t v55 = v71;
  UUID.init()();
  UUID.uuidString.getter();
  v75(v55, v74);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)();
  dispatch thunk of MutableArrayDataSource.replaceAllSections(with:reconfigureOrReloadItemsIfNeeded:)();
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v56 = *(void (**)(char *, uint64_t))(v50 + 8);
  v56(v42, v47);
  v56(v52, v47);
  return v54;
}

void sub_1000282D4()
{
  if (!qword_100104860)
  {
    sub_10001D3C4(255, (unint64_t *)&qword_100106A40);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104860);
    }
  }
}

uint64_t sub_10002833C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v40 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v38 - v8;
  sub_10001C08C(0, (unint64_t *)&qword_100104878, (uint64_t (*)(uint64_t))&type metadata accessor for TaskPriority, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v38 - v11;
  sub_10001C08C(0, (unint64_t *)&unk_100104880, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v38 - v14;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16)) {
    goto LABEL_10;
  }
  (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v15, a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_100028AF8((uint64_t)v15);
    goto LABEL_10;
  }
  uint64_t v39 = v5;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
  if (URL.pathExtension.getter() == 7762787 && v20 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    uint64_t v22 = Data.init(contentsOf:options:)();
    unint64_t v24 = v23;
    uint64_t v25 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v12, 1, 1, v25);
    type metadata accessor for MainActor();
    sub_100028BEC(v22, v24);
    unint64_t v26 = v24;
    id v27 = v2;
    uint64_t v28 = static MainActor.shared.getter();
    Swift::String v29 = (void *)swift_allocObject();
    long long v29[2] = v28;
    v29[3] = &protocol witness table for MainActor;
    v29[4] = v22;
    v29[5] = v26;
    uint64_t v30 = ObjectType;
    v29[6] = v27;
    v29[7] = v30;
    sub_100052D04((uint64_t)v12, (uint64_t)&unk_1001048A0, (uint64_t)v29);
    swift_release();
    sub_100028C8C(v22, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v21) {
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  uint64_t v5 = v39;
LABEL_10:
  static Logger.general.getter();
  Swift::String v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    id v40 = (char *)v4;
    uint64_t v42 = v34;
    *(_DWORD *)uint64_t v33 = 136446210;
    uint64_t v43 = ObjectType;
    swift_getMetatypeMetadata();
    uint64_t v35 = String.init<A>(describing:)();
    uint64_t v43 = sub_100018DA0(v35, v36, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "[%{public}s]: No URLs found, or file selected does not have csv file extension.", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, char *))(v5 + 8))(v9, v40);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }
}

uint64_t sub_100028AF8(uint64_t a1)
{
  sub_10001C08C(0, (unint64_t *)&unk_100104880, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100028B84()
{
  if (!qword_100106ED0)
  {
    sub_10001E254(255, &qword_100104890);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106ED0);
    }
  }
}

uint64_t sub_100028BEC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100028C44()
{
  swift_unknownObjectRelease();
  sub_100028C8C(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100028C8C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100028CE4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100028DB8;
  return sub_100026A04(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100028DB8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100028EAC()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100028EE4()
{
  sub_1000267B0(*(void **)(v0 + 16));
}

uint64_t sub_100028EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ExportDatasetView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100028F50()
{
  if (!qword_1001048C0)
  {
    type metadata accessor for ExportDatasetView(255);
    sub_100028FE4(&qword_1001048C8, (void (*)(uint64_t))type metadata accessor for ExportDatasetView);
    unint64_t v0 = type metadata accessor for UIHostingController();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001048C0);
    }
  }
}

uint64_t sub_100028FE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002902C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ExportDatasetView(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ManualTriggerDataSource(uint64_t a1)
{
  return sub_1000172F0(a1, (uint64_t *)&unk_100104948);
}

uint64_t sub_1000290A8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000290F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int8 *)(v3 + *(int *)(a3 + 24));
}

uint64_t sub_100029104(uint64_t a1, uint64_t a2)
{
  return (*v2)(a2);
}

uint64_t sub_100029130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

id sub_1000291A8()
{
  id result = [objc_allocWithZone((Class)NSOperationQueue) init];
  qword_100108A68 = (uint64_t)result;
  return result;
}

char *sub_1000291DC(int a1)
{
  uint64_t v2 = v1;
  uint64_t v21 = type metadata accessor for ContentConfigurationItem();
  uint64_t v4 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v24 = (char *)_swiftEmptyArrayStorage;
  sub_100096494(0, 3, 0);
  uint64_t v7 = v24;
  unsigned __int8 v23 = 0;
  uint64_t v22 = v2;
  sub_100029448(&v23, a1, v2, (uint64_t)v6);
  unint64_t v9 = *((void *)v7 + 2);
  unint64_t v8 = *((void *)v7 + 3);
  if (v9 >= v8 >> 1)
  {
    sub_100096494(v8 > 1, v9 + 1, 1);
    uint64_t v7 = v24;
  }
  *((void *)v7 + 2) = v9 + 1;
  unint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = *(void *)(v4 + 72);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v12(&v7[v10 + v11 * v9], v6, v21);
  unsigned __int8 v23 = 1;
  int v13 = a1 & 1;
  sub_100029448(&v23, v13, v22, (uint64_t)v6);
  unint64_t v24 = v7;
  unint64_t v15 = *((void *)v7 + 2);
  unint64_t v14 = *((void *)v7 + 3);
  if (v15 >= v14 >> 1)
  {
    sub_100096494(v14 > 1, v15 + 1, 1);
    uint64_t v7 = v24;
  }
  *((void *)v7 + 2) = v15 + 1;
  uint64_t v16 = v21;
  v12(&v7[v10 + v11 * v15], v6, v21);
  unsigned __int8 v23 = 2;
  sub_100029448(&v23, v13, v22, (uint64_t)v6);
  unint64_t v24 = v7;
  unint64_t v18 = *((void *)v7 + 2);
  unint64_t v17 = *((void *)v7 + 3);
  if (v18 >= v17 >> 1)
  {
    sub_100096494(v17 > 1, v18 + 1, 1);
    uint64_t v7 = v24;
  }
  *((void *)v7 + 2) = v18 + 1;
  v12(&v7[v10 + v11 * v18], v6, v16);
  return v7;
}

uint64_t sub_100029448@<X0>(unsigned __int8 *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v39 = a4;
  uint64_t v6 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v37 = *(void *)(v6 - 8);
  uint64_t v38 = v6;
  __chkstk_darwin(v6);
  unint64_t v36 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C070(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v8 - 8);
  uint64_t v34 = (char *)&v30 - v9;
  uint64_t v10 = type metadata accessor for UIListContentConfiguration();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v14 = *a1;
  static UIListContentConfiguration.cell()();
  UIListContentConfiguration.text.setter();
  unint64_t v15 = self;
  uint64_t v16 = &selRef_lightGrayColor;
  int v35 = a2;
  if ((a2 & 1) == 0) {
    uint64_t v16 = &selRef_tintColor;
  }
  id v17 = [v15 *v16];
  unint64_t v18 = (void (*)(uint64_t *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v18(v41, 0);
  if (v14)
  {
    if (v14 == 1)
    {
      unint64_t v31 = 0xD000000000000015;
      id v19 = "RelevanceEngineButton";
    }
    else
    {
      unint64_t v31 = 0xD000000000000011;
      id v19 = "TriggerSyncButton";
    }
    unint64_t v32 = (unint64_t)(v19 - 32) | 0x8000000000000000;
  }
  else
  {
    unint64_t v31 = 0xD000000000000018;
    unint64_t v32 = 0x80000001000D15C0;
  }
  v41[3] = v10;
  v41[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
  uint64_t v20 = sub_100004F38(v41);
  (*(void (**)(uint64_t *, char *, uint64_t))(v11 + 16))(v20, v13, v10);
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  *(unsigned char *)(v22 + 24) = v14;
  uint64_t v23 = type metadata accessor for ManualTriggerSelectionHandling(0);
  v40[3] = v23;
  v40[4] = sub_10002AE18(&qword_1001049A8, (void (*)(uint64_t))type metadata accessor for ManualTriggerSelectionHandling);
  unint64_t v24 = sub_100004F38(v40);
  uint64_t v25 = (char *)v24 + *(int *)(v23 + 20);
  *uint64_t v25 = 1;
  uint64_t v26 = enum case for CellDeselectionBehavior.deselectOnDidSelect(_:);
  uint64_t v27 = type metadata accessor for CellDeselectionBehavior();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104))(v25, v26, v27);
  *unint64_t v24 = (uint64_t)sub_10002A98C;
  v24[1] = v22;
  *((unsigned char *)v24 + *(int *)(v23 + 24)) = (v35 & 1) == 0;
  uint64_t v28 = type metadata accessor for UIBackgroundConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v34, 1, 1, v28);
  (*(void (**)(char *, void, uint64_t))(v37 + 104))(v36, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v38);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_100029940(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (a3)
    {
      if (a3 == 1) {
        sub_10002AC00();
      }
      else {
        sub_100029D2C();
      }
    }
    else
    {
      sub_10002A9B8();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1000299BC()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&aBlock[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = result;
    sub_10001E254(0, (unint64_t *)&qword_100105730);
    uint64_t v10 = static OS_dispatch_queue.main.getter();
    uint64_t v13 = v4;
    uint64_t v11 = (void *)v10;
    aBlock[4] = sub_10002AE10;
    aBlock[5] = v9;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100005388;
    aBlock[3] = &unk_1000F5808;
    uint64_t v12 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_10002AE18((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000C070(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    sub_10001EF54();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v12);
    swift_release();

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v13);
  }
  return result;
}

uint64_t sub_100029CC4()
{
  uint64_t v0 = sub_1000291DC(0);
  sub_1000B870C(v0);
  swift_bridgeObjectRelease();
  dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)();

  return swift_bridgeObjectRelease();
}

void sub_100029D2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v26 = v2;
  if (v9)
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v25 = v3;
    uint64_t v11 = (uint8_t *)v10;
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v12 = _typeName(_:qualified:)();
    uint64_t v27 = sub_100018DA0(v12, v13, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%s] Triggering cloud sync", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v25);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  if (qword_100103FC0 != -1) {
    swift_once();
  }
  int v14 = (void *)qword_100108A48;
  uint64_t v15 = *(void *)((char *)v1 + qword_100104940);
  id v16 = objc_allocWithZone((Class)HKCloudSyncControl);
  id v17 = v14;
  id v18 = [v16 initWithHealthStore:v15];
  NSString v19 = String._bridgeToObjectiveC()();
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v26;
  *(void *)(v20 + 16) = v18;
  *(void *)(v20 + 24) = v21;
  aBlock[4] = (uint64_t)sub_10002A914;
  aBlock[5] = v20;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10000408C;
  aBlock[3] = (uint64_t)&unk_1000F5768;
  uint64_t v22 = _Block_copy(aBlock);
  id v23 = v18;
  swift_release();
  [v23 syncWithRequest:v17 reason:v19 completion:v22];
  _Block_release(v22);
}

uint64_t sub_10002A0A0(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4);
  os_log_type_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
  {
    static Logger.general.getter();
    swift_errorRetain();
    swift_errorRetain();
    BOOL v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      id v16 = (void *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v19 = v17;
      *(_DWORD *)uint64_t v11 = 136315394;
      uint64_t v12 = _typeName(_:qualified:)();
      uint64_t v18 = sub_100018DA0(v12, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain();
        uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v18 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        uint64_t v18 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v14 = 0;
      }
      *id v16 = v14;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%s] Failed to request cloud sync: %@", (uint8_t *)v11, 0x16u);
      sub_100028B84();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

void sub_10002A380()
{
}

void sub_10002A3B0()
{
}

uint64_t sub_10002A3C0()
{
  return swift_deallocClassInstance();
}

uint64_t sub_10002A410()
{
  return type metadata accessor for ManualTriggerDataSource(0);
}

unint64_t sub_10002A418@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002B8B8(a1);
}

uint64_t sub_10002A494(uint64_t a1, uint64_t a2)
{
  return sub_10002B8D0(a1, a2);
}

uint64_t sub_10002A4F4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10002AE18(&qword_100104998, (void (*)(uint64_t))type metadata accessor for ManualTriggerDataSource);
  uint64_t result = sub_10002AE18(&qword_1001049A0, (void (*)(uint64_t))type metadata accessor for ManualTriggerDataSource);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10002A578(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ArrayDataSourceSection();
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v29 = v4;
  uint64_t v5 = v28;
  __chkstk_darwin(v4);
  uint64_t v27 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  os_log_type_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v2 + qword_100104940) = a1;
  v30[0] = 0;
  v30[1] = 0xE000000000000000;
  id v11 = a1;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v30, "MutableArray<");
  HIWORD(v30[1]) = -4864;
  UUID.init()();
  uint64_t v12 = UUID.uuidString.getter();
  uint64_t v14 = v13;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  v16._countAndFlagsBits = v12;
  v16._object = v14;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 62;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  uint64_t v18 = MutableArrayDataSource.init(arrangedSections:identifier:)();
  swift_retain();
  uint64_t v19 = sub_1000291DC(0);
  sub_1000B870C((uint64_t)v19);
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  v15(v10, v7);
  uint64_t v20 = v27;
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)();
  sub_10000C070(0, &qword_100104858, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  unint64_t v21 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1000CBFD0;
  unint64_t v23 = v22 + v21;
  uint64_t v24 = v29;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v23, v20, v29);
  swift_retain();
  dispatch thunk of MutableArrayDataSource.replaceAllSections(with:reconfigureOrReloadItemsIfNeeded:)();
  swift_bridgeObjectRelease();
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v20, v24);
  return v18;
}

uint64_t sub_10002A8DC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002A914(char a1, uint64_t a2)
{
  return sub_10002A0A0(a1, a2);
}

uint64_t sub_10002A91C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002A954()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10002A98C(uint64_t a1)
{
  return sub_100029940(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t type metadata accessor for ManualTriggerSelectionHandling(uint64_t a1)
{
  return sub_1000172F0(a1, qword_100104A08);
}

void sub_10002A9B8()
{
  uint64_t v0 = type metadata accessor for DateInterval();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = sub_1000291DC(1);
  sub_1000B870C(v1);
  swift_bridgeObjectRelease();
  dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)();
  swift_bridgeObjectRelease();
  if (qword_100103FD0 != -1) {
    swift_once();
  }
  [(id)qword_100108A68 setSuspended:1];
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_10002AE08;
  aBlock[5] = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = &unk_1000F57E0;
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = self;
  swift_retain();
  id v5 = [v4 blockOperationWithBlock:v3];
  _Block_release(v3);
  swift_release();
  swift_release();
  uint64_t v6 = (void *)qword_100108A68;
  [(id)qword_100108A68 addOperation:v5];
  static DateInterval.allTimeInterval.getter();
  id v7 = objc_allocWithZone((Class)type metadata accessor for FeedItemGenerationOperation());
  uint64_t v8 = (void *)FeedItemGenerationOperation.init(dateRange:)();
  [v6 addOperation:v8];
  [v5 addDependency:v8];
  [v6 setSuspended:0];
}

void sub_10002AC00()
{
  uint64_t v0 = sub_1000291DC(1);
  sub_1000B870C(v0);
  swift_bridgeObjectRelease();
  dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)();
  swift_bridgeObjectRelease();
  if (qword_100103FD0 != -1) {
    swift_once();
  }
  [(id)qword_100108A68 setSuspended:1];
  uint64_t v1 = swift_allocObject();
  swift_weakInit();
  v8[4] = sub_10002AE08;
  void v8[5] = v1;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100005388;
  v8[3] = &unk_1000F5830;
  uint64_t v2 = _Block_copy(v8);
  uint64_t v3 = self;
  swift_retain();
  id v4 = [v3 blockOperationWithBlock:v2];
  _Block_release(v2);
  swift_release();
  swift_release();
  id v5 = (void *)qword_100108A68;
  [(id)qword_100108A68 addOperation:v4];
  static Feed.Kind.relevanceRankedFeeds.getter();
  id v6 = objc_allocWithZone((Class)type metadata accessor for PopulateDiscoverFeedOperation());
  id v7 = (void *)PopulateDiscoverFeedOperation.init(feedKinds:)();
  [v4 addDependency:v7];
  [v5 addOperation:v7];
  [v5 setSuspended:0];
}

uint64_t sub_10002AE08()
{
  return sub_1000299BC();
}

uint64_t sub_10002AE10()
{
  return sub_100029CC4();
}

uint64_t sub_10002AE18(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10002AE60(void *a1, void *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    a1 = (void *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    *a1 = v5;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    os_log_type_t v10 = (char *)a1 + v9;
    id v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for CellDeselectionBehavior();
    unint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_retain();
    v13(v10, v11, v12);
    *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_10002AF64(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for CellDeselectionBehavior();
  id v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_10002AFDC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for CellDeselectionBehavior();
  id v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_retain();
  v11(v8, v9, v10);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_10002B090(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for CellDeselectionBehavior();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_10002B138(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CellDeselectionBehavior();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_10002B1D0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CellDeselectionBehavior();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10002B270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002B284);
}

uint64_t sub_10002B284(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CellDeselectionBehavior();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    id v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10002B334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002B348);
}

void *sub_10002B348(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CellDeselectionBehavior();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10002B3F0()
{
  uint64_t result = type metadata accessor for CellDeselectionBehavior();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for InternalSettingsViewController()
{
  uint64_t result = qword_100104A48;
  if (!qword_100104A48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10002B4F8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10002B538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  int v29 = a3;
  v28[2] = a2;
  v28[3] = a1;
  uint64_t v31 = a6;
  char v6 = a3 & 1;
  uint64_t v30 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v7 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C0D4(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v28 - v11;
  uint64_t v13 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  Swift::String v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v21 = UUID.uuidString.getter();
  v28[0] = v22;
  v28[1] = v21;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v23 = sub_10002BB44(v6, v34);
  sub_10002BCCC(v23, v24, v6);
  if (v29)
  {
    *Swift::String v16 = 1;
    uint64_t v25 = (unsigned int *)&enum case for CellDeselectionBehavior.deselectOnDidSelect(_:);
  }
  else
  {
    uint64_t v25 = (unsigned int *)&enum case for CellDeselectionBehavior.default(_:);
  }
  (*(void (**)(unsigned char *, void, uint64_t))(v14 + 104))(v16, *v25, v13);
  swift_retain();
  sub_10002EE1C();
  uint64_t v26 = type metadata accessor for UIBackgroundConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v12, 1, 1, v26);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v30);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();
  return swift_release();
}

unint64_t sub_10002B8B8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002C00C((uint64_t (*)(uint64_t))&dispatch thunk of MutableArrayDataSource.arrangedSections.getter, a1);
}

uint64_t sub_10002B8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  v16[1] = a1;
  uint64_t v17 = type metadata accessor for ListLayoutConfiguration();
  uint64_t v2 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LayoutConfiguration();
  v16[0] = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000202CC();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of SnapshotDataSource.snapshot.getter();
  uint64_t v13 = NSDiffableDataSourceSnapshot.numberOfItems.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    static ListLayoutConfiguration.withHeader.getter();
    CollectionViewLayoutContext.environment.getter();
    uint64_t v14 = ListLayoutConfiguration.layout(for:)();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v17);
  }
  else
  {
    static LayoutConfiguration.empty.getter();
    uint64_t v14 = LayoutConfiguration.layoutSection.getter();
    (*(void (**)(char *, uint64_t))(v16[0] + 8))(v7, v5);
  }
  return v14;
}

uint64_t sub_10002BB44@<X0>(char a1@<W2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UIListContentConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static UIListContentConfiguration.cell()();
  sub_10002EE14();
  UIListContentConfiguration.text.setter();
  uint64_t v8 = self;
  if (a1) {
    id v9 = [v8 tintColor];
  }
  else {
    id v9 = [v8 blackColor];
  }
  id v10 = v9;
  uint64_t v11 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v11(v14, 0);
  a2[3] = v4;
  a2[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
  uint64_t v12 = sub_100004F38(a2);
  return (*(uint64_t (**)(uint64_t *, unsigned char *, uint64_t))(v5 + 32))(v12, v7, v4);
}

void *sub_10002BCCC(uint64_t a1, uint64_t a2, char a3)
{
  sub_10000C0D4(0, &qword_100104AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v18 - v5;
  uint64_t v7 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UICellAccessory.DisplayedState();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000C0D4(0, &qword_100104AC0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for UICellAccessory();
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1000CBFD0;
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for UICellAccessory.DisplayedState.always(_:), v11);
  uint64_t v16 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v6, 1, 1, v16);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)();
  static UICellAccessory.disclosureIndicator(displayed:options:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return (void *)v15;
}

unint64_t sub_10002BFF4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002C00C((uint64_t (*)(uint64_t))&ArrayDataSource.arrangedSections.getter, a1);
}

unint64_t sub_10002C00C@<X0>(uint64_t (*a1)(uint64_t)@<X5>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UIListContentConfiguration();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for ArrayDataSourceSection();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = a1(v7);
  unint64_t result = IndexPath.section.getter();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (result >= *(void *)(v10 + 16))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  (*(void (**)(unsigned char *, unint64_t, uint64_t))(v6 + 16))(v9, v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * result, v5);
  swift_bridgeObjectRelease();
  ArrayDataSourceSection.title.getter();
  uint64_t v13 = v12;
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
  if (v13)
  {
    String.uppercased()();
    swift_bridgeObjectRelease();
    static UIListContentConfiguration.groupedHeader()();
    id v14 = [self grayColor];
    uint64_t v15 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
    UIListContentConfiguration.TextProperties.color.setter();
    v15(v18, 0);
    uint64_t v16 = type metadata accessor for HeaderItem();
    swift_allocObject();
    uint64_t v17 = HeaderItem.init(title:buttonText:buttonWasTapped:configuration:automationIdentifier:)();
    a2[3] = v16;
    unint64_t result = sub_10002DA98((unint64_t *)&unk_100105760, (void (*)(uint64_t))&type metadata accessor for HeaderItem);
    a2[4] = result;
    *a2 = v17;
  }
  else
  {
    a2[3] = type metadata accessor for FallbackHeaderItem();
    a2[4] = sub_10002DA98(&qword_100104A98, (void (*)(uint64_t))&type metadata accessor for FallbackHeaderItem);
    sub_100004F38(a2);
    return FallbackHeaderItem.init()();
  }
  return result;
}

void sub_10002C304()
{
}

void sub_10002C360(void *a1)
{
  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for InternalSettingsViewController();
  id v1 = v5.receiver;
  [super viewDidLoad];
  id v2 = [v1 view];
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = [self systemGroupedBackgroundColor];
    [v3 setBackgroundColor:v4];

    sub_10002C424();
  }
  else
  {
    __break(1u);
  }
}

void sub_10002C424()
{
  id v1 = [v0 navigationItem];
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setTitle:v2];

  id v3 = [v0 navigationItem];
  [v3 setLargeTitleDisplayMode:2];

  id v4 = [v0 navigationItem];
  id v5 = [objc_allocWithZone((Class)UIBarButtonItem) initWithBarButtonSystemItem:0 target:v0 action:"doneButtonTapped"];
  [v4 setRightBarButtonItem:v5];
}

id sub_10002C548(void *a1)
{
  return [a1 dismissViewControllerAnimated:1 completion:0];
}

uint64_t sub_10002C55C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  uint64_t v12 = (objc_class *)type metadata accessor for InternalSettingsViewController();
  v15.receiver = v10;
  v15.super_class = v12;
  [super collectionView:didSelectItemAtIndexPath:v9];

  Class v13 = IndexPath._bridgeToObjectiveC()().super.isa;
  [v9 deselectItemAtIndexPath:v13 animated:1];

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10002C6A4@<X0>(uint64_t *a1@<X8>)
{
  sub_10002EEB8();
  swift_allocObject();
  uint64_t result = Future.init(_:)();
  *a1 = result;
  return result;
}

uint64_t sub_10002C6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  id v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Class v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  sub_10002F03C();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.userInteractive(_:), v10);
  swift_retain();
  objc_super v15 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_10002F1A8;
  *(void *)(v16 + 24) = v14;
  aBlock[4] = sub_10002F1E8;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = &unk_1000F58A8;
  uint64_t v17 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_10002DA98((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000C0D4(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_10001EF54();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v20);
  return swift_release();
}

uint64_t sub_10002CAC8(void (*a1)(void, void), uint64_t a2)
{
  uint64_t v58 = a2;
  uint64_t v80 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v3 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  unint64_t v79 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C0D4(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5 - 8);
  unint64_t v78 = (char *)&v56 - v6;
  uint64_t v77 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v7 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v76 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C0D4(0, &qword_100104AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v9 - 8);
  unint64_t v75 = (char *)&v56 - v10;
  uint64_t v74 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions();
  uint64_t v11 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v73 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for UICellAccessory.DisplayedState();
  uint64_t v13 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v71 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for UUID();
  uint64_t v59 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v82 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C0D4(0, &qword_100104B28, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v56 - v17;
  uint64_t v81 = type metadata accessor for ContentConfigurationItem();
  uint64_t v91 = *(void *)(v81 - 8);
  uint64_t v19 = __chkstk_darwin(v81);
  uint64_t v89 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  BOOL v90 = (char *)&v56 - v21;
  uint64_t v95 = type metadata accessor for FoundationPluginBundleProvider();
  static FoundationPluginBundleProvider.sharedInstance.getter();
  uint64_t v22 = dispatch thunk of PluginBundleProvider.allPluginBundleNames()();
  swift_release();
  v98[0] = v22;
  swift_bridgeObjectRetain();
  sub_10002DAE0(v98);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v98[0] + 16);
  if (!v23)
  {
    swift_release();
    uint64_t v25 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  uint64_t v57 = a1;
  uint64_t v69 = (void (**)(char *, uint64_t))(v59 + 8);
  unsigned int v68 = enum case for UICellAccessory.DisplayedState.always(_:);
  uint64_t v67 = (void (**)(char *, void, uint64_t))(v13 + 104);
  uint64_t v66 = (void (**)(char *, uint64_t))(v11 + 8);
  Swift::String v65 = (void (**)(char *, uint64_t))(v13 + 8);
  unsigned int v64 = enum case for CellDeselectionBehavior.default(_:);
  uint64_t v63 = (void (**)(char *, void, uint64_t))(v7 + 104);
  unsigned int v62 = enum case for SectionedDataSourceContainerViewType.collectionView(_:);
  uint64_t v61 = (void (**)(char *, void, uint64_t))(v3 + 104);
  uint64_t v93 = (uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 48);
  uint64_t v94 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56);
  id v92 = (void (**)(char *, char *, uint64_t))(v91 + 32);
  uint64_t v56 = swift_retain();
  uint64_t v24 = v56 + 40;
  uint64_t v25 = _swiftEmptyArrayStorage;
  long long v60 = xmmword_1000CBFD0;
  uint64_t v26 = v81;
  uint64_t v70 = v18;
  do
  {
    uint64_t v96 = v25;
    swift_bridgeObjectRetain_n();
    static FoundationPluginBundleProvider.sharedInstance.getter();
    uint64_t v28 = (void *)dispatch thunk of PluginBundleProvider.loadPluginBundle(named:)();
    swift_release();
    sub_10002F260(0, &qword_100104B30);
    NSBundle.getPluginAppDelegateObject<A>(as:)();
    uint64_t v29 = v98[0];
    if (v98[0])
    {
      uint64_t v30 = v98[1];
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v32 = [v31 stringByDeletingPathExtension:v56];

      id v84 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v34 = v33;

      uint64_t v35 = swift_allocObject();
      uint64_t v86 = v35;
      *(void *)(v35 + 16) = v29;
      *(void *)(v35 + 24) = v30;
      unint64_t v36 = v82;
      UUID.init()();
      uint64_t v37 = UUID.uuidString.getter();
      uint64_t v87 = v38;
      uint64_t v88 = v37;
      (*v69)(v36, v83);
      v98[3] = type metadata accessor for UIListContentConfiguration();
      v98[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
      sub_100004F38(v98);
      static UIListContentConfiguration.cell()();
      uint64_t v85 = v34;
      swift_bridgeObjectRetain();
      UIListContentConfiguration.text.setter();
      id v39 = [self blackColor];
      id v40 = (void (*)(char *, void))UIListContentConfiguration.textProperties.modify();
      UIListContentConfiguration.TextProperties.color.setter();
      v40(v97, 0);
      sub_10000C0D4(0, &qword_100104AC0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      type metadata accessor for UICellAccessory();
      *(_OWORD *)(swift_allocObject() + 16) = v60;
      uint64_t v41 = *v67;
      uint64_t v42 = v71;
      id v84 = v28;
      uint64_t v43 = v72;
      v41(v71, v68, v72);
      uint64_t v44 = type metadata accessor for UICellAccessory.LayoutDimension();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v75, 1, 1, v44);
      uint64_t v45 = v73;
      UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)();
      static UICellAccessory.disclosureIndicator(displayed:options:)();
      (*v66)(v45, v74);
      (*v65)(v42, v43);
      (*v63)(v76, v64, v77);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v46 = type metadata accessor for UIBackgroundConfiguration();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v78, 1, 1, v46);
      (*v61)(v79, v62, v80);
      uint64_t v18 = v70;
      uint64_t v26 = v81;
      ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();

      swift_release();
      (*v94)(v18, 0, 1, v26);
      swift_bridgeObjectRelease();
      int v47 = (*v93)(v18, 1, v26);
      uint64_t v48 = v89;
      uint64_t v25 = v96;
      if (v47 == 1) {
        goto LABEL_3;
      }
    }
    else
    {
      swift_bridgeObjectRelease();

      uint64_t v48 = v89;
      (*v94)(v18, 1, 1, v26);
      swift_bridgeObjectRelease();
      int v27 = (*v93)(v18, 1, v26);
      uint64_t v25 = v96;
      if (v27 == 1)
      {
LABEL_3:
        sub_10002F1F0((uint64_t)v18, &qword_100104B28, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem);
        goto LABEL_4;
      }
    }
    uint64_t v49 = *v92;
    uint64_t v50 = v90;
    (*v92)(v90, v18, v26);
    v49(v48, v50, v26);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v25 = (void *)sub_100036370(0, v25[2] + 1, 1, (unint64_t)v25);
    }
    unint64_t v52 = v25[2];
    unint64_t v51 = v25[3];
    if (v52 >= v51 >> 1) {
      uint64_t v25 = (void *)sub_100036370(v51 > 1, v52 + 1, 1, (unint64_t)v25);
    }
    v25[2] = v52 + 1;
    v49((char *)v25+ ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80))+ *(void *)(v91 + 72) * v52, v48, v26);
LABEL_4:
    v24 += 16;
    --v23;
  }
  while (v23);
  swift_release_n();
  a1 = v57;
LABEL_18:
  sub_10000C0D4(0, &qword_100104858, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for ArrayDataSourceSection();
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_1000CBFD0;
  sub_1000B870C((uint64_t)v25);
  swift_bridgeObjectRelease();
  uint64_t v54 = v82;
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v54, v83);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)();
  a1(v53, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10002D900()
{
  uint64_t v0 = type metadata accessor for ListLayoutConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ListLayoutConfiguration.withHeader.getter();
  CollectionViewLayoutContext.environment.getter();
  uint64_t v4 = ListLayoutConfiguration.layout(for:)();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

void sub_10002D9F4()
{
}

void sub_10002DA24(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_10002DA58()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InternalSettingsViewController();
  return [super dealloc];
}

uint64_t sub_10002DA90()
{
  return type metadata accessor for InternalSettingsViewController();
}

uint64_t sub_10002DA98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_10002DAE0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100091320(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_10002DB4C(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_10002DB4C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_10002E238(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      uint64_t v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_10002E308((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_10009130C((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          uint64_t v100 = &v97[16 * v96 + 32];
          *(void *)uint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      uint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_100091098(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = sub_100091098((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    uint64_t v43 = &v11[16 * v41 + 32];
    *(void *)uint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      Swift::Int v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            unint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        unsigned int v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        unsigned int v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        unint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        uint64_t v88 = v42;
        unint64_t v89 = v44;
        BOOL v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_10002E308((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    Swift::Int v32 = v3;
  }
  else {
    Swift::Int v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        Swift::Int v37 = v13;
        uint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10002E238(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10002E308(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  Swift::Int v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      Swift::Int v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          Swift::Int v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)uint64_t v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
            }
            Swift::Int v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      Swift::Int v27 = v7;
    }
LABEL_50:
    sub_100091194((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10002E5A4()
{
  uint64_t v0 = type metadata accessor for UIListContentConfiguration();
  __chkstk_darwin(v0 - 8);
  uint64_t v21 = (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.SchedulerOptions;
  sub_10000C0D4(0, &qword_100107350, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.SchedulerOptions, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v1 - 8);
  Swift::Int v3 = (char *)&v22[-1] - v2;
  sub_10002EE24();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v8 = (char *)&v22[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EF50();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v22[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EEB8();
  sub_10002DA98(&qword_100104AE0, (void (*)(uint64_t))sub_10002EEB8);
  Deferred.init(createPublisher:)();
  sub_10002F03C();
  v22[0] = (id)static OS_dispatch_queue.main.getter();
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
  sub_10002DA98(&qword_100104AF0, (void (*)(uint64_t))sub_10002EE24);
  sub_10002DA98((unint64_t *)&qword_100104AF8, (void (*)(uint64_t))sub_10002F03C);
  Publisher.receive<A>(on:options:)();
  sub_10002F1F0((uint64_t)v3, &qword_100107350, v21);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_10002DA98(&qword_100104B00, (void (*)(uint64_t))sub_10002EF50);
  Publisher<>.asDataSource()();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  static UIListContentConfiguration.groupedHeader()();
  id v15 = [self grayColor];
  uint64_t v16 = (void (*)(id *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v16(v22, 0);
  uint64_t v17 = (void *)type metadata accessor for HeaderItem();
  swift_allocObject();
  uint64_t v18 = (void *)HeaderItem.init(title:buttonText:buttonWasTapped:configuration:automationIdentifier:)();
  v22[3] = v17;
  v22[4] = (id)sub_10002DA98((unint64_t *)&unk_100105760, (void (*)(uint64_t))&type metadata accessor for HeaderItem);
  v22[0] = v18;
  type metadata accessor for SectionsPublisherDataSource();
  SnapshotDataSource.withSupplementaryItem(_:)();
  swift_release();
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v22);
  sub_10002F07C();
  sub_10002DA98(&qword_100104B10, (void (*)(uint64_t))sub_10002F07C);
  uint64_t v19 = SnapshotDataSource.withLayoutSectionProvider(collapseEmptySections:_:)();
  swift_release();
  sub_10002DA98(&qword_100104B18, (void (*)(uint64_t))sub_10002F0DC);
  return v19;
}

uint64_t sub_10002EB4C(void *a1)
{
  sub_10001E9E8();
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1000CC350;
  type metadata accessor for ManualTriggerDataSource(0);
  swift_allocObject();
  id v3 = a1;
  uint64_t v4 = sub_10002A578(v3);

  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 40) = &protocol witness table for MutableArrayDataSource;
  *(void *)(v2 + 48) = sub_10002E5A4();
  *(void *)(v2 + 56) = v5;
  type metadata accessor for ImportExportDataSource();
  swift_allocObject();
  id v6 = v3;
  uint64_t v7 = sub_100027928(v6);

  *(void *)(v2 + 64) = v7;
  *(void *)(v2 + 72) = &protocol witness table for MutableArrayDataSource;
  type metadata accessor for AllFeedItemsDataSource();
  swift_allocObject();
  *(void *)(v2 + 80) = sub_1000BFDA0();
  *(void *)(v2 + 88) = &protocol witness table for ArrayDataSource;
  type metadata accessor for ProfileDataSource();
  swift_allocObject();
  *(void *)(v2 + 96) = sub_10008CFF0();
  *(void *)(v2 + 104) = &protocol witness table for ArrayDataSource;
  type metadata accessor for FeatureAvailabilityDataSource();
  swift_allocObject();
  *(void *)(v2 + 112) = sub_10007E8B8();
  *(void *)(v2 + 120) = &protocol witness table for ArrayDataSource;
  type metadata accessor for BuddyDataSource();
  swift_allocObject();
  *(void *)(v2 + 128) = sub_100098BB8();
  *(void *)(v2 + 136) = &protocol witness table for MutableArrayDataSource;
  type metadata accessor for InternalNotificationsDataSource();
  swift_allocObject();
  *(void *)(v2 + 144) = sub_10009B214();
  *(void *)(v2 + 152) = &protocol witness table for ArrayDataSource;
  type metadata accessor for PersistenceDataSource();
  swift_allocObject();
  *(void *)(v2 + 160) = sub_10003411C();
  *(void *)(v2 + 168) = &protocol witness table for ArrayDataSource;
  type metadata accessor for MiscellaneousItemsDataSource();
  swift_allocObject();
  *(void *)(v2 + 176) = sub_10005D548();
  *(void *)(v2 + 184) = &protocol witness table for ArrayDataSource;
  type metadata accessor for UserDefaultsDataSource();
  swift_allocObject();
  *(void *)(v2 + 192) = sub_1000C0A6C();
  *(void *)(v2 + 200) = &protocol witness table for ArrayDataSource;
  type metadata accessor for HKKeyValueDataSource();
  swift_allocObject();
  *(void *)(v2 + 208) = sub_100057884();
  *(void *)(v2 + 216) = &protocol witness table for ArrayDataSource;
  type metadata accessor for MedicalIDEmergencyBuddyDataSource();
  swift_allocObject();
  *(void *)(v2 + 224) = sub_100075BAC();
  *(void *)(v2 + 232) = &protocol witness table for ArrayDataSource;
  type metadata accessor for AuxiliaryProfilesDataSource();
  swift_allocObject();
  *(void *)(v2 + 240) = sub_1000401A0(v6);
  *(void *)(v2 + 248) = &protocol witness table for MutableArrayDataSource;
  type metadata accessor for InternalSettingsAllDataTypeDetailViewsDataSource();
  swift_allocObject();
  *(void *)(v2 + 256) = sub_10008DD38();
  *(void *)(v2 + 264) = &protocol witness table for ArrayDataSource;
  type metadata accessor for CategoryDataSource();
  swift_allocObject();
  *(void *)(v2 + 272) = sub_1000B71CC();
  *(void *)(v2 + 280) = &protocol witness table for ArrayDataSource;
  type metadata accessor for ContentKindDataSource();
  swift_allocObject();
  *(void *)(v2 + 288) = sub_1000B8CC8();
  *(void *)(v2 + 296) = &protocol witness table for ArrayDataSource;
  type metadata accessor for CompoundSectionedDataSource();
  swift_allocObject();
  CompoundSectionedDataSource.init(_:)();

  return CompoundDataSourceCollectionViewController.init(dataSource:)();
}

uint64_t sub_10002EE14()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10002EE1C()
{
  return swift_bridgeObjectRelease();
}

void sub_10002EE24()
{
  if (!qword_100104AC8)
  {
    sub_10002EEB8();
    sub_10002DA98(&qword_100104AE0, (void (*)(uint64_t))sub_10002EEB8);
    unint64_t v0 = type metadata accessor for Deferred();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104AC8);
    }
  }
}

void sub_10002EEB8()
{
  if (!qword_100104AD0)
  {
    sub_10000C0D4(255, &qword_100104AD8, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    unint64_t v0 = type metadata accessor for Future();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104AD0);
    }
  }
}

void sub_10002EF50()
{
  if (!qword_100104AE8)
  {
    sub_10002EE24();
    sub_10002F03C();
    sub_10002DA98(&qword_100104AF0, (void (*)(uint64_t))sub_10002EE24);
    sub_10002DA98((unint64_t *)&qword_100104AF8, (void (*)(uint64_t))sub_10002F03C);
    unint64_t v0 = type metadata accessor for Publishers.ReceiveOn();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104AE8);
    }
  }
}

unint64_t sub_10002F03C()
{
  unint64_t result = qword_100105730;
  if (!qword_100105730)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100105730);
  }
  return result;
}

void sub_10002F07C()
{
  if (!qword_100104B08)
  {
    type metadata accessor for SectionsPublisherDataSource();
    unint64_t v0 = type metadata accessor for Supplementary();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104B08);
    }
  }
}

void sub_10002F0DC()
{
  if (!qword_100104B20)
  {
    sub_10002F07C();
    sub_10002DA98(&qword_100104B10, (void (*)(uint64_t))sub_10002F07C);
    unint64_t v0 = type metadata accessor for DataSourceWithLayout();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104B20);
    }
  }
}

uint64_t sub_10002F170()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002F1A8(uint64_t a1, char a2)
{
  id v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_10002F1E8()
{
  return sub_10002CAC8(*(void (**)(void, void))(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10002F1F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_10000C0D4(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_10002F260(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10002F2AC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10002F2E4(void *a1)
{
}

BOOL static SceneUserActivityType.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void SceneUserActivityType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int SceneUserActivityType.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_10002F370(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10002F384()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10002F3CC()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10002F3F8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_10002F440()
{
  unint64_t result = qword_100104B38;
  if (!qword_100104B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100104B38);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for SceneUserActivityType(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SceneUserActivityType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SceneUserActivityType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002F5FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_10002F624(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10002F62C(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SceneUserActivityType()
{
  return &type metadata for SceneUserActivityType;
}

char *initializeBufferWithCopyOfBuffer for DeepLinkContentKind(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    a1 = &v12[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = *a2;
      *(void *)a1 = *a2;
      a1[8] = *((unsigned char *)a2 + 8);
      uint64_t v14 = v13;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      sub_10002F788();
      uint64_t v9 = *(int *)(v8 + 48);
      uint64_t v10 = *(char **)((char *)a2 + v9);
      *(void *)&a1[v9] = v10;
      id v11 = v10;
    }
    else
    {
      id v15 = *a2;
      *(void *)a1 = *a2;
      uint64_t v16 = v15;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_10002F788()
{
  if (!qword_100106E40)
  {
    type metadata accessor for URL();
    sub_1000120A4(255, &qword_100104B40, (uint64_t (*)(uint64_t))sub_10002F82C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100106E40);
    }
  }
}

unint64_t sub_10002F82C()
{
  unint64_t result = qword_100106E50;
  if (!qword_100106E50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100106E50);
  }
  return result;
}

void destroy for DeepLinkContentKind(void **a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload && EnumCaseMultiPayload != 2)
  {
    if (EnumCaseMultiPayload != 1) {
      return;
    }
    uint64_t v3 = type metadata accessor for URL();
    (*(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    sub_10002F788();
    a1 = (void **)((char *)a1 + *(int *)(v4 + 48));
  }
  int v5 = *a1;
}

uint64_t initializeWithCopy for DeepLinkContentKind(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v10 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    id v11 = v10;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    sub_10002F788();
    uint64_t v7 = *(int *)(v6 + 48);
    uint64_t v8 = *(void **)(a2 + v7);
    *(void *)(a1 + v7) = v8;
    id v9 = v8;
  }
  else
  {
    uint64_t v12 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    id v13 = v12;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for DeepLinkContentKind(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10002FB04(a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      id v11 = v10;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      sub_10002F788();
      uint64_t v7 = *(int *)(v6 + 48);
      uint64_t v8 = *(void **)(a2 + v7);
      *(void *)(a1 + v7) = v8;
      id v9 = v8;
    }
    else
    {
      uint64_t v12 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v13 = v12;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10002FB04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DeepLinkContentKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for DeepLinkContentKind(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    sub_10002F788();
    *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for DeepLinkContentKind(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002FB04((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      sub_10002F788();
      *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DeepLinkContentKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for DeepLinkContentKind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_10002FD5C()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10002FD6C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DeepLinkContentKind(0);
  __chkstk_darwin(v7);
  id v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100031A60(a1, (uint64_t)v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v16 = *(void **)v9;
    char v17 = sub_10002FF40(*(void **)v9);
LABEL_6:
    char v15 = v17;

    return v15 & 1;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v16 = *(void **)v9;
    char v17 = sub_100030420(*(void **)v9, v9[8]);
    goto LABEL_6;
  }
  sub_10002F788();
  uint64_t v12 = *(void **)&v9[*(int *)(v11 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController + 32);
  long long v14 = *(_OWORD *)(v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController + 16);
  v19[0] = *(_OWORD *)(v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController);
  v19[1] = v14;
  uint64_t v20 = v13;
  char v15 = static URLRouter.handleURL(_:options:rootViewController:)();

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v15 & 1;
}

BOOL sub_10002FF40(void *a1)
{
  uint64_t v33 = *v1;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v34 = *(void *)(v3 - 8);
  uint64_t v35 = v3;
  __chkstk_darwin(v3);
  uint64_t v36 = &v30[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000120A4(0, (unint64_t *)&qword_100104D68, (uint64_t (*)(uint64_t))&type metadata accessor for DeepLinkActivityType, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = &v30[-v6];
  uint64_t v8 = type metadata accessor for DeepLinkActivityType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v30[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v12 = [a1 type];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  DeepLinkActivityType.init(_:)();
  int v13 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (v13 == 1)
  {
    sub_100011EAC((uint64_t)v7, (uint64_t)&qword_100104D68, (uint64_t)&type metadata accessor for DeepLinkActivityType, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(void))sub_1000120A4);
    static Logger.general.getter();
    id v17 = a1;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    int v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v21 = swift_slowAlloc();
      int v31 = v20;
      uint64_t v22 = v21;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v40 = v32;
      *(_DWORD *)uint64_t v22 = 136446466;
      uint64_t v41 = v33;
      swift_getMetatypeMetadata();
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v41 = sub_100018DA0(v23, v24, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2082;
      id v25 = [v17 type];
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v28 = v27;

      uint64_t v41 = sub_100018DA0(v26, v28, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v31, "[%{public}s]: bad shortcut item type passed to application %{public}s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(unsigned char *, uint64_t))(v34 + 8))(v36, v35);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(v11, v7, v8);
    long long v14 = (void *)static HAUserActivity.createActivity(title:restorationType:profileIdentifier:eligibleForSearch:eligibleForHandoff:eligibleForPrediction:)();
    uint64_t v15 = *(uint64_t *)((char *)v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController + 32);
    long long v16 = *(_OWORD *)((char *)v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController + 16);
    long long v37 = *(_OWORD *)((char *)v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController);
    long long v38 = v16;
    uint64_t v39 = v15;
    static UserActivityRouter.handleUserActivity(rootViewController:userActivity:)();

    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v13 != 1;
}

uint64_t sub_100030420(void *a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.view.getter();
  id v11 = a1;
  id v12 = Logger.logObject.getter();
  int v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, (os_log_type_t)v13))
  {
    int v33 = v13;
    uint64_t v34 = v7;
    int v35 = a2;
    uint64_t v36 = v3;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v39 = v32;
    *(_DWORD *)uint64_t v14 = 136446722;
    uint64_t v37 = v6;
    swift_getMetatypeMetadata();
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v37 = sub_100018DA0(v15, v16, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2082;
    id v17 = [v11 title];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v37 = v19;
    uint64_t v38 = v21;
    sub_1000208D0(0, &qword_100104D70, (uint64_t)&type metadata for String, (uint64_t (*)(void, uint64_t))&type metadata accessor for Optional);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v37 = sub_100018DA0(v22, v23, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 22) = 2082;
    id v24 = [v11 activityType];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    uint64_t v37 = sub_100018DA0(v25, v27, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v33, "[%{public}s]: handling user activity “%{public}s” of type %{public}s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v34);
    uint64_t v3 = v36;
    if ((_BYTE)v35) {
      goto LABEL_9;
    }
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if ((_BYTE)a2) {
      goto LABEL_9;
    }
  }
  if (!sub_100030950(v11))
  {
    char v30 = 0;
    return v30 & 1;
  }
LABEL_9:
  uint64_t v28 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController + 32);
  long long v29 = *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController + 16);
  long long v40 = *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController);
  long long v41 = v29;
  uint64_t v42 = v28;
  char v30 = static UserActivityRouter.handleUserActivity(rootViewController:userActivity:)();
  return v30 & 1;
}

uint64_t sub_100030810()
{
  sub_100011EAC(v0 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink, (uint64_t)&qword_100104C38, (uint64_t)type metadata accessor for DeepLinkContentKind, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(void))sub_1000120A4);
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler__skipStateRestoration;
  sub_1000208D0(0, (unint64_t *)&qword_100104C40, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for UserDefault);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100030948()
{
  return type metadata accessor for AppDeepLinkHandler(0);
}

BOOL sub_100030950(void *a1)
{
  uint64_t v60 = a1;
  uint64_t v55 = type metadata accessor for Calendar();
  uint64_t v59 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v57 = (char *)&v51 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for DateComponents();
  uint64_t v56 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v3 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000120A4(0, &qword_100104D78, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v51 - v5;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v58 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v12 = (char *)&v51 - v11;
  sub_1000208D0(0, (unint64_t *)&qword_100104C40, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for UserDefault);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v17 = (char *)&v51 - v16;
  id v18 = [self sharedApplication];
  unsigned __int8 v19 = [v18 launchedToTest];

  if (v19) {
    return 0;
  }
  uint64_t v20 = v60;
  uint64_t v53 = v6;
  uint64_t v51 = v10;
  uint64_t v21 = v12;
  uint64_t v22 = v58;
  uint64_t v52 = v3;
  uint64_t v23 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v61 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler__skipStateRestoration, v14);
  UserDefault.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if (v64[0]) {
    return 0;
  }
  id v24 = [v20 userInfo];
  if (!v24)
  {
    long long v65 = 0u;
    long long v66 = 0u;
    uint64_t v32 = v7;
LABEL_18:
    sub_100011EAC((uint64_t)&v65, (uint64_t)&qword_1001059F0, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(void))sub_1000208D0);
    uint64_t v34 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v53, 1, 1, v32);
    goto LABEL_19;
  }
  uint64_t v25 = v24;
  uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v62 = static HAUserActivity.dateSavedRestorationKey.getter();
  uint64_t v63 = v27;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v26 + 16))
  {
    unint64_t v28 = sub_100094D3C((uint64_t)v64);
    uint64_t v29 = v23;
    char v30 = v21;
    if (v31)
    {
      sub_100018EC4(*(void *)(v26 + 56) + 32 * v28, (uint64_t)&v65);
    }
    else
    {
      long long v65 = 0u;
      long long v66 = 0u;
    }
  }
  else
  {
    long long v65 = 0u;
    long long v66 = 0u;
    uint64_t v29 = v23;
    char v30 = v21;
  }
  sub_100031B58((uint64_t)v64);
  swift_bridgeObjectRelease();
  uint64_t v33 = v56;
  uint64_t v32 = v7;
  if (!*((void *)&v66 + 1)) {
    goto LABEL_18;
  }
  uint64_t v34 = (uint64_t)v53;
  int v35 = swift_dynamicCast();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v34, v35 ^ 1u, 1, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v34, 1, v7) == 1)
  {
LABEL_19:
    sub_100011EAC(v34, (uint64_t)&qword_100104D78, (uint64_t)&type metadata accessor for Date, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(void))sub_1000120A4);
    return 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v30, v34, v7);
  static Calendar.current.getter();
  sub_1000120A4(0, &qword_100104D80, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v36 = v29;
  uint64_t v37 = v22;
  uint64_t v38 = v30;
  uint64_t v39 = type metadata accessor for Calendar.Component();
  uint64_t v40 = *(void *)(v39 - 8);
  unint64_t v41 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_1000CBFD0;
  (*(void (**)(unint64_t, void, uint64_t))(v40 + 104))(v42 + v41, enum case for Calendar.Component.minute(_:), v39);
  sub_100031BAC(v42);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v43 = v51;
  Date.init()();
  unint64_t v44 = v52;
  uint64_t v45 = v57;
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  uint64_t v46 = *(void (**)(char *, uint64_t))(v37 + 8);
  v46(v43, v32);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v45, v55);
  uint64_t v47 = DateComponents.minute.getter();
  LOBYTE(v45) = v48;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v44, v54);
  v46(v38, v32);
  return (v45 & 1) == 0 && v47 < 10;
}

uint64_t sub_1000310EC(uint64_t a1)
{
  uint64_t v76 = a1;
  uint64_t v69 = *v1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v73 = *(void *)(v2 - 8);
  uint64_t v74 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v71 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  os_log_t v72 = (os_log_t)((char *)&v67 - v5);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v75 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v70 = (char *)&v67 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v67 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v67 - v14;
  sub_1000120A4(0, &qword_100104C38, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  unsigned __int8 v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v67 - v20;
  uint64_t v22 = type metadata accessor for DeepLinkContentKind(0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  unint64_t v28 = (char *)&v67 - v27;
  uint64_t v29 = (uint64_t)v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink;
  swift_beginAccess();
  sub_100012108(v29, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    sub_100011EAC((uint64_t)v21, (uint64_t)&qword_100104C38, (uint64_t)type metadata accessor for DeepLinkContentKind, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(void))sub_1000120A4);
    char v30 = v71;
    static Logger.view.getter();
    uint64_t v31 = v77;
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
    v32(v75, v76, v6);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    int v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v36 = swift_slowAlloc();
      os_log_t v72 = v33;
      uint64_t v37 = v36;
      uint64_t v76 = swift_slowAlloc();
      uint64_t v79 = v76;
      *(_DWORD *)uint64_t v37 = 136446466;
      uint64_t v78 = v69;
      swift_getMetatypeMetadata();
      uint64_t v38 = String.init<A>(describing:)();
      uint64_t v78 = sub_100018DA0(v38, v39, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 12) = 2082;
      LODWORD(v69) = v35;
      uint64_t v40 = v75;
      v32(v70, (uint64_t)v75, v6);
      uint64_t v41 = String.init<A>(describingSensitive:)();
      uint64_t v78 = sub_100018DA0(v41, v42, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v40, v6);
      os_log_t v43 = v72;
      _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v69, "[%{public}s] Tried to cancel pending deep link of %{public}s but no pending deep link present", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v31 + 8))(v75, v6);
    }
    (*(void (**)(char *, uint64_t))(v73 + 8))(v30, v74);
    return 0;
  }
  unint64_t v75 = v19;
  unsigned int v68 = v13;
  uint64_t v44 = v77;
  sub_1000319FC((uint64_t)v21, (uint64_t)v28);
  sub_100031A60((uint64_t)v28, (uint64_t)v26);
  uint64_t v45 = (uint64_t)v28;
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10002FB04((uint64_t)v26);
    uint64_t v47 = v44;
    uint64_t v48 = v6;
    uint64_t v49 = v76;
    goto LABEL_10;
  }
  sub_10002F788();

  uint64_t v47 = v44;
  uint64_t v48 = v6;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v15, v26, v6);
  uint64_t v49 = v76;
  char v50 = static URL.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v48);
  if ((v50 & 1) == 0)
  {
LABEL_10:
    uint64_t v77 = v45;
    os_log_t v53 = v72;
    static Logger.view.getter();
    uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
    uint64_t v55 = v68;
    v54(v68, v49, v48);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    int v58 = v57;
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v59 = swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      uint64_t v79 = v76;
      *(_DWORD *)uint64_t v59 = 136446466;
      uint64_t v78 = v69;
      swift_getMetatypeMetadata();
      uint64_t v60 = String.init<A>(describing:)();
      LODWORD(v75) = v58;
      uint64_t v61 = v47;
      uint64_t v78 = sub_100018DA0(v60, v62, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v59 + 12) = 2082;
      uint64_t v63 = v68;
      v54(v70, (uint64_t)v68, v48);
      uint64_t v64 = String.init<A>(describingSensitive:)();
      uint64_t v78 = sub_100018DA0(v64, v65, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v48);
      _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v75, "[%{public}s] Tried to cancel pending deep link of %{public}s but different deep link present", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(os_log_t, uint64_t))(v73 + 8))(v72, v74);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v47 + 8))(v55, v48);
      (*(void (**)(os_log_t, uint64_t))(v73 + 8))(v53, v74);
    }
    sub_10002FB04(v77);
    return 0;
  }
  sub_10002FB04(v45);
  uint64_t v51 = 1;
  uint64_t v52 = (uint64_t)v75;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v75, 1, 1, v22);
  swift_beginAccess();
  sub_100031AC4(v52, v29);
  swift_endAccess();
  return v51;
}

uint64_t sub_1000319D4(uint64_t a1)
{
  return sub_1000310EC(a1) & 1;
}

uint64_t sub_1000319FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeepLinkContentKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031A60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeepLinkContentKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031AC4(uint64_t a1, uint64_t a2)
{
  sub_1000120A4(0, &qword_100104C38, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031B58(uint64_t a1)
{
  return a1;
}

void *sub_100031BAC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100031E98();
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    int v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_100031F18(&qword_100104D90);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_100031F18(&qword_100104D98);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        unint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void sub_100031E98()
{
  if (!qword_100104D88)
  {
    type metadata accessor for Calendar.Component();
    sub_100031F18(&qword_100104D90);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104D88);
    }
  }
}

uint64_t sub_100031F18(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Calendar.Component();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for MainSidebarDataSource(uint64_t a1)
{
  return sub_1000172F0(a1, (uint64_t *)&unk_100104DA0);
}

uint64_t sub_100031F7C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100031FBC(uint64_t a1)
{
  v15[1] = a1;
  uint64_t v1 = type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UICollectionLayoutListConfiguration();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for UICollectionLayoutListConfiguration.Appearance.sidebar(_:), v5);
  UICollectionLayoutListConfiguration.init(appearance:)();
  UICollectionLayoutListConfiguration.showsSeparators.setter();
  if (CollectionViewLayoutContext.section.getter())
  {
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for UICollectionLayoutListConfiguration.HeaderMode.firstItemInSection(_:), v1);
    UICollectionLayoutListConfiguration.headerMode.setter();
  }
  sub_10001E254(0, &qword_100104FD0);
  CollectionViewLayoutContext.environment.getter();
  uint64_t v13 = static NSCollectionLayoutSection.list(using:layoutEnvironment:)();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v13;
}

void sub_100032250()
{
}

uint64_t sub_100032280()
{
  CompoundSectionedDataSource.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_1000322B0()
{
  return type metadata accessor for MainSidebarDataSource(0);
}

uint64_t sub_1000322B8()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033CF8(0, (unint64_t *)&qword_100104FC0, (uint64_t (*)(uint64_t))sub_100033CC4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000CBFD0;
  unint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = sub_1000B8908(v5);
  swift_bridgeObjectRelease();
  *(void *)(v4 + 32) = v6;
  v13[0] = 0x3C53447961727241;
  v13[1] = 0xE800000000000000;
  UUID.init()();
  uint64_t v7 = UUID.uuidString.getter();
  uint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  type metadata accessor for ArrayDataSource();
  swift_allocObject();
  return ArrayDataSource.init(_:identifier:)();
}

uint64_t sub_100032484()
{
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 24);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SidebarDataSourceProvider()
{
  return self;
}

uint64_t type metadata accessor for SidebarFeedItemDataSource(uint64_t a1)
{
  return sub_1000172F0(a1, (uint64_t *)&unk_100104F08);
}

uint64_t sub_100032510()
{
  uint64_t result = type metadata accessor for SidebarSection();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000325A8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v66 = a3;
  id v57 = a2;
  sub_1000332A4();
  uint64_t v63 = *(void *)(v6 - 8);
  uint64_t v64 = v6;
  __chkstk_darwin(v6);
  unint64_t v62 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033CF8(0, &qword_100104AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v8 - 8);
  uint64_t v60 = (char *)v46 - v9;
  sub_100033CF8(0, &qword_100104F80, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.OutlineDisclosureOptions.Style, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v10 - 8);
  uint64_t v56 = (char *)v46 - v11;
  uint64_t v12 = type metadata accessor for UICellAccessory.OutlineDisclosureOptions();
  uint64_t v58 = *(void *)(v12 - 8);
  uint64_t v59 = v12;
  __chkstk_darwin(v12);
  uint64_t v55 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for UICellAccessory.DisplayedState();
  uint64_t v14 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v16 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033CF8(0, &qword_100104F88, (uint64_t (*)(uint64_t))&type metadata accessor for CollectionViewHeaderItem.IconConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v17 - 8);
  uint64_t v47 = (char *)v46 - v18;
  sub_100033478();
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  char v23 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v61 = a1;
  sub_1000190DC(a1, a1[3]);
  swift_retain();
  uint64_t v24 = (void *)dispatch thunk of HealthExperienceStore.viewContext.getter();
  sub_1000193A8(0, &qword_100104F98);
  uint64_t v25 = swift_allocObject();
  long long v65 = xmmword_1000CBFD0;
  *(_OWORD *)(v25 + 16) = xmmword_1000CBFD0;
  *(void *)(v25 + 32) = HKHealthStore.sourceProfile.getter();
  uint64_t v26 = v66;
  uint64_t v27 = (void *)sub_10003384C((uint64_t)v24);

  swift_bridgeObjectRelease();
  uint64_t v52 = v4;
  uint64_t v28 = v4 + qword_100104F00;
  uint64_t v29 = type metadata accessor for SidebarSection();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v53 = v29;
  uint64_t v54 = v30;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v28, v26, v29);
  swift_release();
  sub_100033348(0);
  id v32 = objc_allocWithZone(v31);
  id v50 = v27;
  uint64_t v33 = (void *)FetchedResultsControllerDataSource.init(_:)();
  *char v23 = sub_100032ECC;
  v23[1] = 0;
  (*(void (**)(uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>), void, uint64_t))(v21 + 104))(v23, enum case for MappedDataSourceWithContext.Transformation.perSection<A, B>(_:), v20);
  sub_100033390(0, &qword_100104F60, (uint64_t (*)(uint64_t))sub_100033348, sub_100033444, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for MappedDataSource);
  swift_allocObject();
  id v49 = v33;
  uint64_t v48 = MappedDataSource.init(dataSource:transformation:)();
  sub_100033CF8(0, (unint64_t *)&qword_100104860, (uint64_t (*)(uint64_t))sub_10001AE44, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = v65;
  v46[1] = sub_100032F38();
  v46[0] = v35;
  uint64_t v36 = type metadata accessor for CollectionViewHeaderItem.IconConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v47, 1, 1, v36);
  sub_100033CF8(0, &qword_100104AC0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for UICellAccessory();
  *(_OWORD *)(swift_allocObject() + 16) = v65;
  uint64_t v37 = v16;
  uint64_t v38 = v51;
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for UICellAccessory.DisplayedState.always(_:), v51);
  uint64_t v39 = type metadata accessor for UICellAccessory.OutlineDisclosureOptions.Style();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v56, 1, 1, v39);
  uint64_t v40 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v60, 1, 1, v40);
  uint64_t v41 = v55;
  UICellAccessory.OutlineDisclosureOptions.init(style:isHidden:reservedLayoutWidth:tintColor:)();
  static UICellAccessory.outlineDisclosure(displayed:options:actionHandler:)();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v41, v59);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v37, v38);
  uint64_t v42 = v66;
  v43._countAndFlagsBits = sub_100032F38();
  strcpy(v67, "SidebarHeader.");
  v67[15] = -18;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  *(void *)(v34 + 56) = type metadata accessor for CollectionViewHeaderItem();
  *(void *)(v34 + 64) = sub_100033BF0(&qword_100104FA0, (void (*)(uint64_t))&type metadata accessor for CollectionViewHeaderItem);
  sub_100004F38((uint64_t *)(v34 + 32));
  CollectionViewHeaderItem.init(text:makeConfiguration:respectsSuperviewXLayoutMargins:iconConfig:accessories:automationIdentifier:)();
  (*(void (**)(char *, void, uint64_t))(v63 + 104))(v62, enum case for AdditionalItemsDataSource.Mode.prepend<A>(_:), v64);
  uint64_t v44 = AdditionalItemsDataSource.init(_:additionalItems:mode:)();

  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v42, v53);
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v61);
  return v44;
}

uint64_t sub_100032ECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ArrayDataSourceSection();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

uint64_t sub_100032F38()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SidebarSection();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for SidebarSection.healthCategory(_:))
  {
    uint64_t v7 = (objc_class *)[self mainBundle];
    unint64_t v8 = 0xD00000000000001FLL;
    unint64_t v9 = 0xD000000000000023;
    unint64_t v16 = 0x80000001000D19D0;
    unint64_t v10 = 0x80000001000D19B0;
    v11.super.Class isa = v7;
    uint64_t v12 = 0;
    unint64_t v13 = 0xE000000000000000;
  }
  else
  {
    if (v6 != enum case for SidebarSection.healthRecords(_:))
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return 0;
    }
    uint64_t v7 = (objc_class *)[self mainBundle];
    unint64_t v16 = 0xE600000000000000;
    unint64_t v10 = 0x80000001000D1990;
    unint64_t v8 = 0xD00000000000001CLL;
    v11.super.Class isa = v7;
    uint64_t v12 = 0;
    unint64_t v13 = 0xE000000000000000;
    unint64_t v9 = 0x6573776F7262;
  }
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v8, (Swift::String_optional)0, v11, *(Swift::String *)&v12, *(Swift::String *)&v9)._countAndFlagsBits;

  return countAndFlagsBits;
}

void sub_100033158()
{
}

uint64_t sub_100033188()
{
  uint64_t v1 = v0 + qword_100104F00;
  uint64_t v2 = type metadata accessor for SidebarSection();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

uint64_t sub_1000331F4()
{
  uint64_t v0 = AdditionalItemsDataSource.deinit() + qword_100104F00;
  uint64_t v1 = type metadata accessor for SidebarSection();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0, v1);

  return swift_deallocClassInstance();
}

uint64_t sub_10003329C()
{
  return type metadata accessor for SidebarFeedItemDataSource(0);
}

void sub_1000332A4()
{
  if (!qword_100104F58)
  {
    sub_100033390(255, &qword_100104F60, (uint64_t (*)(uint64_t))sub_100033348, sub_100033444, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for MappedDataSource);
    unint64_t v0 = type metadata accessor for AdditionalItemsDataSource.Mode();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104F58);
    }
  }
}

void sub_100033348(uint64_t a1)
{
}

void sub_100033390(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t sub_100033410()
{
  return sub_100033BF0(&qword_100104F70, (void (*)(uint64_t))&type metadata accessor for FeedItem);
}

uint64_t sub_100033444()
{
  return sub_100033BF0(&qword_100104F78, sub_100033348);
}

void sub_100033478()
{
  if (!qword_100104F90)
  {
    sub_100033348(255);
    sub_100033444();
    unint64_t v0 = type metadata accessor for MappedDataSourceWithContext.Transformation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104F90);
    }
  }
}

uint64_t sub_1000334E8(void *a1)
{
  type metadata accessor for SidebarDataSourceItem();
  static SidebarDataSourceItem.summarySidebarItemIdentifier.getter();
  id v2 = [self mainBundle];
  v11._object = (void *)0x80000001000D1A40;
  v3._uint64_t countAndFlagsBits = 0x7972616D6D7553;
  v3._object = (void *)0xE700000000000000;
  v4._uint64_t countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v11._uint64_t countAndFlagsBits = 0xD000000000000015;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v11);

  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [self systemImageNamed:v5];

  if (v6)
  {
    sub_10001E254(0, &qword_100104FB8);
    uint64_t v7 = (void *)static UIImageSymbolConfiguration.sidebarSymbolConfig.getter();
    id v8 = [v6 imageByApplyingSymbolConfiguration:v7];
  }
  swift_allocObject();
  id v9 = a1;
  return SidebarDataSourceItem.init(uniqueIdentifier:detailViewController:text:image:)();
}

uint64_t sub_100033698(void *a1)
{
  type metadata accessor for SidebarDataSourceItem();
  static SidebarDataSourceItem.sharingSidebarItemIdentifier.getter();
  id v2 = [self mainBundle];
  v11._object = (void *)0x80000001000D1A20;
  v3._uint64_t countAndFlagsBits = 0x676E6972616853;
  v3._object = (void *)0xE700000000000000;
  v4._uint64_t countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v11._uint64_t countAndFlagsBits = 0xD000000000000015;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v11);

  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [self systemImageNamed:v5];

  if (v6)
  {
    sub_10001E254(0, &qword_100104FB8);
    uint64_t v7 = (void *)static UIImageSymbolConfiguration.sidebarSymbolConfig.getter();
    id v8 = [v6 imageByApplyingSymbolConfiguration:v7];
  }
  swift_allocObject();
  id v9 = a1;
  return SidebarDataSourceItem.init(uniqueIdentifier:detailViewController:text:image:)();
}

uint64_t sub_10003384C(uint64_t a1)
{
  v22[0] = a1;
  sub_100033CF8(0, &qword_100104FA8, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v1 - 8);
  Swift::String v3 = (char *)v22 - v2;
  sub_1000193A8(0, (unint64_t *)&qword_1001057E0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000CC530;
  id v5 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithKey:v6 ascending:1 v22[0]];

  *(void *)(v4 + 32) = v7;
  id v8 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 initWithKey:v9 ascending:0];

  *(void *)(v4 + 40) = v10;
  id v11 = objc_allocWithZone((Class)NSSortDescriptor);
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 initWithKey:v12 ascending:1 selector:"localizedStandardCompare:"];

  *(void *)(v4 + 48) = v13;
  v22[1] = v4;
  specialized Array._endMutation()();
  type metadata accessor for FeedItem();
  sub_100033CF8(0, &qword_100104FB0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v14 = type metadata accessor for ContentKind();
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1000CBFD0;
  (*(void (**)(unint64_t, void, uint64_t))(v15 + 104))(v17 + v16, enum case for ContentKind.sidebar(_:), v14);
  SidebarSection.keyword.getter();
  uint64_t v18 = type metadata accessor for DateInterval();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v3, 1, 1, v18);
  uint64_t v19 = (void *)static FeedItem.predicateFor(contentKinds:keyword:relevantDateRange:sourceProfiles:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100033C38((uint64_t)v3);
  uint64_t v20 = NSManagedObjectContext.feedItemsController(sortDescriptors:predicate:sectionNameKeyPath:)();
  swift_bridgeObjectRelease();

  return v20;
}

uint64_t sub_100033BF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100033C38(uint64_t a1)
{
  sub_100033CF8(0, &qword_100104FA8, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100033CC4(uint64_t a1)
{
}

void sub_100033CF8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_100033D5C(id *a1)
{
  id v1 = [*a1 dateUpdated];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_100033DBC()
{
}

uint64_t sub_100033DEC()
{
  uint64_t v1 = v0 + qword_100108AC8;

  return sub_1000209C0(v1);
}

id sub_100033E2C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FeedObjectDataSource();
  [super dealloc];
}

uint64_t sub_100033E64(uint64_t a1)
{
  uint64_t v2 = a1 + qword_100108AC8;

  return sub_1000209C0(v2);
}

uint64_t sub_100033EB0()
{
  return type metadata accessor for FeedObjectDataSource();
}

uint64_t sub_100033EB8()
{
  uint64_t v0 = type metadata accessor for LayoutConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  Swift::String v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static LayoutConfiguration.empty.getter();
  uint64_t v4 = LayoutConfiguration.layoutSection.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_100033F94@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for EmptyHeaderItem();
  a1[4] = sub_100033FD8();
  sub_100004F38(a1);
  return EmptyHeaderItem.init()();
}

unint64_t sub_100033FD8()
{
  unint64_t result = qword_100105038;
  if (!qword_100105038)
  {
    type metadata accessor for EmptyHeaderItem();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105038);
  }
  return result;
}

void sub_100034034(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  [v2 setDateUpdated:isa];
}

uint64_t type metadata accessor for PersistenceDataSource()
{
  uint64_t result = qword_100105078;
  if (!qword_100105078) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000340DC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10003411C()
{
  uint64_t v0 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v35 = *(void *)(v0 - 8);
  *(void *)&long long v36 = v0;
  __chkstk_darwin(v0);
  uint64_t v34 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C0F0(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v33 - v3;
  uint64_t v5 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v37 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  NSString v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for ContentConfigurationItem();
  uint64_t v40 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  v33[1] = UUID.uuidString.getter();
  v33[0] = v14;
  uint64_t v38 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v39 = v10 + 8;
  v38(v12, v9);
  v44[3] = type metadata accessor for UIListContentConfiguration();
  v44[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
  sub_100004F38(v44);
  static UIListContentConfiguration.cell()();
  UIListContentConfiguration.text.setter();
  id v15 = [self tintColor];
  unint64_t v16 = (void (*)(char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v16(v43, 0);
  *unint64_t v8 = 1;
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v8, enum case for CellDeselectionBehavior.deselectOnDidSelect(_:), v5);
  uint64_t v17 = type metadata accessor for UIBackgroundConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v4, 1, 1, v17);
  (*(void (**)(char *, void, void))(v35 + 104))(v34, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v36);
  uint64_t v18 = v41;
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();
  sub_10001C0F0(0, &qword_100104858, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for ArrayDataSourceSection();
  uint64_t v19 = swift_allocObject();
  long long v36 = xmmword_1000CBFD0;
  *(_OWORD *)(v19 + 16) = xmmword_1000CBFD0;
  sub_1000282D4();
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = v36;
  uint64_t v21 = v42;
  *(void *)(v20 + 56) = v42;
  *(void *)(v20 + 64) = sub_100034B8C(&qword_100104870, (void (*)(uint64_t))&type metadata accessor for ContentConfigurationItem);
  uint64_t v22 = sub_100004F38((uint64_t *)(v20 + 32));
  uint64_t v23 = v40;
  (*(void (**)(uint64_t *, char *, uint64_t))(v40 + 16))(v22, v18, v21);
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v24 = v37;
  uint64_t v25 = v38;
  v38(v12, v37);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)();
  v44[0] = 0x3C53447961727241;
  v44[1] = 0xE800000000000000;
  UUID.init()();
  uint64_t v26 = UUID.uuidString.getter();
  uint64_t v28 = v27;
  v25(v12, v24);
  v29._uint64_t countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 62;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  uint64_t v31 = ArrayDataSource.init(arrangedSections:identifier:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v41, v42);
  return v31;
}

uint64_t sub_1000347C4()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  UIViewController.resolvedHealthExperienceStore.getter();
  sub_10001D3C4(0, &qword_1001050D8);
  type metadata accessor for DiskHealthExperienceStore();
  if (swift_dynamicCast())
  {
    swift_retain();
    dispatch thunk of DiskHealthExperienceStore.deleteAllObjects()();
    swift_release();
  }
  static Logger.general.getter();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "All Objects deleted!", v6, 2u);
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

void sub_100034990()
{
}

void sub_1000349AC()
{
}

void sub_1000349C8()
{
}

uint64_t sub_1000349F4()
{
  ArrayDataSource.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_100034A24()
{
  return type metadata accessor for PersistenceDataSource();
}

unint64_t sub_100034A2C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002BFF4(a1);
}

uint64_t sub_100034AA8(uint64_t a1, uint64_t a2)
{
  return sub_10002B8D0(a1, a2);
}

uint64_t sub_100034B08(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100034B8C(&qword_1001050C8, (void (*)(uint64_t))type metadata accessor for PersistenceDataSource);
  uint64_t result = sub_100034B8C(&qword_1001050D0, (void (*)(uint64_t))type metadata accessor for PersistenceDataSource);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100034B8C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100034BD4(void *a1)
{
  uint64_t v2 = self;
  id v3 = a1;
  id v4 = [v2 standardUserDefaults];
  v7[3] = type metadata accessor for DefaultCloudSyncStateStore();
  v7[4] = (uint64_t)&protocol witness table for DefaultCloudSyncStateStore;
  sub_100004F38(v7);
  DefaultCloudSyncStateStore.init(userDefaults:)();
  id v5 = objc_allocWithZone((Class)type metadata accessor for CloudSyncStateObserver());
  return CloudSyncStateObserver.init(healthStore:store:)();
}

uint64_t (**AllHealthDataDataSource.cloudSyncStateObserverFactory.unsafeMutableAddressor())()
{
  return &static AllHealthDataDataSource.cloudSyncStateObserverFactory;
}

uint64_t (*static AllHealthDataDataSource.cloudSyncStateObserverFactory.getter())()
{
  swift_beginAccess();
  uint64_t v0 = static AllHealthDataDataSource.cloudSyncStateObserverFactory;
  swift_retain();
  return v0;
}

uint64_t static AllHealthDataDataSource.cloudSyncStateObserverFactory.setter(uint64_t (*a1)(), uint64_t a2)
{
  static AllHealthDataDataSource.cloudSyncStateObserverFactory = a1;
  qword_1001050E8 = a2;
  return swift_release();
}

uint64_t (*static AllHealthDataDataSource.cloudSyncStateObserverFactory.modify())()
{
  return j__swift_endAccess;
}

uint64_t sub_100034D8C@<X0>(uint64_t a1@<X8>)
{
  sub_10000837C(0, &qword_100105138, (uint64_t (*)(uint64_t))sub_100020814, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v14[-v7];
  uint64_t v9 = v1 + qword_100105110;
  swift_beginAccess();
  sub_100037230(v9, (uint64_t)v8);
  sub_100020814(0);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v12 + 32))(a1, v8, v11);
  }
  sub_10003650C((uint64_t)v8);
  type metadata accessor for CloudSyncRestoreState();
  static LegacyObservable.create()();
  swift_retain();
  dispatch thunk of CloudSyncStateObserver.firstRestoreStateChangeHandler.setter();
  dispatch thunk of CloudSyncStateObserver.startFirstRestoreIfNeeded()();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v6, a1, v11);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v11);
  swift_beginAccess();
  sub_1000372C4((uint64_t)v6, v9);
  return swift_endAccess();
}

id AllHealthDataDataSource.cloudSyncStateObserver.getter()
{
  return *(id *)(v0 + direct field offset for AllHealthDataDataSource.cloudSyncStateObserver);
}

uint64_t AllHealthDataDataSource.__allocating_init(healthStore:healthExperienceStore:)(void *a1, uint64_t a2)
{
  return AllHealthDataDataSource.init(healthStore:healthExperienceStore:)(a1, a2);
}

uint64_t AllHealthDataDataSource.init(healthStore:healthExperienceStore:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_100020814(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v45 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v44 = (char *)&v41 - v11;
  sub_1000363F0(0, &qword_1001050F0, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v41 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v42 = (char *)&v41 - v14;
  sub_10003576C(0, &qword_1001050F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v47 = v8;
  uint64_t v48 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v2 + qword_100105110, 1, 1, v7);
  swift_beginAccess();
  uint64_t v20 = static AllHealthDataDataSource.cloudSyncStateObserverFactory;
  swift_retain();
  swift_retain();
  uint64_t v21 = ((uint64_t (*)(void *))v20)(a1);
  swift_release();
  *(void *)(v2 + direct field offset for AllHealthDataDataSource.cloudSyncStateObserver) = v21;
  uint64_t v46 = a2;
  sub_10001D360(a2, (uint64_t)v49);
  id v22 = a1;
  static AllDataSummarySection.Identifier.defaultAllDataSummarySections.getter();
  type metadata accessor for SnippetAllDataDataSource();
  swift_allocObject();
  id v43 = v22;
  SnippetAllDataDataSource.init(healthStore:healthExperienceStore:allDataSummarySections:additionalPredicates:)();
  type metadata accessor for NoDataDataSource();
  swift_retain();
  static NoDataDataSource.makeNoDataDataSource()();
  sub_1000356C8();
  swift_allocObject();
  PrimarySecondaryDataSource.init(primaryDataSource:secondaryDataSource:)();
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, enum case for HideableDataSource.Visibility.visible<A>(_:), v16);
  sub_10003574C(0);
  swift_allocObject();
  swift_retain();
  uint64_t v23 = HideableDataSource.init(source:visibility:)();
  *(void *)(v3 + qword_100108AF8) = v23;
  swift_retain();
  uint64_t v24 = sub_10001892C(0, 1, 1, (char *)&_swiftEmptyArrayStorage, (unint64_t *)&qword_100104AA8, &qword_100104AB0);
  unint64_t v26 = *((void *)v24 + 2);
  unint64_t v25 = *((void *)v24 + 3);
  if (v26 >= v25 >> 1) {
    uint64_t v24 = sub_10001892C((char *)(v25 > 1), v26 + 1, 1, v24, (unint64_t *)&qword_100104AA8, &qword_100104AB0);
  }
  uint64_t v27 = sub_1000363A8(&qword_100105120, sub_10003574C);
  *((void *)v24 + 2) = v26 + 1;
  uint64_t v28 = &v24[16 * v26];
  *((void *)v28 + 4) = v23;
  *((void *)v28 + 5) = v27;
  type metadata accessor for CloudSyncAllHealthDataDataSource(0);
  swift_allocObject();
  sub_100035D1C();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v42, enum case for HideableDataSource.Visibility.hidden<A>(_:), v41);
  sub_1000363F0(0, &qword_100105128, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for HideableDataSource);
  swift_allocObject();
  uint64_t v29 = HideableDataSource.init(source:visibility:)();
  *(void *)(v3 + qword_100108B00) = v29;
  unint64_t v30 = *((void *)v24 + 2);
  unint64_t v31 = *((void *)v24 + 3);
  swift_retain();
  if (v30 >= v31 >> 1) {
    uint64_t v24 = sub_10001892C((char *)(v31 > 1), v30 + 1, 1, v24, (unint64_t *)&qword_100104AA8, &qword_100104AB0);
  }
  unint64_t v32 = sub_100036458();
  *((void *)v24 + 2) = v30 + 1;
  uint64_t v33 = &v24[16 * v30];
  *((void *)v33 + 4) = v29;
  *((void *)v33 + 5) = v32;
  swift_release();
  uint64_t v34 = CompoundSectionedDataSource.init(_:)();
  swift_retain();
  uint64_t v35 = v45;
  sub_100034D8C(v45);
  id v36 = [self mainQueue];
  swift_allocObject();
  swift_weakInit();
  sub_1000363A8((unint64_t *)&qword_100104648, sub_100020814);
  uint64_t v37 = v44;
  uint64_t v38 = v48;
  ObservableConvertible.afterChange(on:_:)();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  _s6Health23OpenSleepScheduleIntentVwxx_0(v46);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
  v39(v35, v38);
  v39((uint64_t)v37, v38);
  return v34;
}

uint64_t type metadata accessor for CloudSyncAllHealthDataDataSource(uint64_t a1)
{
  return sub_1000172F0(a1, (uint64_t *)&unk_100105190);
}

void sub_1000356C8()
{
  if (!qword_100105100)
  {
    type metadata accessor for SnippetAllDataDataSource();
    type metadata accessor for MutableArrayDataSourceWithLayout();
    unint64_t v0 = type metadata accessor for PrimarySecondaryDataSource();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105100);
    }
  }
}

void sub_10003574C(uint64_t a1)
{
}

void sub_10003576C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_1000356C8();
    uint64_t v7 = v6;
    uint64_t v8 = sub_1000363A8(&qword_100105108, (void (*)(uint64_t))sub_1000356C8);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_100035808(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100035868(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100035868(uint64_t a1)
{
  sub_10003576C(0, &qword_1001050F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v17 = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - v4;
  sub_1000363F0(0, &qword_1001050F0, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = type metadata accessor for CloudSyncRestoreState();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  if (CloudSyncRestoreState.isOngoing.getter())
  {
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for HideableDataSource.Visibility.visible<A>(_:), v7);
    dispatch thunk of HideableDataSource.visibility.setter();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for HideableDataSource.Visibility.hidden<A>(_:), v17);
    dispatch thunk of HideableDataSource.visibility.setter();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for HideableDataSource.Visibility.hidden<A>(_:), v7);
    dispatch thunk of HideableDataSource.visibility.setter();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for HideableDataSource.Visibility.visible<A>(_:), v17);
    return dispatch thunk of HideableDataSource.visibility.setter();
  }
}

void AllHealthDataDataSource.init(_:)()
{
}

uint64_t sub_100035BB0()
{
  sub_10003650C(v0 + qword_100105110);

  swift_release();

  return swift_release();
}

uint64_t AllHealthDataDataSource.deinit()
{
  uint64_t v0 = CompoundSectionedDataSource.deinit();
  sub_10003650C(v0 + qword_100105110);

  swift_release();
  swift_release();
  return v0;
}

uint64_t AllHealthDataDataSource.__deallocating_deinit()
{
  uint64_t v0 = CompoundSectionedDataSource.deinit();
  sub_10003650C(v0 + qword_100105110);

  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_100035D1C()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for EmptyStateCollectionViewCellItem();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [self mainBundle];
  v9._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  v24._uint64_t countAndFlagsBits = 0xD000000000000052;
  v24._object = (void *)0x80000001000D1E60;
  v9._object = (void *)0x80000001000D1E00;
  v10._object = (void *)0x80000001000D1E30;
  v10._uint64_t countAndFlagsBits = 0xD000000000000028;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v24);

  EmptyStateCollectionViewCellItem.init(title:showSpinner:)();
  sub_10001E974();
  uint64_t v11 = swift_allocObject();
  long long v21 = xmmword_1000CBFD0;
  *(_OWORD *)(v11 + 16) = xmmword_1000CBFD0;
  sub_100003DD8(0, (unint64_t *)&qword_100104860, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = v21;
  *(void *)(v12 + 56) = v4;
  *(void *)(v12 + 64) = sub_1000363A8(&qword_100105228, (void (*)(uint64_t))&type metadata accessor for EmptyStateCollectionViewCellItem);
  uint64_t v13 = sub_100004F38((uint64_t *)(v12 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 16))(v13, v7, v4);
  *(void *)(v11 + 32) = v12;
  uint64_t v22 = 0x3C53447961727241;
  unint64_t v23 = 0xE800000000000000;
  UUID.init()();
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 62;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  uint64_t v19 = ArrayDataSource.init(_:identifier:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v19;
}

void sub_10003605C()
{
}

void sub_100036078()
{
}

void sub_100036094()
{
}

uint64_t sub_1000360C0()
{
  return UICollectionView.registerCell<A>(_:)();
}

uint64_t sub_1000360F8()
{
  uint64_t v0 = type metadata accessor for LayoutConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v10 - v5;
  CollectionViewLayoutContext.environment.getter();
  static LayoutConfiguration.pill(environment:)();
  swift_unknownObjectRelease();
  LayoutConfiguration.withoutHeader.getter();
  uint64_t v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v6, v0);
  uint64_t v8 = LayoutConfiguration.layoutSection.getter();
  v7(v4, v0);
  return v8;
}

void *sub_100036234(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100003DD8(0, (unint64_t *)&qword_100104860, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      Swift::String v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      Swift::String v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100036C4C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100036370(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100036740(a1, a2, a3, a4, &qword_1001051E0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t (*)(void))&type metadata accessor for ContentConfigurationItem, (uint64_t (*)(void))&type metadata accessor for ContentConfigurationItem);
}

uint64_t sub_1000363A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000363F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void *))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for CloudSyncAllHealthDataDataSource(255);
    unint64_t v7 = a3(a1, v6, &protocol witness table for ArrayDataSource);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_100036458()
{
  unint64_t result = qword_100105130;
  if (!qword_100105130)
  {
    sub_1000363F0(255, &qword_100105128, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for HideableDataSource);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105130);
  }
  return result;
}

uint64_t sub_1000364CC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100036504(uint64_t a1)
{
  return sub_100035808(a1);
}

uint64_t sub_10003650C(uint64_t a1)
{
  sub_10000837C(0, &qword_100105138, (uint64_t (*)(uint64_t))sub_100020814, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AllHealthDataDataSource(uint64_t a1)
{
  return sub_1000172F0(a1, (uint64_t *)&unk_100105140);
}

void sub_1000365B8()
{
  sub_10000837C(319, &qword_100105138, (uint64_t (*)(uint64_t))sub_100020814, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t sub_10003669C()
{
  return type metadata accessor for AllHealthDataDataSource(0);
}

uint64_t sub_1000366A4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000366E4()
{
  return type metadata accessor for CloudSyncAllHealthDataDataSource(0);
}

char *sub_1000366EC(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10001892C(a1, a2, a3, a4, &qword_100105200, (unint64_t *)&qword_100105208);
}

uint64_t sub_100036708(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100036740(a1, a2, a3, a4, &qword_100105210, (uint64_t (*)(uint64_t))type metadata accessor for HealthViewEntity, (uint64_t (*)(void))type metadata accessor for HealthViewEntity, (uint64_t (*)(void))type metadata accessor for HealthViewEntity);
}

uint64_t sub_100036740(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(void), uint64_t (*a8)(void))
{
  if (a3)
  {
    unint64_t v12 = *(void *)(a4 + 24);
    uint64_t v13 = v12 >> 1;
    if ((uint64_t)(v12 >> 1) < a2)
    {
      if (v13 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v12 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v13 = a2;
      }
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v13 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v13;
  }
  if (!v15)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000837C(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v16 = *(void *)(a7(0) - 8);
  uint64_t v17 = *(void *)(v16 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (void *)swift_allocObject();
  size_t v20 = j__malloc_size(v19);
  if (!v17 || (v20 - v18 == 0x8000000000000000 ? (BOOL v21 = v17 == -1) : (BOOL v21 = 0), v21))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  _OWORD v19[2] = v14;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v17);
LABEL_19:
  uint64_t v22 = *(void *)(a7(0) - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v19 + v23;
  if (a1)
  {
    if ((unint64_t)v19 < a4 || v24 >= a4 + v23 + *(void *)(v22 + 72) * v14)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v19 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100036D6C(0, v14, v24, a4, a8);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v19;
}

char *sub_1000369DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000193A8(0, (unint64_t *)&qword_100107330);
      Swift::String v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100036EC8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100036AF8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000193A8(0, &qword_100105230);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10003713C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100036C14(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100036740(a1, a2, a3, a4, &qword_100105218, (uint64_t (*)(uint64_t))sub_1000370A8, (uint64_t (*)(void))sub_1000370A8, (uint64_t (*)(void))sub_1000370A8);
}

uint64_t sub_100036C4C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_10001D414(0, (unint64_t *)&qword_100106A40);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100036D6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100036EC8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100036FBC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000370A8()
{
  if (!qword_100105220)
  {
    type metadata accessor for HealthViewEntity();
    sub_1000363A8((unint64_t *)&qword_100104700, (void (*)(uint64_t))type metadata accessor for HealthViewEntity);
    unint64_t v0 = type metadata accessor for IntentItemSection();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105220);
    }
  }
}

uint64_t sub_10003713C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100037230(uint64_t a1, uint64_t a2)
{
  sub_10000837C(0, &qword_100105138, (uint64_t (*)(uint64_t))sub_100020814, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000372C4(uint64_t a1, uint64_t a2)
{
  sub_10000837C(0, &qword_100105138, (uint64_t (*)(uint64_t))sub_100020814, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t SummaryPinnedContentGradientColorProvider.colors.getter()
{
  return swift_retain();
}

uint64_t SummaryPinnedContentGradientColorProvider.colors.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*SummaryPinnedContentGradientColorProvider.colors.modify())()
{
  return j__swift_endAccess;
}

unint64_t sub_10003742C()
{
  unint64_t result = qword_1001051F8;
  if (!qword_1001051F8)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1001051F8);
  }
  return result;
}

uint64_t *SummaryPinnedContentGradientColorProvider.__allocating_init(contentProvider:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = sub_1000374D8(a1, v3);
  unint64_t v6 = sub_10003838C(v5, v1, v3, v4);
  _s6Health23OpenSleepScheduleIntentVwxx_0(a1);
  return v6;
}

uint64_t sub_1000374D8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t *SummaryPinnedContentGradientColorProvider.init(contentProvider:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = sub_1000374D8(a1, v3);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = sub_1000381A4((uint64_t)v7, v1, v3, v4);
  _s6Health23OpenSleepScheduleIntentVwxx_0(a1);
  return v9;
}

void sub_10003761C(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t SummaryPinnedContentGradientColorProvider.deinit()
{
  swift_release();
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 24);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SummaryPinnedContentGradientColorProvider.__deallocating_deinit()
{
  swift_release();
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 24);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10003769C()
{
  return _s6Health41SummaryPinnedContentGradientColorProviderC27configureForTraitCollectionyySo07UITraitK0CF_0();
}

uint64_t sub_1000376C0(id *__src, id *a2, id *a3, id *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v8 = (char *)a2 - (char *)__src;
  }
  uint64_t v9 = v8 >> 4;
  uint64_t v10 = (char *)a3 - (char *)a2;
  uint64_t v11 = (char *)a3 - (char *)a2 + 15;
  if ((char *)a3 - (char *)a2 >= 0) {
    uint64_t v11 = (char *)a3 - (char *)a2;
  }
  uint64_t v12 = v11 >> 4;
  uint64_t v61 = __src;
  uint64_t v60 = __dst;
  id v57 = a3;
  if (v9 >= v11 >> 4)
  {
    if (v10 < -15) {
      goto LABEL_60;
    }
    if (__dst != a2 || &a2[2 * v12] <= __dst)
    {
      memmove(__dst, a2, 16 * v12);
      a3 = v57;
    }
    unint64_t v32 = &v4[2 * v12];
    uint64_t v59 = (char *)v32;
    uint64_t v61 = v5;
    if (v6 >= v5 || v10 < 16)
    {
LABEL_59:
      sub_100091194((void **)&v61, (const void **)&v60, &v59);
      return 1;
    }
    uint64_t v33 = v5;
    uint64_t v51 = v4;
    uint64_t v56 = v6;
    while (1)
    {
      uint64_t v34 = (uint64_t)*(v32 - 1);
      id v36 = *(v33 - 2);
      uint64_t v35 = (uint64_t)*(v33 - 1);
      v33 -= 2;
      if (v34 == v35)
      {
        uint64_t v58 = a3;
        id v37 = *(v32 - 2);
        id v38 = v36;
        uint64_t v52 = v37;
        id v39 = [v37 categoryName];
        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v42 = v41;

        uint64_t v54 = v38;
        id v43 = [v38 categoryName];
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v46 = v45;

        if (v40 == v44 && v42 == v46)
        {

          swift_bridgeObjectRelease_n();
          uint64_t v6 = v56;
          a3 = v58;
          id v49 = v58 - 2;
          uint64_t v4 = v51;
LABEL_53:
          uint64_t v59 = (char *)(v32 - 2);
          if (a3 < v32 || v49 >= v32 || a3 != v32) {
            *(_OWORD *)id v49 = *((_OWORD *)v32 - 1);
          }
          uint64_t v33 = v5;
          v32 -= 2;
          if (v5 <= v6) {
            goto LABEL_59;
          }
          goto LABEL_58;
        }
        char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v6 = v56;
        a3 = v58;
        id v49 = v58 - 2;
        uint64_t v4 = v51;
        if ((v48 & 1) == 0) {
          goto LABEL_53;
        }
      }
      else
      {
        id v49 = a3 - 2;
        if (v35 >= v34) {
          goto LABEL_53;
        }
      }
      if (a3 != v5 || v49 >= v5) {
        *(_OWORD *)id v49 = *(_OWORD *)v33;
      }
      uint64_t v61 = v33;
      if (v33 <= v6) {
        goto LABEL_59;
      }
LABEL_58:
      uint64_t v5 = v33;
      a3 = v49;
      if (v32 <= v4) {
        goto LABEL_59;
      }
    }
  }
  if (v7 >= -15)
  {
    if (__dst != __src || &__src[2 * v9] <= __dst)
    {
      memmove(__dst, __src, 16 * v9);
      a3 = v57;
    }
    unint64_t v13 = &v4[2 * v9];
    uint64_t v59 = (char *)v13;
    if (v5 < a3 && v7 >= 16)
    {
      uint64_t v53 = &v4[2 * v9];
      while (1)
      {
        id v14 = v5[1];
        id v15 = v4[1];
        if (v14 == v15)
        {
          uint64_t v55 = v6;
          uint64_t v16 = v4;
          id v17 = *v4;
          id v18 = *v5;
          id v19 = v17;
          id v20 = [v18 categoryName];
          uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v23 = v22;

          unint64_t v24 = v19;
          id v25 = [v19 categoryName];
          uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v28 = v27;

          if (v21 == v26 && v23 == v28)
          {

            swift_bridgeObjectRelease_n();
            uint64_t v4 = v16;
            uint64_t v6 = v55;
            a3 = v57;
            unint64_t v13 = v53;
          }
          else
          {
            char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v4 = v16;
            uint64_t v6 = v55;
            a3 = v57;
            unint64_t v13 = v53;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        else if ((uint64_t)v15 < (uint64_t)v14)
        {
LABEL_21:
          unint64_t v31 = v5 + 2;
          if (v6 < v5 || v6 >= v31 || v6 != v5) {
            *(_OWORD *)uint64_t v6 = *(_OWORD *)v5;
          }
          goto LABEL_29;
        }
        if (v6 != v4) {
          *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
        }
        v4 += 2;
        uint64_t v60 = v4;
        unint64_t v31 = v5;
LABEL_29:
        v6 += 2;
        if (v4 < v13)
        {
          uint64_t v5 = v31;
          if (v31 < a3) {
            continue;
          }
        }
        uint64_t v61 = v6;
        goto LABEL_59;
      }
    }
    goto LABEL_59;
  }
LABEL_60:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100037B3C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100038610();
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    id v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *id v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

id sub_100037E50()
{
  uint64_t v1 = v0;
  sub_10001B27C();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100037FF0()
{
  uint64_t v1 = v0;
  sub_100038610();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t *sub_1000381A4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  v14[3] = a3;
  v14[4] = a4;
  uint64_t v9 = v8;
  uint64_t v10 = sub_100004F38(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(v10, a1, a3);
  sub_10001F198();
  swift_allocObject();
  a2[2] = CurrentValueSubject.init(_:)();
  a2[8] = (uint64_t)&_swiftEmptySetSingleton;
  sub_10001D360((uint64_t)v14, (uint64_t)(a2 + 3));
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v9;
  sub_10001F22C();
  sub_1000385B8();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v14);
  return a2;
}

uint64_t *sub_10003838C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SummaryPinnedContentGradientColorProvider();
  uint64_t v10 = (uint64_t *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  return sub_1000381A4((uint64_t)v9, v10, a3, a4);
}

uint64_t _s6Health41SummaryPinnedContentGradientColorProviderC27configureForTraitCollectionyySo07UITraitK0CF_0()
{
  swift_beginAccess();
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  sub_1000190DC(v0 + 3, v1);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  swift_retain();
  v3(v1, v2);
  CurrentValueSubject.value.getter();
  swift_release();
  _s6Health41SummaryPinnedContentGradientColorProviderC6colors4fromSaySo7UIColorCGSay0A8Platform8FeedItemCG_tFZ_0(v5);
  swift_bridgeObjectRelease();
  CurrentValueSubject.send(_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100038548()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100038580()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000385B8()
{
  unint64_t result = qword_100106AA0;
  if (!qword_100106AA0)
  {
    sub_10001F22C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106AA0);
  }
  return result;
}

void sub_100038610()
{
  if (!qword_100105348)
  {
    sub_10001EE98(255, &qword_100104190, (unint64_t *)&qword_100104198);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105348);
    }
  }
}

id sub_100038690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100038CF4(a1, a4, *v4, v4[1]);
}

uint64_t sub_1000386A0()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0);
  sub_100038AD4();
  uint64_t v1 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
  if (*(void *)(v1 + 16) != 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  static String._fromSubstring(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(v1 + 16) >= 2uLL)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for FoundationPluginBundleProvider();
    swift_bridgeObjectRetain();
    static FoundationPluginBundleProvider.sharedInstance.getter();
    uint64_t v3 = (void *)dispatch thunk of PluginBundleProvider.loadAndValidatePluginBundle(named:)();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v4 = NSBundle.getPluginAppDelegateClass()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return v4;
  }
  __break(1u);
  return result;
}

unint64_t sub_100038AD4()
{
  unint64_t result = qword_100105350;
  if (!qword_100105350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105350);
  }
  return result;
}

uint64_t destroy for PluginPPT()
{
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PluginPPT(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PluginPPT(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v4;
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PluginPPT(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginPPT(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginPPT(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginPPT()
{
  return &type metadata for PluginPPT;
}

id sub_100038CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[1] = (uint64_t)&OBJC_PROTOCOL___UIApplicationTestingDelegate;
  uint64_t v11 = (void *)swift_dynamicCastObjCProtocolConditional();
  if (!v11)
  {
    static Logger.general.getter();
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v26 = a4;
      v27[0] = v19;
      uint64_t v24 = v8;
      uint64_t v25 = a3;
      *(_DWORD *)uint64_t v18 = 136446210;
      unint64_t v23 = v18 + 4;
      sub_10001D414(0, (unint64_t *)&unk_1001053C0);
      swift_unknownObjectRetain();
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v25 = sub_100018DA0(v20, v21, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "PluginAppDelegate does not conform to UIApplicationTestingDelegate: %{public}s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    return 0;
  }
  uint64_t v12 = v11;
  if (([v11 respondsToSelector:"application:runTest:options:"] & 1) == 0) {
    return 0;
  }
  swift_unknownObjectRetain_n();
  NSString v13 = String._bridgeToObjectiveC()();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v15 = [v12 application:a1 runTest:v13 options:isa];
  swift_unknownObjectRelease_n();

  return v15;
}

void *initializeBufferWithCopyOfBuffer for NotificationInstructionListView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for NotificationInstructionListView()
{
  return swift_release();
}

void *assignWithCopy for NotificationInstructionListView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for NotificationInstructionListView(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for NotificationInstructionListView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationInstructionListView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationInstructionListView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationInstructionListView()
{
  return &type metadata for NotificationInstructionListView;
}

uint64_t sub_100039188()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000391A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v49 = a1;
  uint64_t v50 = a2;
  uint64_t v60 = a3;
  uint64_t v5 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v58 = *(void *)(v5 - 8);
  uint64_t v59 = v5;
  __chkstk_darwin(v5);
  id v57 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for InsetGroupedListStyle();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003ABF4();
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B498();
  uint64_t v48 = v16;
  uint64_t v51 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B56C();
  uint64_t v53 = v19;
  uint64_t v55 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v46 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B670();
  uint64_t v56 = v21;
  uint64_t v54 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v47 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B7AC();
  uint64_t v52 = v23;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = a1;
  uint64_t v62 = a2;
  sub_10003CCB8(0, &qword_100105438, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
  sub_10003B1C0();
  List<>.init(content:)();
  InsetGroupedListStyle.init()();
  uint64_t v26 = sub_10003E61C(&qword_1001054E0, (void (*)(uint64_t))sub_10003ABF4);
  View.listStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v63 = v12;
  uint64_t v64 = v7;
  uint64_t v65 = v26;
  uint64_t v66 = &protocol witness table for InsetGroupedListStyle;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v28 = v46;
  uint64_t v29 = v48;
  View.navigationTitle(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v51 + 8))(v18, v29);
  uint64_t v31 = v57;
  uint64_t v32 = v58;
  uint64_t v33 = v59;
  (*(void (**)(char *, void, uint64_t))(v58 + 104))(v57, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v59);
  uint64_t v63 = v30;
  uint64_t v64 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  int64_t v34 = v47;
  uint64_t v35 = v53;
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v28, v35);
  uint64_t v36 = swift_allocObject();
  uint64_t v38 = v49;
  uint64_t v37 = v50;
  *(void *)(v36 + 16) = v49;
  *(void *)(v36 + 24) = v37;
  uint64_t v39 = v54;
  uint64_t v40 = v56;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v25, v34, v56);
  uint64_t v41 = (void (**)())&v25[*(int *)(v52 + 36)];
  *uint64_t v41 = sub_10003B84C;
  v41[1] = (void (*)())v36;
  v41[2] = 0;
  v41[3] = 0;
  uint64_t v42 = *(void (**)(char *, uint64_t))(v39 + 8);
  swift_retain();
  v42(v34, v40);
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v38;
  *(void *)(v43 + 24) = v37;
  sub_10003B8EC();
  swift_retain();
  View.refreshable(action:)();
  swift_release();
  return sub_10003BA4C((uint64_t)v25);
}

uint64_t sub_100039880@<X0>(uint64_t a1@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v1 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v1 - 8);
  sub_10003CCB8(0, &qword_100105518, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent.Storage);
  uint64_t v3 = v2;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v35 - v4;
  sub_10003AC90();
  uint64_t v38 = v6;
  uint64_t v36 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003CD3C(0, &qword_100105520, (uint64_t (*)(uint64_t, void *, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  uint64_t v37 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v35 - v10;
  sub_10003CD3C(0, &qword_100105440, (uint64_t (*)(uint64_t, void *, uint64_t))&type metadata accessor for _ConditionalContent);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v35 - v13;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  unint64_t v15 = v40;
  if (v41)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v16._uint64_t countAndFlagsBits = 0x203A726F727245;
    v16._object = (void *)0xE700000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v16);
    unint64_t v40 = v15;
    sub_100022650(v15, 1);
    sub_10001E8C0();
    v17._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v18);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v19 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v21 = v20;
    *(void *)uint64_t v5 = v19;
    *((void *)v5 + 1) = v20;
    char v23 = v22 & 1;
    v5[16] = v22 & 1;
    *((void *)v5 + 3) = v24;
    swift_storeEnumTagMultiPayload();
    sub_10003CDAC(v19, v21, v23);
    sub_10003B254();
    swift_bridgeObjectRetain();
    _ConditionalContent<>.init(storage:)();
    sub_10003CDBC(v15, 1);
    sub_10003CDC8(v19, v21, v23);
    return swift_bridgeObjectRelease();
  }
  uint64_t v35 = v3;
  if (v40 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    sub_10003CDBC(v15, 0);
    if (v31) {
      goto LABEL_5;
    }
LABEL_7:
    sub_10003CDBC(v15, 0);
    LocalizedStringKey.init(stringLiteral:)();
    *(void *)uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
    *((void *)v11 + 1) = v32;
    v11[16] = v33 & 1;
    *((void *)v11 + 3) = v34;
    swift_storeEnumTagMultiPayload();
    sub_10003B2E8();
    _ConditionalContent<>.init(storage:)();
    goto LABEL_8;
  }
  if (!*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v26 = sub_10003DE1C(v15);
  sub_10003CDBC(v15, 0);
  uint64_t v27 = swift_bridgeObjectRetain();
  uint64_t v28 = sub_10008FDDC(v27);
  swift_bridgeObjectRelease();
  unint64_t v40 = (unint64_t)v28;
  swift_getKeyPath();
  *(void *)(swift_allocObject() + 16) = v26;
  sub_10003E0A0(0, (unint64_t *)&qword_1001046D8, (uint64_t)&type metadata for String, (uint64_t (*)(void, uint64_t))&type metadata accessor for Array);
  sub_10003E498(0, &qword_100105450, (void (*)(uint64_t))sub_10003AD64);
  sub_10003B144();
  sub_10003B358();
  ForEach<>.init(_:id:content:)();
  uint64_t v29 = v36;
  uint64_t v30 = v38;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v11, v8, v38);
  swift_storeEnumTagMultiPayload();
  sub_10003B2E8();
  _ConditionalContent<>.init(storage:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
LABEL_8:
  sub_10003DF84((uint64_t)v14, (uint64_t)v5);
  swift_storeEnumTagMultiPayload();
  sub_10003B254();
  _ConditionalContent<>.init(storage:)();
  return sub_10003E004((uint64_t)v14);
}

uint64_t sub_100039EF0()
{
  return Section<>.init(header:content:)();
}

uint64_t sub_100039FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_100094D80(a2, a3);
    if (v7)
    {
      unint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8 * v6);
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if ((v8 & 0x8000000000000000) != 0 || (v8 & 0x4000000000000000) != 0)
  {
    unint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t)sub_10008FED0(v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  uint64_t v12 = v9;
  sub_10003CDD8(&v12);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  sub_10001EEF0(0, &qword_100104190, (uint64_t (*)(uint64_t))sub_10003AE2C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_10003AE6C();
  sub_10003B0BC();
  sub_10003E61C(&qword_1001054D0, (void (*)(uint64_t))sub_10003AE6C);
  return ForEach<>.init(_:id:content:)();
}

void sub_10003A178(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 messageIdentifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_10003A1D0(void **a1)
{
  uint64_t v1 = *a1;
  sub_10003AF24();
  sub_10003E61C(&qword_100105488, (void (*)(uint64_t))sub_10003AF24);
  sub_10003B068();
  id v2 = v1;
  return NavigationLink.init(destination:label:)();
}

__n128 sub_10003A298@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static HorizontalAlignment.leading.getter();
  sub_10003A31C(a1, (uint64_t)&v11);
  char v5 = v12;
  uint64_t v6 = v13;
  char v7 = v15;
  uint64_t v8 = v16;
  __n128 result = v11;
  long long v10 = v14;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = 0x4010000000000000;
  *(unsigned char *)(a2 + 16) = 0;
  *(__n128 *)(a2 + 24) = result;
  *(unsigned char *)(a2 + 40) = v5;
  *(void *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 56) = v10;
  *(unsigned char *)(a2 + 72) = v7;
  *(void *)(a2 + 80) = v8;
  return result;
}

uint64_t sub_10003A31C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 categoryIdentifier];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  swift_bridgeObjectRelease();
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  id v45 = a1;
  if (v8)
  {
    id v9 = [a1 categoryIdentifier];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  sub_100038AD4();
  uint64_t v10 = Text.init<A>(_:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  static Font.body.getter();
  uint64_t v15 = Text.font(_:)();
  uint64_t v17 = v16;
  char v19 = v18;
  swift_release();
  sub_10003CDC8(v10, v12, v14);
  swift_bridgeObjectRelease();
  static Color.primary.getter();
  uint64_t v20 = Text.foregroundColor(_:)();
  uint64_t v47 = v21;
  uint64_t v48 = v20;
  char v23 = v22;
  uint64_t v49 = v24;
  swift_release();
  char v46 = v23 & 1;
  sub_10003CDC8(v15, v17, v19 & 1);
  swift_bridgeObjectRelease();
  id v25 = [v45 creationDate];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000B6E68(v26);
  swift_bridgeObjectRelease();
  uint64_t v27 = Text.init<A>(_:)();
  uint64_t v29 = v28;
  char v31 = v30 & 1;
  static Font.caption.getter();
  uint64_t v32 = Text.font(_:)();
  uint64_t v34 = v33;
  char v36 = v35;
  swift_release();
  sub_10003CDC8(v27, v29, v31);
  swift_bridgeObjectRelease();
  static Color.secondary.getter();
  uint64_t v37 = Text.foregroundColor(_:)();
  uint64_t v39 = v38;
  char v41 = v40;
  uint64_t v43 = v42;
  swift_release();
  sub_10003CDC8(v32, v34, v36 & 1);
  swift_bridgeObjectRelease();
  *(void *)a2 = v48;
  *(void *)(a2 + 8) = v47;
  *(unsigned char *)(a2 + 16) = v46;
  *(void *)(a2 + 24) = v49;
  *(void *)(a2 + 32) = v37;
  *(void *)(a2 + 40) = v39;
  *(unsigned char *)(a2 + 48) = v41 & 1;
  *(void *)(a2 + 56) = v43;
  sub_10003CDAC(v48, v47, v46);
  swift_bridgeObjectRetain();
  sub_10003CDAC(v37, v39, v41 & 1);
  swift_bridgeObjectRetain();
  sub_10003CDC8(v37, v39, v41 & 1);
  swift_bridgeObjectRelease();
  sub_10003CDC8(v48, v47, v46);
  return swift_bridgeObjectRelease();
}

void sub_10003A658(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  id v4 = objc_allocWithZone((Class)HKNotificationInstructionDiagnosticQuery);
  v8[4] = sub_10003BAE0;
  void v8[5] = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10003CC10;
  v8[3] = &unk_1000F5C38;
  uint64_t v5 = _Block_copy(v8);
  swift_retain();
  swift_retain();
  id v6 = [v4 initWithResultsHandler:v5];
  _Block_release(v5);
  swift_release();
  swift_release();
  [*(id *)(a2 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_healthStore) executeQuery:v6];
  unint64_t v7 = *(void **)(a2 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_notificationInstructionQuery);
  *(void *)(a2 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_notificationInstructionQuery) = v6;
  swift_release();
}

uint64_t sub_10003A7A0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 64) = a2;
  type metadata accessor for MainActor();
  *(void *)(v2 + 72) = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10003A838, v4, v3);
}

uint64_t sub_10003A838()
{
  uint64_t v1 = v0[8];
  swift_release();
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  id v3 = objc_allocWithZone((Class)HKNotificationInstructionDiagnosticQuery);
  v0[6] = sub_10003BAE0;
  v0[7] = v2;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_10003CC10;
  v0[5] = &unk_1000F5C10;
  uint64_t v4 = _Block_copy(v0 + 2);
  swift_retain();
  swift_retain();
  id v5 = [v3 initWithResultsHandler:v4];
  _Block_release(v4);
  swift_release();
  swift_release();
  [*(id *)(v1 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_healthStore) executeQuery:v5];
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_notificationInstructionQuery);
  *(void *)(v1 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_notificationInstructionQuery) = v5;
  swift_release();

  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10003A9B4(uint64_t *a1, id *a2)
{
  id v3 = *a2;
  id v4 = [*a2 clientIdentifier];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  uint64_t v8 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v9 = sub_100094D80(v5, v7), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    id v12 = [v3 clientIdentifier];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    id v16 = v3;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *a1;
    *a1 = 0x8000000000000000;
    uint64_t v18 = v11;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v19 = [v3 clientIdentifier];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v20;

    sub_10003E0A0(0, (unint64_t *)&qword_1001057E0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(void, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1000CC620;
    *(void *)(v21 + 32) = v3;
    uint64_t v26 = v21;
    specialized Array._endMutation()();
    uint64_t v22 = v26;
    id v23 = v3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *a1;
    *a1 = 0x8000000000000000;
    uint64_t v18 = v22;
  }
  sub_10003DCAC(v18, v13, v15, isUniquelyReferenced_nonNull_native);
  *a1 = v25;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003ABEC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000391A4(*v1, v1[1], a1);
}

void sub_10003ABF4()
{
  if (!qword_100105430)
  {
    sub_10003CCB8(255, &qword_100105438, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
    sub_10003B1C0();
    unint64_t v0 = type metadata accessor for List();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105430);
    }
  }
}

void sub_10003AC90()
{
  if (!qword_100105448)
  {
    sub_10003E0A0(255, (unint64_t *)&qword_1001046D8, (uint64_t)&type metadata for String, (uint64_t (*)(void, uint64_t))&type metadata accessor for Array);
    sub_10003E498(255, &qword_100105450, (void (*)(uint64_t))sub_10003AD64);
    sub_10003B144();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105448);
    }
  }
}

void sub_10003AD64()
{
  if (!qword_100105458)
  {
    sub_10001EEF0(255, &qword_100104190, (uint64_t (*)(uint64_t))sub_10003AE2C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    sub_10003AE6C();
    sub_10003B0BC();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105458);
    }
  }
}

unint64_t sub_10003AE2C()
{
  unint64_t result = qword_100104198;
  if (!qword_100104198)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100104198);
  }
  return result;
}

void sub_10003AE6C()
{
  if (!qword_100105460)
  {
    sub_10003AF24();
    sub_10003E61C(&qword_100105488, (void (*)(uint64_t))sub_10003AF24);
    sub_10003B068();
    unint64_t v0 = type metadata accessor for NavigationLink();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105460);
    }
  }
}

void sub_10003AF24()
{
  if (!qword_100105468)
  {
    sub_10003AFA0(255, &qword_100105470, &qword_100105478);
    sub_10003AFF8();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105468);
    }
  }
}

void sub_10003AFA0(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_10003E348(255, a3);
    unint64_t v4 = type metadata accessor for TupleView();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_10003AFF8()
{
  unint64_t result = qword_100105480;
  if (!qword_100105480)
  {
    sub_10003AFA0(255, &qword_100105470, &qword_100105478);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105480);
  }
  return result;
}

unint64_t sub_10003B068()
{
  unint64_t result = qword_100105490;
  if (!qword_100105490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105490);
  }
  return result;
}

unint64_t sub_10003B0BC()
{
  unint64_t result = qword_100105498;
  if (!qword_100105498)
  {
    sub_10001EEF0(255, &qword_100104190, (uint64_t (*)(uint64_t))sub_10003AE2C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105498);
  }
  return result;
}

unint64_t sub_10003B144()
{
  unint64_t result = qword_1001054A0;
  if (!qword_1001054A0)
  {
    sub_10003E0A0(255, (unint64_t *)&qword_1001046D8, (uint64_t)&type metadata for String, (uint64_t (*)(void, uint64_t))&type metadata accessor for Array);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001054A0);
  }
  return result;
}

unint64_t sub_10003B1C0()
{
  unint64_t result = qword_1001054A8;
  if (!qword_1001054A8)
  {
    sub_10003CCB8(255, &qword_100105438, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
    sub_10003B254();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001054A8);
  }
  return result;
}

unint64_t sub_10003B254()
{
  unint64_t result = qword_1001054B0;
  if (!qword_1001054B0)
  {
    sub_10003CD3C(255, &qword_100105440, (uint64_t (*)(uint64_t, void *, uint64_t))&type metadata accessor for _ConditionalContent);
    sub_10003B2E8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001054B0);
  }
  return result;
}

unint64_t sub_10003B2E8()
{
  unint64_t result = qword_1001054B8;
  if (!qword_1001054B8)
  {
    sub_10003AC90();
    sub_10003B358();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001054B8);
  }
  return result;
}

unint64_t sub_10003B358()
{
  unint64_t result = qword_1001054C0;
  if (!qword_1001054C0)
  {
    sub_10003E498(255, &qword_100105450, (void (*)(uint64_t))sub_10003AD64);
    sub_10003B3F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001054C0);
  }
  return result;
}

unint64_t sub_10003B3F8()
{
  unint64_t result = qword_1001054C8;
  if (!qword_1001054C8)
  {
    sub_10003AD64();
    sub_10003E61C(&qword_1001054D0, (void (*)(uint64_t))sub_10003AE6C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001054C8);
  }
  return result;
}

void sub_10003B498()
{
  if (!qword_1001054D8)
  {
    sub_10003ABF4();
    type metadata accessor for InsetGroupedListStyle();
    sub_10003E61C(&qword_1001054E0, (void (*)(uint64_t))sub_10003ABF4);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001054D8);
    }
  }
}

void sub_10003B56C()
{
  if (!qword_1001054E8)
  {
    sub_10003B498();
    sub_10003ABF4();
    type metadata accessor for InsetGroupedListStyle();
    sub_10003E61C(&qword_1001054E0, (void (*)(uint64_t))sub_10003ABF4);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001054E8);
    }
  }
}

void sub_10003B670()
{
  if (!qword_1001054F0)
  {
    sub_10003B56C();
    sub_10003B498();
    sub_10003ABF4();
    type metadata accessor for InsetGroupedListStyle();
    sub_10003E61C(&qword_1001054E0, (void (*)(uint64_t))sub_10003ABF4);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001054F0);
    }
  }
}

void sub_10003B7AC()
{
  if (!qword_1001054F8)
  {
    sub_10003B670();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, &qword_1001054F8);
    }
  }
}

uint64_t sub_10003B80C@<X0>(uint64_t a1@<X8>)
{
  return sub_100039880(a1);
}

uint64_t sub_10003B814()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10003B84C()
{
  sub_10003A658(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10003B854()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_100028DB8;
  return sub_10003A7A0(v2, v3);
}

unint64_t sub_10003B8EC()
{
  unint64_t result = qword_100105510;
  if (!qword_100105510)
  {
    sub_10003B7AC();
    sub_10003B56C();
    sub_10003B498();
    sub_10003ABF4();
    type metadata accessor for InsetGroupedListStyle();
    sub_10003E61C(&qword_1001054E0, (void (*)(uint64_t))sub_10003ABF4);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105510);
  }
  return result;
}

uint64_t sub_10003BA4C(uint64_t a1)
{
  sub_10003B7AC();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003BAA8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003BAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10002121C(a1, a2, a3);
}

uint64_t sub_10003BAE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  sub_10003E498(0, &qword_100105570, (void (*)(uint64_t))sub_10003E4FC);
  uint64_t v67 = v3;
  uint64_t v68 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v66 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v69 = (char *)&v52 - v6;
  sub_10003E398();
  uint64_t v64 = v7;
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v63 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v52 - v10;
  sub_10003E2C8();
  uint64_t v57 = v12;
  uint64_t v59 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v65 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v62 = (char *)&v52 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v61 = (char *)&v52 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v52 - v19;
  uint64_t v73 = a1;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v74 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v75 = v21;
  char v76 = v22 & 1;
  uint64_t v77 = v23;
  sub_10003AFA0(0, &qword_100105548, &qword_100105550);
  sub_10003E66C();
  uint64_t v56 = v20;
  Section<>.init(header:content:)();
  uint64_t v72 = a1;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v74 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v75 = v24;
  char v76 = v25 & 1;
  uint64_t v77 = v26;
  sub_10001EEF0(0, &qword_100105560, (uint64_t (*)(uint64_t))sub_10003E430, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
  sub_10003E6E4();
  uint64_t v55 = v11;
  Section<>.init(header:content:)();
  uint64_t v71 = a1;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v74 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v75 = v27;
  char v76 = v28 & 1;
  uint64_t v77 = v29;
  sub_10003E4FC();
  sub_10003E774();
  Section<>.init(header:content:)();
  uint64_t v70 = a1;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v74 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v75 = v30;
  char v76 = v31 & 1;
  uint64_t v77 = v32;
  uint64_t v33 = v61;
  Section<>.init(header:content:)();
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
  uint64_t v34 = v62;
  uint64_t v35 = v57;
  v52(v62, v20, v57);
  uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
  char v36 = v63;
  uint64_t v37 = v64;
  v54(v63, v11, v64);
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
  uint64_t v38 = v66;
  v53(v66, v69, v67);
  uint64_t v39 = (void (*)(uint64_t, char *, uint64_t))v52;
  v52(v65, v33, v35);
  uint64_t v40 = v58;
  v39(v58, v34, v35);
  sub_10003E220();
  uint64_t v42 = v41;
  v54((char *)(v40 + *(int *)(v41 + 48)), v36, v37);
  uint64_t v43 = v38;
  uint64_t v44 = v67;
  v53((char *)(v40 + *(int *)(v42 + 64)), v43, v67);
  id v45 = v65;
  v39(v40 + *(int *)(v42 + 80), v65, v35);
  char v46 = *(void (**)(char *, uint64_t))(v59 + 8);
  v46(v61, v35);
  uint64_t v47 = *(void (**)(char *, uint64_t))(v68 + 8);
  uint64_t v48 = v44;
  v47(v69, v44);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v60 + 8);
  uint64_t v50 = v64;
  v49(v55, v64);
  v46(v56, v35);
  v46(v45, v35);
  v47(v66, v48);
  v49(v63, v50);
  return ((uint64_t (*)(char *, uint64_t))v46)(v62, v35);
}

uint64_t sub_10003C308@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 messageIdentifier];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  id v8 = [a1 clientIdentifier];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  *(void *)a2 = 0xD000000000000012;
  *(void *)(a2 + 8) = 0x80000001000D2060;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v7;
  *(unsigned char *)(a2 + 32) = 1;
  *(void *)(a2 + 40) = 0xD000000000000011;
  *(void *)(a2 + 48) = 0x80000001000D2080;
  *(void *)(a2 + 56) = v9;
  *(void *)(a2 + 64) = v11;
  *(unsigned char *)(a2 + 72) = 0;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10003C3EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 action];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  id v8 = [a1 categoryIdentifier];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  id v12 = [a1 criteria];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  *(void *)a2 = 0xD000000000000013;
  *(void *)(a2 + 8) = 0x80000001000D2020;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v7;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0xD000000000000013;
  *(void *)(a2 + 48) = 0x80000001000D2040;
  *(void *)(a2 + 56) = v9;
  *(void *)(a2 + 64) = v11;
  *(unsigned char *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0x6169726574697243;
  *(void *)(a2 + 88) = 0xE800000000000000;
  *(void *)(a2 + 96) = v13;
  *(void *)(a2 + 104) = v15;
  *(unsigned char *)(a2 + 112) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10003C544@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [a1 sendingDeviceInfo];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *(void *)&long long v18 = v4;
  *((void *)&v18 + 1) = v6;
  sub_100038AD4();
  uint64_t v7 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
  int64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    sub_100096504(0, v8, 0);
    uint64_t v9 = v7 + 56;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = static String._fromSubstring(_:)();
      uint64_t v12 = v11;
      swift_bridgeObjectRelease();
      *(void *)&long long v18 = _swiftEmptyArrayStorage;
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_100096504(v13 > 1, v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      uint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      v9 += 32;
      --v8;
    }
    while (v8);
  }
  swift_bridgeObjectRelease();
  if (_swiftEmptyArrayStorage[2] != 3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v17 = _swiftEmptyArrayStorage[2];
  if (!v17)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v17 == 1)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v17 >= 3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_12:
    sub_10001EEF0(0, &qword_100105560, (uint64_t (*)(uint64_t))sub_10003E430, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    sub_10003E6E4();
    sub_10003E7EC();
    uint64_t result = _ConditionalContent<>.init(storage:)();
    *(_OWORD *)a2 = v18;
    *(_OWORD *)(a2 + 16) = v19;
    *(_OWORD *)(a2 + 32) = v20;
    *(_OWORD *)(a2 + 48) = v21;
    *(_OWORD *)(a2 + 64) = v22;
    *(_OWORD *)(a2 + 80) = v23;
    *(_OWORD *)(a2 + 96) = v24;
    *(unsigned char *)(a2 + 112) = v25;
    *(unsigned char *)(a2 + 113) = v26;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_10003C888@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 creationDate];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = sub_1000B6E68(v5);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  id v9 = [a1 expirationDate];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = sub_1000B6E68(v10);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  strcpy((char *)a2, "Creation Date");
  *(_WORD *)(a2 + 14) = -4864;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v8;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0x6974617269707845;
  *(void *)(a2 + 48) = 0xEF65746144206E6FLL;
  *(void *)(a2 + 56) = v11;
  *(void *)(a2 + 64) = v13;
  *(unsigned char *)(a2 + 72) = 0;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10003C9C4()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_10003C9E0()
{
  uint64_t v1 = type metadata accessor for InsetGroupedListStyle();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10003E170();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = *v0;
  sub_10001EEF0(0, &qword_100105530, (uint64_t (*)(uint64_t))sub_10003E220, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
  sub_10003E58C();
  List<>.init(content:)();
  InsetGroupedListStyle.init()();
  sub_10003E61C(&qword_100105588, (void (*)(uint64_t))sub_10003E170);
  View.listStyle<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10003CC10(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_10003AE2C();
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_10003CCB8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void *))
{
  if (!*a2)
  {
    sub_10003CD3C(255, &qword_100105440, (uint64_t (*)(uint64_t, void *, uint64_t))&type metadata accessor for _ConditionalContent);
    unint64_t v7 = a3(a1, v6, &type metadata for Text);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_10003CD3C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, uint64_t))
{
  if (!*a2)
  {
    sub_10003AC90();
    unint64_t v7 = a3(a1, &type metadata for Text, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_10003CDAC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_10003CDBC(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10003CDC8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10003CDD8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_100093880(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_10003CE54(v6);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int sub_10003CE54(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_150;
    }
    if (v3) {
      return sub_10003D710(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_158;
  }
  Swift::Int v120 = result;
  uint64_t v117 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
    uint64_t v133 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v128 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v11 = _swiftEmptyArrayStorage[2];
LABEL_116:
      if (v11 >= 2)
      {
        uint64_t v111 = *v117;
        do
        {
          unint64_t v112 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_145;
          }
          if (!v111) {
            goto LABEL_157;
          }
          uint64_t v113 = *(void *)&v8[16 * v112 + 32];
          uint64_t v114 = *(void *)&v8[16 * v11 + 24];
          sub_10003D894((void **)(v111 + 8 * v113), (id *)(v111 + 8 * *(void *)&v8[16 * v11 + 16]), (id *)(v111 + 8 * v114), v128);
          if (v1) {
            break;
          }
          if (v114 < v113) {
            goto LABEL_146;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = sub_10009130C((uint64_t)v8);
          }
          if (v112 >= *((void *)v8 + 2)) {
            goto LABEL_147;
          }
          uint64_t v115 = &v8[16 * v112 + 32];
          *(void *)uint64_t v115 = v113;
          *((void *)v115 + 1) = v114;
          unint64_t v116 = *((void *)v8 + 2);
          if (v11 > v116) {
            goto LABEL_148;
          }
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v116 - v11));
          *((void *)v8 + 2) = v116 - 1;
          unint64_t v11 = v116 - 1;
        }
        while (v116 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease();
      *(void *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    sub_10003AE2C();
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    uint64_t v128 = (void **)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v133 = v7;
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v118 = *a1 + 16;
  uint64_t v119 = *a1 - 8;
  uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v125 = v3;
  uint64_t v129 = *a1;
  while (2)
  {
    Swift::Int v12 = v9 + 1;
    Swift::Int v124 = v9;
    if (v9 + 1 >= v3) {
      goto LABEL_45;
    }
    uint64_t v121 = v8;
    uint64_t v13 = *(void **)(v10 + 8 * v9);
    id v14 = *(id *)(v10 + 8 * v12);
    id v15 = v13;
    id v16 = [v14 creationDate];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    id v20 = [v15 creationDate];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    if (v21 == v17 && v23 == v19) {
      int v126 = 0;
    }
    else {
      int v126 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    Swift::Int v12 = v9 + 2;
    Swift::Int v3 = v125;
    if (v9 + 2 >= v125) {
      goto LABEL_36;
    }
    char v25 = (id *)(v118 + 8 * v9);
    while (1)
    {
      Swift::Int v130 = v12;
      uint64_t v27 = *(v25 - 1);
      id v28 = *v25;
      id v29 = v27;
      id v30 = [v28 creationDate];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;

      id v34 = [v29 creationDate];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v37 = v36;

      if (v35 == v31 && v37 == v33)
      {

        swift_bridgeObjectRelease_n();
        if (v126)
        {
          uint64_t v8 = v121;
          Swift::Int v9 = v124;
          Swift::Int v3 = v125;
          uint64_t v10 = v129;
          Swift::Int v12 = v130;
          goto LABEL_37;
        }
        goto LABEL_25;
      }
      int v26 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v126 ^ v26)) {
        break;
      }
LABEL_25:
      Swift::Int v12 = v130 + 1;
      ++v25;
      Swift::Int v3 = v125;
      if (v125 == v130 + 1)
      {
        Swift::Int v12 = v125;
        goto LABEL_35;
      }
    }
    Swift::Int v3 = v125;
    Swift::Int v12 = v130;
LABEL_35:
    Swift::Int v9 = v124;
LABEL_36:
    uint64_t v8 = v121;
    uint64_t v10 = v129;
    if (v126)
    {
LABEL_37:
      if (v12 < v9) {
        goto LABEL_151;
      }
      if (v9 < v12)
      {
        uint64_t v39 = (uint64_t *)(v119 + 8 * v12);
        Swift::Int v40 = v12;
        Swift::Int v41 = v9;
        uint64_t v42 = (uint64_t *)(v10 + 8 * v9);
        do
        {
          if (v41 != --v40)
          {
            if (!v10) {
              goto LABEL_156;
            }
            uint64_t v43 = *v42;
            *uint64_t v42 = *v39;
            *uint64_t v39 = v43;
          }
          ++v41;
          --v39;
          ++v42;
        }
        while (v41 < v40);
      }
    }
LABEL_45:
    if (v12 >= v3) {
      goto LABEL_68;
    }
    if (__OFSUB__(v12, v9)) {
      goto LABEL_149;
    }
    if (v12 - v9 >= v120)
    {
LABEL_68:
      if (v12 < v9) {
        goto LABEL_144;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_100091098(0, *((void *)v8 + 2) + 1, 1, v8);
      }
      unint64_t v63 = *((void *)v8 + 2);
      unint64_t v62 = *((void *)v8 + 3);
      unint64_t v11 = v63 + 1;
      if (v63 >= v62 >> 1) {
        uint64_t v8 = sub_100091098((char *)(v62 > 1), v63 + 1, 1, v8);
      }
      *((void *)v8 + 2) = v11;
      uint64_t v64 = v8 + 32;
      uint64_t v65 = &v8[16 * v63 + 32];
      *(void *)uint64_t v65 = v9;
      *((void *)v65 + 1) = v12;
      Swift::Int v132 = v12;
      if (!v63)
      {
        unint64_t v11 = 1;
LABEL_14:
        Swift::Int v3 = v125;
        Swift::Int v9 = v132;
        if (v132 >= v125) {
          goto LABEL_116;
        }
        continue;
      }
      while (1)
      {
        unint64_t v66 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v71 = &v64[16 * v11];
          uint64_t v72 = *((void *)v71 - 8);
          uint64_t v73 = *((void *)v71 - 7);
          BOOL v77 = __OFSUB__(v73, v72);
          uint64_t v74 = v73 - v72;
          if (v77) {
            goto LABEL_133;
          }
          uint64_t v76 = *((void *)v71 - 6);
          uint64_t v75 = *((void *)v71 - 5);
          BOOL v77 = __OFSUB__(v75, v76);
          uint64_t v69 = v75 - v76;
          char v70 = v77;
          if (v77) {
            goto LABEL_134;
          }
          unint64_t v78 = v11 - 2;
          uint64_t v79 = &v64[16 * v11 - 32];
          uint64_t v81 = *(void *)v79;
          uint64_t v80 = *((void *)v79 + 1);
          BOOL v77 = __OFSUB__(v80, v81);
          uint64_t v82 = v80 - v81;
          if (v77) {
            goto LABEL_136;
          }
          BOOL v77 = __OFADD__(v69, v82);
          uint64_t v83 = v69 + v82;
          if (v77) {
            goto LABEL_139;
          }
          if (v83 >= v74)
          {
            unint64_t v101 = &v64[16 * v66];
            uint64_t v103 = *(void *)v101;
            uint64_t v102 = *((void *)v101 + 1);
            BOOL v77 = __OFSUB__(v102, v103);
            uint64_t v104 = v102 - v103;
            if (v77) {
              goto LABEL_143;
            }
            BOOL v94 = v69 < v104;
            goto LABEL_105;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v95 = *((void *)v8 + 4);
            uint64_t v96 = *((void *)v8 + 5);
            BOOL v77 = __OFSUB__(v96, v95);
            uint64_t v88 = v96 - v95;
            char v89 = v77;
            goto LABEL_99;
          }
          uint64_t v68 = *((void *)v8 + 4);
          uint64_t v67 = *((void *)v8 + 5);
          BOOL v77 = __OFSUB__(v67, v68);
          uint64_t v69 = v67 - v68;
          char v70 = v77;
        }
        if (v70) {
          goto LABEL_135;
        }
        unint64_t v78 = v11 - 2;
        uint64_t v84 = &v64[16 * v11 - 32];
        uint64_t v86 = *(void *)v84;
        uint64_t v85 = *((void *)v84 + 1);
        BOOL v87 = __OFSUB__(v85, v86);
        uint64_t v88 = v85 - v86;
        char v89 = v87;
        if (v87) {
          goto LABEL_138;
        }
        BOOL v90 = &v64[16 * v66];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        BOOL v77 = __OFSUB__(v91, v92);
        uint64_t v93 = v91 - v92;
        if (v77) {
          goto LABEL_141;
        }
        if (__OFADD__(v88, v93)) {
          goto LABEL_142;
        }
        if (v88 + v93 >= v69)
        {
          BOOL v94 = v69 < v93;
LABEL_105:
          if (v94) {
            unint64_t v66 = v78;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v89) {
          goto LABEL_137;
        }
        uint64_t v97 = &v64[16 * v66];
        uint64_t v99 = *(void *)v97;
        uint64_t v98 = *((void *)v97 + 1);
        BOOL v77 = __OFSUB__(v98, v99);
        uint64_t v100 = v98 - v99;
        if (v77) {
          goto LABEL_140;
        }
        if (v100 < v88) {
          goto LABEL_14;
        }
LABEL_107:
        unint64_t v105 = v66 - 1;
        if (v66 - 1 >= v11)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!v10) {
          goto LABEL_155;
        }
        Swift::Int v106 = &v64[16 * v105];
        uint64_t v107 = *(void *)v106;
        BOOL v108 = &v64[16 * v66];
        uint64_t v109 = *((void *)v108 + 1);
        sub_10003D894((void **)(v10 + 8 * *(void *)v106), (id *)(v10 + 8 * *(void *)v108), (id *)(v10 + 8 * v109), v128);
        if (v1) {
          goto LABEL_127;
        }
        if (v109 < v107) {
          goto LABEL_130;
        }
        if (v66 > *((void *)v8 + 2)) {
          goto LABEL_131;
        }
        *(void *)Swift::Int v106 = v107;
        *(void *)&v64[16 * v105 + 8] = v109;
        unint64_t v110 = *((void *)v8 + 2);
        if (v66 >= v110) {
          goto LABEL_132;
        }
        unint64_t v11 = v110 - 1;
        memmove(&v64[16 * v66], v108 + 16, 16 * (v110 - 1 - v66));
        *((void *)v8 + 2) = v110 - 1;
        if (v110 <= 2) {
          goto LABEL_14;
        }
      }
    }
    break;
  }
  if (__OFADD__(v9, v120)) {
    goto LABEL_152;
  }
  if (v9 + v120 >= v3) {
    Swift::Int v44 = v3;
  }
  else {
    Swift::Int v44 = v9 + v120;
  }
  if (v44 >= v9)
  {
    if (v12 != v44)
    {
      unint64_t v122 = v8;
      Swift::Int v123 = v44;
      uint64_t v45 = v119 + 8 * v12;
      do
      {
        uint64_t v47 = *(void **)(v10 + 8 * v12);
        uint64_t v127 = v45;
        Swift::Int v131 = v12;
        while (1)
        {
          uint64_t v48 = *(void **)v45;
          id v49 = v47;
          id v50 = v48;
          id v51 = [v49 creationDate];
          uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v54 = v53;

          id v55 = [v50 creationDate];
          uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v58 = v57;

          if (v56 == v52 && v58 == v54)
          {

            swift_bridgeObjectRelease_n();
            uint64_t v10 = v129;
            Swift::Int v46 = v131;
            goto LABEL_56;
          }
          char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v10 = v129;
          if ((v60 & 1) == 0) {
            break;
          }
          if (!v129) {
            goto LABEL_154;
          }
          uint64_t v61 = *(void **)v45;
          uint64_t v47 = *(void **)(v45 + 8);
          *(void *)uint64_t v45 = v47;
          *(void *)(v45 + 8) = v61;
          v45 -= 8;
          ++v9;
          Swift::Int v46 = v131;
          if (v131 == v9) {
            goto LABEL_56;
          }
        }
        Swift::Int v46 = v131;
LABEL_56:
        Swift::Int v12 = v46 + 1;
        uint64_t v45 = v127 + 8;
        Swift::Int v9 = v124;
      }
      while (v12 != v123);
      Swift::Int v12 = v123;
      uint64_t v8 = v122;
    }
    goto LABEL_68;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003D710(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v23 = result;
  if (a3 != a2)
  {
    uint64_t v25 = *a4;
    uint64_t v4 = *a4 + 8 * a3 - 8;
LABEL_6:
    uint64_t v6 = *(void **)(v25 + 8 * a3);
    uint64_t v7 = v23;
    uint64_t v24 = v4;
    uint64_t v26 = a3;
    while (1)
    {
      uint64_t v8 = *(void **)v4;
      id v9 = v6;
      id v10 = v8;
      id v11 = [v9 creationDate];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      id v15 = [v10 creationDate];
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      if (v16 == v12 && v18 == v14)
      {

        Swift::Int result = swift_bridgeObjectRelease_n();
        uint64_t v5 = v26;
LABEL_5:
        a3 = v5 + 1;
        uint64_t v4 = v24 + 8;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_6;
      }
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      uint64_t v5 = v26;
      if ((v20 & 1) == 0) {
        goto LABEL_5;
      }
      if (!v25) {
        break;
      }
      uint64_t v21 = *(void **)v4;
      uint64_t v6 = *(void **)(v4 + 8);
      *(void *)uint64_t v4 = v6;
      *(void *)(v4 + 8) = v21;
      v4 -= 8;
      if (v26 == ++v7) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10003D894(void **__src, id *a2, id *a3, void **__dst)
{
  uint64_t v4 = __dst;
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = (char *)a3 - (char *)a2;
  uint64_t v12 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0) {
    uint64_t v12 = (char *)a3 - (char *)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v61 = __src;
  char v60 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7) {
      goto LABEL_53;
    }
    if (__dst != a2 || &a2[v13] <= __dst) {
      memmove(__dst, a2, 8 * v13);
    }
    id v51 = v4;
    uint64_t v31 = &v4[v13];
    uint64_t v59 = v31;
    uint64_t v61 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_52:
      sub_100091190(&v61, &v60, &v59);
      return 1;
    }
    uint64_t v32 = v6;
    uint64_t v56 = v7;
    while (1)
    {
      uint64_t v52 = v31;
      uint64_t v54 = v6;
      uint64_t v58 = v5;
      id v34 = *--v31;
      uint64_t v33 = v34;
      uint64_t v35 = *--v32;
      id v36 = v33;
      id v37 = v35;
      id v38 = [v36 creationDate];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v40;

      id v42 = [v37 creationDate];
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v45 = v44;

      if (v43 == v39 && v45 == v41) {
        break;
      }
      char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v48 = v58;
      uint64_t v5 = v58 - 1;
      if ((v47 & 1) == 0) {
        goto LABEL_46;
      }
      unint64_t v49 = (unint64_t)v56;
      uint64_t v31 = v52;
      if (v58 != v54 || v5 >= v54) {
        *uint64_t v5 = *v32;
      }
      uint64_t v61 = v32;
LABEL_50:
      if ((unint64_t)v32 > v49)
      {
        uint64_t v6 = v32;
        if (v31 > v51) {
          continue;
        }
      }
      goto LABEL_52;
    }

    swift_bridgeObjectRelease_n();
    uint64_t v48 = v58;
    uint64_t v5 = v58 - 1;
LABEL_46:
    uint64_t v32 = v54;
    unint64_t v49 = (unint64_t)v56;
    uint64_t v59 = v31;
    if (v48 < v52 || v5 >= v52 || v48 != v52) {
      *uint64_t v5 = *v31;
    }
    goto LABEL_50;
  }
  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v53 = &v4[v10];
    uint64_t v59 = v53;
    if (v6 < v5 && v8 >= 8)
    {
      uint64_t v57 = v5;
      while (1)
      {
        id v55 = v7;
        uint64_t v14 = v6;
        id v15 = *v4;
        id v16 = *v6;
        id v17 = v15;
        id v18 = [v16 creationDate];
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;

        id v22 = [v17 creationDate];
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v24;

        if (v23 == v19 && v25 == v21) {
          break;
        }
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          goto LABEL_23;
        }
        id v28 = v14 + 1;
        id v29 = v55;
        id v30 = v57;
        if (v55 < v14 || v55 >= v28 || v55 != v14) {
          *id v55 = *v14;
        }
LABEL_26:
        uint64_t v7 = v29 + 1;
        if (v4 < v53)
        {
          uint64_t v6 = v28;
          if (v28 < v30) {
            continue;
          }
        }
        uint64_t v61 = v7;
        goto LABEL_52;
      }

      swift_bridgeObjectRelease_n();
LABEL_23:
      id v29 = v55;
      id v30 = v57;
      if (v55 != v4) {
        *id v55 = *v4;
      }
      char v60 = ++v4;
      id v28 = v14;
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_53:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003DCAC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100094D80(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100037FF0();
LABEL_7:
    id v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100037B3C(v15, a4 & 1);
  unint64_t v21 = sub_100094D80(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  id v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v26;

  return swift_bridgeObjectRetain();
}

void *sub_10003DE1C(unint64_t a1)
{
  int64_t v9 = &_swiftEmptyDictionarySingleton;
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * i);
      uint64_t v5 = v4;
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v8 = v4;
      sub_10003A9B4((uint64_t *)&v9, &v8);

      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return &_swiftEmptyDictionarySingleton;
}

uint64_t sub_10003DF44()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003DF7C()
{
  return sub_100039EF0();
}

uint64_t sub_10003DF84(uint64_t a1, uint64_t a2)
{
  sub_10003CD3C(0, &qword_100105440, (uint64_t (*)(uint64_t, void *, uint64_t))&type metadata accessor for _ConditionalContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003E004(uint64_t a1)
{
  sub_10003CD3C(0, &qword_100105440, (uint64_t (*)(uint64_t, void *, uint64_t))&type metadata accessor for _ConditionalContent);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003E07C()
{
  return sub_100039FB0(v0[2], v0[3], v0[4]);
}

const char *sub_10003E088()
{
  return "messageIdentifier";
}

double sub_10003E098@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_10003A298((void *)*(void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

void sub_10003E0A0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

ValueMetadata *type metadata accessor for NotificationInstructionView()
{
  return &type metadata for NotificationInstructionView;
}

uint64_t sub_10003E0FC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003E154()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_10003E170()
{
  if (!qword_100105528)
  {
    sub_10001EEF0(255, &qword_100105530, (uint64_t (*)(uint64_t))sub_10003E220, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    sub_10003E58C();
    unint64_t v0 = type metadata accessor for List();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105528);
    }
  }
}

void sub_10003E220()
{
  if (!qword_100105538)
  {
    sub_10003E2C8();
    sub_10003E398();
    sub_10003E498(255, &qword_100105570, (void (*)(uint64_t))sub_10003E4FC);
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_100105538);
    }
  }
}

void sub_10003E2C8()
{
  if (!qword_100105540)
  {
    sub_10003AFA0(255, &qword_100105548, &qword_100105550);
    unint64_t v0 = type metadata accessor for Section();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105540);
    }
  }
}

void sub_10003E348(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_10003E398()
{
  if (!qword_100105558)
  {
    sub_10001EEF0(255, &qword_100105560, (uint64_t (*)(uint64_t))sub_10003E430, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    unint64_t v0 = type metadata accessor for Section();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105558);
    }
  }
}

void sub_10003E430()
{
  if (!qword_100105568)
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100105568);
    }
  }
}

void sub_10003E498(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Section();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_10003E4FC()
{
  if (!qword_100105578)
  {
    sub_10001EEF0(255, &qword_100105560, (uint64_t (*)(uint64_t))sub_10003E430, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105578);
    }
  }
}

unint64_t sub_10003E58C()
{
  unint64_t result = qword_100105580;
  if (!qword_100105580)
  {
    sub_10001EEF0(255, &qword_100105530, (uint64_t (*)(uint64_t))sub_10003E220, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105580);
  }
  return result;
}

uint64_t sub_10003E614@<X0>(uint64_t a1@<X8>)
{
  return sub_10003BAE8(*(void *)(v1 + 16), a1);
}

uint64_t sub_10003E61C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003E664@<X0>(uint64_t a1@<X8>)
{
  return sub_10003C308(*(void **)(v1 + 16), a1);
}

unint64_t sub_10003E66C()
{
  unint64_t result = qword_100105590;
  if (!qword_100105590)
  {
    sub_10003AFA0(255, &qword_100105548, &qword_100105550);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105590);
  }
  return result;
}

uint64_t sub_10003E6DC@<X0>(uint64_t a1@<X8>)
{
  return sub_10003C3EC(*(void **)(v1 + 16), a1);
}

unint64_t sub_10003E6E4()
{
  unint64_t result = qword_100105598;
  if (!qword_100105598)
  {
    sub_10001EEF0(255, &qword_100105560, (uint64_t (*)(uint64_t))sub_10003E430, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105598);
  }
  return result;
}

uint64_t sub_10003E76C@<X0>(uint64_t a1@<X8>)
{
  return sub_10003C544(*(void **)(v1 + 16), a1);
}

unint64_t sub_10003E774()
{
  unint64_t result = qword_1001055A0;
  if (!qword_1001055A0)
  {
    sub_10003E4FC();
    sub_10003E6E4();
    sub_10003E7EC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001055A0);
  }
  return result;
}

unint64_t sub_10003E7EC()
{
  unint64_t result = qword_1001055A8;
  if (!qword_1001055A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001055A8);
  }
  return result;
}

uint64_t sub_10003E840@<X0>(uint64_t a1@<X8>)
{
  return sub_10003C888(*(void **)(v1 + 16), a1);
}

uint64_t sub_10003E848()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_10003E8FC(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_10003FE58(0, (unint64_t *)&unk_100104880, (void (*)(uint64_t))&type metadata accessor for URL);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v13 - v5;
  sub_10003FF10(a1, (uint64_t)&v13 - v5, (unint64_t *)&unk_100104880, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v9);
    uint64_t v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  sub_1000939E8((uint64_t)_swiftEmptyArrayStorage);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 openSensitiveURL:v10 withOptions:isa];
}

void sub_10003EA8C(uint64_t a1)
{
}

unint64_t sub_10003EAB4()
{
  unint64_t result = qword_1001055B0;
  if (!qword_1001055B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001055B0);
  }
  return result;
}

unint64_t sub_10003EB0C()
{
  unint64_t result = qword_1001055B8;
  if (!qword_1001055B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001055B8);
  }
  return result;
}

uint64_t sub_10003EB60()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003EB7C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003EBCC()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  Swift::Int v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_10003FEAC(v6, qword_100108B28);
  sub_10003FE20(v6, (uint64_t)qword_100108B28);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t sub_10003EDB8()
{
  sub_10003FE58(0, &qword_100105600, (void (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v15 - v1;
  v15[0] = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v3 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10003FE58(0, &qword_1001055F8, (void (*)(uint64_t))&type metadata accessor for IntentDescription);
  uint64_t v11 = v10;
  sub_10003FEAC(v10, qword_100108B40);
  uint64_t v12 = sub_10003FE20(v11, (uint64_t)qword_100108B40);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, void))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v15[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v2, 1, 1, v8);
  IntentDescription.init(_:categoryName:searchKeywords:)();
  uint64_t v13 = type metadata accessor for IntentDescription();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 0, 1, v13);
}

uint64_t sub_10003F114(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  sub_10003FE58(0, (unint64_t *)&unk_100104880, (void (*)(uint64_t))&type metadata accessor for URL);
  v2[4] = swift_task_alloc();
  v2[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_10003F23C, 0, 0);
}

uint64_t sub_10003F23C()
{
  id v1 = (id)HKSPSleepURLWithOptions();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v4 = v0[7];
    uint64_t v3 = v0[8];
    uint64_t v6 = v0[5];
    uint64_t v5 = v0[6];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    v7(v6, v3, v5);
    uint64_t v8 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
    v8(v6, 0, 1, v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) != 1)
    {
      uint64_t v9 = v0[9];
      uint64_t v11 = v0[6];
      uint64_t v10 = v0[7];
      uint64_t v12 = v0[4];
      id v18 = v8;
      uint64_t v13 = (void *)v0[3];
      ((void (*)(uint64_t))v7)(v9);
      uint64_t v14 = v13[3];
      uint64_t v15 = v13[4];
      sub_1000190DC(v13, v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, v9, v11);
      v18(v12, 0, 1, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 8))(v12, v14, v15);
      sub_100028AF8(v12);
      static IntentResult.result<>()();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      char v16 = (uint64_t (*)(void))v0[1];
      goto LABEL_6;
    }
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[7] + 56))(v0[5], 1, 1, v0[6]);
  }
  sub_100028AF8(v0[5]);
  sub_10003FDCC();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v16 = (uint64_t (*)(void))v0[1];
LABEL_6:
  return v16();
}

uint64_t sub_10003F4D8@<X0>(uint64_t a1@<X8>)
{
  if (qword_100103FD8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = sub_10003FE20(v2, (uint64_t)qword_100108B28);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t static HealthDataType.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t sub_10003F588@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for IntentAuthenticationPolicy.requiresAuthentication(_:);
  uint64_t v3 = type metadata accessor for IntentAuthenticationPolicy();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_10003F604@<X0>(uint64_t a1@<X8>)
{
  if (qword_100103FE0 != -1) {
    swift_once();
  }
  sub_10003FE58(0, &qword_1001055F8, (void (*)(uint64_t))&type metadata accessor for IntentDescription);
  uint64_t v3 = sub_10003FE20(v2, (uint64_t)qword_100108B40);
  return sub_10003FF10(v3, a1, &qword_1001055F8, (void (*)(uint64_t))&type metadata accessor for IntentDescription);
}

uint64_t sub_10003F6A4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100028DB8;
  return sub_10003F114(a1);
}

id sub_10003F73C@<X0>(uint64_t a1@<X8>)
{
  id result = [self defaultWorkspace];
  if (result)
  {
    id v3 = result;
    unint64_t v5 = sub_100025D14();
    uint64_t v6 = &off_1000F5CB0;
    *(void *)&long long v4 = v3;
    return (id)sub_10001CD68(&v4, a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003F7B4(uint64_t a1)
{
  unint64_t v2 = sub_100025D54();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t initializeWithCopy for OpenSleepScheduleIntent(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for OpenSleepScheduleIntent(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *sub_10003F874(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    long long v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        id result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *id result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for OpenSleepScheduleIntent(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for OpenSleepScheduleIntent(uint64_t a1, uint64_t a2)
{
  _s6Health23OpenSleepScheduleIntentVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpenSleepScheduleIntent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OpenSleepScheduleIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenSleepScheduleIntent()
{
  return &type metadata for OpenSleepScheduleIntent;
}

unint64_t sub_10003FB98()
{
  unint64_t result = qword_1001055C8;
  if (!qword_1001055C8)
  {
    sub_10003FBF0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001055C8);
  }
  return result;
}

void sub_10003FBF0()
{
  if (!qword_1001055D0)
  {
    sub_10003FC68();
    sub_10003FCBC();
    unint64_t v0 = type metadata accessor for IntentResultContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001055D0);
    }
  }
}

unint64_t sub_10003FC68()
{
  unint64_t result = qword_1001055D8;
  if (!qword_1001055D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001055D8);
  }
  return result;
}

unint64_t sub_10003FCBC()
{
  unint64_t result = qword_1001055E0;
  if (!qword_1001055E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001055E0);
  }
  return result;
}

Swift::Int sub_10003FD10()
{
  return Hasher._finalize()();
}

void sub_10003FD54()
{
}

Swift::Int sub_10003FD7C()
{
  return Hasher._finalize()();
}

unint64_t sub_10003FDCC()
{
  unint64_t result = qword_1001055F0;
  if (!qword_1001055F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001055F0);
  }
  return result;
}

uint64_t sub_10003FE20(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void sub_10003FE58(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *sub_10003FEAC(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_10003FF10(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_10003FE58(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t getEnumTagSinglePayload for OpenSleepIntentError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for OpenSleepIntentError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10004006CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100040094()
{
  return 0;
}

ValueMetadata *type metadata accessor for OpenSleepIntentError()
{
  return &type metadata for OpenSleepIntentError;
}

unint64_t sub_1000400B0()
{
  unint64_t result = qword_100105608;
  if (!qword_100105608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105608);
  }
  return result;
}

uint64_t type metadata accessor for AuxiliaryProfilesDataSource()
{
  uint64_t result = qword_100105618;
  if (!qword_100105618) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100040150()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000401A0(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + qword_100105610) = a1;
  sub_10000C138(0, &qword_100104858, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for ArrayDataSourceSection();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000CBFD0;
  id v7 = a1;
  _typeName(_:qualified:)();
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)();
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v15, "MutableArray<");
  HIWORD(v15[1]) = -4864;
  UUID.init()();
  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  uint64_t v13 = MutableArrayDataSource.init(arrangedSections:identifier:)();
  swift_retain();
  sub_1000A2998();
  swift_release();

  return v13;
}

void sub_100040448(uint64_t a1, void *a2)
{
  id v3 = [objc_allocWithZone((Class)HKNavigationController) initWithRootViewController:a1];
  [a2 presentViewController:v3 animated:1 completion:0];
}

void sub_1000404C4()
{
  swift_beginAccess();
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    [Strong dismissViewControllerAnimated:1 completion:0];
  }
}

uint64_t sub_100040528@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UIListContentConfiguration();
  __chkstk_darwin(v2 - 8);
  static UIListContentConfiguration.groupedHeader()();
  uint64_t v3 = type metadata accessor for HeaderItem();
  swift_allocObject();
  uint64_t v4 = HeaderItem.init(title:buttonText:buttonWasTapped:configuration:automationIdentifier:)();
  a1[3] = v3;
  uint64_t result = sub_100040C5C((unint64_t *)&unk_100105760, (void (*)(uint64_t))&type metadata accessor for HeaderItem);
  a1[4] = result;
  *a1 = v4;
  return result;
}

void sub_100040638()
{
}

void sub_100040668()
{
}

uint64_t sub_100040678()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1000406C8()
{
  return type metadata accessor for AuxiliaryProfilesDataSource();
}

uint64_t sub_1000406D0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100040528(a1);
}

uint64_t sub_1000406E8(uint64_t a1, uint64_t a2)
{
  return sub_10002B8D0(a1, a2);
}

id sub_100040858()
{
  return sub_100040B74((uint64_t (*)(void))type metadata accessor for InternalProfileCharacteristicsViewController);
}

uint64_t type metadata accessor for InternalProfileCharacteristicsViewController()
{
  return self;
}

void sub_100040894(void *a1)
{
  id v3 = [v1 healthStore];
  if (!v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = v3;
  id v5 = [objc_allocWithZone((Class)HKMedicalIDStore) initWithHealthStore:v3];

  [v5 deleteMedicalIDDataWithCompletion:0];
  if (!a1)
  {
LABEL_9:
    __break(1u);
    return;
  }
  id v6 = [a1 navigationController];
  if (v6)
  {
    id v7 = v6;
    [v6 dismissViewControllerAnimated:1 completion:0];
  }
}

id sub_100040B0C(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  v6.receiver = a1;
  v6.super_class = (Class)a4(0);
  return [super initWithCoder:a3];
}

id sub_100040B5C()
{
  return sub_100040B74((uint64_t (*)(void))type metadata accessor for InternalMedicalIDViewController);
}

id sub_100040B74(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return [super dealloc];
}

uint64_t type metadata accessor for InternalMedicalIDViewController()
{
  return self;
}

uint64_t sub_100040BD8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100040C5C(&qword_100105718, (void (*)(uint64_t))type metadata accessor for AuxiliaryProfilesDataSource);
  uint64_t result = sub_100040C5C((unint64_t *)&unk_100105720, (void (*)(uint64_t))type metadata accessor for AuxiliaryProfilesDataSource);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100040C5C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100040CA4(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for InternalProfileCharacteristicsViewController();
  id v11 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithHealthStore:a1 inEditMode:1];
  [v11 setAccessType:2];
  id v12 = [v11 navigationItem];
  sub_10001E254(0, &qword_100105758);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v12 setLeftBarButtonItems:isa];

  sub_10001E254(0, (unint64_t *)&qword_100105730);
  uint64_t v14 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v11;
  *(void *)(v15 + 24) = a2;
  aBlock[4] = sub_10004193C;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = &unk_1000F5E90;
  char v16 = _Block_copy(aBlock);
  id v17 = v11;
  id v18 = a2;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100040C5C((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000C138(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_10001EF54();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v21);
}

void sub_100041038(uint64_t a1, void *a2)
{
  uint64_t v54 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v58 = *(void *)(v3 - 8);
  uint64_t v59 = v3;
  __chkstk_darwin(v3);
  uint64_t v56 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for DispatchQoS();
  uint64_t v55 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v53 - v13;
  __chkstk_darwin(v12);
  char v16 = (char *)&v53 - v15;
  type metadata accessor for MedicalIDCache();
  uint64_t v60 = static MedicalIDCache.globalCache(for:)();
  id v17 = dispatch thunk of MedicalIDCache.medicalIDDataResult.getter();
  id v18 = v17;
  uint64_t v53 = v8;
  if ((unint64_t)v17 >= 3)
  {
    static Logger.view.getter();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      BOOL v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Found cached Medical ID for MedicalIDViewController", v25, 2u);
      swift_slowDealloc();
    }

    char v22 = *(void (**)(char *, uint64_t))(v8 + 8);
    v22(v16, v7);
  }
  else
  {
    sub_1000418EC(v17);
    static Logger.view.getter();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "No Medical ID found for MedicalIDViewController", v21, 2u);
      swift_slowDealloc();
    }

    char v22 = *(void (**)(char *, uint64_t))(v8 + 8);
    v22(v14, v7);
    id v18 = 0;
  }
  id v26 = [self sharedBehavior];
  if (!v26)
  {

    __break(1u);
    goto LABEL_21;
  }
  char v27 = v26;
  id v28 = [v26 features];

  if (!v28)
  {
LABEL_21:

    __break(1u);
    return;
  }
  unsigned __int8 v29 = [v28 medicalIDV2];

  if (v29)
  {
    id v30 = [self standardConfiguration];
    [v30 setIsDeletionAvailable:1];
    [v30 setSuggestHealthData:1];
    id v31 = [objc_allocWithZone((Class)MIUIMedicalIDViewController) initWithHealthStore:a1 medicalIDData:v18 displayConfiguration:v30];
    sub_10001E254(0, &qword_100105750);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v32 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    sub_10001E254(0, &qword_100105758);
    id v33 = v32;
    v62.value.super.super.Class isa = (Class)v32;
    v62.is_nil = 0;
    Class isa = UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonSystemItemDone, v62, v63).super.super.isa;
    id v35 = [v31 navigationItem];
    id v36 = isa;
    [v35 setRightBarButtonItem:v36];

    id v37 = (void *)v60;
LABEL_14:
    sub_10001E254(0, (unint64_t *)&qword_100105730);
    uint64_t v41 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v42 = swift_allocObject();
    uint64_t v43 = v54;
    *(void *)(v42 + 16) = v31;
    *(void *)(v42 + 24) = v43;
    aBlock[4] = sub_10004193C;
    aBlock[5] = v42;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100005388;
    aBlock[3] = &unk_1000F5E18;
    uint64_t v44 = _Block_copy(aBlock);
    id v45 = v31;
    id v46 = v43;
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_100040C5C((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000C138(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    sub_10001EF54();
    char v47 = v56;
    uint64_t v48 = v59;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();

    _Block_release(v44);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v47, v48);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v6, v57);
    return;
  }
  id v38 = [objc_allocWithZone((Class)type metadata accessor for InternalMedicalIDViewController()) initInEditMode:1 inBuddy:0 organDonationSignupAvailable:1];
  if (v38)
  {
    uint64_t v39 = v38;
    [v38 setHealthStore:a1];
    [v39 setMedicalID:v18];
    id v31 = v39;
    id v37 = (void *)v60;
    uint64_t v40 = (void *)MedicalIDCache.medicalIDStore.getter();
    [v31 setMedicalIDStore:v40];

    [v31 setModalInPresentation:1];
    [v31 setDelegate:v31];
    [v31 setIsSecondaryProfileMedicalID:1];
    [v31 setShowsDeleteButton:1];
    goto LABEL_14;
  }
  static Logger.view.getter();
  unint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v49, v50))
  {
    id v51 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Could not create InternalMedicalIDViewController", v51, 2u);
    swift_slowDealloc();
    uint64_t v52 = v18;
    id v18 = v60;
  }
  else
  {
    uint64_t v52 = v49;
    unint64_t v49 = v60;
  }

  v22(v11, v7);
}

void sub_1000418EC(id a1)
{
  if ((unint64_t)a1 >= 3) {
}
  }

uint64_t sub_1000418FC()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10004193C()
{
  sub_100040448(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100041944()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10004197C()
{
}

void sub_100041A64(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v4 = *(id *)(a2 + 32);
      }
      uint64_t v5 = v4;
      sub_10001E254(0, &qword_100105850);
      char v6 = static NSObject.== infix(_:_:)();

      if ((v6 & 1) == 0)
      {
        for (uint64_t i = 0; ; ++i)
        {
          unint64_t v11 = i + 1;
          if (__OFADD__(i, 1)) {
            break;
          }
          if (v11 == v3) {
            return;
          }
          if ((a2 & 0xC000000000000001) != 0)
          {
            id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_18;
            }
            if (v11 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_19;
            }
            id v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          uint64_t v9 = v8;
          char v10 = static NSObject.== infix(_:_:)();

          if (v10) {
            return;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v3) {
          continue;
        }
      }
      return;
    }
  }
}

id sub_100041C78(void *a1)
{
  if (a1)
  {
    self;
    uint64_t v2 = (void *)swift_dynamicCastObjCClass();
    id v3 = a1;
    id v4 = v3;
    if (v2)
    {
      id v5 = v3;
      id v6 = [v2 viewControllers];
      sub_10001E254(0, (unint64_t *)&qword_100108820);
      unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v7 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v8 == 1)
      {
        id v4 = (id)UINavigationController.rootViewController()();
        id v9 = (id)sub_100041C78();

LABEL_18:
        return v9;
      }
    }
    swift_getObjectType();
    uint64_t v10 = swift_conformsToProtocol2();
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v10) {
      id v12 = v4;
    }
    else {
      id v12 = 0;
    }
    if (v12)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
      id v4 = v4;
      id v9 = (id)v14(ObjectType, v11);
    }
    else
    {
      id v9 = [v4 view];
    }
    goto LABEL_18;
  }
  return 0;
}

void sub_100041E30()
{
  uint64_t v1 = type metadata accessor for BrowseViewController();
  sub_10004204C(v1, 1);
  id v2 = [v0 selectedViewController];
  if (v2)
  {
    id v15 = v2;
    self;
    id v3 = (void *)swift_dynamicCastObjCClass();
    if (v3)
    {
      id v4 = [v3 viewControllers];
      sub_10001E254(0, (unint64_t *)&qword_100108820);
      unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v5 >> 62) {
        goto LABEL_20;
      }
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
      {
        uint64_t v7 = 4;
        while (1)
        {
          id v8 = (v5 & 0xC000000000000001) != 0
             ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
             : *(id *)(v5 + 8 * v7);
          id v9 = v8;
          uint64_t v10 = v7 - 3;
          if (__OFADD__(v7 - 4, 1)) {
            break;
          }
          if (swift_dynamicCastClass())
          {
            swift_bridgeObjectRelease_n();
            id v12 = (void *)dispatch thunk of BrowseViewController.browseSearchViewController.getter();
            uint64_t v13 = (void *)dispatch thunk of BrowseSearchViewController.searchController.getter();

            id v14 = [v13 searchBar];
            [v14 becomeFirstResponder];

            uint64_t v11 = v14;
            goto LABEL_16;
          }

          ++v7;
          if (v10 == v6) {
            goto LABEL_12;
          }
        }
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
      }
LABEL_12:
      swift_bridgeObjectRelease_n();
      uint64_t v11 = v15;
    }
    else
    {
      uint64_t v11 = v15;
    }
LABEL_16:
  }
}

void sub_10004204C(uint64_t a1, int a2)
{
  id v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v38[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  uint64_t v13 = &v38[-v12];
  id v14 = [v3 viewControllers];
  if (v14)
  {
    id v15 = v14;
    uint64_t v41 = ObjectType;
    uint64_t v43 = v8;
    sub_10001E254(0, (unint64_t *)&qword_100108820);
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v44 = v7;
    uint64_t v42 = v13;
    id v40 = v3;
    int v39 = a2;
    if (v16 >> 62)
    {
LABEL_25:
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v17)
      {
LABEL_4:
        uint64_t v18 = 4;
        do
        {
          if ((v16 & 0xC000000000000001) != 0) {
            id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v19 = *(id *)(v16 + 8 * v18);
          }
          os_log_type_t v20 = v19;
          uint64_t v21 = v18 - 3;
          if (__OFADD__(v18 - 4, 1))
          {
            __break(1u);
            goto LABEL_25;
          }
          self;
          uint64_t v22 = swift_dynamicCastObjCClass();
          if (v22)
          {
            uint64_t v23 = (void *)v22;
            id v24 = v20;
            BOOL v25 = (void *)UINavigationController.rootViewController()();
            if (v25)
            {
              id v45 = v25;
              if (swift_getObjectType() == a1)
              {
                swift_bridgeObjectRelease();
                if (v39) {

                }
                [v40 setSelectedViewController:v23];
                id v26 = v45;

                return;
              }
            }
          }

          ++v18;
        }
        while (v21 != v17);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v32 = v42;
    static Logger.view.getter();
    id v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      id v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(_DWORD *)id v35 = 136446210;
      uint64_t v36 = _typeName(_:qualified:)();
      uint64_t v46 = sub_100018DA0(v36, v37, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s Could't select view controller", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v43 + 8))(v32, v44);
  }
  else
  {
    static Logger.view.getter();
    char v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unsigned __int8 v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(_DWORD *)unsigned __int8 v29 = 136446210;
      uint64_t v30 = _typeName(_:qualified:)();
      uint64_t v46 = sub_100018DA0(v30, v31, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s Could't get tab view controller", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v11, v7);
  }
}

id sub_1000426EC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MainTabBarController();
  return [super dealloc];
}

id sub_1000427D4()
{
  return *(id *)(*v0 + OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthStore);
}

uint64_t sub_1000427E8@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D360(*v1 + OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthExperienceStore, a1);
}

id sub_100042814()
{
  return sub_100005D48();
}

uint64_t sub_100042838@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC6Health20MainTabBarController_providedPresentation;
  uint64_t v4 = type metadata accessor for Presentation();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

id sub_1000428B0()
{
  id v1 = [*v0 selectedViewController];

  return v1;
}

id sub_1000428E8()
{
  id v1 = [*v0 resolvedHealthStore];

  return v1;
}

uint64_t sub_100042920()
{
  return UIViewController.resolvedHealthExperienceStore.getter();
}

uint64_t sub_100042944@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D360(*v1 + OBJC_IVAR____TtC6Health20MainTabBarController_pinnedContentManager, a1);
}

void sub_100042970(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DeepLinkActivityType();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000438C8();
  if ((UIViewController.containsViewController<A>(ofType:)() & 1) == 0) {
    [v1 dismissViewControllerAnimated:0 completion:0];
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 == enum case for DeepLinkActivityType.allHealthData(_:)
    || v7 == enum case for DeepLinkActivityType.allTrends(_:)
    || (v7 != enum case for DeepLinkActivityType.healthProfile(_:)
      ? (BOOL v8 = v7 == enum case for DeepLinkActivityType.medicalID(_:))
      : (BOOL v8 = 1),
        !v8 ? (BOOL v9 = v7 == enum case for DeepLinkActivityType.notificationSettings(_:)) : (BOOL v9 = 1),
        !v9 ? (BOOL v10 = v7 == enum case for DeepLinkActivityType.profileAppSources(_:)) : (BOOL v10 = 1),
        v10))
  {
LABEL_25:
    uint64_t v13 = type metadata accessor for SummaryFeedViewController();
    goto LABEL_26;
  }
  if (v7 != enum case for DeepLinkActivityType.sharingInviteFlow(_:)
    && v7 != enum case for DeepLinkActivityType.sharingOverview(_:)
    && v7 != enum case for DeepLinkActivityType.sharingProfile(_:))
  {
    if (v7 != enum case for DeepLinkActivityType.summary(_:))
    {
      uint64_t v14 = type metadata accessor for BrowseViewController();
      sub_10004204C(v14, 1);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      return;
    }
    goto LABEL_25;
  }
  uint64_t v13 = type metadata accessor for SharingOverviewViewController();
LABEL_26:
  sub_10004204C(v13, 1);
}

void sub_100042B80()
{
  uint64_t v1 = type metadata accessor for BrowseViewController();
  sub_10004204C(v1, 1);
  id v2 = [v0 selectedViewController];
  if (v2)
  {
    id v12 = v2;
    self;
    uint64_t v3 = (void *)swift_dynamicCastObjCClass();
    if (v3)
    {
      id v4 = [v3 viewControllers];
      sub_10001E254(0, (unint64_t *)&qword_100108820);
      unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v5 >> 62) {
        goto LABEL_20;
      }
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
      {
        uint64_t v7 = 4;
        while (1)
        {
          id v8 = (v5 & 0xC000000000000001) != 0
             ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
             : *(id *)(v5 + 8 * v7);
          BOOL v9 = v8;
          uint64_t v10 = v7 - 3;
          if (__OFADD__(v7 - 4, 1)) {
            break;
          }
          if (swift_dynamicCastClass())
          {
            swift_bridgeObjectRelease_n();
            dispatch thunk of BrowseViewController.loadSearchingState(query:)();

            uint64_t v11 = v9;
            goto LABEL_16;
          }

          ++v7;
          if (v10 == v6) {
            goto LABEL_12;
          }
        }
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
      }
LABEL_12:
      swift_bridgeObjectRelease_n();
      uint64_t v11 = v12;
    }
    else
    {
      uint64_t v11 = v12;
    }
LABEL_16:
  }
}

id sub_100042D74(void *a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  __chkstk_darwin(v4);
  uint64_t v52 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100043AA0();
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DeepLinkActivityType();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v16 = (char *)v45 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v45 - v17;
  id v19 = NSUserActivity.fetchProfileIdentifier()();
  if (!v19)
  {
LABEL_4:
    id v21 = [a1 activityType];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    DeepLinkActivityType.init(_:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      sub_100043AF8((uint64_t)v8);
      uint64_t v22 = type metadata accessor for MainTabBarController();
      v57.receiver = v2;
      uint64_t v23 = &v57;
      id v24 = &stru_100100000;
      goto LABEL_27;
    }
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v8, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v16, v9);
    int v25 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v13, v9);
    id v24 = &stru_100100000;
    if (v25 != enum case for DeepLinkActivityType.allHealthData(_:)
      && v25 != enum case for DeepLinkActivityType.allTrends(_:)
      && v25 != enum case for DeepLinkActivityType.browse(_:)
      && v25 != enum case for DeepLinkActivityType.category(_:)
      && v25 != enum case for DeepLinkActivityType.dataTypeAddData(_:)
      && v25 != enum case for DeepLinkActivityType.dataTypeDetail(_:)
      && v25 != enum case for DeepLinkActivityType.dataTypeHighlights(_:)
      && v25 != enum case for DeepLinkActivityType.notificationSettings(_:))
    {
      if (v25 == enum case for DeepLinkActivityType.plugin(_:))
      {
LABEL_26:
        (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
        uint64_t v22 = type metadata accessor for MainTabBarController();
        v54[0] = v2;
        uint64_t v23 = (objc_super *)v54;
        goto LABEL_27;
      }
      if (v25 != enum case for DeepLinkActivityType.sharingInviteFlow(_:)
        && v25 != enum case for DeepLinkActivityType.sharingOverview(_:)
        && v25 != enum case for DeepLinkActivityType.sharingProfile(_:)
        && v25 != enum case for DeepLinkActivityType.summary(_:))
      {
        id v26 = v52;
        static Logger.general.getter();
        id v27 = a1;
        os_log_type_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.fault.getter();
        int v49 = v29;
        if (os_log_type_enabled(v28, v29))
        {
          os_log_t v48 = v28;
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          uint64_t v47 = swift_slowAlloc();
          uint64_t v55 = v47;
          uint64_t v46 = v30;
          *(_DWORD *)uint64_t v30 = 136315138;
          v45[1] = v30 + 4;
          id v31 = [v27 activityType];
          uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v45[0] = v27;
          uint64_t v33 = v32;
          unint64_t v35 = v34;

          v54[2] = sub_100018DA0(v33, v35, &v55);
          id v24 = &stru_100100000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v36 = v45[0];

          swift_bridgeObjectRelease();
          os_log_t v37 = v48;
          _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v49, "Unsupported activity type falling back to For You feed %s", v46, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v51);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v50 + 8))(v26, v51);
        }
        uint64_t v43 = type metadata accessor for SummaryFeedViewController();
        sub_10004204C(v43, 1);
        uint64_t v44 = *(void (**)(char *, uint64_t))(v10 + 8);
        v44(v16, v9);
        v44(v13, v9);
        uint64_t v22 = type metadata accessor for MainTabBarController();
        uint64_t v56 = v2;
        uint64_t v23 = (objc_super *)&v56;
        goto LABEL_27;
      }
    }
    sub_100042970((uint64_t)v16);
    id v40 = [v2 selectedViewController];
    if (v40)
    {
      uint64_t v41 = v40;
      [v40 restoreUserActivityState:a1];
    }
    goto LABEL_26;
  }
  os_log_type_t v20 = v19;
  if ([v19 type] == (id)1)
  {

    goto LABEL_4;
  }
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v18, enum case for DeepLinkActivityType.sharingOverview(_:), v9);
  sub_100042970((uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
  id v38 = [v1 selectedViewController];
  id v24 = &stru_100100000;
  if (v38)
  {
    int v39 = v38;
    [v38 restoreUserActivityState:a1];
  }
  uint64_t v22 = type metadata accessor for MainTabBarController();
  uint64_t v53 = v2;
  uint64_t v23 = (objc_super *)&v53;
LABEL_27:
  v23->super_class = (Class)v22;
  return [super a1];
}

void sub_1000434AC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DeepLinkViewControllerPlacement();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (unsigned __int8 *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  int v9 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v6 + 88))(v8, v5);
  if (v9 == enum case for DeepLinkViewControllerPlacement.regularSecondaryCompactBrowse(_:)) {
    goto LABEL_6;
  }
  if (v9 == enum case for DeepLinkViewControllerPlacement.onSummary(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 96))(v8, v5);
    int v10 = *v8;
    uint64_t v11 = type metadata accessor for SummaryFeedViewController();
    sub_10004204C(v11, v10);
    id v12 = [v2 selectedViewController];
    if (!v12) {
      return;
    }
    goto LABEL_7;
  }
  if (v9 == enum case for DeepLinkViewControllerPlacement.onBrowse(_:))
  {
LABEL_6:
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 96))(v8, v5);
    int v13 = *v8;
    uint64_t v14 = type metadata accessor for BrowseViewController();
    sub_10004204C(v14, v13);
    id v12 = [v2 selectedViewController];
    if (!v12) {
      return;
    }
    goto LABEL_7;
  }
  if (v9 != enum case for DeepLinkViewControllerPlacement.onSharing(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v8, v5);
    return;
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 96))(v8, v5);
  int v17 = *v8;
  uint64_t v18 = type metadata accessor for SharingOverviewViewController();
  sub_10004204C(v18, v17);
  id v12 = [v2 selectedViewController];
  if (v12)
  {
LABEL_7:
    uint64_t v15 = v12;
    self;
    unint64_t v16 = (void *)swift_dynamicCastObjCClass();
    if (v16) {
      [v16 pushViewController:a1 animated:0];
    }
  }
}

void sub_10004371C(uint64_t a1)
{
}

void sub_100043740()
{
}

uint64_t sub_100043764()
{
  return ViewControllerRouterProtocol<>.dismissPresentedViewController()();
}

void sub_100043788(uint64_t a1, uint64_t a2)
{
}

id sub_1000437AC(uint64_t a1, uint64_t a2)
{
  return sub_1000437C4(a1, a2, (SEL *)&selRef_collectionView);
}

id sub_1000437B8(uint64_t a1, uint64_t a2)
{
  return sub_1000437C4(a1, a2, (SEL *)&selRef_tableView);
}

id sub_1000437C4(uint64_t a1, uint64_t a2, SEL *a3)
{
  id result = [v3 *a3];
  if (!result) {
    __break(1u);
  }
  return result;
}

void sub_1000437F4()
{
  uint64_t v0 = (void *)dispatch thunk of BrowseViewController.activeViewController.getter();
  id v1 = [v0 collectionView];

  if (!v1) {
    __break(1u);
  }
}

uint64_t sub_100043840()
{
  return type metadata accessor for MainTabBarController();
}

unint64_t sub_100043848(uint64_t a1)
{
  unint64_t result = sub_100043870();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100043870()
{
  unint64_t result = qword_1001057C0;
  if (!qword_1001057C0)
  {
    type metadata accessor for MainTabBarController();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001057C0);
  }
  return result;
}

unint64_t sub_1000438C8()
{
  unint64_t result = qword_1001057D0;
  if (!qword_1001057D0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1001057D0);
  }
  return result;
}

id sub_100043920(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC6Health20MainTabBarController____lazy_storage___providedHealthToolbox] = 0;
  uint64_t v7 = &v3[OBJC_IVAR____TtC6Health20MainTabBarController_providedPresentation];
  uint64_t v8 = enum case for Presentation.summaryFeed(_:);
  uint64_t v9 = type metadata accessor for Presentation();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v7, v8, v9);
  *(void *)&v3[OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthStore] = a1;
  sub_10001D360(a2, (uint64_t)&v3[OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthExperienceStore]);
  sub_10001D360(a3, (uint64_t)&v3[OBJC_IVAR____TtC6Health20MainTabBarController_pinnedContentManager]);
  v15.receiver = v3;
  v15.super_class = (Class)type metadata accessor for MainTabBarController();
  id v10 = a1;
  [super initWithNibName:0 bundle:0];
  sub_1000125C0();
  sub_10001E254(0, (unint64_t *)&qword_100108820);
  id v12 = v11;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v12 setViewControllers:isa, v15.receiver, v15.super_class];

  _s6Health23OpenSleepScheduleIntentVwxx_0(a3);
  _s6Health23OpenSleepScheduleIntentVwxx_0(a2);
  return v12;
}

void sub_100043AA0()
{
  if (!qword_100104D68)
  {
    type metadata accessor for DeepLinkActivityType();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104D68);
    }
  }
}

uint64_t sub_100043AF8(uint64_t a1)
{
  sub_100043AA0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100043B54(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = [v2 tabBar];
  id v5 = [v4 items];

  if (v5)
  {
    sub_10001E254(0, &qword_100105850);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100041A64(a1, v6);
    id v8 = v7;
    char v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0 && !v8)
    {
      String._bridgeToObjectiveC()();
      id v11 = objc_allocWithZone((Class)type metadata accessor for PostNotificationOperation());
      id v12 = (void *)PostNotificationOperation.init(name:userInfo:)();
      sub_10001E254(0, (unint64_t *)&qword_100105858);
      int v13 = (void *)static NSOperationQueue.userInitiated.getter();
      [v13 addOperation:v12];
    }
    id v14 = [v2 selectedIndex];
    if ((v10 & 1) == 0 && v14 == v8)
    {
      id v15 = [v2 selectedViewController];
      id v17 = sub_100041C78(v15);

      if (v17)
      {
        self;
        unint64_t v16 = (void *)swift_dynamicCastObjCClass();
        if (v16) {
          [v16 _scrollToTopIfPossible:1];
        }
      }
    }
  }
}

uint64_t DownloadingDataDataSource.__allocating_init(showDownloadingDataItem:)(char a1)
{
  return DownloadingDataDataSource.init(showDownloadingDataItem:)(a1);
}

uint64_t DownloadingDataDataSource.init(showDownloadingDataItem:)(char a1)
{
  uint64_t v2 = qword_100103FF0;
  swift_retain();
  if (v2 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  EmptyStateCollectionViewCellItem.init(title:showSpinner:)();
  swift_release();
  uint64_t v3 = MutableArrayDataSourceWithLayout.init(arrangedSections:collapseEmptySections:layoutSectionProvider:)();
  if (a1)
  {
    sub_100003DD8(0, (unint64_t *)&qword_100104860, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1000CBFD0;
    uint64_t v5 = v3 + qword_100105880;
    uint64_t v6 = type metadata accessor for EmptyStateCollectionViewCellItem();
    *(void *)(v4 + 56) = v6;
    *(void *)(v4 + 64) = sub_10001889C(&qword_100105228, (void (*)(uint64_t))&type metadata accessor for EmptyStateCollectionViewCellItem);
    uint64_t v7 = sub_100004F38((uint64_t *)(v4 + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v7, v5, v6);
    swift_retain();
    dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_100043F58()
{
  uint64_t v0 = type metadata accessor for ListLayoutConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ListLayoutConfiguration.withoutHeader.getter();
  CollectionViewLayoutContext.environment.getter();
  uint64_t v4 = ListLayoutConfiguration.layout(for:)();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

Swift::Void __swiftcall DownloadingDataDataSource.showDownloadingItem()()
{
  sub_100003DD8(0, (unint64_t *)&qword_100104860, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1000CBFD0;
  uint64_t v2 = v0 + qword_100105880;
  uint64_t v3 = type metadata accessor for EmptyStateCollectionViewCellItem();
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = sub_10001889C(&qword_100105228, (void (*)(uint64_t))&type metadata accessor for EmptyStateCollectionViewCellItem);
  uint64_t v4 = sub_100004F38((uint64_t *)(v1 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v4, v2, v3);
  dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)();

  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall DownloadingDataDataSource.hideDownloadingItem()()
{
}

void DownloadingDataDataSource.init(arrangedSections:collapseEmptySections:layoutConstructor:)()
{
}

void DownloadingDataDataSource.init(arrangedSections:collapseEmptySections:layoutSectionProvider:)()
{
}

void sub_1000441B8()
{
}

uint64_t sub_1000441E4()
{
  uint64_t v1 = v0 + qword_100105880;
  uint64_t v2 = type metadata accessor for EmptyStateCollectionViewCellItem();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

uint64_t DownloadingDataDataSource.deinit()
{
  uint64_t v0 = MutableArrayDataSourceWithLayout.deinit();
  uint64_t v1 = v0 + qword_100105880;
  uint64_t v2 = type metadata accessor for EmptyStateCollectionViewCellItem();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t DownloadingDataDataSource.__deallocating_deinit()
{
  uint64_t v0 = MutableArrayDataSourceWithLayout.deinit() + qword_100105880;
  uint64_t v1 = type metadata accessor for EmptyStateCollectionViewCellItem();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0, v1);

  return swift_deallocClassInstance();
}

uint64_t SummaryPinnedContentDataSource.pinnedContentWithCloudStateDataSource.getter()
{
  return swift_retain();
}

uint64_t SummaryPinnedContentDataSource.cloudStateOrPinnedContentOrEmptyStateDataSource.getter()
{
  return swift_retain();
}

uint64_t SummaryPinnedContentDataSource.pinnedFeedItemsPublisher.getter()
{
  return swift_retain();
}

uint64_t SummaryPinnedContentDataSource.pinnedFeedItemsPublisher.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher);
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t (*SummaryPinnedContentDataSource.pinnedFeedItemsPublisher.modify())()
{
  return j__swift_endAccess;
}

uint64_t SummaryPinnedContentDataSource.__allocating_init(healthExperienceStore:healthStore:pinnedContentManager:)(void *a1, void *a2, uint64_t a3)
{
  return SummaryPinnedContentDataSource.init(healthExperienceStore:healthStore:pinnedContentManager:)(a1, a2, a3);
}

void sub_1000444D4(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10001D360(a2, (uint64_t)v12);
  sub_1000193A8(0, &qword_100104F98);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1000CBFD0;
  *(void *)(v5 + 32) = static SourceProfile.primary.getter();
  sub_10001D360(a3, (uint64_t)&v11);
  id v6 = objc_allocWithZone((Class)type metadata accessor for EditFavoritesCollectionViewController());
  uint64_t v7 = (void *)EditFavoritesCollectionViewController.init(pinnedContentManager:sourceProfiles:healthExperienceStore:)();
  id v8 = [objc_allocWithZone((Class)HKNavigationController) initWithRootViewController:v7];
  id v9 = [a1 viewController];
  if (v9)
  {
    char v10 = v9;
    [v9 presentViewController:v8 animated:1 completion:0];
  }
}

void sub_1000445E8(void *a1, void *a2, uint64_t a3)
{
  sub_10001D360(a3, (uint64_t)v11);
  uint64_t v5 = (char *)objc_allocWithZone((Class)type metadata accessor for AllHealthDataViewController());
  id v6 = &v5[direct field offset for AllHealthDataViewController.providedPresentation];
  uint64_t v7 = enum case for Presentation.showAllData(_:);
  uint64_t v8 = type metadata accessor for Presentation();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104))(v6, v7, v8);
  *(void *)&v5[qword_100107C88] = a2;
  sub_10001D360((uint64_t)v11, (uint64_t)&v5[qword_100107C90]);
  sub_10001D360((uint64_t)v11, (uint64_t)v10);
  type metadata accessor for AllHealthDataDataSource(0);
  swift_allocObject();
  AllHealthDataDataSource.init(healthStore:healthExperienceStore:)(a2, (uint64_t)v10);
  id v9 = (void *)CompoundDataSourceCollectionViewController.init(dataSource:)();
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v11);
  [a1 showViewController:v9 sender:a1];
}

void SummaryPinnedContentDataSource.init(_:)()
{
}

uint64_t sub_100044758()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t SummaryPinnedContentDataSource.deinit()
{
  uint64_t v0 = CompoundSectionedDataSource.deinit();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t SummaryPinnedContentDataSource.__deallocating_deinit()
{
  CompoundSectionedDataSource.deinit();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1000448A0()
{
  return swift_retain();
}

uint64_t sub_1000448F0(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_10004496C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000193A8(0, &qword_100105990);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100044AC8()
{
  return type metadata accessor for DownloadingDataDataSource(0);
}

uint64_t sub_100044AD0()
{
  return type metadata accessor for SummaryPinnedContentDataSource(0);
}

uint64_t sub_100044AD8(uint64_t a1)
{
  sub_10001DCEC(0, &qword_100105998, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100044B64()
{
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100044BA4(void *a1)
{
  sub_1000445E8(a1, *(void **)(v1 + 16), v1 + 24);
}

uint64_t sub_100044BB0()
{
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 16);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 56);

  return _swift_deallocObject(v0, 96, 7);
}

void sub_100044BF0(void *a1)
{
  sub_1000444D4(a1, v1 + 16, v1 + 56);
}

unint64_t sub_100044BFC(char a1)
{
  unint64_t result = 0xD000000000000016;
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 11:
    case 30:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000023;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 8:
      unint64_t result = 0xD000000000000014;
      break;
    case 9:
      unint64_t result = 0xD000000000000018;
      break;
    case 10:
      unint64_t result = 0xD000000000000018;
      break;
    case 12:
      unint64_t result = 0xD000000000000014;
      break;
    case 13:
      unint64_t result = 0xD000000000000018;
      break;
    case 14:
      unint64_t result = 0xD000000000000017;
      break;
    case 15:
      unint64_t result = 0xD000000000000018;
      break;
    case 17:
      unint64_t result = 0xD000000000000015;
      break;
    case 18:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 19:
      unint64_t result = 0xD000000000000012;
      break;
    case 20:
      unint64_t result = 0xD000000000000019;
      break;
    case 21:
      unint64_t result = 0xD000000000000017;
      break;
    case 23:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 24:
      unint64_t result = 0xD000000000000021;
      break;
    case 25:
      unint64_t result = 0xD000000000000014;
      break;
    case 26:
      unint64_t result = 0xD000000000000012;
      break;
    case 27:
      unint64_t result = 0xD000000000000018;
      break;
    case 28:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 29:
      unint64_t result = 0xD000000000000021;
      break;
    case 31:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 32:
      unint64_t result = 0xD000000000000023;
      break;
    case 33:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 34:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 35:
      unint64_t result = 0xD000000000000022;
      break;
    case 37:
      unint64_t result = 0xD000000000000017;
      break;
    case 38:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 39:
      unint64_t result = 0xD000000000000014;
      break;
    case 40:
      unint64_t result = 0xD000000000000015;
      break;
    case 41:
      unint64_t result = 0xD000000000000013;
      break;
    case 42:
      unint64_t result = 0xD000000000000022;
      break;
    default:
      return result;
  }
  return result;
}

void sub_100044F7C(void *a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  int v76 = a4;
  uint64_t v71 = a3;
  uint64_t v83 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v90 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v88 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for DispatchQoS();
  uint64_t v87 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v86 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for DispatchTime();
  uint64_t v85 = *(void *)(v91 - 8);
  uint64_t v10 = __chkstk_darwin(v91);
  uint64_t v79 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v84 = (char *)&v65 - v12;
  uint64_t v82 = type metadata accessor for DeepLinkActivityType();
  uint64_t v81 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v80 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for Presentation();
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  id v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004B76C(0, &qword_100105A38, (uint64_t (*)(uint64_t))&type metadata accessor for Presentation, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v65 - v17;
  uint64_t v70 = type metadata accessor for DataTypeDetailConfiguration.Context();
  uint64_t v69 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v67 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for HKTDataTypeDetailFactory();
  uint64_t v66 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  id v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v22 = [objc_allocWithZone((Class)HKHealthStore) init];
  uint64_t v23 = type metadata accessor for PinnedContentManager();
  id v24 = v22;
  uint64_t v25 = PinnedContentManager.__allocating_init(healthStore:domain:)();
  sub_10007DACC((uint64_t)&aBlock);
  if (v95)
  {
    uint64_t v77 = v25;
    id v78 = v24;
    uint64_t v72 = a1;
    uint64_t v73 = v7;
    sub_10001CD68(&aBlock, (uint64_t)&v99);
    uint64_t v27 = v100;
    uint64_t v26 = v101;
    sub_1000190DC(&v99, v100);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v26 + 32))(&v98, v27, v26);
    os_log_type_t v28 = 0;
    char v29 = a5;
    uint64_t v30 = v79;
    switch(a5)
    {
      case 7:
        sub_10001D360((uint64_t)&v98, (uint64_t)&aBlock);
        id v38 = (char *)objc_allocWithZone((Class)type metadata accessor for AllHealthDataViewController());
        (*(void (**)(char *, void, uint64_t))(v74 + 104))(&v38[direct field offset for AllHealthDataViewController.providedPresentation], enum case for Presentation.showAllData(_:), v75);
        id v39 = v78;
        *(void *)&v38[qword_100107C88] = v78;
        sub_10001D360((uint64_t)&aBlock, (uint64_t)&v38[qword_100107C90]);
        sub_10001D360((uint64_t)&aBlock, (uint64_t)v92);
        type metadata accessor for AllHealthDataDataSource(0);
        swift_allocObject();
        AllHealthDataDataSource.init(healthStore:healthExperienceStore:)(v39, (uint64_t)v92);
        os_log_type_t v28 = (void *)CompoundDataSourceCollectionViewController.init(dataSource:)();
        _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)&aBlock);
        break;
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
        break;
      case 18:
        type metadata accessor for InternalFeedItemListViewController();
        uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
        id v41 = [self bundleForClass:ObjCClassFromMetadata];
        NSString v42 = String._bridgeToObjectiveC()();
        id v43 = [self storyboardWithName:v42 bundle:v41];

        os_log_type_t v28 = (void *)UIStoryboard.instantiateViewController<A>(identifier:creator:)();
        sub_10004B76C(0, &qword_100104FB0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
        uint64_t v44 = type metadata accessor for ContentKind();
        uint64_t v45 = *(void *)(v44 - 8);
        char v46 = v29;
        unint64_t v47 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
        uint64_t v48 = swift_allocObject();
        *(_OWORD *)(v48 + 16) = xmmword_1000CBFD0;
        unint64_t v49 = v48 + v47;
        char v29 = v46;
        (*(void (**)(unint64_t, void, uint64_t))(v45 + 104))(v49, enum case for ContentKind.highlight(_:), v44);
        dispatch thunk of InternalFeedItemListViewController.contentKinds.setter();

        break;
      case 20:
      case 21:
      case 22:
        if ((v76 & 1) != 0
          || (id v31 = [self dataTypeWithCode:v71]) == 0)
        {
          os_log_type_t v28 = 0;
        }
        else
        {
          uint64_t v32 = v31;
          HKTDataTypeDetailFactory.init()();
          sub_10001D360((uint64_t)&v98, (uint64_t)&aBlock);
          id v33 = [v78 profileIdentifier];
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v18, 1, 1, v75);
          static DataTypeDetailMode.defaultMode(for:presentation:)();

          sub_100011F0C((uint64_t)v18, (uint64_t)&qword_100105A38, (uint64_t)&type metadata accessor for Presentation, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(void))sub_10004B76C);
          v92[3] = v23;
          v92[4] = &protocol witness table for PinnedContentManager;
          v92[0] = v77;
          swift_retain();
          unint64_t v34 = v67;
          DataTypeDetailConfiguration.Context.init(healthExperienceStore:healthStore:mode:pinnedContentManager:chartContext:restorationUserActivity:)();
          os_log_type_t v28 = (void *)HKTDataTypeDetailFactory.makeViewController(hkType:context:)();

          (*(void (**)(char *, uint64_t))(v69 + 8))(v34, v70);
          (*(void (**)(char *, uint64_t))(v66 + 8))(v21, v68);
        }
        break;
      case 41:
        sub_10001D360((uint64_t)&v98, (uint64_t)&aBlock);
        (*(void (**)(char *, void, uint64_t))(v74 + 104))(v15, enum case for Presentation.summaryFeed(_:), v75);
        id v50 = objc_allocWithZone((Class)type metadata accessor for AllTrendsViewController());
        id v51 = v78;
        os_log_type_t v28 = (void *)AllTrendsViewController.init(healthStore:healthExperienceStore:additionalPredicates:presentation:customProvenance:)();
        break;
      default:
        uint64_t v30 = v79;
        break;
    }
    uint64_t v52 = v81;
    uint64_t v53 = (uint64_t)v80;
    uint64_t v54 = v82;
    (*(void (**)(char *, void, uint64_t))(v81 + 104))(v80, enum case for DeepLinkActivityType.summary(_:), v82);
    sub_100085B3C(v28, &v99, v53, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v53, v54);
    sub_10001E254(0, (unint64_t *)&qword_100105730);
    uint64_t v55 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    uint64_t v56 = v84;
    + infix(_:_:)();
    uint64_t v85 = *(void *)(v85 + 8);
    ((void (*)(char *, uint64_t))v85)(v30, v91);
    uint64_t v57 = swift_allocObject();
    *(unsigned char *)(v57 + 16) = v29;
    *(void *)(v57 + 24) = v83;
    *(void *)(v57 + 32) = v28;
    uint64_t v58 = v72;
    *(void *)(v57 + 40) = v72;
    uint64_t v96 = sub_10004C144;
    uint64_t v97 = v57;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    BOOL v94 = sub_100005388;
    uint64_t v95 = &unk_1000F6538;
    uint64_t v59 = _Block_copy(&aBlock);
    id v60 = v28;
    id v61 = v58;
    swift_bridgeObjectRetain();
    swift_release();
    UIAction_optional v62 = v86;
    static DispatchQoS.unspecified.getter();
    *(void *)&long long aBlock = _swiftEmptyArrayStorage;
    sub_100019D1C((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10004B76C(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    sub_10001EF54();
    UIMenu_optional v63 = v88;
    uint64_t v64 = v73;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v59);

    swift_release();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v63, v64);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v62, v89);
    ((void (*)(char *, uint64_t))v85)(v56, v91);
    _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)&v98);
    _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)&v99);
  }
  else
  {
    sub_10004B6E8((uint64_t)&aBlock, (unint64_t *)&qword_1001059C0, (uint64_t)&unk_1001059C8, (uint64_t)&protocol descriptor for RootViewControllerProviding);
    sub_100093884((uint64_t)_swiftEmptyArrayStorage);
    sub_100044BFC(a5);
    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v36 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [a1 failedTest:v35 withFailure:v36 withResults:isa];

    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100045E74(void *a1, char a2)
{
  uint64_t v4 = type metadata accessor for DarwinNotificationPublisher.DarwinNotificationName();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    v20[0] = v5;
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Starting foreground generation test", v14, 2u);
    uint64_t v5 = v20[0];
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_100044BFC(a2);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 startedTest:v15];

  type metadata accessor for DarwinNotificationPublisher();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DarwinNotificationPublisher.DarwinNotificationName.userInteractiveFeedItemGenerationIdleOrComplete(_:), v4);
  v20[1] = DarwinNotificationPublisher.__allocating_init(name:queue:)();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(unsigned char *)(v16 + 24) = a2;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_10004C18C;
  *(void *)(v17 + 24) = v16;
  sub_100019D1C((unint64_t *)&unk_100105A40, (void (*)(uint64_t))&type metadata accessor for DarwinNotificationPublisher);
  id v18 = a1;
  Publisher.retainingSink(receiveValue:)();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_100046198(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v58 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v56 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for DispatchQoS();
  uint64_t v55 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v49 - v15;
  sub_10007DACC((uint64_t)&aBlock);
  if (!*((void *)&v60 + 1))
  {
    sub_10004B6E8((uint64_t)&aBlock, (unint64_t *)&qword_1001059C0, (uint64_t)&unk_1001059C8, (uint64_t)&protocol descriptor for RootViewControllerProviding);
    sub_100093884((uint64_t)_swiftEmptyArrayStorage);
    sub_100044BFC(a4);
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v28 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [a1 failedTest:v27 withFailure:v28 withResults:isa];
    swift_bridgeObjectRelease();

    return;
  }
  uint64_t v52 = v7;
  uint64_t v53 = v6;
  sub_10001CD68(&aBlock, (uint64_t)v67);
  sub_1000190DC(v67, v68);
  dispatch thunk of ViewControllerRouterProtocol.prepareForAppActivity(_:)();
  uint64_t v17 = v68;
  uint64_t v18 = v69;
  sub_1000190DC(v67, v68);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
  if (!v19) {
    goto LABEL_15;
  }
  uint64_t v20 = (void *)v19;
  self;
  if (!swift_dynamicCastObjCClass())
  {

LABEL_15:
    *(void *)&long long aBlock = 0;
    *((void *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    *(void *)&long long aBlock = 0xD000000000000029;
    *((void *)&aBlock + 1) = 0x80000001000D2A90;
    uint64_t v34 = v68;
    uint64_t v35 = v69;
    sub_1000190DC(v67, v68);
    v66[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35);
    sub_10004B68C(0, (unint64_t *)&unk_1001059D0, (uint64_t)&qword_100108820, (uint64_t)UIViewController_ptr, (void (*)(uint64_t, uint64_t, uint64_t))sub_10001E254);
    v36._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    sub_100093884((uint64_t)_swiftEmptyArrayStorage);
    sub_100044BFC(a4);
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v32 = String._bridgeToObjectiveC()();
    v33.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [a1 failedTest:v31 withFailure:v32 withResults:v33.super.isa];
    goto LABEL_16;
  }
  unint64_t v21 = (unint64_t)UINavigationController.rootViewController()();
  if (v21
    && (*(void *)&long long v64 = v21,
        sub_10001E254(0, (unint64_t *)&qword_100108820),
        sub_10001D3C4(0, &qword_1001059E8),
        (swift_dynamicCast() & 1) != 0))
  {
    if (*((void *)&v60 + 1))
    {
      sub_10001CD68(&aBlock, (uint64_t)v66);
      sub_1000190DC(v66, v66[3]);
      uint64_t v22 = dispatch thunk of PPTScrollViewProviding.scrollViewToTest()();
      if (v22)
      {
        uint64_t v23 = (void *)v22;
        strcpy((char *)&v63, "feedVariation");
        HIWORD(v63._object) = -4864;
        AnyHashable.init<A>(_:)();
        uint64_t v24 = v58;
        if (*(void *)(v58 + 16) && (unint64_t v25 = sub_100094D3C((uint64_t)&aBlock), (v26 & 1) != 0))
        {
          sub_100018EC4(*(void *)(v24 + 56) + 32 * v25, (uint64_t)&v64);
        }
        else
        {
          long long v64 = 0u;
          long long v65 = 0u;
        }
        sub_100031B58((uint64_t)&aBlock);
        if (*((void *)&v65 + 1))
        {
          if (swift_dynamicCast())
          {
            char v37 = sub_10009D70C(v63);
            if (v37 != 6)
            {
              id v38 = sub_10009D304(v37);
              uint64_t v39 = swift_allocObject();
              *(unsigned char *)(v39 + 16) = a4;
              *(void *)(v39 + 24) = v23;
              *(void *)(v39 + 32) = v24;
              id v40 = v23;
              swift_bridgeObjectRetain();
              sub_100084DC8((uint64_t)v38, (uint64_t)sub_10004B824, v39, a4);
              swift_bridgeObjectRelease();
              swift_release();

LABEL_27:
              _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v66);
              goto LABEL_17;
            }
          }
        }
        else
        {
          sub_100011F0C((uint64_t)&v64, (uint64_t)&qword_1001059F0, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(void))sub_10001E81C);
        }
        sub_10001E254(0, (unint64_t *)&qword_100105730);
        uint64_t v51 = static OS_dispatch_queue.main.getter();
        static DispatchTime.now()();
        + infix(_:_:)();
        uint64_t v54 = *(void *)(v54 + 8);
        ((void (*)(char *, uint64_t))v54)(v14, v11);
        uint64_t v44 = swift_allocObject();
        *(unsigned char *)(v44 + 16) = a4;
        *(void *)(v44 + 24) = v23;
        *(void *)(v44 + 32) = v24;
        id v61 = sub_10004B760;
        uint64_t v62 = v44;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v60 = sub_100005388;
        *((void *)&v60 + 1) = &unk_1000F6240;
        uint64_t v45 = _Block_copy(&aBlock);
        id v50 = v23;
        swift_bridgeObjectRetain();
        swift_release();
        static DispatchQoS.unspecified.getter();
        *(void *)&long long aBlock = _swiftEmptyArrayStorage;
        sub_100019D1C((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10004B76C(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
        sub_10001EF54();
        char v46 = v56;
        uint64_t v47 = v53;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v48 = (void *)v51;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();

        _Block_release(v45);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v46, v47);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v57);
        ((void (*)(char *, uint64_t))v54)(v16, v11);
        goto LABEL_27;
      }
      sub_100093884((uint64_t)_swiftEmptyArrayStorage);
      sub_100044BFC(a4);
      NSString v41 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v42 = String._bridgeToObjectiveC()();
      Class v43 = Dictionary._bridgeToObjectiveC()().super.isa;
      [a1 failedTest:v41 withFailure:v42 withResults:v43];
      swift_bridgeObjectRelease();

      goto LABEL_27;
    }
  }
  else
  {
    id v61 = 0;
    long long v60 = 0u;
    long long aBlock = 0u;
  }
  sub_10004B6E8((uint64_t)&aBlock, &qword_1001059E0, (uint64_t)&qword_1001059E8, (uint64_t)&protocol descriptor for PPTScrollViewProviding);
  *(void *)&long long aBlock = 0;
  *((void *)&aBlock + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  *(void *)&long long aBlock = 0xD000000000000020;
  *((void *)&aBlock + 1) = 0x80000001000D2AC0;
  v66[0] = (unint64_t)UINavigationController.rootViewController()();
  sub_10004B68C(0, (unint64_t *)&unk_1001059D0, (uint64_t)&qword_100108820, (uint64_t)UIViewController_ptr, (void (*)(uint64_t, uint64_t, uint64_t))sub_10001E254);
  v30._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  sub_100093884((uint64_t)_swiftEmptyArrayStorage);
  sub_100044BFC(a4);
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v32 = String._bridgeToObjectiveC()();
  v33.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  [a1 failedTest:v31 withFailure:v32 withResults:v33.super.isa];

LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_17:
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v67);
}

uint64_t sub_100046D68(void *a1, uint64_t a2, char a3)
{
  uint64_t v6 = (int)sub_10004A8C4(3u, a2);
  uint64_t v7 = (int)sub_10004A8C4(4u, a2);
  uint64_t v8 = (int)sub_10004A8C4(5u, a2);
  setenv("MEASURE_CHART_STARTUP_TIME", "true", 1);
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = v7;
  *(unsigned char *)(v9 + 32) = 0;
  *(void *)(v9 + 40) = v8;
  *(unsigned char *)(v9 + 48) = 0;
  *(void *)(v9 + 56) = a1;
  *(void *)(v9 + 64) = 0xD00000000000001ALL;
  *(void *)(v9 + 72) = 0x80000001000D2C10;
  *(void *)(v9 + 80) = v6;
  sub_100085B94((uint64_t)a1, v6, 0, (void (*)(void))sub_10004BF28, v9);

  return swift_release();
}

uint64_t sub_100046E70(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_100044BFC(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100044BFC(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100046EFC()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100044BFC(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100046F60()
{
  sub_100044BFC(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100046FB4()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100044BFC(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100047014@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100049F7C();
  *a1 = result;
  return result;
}

unint64_t sub_100047044@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100044BFC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100047070(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004AC84(a1, a4, *v4);
}

uint64_t sub_10004707C(uint64_t a1, uint64_t a2, int a3, void *a4, uint64_t a5)
{
  char v29 = a4;
  int v28 = a3;
  uint64_t v27 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v32 = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v26 - v18;
  sub_10001E254(0, (unint64_t *)&qword_100105730);
  uint64_t v30 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  NSString v31 = *(void (**)(char *, uint64_t))(v14 + 8);
  v31(v17, v13);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v27;
  *(void *)(v20 + 24) = a2;
  *(unsigned char *)(v20 + 32) = v28;
  unint64_t v21 = v29;
  *(void *)(v20 + 40) = v29;
  *(void *)(v20 + 48) = a5;
  aBlock[4] = sub_10004B878;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = &unk_1000F62B8;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  id v23 = v21;
  swift_bridgeObjectRetain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100019D1C((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10004B76C(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_10001EF54();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v24 = (void *)v30;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
  return ((uint64_t (*)(char *, uint64_t))v31)(v19, v32);
}

void sub_10004747C(void (*a1)(void), uint64_t a2, char a3, void *a4, uint64_t a5)
{
  a1();
  char v8 = sub_10004B888(6, a5);
  sub_100044BFC(a3);
  if (v8)
  {
    id v9 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
    id v10 = a4;
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v13 = [v9 initWithTestName:v11 scrollView:v10 completionHandler:0];

    [self runTestWithParameters:v13];
  }
  else
  {
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_10004A8C4(0, a5);
    [a4 _performScrollTest:v13 iterations:v12 delta:sub_10004A8C4(1u, a5)];
  }
}

void sub_1000475C8(char a1, void *a2, uint64_t a3)
{
  char v6 = sub_10004B888(6, a3);
  sub_100044BFC(a1);
  if (v6)
  {
    id v7 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
    id v8 = a2;
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v11 = [v7 initWithTestName:v9 scrollView:v8 completionHandler:0];

    [self runTestWithParameters:v11];
  }
  else
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_10004A8C4(0, a3);
    [a2 _performScrollTest:v11 iterations:v10 delta:sub_10004A8C4(1u, a3)];
  }
}

void sub_100047708(char a1, void *a2, void *a3)
{
  id v5 = sub_100087234(a2);
  if (!v5) {
    goto LABEL_7;
  }
  char v6 = v5;
  id v7 = [v5 chartController];
  if (!v7)
  {

LABEL_7:
    _StringGuts.grow(_:)(47);
    v10._object = (void *)0x80000001000D2B10;
    v10._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    String.append(_:)(v10);
    type metadata accessor for _HKDataTypeCode(0);
    _print_unlocked<A, B>(_:_:)();
    sub_100093884((uint64_t)_swiftEmptyArrayStorage);
    sub_100044BFC(a1);
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v12 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [a3 failedTest:v11 withFailure:v12 withResults:isa];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
  id v8 = v7;
  [v6 _showAllFilters];
  id v9 = [v8 primaryGraphViewController];
  id v14 = [v9 graphView];

  sub_10004BA14(a3, v14, a1);
}

uint64_t sub_10004790C(void *a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v39 = a8;
  uint64_t v35 = a5;
  uint64_t v36 = a7;
  uint64_t v31 = a6;
  uint64_t v33 = a3;
  int v32 = a2;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v42 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v13 - 8);
  uint64_t v41 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchTime();
  uint64_t v38 = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v31 - v21;
  sub_10001E254(0, (unint64_t *)&qword_100105730);
  uint64_t v34 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  char v37 = *(void (**)(char *, uint64_t))(v17 + 8);
  v37(v20, v16);
  uint64_t v23 = swift_allocObject();
  *(unsigned char *)(v23 + 16) = v32;
  uint64_t v24 = v33;
  *(void *)(v23 + 24) = a1;
  *(void *)(v23 + 32) = v24;
  uint64_t v25 = v35;
  *(void *)(v23 + 40) = a4;
  *(void *)(v23 + 48) = v25;
  aBlock[4] = v36;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = v39;
  uint64_t v26 = _Block_copy(aBlock);
  id v27 = a1;
  id v28 = v24;
  swift_bridgeObjectRetain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100019D1C((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10004B76C(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_10001EF54();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  char v29 = (void *)v34;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v41);
  return ((uint64_t (*)(char *, uint64_t))v37)(v22, v38);
}

void sub_100047CFC(char a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = sub_10008749C(a2);
  if (v7)
  {
    id v8 = v7;
    id v9 = [v7 primaryGraphViewController];
    id v14 = [v9 graphView];

    sub_100047ED0(a3, v14, a4, a1);
  }
  else
  {
    _StringGuts.grow(_:)(47);
    v10._object = (void *)0x80000001000D2B10;
    v10._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    String.append(_:)(v10);
    type metadata accessor for _HKDataTypeCode(0);
    _print_unlocked<A, B>(_:_:)();
    sub_100093884((uint64_t)_swiftEmptyArrayStorage);
    sub_100044BFC(a1);
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v12 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [a3 failedTest:v11 withFailure:v12 withResults:isa];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_100047ED0(void *a1, void *a2, uint64_t a3, char a4)
{
  if ((sub_10004B888(6, a3) & 1) != 0 && [self isRecapAvailable])
  {
    sub_10004BA14(a1, a2, a4);
  }
  else
  {
    uint64_t v8 = sub_10004A8C4(0, a3);
    uint64_t v9 = sub_10004A8C4(1u, a3);
    uint64_t v10 = sub_10004A8C4(2u, a3);
    sub_100044BFC(a4);
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [a2 testScrollPerformanceWithTestName:v11 iterations:v8 delta:v9 length:v10];
  }
}

void sub_100047FF4(uint64_t a1, void *a2, char a3)
{
  sub_100093884((uint64_t)_swiftEmptyArrayStorage);
  sub_100044BFC(a3);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  [a2 finishedTest:v5 extraResults:isa];
  swift_bridgeObjectRelease();
}

id sub_1000480B4(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for InternalFeedItemListViewController());

  return [v2 initWithCoder:a1];
}

void sub_1000480FC(char a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = sub_10004A8C4(0, a2);
  uint64_t v9 = sub_10004A8C4(1u, a2);
  char v10 = sub_10004B888(6, a2);
  if (a3
    && (char v11 = v10,
        (NSString v12 = (objc_class *)[a3 contentScrollViewForEdge:15]) != 0))
  {
    Class isa = v12;
    sub_100044BFC(a1);
    if (v11)
    {
      id v13 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
      Class isa = isa;
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v15 = [v13 initWithTestName:v14 scrollView:isa completionHandler:0];

      [self runTestWithParameters:v15];
    }
    else
    {
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [(objc_class *)isa _performScrollTest:v15 iterations:v8 delta:v9];
    }
  }
  else
  {
    sub_100093884((uint64_t)_swiftEmptyArrayStorage);
    sub_100044BFC(a1);
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v15 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [a4 failedTest:v16 withFailure:v15 withResults:];
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100048314(void *a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(unsigned char *)(v10 + 24) = a3;
  *(void *)(v10 + 32) = a1;
  *(void *)(v10 + 40) = a4;
  *(void *)(v10 + 48) = a5;
  sub_100044BFC(a3);
  id v11 = a2;
  id v12 = a1;
  swift_bridgeObjectRetain();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 startedTest:v13];

  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_10004C054;
  *(void *)(v14 + 24) = v10;
  v17[4] = sub_10004C068;
  v17[5] = v14;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_1000486B4;
  v17[3] = &unk_1000F64E8;
  NSString v15 = _Block_copy(v17);
  swift_retain();
  swift_release();
  [v12 reportStartupTime:v15];
  _Block_release(v15);
  return swift_release();
}

uint64_t sub_1000484A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, void *a6)
{
  sub_10004B76C(0, &qword_100105A28, (uint64_t (*)(uint64_t))sub_10004C090, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000CC0F0;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for Double;
  *(double *)(inited + 72) = (double)a3 * 0.001;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = 29549;
  *(void *)(inited + 152) = 0xE200000000000000;
  sub_100093884(inited);
  sub_100044BFC(a5);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a4 finishedTest:v11 waitForCommit:0 extraResults:isa 0xD000000000000010 0x80000001000D2C80];

  [a6 reportStartupTime:0];
  uint64_t v13 = String.utf8CString.getter();
  setenv((const char *)(v13 + 32), "", 1);
  return swift_release();
}

uint64_t sub_1000486B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  swift_retain();
  v4(v5, v7, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_100048730(void *a1, int a2, uint64_t a3, char a4, uint64_t a5, char a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v57 = a7;
  uint64_t v55 = a5;
  int v56 = a2;
  uint64_t v49 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v52 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v48 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v50 = *(void *)(v16 - 8);
  uint64_t v51 = v16;
  __chkstk_darwin(v16);
  uint64_t v47 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for DispatchTime();
  uint64_t v18 = *(void *)(v54 - 8);
  uint64_t v19 = __chkstk_darwin(v54);
  uint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v44 - v22;
  id v24 = sub_10008749C(a1);
  if (v24)
  {
    uint64_t v25 = a8;
    char v26 = v56;
    id v27 = v57;
    id v53 = v24;
    if ((a4 & 1) != 0 || (a6 & 1) != 0 || a3 == v55)
    {
      sub_100048314(v24, v57, v56, v25, a9);
      id v43 = v53;
    }
    else
    {
      [v24 selectTimeScope:a3];
      sub_10001E254(0, (unint64_t *)&qword_100105730);
      uint64_t v45 = static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      + infix(_:_:)();
      char v46 = *(void (**)(char *, uint64_t))(v18 + 8);
      v46(v21, v54);
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = v27;
      *(unsigned char *)(v28 + 24) = v26;
      *(void *)(v28 + 32) = v25;
      *(void *)(v28 + 40) = a9;
      uint64_t v29 = v55;
      *(void *)(v28 + 48) = v53;
      *(void *)(v28 + 56) = v29;
      uint64_t v62 = sub_10004BFB0;
      uint64_t v63 = v28;
      long long aBlock = _NSConcreteStackBlock;
      unint64_t v59 = 1107296256;
      long long v60 = sub_100005388;
      id v61 = &unk_1000F6470;
      uint64_t v30 = _Block_copy(&aBlock);
      id v31 = v27;
      swift_bridgeObjectRetain();
      id v32 = v53;
      swift_release();
      uint64_t v33 = v47;
      static DispatchQoS.unspecified.getter();
      long long aBlock = (void **)_swiftEmptyArrayStorage;
      sub_100019D1C((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10004B76C(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
      sub_10001EF54();
      uint64_t v35 = v48;
      uint64_t v34 = v49;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v36 = (void *)v45;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v30);

      (*(void (**)(char *, uint64_t))(v52 + 8))(v35, v34);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v33, v51);
      v46(v23, v54);
    }
  }
  else
  {
    uint64_t v37 = String.utf8CString.getter();
    setenv((const char *)(v37 + 32), "", 1);
    swift_release();
    long long aBlock = 0;
    unint64_t v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    v38._object = (void *)0x80000001000D2C30;
    v38._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    String.append(_:)(v38);
    uint64_t v64 = a10;
    type metadata accessor for _HKDataTypeCode(0);
    _print_unlocked<A, B>(_:_:)();
    v39._uint64_t countAndFlagsBits = 46;
    v39._object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    sub_100093884((uint64_t)_swiftEmptyArrayStorage);
    sub_100044BFC(v56);
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v41 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [v57 failedTest:v40 withFailure:v41 withResults:isa];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_100048D24(void *a1, char a2, uint64_t a3, void *a4)
{
  if (!a1)
  {
    sub_100093884((uint64_t)_swiftEmptyArrayStorage);
    sub_100044BFC(a2);
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v9 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [a4 failedTest:v8 withFailure:v9];
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  Class isa = a1;
  id v7 = [(objc_class *)isa tableView];
  if (!v7)
  {
    sub_100093884((uint64_t)_swiftEmptyArrayStorage);
    sub_100044BFC(a2);
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v9 = String._bridgeToObjectiveC()();
    Class v13 = Dictionary._bridgeToObjectiveC()().super.isa;
    [a4 failedTest:v8 withFailure:v9 withResults:v13];
    swift_bridgeObjectRelease();

    Class isa = v13;
    goto LABEL_9;
  }
  NSString v8 = v7;
  sub_100044BFC(a2);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_10004A8C4(0, a3);
  uint64_t v11 = sub_10004A8C4(1u, a3);
  [v8 contentSize];
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v12 <= -2147483650.0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v12 >= 2147483650.0)
  {
LABEL_14:
    __break(1u);
    return;
  }
  [v8 _performScrollTest:v9 iterations:v10 delta:v11 length:(int)v12];
LABEL_9:
}

void sub_100048F9C(void *a1, char a2)
{
  sub_100044BFC(a2);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 finishedTest:v3 waitForCommit:1 extraResults:0];
}

void sub_100049010(void *a1, void *a2, char a3, uint64_t a4)
{
  if (a1 && (type metadata accessor for InternalFeedItemListViewController(), (uint64_t v8 = swift_dynamicCastClass()) != 0))
  {
    NSString v9 = (void *)v8;
    NSString v10 = a1;
    id v11 = [v9 collectionView];
    if (!v11)
    {
      __break(1u);
      return;
    }
    NSString v12 = v11;
    char v13 = sub_10004B888(6, a4);
    sub_100044BFC(a3);
    if (v13)
    {
      id v14 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
      NSString v12 = v12;
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id isa = [v14 initWithTestName:v15 scrollView:v12 completionHandler:0];

      [self runTestWithParameters:isa];
    }
    else
    {
      id isa = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v16 = sub_10004A8C4(0, a4);
      [v12 _performScrollTest:isa iterations:v16 delta:sub_10004A8C4(1u, a4)];
    }
  }
  else
  {
    sub_100093884((uint64_t)_swiftEmptyArrayStorage);
    sub_100044BFC(a3);
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v12 = String._bridgeToObjectiveC()();
    id isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [a2 failedTest:v10 withFailure:v12 withResults:v12];
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100049244(void *a1, char a2)
{
  uint64_t v23 = a1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  NSString v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  char v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    NSString v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = v8;
    *(_WORD *)NSString v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Foreground generation idle notification received", v15, 2u);
    uint64_t v8 = v22;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_10001E254(0, (unint64_t *)&qword_100105730);
  uint64_t v16 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v23;
  *(void *)(v17 + 16) = v23;
  *(unsigned char *)(v17 + 24) = a2;
  aBlock[4] = sub_10004C1F8;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = &unk_1000F65D8;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v18;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100019D1C((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10004B76C(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_10001EF54();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v24);
}

void sub_100049668(void *a1, char a2)
{
  sub_100093884((uint64_t)_swiftEmptyArrayStorage);
  sub_100044BFC(a2);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  [a1 finishedTest:v4 extraResults:isa];
  swift_bridgeObjectRelease();
}

uint64_t sub_100049728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_100049A90();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_100049810(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

unsigned __int8 *sub_100049810(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          id v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            uint64_t v23 = (int)v8 * (uint64_t)(int)a3;
            if (v23 != (int)v23) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__OFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            uint64_t v31 = (int)v28 * (uint64_t)(int)a3;
            if (v31 != (int)v31) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__OFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            uint64_t v14 = (int)v8 * (uint64_t)(int)a3;
            if (v14 != (int)v14) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (__OFSUB__(v14, v15)) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100049A90()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_100049B10(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100049B10(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_100049C68(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          char v11 = sub_100019330(v9, 0),
          unint64_t v12 = sub_100049D68((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_100049C68(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_1000448F0(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_1000448F0(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t sub_100049D68(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    unint64_t result = v12;
    if (v17 == v15) {
      unint64_t result = sub_1000448F0(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          unint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    unint64_t result = sub_1000448F0(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100049F7C()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x2B) {
    return 43;
  }
  else {
    return v0;
  }
}

uint64_t getEnumTagSinglePayload for HealthAppPPT(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xD6) {
    goto LABEL_17;
  }
  if (a2 + 42 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 42) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 42;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 42;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 42;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2B;
  int v8 = v6 - 43;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HealthAppPPT(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 42 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 42) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD5)
  {
    unsigned int v6 = ((a2 - 214) >> 8) + 1;
    *unint64_t result = a2 + 42;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004A12CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 42;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HealthAppPPT()
{
  return &type metadata for HealthAppPPT;
}

unint64_t sub_10004A168()
{
  unint64_t result = qword_1001059B0;
  if (!qword_1001059B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001059B0);
  }
  return result;
}

void sub_10004A1BC(void *a1, uint64_t a2, char a3)
{
  sub_10007DACC((uint64_t)&aBlock);
  if (v14)
  {
    sub_10001CD68(&aBlock, (uint64_t)v17);
    sub_100044BFC(a3);
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [a1 startedTest:v5];

    sub_1000190DC(v17, v17[3]);
    dispatch thunk of ViewControllerRouterProtocol.prepareForAppActivity(_:)();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(unsigned char *)(v6 + 24) = a3;
    uint64_t v15 = sub_10004BEBC;
    uint64_t v16 = v6;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v13 = sub_100005388;
    uint64_t v14 = &unk_1000F63A8;
    BOOL v7 = _Block_copy(&aBlock);
    id v8 = a1;
    swift_release();
    [v8 installCACommitCompletionBlock:v7];
    _Block_release(v7);
    _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v17);
  }
  else
  {
    sub_10004B6E8((uint64_t)&aBlock, (unint64_t *)&qword_1001059C0, (uint64_t)&qword_1001059C8, (uint64_t)&protocol descriptor for RootViewControllerProviding);
    sub_100093884((uint64_t)_swiftEmptyArrayStorage);
    sub_100044BFC(a3);
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v10 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [a1 failedTest:v9 withFailure:v10 withResults:isa];
    swift_bridgeObjectRelease();
  }
}

void sub_10004A3FC(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = type metadata accessor for DeepLinkActivityType();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  NSString v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007DACC((uint64_t)&aBlock);
  if (!v35)
  {
    sub_10004B6E8((uint64_t)&aBlock, (unint64_t *)&qword_1001059C0, (uint64_t)&qword_1001059C8, (uint64_t)&protocol descriptor for RootViewControllerProviding);
    sub_100093884((uint64_t)_swiftEmptyArrayStorage);
    sub_100044BFC(a4);
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v27 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [a1 failedTest:v26 withFailure:v27 withResults:isa];
    swift_bridgeObjectRelease();

    return;
  }
  sub_10001CD68(&aBlock, (uint64_t)v38);
  sub_1000190DC(v38, v39);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DeepLinkActivityType.browse(_:), v6);
  dispatch thunk of ViewControllerRouterProtocol.prepareForAppActivity(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v10 = v39;
  uint64_t v11 = v40;
  sub_1000190DC(v38, v39);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v13 = (void *)v12;
  self;
  if (!swift_dynamicCastObjCClass() || (unint64_t v14 = (unint64_t)UINavigationController.rootViewController()()) == 0)
  {
LABEL_9:

LABEL_10:
    sub_100093884((uint64_t)_swiftEmptyArrayStorage);
    sub_100044BFC(a4);
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v30 = String._bridgeToObjectiveC()();
    Class v31 = Dictionary._bridgeToObjectiveC()().super.isa;
    [a1 failedTest:v29 withFailure:v30 withResults:v31];
    swift_bridgeObjectRelease();

    goto LABEL_11;
  }
  uint64_t v15 = (void *)v14;
  type metadata accessor for BrowseViewController();
  if (!swift_dynamicCastClass())
  {

    goto LABEL_9;
  }
  sub_100044BFC(a4);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 startedTest:v16];

  unint64_t v17 = (void *)dispatch thunk of BrowseViewController.browseSearchViewController.getter();
  unint64_t v18 = (void *)dispatch thunk of BrowseSearchViewController.searchController.getter();

  dispatch thunk of BrowseViewController.setActiveSearchController(_:)();
  char v19 = (void *)dispatch thunk of BrowseViewController.browseSearchViewController.getter();
  id v20 = (void *)dispatch thunk of BrowseSearchViewController.searchController.getter();

  id v21 = [v20 searchBar];
  NSString v22 = String._bridgeToObjectiveC()();
  [v21 setText:v22];

  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a1;
  *(unsigned char *)(v23 + 24) = a4;
  uint64_t v36 = sub_10004BEDC;
  uint64_t v37 = v23;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v34 = sub_100005388;
  uint64_t v35 = &unk_1000F63F8;
  unsigned __int8 v24 = _Block_copy(&aBlock);
  id v25 = a1;
  swift_release();
  [v25 installCACommitCompletionBlock:v24];
  _Block_release(v24);

LABEL_11:
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v38);
}

uint64_t sub_10004A8C4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = 8 * (char)a1;
  uint64_t v28 = *(void *)&aIteratioscroll[v4];
  unint64_t v29 = *(void *)&aNs[v4];
  AnyHashable.init<A>(_:)();
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_100094D3C((uint64_t)v30), (v6 & 1) != 0))
  {
    sub_100018EC4(*(void *)(a2 + 56) + 32 * v5, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  sub_100031B58((uint64_t)v30);
  if (!*((void *)&v32 + 1))
  {
    sub_100011F0C((uint64_t)&v31, (uint64_t)&qword_1001059F0, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(void))sub_10001E81C);
    goto LABEL_52;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_52;
  }
  uint64_t result = v28;
  uint64_t v8 = HIBYTE(v29) & 0xF;
  uint64_t v9 = v28 & 0xFFFFFFFFFFFFLL;
  if ((v29 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(v29) & 0xF;
  }
  else {
    uint64_t v10 = v28 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  if ((v29 & 0x1000000000000000) != 0)
  {
    uint64_t v14 = sub_100049728(v28, v29, 10);
    swift_bridgeObjectRelease();
    if ((v14 & 0x100000000) == 0) {
      return v14;
    }
LABEL_52:
    if (a1 > 7u) {
      return 0xFFFFFFFFLL;
    }
    else {
      return dword_1000CD2B0[(char)a1];
    }
  }
  if ((v29 & 0x2000000000000000) == 0)
  {
    if ((v28 & 0x1000000000000000) != 0) {
      uint64_t v11 = (unsigned __int8 *)((v29 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v11 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v12 = sub_100049810(v11, v9, 10);
    LOBYTE(v31) = BYTE4(v12) & 1;
    char v13 = BYTE4(v12) & 1;
    uint64_t v14 = (uint64_t)v12;
LABEL_51:
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_52;
    }
    return v14;
  }
  v30[0] = v28;
  v30[1] = v29 & 0xFFFFFFFFFFFFFFLL;
  if (v28 == 43)
  {
    if (!v8) {
      goto LABEL_67;
    }
    if (v8 == 1) {
      goto LABEL_38;
    }
    uint64_t v14 = (BYTE1(v28) - 48);
    if (v14 > 9) {
      goto LABEL_38;
    }
    if (v8 != 2)
    {
      if ((BYTE2(v28) - 48) > 9u) {
        goto LABEL_38;
      }
      uint64_t v14 = 10 * v14 + (BYTE2(v28) - 48);
      uint64_t v16 = v8 - 3;
      if (v16)
      {
        unint64_t v17 = (unsigned __int8 *)v30 + 3;
        while (1)
        {
          unsigned int v18 = *v17 - 48;
          if (v18 > 9) {
            goto LABEL_38;
          }
          uint64_t v19 = 10 * (int)v14;
          if (v19 != (int)v19) {
            goto LABEL_38;
          }
          uint64_t v14 = v19 + v18;
          if (__OFADD__(v19, v18)) {
            goto LABEL_38;
          }
          char v13 = 0;
          ++v17;
          if (!--v16) {
            goto LABEL_51;
          }
        }
      }
    }
LABEL_50:
    char v13 = 0;
    goto LABEL_51;
  }
  if (v28 != 45)
  {
    if (!v8) {
      goto LABEL_38;
    }
    uint64_t v14 = (v28 - 48);
    if (v14 > 9) {
      goto LABEL_38;
    }
    if (v8 != 1)
    {
      if ((BYTE1(v28) - 48) > 9u) {
        goto LABEL_38;
      }
      uint64_t v14 = 10 * v14 + (BYTE1(v28) - 48);
      uint64_t v20 = v8 - 2;
      if (v20)
      {
        id v21 = (unsigned __int8 *)v30 + 2;
        while (1)
        {
          unsigned int v22 = *v21 - 48;
          if (v22 > 9) {
            goto LABEL_38;
          }
          uint64_t v23 = 10 * (int)v14;
          if (v23 != (int)v23) {
            goto LABEL_38;
          }
          uint64_t v14 = v23 + v22;
          if (__OFADD__(v23, v22)) {
            goto LABEL_38;
          }
          char v13 = 0;
          ++v21;
          if (!--v20) {
            goto LABEL_51;
          }
        }
      }
    }
    goto LABEL_50;
  }
  if (v8)
  {
    if (v8 != 1)
    {
      unsigned int v15 = (BYTE1(v28) - 48);
      if (v15 <= 9)
      {
        if (v8 == 2)
        {
          char v13 = 0;
          uint64_t v14 = -v15;
          goto LABEL_51;
        }
        if ((BYTE2(v28) - 48) <= 9u)
        {
          uint64_t v14 = -10 * v15 - (BYTE2(v28) - 48);
          uint64_t v24 = v8 - 3;
          if (!v24) {
            goto LABEL_50;
          }
          id v25 = (unsigned __int8 *)v30 + 3;
          while (1)
          {
            unsigned int v26 = *v25 - 48;
            if (v26 > 9) {
              break;
            }
            uint64_t v27 = 10 * (int)v14;
            if (v27 != (int)v27) {
              break;
            }
            uint64_t v14 = v27 - v26;
            if (__OFSUB__(v27, v26)) {
              break;
            }
            char v13 = 0;
            ++v25;
            if (!--v24) {
              goto LABEL_51;
            }
          }
        }
      }
    }
LABEL_38:
    uint64_t v14 = 0;
    char v13 = 1;
    goto LABEL_51;
  }
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

uint64_t sub_10004AC84(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = type metadata accessor for DeepLinkActivityType();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch((char)a3)
  {
    case 7:
      sub_100044F7C(a1, a2, 0, 1, 7);
      return 1;
    case 8:
    case 9:
      uint64_t v10 = (unsigned int *)&enum case for DeepLinkActivityType.browse(_:);
      goto LABEL_5;
    case 10:
      uint64_t v11 = swift_allocObject();
      *(unsigned char *)(v11 + 16) = 10;
      *(void *)(v11 + 24) = a1;
      *(void *)(v11 + 32) = a2;
      *(void *)(v11 + 40) = 248;
      id v16 = a1;
      swift_bridgeObjectRetain();
      unint64_t v17 = sub_10004C1FC;
      goto LABEL_11;
    case 11:
      uint64_t v11 = swift_allocObject();
      *(unsigned char *)(v11 + 16) = 11;
      *(void *)(v11 + 24) = a1;
      *(void *)(v11 + 32) = a2;
      *(void *)(v11 + 40) = 248;
      id v16 = a1;
      swift_bridgeObjectRetain();
      unint64_t v17 = sub_10004B63C;
LABEL_11:
      char v13 = v17;
      uint64_t v14 = (uint64_t)v16;
      uint64_t v15 = 248;
      goto LABEL_16;
    case 12:
    case 13:
      uint64_t v11 = swift_allocObject();
      *(unsigned char *)(v11 + 16) = a3;
      *(void *)(v11 + 24) = a1;
      *(void *)(v11 + 32) = a2;
      *(void *)(v11 + 40) = 7;
      id v12 = a1;
      swift_bridgeObjectRetain();
      char v13 = sub_10004C1FC;
      uint64_t v14 = (uint64_t)v12;
      uint64_t v15 = 7;
      goto LABEL_16;
    case 14:
      uint64_t v11 = swift_allocObject();
      *(unsigned char *)(v11 + 16) = 14;
      *(void *)(v11 + 24) = a1;
      *(void *)(v11 + 32) = a2;
      *(void *)(v11 + 40) = 100;
      id v18 = a1;
      swift_bridgeObjectRetain();
      char v13 = sub_10004C1FC;
      uint64_t v14 = (uint64_t)v18;
      uint64_t v15 = 100;
      goto LABEL_16;
    case 15:
      uint64_t v11 = swift_allocObject();
      *(unsigned char *)(v11 + 16) = 15;
      *(void *)(v11 + 24) = a1;
      *(void *)(v11 + 32) = a2;
      *(void *)(v11 + 40) = 5;
      id v19 = a1;
      swift_bridgeObjectRetain();
      char v13 = sub_10004C1FC;
      uint64_t v14 = (uint64_t)v19;
      uint64_t v15 = 5;
      goto LABEL_16;
    case 16:
      uint64_t v11 = swift_allocObject();
      *(unsigned char *)(v11 + 16) = 16;
      *(void *)(v11 + 24) = a1;
      *(void *)(v11 + 32) = a2;
      *(void *)(v11 + 40) = 125;
      id v20 = a1;
      swift_bridgeObjectRetain();
      char v13 = sub_10004C1FC;
      uint64_t v14 = (uint64_t)v20;
      uint64_t v15 = 125;
      goto LABEL_16;
    case 17:
      uint64_t v11 = swift_allocObject();
      *(unsigned char *)(v11 + 16) = 17;
      *(void *)(v11 + 24) = a1;
      *(void *)(v11 + 32) = a2;
      *(void *)(v11 + 40) = 3;
      id v21 = a1;
      swift_bridgeObjectRetain();
      char v13 = sub_10004B5CC;
      uint64_t v14 = (uint64_t)v21;
      uint64_t v15 = 3;
LABEL_16:
      sub_100085B94(v14, v15, 0, (void (*)(void))v13, v11);
      goto LABEL_17;
    case 18:
      sub_100044F7C(a1, a2, 0, 1, 18);
      return 1;
    case 19:
      (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DeepLinkActivityType.browse(_:), v6);
      sub_10004A1BC(a1, (uint64_t)v9, 19);
      goto LABEL_6;
    case 20:
      sub_100044F7C(a1, a2, 7, 0, 20);
      return 1;
    case 21:
      sub_100044F7C(a1, a2, 172, 0, 21);
      return 1;
    case 22:
      sub_100044F7C(a1, a2, 5, 0, 22);
      return 1;
    case 23:
      uint64_t v22 = static KeywordFeatureTag.CommonIdentifier.fitness.getter();
      uint64_t v24 = v23;
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [a1 startedTest:v25];

      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = a1;
      *(unsigned char *)(v26 + 24) = 23;
      id v27 = a1;
      uint64_t v28 = sub_10004C260;
      goto LABEL_25;
    case 24:
      uint64_t v22 = static KeywordFeatureTag.CommonIdentifier.hearing.getter();
      uint64_t v24 = v29;
      NSString v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [a1 startedTest:v30];

      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = a1;
      *(unsigned char *)(v26 + 24) = 24;
      id v27 = a1;
      uint64_t v28 = sub_10004B5B8;
LABEL_25:
      sub_100086498((uint64_t)v27, v22, v24, 0, v28, v26);
      goto LABEL_30;
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 39:
      sub_100046D68(a1, a2, a3);
      return 1;
    case 36:
      uint64_t v31 = swift_allocObject();
      *(unsigned char *)(v31 + 16) = 36;
      *(void *)(v31 + 24) = a2;
      *(void *)(v31 + 32) = a1;
      id v32 = a1;
      swift_bridgeObjectRetain();
      sub_100086C6C((uint64_t)v32, 7, 0, (void (*)(void))sub_10004B5AC, v31);
LABEL_17:
      swift_release();
      return 1;
    case 37:
      sub_10004A3FC(a1, 1918985544, 0xE400000000000000, 37);
      return 1;
    case 38:
      sub_10004A3FC(a1, 6709603, 0xE300000000000000, 38);
      return 1;
    case 40:
      sub_10004B76C(0, &qword_100104FB0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      uint64_t v33 = type metadata accessor for ContentKind();
      uint64_t v34 = *(void *)(v33 - 8);
      unint64_t v35 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      uint64_t v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_1000CBFD0;
      (*(void (**)(unint64_t, void, uint64_t))(v34 + 104))(v36 + v35, enum case for ContentKind.dataSummary(_:), v33);
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = a1;
      *(unsigned char *)(v37 + 24) = 40;
      *(void *)(v37 + 32) = a2;
      id v38 = a1;
      swift_bridgeObjectRetain();
      sub_100086EEC((uint64_t)v38, v36, 0, (uint64_t (*)(void))sub_10004B55C, v37);
LABEL_30:
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 41:
      sub_100044F7C(a1, a2, 0, 1, 41);
      break;
    case 42:
      sub_100045E74(a1, 42);
      break;
    default:
      uint64_t v10 = (unsigned int *)&enum case for DeepLinkActivityType.summary(_:);
LABEL_5:
      (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *v10, v6);
      sub_100046198(a1, a2, (uint64_t)v9, a3);
LABEL_6:
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      break;
  }
  return 1;
}

uint64_t sub_10004B51C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10004B55C(void *a1)
{
  sub_100049010(a1, *(void **)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10004B56C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10004B5AC(void *a1)
{
  sub_100048D24(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

void sub_10004B5B8(uint64_t a1)
{
  sub_100047FF4(a1, *(void **)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_10004B5C4()
{
  return sub_10004B7D8(48);
}

uint64_t sub_10004B5CC(void *a1)
{
  return sub_10004790C(a1, *(unsigned __int8 *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), (uint64_t)&unk_1000F6340, (uint64_t)sub_10004BE8C, (uint64_t)&unk_1000F6358);
}

uint64_t sub_10004B614()
{
  return sub_10004B7D8(48);
}

uint64_t sub_10004B61C()
{
  return sub_10004B7D8(48);
}

uint64_t sub_10004B624()
{
  return sub_10004B7D8(48);
}

uint64_t sub_10004B62C()
{
  return sub_10004B7D8(48);
}

uint64_t sub_10004B634()
{
  return sub_10004B7D8(48);
}

uint64_t sub_10004B63C(void *a1)
{
  return sub_10004790C(a1, *(unsigned __int8 *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), (uint64_t)&unk_1000F62F0, (uint64_t)sub_10004B9FC, (uint64_t)&unk_1000F6308);
}

uint64_t sub_10004B684()
{
  return sub_10004B7D8(48);
}

void sub_10004B68C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a5(255, a3, a4);
    unint64_t v6 = type metadata accessor for Optional();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_10004B6E8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_10004B68C(0, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))sub_10001D3C4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_10004B758()
{
  return sub_10004B7D8(40);
}

void sub_10004B760()
{
  sub_1000475C8(*(unsigned char *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

void sub_10004B76C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_10004B7D0()
{
  return sub_10004B7D8(40);
}

uint64_t sub_10004B7D8(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10004B824(uint64_t a1, uint64_t a2)
{
  return sub_10004707C(a1, a2, *(unsigned __int8 *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_10004B830()
{
  swift_release();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10004B878()
{
  sub_10004747C(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_10004B888(char a1, uint64_t a2)
{
  uint64_t v3 = 8 * a1;
  uint64_t v8 = *(void *)&aIteratioscroll[v3];
  uint64_t v9 = *(void *)&aNs[v3];
  AnyHashable.init<A>(_:)();
  if (*(void *)(a2 + 16) && (unint64_t v4 = sub_100094D3C((uint64_t)v10), (v5 & 1) != 0))
  {
    sub_100018EC4(*(void *)(a2 + 56) + 32 * v4, (uint64_t)&v11);
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  sub_100031B58((uint64_t)v10);
  if (!*((void *)&v12 + 1))
  {
    sub_100011F0C((uint64_t)&v11, (uint64_t)&qword_1001059F0, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(void))sub_10001E81C);
    goto LABEL_11;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    char v6 = 0;
    return v6 & 1;
  }
  if (v8 == 5457241 && v9 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    char v6 = 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  return v6 & 1;
}

uint64_t sub_10004B9FC()
{
  return sub_10004BEA4((uint64_t (*)(void, void, void, void, void))sub_100047708);
}

void sub_10004BA14(void *a1, void *a2, char a3)
{
  unint64_t v5 = sub_100044BFC(a3);
  uint64_t v7 = v6;
  id v8 = [a2 window];
  if (v8)
  {
    uint64_t v9 = v8;
    [v8 bounds];
    double v11 = v10;
    double v13 = v12;
    double v15 = v14;
    double v17 = v16;

    id v18 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
    swift_bridgeObjectRetain();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v20 = [v18 initWithTestName:v19 scrollBounds:2 scrollContentLength:0 direction:v11 completionHandler:v13, v15, v17, 250.0];

    [v20 setShouldFlick:1];
    [v20 setIterationDurationFactor:0.4];
    id v21 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
    swift_bridgeObjectRetain();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v23 = [v21 initWithTestName:v22 scrollBounds:3 scrollContentLength:0 direction:v11 completionHandler:v13, v15, v17, 250.0];

    [v23 setShouldFlick:1];
    [v23 setIterationDurationFactor:0.8];
    uint64_t v24 = self;
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_10001E81C(0, (unint64_t *)&qword_1001057E0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(void, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1000CD1C0;
    *(void *)(v26 + 32) = v20;
    *(void *)(v26 + 40) = v23;
    specialized Array._endMutation()();
    sub_10004BDE8();
    NSString v27 = v20;
    NSString v28 = v23;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v31 = (Class)[v24 newWithTestName:v25 parameters:isa completionHandler:0];

    [self runTestWithParameters:v31];
  }
  else
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = v5;
    v30._object = v7;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    sub_100093884((uint64_t)_swiftEmptyArrayStorage);
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v28 = String._bridgeToObjectiveC()();
    Class v31 = Dictionary._bridgeToObjectiveC()().super.isa;
    [a1 failedTest:v27 withFailure:v28 withResults:];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_10004BDE8()
{
  unint64_t result = qword_100105A20;
  if (!qword_100105A20)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_100105A20);
  }
  return result;
}

uint64_t sub_10004BE44()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10004BE8C()
{
  return sub_10004BEA4((uint64_t (*)(void, void, void, void, void))sub_100047CFC);
}

uint64_t sub_10004BEA4(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(*(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

void sub_10004BEBC()
{
  sub_100049668(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void sub_10004BEDC()
{
  sub_100048F9C(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10004BEE8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

void sub_10004BF28(void *a1)
{
  sub_100048730(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48), *(void **)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80));
}

uint64_t sub_10004BF68()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

id sub_10004BFB0()
{
  uint64_t v1 = *(void **)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  sub_100048314(v1, *(void **)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));

  return [v1 selectTimeScope:v2];
}

uint64_t sub_10004C00C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10004C054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000484A8(a1, a2, a3, *(void **)(v3 + 16), *(unsigned char *)(v3 + 24), *(void **)(v3 + 32));
}

uint64_t sub_10004C068()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_10004C090()
{
  if (!qword_100105A30)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100105A30);
    }
  }
}

uint64_t sub_10004C0FC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10004C144()
{
  sub_1000480FC(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_10004C154()
{
  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10004C18C()
{
  return sub_100049244(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10004C198()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004C1D0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_10004C264(void *a1)
{
  uint64_t v2 = *(void (**)(void))(v1 + OBJC_IVAR____TtC6Health28HealthAppPPTFeedItemListener_changesMade);
  id v3 = [a1 fetchedObjects];
  if (!v3) {
    goto LABEL_12;
  }
  unint64_t v4 = v3;
  sub_10004C4F8();
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v5 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    swift_unknownObjectRetain();
  }
  swift_bridgeObjectRelease();
  type metadata accessor for FeedItem();
  id v3 = (id)swift_dynamicCastClass();
  if (!v3)
  {
    swift_unknownObjectRelease();
LABEL_11:
    id v3 = 0;
  }
LABEL_12:
  id v7 = v3;
  v2();
}

id sub_10004C440()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HealthAppPPTFeedItemListener();
  return [super dealloc];
}

uint64_t type metadata accessor for HealthAppPPTFeedItemListener()
{
  return self;
}

unint64_t sub_10004C4F8()
{
  unint64_t result = qword_100105AF0;
  if (!qword_100105AF0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_100105AF0);
  }
  return result;
}

void sub_10004C550()
{
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [self alertControllerWithTitle:v1 message:v2 preferredStyle:1];

  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v0;
  id v5 = v0;
  NSString v6 = String._bridgeToObjectiveC()();
  v12[4] = sub_10004C898;
  v12[5] = v4;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_1000A0064;
  uint64_t v12[3] = &unk_1000F6650;
  id v7 = _Block_copy(v12);
  swift_release();
  id v8 = self;
  id v9 = [v8 actionWithTitle:v6 style:0 handler:v7];
  _Block_release(v7);

  [v3 addAction:v9];
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v8 actionWithTitle:v10 style:1 handler:0];

  [v3 addAction:v11];
  [v5 presentViewController:v3 animated:1 completion:0];
}

uint64_t sub_10004C788(void *a1)
{
  *(void *)(swift_allocObject() + 16) = a1;
  type metadata accessor for SummaryFeedViewController();
  id v2 = a1;
  TapToRadarButtonDisplaying<>.showDisambiguationTriageAlert(featureName:userConfirmed:)();

  return swift_release();
}

uint64_t sub_10004C83C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10004C874()
{
}

void sub_10004C898()
{
}

void sub_10004C8C4(uint64_t a1, uint64_t a2)
{
  id v17 = [objc_allocWithZone((Class)UIActivityIndicatorView) initWithActivityIndicatorStyle:100];
  [v17 startAnimating];
  id v5 = [v2 navigationItem];
  id v16 = [v5 rightBarButtonItem];

  id v6 = [v2 navigationItem];
  id v7 = [objc_allocWithZone((Class)UIBarButtonItem) initWithCustomView:v17];
  [v6 setRightBarButtonItem:v7];

  id v8 = [objc_allocWithZone((Class)type metadata accessor for CollectFeedItemCacheDiagnosticsOperation()) init];
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v11 = (void *)swift_allocObject();
  v11[2] = v9;
  v11[3] = v10;
  v11[4] = v16;
  void v11[5] = a1;
  v11[6] = a2;
  aBlock[4] = sub_10004CF7C;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = &unk_1000F66F0;
  double v12 = _Block_copy(aBlock);
  id v13 = v8;
  swift_retain();
  swift_retain();
  id v14 = v16;
  sub_10004CF94(a1);
  sub_10004CF94((uint64_t)sub_10004CF7C);
  swift_release();
  [v13 setCompletionBlock:v12];
  _Block_release(v12);

  swift_release();
  swift_release();
  swift_release();
  sub_10001E254(0, (unint64_t *)&qword_100105858);
  double v15 = (void *)static NSOperationQueue.userInitiated.getter();
  [v15 addOperation:v13];
}

uint64_t sub_10004CB8C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004CBC4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  NSString v25 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    double v12 = (void *)Strong;
    uint64_t v13 = dispatch thunk of CollectFeedItemCacheDiagnosticsOperation.logURLs.getter();
  }
  else
  {
    uint64_t v13 = 0;
  }
  sub_10001E254(0, (unint64_t *)&qword_100105730);
  id v14 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v15 = swift_allocObject();
  swift_beginAccess();
  id v16 = (void *)swift_unknownObjectWeakLoadStrong();
  swift_unknownObjectWeakInit();

  id v17 = (void *)swift_allocObject();
  v17[2] = v13;
  v17[3] = v15;
  NSString v19 = v25;
  uint64_t v18 = v26;
  void v17[4] = v25;
  v17[5] = v18;
  void v17[6] = v27;
  aBlock[4] = sub_10004D37C;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = &unk_1000F6740;
  id v20 = _Block_copy(aBlock);
  id v21 = v19;
  sub_10004CF94(v18);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100019D64((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10004D3AC();
  sub_100019D64((unint64_t *)&qword_100105A10, (void (*)(uint64_t))sub_10004D3AC);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v28);
}

uint64_t sub_10004CF64()
{
  return sub_10004D31C((void (*)(void))&_swift_release);
}

uint64_t sub_10004CF7C()
{
  return sub_10004D394((uint64_t (*)(void, void, void, void, void))sub_10004CBC4);
}

uint64_t sub_10004CF94(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10004CFA4(Class isa, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  v25[1] = a5;
  uint64_t v26 = a4;
  v25[0] = a3;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v10 = String._bridgeToObjectiveC()();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10001E918();
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1000CC620;
  *(void *)(v12 + 32) = [objc_allocWithZone((Class)NSNumber) initWithInteger:1148476];
  uint64_t v27 = v12;
  specialized Array._endMutation()();
  sub_10001E254(0, &qword_100105AF8);
  v13.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (isa) {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  id v14 = [self hk_tapToHealthRadarURLWithTitle:v10 description:v11 classification:5 reproducibility:0 keywords:v13.super.isa autoDiagnostics:2 attachments:isa];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = [self defaultWorkspace];
  if (v15)
  {
    id v17 = v15;
    URL._bridgeToObjectiveC()(v16);
    NSString v19 = v18;
    sub_1000939E8((uint64_t)_swiftEmptyArrayStorage);
    Class v20 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v17 openSensitiveURL:v19 withOptions:v20];
  }
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    NSString v22 = Strong;
    id v23 = [Strong navigationItem];

    [v23 setRightBarButtonItem:v25[0]];
  }
  if (v26) {
    v26();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10004D304()
{
  return sub_10004D31C((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10004D31C(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  if (*(void *)(v1 + 40)) {
    swift_release();
  }

  return _swift_deallocObject(v1, 56, 7);
}

uint64_t sub_10004D37C()
{
  return sub_10004D394((uint64_t (*)(void, void, void, void, void))sub_10004CFA4);
}

uint64_t sub_10004D394(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

void sub_10004D3AC()
{
  if (!qword_100105740)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105740);
    }
  }
}

id sub_10004D41C()
{
  type metadata accessor for HealthNotificationsWelcomeViewModel();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = [self bundleForClass:ObjCClassFromMetadata];
  qword_100108B98 = (uint64_t)result;
  return result;
}

uint64_t sub_10004D470(uint64_t a1, uint64_t a2)
{
  return sub_100051930(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t sub_10004D48C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AdvertisableFeature.Location();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v0[13])
  {
    uint64_t v6 = v0[13];
  }
  else
  {
    sub_1000190DC(v0 + 7, v0[10]);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for AdvertisableFeature.Location.healthWelcomeFlow(_:), v2);
    static AdvertisableFeature.Identifier.healthWelcomeFlowIdentifiers.getter();
    uint64_t v6 = dispatch thunk of HealthPluginAdvertisableFeatureManagerProviding.makeAdvertisableFeatureManager(location:featureIdentifiers:includeFeaturesMadeAvailableByBuddy:)();
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v1[13] = v6;
    v1[14] = v8;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v6;
}

uint64_t sub_10004D600(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v24 = *v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v21 = v6;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v22 = a1;
    uint64_t v26 = v13;
    uint64_t v23 = a2;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v14 = _typeName(_:qualified:)();
    uint64_t v25 = sub_100018DA0(v14, v15, &v26);
    a2 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%s] [TCC] Fetching notification authorization status", v12, 0xCu);
    swift_arrayDestroy();
    a1 = v22;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v21);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  sub_1000190DC(v3 + 2, v3[5]);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  id v17 = (void *)swift_allocObject();
  v17[2] = a1;
  v17[3] = a2;
  uint64_t v18 = v24;
  void v17[4] = v16;
  v17[5] = v18;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_100052094;
  *(void *)(v19 + 24) = v17;
  swift_retain();
  swift_retain();
  swift_retain();
  dispatch thunk of HealthAppNotificationManager.getNotificationSettings(completion:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10004D904(char *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v38 = a1;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)v35 - v14;
  static Logger.general.getter();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    v35[2] = a4;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v36 = a3;
    v35[1] = v20;
    v40[0] = v20;
    *(_DWORD *)uint64_t v19 = 136315395;
    uint64_t v37 = v10;
    v35[0] = v19 + 4;
    uint64_t v21 = _typeName(_:qualified:)();
    uint64_t v39 = sub_100018DA0(v21, v22, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2049;
    uint64_t v39 = (uint64_t)v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%s] [TCC] Received authorization status: %{private}ld", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    a3 = v36;
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v23 = v37;
    uint64_t v10 = v37;
  }
  else
  {

    uint64_t v23 = v10;
  }
  uint64_t v24 = *(void (**)(char *, uint64_t))(v23 + 8);
  v24(v15, v9);
  if (v38)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      sub_10004D48C();
      swift_release();
      swift_getObjectType();
      uint64_t v26 = (void *)swift_allocObject();
      v26[2] = a2;
      v26[3] = a3;
      v26[4] = a5;
      swift_retain();
      dispatch thunk of AdvertisableFeatureManaging.determineCurrentAdvertisedFeatures(completion:)();
      swift_release();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    static Logger.general.getter();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v38 = v13;
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v36 = v9;
      v40[0] = v30;
      uint64_t v37 = v10;
      *(_DWORD *)uint64_t v29 = 136315138;
      uint64_t v31 = _typeName(_:qualified:)();
      uint64_t v39 = sub_100018DA0(v31, v32, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%s] Authorization status not determined, showing Health Notifications page", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v33 = v38;
      uint64_t v34 = v36;
    }
    else
    {

      uint64_t v33 = v13;
      uint64_t v34 = v9;
    }
    v24(v33, v34);
    return a2(1);
  }
  return result;
}

uint64_t sub_10004DD8C(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v97 = a3;
  uint64_t v98 = a4;
  uint64_t v6 = type metadata accessor for AdvertisableFeatureError();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v93 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v100 = (char *)&v87 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v87 - v12;
  uint64_t v99 = type metadata accessor for AdvertisableFeature.Identifier();
  os_log_t v91 = *(os_log_t *)(v99 - 8);
  __chkstk_darwin(v99);
  unint64_t v15 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v95 = v16;
  uint64_t v96 = v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18);
  BOOL v94 = (char *)&v87 - v22;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v87 - v23;
  sub_1000520E0();
  __chkstk_darwin(v25);
  uint64_t v27 = (uint64_t *)((char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000521A8(a1, (uint64_t)v27, (uint64_t (*)(void))sub_1000520E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v92 = a2;
    (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v13, v27, v6);
    static Logger.general.getter();
    os_log_type_t v28 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v28(v100, v13, v6);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    int v31 = v30;
    unint64_t v32 = v13;
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v33 = swift_slowAlloc();
      os_log_t v91 = v29;
      uint64_t v34 = v33;
      BOOL v94 = (char *)swift_slowAlloc();
      v101[0] = (uint64_t)v94;
      *(_DWORD *)uint64_t v34 = 136315394;
      uint64_t v99 = (uint64_t)v13;
      uint64_t v35 = _typeName(_:qualified:)();
      uint64_t v102 = sub_100018DA0(v35, v36, v101);
      LODWORD(v98) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v37 = v100;
      v28(v93, v100, v6);
      uint64_t v38 = String.init<A>(describing:)();
      uint64_t v102 = sub_100018DA0(v38, v39, v101);
      unint64_t v32 = (char *)v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v40 = *(void (**)(char *, uint64_t))(v7 + 8);
      v40(v37, v6);
      os_log_t v41 = v91;
      _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v98, "[%s] Error when determining advertised features, will not show Health Notifications page: %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v40 = *(void (**)(char *, uint64_t))(v7 + 8);
      v40(v100, v6);
    }
    (*(void (**)(char *, uint64_t))(v96 + 8))(v20, v95);
    v92(0);
    return ((uint64_t (*)(char *, uint64_t))v40)(v32, v6);
  }
  uint64_t v42 = *v27;
  uint64_t v100 = (char *)(*v27 & 0xC000000000000001);
  if (v100)
  {
    uint64_t v43 = __CocoaSet.count.getter();
    uint64_t v44 = v99;
    if (v43) {
      goto LABEL_6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    static Logger.general.getter();
    id v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      v101[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136315138;
      uint64_t v56 = _typeName(_:qualified:)();
      uint64_t v102 = sub_100018DA0(v56, v57, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "[%s] Authorization status is correct and there are no advertisable features, skipping Health Notifications page", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v96 + 8))(v24, v95);
    uint64_t v58 = 0;
    return ((uint64_t (*)(uint64_t))a2)(v58);
  }
  uint64_t v44 = v99;
  if (!*(void *)(v42 + 16)) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v45 = v94;
  static Logger.general.getter();
  swift_bridgeObjectRetain();
  char v46 = Logger.logObject.getter();
  int v47 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v46, (os_log_type_t)v47))
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v45, v95);
LABEL_37:
    uint64_t v58 = 1;
    return ((uint64_t (*)(uint64_t))a2)(v58);
  }
  int v89 = v47;
  uint64_t v48 = swift_slowAlloc();
  uint64_t v88 = swift_slowAlloc();
  v106[0] = v88;
  *(_DWORD *)uint64_t v48 = 136315394;
  uint64_t v49 = _typeName(_:qualified:)();
  v101[0] = sub_100018DA0(v49, v50, v106);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  uint64_t v90 = (uint8_t *)v48;
  *(_WORD *)(v48 + 12) = 2080;
  uint64_t v93 = (char *)v46;
  if (v100) {
    uint64_t v51 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v51 = *(void *)(v42 + 16);
  }
  unint64_t v59 = _swiftEmptyArrayStorage;
  if (!v51)
  {
LABEL_36:
    v101[0] = (uint64_t)v59;
    uint64_t v82 = v90;
    sub_100025F90();
    sub_1000524A8(&qword_100105C78, (void (*)(uint64_t))sub_100025F90);
    uint64_t v83 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v85 = v84;
    swift_bridgeObjectRelease();
    v101[0] = sub_100018DA0(v83, v85, v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v86 = (os_log_t)v93;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v93, (os_log_type_t)v89, "[%s] Authorization status is correct but there are advertisable features %s, showing Health Notifications page", v82, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v96 + 8))(v94, v95);
    goto LABEL_37;
  }
  unint64_t v105 = _swiftEmptyArrayStorage;
  sub_100096504(0, v51 & ~(v51 >> 63), 0);
  if (v100)
  {
    uint64_t v60 = __CocoaSet.startIndex.getter();
    char v62 = 1;
  }
  else
  {
    uint64_t v60 = sub_10006D118(v42);
    char v62 = v63 & 1;
  }
  uint64_t v92 = a2;
  uint64_t v102 = v60;
  uint64_t v103 = v61;
  char v104 = v62;
  if ((v51 & 0x8000000000000000) == 0)
  {
    os_log_t v64 = v91 + 1;
    uint64_t v65 = v42 & 0xFFFFFFFFFFFFFF8;
    if (v42 < 0) {
      uint64_t v65 = v42;
    }
    uint64_t v98 = v65;
    do
    {
      while (1)
      {
        sub_10006CC0C(v102, v103, v104, v42);
        AdvertisableFeatureModel.identifier.getter();
        uint64_t v74 = AdvertisableFeature.Identifier.rawValue.getter();
        uint64_t v76 = v75;
        ((void (*)(char *, uint64_t))v64->isa)(v15, v44);
        swift_release();
        uint64_t v77 = v105;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100096504(0, v77[2] + 1, 1);
          uint64_t v77 = v105;
        }
        unint64_t v79 = v77[2];
        unint64_t v78 = v77[3];
        if (v79 >= v78 >> 1)
        {
          sub_100096504(v78 > 1, v79 + 1, 1);
          uint64_t v77 = v105;
        }
        v77[2] = v79 + 1;
        uint64_t v80 = &v77[2 * v79];
        v80[4] = v74;
        v80[5] = v76;
        if (v100) {
          break;
        }
        uint64_t v66 = v102;
        uint64_t v67 = v103;
        char v68 = v104;
        int64_t v69 = sub_10005184C(v102, v103, v104, v42);
        uint64_t v71 = v70;
        char v73 = v72;
        sub_10001EDCC(v66, v67, v68);
        uint64_t v102 = v69;
        uint64_t v103 = v71;
        uint64_t v44 = v99;
        char v104 = v73 & 1;
        if (!--v51) {
          goto LABEL_35;
        }
      }
      if ((v104 & 1) == 0) {
        goto LABEL_40;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_100052210(0, &qword_100105C70, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for Set.Index);
      uint64_t v81 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v81(v101, 0);
      --v51;
    }
    while (v51);
LABEL_35:
    sub_10001EDCC(v102, v103, v104);
    unint64_t v59 = v105;
    a2 = v92;
    goto LABEL_36;
  }
  __break(1u);
LABEL_40:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_10004E894(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int v25 = a1;
  uint64_t v26 = *v3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v22 = v7;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v24 = a3;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v23 = a2;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v15 = _typeName(_:qualified:)();
    uint64_t v27 = sub_100018DA0(v15, v16, &v28);
    a2 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%s] [TCC] Fetching notification authorization status", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v24;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v22);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  sub_1000190DC(v4 + 2, v4[5]);
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(unsigned char *)(v18 + 24) = v25 & 1;
  *(void *)(v18 + 32) = a2;
  *(void *)(v18 + 4sub_10004C8C4(0, 0) = a3;
  *(void *)(v18 + 48) = v26;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_100051FD8;
  *(void *)(v19 + 24) = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  dispatch thunk of HealthAppNotificationManager.getNotificationSettings(completion:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10004EBAC(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, void, uint64_t), uint64_t a5)
{
  uint64_t v24 = a5;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v25 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v23 = a2;
    uint64_t v15 = v14;
    uint64_t v22 = swift_slowAlloc();
    v27[0] = v22;
    *(_DWORD *)uint64_t v15 = 136315395;
    uint64_t v20 = v15 + 4;
    uint64_t v16 = _typeName(_:qualified:)();
    uint64_t v26 = sub_100018DA0(v16, v17, v27);
    uint64_t v21 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2049;
    uint64_t v26 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%s] [TCC] Received authorization status: %{private}ld", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v23;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v21);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  }
  if (a1)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    sub_10004FD7C(a1 == 1, a3 & 1, a4, v24);
  }
  else
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (!result) {
      return result;
    }
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a4;
    *(void *)(v19 + 24) = v24;
    *(void *)(v19 + 32) = a2;
    *(unsigned char *)(v19 + 4sub_10004C8C4(0, 0) = a3 & 1;
    swift_retain();
    swift_retain();
    sub_10004EF78(a3 & 1, (uint64_t)sub_100052030, v19);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_10004EEBC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6, uint64_t a7, char a8)
{
  if (a4 < 2u || (a2 | a3) != 0) {
    return a5(a2, a3, a4);
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10004FD7C((a1 & 1) == 0, a8 & 1, a5, a6);
    return swift_release();
  }
  return result;
}

uint64_t sub_10004EF78(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  uint64_t v26 = a2;
  uint64_t v27 = v7;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v23 = v8;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v25 = a3;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v29 = swift_slowAlloc();
    int v24 = a1;
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v16 = _typeName(_:qualified:)();
    uint64_t v28 = sub_100018DA0(v16, v17, &v29);
    LOBYTE(a1) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s [TCC] Showing TCC notification prompt", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v25;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v23);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  sub_1000519FC();
  sub_1000190DC(v4 + 2, v4[5]);
  uint64_t v18 = swift_allocObject();
  swift_weakInit();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v26;
  *(void *)(v19 + 24) = a3;
  *(unsigned char *)(v19 + 32) = a1 & 1;
  uint64_t v20 = v27;
  *(void *)(v19 + 4sub_10004C8C4(0, 0) = v18;
  *(void *)(v19 + 48) = v20;
  swift_retain();
  swift_retain();
  dispatch thunk of HealthAppNotificationManager.requestAuthorization(addCriticalAlerts:completionHandler:)();
  swift_release();
  return swift_release();
}

uint64_t sub_10004F258(int a1, uint64_t a2, void (*a3)(void, uint64_t, uint64_t, uint64_t), uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v85 = a7;
  uint64_t v86 = a6;
  int v89 = a5;
  int v90 = a1;
  uint64_t v91 = a4;
  uint64_t v92 = a3;
  uint64_t v8 = type metadata accessor for Locale();
  __chkstk_darwin(v8 - 8);
  uint64_t v87 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v10 - 8);
  uint64_t v88 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NotificationAuthorizationAnalyticsEvent.SelectedAction();
  uint64_t v84 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for NotificationAuthorizationAnalyticsEvent.Context();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for NotificationAuthorizationAnalyticsEvent();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v26 = __chkstk_darwin(v25);
  int v31 = (char *)&v72 - v30;
  if (a2)
  {
    if ((v89 & 1) == 0)
    {
      uint64_t v33 = 0;
      uint64_t v35 = 0;
      LOBYTE(v36) = 2;
      v92(v90 & 1, 0, 0, 2);
      return sub_100051F3C(v33, v35, v36);
    }
    String.LocalizationValue.init(stringLiteral:)();
    if (qword_100103FF8 == -1) {
      goto LABEL_4;
    }
    goto LABEL_16;
  }
  uint64_t v72 = v29;
  uint64_t v73 = v28;
  uint64_t v74 = v16;
  uint64_t v75 = v15;
  uint64_t v76 = v18;
  uint64_t v77 = v22;
  uint64_t v78 = v20;
  uint64_t v79 = v19;
  uint64_t v80 = v14;
  uint64_t v81 = v12;
  uint64_t v82 = v26;
  uint64_t v83 = v27;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    static Logger.general.getter();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      v94[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136315138;
      uint64_t v52 = _typeName(_:qualified:)();
      uint64_t v93 = sub_100018DA0(v52, v53, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "%s Somehow deallocated while waiting for authorization callback", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v83 + 8))(v31, v82);
    if ((v89 & 1) == 0)
    {
      uint64_t v33 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 2;
      goto LABEL_5;
    }
    String.LocalizationValue.init(stringLiteral:)();
    if (qword_100103FF8 == -1)
    {
LABEL_4:
      id v32 = (id)qword_100108B98;
      static Locale.current.getter();
      uint64_t v33 = String.init(localized:table:bundle:locale:comment:)();
      uint64_t v35 = v34;
      uint64_t v36 = 1;
LABEL_5:
      v92(v90 & 1, v33, v35, v36);
      return sub_100051F3C(v33, v35, v36);
    }
LABEL_16:
    swift_once();
    goto LABEL_4;
  }
  sub_1000190DC((void *)(Strong + 16), *(void *)(Strong + 40));
  uint64_t v38 = (void *)dispatch thunk of HealthAppNotificationManager.getNotificationSettings()();
  id v39 = [v38 authorizationStatus];

  if (v39)
  {
    uint64_t v40 = v73;
    static Logger.general.getter();
    os_log_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc();
      v94[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315394;
      uint64_t v44 = _typeName(_:qualified:)();
      uint64_t v93 = sub_100018DA0(v44, v45, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 1024;
      char v46 = v90;
      LODWORD(v93) = v90 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s [TCC] Did select notification authorization: %{BOOL}d", (uint8_t *)v43, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v40, v82);
      int v47 = v92;
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v40, v82);
      int v47 = v92;
      char v46 = v90;
    }
    uint64_t v61 = v80;
    uint64_t v60 = v81;
    uint64_t v62 = v84;
    uint64_t v63 = v79;
    os_log_t v64 = (void *)static NSNotificationName.healthAppNotificationSettingsDidChange.getter();
    id v65 = [self defaultCenter];
    [v65 postNotificationName:v64 object:0];

    id v66 = objc_allocWithZone((Class)type metadata accessor for PostNotificationOperation());
    id v67 = v64;
    char v68 = (void *)PostNotificationOperation.init(name:userInfo:)();
    sub_100051F58();
    int64_t v69 = (void *)static NSOperationQueue.userInitiated.getter();
    [v69 addOperation:v68];

    (*(void (**)(char *, void, uint64_t))(v74 + 104))(v76, enum case for NotificationAuthorizationAnalyticsEvent.Context.healthAppOnboarding(_:), v75);
    uint64_t v70 = (unsigned int *)&enum case for NotificationAuthorizationAnalyticsEvent.SelectedAction.allowNotifications(_:);
    if ((v46 & 1) == 0) {
      uint64_t v70 = (unsigned int *)&enum case for NotificationAuthorizationAnalyticsEvent.SelectedAction.doNotAllowNotifications(_:);
    }
    (*(void (**)(char *, void, uint64_t))(v62 + 104))(v61, *v70, v60);
    uint64_t v71 = v77;
    NotificationAuthorizationAnalyticsEvent.init(context:featureDomain:featureName:selectedAction:)();
    sub_1000524A8((unint64_t *)&qword_100105C50, (void (*)(uint64_t))&type metadata accessor for NotificationAuthorizationAnalyticsEvent);
    AnalyticsSubmitting.submit()();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v71, v63);
    v47(v46 & 1, 0, 0, 2);
  }
  else
  {
    uint64_t v54 = v72;
    static Logger.general.getter();
    uint64_t v55 = Logger.logObject.getter();
    uint64_t v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, (os_log_type_t)v56))
    {
      unint64_t v57 = (uint8_t *)swift_slowAlloc();
      v94[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v57 = 136315138;
      uint64_t v58 = _typeName(_:qualified:)();
      uint64_t v93 = sub_100018DA0(v58, v59, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v56, "%s [TCC] Did not select valid authorization. Remaining in buddy flow", v57, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v54, v82);
    v92(v90 & 1, 2, 0, 2);
  }
  return swift_release();
}

uint64_t sub_10004FCD4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v5 = AdvertisableFeatureModel.shouldEnable.getter();
  if (v5)
  {
    AdvertisableFeatureModel.shouldEnable.setter();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  return v5 & 1;
}

uint64_t sub_10004FD7C(char a1, char a2, uint64_t (*a3)(uint64_t, void, uint64_t), uint64_t a4)
{
  uint64_t v7 = *v4;
  if (a2 & 1) != 0 && (a1)
  {
    sub_10004D48C();
    uint64_t ObjectType = swift_getObjectType();
    __chkstk_darwin(ObjectType);
    dispatch thunk of AdvertisableFeatureManaging.modifyAdvertisedModels(modifierBlock:)();
    swift_unknownObjectRelease();
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v9 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v9) {
      return a3(1, 0, 2);
    }
  }
  sub_10004D48C();
  swift_getObjectType();
  dispatch thunk of AdvertisableFeatureManaging.freezeAdvertisementState()();
  swift_unknownObjectRelease();
  sub_10004D48C();
  swift_getObjectType();
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v11;
  uint64_t v12[3] = a3;
  v12[4] = a4;
  v12[5] = v7;
  swift_retain();
  swift_retain();
  dispatch thunk of AdvertisableFeatureManaging.commitEnablement(completion:)();
  swift_unknownObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_10004FFA0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v59 = a2;
  uint64_t v60 = a5;
  uint64_t v63 = a3;
  uint64_t v7 = type metadata accessor for Locale();
  __chkstk_darwin(v7 - 8);
  uint64_t v62 = &v53[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v9 - 8);
  uint64_t v61 = &v53[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for AdvertisableFeatureError();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v58 = &v53[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = &v53[-v16];
  __chkstk_darwin(v15);
  uint64_t v19 = &v53[-v18];
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v64 = *(void *)(v20 - 8);
  uint64_t v65 = v20;
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = &v53[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  uint64_t v25 = &v53[-v24];
  sub_100051C78();
  __chkstk_darwin(v26);
  uint64_t v28 = &v53[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000521A8(a1, (uint64_t)v28, (uint64_t (*)(void))sub_100051C78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v59 = a4;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 32))(v19, v28, v11);
    static Logger.advertisableFeatures.getter();
    uint64_t v29 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 16);
    unint64_t v57 = v19;
    v29(v17, v19, v11);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    int v32 = v31;
    uint64_t v33 = v12;
    uint64_t v34 = v11;
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      v66[0] = v56;
      *(_DWORD *)uint64_t v35 = 136315394;
      os_log_t v55 = v30;
      uint64_t v36 = _typeName(_:qualified:)();
      int v54 = v32;
      uint64_t v67 = sub_100018DA0(v36, v37, v66);
      uint64_t v60 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2080;
      v29(v58, v17, v11);
      uint64_t v38 = String.init<A>(describing:)();
      uint64_t v67 = sub_100018DA0(v38, v39, v66);
      uint64_t v40 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_t v41 = *(void (**)(unsigned char *, uint64_t))(v40 + 8);
      uint64_t v42 = v34;
      v41(v17, v34);
      os_log_t v43 = v55;
      _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v54, "[%s] Error when committing features, presenting alert then continuing: %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      os_log_t v41 = *(void (**)(unsigned char *, uint64_t))(v12 + 8);
      uint64_t v42 = v34;
      v41(v17, v34);
    }
    (*(void (**)(unsigned char *, uint64_t))(v64 + 8))(v23, v65);
    String.LocalizationValue.init(stringLiteral:)();
    os_log_type_t v50 = v57;
    if (qword_100103FF8 != -1) {
      swift_once();
    }
    id v51 = (id)qword_100108B98;
    static Locale.current.getter();
    uint64_t v52 = String.init(localized:table:bundle:locale:comment:)();
    v63(v52);
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(unsigned char *, uint64_t))v41)(v50, v42);
  }
  else
  {
    static Logger.advertisableFeatures.getter();
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      char v46 = (uint8_t *)swift_slowAlloc();
      v66[0] = swift_slowAlloc();
      *(_DWORD *)char v46 = 136315138;
      uint64_t v47 = _typeName(_:qualified:)();
      uint64_t v67 = sub_100018DA0(v47, v48, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "[%s] Successfully committed enablement of features", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v64 + 8))(v25, v65);
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      sub_1000506AC((uint64_t)v63, a4);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1000506AC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_10004D48C();
  swift_getObjectType();
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v6[2] = a1;
  v6[3] = a2;
  void v6[4] = v5;
  swift_retain();
  dispatch thunk of AdvertisableFeatureManaging.determinePostCommitWorkItems(completion:)();
  swift_unknownObjectRelease();

  return swift_release();
}

uint64_t sub_10005078C(uint64_t a1, void (*a2)(void, void, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a4;
  uint64_t v54 = a3;
  uint64_t v6 = type metadata accessor for AdvertisableFeatureError();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  os_log_type_t v50 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v45 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v45 - v13;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v52 = *(void *)(v15 - 8);
  uint64_t v53 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v45 - v19;
  sub_100051D5C();
  __chkstk_darwin(v21);
  uint64_t v23 = (uint64_t *)((char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000521A8(a1, (uint64_t)v23, (uint64_t (*)(void))sub_100051D5C);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v49 = a2;
    (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v14, v23, v6);
    static Logger.advertisableFeatures.getter();
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v24(v12, v14, v6);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    int v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_t v47 = v25;
      unint64_t v48 = v14;
      uint64_t v29 = v28;
      uint64_t v56 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315394;
      uint64_t v46 = v29 + 4;
      uint64_t v30 = _typeName(_:qualified:)();
      uint64_t v55 = sub_100018DA0(v30, v31, &v56);
      LODWORD(v51) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      uint64_t v46 = v29 + 14;
      v24(v50, v12, v6);
      uint64_t v32 = String.init<A>(describing:)();
      uint64_t v55 = sub_100018DA0(v32, v33, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v34 = *(void (**)(char *, uint64_t))(v7 + 8);
      v34(v12, v6);
      os_log_t v35 = v47;
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v51, "[%s] Error when determining post work items, continuing as commit succeeded: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v14 = v48;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v34 = *(void (**)(char *, uint64_t))(v7 + 8);
      v34(v12, v6);
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v18, v53);
    v49(0, 0, 2);
    return ((uint64_t (*)(char *, uint64_t))v34)(v14, v6);
  }
  else
  {
    uint64_t v36 = *v23;
    static Logger.advertisableFeatures.getter();
    swift_bridgeObjectRetain_n();
    unint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136315394;
      uint64_t v40 = _typeName(_:qualified:)();
      uint64_t v55 = sub_100018DA0(v40, v41, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 12) = 2048;
      uint64_t v42 = a2;
      uint64_t v43 = *(void *)(v36 + 16);
      swift_bridgeObjectRelease();
      uint64_t v55 = v43;
      a2 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "[%s] Retrieved %ld post commit work items", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v20, v53);
    if (*(void *)(v36 + 16))
    {
      a2(v36, 0, 0);
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(void, void, uint64_t))a2)(0, 0, 2);
    }
  }
}

uint64_t sub_100050DB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v1[12] & 1) == 0)
  {
    *((unsigned char *)v1 + 96) = 1;
    static Logger.advertisableFeatures.getter();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v15 = v2;
      uint64_t v11 = (uint8_t *)v10;
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v14 = v11 + 4;
      uint64_t v12 = _typeName(_:qualified:)();
      uint64_t v16 = sub_100018DA0(v12, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%s] Performing prerequisite work", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v2 = v15;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    sub_10004D48C();
    swift_getObjectType();
    *(void *)(swift_allocObject() + 16) = v2;
    dispatch thunk of AdvertisableFeatureManaging.performPrerequisiteWork(completion:)();
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_10005103C(uint64_t a1, NSObject *a2)
{
  os_log_t v45 = a2;
  uint64_t v3 = type metadata accessor for AdvertisableFeatureError();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v44 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  os_log_type_t v9 = (char *)&v39 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v39 - v10;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v46 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v39 - v16;
  sub_100051C78();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000521A8(a1, (uint64_t)v20, (uint64_t (*)(void))sub_100051C78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v43 = v12;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v11, v20, v3);
    static Logger.advertisableFeatures.getter();
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v21(v9, v11, v3);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    int v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v25 = swift_slowAlloc();
      int v41 = v24;
      uint64_t v26 = v25;
      uint64_t v42 = swift_slowAlloc();
      uint64_t v48 = v42;
      *(_DWORD *)uint64_t v26 = 136315394;
      uint64_t v40 = v26 + 4;
      uint64_t v27 = _typeName(_:qualified:)();
      os_log_t v45 = v22;
      uint64_t v47 = sub_100018DA0(v27, v28, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      uint64_t v40 = v26 + 14;
      v21(v44, v9, v3);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v47 = sub_100018DA0(v29, v30, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v31 = *(void (**)(char *, uint64_t))(v4 + 8);
      v31(v9, v3);
      os_log_t v32 = v45;
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v41, "[%s] Prerequisite work failed to complete with error: %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v31 = *(void (**)(char *, uint64_t))(v4 + 8);
      v31(v9, v3);
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v15, v43);
    return ((uint64_t (*)(char *, uint64_t))v31)(v11, v3);
  }
  else
  {
    static Logger.advertisableFeatures.getter();
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      os_log_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(_DWORD *)os_log_t v35 = 136315138;
      uint64_t v36 = _typeName(_:qualified:)();
      uint64_t v47 = sub_100018DA0(v36, v37, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "[%s] Prerequisite work completed", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v17, v12);
  }
}

uint64_t sub_1000515BC()
{
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 16);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 56);
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HealthNotificationsWelcomeViewModel()
{
  return self;
}

uint64_t sub_100051628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AdvertisableFeaturePostCommitWorkItem();
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  os_log_type_t v9 = (char *)&v28 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
    {
      char v23 = 1;
    }
    else
    {
      uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      uint64_t v12 = v6 + 16;
      uint64_t v31 = v7;
      os_log_t v32 = v13;
      uint64_t v14 = (v11 + 32) & ~v11;
      uint64_t v15 = *(void *)(v12 + 56);
      uint64_t v33 = v12;
      uint64_t v29 = v15;
      unint64_t v30 = (void (**)(uint64_t, uint64_t))(v12 - 8);
      uint64_t v16 = v10 - 1;
      uint64_t v17 = v7;
      do
      {
        uint64_t v18 = a1;
        uint64_t v19 = v9;
        uint64_t v20 = v9;
        uint64_t v21 = v32;
        v32((uint64_t)v19, a1 + v14, v4);
        uint64_t v22 = a2;
        v21(v17, a2 + v14, v4);
        os_log_type_t v9 = v20;
        sub_1000524A8(&qword_100105C80, (void (*)(uint64_t))&type metadata accessor for AdvertisableFeaturePostCommitWorkItem);
        char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
        int v24 = *v30;
        (*v30)(v17, v4);
        v24((uint64_t)v20, v4);
        BOOL v26 = v16-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v14 += v29;
        a2 = v22;
        a1 = v18;
      }
      while (v26);
    }
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

int64_t sub_10005184C(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100051930(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a3)
  {
    if (!a6) {
      return sub_100051628(a1, a4);
    }
    return 0;
  }
  if (a3 != 1)
  {
    if (a1 | a2)
    {
      if (a1 ^ 1 | a2)
      {
        if (a6 == 2 && a4 == 2 && !a5) {
          return 1;
        }
      }
      else if (a6 == 2 && a4 == 1 && !a5)
      {
        return 1;
      }
    }
    else if (a6 == 2 && !(a5 | a4))
    {
      return 1;
    }
    return 0;
  }
  if (a6 != 1) {
    return 0;
  }
  if (a1 == a4 && a2 == a5) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

unint64_t sub_1000519FC()
{
  type metadata accessor for FoundationPluginBundleProvider();
  static FoundationPluginBundleProvider.sharedInstance.getter();
  unint64_t v0 = dispatch thunk of PluginBundleProvider.notificationDelegateProvidingPluginBundles.getter();
  swift_release();
  if (v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
    if (v1) {
      goto LABEL_3;
    }
LABEL_16:
    unint64_t v4 = (char *)&_swiftEmptyArrayStorage;
    goto LABEL_17;
  }
  uint64_t v1 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v1) {
    goto LABEL_16;
  }
LABEL_3:
  unint64_t result = sub_100051C0C();
  if (v1 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v3 = 0;
  unint64_t v4 = (char *)&_swiftEmptyArrayStorage;
  do
  {
    if ((v0 & 0xC000000000000001) != 0) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v5 = *(id *)(v0 + 8 * v3 + 32);
    }
    uint64_t v6 = v5;
    NSBundle.getPluginAppDelegateObject<A>(as:)();

    if ((void)v16)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v4 = sub_1000366EC(0, *((void *)v4 + 2) + 1, 1, v4);
      }
      unint64_t v8 = *((void *)v4 + 2);
      unint64_t v7 = *((void *)v4 + 3);
      long long v9 = v16;
      if (v8 >= v7 >> 1)
      {
        unint64_t v10 = sub_1000366EC((char *)(v7 > 1), v8 + 1, 1, v4);
        long long v9 = v16;
        unint64_t v4 = v10;
      }
      *((void *)v4 + 2) = v8 + 1;
      *(_OWORD *)&v4[16 * v8 + 32] = v9;
    }
    ++v3;
  }
  while (v1 != v3);
LABEL_17:
  swift_bridgeObjectRelease_n();
  uint64_t v11 = *((void *)v4 + 2);
  if (v11)
  {
    uint64_t v12 = v11 - 1;
    uint64_t v13 = v4 + 40;
    do
    {
      uint64_t v14 = v12;
      swift_getObjectType();
      swift_unknownObjectRetain();
      char v15 = dispatch thunk of PluginNotificationCenterDelegateProviding.providesCriticalAlerts()();
      swift_unknownObjectRelease();
      if (v15) {
        break;
      }
      uint64_t v12 = v14 - 1;
      v13 += 16;
    }
    while (v14);
  }
  else
  {
    char v15 = 0;
  }
  swift_bridgeObjectRelease();
  return v15 & 1;
}

unint64_t sub_100051C0C()
{
  unint64_t result = qword_100105208;
  if (!qword_100105208)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_100105208);
  }
  return result;
}

uint64_t sub_100051C60()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100051C70(uint64_t a1)
{
  return sub_10005103C(a1, *(NSObject **)(v1 + 16));
}

void sub_100051C78()
{
  if (!qword_100105C30)
  {
    type metadata accessor for AdvertisableFeatureError();
    sub_1000524A8(&qword_100105C38, (void (*)(uint64_t))&type metadata accessor for AdvertisableFeatureError);
    unint64_t v0 = type metadata accessor for Result();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105C30);
    }
  }
}

uint64_t sub_100051D18()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100051D50(uint64_t a1)
{
  return sub_10005078C(a1, *(void (**)(void, void, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void sub_100051D5C()
{
  if (!qword_100105C40)
  {
    sub_100051E08();
    type metadata accessor for AdvertisableFeatureError();
    sub_1000524A8(&qword_100105C38, (void (*)(uint64_t))&type metadata accessor for AdvertisableFeatureError);
    unint64_t v0 = type metadata accessor for Result();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105C40);
    }
  }
}

void sub_100051E08()
{
  if (!qword_100105C48)
  {
    type metadata accessor for AdvertisableFeaturePostCommitWorkItem();
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105C48);
    }
  }
}

uint64_t sub_100051E60()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100051E98()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100051ED8(uint64_t a1)
{
  return sub_10004FFA0(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100051EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004FCD4(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_100051EEC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100051F2C(int a1, uint64_t a2)
{
  return sub_10004F258(a1, a2, *(void (**)(void, uint64_t, uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_100051F3C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100051F58()
{
  unint64_t result = qword_100105858;
  if (!qword_100105858)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100105858);
  }
  return result;
}

uint64_t sub_100051F98()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100051FD8(uint64_t a1)
{
  return sub_10004EBAC(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(uint64_t (**)(uint64_t, void, uint64_t))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100051FEC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100052028()
{
  return sub_100052048(41);
}

uint64_t sub_100052030(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004EEBC(a1, a2, a3, a4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(unsigned char *)(v4 + 40));
}

uint64_t sub_100052040()
{
  return sub_100052048(48);
}

uint64_t sub_100052048(uint64_t a1)
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100052094(char *a1)
{
  return sub_10004D904(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000520A0(void *a1)
{
  return (*(uint64_t (**)(id))(v1 + 16))([a1 authorizationStatus]);
}

uint64_t sub_1000520D4(uint64_t a1)
{
  return sub_10004DD8C(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void sub_1000520E0()
{
  if (!qword_100105C58)
  {
    sub_100052210(255, &qword_100105C60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for Set);
    type metadata accessor for AdvertisableFeatureError();
    sub_1000524A8(&qword_100105C38, (void (*)(uint64_t))&type metadata accessor for AdvertisableFeatureError);
    unint64_t v0 = type metadata accessor for Result();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105C58);
    }
  }
}

uint64_t sub_1000521A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_100052210(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for AdvertisableFeatureModel();
    uint64_t v7 = sub_1000524A8(&qword_100105C68, (void (*)(uint64_t))&type metadata accessor for AdvertisableFeatureModel);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1000522B0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for HealthNotificationsWelcomeViewModel.ProgressionResult(uint64_t a1)
{
  return sub_100051F3C(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s6Health35HealthNotificationsWelcomeViewModelC17ProgressionResultOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1000522B0(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for HealthNotificationsWelcomeViewModel.ProgressionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1000522B0(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100051F3C(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for HealthNotificationsWelcomeViewModel.ProgressionResult(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for HealthNotificationsWelcomeViewModel.ProgressionResult(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100051F3C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for HealthNotificationsWelcomeViewModel.ProgressionResult(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HealthNotificationsWelcomeViewModel.ProgressionResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100052468(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100052480(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HealthNotificationsWelcomeViewModel.ProgressionResult()
{
  return &type metadata for HealthNotificationsWelcomeViewModel.ProgressionResult;
}

uint64_t sub_1000524A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for TitleSpacerDetailCell()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TitleSpacerDetailCell(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TitleSpacerDetailCell(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for TitleSpacerDetailCell(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TitleSpacerDetailCell(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for TitleSpacerDetailCell(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TitleSpacerDetailCell(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TitleSpacerDetailCell()
{
  return &type metadata for TitleSpacerDetailCell;
}

uint64_t sub_1000526F4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100052710@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100038AD4();
  swift_bridgeObjectRetain();
  uint64_t v4 = Text.init<A>(_:)();
  uint64_t v25 = v5;
  uint64_t v26 = v4;
  char v24 = v6;
  uint64_t v27 = v7;
  uint64_t v28 = *(void *)(a1 + 16);
  uint64_t v29 = *(void *)(a1 + 24);
  if (*(unsigned char *)(a1 + 32))
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = Text.init<A>(_:)();
    uint64_t v15 = v14;
    char v17 = v16 & 1;
    static Color.secondary.getter();
    uint64_t v18 = Text.foregroundColor(_:)();
    uint64_t v20 = v19;
    char v22 = v21;
    swift_release();
    sub_10003CDC8(v13, v15, v17);
    swift_bridgeObjectRelease();
    Text.monospaced(_:)();
    sub_10003CDC8(v18, v20, v22 & 1);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = Text.init<A>(_:)();
    uint64_t v10 = v9;
    char v12 = v11 & 1;
    static Color.secondary.getter();
    Text.foregroundColor(_:)();
    swift_release();
    sub_10003CDC8(v8, v10, v12);
  }
  swift_bridgeObjectRelease();
  _ConditionalContent<>.init(storage:)();
  *(void *)a2 = v26;
  *(void *)(a2 + 8) = v25;
  *(unsigned char *)(a2 + 16) = v24 & 1;
  *(void *)(a2 + 24) = v27;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 4sub_10004C8C4(0, 0) = 1;
  *(void *)(a2 + 48) = v28;
  *(void *)(a2 + 56) = v29;
  *(void *)(a2 + 64) = v30;
  *(void *)(a2 + 72) = v31;
  *(unsigned char *)(a2 + 8sub_10004C8C4(0, 0) = v32;
  sub_10003CDAC(v26, v25, v24 & 1);
  swift_bridgeObjectRetain();
  sub_100052A44(v28, v29, v30);
  sub_100052A80(v28, v29, v30);
  sub_10003CDC8(v26, v25, v24 & 1);
  return swift_bridgeObjectRelease();
}

__n128 sub_1000529B8@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v21[0] = *(_OWORD *)v1;
  v21[1] = v3;
  char v22 = *(unsigned char *)(v1 + 32);
  uint64_t v4 = static VerticalAlignment.firstTextBaseline.getter();
  sub_100052710((uint64_t)v21, (uint64_t)&v13);
  char v5 = v14;
  uint64_t v6 = v15;
  uint64_t v7 = v16;
  char v8 = v17;
  char v9 = v20;
  __n128 result = v13;
  long long v11 = v18;
  long long v12 = v19;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(__n128 *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 4sub_10004C8C4(0, 0) = v5;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + 88) = v12;
  *(unsigned char *)(a1 + 104) = v9;
  return result;
}

uint64_t sub_100052A44(uint64_t a1, uint64_t a2, char a3)
{
  sub_10003CDAC(a1, a2, a3 & 1);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100052A80(uint64_t a1, uint64_t a2, char a3)
{
  sub_10003CDC8(a1, a2, a3 & 1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100052ABC()
{
  return sub_100052CBC(&qword_100105C88, (void (*)(uint64_t))sub_100052B04);
}

void sub_100052B04()
{
  if (!qword_100105C90)
  {
    sub_100052B98();
    sub_100052CBC(&qword_100105CB0, (void (*)(uint64_t))sub_100052B98);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105C90);
    }
  }
}

void sub_100052B98()
{
  if (!qword_100105C98)
  {
    sub_100052BF0();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105C98);
    }
  }
}

void sub_100052BF0()
{
  if (!qword_100105CA0)
  {
    sub_100052C60();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100105CA0);
    }
  }
}

void sub_100052C60()
{
  if (!qword_100105CA8)
  {
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105CA8);
    }
  }
}

uint64_t sub_100052CBC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100052D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000557EC(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100052EA8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100052F1C(uint64_t a1, void *a2)
{
  swift_retain();
  sub_10000A59C(a2, (void (*)(uint64_t))sub_1000553F8, a1);

  return swift_release();
}

uint64_t sub_100052F78(uint64_t a1)
{
  unsigned __int8 v1 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;

  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void sub_100052FF4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = a5;
  LODWORD(v39) = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NotificationAuthorizationAnalyticsEvent.SelectedAction();
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NotificationAuthorizationAnalyticsEvent.Context();
  uint64_t v35 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  __n128 v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for NotificationAuthorizationAnalyticsEvent();
  uint64_t v36 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = (id)dispatch thunk of HealthAppNotificationManager.getNotificationSettings()();
  if (objc_msgSend(v17, "authorizationStatus", v32) == (id)2 || objc_msgSend(v17, "authorizationStatus") == (id)1)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_release();
      long long v18 = (void *)static NSNotificationName.healthAppNotificationSettingsDidChange.getter();
      id v19 = [self defaultCenter];
      [v19 postNotificationName:v18 object:0];

      id v20 = objc_allocWithZone((Class)type metadata accessor for PostNotificationOperation());
      id v21 = v18;
      char v22 = (void *)PostNotificationOperation.init(name:userInfo:)();
      sub_100051F58();
      char v23 = (void *)static NSOperationQueue.userInitiated.getter();
      [v23 addOperation:v22];
    }
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_release();
      (*(void (**)(char *, void, uint64_t))(v35 + 104))(v13, enum case for NotificationAuthorizationAnalyticsEvent.Context.healthAppOnboarding(_:), v11);
      char v24 = (unsigned int *)&enum case for NotificationAuthorizationAnalyticsEvent.SelectedAction.allowNotifications(_:);
      if ((v39 & 1) == 0) {
        char v24 = (unsigned int *)&enum case for NotificationAuthorizationAnalyticsEvent.SelectedAction.doNotAllowNotifications(_:);
      }
      (*(void (**)(char *, void, uint64_t))(v37 + 104))(v10, *v24, v38);
      NotificationAuthorizationAnalyticsEvent.init(context:featureDomain:featureName:selectedAction:)();
      sub_100055B1C();
      AnalyticsSubmitting.submit()();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v14);
    }
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_getKeyPath();
      swift_getKeyPath();
      char v40 = 0;
      swift_retain();
LABEL_16:
      static Published.subscript.setter();

      swift_release();
      return;
    }
  }
  else
  {
    static Logger.notifications.getter();
    id v17 = v17;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      v42[0] = v39;
      *(_DWORD *)uint64_t v27 = 136315650;
      uint64_t v28 = _typeName(_:qualified:)();
      id v41 = (id)sub_100018DA0(v28, v29, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      id v41 = (id)sub_100018DA0(0xD00000000000002FLL, 0x80000001000D3460, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 22) = 2080;
      id v41 = [v17 authorizationStatus];
      type metadata accessor for UNAuthorizationStatus(0);
      uint64_t v30 = String.init<A>(describing:)();
      id v41 = (id)sub_100018DA0(v30, v31, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s %s Unexpected notification authorization status: %s", (uint8_t *)v27, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v34);
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_getKeyPath();
      swift_getKeyPath();
      LOBYTE(v41) = 0;
      swift_retain();
      goto LABEL_16;
    }
  }
}

uint64_t sub_1000536A4(uint64_t a1, uint64_t a2, void *a3)
{
  sub_10005561C();
  AnalyticsSubmitting.submit()();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v5 = [objc_allocWithZone((Class)HKHealthStore) init];
    sub_1000537B4(a3, v5);

    return swift_release();
  }
  return result;
}

uint64_t sub_100053760(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_1000537B4(void *a1, void *a2)
{
  long long v3 = v2;
  uint64_t v30 = a1;
  uint64_t v5 = *v2;
  sub_100055670();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  __n128 v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v28 = v8;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v27 = v9;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    unint64_t v29 = a2;
    uint64_t v32 = v17;
    *(_DWORD *)uint64_t v16 = 136446210;
    v26[1] = v16 + 4;
    uint64_t v18 = _typeName(_:qualified:)();
    uint64_t v31 = sub_100018DA0(v18, v19, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v8 = v28;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%{public}s]: Checking IHR intro flow step", v16, 0xCu);
    swift_arrayDestroy();
    a2 = v29;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v27);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 1, 1, v20);
  id v21 = (void *)swift_allocObject();
  _OWORD v21[2] = 0;
  v21[3] = 0;
  v21[4] = a2;
  v21[5] = v3;
  char v22 = v30;
  v21[6] = v30;
  v21[7] = v5;
  id v23 = a2;
  swift_retain();
  id v24 = v22;
  sub_100052D04((uint64_t)v8, (uint64_t)&unk_100105E78, (uint64_t)v21);
  return swift_release();
}

uint64_t sub_100053AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  uint64_t v8 = type metadata accessor for Logger();
  v7[22] = v8;
  v7[23] = *(void *)(v8 - 8);
  v7[24] = swift_task_alloc();
  v7[25] = swift_task_alloc();
  v7[26] = swift_task_alloc();
  return _swift_task_switch(sub_100053BB8, 0, 0);
}

uint64_t sub_100053BB8()
{
  v0[27] = [objc_allocWithZone((Class)HKHealthRecordsStore) initWithHealthStore:v0[18]];
  unsigned __int8 v1 = (void *)swift_task_alloc();
  v0[28] = v1;
  void *v1 = v0;
  v1[1] = sub_100053C70;
  return HKHealthRecordsStore.shouldPromptForImproveHealthRecordsDataSubmission()();
}

uint64_t sub_100053C70(char a1)
{
  *(unsigned char *)(*(void *)v1 + 29sub_10004C8C4(0, 0) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100053D70, 0, 0);
}

uint64_t sub_100053D70()
{
  uint64_t v17 = v0;
  if (*(unsigned char *)(v0 + 290) == 1)
  {
    id v1 = [objc_allocWithZone((Class)HKClinicalAccountStore) initWithHealthStore:*(void *)(v0 + 144)];
    *(void *)(v0 + 232) = v1;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 288;
    *(void *)(v0 + 24) = sub_100054070;
    uint64_t v2 = swift_continuation_init();
    *(void *)(v0 + 8sub_10004C8C4(0, 0) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_100054824;
    *(void *)(v0 + 104) = &unk_1000F6B08;
    *(void *)(v0 + 112) = v2;
    [v1 hasAnyHealthRecordsAccountWithCompletion:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    static Logger.general.getter();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void *)(v0 + 184);
    uint64_t v7 = *(void *)(v0 + 192);
    uint64_t v8 = *(void *)(v0 + 176);
    if (v5)
    {
      uint64_t v15 = *(void *)(v0 + 192);
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446210;
      uint64_t v10 = _typeName(_:qualified:)();
      *(void *)(v0 + 12sub_10004C8C4(0, 0) = sub_100018DA0(v10, v11, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s]: IHR prompting is not needed, continuing to Improve Safety", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15, v8);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    }
    type metadata accessor for MainActor();
    *(void *)(v0 + 28sub_10004C8C4(0, 0) = static MainActor.shared.getter();
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_10005472C, v13, v12);
  }
}

uint64_t sub_100054070()
{
  return _swift_task_switch(sub_100054150, 0, 0);
}

uint64_t sub_100054150()
{
  uint64_t v32 = v0;
  if (*(unsigned char *)(v0 + 288) == 1)
  {
    static Logger.general.getter();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    BOOL v3 = os_log_type_enabled(v1, v2);
    uint64_t v4 = *(void *)(v0 + 208);
    uint64_t v6 = *(void *)(v0 + 176);
    uint64_t v5 = *(void *)(v0 + 184);
    if (v3)
    {
      uint64_t v30 = *(void *)(v0 + 208);
      uint64_t v29 = *(void *)(v0 + 176);
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      uint64_t v8 = _typeName(_:qualified:)();
      *(void *)(v0 + 136) = sub_100018DA0(v8, v9, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%{public}s]: IHR needs prompting, presenting flow", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v30, v29);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    }
    unint64_t v19 = *(void **)(v0 + 160);
    swift_getKeyPath();
    swift_getKeyPath();
    *(unsigned char *)(v0 + 289) = 1;
    swift_retain();
    static Published.subscript.setter();
    *(void *)(v0 + 24sub_10004C8C4(0, 0) = type metadata accessor for ImprovementDataCollectionOptInViewController();
    uint64_t v20 = swift_allocObject();
    *(void *)(v0 + 248) = v20;
    swift_weakInit();
    uint64_t v21 = swift_allocObject();
    *(void *)(v0 + 256) = v21;
    *(void *)(v21 + 16) = v19;
    *(void *)(v21 + 24) = v20;
    type metadata accessor for MainActor();
    id v22 = v19;
    swift_retain();
    *(void *)(v0 + 264) = static MainActor.shared.getter();
    uint64_t v23 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v25 = v24;
    os_log_type_t v26 = sub_100054580;
  }
  else
  {
    static Logger.general.getter();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void *)(v0 + 200);
    uint64_t v15 = *(void *)(v0 + 176);
    uint64_t v14 = *(void *)(v0 + 184);
    if (v12)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446210;
      uint64_t v17 = _typeName(_:qualified:)();
      *(void *)(v0 + 128) = sub_100018DA0(v17, v18, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%{public}s]: User has no accounts, not displaying IHR", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    }
    type metadata accessor for MainActor();
    *(void *)(v0 + 272) = static MainActor.shared.getter();
    uint64_t v23 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v25 = v27;
    os_log_type_t v26 = sub_1000546B8;
  }
  return _swift_task_switch(v26, v23, v25);
}

uint64_t sub_100054580()
{
  swift_release();
  static ImprovementDataCollectionOptInViewController.present(in:completion:)();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_100054628, 0, 0);
}

uint64_t sub_100054628()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000546B8()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_release();
  sub_100054AF8(v1);
  return _swift_task_switch(sub_100055B88, 0, 0);
}

uint64_t sub_10005472C()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_release();
  sub_100054AF8(v1);
  return _swift_task_switch(sub_1000547A0, 0, 0);
}

uint64_t sub_1000547A0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100054824(uint64_t a1, char a2)
{
  **(unsigned char **)(*(void *)(*(void *)(a1 + 32) + 64) + 4sub_10004C8C4(0, 0) = a2;
  return _swift_continuation_resume();
}

uint64_t sub_100054848(char a1, void *a2, uint64_t a3)
{
  sub_100055670();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a1) {
    char v9 = 3;
  }
  else {
    char v9 = 4;
  }
  v15[14] = 5;
  v15[15] = v9;
  sub_10005561C();
  AnalyticsSubmitting.submit()();
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  type metadata accessor for MainActor();
  id v11 = a2;
  swift_retain();
  uint64_t v12 = static MainActor.shared.getter();
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = v12;
  void v13[3] = &protocol witness table for MainActor;
  v13[4] = v11;
  v13[5] = a3;
  sub_100052D04((uint64_t)v8, (uint64_t)&unk_100105E98, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_1000549A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100054A38, v7, v6);
}

uint64_t sub_100054A38()
{
  uint64_t v1 = *(void **)(v0 + 40);
  swift_release();
  [v1 dismissViewControllerAnimated:1 completion:0];
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_100054AF8(*(void *)(v0 + 40));
    swift_release();
  }
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_100054AF8(uint64_t a1)
{
  os_log_type_t v2 = v1;
  uint64_t v53 = *v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  id v11 = (char *)&v49 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v49 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v49 - v15;
  uint64_t v17 = self;
  if (([v17 isKappaDetectionSupportedOnPhone] & 1) == 0
    && ![v17 isKappaDetectionSupportedOnActiveWatch])
  {
    static Logger.general.getter();
    id v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc();
      os_log_type_t v50 = (char *)v4;
      uint64_t v44 = (uint8_t *)v43;
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136446210;
      uint64_t v45 = _typeName(_:qualified:)();
      uint64_t v55 = sub_100018DA0(v45, v46, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "[%{public}s]: Not showing the Improve Safety view controller (it's not available), continuing to notification authorization", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(char *, char *))v5[1])(v8, v50);
    }
    else
    {

      ((void (*)(char *, uint64_t))v5[1])(v8, v4);
    }
LABEL_17:
    sub_10000D4B8();
    return;
  }
  static Logger.general.getter();
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v51 = a1;
  if (v20)
  {
    uint64_t v52 = v5;
    uint64_t v21 = swift_slowAlloc();
    os_log_type_t v50 = v11;
    id v22 = (uint8_t *)v21;
    aBlock[0] = swift_slowAlloc();
    uint64_t v49 = v14;
    *(_DWORD *)id v22 = 136446210;
    uint64_t v23 = _typeName(_:qualified:)();
    uint64_t v55 = sub_100018DA0(v23, v24, aBlock);
    uint64_t v14 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v5 = v52;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%{public}s]: Checking whether to show Improve Safety view controller", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v11 = v50;
    swift_slowDealloc();
  }

  uint64_t v25 = (void (*)(char *, uint64_t))v5[1];
  v25(v16, v4);
  os_log_type_t v26 = self;
  if (![v26 needsRequestedPermission])
  {
    static Logger.general.getter();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      uint64_t v52 = v5;
      *(_DWORD *)uint64_t v37 = 136446210;
      uint64_t v38 = _typeName(_:qualified:)();
      os_log_type_t v50 = v11;
      uint64_t v55 = sub_100018DA0(v38, v39, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "[%{public}s]: Improve Safety prompting is not needed, continuing to notification authorization", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      char v40 = v50;
    }
    else
    {

      char v40 = v11;
    }
    v25(v40, v4);
    goto LABEL_17;
  }
  uint64_t v52 = v2;
  static Logger.general.getter();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    os_log_type_t v50 = (char *)v4;
    uint64_t v30 = (uint8_t *)v29;
    aBlock[0] = swift_slowAlloc();
    uint64_t v49 = v14;
    *(_DWORD *)uint64_t v30 = 136446210;
    uint64_t v31 = _typeName(_:qualified:)();
    uint64_t v55 = sub_100018DA0(v31, v32, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%{public}s]: Showing Improve Safety view controller", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v33 = v49;
    uint64_t v34 = (uint64_t)v50;
  }
  else
  {

    uint64_t v33 = v14;
    uint64_t v34 = v4;
  }
  v25(v33, v34);
  swift_getKeyPath();
  swift_getKeyPath();
  LOBYTE(aBlock[0]) = 1;
  swift_retain();
  static Published.subscript.setter();
  uint64_t v47 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = (uint64_t)sub_100055614;
  aBlock[5] = v47;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100053760;
  aBlock[3] = (uint64_t)&unk_1000F6A90;
  uint64_t v48 = _Block_copy(aBlock);
  swift_release();
  [v26 presentInViewController:v51 completion:v48];
  _Block_release(v48);
}

uint64_t sub_1000552A0()
{
  sub_10005561C();
  AnalyticsSubmitting.submit()();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10000D4B8();
    return swift_release();
  }
  return result;
}

uint64_t sub_100055328()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Health16IntroFlowManager__isPresentingContent;
  sub_10001F030();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000553F0()
{
  return type metadata accessor for IntroFlowManager();
}

uint64_t sub_1000553F8()
{
  return sub_100052F78(v0);
}

uint64_t sub_100055408(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1000554E4;
  return v6(a1);
}

uint64_t sub_1000554E4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000555DC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100055614()
{
  return sub_1000552A0();
}

unint64_t sub_10005561C()
{
  unint64_t result = qword_100107340;
  if (!qword_100107340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107340);
  }
  return result;
}

void sub_100055670()
{
  if (!qword_100104878)
  {
    type metadata accessor for TaskPriority();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104878);
    }
  }
}

uint64_t sub_1000556C8()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100055718(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100028DB8;
  return sub_100053AD8(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000557EC(uint64_t a1)
{
  sub_100055670();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100055848()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100055880(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100028DB8;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100105E80 + dword_100105E80);
  return v6(a1, v4);
}

uint64_t sub_100055938()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100055978(char a1)
{
  return sub_100054848(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100055980()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000559C8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100055B84;
  return sub_1000549A0(a1, v4, v5, v7, v6);
}

uint64_t sub_100055A88()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100055AC8(uint64_t a1)
{
  return sub_1000536A4(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100055AD0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100055B10(int a1, uint64_t a2)
{
  sub_100052FF4(a1, a2, v2[2], v2[3], v2[4]);
}

unint64_t sub_100055B1C()
{
  unint64_t result = qword_100105C50;
  if (!qword_100105C50)
  {
    type metadata accessor for NotificationAuthorizationAnalyticsEvent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105C50);
  }
  return result;
}

uint64_t type metadata accessor for HKKeyValueDataSource()
{
  uint64_t result = qword_100105EA0;
  if (!qword_100105EA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100055BD8()
{
  return swift_initClassMetadata2();
}

id sub_100055C18(char a1)
{
  id v2 = [objc_allocWithZone((Class)HKHealthStore) init];
  id v3 = [self *off_1000F6EC8[a1] v2];

  return v3;
}

uint64_t sub_100055C90(char a1)
{
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_100055D2C(unsigned __int8 a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C154(0, &qword_100104D78, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v43 - v7;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 - 2 < 3)
  {
    uint64_t v43 = v5;
    id v13 = sub_100055C18(a1);
    sub_100055C90(a1);
    if (!v14)
    {
      __break(1u);
      JUMPOUT(0x100056370);
    }
    HKKeyValueDomain.date(for:)();

    swift_bridgeObjectRelease();
    uint64_t v24 = v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
      id v37 = [objc_allocWithZone((Class)NSDateFormatter) init];
      NSString v38 = String._bridgeToObjectiveC()();
      [v37 setDateFormat:v38];

      Class isa = Date._bridgeToObjectiveC()().super.isa;
      id v40 = [v37 stringFromDate:isa];

      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v9);
      return v15;
    }
    sub_1000209C0((uint64_t)v8);
    return 0;
  }
  if (a1 != 5)
  {
    uint64_t v15 = 0;
    if (a1 != 6) {
      return v15;
    }
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;
    id v19 = sub_100055C18(6);
    v20._uint64_t countAndFlagsBits = v16;
    v20._object = v18;
    Swift::Int_optional v46 = HKKeyValueDomain.integer(for:)(v20);
    if (!v21)
    {
      Swift::Int value = v46.value;
      Swift::Bool is_nil = v46.is_nil;

      swift_bridgeObjectRelease();
      if (!is_nil)
      {
        uint64_t v15 = 0xD000000000000012;
        switch(value)
        {
          case 0:
            goto LABEL_20;
          case 1:
            goto LABEL_22;
          case 2:
            goto LABEL_23;
          case 3:
            return v15;
          default:
            goto LABEL_21;
        }
        return v15;
      }
      return 0;
    }
LABEL_12:
    swift_bridgeObjectRelease();

    static Logger.view.getter();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v43 = (char *)v2;
      *(_DWORD *)unint64_t v32 = 136315138;
      uint64_t v44 = &type metadata for HKKeyValueDataSource.Identifier;
      uint64_t v45 = v33;
      sub_10005897C();
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v44 = (ValueMetadata *)sub_100018DA0(v34, v35, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%s] Could not get kvdomain value", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();

      (*(void (**)(char *, char *))(v3 + 8))(v5, v43);
    }
    else
    {
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    return 0;
  }
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;
  id v19 = sub_100055C18(5);
  v28._uint64_t countAndFlagsBits = v25;
  v28._object = v27;
  Swift::Int_optional v47 = HKKeyValueDomain.integer(for:)(v28);
  if (v29) {
    goto LABEL_12;
  }
  Swift::Int v41 = v47.value;
  Swift::Bool v42 = v47.is_nil;

  swift_bridgeObjectRelease();
  if (v42) {
    return 0;
  }
  uint64_t v15 = 0xD000000000000012;
  switch(v41)
  {
    case 0:
LABEL_20:
      uint64_t v15 = 0x656C706D6F636E49;
      break;
    case 1:
LABEL_22:
      uint64_t v15 = 0x6574656C706D6F43;
      break;
    case 2:
LABEL_23:
      uint64_t v15 = 0x657373696D736944;
      break;
    case 3:
      return v15;
    default:
LABEL_21:
      uint64_t v15 = 6369134;
      break;
  }
  return v15;
}

void sub_100056390(void *a1)
{
  switch((char)a1)
  {
    case 1:
      uint64_t v6 = self;
      id v7 = [objc_allocWithZone((Class)HKHealthStore) init];
      id v3 = [v6 healthArticlesDefaultsDomainWithHealthStore:v7];

      uint64_t v8 = swift_allocObject();
      *(unsigned char *)(v8 + 16) = 1;
      *(void *)(v8 + 24) = v3;
      uint64_t v17 = sub_100058734;
      uint64_t v18 = v8;
      id v13 = _NSConcreteStackBlock;
      uint64_t v14 = 1107296256;
      uint64_t v5 = &unk_1000F6CD0;
      goto LABEL_7;
    case 2:
    case 3:
    case 4:
      sub_100056778(a1);
      return;
    case 5:
      uint64_t v11 = 0;
      char v12 = 5;
      goto LABEL_10;
    case 6:
      uint64_t v11 = 1;
      char v12 = 6;
LABEL_10:
      sub_100056624(v11, v12);
      break;
    default:
      uint64_t v1 = self;
      id v2 = [objc_allocWithZone((Class)HKHealthStore) init];
      id v3 = [v1 healthArticlesDefaultsDomainWithHealthStore:v2];

      uint64_t v4 = swift_allocObject();
      *(unsigned char *)(v4 + 16) = 0;
      *(void *)(v4 + 24) = v3;
      uint64_t v17 = sub_100058794;
      uint64_t v18 = v4;
      id v13 = _NSConcreteStackBlock;
      uint64_t v14 = 1107296256;
      uint64_t v5 = &unk_1000F6D20;
LABEL_7:
      uint64_t v15 = sub_100056A08;
      uint64_t v16 = v5;
      uint64_t v9 = _Block_copy(&v13);
      id v10 = v3;
      swift_release();
      [v10 allValuesWithCompletion:v9, v13, v14];
      _Block_release(v9);

      break;
  }
}

void sub_100056624(uint64_t a1, char a2)
{
  if ((a2 - 2) <= 4u)
  {
    v11[12] = v2;
    v11[13] = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = sub_100055C18(a2);
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a1;
    v11[4] = sub_100058974;
    void v11[5] = v9;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_10000408C;
    v11[3] = &unk_1000F6E10;
    id v10 = _Block_copy(v11);
    swift_release();
    [v6 setNumber:isa forKey:v8 completion:v10];
    _Block_release(v10);
  }
}

id sub_100056778(id result)
{
  if (((_BYTE)result - 2) <= 4u)
  {
    char v1 = (char)result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v2 = sub_100055C18(v1);
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v7 = 0;
    unsigned int v4 = [v2 setDate:0 forKey:v3 error:&v7];

    id v5 = v7;
    if (v4)
    {
      return v5;
    }
    else
    {
      id v6 = v7;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return (id)swift_errorRelease();
    }
  }
  return result;
}

void sub_1000568C4(uint64_t a1, void *a2, char a3)
{
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_100056EB4(1, a1);
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v8 = swift_allocObject();
    *(unsigned char *)(v8 + 16) = a3;
    *(void *)(v8 + 24) = v6;
    *(void *)(v8 + 32) = a2;
    v11[4] = sub_100058914;
    void v11[5] = v8;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_10000408C;
    v11[3] = &unk_1000F6D70;
    uint64_t v9 = _Block_copy(v11);
    id v10 = a2;
    swift_release();
    [v10 setDate:0 forKey:v7 completion:v9];
    _Block_release(v9);
  }
}

uint64_t sub_100056A08(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2) {
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100056AB4(uint64_t result, uint64_t a2, char a3, void *a4)
{
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  int64_t v5 = *(void *)(result + 16);
  id v6 = _swiftEmptyArrayStorage;
  if (!v5)
  {
    unint64_t v19 = _swiftEmptyArrayStorage[2];
    uint64_t v27 = _swiftEmptyArrayStorage;
    if (v19)
    {
LABEL_31:
      Swift::String v28 = v6 + 5;
      uint64_t v27 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v30 = *(v28 - 1);
        uint64_t v29 = *v28;
        uint64_t v48 = v30;
        uint64_t v49 = v29;
        *(void *)&long long v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *((void *)&v46 + 1) = v31;
        sub_100038AD4();
        swift_bridgeObjectRetain();
        char v32 = StringProtocol.contains<A>(_:)();
        swift_bridgeObjectRelease();
        if (v32)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v44 = v27;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100096504(0, v27[2] + 1, 1);
            uint64_t v27 = (void *)v44;
          }
          unint64_t v35 = v27[2];
          unint64_t v34 = v27[3];
          if (v35 >= v34 >> 1)
          {
            sub_100096504(v34 > 1, v35 + 1, 1);
            uint64_t v27 = (void *)v44;
          }
          uint64_t v27[2] = v35 + 1;
          os_log_type_t v36 = &v27[2 * v35];
          v36[4] = v30;
          v36[5] = v29;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v28 += 2;
        --v19;
      }
      while (v19);
    }
    swift_bridgeObjectRelease();
    sub_1000568C4((uint64_t)v27, a4, a3);
    return swift_release();
  }
  uint64_t v51 = _swiftEmptyArrayStorage;
  sub_100096504(0, v5, 0);
  uint64_t result = sub_1000587BC(v4);
  if (result < 0) {
    goto LABEL_47;
  }
  unint64_t v8 = result;
  if (result >= 1 << *(unsigned char *)(v4 + 32)) {
    goto LABEL_47;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v4 + 64;
  uint64_t v37 = v4 + 80;
  uint64_t v42 = v4;
  int v40 = v7;
  uint64_t v41 = v4 + 64;
  while (1)
  {
    unint64_t v11 = v8 >> 6;
    if ((*(void *)(v10 + 8 * (v8 >> 6)) & (1 << v8)) == 0) {
      break;
    }
    if (*(_DWORD *)(v4 + 36) != v7) {
      goto LABEL_43;
    }
    uint64_t v12 = *(void *)(v4 + 56);
    id v13 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v8);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    sub_100018EC4(v12 + 32 * v8, (uint64_t)v50);
    uint64_t v48 = v15;
    uint64_t v49 = v14;
    *(void *)&long long v46 = v15;
    *((void *)&v46 + 1) = v14;
    sub_100018EC4((uint64_t)v50, (uint64_t)v47);
    long long v44 = v46;
    v45[0] = v47[0];
    v45[1] = v47[1];
    swift_bridgeObjectRetain_n();
    sub_100058844((uint64_t)&v48);
    long long v16 = v44;
    sub_100018EC4((uint64_t)v45, (uint64_t)v43);
    swift_bridgeObjectRetain();
    _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v43);
    sub_100058844((uint64_t)&v44);
    id v6 = v51;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_100096504(0, v6[2] + 1, 1);
      id v6 = v51;
    }
    unint64_t v18 = v6[2];
    unint64_t v17 = v6[3];
    unint64_t v19 = v18 + 1;
    if (v18 >= v17 >> 1)
    {
      uint64_t result = sub_100096504(v17 > 1, v18 + 1, 1);
      id v6 = v51;
    }
    uint64_t v6[2] = v19;
    *(_OWORD *)&v6[2 * v18 + 4] = v16;
    uint64_t v4 = v42;
    uint64_t v20 = 1 << *(unsigned char *)(v42 + 32);
    if ((uint64_t)v8 >= v20) {
      goto LABEL_44;
    }
    uint64_t v10 = v41;
    uint64_t v21 = *(void *)(v41 + 8 * v11);
    if ((v21 & (1 << v8)) == 0) {
      goto LABEL_45;
    }
    int v7 = v40;
    if (*(_DWORD *)(v42 + 36) != v40) {
      goto LABEL_46;
    }
    unint64_t v22 = v21 & (-2 << (v8 & 0x3F));
    if (v22)
    {
      unint64_t v8 = __clz(__rbit64(v22)) | v8 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v23 = v11 + 1;
      unint64_t v24 = (unint64_t)(v20 + 63) >> 6;
      if (v11 + 1 < v24)
      {
        unint64_t v25 = *(void *)(v41 + 8 * v23);
        int64_t v26 = v5;
        if (v25)
        {
LABEL_22:
          unint64_t v8 = __clz(__rbit64(v25)) + (v23 << 6);
        }
        else
        {
          while (v24 - 2 != v11)
          {
            unint64_t v25 = *(void *)(v37 + 8 * v11++);
            if (v25)
            {
              unint64_t v23 = v11 + 1;
              goto LABEL_22;
            }
          }
          unint64_t v8 = 1 << *(unsigned char *)(v42 + 32);
        }
        goto LABEL_25;
      }
      unint64_t v8 = 1 << *(unsigned char *)(v42 + 32);
    }
    int64_t v26 = v5;
LABEL_25:
    if (++v9 == v26) {
      goto LABEL_31;
    }
    if ((v8 & 0x8000000000000000) != 0 || (uint64_t)v8 >= v20) {
      goto LABEL_47;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_100056EB4(uint64_t result, uint64_t a2)
{
  if (result < 0) {
    goto LABEL_29;
  }
  uint64_t v2 = a2;
  if (!result) {
    return v2;
  }
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    swift_release();
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  id v6 = (uint64_t *)(a2 + 40);
  uint64_t v24 = v3 - 1;
  int v7 = _swiftEmptyArrayStorage;
  uint64_t v23 = result;
  do
  {
    uint64_t v13 = *(v6 - 1);
    uint64_t v12 = *v6;
    uint64_t v14 = v7[2];
    if (v14 < result)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100096504(0, v14 + 1, 1);
      }
      unint64_t v9 = v7[2];
      unint64_t v8 = v7[3];
      if (v9 >= v8 >> 1) {
        sub_100096504(v8 > 1, v9 + 1, 1);
      }
      v7[2] = v9 + 1;
      uint64_t v10 = &v7[2 * v9];
      v10[4] = v13;
      v10[5] = v12;
      uint64_t result = v23;
      uint64_t v11 = a2;
LABEL_8:
      if (v24 == v4) {
        goto LABEL_24;
      }
      goto LABEL_9;
    }
    if (v5 >= v14) {
      goto LABEL_27;
    }
    uint64_t v22 = *(v6 - 1);
    uint64_t v15 = &v7[2 * v5];
    uint64_t v16 = v15[4];
    uint64_t v17 = v15[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_100096504(0, _swiftEmptyArrayStorage[2] + 1, 1);
    }
    unint64_t v19 = _swiftEmptyArrayStorage[2];
    unint64_t v18 = _swiftEmptyArrayStorage[3];
    if (v19 >= v18 >> 1) {
      sub_100096504(v18 > 1, v19 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v19 + 1;
    uint64_t v20 = &_swiftEmptyArrayStorage[2 * v19];
    v20[4] = v16;
    v20[5] = v17;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_100091320((uint64_t)v7);
      int v7 = (void *)result;
    }
    uint64_t v11 = a2;
    if (v5 >= v7[2]) {
      goto LABEL_28;
    }
    uint64_t v21 = &v7[2 * v5];
    swift_bridgeObjectRelease();
    uint64_t result = v23;
    v21[4] = v22;
    v21[5] = v12;
    if ((uint64_t)++v5 < v23) {
      goto LABEL_8;
    }
    if (v24 == v4) {
      goto LABEL_24;
    }
    unint64_t v5 = 0;
LABEL_9:
    ++v4;
    v6 += 2;
  }
  while (v4 < *(void *)(v11 + 16));
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void sub_10005710C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5)
{
  if (*(void *)(a4 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_100056EB4(1, a4);
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v10 = swift_allocObject();
    *(unsigned char *)(v10 + 16) = a3;
    *(void *)(v10 + 24) = v8;
    *(void *)(v10 + 32) = a5;
    v13[4] = sub_100058D04;
    v13[5] = v10;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    void v13[2] = sub_10000408C;
    void v13[3] = &unk_1000F6DC0;
    uint64_t v11 = _Block_copy(v13);
    id v12 = a5;
    swift_release();
    [v12 setDate:0 forKey:v9 completion:v11];
    _Block_release(v11);
  }
}

uint64_t sub_100057250(char a1, ValueMetadata *a2, ValueMetadata *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v12 = (char *)&v34 - v11;
  if (a2 || (a1 & 1) == 0)
  {
    static Logger.plugin.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v34 = v25;
      *(_DWORD *)uint64_t v24 = 136315650;
      os_log_type_t v36 = &type metadata for HKKeyValueDataSource.Identifier;
      uint64_t v37 = v25;
      sub_10005897C();
      uint64_t v35 = v6;
      uint64_t v26 = String.init<A>(describing:)();
      os_log_type_t v36 = (ValueMetadata *)sub_100018DA0(v26, v27, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      os_log_type_t v36 = a3;
      type metadata accessor for HKEmergencyOnboardingStatus(0);
      uint64_t v28 = String.init<A>(describing:)();
      os_log_type_t v36 = (ValueMetadata *)sub_100018DA0(v28, v29, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 22) = 2080;
      os_log_type_t v36 = a2;
      swift_errorRetain();
      sub_10001C154(0, (unint64_t *)&qword_100104660, (uint64_t (*)(uint64_t))sub_10001E8C0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      uint64_t v30 = String.init<A>(describing:)();
      os_log_type_t v36 = (ValueMetadata *)sub_100018DA0(v30, v31, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "[%s] Could not set emergency onboarding status to %s: %s", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v35);
    }
    swift_errorRelease();
    swift_errorRelease();

    char v32 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    uint64_t v33 = v10;
  }
  else
  {
    static Logger.plugin.getter();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      uint64_t v35 = v6;
      os_log_type_t v36 = &type metadata for HKKeyValueDataSource.Identifier;
      uint64_t v37 = v16;
      sub_10005897C();
      uint64_t v17 = String.init<A>(describing:)();
      os_log_type_t v36 = (ValueMetadata *)sub_100018DA0(v17, v18, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      os_log_type_t v36 = a3;
      type metadata accessor for HKEmergencyOnboardingStatus(0);
      uint64_t v19 = String.init<A>(describing:)();
      os_log_type_t v36 = (ValueMetadata *)sub_100018DA0(v19, v20, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%s] Set emergency onboarding status to %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v35);
    }

    char v32 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    uint64_t v33 = v12;
  }
  return v32(v33, v6);
}

unint64_t sub_10005770C(char a1)
{
  unint64_t result = 0xD000000000000013;
  switch(a1)
  {
    case 1:
    case 3:
      unint64_t result = 0xD000000000000023;
      break;
    case 2:
      unint64_t result = 0xD000000000000026;
      break;
    case 4:
      unint64_t result = 0xD000000000000021;
      break;
    case 5:
      unint64_t result = 0x6F636E4920444545;
      break;
    case 6:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000577F0(unsigned __int8 *a1, char *a2)
{
  return sub_1000988DC(*a1, *a2);
}

Swift::Int sub_1000577FC()
{
  return sub_100094018();
}

uint64_t sub_100057808()
{
  return sub_100093F00();
}

Swift::Int sub_100057810()
{
  return sub_100094018();
}

unint64_t sub_100057818@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100058C8C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100057848@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10005770C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100057874(void *a1@<X8>)
{
  *a1 = &off_1000F48A0;
}

uint64_t sub_100057884()
{
  uint64_t v46 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v0 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C154(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2 - 8);
  long long v44 = (char *)v32 - v3;
  uint64_t v43 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v4 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v41 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  Swift::Int_optional v47 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for ContentConfigurationItem();
  uint64_t v8 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = 7;
  v32[0] = v6;
  uint64_t v52 = _swiftEmptyArrayStorage;
  sub_100096494(0, 7, 0);
  id v39 = self;
  NSString v38 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v37 = (void (**)(unsigned char *, void, uint64_t))(v4 + 104);
  os_log_type_t v36 = (void (**)(char *, void, uint64_t))(v0 + 104);
  unsigned int v35 = enum case for CellDeselectionBehavior.deselectOnDidSelect(_:);
  uint64_t v34 = v8 + 32;
  unsigned int v33 = enum case for SectionedDataSourceContainerViewType.collectionView(_:);
  id v12 = &byte_1000F48C0;
  v32[7] = "iation4";
  v32[6] = "Article Read States";
  void v32[5] = "t Alert Read States";
  v32[4] = " Update Last Generated";
  uint64_t v32[3] = " Update Last Viewed";
  v32[2] = "d";
  uint64_t v40 = v8;
  do
  {
    char v13 = *v12;
    uint64_t v49 = v12 + 1;
    *(unsigned char *)(swift_allocObject() + 16) = v13;
    os_log_type_t v14 = v47;
    UUID.init()();
    UUID.uuidString.getter();
    (*v38)(v14, v48);
    v51[3] = type metadata accessor for UIListContentConfiguration();
    v51[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
    sub_100004F38(v51);
    static UIListContentConfiguration.cell()();
    swift_bridgeObjectRetain();
    UIListContentConfiguration.text.setter();
    id v15 = [v39 tintColor];
    uint64_t v16 = (void (*)(char *, void))UIListContentConfiguration.textProperties.modify();
    UIListContentConfiguration.TextProperties.color.setter();
    v16(v50, 0);
    uint64_t v17 = v41;
    *uint64_t v41 = 1;
    (*v37)(v17, v35, v43);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v18 = type metadata accessor for UIBackgroundConfiguration();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v44, 1, 1, v18);
    (*v36)(v45, v33, v46);
    ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();
    swift_release();
    uint64_t v19 = (uint64_t)v52;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100096494(0, *(void *)(v19 + 16) + 1, 1);
      uint64_t v19 = (uint64_t)v52;
    }
    uint64_t v20 = v40;
    unint64_t v22 = *(void *)(v19 + 16);
    unint64_t v21 = *(void *)(v19 + 24);
    if (v22 >= v21 >> 1)
    {
      sub_100096494(v21 > 1, v22 + 1, 1);
      uint64_t v19 = (uint64_t)v52;
    }
    *(void *)(v19 + 16) = v22 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v19+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(void *)(v20 + 72) * v22, v10, v42);
    uint64_t v52 = (void *)v19;
    --v11;
    id v12 = v49;
  }
  while (v11);
  sub_10001C154(0, &qword_100104858, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for ArrayDataSourceSection();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000CBFD0;
  sub_1000B870C(v19);
  swift_bridgeObjectRelease();
  os_log_type_t v23 = v47;
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v32[0] + 8);
  uint64_t v25 = v48;
  v24(v23, v48);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)();
  v51[0] = 0x3C53447961727241;
  v51[1] = 0xE800000000000000;
  UUID.init()();
  uint64_t v26 = UUID.uuidString.getter();
  uint64_t v28 = v27;
  v24(v23, v25);
  v29._uint64_t countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 62;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  return ArrayDataSource.init(arrangedSections:identifier:)();
}

void sub_100058188(void *a1, char a2)
{
  uint64_t v4 = sub_100055C90(a2);
  if (v5) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 7104878;
  }
  uint64_t v7 = (void *)0xE300000000000000;
  if (v5) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = (void *)0xE300000000000000;
  }
  uint64_t v9 = sub_100055D2C(a2);
  if (v10) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = 7104878;
  }
  if (v10) {
    uint64_t v7 = v10;
  }
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = v6;
  v12._object = v8;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0x203A65756C61560ALL;
  v13._object = (void *)0xE800000000000000;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v7;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v17 = [self alertControllerWithTitle:v15 message:v16 preferredStyle:1];

  uint64_t v18 = swift_allocObject();
  *(unsigned char *)(v18 + 16) = a2;
  NSString v19 = String._bridgeToObjectiveC()();
  v25[4] = sub_10005872C;
  v25[5] = v18;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 1107296256;
  void v25[2] = sub_1000A0064;
  v25[3] = &unk_1000F6C80;
  uint64_t v20 = _Block_copy(v25);
  swift_release();
  unint64_t v21 = self;
  id v22 = [v21 actionWithTitle:v19 style:0 handler:v20];
  _Block_release(v20);

  [v17 addAction:v22];
  NSString v23 = String._bridgeToObjectiveC()();
  id v24 = [v21 actionWithTitle:v23 style:1 handler:0];

  [v17 addAction:v24];
  [a1 presentViewController:v17 animated:1 completion:0];
}

void sub_100058538()
{
}

void sub_100058554()
{
}

void sub_100058570()
{
}

uint64_t sub_10005859C()
{
  return type metadata accessor for HKKeyValueDataSource();
}

unint64_t sub_1000585A4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002BFF4(a1);
}

uint64_t sub_100058620(uint64_t a1, uint64_t a2)
{
  return sub_10002B8D0(a1, a2);
}

uint64_t sub_100058680(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100058B94(&qword_100105EF0, (void (*)(uint64_t))type metadata accessor for HKKeyValueDataSource);
  uint64_t result = sub_100058B94(&qword_100105EF8, (void (*)(uint64_t))type metadata accessor for HKKeyValueDataSource);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100058704()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_100058714(void *a1)
{
  sub_100058188(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_10005871C()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_10005872C()
{
  sub_100056390((void *)*(unsigned __int8 *)(v0 + 16));
}

uint64_t sub_100058734(uint64_t a1, uint64_t a2)
{
  return sub_100056AB4(a1, a2, *(unsigned char *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_10005875C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100058794(uint64_t a1, uint64_t a2)
{
  return sub_100056AB4(a1, a2, *(unsigned char *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_1000587BC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_100058844(uint64_t a1)
{
  sub_1000588A0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000588A0()
{
  if (!qword_100105F00)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100105F00);
    }
  }
}

void sub_100058914(uint64_t a1, uint64_t a2)
{
  sub_10005710C(a1, a2, *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_100058924()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100058964()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100058974(char a1, ValueMetadata *a2)
{
  return sub_100057250(a1, a2, *(ValueMetadata **)(v2 + 16));
}

unint64_t sub_10005897C()
{
  unint64_t result = qword_100105F08;
  if (!qword_100105F08)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_100105F08);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HKKeyValueDataSource.Identifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HKKeyValueDataSource.Identifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100058B14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKKeyValueDataSource.Identifier()
{
  return &type metadata for HKKeyValueDataSource.Identifier;
}

uint64_t sub_100058B4C()
{
  return sub_100058B94(&qword_100105F10, (void (*)(uint64_t))sub_100058BDC);
}

uint64_t sub_100058B94(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100058BDC()
{
  if (!qword_100105F18)
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105F18);
    }
  }
}

unint64_t sub_100058C38()
{
  unint64_t result = qword_100105F20;
  if (!qword_100105F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105F20);
  }
  return result;
}

unint64_t sub_100058C8C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000F4F80, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

void **sub_100058D08(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  unsigned int v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    BOOL v7 = (char *)a1 + v6;
    int v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for LocalizedStringResource();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    Swift::String v12 = v4;
    if (v11(v8, 1, v9))
    {
      sub_10005C260(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t sub_100058EB4(id *a1, uint64_t a2)
{
  unsigned int v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for LocalizedStringResource();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    BOOL v7 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void **sub_100058F84(void **a1, void **a2, uint64_t a3)
{
  unsigned int v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  BOOL v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  id v11 = v4;
  if (v10(v7, 1, v8))
  {
    sub_10005C260(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v6, v7, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

void **sub_1000590D0(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  BOOL v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  id v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for LocalizedStringResource();
  uint64_t v13 = *(void *)(v12 - 8);
  Swift::String v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    sub_10005C260(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

void *sub_100059288(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for LocalizedStringResource();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    sub_10005C260(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void **sub_1000593C8(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for LocalizedStringResource();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    sub_10005C260(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_10005957C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100059590);
}

uint64_t sub_100059590(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_10005C260(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100059670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100059684);
}

void *sub_100059684(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    sub_10005C260(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for RecordsSectionProvider()
{
  uint64_t result = qword_100105F80;
  if (!qword_100105F80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000597A8()
{
  sub_10005C260(319, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100059874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v86 = a1;
  uint64_t v89 = a2;
  uint64_t v2 = type metadata accessor for String.LocalizationValue();
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  v83[26] = (char *)v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  v83[25] = (char *)v83 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  v83[24] = (char *)v83 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v83[23] = (char *)v83 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v83[22] = (char *)v83 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v83[21] = (char *)v83 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v83[20] = (char *)v83 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v83[19] = (char *)v83 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v83[17] = (char *)v83 - v20;
  __chkstk_darwin(v19);
  v83[15] = (char *)v83 - v21;
  uint64_t v22 = type metadata accessor for LocalizedStringResource();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v87 = v22;
  uint64_t v88 = v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v83[18] = (char *)v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  v83[16] = (char *)v83 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v83[14] = (char *)v83 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v83[13] = (char *)v83 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v83[12] = (char *)v83 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v83[11] = (char *)v83 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v83[10] = (char *)v83 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v83[9] = (char *)v83 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  v83[8] = (char *)v83 - v41;
  __chkstk_darwin(v40);
  v83[7] = (char *)v83 - v42;
  sub_10005C260(0, &qword_100105FD8, (uint64_t (*)(uint64_t))&type metadata accessor for DisplayRepresentation.Image, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v44 = __chkstk_darwin(v43 - 8);
  v83[6] = (char *)v83 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __chkstk_darwin(v44);
  v83[5] = (char *)v83 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  v83[4] = (char *)v83 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  v83[3] = (char *)v83 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v85 = (char *)v83 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  v83[2] = (char *)v83 - v55;
  __chkstk_darwin(v54);
  v83[1] = (char *)v83 - v56;
  sub_10005C260(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v58 = __chkstk_darwin(v57 - 8);
  uint64_t v60 = (char *)v83 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __chkstk_darwin(v58);
  uint64_t v63 = (char *)v83 - v62;
  uint64_t v64 = __chkstk_darwin(v61);
  id v66 = (char *)v83 - v65;
  uint64_t v67 = __chkstk_darwin(v64);
  int64_t v69 = (char *)v83 - v68;
  uint64_t v70 = __chkstk_darwin(v67);
  uint64_t v84 = (char *)v83 - v71;
  uint64_t v72 = __chkstk_darwin(v70);
  uint64_t v74 = (char *)v83 - v73;
  __chkstk_darwin(v72);
  uint64_t v76 = (char *)v83 - v75;
  uint64_t v77 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v78 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v80 = (char *)v83 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for Locale();
  __chkstk_darwin(v81 - 8);
  switch((char)v86)
  {
    case 1:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      (*(void (**)(char *, void, uint64_t))(v78 + 104))(v80, enum case for LocalizedStringResource.BundleDescription.main(_:), v77);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v60, 1, 1, v87);
      goto LABEL_10;
    case 4:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      (*(void (**)(char *, void, uint64_t))(v78 + 104))(v80, enum case for LocalizedStringResource.BundleDescription.main(_:), v77);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v69, 1, 1, v87);
      DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
      sub_1000681D4(0);
      break;
    case 5:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      (*(void (**)(char *, void, uint64_t))(v78 + 104))(v80, enum case for LocalizedStringResource.BundleDescription.main(_:), v77);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v63, 1, 1, v87);
      DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
      sub_1000681D4(0);
      break;
    case 6:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      (*(void (**)(char *, void, uint64_t))(v78 + 104))(v80, enum case for LocalizedStringResource.BundleDescription.main(_:), v77);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v74, 1, 1, v87);
      DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
      break;
    case 7:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      (*(void (**)(char *, void, uint64_t))(v78 + 104))(v80, enum case for LocalizedStringResource.BundleDescription.main(_:), v77);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v76, 1, 1, v87);
      DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
      break;
    case 8:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      (*(void (**)(char *, void, uint64_t))(v78 + 104))(v80, enum case for LocalizedStringResource.BundleDescription.main(_:), v77);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v66, 1, 1, v87);
      DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
      sub_1000681D4(0);
      break;
    default:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      (*(void (**)(char *, void, uint64_t))(v78 + 104))(v80, enum case for LocalizedStringResource.BundleDescription.main(_:), v77);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v84, 1, 1, v87);
LABEL_10:
      DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
      sub_1000681D4(0);
      break;
  }
  return DisplayRepresentation.init(title:subtitle:image:synonyms:)();
}

unint64_t sub_10005A928(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000020;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10005AA1C(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 152) = a2;
  *(void *)(v2 + 32) = a1;
  uint64_t v3 = type metadata accessor for BrowseCategory();
  *(void *)(v2 + 4sub_10004C8C4(0, 0) = v3;
  *(void *)(v2 + 48) = *(void *)(v3 - 8);
  *(void *)(v2 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_10005AB0C, 0, 0);
}

uint64_t sub_10005AB0C()
{
  if (*(unsigned char *)(v0 + 152) == 9)
  {
    uint64_t v1 = *(void *)(v0 + 48);
    id v2 = [*(id *)(v0 + 32) healthStore];
    type metadata accessor for CategoryCountDataProvider();
    swift_allocObject();
    uint64_t v3 = CategoryCountDataProvider.init(healthStore:)();
    *(void *)(v0 + 64) = v3;
    sub_10005C260(0, &qword_100105FE8, (uint64_t (*)(uint64_t))&type metadata accessor for BrowseCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    unint64_t v4 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    uint64_t v5 = swift_allocObject();
    *(void *)(v0 + 72) = v5;
    *(_OWORD *)(v5 + 16) = xmmword_1000CBFD0;
    unint64_t v6 = v5 + v4;
    uint64_t v7 = enum case for DisplayCategory.Kind.unknown(_:);
    *(_DWORD *)(v0 + 144) = enum case for DisplayCategory.Kind.unknown(_:);
    uint64_t v8 = type metadata accessor for DisplayCategory.Kind();
    *(void *)(v0 + 8sub_10004C8C4(0, 0) = v8;
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 104);
    *(void *)(v0 + 88) = v10;
    *(void *)(v0 + 96) = (v9 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v10(v6, v7, v8);
    *(_DWORD *)(v0 + 148) = enum case for BrowseCategory.subcategory(_:);
    uint64_t v11 = *(void (**)(unint64_t))(v1 + 104);
    *(void *)(v0 + 104) = v11;
    *(void *)(v0 + 112) = (v1 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v11(v6);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 12sub_10004C8C4(0, 0) = v12;
    v12[2] = v3;
    uint64_t v12[3] = v5;
    v12[4] = 0;
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v13;
    sub_10005C2D0();
    *uint64_t v13 = v0;
    v13[1] = sub_10005AEC4;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 24, 0, 0, 0xD000000000000025, 0x80000001000D3770, sub_10005C2C4, v12, v14);
  }
  else
  {
    *(void *)(v0 + 16) = 0;
    id v15 = [*(id *)(v0 + 32) allAccountsWithError:v0 + 16];
    uint64_t v16 = *(void **)(v0 + 16);
    if (v15)
    {
      uint64_t v17 = v15;
      sub_10005C220();
      unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v19 = v16;

      if (v18 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      BOOL v21 = v20 != 0;
    }
    else
    {
      id v22 = v16;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      BOOL v21 = 0;
    }
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(BOOL))(v0 + 8);
    return v23(v21);
  }
}

uint64_t sub_10005AEC4()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_10005B1B8;
  }
  else
  {
    swift_task_dealloc();
    id v2 = sub_10005B014;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005B014()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 104);
  id v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 88);
  uint64_t v4 = *(unsigned int *)(v0 + 144);
  uint64_t v3 = *(unsigned int *)(v0 + 148);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 40);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v0 + 24);
  v2(v6, v4, v5);
  v1(v6, v3, v7);
  if (*(void *)(v8 + 16))
  {
    unint64_t v9 = sub_100094DF8(*(void *)(v0 + 56));
    uint64_t v10 = *(void *)(v0 + 56);
    uint64_t v11 = *(void *)(v0 + 40);
    uint64_t v12 = *(void *)(v0 + 48);
    if (v13)
    {
      uint64_t v14 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
      swift_bridgeObjectRelease();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      BOOL v15 = v14 > 0;
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 56);
    uint64_t v17 = *(void *)(v0 + 40);
    uint64_t v18 = *(void *)(v0 + 48);
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  }
  BOOL v15 = 0;
LABEL_7:
  swift_task_dealloc();
  id v19 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v19(v15);
}

uint64_t sub_10005B1B8()
{
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_10005B278()
{
  v1[15] = v0;
  uint64_t v2 = type metadata accessor for DisplayRepresentation();
  v1[16] = v2;
  v1[17] = *(void *)(v2 - 8);
  v1[18] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for HealthViewEntity();
  v1[19] = v3;
  v1[20] = *(void *)(v3 - 8);
  v1[21] = swift_task_alloc();
  return _swift_task_switch(sub_10005B394, 0, 0);
}

uint64_t sub_10005B394()
{
  id v1 = [objc_allocWithZone((Class)HKClinicalAccountStore) initWithHealthStore:**(void **)(v0 + 120)];
  *(void *)(v0 + 176) = v1;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 216;
  *(void *)(v0 + 24) = sub_10005B4BC;
  uint64_t v2 = swift_continuation_init();
  *(void *)(v0 + 8sub_10004C8C4(0, 0) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_10005BAFC;
  *(void *)(v0 + 104) = &unk_1000F6F50;
  *(void *)(v0 + 112) = v2;
  [v1 shouldShowHealthRecordsSectionWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_10005B4BC()
{
  return _swift_task_switch(sub_10005B59C, 0, 0);
}

uint64_t sub_10005B59C()
{
  if (*(unsigned char *)(v0 + 216) == 1)
  {
    *(void *)(v0 + 184) = 10;
    *(void *)(v0 + 192) = 0;
    *(void *)(v0 + 20sub_10004C8C4(0, 0) = _swiftEmptyArrayStorage;
    *(unsigned char *)(v0 + 218) = 0;
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v1;
    void *v1 = v0;
    v1[1] = sub_10005B6BC;
    uint64_t v2 = *(void *)(v0 + 176);
    return sub_10005AA1C(v2, 0);
  }
  else
  {

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void *))(v0 + 8);
    return v4(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10005B6BC(char a1)
{
  *(unsigned char *)(*(void *)v1 + 219) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10005B7BC, 0, 0);
}

uint64_t sub_10005B7BC()
{
  if (*(unsigned char *)(v0 + 219))
  {
    uint64_t v1 = *(unsigned __int8 *)(v0 + 218);
    unint64_t v2 = 0xD000000000000011;
    unint64_t v3 = 0x80000001000D36B0;
    switch(*(unsigned char *)(v0 + 218))
    {
      case 1:
        uint64_t v4 = "ViewHealthRecordsCategoryRoom/7";
        goto LABEL_13;
      case 2:
        unint64_t v2 = 0xD000000000000020;
        unint64_t v3 = 0x80000001000D3660;
        break;
      case 3:
        uint64_t v4 = "ViewHealthRecordsCategoryRoom/3";
        goto LABEL_13;
      case 4:
        uint64_t v4 = "ViewHealthRecordsCategoryRoom/4";
        goto LABEL_13;
      case 5:
        uint64_t v4 = "ViewHealthRecordsCategoryRoom/6";
        goto LABEL_13;
      case 6:
        uint64_t v4 = "ViewHealthRecordsCategoryRoom/2";
        goto LABEL_13;
      case 7:
        uint64_t v4 = "ViewHealthRecordsCategoryRoom/1";
        goto LABEL_13;
      case 8:
        uint64_t v4 = "ViewHealthRecordsCategoryRoom/5";
        goto LABEL_13;
      case 9:
        uint64_t v4 = "ViewHealthRecordsCategoryRoom/8";
LABEL_13:
        unint64_t v3 = (unint64_t)(v4 - 32) | 0x8000000000000000;
        unint64_t v2 = 0xD00000000000001FLL;
        break;
      default:
        break;
    }
    uint64_t v6 = *(unint64_t **)(v0 + 168);
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v8 = *(void *)(v0 + 152);
    uint64_t v9 = *(void *)(v0 + 128);
    uint64_t v10 = *(void *)(v0 + 136);
    sub_100059874(v1, v7);
    uint64_t v11 = swift_allocObject();
    *(unsigned char *)(v11 + 16) = v1;
    *uint64_t v6 = v2;
    v6[1] = v3;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))((char *)v6 + *(int *)(v8 + 20), v7, v9);
    uint64_t v12 = (id (**)())((char *)v6 + *(int *)(v8 + 24));
    void *v12 = sub_10005BF78;
    v12[1] = (id (*)())v11;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v5 = *(void *)(v0 + 200);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v5 = sub_100036708(0, *(void *)(v5 + 16) + 1, 1, *(void *)(v0 + 200));
    }
    unint64_t v15 = *(void *)(v5 + 16);
    unint64_t v14 = *(void *)(v5 + 24);
    if (v15 >= v14 >> 1) {
      unint64_t v5 = sub_100036708(v14 > 1, v15 + 1, 1, v5);
    }
    uint64_t v17 = *(void *)(v0 + 160);
    uint64_t v16 = *(void *)(v0 + 168);
    *(void *)(v5 + 16) = v15 + 1;
    sub_10005C168(v16, v5+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(void *)(v17 + 72) * v15);
  }
  else
  {
    unint64_t v5 = *(void *)(v0 + 200);
  }
  uint64_t v18 = *(void *)(v0 + 192) + 1;
  if (v18 == *(void *)(v0 + 184))
  {

    swift_task_dealloc();
    swift_task_dealloc();
    id v19 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v19(v5);
  }
  else
  {
    *(void *)(v0 + 192) = v18;
    *(void *)(v0 + 20sub_10004C8C4(0, 0) = v5;
    char v21 = *((unsigned char *)&off_1000F5048 + v18 + 32);
    *(unsigned char *)(v0 + 218) = v21;
    id v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v22;
    *id v22 = v0;
    v22[1] = sub_10005B6BC;
    uint64_t v23 = *(void *)(v0 + 176);
    return sub_10005AA1C(v23, v21);
  }
}

uint64_t sub_10005BAFC(uint64_t a1, char a2, char a3)
{
  unint64_t v3 = *(unsigned char **)(*(void *)(*(void *)(a1 + 32) + 64) + 40);
  unsigned char *v3 = a2;
  v3[1] = a3;
  return _swift_continuation_resume();
}

id sub_10005BB24(char a1)
{
  sub_10005C260(0, (unint64_t *)&unk_100104880, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v16 - v3;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9._uint64_t countAndFlagsBits = sub_10005A928(a1);
  v16[0] = 0xD000000000000011;
  v16[1] = 0x80000001000D36D0;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100028AF8((uint64_t)v4);
    sub_10005C1CC();
    swift_allocError();
    return (id)swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    id result = [self defaultWorkspace];
    if (result)
    {
      uint64_t v12 = result;
      URL._bridgeToObjectiveC()(v11);
      unint64_t v14 = v13;
      sub_1000939E8((uint64_t)_swiftEmptyArrayStorage);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v12 openSensitiveURL:v14 withOptions:isa];

      return (id)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10005BDD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005C514(v2 + *(int *)(a1 + 20), a2);
}

uint64_t sub_10005BDE0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10005BE6C;
  return sub_10005B278();
}

uint64_t sub_10005BE6C(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_10005BF68()
{
  return _swift_deallocObject(v0, 17, 7);
}

id sub_10005BF78()
{
  return sub_10005BB24(*(unsigned char *)(v0 + 16));
}

uint64_t sub_10005BF94(uint64_t a1)
{
  sub_10005C394();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v7 + v6, (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  dispatch thunk of CategoryCountDataProvider.categoriesCounts(categories:predicate:completion:)();
  return swift_release();
}

uint64_t sub_10005C0E8(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_10005C394();
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10005C394();
    swift_bridgeObjectRetain();
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_10005C168(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HealthViewEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10005C1CC()
{
  unint64_t result = qword_100105FD0;
  if (!qword_100105FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105FD0);
  }
  return result;
}

unint64_t sub_10005C220()
{
  unint64_t result = qword_100105FE0;
  if (!qword_100105FE0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100105FE0);
  }
  return result;
}

void sub_10005C260(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_10005C2C4(uint64_t a1)
{
  return sub_10005BF94(a1);
}

void sub_10005C2D0()
{
  if (!qword_100105FF0)
  {
    type metadata accessor for BrowseCategory();
    sub_10005C33C();
    unint64_t v0 = type metadata accessor for Dictionary();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100105FF0);
    }
  }
}

unint64_t sub_10005C33C()
{
  unint64_t result = qword_100105FF8;
  if (!qword_100105FF8)
  {
    type metadata accessor for BrowseCategory();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105FF8);
  }
  return result;
}

void sub_10005C394()
{
  if (!qword_100106000)
  {
    sub_10005C2D0();
    sub_10001E8C0();
    unint64_t v0 = type metadata accessor for CheckedContinuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106000);
    }
  }
}

uint64_t sub_10005C404()
{
  sub_10005C394();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10005C494(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  sub_10005C394();

  return sub_10005C0E8(a1, v3);
}

uint64_t sub_10005C514(uint64_t a1, uint64_t a2)
{
  sub_10005C260(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005C5A8()
{
  uint64_t v0 = type metadata accessor for ListLayoutConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  char v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ListLayoutConfiguration.withoutHeader.getter();
  uint64_t v4 = ListLayoutConfiguration.layout(for:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_10005C67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000147D8(0, &qword_100106070, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderFooterDataSourceWithLayout, (uint64_t)&protocol witness table for CompoundSectionedDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v16 - v11;
  sub_1000147D8(0, &qword_1001060C0, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderFooterDataSourceWithLayout, (uint64_t)&protocol witness table for CompoundSectionedDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
  char v13 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))method lookup function for HideableDataSource();
  v13(a1, a2, a3, a4);
  dispatch thunk of HideableDataSource.wrappedDataSource.getter();
  HeaderFooterDataSourceWithLayout.mainDataSource.getter();
  swift_release();
  swift_getObjectType();
  LOBYTE(a4) = SnapshotDataSource.isEmpty.getter();
  swift_unknownObjectRelease();
  unint64_t v14 = (unsigned int *)&enum case for HideableDataSource.Visibility.hidden<A>(_:);
  if ((a4 & 1) == 0) {
    unint64_t v14 = (unsigned int *)&enum case for HideableDataSource.Visibility.visible<A>(_:);
  }
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *v14, v9);
  return dispatch thunk of HideableDataSource.visibility.setter();
}

uint64_t sub_10005C864(unsigned __int8 *a1)
{
  sub_1000147D8(0, &qword_100106078, (uint64_t (*)(uint64_t))&type metadata accessor for MutableArrayDataSourceWithLayout, (uint64_t)&protocol witness table for MutableArrayDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v10 - v5;
  int v7 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    uint64_t v9 = (unsigned int *)&enum case for HideableDataSource.Visibility.visible<A>(_:);
    if (!v7) {
      uint64_t v9 = (unsigned int *)&enum case for HideableDataSource.Visibility.hidden<A>(_:);
    }
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *v9, v3);
    dispatch thunk of HideableDataSource.visibility.setter();
    return swift_release();
  }
  return result;
}

void sub_10005C9DC(void *a1)
{
  uint64_t v2 = type metadata accessor for HealthChecklistOpenedAnalyticsSource();
  __chkstk_darwin(v2);
  (*(void (**)(char *, void))(v4 + 104))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for HealthChecklistOpenedAnalyticsSource.getMoreFromHealth(_:));
  id v5 = objc_allocWithZone((Class)type metadata accessor for HealthChecklistViewController());
  uint64_t v6 = (void *)HealthChecklistViewController.init(sender:isDoneButtonVisible:)();
  [a1 showViewController:v6 sender:a1];
}

void sub_10005CAD8()
{
}

uint64_t sub_10005CB08()
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005CB58()
{
  HideableDataSource.deinit();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10005CBC8()
{
  return type metadata accessor for GetMoreFromHealthDataSource();
}

uint64_t sub_10005CBD0()
{
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10005CC10()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005CC48(unsigned __int8 *a1)
{
  return sub_10005C864(a1);
}

uint64_t type metadata accessor for MiscellaneousItemsDataSource()
{
  uint64_t result = qword_1001060F8;
  if (!qword_1001060F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005CC9C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10005CCDC@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  __chkstk_darwin(v3);
  uint64_t v36 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003E4C(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5 - 8);
  uint64_t v35 = (char *)v28 - v6;
  uint64_t v7 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  __chkstk_darwin(v7);
  uint64_t v32 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003E4C(0, &qword_100104AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v9 - 8);
  uint64_t v29 = (char *)v28 - v10;
  uint64_t v11 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions();
  uint64_t v30 = *(void *)(v11 - 8);
  uint64_t v31 = v11;
  __chkstk_darwin(v11);
  char v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UICellAccessory.DisplayedState();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  char v21 = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(swift_allocObject() + 16) = a1 & 1;
  UUID.init()();
  void v28[2] = UUID.uuidString.getter();
  v28[1] = v22;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v41[3] = type metadata accessor for UIListContentConfiguration();
  v41[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
  sub_100004F38(v41);
  static UIListContentConfiguration.cell()();
  swift_bridgeObjectRetain();
  UIListContentConfiguration.text.setter();
  id v23 = [self blackColor];
  uint64_t v24 = (void (*)(unsigned char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v24(v40, 0);
  sub_100003E4C(0, &qword_100104AC0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for UICellAccessory();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000CBFD0;
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for UICellAccessory.DisplayedState.always(_:), v14);
  uint64_t v25 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v29, 1, 1, v25);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)();
  static UICellAccessory.disclosureIndicator(displayed:options:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v31);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  (*(void (**)(char *, void, uint64_t))(v33 + 104))(v32, enum case for CellDeselectionBehavior.default(_:), v34);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v26 = type metadata accessor for UIBackgroundConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v35, 1, 1, v26);
  (*(void (**)(char *, void, uint64_t))(v37 + 104))(v36, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v38);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();
  return swift_release();
}

void sub_10005D3D4(void *a1, char a2)
{
  if (a2)
  {
    id v8 = objc_allocWithZone((Class)type metadata accessor for HealthSharingInternalSettingsViewController());
    id v11 = (id)HealthSharingInternalSettingsViewController.init()();
    id v9 = [a1 navigationController];
    if (v9)
    {
      uint64_t v10 = v9;
      [v9 pushViewController:v11 animated:1];
    }
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)HKHealthStore) init];
    type metadata accessor for PinnedContentManager();
    id v4 = v3;
    PinnedContentManager.__allocating_init(healthStore:domain:)();
    type metadata accessor for SharedProfileOverviewViewController();
    id v11 = v4;
    UIViewController.resolvedHealthExperienceStore.getter();
    swift_retain();
    uint64_t v5 = (void *)SharedProfileOverviewViewController.__allocating_init(healthStore:healthExperienceStore:pinnedContentManager:)();
    id v6 = [a1 navigationController];
    if (v6)
    {
      uint64_t v7 = v6;
      [v6 pushViewController:v5 animated:1];
    }
    swift_release();
  }
}

uint64_t sub_10005D548()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ContentConfigurationItem();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003E4C(0, (unint64_t *)&qword_100104860, (uint64_t (*)(uint64_t))sub_10001AE44, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v8 = swift_allocObject();
  long long v21 = xmmword_1000CBFD0;
  *(_OWORD *)(v8 + 16) = xmmword_1000CBFD0;
  *(void *)(v8 + 56) = v4;
  uint64_t v9 = sub_10005DB1C(&qword_100104870, (void (*)(uint64_t))&type metadata accessor for ContentConfigurationItem);
  *(void *)(v8 + 64) = v9;
  uint64_t v10 = sub_100004F38((uint64_t *)(v8 + 32));
  sub_10005CCDC(0, (uint64_t)v10);
  if (static HealthSharingFeatureManager.isFeatureFlagEnabled.getter())
  {
    sub_10005CCDC(1, (uint64_t)v7);
    unint64_t v12 = *(void *)(v8 + 16);
    unint64_t v11 = *(void *)(v8 + 24);
    if (v12 >= v11 >> 1) {
      uint64_t v8 = (uint64_t)sub_100036234((void *)(v11 > 1), v12 + 1, 1, (void *)v8);
    }
    uint64_t v23 = v4;
    uint64_t v24 = v9;
    char v13 = sub_100004F38((uint64_t *)&v22);
    (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 16))(v13, v7, v4);
    *(void *)(v8 + 16) = v12 + 1;
    sub_10001CD68(&v22, v8 + 40 * v12 + 32);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_100003E4C(0, &qword_100104858, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for ArrayDataSourceSection();
  *(_OWORD *)(swift_allocObject() + 16) = v21;
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v1 + 8);
  v14(v3, v0);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)();
  *(void *)&long long v22 = 0x3C53447961727241;
  *((void *)&v22 + 1) = 0xE800000000000000;
  UUID.init()();
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  v14(v3, v0);
  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 62;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return ArrayDataSource.init(arrangedSections:identifier:)();
}

void sub_10005D950()
{
}

void sub_10005D96C()
{
}

void sub_10005D988()
{
}

uint64_t sub_10005D9B4()
{
  return type metadata accessor for MiscellaneousItemsDataSource();
}

unint64_t sub_10005D9BC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002BFF4(a1);
}

uint64_t sub_10005DA38(uint64_t a1, uint64_t a2)
{
  return sub_10002B8D0(a1, a2);
}

uint64_t sub_10005DA98(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10005DB1C(&qword_100106148, (void (*)(uint64_t))type metadata accessor for MiscellaneousItemsDataSource);
  uint64_t result = sub_10005DB1C(&qword_100106150, (void (*)(uint64_t))type metadata accessor for MiscellaneousItemsDataSource);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10005DB1C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005DB64()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_10005DB74(void *a1)
{
  sub_10005D3D4(a1, *(unsigned char *)(v1 + 16));
}

uint64_t *sub_10005DB7C(uint64_t *a1, uint64_t *a2)
{
  sub_10005F900(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(v4 - 8);
    uint64_t v7 = type metadata accessor for LocalizedStringResource();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10005DD00(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_10005DDD0(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    sub_10005F900(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *sub_10005DF0C(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    sub_10005F900(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *sub_10005E0B4(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    sub_10005F900(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *sub_10005E1F0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    sub_10005F900(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t sub_10005E398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005E3AC);
}

uint64_t sub_10005E3AC(uint64_t a1, uint64_t a2)
{
  sub_10005F900(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10005E448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005E45C);
}

uint64_t sub_10005E45C(uint64_t a1, uint64_t a2)
{
  sub_10005F900(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for UnnamedSectionProvider()
{
  uint64_t result = qword_1001061B0;
  if (!qword_1001061B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10005E548()
{
  sub_10005F900(319, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10005E604@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v61 = a1;
  uint64_t v2 = type metadata accessor for String.LocalizationValue();
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v53 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v51 = (char *)v47 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v50 = (char *)v47 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v49 = (char *)v47 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v47[5] = (char *)v47 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v47[4] = (char *)v47 - v14;
  __chkstk_darwin(v13);
  v47[3] = (char *)v47 - v15;
  sub_10005F900(0, &qword_100105FD8, (uint64_t (*)(uint64_t))&type metadata accessor for DisplayRepresentation.Image, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v52 = (char *)v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v55 = (void (*)(char *))((char *)v47 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  _OWORD v47[2] = (char *)v47 - v22;
  __chkstk_darwin(v21);
  v47[1] = (char *)v47 - v23;
  sub_10005F900(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v48 = (char *)v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v54 = (char *)v47 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)v47 - v30;
  __chkstk_darwin(v29);
  uint64_t v33 = (char *)v47 - v32;
  uint64_t v56 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v34 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v59 = (char *)v47 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for Locale();
  __chkstk_darwin(v36 - 8);
  uint64_t v37 = type metadata accessor for LocalizedStringResource();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v57 = v37;
  uint64_t v58 = v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v40 = __chkstk_darwin(v39);
  uint64_t v41 = __chkstk_darwin(v40);
  uint64_t v42 = __chkstk_darwin(v41);
  uint64_t v43 = __chkstk_darwin(v42);
  __chkstk_darwin(v43);
  switch((char)v61)
  {
    case 1:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      (*(void (**)(char *, void, uint64_t))(v34 + 104))(v59, enum case for LocalizedStringResource.BundleDescription.main(_:), v56);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v31, 1, 1, v57);
      DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
      break;
    case 2:
    case 4:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      (*(void (**)(char *, void, uint64_t))(v34 + 104))(v59, enum case for LocalizedStringResource.BundleDescription.main(_:), v56);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v54, 1, 1, v57);
      DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
      break;
    case 3:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      (*(void (**)(char *, void, uint64_t))(v34 + 104))(v59, enum case for LocalizedStringResource.BundleDescription.main(_:), v56);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v54, 1, 1, v57);
      DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
      break;
    case 5:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      LODWORD(v61) = enum case for LocalizedStringResource.BundleDescription.main(_:);
      uint64_t v55 = *(void (**)(char *))(v34 + 104);
      uint64_t v44 = v59;
      uint64_t v45 = v56;
      v55(v59);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v48, 1, 1, v57);
      DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
      sub_10005F900(0, &qword_1001061F8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000CBFD0;
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      ((void (*)(char *, void, uint64_t))v55)(v44, v61, v45);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)();
      break;
    default:
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      (*(void (**)(char *, void, uint64_t))(v34 + 104))(v59, enum case for LocalizedStringResource.BundleDescription.main(_:), v56);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v33, 1, 1, v57);
      DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
      break;
  }
  return DisplayRepresentation.init(title:subtitle:image:synonyms:)();
}

uint64_t sub_10005F1F8()
{
  uint64_t v1 = type metadata accessor for DisplayRepresentation();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for HealthViewEntity();
  v0[5] = v2;
  v0[6] = *(void *)(v2 - 8);
  v0[7] = swift_task_alloc();
  return _swift_task_switch(sub_10005F310, 0, 0);
}

uint64_t sub_10005F310()
{
  uint64_t v19 = v0[6];
  uint64_t v20 = v0[7];
  uint64_t v18 = v0[5];
  uint64_t v1 = v0[3];
  sub_100096524(0, 6, 0);
  uint64_t v2 = 0;
  uint64_t v3 = (void (**)(char *, uint64_t, uint64_t))(v1 + 32);
  do
  {
    unsigned __int8 v4 = *((unsigned char *)&off_1000F5078 + v2 + 32);
    uint64_t v5 = 8 * (char)v4;
    uint64_t v6 = *(void *)&aSummary[v5];
    uint64_t v7 = *(void *)&aAlltrendsharin[v5 + 24];
    uint64_t v8 = (char *)v0[7];
    uint64_t v9 = v0[4];
    uint64_t v10 = v0[2];
    sub_10005E604(v4, v9);
    uint64_t v11 = swift_allocObject();
    *(unsigned char *)(v11 + 16) = v4;
    *(void *)uint64_t v8 = v6;
    *(void *)(v20 + 8) = v7;
    (*v3)(&v8[*(int *)(v18 + 20)], v9, v10);
    uint64_t v12 = (uint64_t (**)())&v8[*(int *)(v18 + 24)];
    char *v12 = sub_10005F8E4;
    v12[1] = (uint64_t (*)())v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_100096524(0, _swiftEmptyArrayStorage[2] + 1, 1);
    }
    unint64_t v14 = _swiftEmptyArrayStorage[2];
    unint64_t v13 = _swiftEmptyArrayStorage[3];
    if (v14 >= v13 >> 1) {
      sub_100096524(v13 > 1, v14 + 1, 1);
    }
    uint64_t v15 = v0[7];
    ++v2;
    _swiftEmptyArrayStorage[2] = v14 + 1;
    sub_10005C168(v15, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(void *)(v19 + 72) * v14);
  }
  while (v2 != 6);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void *))v0[1];
  return v16(_swiftEmptyArrayStorage);
}

uint64_t sub_10005F520()
{
  sub_10005F900(0, (unint64_t *)&unk_100104880, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v14 - v1;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_100028AF8((uint64_t)v2);
    sub_10005C1CC();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    id v8 = [self defaultWorkspace];
    if (!v8)
    {
      __break(1u);
      JUMPOUT(0x10005F824);
    }
    uint64_t v10 = v8;
    URL._bridgeToObjectiveC()(v9);
    uint64_t v12 = v11;
    sub_1000939E8((uint64_t)_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v10 openSensitiveURL:v12 withOptions:isa];

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_10005F83C@<X0>(uint64_t a1@<X8>)
{
  return sub_10005C514(v1, a1);
}

uint64_t sub_10005F848()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10005BE6C;
  return sub_10005F1F8();
}

uint64_t sub_10005F8D4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005F8E4()
{
  return sub_10005F520();
}

void sub_10005F900(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_10005F964()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v11 - v6;
  uint64_t v8 = *(void *)(v0 + 16);
  uint64_t v9 = *(void *)(v0 + 24);
  v11[4] = v8;
  void v11[5] = v9;
  swift_beginAccess();
  sub_10000E670();
  swift_bridgeObjectRetain();
  UserDefault.wrappedValue.setter();
  swift_endAccess();
  Date.init()();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
  swift_beginAccess();
  sub_10000E6C8();
  UserDefault.wrappedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v7, v1);
}

uint64_t sub_10005FB0C()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Health23IntroFlowThrottledCheck__lastCheckVersion;
  sub_10000E670();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC6Health23IntroFlowThrottledCheck__lastCheckDate;
  sub_10000E6C8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_10005FBF8()
{
  return type metadata accessor for IntroFlowThrottledCheck();
}

id sub_10005FC00()
{
  uint64_t v1 = OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___providedHealthToolbox;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___providedHealthToolbox);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___providedHealthToolbox);
  }
  else
  {
    id v4 = [self sharedInstanceForHealthStore:*(void *)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore)];
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_10005FC88()
{
  uint64_t v1 = OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryViewController;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryViewController);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryViewController);
  }
  else
  {
    uint64_t v4 = v0;
    sub_10001D360(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore, (uint64_t)v13);
    uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore);
    sub_10001D360(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_pinnedContentManager, (uint64_t)v12);
    id v6 = objc_allocWithZone((Class)type metadata accessor for SummaryFeedViewController());
    id v7 = v5;
    id v8 = sub_10001C6B0((uint64_t)v13, v7, (uint64_t)v12);

    uint64_t v9 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v8;
    id v3 = v8;

    uint64_t v2 = 0;
  }
  id v10 = v2;
  return v3;
}

id sub_10005FD54()
{
  return sub_10005FEF0(&OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryNavigationController, (uint64_t (*)(void))sub_10005FC88);
}

id sub_10005FD74()
{
  return sub_10005FDFC(&OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sharingViewController, (uint64_t (*)(void))&type metadata accessor for SharingOverviewViewController, (uint64_t (*)(unsigned char *, void *, unsigned char *))&SharingOverviewViewController.init(healthExperienceStore:healthStore:pinnedContentManager:));
}

id sub_10005FDA8()
{
  return sub_10005FEF0(&OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sharingNavigationController, (uint64_t (*)(void))sub_10005FD74);
}

id sub_10005FDC8()
{
  return sub_10005FDFC(&OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___browseViewController, (uint64_t (*)(void))&type metadata accessor for BrowseViewController, (uint64_t (*)(unsigned char *, void *, unsigned char *))&BrowseViewController.init(healthExperienceStore:healthStore:pinnedContentManager:));
}

id sub_10005FDFC(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(unsigned char *, void *, unsigned char *))
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void **)(v3 + *a1);
  if (v5)
  {
    id v6 = *(id *)(v3 + *a1);
  }
  else
  {
    uint64_t v9 = v3;
    sub_10001D360(v3 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore, (uint64_t)v17);
    id v10 = *(void **)(v3 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore);
    sub_10001D360(v3 + OBJC_IVAR____TtC6Health23MainSplitViewController_pinnedContentManager, (uint64_t)v16);
    id v11 = objc_allocWithZone((Class)a2(0));
    uint64_t v12 = (void *)a3(v17, v10, v16);
    unint64_t v13 = *(void **)(v3 + v4);
    *(void *)(v9 + v4) = v12;
    id v6 = v12;

    uint64_t v5 = 0;
  }
  id v14 = v5;
  return v6;
}

id sub_10005FED0()
{
  return sub_10005FEF0(&OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___browseNavigationController, (uint64_t (*)(void))sub_10005FDC8);
}

id sub_10005FEF0(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    id v6 = (void *)a2();
    id v7 = [objc_allocWithZone((Class)HKNavigationController) initWithRootViewController:v6];

    id v8 = [v7 navigationBar];
    [v8 setPrefersLargeTitles:1];

    uint64_t v9 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v7;
    id v5 = v7;

    uint64_t v4 = 0;
  }
  id v10 = v4;
  return v5;
}

id sub_10005FFB0()
{
  uint64_t v1 = OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___mainTabBarController;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___mainTabBarController);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___mainTabBarController);
  }
  else
  {
    uint64_t v4 = v0;
    id v5 = *(void **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore);
    sub_10001D360(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore, (uint64_t)v13);
    sub_10001D360(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_pinnedContentManager, (uint64_t)v12);
    id v6 = objc_allocWithZone((Class)type metadata accessor for MainTabBarController());
    id v7 = v5;
    id v8 = sub_100043920(v7, (uint64_t)v13, (uint64_t)v12);

    uint64_t v9 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v8;
    id v3 = v8;

    uint64_t v2 = 0;
  }
  id v10 = v2;
  return v3;
}

char *sub_100060078()
{
  uint64_t v1 = OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarViewController;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarViewController);
  if (v2)
  {
    id v3 = *(char **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarViewController);
  }
  else
  {
    uint64_t v4 = sub_1000600DC(v0);
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

char *sub_1000600DC(uint64_t a1)
{
  sub_10006579C(0, (unint64_t *)&qword_1001057E0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(void, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1000CD1C0;
  id v3 = sub_10005FC88();
  uint64_t v4 = sub_1000334E8(v3);

  *(void *)(v2 + 32) = v4;
  id v5 = sub_10005FD74();
  uint64_t v6 = sub_100033698(v5);

  *(void *)(v2 + 4sub_10004C8C4(0, 0) = v6;
  *(void *)&long long v21 = v2;
  specialized Array._endMutation()();
  uint64_t v7 = v2;
  id v8 = *(void **)(a1 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore);
  sub_10001D360(a1 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore, (uint64_t)&v21);
  uint64_t v9 = type metadata accessor for SidebarDataSourceProvider();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  sub_10001CD68(&v21, v10 + 24);
  *(void *)(v10 + 64) = v7;
  uint64_t v22 = v9;
  uint64_t v23 = &off_1000F5998;
  *(void *)&long long v21 = v10;
  id v11 = (char *)objc_allocWithZone((Class)type metadata accessor for MainSidebarViewController());
  uint64_t v12 = sub_1000374D8((uint64_t)&v21, v22);
  __chkstk_darwin(v12);
  id v14 = (uint64_t *)((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v16 = *v14;
  id v17 = v8;
  swift_retain();
  uint64_t v18 = (char *)sub_100064950(v16, v11);
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)&v21);
  *(void *)&v18[qword_100108E70 + 8] = &off_1000F70E0;
  swift_unknownObjectWeakAssign();
  swift_release();
  return v18;
}

id sub_100060308()
{
  uint64_t v1 = OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarNavigationController;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarNavigationController);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarNavigationController);
  }
  else
  {
    uint64_t v4 = sub_100060078();
    id v5 = [objc_allocWithZone((Class)HKNavigationController) initWithRootViewController:v4];

    uint64_t v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

char *sub_100060398()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore;
  id v3 = objc_allocWithZone((Class)HKHealthStore);
  uint64_t v4 = v1;
  *(void *)&v1[v2] = [v3 init];
  uint64_t v5 = OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore;
  if (qword_1001040A8 != -1) {
    swift_once();
  }
  uint64_t v6 = (uint64_t *)&v4[v5];
  uint64_t v7 = sub_100005BCC();
  v6[3] = type metadata accessor for DiskHealthExperienceStore();
  void v6[4] = (uint64_t)&protocol witness table for DiskHealthExperienceStore;
  *uint64_t v6 = v7;
  *(void *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___providedHealthToolbox] = 0;
  *(void *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController] = 0;
  *(void *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryViewController] = 0;
  *(void *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryNavigationController] = 0;
  *(void *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sharingViewController] = 0;
  *(void *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sharingNavigationController] = 0;
  *(void *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___browseViewController] = 0;
  *(void *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___browseNavigationController] = 0;
  *(void *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___mainTabBarController] = 0;
  *(void *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarViewController] = 0;
  *(void *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarNavigationController] = 0;
  uint64_t v8 = OBJC_IVAR____TtC6Health23MainSplitViewController_observerDelegates;
  uint64_t v9 = (void *)HKLogWellnessDashboard;
  id v10 = objc_allocWithZone((Class)HKObserverSet);
  id v11 = v9;
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v10 initWithName:v12 loggingCategory:v11];

  *(void *)&v4[v8] = v13;
  uint64_t v14 = type metadata accessor for PinnedContentManager();
  id v15 = *(id *)&v1[v2];
  uint64_t v16 = PinnedContentManager.__allocating_init(healthStore:domain:)();
  id v17 = (uint64_t *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController_pinnedContentManager];
  v17[3] = v14;
  void v17[4] = (uint64_t)&protocol witness table for PinnedContentManager;
  *id v17 = v16;

  v24.receiver = v4;
  v24.super_class = (Class)type metadata accessor for MainSplitViewController();
  uint64_t v18 = (char *)[super initWithStyle:1];
  [v18 setPreferredSplitBehavior:1];
  [v18 setDelegate:v18];
  id v19 = sub_10005FFB0();
  uint64_t v20 = *(void **)&v18[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController];
  *(void *)&v18[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController] = v19;

  sub_100064354();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000CBFD0;
  *(void *)(inited + 32) = type metadata accessor for UITraitHorizontalSizeClass();
  uint64_t v22 = v18;
  sub_1000B8B3C(inited);
  swift_setDeallocating();
  UIViewController.registerForTraitChanges(_:action:)();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return v22;
}

void sub_100060750()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UITraitOverrides();
  __chkstk_darwin(v2);
  id v3 = (objc_class *)type metadata accessor for MainSplitViewController();
  v14.receiver = v0;
  v14.super_class = v3;
  [super viewDidLoad];
  UIViewController.traitOverrides.getter();
  UIMutableTraits.rootNavigationMode.setter();
  UIViewController.traitOverrides.setter();
  id v4 = sub_100060308();
  [v1 setViewController:v4 forColumn:0];

  id v5 = sub_10005FD54();
  [v1 setViewController:v5 forColumn:2];

  id v6 = sub_10005FFB0();
  [v1 setViewController:v6 forColumn:3];

  id v7 = sub_100060308();
  id v8 = [v7 navigationBar];

  NSString v9 = String._bridgeToObjectiveC()();
  [v8 setAccessibilityIdentifier:v9];

  id v10 = [self mainBundle];
  v15._object = (void *)0x80000001000D2400;
  v11._uint64_t countAndFlagsBits = 0x686372616553;
  v11._object = (void *)0xE600000000000000;
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v15._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v15);

  sub_10001E254(0, &qword_100105848);
  id v13 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  [v1 addKeyCommand:v13];
}

void sub_100060C1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [v1 presentedViewController];
  if (v6)
  {
    id v7 = v6;
    id v15 = v6;
    sub_10001E254(0, (unint64_t *)&qword_100108820);
    sub_10001D414(0, (unint64_t *)&qword_1001057D0);
    id v8 = v7;
    if (swift_dynamicCast())
    {
      sub_10006428C((uint64_t)v13);
      static Logger.view.getter();
      NSString v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v9, v10))
      {
        Swift::String v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "asked to dismiss but the present view controller is StartupNotDismissible", v11, 2u);
        swift_slowDealloc();
        Swift::String v12 = v8;
      }
      else
      {
        Swift::String v12 = v9;
        NSString v9 = v8;
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      uint64_t v14 = 0;
      memset(v13, 0, sizeof(v13));
      sub_10006428C((uint64_t)v13);
      [v8 dismissViewControllerAnimated:0 completion:0];
    }
  }
}

uint64_t sub_100060ED4(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

void sub_100060F84(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  Swift::String v12 = *(void **)&a1[OBJC_IVAR____TtC6Health23MainSplitViewController_observerDelegates];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  v18[4] = a6;
  v18[5] = v13;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  void v18[2] = sub_100060ED4;
  v18[3] = a7;
  uint64_t v14 = _Block_copy(v18);
  id v15 = a3;
  uint64_t v16 = a1;
  id v17 = v12;
  swift_release();
  [v17 notifyObservers:v14];
  _Block_release(v14);
}

void sub_100061088(void *a1, uint64_t a2)
{
  sub_1000658F0(a2, (uint64_t)v13);
  uint64_t v4 = v14;
  if (v14)
  {
    id v5 = sub_1000190DC(v13, v14);
    uint64_t v6 = *(void *)(v4 - 8);
    __chkstk_darwin(v5);
    id v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v6 + 16))(v8);
    uint64_t v9 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v13);
  }
  else
  {
    uint64_t v9 = 0;
  }
  os_log_type_t v10 = (objc_class *)type metadata accessor for MainSplitViewController();
  v12.receiver = v2;
  v12.super_class = v10;
  [super showDetailViewController:a1 sender:v9];
  swift_unknownObjectRelease();
  Swift::String v11 = sub_100060078();
  sub_1000C2F80(a1);
}

void sub_1000612A8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v59 = a1;
  uint64_t v58 = type metadata accessor for UITraitOverrides();
  __chkstk_darwin(v58);
  uint64_t v57 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [objc_allocWithZone((Class)HKNavigationController) init];
  id v5 = sub_10005FD54();
  Class isa = (Class)[v5 viewControllers];

  if (!isa)
  {
    sub_10001E254(0, (unint64_t *)&qword_100108820);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v4 setViewControllers:isa];

  id v7 = [v4 navigationBar];
  [v7 setPrefersLargeTitles:1];

  id v8 = sub_10005FD54();
  sub_10001E254(0, (unint64_t *)&qword_100108820);
  Class v9 = Array._bridgeToObjectiveC()().super.isa;
  [v8 setViewControllers:v9];

  id v10 = [objc_allocWithZone((Class)HKNavigationController) init];
  id v11 = sub_10005FDA8();
  Class v12 = (Class)[v11 viewControllers];

  if (!v12)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class v12 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v10 setViewControllers:v12];

  id v13 = [v10 navigationBar];
  [v13 setPrefersLargeTitles:1];

  id v14 = sub_10005FDA8();
  Class v15 = Array._bridgeToObjectiveC()().super.isa;
  [v14 setViewControllers:v15];

  id v16 = [objc_allocWithZone((Class)HKNavigationController) init];
  id v17 = sub_10005FED0();
  id v18 = [v17 viewControllers];

  unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t aBlock[6] = v19;
  if (!(v19 >> 62))
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_7;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    id v23 = sub_10005FDC8();
LABEL_15:

    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v19 & 0xC000000000000001) != 0)
  {
    id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_33;
    }
    id v21 = *(id *)(v19 + 32);
  }
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  id v23 = sub_10005FDC8();
  if (!v22) {
    goto LABEL_15;
  }
  id v24 = v22;
  char v25 = static NSObject.== infix(_:_:)();

  if ((v25 & 1) == 0)
  {
LABEL_16:
    id v26 = sub_10005FDC8();
    if (!(v19 >> 62)
      || (swift_bridgeObjectRetain(),
          uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(),
          swift_bridgeObjectRelease(),
          (v27 & 0x8000000000000000) == 0))
    {
      sub_1000643F8(0, 0, (uint64_t)v26);
      goto LABEL_19;
    }
LABEL_33:
    __break(1u);
    return;
  }
LABEL_19:
  id v28 = v16;
  Class v29 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v28 setViewControllers:v29];

  id v30 = [v28 navigationBar];
  [v30 setPrefersLargeTitles:1];

  id v31 = sub_10005FED0();
  Class v32 = Array._bridgeToObjectiveC()().super.isa;
  [v31 setViewControllers:v32];

  id v33 = sub_10005FFB0();
  sub_10006579C(0, (unint64_t *)&qword_1001057E0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(void, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1000CC530;
  *(void *)(v34 + 32) = v4;
  *(void *)(v34 + 4sub_10004C8C4(0, 0) = v10;
  *(void *)(v34 + 48) = v28;
  aBlock[0] = v34;
  specialized Array._endMutation()();
  id v35 = v4;
  id v36 = v10;
  id v37 = v28;
  Class v38 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v33 setViewControllers:v38];

  id v39 = [v2 viewControllerForColumn:2];
  id v40 = sub_10005FDA8();
  uint64_t v41 = v40;
  if (!v39)
  {

    goto LABEL_25;
  }
  id v42 = v39;
  char v43 = static NSObject.== infix(_:_:)();

  if ((v43 & 1) == 0)
  {
    id v45 = sub_10005FD54();
    id v46 = v42;
    char v47 = static NSObject.== infix(_:_:)();

    if (v47)
    {
      uint64_t v44 = 0;
      goto LABEL_26;
    }
LABEL_25:
    uint64_t v44 = 2;
    goto LABEL_26;
  }
  uint64_t v44 = 1;
LABEL_26:
  uint64_t v48 = v59;
  id v49 = sub_10005FFB0();
  [v49 setSelectedIndex:v44];

  UIViewController.traitOverrides.getter();
  UIMutableTraits.rootNavigationMode.setter();
  UIViewController.traitOverrides.setter();
  id v50 = sub_100062474();
  id v51 = [v50 navigationController];

  if (v51)
  {
    self;
    if (swift_dynamicCastObjCClass()) {
      HKNavigationController.reparentModalToPushIfPossible()();
    }
  }
  uint64_t v52 = *(void **)&v2[OBJC_IVAR____TtC6Health23MainSplitViewController_observerDelegates];
  uint64_t v53 = swift_allocObject();
  *(void *)(v53 + 16) = v48;
  aBlock[4] = sub_10006582C;
  aBlock[5] = v53;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100060ED4;
  aBlock[3] = &unk_1000F7190;
  uint64_t v54 = _Block_copy(aBlock);
  id v55 = v52;
  id v56 = v48;
  swift_release();
  [v55 notifyObservers:v54];

  _Block_release(v54);
}

void sub_100061ABC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for UITraitOverrides();
  __chkstk_darwin(v5);
  id v6 = sub_10005FFB0();
  id v7 = [v6 viewControllers];

  if (v7)
  {
    sub_10001E254(0, (unint64_t *)&qword_100108820);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v9 = (unint64_t)sub_100062224(v8);
    swift_bridgeObjectRelease();
    if (v9)
    {
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v23 >= 3)
        {
LABEL_5:
          id v10 = sub_10005FD54();
          unint64_t v40 = v9 & 0xC000000000000001;
          if ((v9 & 0xC000000000000001) != 0)
          {
            id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_30;
            }
            id v11 = *(id *)(v9 + 32);
          }
          Class v12 = v11;
          Class isa = (Class)[v11 viewControllers];

          if (!isa)
          {
            static Array._unconditionallyBridgeFromObjectiveC(_:)();
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          [v10 setViewControllers:isa];

          id v14 = sub_10005FDA8();
          if (v40)
          {
            id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
            {
LABEL_50:
              __break(1u);
              goto LABEL_51;
            }
            id v15 = *(id *)(v9 + 40);
          }
          id v16 = v15;
          Class v17 = (Class)[v15 viewControllers];

          if (!v17)
          {
            static Array._unconditionallyBridgeFromObjectiveC(_:)();
            Class v17 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          [v14 setViewControllers:v17];

          if (v40)
          {
            id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            unint64_t v19 = &stru_100100000;
          }
          else
          {
            unint64_t v19 = &stru_100100000;
            if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3uLL)
            {
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
              goto LABEL_53;
            }
            id v18 = *(id *)(v9 + 48);
          }
          swift_bridgeObjectRelease();
          id v20 = [v18 v19[110].name];

          unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
          aBlock[0] = v9;
          unint64_t v2 = v9 >> 62;
          if (!(v9 >> 62))
          {
            if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) > 1uLL) {
              goto LABEL_22;
            }
            goto LABEL_38;
          }
LABEL_30:
          swift_bridgeObjectRetain();
          uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v24 >= 2)
          {
            swift_bridgeObjectRetain();
            uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v25)
            {
LABEL_53:
              __break(1u);
              return;
            }
            swift_bridgeObjectRetain();
            uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v26)
            {
              __break(1u);
              goto LABEL_34;
            }
LABEL_22:
            if ((v9 & 0xC000000000000001) == 0)
            {
              if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                id v21 = *(id *)(v9 + 32);
                if (!v2)
                {
LABEL_25:
                  uint64_t v22 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  goto LABEL_36;
                }
LABEL_35:
                swift_bridgeObjectRetain();
                uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
LABEL_36:
                if (v22)
                {
                  sub_1000651B4(0, 1);

                  goto LABEL_38;
                }
                goto LABEL_52;
              }
              __break(1u);
              goto LABEL_50;
            }
LABEL_34:
            id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            if (!v2) {
              goto LABEL_25;
            }
            goto LABEL_35;
          }
LABEL_38:
          id v27 = sub_10005FED0();
          Class v28 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v27 setViewControllers:v28];

          goto LABEL_39;
        }
      }
      else if (*(uint64_t *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 3)
      {
        goto LABEL_5;
      }
      swift_bridgeObjectRelease();
    }
  }
LABEL_39:
  id v29 = sub_10005FFB0();
  id v30 = [v29 selectedIndex];

  if (v30 == (id)2)
  {
    id v31 = sub_10005FED0();
  }
  else if (v30 == (id)1)
  {
    id v31 = sub_10005FDA8();
  }
  else
  {
    id v31 = sub_10005FD54();
  }
  Class v32 = v31;
  [v3 setViewController:v31 forColumn:2];

  UIViewController.traitOverrides.getter();
  UIMutableTraits.rootNavigationMode.setter();
  UIViewController.traitOverrides.setter();
  id v33 = sub_100062474();
  id v34 = [v33 navigationController];

  if (v34)
  {
    self;
    if (swift_dynamicCastObjCClass()) {
      HKNavigationController.reparentPushToModalIfPossible()();
    }
  }
  id v35 = *(void **)&v3[OBJC_IVAR____TtC6Health23MainSplitViewController_observerDelegates];
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = a1;
  aBlock[4] = sub_100065820;
  aBlock[5] = v36;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100060ED4;
  aBlock[3] = &unk_1000F7140;
  id v37 = _Block_copy(aBlock);
  id v38 = v35;
  id v39 = a1;
  swift_release();
  [v38 notifyObservers:v37];
  _Block_release(v37);
}

void *sub_1000620DC(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  Class v12 = _swiftEmptyArrayStorage;
  sub_100096504(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_100018EC4(i, (uint64_t)v11);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100096504(0, v3[2] + 1, 1);
        uint64_t v3 = v12;
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        sub_100096504(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v12;
      }
      v3[2] = v6 + 1;
      id v7 = &v3[2 * v6];
      v7[4] = v9;
      uint64_t v7[5] = v10;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

void *sub_100062224(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v4 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        self;
        if (!swift_dynamicCastObjCClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v4 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = v1 + 32;
      while (1)
      {
        uint64_t v7 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          break;
        }
        unint64_t v8 = *(void **)(v6 + 8 * v5);
        self;
        uint64_t v9 = swift_dynamicCastObjCClass();
        if (!v9)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        uint64_t v1 = v9;
        id v10 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v5;
        if (v7 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    specialized ContiguousArray.reserveCapacity(_:)();
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

id sub_100062474()
{
  id v1 = [v0 traitCollection];
  UITraitCollection.rootNavigationMode.getter();

  if ((static RootNavigationMode.== infix(_:_:)() & 1) == 0)
  {
    id v4 = sub_10005FFB0();
    id v5 = [v4 selectedViewController];
    if (v5)
    {
      uint64_t v6 = v5;
      self;
      if (swift_dynamicCastObjCClass())
      {
        unint64_t v7 = (unint64_t)UINavigationController.rootViewController()();

        if (v7)
        {

          return (id)v7;
        }
      }
      else
      {
      }
    }
    return v4;
  }
  id v2 = [v9 viewControllerForColumn:2];
  if (v2)
  {
    uint64_t v3 = v2;
    self;
    if (swift_dynamicCastObjCClass())
    {
      id v4 = (id)UINavigationController.rootViewController()();

      if (!v4) {
        goto LABEL_11;
      }
      return v4;
    }
  }
LABEL_11:

  return v9;
}

void sub_1000625CC()
{
  id v1 = v0;
  id v2 = [v0 traitCollection];
  UITraitCollection.rootNavigationMode.getter();

  if (static RootNavigationMode.== infix(_:_:)())
  {
    [v1 setPreferredDisplayMode:2];
    if (sub_100062798()) {
      return;
    }
    id v3 = sub_10005FED0();
    sub_10006579C(0, (unint64_t *)&qword_1001057E0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(void, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1000CC620;
    *(void *)(v4 + 32) = sub_10005FDC8();
    specialized Array._endMutation()();
    sub_10001E254(0, (unint64_t *)&qword_100108820);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v3 setViewControllers:isa animated:0];

    id v6 = sub_10005FED0();
    unint64_t v7 = *(void **)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController];
    *(void *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController] = v6;

    id v8 = sub_10005FED0();
    [v1 setViewController:forColumn:];
  }
  else
  {
    id v8 = sub_10005FFB0();
    [v8 setSelectedIndex:2];
  }
}

uint64_t sub_100062798()
{
  id v1 = [v0 viewControllerForColumn:2];
  id v2 = sub_10005FED0();
  if (!v1) {
    goto LABEL_5;
  }
  sub_10001E254(0, (unint64_t *)&qword_100108820);
  id v3 = v1;
  char v4 = static NSObject.== infix(_:_:)();

  if ((v4 & 1) == 0)
  {
    char v8 = 0;
    return v8 & 1;
  }
  id v5 = sub_10005FED0();
  id v6 = (void *)UINavigationController.rootViewController()();

  id v2 = sub_10005FDC8();
  if (v6)
  {
    id v7 = v6;
    char v8 = static NSObject.== infix(_:_:)();
  }
  else
  {
LABEL_5:
    char v8 = 0;
  }

  return v8 & 1;
}

void sub_100062898()
{
  if ([v0 displayMode] == (id)3) {
    [v0 hideColumn:0];
  }
  id v1 = [v0 viewControllerForColumn:2];
  if (v1)
  {
    id v3 = v1;
    self;
    id v2 = (void *)swift_dynamicCastObjCClass();
    if (v2) {
  }
    }
}

id sub_1000629C0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MainSplitViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for MainSplitViewController()
{
  return self;
}

id sub_100062B34()
{
  return *(id *)(*v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore);
}

uint64_t sub_100062B48@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D360(*v1 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore, a1);
}

uint64_t sub_100062B74@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D360(*v1 + OBJC_IVAR____TtC6Health23MainSplitViewController_pinnedContentManager, a1);
}

id sub_100062BA0()
{
  return sub_10005FC00();
}

id sub_100062BC4(uint64_t a1)
{
  return [*(id *)(v1 + OBJC_IVAR____TtC6Health23MainSplitViewController_observerDelegates) registerObserver:a1];
}

id sub_100062BE0(uint64_t a1)
{
  return [*(id *)(v1 + OBJC_IVAR____TtC6Health23MainSplitViewController_observerDelegates) unregisterObserver:a1];
}

uint64_t sub_100062BFC(void *a1)
{
  id v2 = sub_100062474();
  id v3 = [v2 navigationController];

  if (!v3) {
    return 0;
  }
  sub_10001E254(0, &qword_1001063C8);
  id v4 = a1;
  char v5 = static NSObject.== infix(_:_:)();

  return v5 & 1;
}

void sub_100062C9C(void *a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v79 = v4;
  uint64_t v80 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v77 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v76 = (uint8_t *)&v74 - v9;
  __chkstk_darwin(v8);
  uint64_t v74 = (char *)&v74 - v10;
  sub_100065738(0, (unint64_t *)&qword_100104D68, (uint64_t (*)(uint64_t))&type metadata accessor for DeepLinkActivityType, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v11 - 8);
  id v13 = (char *)&v74 - v12;
  uint64_t v81 = type metadata accessor for DeepLinkActivityType();
  Class isa = v81[-1].isa;
  uint64_t v15 = __chkstk_darwin(v81);
  uint64_t v75 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v74 - v18;
  __chkstk_darwin(v17);
  uint64_t v78 = (char *)&v74 - v20;
  uint64_t v21 = type metadata accessor for HAUserActivity.RestorationInfoKey();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = [v1 traitCollection];
  UITraitCollection.rootNavigationMode.getter();

  if (static RootNavigationMode.== infix(_:_:)())
  {
    uint64_t v26 = NSUserActivity.fetchProfileIdentifier()();
    if (v26)
    {
      id v27 = v26;
      if ([v26 type] != (id)1)
      {
        id v28 = sub_10005FDA8();
        [v2 setViewController:v28 forColumn:2];

        id v29 = sub_10005FDA8();
        id v30 = sub_10005FDA8();
        [v30 restoreUserActivityState:a1];

        id v27 = v30;
      }
    }
    (*(void (**)(char *, void, uint64_t))(v22 + 104))(v24, enum case for HAUserActivity.RestorationInfoKey.selectedSidebarItemIdentifier(_:), v21);
    sub_1000658A8(&qword_1001063D8, 255, (void (*)(uint64_t))&type metadata accessor for HAUserActivity.RestorationInfoKey);
    NSUserActivity.retrieveUserInfoValueForKey<A>(_:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    if (v84[3])
    {
      if (swift_dynamicCast())
      {
        uint64_t v31 = v82;
        uint64_t v32 = v83;
        id v33 = sub_100060078();
        id v34 = &v33[qword_100108E78];
        uint64_t v35 = *(void *)&v33[qword_100108E78];
        uint64_t v36 = *(void *)&v33[qword_100108E78 + 8];
        *(void *)id v34 = v31;
        *((void *)v34 + 1) = v32;
        sub_1000C158C(v35, v36);

        swift_bridgeObjectRelease();
      }
    }
    else
    {
      sub_100011F6C((uint64_t)v84, (uint64_t)&qword_1001059F0, (uint64_t)&type metadata for Any + 8, (uint64_t (*)(void, uint64_t, uint64_t, void *))sub_10006579C);
    }
    id v38 = v81;
    id v39 = [a1 activityType];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    DeepLinkActivityType.init(_:)();
    if ((*((unsigned int (**)(char *, uint64_t, NSObject *))isa + 6))(v13, 1, v38) == 1)
    {
      sub_100011F6C((uint64_t)v13, (uint64_t)&qword_100104D68, (uint64_t)&type metadata accessor for DeepLinkActivityType, (uint64_t (*)(void, uint64_t, uint64_t, void *))sub_100065738);
      unint64_t v40 = v77;
      static Logger.view.getter();
      id v41 = a1;
      id v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        v84[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 136315138;
        uint64_t v81 = (v44 + 4);
        id v45 = [v41 activityType];
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v48 = v47;

        uint64_t v82 = sub_100018DA0(v46, v48, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "asked to restore activity but couldn't decode it, type: %s", v44, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v80 + 8))(v40, v79);
      return;
    }
    uint64_t v49 = (uint64_t)v78;
    (*((void (**)(char *, char *, NSObject *))isa + 4))(v78, v13, v38);
    (*((void (**)(char *, void, NSObject *))isa + 13))(v19, enum case for DeepLinkActivityType.plugin(_:), v38);
    sub_1000658A8(&qword_1001063E0, 255, (void (*)(uint64_t))&type metadata accessor for DeepLinkActivityType);
    char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
    id v51 = (void (*)(char *, NSObject *))*((void *)isa + 1);
    v51(v19, v38);
    if (v50)
    {
      uint64_t v52 = v76;
      static Logger.view.getter();
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v53, v54))
      {
        id v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v55 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Ignoring plugin type once configured sidebar", v55, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(uint8_t *, uint64_t))(v80 + 8))(v52, v79);
      goto LABEL_40;
    }
    sub_1000638B8(v49);
    id v56 = v75;
    (*((void (**)(char *, uint64_t, NSObject *))isa + 2))(v75, v49, v38);
    int v57 = (*((uint64_t (**)(char *, NSObject *))isa + 11))(v56, v38);
    if (v57 != enum case for DeepLinkActivityType.allHealthData(_:)
      && v57 != enum case for DeepLinkActivityType.allTrends(_:))
    {
      if (v57 == enum case for DeepLinkActivityType.browse(_:))
      {
        id v58 = sub_10005FED0();
LABEL_38:
        uint64_t v59 = v58;
        [v58 restoreUserActivityState:a1];
LABEL_39:

        goto LABEL_40;
      }
      if (v57 == enum case for DeepLinkActivityType.category(_:)
        || v57 == enum case for DeepLinkActivityType.dataTypeAddData(_:)
        || v57 == enum case for DeepLinkActivityType.dataTypeAllData(_:)
        || v57 == enum case for DeepLinkActivityType.dataTypeDetail(_:))
      {
        type metadata accessor for CategoryViewController();
        uint64_t v61 = static CategoryViewController.makeCategoryViewController(userActivity:healthStore:healthExperienceStore:pinnedContentManager:)();
        if (v61)
        {
          uint64_t v59 = (void *)v61;
          uint64_t v62 = sub_100060078();
          sub_1000654A4(v59);

          [v59 restoreUserActivityState:a1];
          goto LABEL_39;
        }
      }
      else
      {
        if (v57 == enum case for DeepLinkActivityType.dataTypeHighlights(_:)
          || v57 == enum case for DeepLinkActivityType.notificationSettings(_:))
        {
          goto LABEL_37;
        }
        if (v57 == enum case for DeepLinkActivityType.sharingInviteFlow(_:)
          || v57 == enum case for DeepLinkActivityType.sharingOverview(_:)
          || v57 == enum case for DeepLinkActivityType.sharingProfile(_:))
        {
          id v58 = sub_10005FDA8();
          goto LABEL_38;
        }
        if (v57 == enum case for DeepLinkActivityType.summary(_:)) {
          goto LABEL_37;
        }
        v51(v56, v38);
      }
      uint64_t v63 = v74;
      static Logger.general.getter();
      id v64 = a1;
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v81 = v65;
        uint64_t v67 = (uint8_t *)swift_slowAlloc();
        uint64_t v77 = (char *)swift_slowAlloc();
        v84[0] = (uint64_t)v77;
        *(_DWORD *)uint64_t v67 = 136315138;
        uint64_t v75 = (char *)(v67 + 4);
        uint64_t v76 = v67;
        uint64_t v68 = v49;
        id v69 = [v64 activityType];
        uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v72 = v71;

        uint64_t v82 = sub_100018DA0(v70, v72, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        uint64_t v73 = v81;
        _os_log_impl((void *)&_mh_execute_header, v81, v66, "decoded activity was not handled, type: %s", v76, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v80 + 8))(v74, v79);
        uint64_t v60 = v68;
        goto LABEL_41;
      }

      (*(void (**)(char *, uint64_t))(v80 + 8))(v63, v79);
LABEL_40:
      uint64_t v60 = v49;
LABEL_41:
      v51((char *)v60, v38);
      return;
    }
LABEL_37:
    id v58 = sub_10005FD54();
    goto LABEL_38;
  }
  uint64_t v81 = sub_10005FFB0();
  [v81 restoreUserActivityState:a1];
  id v37 = v81;
}

void sub_1000638B8(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for DeepLinkActivityType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [v1 traitCollection];
  UITraitCollection.rootNavigationMode.getter();

  if (static RootNavigationMode.== infix(_:_:)())
  {
    sub_100060C1C();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    int v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
    if (v9 != enum case for DeepLinkActivityType.allHealthData(_:)
      && v9 != enum case for DeepLinkActivityType.allTrends(_:))
    {
      if (v9 == enum case for DeepLinkActivityType.browse(_:))
      {
        sub_1000625CC();
        return;
      }
      if (v9 != enum case for DeepLinkActivityType.dataTypeHighlights(_:)
        && v9 != enum case for DeepLinkActivityType.notificationSettings(_:))
      {
        if (v9 == enum case for DeepLinkActivityType.sharingInviteFlow(_:)
          || v9 == enum case for DeepLinkActivityType.sharingOverview(_:)
          || v9 == enum case for DeepLinkActivityType.sharingProfile(_:))
        {
          id v20 = sub_10005FDA8();
          uint64_t v21 = *(void **)&v2[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController];
          *(void *)&v2[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController] = v20;

          id v22 = sub_10005FDA8();
          [v2 setViewController:v22 forColumn:2];

          id v14 = sub_10005FDA8();
          id v15 = [v14 popToRootViewControllerAnimated:0];
          goto LABEL_8;
        }
        if (v9 != enum case for DeepLinkActivityType.summary(_:))
        {
          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          return;
        }
      }
    }
    id v11 = sub_10005FD54();
    uint64_t v12 = *(void **)&v2[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController];
    *(void *)&v2[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController] = v11;

    id v13 = sub_10005FD54();
    [v2 setViewController:v13 forColumn:2];

    id v14 = sub_10005FD54();
    id v15 = [v14 popToRootViewControllerAnimated:0];
LABEL_8:

    return;
  }
  id v24 = sub_10005FFB0();
  sub_100042970(a1);
  uint64_t v16 = v24;
}

void sub_100063C40()
{
  id v1 = [v0 traitCollection];
  UITraitCollection.rootNavigationMode.getter();

  if (static RootNavigationMode.== infix(_:_:)())
  {
    id v2 = sub_100060078();
    sub_1000625CC();
    id v3 = &v2[qword_100108E78];
    uint64_t v4 = *(void *)&v2[qword_100108E78];
    uint64_t v5 = *(void *)&v2[qword_100108E78 + 8];
    *(void *)id v3 = 0;
    *((void *)v3 + 1) = 0;
    sub_1000C158C(v4, v5);
    swift_bridgeObjectRelease();
    id v6 = sub_10005FDC8();
    id v7 = sub_1000C1AC8();
    dispatch thunk of BrowseViewController.setActiveSearchController(_:)();

    id v8 = sub_100060078();
    id v9 = sub_1000C1AC8();

    id v10 = [v9 searchBar];
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 setText:v11];

    uint64_t v12 = sub_100060078();
    sub_1000625CC();
    id v13 = sub_10005FDC8();
    dispatch thunk of BrowseViewController.searchTextDidChange(_:)();
  }
  else
  {
    id v13 = sub_10005FFB0();
    sub_100042B80();
  }
}

void sub_100063DF4(void *a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = type metadata accessor for DeepLinkViewControllerPlacement();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (unsigned __int8 *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [v2 traitCollection];
  UITraitCollection.rootNavigationMode.getter();

  if (static RootNavigationMode.== infix(_:_:)())
  {
    (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    int v11 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v7 + 88))(v9, v6);
    if (v11 == enum case for DeepLinkViewControllerPlacement.regularSecondaryCompactBrowse(_:))
    {
      uint64_t v12 = sub_100060078();
      sub_1000654A4(a1);

      return;
    }
    if (v11 == enum case for DeepLinkViewControllerPlacement.onSummary(_:))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 96))(v9, v6);
      int v14 = *v9;
      id v15 = sub_10005FD54();
      [v3 setViewController:v15 forColumn:2];
      if (v14 == 1) {
        goto LABEL_15;
      }
      goto LABEL_16;
    }
    if (v11 == enum case for DeepLinkViewControllerPlacement.onBrowse(_:))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 96))(v9, v6);
      int v16 = *v9;
      id v15 = sub_10005FED0();
      [v3 setViewController:v15 forColumn:2];
      if (v16 == 1) {
        goto LABEL_15;
      }
      goto LABEL_16;
    }
    if (v11 == enum case for DeepLinkViewControllerPlacement.onSharing(_:))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 96))(v9, v6);
      int v17 = *v9;
      id v15 = sub_10005FDA8();
      [v3 setViewController:v15 forColumn:2];
      if (v17 == 1) {
LABEL_15:
      }

LABEL_16:
      [v15 pushViewController:a1 animated:0];

      return;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    id v19 = sub_10005FFB0();
    sub_1000434AC((uint64_t)a1, a2);
    id v13 = v19;
  }
}

void sub_10006414C(uint64_t a1)
{
}

void sub_100064170()
{
}

void sub_100064194()
{
}

id sub_1000641B8()
{
  return sub_100062474();
}

void sub_1000641DC(void *a1, uint64_t a2)
{
}

void *sub_100064200()
{
  id v1 = *(void **)(*v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController);
  id v2 = v1;
  return v1;
}

uint64_t sub_100064234(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000658A8(&qword_1001063C0, a2, (void (*)(uint64_t))type metadata accessor for MainSplitViewController);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10006428C(uint64_t a1)
{
  sub_1000642E8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000642E8()
{
  if (!qword_1001063D0)
  {
    sub_10001D414(255, (unint64_t *)&qword_1001057D0);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001063D0);
    }
  }
}

void sub_100064354()
{
  unint64_t v0 = sub_100065A40();
  if (swift_isClassType()) {
    unint64_t v1 = v0;
  }
  else {
    unint64_t v1 = 0;
  }
  if (v1) {
    sub_10006579C(0, (unint64_t *)&qword_1001057E0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(void, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  }
  else {
    sub_100065738(0, &qword_1001063F8, (uint64_t (*)(uint64_t))sub_100065A40, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  }
}

uint64_t sub_1000643F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!(*v4 >> 62))
    {
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v5) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v8 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v23 + v7;
    if (!__OFADD__(v23, v7)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v9 + v7;
  if (__OFADD__(v9, v7)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      unint64_t *v4 = v11;
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  int v14 = (void *)(v13 + 32 + 8 * v6);
  sub_10001E254(0, (unint64_t *)&qword_100108820);
  swift_arrayDestroy();
  if (v7)
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_17:
        if (v16 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        int v17 = (char *)(v14 + 1);
        uint64_t v18 = (char *)(v13 + 32 + 8 * v5);
        if (v14 + 1 != (void *)v18 || v17 >= &v18[8 * v16]) {
          memmove(v17, v18, 8 * v16);
        }
        if (!(v11 >> 62))
        {
          uint64_t v19 = *(void *)(v13 + 16);
          uint64_t v20 = v19 + v7;
          if (!__OFADD__(v19, v7))
          {
LABEL_23:
            *(void *)(v13 + 16) = v20;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v20 = v25 + v7;
        if (!__OFADD__(v25, v7)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = v15 - v5;
      if (!__OFSUB__(v15, v5)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  *int v14 = v3;

  return specialized Array._endMutation()();
}

uint64_t sub_1000646F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SidebarSection();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SidebarDataSourceProvider();
  uint64_t v20 = v6;
  uint64_t v21 = &off_1000F5998;
  v19[0] = a1;
  sub_10001E9E8();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1000CD120;
  sub_1000190DC(v19, v6);
  *(void *)(v7 + 32) = sub_1000322B8();
  *(void *)(v7 + 4sub_10004C8C4(0, 0) = v8;
  uint64_t v9 = *sub_1000190DC(v19, v20);
  sub_10001D360(v9 + 24, (uint64_t)v18);
  uint64_t v10 = *(void **)(v9 + 16);
  unint64_t v11 = *(void (**)(char *, void, uint64_t))(v3 + 104);
  v11(v5, enum case for SidebarSection.healthCategory(_:), v2);
  type metadata accessor for SidebarFeedItemDataSource(0);
  swift_allocObject();
  uint64_t v12 = sub_1000325A8(v18, v10, (uint64_t)v5);
  uint64_t v13 = sub_1000658A8(&qword_1001063E8, 255, (void (*)(uint64_t))type metadata accessor for SidebarFeedItemDataSource);
  *(void *)(v7 + 48) = v12;
  *(void *)(v7 + 56) = v13;
  uint64_t v14 = *sub_1000190DC(v19, v20);
  sub_10001D360(v14 + 24, (uint64_t)v18);
  uint64_t v15 = *(void **)(v14 + 16);
  v11(v5, enum case for SidebarSection.healthRecords(_:), v2);
  swift_allocObject();
  *(void *)(v7 + 64) = sub_1000325A8(v18, v15, (uint64_t)v5);
  *(void *)(v7 + 72) = v13;
  uint64_t v16 = CompoundSectionedDataSource.init(_:)();
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v19);
  return v16;
}

id sub_100064950(uint64_t a1, char *a2)
{
  uint64_t v4 = type metadata accessor for SidebarDataSourceProvider();
  v37[4] = &off_1000F5998;
  v37[3] = v4;
  v37[0] = a1;
  uint64_t v5 = &a2[qword_100108E68];
  uint64_t v6 = enum case for Presentation.sidebar(_:);
  uint64_t v7 = type metadata accessor for Presentation();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(v5, v6, v7);
  *(void *)&a2[qword_100108E70 + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v8 = (uint64_t *)&a2[qword_100108E78];
  type metadata accessor for SidebarDataSourceItem();
  uint64_t v9 = a2;
  *uint64_t v8 = static SidebarDataSourceItem.summarySidebarItemIdentifier.getter();
  v8[1] = v10;
  *(void *)&v9[qword_100108698] = 0;
  NSDiffableDataSourceSnapshot.init()();
  *(void *)&v9[qword_1001086A8] = 0;
  uint64_t v11 = (uint64_t)&v9[qword_100108690];
  sub_10001D360((uint64_t)v37, (uint64_t)&v9[qword_100108690]);
  sub_10001D360(v11, (uint64_t)v36);
  uint64_t v12 = sub_1000374D8((uint64_t)v36, v36[3]);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)&v35[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v16 = *v14;
  void v35[3] = v4;
  v35[4] = &off_1000F5998;
  v35[0] = v16;
  type metadata accessor for MainSidebarDataSource(0);
  swift_allocObject();
  uint64_t v17 = sub_1000374D8((uint64_t)v35, v4);
  __chkstk_darwin(v17);
  uint64_t v19 = (void *)((char *)&v35[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  sub_1000646F4(*v19);
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v35);
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v36);

  swift_retain();
  id v21 = (id)CollapsibleListCollectionViewController.init(dataSource:)();
  id result = [v21 collectionView];
  if (result)
  {
    uint64_t v23 = result;
    v36[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v36[1] = v24;
    swift_bridgeObjectRetain();
    v25._uint64_t countAndFlagsBits = 0xD000000000000016;
    v25._object = (void *)0x80000001000D3EE0;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v23 setAccessibilityIdentifier:v26];

    id v27 = self;
    id v28 = v21;
    id v29 = [v27 mainBundle];
    v38._object = (void *)0x80000001000D3F00;
    v30._uint64_t countAndFlagsBits = 0x415F48544C414548;
    v30._object = (void *)0xEA00000000005050;
    v31._uint64_t countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    v38._uint64_t countAndFlagsBits = 0xD000000000000013;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v30, (Swift::String_optional)0, (NSBundle)v29, v31, v38);

    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v28 setTitle:v32];

    dispatch thunk of CompoundDataSourceCollectionViewController.dataSource.getter();
    id v33 = (void *)dispatch thunk of CompoundSectionedDataSource.changeObservers.getter();
    swift_release();
    [v33 registerObserver:v28];
    swift_release();

    _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v37);
    return v28;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100064DF0()
{
  unint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore;
  *(void *)&v1[v2] = [objc_allocWithZone((Class)HKHealthStore) init];
  uint64_t v3 = OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore;
  if (qword_1001040A8 != -1) {
    swift_once();
  }
  uint64_t v4 = (uint64_t *)&v1[v3];
  uint64_t v5 = sub_100005BCC();
  v4[3] = type metadata accessor for DiskHealthExperienceStore();
  v4[4] = (uint64_t)&protocol witness table for DiskHealthExperienceStore;
  uint64_t *v4 = v5;
  *(void *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___providedHealthToolbox] = 0;
  *(void *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController] = 0;
  *(void *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryViewController] = 0;
  *(void *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryNavigationController] = 0;
  *(void *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sharingViewController] = 0;
  *(void *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sharingNavigationController] = 0;
  *(void *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___browseViewController] = 0;
  *(void *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___browseNavigationController] = 0;
  *(void *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___mainTabBarController] = 0;
  *(void *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarViewController] = 0;
  *(void *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarNavigationController] = 0;
  uint64_t v6 = OBJC_IVAR____TtC6Health23MainSplitViewController_observerDelegates;
  uint64_t v7 = (void *)HKLogWellnessDashboard;
  id v8 = objc_allocWithZone((Class)HKObserverSet);
  id v9 = v7;
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v8 initWithName:v10 loggingCategory:v9];

  *(void *)&v1[v6] = v11;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100064FE4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for BrowseViewController.SearchState();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  NSString v10 = (char *)&v17 - v9;
  if ([a1 horizontalSizeClass] == (id)1)
  {
    id v11 = [v2 traitCollection];
    id v12 = [v11 horizontalSizeClass];

    BOOL v13 = v12 != (id)2;
  }
  else
  {
    BOOL v13 = 1;
  }
  uint64_t result = sub_100062798();
  if (result)
  {
    id v15 = sub_10005FDC8();
    dispatch thunk of BrowseViewController.searchState.getter();

    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for BrowseViewController.SearchState.cover(_:), v4);
    LOBYTE(v15) = static BrowseViewController.SearchState.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    if (!v13 && (v15 & 1) != 0) {
      return (uint64_t)[v2 setPreferredDisplayMode:2];
    }
  }
  return result;
}

uint64_t sub_1000651B4(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      unint64_t *v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  sub_10001E254(0, (unint64_t *)&qword_100108820);
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

void sub_1000654A4(void *a1)
{
  uint64_t v2 = v1;
  id v4 = sub_10005FED0();
  id v5 = [v4 view];

  if (!v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  [v5 endEditing:1];

  id v6 = sub_100060308();
  id v7 = [v6 view];

  if (!v7)
  {
LABEL_12:
    __break(1u);
    return;
  }
  [v7 endEditing:1];

  sub_10001E254(0, &qword_100104890);
  id v8 = sub_10005FC88();
  char v9 = static NSObject.== infix(_:_:)();

  if (v9)
  {
    id v10 = sub_10005FD54();

    id v11 = sub_10005FD54();
  }
  else
  {
    id v12 = sub_10005FD74();
    char v13 = static NSObject.== infix(_:_:)();

    if (v13)
    {
      id v14 = sub_10005FDA8();

      id v11 = sub_10005FDA8();
    }
    else
    {
      id v15 = sub_10005FED0();
      sub_10006579C(0, (unint64_t *)&qword_1001057E0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(void, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1000CC620;
      *(void *)(v16 + 32) = a1;
      uint64_t v20 = v16;
      specialized Array._endMutation()();
      sub_10001E254(0, (unint64_t *)&qword_100108820);
      id v17 = a1;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v15 setViewControllers:isa animated:0];

      id v11 = sub_10005FED0();
    }
  }
  [v2 setViewController:v11 forColumn:v20];
}

void sub_100065738(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10006579C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1000657E8()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_100065820(void *a1)
{
  return sub_100065838(a1, (const char **)&selRef_splitViewControllerDidExpand_);
}

id sub_10006582C(void *a1)
{
  return sub_100065838(a1, (const char **)&selRef_splitViewControllerDidCollapse_);
}

id sub_100065838(void *a1, const char **a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  id result = [a1 respondsToSelector:*a2];
  if (result)
  {
    uint64_t v7 = *a2;
    return [a1 v7:v5];
  }
  return result;
}

uint64_t sub_1000658A8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000658F0(uint64_t a1, uint64_t a2)
{
  sub_10006579C(0, (unint64_t *)&qword_1001059F0, (uint64_t)&type metadata for Any + 8, (uint64_t (*)(void, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006597C()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_1000659B4(void *a1)
{
  return sub_1000659CC(a1, (const char **)&selRef_splitViewController_willHideColumn_);
}

id sub_1000659C0(void *a1)
{
  return sub_1000659CC(a1, (const char **)&selRef_splitViewController_willShowColumn_);
}

id sub_1000659CC(void *a1, const char **a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  id result = [a1 respondsToSelector:*a2];
  if (result)
  {
    unint64_t v8 = *a2;
    return [a1 v8:v5, v6];
  }
  return result;
}

unint64_t sub_100065A40()
{
  unint64_t result = qword_1001063F0;
  if (!qword_1001063F0)
  {
    type metadata accessor for UITraitHorizontalSizeClass();
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1001063F0);
  }
  return result;
}

uint64_t ViewControllerRouterProtocol<>.dismissPresentedViewController()()
{
  sub_1000438C8();
  uint64_t result = UIViewController.containsViewController<A>(ofType:)();
  if ((result & 1) == 0)
  {
    return (uint64_t)[v0 dismissViewControllerAnimated:0 completion:0];
  }
  return result;
}

unint64_t sub_100065B00()
{
  unint64_t result = qword_100106400;
  if (!qword_100106400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106400);
  }
  return result;
}

unint64_t sub_100065B58()
{
  unint64_t result = qword_100106408;
  if (!qword_100106408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106408);
  }
  return result;
}

uint64_t sub_100065BAC()
{
  IntentParameter.wrappedValue.getter();
  return v1;
}

uint64_t sub_100065BE0()
{
  uint64_t v0 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Locale();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_10003FEAC(v6, qword_100108BE0);
  sub_10003FE20(v6, (uint64_t)qword_100108BE0);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for LocalizedStringResource.BundleDescription.main(_:), v1);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t sub_100065DCC()
{
  sub_100068180(0, &qword_100105600, (void (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v15 - v1;
  v15[0] = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v3 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100068180(0, &qword_1001055F8, (void (*)(uint64_t))&type metadata accessor for IntentDescription);
  uint64_t v11 = v10;
  sub_10003FEAC(v10, qword_100108BF8);
  uint64_t v12 = sub_10003FE20(v11, (uint64_t)qword_100108BF8);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, void))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v15[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v2, 1, 1, v8);
  IntentDescription.init(_:categoryName:searchKeywords:)();
  uint64_t v13 = type metadata accessor for IntentDescription();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 0, 1, v13);
}

uint64_t sub_100066128(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  sub_100068180(0, (unint64_t *)&unk_100104880, (void (*)(uint64_t))&type metadata accessor for URL);
  v2[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_100066240, 0, 0);
}

id sub_100066240()
{
  id v1 = [objc_allocWithZone((Class)HealthAppDataTypeDetailLinkBuilder) init];
  IntentParameter.wrappedValue.getter();
  uint64_t v2 = (void *)v0[2];
  id v3 = [v2 objectType];

  id v4 = [v1 URLForDataTypeDetailWithObjectType:v3];
  if (!v4)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[7] + 56))(v0[5], 1, 1, v0[6]);
    goto LABEL_6;
  }
  uint64_t v6 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v8 = v0[5];
  uint64_t v7 = v0[6];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v9(v8, v5, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v7) == 1)
  {
LABEL_6:
    sub_100028AF8(v0[5]);
    sub_10006B6B0();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    goto LABEL_7;
  }
  v9(v0[9], v0[5], v0[6]);
  id result = [self defaultWorkspace];
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = v0[9];
  uint64_t v14 = v0[6];
  uint64_t v13 = v0[7];
  URL._bridgeToObjectiveC()((NSURL *)v0[5]);
  uint64_t v16 = v15;
  sub_1000939E8((uint64_t)_swiftEmptyArrayStorage);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v11 openSensitiveURL:v16 withOptions:isa];

  static IntentResult.result<>()();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
LABEL_7:
  return (id)v18();
}

uint64_t sub_10006652C@<X0>(void *a1@<X8>)
{
  uint64_t result = IntentParameter.wrappedValue.getter();
  *a1 = v3;
  return result;
}

void sub_100066568(id *a1)
{
  id v1 = *a1;
  IntentParameter.wrappedValue.setter();
}

void (*sub_1000665AC(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100066608;
}

void sub_100066608(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

unint64_t sub_10006665C()
{
  unint64_t result = qword_100106410;
  if (!qword_100106410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106410);
  }
  return result;
}

unint64_t sub_1000666B4()
{
  unint64_t result = qword_100106418;
  if (!qword_100106418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106418);
  }
  return result;
}

uint64_t sub_100066708()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100066724()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100066774@<X0>(uint64_t a1@<X8>)
{
  return sub_100067F38(&qword_100104010, (uint64_t (*)(void))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100108BE0, a1);
}

uint64_t sub_1000667AC(uint64_t a1)
{
  unint64_t v2 = sub_10006B784();

  return static OpenIntent.openAppWhenRun.getter(a1, v2);
}

uint64_t sub_1000667EC@<X0>(uint64_t a1@<X8>)
{
  if (qword_100104018 != -1) {
    swift_once();
  }
  sub_100068180(0, &qword_1001055F8, (void (*)(uint64_t))&type metadata accessor for IntentDescription);
  uint64_t v3 = sub_10003FE20(v2, (uint64_t)qword_100108BF8);

  return sub_10006B704(v3, a1);
}

uint64_t sub_100066880(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100055B84;
  return sub_100066128(a1, v4);
}

uint64_t sub_100066920@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100069588();
  *a1 = result;
  return result;
}

uint64_t sub_100066948(uint64_t a1)
{
  unint64_t v2 = sub_100025C18();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100066988()
{
  unint64_t result = qword_100106428;
  if (!qword_100106428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106428);
  }
  return result;
}

uint64_t sub_1000669DC()
{
  uint64_t v0 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v0 - 8);
  sub_100068180(0, &qword_100105600, (void (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v12 - v2;
  v12[0] = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v4 = *(void *)(v12[0] - 8);
  __chkstk_darwin(v12[0]);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Locale();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = type metadata accessor for TypeDisplayRepresentation();
  sub_10003FEAC(v10, qword_100108C10);
  sub_10003FE20(v10, (uint64_t)qword_100108C10);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, void))(v4 + 104))(v6, enum case for LocalizedStringResource.BundleDescription.main(_:), v12[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v3, 1, 1, v8);
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t sub_100066CC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  sub_100068180(0, &qword_100105FD8, (void (*)(uint64_t))&type metadata accessor for DisplayRepresentation.Image);
  __chkstk_darwin(v3 - 8);
  id v34 = (char *)&v29 - v4;
  sub_100068180(0, &qword_100105600, (void (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v5 - 8);
  id v33 = (char *)&v29 - v6;
  uint64_t v7 = type metadata accessor for Locale();
  __chkstk_darwin(v7 - 8);
  Swift::String v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v9 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v11 = (uint64_t *)((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v12 - 8);
  uint64_t v29 = type metadata accessor for LocalizedStringResource();
  uint64_t v13 = *(void *)(v29 - 8);
  uint64_t v14 = __chkstk_darwin(v29);
  NSString v32 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  id v17 = (char *)&v29 - v16;
  id v18 = [a1 localization];
  id v19 = [v18 displayNameKey];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.LocalizationValue.init(_:)();
  id v20 = [a1 localization];
  id v21 = [v20 localizationTableNameOverride];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.nonEmptyOrNil.getter();
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  if (!v23) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  *uint64_t v11 = sub_10001E254(0, (unint64_t *)&qword_100106600);
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, enum case for LocalizedStringResource.BundleDescription.forClass(_:), v30);
  static Locale.current.getter();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  id v24 = [a1 objectType];
  [v24 code];

  uint64_t v25 = v29;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v17, v29);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v33, 1, 1, v25);
  id v26 = [a1 displayCategory];
  id v27 = [v26 systemImageName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
  DisplayRepresentation.init(title:subtitle:image:synonyms:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, v25);
}

uint64_t sub_1000671DC()
{
  sub_1000682B4();
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  uint64_t result = AppDependency.__allocating_init(key:manager:)();
  qword_100108C28 = result;
  return result;
}

void *sub_100067240()
{
  uint64_t v0 = self;
  AppDependency.wrappedValue.getter();
  id v1 = [v0 sharedInstanceForHealthStore:v13];

  if (!v1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v2 = [v1 allDisplayTypes];

  if (v2)
  {
    sub_10001E254(0, &qword_1001064D0);
    unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v4 = (unint64_t)sub_10006AAB0(v3);
    swift_bridgeObjectRelease();
    if ((v4 & 0x8000000000000000) != 0 || (v4 & 0x4000000000000000) != 0)
    {
      unint64_t v11 = swift_bridgeObjectRetain();
      unint64_t v5 = (unint64_t)sub_10008FF00(v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    unint64_t v13 = v5;
    sub_10006831C((uint64_t *)&v13);
    swift_bridgeObjectRelease();
    unint64_t v6 = v13;
    if ((v13 & 0x8000000000000000) != 0 || (v13 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v7) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v7 = *(void *)(v13 + 16);
      if (v7)
      {
LABEL_9:
        unint64_t v13 = (unint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        if ((v7 & 0x8000000000000000) == 0)
        {
          uint64_t v8 = 0;
          do
          {
            if ((v6 & 0xC000000000000001) != 0) {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v9 = *(id *)(v6 + 8 * v8 + 32);
            }
            ++v8;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          while (v7 != v8);
          unint64_t v10 = v13;
          swift_release();
          return (void *)v10;
        }
        __break(1u);
        goto LABEL_21;
      }
    }
    swift_release();
    return _swiftEmptyArrayStorage;
  }
LABEL_22:
  __break(1u);
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

BOOL sub_10006746C(void **a1, void **a2)
{
  id v2 = *a1;
  unint64_t v3 = *a2;
  sub_10001E254(0, &qword_100104890);
  id v4 = [v2 displayCategory];
  id v5 = [v3 displayCategory];
  char v6 = static NSObject.== infix(_:_:)();

  if (v6)
  {
    id v7 = [v2 localization];
    id v8 = [v7 displayName];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v9 = [v3 localization];
  }
  else
  {
    id v10 = [v2 displayCategory];
    id v11 = [v10 displayName];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v9 = [v3 displayCategory];
  }
  id v12 = [v9 displayName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100038AD4();
  uint64_t v13 = StringProtocol.localizedStandardCompare<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 == -1;
}

uint64_t sub_100067670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = *v3;
  v4[4] = a3;
  v4[5] = v5;
  return _swift_task_switch(sub_100067698, 0, 0);
}

uint64_t sub_100067698()
{
  id v1 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  id v2 = sub_10006B16C();
  swift_bridgeObjectRelease();
  void *v1 = v2;
  unint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

unint64_t sub_100067730()
{
  unint64_t result = qword_100106438;
  if (!qword_100106438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106438);
  }
  return result;
}

unint64_t sub_100067788()
{
  unint64_t result = qword_100106440;
  if (!qword_100106440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106440);
  }
  return result;
}

unint64_t sub_1000677E0()
{
  unint64_t result = qword_100106448[0];
  if (!qword_100106448[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100106448);
  }
  return result;
}

uint64_t sub_100067834@<X0>(uint64_t *a1@<X8>)
{
  sub_1000682B4();
  type metadata accessor for AppDependencyManager();
  static AppDependencyManager.shared.getter();
  uint64_t result = AppDependency.__allocating_init(key:manager:)();
  *a1 = result;
  return result;
}

uint64_t sub_1000678A0(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_1000678C4, 0, 0);
}

uint64_t sub_1000678C4()
{
  id v1 = (void *)v0[2];
  uint64_t v2 = v0[3];
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_10006B3E0(v2, v1);
  swift_bridgeObjectRelease();
  id v4 = (uint64_t (*)(void *))v0[1];
  return v4(v3);
}

uint64_t sub_100067948(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_10006796C, 0, 0);
}

uint64_t sub_10006796C()
{
  id v1 = *(void **)(v0 + 16);
  void *v1 = sub_100067240();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

unint64_t sub_1000679D8()
{
  unint64_t result = qword_100106460;
  if (!qword_100106460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106460);
  }
  return result;
}

unint64_t sub_100067A34()
{
  unint64_t result = qword_100106468;
  if (!qword_100106468)
  {
    sub_100067AA4();
    sub_100026274();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106468);
  }
  return result;
}

void sub_100067AA4()
{
  if (!qword_100106470[0])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, qword_100106470);
    }
  }
}

uint64_t sub_100067AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  unint64_t v6 = sub_100066988();
  *uint64_t v5 = v2;
  v5[1] = sub_100028DB8;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_100067BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[1] = sub_100028DB8;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

unint64_t sub_100067C70()
{
  unint64_t result = qword_100106488;
  if (!qword_100106488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106488);
  }
  return result;
}

unint64_t sub_100067CC8()
{
  unint64_t result = qword_100106490;
  if (!qword_100106490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106490);
  }
  return result;
}

void *sub_100067D1C()
{
  return &protocol witness table for String;
}

uint64_t sub_100067D28@<X0>(void *a1@<X8>)
{
  if (qword_100104028 != -1) {
    swift_once();
  }
  *a1 = qword_100108C28;

  return swift_retain();
}

unint64_t sub_100067D98()
{
  unint64_t result = qword_100106498;
  if (!qword_100106498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106498);
  }
  return result;
}

unint64_t sub_100067DF0()
{
  unint64_t result = qword_1001064A0;
  if (!qword_1001064A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001064A0);
  }
  return result;
}

unint64_t sub_100067E48()
{
  unint64_t result = qword_1001064A8;
  if (!qword_1001064A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001064A8);
  }
  return result;
}

void *sub_100067E9C()
{
  return &protocol witness table for String;
}

void sub_100067EA8(uint64_t *a1@<X8>)
{
  id v3 = [*v1 displayTypeIdentifierString];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

uint64_t sub_100067F00@<X0>(uint64_t a1@<X8>)
{
  return sub_100067F38(&qword_100104020, (uint64_t (*)(void))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_100108C10, a1);
}

uint64_t sub_100067F38@<X0>(void *a1@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = sub_10003FE20(v7, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

unint64_t sub_100067FE0()
{
  unint64_t result = qword_1001064B0;
  if (!qword_1001064B0)
  {
    sub_10006B64C(255, &qword_1001064B8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for EmptyResolverSpecification);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001064B0);
  }
  return result;
}

uint64_t sub_100068054(uint64_t a1)
{
  unint64_t v2 = sub_1000677E0();

  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000680A4()
{
  unint64_t result = qword_1001064C0;
  if (!qword_1001064C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001064C0);
  }
  return result;
}

uint64_t sub_1000680F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100066CC8(*v1, a1);
}

uint64_t sub_100068100(uint64_t a1)
{
  unint64_t v2 = sub_100067E48();

  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

ValueMetadata *type metadata accessor for HealthDataTypeEntity.AvailableHealthDataTypesQuery()
{
  return &type metadata for HealthDataTypeEntity.AvailableHealthDataTypesQuery;
}

ValueMetadata *type metadata accessor for HealthDataTypeEntity()
{
  return &type metadata for HealthDataTypeEntity;
}

ValueMetadata *type metadata accessor for OpenDataTypeIntent()
{
  return &type metadata for OpenDataTypeIntent;
}

void sub_100068180(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1000681D4(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      type metadata accessor for LocalizedStringResource();
      unint64_t v2 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v2[2] = a1;
    }
    else
    {
      unint64_t v2 = _swiftEmptyArrayStorage;
    }
    type metadata accessor for LocalizedStringResource();
    return (uint64_t)v2;
  }
  return result;
}

void sub_1000682B4()
{
  if (!qword_1001064C8)
  {
    sub_10001E254(255, (unint64_t *)&qword_100106600);
    unint64_t v0 = type metadata accessor for AppDependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001064C8);
    }
  }
}

uint64_t sub_10006831C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_100091348(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_100068398(v6);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int sub_100068398(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_140;
    }
    if (v4) {
      return sub_100068F48(0, v4, 1, a1);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_148;
  }
  Swift::Int v149 = result;
  Swift::Int v153 = v4;
  Swift::Int v146 = a1;
  if (v4 < 2)
  {
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    uint64_t v165 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v90 = _swiftEmptyArrayStorage[2];
LABEL_104:
      if (v90 >= 2)
      {
        uint64_t v139 = *v146;
        do
        {
          unint64_t v140 = v90 - 2;
          if (v90 < 2) {
            goto LABEL_134;
          }
          if (!v139) {
            goto LABEL_147;
          }
          uint64_t v141 = *(void *)&v9[16 * v140 + 32];
          uint64_t v142 = *(void *)&v9[16 * v90 + 24];
          sub_100069250((void **)(v139 + 8 * v141), (void **)(v139 + 8 * *(void *)&v9[16 * v90 + 16]), v139 + 8 * v142, __dst);
          if (v2) {
            break;
          }
          if (v142 < v141) {
            goto LABEL_136;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v9 = sub_10009130C((uint64_t)v9);
          }
          if (v140 >= *((void *)v9 + 2)) {
            goto LABEL_137;
          }
          uint64_t v143 = &v9[16 * v140 + 32];
          *(void *)uint64_t v143 = v141;
          *((void *)v143 + 1) = v142;
          unint64_t v144 = *((void *)v9 + 2);
          if (v90 > v144) {
            goto LABEL_138;
          }
          memmove(&v9[16 * v90 + 16], &v9[16 * v90 + 32], 16 * (v144 - v90));
          *((void *)v9 + 2) = v144 - 1;
          unint64_t v90 = v144 - 1;
        }
        while (v144 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
LABEL_116:
      *(void *)((v165 & 0xFFFFFFFFFFFFFF8) + 0x1sub_10004C8C4(0, 0) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = v6 >> 1;
    sub_10001E254(0, &qword_1001064D0);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x1sub_10004C8C4(0, 0) = v7;
    __dst = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v165 = v8;
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v147 = *a1 + 16;
  uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  uint64_t v148 = *a1 - 8;
  id v12 = &selRef_isKappaDetectionSupportedOnPhone;
  Swift::Int v13 = v153;
  uint64_t v157 = *a1;
  while (1)
  {
    Swift::Int v14 = v10;
    Swift::Int v15 = v10 + 1;
    Swift::Int v152 = v10;
    if (v10 + 1 < v13)
    {
      v163 = *(void **)(v11 + 8 * v15);
      Swift::Int v16 = v10;
      v161 = *(void **)(v11 + 8 * v10);
      id v17 = v161;
      id v18 = v163;
      id v19 = v17;
      BOOL v156 = sub_10006746C(&v163, &v161);
      if (v2)
      {
        swift_bridgeObjectRelease();

        goto LABEL_116;
      }

      Swift::Int v15 = v16 + 2;
      Swift::Int v14 = v16;
      if (v16 + 2 < v153)
      {
        sub_10001E254(0, &qword_100104890);
        id v20 = (id *)(v147 + 8 * v16);
        long long v151 = v9;
        do
        {
          Swift::Int v158 = v15;
          NSString v32 = *(v20 - 1);
          id v33 = *v20;
          id v34 = v32;
          id v35 = [v33 displayCategory];
          id v36 = [v34 displayCategory];
          LOBYTE(v32) = static NSObject.== infix(_:_:)();

          if (v32)
          {
            id v21 = [v33 localization];
            id v22 = [v21 displayName];

            uint64_t v23 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v25 = v24;

            v163 = v23;
            uint64_t v164 = v25;
            id v26 = [v34 localization];
            id v27 = [v26 displayName];

            id v28 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v30 = v29;

            v161 = v28;
            uint64_t v162 = v30;
            sub_100038AD4();
            uint64_t v31 = StringProtocol.localizedStandardCompare<A>(_:)();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (((v156 ^ (v31 != -1)) & 1) == 0) {
              goto LABEL_21;
            }
          }
          else
          {
            id v37 = [v33 displayCategory];
            id v38 = [v37 displayName];

            id v39 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v41 = v40;

            v163 = v39;
            uint64_t v164 = v41;
            id v42 = [v34 displayCategory];
            id v43 = [v42 displayName];

            uint64_t v44 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v46 = v45;

            v161 = v44;
            uint64_t v162 = v46;
            sub_100038AD4();
            uint64_t v47 = StringProtocol.localizedStandardCompare<A>(_:)();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v156 == (v47 != -1))
            {
LABEL_21:
              uint64_t v9 = v151;
              id v12 = &selRef_isKappaDetectionSupportedOnPhone;
              Swift::Int v15 = v158;
              goto LABEL_23;
            }
          }
          Swift::Int v15 = v158 + 1;
          ++v20;
          uint64_t v9 = v151;
        }
        while (v153 != v158 + 1);
        Swift::Int v15 = v153;
        id v12 = &selRef_isKappaDetectionSupportedOnPhone;
LABEL_23:
        Swift::Int v14 = v152;
      }
      if (v156)
      {
        if (v15 < v14) {
          goto LABEL_143;
        }
        if (v14 < v15)
        {
          unint64_t v48 = (uint64_t *)(v148 + 8 * v15);
          Swift::Int v49 = v15;
          Swift::Int v50 = v14;
          id v51 = (uint64_t *)(v157 + 8 * v14);
          do
          {
            if (v50 != --v49)
            {
              if (!v157) {
                goto LABEL_146;
              }
              uint64_t v52 = *v51;
              uint64_t *v51 = *v48;
              *unint64_t v48 = v52;
            }
            ++v50;
            --v48;
            ++v51;
          }
          while (v50 < v49);
        }
      }
    }
    if (v15 < v153)
    {
      if (__OFSUB__(v15, v14)) {
        goto LABEL_139;
      }
      if (v15 - v14 < v149) {
        break;
      }
    }
LABEL_53:
    if (v15 < v14) {
      goto LABEL_135;
    }
    Swift::Int v160 = v15;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = sub_100091098(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    unint64_t v89 = *((void *)v9 + 2);
    unint64_t v88 = *((void *)v9 + 3);
    unint64_t v90 = v89 + 1;
    uint64_t v11 = v157;
    if (v89 >= v88 >> 1)
    {
      uint64_t v138 = sub_100091098((char *)(v88 > 1), v89 + 1, 1, v9);
      uint64_t v11 = v157;
      uint64_t v9 = v138;
    }
    *((void *)v9 + 2) = v90;
    uint64_t v91 = v9 + 32;
    uint64_t v92 = &v9[16 * v89 + 32];
    *(void *)uint64_t v92 = v152;
    *((void *)v92 + 1) = v160;
    if (v89)
    {
      while (1)
      {
        unint64_t v93 = v90 - 1;
        if (v90 >= 4)
        {
          uint64_t v98 = &v91[16 * v90];
          uint64_t v99 = *((void *)v98 - 8);
          uint64_t v100 = *((void *)v98 - 7);
          BOOL v104 = __OFSUB__(v100, v99);
          uint64_t v101 = v100 - v99;
          if (v104) {
            goto LABEL_123;
          }
          uint64_t v103 = *((void *)v98 - 6);
          uint64_t v102 = *((void *)v98 - 5);
          BOOL v104 = __OFSUB__(v102, v103);
          uint64_t v96 = v102 - v103;
          char v97 = v104;
          if (v104) {
            goto LABEL_124;
          }
          unint64_t v105 = v90 - 2;
          Swift::Int v106 = &v91[16 * v90 - 32];
          uint64_t v108 = *(void *)v106;
          uint64_t v107 = *((void *)v106 + 1);
          BOOL v104 = __OFSUB__(v107, v108);
          uint64_t v109 = v107 - v108;
          if (v104) {
            goto LABEL_126;
          }
          BOOL v104 = __OFADD__(v96, v109);
          uint64_t v110 = v96 + v109;
          if (v104) {
            goto LABEL_129;
          }
          if (v110 >= v101)
          {
            uint64_t v128 = &v91[16 * v93];
            uint64_t v130 = *(void *)v128;
            uint64_t v129 = *((void *)v128 + 1);
            BOOL v104 = __OFSUB__(v129, v130);
            uint64_t v131 = v129 - v130;
            if (v104) {
              goto LABEL_133;
            }
            BOOL v121 = v96 < v131;
            goto LABEL_90;
          }
        }
        else
        {
          if (v90 != 3)
          {
            uint64_t v122 = *((void *)v9 + 4);
            uint64_t v123 = *((void *)v9 + 5);
            BOOL v104 = __OFSUB__(v123, v122);
            uint64_t v115 = v123 - v122;
            char v116 = v104;
            goto LABEL_84;
          }
          uint64_t v95 = *((void *)v9 + 4);
          uint64_t v94 = *((void *)v9 + 5);
          BOOL v104 = __OFSUB__(v94, v95);
          uint64_t v96 = v94 - v95;
          char v97 = v104;
        }
        if (v97) {
          goto LABEL_125;
        }
        unint64_t v105 = v90 - 2;
        uint64_t v111 = &v91[16 * v90 - 32];
        uint64_t v113 = *(void *)v111;
        uint64_t v112 = *((void *)v111 + 1);
        BOOL v114 = __OFSUB__(v112, v113);
        uint64_t v115 = v112 - v113;
        char v116 = v114;
        if (v114) {
          goto LABEL_128;
        }
        uint64_t v117 = &v91[16 * v93];
        uint64_t v119 = *(void *)v117;
        uint64_t v118 = *((void *)v117 + 1);
        BOOL v104 = __OFSUB__(v118, v119);
        uint64_t v120 = v118 - v119;
        if (v104) {
          goto LABEL_131;
        }
        if (__OFADD__(v115, v120)) {
          goto LABEL_132;
        }
        if (v115 + v120 >= v96)
        {
          BOOL v121 = v96 < v120;
LABEL_90:
          if (v121) {
            unint64_t v93 = v105;
          }
          goto LABEL_92;
        }
LABEL_84:
        if (v116) {
          goto LABEL_127;
        }
        Swift::Int v124 = &v91[16 * v93];
        uint64_t v126 = *(void *)v124;
        uint64_t v125 = *((void *)v124 + 1);
        BOOL v104 = __OFSUB__(v125, v126);
        uint64_t v127 = v125 - v126;
        if (v104) {
          goto LABEL_130;
        }
        if (v127 < v115) {
          goto LABEL_101;
        }
LABEL_92:
        unint64_t v132 = v93 - 1;
        if (v93 - 1 >= v90)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v11) {
          goto LABEL_145;
        }
        uint64_t v133 = &v91[16 * v132];
        uint64_t v134 = *(void *)v133;
        uint64_t v135 = &v91[16 * v93];
        uint64_t v136 = *((void *)v135 + 1);
        sub_100069250((void **)(v11 + 8 * *(void *)v133), (void **)(v11 + 8 * *(void *)v135), v11 + 8 * v136, __dst);
        if (v2) {
          goto LABEL_115;
        }
        if (v136 < v134) {
          goto LABEL_120;
        }
        if (v93 > *((void *)v9 + 2)) {
          goto LABEL_121;
        }
        *(void *)uint64_t v133 = v134;
        *(void *)&v91[16 * v132 + 8] = v136;
        unint64_t v137 = *((void *)v9 + 2);
        if (v93 >= v137) {
          goto LABEL_122;
        }
        unint64_t v90 = v137 - 1;
        memmove(&v91[16 * v93], v135 + 16, 16 * (v137 - 1 - v93));
        *((void *)v9 + 2) = v137 - 1;
        uint64_t v11 = v157;
        if (v137 <= 2) {
          goto LABEL_101;
        }
      }
    }
    unint64_t v90 = 1;
LABEL_101:
    Swift::Int v13 = v153;
    Swift::Int v10 = v160;
    id v12 = &selRef_isKappaDetectionSupportedOnPhone;
    if (v160 >= v153) {
      goto LABEL_104;
    }
  }
  Swift::Int v53 = v14 + v149;
  if (__OFADD__(v14, v149)) {
    goto LABEL_141;
  }
  if (v53 >= v153) {
    Swift::Int v53 = v153;
  }
  if (v53 >= v14)
  {
    if (v15 != v53)
    {
      Swift::Int v150 = v53;
      uint64_t v145 = v2;
      sub_10001E254(0, &qword_100104890);
      uint64_t v54 = v157;
      uint64_t v55 = v148 + 8 * v15;
      do
      {
        int v57 = *(void **)(v54 + 8 * v15);
        Swift::Int v58 = v14;
        uint64_t v154 = v55;
        uint64_t v59 = v55;
        Swift::Int v159 = v15;
        while (1)
        {
          uint64_t v60 = *(void **)v59;
          id v61 = v57;
          id v62 = v60;
          id v63 = [v61 v12[50]];
          id v64 = [v62 v12[50]];
          LOBYTE(v6sub_10004C8C4(0, 0) = static NSObject.== infix(_:_:)();

          if (v60)
          {
            id v65 = [v61 localization];
            id v66 = [v65 displayName];

            uint64_t v67 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v69 = v68;

            v163 = v67;
            uint64_t v164 = v69;
            id v70 = [v62 localization];
            id v71 = [v70 displayName];

            unint64_t v72 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v74 = v73;

            v161 = v72;
            uint64_t v162 = v74;
          }
          else
          {
            id v76 = [v61 v12[50]];
            uint64_t v77 = v12;
            id v78 = [v76 displayName];

            uint64_t v79 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v81 = v80;

            v163 = v79;
            uint64_t v164 = v81;
            id v82 = [v62 v77[50]];
            id v83 = [v82 displayName];

            uint64_t v84 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v86 = v85;

            v161 = v84;
            uint64_t v162 = v86;
          }
          sub_100038AD4();
          uint64_t v75 = StringProtocol.localizedStandardCompare<A>(_:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v75 != -1) {
            break;
          }
          uint64_t v54 = v157;
          Swift::Int v56 = v159;
          if (!v157) {
            goto LABEL_144;
          }
          uint64_t v87 = *(void **)v59;
          int v57 = *(void **)(v59 + 8);
          *(void *)uint64_t v59 = v57;
          *(void *)(v59 + 8) = v87;
          v59 -= 8;
          ++v58;
          id v12 = &selRef_isKappaDetectionSupportedOnPhone;
          if (v159 == v58) {
            goto LABEL_43;
          }
        }
        uint64_t v54 = v157;
        Swift::Int v56 = v159;
        id v12 = &selRef_isKappaDetectionSupportedOnPhone;
LABEL_43:
        Swift::Int v15 = v56 + 1;
        uint64_t v55 = v154 + 8;
        Swift::Int v14 = v152;
      }
      while (v15 != v150);
      Swift::Int v15 = v150;
      uint64_t v2 = v145;
    }
    goto LABEL_53;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100068F48(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v27 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    sub_10001E254(0, &qword_100104890);
    uint64_t v29 = v5;
    uint64_t v6 = v5 + 8 * v4 - 8;
    uint64_t v7 = &selRef_isKappaDetectionSupportedOnPhone;
LABEL_5:
    uint64_t v8 = *(void **)(v29 + 8 * v4);
    uint64_t v9 = v27;
    uint64_t v28 = v6;
    uint64_t v30 = v4;
    while (1)
    {
      Swift::Int v10 = *(void **)v6;
      id v11 = v8;
      id v12 = v10;
      id v13 = [v11 v7[50]];
      id v14 = [v12 v7[50]];
      char v15 = static NSObject.== infix(_:_:)();

      if (v15)
      {
        id v16 = [v11 localization];
        id v17 = [v16 displayName];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v18 = [v12 localization];
        id v19 = [v18 displayName];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_100038AD4();
        uint64_t v20 = StringProtocol.localizedStandardCompare<A>(_:)();

        swift_bridgeObjectRelease();
        uint64_t v7 = &selRef_isKappaDetectionSupportedOnPhone;
      }
      else
      {
        id v21 = [v11 v7[50]];
        id v22 = [v21 displayName];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v23 = [v12 displayCategory];
        id v24 = [v23 displayName];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v7 = &selRef_isKappaDetectionSupportedOnPhone;
        sub_100038AD4();
        uint64_t v20 = StringProtocol.localizedStandardCompare<A>(_:)();

        swift_bridgeObjectRelease();
      }
      Swift::Int result = swift_bridgeObjectRelease();
      if (v20 != -1)
      {
LABEL_4:
        uint64_t v4 = v30 + 1;
        uint64_t v6 = v28 + 8;
        if (v30 + 1 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v29) {
        break;
      }
      uint64_t v25 = *(void **)v6;
      uint64_t v8 = *(void **)(v6 + 8);
      *(void *)uint64_t v6 = v8;
      *(void *)(v6 + 8) = v25;
      v6 -= 8;
      if (v30 == ++v9) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100069250(void **__src, void **a2, unint64_t a3, void **__dst)
{
  id v35 = __dst;
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v8 = (char *)a2 - (char *)__src;
  }
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v41 = __src;
  uint64_t v40 = __dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 >= -7)
    {
      if (__dst != a2 || &a2[v12] <= __dst)
      {
        memmove(__dst, a2, 8 * v12);
        __dst = v35;
      }
      id v21 = &__dst[v12];
      id v39 = v21;
      uint64_t v41 = v5;
      if (v6 < v5 && v10 >= 8)
      {
        id v22 = (void **)(a3 - 8);
        id v23 = v5;
        id v34 = v6;
        while (1)
        {
          id v24 = v21;
          uint64_t v25 = *--v21;
          id v38 = v25;
          id v26 = *--v23;
          id v37 = v26;
          uint64_t v27 = v38;
          id v28 = v26;
          BOOL v29 = sub_10006746C(&v38, &v37);
          if (v36) {
            break;
          }
          BOOL v30 = v29;
          uint64_t v36 = 0;
          uint64_t v31 = v22 + 1;

          if (v30)
          {
            NSString v32 = v35;
            if (v31 != v5 || v22 >= v5) {
              *id v22 = *v23;
            }
            uint64_t v41 = v23;
            id v21 = v24;
          }
          else
          {
            id v39 = v21;
            NSString v32 = v35;
            if (v31 < v24 || v22 >= v24 || v31 != v24) {
              *id v22 = *v21;
            }
            id v23 = v5;
          }
          if (v23 > v34)
          {
            --v22;
            uint64_t v5 = v23;
            if (v21 > v32) {
              continue;
            }
          }
          goto LABEL_48;
        }
      }
      goto LABEL_48;
    }
  }
  else if (v7 >= -7)
  {
    if (__dst != __src || &__src[v9] <= __dst)
    {
      memmove(__dst, __src, 8 * v9);
      __dst = v35;
    }
    id v13 = &__dst[v9];
    id v39 = v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      while (1)
      {
        id v38 = *v5;
        id v14 = __dst;
        id v37 = *__dst;
        char v15 = v37;
        id v16 = v38;
        id v17 = v15;
        BOOL v18 = sub_10006746C(&v38, &v37);
        if (v36) {
          break;
        }
        BOOL v19 = v18;

        if (v19)
        {
          uint64_t v20 = v5 + 1;
          if (v6 < v5 || v6 >= v20 || v6 != v5) {
            *uint64_t v6 = *v5;
          }
          __dst = v14;
        }
        else
        {
          if (v6 != v14) {
            *uint64_t v6 = *v14;
          }
          __dst = v14 + 1;
          uint64_t v40 = v14 + 1;
          uint64_t v20 = v5;
        }
        uint64_t v36 = 0;
        uint64_t v41 = ++v6;
        if (__dst < v13)
        {
          uint64_t v5 = v20;
          if ((unint64_t)v20 < a3) {
            continue;
          }
        }
        goto LABEL_48;
      }
    }
LABEL_48:
    sub_100091190(&v41, &v40, &v39);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100069588()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v30 = *(void *)(v0 - 8);
  uint64_t v31 = v0;
  __chkstk_darwin(v0);
  BOOL v29 = (char *)v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100068180(0, &qword_1001064D8, (void (*)(uint64_t))&type metadata accessor for IntentDialog);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  id v28 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v27 = (char *)v25 - v5;
  uint64_t v6 = type metadata accessor for String.LocalizationValue();
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  __chkstk_darwin(v7);
  v25[1] = (char *)v25 - v8;
  sub_100068180(0, &qword_100105600, (void (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v9 - 8);
  id v26 = (char *)v25 - v10;
  uint64_t v11 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Locale();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for LocalizedStringResource();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v18 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  BOOL v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v19(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  sub_10006B64C(0, &qword_1001064E0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for IntentParameter);
  v25[0] = v20;
  static Locale.current.getter();
  v19(v14, v18, v11);
  id v21 = v26;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v21, 0, 1, v16);
  uint64_t v32 = 0;
  uint64_t v22 = type metadata accessor for IntentDialog();
  id v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
  v23(v27, 1, 1, v22);
  v23(v28, 1, 1, v22);
  (*(void (**)(char *, void, uint64_t))(v30 + 104))(v29, enum case for InputConnectionBehavior.default(_:), v31);
  sub_1000677E0();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)();
}

void *sub_100069AC8(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v1 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v1)
  {
    while (1)
    {
      unint64_t v2 = 0;
      uint64_t v3 = &selRef_isKappaDetectionSupportedOnPhone;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v5 = v4;
        unint64_t v6 = v2 + 1;
        if (__OFADD__(v2, 1)) {
          goto LABEL_20;
        }
        swift_bridgeObjectRetain();
        id v7 = [v5 v3[48]];
        unsigned int v8 = [v7 enabled];

        if (v8)
        {
          id v9 = [v5 v3[48]];
          switch((unint64_t)[v9 code])
          {
            case 0uLL:
            case 1uLL:
            case 2uLL:
            case 3uLL:
            case 4uLL:
            case 5uLL:
            case 7uLL:
            case 8uLL:
            case 9uLL:
            case 0xAuLL:
            case 0xCuLL:
            case 0xDuLL:
            case 0xEuLL:
            case 0xFuLL:
            case 0x12uLL:
            case 0x13uLL:
            case 0x14uLL:
            case 0x15uLL:
            case 0x16uLL:
            case 0x17uLL:
            case 0x18uLL:
            case 0x19uLL:
            case 0x1AuLL:
            case 0x1BuLL:
            case 0x1CuLL:
            case 0x1DuLL:
            case 0x1EuLL:
            case 0x1FuLL:
            case 0x20uLL:
            case 0x21uLL:
            case 0x22uLL:
            case 0x23uLL:
            case 0x24uLL:
            case 0x25uLL:
            case 0x26uLL:
            case 0x27uLL:
            case 0x28uLL:
            case 0x29uLL:
            case 0x2AuLL:
            case 0x2BuLL:
            case 0x2CuLL:
            case 0x2DuLL:
            case 0x2EuLL:
            case 0x2FuLL:
            case 0x30uLL:
            case 0x31uLL:
            case 0x32uLL:
            case 0x33uLL:
            case 0x34uLL:
            case 0x35uLL:
            case 0x36uLL:
            case 0x37uLL:
            case 0x38uLL:
            case 0x39uLL:
            case 0x3AuLL:
            case 0x3CuLL:
            case 0x3DuLL:
            case 0x3EuLL:
            case 0x3FuLL:
            case 0x46uLL:
            case 0x47uLL:
            case 0x48uLL:
            case 0x49uLL:
            case 0x4BuLL:
            case 0x4EuLL:
            case 0x4FuLL:
            case 0x50uLL:
            case 0x53uLL:
            case 0x57uLL:
            case 0x59uLL:
            case 0x5AuLL:
            case 0x5BuLL:
            case 0x5CuLL:
            case 0x5FuLL:
            case 0x60uLL:
            case 0x61uLL:
            case 0x63uLL:
            case 0x64uLL:
            case 0x65uLL:
            case 0x6EuLL:
            case 0x6FuLL:
            case 0x71uLL:
            case 0x72uLL:
            case 0x76uLL:
            case 0x7CuLL:
            case 0x7DuLL:
            case 0x89uLL:
            case 0x8AuLL:
            case 0x8BuLL:
            case 0x8CuLL:
            case 0x90uLL:
            case 0x91uLL:
            case 0x93uLL:
            case 0x9CuLL:
            case 0x9DuLL:
            case 0x9EuLL:
            case 0x9FuLL:
            case 0xA0uLL:
            case 0xA1uLL:
            case 0xA2uLL:
            case 0xA3uLL:
            case 0xA4uLL:
            case 0xA5uLL:
            case 0xA6uLL:
            case 0xA7uLL:
            case 0xA8uLL:
            case 0xA9uLL:
            case 0xAAuLL:
            case 0xABuLL:
            case 0xACuLL:
            case 0xADuLL:
            case 0xB2uLL:
            case 0xB3uLL:
            case 0xB6uLL:
            case 0xB7uLL:
            case 0xBAuLL:
            case 0xBBuLL:
            case 0xBCuLL:
            case 0xBDuLL:
            case 0xBFuLL:
            case 0xC0uLL:
            case 0xC1uLL:
            case 0xC2uLL:
            case 0xC3uLL:
            case 0xC4uLL:
            case 0xC7uLL:
            case 0xC9uLL:
            case 0xCAuLL:
            case 0xCBuLL:
            case 0xCCuLL:
            case 0xCDuLL:
            case 0xCEuLL:
            case 0xCFuLL:
            case 0xDCuLL:
            case 0xDDuLL:
            case 0xDEuLL:
            case 0xDFuLL:
            case 0xE0uLL:
            case 0xE1uLL:
            case 0xE2uLL:
            case 0xE5uLL:
            case 0xE6uLL:
            case 0xE7uLL:
            case 0xE8uLL:
            case 0xE9uLL:
            case 0xEAuLL:
            case 0xEBuLL:
            case 0xECuLL:
            case 0xEDuLL:
            case 0xF0uLL:
            case 0xF1uLL:
            case 0xF2uLL:
            case 0xF3uLL:
            case 0xF4uLL:
            case 0xF8uLL:
            case 0xF9uLL:
            case 0xFAuLL:
            case 0xFBuLL:
            case 0x100uLL:
            case 0x101uLL:
            case 0x102uLL:
            case 0x103uLL:
            case 0x104uLL:
            case 0x106uLL:
            case 0x107uLL:
            case 0x108uLL:
            case 0x109uLL:
            case 0x10AuLL:
            case 0x10DuLL:
            case 0x10EuLL:
            case 0x110uLL:
            case 0x112uLL:
            case 0x113uLL:
            case 0x114uLL:
            case 0x115uLL:
            case 0x117uLL:
            case 0x118uLL:
            case 0x119uLL:
            case 0x11AuLL:
            case 0x11BuLL:
            case 0x11CuLL:
            case 0x11EuLL:
            case 0x11FuLL:
            case 0x120uLL:
            case 0x126uLL:
            case 0x127uLL:
            case 0x128uLL:
            case 0x129uLL:
            case 0x12DuLL:
            case 0x12EuLL:
            case 0x12FuLL:
            case 0x131uLL:
            case 0x139uLL:
            case 0x13AuLL:

              id v10 = [v5 localization];
              id v11 = [v10 displayName];

              static String._unconditionallyBridgeFromObjectiveC(_:)();
              sub_100038AD4();
              LOBYTE(v1sub_10004C8C4(0, 0) = StringProtocol.localizedStandardContains<A>(_:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v10)
              {
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
              }
              else
              {
              }
              uint64_t v3 = &selRef_isKappaDetectionSupportedOnPhone;
              break;
            default:

              swift_bridgeObjectRelease();
              break;
          }
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        ++v2;
        if (v6 == v1) {
          goto LABEL_22;
        }
      }
      if (v2 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      swift_bridgeObjectRetain();
      uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
      if (!v1) {
        goto LABEL_22;
      }
    }
    id v4 = *(id *)(a1 + 8 * v2 + 32);
    goto LABEL_9;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_10006A290(unint64_t a1, void *a2)
{
  unint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_36;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v5 = 0;
    unint64_t v6 = v3 & 0xC000000000000001;
    id v7 = (void *)(v3 + 32);
    v3 &= 0xFFFFFFFFFFFFFF8uLL;
    uint64_t v25 = (void *)v3;
    unsigned int v8 = &selRef_isKappaDetectionSupportedOnPhone;
    uint64_t v26 = v4;
    uint64_t v27 = v7;
    unint64_t v28 = v6;
    while (1)
    {
      if (v28)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_9;
      }
      if (v5 >= *(void *)(v3 + 16)) {
        break;
      }
      id v9 = (id)v7[v5];
LABEL_9:
      id v10 = v9;
      if (__OFADD__(v5++, 1)) {
        goto LABEL_34;
      }
      uint64_t v12 = v4;
      swift_bridgeObjectRetain();
      id v13 = [v10 v8[48]];
      unsigned int v14 = [v13 enabled];

      if (v14)
      {
        id v15 = [v10 v8[48]];
        switch((unint64_t)[v15 code])
        {
          case 0uLL:
          case 1uLL:
          case 2uLL:
          case 3uLL:
          case 4uLL:
          case 5uLL:
          case 7uLL:
          case 8uLL:
          case 9uLL:
          case 0xAuLL:
          case 0xCuLL:
          case 0xDuLL:
          case 0xEuLL:
          case 0xFuLL:
          case 0x12uLL:
          case 0x13uLL:
          case 0x14uLL:
          case 0x15uLL:
          case 0x16uLL:
          case 0x17uLL:
          case 0x18uLL:
          case 0x19uLL:
          case 0x1AuLL:
          case 0x1BuLL:
          case 0x1CuLL:
          case 0x1DuLL:
          case 0x1EuLL:
          case 0x1FuLL:
          case 0x20uLL:
          case 0x21uLL:
          case 0x22uLL:
          case 0x23uLL:
          case 0x24uLL:
          case 0x25uLL:
          case 0x26uLL:
          case 0x27uLL:
          case 0x28uLL:
          case 0x29uLL:
          case 0x2AuLL:
          case 0x2BuLL:
          case 0x2CuLL:
          case 0x2DuLL:
          case 0x2EuLL:
          case 0x2FuLL:
          case 0x30uLL:
          case 0x31uLL:
          case 0x32uLL:
          case 0x33uLL:
          case 0x34uLL:
          case 0x35uLL:
          case 0x36uLL:
          case 0x37uLL:
          case 0x38uLL:
          case 0x39uLL:
          case 0x3AuLL:
          case 0x3CuLL:
          case 0x3DuLL:
          case 0x3EuLL:
          case 0x3FuLL:
          case 0x46uLL:
          case 0x47uLL:
          case 0x48uLL:
          case 0x49uLL:
          case 0x4BuLL:
          case 0x4EuLL:
          case 0x4FuLL:
          case 0x50uLL:
          case 0x53uLL:
          case 0x57uLL:
          case 0x59uLL:
          case 0x5AuLL:
          case 0x5BuLL:
          case 0x5CuLL:
          case 0x5FuLL:
          case 0x60uLL:
          case 0x61uLL:
          case 0x63uLL:
          case 0x64uLL:
          case 0x65uLL:
          case 0x6EuLL:
          case 0x6FuLL:
          case 0x71uLL:
          case 0x72uLL:
          case 0x76uLL:
          case 0x7CuLL:
          case 0x7DuLL:
          case 0x89uLL:
          case 0x8AuLL:
          case 0x8BuLL:
          case 0x8CuLL:
          case 0x90uLL:
          case 0x91uLL:
          case 0x93uLL:
          case 0x9CuLL:
          case 0x9DuLL:
          case 0x9EuLL:
          case 0x9FuLL:
          case 0xA0uLL:
          case 0xA1uLL:
          case 0xA2uLL:
          case 0xA3uLL:
          case 0xA4uLL:
          case 0xA5uLL:
          case 0xA6uLL:
          case 0xA7uLL:
          case 0xA8uLL:
          case 0xA9uLL:
          case 0xAAuLL:
          case 0xABuLL:
          case 0xACuLL:
          case 0xADuLL:
          case 0xB2uLL:
          case 0xB3uLL:
          case 0xB6uLL:
          case 0xB7uLL:
          case 0xBAuLL:
          case 0xBBuLL:
          case 0xBCuLL:
          case 0xBDuLL:
          case 0xBFuLL:
          case 0xC0uLL:
          case 0xC1uLL:
          case 0xC2uLL:
          case 0xC3uLL:
          case 0xC4uLL:
          case 0xC7uLL:
          case 0xC9uLL:
          case 0xCAuLL:
          case 0xCBuLL:
          case 0xCCuLL:
          case 0xCDuLL:
          case 0xCEuLL:
          case 0xCFuLL:
          case 0xDCuLL:
          case 0xDDuLL:
          case 0xDEuLL:
          case 0xDFuLL:
          case 0xE0uLL:
          case 0xE1uLL:
          case 0xE2uLL:
          case 0xE5uLL:
          case 0xE6uLL:
          case 0xE7uLL:
          case 0xE8uLL:
          case 0xE9uLL:
          case 0xEAuLL:
          case 0xEBuLL:
          case 0xECuLL:
          case 0xEDuLL:
          case 0xF0uLL:
          case 0xF1uLL:
          case 0xF2uLL:
          case 0xF3uLL:
          case 0xF4uLL:
          case 0xF8uLL:
          case 0xF9uLL:
          case 0xFAuLL:
          case 0xFBuLL:
          case 0x100uLL:
          case 0x101uLL:
          case 0x102uLL:
          case 0x103uLL:
          case 0x104uLL:
          case 0x106uLL:
          case 0x107uLL:
          case 0x108uLL:
          case 0x109uLL:
          case 0x10AuLL:
          case 0x10DuLL:
          case 0x10EuLL:
          case 0x110uLL:
          case 0x112uLL:
          case 0x113uLL:
          case 0x114uLL:
          case 0x115uLL:
          case 0x117uLL:
          case 0x118uLL:
          case 0x119uLL:
          case 0x11AuLL:
          case 0x11BuLL:
          case 0x11CuLL:
          case 0x11EuLL:
          case 0x11FuLL:
          case 0x120uLL:
          case 0x126uLL:
          case 0x127uLL:
          case 0x128uLL:
          case 0x129uLL:
          case 0x12DuLL:
          case 0x12EuLL:
          case 0x12FuLL:
          case 0x131uLL:
          case 0x139uLL:
          case 0x13AuLL:

            id v16 = [v10 displayTypeIdentifierString];
            uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v19 = v18;

            uint64_t v20 = a2[2];
            if (!v20)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v7 = v27;
              unsigned int v8 = &selRef_isKappaDetectionSupportedOnPhone;
              goto LABEL_5;
            }
            if (a2[4] == v17 && a2[5] == v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_16:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            else
            {
              if (v20 != 1)
              {
                unint64_t v3 = (unint64_t)(a2 + 7);
                uint64_t v21 = 1;
                do
                {
                  uint64_t v22 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_35;
                  }
                  BOOL v23 = *(void *)(v3 - 8) == v17 && *(void *)v3 == v19;
                  if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                    goto LABEL_16;
                  }
                  v3 += 16;
                  ++v21;
                }
                while (v22 != v20);
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            unint64_t v3 = (unint64_t)v25;
            uint64_t v4 = v26;
            id v7 = v27;
            unsigned int v8 = &selRef_isKappaDetectionSupportedOnPhone;
            if (v5 == v26) {
              goto LABEL_37;
            }
            break;
          default:

            swift_bridgeObjectRelease();
            goto LABEL_5;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
LABEL_5:
        uint64_t v4 = v12;
        if (v5 == v12) {
          goto LABEL_37;
        }
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
  }
LABEL_37:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_10006AAB0(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        unint64_t v5 = v4;
        unint64_t v6 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_17;
        }
        id v7 = [v4 objectType];
        unsigned int v8 = [v7 enabled];

        if (v8)
        {
          id v9 = [v5 objectType];
          switch((unint64_t)[v9 code])
          {
            case 0uLL:
            case 1uLL:
            case 2uLL:
            case 3uLL:
            case 4uLL:
            case 5uLL:
            case 7uLL:
            case 8uLL:
            case 9uLL:
            case 0xAuLL:
            case 0xCuLL:
            case 0xDuLL:
            case 0xEuLL:
            case 0xFuLL:
            case 0x12uLL:
            case 0x13uLL:
            case 0x14uLL:
            case 0x15uLL:
            case 0x16uLL:
            case 0x17uLL:
            case 0x18uLL:
            case 0x19uLL:
            case 0x1AuLL:
            case 0x1BuLL:
            case 0x1CuLL:
            case 0x1DuLL:
            case 0x1EuLL:
            case 0x1FuLL:
            case 0x20uLL:
            case 0x21uLL:
            case 0x22uLL:
            case 0x23uLL:
            case 0x24uLL:
            case 0x25uLL:
            case 0x26uLL:
            case 0x27uLL:
            case 0x28uLL:
            case 0x29uLL:
            case 0x2AuLL:
            case 0x2BuLL:
            case 0x2CuLL:
            case 0x2DuLL:
            case 0x2EuLL:
            case 0x2FuLL:
            case 0x30uLL:
            case 0x31uLL:
            case 0x32uLL:
            case 0x33uLL:
            case 0x34uLL:
            case 0x35uLL:
            case 0x36uLL:
            case 0x37uLL:
            case 0x38uLL:
            case 0x39uLL:
            case 0x3AuLL:
            case 0x3CuLL:
            case 0x3DuLL:
            case 0x3EuLL:
            case 0x3FuLL:
            case 0x46uLL:
            case 0x47uLL:
            case 0x48uLL:
            case 0x49uLL:
            case 0x4BuLL:
            case 0x4EuLL:
            case 0x4FuLL:
            case 0x50uLL:
            case 0x53uLL:
            case 0x57uLL:
            case 0x59uLL:
            case 0x5AuLL:
            case 0x5BuLL:
            case 0x5CuLL:
            case 0x5FuLL:
            case 0x60uLL:
            case 0x61uLL:
            case 0x63uLL:
            case 0x64uLL:
            case 0x65uLL:
            case 0x6EuLL:
            case 0x6FuLL:
            case 0x71uLL:
            case 0x72uLL:
            case 0x76uLL:
            case 0x7CuLL:
            case 0x7DuLL:
            case 0x89uLL:
            case 0x8AuLL:
            case 0x8BuLL:
            case 0x8CuLL:
            case 0x90uLL:
            case 0x91uLL:
            case 0x93uLL:
            case 0x9CuLL:
            case 0x9DuLL:
            case 0x9EuLL:
            case 0x9FuLL:
            case 0xA0uLL:
            case 0xA1uLL:
            case 0xA2uLL:
            case 0xA3uLL:
            case 0xA4uLL:
            case 0xA5uLL:
            case 0xA6uLL:
            case 0xA7uLL:
            case 0xA8uLL:
            case 0xA9uLL:
            case 0xAAuLL:
            case 0xABuLL:
            case 0xACuLL:
            case 0xADuLL:
            case 0xB2uLL:
            case 0xB3uLL:
            case 0xB6uLL:
            case 0xB7uLL:
            case 0xBAuLL:
            case 0xBBuLL:
            case 0xBCuLL:
            case 0xBDuLL:
            case 0xBFuLL:
            case 0xC0uLL:
            case 0xC1uLL:
            case 0xC2uLL:
            case 0xC3uLL:
            case 0xC4uLL:
            case 0xC7uLL:
            case 0xC9uLL:
            case 0xCAuLL:
            case 0xCBuLL:
            case 0xCCuLL:
            case 0xCDuLL:
            case 0xCEuLL:
            case 0xCFuLL:
            case 0xDCuLL:
            case 0xDDuLL:
            case 0xDEuLL:
            case 0xDFuLL:
            case 0xE0uLL:
            case 0xE1uLL:
            case 0xE2uLL:
            case 0xE5uLL:
            case 0xE6uLL:
            case 0xE7uLL:
            case 0xE8uLL:
            case 0xE9uLL:
            case 0xEAuLL:
            case 0xEBuLL:
            case 0xECuLL:
            case 0xEDuLL:
            case 0xF0uLL:
            case 0xF1uLL:
            case 0xF2uLL:
            case 0xF3uLL:
            case 0xF4uLL:
            case 0xF8uLL:
            case 0xF9uLL:
            case 0xFAuLL:
            case 0xFBuLL:
            case 0x100uLL:
            case 0x101uLL:
            case 0x102uLL:
            case 0x103uLL:
            case 0x104uLL:
            case 0x106uLL:
            case 0x107uLL:
            case 0x108uLL:
            case 0x109uLL:
            case 0x10AuLL:
            case 0x10DuLL:
            case 0x10EuLL:
            case 0x110uLL:
            case 0x112uLL:
            case 0x113uLL:
            case 0x114uLL:
            case 0x115uLL:
            case 0x117uLL:
            case 0x118uLL:
            case 0x119uLL:
            case 0x11AuLL:
            case 0x11BuLL:
            case 0x11CuLL:
            case 0x11EuLL:
            case 0x11FuLL:
            case 0x120uLL:
            case 0x126uLL:
            case 0x127uLL:
            case 0x128uLL:
            case 0x129uLL:
            case 0x12DuLL:
            case 0x12EuLL:
            case 0x12FuLL:
            case 0x131uLL:
            case 0x139uLL:
            case 0x13AuLL:

              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
              break;
            default:

              break;
          }
        }
        else
        {
        }
        ++v3;
        if (v6 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v3 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

void *sub_10006B16C()
{
  uint64_t v0 = self;
  swift_bridgeObjectRetain();
  AppDependency.wrappedValue.getter();
  id v1 = [v0 sharedInstanceForHealthStore:v13];

  if (!v1)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_22;
  }
  id v2 = [v1 allDisplayTypes];

  if (v2)
  {
    sub_10001E254(0, &qword_1001064D0);
    unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    unint64_t v4 = (unint64_t)sub_100069AC8(v3);
    swift_bridgeObjectRelease();
    if ((v4 & 0x8000000000000000) != 0 || (v4 & 0x4000000000000000) != 0)
    {
      unint64_t v11 = swift_bridgeObjectRetain();
      unint64_t v5 = (unint64_t)sub_10008FF00(v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    unint64_t v13 = v5;
    sub_10006831C((uint64_t *)&v13);
    swift_bridgeObjectRelease();
    unint64_t v6 = v13;
    if ((v13 & 0x8000000000000000) != 0 || (v13 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v7) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v7 = *(void *)(v13 + 16);
      if (v7)
      {
LABEL_9:
        unint64_t v13 = (unint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        if ((v7 & 0x8000000000000000) == 0)
        {
          uint64_t v8 = 0;
          do
          {
            if ((v6 & 0xC000000000000001) != 0) {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v9 = *(id *)(v6 + 8 * v8 + 32);
            }
            ++v8;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          while (v7 != v8);
          unint64_t v10 = v13;
          swift_bridgeObjectRelease();
          swift_release();
          return (void *)v10;
        }
        __break(1u);
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    return _swiftEmptyArrayStorage;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  __break(1u);
  swift_bridgeObjectRelease();
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

void *sub_10006B3E0(uint64_t a1, void *a2)
{
  unint64_t v3 = self;
  swift_bridgeObjectRetain();
  AppDependency.wrappedValue.getter();
  id v4 = [v3 sharedInstanceForHealthStore:v16];

  if (!v4)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_22;
  }
  id v5 = [v4 allDisplayTypes];

  if (v5)
  {
    sub_10001E254(0, &qword_1001064D0);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    unint64_t v7 = (unint64_t)sub_10006A290(v6, a2);
    swift_bridgeObjectRelease();
    if ((v7 & 0x8000000000000000) != 0 || (v7 & 0x4000000000000000) != 0)
    {
      unint64_t v14 = swift_bridgeObjectRetain();
      unint64_t v8 = (unint64_t)sub_10008FF00(v14);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    unint64_t v16 = v8;
    sub_10006831C((uint64_t *)&v16);
    swift_bridgeObjectRelease();
    unint64_t v9 = v16;
    if ((v16 & 0x8000000000000000) != 0 || (v16 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v10) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v10 = *(void *)(v16 + 16);
      if (v10)
      {
LABEL_9:
        unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        if ((v10 & 0x8000000000000000) == 0)
        {
          uint64_t v11 = 0;
          do
          {
            if ((v9 & 0xC000000000000001) != 0) {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v12 = *(id *)(v9 + 8 * v11 + 32);
            }
            ++v11;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          while (v10 != v11);
          unint64_t v13 = v16;
          swift_bridgeObjectRelease();
          swift_release();
          return (void *)v13;
        }
        __break(1u);
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    return _swiftEmptyArrayStorage;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  __break(1u);
  swift_bridgeObjectRelease();
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

void sub_10006B64C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_100026274();
    unint64_t v7 = a3(a1, &type metadata for HealthDataTypeEntity, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_10006B6B0()
{
  unint64_t result = qword_1001064F0;
  if (!qword_1001064F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001064F0);
  }
  return result;
}

uint64_t sub_10006B704(uint64_t a1, uint64_t a2)
{
  sub_100068180(0, &qword_1001055F8, (void (*)(uint64_t))&type metadata accessor for IntentDescription);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006B784()
{
  unint64_t result = qword_1001064F8;
  if (!qword_1001064F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001064F8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DataTypeIntentError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10006B874);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DataTypeIntentError()
{
  return &type metadata for DataTypeIntentError;
}

unint64_t sub_10006B8B0()
{
  unint64_t result = qword_100106500;
  if (!qword_100106500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106500);
  }
  return result;
}

uint64_t sub_10006B904(uint64_t a1)
{
  sub_10006BA18(0, &qword_100106508, (void (*)(uint64_t))sub_10001AE44);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void PersonalizedFeedDataSource.init(_:)()
{
}

void sub_10006B9AC()
{
}

id PersonalizedFeedDataSource.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PersonalizedFeedDataSource();
  return [super dealloc];
}

void sub_10006B9F4(uint64_t a1)
{
}

void sub_10006BA18(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10006BA6C()
{
  return type metadata accessor for PersonalizedFeedDataSource();
}

void sub_10006BA74(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10001E254(0, (unint64_t *)&unk_100106F40);
    sub_10006DA64();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v16 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_37;
    }
    sub_10001E254(0, (unint64_t *)&unk_100106F40);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = v17;
    swift_unknownObjectRelease();
    uint64_t v11 = v3;
    uint64_t v9 = v4;
    if (!v17) {
      goto LABEL_37;
    }
LABEL_33:
    self;
    if (swift_dynamicCastObjCClass())
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
    }
    uint64_t v3 = v11;
    unint64_t v4 = v9;
  }
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
LABEL_32:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v8) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v16 + 8 * v13);
    uint64_t v11 = v3 + 1;
    if (!v14)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v16 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v8) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v16 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v8) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v16 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v8) {
              goto LABEL_37;
            }
            unint64_t v14 = *(void *)(v16 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v8 != v15)
              {
                unint64_t v14 = *(void *)(v16 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_31;
                }
              }
LABEL_37:
              sub_10001B2F8();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

id sub_10006BDD8@<X0>(void *a1@<X8>)
{
  id result = [objc_allocWithZone((Class)HKHealthStore) init];
  *a1 = result;
  return result;
}

id sub_10006BFF0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return [super dealloc];
}

uint64_t sub_10006C070()
{
  id v0 = [self sharedApplication];
  id v1 = [v0 connectedScenes];

  sub_10001E254(0, (unint64_t *)&unk_100106F40);
  sub_10006DA64();
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = sub_100004D94(v2, (unint64_t *)&unk_100106F40);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_10006C138()
{
  id v1 = v0;
  uint64_t v2 = *v0;
  sub_10006DACC();
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    unint64_t v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                id v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_10006C3D4()
{
  id v1 = v0;
  uint64_t v2 = *v0;
  sub_10006DB40();
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                id v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

unint64_t *sub_10006C6B0(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_10006C814((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    unint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v6 = sub_10006C814((unint64_t *)v7, v4, v2);
    swift_release();
    swift_slowDealloc();
  }
  return v6;
}

unint64_t *sub_10006C814(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = result;
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    uint64_t result = (unint64_t *)[*(id *)(*(void *)(a3 + 48) + 8 * v13) activationState];
    if (!result)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return (unint64_t *)sub_10006C9B0(v4, a2, v5, a3);
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10006C9B0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10006DACC();
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = (void *)result;
  uint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    Swift::Int v18 = v9[5];
    id v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1 << *((unsigned char *)v9 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10006CC0C(uint64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v5 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) == 0)
    {
      if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
      {
        __break(1u);
      }
      else if ((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result))
      {
        if (*(_DWORD *)(a4 + 36) == a2)
        {
LABEL_17:
          uint64_t v6 = *(void *)(*(void *)(a4 + 48) + 8 * v5);
          swift_retain();
          return v6;
        }
        __break(1u);
        goto LABEL_10;
      }
      __break(1u);
      goto LABEL_21;
    }
LABEL_10:
    uint64_t result = __CocoaSet.Index.age.getter();
    if (result == *(_DWORD *)(a4 + 36))
    {
      __CocoaSet.Index.element.getter();
      type metadata accessor for AdvertisableFeatureModel();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      sub_10002069C(&qword_100105C68, 255, (void (*)(uint64_t))&type metadata accessor for AdvertisableFeatureModel);
      uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
      unint64_t v5 = v7 & ~v8;
      if ((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        uint64_t v9 = ~v8;
        sub_10002069C((unint64_t *)&unk_100106610, 255, (void (*)(uint64_t))&type metadata accessor for AdvertisableFeatureModel);
        while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        {
          unint64_t v5 = (v5 + 1) & v9;
          if (((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
            goto LABEL_15;
          }
        }
      }
      else
      {
LABEL_15:
        swift_release();
        __break(1u);
      }
      swift_release();
      goto LABEL_17;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (a3)
  {
    __CocoaSet.element(at:)();
    type metadata accessor for AdvertisableFeatureModel();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v6 = v10;
    swift_unknownObjectRelease();
    return v6;
  }
LABEL_22:
  __break(1u);
  return result;
}

void sub_10006CEA8(uint64_t a1, int a2, char a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v7 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_10001E254(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_10001E254(0, a5);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  a5 = v17;
  swift_unknownObjectRelease();
  Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v7 = v8 & ~v9;
  if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v10 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v7 = (v7 + 1) & v12;
      if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        goto LABEL_23;
      }
      id v13 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
      char v14 = static NSObject.== infix(_:_:)();
    }
    while ((v14 & 1) == 0);
  }

LABEL_17:
  uint64_t v15 = *(void **)(*(void *)(a4 + 48) + 8 * v7);

  id v16 = v15;
}

uint64_t sub_10006D11C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_10006D1A4()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = ObjectType;
    *(_DWORD *)uint64_t v7 = 136446466;
    swift_getMetatypeMetadata();
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t v12 = sub_100018DA0(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    uint64_t v12 = sub_100018DA0(0xD000000000000027, 0x80000001000D4260, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s]: Lifecycle: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

BOOL sub_10006D3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16))
  {
    static Logger.general.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v24 = a1;
      uint64_t v11 = (uint8_t *)v10;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v26 = v23;
      *(_DWORD *)uint64_t v11 = 136315138;
      v22[1] = v11 + 4;
      type metadata accessor for OpenURLOptionsKey(0);
      sub_10002069C(&qword_100104488, 255, type metadata accessor for OpenURLOptionsKey);
      swift_bridgeObjectRetain();
      v22[0] = (char *)&type metadata for Any + 8;
      uint64_t v12 = Dictionary.description.getter();
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      uint64_t v25 = sub_100018DA0(v12, v14, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Legacy openURL method on AppDelegate does not support options: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a1 = v24;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  id v15 = [self sharedApplication];
  id v16 = [v15 connectedScenes];

  sub_10001E254(0, (unint64_t *)&unk_100106F40);
  sub_10006DA64();
  uint64_t v17 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::Int v18 = (void *)sub_100004D94(v17, (unint64_t *)&unk_100106F40);
  swift_bridgeObjectRelease();
  if (!v18) {
    return 0;
  }
  if ([v18 delegate])
  {
    type metadata accessor for SceneDelegate();
    uint64_t v19 = swift_dynamicCastClass();
    BOOL v20 = v19 != 0;
    if (v19) {
      sub_10007CD90(a1, 0);
    }
    swift_unknownObjectRelease();
  }
  else
  {
    BOOL v20 = 0;
  }

  return v20;
}

uint64_t sub_10006D768()
{
  id v0 = [self sharedApplication];
  id v1 = [v0 connectedScenes];

  unint64_t v2 = sub_10001E254(0, (unint64_t *)&unk_100106F40);
  sub_10006DA64();
  uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = (unint64_t *)&_swiftEmptySetSingleton;
    __CocoaSet.makeIterator()();
    uint64_t v5 = __CocoaSet.Iterator.next()();
    if (v5)
    {
      do
      {
        uint64_t v21 = v5;
        swift_dynamicCast();
        if (objc_msgSend(v22, "activationState", v21))
        {
        }
        else
        {
          if (*((void *)&_swiftEmptySetSingleton + 3) <= *((void *)&_swiftEmptySetSingleton + 2)) {
            sub_10006C138();
          }
          Swift::Int v6 = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
          uint64_t v7 = (char *)&_swiftEmptySetSingleton + 56;
          uint64_t v8 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
          unint64_t v9 = v6 & ~v8;
          unint64_t v10 = v9 >> 6;
          if (((-1 << v9) & ~*((void *)&_swiftEmptySetSingleton + (v9 >> 6) + 7)) != 0)
          {
            unint64_t v11 = __clz(__rbit64((-1 << v9) & ~*((void *)&_swiftEmptySetSingleton + (v9 >> 6) + 7))) | v9 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v12 = 0;
            unint64_t v13 = (unint64_t)(63 - v8) >> 6;
            do
            {
              if (++v10 == v13 && (v12 & 1) != 0)
              {
                __break(1u);
                goto LABEL_29;
              }
              BOOL v14 = v10 == v13;
              if (v10 == v13) {
                unint64_t v10 = 0;
              }
              v12 |= v14;
              uint64_t v15 = *(void *)&v7[8 * v10];
            }
            while (v15 == -1);
            unint64_t v11 = __clz(__rbit64(~v15)) + (v10 << 6);
          }
          *(void *)&v7[(v11 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v11;
          *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v11) = v22;
          ++*((void *)&_swiftEmptySetSingleton + 2);
        }
        uint64_t v5 = __CocoaSet.Iterator.next()();
      }
      while (v5);
      uint64_t v4 = (unint64_t *)&_swiftEmptySetSingleton;
    }
    swift_release();
  }
  else
  {
    uint64_t v4 = sub_10006C6B0(v3);
  }
  sub_10006BA74((uint64_t)v4);
  unint64_t v2 = v16;
  uint64_t result = swift_release();
  if (!(v2 >> 62))
  {
    if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_25;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_29:
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v20) {
    goto LABEL_30;
  }
LABEL_25:
  if ((v2 & 0xC000000000000001) != 0)
  {
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_28;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v18 = *(id *)(v2 + 32);
LABEL_28:
    id v19 = v18;
    swift_bridgeObjectRelease();
    return (uint64_t)v19;
  }
  __break(1u);
  return result;
}

unint64_t sub_10006DA64()
{
  unint64_t result = qword_1001065C0;
  if (!qword_1001065C0)
  {
    sub_10001E254(255, (unint64_t *)&unk_100106F40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001065C0);
  }
  return result;
}

void sub_10006DACC()
{
  if (!qword_1001065C8)
  {
    sub_10001E254(255, (unint64_t *)&unk_100106F40);
    sub_10006DA64();
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001065C8);
    }
  }
}

void sub_10006DB40()
{
  if (!qword_1001065D8)
  {
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001065D8);
    }
  }
}

void *sub_10006DBA0(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  uint64_t v12[3] = sub_10002F03C();
  unint64_t v16 = (void *)type metadata accessor for CloudSyncBuddyAvailabilityProvider();
  sub_10006F894();
  uint64_t v8 = String.init<A>(describing:)();
  v12[1] = v9;
  void v12[2] = v8;
  static DispatchQoS.unspecified.getter();
  unint64_t v16 = _swiftEmptyArrayStorage;
  sub_100019DAC(&qword_1001066F8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000134D0(0, (unint64_t *)&unk_100106F20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_10006ECE0(&qword_100106700, (unint64_t *)&unk_100106F20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v13);
  uint64_t v10 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v2[2] = v14;
  v2[3] = v15;
  v2[4] = v10;
  return v2;
}

uint64_t sub_10006DE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v37 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v36 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  __chkstk_darwin(v5);
  id v33 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v31 - v12;
  dispatch_semaphore_t v14 = dispatch_semaphore_create(0);
  sub_1000134D0(0, &qword_1001066E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v15 = swift_allocBox();
  uint64_t v17 = v16;
  uint64_t v18 = type metadata accessor for CloudSyncState();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v32 = a1;
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = v19;
  v20[3] = v15;
  v20[4] = v14;
  swift_retain();
  swift_retain();
  uint64_t v21 = v14;
  dispatch thunk of CloudSyncStateObserver.stateChangeHandler.setter();
  swift_release();
  dispatch thunk of CloudSyncStateObserver.startObservingStateChanges()();
  static DispatchTime.now()();
  + infix(_:_:)();
  id v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v11, v7);
  LOBYTE(v11) = OS_dispatch_semaphore.wait(timeout:)() & 1;
  v22(v13, v7);
  dispatch thunk of CloudSyncStateObserver.stateChangeHandler.setter();
  sub_10002F03C();
  uint64_t v23 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v32;
  *(void *)(v24 + 24) = v15;
  *(unsigned char *)(v24 + 32) = (_BYTE)v11;
  uint64_t v25 = v35;
  *(void *)(v24 + 4sub_10004C8C4(0, 0) = v34;
  *(void *)(v24 + 48) = v25;
  aBlock[4] = sub_10006EE18;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = &unk_1000F7490;
  uint64_t v26 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v27 = v33;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100019DAC((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000134D0(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_10006ECE0((unint64_t *)&qword_100105A10, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v29 = v36;
  uint64_t v28 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v39);
  return swift_release();
}

Swift::Int sub_10006E388(uint64_t a1)
{
  sub_1000134D0(0, &qword_1001066E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v10[-v3];
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v7 = *(id *)(Strong + 16);
    swift_release();
    dispatch thunk of CloudSyncStateObserver.stateChangeHandler.setter();
  }
  sub_10006F740(a1, (uint64_t)v4);
  uint64_t v8 = type metadata accessor for CloudSyncState();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 0, 1, v8);
  swift_beginAccess();
  sub_10006F800((uint64_t)v4, v5);
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_10006E50C(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  char v7 = a3 & 1;
  sub_1000134D0(0, &qword_1001066E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v13 - v9;
  uint64_t v11 = swift_projectBox();
  swift_beginAccess();
  sub_10006EE28(v11, (uint64_t)v10);
  sub_10006EEBC((uint64_t)v10, v7, a4, a5);
  return sub_10006F5B8((uint64_t)v10);
}

uint64_t sub_10006E604()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CloudSyncBuddyAvailabilityProvider()
{
  return self;
}

void sub_10006E670(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v9 - 8);
  uint64_t v37 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v40 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v36 - v16;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  uint64_t v19 = *(void **)(a1 + 24);
  swift_retain();
  id v20 = a3;
  id v21 = [v19 aida_accountForPrimaryiCloudAccount];

  if (v21)
  {
    id v22 = [v19 aa_primaryAppleAccount];
    if (v22)
    {
      uint64_t v23 = v22;
      if (objc_msgSend(v22, "aa_isManagedAppleID"))
      {
        static Logger.cloudSync.getter();
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v26 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Account is a Managed Apple ID, skip enable cloud sync buddy", v26, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v40);
        swift_beginAccess();
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        if (Strong)
        {
          uint64_t v28 = (void *)Strong;
          sub_100089154();
          swift_release();
        }
        else
        {
          swift_release();
        }
        return;
      }
    }
    uint64_t v34 = (void *)swift_allocObject();
    void v34[2] = a1;
    v34[3] = sub_10006EC8C;
    v34[4] = v18;
    aBlock[4] = sub_10006ECD4;
    aBlock[5] = v34;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100005388;
    aBlock[3] = &unk_1000F73F0;
    uint64_t v35 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v41 = _swiftEmptyArrayStorage;
    sub_100019DAC((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000134D0(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    sub_10006ECE0((unint64_t *)&qword_100105A10, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v35);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v37);
    swift_release();
    swift_release();
    return;
  }
  static Logger.cloudSync.getter();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "No account, skip enable cloud sync buddy", v31, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v40);
  swift_beginAccess();
  uint64_t v32 = swift_unknownObjectWeakLoadStrong();
  if (v32)
  {
    id v33 = (void *)v32;
    sub_100089154();
    swift_release();
  }
  else
  {
    swift_release();
  }
}

uint64_t sub_10006EC4C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10006EC8C(char a1)
{
  sub_100089564(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10006EC94()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006ECD4()
{
  return sub_10006DE34(v0[2], v0[3], v0[4]);
}

uint64_t sub_10006ECE0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000134D0(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006ED44()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006ED7C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

Swift::Int sub_10006EDC4(uint64_t a1)
{
  return sub_10006E388(a1);
}

uint64_t sub_10006EDD0()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10006EE18()
{
  return sub_10006E50C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(uint64_t (**)(uint64_t))(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_10006EE28(uint64_t a1, uint64_t a2)
{
  sub_1000134D0(0, &qword_1001066E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006EEBC(uint64_t a1, char a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v62 = a4;
  id v63 = a3;
  int v5 = a2 & 1;
  uint64_t v6 = type metadata accessor for CloudSyncState();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v56 = (uint64_t)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v60 = (char *)&v55 - v11;
  __chkstk_darwin(v10);
  uint64_t v59 = (char *)&v55 - v12;
  sub_1000134D0(0, &qword_1001066E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v58 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  int v57 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v55 - v16;
  uint64_t v64 = type metadata accessor for Logger();
  uint64_t v61 = *(void *)(v64 - 8);
  uint64_t v18 = __chkstk_darwin(v64);
  id v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v55 - v22;
  __chkstk_darwin(v21);
  os_log_type_t v25 = (char *)&v55 - v24;
  sub_10006F644();
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v29 = (char *)&v55 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(int *)(v27 + 56);
  sub_10006EE28(a1, (uint64_t)v29);
  v29[v30] = v5;
  int v31 = v5;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v29, 1, v6) != 1)
  {
    uint64_t v32 = (uint64_t)v59;
    uint64_t v33 = (uint64_t)v60;
    if (!v31)
    {
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        static Logger.cloudSync.getter();
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Cloud sync disabled, show enable cloud sync buddy", v36, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v61 + 8))(v23, v64);
        return v63(1);
      }
      else
      {
        uint64_t v58 = v6;
        uint64_t v45 = v32;
        sub_10006F6DC((uint64_t)v29, v32);
        static Logger.cloudSync.getter();
        sub_10006F740(v32, v33);
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.default.getter();
        BOOL v48 = os_log_type_enabled(v46, v47);
        uint64_t v49 = v64;
        uint64_t v50 = v61;
        if (v48)
        {
          id v51 = (uint8_t *)swift_slowAlloc();
          uint64_t v52 = swift_slowAlloc();
          int v57 = v20;
          uint64_t v66 = v52;
          *(_DWORD *)id v51 = 136315138;
          sub_10006F740(v33, v56);
          uint64_t v53 = String.init<A>(describing:)();
          uint64_t v65 = sub_100018DA0(v53, v54, &v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006F7A4(v33);
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "Cloud sync not disabled (%s), skip enable cloud sync buddy", v51, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v50 + 8))(v57, v64);
        }
        else
        {
          sub_10006F7A4(v33);

          (*(void (**)(char *, uint64_t))(v50 + 8))(v20, v49);
        }
        v63(0);
        return sub_10006F7A4(v45);
      }
    }
    sub_10006F5B8((uint64_t)v29);
  }
  static Logger.cloudSync.getter();
  sub_10006EE28(a1, (uint64_t)v17);
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136446466;
    sub_10006EE28((uint64_t)v17, (uint64_t)v57);
    uint64_t v41 = String.init<A>(describing:)();
    uint64_t v65 = sub_100018DA0(v41, v42, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006F5B8((uint64_t)v17);
    *(_WORD *)(v40 + 12) = 2082;
    LOBYTE(v65) = v31;
    uint64_t v43 = String.init<A>(describing:)();
    uint64_t v65 = sub_100018DA0(v43, v44, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "state: %{public}s, timeoutResult: %{public}s, healthd did not respond fast enough, skip enable cloud sync buddy", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10006F5B8((uint64_t)v17);
  }

  (*(void (**)(char *, uint64_t))(v61 + 8))(v25, v64);
  return v63(0);
}

uint64_t sub_10006F5B8(uint64_t a1)
{
  sub_1000134D0(0, &qword_1001066E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10006F644()
{
  if (!qword_1001066E8)
  {
    sub_1000134D0(255, &qword_1001066E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1001066E8);
    }
  }
}

uint64_t sub_10006F6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudSyncState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F740(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudSyncState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F7A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CloudSyncState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006F800(uint64_t a1, uint64_t a2)
{
  sub_1000134D0(0, &qword_1001066E0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006F894()
{
  unint64_t result = qword_1001066F0;
  if (!qword_1001066F0)
  {
    type metadata accessor for CloudSyncBuddyAvailabilityProvider();
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1001066F0);
  }
  return result;
}

uint64_t type metadata accessor for WelcomeiPadHealthKitSyncViewController()
{
  uint64_t result = qword_100106738;
  if (!qword_100106738) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10006F920()
{
  return swift_initClassMetadata2();
}

void sub_10006F990()
{
  qword_100108C40 = 0x4056800000000000;
}

void sub_10006F9A4(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = type metadata accessor for Locale();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for String.LocalizationValue();
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  __chkstk_darwin(v10);
  *(void *)&v4[qword_100106708 + 8] = 0;
  uint64_t v11 = swift_unknownObjectWeakInit();
  *(void *)&v4[qword_100106728] = 0;
  *(void *)&v4[qword_100106730] = 0;
  v4[qword_100106720] = a4;
  *(void *)&v4[qword_100106710] = a1;
  *(void *)(v11 + 8) = a3;
  swift_unknownObjectWeakAssign();
  id v12 = objc_allocWithZone((Class)HKCloudSyncControl);
  uint64_t v13 = v4;
  id v14 = a1;
  id v15 = [v12 initWithHealthStore:v14];
  *(void *)&v13[qword_100106718] = v15;

  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v16 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v18 = v17;
  [self wapiCapability];
  uint64_t v32 = v14;
  uint64_t v31 = v18;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  uint64_t v20 = v19;
  id v21 = [self configurationWithPointSize:4 weight:1 scale:50.0];
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [self systemImageNamed:v22 withConfiguration:v21];

  if (v23)
  {
    uint64_t v24 = (objc_class *)type metadata accessor for ImageWithCircleBackground();
    os_log_type_t v25 = (char *)objc_allocWithZone(v24);
    *(void *)&v25[OBJC_IVAR____TtC6Health25ImageWithCircleBackground_image] = v23;
    v33.receiver = v25;
    v33.super_class = v24;
    id v26 = v23;
    id v27 = [super initWithFrame:0.0, 0.0, 0.0, 0.0, v20, v13, v31, v16];
    sub_1000A477C();
    id v28 = [v27 heightAnchor];
    if (qword_100104030 != -1) {
      swift_once();
    }
    id v29 = [v28 constraintEqualToConstant:*(double *)&qword_100108C40];

    [v29 setActive:1];
    id v30 = v27;
    OnboardingHeroWithLinkViewController.init(title:detailText:heroView:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:heroViewUsesIntrinsicHeight:)();

    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_10006FE64()
{
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v2 - 8);
  v19.receiver = v0;
  v19.super_class = (Class)type metadata accessor for WelcomeiPadHealthKitSyncViewController();
  [super viewDidLoad];
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100070EB8();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000CC0F0;
  *(void *)(v4 + 32) = 0xD000000000000024;
  *(void *)(v4 + 4sub_10004C8C4(0, 0) = 0x80000001000D0E90;
  strcpy((char *)(v4 + 48), "EnableButton");
  *(unsigned char *)(v4 + 61) = 0;
  *(_WORD *)(v4 + 62) = -5120;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = (id)HKUIJoinStringsForAutomationIdentifier();

  id v7 = [v0 hxui_addPrimaryFooterButtonWithTitle:v3 accessibilityIdentifier:v6];
  uint64_t v8 = *(void **)&v0[qword_100106728];
  *(void *)&v0[qword_100106728] = v7;

  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1000CC0F0;
  *(void *)(v10 + 32) = 0xD000000000000024;
  *(void *)(v10 + 4sub_10004C8C4(0, 0) = 0x80000001000D0E90;
  strcpy((char *)(v10 + 48), "DisableButton");
  *(_WORD *)(v10 + 62) = -4864;
  Class v11 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = (id)HKUIJoinStringsForAutomationIdentifier();

  id v13 = [v0 hxui_addSecondaryFooterButtonWithTitle:v9 bold:0 accessibilityIdentifier:v12];
  id v14 = *(void **)&v0[qword_100106730];
  *(void *)&v0[qword_100106730] = v13;

  id v15 = [v0 view];
  if (v15)
  {
    uint64_t v16 = v15;
    Class v17 = Array._bridgeToObjectiveC()().super.isa;
    id v18 = (id)HKUIJoinStringsForAutomationIdentifier();

    [v16 setAccessibilityIdentifier:v18];
  }
  else
  {
    __break(1u);
  }
}

void sub_100070200(void *a1)
{
  id v1 = a1;
  sub_10006FE64();
}

void sub_100070248()
{
  id v1 = *(void **)(v0 + qword_100106728);
  id v2 = v1;
  sub_100070384(v1, 1);

  sub_10005561C();
  AnalyticsSubmitting.submit()();
}

void sub_1000702B8(void *a1)
{
  id v1 = a1;
  sub_100070248();
}

void sub_100070300(char *a1)
{
  id v2 = *(void **)&a1[qword_100106730];
  id v3 = v2;
  uint64_t v4 = a1;
  sub_100070384(v2, 0);

  sub_10005561C();
  AnalyticsSubmitting.submit()();
}

void sub_100070384(void *a1, char a2)
{
  if (*(unsigned char *)(v2 + qword_100106720) == (a2 & 1))
  {
    if (swift_unknownObjectWeakLoadStrong())
    {
      sub_10008A8F0(a2 & 1);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    [a1 showsBusyIndicator];
    uint64_t v4 = *(void **)(v2 + qword_100106718);
    uint64_t v5 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    if (a2)
    {
      *(unsigned char *)(v6 + 24) = 1;
      id v12 = sub_100071088;
      uint64_t v13 = v6;
      uint64_t v8 = _NSConcreteStackBlock;
      uint64_t v9 = 1107296256;
      uint64_t v10 = sub_10000408C;
      Class v11 = &unk_1000F7568;
      id v7 = _Block_copy(&v8);
      swift_release();
      [v4 enableCloudSyncWithCompletion:v7];
    }
    else
    {
      *(unsigned char *)(v6 + 24) = 0;
      id v12 = sub_10007103C;
      uint64_t v13 = v6;
      uint64_t v8 = _NSConcreteStackBlock;
      uint64_t v9 = 1107296256;
      uint64_t v10 = sub_10000408C;
      Class v11 = &unk_1000F7518;
      id v7 = _Block_copy(&v8);
      swift_release();
      [v4 disableCloudSyncWithCompletion:v7];
    }
    _Block_release(v7);
  }
}

uint64_t sub_100070590(int a1, uint64_t a2, uint64_t a3, int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v39 = a7;
  uint64_t v40 = a3;
  uint64_t v37 = a6;
  int v38 = a4;
  LODWORD(v35) = a1;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v42 = *(void *)(v15 - 8);
  uint64_t v43 = v15;
  __chkstk_darwin(v15);
  uint64_t v41 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  objc_super v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    objc_super v33 = a5;
    uint64_t v23 = v22;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v34 = v14;
    uint64_t v32 = v24;
    aBlock[0] = v24;
    *(_DWORD *)uint64_t v23 = 67109378;
    LODWORD(v44) = v35 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 8) = 2082;
    uint64_t v35 = v23 + 10;
    uint64_t v44 = a2;
    swift_errorRetain();
    sub_100071130(0, (unint64_t *)&qword_100104660, (uint64_t (*)(uint64_t))sub_10001E8C0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v44 = sub_100018DA0(v25, v26, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, v33, (uint8_t *)v23, 0x12u);
    swift_arrayDestroy();
    id v14 = v34;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v36);
  sub_10002F03C();
  id v27 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v40;
  *(unsigned char *)(v28 + 24) = v38 & 1;
  *(void *)(v28 + 32) = a2;
  aBlock[4] = v39;
  aBlock[5] = v28;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100005388;
  aBlock[3] = a8;
  id v29 = _Block_copy(aBlock);
  swift_errorRetain();
  swift_retain();
  swift_release();
  id v30 = v41;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000710D8();
  sub_100071130(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_10001EF54();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v30, v43);
}

void sub_100070AB0(uint64_t a1, char a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = (void *)Strong;
    id v7 = *(void **)(Strong + qword_100106728);
    if (v7) {
      [v7 hidesBusyIndicator];
    }
    if (a3)
    {
      swift_errorRetain();
      sub_100071194();
      swift_errorRelease();
LABEL_6:

      return;
    }
    *((unsigned char *)v6 + qword_10010672sub_10004C8C4(0, 0) = a2 & 1;
    if (!swift_unknownObjectWeakLoadStrong()) {
      goto LABEL_6;
    }
    sub_10008A8F0(a2 & 1);

    swift_unknownObjectRelease();
  }
}

uint64_t sub_100070B88()
{
  sub_100071130(0, (unint64_t *)&unk_100104880, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v1 = v0;
  __chkstk_darwin(v0);
  id v3 = (char *)&v8 - v2;
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    if (qword_100104090 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_10003FE20(v1, (uint64_t)qword_100108CE0);
    sub_100070F38(v5, (uint64_t)v3);
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6) == 1)
    {
      sub_100028AF8((uint64_t)v3);
    }
    else
    {
      URL.openSensitiveURL()();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v3, v6);
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_100070D24()
{
}

void sub_100070D54()
{
}

void sub_100070D84()
{
  sub_100070F10(v0 + qword_100106708);

  uint64_t v1 = *(void **)(v0 + qword_100106730);
}

id sub_100070DF4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WelcomeiPadHealthKitSyncViewController();
  return [super dealloc];
}

void sub_100070E2C(uint64_t a1)
{
  sub_100070F10(a1 + qword_100106708);

  objc_super v2 = *(void **)(a1 + qword_100106730);
}

uint64_t sub_100070EA8()
{
  return type metadata accessor for WelcomeiPadHealthKitSyncViewController();
}

uint64_t sub_100070EB0()
{
  return 7;
}

void sub_100070EB8()
{
  if (!qword_100107330)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107330);
    }
  }
}

uint64_t sub_100070F10(uint64_t a1)
{
  return a1;
}

uint64_t sub_100070F38(uint64_t a1, uint64_t a2)
{
  sub_100071130(0, (unint64_t *)&unk_100104880, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100070FCC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100071004()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10007103C(int a1, uint64_t a2)
{
  return sub_100070590(a1, a2, *(void *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), "Disable cloud sync success %{BOOL}d, error %{public}s", (uint64_t)&unk_1000F75F0, (uint64_t)sub_100071480, (uint64_t)&unk_1000F7608);
}

uint64_t sub_100071088(int a1, uint64_t a2)
{
  return sub_100070590(a1, a2, *(void *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), "Enable cloud sync success %{BOOL}d, error %{public}s", (uint64_t)&unk_1000F75A0, (uint64_t)sub_1000714C0, (uint64_t)&unk_1000F75B8);
}

unint64_t sub_1000710D8()
{
  unint64_t result = qword_100105A00;
  if (!qword_100105A00)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100105A00);
  }
  return result;
}

void sub_100071130(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_100071194()
{
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v2 - 8);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [self alertControllerWithTitle:v3 message:v4 preferredStyle:1];

  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [self actionWithTitle:v6 style:0 handler:0];

  [v5 addAction:v7];
  [v0 presentViewController:v5 animated:1 completion:0];
}

uint64_t sub_100071440()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100071480()
{
  sub_100070AB0(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t type metadata accessor for CloudSyncDownloadingStateViewController()
{
  uint64_t result = qword_100106798;
  if (!qword_100106798) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100071510()
{
  uint64_t result = type metadata accessor for CloudSyncRestoreState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000715B4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CloudSyncRestoreState();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  NSString v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + qword_100106788 + 8) = 0;
  swift_unknownObjectWeakInit();
  id v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v1 + qword_100106790, a1, v3);
  id v8 = [objc_allocWithZone((Class)UIView) init];
  id v9 = [self configurationWithPointSize:4 weight:1 scale:50.0];
  v7((uint64_t)v6, a1, v3);
  int v10 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v10 == enum case for CloudSyncRestoreState.failed(_:) || v10 == enum case for CloudSyncRestoreState.completed(_:))
  {
    id v11 = v9;
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v13 = [self systemImageNamed:v12 withConfiguration:v11];

    if (v13)
    {
      id v14 = (objc_class *)type metadata accessor for ImageWithCircleBackground();
      uint64_t v15 = (char *)objc_allocWithZone(v14);
      *(void *)&v15[OBJC_IVAR____TtC6Health25ImageWithCircleBackground_image] = v13;
      v22.receiver = v15;
      v22.super_class = v14;
      id v16 = v13;
      [super initWithFrame:0.0, 0.0, 0.0, 0.0];
      sub_1000A477C();

      id v18 = [v17 heightAnchor];
      if (qword_100104030 != -1) {
        swift_once();
      }
      id v19 = [v18 constraintEqualToConstant:*(double *)&qword_100108C40];

      [v19 setActive:1];
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_10007196C();
  sub_100071B9C();
  uint64_t v20 = OnboardingHeroWithLinkViewController.init(title:detailText:heroView:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:heroViewUsesIntrinsicHeight:)();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return v20;
}

uint64_t sub_10007196C()
{
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for CloudSyncRestoreState();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  NSString v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v0, v3);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 == enum case for CloudSyncRestoreState.failed(_:) || v7 == enum case for CloudSyncRestoreState.completed(_:))
  {
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    return String.init(localized:table:bundle:locale:comment:)();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return 0;
  }
}

uint64_t sub_100071B9C()
{
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for CloudSyncRestoreState();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  NSString v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v0, v3);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 == enum case for CloudSyncRestoreState.failed(_:))
  {
    [self wapiCapability];
LABEL_4:
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    return String.init(localized:table:bundle:locale:comment:)();
  }
  if (v7 == enum case for CloudSyncRestoreState.completed(_:)) {
    goto LABEL_4;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return 0;
}

void sub_100071DF8()
{
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for CloudSyncDownloadingStateViewController();
  [super viewDidLoad];
  id v1 = [v0 navigationItem];
  [v1 setHidesBackButton:1];

  sub_100071FC4();
  id v2 = [v0 view];
  if (v2)
  {
    uint64_t v3 = v2;
    sub_100070EB8();
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1000CC0F0;
    *(void *)(v4 + 32) = 0x626E4F7964647542;
    *(void *)(v4 + 4sub_10004C8C4(0, 0) = 0xEF676E696472616FLL;
    *(void *)(v4 + 48) = 0xD000000000000019;
    *(void *)(v4 + 56) = 0x80000001000D4900;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v3 setAccessibilityIdentifier:v7];

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100071F7C(void *a1)
{
  id v1 = a1;
  sub_100071DF8();
}

void sub_100071FC4()
{
  uint64_t v1 = type metadata accessor for Locale();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for CloudSyncRestoreState();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v0 + qword_100106790, v3);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 == enum case for CloudSyncRestoreState.failed(_:))
  {
    id v8 = [self boldButton];
    [v8 addTarget:v0 action:"tryAgainButtonTapped" forControlEvents:64];
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    String.init(localized:table:bundle:locale:comment:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v8 setTitle:v9 forState:0];

    sub_100070EB8();
    uint64_t v10 = swift_allocObject();
    long long v45 = xmmword_1000CC0F0;
    *(_OWORD *)(v10 + 16) = xmmword_1000CC0F0;
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = v45;
    *(void *)(v11 + 32) = 0x626E4F7964647542;
    *(void *)(v11 + 4sub_10004C8C4(0, 0) = 0xEF676E696472616FLL;
    *(void *)(v11 + 48) = 0xD000000000000019;
    *(void *)(v11 + 56) = 0x80000001000D4900;
    id v12 = v8;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v14 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v14)
    {
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      *(void *)(v10 + 32) = v15;
      *(void *)(v10 + 4sub_10004C8C4(0, 0) = v17;
      strcpy((char *)(v10 + 48), "TryAgainButton");
      *(unsigned char *)(v10 + 63) = -18;
      Class v18 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v19 = (id)HKUIJoinStringsForAutomationIdentifier();

      [v12 setAccessibilityIdentifier:v19];
      id v20 = [v0 buttonTray];
      [v20 addButton:v12];

      id v21 = [self linkButton];
      [v21 addTarget:v0 action:"doneButtonTapped" forControlEvents:64];
      String.LocalizationValue.init(stringLiteral:)();
      static Locale.current.getter();
      String.init(localized:table:bundle:locale:comment:)();
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v21 setTitle:v22 forState:0];

      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = v45;
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = v45;
      *(void *)(v24 + 32) = 0x626E4F7964647542;
      *(void *)(v24 + 4sub_10004C8C4(0, 0) = 0xEF676E696472616FLL;
      *(void *)(v24 + 48) = 0xD000000000000019;
      *(void *)(v24 + 56) = 0x80000001000D4900;
      id v25 = v21;
      Class v26 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v27 = (id)HKUIJoinStringsForAutomationIdentifier();

      if (v27)
      {
        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v30 = v29;

        *(void *)(v23 + 32) = v28;
        *(void *)(v23 + 4sub_10004C8C4(0, 0) = v30;
        *(void *)(v23 + 48) = 0xD000000000000013;
        *(void *)(v23 + 56) = 0x80000001000D4990;
        Class v31 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v32 = (id)HKUIJoinStringsForAutomationIdentifier();

        [v25 setAccessibilityIdentifier:v32];
        id v33 = [v0 buttonTray];
        [v33 addButton:v25];

LABEL_8:
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  if (v7 == enum case for CloudSyncRestoreState.completed(_:))
  {
    id v34 = [self boldButton];
    [v34 addTarget:v0 action:"doneButtonTapped" forControlEvents:64];
    String.LocalizationValue.init(stringLiteral:)();
    static Locale.current.getter();
    String.init(localized:table:bundle:locale:comment:)();
    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v34 setTitle:v35 forState:0];

    sub_100070EB8();
    uint64_t v36 = swift_allocObject();
    long long v45 = xmmword_1000CC0F0;
    *(_OWORD *)(v36 + 16) = xmmword_1000CC0F0;
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = v45;
    *(void *)(v37 + 32) = 0x626E4F7964647542;
    *(void *)(v37 + 4sub_10004C8C4(0, 0) = 0xEF676E696472616FLL;
    *(void *)(v37 + 48) = 0xD000000000000019;
    *(void *)(v37 + 56) = 0x80000001000D4900;
    id v25 = v34;
    Class v38 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v39 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v39)
    {
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v42 = v41;

      *(void *)(v36 + 32) = v40;
      *(void *)(v36 + 4sub_10004C8C4(0, 0) = v42;
      *(void *)(v36 + 48) = 0x74747542656E6F44;
      *(void *)(v36 + 56) = 0xEA00000000006E6FLL;
      Class v43 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v44 = (id)HKUIJoinStringsForAutomationIdentifier();

      [v25 setAccessibilityIdentifier:v44];
      id v33 = [v0 buttonTray];
      [v33 addButton:v25];
      goto LABEL_8;
    }
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100072830()
{
  sub_10001E6EC();
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v11 - v4;
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v7 = enum case for CloudSyncRestoreState.activelyRestoring(_:);
    uint64_t v8 = type metadata accessor for CloudSyncRestoreState();
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 104))(v5, v7, v8);
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(v5, 0, 1, v8);
    v10(v3, 1, 1, v8);
    sub_10008AC30((uint64_t)v5, (uint64_t)v3);
    swift_unknownObjectRelease();
    sub_100008AF8((uint64_t)v3);
    return sub_100008AF8((uint64_t)v5);
  }
  return result;
}

void sub_1000729B4(void *a1)
{
  id v1 = a1;
  sub_100072830();
}

uint64_t sub_1000729FC()
{
  sub_10001E6EC();
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v12 - v4;
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v7 = enum case for CloudSyncRestoreState.failed(_:);
    uint64_t v8 = type metadata accessor for CloudSyncRestoreState();
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
    v10(v5, v7, v8);
    uint64_t v11 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
    v11(v5, 0, 1, v8);
    v10(v3, enum case for CloudSyncRestoreState.activelyRestoring(_:), v8);
    v11(v3, 0, 1, v8);
    sub_10008AC30((uint64_t)v5, (uint64_t)v3);
    swift_unknownObjectRelease();
    sub_100008AF8((uint64_t)v3);
    return sub_100008AF8((uint64_t)v5);
  }
  return result;
}

void sub_100072BA8(void *a1)
{
  id v1 = a1;
  sub_1000729FC();
}

void sub_100072BF0()
{
}

void sub_100072C20()
{
}

uint64_t sub_100072C50()
{
  sub_100070F10(v0 + qword_100106788);
  uint64_t v1 = v0 + qword_100106790;
  uint64_t v2 = type metadata accessor for CloudSyncRestoreState();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

id sub_100072CCC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudSyncDownloadingStateViewController();
  return [super dealloc];
}

uint64_t sub_100072D04(uint64_t a1)
{
  sub_100070F10(a1 + qword_100106788);
  uint64_t v2 = a1 + qword_100106790;
  uint64_t v3 = type metadata accessor for CloudSyncRestoreState();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_100072D84()
{
  return type metadata accessor for CloudSyncDownloadingStateViewController();
}

uint64_t sub_100072D8C()
{
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 16);

  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 64);

  return swift_deallocClassInstance();
}

void sub_100072DD4()
{
}

id sub_100072E30(uint64_t a1)
{
  if (*(void *)(a1 + qword_1001068C0 + 8))
  {
    swift_bridgeObjectRetain();
    NSString v1 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v1 = 0;
  }

  return v1;
}

void (*sub_100072EA0(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_100005B5C();
  return sub_100072EE8;
}

void sub_100072EE8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = *(void **)(v1 + qword_1001068E0);
  *(void *)(v1 + qword_1001068Esub_10004C8C4(0, 0) = v2;
}

uint64_t sub_100072F00()
{
  uint64_t v1 = qword_1001068F0;
  if (*(void *)(v0 + qword_1001068F0))
  {
    uint64_t v2 = *(void *)(v0 + qword_1001068F0);
  }
  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = *(void **)(v0 + qword_1001068C8);
    type metadata accessor for AlertStackModalPresentationManager();
    swift_allocObject();
    id v5 = v4;
    uint64_t v2 = AlertStackModalPresentationManager.init(healthStore:)();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

void sub_100072F8C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  sub_1000759D4();
}

void sub_100072FB4(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (objc_class *)type metadata accessor for SummaryFeedViewController();
  v14.receiver = v2;
  v14.super_class = v8;
  [super viewDidDisappear:a1 & 1];
  sub_10000782C();
  Date.init()();
  dispatch thunk of PersonalizedFeedTrainer.feedDidEndDisplay(at:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v9 = [v2 collectionView];
  if (v9)
  {
    uint64_t v10 = v9;
    [v9 setAllowsFocus:1];

    id v11 = [v2 collectionView];
    if (v11)
    {
      uint64_t v12 = v11;
      id v13 = [objc_allocWithZone((Class)UIFocusHaloEffect) init];
      [v12 setFocusEffect:v13];

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100073154(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  sub_100072FB4(a3);
}

void sub_1000731A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v1[qword_1001068B8] & 1) == 0)
  {
    v1[qword_1001068B8] = 1;
    static Logger.view.getter();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Setting visible rect edges of collection view", v8, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    id v9 = [v1 collectionView];
    if (v9)
    {
      uint64_t v10 = v9;
      [v9 _visibleRectEdgeInsets];
      double v12 = v11;
      double v14 = v13;
      double v16 = v15;
      double v18 = v17;

      id v19 = [v1 collectionView];
      if (v19)
      {
        id v20 = v19;
        [v19 _setVisibleRectEdgeInsets:*(double *)&v1[qword_1001068B0], *(double *)&v1[qword_1001068B0 + 8], *(double *)&v1[qword_1001068B0 + 16], *(double *)&v1[qword_1001068B0 + 24]];

        id v21 = [v1 collectionView];
        if (v21)
        {
          NSString v22 = v21;
          [v21 _setVisibleRectEdgeInsets:v12, v14, v16, v18];

          return;
        }
LABEL_11:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
}

void sub_1000733D4(void *a1)
{
  id v1 = a1;
  sub_1000731A8();
}

void sub_10007341C(void *a1, void *a2)
{
  type metadata accessor for CompoundDataSourceCollectionViewController();
  uint64_t v4 = (void (*)(void *, void *))method lookup function for CompoundDataSourceCollectionViewController();
  v4(a1, a2);
  id v5 = [a1 traitCollection];
  id v6 = [v5 horizontalSizeClass];

  if (v6 != [a2 horizontalSizeClass])
  {
    sub_1000109BC();
  }
}

void sub_1000734EC()
{
}

void sub_10007351C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_100073550()
{
  swift_bridgeObjectRelease();

  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + qword_1001068D0);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + qword_1001068D8);

  swift_release();
  swift_release();

  swift_release();
  uint64_t v1 = v0 + qword_100106908;

  return _s6Health23OpenSleepScheduleIntentVwxx_0(v1);
}

id sub_100073614()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SummaryFeedViewController();
  return [super dealloc];
}

uint64_t sub_10007364C(uint64_t a1)
{
  swift_bridgeObjectRelease();

  _s6Health23OpenSleepScheduleIntentVwxx_0(a1 + qword_1001068D0);
  _s6Health23OpenSleepScheduleIntentVwxx_0(a1 + qword_1001068D8);

  swift_release();
  swift_release();

  swift_release();
  uint64_t v2 = a1 + qword_100106908;

  return _s6Health23OpenSleepScheduleIntentVwxx_0(v2);
}

uint64_t sub_10007371C()
{
  return type metadata accessor for SummaryFeedViewController();
}

uint64_t sub_100073728()
{
  return sub_10000782C();
}

uint64_t sub_10007374C()
{
  return swift_retain();
}

uint64_t (*sub_100073798())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000737F4(uint64_t a1)
{
  *(void *)(*v1 + qword_1001068Esub_10004C8C4(0, 0) = a1;
  return _objc_release_x1();
}

void (*sub_10007380C(id **a1))(void *a1)
{
  uint64_t v2 = (id *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_100072EA0(v2);
  return sub_100073868;
}

void sub_100073868(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void sub_1000738B0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v32 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (unsigned __int8 *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Presentation();
  uint64_t v30 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for HealthAppInteraction.Action();
  uint64_t v31 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  double v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v14 = [a1 cellForItemAtIndexPath:isa];

  if (!v14) {
    return;
  }
  id v29 = a1;
  id v36 = v14;
  sub_10001E254(0, &qword_100106A28);
  sub_10001D3C4(0, &qword_100106A30);
  id v15 = v14;
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v35 = 0;
    long long v33 = 0u;
    long long v34 = 0u;

    sub_100011FE4((uint64_t)&v33, (uint64_t)&unk_100106A38, (uint64_t)&qword_100106A30, (uint64_t)&protocol descriptor for CellSelectionHandling, (uint64_t (*)(void))sub_10007590C);
    return;
  }
  id v28 = v15;
  sub_10001CD68(&v33, (uint64_t)v37);
  dispatch thunk of CompoundDataSourceCollectionViewController.dataSource.getter();
  type metadata accessor for SummaryFeedDataSource(0);
  swift_dynamicCastClassUnconditional();
  v27[1] = a2;
  SnapshotDataSource.item(at:)();
  swift_release();
  sub_10001D3C4(0, (unint64_t *)&qword_100106A40);
  type metadata accessor for FeedItem();
  if (swift_dynamicCast())
  {
    double v16 = v36;
    FeedItem.favoriteStatus.getter();
    uint64_t v17 = FeedItem.FavoriteStatus.rawValue.getter();
    uint64_t v19 = v18;
    if (v17 == FeedItem.FavoriteStatus.rawValue.getter() && v19 == v20)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {

        uint64_t v21 = v32;
        goto LABEL_12;
      }
    }
    v27[0] = type metadata accessor for HealthAppAnalyticsManager();
    (*(void (**)(char *, void, uint64_t))(v31 + 104))(v12, enum case for HealthAppInteraction.Action.selectFavorite(_:), v10);
    uint64_t v23 = v30;
    (*(void (**)(char *, void, uint64_t))(v30 + 104))(v9, enum case for Presentation.summaryFeed(_:), v7);
    uint64_t v35 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    static HealthAppAnalyticsManager.submitInteraction(action:viewController:presentation:pinnedContentManager:)();

    sub_100011FE4((uint64_t)&v33, (uint64_t)&unk_100106A48, (uint64_t)&unk_100106A50, (uint64_t)&protocol descriptor for PinnedContentManaging, (uint64_t (*)(void))sub_10007590C);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v10);
    uint64_t v21 = v32;
  }
  else
  {
    uint64_t v21 = v32;
  }
LABEL_12:
  sub_1000190DC(v37, v38);
  uint64_t v24 = v28;
  dispatch thunk of CellSelectionHandling.didSelectCell(_:in:)();
  sub_1000190DC(v37, v38);
  dispatch thunk of CellSelectionHandling.deselectionBehavior(in:)();
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t))(v21 + 88))(v6, v4) == enum case for CellDeselectionBehavior.deselectOnDidSelect(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v21 + 96))(v6, v4);
    uint64_t v25 = *v6;
    Class v26 = IndexPath._bridgeToObjectiveC()().super.isa;
    [v29 deselectItemAtIndexPath:v26 animated:v25];
  }
  else
  {

    (*(void (**)(unsigned __int8 *, uint64_t))(v21 + 8))(v6, v4);
  }
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v37);
}

uint64_t sub_100073E78(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  sub_1000738B0(v9, (uint64_t)v8);

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100073F74()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [v1 traitCollection];
  id v7 = [v6 horizontalSizeClass];

  if (v7 == (id)2 && (*((unsigned char *)v1 + qword_100106910) & 1) == 0)
  {
    static Logger.view.getter();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)id v10 = 136315138;
      v13[1] = v10 + 4;
      uint64_t v11 = _typeName(_:qualified:)();
      _OWORD v13[2] = sub_100018DA0(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%s] Checking if we need to show the alerts modal", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_100072F00();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    dispatch thunk of AlertStackModalPresentationManager.fetchEligibleAlerts(completion:)();
    swift_release();
    swift_release_n();
  }
}

void sub_10007420C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  os_log_type_t v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = Strong;
    if (*(void *)(a1 + 16) < 2uLL)
    {
    }
    else
    {
      sub_10001E254(0, (unint64_t *)&qword_100105730);
      uint64_t v16 = static OS_dispatch_queue.main.getter();
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = v11;
      aBlock[4] = sub_100075904;
      aBlock[5] = v12;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100005388;
      aBlock[3] = &unk_1000F7680;
      double v13 = _Block_copy(aBlock);
      id v14 = v11;
      swift_release();
      static DispatchQoS.unspecified.getter();
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_100019DF4((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100013534(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
      sub_10001EF54();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      id v15 = (void *)v16;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v13);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
}

uint64_t sub_10007453C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = qword_100106910;
  if ((*(unsigned char *)(a1 + qword_100106910) & 1) == 0)
  {
    static Logger.view.getter();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)id v10 = 136315138;
      v11[1] = v10 + 4;
      v11[2] = sub_100018DA0(0xD000000000000019, 0x80000001000CE300, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%s] User has at least two new alerts; displaying the expanded modal!",
        v10,
        0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    *(unsigned char *)(a1 + v7) = 1;
    dispatch thunk of CompoundDataSourceCollectionViewController.dataSource.getter();
    type metadata accessor for SummaryFeedDataSource(0);
    swift_dynamicCastClassUnconditional();
    sub_10009C00C();
    return swift_release();
  }
  return result;
}

uint64_t sub_100074770(void *a1)
{
  uint64_t v101 = a1;
  uint64_t v1 = type metadata accessor for Presentation();
  uint64_t v97 = *(void *)(v1 - 8);
  uint64_t v98 = v1;
  __chkstk_darwin(v1);
  uint64_t v91 = (char *)&v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for HAUserActivity.ViewNavigationKeys();
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v92 = (char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013534(0, (unint64_t *)&qword_100104D68, (uint64_t (*)(uint64_t))&type metadata accessor for DeepLinkActivityType, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v88 - v5;
  uint64_t v7 = type metadata accessor for DeepLinkActivityType();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v99 = (char *)&v88 - v12;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v90 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v95 = (char *)&v88 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v96 = (char *)&v88 - v20;
  __chkstk_darwin(v19);
  char v22 = (char *)&v88 - v21;
  static Logger.view.getter();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Attempting to restore ForYou View Controller from User Activity.", v25, 2u);
    swift_slowDealloc();
  }

  id v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v27 = v14 + 8;
  Class v26 = v28;
  v28(v22, v13);
  id v29 = (objc_class *)type metadata accessor for SummaryFeedViewController();
  uint64_t v30 = v101;
  v107.receiver = v100;
  v107.super_class = v29;
  [super restoreUserActivityState:v101];
  id v31 = [v30 activityType];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  DeepLinkActivityType.init(_:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return sub_100011FE4((uint64_t)v6, (uint64_t)&qword_100104D68, (uint64_t)&type metadata accessor for DeepLinkActivityType, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(void))sub_100013534);
  }
  uint64_t v33 = v7;
  uint64_t v88 = v27;
  uint64_t v89 = v13;
  long long v34 = v101;
  uint64_t v35 = v99;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v99, v6, v33);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v35, v33);
  int v36 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v33);
  if (v36 == enum case for DeepLinkActivityType.allHealthData(_:))
  {
    uint64_t v37 = v26;
    uint64_t v38 = v8;
    uint64_t v39 = v33;
    uint64_t v40 = v96;
    static Logger.view.getter();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      Class v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Restoring to All Data view from User Activity via Discover.", v43, 2u);
      swift_slowDealloc();
    }

    v37(v40, v89);
    id v44 = v100;
    long long v45 = *(void **)&v100[qword_1001068C8];
    sub_10001D360((uint64_t)&v100[qword_1001068D0], (uint64_t)v106);
    uint64_t v46 = (char *)objc_allocWithZone((Class)type metadata accessor for AllHealthDataViewController());
    (*(void (**)(char *, void, uint64_t))(v97 + 104))(&v46[direct field offset for AllHealthDataViewController.providedPresentation], enum case for Presentation.showAllData(_:), v98);
    *(void *)&v46[qword_100107C88] = v45;
    sub_10001D360((uint64_t)v106, (uint64_t)&v46[qword_100107C90]);
    sub_10001D360((uint64_t)v106, (uint64_t)&v102);
    type metadata accessor for AllHealthDataDataSource(0);
    swift_allocObject();
    id v47 = v45;
    AllHealthDataDataSource.init(healthStore:healthExperienceStore:)(v47, (uint64_t)&v102);
    BOOL v48 = (void *)CompoundDataSourceCollectionViewController.init(dataSource:)();

    _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v106);
    id v49 = [v44 navigationController];
    if (v49)
    {
      uint64_t v50 = v49;
      [v49 pushViewController:v48 animated:0];
    }
    [v48 restoreUserActivityState:v34];

    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v35, v39);
  }
  if (v36 != enum case for DeepLinkActivityType.notificationSettings(_:))
  {
    uint64_t v64 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v98 = v8 + 8;
    v64(v11, v33);
    id v65 = [v34 userInfo];
    if (!v65)
    {
      long long v102 = 0u;
      long long v103 = 0u;
      goto LABEL_30;
    }
    uint64_t v66 = v65;
    uint64_t v97 = v33;
    uint64_t v67 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v68 = v93;
    uint64_t v69 = v92;
    uint64_t v70 = v94;
    (*(void (**)(char *, void, uint64_t))(v93 + 104))(v92, enum case for HAUserActivity.ViewNavigationKeys.allTrends(_:), v94);
    uint64_t v71 = HAUserActivity.ViewNavigationKeys.rawValue.getter();
    uint64_t v73 = v72;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
    uint64_t v104 = v71;
    uint64_t v105 = v73;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v67 + 16))
    {
      uint64_t v74 = v26;
      unint64_t v75 = sub_100094D3C((uint64_t)v106);
      if (v76)
      {
        sub_100018EC4(*(void *)(v67 + 56) + 32 * v75, (uint64_t)&v102);
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v74 = v26;
    }
    long long v102 = 0u;
    long long v103 = 0u;
LABEL_24:
    uint64_t v33 = v97;
    sub_100031B58((uint64_t)v106);
    swift_bridgeObjectRelease();
    if (*((void *)&v103 + 1))
    {
      sub_100011FE4((uint64_t)&v102, (uint64_t)&qword_1001059F0, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(void))sub_10001E81C);
      uint64_t v77 = v90;
      static Logger.view.getter();
      id v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v78, v79))
      {
        uint64_t v80 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v80 = 0;
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "Restoring to All Trends View Controller from User Activity via Discover.", v80, 2u);
        uint64_t v33 = v97;
        swift_slowDealloc();
      }

      v74(v77, v89);
      uint64_t v81 = v100;
      id v82 = *(id *)&v100[qword_1001068C8];
      UIViewController.resolvedHealthExperienceStore.getter();
      UIViewController.resolvedPresentation.getter();
      id v83 = objc_allocWithZone((Class)type metadata accessor for AllTrendsViewController());
      uint64_t v84 = (void *)AllTrendsViewController.init(healthStore:healthExperienceStore:additionalPredicates:presentation:customProvenance:)();
      id v85 = [v81 navigationController];
      uint64_t v86 = v85;
      uint64_t v87 = v99;
      if (v85)
      {
        [v85 pushViewController:v84 animated:0];
      }
      [v84 restoreUserActivityState:v34];

      return ((uint64_t (*)(char *, uint64_t))v64)(v87, v33);
    }
LABEL_30:
    sub_100011FE4((uint64_t)&v102, (uint64_t)&qword_1001059F0, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(void))sub_10001E81C);
    uint64_t v87 = v99;
    return ((uint64_t (*)(char *, uint64_t))v64)(v87, v33);
  }
  id v51 = v26;
  uint64_t v52 = v8;
  uint64_t v53 = v33;
  unint64_t v54 = v95;
  static Logger.view.getter();
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v55, v56))
  {
    int v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Restoring to notification settings view from User Activity via Discover.", v57, 2u);
    swift_slowDealloc();
  }

  v51(v54, v89);
  uint64_t v58 = v100;
  UIViewController.resolvedHealthExperienceStore.getter();
  id v59 = objc_allocWithZone((Class)type metadata accessor for NotificationSettingsViewController());
  uint64_t v60 = (void *)NotificationSettingsViewController.init(healthExperienceStore:)();
  type metadata accessor for ProfileViewController();
  uint64_t v61 = (void *)static ProfileViewController.makeProfileNavigationController(healthStore:pinnedContentManager:configurator:)();
  [v61 pushViewController:v60 animated:0];
  id v62 = [v58 navigationController];
  if (v62)
  {
    id v63 = v62;
    [v62 presentViewController:v61 animated:0 completion:0];
  }
  [v60 restoreUserActivityState:v34];

  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v35, v53);
}

void sub_1000753C0(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  sub_100074770(v4);
}

void sub_100075428(char *a1)
{
  uint64_t v2 = *(void **)&a1[qword_1001068C8];
  id v3 = objc_allocWithZone((Class)type metadata accessor for InternalSettingsViewController());
  id v4 = a1;
  id v5 = v2;
  uint64_t v6 = (void *)sub_10002EB4C(v5);

  id v7 = [objc_allocWithZone((Class)HKNavigationController) initWithRootViewController:v6];
  [v4 presentViewController:v7 animated:1 completion:0];
}

uint64_t sub_1000754E8(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v5 = v18 + v3;
    if (!__OFADD__(v18, v3)) {
      goto LABEL_5;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    sub_10001EE98(0, &qword_100106AC8, (unint64_t *)&unk_100106AD0);
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v5 = v4 + v3;
  if (__OFADD__(v4, v3)) {
    goto LABEL_23;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v1 = v6;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v6 & 0x8000000000000000) != 0
    || (v6 & 0x4000000000000000) != 0
    || (uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8, v5 > *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    uint64_t *v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v11 = (*(void *)(v8 + 24) >> 1) - v10;
  uint64_t result = sub_10009287C(v8 + 8 * v10 + 32, v11, a1);
  if (v13 < v3) {
    goto LABEL_24;
  }
  uint64_t v14 = v13;
  if (v13 >= 1)
  {
    uint64_t v15 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v16 = __OFADD__(v15, v13);
    uint64_t v17 = v15 + v13;
    if (v16)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x1sub_10004C8C4(0, 0) = v17;
  }
  swift_bridgeObjectRelease();
  if (v14 == v11) {
    goto LABEL_25;
  }
LABEL_17:

  return specialized Array._endMutation()();
}

uint64_t sub_1000756E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = sub_100036708(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(type metadata accessor for HealthViewEntity() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t *v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007588C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000758C4(uint64_t a1)
{
}

uint64_t sub_1000758CC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100075904()
{
  return sub_10007453C(*(void *)(v0 + 16));
}

void sub_10007590C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_10001D3C4(255, a3);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100075964()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007599C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000759D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[qword_1001068B0];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((_OWORD *)v2 + 1) = xmmword_1000CE2D0;
  v0[qword_1001068B8] = 0;
  unint64_t v3 = (uint64_t *)&v0[qword_1001068C0];
  type metadata accessor for SidebarDataSourceItem();
  uint64_t *v3 = static SidebarDataSourceItem.summarySidebarItemIdentifier.getter();
  v3[1] = v4;
  *(void *)&v0[qword_1001068E0] = 0;
  *(void *)&v0[qword_1001068E8] = 0;
  *(void *)&v0[qword_1001068F0] = 0;
  uint64_t v5 = &v0[qword_1001068F8];
  id v6 = [objc_allocWithZone((Class)type metadata accessor for ProfileGradientWithFadeView()) initWithFrame:0.0, 0.0, 0.0, 0.0];
  id v7 = (void *)ProfileGradientWithFadeView.gradientView.getter();
  dispatch thunk of ProfileGradientView.delayAnimation.setter();

  *uint64_t v5 = v6;
  v5[1] = &protocol witness table for ProfileGradientWithFadeView;
  *(void *)&v1[qword_100106900] = 0;
  v1[qword_100106910] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for MedicalIDEmergencyBuddyDataSource()
{
  uint64_t result = qword_100106AE0;
  if (!qword_100106AE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100075B6C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100075BAC()
{
  uint64_t v41 = *v0;
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v33 = (char *)v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for EmergencyAccessBuddyFlow();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for ContentConfigurationItem();
  uint64_t v7 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = static EmergencyAccessBuddyFlow.allCases.getter();
  int64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v31 = v1;
    uint64_t v32 = v0;
    uint64_t v42 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v12 = v10;
    sub_100096494(0, v11, 0);
    unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = v4 + 16;
    unint64_t v15 = (*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64);
    uint64_t v16 = v13;
    v30[1] = v12;
    unint64_t v17 = v12 + v15;
    uint64_t v36 = *(void *)(v16 + 56);
    uint64_t v37 = v14;
    uint64_t v38 = v16;
    uint64_t v39 = v3;
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    uint64_t v35 = v7 + 32;
    do
    {
      v37(v6, v17, v3);
      sub_1000760D0((uint64_t)v6, v41, (uint64_t)v9);
      (*v18)(v6, v3);
      uint64_t v19 = (void *)v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100096494(0, v19[2] + 1, 1);
        uint64_t v19 = (void *)v42;
      }
      unint64_t v21 = v19[2];
      unint64_t v20 = v19[3];
      if (v21 >= v20 >> 1)
      {
        sub_100096494(v20 > 1, v21 + 1, 1);
        uint64_t v19 = (void *)v42;
      }
      _OWORD v19[2] = v21 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))((unint64_t)v19+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v21, v9, v40);
      uint64_t v42 = (uint64_t)v19;
      v17 += v36;
      --v11;
      uint64_t v3 = v39;
    }
    while (v11);
    swift_bridgeObjectRelease();
    uint64_t v1 = v31;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = _swiftEmptyArrayStorage;
  }
  sub_10000C19C(0, &qword_100104858, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for ArrayDataSourceSection();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000CBFD0;
  sub_1000B870C((uint64_t)v19);
  swift_bridgeObjectRelease();
  int64_t v22 = v33;
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v34 + 8);
  v23(v22, v1);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)();
  uint64_t v42 = 0x3C53447961727241;
  unint64_t v43 = 0xE800000000000000;
  UUID.init()();
  uint64_t v24 = UUID.uuidString.getter();
  Class v26 = v25;
  v23(v22, v1);
  v27._uint64_t countAndFlagsBits = v24;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 62;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  return ArrayDataSource.init(arrangedSections:identifier:)();
}

uint64_t sub_1000760D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v42 = a3;
  uint64_t v4 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  __chkstk_darwin(v4);
  uint64_t v39 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C19C(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v6 - 8);
  uint64_t v38 = (char *)&v29 - v7;
  uint64_t v8 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  __chkstk_darwin(v8);
  uint64_t v37 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v30 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  int64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for EmergencyAccessBuddyFlow();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v29 - v17;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v32 = a1;
  v19((char *)&v29 - v17, a1, v12);
  int v20 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v18, v12);
  if (v20 == enum case for EmergencyAccessBuddyFlow.followUpOnboarding(_:))
  {
    unint64_t v34 = 0xD000000000000013;
LABEL_10:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    goto LABEL_11;
  }
  if (v20 == enum case for EmergencyAccessBuddyFlow.followUpReview(_:))
  {
    unint64_t v34 = 0x7055776F6C6C6F46;
    goto LABEL_10;
  }
  if (v20 == enum case for EmergencyAccessBuddyFlow.healthOnboarding(_:))
  {
    unint64_t v34 = 0xD000000000000011;
  }
  else
  {
    if (v20 != enum case for EmergencyAccessBuddyFlow.healthReview(_:))
    {
      unint64_t v34 = 0;
      goto LABEL_10;
    }
    unint64_t v34 = 0x522068746C616548;
  }
LABEL_11:
  v19(v16, v32, v12);
  unint64_t v21 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v22 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v22 + v21, v16, v12);
  *(void *)(v22 + ((v14 + v21 + 7) & 0xFFFFFFFFFFFFFFF8)) = v33;
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v31);
  v44[3] = type metadata accessor for UIListContentConfiguration();
  v44[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
  sub_100004F38(v44);
  static UIListContentConfiguration.cell()();
  swift_bridgeObjectRetain();
  UIListContentConfiguration.text.setter();
  id v23 = [self tintColor];
  uint64_t v24 = (void (*)(char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v24(v43, 0);
  uint64_t v25 = v36;
  Class v26 = v37;
  *uint64_t v37 = 1;
  (*(void (**)(unsigned char *, void, uint64_t))(v35 + 104))(v26, enum case for CellDeselectionBehavior.deselectOnDidSelect(_:), v25);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v27 = type metadata accessor for UIBackgroundConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v38, 1, 1, v27);
  (*(void (**)(char *, void, uint64_t))(v40 + 104))(v39, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v41);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();
  return swift_release();
}

void sub_100076720(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v54 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v56 = *(void *)(v5 - 8);
  uint64_t v57 = v5;
  __chkstk_darwin(v5);
  uint64_t v58 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for EmergencyAccessUserStatus();
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  __chkstk_darwin(v8);
  os_log_t v55 = (os_log_t)((char *)&v51 - v9);
  uint64_t v10 = type metadata accessor for EmergencyAccessBuddyFlow();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v53 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v51 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v51 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v51 - v23;
  id v59 = a1;
  id v25 = [a1 resolvedHealthStore];
  if (!v25) {
    id v25 = [objc_allocWithZone((Class)HKHealthStore) init];
  }
  id v60 = v25;
  Class v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v26(v24, a2, v10);
  int v27 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v24, v10);
  if (v27 == enum case for EmergencyAccessBuddyFlow.followUpOnboarding(_:)
    || v27 == enum case for EmergencyAccessBuddyFlow.followUpReview(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v24, v10);
    swift_unknownObjectRelease();
    v26(v19, a2, v10);
    id v29 = v60;
    id v30 = v60;
    EmergencyAccessBuddyFlow.isReview.getter();
    EmergencyAccessUserStatus.init(onboardingStatus:isStewieSupported:)();
    id v31 = objc_allocWithZone((Class)type metadata accessor for EmergencyAccessFollowUpStartViewController());
    uint64_t v32 = EmergencyAccessFollowUpStartViewController.init(healthStore:flow:emergencyStatus:)();
LABEL_14:
    id v49 = (void *)v32;
    id v50 = [objc_allocWithZone((Class)HKNavigationController) initWithRootViewController:v32];
    [v59 presentViewController:v50 animated:1 completion:0];

    return;
  }
  if (v27 == enum case for EmergencyAccessBuddyFlow.healthOnboarding(_:)
    || v27 == enum case for EmergencyAccessBuddyFlow.healthReview(_:))
  {
    v26(v22, a2, v10);
    id v29 = v60;
    id v47 = v60;
    EmergencyAccessBuddyFlow.isReview.getter();
    EmergencyAccessUserStatus.init(onboardingStatus:isStewieSupported:)();
    id v48 = objc_allocWithZone((Class)type metadata accessor for EmergencyAccessBuddyStartViewController());
    uint64_t v32 = EmergencyAccessBuddyStartViewController.init(healthStore:flow:emergencyStatus:)();
    goto LABEL_14;
  }
  uint64_t v33 = v58;
  static Logger.general.getter();
  unint64_t v34 = v16;
  v26(v16, a2, v10);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  int v37 = v36;
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v52 = v34;
    uint64_t v39 = v38;
    id v59 = (id)swift_slowAlloc();
    id v61 = v59;
    *(_DWORD *)uint64_t v39 = 136315394;
    os_log_t v55 = v35;
    uint64_t v62 = v54;
    swift_getMetatypeMetadata();
    LODWORD(v54) = v37;
    uint64_t v40 = String.init<A>(describing:)();
    uint64_t v62 = sub_100018DA0(v40, v41, (uint64_t *)&v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v39 + 12) = 2080;
    uint64_t v42 = v52;
    v26(v53, (uint64_t)v52, v10);
    uint64_t v43 = String.init<A>(describing:)();
    uint64_t v62 = sub_100018DA0(v43, v44, (uint64_t *)&v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    long long v45 = *(void (**)(char *, uint64_t))(v11 + 8);
    v45(v42, v10);
    os_log_t v46 = v55;
    _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v54, "[%s] Flow is not supported: %s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v57);
  }
  else
  {

    long long v45 = *(void (**)(char *, uint64_t))(v11 + 8);
    v45(v34, v10);

    (*(void (**)(char *, uint64_t))(v56 + 8))(v33, v57);
  }
  v45(v24, v10);
}

void sub_100076D78()
{
}

void sub_100076D94()
{
}

void sub_100076DB0()
{
}

uint64_t sub_100076DDC()
{
  return type metadata accessor for MedicalIDEmergencyBuddyDataSource();
}

unint64_t sub_100076DE4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002BFF4(a1);
}

uint64_t sub_100076E60(uint64_t a1, uint64_t a2)
{
  return sub_10002B8D0(a1, a2);
}

uint64_t sub_100076EC0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100076F28(&qword_100106B30);
  uint64_t result = sub_100076F28(&qword_100106B38);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100076F28(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for MedicalIDEmergencyBuddyDataSource();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100076F6C()
{
  uint64_t v1 = type metadata accessor for EmergencyAccessBuddyFlow();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

void sub_100077008(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for EmergencyAccessBuddyFlow() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_100076720(a1, v1 + v4, v5);
}

uint64_t sub_1000770A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v46 = a1;
  uint64_t v2 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v44 = *(void *)(v2 - 8);
  uint64_t v45 = v2;
  __chkstk_darwin(v2);
  uint64_t v42 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for InsetGroupedListStyle();
  uint64_t v35 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007A358();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007A8D0();
  uint64_t v36 = v12;
  uint64_t v38 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007A9EC();
  uint64_t v39 = v15;
  uint64_t v40 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007AAF0();
  uint64_t v41 = v18;
  uint64_t v43 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v34 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = v1;
  sub_10007A408(0);
  sub_10007A9A4(&qword_100106BB8, sub_10007A408);
  List<>.init(content:)();
  InsetGroupedListStyle.init()();
  uint64_t v20 = sub_10007A9A4(&qword_100106BC8, (void (*)(uint64_t))sub_10007A358);
  View.listStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v50 = v8;
  uint64_t v51 = v4;
  uint64_t v52 = v20;
  uint64_t v53 = &protocol witness table for InsetGroupedListStyle;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v22 = v36;
  View.navigationTitle(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v22);
  uint64_t v25 = v44;
  uint64_t v24 = v45;
  Class v26 = v42;
  (*(void (**)(char *, void, uint64_t))(v44 + 104))(v42, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v45);
  uint64_t v50 = v23;
  uint64_t v51 = OpaqueTypeConformance2;
  uint64_t v27 = swift_getOpaqueTypeConformance2();
  Swift::String v28 = v34;
  uint64_t v29 = v39;
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v24);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v29);
  uint64_t v30 = v37;
  long long v49 = *(_OWORD *)(v37 + 72);
  sub_10007BA38(0, &qword_100106BE0, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
  State.projectedValue.getter();
  uint64_t v47 = v30;
  uint64_t v50 = v29;
  uint64_t v51 = v27;
  swift_getOpaqueTypeConformance2();
  uint64_t v31 = v41;
  View.alert(isPresented:content:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v28, v31);
}

uint64_t sub_100077744@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  id v65 = a2;
  sub_10007A7A0(0, &qword_100106BA0, (void (*)(uint64_t))sub_10007A800);
  uint64_t v64 = v3;
  uint64_t v71 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  id v63 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v67 = (char *)&v56 - v6;
  sub_10007A7A0(0, &qword_100106B98, (void (*)(uint64_t))sub_10007A69C);
  uint64_t v70 = v7;
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v8 = v60;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v56 - v11;
  sub_10007A7A0(0, &qword_100106B58, sub_10007A518);
  uint64_t v68 = v13;
  uint64_t v62 = *(void *)(v13 - 8);
  uint64_t v14 = v62;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v66 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v56 - v17;
  uint64_t v74 = a1;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v79 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v80 = v19;
  char v81 = v20 & 1;
  uint64_t v82 = v21;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v75 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v76 = v22;
  char v77 = v23 & 1;
  uint64_t v78 = v24;
  sub_10007A518(0);
  sub_10007A9A4(&qword_100106BF8, sub_10007A518);
  id v61 = v18;
  Section<>.init(header:footer:content:)();
  uint64_t v73 = a1;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v79 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v80 = v25;
  char v81 = v26 & 1;
  uint64_t v82 = v27;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v75 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v76 = v28;
  char v77 = v29 & 1;
  uint64_t v78 = v30;
  sub_10007A69C();
  sub_10007AC7C();
  id v59 = v12;
  Section<>.init(header:footer:content:)();
  uint64_t v72 = a1;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v79 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v80 = v31;
  char v81 = v32 & 1;
  uint64_t v82 = v33;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v75 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v76 = v34;
  char v77 = v35 & 1;
  uint64_t v78 = v36;
  sub_10007A800();
  sub_10007A9A4(&qword_100106C18, (void (*)(uint64_t))sub_10007A800);
  uint64_t v37 = v67;
  Section<>.init(header:footer:content:)();
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v38 = v66;
  uint64_t v39 = v68;
  v57(v66, v18, v68);
  uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v40 = v69;
  v58(v69, v12, v70);
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
  uint64_t v42 = v63;
  uint64_t v43 = v64;
  v41(v63, v37, v64);
  uint64_t v44 = (void (*)(uint64_t, char *, uint64_t))v41;
  uint64_t v45 = v65;
  v57(v65, v38, v39);
  sub_10007A43C();
  uint64_t v47 = v46;
  uint64_t v48 = v40;
  uint64_t v49 = v70;
  v58(&v45[*(int *)(v46 + 48)], v48, v70);
  v44((uint64_t)&v45[*(int *)(v47 + 64)], v42, v43);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v71 + 8);
  uint64_t v51 = v43;
  v50(v67, v43);
  uint64_t v52 = *(void (**)(char *, uint64_t))(v60 + 8);
  v52(v59, v49);
  uint64_t v53 = *(void (**)(char *, uint64_t))(v62 + 8);
  uint64_t v54 = v68;
  v53(v61, v68);
  v50(v42, v51);
  v52(v69, v49);
  return ((uint64_t (*)(char *, uint64_t))v53)(v66, v54);
}

uint64_t sub_100077F78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = a2;
  sub_10007A744(0, &qword_100106B88, (uint64_t (*)(void, void *, void *))&type metadata accessor for Button);
  uint64_t v47 = *(void *)(v3 - 8);
  uint64_t v48 = v3;
  __chkstk_darwin(v3);
  uint64_t v43 = (char *)&v39 - v4;
  sub_10007A69C();
  uint64_t v45 = v5 - 8;
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v44 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v46 = (uint64_t)&v39 - v8;
  sub_10007A744(0, &qword_100106B78, (uint64_t (*)(void, void *, void *))&type metadata accessor for TextField);
  uint64_t v41 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v39 - v11;
  sub_10007A620();
  uint64_t v14 = v13 - 8;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v40 = (uint64_t)&v39 - v18;
  long long v55 = *(_OWORD *)(a1 + 48);
  uint64_t v56 = *(void *)(a1 + 64);
  long long v50 = *(_OWORD *)(a1 + 48);
  uint64_t v51 = *(void *)(a1 + 64);
  uint64_t v42 = &type metadata accessor for State;
  sub_10007BA38(0, &qword_100106C30, (uint64_t)&type metadata for String, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
  State.projectedValue.getter();
  *(void *)&long long v52 = 0x1000000000000036;
  *((void *)&v52 + 1) = 0x80000001000D10E0;
  sub_100038AD4();
  TextField<>.init<A>(_:text:onEditingChanged:onCommit:)();
  long long v50 = v55;
  uint64_t v51 = v56;
  State.projectedValue.getter();
  long long v39 = v52;
  uint64_t v19 = v53;
  uint64_t v20 = v54;
  uint64_t v21 = v41;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v17, v12, v41);
  uint64_t v22 = &v17[*(int *)(v14 + 44)];
  *(_OWORD *)uint64_t v22 = v39;
  *((void *)v22 + 2) = v19;
  *((void *)v22 + 3) = v20;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v21);
  uint64_t v23 = v40;
  sub_10007B0B0((uint64_t)v17, v40, (uint64_t (*)(void))sub_10007A620);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v24 = swift_allocObject();
  long long v25 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v24 + 8sub_10004C8C4(0, 0) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v24 + 96) = v25;
  *(void *)(v24 + 112) = *(void *)(a1 + 96);
  long long v26 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v24 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v24 + 32) = v26;
  long long v27 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v24 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v24 + 64) = v27;
  sub_10007AE28(a1);
  uint64_t v28 = v43;
  Button<>.init(_:action:)();
  long long v52 = *(_OWORD *)(a1 + 88);
  sub_10007BA38(0, &qword_100106BE0, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))v42);
  State.wrappedValue.getter();
  LOBYTE(v2sub_10004C8C4(0, 0) = v50;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v30 = swift_allocObject();
  *(unsigned char *)(v30 + 16) = v20;
  uint64_t v32 = v47;
  uint64_t v31 = v48;
  uint64_t v33 = (uint64_t)v44;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v28, v48);
  uint64_t v34 = (uint64_t *)(v33 + *(int *)(v45 + 44));
  *uint64_t v34 = KeyPath;
  v34[1] = (uint64_t)sub_10007BD9C;
  void v34[2] = v30;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v28, v31);
  uint64_t v35 = v46;
  sub_10007B0B0(v33, v46, (uint64_t (*)(void))sub_10007A69C);
  sub_10007B118(v23, (uint64_t)v17, (uint64_t (*)(void))sub_10007A620);
  sub_10007B118(v35, v33, (uint64_t (*)(void))sub_10007A69C);
  uint64_t v36 = v49;
  sub_10007B118((uint64_t)v17, v49, (uint64_t (*)(void))sub_10007A620);
  sub_10007A5B0();
  sub_10007B118(v33, v36 + *(int *)(v37 + 48), (uint64_t (*)(void))sub_10007A69C);
  sub_10007B180(v35, (uint64_t (*)(void))sub_10007A69C);
  sub_10007B180(v23, (uint64_t (*)(void))sub_10007A620);
  sub_10007B180(v33, (uint64_t (*)(void))sub_10007A69C);
  return sub_10007B180((uint64_t)v17, (uint64_t (*)(void))sub_10007A620);
}

uint64_t sub_10007858C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a4;
  type metadata accessor for MainActor();
  v4[12] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[13] = v6;
  v4[14] = v5;
  return _swift_task_switch(sub_100078624, v6, v5);
}

uint64_t sub_100078624()
{
  uint64_t v1 = *(void *)(v0 + 88);
  type metadata accessor for NotificationSyncStoreModel();
  sub_10007A9A4(&qword_100106BF0, (void (*)(uint64_t))type metadata accessor for NotificationSyncStoreModel);
  *(void *)(v0 + 12sub_10004C8C4(0, 0) = StateObject.wrappedValue.getter();
  uint64_t v2 = *(void *)(v1 + 64);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 48);
  *(void *)(v0 + 32) = v2;
  sub_10007BA38(0, &qword_100106C30, (uint64_t)&type metadata for String, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
  State.wrappedValue.getter();
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  *(void *)(v0 + 128) = v3;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100078798;
  return sub_100020DB8(3, v4, v3);
}

uint64_t sub_100078798()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 112);
  uint64_t v3 = *(void *)(v1 + 104);
  return _swift_task_switch(sub_1000788F8, v3, v2);
}

uint64_t sub_1000788F8()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_release();
  *(_OWORD *)(v0 + 56) = *(_OWORD *)(v1 + 72);
  *(unsigned char *)(v0 + 144) = 1;
  sub_10007BA38(0, &qword_100106BE0, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
  State.wrappedValue.setter();
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v1 + 88);
  *(unsigned char *)(v0 + 145) = 0;
  State.wrappedValue.setter();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000789DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10007A744(0, &qword_100106B88, (uint64_t (*)(void, void *, void *))&type metadata accessor for Button);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - v7;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v9 = swift_allocObject();
  long long v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v9 + 8sub_10004C8C4(0, 0) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v9 + 96) = v10;
  *(void *)(v9 + 112) = *(void *)(a1 + 96);
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 32) = v11;
  long long v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v9 + 64) = v12;
  sub_10007AE28(a1);
  Button<>.init(_:action:)();
  long long v19 = *(_OWORD *)(a1 + 88);
  sub_10007BA38(0, &qword_100106BE0, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
  State.wrappedValue.getter();
  char v13 = v20;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 16) = v13;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(a2, v8, v5);
  sub_10007A69C();
  uint64_t v17 = (uint64_t *)(a2 + *(int *)(v16 + 36));
  *uint64_t v17 = KeyPath;
  v17[1] = (uint64_t)sub_10007AF28;
  v17[2] = v15;
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100078C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10007A54C(0, (unint64_t *)&qword_100104878, (uint64_t (*)(uint64_t))&type metadata accessor for TaskPriority, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = &v15[-v6];
  long long v16 = *(_OWORD *)(a1 + 88);
  v15[15] = 1;
  sub_10007BA38(0, &qword_100106BE0, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
  State.wrappedValue.setter();
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  type metadata accessor for MainActor();
  sub_10007AE28(a1);
  uint64_t v9 = static MainActor.shared.getter();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = &protocol witness table for MainActor;
  long long v11 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v10 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v10 + 112) = v11;
  *(void *)(v10 + 128) = *(void *)(a1 + 96);
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 48) = v12;
  long long v13 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v10 + 8sub_10004C8C4(0, 0) = v13;
  sub_100052D04((uint64_t)v7, a3, v10);
  return swift_release();
}

uint64_t sub_100078DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a4;
  type metadata accessor for MainActor();
  v4[7] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v6;
  v4[9] = v5;
  return _swift_task_switch(sub_100078E64, v6, v5);
}

uint64_t sub_100078E64()
{
  type metadata accessor for NotificationSyncStoreModel();
  sub_10007A9A4(&qword_100106BF0, (void (*)(uint64_t))type metadata accessor for NotificationSyncStoreModel);
  *(void *)(v0 + 8sub_10004C8C4(0, 0) = StateObject.wrappedValue.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  void *v1 = v0;
  v1[1] = sub_100078F70;
  return sub_100020DB8(1, 0, 0);
}

uint64_t sub_100078F70()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(void *)(v1 + 64);
  return _swift_task_switch(sub_1000790B4, v3, v2);
}

uint64_t sub_1000790B4()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_release();
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 72);
  *(unsigned char *)(v0 + 96) = 1;
  sub_10007BA38(0, &qword_100106BE0, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
  State.wrappedValue.setter();
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v1 + 88);
  *(unsigned char *)(v0 + 97) = 0;
  State.wrappedValue.setter();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100079198()
{
  return NavigationLink.init(destination:label:)();
}

uint64_t sub_100079288@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_100079300@<X0>(uint64_t a1@<X8>)
{
  sub_10007A54C(0, &qword_100106BE8, (uint64_t (*)(uint64_t))&type metadata accessor for Alert.Button, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2 - 8);
  char v4 = (char *)v41 - v3;
  type metadata accessor for NotificationSyncStoreModel();
  sub_10007A9A4(&qword_100106BF0, (void (*)(uint64_t))type metadata accessor for NotificationSyncStoreModel);
  StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  uint64_t countAndFlagsBits = (void *)v45._countAndFlagsBits;
  uint64_t v42 = v4;
  uint64_t v43 = a1;
  if ((uint64_t)v45._object)
  {
    v45._uint64_t countAndFlagsBits = 0x203A726F727245;
    v45._object = (void *)0xE700000000000000;
    v44._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
    sub_100022644(countAndFlagsBits, 1);
    sub_10001E8C0();
    v6._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    sub_10007AC60(countAndFlagsBits, 1);
    uint64_t v7 = 0xD00000000000001ALL;
    uint64_t v8 = "Could Not Send Instruction";
LABEL_9:
    object = (void *)((unint64_t)(v8 - 32) | 0x8000000000000000);
    goto LABEL_10;
  }
  if (!v45._countAndFlagsBits)
  {
    uint64_t v7 = 0xD000000000000010;
    v45._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v45._object = (void *)0x80000001000D4DB0;
    uint64_t v8 = "Operation Failed";
    goto LABEL_9;
  }
  id v9 = (id)v45._countAndFlagsBits;
  [v9 action];
  id v10 = (id)NSStringFromHKNotificationInstructionAction();
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v13 = v12;

  v45._uint64_t countAndFlagsBits = 0;
  v45._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(19);
  v45._uint64_t countAndFlagsBits = v11;
  v45._object = v13;
  sub_100038AD4();
  uint64_t v14 = StringProtocol.localizedCapitalized.getter();
  long long v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45._uint64_t countAndFlagsBits = v14;
  v45._object = v16;
  v17._uint64_t countAndFlagsBits = 0xD000000000000011;
  v17._object = (void *)0x80000001000D4DD0;
  String.append(_:)(v17);
  object = v45._object;
  uint64_t v7 = v45._countAndFlagsBits;
  v45._uint64_t countAndFlagsBits = 0xD000000000000026;
  v45._object = (void *)0x80000001000D4DF0;
  id v19 = [v9 categoryIdentifier];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v22 = v21;

  swift_bridgeObjectRelease();
  uint64_t v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0) {
    uint64_t v23 = v20 & 0xFFFFFFFFFFFFLL;
  }
  if (v23)
  {
    v44._uint64_t countAndFlagsBits = 2230794;
    v44._object = (void *)0xE300000000000000;
    id v24 = [v9 categoryIdentifier];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    long long v27 = v26;

    v28._uint64_t countAndFlagsBits = v25;
    v28._object = v27;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 34;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    String.append(_:)(v44);
    sub_10007AC60(countAndFlagsBits, 0);
    sub_10007AC60(countAndFlagsBits, 0);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10007AC60(countAndFlagsBits, 0);
    sub_10007AC60(countAndFlagsBits, 0);
  }
LABEL_10:
  v44._uint64_t countAndFlagsBits = v7;
  v44._object = object;
  sub_100038AD4();
  uint64_t v30 = Text.init<A>(_:)();
  v41[2] = v31;
  v41[3] = v30;
  v41[1] = v32;
  Swift::String v44 = v45;
  Text.init<A>(_:)();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v33 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v35 = v34;
  char v37 = v36 & 1;
  uint64_t v38 = v42;
  static Alert.Button.default(_:action:)();
  sub_10003CDC8(v33, v35, v37);
  swift_bridgeObjectRelease();
  uint64_t v39 = type metadata accessor for Alert.Button();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
  return Alert.init(title:message:dismissButton:)();
}

uint64_t sub_10007983C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000770A4(a1);
}

uint64_t sub_100079888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v45 = a6;
  sub_10007A54C(0, &qword_100106C70, (uint64_t (*)(uint64_t))sub_10007B850, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v44 = (uint64_t)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v40 - v14;
  sub_10007B7A0();
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v42 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  unint64_t v22 = (char *)&v40 - v21;
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v43((char *)&v40 - v21, a1, v17);
  uint64_t v23 = a2;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t v24 = a3;
  uint64_t v41 = a4;
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v25 = a5;
  sub_10007BA38(0, &qword_100106CA8, (uint64_t)&type metadata for String, (uint64_t (*)(void, uint64_t))&type metadata accessor for Binding);
  Binding.wrappedValue.getter();
  uint64_t v27 = v50;
  unint64_t v26 = v51;
  swift_bridgeObjectRelease();
  uint64_t v28 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0) {
    uint64_t v28 = v27 & 0xFFFFFFFFFFFFLL;
  }
  if (v28)
  {
    Swift::String v29 = (void *)swift_allocObject();
    long long v29[2] = v23;
    v29[3] = v24;
    v29[4] = v41;
    v29[5] = v25;
    sub_10007B8B4();
    uint64_t v41 = v30;
    sub_10007B990();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    Button.init(action:label:)();
    sub_10007B850();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v15, 0, 1, v31);
  }
  else
  {
    sub_10007B850();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v15, 1, 1, v32);
  }
  uint64_t v34 = v42;
  uint64_t v33 = (void (*)(uint64_t, char *, uint64_t))v43;
  v43(v42, (uint64_t)v22, v17);
  uint64_t v35 = v44;
  sub_10007BB44((uint64_t)v15, v44);
  uint64_t v36 = v45;
  v33(v45, v34, v17);
  sub_10007B700();
  sub_10007BB44(v35, v36 + *(int *)(v37 + 48));
  sub_10007BBD8((uint64_t)v15);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v18 + 8);
  v38(v22, v17);
  sub_10007BBD8(v35);
  return ((uint64_t (*)(char *, uint64_t))v38)(v34, v17);
}

uint64_t sub_100079C4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = Image.init(systemName:)();
  id v3 = [self opaqueSeparatorColor];
  uint64_t v4 = Color.init(_:)();
  uint64_t result = swift_getKeyPath();
  *a1 = v2;
  a1[1] = result;
  a1[2] = v4;
  return result;
}

uint64_t sub_100079CD8()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_100079CF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v8 = v2[2];
  uint64_t v7 = v2[3];
  *(void *)a2 = static VerticalAlignment.center.getter();
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  sub_10007B664();
  return sub_100079888(a1, v5, v6, v8, v7, a2 + *(int *)(v9 + 44));
}

uint64_t sub_100079D68@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100079D98()
{
  return EnvironmentValues.isEnabled.setter();
}

unsigned char *sub_100079DC0(unsigned char *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_100079DD4@<X0>(id a1@<X0>, uint64_t a2@<X8>)
{
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  if (!a1) {
    a1 = [objc_allocWithZone((Class)HKHealthStore) init];
  }
  type metadata accessor for NotificationSyncStoreModel();
  swift_allocObject();
  id v4 = a1;
  uint64_t result = sub_100020B18(0x46656C706D617845, 0xEE00657275746165, v4);
  strcpy((char *)a2, "ExampleFeature");
  *(unsigned char *)(a2 + 15) = -18;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = sub_100079F60;
  *(void *)(a2 + 32) = result;
  *(unsigned char *)(a2 + 4sub_10004C8C4(0, 0) = 0;
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v7;
  *(void *)(a2 + 64) = v8;
  *(unsigned char *)(a2 + 72) = v6;
  *(void *)(a2 + 8sub_10004C8C4(0, 0) = v7;
  *(unsigned char *)(a2 + 88) = v6;
  *(void *)(a2 + 96) = v7;
  return result;
}

uint64_t sub_100079F60()
{
  return swift_retain();
}

uint64_t sub_100079F68()
{
  return swift_retain();
}

uint64_t destroy for NotificationSyncSettingsView(uint64_t a1)
{
  swift_bridgeObjectRelease();

  sub_100079FD8();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_100079FD8()
{
  return swift_release();
}

uint64_t initializeWithCopy for NotificationSyncSettingsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  id v9 = v6;
  sub_100079F68();
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 4sub_10004C8C4(0, 0) = v8;
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 8sub_10004C8C4(0, 0) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NotificationSyncSettingsView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + 16);
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 40);
  sub_100079F68();
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 4sub_10004C8C4(0, 0) = v9;
  sub_100079FD8();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 8sub_10004C8C4(0, 0) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for NotificationSyncSettingsView(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 8sub_10004C8C4(0, 0) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for NotificationSyncSettingsView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  char v5 = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 4sub_10004C8C4(0, 0) = v5;
  sub_100079FD8();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 8sub_10004C8C4(0, 0) = *(void *)(a2 + 80);
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationSyncSettingsView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationSyncSettingsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_10004C8C4(0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationSyncSettingsView()
{
  return &type metadata for NotificationSyncSettingsView;
}

uint64_t sub_10007A33C()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_10007A358()
{
  if (!qword_100106B40)
  {
    sub_10007A408(255);
    sub_10007A9A4(&qword_100106BB8, sub_10007A408);
    unint64_t v0 = type metadata accessor for List();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106B40);
    }
  }
}

void sub_10007A408(uint64_t a1)
{
}

void sub_10007A43C()
{
  if (!qword_100106B50)
  {
    sub_10007A7A0(255, &qword_100106B58, sub_10007A518);
    sub_10007A7A0(255, &qword_100106B98, (void (*)(uint64_t))sub_10007A69C);
    sub_10007A7A0(255, &qword_100106BA0, (void (*)(uint64_t))sub_10007A800);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100106B50);
    }
  }
}

void sub_10007A518(uint64_t a1)
{
}

void sub_10007A54C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_10007A5B0()
{
  if (!qword_100106B68)
  {
    sub_10007A620();
    sub_10007A69C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100106B68);
    }
  }
}

void sub_10007A620()
{
  if (!qword_100106B70)
  {
    sub_10007A744(255, &qword_100106B78, (uint64_t (*)(void, void *, void *))&type metadata accessor for TextField);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106B70);
    }
  }
}

void sub_10007A69C()
{
  if (!qword_100106B80)
  {
    sub_10007A744(255, &qword_100106B88, (uint64_t (*)(void, void *, void *))&type metadata accessor for Button);
    sub_10007BA38(255, &qword_100106B90, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for _EnvironmentKeyTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106B80);
    }
  }
}

void sub_10007A744(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void *, void *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for Text, &protocol witness table for Text);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_10007A7A0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Section();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_10007A800()
{
  if (!qword_100106BA8)
  {
    sub_10007A87C();
    unint64_t v0 = type metadata accessor for NavigationLink();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106BA8);
    }
  }
}

unint64_t sub_10007A87C()
{
  unint64_t result = qword_100106BB0;
  if (!qword_100106BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106BB0);
  }
  return result;
}

void sub_10007A8D0()
{
  if (!qword_100106BC0)
  {
    sub_10007A358();
    type metadata accessor for InsetGroupedListStyle();
    sub_10007A9A4(&qword_100106BC8, (void (*)(uint64_t))sub_10007A358);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100106BC0);
    }
  }
}

uint64_t sub_10007A9A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10007A9EC()
{
  if (!qword_100106BD0)
  {
    sub_10007A8D0();
    sub_10007A358();
    type metadata accessor for InsetGroupedListStyle();
    sub_10007A9A4(&qword_100106BC8, (void (*)(uint64_t))sub_10007A358);
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100106BD0);
    }
  }
}

void sub_10007AAF0()
{
  if (!qword_100106BD8)
  {
    sub_10007A9EC();
    sub_10007A8D0();
    sub_10007A358();
    type metadata accessor for InsetGroupedListStyle();
    sub_10007A9A4(&qword_100106BC8, (void (*)(uint64_t))sub_10007A358);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100106BD8);
    }
  }
}

uint64_t sub_10007AC2C@<X0>(char *a1@<X8>)
{
  return sub_100077744(*(void *)(v1 + 16), a1);
}

uint64_t sub_10007AC34@<X0>(uint64_t a1@<X8>)
{
  return sub_100079300(a1);
}

void sub_10007AC60(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_10007AC6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100077F78(*(void *)(v1 + 16), a1);
}

uint64_t sub_10007AC74@<X0>(uint64_t a1@<X8>)
{
  return sub_1000789DC(*(void *)(v1 + 16), a1);
}

unint64_t sub_10007AC7C()
{
  unint64_t result = qword_100106C00;
  if (!qword_100106C00)
  {
    sub_10007A69C();
    sub_10007ACF4();
    sub_10007AD68();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106C00);
  }
  return result;
}

unint64_t sub_10007ACF4()
{
  unint64_t result = qword_100106C08;
  if (!qword_100106C08)
  {
    sub_10007A744(255, &qword_100106B88, (uint64_t (*)(void, void *, void *))&type metadata accessor for Button);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106C08);
  }
  return result;
}

unint64_t sub_10007AD68()
{
  unint64_t result = qword_100106C10;
  if (!qword_100106C10)
  {
    sub_10007BA38(255, &qword_100106B90, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for _EnvironmentKeyTransformModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106C10);
  }
  return result;
}

uint64_t sub_10007ADE4()
{
  return sub_100079198();
}

uint64_t sub_10007ADF0()
{
  return sub_100078C24(v0 + 16, (uint64_t)&unk_1000F7830, (uint64_t)&unk_100106C28);
}

uint64_t sub_10007AE28(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  swift_bridgeObjectRetain();
  id v3 = v2;
  sub_100079F68();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10007AEC0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10007AEF0()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_10007AF18()
{
  return _swift_deallocObject(v0, 17, 7);
}

unsigned char *sub_10007AF28(unsigned char *result)
{
  *result &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

uint64_t sub_10007AF44(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *long long v6 = v2;
  v6[1] = sub_100055B84;
  return sub_100078DCC(a1, v4, v5, v1 + 32);
}

uint64_t sub_10007AFFC()
{
  swift_bridgeObjectRelease();

  sub_100079FD8();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10007B068()
{
  return sub_100078C24(v0 + 16, (uint64_t)&unk_1000F78A8, (uint64_t)&unk_100106C40);
}

uint64_t sub_10007B0A0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10007B0B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007B118(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007B180(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10007B1E4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  sub_100079FD8();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 136, 7);
}

uint64_t sub_10007B258(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  long long v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *long long v6 = v2;
  v6[1] = sub_100028DB8;
  return sub_10007858C(a1, v4, v5, v1 + 32);
}

uint64_t destroy for TextFieldClearButton()
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for TextFieldClearButton(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TextFieldClearButton(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TextFieldClearButton(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextFieldClearButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextFieldClearButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextFieldClearButton()
{
  return &type metadata for TextFieldClearButton;
}

uint64_t sub_10007B508()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10007B648()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_10007B664()
{
  if (!qword_100106C48)
  {
    sub_10007B6CC(255);
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106C48);
    }
  }
}

void sub_10007B6CC(uint64_t a1)
{
}

void sub_10007B700()
{
  if (!qword_100106C58)
  {
    sub_10007B7A0();
    sub_10007A54C(255, &qword_100106C70, (uint64_t (*)(uint64_t))sub_10007B850, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100106C58);
    }
  }
}

void sub_10007B7A0()
{
  if (!qword_100106C60)
  {
    sub_10007B7FC();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106C60);
    }
  }
}

unint64_t sub_10007B7FC()
{
  unint64_t result = qword_100106C68;
  if (!qword_100106C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106C68);
  }
  return result;
}

void sub_10007B850()
{
  if (!qword_100106C78)
  {
    sub_10007B8B4();
    sub_10007B990();
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106C78);
    }
  }
}

void sub_10007B8B4()
{
  if (!qword_100106C80)
  {
    sub_10007B914();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106C80);
    }
  }
}

void sub_10007B914()
{
  if (!qword_100106C88)
  {
    sub_10007BA38(255, &qword_100106C90, (uint64_t)&type metadata for Color, (uint64_t (*)(void, uint64_t))&type metadata accessor for Optional);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106C88);
    }
  }
}

unint64_t sub_10007B990()
{
  unint64_t result = qword_100106C98;
  if (!qword_100106C98)
  {
    sub_10007B8B4();
    sub_10007A9A4(&qword_100106CA0, (void (*)(uint64_t))sub_10007B914);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106C98);
  }
  return result;
}

void sub_10007BA38(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_10007BA84()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10007BACC()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_10007BB44(uint64_t a1, uint64_t a2)
{
  sub_10007A54C(0, &qword_100106C70, (uint64_t (*)(uint64_t))sub_10007B850, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007BBD8(uint64_t a1)
{
  sub_10007A54C(0, &qword_100106C70, (uint64_t (*)(uint64_t))sub_10007B850, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10007BC64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10007BC90()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_10007BCBC()
{
  return sub_10007A9A4(&qword_100106CB0, (void (*)(uint64_t))sub_10007BD04);
}

void sub_10007BD04()
{
  if (!qword_100106CB8)
  {
    sub_10007B6CC(255);
    sub_10007A9A4((unint64_t *)&unk_100106CC0, sub_10007B6CC);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106CB8);
    }
  }
}

uint64_t sub_10007BDE8()
{
  return String.init<A>(describing:)();
}

uint64_t sub_10007BF08(void *a1, int a2)
{
  uint64_t v3 = v2;
  LODWORD(v3sub_10004C8C4(0, 0) = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&ObjectType - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013BC8(0, &qword_100104C38, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&ObjectType - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&ObjectType - v13;
  uint64_t v15 = type metadata accessor for DeepLinkContentKind(0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&ObjectType - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC6Health13SceneDelegate_deepLinkHandler);
  if (v19)
  {
    *(void *)uint64_t v18 = a1;
    v18[8] = v30;
    swift_storeEnumTagMultiPayload();
    sub_100031A60((uint64_t)v18, (uint64_t)v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
    sub_10007D448((uint64_t)v14, (uint64_t)v12);
    uint64_t v20 = v19 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink;
    swift_beginAccess();
    swift_retain();
    id v21 = a1;
    sub_100031AC4((uint64_t)v12, v20);
    swift_endAccess();
    sub_100011628();
    swift_release();
    return sub_10002FB04((uint64_t)v18);
  }
  else
  {
    uint64_t v23 = ObjectType;
    uint64_t v30 = v5;
    static Logger.general.getter();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v24, v25))
    {
      unint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)unint64_t v26 = 136446210;
      uint64_t v31 = v23;
      swift_getMetatypeMetadata();
      uint64_t v27 = String.init<A>(describing:)();
      uint64_t v31 = sub_100018DA0(v27, v28, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "[%{public}s]: Unable to handleUserActivity: deepLinkHandler is nil", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v30);
  }
}

uint64_t sub_10007C2DC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013BC8(0, &qword_100104C38, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v29 - v12;
  uint64_t v14 = type metadata accessor for DeepLinkContentKind(0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void *)(v2 + OBJC_IVAR____TtC6Health13SceneDelegate_deepLinkHandler);
  if (v18)
  {
    *uint64_t v17 = a1;
    swift_storeEnumTagMultiPayload();
    sub_100031A60((uint64_t)v17, (uint64_t)v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
    sub_10007D448((uint64_t)v13, (uint64_t)v11);
    uint64_t v19 = v18 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink;
    swift_beginAccess();
    swift_retain();
    id v20 = a1;
    sub_100031AC4((uint64_t)v11, v19);
    swift_endAccess();
    char v21 = sub_100011628();
    swift_release();
    sub_10002FB04((uint64_t)v17);
  }
  else
  {
    uint64_t v29 = v5;
    uint64_t v22 = ObjectType;
    static Logger.general.getter();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v25 = 136446210;
      uint64_t v31 = v22;
      swift_getMetatypeMetadata();
      uint64_t v26 = String.init<A>(describing:)();
      uint64_t v31 = sub_100018DA0(v26, v27, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%{public}s]: Unable to performShortcutItem: deepLinkHandler is nil", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v4);
    char v21 = 0;
  }
  return v21 & 1;
}

id sub_10007C7E0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v37 - v10;
  id v12 = [a1 userActivity];
  if (v12)
  {
    uint64_t v40 = ObjectType;
    static Logger.general.getter();
    id v13 = v12;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      id v41 = v13;
      uint64_t v17 = v16;
      uint64_t v18 = swift_slowAlloc();
      uint64_t v37 = v9;
      v44[0] = v18;
      *(_DWORD *)uint64_t v17 = 136446466;
      uint64_t v42 = v40;
      swift_getMetatypeMetadata();
      uint64_t v39 = v5;
      uint64_t v19 = String.init<A>(describing:)();
      uint64_t v38 = v6;
      uint64_t v42 = sub_100018DA0(v19, v20, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      uint64_t v42 = (uint64_t)v41;
      sub_10001E254(0, &qword_1001065D0);
      id v21 = v41;
      uint64_t v22 = String.init<A>(reflecting:)();
      uint64_t v42 = sub_100018DA0(v22, v23, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v6 = v38;
      uint64_t v5 = v39;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%{public}s]: saving user activity for stateRestoration: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      uint64_t v9 = v37;
      swift_slowDealloc();
      id v13 = v41;
      swift_slowDealloc();
    }
    else
    {
    }
    os_log_type_t v24 = *(void (**)(char *, uint64_t))(v6 + 8);
    v24(v11, v5);
    if (*(void *)(v2 + OBJC_IVAR____TtC6Health13SceneDelegate_deepLinkHandler))
    {
      sub_100013BC8(0, &qword_100105A28, (uint64_t (*)(uint64_t))sub_10004C090, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1000CBFD0;
      swift_retain();
      uint64_t v42 = static HAUserActivity.dateSavedRestorationKey.getter();
      uint64_t v43 = v26;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = type metadata accessor for Date();
      sub_100004F38((uint64_t *)(inited + 72));
      Date.init()();
      sub_100093884(inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v13 addUserInfoEntriesFromDictionary:isa];
      swift_release();
    }
    else
    {
      static Logger.general.getter();
      unint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v39 = v5;
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        uint64_t v37 = v9;
        v44[0] = v31;
        *(_DWORD *)uint64_t v30 = 136446210;
        uint64_t v42 = v40;
        swift_getMetatypeMetadata();
        uint64_t v32 = String.init<A>(describing:)();
        uint64_t v38 = v6;
        uint64_t v42 = sub_100018DA0(v32, v33, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%{public}s]: Unable to createRestorationActivity: deepLinkHandler is nil", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v34 = v37;
        uint64_t v35 = v39;
      }
      else
      {

        uint64_t v34 = v9;
        uint64_t v35 = v5;
      }
      v24(v34, v35);
      return 0;
    }
  }
  return v12;
}

uint64_t sub_10007CD90(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013BC8(0, &qword_100104C38, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  id v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v15 = type metadata accessor for DeepLinkContentKind(0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC6Health13SceneDelegate_deepLinkHandler);
  if (v19)
  {
    sub_10002F788();
    uint64_t v21 = *(int *)(v20 + 48);
    uint64_t v22 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v18, v33, v22);
    unint64_t v23 = v34;
    *(void *)&v18[v21] = v34;
    swift_storeEnumTagMultiPayload();
    sub_100031A60((uint64_t)v18, (uint64_t)v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
    sub_10007D448((uint64_t)v14, (uint64_t)v12);
    uint64_t v24 = v19 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink;
    swift_beginAccess();
    id v25 = v23;
    swift_retain();
    sub_100031AC4((uint64_t)v12, v24);
    swift_endAccess();
    sub_100011628();
    swift_release();
    return sub_10002FB04((uint64_t)v18);
  }
  else
  {
    uint64_t v27 = ObjectType;
    uint64_t v34 = (void *)v5;
    static Logger.general.getter();
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446210;
      uint64_t v35 = v27;
      swift_getMetatypeMetadata();
      uint64_t v31 = String.init<A>(describing:)();
      uint64_t v35 = sub_100018DA0(v31, v32, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%{public}s]: Unable to open URL: deepLinkHandler is nil", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, void *))(v6 + 8))(v8, v34);
  }
}

id sub_10007D250()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SceneDelegate();
  return [super dealloc];
}

id UIApplication.application.getter()
{
  return v0;
}

uint64_t sub_10007D2FC@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10007D37C()
{
  return static Published.subscript.setter();
}

void sub_10007D3F0(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_10001E254(255, a3);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10007D448(uint64_t a1, uint64_t a2)
{
  sub_100013BC8(0, &qword_100104C38, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007D4DC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007D524()
{
  return sub_100052F1C(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10007D52C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007D564(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    v20[0] = v5;
    uint64_t v13 = v12;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = ObjectType;
    *(_DWORD *)uint64_t v13 = 136446466;
    swift_getMetatypeMetadata();
    v20[1] = v2;
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v22 = sub_100018DA0(v14, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v22 = (uint64_t)v9;
    sub_10001E254(0, &qword_1001065D0);
    id v16 = v9;
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v22 = sub_100018DA0(v17, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%{public}s]: continuing userActivity: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, void))(v6 + 8))(v8, v20[0]);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return sub_10007BF08(v9, 1);
}

void sub_10007D80C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10001E254(0, (unint64_t *)&unk_100106F40);
    sub_10006DA64();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v16 = v2;
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
    goto LABEL_29;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 < v8)
    {
      unint64_t v14 = *(void *)(v17 + 8 * v13);
      uint64_t v11 = v3 + 1;
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 3;
      if (v3 + 3 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 4;
      if (v3 + 4 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14)
      {
LABEL_28:
        uint64_t v9 = (v14 - 1) & v14;
        unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
        id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
        if (v12)
        {
          do
          {
            if (!objc_msgSend(v12, "activationState", v16)) {
              break;
            }

            uint64_t v3 = v11;
            unint64_t v4 = v9;
            if ((v1 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              break;
            }
            sub_10001E254(0, (unint64_t *)&unk_100106F40);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v12 = v23;
            swift_unknownObjectRelease();
            uint64_t v11 = v3;
            uint64_t v9 = v4;
          }
          while (v23);
        }
        goto LABEL_33;
      }
      uint64_t v11 = v3 + 5;
      if (v3 + 5 < v8)
      {
        unint64_t v14 = *(void *)(v17 + 8 * v11);
        if (!v14)
        {
          uint64_t v15 = v3 + 6;
          while (v8 != v15)
          {
            unint64_t v14 = *(void *)(v17 + 8 * v15++);
            if (v14)
            {
              uint64_t v11 = v15 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    sub_10001B2F8();
    return;
  }
  __break(1u);
}

void sub_10007DACC(uint64_t a1@<X8>)
{
  id v3 = [self sharedBehavior];
  if (v3)
  {
    unint64_t v4 = v3;
    unsigned int v5 = [v3 isiPad];

    id v6 = [v1 connectedScenes];
    sub_10001E254(0, (unint64_t *)&unk_100106F40);
    sub_10006DA64();
    uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10007D80C(v7);
    id v9 = v8;
    swift_bridgeObjectRelease();
    if (v5)
    {
      if (!v9) {
        goto LABEL_29;
      }
      self;
      unint64_t v10 = (void *)swift_dynamicCastObjCClass();
      if (v10)
      {
        id v11 = [v10 windows];

        sub_10001E254(0, &qword_100106F50);
        unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v12 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_7;
          }
        }
        else if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_7:
          if ((v12 & 0xC000000000000001) != 0)
          {
            id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_10:
            unint64_t v14 = v13;
            swift_bridgeObjectRelease();
            id v9 = [v14 rootViewController];

            if (v9)
            {
              uint64_t v15 = type metadata accessor for MainSplitViewController();
              uint64_t v16 = swift_dynamicCastClass();
              if (v16)
              {
                uint64_t v17 = v16;
                *(void *)(a1 + 24) = v15;
                uint64_t v18 = (unint64_t *)&unk_100106F60;
                uint64_t v19 = type metadata accessor for MainSplitViewController;
LABEL_23:
                *(void *)(a1 + 32) = sub_10007E7E4(v18, (void (*)(uint64_t))v19);
                *(void *)a1 = v17;
                return;
              }
              goto LABEL_24;
            }
LABEL_29:
            *(void *)(a1 + 32) = 0;
            *(_OWORD *)a1 = 0u;
            *(_OWORD *)(a1 + 16) = 0u;
            return;
          }
          if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v13 = *(id *)(v12 + 32);
            goto LABEL_10;
          }
          __break(1u);
          goto LABEL_32;
        }
LABEL_28:
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
LABEL_24:

      goto LABEL_29;
    }
    if (!v9) {
      goto LABEL_29;
    }
    self;
    uint64_t v20 = (void *)swift_dynamicCastObjCClass();
    if (!v20) {
      goto LABEL_24;
    }
    id v21 = [v20 windows];

    sub_10001E254(0, &qword_100106F50);
    unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v22 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v28) {
        goto LABEL_28;
      }
    }
    else if (!*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_28;
    }
    if ((v22 & 0xC000000000000001) != 0)
    {
LABEL_32:
      id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_20:
      uint64_t v24 = v23;
      swift_bridgeObjectRelease();
      id v9 = [v24 rootViewController];

      if (v9)
      {
        uint64_t v25 = type metadata accessor for MainTabBarController();
        uint64_t v26 = swift_dynamicCastClass();
        if (v26)
        {
          uint64_t v17 = v26;
          *(void *)(a1 + 24) = v25;
          uint64_t v18 = (unint64_t *)&unk_100106F58;
          uint64_t v19 = type metadata accessor for MainTabBarController;
          goto LABEL_23;
        }
        goto LABEL_24;
      }
      goto LABEL_29;
    }
    if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v23 = *(id *)(v22 + 32);
      goto LABEL_20;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10007DF68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v45 - v14;
  if (!a3)
  {
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  char v16 = sub_100049F7C();
  if (v16 == 43)
  {
    uint64_t v50 = v12;
    uint64_t v51 = v9;
    uint64_t v17 = a4;
    uint64_t v18 = v15;
    uint64_t v19 = v8;
    uint64_t v20 = a1;
    swift_bridgeObjectRetain();
    uint64_t v21 = a2;
    uint64_t v22 = sub_1000386A0();
    if (v22)
    {
      uint64_t v26 = v22;
      uint64_t v27 = v23;
      uint64_t v28 = v24;
      uint64_t v29 = v25;
      *((void *)&v57 + 1) = &type metadata for PluginPPT;
      uint64_t v58 = &off_1000F5B00;
      uint64_t v30 = (void *)swift_allocObject();
      *(void *)&long long v56 = v30;
      void v30[2] = v26;
      v30[3] = v27;
      unsigned char v30[4] = v28;
      void v30[5] = v29;
    }
    else
    {
      uint64_t v58 = 0;
      long long v56 = 0u;
      long long v57 = 0u;
    }
    a2 = v21;
    a1 = v20;
    uint64_t v8 = v19;
    uint64_t v15 = v18;
    a4 = v17;
    uint64_t v9 = v51;
    unint64_t v12 = v50;
  }
  else
  {
    uint64_t v60 = &type metadata for HealthAppPPT;
    id v61 = &off_1000F6048;
    LOBYTE(v59) = v16;
    sub_10001CD68(&v59, (uint64_t)&v56);
  }
  sub_10007E5D0((uint64_t)&v56, (uint64_t)&v59);
  sub_10007E6E4((uint64_t)&v59, (uint64_t)&v54);
  if (!v55)
  {
    sub_10007E748((uint64_t)&v54);
    static Logger.general.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v50 = (char *)a2;
      id v41 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v56 = swift_slowAlloc();
      *(_DWORD *)id v41 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v54 = sub_100018DA0((uint64_t)v50, a3, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "No test configured by name %s", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    sub_10007E748((uint64_t)&v59);
    char v44 = 0;
    return v44 & 1;
  }
  sub_10001CD68(&v54, (uint64_t)&v56);
  static Logger.general.getter();
  sub_10001D360((uint64_t)&v56, (uint64_t)&v54);
  swift_bridgeObjectRetain_n();
  uint64_t v31 = Logger.logObject.getter();
  int v32 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v31, (os_log_type_t)v32))
  {
    _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)&v54);

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
LABEL_15:
    uint64_t v42 = *((void *)&v57 + 1);
    uint64_t v43 = v58;
    uint64_t result = (uint64_t)sub_1000190DC(&v56, *((uint64_t *)&v57 + 1));
    if (a1)
    {
      if (a4)
      {
        char v44 = ((uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, _UNKNOWN **))v43[2])(a1, a2, a3, a4, v42, v43);
        sub_10007E748((uint64_t)&v59);
        _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)&v56);
        return v44 & 1;
      }
      goto LABEL_23;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int v47 = v32;
  uint64_t v46 = v15;
  uint64_t v48 = a1;
  uint64_t v50 = (char *)a2;
  uint64_t v51 = v9;
  uint64_t v49 = v8;
  uint64_t v33 = swift_slowAlloc();
  uint64_t v53 = swift_slowAlloc();
  *(_DWORD *)uint64_t v33 = 136315394;
  sub_10001D360((uint64_t)&v54, (uint64_t)v52);
  sub_10007E68C();
  uint64_t v34 = String.init<A>(describing:)();
  v52[0] = sub_100018DA0(v34, v35, &v53);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  uint64_t result = _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)&v54);
  *(_WORD *)(v33 + 12) = 2080;
  if (a4)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = Dictionary.description.getter();
    unint64_t v38 = v37;
    swift_bridgeObjectRelease();
    v52[0] = sub_100018DA0(v36, v38, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v47, "Executing Test %s with options %s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v51 + 8))(v46, v49);
    a2 = (uint64_t)v50;
    a1 = v48;
    goto LABEL_15;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_10007E5D0(uint64_t a1, uint64_t a2)
{
  sub_10007E634();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10007E634()
{
  if (!qword_100106F30)
  {
    sub_10007E68C();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106F30);
    }
  }
}

unint64_t sub_10007E68C()
{
  unint64_t result = qword_100106F38;
  if (!qword_100106F38)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_100106F38);
  }
  return result;
}

uint64_t sub_10007E6E4(uint64_t a1, uint64_t a2)
{
  sub_10007E634();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007E748(uint64_t a1)
{
  sub_10007E634();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10007E7A4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10007E7E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for FeatureAvailabilityDataSource()
{
  uint64_t result = qword_100106F70;
  if (!qword_100106F70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10007E878()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10007E8B8()
{
  uint64_t v0 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v52 = *(void *)(v0 - 8);
  uint64_t v53 = v0;
  __chkstk_darwin(v0);
  uint64_t v51 = (char *)v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C1B8(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2 - 8);
  uint64_t v50 = (char *)v40 - v3;
  uint64_t v45 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v44 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v43 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C1B8(0, &qword_100104AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v40 - v6;
  uint64_t v42 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions();
  uint64_t v41 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UICellAccessory.DisplayedState();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v46 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for ContentConfigurationItem();
  uint64_t v49 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v55 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  v40[1] = UUID.uuidString.getter();
  v40[0] = v19;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v47 = v15 + 8;
  uint64_t v48 = v20;
  v20(v17, v14);
  v58[3] = type metadata accessor for UIListContentConfiguration();
  v58[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
  sub_100004F38(v58);
  static UIListContentConfiguration.cell()();
  UIListContentConfiguration.text.setter();
  id v21 = [self blackColor];
  uint64_t v22 = (void (*)(char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v22(v57, 0);
  sub_10001C1B8(0, &qword_100104AC0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for UICellAccessory();
  uint64_t v23 = swift_allocObject();
  long long v54 = xmmword_1000CBFD0;
  *(_OWORD *)(v23 + 16) = xmmword_1000CBFD0;
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for UICellAccessory.DisplayedState.always(_:), v10);
  uint64_t v24 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)();
  static UICellAccessory.disclosureIndicator(displayed:options:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v42);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, void, uint64_t))(v44 + 104))(v43, enum case for CellDeselectionBehavior.default(_:), v45);
  uint64_t v25 = type metadata accessor for UIBackgroundConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v50, 1, 1, v25);
  (*(void (**)(char *, void, uint64_t))(v52 + 104))(v51, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v53);
  uint64_t v26 = v55;
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();
  sub_10001C1B8(0, &qword_100104858, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for ArrayDataSourceSection();
  *(_OWORD *)(swift_allocObject() + 16) = v54;
  sub_10001C1B8(0, (unint64_t *)&qword_100104860, (uint64_t (*)(uint64_t))sub_10001AE44, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = v54;
  uint64_t v28 = v56;
  *(void *)(v27 + 56) = v56;
  *(void *)(v27 + 64) = sub_10007F4B4(&qword_100104870, (void (*)(uint64_t))&type metadata accessor for ContentConfigurationItem);
  uint64_t v29 = sub_100004F38((uint64_t *)(v27 + 32));
  uint64_t v30 = v49;
  (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 16))(v29, v26, v28);
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v31 = v46;
  int v32 = v48;
  v48(v17, v46);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)();
  v58[0] = 0x3C53447961727241;
  v58[1] = 0xE800000000000000;
  UUID.init()();
  uint64_t v33 = UUID.uuidString.getter();
  unint64_t v35 = v34;
  v32(v17, v31);
  v36._uint64_t countAndFlagsBits = v33;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 62;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  uint64_t v38 = ArrayDataSource.init(arrangedSections:identifier:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v55, v56);
  return v38;
}

void sub_10007F274(void *a1)
{
  type metadata accessor for InternalSettingsFeatureStateListViewController();
  id v2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  [a1 showViewController:v2 sender:0];
}

void sub_10007F2E8()
{
}

void sub_10007F304()
{
}

void sub_10007F320()
{
}

uint64_t sub_10007F34C()
{
  return type metadata accessor for FeatureAvailabilityDataSource();
}

unint64_t sub_10007F354@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002BFF4(a1);
}

uint64_t sub_10007F3D0(uint64_t a1, uint64_t a2)
{
  return sub_10002B8D0(a1, a2);
}

uint64_t sub_10007F430(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10007F4B4(&qword_100106FC0, (void (*)(uint64_t))type metadata accessor for FeatureAvailabilityDataSource);
  uint64_t result = sub_10007F4B4(&qword_100106FC8, (void (*)(uint64_t))type metadata accessor for FeatureAvailabilityDataSource);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10007F4B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007F4FC@<X0>(uint64_t a1@<X8>)
{
  switch((unint64_t)[v1 categoryID])
  {
    case 1uLL:
    case 2uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 8uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0x17uLL:
    case 0x1AuLL:
    case 0x1FuLL:
      uint64_t result = URL.init(string:)();
      break;
    default:
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
      uint64_t result = v4(a1, 1, 1, v3);
      break;
  }
  return result;
}

unint64_t sub_10007F790()
{
  unint64_t result = qword_100106FD0;
  if (!qword_100106FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106FD0);
  }
  return result;
}

uint64_t sub_10007F7E4()
{
  return sub_100080A98(&qword_100106FD8, (void (*)(uint64_t))&type metadata accessor for StringSearchCriteria);
}

uint64_t sub_10007F82C()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t sub_10007F850()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_10007F874()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  sub_10003FEAC(v6, qword_100108C98);
  sub_10003FE20(v6, (uint64_t)qword_100108C98);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)();
}

uint64_t sub_10007FA60()
{
  sub_1000811E4(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v15 - v1;
  v15[0] = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v3 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1000811E4(0, &qword_1001055F8, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v11 = v10;
  sub_10003FEAC(v10, qword_100108CB0);
  uint64_t v12 = sub_10003FE20(v11, (uint64_t)qword_100108CB0);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  (*(void (**)(char *, void, void))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v15[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v2, 1, 1, v8);
  IntentDescription.init(_:categoryName:searchKeywords:)();
  uint64_t v13 = type metadata accessor for IntentDescription();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 0, 1, v13);
}

uint64_t sub_10007FDD8()
{
  sub_1000811E4(0, &qword_100107040, (uint64_t (*)(uint64_t))&type metadata accessor for StringSearchScope, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v0 = type metadata accessor for StringSearchScope();
  uint64_t v1 = *(void *)(v0 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000CBFD0;
  uint64_t result = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1 + 104))(v3 + v2, enum case for StringSearchScope.general(_:), v0);
  qword_100108CC8 = v3;
  return result;
}

uint64_t sub_10007FEE0()
{
  sub_1000810A0(0, &qword_100107020, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for ParameterSummaryString);
  __chkstk_darwin(v0 - 8);
  sub_1000810A0(0, &qword_100107028, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for ParameterSummaryString.StringInterpolation);
  __chkstk_darwin(v1);
  sub_100025CC0();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._uint64_t countAndFlagsBits = 0x20686372616553;
  v2._object = (void *)0xE700000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v2);
  swift_getKeyPath();
  sub_100081130();
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)();
  swift_release();
  v3._uint64_t countAndFlagsBits = 0x6C616548206E6920;
  v3._object = (void *)0xEA00000000006874;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v3);
  ParameterSummaryString.init(stringInterpolation:)();
  return IntentParameterSummary.init(_:table:)();
}

uint64_t sub_1000800B4(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for StringSearchCriteria();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  sub_1000811E4(0, (unint64_t *)&unk_100104880, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[11] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100080260, v6, v5);
}

id sub_100080260()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  swift_release();
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  IntentParameter.wrappedValue.getter();
  uint64_t v7 = StringSearchCriteria.term.getter();
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100028AF8(*(void *)(v0 + 56));
    sub_10008104C();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 72) + 32))(*(void *)(v0 + 80), *(void *)(v0 + 56), *(void *)(v0 + 64));
    id result = [self defaultWorkspace];
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v13 = result;
    uint64_t v14 = *(void *)(v0 + 72);
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 64);
    URL._bridgeToObjectiveC()(*(NSURL **)(v0 + 48));
    uint64_t v18 = v17;
    sub_1000939E8((uint64_t)_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v13 openSensitiveURL:v18 withOptions:isa];

    static IntentResult.result<>()();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  }
  return (id)v11();
}

uint64_t sub_100080510@<X0>(void *a1@<X8>)
{
  if (qword_100104048 != -1) {
    swift_once();
  }
  *a1 = qword_100108CC8;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10008057C()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t sub_1000805A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StringSearchCriteria();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  IntentParameter.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

unint64_t sub_100080698()
{
  unint64_t result = qword_100106FE0;
  if (!qword_100106FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106FE0);
  }
  return result;
}

unint64_t sub_1000806F0()
{
  unint64_t result = qword_100106FE8;
  if (!qword_100106FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106FE8);
  }
  return result;
}

uint64_t sub_100080744()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100080760()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10008077C@<X0>(uint64_t a1@<X8>)
{
  if (qword_100104038 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v3 = sub_10003FE20(v2, (uint64_t)qword_100108C98);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_100080824(uint64_t a1)
{
  unint64_t v2 = sub_100081190();

  return static ShowInAppSearchResultsIntent.openAppWhenRun.getter(a1, v2);
}

uint64_t sub_100080864@<X0>(uint64_t a1@<X8>)
{
  if (qword_100104040 != -1) {
    swift_once();
  }
  sub_1000811E4(0, &qword_1001055F8, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v3 = sub_10003FE20(v2, (uint64_t)qword_100108CB0);

  return sub_10006B704(v3, a1);
}

uint64_t sub_10008090C(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100028DB8;
  return sub_1000800B4(a1, v4);
}

uint64_t sub_1000809AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100080AE0();
  *a1 = result;
  return result;
}

uint64_t sub_1000809D4(uint64_t a1)
{
  unint64_t v2 = sub_100025CC0();

  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenSearchIntent()
{
  return &type metadata for OpenSearchIntent;
}

unint64_t sub_100080A24()
{
  unint64_t result = qword_100106FF8;
  if (!qword_100106FF8)
  {
    sub_1000810A0(255, &qword_100107000, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for IntentParameterSummary);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100106FF8);
  }
  return result;
}

uint64_t sub_100080A98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100080AE0()
{
  uint64_t v0 = type metadata accessor for InputConnectionBehavior();
  uint64_t v26 = *(void *)(v0 - 8);
  uint64_t v27 = v0;
  __chkstk_darwin(v0);
  uint64_t v25 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000811E4(0, &qword_1001064D8, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDialog, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2 - 8);
  uint64_t v24 = (char *)&v21 - v3;
  uint64_t v4 = type metadata accessor for String.LocalizationValue();
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  __chkstk_darwin(v5);
  uint64_t v23 = (char *)&v21 - v6;
  sub_1000811E4(0, &qword_100105600, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t v10 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Locale();
  __chkstk_darwin(v14 - 8);
  uint64_t v22 = type metadata accessor for LocalizedStringResource();
  uint64_t v15 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v16 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v17(v13, enum case for LocalizedStringResource.BundleDescription.main(_:), v10);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  sub_100080FB8();
  uint64_t v21 = v18;
  static Locale.current.getter();
  v17(v13, v16, v10);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v22);
  uint64_t v19 = type metadata accessor for IntentDialog();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v24, 1, 1, v19);
  (*(void (**)(char *, void, uint64_t))(v26 + 104))(v25, enum case for InputConnectionBehavior.default(_:), v27);
  return IntentParameter<>.init(title:description:requestValueDialog:inputConnectionBehavior:)();
}

void sub_100080FB8()
{
  if (!qword_100107008)
  {
    type metadata accessor for StringSearchCriteria();
    sub_100080A98(&qword_1001046B8, (void (*)(uint64_t))&type metadata accessor for StringSearchCriteria);
    unint64_t v0 = type metadata accessor for IntentParameter();
    if (!v1) {
      atomic_store(v0, &qword_100107008);
    }
  }
}

unint64_t sub_10008104C()
{
  unint64_t result = qword_100107018;
  if (!qword_100107018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107018);
  }
  return result;
}

void sub_1000810A0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_100025CC0();
    unint64_t v7 = a3(a1, &type metadata for OpenSearchIntent, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_100081104@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

void sub_100081130()
{
  if (!qword_100107030)
  {
    sub_100080FB8();
    unint64_t v0 = type metadata accessor for KeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107030);
    }
  }
}

unint64_t sub_100081190()
{
  unint64_t result = qword_100107038;
  if (!qword_100107038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107038);
  }
  return result;
}

void sub_1000811E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for SearchIntentError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000812E4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchIntentError()
{
  return &type metadata for SearchIntentError;
}

unint64_t sub_100081320()
{
  unint64_t result = qword_100107048;
  if (!qword_100107048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107048);
  }
  return result;
}

id sub_100081438(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC6Health16NoHealthDataView_label;
  id v4 = objc_allocWithZone((Class)UILabel);
  uint64_t v5 = v1;
  *(void *)&v1[v3] = [v4 init];

  v10.receiver = v5;
  v10.super_class = (Class)type metadata accessor for NoHealthDataView();
  id v6 = [super initWithCoder:a1];
  id v7 = v6;
  if (v6)
  {
    id v8 = v6;
    sub_10008150C();
  }
  return v7;
}

void sub_10008150C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC6Health16NoHealthDataView_label);
  id v2 = [self mainBundle];
  v9._object = (void *)0x80000001000D5770;
  v3._uint64_t countAndFlagsBits = 0x5F617461645F6F6ELL;
  v3._object = (void *)0xEC00000074786574;
  v4._uint64_t countAndFlagsBits = 0x61746144206F4ELL;
  v4._object = (void *)0xE700000000000000;
  v9._uint64_t countAndFlagsBits = 0xD000000000000039;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v9);

  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 setText:v5];

  sub_10001E254(0, &qword_100107080);
  id v6 = (void *)static UIFont.createFont(with:weight:traits:rounded:maximumContentSizeCategory:respectsDynamicType:)();
  [v1 setFont:v6];

  id v7 = [self tertiaryLabelColor];
  [v1 setTextColor:v7];

  [v1 setNumberOfLines:0];
  [v1 setTextAlignment:1];
  [v1 setTranslatesAutoresizingMaskIntoConstraints:0];

  sub_1000816F8(v1);
}

void sub_1000816F8(void *a1)
{
  id v2 = v1;
  [v1 addSubview:a1];
  Swift::String v4 = self;
  sub_10001E918();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1000CEBC0;
  id v6 = [a1 centerXAnchor];
  id v7 = [v2 centerXAnchor];
  id v8 = [v6 constraintEqualToAnchor:v7];

  *(void *)(v5 + 32) = v8;
  id v9 = [a1 centerYAnchor];
  id v10 = [v2 centerYAnchor];
  id v11 = [v9 constraintEqualToAnchor:v10];

  *(void *)(v5 + 4sub_10004C8C4(0, 0) = v11;
  id v12 = [a1 leadingAnchor];
  id v13 = [v2 layoutMarginsGuide];
  id v14 = [v13 leadingAnchor];

  id v15 = [v12 constraintEqualToAnchor:v14];
  *(void *)(v5 + 48) = v15;
  id v16 = [a1 trailingAnchor];
  id v17 = [v2 layoutMarginsGuide];
  id v18 = [v17 trailingAnchor];

  id v19 = [v16 constraintEqualToAnchor:v18];
  *(void *)(v5 + 56) = v19;
  specialized Array._endMutation()();
  sub_10001E254(0, &qword_100107088);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 activateConstraints:isa];
}

id sub_10008199C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NoHealthDataView();
  return [super dealloc];
}

uint64_t type metadata accessor for NoHealthDataView()
{
  return self;
}

uint64_t type metadata accessor for WelcomePrivacyInformationViewController()
{
  uint64_t result = qword_100107118;
  if (!qword_100107118) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100081A50()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100081A9C(uint64_t a1)
{
  return sub_100081BDC(a1, 0xD00000000000001BLL, 0x80000001000D5970, &qword_100107090, algn_100107098);
}

uint64_t sub_100081AC4(uint64_t a1)
{
  return sub_100081BDC(a1, 0xD00000000000001FLL, 0x80000001000D58C0, &qword_1001070A0, algn_1001070A8);
}

uint64_t sub_100081AEC(uint64_t a1)
{
  return sub_100081BDC(a1, 0xD000000000000020, 0x80000001000D5910, &qword_1001070B0, algn_1001070B8);
}

uint64_t sub_100081B14(uint64_t a1)
{
  return sub_100081BDC(a1, 0xD000000000000024, 0x80000001000D44A0, &qword_1001070C0, algn_1001070C8);
}

uint64_t sub_100081B3C(uint64_t a1)
{
  return sub_100081BDC(a1, 0xD000000000000027, 0x80000001000D5830, &qword_1001070D0, algn_1001070D8);
}

uint64_t sub_100081B64(uint64_t a1)
{
  return sub_100081BDC(a1, 0xD00000000000002ALL, 0x80000001000D5890, &qword_1001070E0, algn_1001070E8);
}

uint64_t sub_100081B8C(uint64_t a1)
{
  return sub_100081BDC(a1, 0xD00000000000002ALL, 0x80000001000D5860, &qword_1001070F0, algn_1001070F8);
}

uint64_t sub_100081BB4(uint64_t a1)
{
  return sub_100081BDC(a1, 0xD00000000000002DLL, 0x80000001000D58E0, &qword_100107100, algn_100107108);
}

uint64_t sub_100081BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v7 = type metadata accessor for Locale();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v8 - 8);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t result = String.init(localized:table:bundle:locale:comment:)();
  *a4 = result;
  *a5 = v10;
  return result;
}

void sub_100081CEC()
{
  v8.receiver = v0;
  v8.super_class = (Class)swift_getObjectType();
  [super viewDidLoad];
  if (qword_100104050 != -1) {
    swift_once();
  }
  NSString v1 = String._bridgeToObjectiveC()();
  sub_100070EB8();
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1000CC0F0;
  *(void *)(v2 + 32) = 0xD000000000000028;
  *(void *)(v2 + 4sub_10004C8C4(0, 0) = 0x80000001000D5940;
  strcpy((char *)(v2 + 48), "ContinueButton");
  *(unsigned char *)(v2 + 63) = -18;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = (id)HKUIJoinStringsForAutomationIdentifier();

  id v5 = [v0 view];
  if (v5)
  {
    id v6 = v5;
    NSString v7 = String._bridgeToObjectiveC()();
    [v6 setAccessibilityIdentifier:v7];
  }
  else
  {
    __break(1u);
  }
}

void sub_100081E94(void *a1)
{
  id v1 = a1;
  sub_100081CEC();
}

void sub_100081EDC()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    NSString v2 = String._bridgeToObjectiveC()();
    id v3 = [self presenterForPrivacySplashWithIdentifier:v2];

    if (v3) {
      [v3 setPresentingViewController:v1];
    }
    [v3 present];
    swift_unknownObjectRelease();
  }
}

void sub_100081FBC()
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_10008921C();
    swift_unknownObjectRelease();
  }
  sub_10005561C();
  AnalyticsSubmitting.submit()();
}

void sub_100082024(void *a1)
{
  id v1 = a1;
  sub_100081FBC();
}

uint64_t sub_10008206C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, char a11)
{
  id v12 = (char *)objc_allocWithZone(v11);
  *(void *)&v12[qword_100107110 + 8] = 0;
  swift_unknownObjectWeakInit();
  return OnboardingHeroWithLinkViewController.init(title:detailText:heroView:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:heroViewUsesIntrinsicHeight:)();
}

uint64_t sub_100082138(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, uint64_t a11)
{
  id v12 = (char *)objc_allocWithZone(v11);
  *(void *)&v12[qword_100107110 + 8] = 0;
  swift_unknownObjectWeakInit();
  return OnboardingHeroWithLinkViewController.init(title:detailText:heroImage:heroImageHeight:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:)();
}

uint64_t sub_100082208()
{
  return sub_100070F10(v0 + qword_100107110);
}

id sub_100082218()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_100082250(uint64_t a1)
{
  return sub_100070F10(a1 + qword_100107110);
}

uint64_t sub_100082260()
{
  return type metadata accessor for WelcomePrivacyInformationViewController();
}

void sub_100082268(char a1)
{
  id v2 = [self configurationWithPointSize:7 weight:3 scale:80.0];
  if (qword_100103FF8 != -1) {
    swift_once();
  }
  id v3 = (id)qword_100108B98;
  id v4 = v2;
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [self imageNamed:v5 inBundle:v3 withConfiguration:v4];

  if (!v6)
  {
    __break(1u);
    goto LABEL_28;
  }
  id v7 = [self sharedConnection];
  if (!v7)
  {
LABEL_28:
    __break(1u);
    return;
  }
  objc_super v8 = v7;
  unsigned int v9 = [v7 isPasscodeSet];

  if (a1)
  {
    if (v9)
    {
      if (qword_100104058 != -1) {
        swift_once();
      }
      uint64_t v10 = qword_100104070;
      swift_bridgeObjectRetain();
      if (v10 == -1) {
        goto LABEL_23;
      }
    }
    else
    {
      if (qword_100104060 != -1) {
        swift_once();
      }
      uint64_t v12 = qword_100104080;
      swift_bridgeObjectRetain();
      if (v12 == -1) {
        goto LABEL_23;
      }
    }
  }
  else if (v9)
  {
    if (qword_100104058 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_100104078;
    swift_bridgeObjectRetain();
    if (v11 == -1) {
      goto LABEL_23;
    }
  }
  else
  {
    if (qword_100104060 != -1) {
      swift_once();
    }
    uint64_t v13 = qword_100104088;
    swift_bridgeObjectRetain();
    if (v13 == -1) {
      goto LABEL_23;
    }
  }
  swift_once();
LABEL_23:
  swift_bridgeObjectRetain();
  if (qword_100104068 != -1) {
    swift_once();
  }
  id v14 = (char *)objc_allocWithZone((Class)type metadata accessor for WelcomePrivacyInformationViewController());
  *(void *)&v14[qword_100107110 + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_bridgeObjectRetain();
  OnboardingHeroWithLinkViewController.init(title:detailText:heroImage:heroImageHeight:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:)();
}

uint64_t *sub_1000826B0(uint64_t *a1, uint64_t *a2)
{
  sub_100084D74(0, &qword_100105600, (void (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(v4 - 8);
    uint64_t v7 = type metadata accessor for LocalizedStringResource();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

void *sub_100082820(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    sub_100084D74(0, &qword_100105600, (void (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *sub_100082948(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    sub_100084D74(0, &qword_100105600, (void (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *sub_100082ADC(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    sub_100084D74(0, &qword_100105600, (void (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *sub_100082C04(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    sub_100084D74(0, &qword_100105600, (void (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t sub_100082D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100082DAC);
}

uint64_t sub_100082DAC(uint64_t a1, uint64_t a2)
{
  sub_100084D74(0, &qword_100105600, (void (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100082E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100082E48);
}

uint64_t sub_100082E48(uint64_t a1, uint64_t a2)
{
  sub_100084D74(0, &qword_100105600, (void (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CategoriesSectionProvider()
{
  uint64_t result = qword_1001071C0;
  if (!qword_1001071C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100082F20()
{
  sub_100084D74(319, &qword_100105600, (void (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100082FC8()
{
  *(void *)(v0 + 16) = *(void *)(type metadata accessor for HealthViewEntity() - 8);
  *(void *)(v0 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_100083080, 0, 0);
}

uint64_t sub_100083080()
{
  uint64_t v23 = v0;
  id v1 = [self allCategories];
  sub_100084CE0();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v22[0] = _swiftEmptyArrayStorage;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    unint64_t v9 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3) {
    goto LABEL_17;
  }
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v5 = *(id *)(v2 + 8 * i + 32);
    }
    uint64_t v6 = v5;
    unint64_t v7 = (unint64_t)[v5 categoryID];
    if (v7 > 0x1F || ((1 << v7) & 0x84807D76) == 0)
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v9 = (unint64_t)v22[0];
LABEL_18:
  swift_bridgeObjectRetain();
  if ((v9 & 0x8000000000000000) != 0 || (uint64_t v10 = (void *)v9, (v9 & 0x4000000000000000) != 0))
  {
    uint64_t v10 = sub_10008FEE8(v9);
    swift_release();
  }
  v22[0] = v10;
  sub_100083C5C((uint64_t *)v22);
  swift_release();
  unint64_t v2 = (unint64_t)v22[0];
  if (((unint64_t)v22[0] & 0x8000000000000000) == 0 && ((unint64_t)v22[0] & 0x4000000000000000) == 0)
  {
    uint64_t v11 = *((void *)v22[0] + 2);
    if (!v11) {
      goto LABEL_35;
    }
    goto LABEL_23;
  }
LABEL_34:
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v11) {
    goto LABEL_35;
  }
LABEL_23:
  uint64_t result = sub_100096524(0, v11 & ~(v11 >> 63), 0);
  if (v11 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v13 = 0;
  uint64_t v14 = v0[2];
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v15 = *(id *)(v2 + 8 * v13 + 32);
    }
    id v16 = v15;
    id v17 = (unint64_t *)v0[3];
    v22[0] = v15;
    sub_10008340C(v22, v17);

    unint64_t v19 = _swiftEmptyArrayStorage[2];
    unint64_t v18 = _swiftEmptyArrayStorage[3];
    if (v19 >= v18 >> 1) {
      sub_100096524(v18 > 1, v19 + 1, 1);
    }
    ++v13;
    uint64_t v20 = v0[3];
    _swiftEmptyArrayStorage[2] = v19 + 1;
    sub_10005C168(v20, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v19);
  }
  while (v11 != v13);
LABEL_35:
  swift_release();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void *))v0[1];
  return v21(_swiftEmptyArrayStorage);
}

id sub_10008340C@<X0>(id *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v44 = a2;
  sub_100084D74(0, &qword_100105FD8, (void (*)(uint64_t))&type metadata accessor for DisplayRepresentation.Image);
  __chkstk_darwin(v3 - 8);
  uint64_t v41 = (char *)&v36 - v4;
  sub_100084D74(0, &qword_100105600, (void (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v5 - 8);
  uint64_t v39 = (char *)&v36 - v6;
  uint64_t v7 = type metadata accessor for DisplayRepresentation();
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  __chkstk_darwin(v7);
  os_log_type_t v40 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Locale();
  __chkstk_darwin(v9 - 8);
  uint64_t v38 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v11 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v13 = (unint64_t *)((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v14 - 8);
  uint64_t v45 = type metadata accessor for LocalizedStringResource();
  uint64_t v15 = *(void *)(v45 - 8);
  uint64_t v16 = __chkstk_darwin(v45);
  unint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v36 - v19;
  id v36 = *a1;
  id v21 = [v36 displayName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.LocalizationValue.init(_:)();
  *uint64_t v13 = sub_100084CE0();
  (*(void (**)(unint64_t *, void, uint64_t))(v11 + 104))(v13, enum case for LocalizedStringResource.BundleDescription.forClass(_:), v37);
  static Locale.current.getter();
  LocalizedStringResource.init(_:table:locale:bundle:comment:)();
  uint64_t v22 = v45;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v45);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v39, 1, 1, v22);
  id v23 = v36;
  id v24 = [v36 systemImageName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)();
  uint64_t v25 = v40;
  DisplayRepresentation.init(title:subtitle:image:)();
  id v26 = [v23 categoryID];
  unint64_t v47 = 0xD00000000000001CLL;
  unint64_t v48 = 0x80000001000D59D0;
  id v46 = v26;
  v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  unint64_t v28 = v47;
  unint64_t v29 = v48;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v45);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v23;
  uint64_t v31 = v44;
  *uint64_t v44 = v28;
  v31[1] = v29;
  int v32 = (char *)v31;
  uint64_t v33 = type metadata accessor for HealthViewEntity();
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v32[*(int *)(v33 + 20)], v25, v43);
  uint64_t v34 = (id (**)())&v32[*(int *)(v33 + 24)];
  *uint64_t v34 = sub_100084D58;
  v34[1] = (id (*)())v30;
  return v23;
}

id sub_100083984()
{
  sub_100084D74(0, (unint64_t *)&unk_100104880, (void (*)(uint64_t))&type metadata accessor for URL);
  __chkstk_darwin(v0 - 8);
  unint64_t v2 = (char *)&v13 - v1;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007F4FC((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_100028AF8((uint64_t)v2);
    sub_10005C1CC();
    swift_allocError();
    return (id)swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    id result = [self defaultWorkspace];
    if (result)
    {
      uint64_t v9 = result;
      URL._bridgeToObjectiveC()(v8);
      uint64_t v11 = v10;
      sub_1000939E8((uint64_t)_swiftEmptyArrayStorage);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v9 openSensitiveURL:v11 withOptions:isa];

      return (id)(*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100083BD0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10005BE6C;
  return sub_100082FC8();
}

uint64_t sub_100083C5C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_100093880(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_100083CD8(v6);
  return specialized ContiguousArray._endMutation()();
}

void sub_100083CD8(uint64_t *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_147;
    }
    if (v3) {
      sub_100084668(0, v3, 1, v2);
    }
    return;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_155;
  }
  Swift::Int v109 = v4;
  objc_super v107 = v2;
  if (v3 < 2)
  {
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    uint64_t v118 = (uint64_t)_swiftEmptyArrayStorage;
    char v116 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v14 = _swiftEmptyArrayStorage[2];
LABEL_113:
      if (v14 >= 2)
      {
        uint64_t v101 = *v107;
        do
        {
          unint64_t v102 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_142;
          }
          if (!v101) {
            goto LABEL_154;
          }
          uint64_t v103 = *(void *)&v9[16 * v102 + 32];
          uint64_t v104 = *(void *)&v9[16 * v14 + 24];
          sub_10008482C((id *)(v101 + 8 * v103), (id *)(v101 + 8 * *(void *)&v9[16 * v14 + 16]), v101 + 8 * v104, v116);
          if (v1) {
            break;
          }
          if (v104 < v103) {
            goto LABEL_143;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v9 = sub_10009130C((uint64_t)v9);
          }
          if (v102 >= *((void *)v9 + 2)) {
            goto LABEL_144;
          }
          uint64_t v105 = &v9[16 * v102 + 32];
          *(void *)uint64_t v105 = v103;
          *((void *)v105 + 1) = v104;
          unint64_t v106 = *((void *)v9 + 2);
          if (v14 > v106) {
            goto LABEL_145;
          }
          memmove(&v9[16 * v14 + 16], &v9[16 * v14 + 32], 16 * (v106 - v14));
          *((void *)v9 + 2) = v106 - 1;
          unint64_t v14 = v106 - 1;
        }
        while (v106 > 2);
      }
LABEL_124:
      swift_bridgeObjectRelease();
      *(void *)((v118 & 0xFFFFFFFFFFFFFF8) + 0x1sub_10004C8C4(0, 0) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v6 = v2;
    uint64_t v7 = v5 >> 1;
    sub_100084CE0();
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x1sub_10004C8C4(0, 0) = v7;
    uint64_t v2 = v6;
    char v116 = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v118 = v8;
  }
  Swift::Int v10 = v3;
  Swift::Int v11 = 0;
  uint64_t v12 = *v2;
  uint64_t v108 = *v2 - 8;
  uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  uint64_t v13 = &selRef_isKappaDetectionSupportedOnPhone;
  uint64_t v117 = *v2;
  Swift::Int v114 = v10;
  while (1)
  {
    Swift::Int v15 = v11++;
    Swift::Int v113 = v15;
    if (v11 >= v10) {
      goto LABEL_43;
    }
    uint64_t v110 = v9;
    uint64_t v16 = *(void **)(v12 + 8 * v15);
    id v17 = *(id *)(v12 + 8 * v11);
    id v18 = v16;
    id v19 = [v17 v13[139]];
    BOOL v20 = v19 != (id)14;
    if (v19 == (id)14 || [v18 v13[139]] == (id)14)
    {
    }
    else
    {
      id v21 = [v17 displayName];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v22 = [v18 displayName];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v12 = v117;
      sub_100038AD4();
      uint64_t v23 = StringProtocol.localizedStandardCompare<A>(_:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v20 = v23 == -1;
    }
    Swift::Int v24 = v15 + 2;
    if (v15 + 2 < v114)
    {
      Swift::Int v25 = v15 + 2;
      while (1)
      {
        Swift::Int v24 = v25;
        id v26 = *(void **)(v12 + 8 * v11);
        id v27 = *(id *)(v12 + 8 * v25);
        id v28 = v26;
        if ([v27 categoryID] == (id)14)
        {

          if (v20)
          {
            uint64_t v9 = v110;
            Swift::Int v15 = v113;
            if (v24 < v113) {
              goto LABEL_148;
            }
LABEL_36:
            if (v15 < v24)
            {
              unint64_t v35 = (uint64_t *)(v108 + 8 * v24);
              Swift::Int v36 = v24;
              Swift::Int v37 = v15;
              uint64_t v38 = (uint64_t *)(v12 + 8 * v15);
              do
              {
                if (v37 != --v36)
                {
                  if (!v12) {
                    goto LABEL_153;
                  }
                  uint64_t v39 = *v38;
                  uint64_t *v38 = *v35;
                  uint64_t *v35 = v39;
                }
                ++v37;
                --v35;
                ++v38;
              }
              while (v37 < v36);
            }
            Swift::Int v11 = v24;
            goto LABEL_43;
          }
        }
        else if ([v28 categoryID] == (id)14)
        {

          if (!v20)
          {
            Swift::Int v11 = v24;
            uint64_t v9 = v110;
            Swift::Int v15 = v113;
            goto LABEL_43;
          }
        }
        else
        {
          BOOL v29 = v20;
          id v30 = [v27 displayName];
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          id v31 = [v28 displayName];
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v12 = v117;
          sub_100038AD4();
          uint64_t v32 = StringProtocol.localizedStandardCompare<A>(_:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v33 = v32 == -1;
          BOOL v20 = v29;
          int v34 = !v33;
          if (v29 == v34) {
            break;
          }
        }
        Swift::Int v25 = v24 + 1;
        Swift::Int v11 = v24;
        if (v24 + 1 >= v114)
        {
          ++v24;
          break;
        }
      }
    }
    Swift::Int v11 = v24;
    uint64_t v9 = v110;
    Swift::Int v15 = v113;
    if (v20)
    {
      if (v24 < v113) {
        goto LABEL_148;
      }
      goto LABEL_36;
    }
LABEL_43:
    if (v11 < v114)
    {
      if (__OFSUB__(v11, v15)) {
        goto LABEL_146;
      }
      if (v11 - v15 < v109) {
        break;
      }
    }
LABEL_63:
    if (v11 < v15) {
      goto LABEL_141;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = sub_100091098(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    unint64_t v52 = *((void *)v9 + 2);
    unint64_t v51 = *((void *)v9 + 3);
    unint64_t v14 = v52 + 1;
    if (v52 >= v51 >> 1) {
      uint64_t v9 = sub_100091098((char *)(v51 > 1), v52 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v14;
    uint64_t v53 = v9 + 32;
    long long v54 = &v9[16 * v52 + 32];
    *(void *)long long v54 = v15;
    *((void *)v54 + 1) = v11;
    if (v52)
    {
      while (1)
      {
        unint64_t v55 = v14 - 1;
        if (v14 >= 4)
        {
          uint64_t v60 = &v53[16 * v14];
          uint64_t v61 = *((void *)v60 - 8);
          uint64_t v62 = *((void *)v60 - 7);
          BOOL v66 = __OFSUB__(v62, v61);
          uint64_t v63 = v62 - v61;
          if (v66) {
            goto LABEL_130;
          }
          uint64_t v65 = *((void *)v60 - 6);
          uint64_t v64 = *((void *)v60 - 5);
          BOOL v66 = __OFSUB__(v64, v65);
          uint64_t v58 = v64 - v65;
          char v59 = v66;
          if (v66) {
            goto LABEL_131;
          }
          unint64_t v67 = v14 - 2;
          uint64_t v68 = &v53[16 * v14 - 32];
          uint64_t v70 = *(void *)v68;
          uint64_t v69 = *((void *)v68 + 1);
          BOOL v66 = __OFSUB__(v69, v70);
          uint64_t v71 = v69 - v70;
          if (v66) {
            goto LABEL_133;
          }
          BOOL v66 = __OFADD__(v58, v71);
          uint64_t v72 = v58 + v71;
          if (v66) {
            goto LABEL_136;
          }
          if (v72 >= v63)
          {
            unint64_t v90 = &v53[16 * v55];
            uint64_t v92 = *(void *)v90;
            uint64_t v91 = *((void *)v90 + 1);
            BOOL v66 = __OFSUB__(v91, v92);
            uint64_t v93 = v91 - v92;
            if (v66) {
              goto LABEL_140;
            }
            BOOL v83 = v58 < v93;
            goto LABEL_100;
          }
        }
        else
        {
          if (v14 != 3)
          {
            uint64_t v84 = *((void *)v9 + 4);
            uint64_t v85 = *((void *)v9 + 5);
            BOOL v66 = __OFSUB__(v85, v84);
            uint64_t v77 = v85 - v84;
            char v78 = v66;
            goto LABEL_94;
          }
          uint64_t v57 = *((void *)v9 + 4);
          uint64_t v56 = *((void *)v9 + 5);
          BOOL v66 = __OFSUB__(v56, v57);
          uint64_t v58 = v56 - v57;
          char v59 = v66;
        }
        if (v59) {
          goto LABEL_132;
        }
        unint64_t v67 = v14 - 2;
        uint64_t v73 = &v53[16 * v14 - 32];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        BOOL v76 = __OFSUB__(v74, v75);
        uint64_t v77 = v74 - v75;
        char v78 = v76;
        if (v76) {
          goto LABEL_135;
        }
        uint64_t v79 = &v53[16 * v55];
        uint64_t v81 = *(void *)v79;
        uint64_t v80 = *((void *)v79 + 1);
        BOOL v66 = __OFSUB__(v80, v81);
        uint64_t v82 = v80 - v81;
        if (v66) {
          goto LABEL_138;
        }
        if (__OFADD__(v77, v82)) {
          goto LABEL_139;
        }
        if (v77 + v82 >= v58)
        {
          BOOL v83 = v58 < v82;
LABEL_100:
          if (v83) {
            unint64_t v55 = v67;
          }
          goto LABEL_102;
        }
LABEL_94:
        if (v78) {
          goto LABEL_134;
        }
        uint64_t v86 = &v53[16 * v55];
        uint64_t v88 = *(void *)v86;
        uint64_t v87 = *((void *)v86 + 1);
        BOOL v66 = __OFSUB__(v87, v88);
        uint64_t v89 = v87 - v88;
        if (v66) {
          goto LABEL_137;
        }
        if (v89 < v77) {
          goto LABEL_14;
        }
LABEL_102:
        unint64_t v94 = v55 - 1;
        if (v55 - 1 >= v14)
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
          goto LABEL_150;
        }
        if (!v12) {
          goto LABEL_152;
        }
        uint64_t v95 = v12;
        uint64_t v96 = &v53[16 * v94];
        uint64_t v97 = *(void *)v96;
        uint64_t v98 = &v53[16 * v55];
        uint64_t v99 = *((void *)v98 + 1);
        sub_10008482C((id *)(v95 + 8 * *(void *)v96), (id *)(v95 + 8 * *(void *)v98), v95 + 8 * v99, v116);
        if (v1) {
          goto LABEL_124;
        }
        if (v99 < v97) {
          goto LABEL_127;
        }
        if (v55 > *((void *)v9 + 2)) {
          goto LABEL_128;
        }
        *(void *)uint64_t v96 = v97;
        *(void *)&v53[16 * v94 + 8] = v99;
        unint64_t v100 = *((void *)v9 + 2);
        if (v55 >= v100) {
          goto LABEL_129;
        }
        unint64_t v14 = v100 - 1;
        memmove(&v53[16 * v55], v98 + 16, 16 * (v100 - 1 - v55));
        *((void *)v9 + 2) = v100 - 1;
        uint64_t v12 = v117;
        if (v100 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v14 = 1;
LABEL_14:
    Swift::Int v10 = v114;
    uint64_t v13 = &selRef_isKappaDetectionSupportedOnPhone;
    if (v11 >= v114) {
      goto LABEL_113;
    }
  }
  if (__OFADD__(v15, v109)) {
    goto LABEL_149;
  }
  Swift::Int v40 = v114;
  if (v15 + v109 < v114) {
    Swift::Int v40 = v15 + v109;
  }
  uint64_t v41 = &selRef_isKappaDetectionSupportedOnPhone;
  if (v40 >= v15)
  {
    if (v11 != v40)
    {
      uint64_t v111 = v9;
      Swift::Int v112 = v40;
      uint64_t v42 = v108 + 8 * v11;
      do
      {
        uint64_t v43 = *(void **)(v12 + 8 * v11);
        uint64_t v115 = v42;
        while (1)
        {
          uint64_t v44 = *(void **)v42;
          id v45 = v43;
          id v46 = v44;
          if ([v45 v41[139]] == (id)14) {
            break;
          }
          if ([v46 v41[139]] == (id)14)
          {
          }
          else
          {
            id v47 = [v45 displayName];
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            id v48 = [v46 displayName];
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v41 = &selRef_isKappaDetectionSupportedOnPhone;
            sub_100038AD4();
            uint64_t v49 = StringProtocol.localizedStandardCompare<A>(_:)();

            swift_bridgeObjectRelease();
            uint64_t v12 = v117;
            swift_bridgeObjectRelease();
            if (v49 != -1) {
              goto LABEL_53;
            }
          }
          if (!v12) {
            goto LABEL_151;
          }
          uint64_t v50 = *(void **)v42;
          uint64_t v43 = *(void **)(v42 + 8);
          *(void *)uint64_t v42 = v43;
          *(void *)(v42 + 8) = v50;
          v42 -= 8;
          if (v11 == ++v15) {
            goto LABEL_53;
          }
        }

LABEL_53:
        ++v11;
        uint64_t v42 = v115 + 8;
        Swift::Int v15 = v113;
      }
      while (v11 != v112);
      Swift::Int v11 = v112;
      uint64_t v9 = v111;
    }
    goto LABEL_63;
  }
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_100084668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
    uint64_t v20 = *a4;
LABEL_6:
    uint64_t v7 = *(void **)(v5 + 8 * v4);
    uint64_t v8 = a1;
    uint64_t v19 = v6;
    uint64_t v21 = v4;
    while (1)
    {
      uint64_t v9 = *(void **)v6;
      id v10 = v7;
      id v11 = v9;
      if ([v10 categoryID] == (id)14)
      {

LABEL_5:
        ++v4;
        uint64_t v6 = v19 + 8;
        if (v4 == a2) {
          return;
        }
        goto LABEL_6;
      }
      if ([v11 categoryID] == (id)14)
      {
      }
      else
      {
        id v12 = [v10 displayName];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v13 = [v11 displayName];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100038AD4();
        uint64_t v14 = StringProtocol.localizedStandardCompare<A>(_:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        BOOL v15 = v14 == -1;
        uint64_t v5 = v20;
        uint64_t v4 = v21;
        if (!v15) {
          goto LABEL_5;
        }
      }
      if (!v5) {
        break;
      }
      uint64_t v16 = *(void **)v6;
      uint64_t v7 = *(void **)(v6 + 8);
      *(void *)uint64_t v6 = v7;
      *(void *)(v6 + 8) = v16;
      v6 -= 8;
      if (v4 == ++v8) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
}

uint64_t sub_10008482C(id *__src, id *a2, unint64_t a3, void **__dst)
{
  uint64_t v4 = __dst;
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v8 = (char *)a2 - (char *)__src;
  }
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v41 = __src;
  Swift::Int v40 = __dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7) {
      goto LABEL_52;
    }
    if (__dst != a2 || &a2[v12] <= __dst) {
      memmove(__dst, a2, 8 * v12);
    }
    uint64_t v23 = &v4[v12];
    uint64_t v39 = v23;
    uint64_t v41 = v5;
    if (__src >= v5 || v10 < 8)
    {
LABEL_51:
      sub_100091190(&v41, &v40, &v39);
      return 1;
    }
    Swift::Int v24 = (id *)(a3 - 8);
    Swift::Int v25 = &selRef_isKappaDetectionSupportedOnPhone;
    id v26 = v5;
    Swift::Int v37 = v4;
    while (1)
    {
      id v27 = *--v26;
      id v28 = *(v23 - 1);
      id v29 = v27;
      if ([v28 v25[139]] == (id)14)
      {

        id v30 = v24 + 1;
      }
      else
      {
        if ([v29 v25[139]] == (id)14)
        {

          id v30 = v24 + 1;
LABEL_45:
          int v34 = v37;
          if (v30 != v5 || v24 >= v5) {
            *Swift::Int v24 = *v26;
          }
          uint64_t v41 = v26;
          goto LABEL_49;
        }
        id v31 = [v28 displayName];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v32 = [v29 displayName];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100038AD4();
        Swift::Int v25 = &selRef_isKappaDetectionSupportedOnPhone;
        uint64_t v33 = StringProtocol.localizedStandardCompare<A>(_:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v30 = v24 + 1;
        if (v33 == -1) {
          goto LABEL_45;
        }
      }
      uint64_t v39 = v23 - 1;
      int v34 = v37;
      if (v30 < v23 || v24 >= v23 || v30 != v23) {
        *Swift::Int v24 = *(v23 - 1);
      }
      id v26 = v5;
      --v23;
LABEL_49:
      if (v26 > __src)
      {
        --v24;
        uint64_t v5 = v26;
        if (v23 > v34) {
          continue;
        }
      }
      goto LABEL_51;
    }
  }
  if (v7 >= -7)
  {
    if (__dst != __src || &__src[v9] <= __dst) {
      memmove(__dst, __src, 8 * v9);
    }
    id v13 = &v4[v9];
    uint64_t v39 = v13;
    unint64_t v14 = a3;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      BOOL v15 = &selRef_isKappaDetectionSupportedOnPhone;
      while (1)
      {
        uint64_t v16 = *v4;
        id v17 = *v5;
        id v18 = v16;
        if ([v17 v15[139]] == (id)14)
        {
        }
        else
        {
          if ([v18 v15[139]] == (id)14)
          {

LABEL_21:
            id v22 = v5 + 1;
            if (v6 < v5 || v6 >= v22 || v6 != v5) {
              *uint64_t v6 = *v5;
            }
            goto LABEL_25;
          }
          id v19 = [v17 displayName];
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          id v20 = [v18 displayName];
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          sub_100038AD4();
          uint64_t v21 = StringProtocol.localizedStandardCompare<A>(_:)();

          swift_bridgeObjectRelease();
          BOOL v15 = &selRef_isKappaDetectionSupportedOnPhone;
          unint64_t v14 = a3;
          swift_bridgeObjectRelease();
          if (v21 == -1) {
            goto LABEL_21;
          }
        }
        if (v6 != v4) {
          *uint64_t v6 = *v4;
        }
        Swift::Int v40 = ++v4;
        id v22 = v5;
LABEL_25:
        ++v6;
        if (v4 < v13)
        {
          uint64_t v5 = v22;
          if ((unint64_t)v22 < v14) {
            continue;
          }
        }
        uint64_t v41 = v6;
        goto LABEL_51;
      }
    }
    goto LABEL_51;
  }
LABEL_52:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100084CE0()
{
  unint64_t result = qword_100105328;
  if (!qword_100105328)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100105328);
  }
  return result;
}

uint64_t sub_100084D20()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_100084D58()
{
  return sub_100083984();
}

void sub_100084D74(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_100084DC8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v43 = a4;
  uint64_t v44 = a2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v42 = a1;
  if (v12)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v41 = a3;
    v39[1] = v14;
    aBlock[0] = v14;
    *(_DWORD *)uint64_t v13 = 136446466;
    id v45 = &type metadata for HealthAppPPT;
    sub_100085AB8();
    uint64_t v40 = v6;
    uint64_t v15 = String.init<A>(describing:)();
    id v45 = (ValueMetadata *)sub_100018DA0(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v17 = Array.description.getter();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    id v45 = (ValueMetadata *)sub_100018DA0(v17, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%{public}s]: Setting overrideRelevanceForFeedItemIdentifiers to: %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    a3 = v41;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v40);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  id v20 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v20 initWithSuiteName:v21];

  if (v22)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    Swift::Int v24 = [v22 arrayForKey:v23];

    if (v24)
    {
      uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      Swift::Int v24 = sub_1000620DC(v25);
      swift_bridgeObjectRelease();
    }
    id v26 = objc_allocWithZone((Class)NSUserDefaults);
    NSString v27 = String._bridgeToObjectiveC()();
    id v28 = [v26 initWithSuiteName:v27];

    if (v28)
    {
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      NSString v30 = String._bridgeToObjectiveC()();
      [v28 setObject:isa forKey:v30];

      sub_10008590C(0);
      LOBYTE(isa) = v31;
      static Feed.Kind.relevanceRankedFeeds.getter();
      id v32 = objc_allocWithZone((Class)type metadata accessor for PopulateDiscoverFeedOperation());
      uint64_t v33 = (void *)PopulateDiscoverFeedOperation.init(feedKinds:)();
      uint64_t v34 = swift_allocObject();
      *(unsigned char *)(v34 + 16) = v43;
      *(unsigned char *)(v34 + 17) = isa & 1;
      uint64_t v35 = v44;
      *(void *)(v34 + 24) = v24;
      *(void *)(v34 + 32) = v35;
      *(void *)(v34 + 4sub_10004C8C4(0, 0) = a3;
      aBlock[4] = (uint64_t)sub_100085AA4;
      aBlock[5] = v34;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100005388;
      aBlock[3] = (uint64_t)&unk_1000F7BE0;
      Swift::Int v36 = _Block_copy(aBlock);
      id v37 = v33;
      swift_retain();
      sub_10004CF94((uint64_t)sub_100085AA4);
      swift_release();
      [v37 setCompletionBlock:v36];
      _Block_release(v36);

      swift_release();
      sub_10001E254(0, (unint64_t *)&qword_100105858);
      uint64_t v38 = (void *)static NSOperationQueue.userInitiated.getter();
      [v38 addOperation:v37];

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10008532C(char a1, char a2, uint64_t a3, void (*a4)(void (*)(), uint64_t))
{
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = a1;
  *(unsigned char *)(v8 + 17) = a2;
  *(void *)(v8 + 24) = a3;
  swift_bridgeObjectRetain();
  a4(sub_100085B2C, v8);

  return swift_release();
}

void sub_1000853CC(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  os_log_type_t v11 = (char *)&v33 - v10;
  sub_10008590C(a2);
  if (a3)
  {
    static Logger.general.getter();
    swift_bridgeObjectRetain_n();
    BOOL v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v36 = v33;
      *(_DWORD *)uint64_t v14 = 136446466;
      uint64_t v35 = &type metadata for HealthAppPPT;
      sub_100085AB8();
      uint64_t v34 = v5;
      uint64_t v15 = String.init<A>(describing:)();
      uint64_t v35 = (ValueMetadata *)sub_100018DA0(v15, v16, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v17 = Array.description.getter();
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      uint64_t v35 = (ValueMetadata *)sub_100018DA0(v17, v19, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%{public}s]: Populate feed complete, resetting overrideRelevanceForFeedItemIdentifiers to previous value: %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v34);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
    id v26 = objc_allocWithZone((Class)NSUserDefaults);
    NSString v27 = String._bridgeToObjectiveC()();
    id v28 = [v26 initWithSuiteName:v27];

    if (v28)
    {
      v29.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      NSString v30 = String._bridgeToObjectiveC()();
      [v28 setObject:v29.super.isa forKey:v30];

LABEL_12:
      return;
    }
    __break(1u);
  }
  else
  {
    static Logger.general.getter();
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v34 = v5;
      *(_DWORD *)id v22 = 136446210;
      uint64_t v36 = v23;
      uint64_t v35 = &type metadata for HealthAppPPT;
      sub_100085AB8();
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v35 = (ValueMetadata *)sub_100018DA0(v24, v25, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%{public}s]: Populate feed complete, removing overrideRelevanceForFeedItemIdentifiers", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v34);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    }
    id v31 = objc_allocWithZone((Class)NSUserDefaults);
    NSString v32 = String._bridgeToObjectiveC()();
    v29.super.Class isa = (Class)[v31 initWithSuiteName:v32];

    if (v29.super.isa)
    {
      NSString v30 = String._bridgeToObjectiveC()();
      [(objc_class *)v29.super.isa removeObjectForKey:v30];
      goto LABEL_12;
    }
  }
  __break(1u);
}

void sub_10008590C(char a1)
{
  id v2 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 initWithSuiteName:v3];

  if (!v4)
  {
    __break(1u);
    goto LABEL_7;
  }
  NSString v5 = String._bridgeToObjectiveC()();
  unsigned int v6 = [v4 BOOLForKey:v5];

  if (v6 == (a1 & 1)) {
    return;
  }
  id v7 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 initWithSuiteName:v8];

  if (!v9)
  {
LABEL_7:
    __break(1u);
    return;
  }
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 setBool:a1 & 1 forKey:v10];
}

uint64_t sub_100085A64()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100085AA4()
{
  return sub_10008532C(*(unsigned char *)(v0 + 16), *(unsigned char *)(v0 + 17), *(void *)(v0 + 24), *(void (**)(void (*)(), uint64_t))(v0 + 32));
}

unint64_t sub_100085AB8()
{
  unint64_t result = qword_100107208;
  if (!qword_100107208)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_100107208);
  }
  return result;
}

uint64_t sub_100085AF4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100085B2C()
{
  sub_1000853CC(*(unsigned __int8 *)(v0 + 16), *(unsigned char *)(v0 + 17), *(void *)(v0 + 24));
}

void sub_100085B3C(void *a1, void *a2, uint64_t a3, char a4, void (*a5)(void), uint64_t a6)
{
}

id sub_100085B94(uint64_t a1, uint64_t a2, int a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v57 = a5;
  uint64_t v58 = a4;
  int v51 = a3;
  uint64_t v54 = type metadata accessor for Logger();
  uint64_t v53 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  id v7 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DeepLinkActivityType();
  uint64_t v52 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  NSString v10 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000876A8(0, &qword_100105A38, (void (*)(uint64_t))&type metadata accessor for Presentation);
  __chkstk_darwin(v11 - 8);
  os_log_type_t v13 = (char *)v46 - v12;
  uint64_t v56 = type metadata accessor for DataTypeDetailConfiguration.Context();
  uint64_t v55 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v15 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for HKTDataTypeDetailFactory();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [self dataTypeWithCode:a2];
  if (result)
  {
    os_log_type_t v21 = result;
    sub_10007DACC((uint64_t)&v63);
    if (v64)
    {
      v46[0] = v8;
      v46[1] = v7;
      uint64_t v50 = v17;
      uint64_t v47 = v16;
      sub_10001CD68(&v63, (uint64_t)v65);
      HKTDataTypeDetailFactory.init()();
      uint64_t v22 = v66;
      uint64_t v23 = v67;
      sub_1000190DC(v65, v66);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v23 + 32))(&v63, v22, v23);
      id v24 = [objc_allocWithZone((Class)HKHealthStore) init];
      uint64_t v25 = type metadata accessor for PinnedContentManager();
      id v26 = v24;
      NSString v27 = v15;
      id v28 = v19;
      uint64_t v29 = PinnedContentManager.__allocating_init(healthStore:domain:)();
      sub_10001D360((uint64_t)&v63, (uint64_t)v62);
      id v30 = v26;
      id v31 = [v30 profileIdentifier];
      uint64_t v32 = type metadata accessor for Presentation();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v13, 1, 1, v32);
      static DataTypeDetailMode.defaultMode(for:presentation:)();

      sub_1000876FC((uint64_t)v13, &qword_100105A38, (void (*)(uint64_t))&type metadata accessor for Presentation);
      uint64_t v60 = v25;
      uint64_t v61 = &protocol witness table for PinnedContentManager;
      uint64_t v59 = v29;
      uint64_t v49 = v29;
      uint64_t v33 = (uint64_t)v28;
      uint64_t v34 = v27;
      swift_retain();
      id v48 = v30;
      DataTypeDetailConfiguration.Context.init(healthExperienceStore:healthStore:mode:pinnedContentManager:chartContext:restorationUserActivity:)();
      uint64_t v35 = (void *)HKTDataTypeDetailFactory.makeViewController(hkType:context:)();
      type metadata accessor for CompoundDataSourceCollectionViewController();
      uint64_t v36 = swift_dynamicCastClass();
      uint64_t v37 = v50;
      if (v36)
      {
        uint64_t v38 = (void *)v36;
        uint64_t v54 = v33;
        uint64_t v39 = v52;
        uint64_t v40 = v46[0];
        (*(void (**)(char *, void, void))(v52 + 104))(v10, enum case for DeepLinkActivityType.dataTypeDetail(_:), v46[0]);
        uint64_t v41 = v58;
        if (v58) {
          uint64_t v42 = v57;
        }
        else {
          uint64_t v42 = 0;
        }
        id v43 = v35;
        sub_1000869E4(v38, v65, (uint64_t)v10, v51 & 1, v41, v42, (uint64_t)&unk_1000F7C40, (uint64_t)sub_100087498, (uint64_t)&unk_1000F7C58, (void (*)(void (*)(void), uint64_t))sub_1000877E0);

        swift_release();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v40);
        uint64_t v44 = v54;
        uint64_t v45 = v47;
        (*(void (**)(char *, uint64_t))(v55 + 8))(v34, v56);
        _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)&v63);
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v44, v45);
      }
      else
      {

        if (v58) {
          v58(0);
        }

        swift_release();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v34, v56);
        _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)&v63);
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v33, v47);
      }
      return (id)_s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v65);
    }

    id result = (id)sub_1000873D0((uint64_t)&v63);
  }
  if (v58) {
    return (id)((uint64_t (*)(void))v58)(0);
  }
  return result;
}

uint64_t sub_100086498(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v40 = a6;
  uint64_t v41 = a5;
  int v38 = a4;
  uint64_t v8 = type metadata accessor for DeepLinkActivityType();
  uint64_t v39 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  NSString v10 = &v37[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000876A8(0, (unint64_t *)&unk_100107210, (void (*)(uint64_t))&type metadata accessor for HKTypeGroup);
  __chkstk_darwin(v11 - 8);
  os_log_type_t v13 = &v37[-v12];
  uint64_t v14 = type metadata accessor for HKTypeGroup();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = &v37[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  id v20 = &v37[-v19];
  sub_10007DACC((uint64_t)&v45);
  if (!v46)
  {
    uint64_t result = sub_1000873D0((uint64_t)&v45);
    goto LABEL_11;
  }
  sub_10001CD68(&v45, (uint64_t)v47);
  uint64_t v21 = static HKTypeGroup.groupsByKeyword.getter();
  if (*(void *)(v21 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v22 = sub_100094D80(a2, a3);
    if (v23)
    {
      (*(void (**)(unsigned char *, unint64_t, uint64_t))(v15 + 16))(v13, *(void *)(v21 + 56) + *(void *)(v15 + 72) * v22, v14);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1000876FC((uint64_t)v13, (unint64_t *)&unk_100107210, (void (*)(uint64_t))&type metadata accessor for HKTypeGroup);
    uint64_t result = _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v47);
LABEL_11:
    if (v41) {
      return ((uint64_t (*)(void))v41)(0);
    }
    return result;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v15 + 32))(v20, v13, v14);
  uint64_t v25 = v48;
  uint64_t v26 = v49;
  sub_1000190DC(v47, v48);
  NSString v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 40))(v25, v26);
  uint64_t v28 = v48;
  uint64_t v29 = v49;
  sub_1000190DC(v47, v48);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v29 + 48))(&v45, v28, v29);
  uint64_t v30 = v48;
  uint64_t v31 = v49;
  sub_1000190DC(v47, v48);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v31 + 56))(v44, v30, v31);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v15 + 16))(v18, v20, v14);
  sub_10001D360((uint64_t)&v45, (uint64_t)v43);
  sub_10001D360((uint64_t)v44, (uint64_t)v42);
  id v32 = objc_allocWithZone((Class)type metadata accessor for CategoryViewController());
  id v33 = v27;
  uint64_t v34 = (void *)CategoryViewController.init(typeGroup:healthStore:healthExperienceStore:pinnedContentManager:)();
  uint64_t v35 = v39;
  (*(void (**)(unsigned char *, void, uint64_t))(v39 + 104))(v10, enum case for DeepLinkActivityType.category(_:), v8);
  if (v41) {
    uint64_t v36 = v40;
  }
  else {
    uint64_t v36 = 0;
  }
  sub_1000869E4(v34, v47, (uint64_t)v10, v38 & 1, v41, v36, (uint64_t)&unk_1000F7C90, (uint64_t)sub_100087498, (uint64_t)&unk_1000F7CA8, (void (*)(void (*)(void), uint64_t))sub_1000877E0);

  (*(void (**)(unsigned char *, uint64_t))(v35 + 8))(v10, v8);
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v44);
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)&v45);
  (*(void (**)(unsigned char *, uint64_t))(v15 + 8))(v20, v14);
  return _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v47);
}

void sub_1000869E4(void *a1, void *a2, uint64_t a3, char a4, void (*a5)(void), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(void (*)(void), uint64_t))
{
  if (a1)
  {
    uint64_t v15 = self;
    id v26 = a1;
    [v15 begin];
    sub_1000190DC(a2, a2[3]);
    dispatch thunk of ViewControllerRouterProtocol.prepareForAppActivity(_:)();
    [v15 commit];
    uint64_t v16 = a2[3];
    uint64_t v17 = a2[4];
    sub_1000190DC(a2, v16);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
    if (v18)
    {
      uint64_t v19 = (void *)v18;
      self;
      uint64_t v20 = swift_dynamicCastObjCClass();
      if (v20)
      {
        uint64_t v21 = (void *)v20;
        [v15 begin];
        unint64_t v22 = (void *)swift_allocObject();
        id v22[2] = a5;
        v22[3] = a6;
        v22[4] = v26;
        aBlock[4] = a8;
        aBlock[5] = v22;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100005388;
        aBlock[3] = a9;
        char v23 = _Block_copy(aBlock);
        id v24 = v26;
        a10(a5, a6);
        swift_release();
        [v15 setCompletionBlock:v23];
        _Block_release(v23);
        [v21 pushViewController:v24 animated:a4 & 1];
        [v15 commit];

        return;
      }
    }
    if (a5) {
      a5(0);
    }
  }
  else if (a5)
  {
    a5(0);
  }
}

void sub_100086C6C(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DeepLinkActivityType();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [self dataTypeWithCode:a2];
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = [self sharedInstance];
    id v16 = [v15 createListViewController:v14];

    self;
    uint64_t v17 = swift_dynamicCastObjCClass();
    if (v17)
    {
      uint64_t v18 = (void *)v17;
      sub_10007DACC((uint64_t)&v21);
      if (v22)
      {
        sub_10001CD68(&v21, (uint64_t)v23);
        (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DeepLinkActivityType.summary(_:), v9);
        if (a4) {
          uint64_t v19 = a5;
        }
        else {
          uint64_t v19 = 0;
        }
        id v20 = v16;
        sub_1000869E4(v18, v23, (uint64_t)v12, a3 & 1, a4, v19, (uint64_t)&unk_1000F7CE0, (uint64_t)sub_100087498, (uint64_t)&unk_1000F7CF8, (void (*)(void (*)(void), uint64_t))sub_1000877E0);

        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v23);
      }
      else
      {
        sub_1000873D0((uint64_t)&v21);
        if (a4) {
          a4(0);
        }
      }
      return;
    }
  }
  if (a4) {
    a4(0);
  }
}

uint64_t sub_100086EEC(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void), uint64_t a5)
{
  sub_10007DACC((uint64_t)&v27);
  if (!v29)
  {
    uint64_t result = sub_1000873D0((uint64_t)&v27);
    if (!a4) {
      return result;
    }
    return a4(0);
  }
  sub_10001CD68(&v27, (uint64_t)v33);
  uint64_t v8 = v34;
  uint64_t v9 = v35;
  sub_1000190DC(v33, v34);
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
  if (!v10)
  {
    uint64_t result = _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v33);
    if (!a4) {
      return result;
    }
    return a4(0);
  }

  uint64_t v11 = v34;
  uint64_t v12 = v35;
  sub_1000190DC(v33, v34);
  id v13 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
  if (!v13) {
    id v13 = [objc_allocWithZone((Class)HKHealthStore) init];
  }
  uint64_t v14 = v13;
  id v15 = objc_allocWithZone((Class)type metadata accessor for InternalSettingsViewController());
  id v16 = (void *)sub_10002EB4C(v14);

  id v17 = [objc_allocWithZone((Class)UINavigationController) initWithRootViewController:v16];
  id v18 = objc_allocWithZone((Class)type metadata accessor for InternalFeedItemListViewController());
  swift_bridgeObjectRetain();
  uint64_t v19 = (void *)InternalFeedItemListViewController.init(contentKinds:)();
  uint64_t v20 = a3 & 1;
  [v17 pushViewController:v19 animated:v20];
  sub_10001D360((uint64_t)v33, (uint64_t)&v27);
  sub_10001D3C4(0, &qword_1001059C8);
  type metadata accessor for MainTabBarController();
  if (swift_dynamicCast())
  {
    id v21 = v32;
    uint64_t v22 = (void *)swift_allocObject();
    id v22[2] = a4;
    v22[3] = a5;
    v22[4] = v19;
    uint64_t v30 = sub_100087498;
    uint64_t v31 = v22;
    *(void *)&long long v27 = _NSConcreteStackBlock;
    *((void *)&v27 + 1) = 1107296256;
    uint64_t v28 = sub_100005388;
    uint64_t v29 = &unk_1000F7D48;
    char v23 = _Block_copy(&v27);
    sub_10004CF94((uint64_t)a4);
    id v24 = v19;
    swift_release();
    [v21 presentViewController:v17 animated:v20 completion:v23];

    _Block_release(v23);
    uint64_t v19 = v21;
  }
  else
  {
    sub_10001D360((uint64_t)v33, (uint64_t)&v27);
    type metadata accessor for MainSplitViewController();
    if (swift_dynamicCast())
    {
      id v26 = v32;
      [v32 showViewController:v17 sender:0];
    }
    else
    {
      if (a4) {
        a4(0);
      }

      uint64_t v19 = v17;
    }
  }

  return _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v33);
}

id sub_100087234(id result)
{
  if (!result) {
    return result;
  }
  uint64_t result = [result collectionView];
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v1 = result;
  id v2 = [result visibleCells];

  sub_10001E254(0, &qword_100106A28);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_5;
    }
LABEL_12:
    swift_bridgeObjectRelease_n();
    return 0;
  }
LABEL_19:
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_12;
  }
LABEL_5:
  uint64_t v5 = 4;
  while (1)
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(v3 + 8 * v5);
    }
    id v7 = v6;
    uint64_t v8 = v5 - 3;
    if (__OFADD__(v5 - 4, 1))
    {
      __break(1u);
      goto LABEL_19;
    }
    type metadata accessor for DataTypeDetailChartCell();
    if (swift_dynamicCastClass()) {
      break;
    }

    ++v5;
    if (v8 == v4) {
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v9 = (void *)dispatch thunk of DataTypeDetailChartCell.chartViewController.getter();

  if (!v9) {
    return 0;
  }
  self;
  uint64_t result = (id)swift_dynamicCastObjCClass();
  if (!result)
  {

    return 0;
  }
  return result;
}

uint64_t sub_1000873D0(uint64_t a1)
{
  sub_10008742C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10008742C()
{
  if (!qword_1001059C0)
  {
    sub_10001D3C4(255, &qword_1001059C8);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001059C0);
    }
  }
}

id sub_10008749C(void *a1)
{
  if (!a1) {
    return 0;
  }
  id result = [a1 collectionView];
  if (result)
  {
    uint64_t v2 = result;
    id v3 = [result visibleCells];

    sub_10001E254(0, &qword_100106A28);
    unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v4 >> 62)
    {
LABEL_25:
      swift_bridgeObjectRetain();
      id v5 = (id)_CocoaArrayWrapper.endIndex.getter();
      if (v5)
      {
LABEL_5:
        for (uint64_t i = 4; ; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0) {
            id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v7 = *(id *)(v4 + 8 * i);
          }
          uint64_t v8 = v7;
          id v9 = (id)(i - 3);
          if (__OFADD__(i - 4, 1))
          {
            __break(1u);
            goto LABEL_25;
          }
          type metadata accessor for DataTypeDetailChartCell();
          if (swift_dynamicCastClass()) {
            break;
          }

          if (v9 == v5)
          {
            swift_bridgeObjectRelease_n();
            return 0;
          }
        }
        swift_bridgeObjectRelease_n();
        uint64_t v10 = dispatch thunk of DataTypeDetailChartCell.chartViewController.getter();
        if (v10)
        {
          uint64_t v11 = (void *)v10;
          self;
          uint64_t v12 = swift_dynamicCastObjCClass();
          if (v12)
          {
            id v5 = (id)v12;
LABEL_21:

            return v5;
          }
        }
        uint64_t v13 = dispatch thunk of DataTypeDetailChartCell.chartViewController.getter();
        if (v13)
        {
          uint64_t v14 = (void *)v13;
          self;
          id v15 = (void *)swift_dynamicCastObjCClass();
          if (v15)
          {
            id v5 = [v15 chartController];

            goto LABEL_21;
          }
        }
        return 0;
      }
    }
    else
    {
      id v5 = *(id *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v5) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease_n();
    return v5;
  }
  __break(1u);
  return result;
}

void sub_1000876A8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1000876FC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1000876A8(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_100087768()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000877B0()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1(*(void *)(v0 + 32));
  }
  return result;
}

uint64_t sub_10008780C()
{
  sub_10008C2DC(0, (unint64_t *)&unk_100104880, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v1 = v0;
  sub_10003FEAC(v0, qword_100108CE0);
  sub_10003FE20(v1, (uint64_t)qword_100108CE0);
  return URL.init(string:)();
}

uint64_t MicaAnimationView.Animation.welcome.unsafeMutableAddressor()
{
  if (qword_1001040A0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for MicaAnimationView.Animation();

  return sub_10003FE20(v0, (uint64_t)static MicaAnimationView.Animation.welcome);
}

uint64_t sub_100087904()
{
  uint64_t v1 = OBJC_IVAR____TtC6Health21WelcomeViewController____lazy_storage___signalProvider;
  if (*(void *)(v0 + OBJC_IVAR____TtC6Health21WelcomeViewController____lazy_storage___signalProvider))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC6Health21WelcomeViewController____lazy_storage___signalProvider);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for HealthWelcomeFlowSignalProvider();
    swift_allocObject();
    uint64_t v2 = HealthWelcomeFlowSignalProvider.init()();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_100087980()
{
  sub_10002091C(0, (unint64_t *)&qword_100104C40, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for UserDefault);
  uint64_t v1 = v0;
  sub_10003FEAC(v0, qword_100107220);
  sub_10003FE20(v1, (uint64_t)qword_100107220);
  sub_10001E254(0, (unint64_t *)&unk_100106E80);
  static NSUserDefaults.healthAppShared.getter();
  return UserDefault.init(key:userDefaults:fallbackValue:isAppleInternalOnly:)();
}

id sub_100087A7C(uint64_t a1)
{
  uint64_t v53 = a1;
  uint64_t v2 = type metadata accessor for Locale();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v3 - 8);
  uint64_t v50 = type metadata accessor for PluginAdvertisableFeatureSourceContext.DeviceSource();
  uint64_t v4 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  int v51 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MicaAnimationView.Animation();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC6Health21WelcomeViewController_animationView;
  uint64_t v11 = qword_1001040A0;
  uint64_t v12 = v1;
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_10003FE20(v6, (uint64_t)static MicaAnimationView.Animation.welcome);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v13, v6);
  id v14 = objc_allocWithZone((Class)type metadata accessor for MicaAnimationView());
  *(void *)&v12[v10] = MicaAnimationView.init(animation:inset:scaleToFill:)();
  *(void *)&v12[OBJC_IVAR____TtC6Health21WelcomeViewController_cloudSyncBuddyAvailabilityProvider] = 0;
  id v15 = &v12[OBJC_IVAR____TtC6Health21WelcomeViewController_completionHandler];
  *id v15 = 0;
  v15[1] = 0;
  *(void *)&v12[OBJC_IVAR____TtC6Health21WelcomeViewController____lazy_storage___signalProvider] = 0;
  *(void *)&v12[OBJC_IVAR____TtC6Health21WelcomeViewController_statusPublisher] = 0;
  v12[OBJC_IVAR____TtC6Health21WelcomeViewController_didEnableCloudSync] = 0;
  id v16 = [objc_allocWithZone((Class)HKHealthStore) init];
  *(void *)&v12[OBJC_IVAR____TtC6Health21WelcomeViewController_healthStore] = v16;
  uint64_t v17 = type metadata accessor for CountryOracle();
  swift_allocObject();
  id v52 = v16;
  uint64_t v18 = CountryOracle.init(mobileCountryCodeManagerProvider:)();
  uint64_t v59 = v17;
  uint64_t v60 = (_UNKNOWN **)sub_10008C9C4(&qword_100107328, 255, (void (*)(uint64_t))&type metadata accessor for CountryOracle);
  v58[0] = v18;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v51, enum case for PluginAdvertisableFeatureSourceContext.DeviceSource.activePairedDevice(_:), v50);
  uint64_t v19 = type metadata accessor for HealthPluginAdvertisableFeatureManagerFactory();
  swift_allocObject();
  uint64_t v20 = HealthPluginAdvertisableFeatureManagerFactory.init(healthStore:countryProvider:activeDeviceSource:queue:)();
  uint64_t v21 = type metadata accessor for HealthAppNotificationManager();
  uint64_t v22 = HealthAppNotificationManager.__allocating_init()();
  *(void *)&v12[OBJC_IVAR____TtC6Health21WelcomeViewController_notificationManager] = v22;
  uint64_t v59 = v21;
  uint64_t v60 = &off_1000F6768;
  v58[0] = v22;
  uint64_t v56 = v19;
  uint64_t v57 = &protocol witness table for HealthPluginAdvertisableFeatureManagerFactory;
  *(void *)&long long v55 = v20;
  int v51 = (char *)v20;
  type metadata accessor for HealthNotificationsWelcomeViewModel();
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = sub_1000374D8((uint64_t)v58, v21);
  __chkstk_darwin(v24);
  id v26 = (uint64_t *)((char *)&v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  uint64_t v28 = *v26;
  *(void *)(v23 + 4sub_10004C8C4(0, 0) = v21;
  *(void *)(v23 + 48) = &off_1000F6768;
  *(void *)(v23 + 16) = v28;
  *(unsigned char *)(v23 + 96) = 0;
  *(void *)(v23 + 104) = 0;
  *(void *)(v23 + 112) = 0;
  sub_10001CD68(&v55, v23 + 56);
  swift_retain_n();
  swift_retain();
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v58);
  *(void *)&v12[OBJC_IVAR____TtC6Health21WelcomeViewController_healthNotificationViewModel] = v23;
  sub_10008C170(v53, (uint64_t)&v12[OBJC_IVAR____TtC6Health21WelcomeViewController_deepLinkCanceler]);

  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v29 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v31 = v30;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  uint64_t v32 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v34 = v33;
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v58[0] = v29;
  v58[1] = v31;
  v36._uint64_t countAndFlagsBits = 2570;
  v36._object = (void *)0xE200000000000000;
  String.append(_:)(v36);
  v37._uint64_t countAndFlagsBits = v32;
  v37._object = v34;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  NSString v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v39 = (objc_class *)type metadata accessor for WelcomeViewController();
  v54.receiver = v12;
  v54.super_class = v39;
  id v40 = [super initWithTitle:v35 detailText:v38 icon:0 contentLayout:1];

  id v41 = v40;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  id v42 = [self boldButton];
  [v42 addTarget:v41 action:"didTapNext:" forControlEvents:64];
  NSString v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v42 setTitle:v43 forState:0];

  id v44 = [v41 buttonTray];
  [v44 addButton:v42];

  sub_10002091C(0, (unint64_t *)&qword_100107330, (uint64_t)&type metadata for String, (uint64_t (*)(void, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_1000CC0F0;
  *(void *)(v45 + 32) = 0xD000000000000028;
  *(void *)(v45 + 4sub_10004C8C4(0, 0) = 0x80000001000D5C70;
  strcpy((char *)(v45 + 48), "ContinueButton");
  *(unsigned char *)(v45 + 63) = -18;
  id v46 = v42;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v48 = (id)HKUIJoinStringsForAutomationIdentifier();

  [v46 setAccessibilityIdentifier:v48];
  swift_release();
  swift_release();

  sub_10008C38C(v53, (uint64_t (*)(void))sub_10008C1D4);
  return v41;
}

void sub_10008832C()
{
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for WelcomeViewController();
  [super viewDidLoad];
  id v1 = [v0 view];
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setAccessibilityIdentifier:v3];

  sub_100088BF4(*(void **)&v0[OBJC_IVAR____TtC6Health21WelcomeViewController_animationView]);
  id v4 = [self sharedBehavior];
  if (!v4)
  {
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v5 = v4;
  unsigned int v6 = [v4 isiPad];

  if (v6) {
    OBWelcomeController.removeOBContentViewHeightConstraints()();
  }
}

void sub_100088498(void *a1, uint64_t a2, uint64_t a3, const char **a4, char a5, char a6)
{
  v17.receiver = a1;
  v17.super_class = (Class)type metadata accessor for WelcomeViewController();
  uint64_t v10 = *a4;
  id v11 = v17.receiver;
  [super v10:a3];
  id v12 = [self sharedBehavior];
  if (v12)
  {
    uint64_t v13 = v12;
    unsigned int v14 = [v12 isiPad];

    if (v14)
    {
      id v15 = [v11 navigationController];
      if (v15)
      {
        id v16 = v15;
        [v15 setNavigationBarHidden:a5 & 1 animated:a6 & 1];

        id v11 = v16;
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000885C8(void *a1, uint64_t a2, uint64_t a3, const char **a4, void (*a5)(id))
{
  v11.receiver = a1;
  v11.super_class = (Class)type metadata accessor for WelcomeViewController();
  uint64_t v8 = *a4;
  id v9 = v11.receiver;
  [super v8:a3];
  a5(v10);
}

void sub_100088640(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v23 = a1;
  uint64_t v24 = (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.SchedulerOptions;
  sub_10008C2DC(0, &qword_100107350, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.SchedulerOptions, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v23 - v5;
  sub_10008C644();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  objc_super v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008C7D4();
  uint64_t v25 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  [a1 showsBusyIndicator];
  sub_10001E254(0, &qword_1001073A0);
  id v26 = (id)static HKCloudSyncObserver.statusPublisher(for:)();
  sub_10008C6DC();
  sub_10008C9C4(&qword_100107380, 255, (void (*)(uint64_t))sub_10008C6DC);
  Publisher.first()();
  swift_release();
  sub_10001E254(0, (unint64_t *)&qword_100105730);
  id v26 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v6, 1, 1, v16);
  sub_10008C9C4((unint64_t *)&unk_100107390, 255, (void (*)(uint64_t))sub_10008C644);
  sub_10008C8A4();
  Publisher.receive<A>(on:options:)();
  sub_10008C90C((uint64_t)v6, &qword_100107350, v24);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v23;
  *(void *)(v18 + 16) = v23;
  *(void *)(v18 + 24) = v17;
  sub_10008C9C4(&qword_1001073A8, 255, (void (*)(uint64_t))sub_10008C7D4);
  id v20 = v19;
  uint64_t v21 = v25;
  uint64_t v22 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v21);
  *(void *)(v2 + OBJC_IVAR____TtC6Health21WelcomeViewController_statusPublisher) = v22;
  swift_release();
  LOWORD(v26) = 0;
  sub_10005561C();
  AnalyticsSubmitting.submit()();
}

void sub_100088A94(uint64_t a1, id a2)
{
  uint64_t v2 = *(void **)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  [a2 hidesBusyIndicator];
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    if (v3) {
      char v6 = 0;
    }
    else {
      char v6 = [v2 accountSupportsSecureContainer];
    }
    sub_100082268(v6);
    uint64_t v8 = v7;
    *(void *)&v7[qword_100107110 + 8] = &off_1000F7E08;
    swift_unknownObjectWeakAssign();
    id v9 = [v5 navigationController];
    if (v9)
    {
      uint64_t v10 = v9;
      [v9 pushViewController:v8 animated:1];
    }
  }
}

void sub_100088BF4(void *a1)
{
  id v3 = [v1 contentView];
  [v3 addSubview:a1];

  id v4 = [v1 contentView];
  uint64_t v5 = self;
  id v6 = [v5 systemBackgroundColor];
  [v4 setBackgroundColor:v6];

  id v7 = [v1 contentView];
  [v7 setClipsToBounds:1];

  id v8 = [v5 systemBackgroundColor];
  [a1 setBackgroundColor:v8];

  [a1 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v9 = self;
  sub_10002091C(0, (unint64_t *)&qword_1001057E0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(void, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1000CEBC0;
  id v11 = [a1 topAnchor];
  id v12 = [v1 contentView];
  id v13 = [v12 topAnchor];

  id v14 = [v11 constraintEqualToAnchor:v13];
  *(void *)(v10 + 32) = v14;
  id v15 = [a1 leadingAnchor];
  id v16 = [v1 contentView];
  id v17 = [v16 leadingAnchor];

  id v18 = [v15 constraintEqualToAnchor:v17];
  *(void *)(v10 + 4sub_10004C8C4(0, 0) = v18;
  id v19 = [a1 bottomAnchor];
  id v20 = [v1 contentView];
  id v21 = [v20 bottomAnchor];

  id v22 = [v19 constraintEqualToAnchor:v21];
  *(void *)(v10 + 48) = v22;
  id v23 = [a1 trailingAnchor];
  id v24 = [v1 contentView];
  id v25 = [v24 trailingAnchor];

  id v26 = [v23 constraintEqualToAnchor:v25];
  *(void *)(v10 + 56) = v26;
  specialized Array._endMutation()();
  sub_10001E254(0, &qword_100107088);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v9 activateConstraints:isa];
}

uint64_t sub_100088FCC(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [objc_allocWithZone((Class)_HKBehavior) init];
  id v5 = [v4 features];

  if (v5)
  {
    unsigned int v6 = [v5 stanley];

    if (v6
      && (id v7 = [objc_allocWithZone((Class)_HKBehavior) init],
          unsigned int v8 = [v7 isiPad],
          v7,
          v8))
    {
      objc_allocWithZone((Class)type metadata accessor for WelcomeiPadHealthKitSyncViewController());
      id v9 = a1;
      id v10 = v2;
      sub_10006F9A4(v9, (uint64_t)v2, (uint64_t)&off_1000F7DD0, 0);
    }
    else
    {
      objc_allocWithZone((Class)type metadata accessor for CloudSyncWelcomeViewController());
      id v11 = a1;
      id v12 = v2;
      sub_1000976B8(v11, (uint64_t)v2, (uint64_t)&off_1000F7DF8);
    }
    id v13 = [v2 navigationController];
    if (v13)
    {
      id v14 = v13;
      [v13 pushViewController:animated:];
    }
  }
  else
  {
    __break(1u);
  }
  return _objc_release_x2();
}

void sub_100089154()
{
  id v1 = [*(id *)&v0[OBJC_IVAR____TtC6Health21WelcomeViewController_healthStore] viewControllerFactory];
  id v4 = [v1 createBuddyViewControllerWithHealthDetailsLast:0];

  [v4 setDelegate:v0];
  id v2 = [v0 navigationController];
  if (v2)
  {
    id v3 = v2;
    [v2 pushViewController:v4 animated:1];
  }
}

void sub_10008921C()
{
  id v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [v1 resolvedHealthStore];
  if (v7)
  {
    unsigned int v8 = v7;
    id v9 = (objc_class *)type metadata accessor for CloudSyncStateObserver();
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v28 = 0;
    id v10 = objc_allocWithZone(v9);
    id v11 = v8;
    id v12 = (void *)CloudSyncStateObserver.init(healthStore:store:)();
    id v13 = objc_allocWithZone((Class)ACAccountStore);
    id v14 = v12;
    id v15 = [v13 init];
    type metadata accessor for CloudSyncBuddyAvailabilityProvider();
    swift_allocObject();
    id v16 = sub_10006DBA0((uint64_t)v14, (uint64_t)v15);
    *(void *)&v1[OBJC_IVAR____TtC6Health21WelcomeViewController_cloudSyncBuddyAvailabilityProvider] = v16;
    swift_retain();
    swift_release();
    uint64_t v17 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v25 = v11;
    sub_10006E670((uint64_t)v16, v17, v25);

    swift_release();
    swift_release();

    id v18 = v25;
  }
  else
  {
    static Logger.view.getter();
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      id v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)id v21 = 136315138;
      id v25 = v21 + 4;
      *(void *)&long long v26 = ObjectType;
      swift_getMetatypeMetadata();
      uint64_t v22 = String.init<A>(describing:)();
      *(void *)&long long v26 = sub_100018DA0(v22, v23, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "[%s]: Failed to resolve HKHealthStore", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100089154();
  }
}

void sub_100089564(char a1, uint64_t a2, void *a3)
{
  if ((a1 & 0xFE) == 2)
  {
LABEL_2:
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong) {
      return;
    }
    uint64_t v4 = (void *)Strong;
    sub_100089154();
    goto LABEL_10;
  }
  if ((a1 & 1) == 0)
  {
    id v5 = [objc_allocWithZone((Class)_HKBehavior) init];
    unsigned int v6 = [v5 isiPad];

    if (v6)
    {
      swift_beginAccess();
      uint64_t v7 = swift_unknownObjectWeakLoadStrong();
      if (!v7) {
        return;
      }
      uint64_t v4 = (void *)v7;
      sub_100089670(0, 0);
      goto LABEL_10;
    }
    goto LABEL_2;
  }
  swift_beginAccess();
  uint64_t v9 = swift_unknownObjectWeakLoadStrong();
  if (!v9) {
    return;
  }
  uint64_t v4 = (void *)v9;
  sub_100088FCC(a3);
LABEL_10:
}

uint64_t sub_100089670(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unsigned int v6 = (void *)swift_allocObject();
  uint64_t v6[2] = a1;
  v6[3] = a2;
  void v6[4] = v5;
  v6[5] = ObjectType;
  sub_10004CF94(a1);
  swift_retain();
  sub_10004D600((uint64_t)sub_10008CBC0, (uint64_t)v6);
  swift_release();

  return swift_release();
}

uint64_t sub_100089750(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  id v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E254(0, (unint64_t *)&qword_100105730);
  uint64_t v21 = static OS_dispatch_queue.main.getter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  *(unsigned char *)(v16 + 32) = a1;
  *(void *)(v16 + 4sub_10004C8C4(0, 0) = a4;
  *(void *)(v16 + 48) = a5;
  aBlock[4] = sub_10008C434;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = &unk_1000F7ED0;
  uint64_t v17 = _Block_copy(aBlock);
  sub_10004CF94(a2);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10008C9C4((unint64_t *)&qword_100105A00, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10008C2DC(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_10001EF54();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v18 = (void *)v21;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v22);
}

void sub_100089A68(void (*a1)(void), uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a4 + 16;
  static Logger.view.getter();
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v28 = v7;
    uint64_t v15 = v14;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v29 = v11;
    v32[0] = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    int v30 = a3;
    uint64_t v17 = _typeName(_:qualified:)();
    uint64_t v31 = sub_100018DA0(v17, v18, v32);
    LOBYTE(a3) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 1024;
    LODWORD(v31) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%s] [TCC] Presenting notification authorization onboarding: %{BOOL}d", (uint8_t *)v15, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v28);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  if (a3)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong) {
      goto LABEL_12;
    }
    uint64_t v20 = (void *)Strong;
    uint64_t v21 = *(void *)(Strong + OBJC_IVAR____TtC6Health21WelcomeViewController_healthNotificationViewModel);
    uint64_t v22 = *(void *)(Strong + OBJC_IVAR____TtC6Health21WelcomeViewController_notificationManager);
    objc_allocWithZone((Class)type metadata accessor for HealthNotificationsWelcomeViewController());
    swift_retain();
    swift_retain();
    uint64_t v23 = sub_1000A0230(v21, v22);
    *(void *)&v23[qword_100107D58 + 8] = &off_1000F7DC0;
    swift_unknownObjectWeakAssign();
    id v24 = [v20 navigationController];
    if (v24)
    {
      id v25 = v24;
      [v24 pushViewController:v23 animated:1];
    }
    else
    {
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v26 = swift_unknownObjectWeakLoadStrong();
    if (!v26) {
      goto LABEL_12;
    }
    uint64_t v23 = (char *)v26;
    sub_100089DA8();
  }

LABEL_12:
  if (a1) {
    a1();
  }
}

uint64_t sub_100089DA8()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008C2DC(0, &qword_100104D78, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)aBlock - v11;
  os_log_type_t v13 = self;
  [v13 setHasCompletedBuddyWithVersion:kHKHAKeyCurrentBuddyVersion];
  sub_10001E254(0, (unint64_t *)&unk_100106E80);
  uint64_t v14 = (void *)static NSUserDefaults.healthAppShared.getter();
  [v14 setBool:1 forKey:kHKHealthShowHealthDetailsTile];

  [v13 setForceBuddy:0];
  sub_100087904();
  Date.init()();
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 0, 1, v15);
  dispatch thunk of HealthWelcomeFlowSignalProvider.healthWelcomeFlowCompletionDate.setter();
  swift_release();
  sub_100087904();
  dispatch thunk of HealthWelcomeFlowSignalProvider.shouldShowHealthWelcomeFlowOnNextLaunch.setter();
  swift_release();
  sub_10001E254(0, (unint64_t *)&qword_100105730);
  uint64_t v16 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v1;
  aBlock[4] = sub_10008C4CC;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = &unk_1000F7F98;
  unint64_t v18 = _Block_copy(aBlock);
  id v19 = v1;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10008C9C4((unint64_t *)&qword_100105A00, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10008C2DC(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_10001EF54();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_10008A204(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  v5[4] = sub_10008C4D4;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  uint64_t v5[2] = sub_100005388;
  v5[3] = &unk_1000F7FE8;
  uint64_t v3 = _Block_copy(v5);
  id v4 = a1;
  swift_release();
  [v4 dismissViewControllerAnimated:1 completion:v3];
  _Block_release(v3);
}

uint64_t sub_10008A2E4(uint64_t result)
{
  id v1 = *(void (**)(uint64_t))(result + OBJC_IVAR____TtC6Health21WelcomeViewController_completionHandler);
  if (v1)
  {
    uint64_t v2 = swift_retain();
    v1(v2);
    return sub_100019AF4((uint64_t)v1);
  }
  return result;
}

id sub_10008A37C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WelcomeViewController();
  return [super dealloc];
}

uint64_t sub_10008A484(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  sub_10005561C();
  AnalyticsSubmitting.submit()();
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v6[2] = a1;
  v6[3] = a2;
  void v6[4] = v5;
  v6[5] = ObjectType;
  swift_retain();
  swift_retain();
  sub_10004D600((uint64_t)sub_10008CBC0, (uint64_t)v6);
  swift_release();
  return swift_release();
}

void sub_10008A608(void *a1)
{
  swift_getObjectType();
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [a1 profileIdentifier];
  id v7 = [v6 type];

  if (v7 == (id)1)
  {
    static Logger.view.getter();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      uint64_t v11 = _typeName(_:qualified:)();
      uint64_t v16 = sub_100018DA0(v11, v12, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%s] Sending notification that the primary profile name was updated", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    static NSNotificationName.primaryProfileNameWasUpdated.getter();
    id v13 = objc_allocWithZone((Class)type metadata accessor for PostNotificationOperation());
    uint64_t v14 = (void *)PostNotificationOperation.init(name:userInfo:)();
    sub_10001E254(0, (unint64_t *)&qword_100105858);
    uint64_t v15 = (void *)static NSOperationQueue.userInitiated.getter();
    [v15 addOperation:v14];
  }
}

void sub_10008A8F0(char a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter();
  os_log_type_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 67109120;
    v25[3] = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "CloudSync buddy continued with enable cloud sync: %{BOOL}d", v11, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v2[OBJC_IVAR____TtC6Health21WelcomeViewController_didEnableCloudSync] = a1 & 1;
  id v12 = [objc_allocWithZone((Class)_HKBehavior) init];
  id v13 = [v12 features];

  if (v13)
  {
    unsigned int v14 = [v13 stanley];

    if (v14
      && (id v15 = [objc_allocWithZone((Class)_HKBehavior) init],
          unsigned int v16 = [v15 isiPad],
          v15,
          v16))
    {
      if (a1)
      {
        uint64_t v17 = *(void **)&v2[OBJC_IVAR____TtC6Health21WelcomeViewController_healthStore];
        id v18 = objc_allocWithZone((Class)type metadata accessor for CloudSyncDownloadingViewController());
        sub_10009E894(v17);
        uint64_t v20 = v19;
        *(void *)&v19[qword_100107CE8 + 8] = &off_1000F7DE8;
        swift_unknownObjectWeakAssign();
        id v21 = [v2 navigationController];
        if (v21)
        {
          uint64_t v22 = v21;
          [v21 pushViewController:v20 animated:1];
        }
      }
      else
      {
        uint64_t v23 = swift_allocObject();
        swift_unknownObjectWeakInit();
        id v24 = (void *)swift_allocObject();
        v24[2] = 0;
        v24[3] = 0;
        v24[4] = v23;
        v24[5] = ObjectType;
        swift_retain();
        sub_10004D600((uint64_t)sub_10008CBC0, (uint64_t)v24);
        swift_release();
        swift_release();
      }
    }
    else
    {
      sub_100089154();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10008AC30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v75 = (char *)a1;
  uint64_t ObjectType = swift_getObjectType();
  sub_10008C23C();
  uint64_t v6 = v5;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008C2DC(0, (unint64_t *)&qword_100107320, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  id v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unsigned int v14 = (char *)&v73 - v13;
  uint64_t v15 = type metadata accessor for CloudSyncRestoreState();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v77 = v15;
  uint64_t v78 = v16;
  uint64_t v17 = __chkstk_darwin(v15);
  id v19 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  BOOL v76 = (char *)&v73 - v20;
  sub_10002091C(0, (unint64_t *)&qword_100104C40, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for UserDefault);
  uint64_t v22 = v21;
  uint64_t v23 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  id v25 = (char *)&v73 - v24;
  if (qword_100104098 != -1) {
    swift_once();
  }
  uint64_t v26 = sub_10003FE20(v22, (uint64_t)qword_100107220);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, v26, v22);
  UserDefault.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  if (v80 != 1) {
    goto LABEL_6;
  }
  sub_100008B84(a2, (uint64_t)v14);
  uint64_t v27 = v77;
  uint64_t v28 = v78;
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
  if (v29(v14, 1, v77) == 1)
  {
    sub_10008C90C((uint64_t)v14, (unint64_t *)&qword_100107320, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
LABEL_6:
    uint64_t v30 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v31 = (void *)swift_allocObject();
    v31[2] = 0;
    v31[3] = 0;
    uint64_t v32 = ObjectType;
    v31[4] = v30;
    v31[5] = v32;
    swift_retain();
    sub_10004D600((uint64_t)sub_10008C37C, (uint64_t)v31);
    swift_release();
    swift_release();
    return;
  }
  uint64_t v74 = v3;
  id v33 = v76;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v76, v14, v27);
  uint64_t v34 = v27;
  NSString v35 = &v8[*(int *)(v6 + 48)];
  sub_100008B84((uint64_t)v75, (uint64_t)v8);
  Swift::String v36 = v33;
  Swift::String v37 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v37(v35, v36, v34);
  if (v29(v8, 1, v34) != 1)
  {
    uint64_t v75 = v8;
    sub_100008B84((uint64_t)v8, (uint64_t)v12);
    id v46 = *(uint64_t (**)(char *, uint64_t))(v28 + 88);
    int v47 = v46(v12, v34);
    int v48 = enum case for CloudSyncRestoreState.activelyRestoring(_:);
    uint64_t v49 = v74;
    if (v47 == enum case for CloudSyncRestoreState.activelyRestoring(_:))
    {
      int v50 = v46(v35, v34);
      int v51 = v49;
      uint64_t v8 = v75;
      if (v50 == enum case for CloudSyncRestoreState.failed(_:)
        || v50 == enum case for CloudSyncRestoreState.completed(_:))
      {
        sub_10008C90C((uint64_t)v75, (unint64_t *)&qword_100107320, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
        id v52 = v76;
        v37(v19, v76, v34);
        id v53 = objc_allocWithZone((Class)type metadata accessor for CloudSyncDownloadingStateViewController());
        objc_super v54 = (char *)sub_1000715B4((uint64_t)v19);
        *(void *)&v54[qword_100106788 + 8] = &off_1000F7DE8;
        swift_unknownObjectWeakAssign();
        id v55 = [v51 navigationController];
        if (v55)
        {
          uint64_t v56 = v55;
          [v55 pushViewController:v54 animated:1];

          (*(void (**)(char *, uint64_t))(v78 + 8))(v52, v34);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v78 + 8))(v52, v34);
        }
        return;
      }
      goto LABEL_30;
    }
    if (v47 != enum case for CloudSyncRestoreState.failed(_:)
      && v47 != enum case for CloudSyncRestoreState.transientFailure(_:))
    {
      uint64_t v34 = v77;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v12, v77);
      uint64_t v8 = v75;
      goto LABEL_30;
    }
    uint64_t v34 = v77;
    int v57 = v46(v35, v77);
    uint64_t v58 = v49;
    uint64_t v8 = v75;
    if (v57 != v48)
    {
LABEL_30:
      uint64_t v70 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v71 = (void *)swift_allocObject();
      v71[2] = 0;
      v71[3] = 0;
      uint64_t v72 = ObjectType;
      v71[4] = v70;
      v71[5] = v72;
      swift_retain();
      sub_10004D600((uint64_t)sub_10008CBC0, (uint64_t)v71);
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v76, v34);
      sub_10008C38C((uint64_t)v8, (uint64_t (*)(void))sub_10008C23C);
      return;
    }
    sub_10008C90C((uint64_t)v75, (unint64_t *)&qword_100107320, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
    id v59 = [v58 navigationController];
    if (v59
      && (uint64_t v60 = v59,
          id v61 = [v59 previousViewController],
          v60,
          v61)
      && (type metadata accessor for CloudSyncDownloadingViewController(),
          uint64_t v62 = swift_dynamicCastClass(),
          v61,
          v62))
    {
      id v63 = [v58 navigationController];
      if (!v63)
      {
LABEL_28:
        (*(void (**)(char *, uint64_t))(v78 + 8))(v76, v77);
        return;
      }
      uint64_t v64 = v63;
    }
    else
    {
      uint64_t v65 = *(void **)&v58[OBJC_IVAR____TtC6Health21WelcomeViewController_healthStore];
      id v66 = objc_allocWithZone((Class)type metadata accessor for CloudSyncDownloadingViewController());
      sub_10009E894(v65);
      uint64_t v64 = v67;
      *(void *)&v67[qword_100107CE8 + 8] = &off_1000F7DE8;
      swift_unknownObjectWeakAssign();
      id v68 = [v58 navigationController];
      if (v68)
      {
        uint64_t v69 = v68;
        [v68 pushViewController:v64 animated:1];
      }
    }

    goto LABEL_28;
  }
  int v38 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v35, v34);
  uint64_t v39 = v74;
  if (v38 != enum case for CloudSyncRestoreState.activelyRestoring(_:)) {
    goto LABEL_30;
  }
  id v40 = *(void **)&v74[OBJC_IVAR____TtC6Health21WelcomeViewController_healthStore];
  id v41 = objc_allocWithZone((Class)type metadata accessor for CloudSyncDownloadingViewController());
  sub_10009E894(v40);
  NSString v43 = v42;
  *(void *)&v42[qword_100107CE8 + 8] = &off_1000F7DE8;
  swift_unknownObjectWeakAssign();
  id v44 = [v39 navigationController];
  if (v44)
  {
    uint64_t v45 = v44;
    [v44 pushViewController:v43 animated:1];
  }
  (*(void (**)(char *, uint64_t))(v78 + 8))(v76, v77);
  sub_10008C90C((uint64_t)v8, (unint64_t *)&qword_100107320, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
}

void sub_10008B5B0(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v65 = type metadata accessor for Logger();
  uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v73 = (char *)v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v76 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v74 = (char *)v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AdvertisableFeaturePostCommitWorkItem();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v58 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  id v66 = (char *)v54 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v82 = (char *)v54 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v54 - v14;
  uint64_t v16 = *(void **)&v1[OBJC_IVAR____TtC6Health21WelcomeViewController_healthStore];
  type metadata accessor for AdvertisableFeaturePostCommitWorkItemViewControllerFactory();
  swift_allocObject();
  id v17 = v16;
  uint64_t v61 = AdvertisableFeaturePostCommitWorkItemViewControllerFactory.init(healthStore:)();
  uint64_t v18 = *(void *)(a1 + 16);
  if (!v18) {
    goto LABEL_19;
  }
  id v55 = v1;
  uint64_t v71 = &v1[OBJC_IVAR____TtC6Health21WelcomeViewController_deepLinkCanceler];
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v19 = v7 + 16;
  uint64_t v21 = (char *)(a1 + ((*(unsigned __int8 *)(v19 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 64)));
  uint64_t v22 = *(void *)(v19 + 56);
  char v80 = (uint64_t (**)(char *, uint64_t))(v19 + 72);
  uint64_t v81 = v22;
  uint64_t v78 = (void (**)(char *, uint64_t))(v19 - 8);
  int v79 = enum case for AdvertisableFeaturePostCommitWorkItem.cancelPendingHealthAppDeepLinkIfPresent(_:);
  uint64_t v64 = (void (**)(char *, uint64_t))((char *)v77 + 8);
  uint64_t v69 = (void (**)(char *, char *, uint64_t))(v76 + 32);
  uint64_t v70 = (void (**)(char *, uint64_t))(v19 + 80);
  id v68 = (void (**)(char *, uint64_t))(v76 + 8);
  v54[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v76 = 0;
  uint64_t v60 = 0;
  *(void *)&long long v23 = 136315394;
  long long v57 = v23;
  uint64_t v56 = (char *)&type metadata for Any + 8;
  uint64_t v24 = v73;
  id v25 = v74;
  uint64_t v72 = v4;
  uint64_t v26 = v19;
  uint64_t v27 = v20;
  uint64_t v75 = v26;
  uint64_t v77 = v20;
  v20(v15, v21, v6);
  while (1)
  {
    uint64_t v31 = v82;
    v27(v82, v15, v6);
    int v32 = (*v80)(v31, v6);
    if (v32 == v79)
    {
      id v33 = v82;
      (*v70)(v82, v6);
      (*v69)(v25, v33, v4);
      sub_10008C170((uint64_t)v71, (uint64_t)&v83);
      uint64_t v34 = v84;
      if (v84)
      {
        uint64_t v35 = v85;
        sub_1000190DC(&v83, v84);
        Swift::String v36 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 8);
        uint64_t v37 = v35;
        uint64_t v24 = v73;
        v36(v25, v34, v37);
        uint64_t v26 = v75;
        (*v68)(v25, v4);
        (*v78)(v15, v6);
        _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)&v83);
      }
      else
      {
        (*v68)(v25, v4);
        (*v78)(v15, v6);
        sub_10008C38C((uint64_t)&v83, (uint64_t (*)(void))sub_10008C1D4);
      }
      uint64_t v27 = v77;
    }
    else
    {
      if (v76)
      {
        static Logger.advertisableFeatures.getter();
        int v38 = v66;
        v27(v66, v15, v6);
        uint64_t v39 = v26;
        id v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.fault.getter();
        int v67 = v41;
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          uint64_t v83 = v63;
          *(_DWORD *)uint64_t v42 = v57;
          uint64_t v43 = _typeName(_:qualified:)();
          *(void *)(v42 + 4) = sub_100018DA0(v43, v44, &v83);
          swift_bridgeObjectRelease();
          *(_WORD *)(v42 + 12) = 2080;
          v77(v58, v38, v6);
          uint64_t v45 = String.init<A>(describing:)();
          *(void *)(v42 + 14) = sub_100018DA0(v45, v46, &v83);
          swift_bridgeObjectRelease();
          uint64_t v62 = v40;
          uint64_t v30 = *v78;
          uint64_t v27 = v77;
          (*v78)(v38, v6);
          _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v67, "[%s] Attempted to make view controller for %s but no already created a different view controller", (uint8_t *)v42, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v24 = v73;
          swift_slowDealloc();

          (*v64)(v24, v65);
          v30(v15, v6);
          uint64_t v26 = v75;
        }
        else
        {

          uint64_t v30 = *v78;
          (*v78)(v38, v6);
          (*v64)(v24, v65);
          v30(v15, v6);
          uint64_t v26 = v39;
        }
      }
      else
      {
        uint64_t v28 = dispatch thunk of AdvertisableFeaturePostCommitWorkItemViewControllerFactory.makeViewController(for:)();
        uint64_t v26 = v75;
        uint64_t v76 = v28;
        uint64_t v60 = v29;
        uint64_t v30 = *v78;
        (*v78)(v15, v6);
      }
      v30(v82, v6);
      uint64_t v4 = v72;
      id v25 = v74;
    }
    v21 += v81;
    if (!--v18) {
      break;
    }
    v27(v15, v21, v6);
  }
  swift_bridgeObjectRelease();
  int v47 = v55;
  int v48 = (void *)v76;
  if (v76)
  {
    swift_getObjectType();
    sub_10008C9C4(&qword_100107310, v49, (void (*)(uint64_t))type metadata accessor for WelcomeViewController);
    id v50 = v47;
    id v51 = v48;
    dispatch thunk of AdvertisableFeaturePostCommitWorkItemViewController.navigationDelegate.setter();
    id v52 = [v50 navigationController];
    if (v52)
    {
      id v53 = v52;
      [v52 pushViewController:v51 animated:1];
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
LABEL_19:
    sub_100089DA8();
    swift_release();
  }
}

id sub_10008BE58()
{
  uint64_t v0 = type metadata accessor for MicaAnimationView.Animation();
  sub_10003FEAC(v0, static MicaAnimationView.Animation.welcome);
  sub_10003FE20(v0, (uint64_t)static MicaAnimationView.Animation.welcome);
  return sub_10008BEA4();
}

id sub_10008BEA4()
{
  uint64_t v0 = type metadata accessor for MicaAnimationView.Animation.AnimationStateWithDuration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (_OWORD *)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  id result = [self sharedBehavior];
  if (result)
  {
    uint64_t v5 = result;
    [result isiPad];

    type metadata accessor for WelcomeViewController();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v7 = [self bundleForClass:ObjCClassFromMetadata];
    _OWORD *v3 = xmmword_1000CECC0;
    (*(void (**)(_OWORD *, void, uint64_t))(v1 + 104))(v3, enum case for MicaAnimationView.Animation.AnimationStateWithDuration.one(_:), v0);
    return (id)MicaAnimationView.Animation.init(name:bundle:supportsDarkMode:supportsRightToLeft:supportsNumberingSystems:supportsPad:maxStateWithDurations:maxLoopCount:initialDelay:restartLoopDuration:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static MicaAnimationView.Animation.welcome.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1001040A0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for MicaAnimationView.Animation();
  uint64_t v3 = sub_10003FE20(v2, (uint64_t)static MicaAnimationView.Animation.welcome);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t type metadata accessor for WelcomeViewController()
{
  return self;
}

id sub_10008C144()
{
  uint64_t v0 = (void *)HKPreferredRegulatoryDomainProvider();

  return v0;
}

uint64_t sub_10008C170(uint64_t a1, uint64_t a2)
{
  sub_10008C1D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10008C1D4()
{
  if (!qword_100106EA8)
  {
    sub_10001D3C4(255, (unint64_t *)&qword_100106EB0);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100106EA8);
    }
  }
}

void sub_10008C23C()
{
  if (!qword_100107318)
  {
    sub_10008C2DC(255, (unint64_t *)&qword_100107320, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    type metadata accessor for CloudSyncRestoreState();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100107318);
    }
  }
}

void sub_10008C2DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_10008C340()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008C37C(char a1)
{
  return sub_100089750(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10008C38C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10008C3EC()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10008C434()
{
  sub_100089A68(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10008C448()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008C480()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10008C494()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10008C4CC()
{
  sub_10008A204(*(void **)(v0 + 16));
}

uint64_t sub_10008C4D4()
{
  return sub_10008A2E4(*(void *)(v0 + 16));
}

uint64_t sub_10008C4E0()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10008C528(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10008C170(a2, (uint64_t)v12);
  id v7 = objc_allocWithZone((Class)type metadata accessor for WelcomeViewController());
  unint64_t v8 = (char *)sub_100087A7C((uint64_t)v12);
  uint64_t v9 = (uint64_t *)&v8[OBJC_IVAR____TtC6Health21WelcomeViewController_completionHandler];
  uint64_t v10 = *(void *)&v8[OBJC_IVAR____TtC6Health21WelcomeViewController_completionHandler];
  *uint64_t v9 = a3;
  v9[1] = a4;
  sub_10004CF94(a3);
  sub_100019AF4(v10);
  id v11 = [objc_allocWithZone((Class)OBNavigationController) initWithRootViewController:v8];
  [v11 setModalInPresentation:1];
  [v11 setModalPresentationStyle:2];
  [a1 presentViewController:v11 animated:1 completion:0];
  v12[0] = 1792;
  sub_10005561C();
  AnalyticsSubmitting.submit()();
}

void sub_10008C644()
{
  if (!qword_100107358)
  {
    sub_10008C6DC();
    sub_10008C9C4(&qword_100107380, 255, (void (*)(uint64_t))sub_10008C6DC);
    unint64_t v0 = type metadata accessor for Publishers.First();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107358);
    }
  }
}

void sub_10008C6DC()
{
  if (!qword_100107360)
  {
    sub_10008C744();
    unint64_t v0 = type metadata accessor for AnyPublisher();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107360);
    }
  }
}

void sub_10008C744()
{
  if (!qword_100107368)
  {
    sub_10001E254(255, (unint64_t *)&unk_100107370);
    sub_10001D3C4(255, (unint64_t *)&qword_100104178);
    unint64_t v0 = type metadata accessor for Result();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107368);
    }
  }
}

void sub_10008C7D4()
{
  if (!qword_100107388)
  {
    sub_10008C644();
    sub_10001E254(255, (unint64_t *)&qword_100105730);
    sub_10008C9C4((unint64_t *)&unk_100107390, 255, (void (*)(uint64_t))sub_10008C644);
    sub_10008C8A4();
    unint64_t v0 = type metadata accessor for Publishers.ReceiveOn();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107388);
    }
  }
}

unint64_t sub_10008C8A4()
{
  unint64_t result = qword_100104AF8;
  if (!qword_100104AF8)
  {
    sub_10001E254(255, (unint64_t *)&qword_100105730);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100104AF8);
  }
  return result;
}

uint64_t sub_10008C90C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_10008C2DC(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_10008C97C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10008C9BC(uint64_t a1)
{
  sub_100088A94(a1, *(id *)(v1 + 16));
}

uint64_t sub_10008C9C4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10008CA0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MicaAnimationView.Animation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC6Health21WelcomeViewController_animationView;
  if (qword_1001040A0 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_10003FE20(v2, (uint64_t)static MicaAnimationView.Animation.welcome);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  id v8 = objc_allocWithZone((Class)type metadata accessor for MicaAnimationView());
  *(void *)&v1[v6] = MicaAnimationView.init(animation:inset:scaleToFill:)();
  *(void *)&v1[OBJC_IVAR____TtC6Health21WelcomeViewController_cloudSyncBuddyAvailabilityProvider] = 0;
  uint64_t v9 = &v1[OBJC_IVAR____TtC6Health21WelcomeViewController_completionHandler];
  *uint64_t v9 = 0;
  v9[1] = 0;
  *(void *)&v1[OBJC_IVAR____TtC6Health21WelcomeViewController____lazy_storage___signalProvider] = 0;
  *(void *)&v1[OBJC_IVAR____TtC6Health21WelcomeViewController_statusPublisher] = 0;
  v1[OBJC_IVAR____TtC6Health21WelcomeViewController_didEnableCloudSync] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for ProfileDataSource()
{
  uint64_t result = qword_1001073B0;
  if (!qword_1001073B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10008CC24()
{
  return swift_initClassMetadata2();
}

void sub_10008CC64(void *a1, char a2)
{
  sub_10001C21C(0, (unint64_t *)&unk_100104880, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v27[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v27[-1] - v8;
  if (a2)
  {
    if (a2 == 1)
    {
      URL.init(string:)();
      id v10 = [self defaultWorkspace];
      if (v10)
      {
        id v11 = v10;
        sub_100070F38((uint64_t)v9, (uint64_t)v7);
        uint64_t v12 = type metadata accessor for URL();
        uint64_t v13 = *(void *)(v12 - 8);
        uint64_t v15 = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12) != 1)
        {
          URL._bridgeToObjectiveC()(v14);
          uint64_t v15 = v16;
          (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v12);
        }
        sub_1000939E8((uint64_t)_swiftEmptyArrayStorage);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v11 openSensitiveURL:v15 withOptions:isa];
      }
      sub_100028AF8((uint64_t)v9);
    }
    else
    {
      [objc_allocWithZone((Class)HKHealthStore) init];
      id v23 = objc_allocWithZone((Class)type metadata accessor for HealthDetailsViewController());
      uint64_t v24 = (void *)HealthDetailsViewController.init(healthStore:inEditMode:)();
      id v26 = [objc_allocWithZone((Class)HKModalNavigationController) initWithRootViewController:v24];
      [a1 presentViewController:v26 animated:1 completion:0];

      id v25 = v26;
    }
  }
  else
  {
    id v18 = [objc_allocWithZone((Class)HKHealthStore) init];
    uint64_t v19 = type metadata accessor for PinnedContentManager();
    id v20 = v18;
    uint64_t v21 = PinnedContentManager.__allocating_init(healthStore:domain:)();
    type metadata accessor for ProfileViewController();
    uint64_t v27[3] = v19;
    v27[4] = &protocol witness table for PinnedContentManager;
    v27[0] = v21;
    swift_retain();
    uint64_t v22 = (void *)static ProfileViewController.makeProfileNavigationController(healthStore:pinnedContentManager:configurator:)();
    _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v27);
    [a1 presentViewController:v22 animated:1 completion:0];

    swift_release();
  }
}

uint64_t sub_10008CFF0()
{
  uint64_t v51 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v0 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  id v50 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C21C(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2 - 8);
  uint64_t v49 = (char *)&v34 - v3;
  uint64_t v48 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v4 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  int v47 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for ContentConfigurationItem();
  uint64_t v6 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  id v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C21C(0, &qword_100104858, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v12 = *(void *)(type metadata accessor for ArrayDataSourceSection() - 8);
  unint64_t v34 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1000CBFD0;
  uint64_t v58 = _swiftEmptyArrayStorage;
  sub_1000964E4(0, 3, 0);
  id v45 = self;
  uint64_t v13 = 0;
  id v52 = (void (**)(char *, uint64_t))(v9 + 8);
  unint64_t v44 = (void (**)(unsigned char *, void, uint64_t))(v4 + 104);
  unsigned int v43 = enum case for CellDeselectionBehavior.deselectOnDidSelect(_:);
  uint64_t v42 = (void (**)(char *, void, uint64_t))(v0 + 104);
  os_log_type_t v41 = (void (**)(uint64_t *, char *, uint64_t))(v6 + 16);
  unsigned int v40 = enum case for SectionedDataSourceContainerViewType.collectionView(_:);
  uint64_t v39 = (void (**)(char *, uint64_t))(v6 + 8);
  unint64_t v38 = 0x80000001000D5E20;
  unint64_t v37 = 0x80000001000D5E00;
  do
  {
    char v14 = *((unsigned char *)&off_1000F4850 + v13 + 32);
    *(unsigned char *)(swift_allocObject() + 16) = v14;
    UUID.init()();
    UUID.uuidString.getter();
    Swift::String v36 = *v52;
    v36(v11, v53);
    uint64_t v56 = type metadata accessor for UIListContentConfiguration();
    long long v57 = &protocol witness table for UIListContentConfiguration;
    sub_100004F38((uint64_t *)&v55);
    static UIListContentConfiguration.cell()();
    swift_bridgeObjectRetain();
    UIListContentConfiguration.text.setter();
    id v15 = [v45 tintColor];
    uint64_t v16 = (void (*)(char *, void))UIListContentConfiguration.textProperties.modify();
    UIListContentConfiguration.TextProperties.color.setter();
    v16(v54, 0);
    id v18 = v47;
    uint64_t v17 = v48;
    *int v47 = 1;
    (*v44)(v18, v43, v17);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v19 = type metadata accessor for UIBackgroundConfiguration();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v49, 1, 1, v19);
    (*v42)(v50, v40, v51);
    ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();
    swift_release();
    id v20 = v58;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000964E4(0, v20[2] + 1, 1);
      id v20 = v58;
    }
    unint64_t v22 = v20[2];
    unint64_t v21 = v20[3];
    if (v22 >= v21 >> 1) {
      sub_1000964E4(v21 > 1, v22 + 1, 1);
    }
    ++v13;
    uint64_t v23 = v46;
    uint64_t v56 = v46;
    long long v57 = (void *)sub_10008DA34(&qword_100104870, (void (*)(uint64_t))&type metadata accessor for ContentConfigurationItem);
    uint64_t v24 = sub_100004F38((uint64_t *)&v55);
    (*v41)(v24, v8, v23);
    id v25 = v58;
    void v58[2] = v22 + 1;
    sub_10001CD68(&v55, (uint64_t)&v25[5 * v22 + 4]);
    (*v39)(v8, v23);
  }
  while (v13 != 3);
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v26 = v53;
  uint64_t v27 = v36;
  v36(v11, v53);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)();
  *(void *)&long long v55 = 0x3C53447961727241;
  *((void *)&v55 + 1) = 0xE800000000000000;
  UUID.init()();
  uint64_t v28 = UUID.uuidString.getter();
  uint64_t v30 = v29;
  v27(v11, v26);
  v31._uint64_t countAndFlagsBits = v28;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 62;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  return ArrayDataSource.init(arrangedSections:identifier:)();
}

void sub_10008D850()
{
}

void sub_10008D86C()
{
}

void sub_10008D888()
{
}

uint64_t sub_10008D8B4()
{
  return type metadata accessor for ProfileDataSource();
}

unint64_t sub_10008D8BC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002BFF4(a1);
}

uint64_t sub_10008D938(uint64_t a1, uint64_t a2)
{
  return sub_10002B8D0(a1, a2);
}

uint64_t sub_10008D998(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10008DA34(&qword_100107400, (void (*)(uint64_t))type metadata accessor for ProfileDataSource);
  uint64_t result = sub_10008DA34(&qword_100107408, (void (*)(uint64_t))type metadata accessor for ProfileDataSource);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10008DA1C()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_10008DA2C(void *a1)
{
  sub_10008CC64(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_10008DA34(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for InternalSettingsAllDataTypeDetailViewsDataSource()
{
  uint64_t result = qword_100107410;
  if (!qword_100107410) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10008DAC8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10008DB08(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v20 = a2;
  uint64_t v21 = a3;
  uint64_t v19 = type metadata accessor for ContentConfigurationItem();
  uint64_t v6 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    if (!v9) {
      return (uint64_t)v10;
    }
    uint64_t v23 = _swiftEmptyArrayStorage;
    uint64_t result = sub_100096494(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0) {
      break;
    }
    uint64_t v12 = 0;
    uint64_t v10 = v23;
    uint64_t v17 = v6 + 32;
    unint64_t v18 = a1 & 0xC000000000000001;
    while (v9 != v12)
    {
      if (v18) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(a1 + 8 * v12 + 32);
      }
      char v14 = v13;
      unint64_t v22 = v13;
      sub_10008EC9C(&v22, v20, v21, (uint64_t)v8);
      if (v4)
      {
        swift_release();

        return (uint64_t)v10;
      }
      uint64_t v4 = 0;

      uint64_t v23 = v10;
      unint64_t v16 = v10[2];
      unint64_t v15 = v10[3];
      if (v16 >= v15 >> 1)
      {
        sub_100096494(v15 > 1, v16 + 1, 1);
        uint64_t v10 = v23;
      }
      ++v12;
      void v10[2] = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v16, v8, v19);
      if (v9 == v12) {
        return (uint64_t)v10;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_10008DD38()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v55 = *(void *)(v2 - 8);
  uint64_t v56 = v2;
  __chkstk_darwin(v2);
  objc_super v54 = (char *)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C280(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v4 - 8);
  uint64_t v53 = (char *)v42 - v5;
  uint64_t v51 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v47 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v46 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C280(0, &qword_100104AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v42 - v8;
  uint64_t v45 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions();
  uint64_t v44 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  id v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UICellAccessory.DisplayedState();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v48 = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for ContentConfigurationItem();
  uint64_t v52 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v58 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v1;
  UUID.init()();
  v42[2] = UUID.uuidString.getter();
  v42[1] = v21;
  unint64_t v22 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v49 = v17 + 8;
  id v50 = v22;
  v22(v19, v16);
  v61[3] = type metadata accessor for UIListContentConfiguration();
  v61[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
  sub_100004F38(v61);
  static UIListContentConfiguration.cell()();
  UIListContentConfiguration.text.setter();
  id v23 = [self blackColor];
  uint64_t v24 = (void (*)(char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v24(v60, 0);
  sub_10001C280(0, &qword_100104AC0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for UICellAccessory();
  uint64_t v25 = swift_allocObject();
  long long v57 = xmmword_1000CBFD0;
  *(_OWORD *)(v25 + 16) = xmmword_1000CBFD0;
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for UICellAccessory.DisplayedState.always(_:), v12);
  uint64_t v26 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v9, 1, 1, v26);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)();
  static UICellAccessory.disclosureIndicator(displayed:options:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v45);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, void, uint64_t))(v47 + 104))(v46, enum case for CellDeselectionBehavior.default(_:), v51);
  uint64_t v27 = type metadata accessor for UIBackgroundConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v53, 1, 1, v27);
  (*(void (**)(char *, void, uint64_t))(v55 + 104))(v54, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v56);
  uint64_t v28 = v58;
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();
  sub_10001C280(0, &qword_100104858, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for ArrayDataSourceSection();
  *(_OWORD *)(swift_allocObject() + 16) = v57;
  sub_100018AB8(0, (unint64_t *)&qword_100104860, (unint64_t *)&qword_100106A40);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = v57;
  uint64_t v30 = v59;
  *(void *)(v29 + 56) = v59;
  *(void *)(v29 + 64) = sub_1000931F8(&qword_100104870, (void (*)(uint64_t))&type metadata accessor for ContentConfigurationItem);
  Swift::String v31 = sub_100004F38((uint64_t *)(v29 + 32));
  uint64_t v32 = v52;
  (*(void (**)(uint64_t *, char *, uint64_t))(v52 + 16))(v31, v28, v30);
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v33 = v48;
  unint64_t v34 = v50;
  v50(v19, v48);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)();
  v61[0] = 0x3C53447961727241;
  v61[1] = 0xE800000000000000;
  UUID.init()();
  uint64_t v35 = UUID.uuidString.getter();
  unint64_t v37 = v36;
  v34(v19, v33);
  v38._uint64_t countAndFlagsBits = v35;
  v38._object = v37;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._uint64_t countAndFlagsBits = 62;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  uint64_t v40 = ArrayDataSource.init(arrangedSections:identifier:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v58, v59);
  return v40;
}

void sub_10008E740(void *a1)
{
  id v4 = sub_10008E7C0();
  id v2 = [a1 navigationController];
  if (v2)
  {
    uint64_t v3 = v2;
    [v2 pushViewController:v4 animated:1];
  }
}

id sub_10008E7C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ArrayDataSourceSection();
  uint64_t v31 = *(void *)(v6 - 8);
  uint64_t v32 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v36 = &_swiftEmptySetSingleton;
  uint64_t v9 = sub_100092ECC();
  uint64_t v10 = sub_10008DB08((unint64_t)v9, (uint64_t *)&v36, v1);
  swift_bridgeObjectRelease();
  sub_1000B870C(v10);
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  id v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v5, v2);
  uint64_t v12 = v31;
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)();
  sub_10001C280(0, &qword_100104858, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = swift_allocObject();
  long long v33 = xmmword_1000CBFD0;
  *(_OWORD *)(v14 + 16) = xmmword_1000CBFD0;
  unint64_t v15 = v14 + v13;
  uint64_t v16 = v32;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 16))(v15, v8, v32);
  uint64_t v34 = 0x3C53447961727241;
  unint64_t v35 = 0xE800000000000000;
  UUID.init()();
  uint64_t v17 = UUID.uuidString.getter();
  uint64_t v19 = v18;
  v11(v5, v2);
  v20._uint64_t countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 62;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  type metadata accessor for ArrayDataSource();
  swift_allocObject();
  ArrayDataSource.init(arrangedSections:identifier:)();
  uint64_t v22 = SnapshotDataSource.withLayoutSectionProvider(collapseEmptySections:_:)();
  swift_release();
  sub_100018AB8(0, (unint64_t *)&qword_100104AA8, &qword_100104AB0);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = v33;
  uint64_t v24 = sub_1000931F8(&qword_100107470, (void (*)(uint64_t))sub_100093240);
  *(void *)(v23 + 32) = v22;
  *(void *)(v23 + 4sub_10004C8C4(0, 0) = v24;
  type metadata accessor for CompoundSectionedDataSource();
  swift_allocObject();
  swift_retain();
  CompoundSectionedDataSource.init(_:)();
  id v25 = objc_allocWithZone((Class)type metadata accessor for CompoundDataSourceCollectionViewController());
  swift_retain();
  id v26 = (id)CompoundDataSourceCollectionViewController.init(dataSource:)();
  NSString v27 = String._bridgeToObjectiveC()();
  [v26 setTitle:v27];

  uint64_t v28 = (void *)SnapshotDataSource<>.createCompositionalLayoutFromDataSource(errorHandler:)();
  id result = [v26 collectionView];
  if (result)
  {
    uint64_t v30 = result;
    [result setCollectionViewLayout:v28 animated:0];
    swift_release();
    swift_release();

    (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v16);
    swift_bridgeObjectRelease();
    return v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10008EC9C@<X0>(void **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[0] = a3;
  v27[1] = a4;
  uint64_t v6 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  id v11 = [v10 localization];
  id v12 = [v11 displayName];

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  uint64_t v29 = v13;
  uint64_t v30 = v15;
  uint64_t v16 = *a2;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  char v17 = sub_10008EF38(v13, v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17)
  {
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 10272;
    v28._object = (void *)0xE200000000000000;
    id v18 = [v10 displayTypeIdentifierString];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v21 = v20;

    v22._uint64_t countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = 41;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    String.append(_:)(v28);
  }
  else
  {
    sub_10009135C(&v28._countAndFlagsBits, v13, v15);
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v27[0];
  *(void *)(v24 + 24) = v10;
  id v25 = v10;
  static ContentConfigurationItem.makeDisclosureItem(text:automationIdentifier:cellSelectionHandler:)();
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v9 = 1;
  (*(void (**)(unsigned char *, void, uint64_t))(v7 + 104))(v9, enum case for CellDeselectionBehavior.deselectOnDidSelect(_:), v6);
  return ContentConfigurationItem.deselectionBehavior.setter();
}

uint64_t sub_10008EF38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      id v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_10008F070(void *a1, void *a2)
{
  uint64_t v20 = type metadata accessor for Logger();
  void v19[3] = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  Swift::String v21 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for HKTDataTypeDetailFactory();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DataTypeDetailConfiguration.Context();
  uint64_t v22 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  id v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [a1 objectType];
  UIViewController.resolvedHealthExperienceStore.getter();
  id v13 = [a2 resolvedHealthStore];
  if (v13)
  {
    uint64_t v14 = v13;
    _OWORD v19[2] = v2;
    UIViewController.resolvedPinnedContentManager.getter();
    sub_10001D360((uint64_t)v27, (uint64_t)v25);
    sub_10001D360((uint64_t)v26, (uint64_t)v24);
    unint64_t v15 = v12;
    id v16 = v14;
    DataTypeDetailConfiguration.Context.init(healthExperienceStore:healthStore:mode:pinnedContentManager:chartContext:restorationUserActivity:)();
    HKTDataTypeDetailFactory.init()();
    BOOL v17 = (void *)HKTDataTypeDetailFactory.makeViewController(hkType:context:)();
    [a2 showViewController:v17 sender:0];

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v23);
    _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v26);
  }
  else
  {
    sub_100093304(a1, a2);
  }
  return _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v27);
}

uint64_t sub_10008F5C4()
{
  uint64_t v0 = type metadata accessor for ListLayoutConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ListLayoutConfiguration.withoutHeader.getter();
  uint64_t v4 = ListLayoutConfiguration.layout(for:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_10008F698(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  unint64_t v27 = 0xD00000000000001FLL;
  unint64_t v28 = 0x80000001000D5FE0;
  v13._uint64_t countAndFlagsBits = a2;
  v13._object = a3;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = 0x20726F6620;
  v14._object = (void *)0xE500000000000000;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = a4;
  v15._object = a5;
  String.append(_:)(v15);
  id v16 = self;
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v16 hk_tapToHealthRadarURLWithTitle:v17 description:v18 classification:7 reproducibility:0 keywords:0 autoDiagnostics:0 attachments:0];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  id v20 = [self defaultWorkspace];
  if (v20)
  {
    uint64_t v22 = v20;
    URL._bridgeToObjectiveC()(v21);
    uint64_t v24 = v23;
    sub_1000939E8((uint64_t)_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v22 openSensitiveURL:v24 withOptions:isa];
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

void sub_10008F90C()
{
}

void sub_10008F928()
{
}

void sub_10008F944()
{
}

uint64_t sub_10008F970()
{
  return type metadata accessor for InternalSettingsAllDataTypeDetailViewsDataSource();
}

unint64_t sub_10008F978@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002BFF4(a1);
}

uint64_t sub_10008F9F4(uint64_t a1, uint64_t a2)
{
  return sub_10002B8D0(a1, a2);
}

uint64_t sub_10008FA54(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000931F8(&qword_100107460, (void (*)(uint64_t))type metadata accessor for InternalSettingsAllDataTypeDetailViewsDataSource);
  uint64_t result = sub_1000931F8(&qword_100107468, (void (*)(uint64_t))type metadata accessor for InternalSettingsAllDataTypeDetailViewsDataSource);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10008FAD8()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10008FAE8(void *a1)
{
}

void *sub_10008FAF0(unint64_t a1)
{
  return sub_10008FB20(a1, (void (*)(void *, uint64_t, unint64_t))sub_100091D14);
}

void *sub_10008FB08(unint64_t a1)
{
  return sub_10008FB20(a1, (void (*)(void *, uint64_t, unint64_t))sub_100091F5C);
}

void *sub_10008FB20(unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v4 <= 0)
    {
      uint64_t v5 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_1000193A8(0, (unint64_t *)&qword_1001057E0);
      uint64_t v5 = (void *)swift_allocObject();
      int64_t v6 = j__malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      uint64_t v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(void *, uint64_t, unint64_t))v4) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v5;
}

void *sub_10008FC38(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        sub_10001E254(0, &qword_1001040F0);
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      sub_1000193A8(0, (unint64_t *)&qword_1001057E0);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10008FDDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000193A8(0, (unint64_t *)&qword_100107330);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_100092AC4((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10001B2F8();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_10008FED0(unint64_t a1)
{
  return sub_10008FB20(a1, (void (*)(void *, uint64_t, unint64_t))sub_1000921A4);
}

void *sub_10008FEE8(unint64_t a1)
{
  return sub_10008FB20(a1, (void (*)(void *, uint64_t, unint64_t))sub_1000923EC);
}

void *sub_10008FF00(unint64_t a1)
{
  return sub_10008FB20(a1, (void (*)(void *, uint64_t, unint64_t))sub_100092634);
}

void *sub_10008FF18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000193A8(0, &qword_100105230);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_100092CC4(&v8, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_10001B2F8();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_10009000C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_100091348(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_100090088(v6);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int sub_100090088(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_149;
    }
    if (v3) {
      return sub_100090A24(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_157;
  }
  Swift::Int v130 = result;
  Swift::Int v135 = v3;
  uint64_t v127 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
    uint64_t v143 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v138 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
LABEL_115:
      if (v12 >= 2)
      {
        uint64_t v121 = *v127;
        do
        {
          unint64_t v122 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_144;
          }
          if (!v121) {
            goto LABEL_156;
          }
          uint64_t v123 = *(void *)&v8[16 * v122 + 32];
          uint64_t v124 = *(void *)&v8[16 * v12 + 24];
          sub_100090BE8((void **)(v121 + 8 * v123), (id *)(v121 + 8 * *(void *)&v8[16 * v12 + 16]), (id *)(v121 + 8 * v124), v138);
          if (v1) {
            break;
          }
          if (v124 < v123) {
            goto LABEL_145;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = sub_10009130C((uint64_t)v8);
          }
          if (v122 >= *((void *)v8 + 2)) {
            goto LABEL_146;
          }
          uint64_t v125 = &v8[16 * v122 + 32];
          *(void *)uint64_t v125 = v123;
          *((void *)v125 + 1) = v124;
          unint64_t v126 = *((void *)v8 + 2);
          if (v12 > v126) {
            goto LABEL_147;
          }
          memmove(&v8[16 * v12 + 16], &v8[16 * v12 + 32], 16 * (v126 - v12));
          *((void *)v8 + 2) = v126 - 1;
          unint64_t v12 = v126 - 1;
        }
        while (v126 > 2);
      }
LABEL_126:
      swift_bridgeObjectRelease();
      *(void *)((v143 & 0xFFFFFFFFFFFFFF8) + 0x1sub_10004C8C4(0, 0) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    sub_10001E254(0, &qword_1001064D0);
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x1sub_10004C8C4(0, 0) = v6;
    uint64_t v138 = (void **)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v143 = v7;
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v128 = *a1 + 16;
  uint64_t v129 = *a1 - 8;
  uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v11 = v135;
  uint64_t v139 = *a1;
  while (2)
  {
    Swift::Int v13 = v9;
    Swift::Int v14 = v9 + 1;
    Swift::Int v134 = v9;
    if (v9 + 1 >= v11) {
      goto LABEL_45;
    }
    uint64_t v131 = v8;
    Swift::String v15 = *(void **)(v10 + 8 * v9);
    id v16 = *(id *)(v10 + 8 * v14);
    id v17 = v15;
    id v18 = [v16 localization];
    id v19 = [v18 displayName];

    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    id v23 = [v17 localization];
    id v24 = [v23 displayName];

    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    if (v20 == v25 && v22 == v27) {
      int v136 = 0;
    }
    else {
      int v136 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    Swift::Int v13 = v134;
    Swift::Int v14 = v134 + 2;
    if (v134 + 2 >= v135) {
      goto LABEL_36;
    }
    uint64_t v29 = (id *)(v128 + 8 * v134);
    while (1)
    {
      Swift::Int v140 = v14;
      uint64_t v31 = *(v29 - 1);
      id v32 = *v29;
      id v33 = v31;
      id v34 = [v32 localization];
      id v35 = [v34 displayName];

      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;

      id v39 = [v33 localization];
      id v40 = [v39 displayName];

      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;

      if (v36 == v41 && v38 == v43)
      {

        swift_bridgeObjectRelease_n();
        if (v136)
        {
          uint64_t v8 = v131;
          uint64_t v10 = v139;
          Swift::Int v14 = v140;
          Swift::Int v13 = v134;
          goto LABEL_37;
        }
        goto LABEL_25;
      }
      int v30 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v136 ^ v30)) {
        break;
      }
LABEL_25:
      Swift::Int v14 = v140 + 1;
      ++v29;
      if (v135 == v140 + 1)
      {
        Swift::Int v14 = v135;
        goto LABEL_35;
      }
    }
    Swift::Int v14 = v140;
LABEL_35:
    Swift::Int v13 = v134;
LABEL_36:
    uint64_t v8 = v131;
    uint64_t v10 = v139;
    if (v136)
    {
LABEL_37:
      if (v14 < v13) {
        goto LABEL_150;
      }
      if (v13 < v14)
      {
        uint64_t v45 = (uint64_t *)(v129 + 8 * v14);
        Swift::Int v46 = v14;
        Swift::Int v47 = v13;
        uint64_t v48 = (uint64_t *)(v10 + 8 * v13);
        do
        {
          if (v47 != --v46)
          {
            if (!v10) {
              goto LABEL_155;
            }
            uint64_t v49 = *v48;
            *uint64_t v48 = *v45;
            *uint64_t v45 = v49;
          }
          ++v47;
          --v45;
          ++v48;
        }
        while (v47 < v46);
      }
    }
LABEL_45:
    if (v14 >= v135) {
      goto LABEL_67;
    }
    if (__OFSUB__(v14, v13)) {
      goto LABEL_148;
    }
    if (v14 - v13 >= v130)
    {
LABEL_67:
      if (v14 < v13) {
        goto LABEL_143;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_100091098(0, *((void *)v8 + 2) + 1, 1, v8);
      }
      unint64_t v73 = *((void *)v8 + 2);
      unint64_t v72 = *((void *)v8 + 3);
      unint64_t v12 = v73 + 1;
      Swift::Int v142 = v14;
      if (v73 >= v72 >> 1) {
        uint64_t v8 = sub_100091098((char *)(v72 > 1), v73 + 1, 1, v8);
      }
      *((void *)v8 + 2) = v12;
      uint64_t v74 = v8 + 32;
      uint64_t v75 = &v8[16 * v73 + 32];
      *(void *)uint64_t v75 = v13;
      *((void *)v75 + 1) = v142;
      if (!v73)
      {
        unint64_t v12 = 1;
LABEL_14:
        Swift::Int v11 = v135;
        Swift::Int v9 = v142;
        if (v142 >= v135) {
          goto LABEL_115;
        }
        continue;
      }
      while (1)
      {
        unint64_t v76 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v81 = &v74[16 * v12];
          uint64_t v82 = *((void *)v81 - 8);
          uint64_t v83 = *((void *)v81 - 7);
          BOOL v87 = __OFSUB__(v83, v82);
          uint64_t v84 = v83 - v82;
          if (v87) {
            goto LABEL_132;
          }
          uint64_t v86 = *((void *)v81 - 6);
          uint64_t v85 = *((void *)v81 - 5);
          BOOL v87 = __OFSUB__(v85, v86);
          uint64_t v79 = v85 - v86;
          char v80 = v87;
          if (v87) {
            goto LABEL_133;
          }
          unint64_t v88 = v12 - 2;
          uint64_t v89 = &v74[16 * v12 - 32];
          uint64_t v91 = *(void *)v89;
          uint64_t v90 = *((void *)v89 + 1);
          BOOL v87 = __OFSUB__(v90, v91);
          uint64_t v92 = v90 - v91;
          if (v87) {
            goto LABEL_135;
          }
          BOOL v87 = __OFADD__(v79, v92);
          uint64_t v93 = v79 + v92;
          if (v87) {
            goto LABEL_138;
          }
          if (v93 >= v84)
          {
            uint64_t v111 = &v74[16 * v76];
            uint64_t v113 = *(void *)v111;
            uint64_t v112 = *((void *)v111 + 1);
            BOOL v87 = __OFSUB__(v112, v113);
            uint64_t v114 = v112 - v113;
            if (v87) {
              goto LABEL_142;
            }
            BOOL v104 = v79 < v114;
            goto LABEL_104;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v105 = *((void *)v8 + 4);
            uint64_t v106 = *((void *)v8 + 5);
            BOOL v87 = __OFSUB__(v106, v105);
            uint64_t v98 = v106 - v105;
            char v99 = v87;
            goto LABEL_98;
          }
          uint64_t v78 = *((void *)v8 + 4);
          uint64_t v77 = *((void *)v8 + 5);
          BOOL v87 = __OFSUB__(v77, v78);
          uint64_t v79 = v77 - v78;
          char v80 = v87;
        }
        if (v80) {
          goto LABEL_134;
        }
        unint64_t v88 = v12 - 2;
        unint64_t v94 = &v74[16 * v12 - 32];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v97 = __OFSUB__(v95, v96);
        uint64_t v98 = v95 - v96;
        char v99 = v97;
        if (v97) {
          goto LABEL_137;
        }
        unint64_t v100 = &v74[16 * v76];
        uint64_t v102 = *(void *)v100;
        uint64_t v101 = *((void *)v100 + 1);
        BOOL v87 = __OFSUB__(v101, v102);
        uint64_t v103 = v101 - v102;
        if (v87) {
          goto LABEL_140;
        }
        if (__OFADD__(v98, v103)) {
          goto LABEL_141;
        }
        if (v98 + v103 >= v79)
        {
          BOOL v104 = v79 < v103;
LABEL_104:
          if (v104) {
            unint64_t v76 = v88;
          }
          goto LABEL_106;
        }
LABEL_98:
        if (v99) {
          goto LABEL_136;
        }
        objc_super v107 = &v74[16 * v76];
        uint64_t v109 = *(void *)v107;
        uint64_t v108 = *((void *)v107 + 1);
        BOOL v87 = __OFSUB__(v108, v109);
        uint64_t v110 = v108 - v109;
        if (v87) {
          goto LABEL_139;
        }
        if (v110 < v98) {
          goto LABEL_14;
        }
LABEL_106:
        unint64_t v115 = v76 - 1;
        if (v76 - 1 >= v12)
        {
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        if (!v10) {
          goto LABEL_154;
        }
        char v116 = &v74[16 * v115];
        uint64_t v117 = *(void *)v116;
        uint64_t v118 = &v74[16 * v76];
        uint64_t v119 = *((void *)v118 + 1);
        sub_100090BE8((void **)(v10 + 8 * *(void *)v116), (id *)(v10 + 8 * *(void *)v118), (id *)(v10 + 8 * v119), v138);
        if (v1) {
          goto LABEL_126;
        }
        if (v119 < v117) {
          goto LABEL_129;
        }
        if (v76 > *((void *)v8 + 2)) {
          goto LABEL_130;
        }
        *(void *)char v116 = v117;
        *(void *)&v74[16 * v115 + 8] = v119;
        unint64_t v120 = *((void *)v8 + 2);
        if (v76 >= v120) {
          goto LABEL_131;
        }
        unint64_t v12 = v120 - 1;
        memmove(&v74[16 * v76], v118 + 16, 16 * (v120 - 1 - v76));
        *((void *)v8 + 2) = v120 - 1;
        if (v120 <= 2) {
          goto LABEL_14;
        }
      }
    }
    break;
  }
  if (__OFADD__(v13, v130)) {
    goto LABEL_151;
  }
  Swift::Int v50 = v135;
  if (v13 + v130 < v135) {
    Swift::Int v50 = v13 + v130;
  }
  if (v50 >= v13)
  {
    if (v14 != v50)
    {
      unint64_t v132 = v8;
      Swift::Int v133 = v50;
      uint64_t v51 = v129 + 8 * v14;
      do
      {
        uint64_t v53 = *(void **)(v10 + 8 * v14);
        Swift::Int v54 = v13;
        uint64_t v137 = v51;
        uint64_t v55 = v51;
        Swift::Int v141 = v14;
        while (1)
        {
          uint64_t v56 = *(void **)v55;
          id v57 = v53;
          id v58 = v56;
          id v59 = [v57 localization];
          id v60 = [v59 displayName];

          uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v63 = v62;

          id v64 = [v58 localization];
          id v65 = [v64 displayName];

          uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v68 = v67;

          if (v61 == v66 && v63 == v68)
          {

            swift_bridgeObjectRelease_n();
            uint64_t v10 = v139;
            Swift::Int v52 = v141;
            goto LABEL_55;
          }
          char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v10 = v139;
          if ((v70 & 1) == 0) {
            break;
          }
          Swift::Int v52 = v141;
          if (!v139) {
            goto LABEL_153;
          }
          uint64_t v71 = *(void **)v55;
          uint64_t v53 = *(void **)(v55 + 8);
          *(void *)uint64_t v55 = v53;
          *(void *)(v55 + 8) = v71;
          v55 -= 8;
          if (v141 == ++v54) {
            goto LABEL_55;
          }
        }
        Swift::Int v52 = v141;
LABEL_55:
        Swift::Int v14 = v52 + 1;
        uint64_t v51 = v137 + 8;
        Swift::Int v13 = v134;
      }
      while (v14 != v133);
      Swift::Int v14 = v133;
      uint64_t v8 = v132;
    }
    goto LABEL_67;
  }
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100090A24(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v25 = result;
  if (a3 != a2)
  {
    uint64_t v27 = *a4;
    uint64_t v4 = *a4 + 8 * a3 - 8;
LABEL_6:
    uint64_t v6 = *(void **)(v27 + 8 * a3);
    uint64_t v7 = v25;
    uint64_t v26 = v4;
    uint64_t v28 = a3;
    while (1)
    {
      uint64_t v8 = *(void **)v4;
      id v9 = v6;
      id v10 = v8;
      id v11 = [v9 localization];
      id v12 = [v11 displayName];

      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      id v16 = [v10 localization];
      id v17 = [v16 displayName];

      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      if (v13 == v18 && v15 == v20)
      {

        Swift::Int result = swift_bridgeObjectRelease_n();
        uint64_t v5 = v28;
LABEL_5:
        a3 = v5 + 1;
        uint64_t v4 = v26 + 8;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_6;
      }
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      uint64_t v5 = v28;
      if ((v22 & 1) == 0) {
        goto LABEL_5;
      }
      if (!v27) {
        break;
      }
      id v23 = *(void **)v4;
      uint64_t v6 = *(void **)(v4 + 8);
      *(void *)uint64_t v4 = v6;
      *(void *)(v4 + 8) = v23;
      v4 -= 8;
      if (v28 == ++v7) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100090BE8(void **__src, id *a2, id *a3, void **__dst)
{
  uint64_t v4 = __dst;
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = (char *)a3 - (char *)a2;
  uint64_t v12 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0) {
    uint64_t v12 = (char *)a3 - (char *)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v66 = __src;
  id v65 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7) {
      goto LABEL_53;
    }
    if (__dst != a2 || &a2[v13] <= __dst) {
      memmove(__dst, a2, 8 * v13);
    }
    Swift::Int v54 = v4;
    id v32 = &v4[v13];
    id v64 = v32;
    uint64_t v66 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_52:
      sub_100091250((void **)&v66, (const void **)&v65, &v64);
      return 1;
    }
    id v33 = v6;
    id v59 = v7;
    while (1)
    {
      uint64_t v61 = v5;
      uint64_t v63 = v6;
      id v57 = v32;
      id v35 = *--v32;
      id v34 = v35;
      uint64_t v36 = *--v33;
      id v37 = v34;
      id v38 = v36;
      uint64_t v55 = v37;
      id v39 = [v37 localization];
      id v40 = [v39 displayName];

      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;

      id v44 = [v38 localization];
      id v45 = [v44 displayName];

      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v48 = v47;

      if (v41 == v46 && v43 == v48) {
        break;
      }
      char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v51 = v61;
      uint64_t v5 = v61 - 1;
      if ((v50 & 1) == 0) {
        goto LABEL_46;
      }
      id v32 = v57;
      unint64_t v52 = (unint64_t)v59;
      if (v61 != v63 || v5 >= v63) {
        *uint64_t v5 = *v33;
      }
      uint64_t v66 = v33;
LABEL_50:
      if ((unint64_t)v33 > v52)
      {
        uint64_t v6 = v33;
        if (v32 > v54) {
          continue;
        }
      }
      goto LABEL_52;
    }

    swift_bridgeObjectRelease_n();
    uint64_t v51 = v61;
    uint64_t v5 = v61 - 1;
LABEL_46:
    unint64_t v52 = (unint64_t)v59;
    id v33 = v63;
    id v64 = v32;
    if (v51 < v57 || v5 >= v57 || v51 != v57) {
      *uint64_t v5 = *v32;
    }
    goto LABEL_50;
  }
  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v56 = &v4[v10];
    id v64 = v56;
    if (v6 < v5 && v8 >= 8)
    {
      id v60 = v5;
      while (1)
      {
        id v58 = v7;
        uint64_t v62 = v6;
        uint64_t v14 = *v4;
        id v15 = *v6;
        id v16 = v14;
        id v17 = [v15 localization];
        id v18 = [v17 displayName];

        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;

        id v22 = [v16 localization];
        id v23 = [v22 displayName];

        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v26 = v25;

        if (v19 == v24 && v21 == v26) {
          break;
        }
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v28 & 1) == 0) {
          goto LABEL_23;
        }
        uint64_t v29 = v60;
        int v30 = v62 + 1;
        uint64_t v31 = v58;
        if (v58 < v62 || v58 >= v30 || v58 != v62) {
          char *v58 = *v62;
        }
LABEL_26:
        uint64_t v7 = v31 + 1;
        if (v4 < v56)
        {
          uint64_t v6 = v30;
          if (v30 < v29) {
            continue;
          }
        }
        uint64_t v66 = v7;
        goto LABEL_52;
      }

      swift_bridgeObjectRelease_n();
LABEL_23:
      uint64_t v31 = v58;
      uint64_t v29 = v60;
      if (v58 != v4) {
        char *v58 = *v4;
      }
      id v65 = ++v4;
      int v30 = v62;
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_53:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100091098(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000936AC();
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100091194(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_100091250(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_10009130C(uint64_t a1)
{
  return sub_100091098(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100091320(uint64_t a1)
{
  return sub_100096954(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100091334(void *a1)
{
  return sub_100096ACC(0, a1[2], 0, a1);
}

uint64_t sub_100091348(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_10009135C(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      id v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10009150C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

Swift::Int sub_10009150C(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10006C3D4();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1000916A8();
      goto LABEL_22;
    }
    sub_100091A3C();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    Swift::Int v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        id v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_1000916A8()
{
  uint64_t v1 = v0;
  sub_100093730(0, (unint64_t *)&qword_1001065D8, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t (*)(void, uint64_t, uint64_t))&type metadata accessor for _SetStorage);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100091884()
{
  uint64_t v1 = v0;
  sub_100093780();
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void **)v17;
    LOBYTE(v17) = *(unsigned char *)(v17 + 8);
    uint64_t v19 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v19 = v18;
    *(unsigned char *)(v19 + 8) = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100091A3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100093730(0, (unint64_t *)&qword_1001065D8, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t (*)(void, uint64_t, uint64_t))&type metadata accessor for _SetStorage);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100091D14(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10001EE98(0, &qword_1001074C0, &qword_1001074B8);
        sub_100093830(&qword_1001074C8, &qword_1001074C0, &qword_1001074B8);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          unint64_t v12 = sub_100097034(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001E254(0, &qword_1001074B8);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100091F5C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10001EE98(0, &qword_1001074A8, &qword_1001074A0);
        sub_100093830(&qword_1001074B0, &qword_1001074A8, &qword_1001074A0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          unint64_t v12 = sub_100097034(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001E254(0, &qword_1001074A0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000921A4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10001EE98(0, &qword_100104190, (unint64_t *)&qword_100104198);
        sub_100093830(&qword_100107500, &qword_100104190, (unint64_t *)&qword_100104198);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          unint64_t v12 = sub_100097034(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001E254(0, (unint64_t *)&qword_100104198);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000923EC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10001EE98(0, &qword_1001074F0, (unint64_t *)&qword_100105328);
        sub_100093830(&qword_1001074F8, &qword_1001074F0, (unint64_t *)&qword_100105328);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          unint64_t v12 = sub_100097034(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001E254(0, (unint64_t *)&qword_100105328);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100092634(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10001EE98(0, &qword_100107480, &qword_1001064D0);
        sub_100093830(&qword_100107488, &qword_100107480, &qword_1001064D0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          unint64_t v12 = sub_1000970A0(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001E254(0, &qword_1001064D0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10009287C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10001EE98(0, &qword_100106AC8, (unint64_t *)&unk_100106AD0);
        sub_100093830(&qword_1001074D8, &qword_100106AC8, (unint64_t *)&unk_100106AD0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          unint64_t v12 = sub_100097034(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001E254(0, (unint64_t *)&unk_100106AD0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100092AC4(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *int64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_100092CC4(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(a4 + 48) + 16 * v16;
    uint64_t v21 = *(void **)v20;
    LOBYTE(v2sub_10004C8C4(0, 0) = *(unsigned char *)(v20 + 8);
    *(void *)uint64_t v11 = v21;
    *(unsigned char *)(v11 + 8) = v20;
    if (v13 == v10)
    {
      id v22 = v21;
      goto LABEL_38;
    }
    v11 += 16;
    uint64_t result = v21;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_100092ECC()
{
  id v0 = [self builtinDisplayTypes];
  sub_10001E254(0, &qword_1001064D0);
  unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v18 = _swiftEmptyArrayStorage;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2)
    {
LABEL_3:
      if (v2 < 1)
      {
        __break(1u);
        goto LABEL_35;
      }
      for (uint64_t i = 0; i != v2; ++i)
      {
        if ((v1 & 0xC000000000000001) != 0) {
          id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v4 = *(id *)(v1 + 8 * i + 32);
        }
        uint64_t v5 = v4;
        id v6 = [v4 objectType];
        unsigned int v7 = [v6 enabled];

        if (v7)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v8 = (unint64_t)v18;
      unint64_t v18 = _swiftEmptyArrayStorage;
      if ((v8 & 0x8000000000000000) != 0) {
        goto LABEL_28;
      }
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v18 = _swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
    goto LABEL_28;
  }
LABEL_16:
  if ((v8 & 0x4000000000000000) != 0)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v9) {
      goto LABEL_29;
    }
    goto LABEL_18;
  }
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
LABEL_18:
    if (v9 >= 1)
    {
      for (uint64_t j = 0; j != v9; ++j)
      {
        if ((v8 & 0xC000000000000001) != 0) {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v11 = *(id *)(v8 + 8 * j + 32);
        }
        int64_t v12 = v11;
        id v13 = [v11 displayCategory];
        unsigned __int8 v14 = [v13 isMeCategory];

        if (v14)
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_release();
      unint64_t v15 = (unint64_t)v18;
      goto LABEL_30;
    }
LABEL_35:
    __break(1u);
    uint64_t result = (void *)swift_release();
    __break(1u);
    return result;
  }
LABEL_29:
  swift_release();
  unint64_t v15 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_30:
  swift_bridgeObjectRetain();
  if ((v15 & 0x8000000000000000) != 0 || (unint64_t v16 = (void *)v15, (v15 & 0x4000000000000000) != 0))
  {
    unint64_t v16 = sub_10008FB20(v15, (void (*)(void *, uint64_t, unint64_t))sub_100092634);
    swift_release();
  }
  unint64_t v18 = v16;
  sub_10009000C((uint64_t *)&v18);
  swift_release();
  return v18;
}

uint64_t sub_1000931F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100093240()
{
  if (!qword_100107478)
  {
    type metadata accessor for ArrayDataSource();
    unint64_t v0 = type metadata accessor for DataSourceWithLayout();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107478);
    }
  }
}

uint64_t sub_1000932A0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000932D8(void *a1)
{
  return sub_10008F070(*(void **)(v1 + 24), a1);
}

void sub_100093304(void *a1, void *a2)
{
  id v2 = [a1 displayTypeIdentifierString];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  _StringGuts.grow(_:)(68);
  v6._uint64_t countAndFlagsBits = 0xD000000000000011;
  v6._object = (void *)0x80000001000D5F50;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = v3;
  v7._object = v5;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0xD000000000000031;
  v8._object = (void *)0x80000001000D5F70;
  String.append(_:)(v8);
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v9._object = (void *)0x80000001000D5FB0;
  String.append(_:)(v9);
  NSString v10 = String._bridgeToObjectiveC()();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [self alertControllerWithTitle:v10 message:v11 preferredStyle:1];

  NSString v13 = String._bridgeToObjectiveC()();
  unsigned __int8 v14 = self;
  id v15 = [v14 actionWithTitle:v13 style:1 handler:0];

  [v12 addAction:v15];
  unint64_t v16 = (void *)swift_allocObject();
  void v16[2] = 0xD00000000000001ALL;
  v16[3] = 0x80000001000D5F30;
  v16[4] = v3;
  v16[5] = v5;
  v16[6] = 0;
  v16[7] = 0xE000000000000000;
  NSString v17 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_10009369C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A0064;
  aBlock[3] = &unk_1000F8140;
  unint64_t v18 = _Block_copy(aBlock);
  swift_release();
  id v19 = [v14 actionWithTitle:v17 style:0 handler:v18];
  _Block_release(v18);

  [v12 addAction:v19];
  [v12 setPreferredAction:v15];
  [a2 presentViewController:v12 animated:1 completion:0];
}

uint64_t sub_100093654()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10009369C(uint64_t a1)
{
  return sub_10008F698(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

void sub_1000936AC()
{
  if (!qword_100107490)
  {
    sub_100093730(255, &qword_100107498, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int, (uint64_t (*)(void, uint64_t, uint64_t))&type metadata accessor for Range);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107490);
    }
  }
}

void sub_100093730(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_100093780()
{
  if (!qword_1001074E0)
  {
    sub_1000937DC();
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001074E0);
    }
  }
}

unint64_t sub_1000937DC()
{
  unint64_t result = qword_1001074E8;
  if (!qword_1001074E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001074E8);
  }
  return result;
}

uint64_t sub_100093830(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001EE98(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100093884(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100095DAC(0, &qword_100107558);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100095E04(v6, (uint64_t)v15, (unint64_t *)&qword_100105A30);
    unint64_t result = sub_100094D3C((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_100095D40(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000939E8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100095DAC(0, &qword_100107560);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100095E04(v6, (uint64_t)&v15, &qword_100107568);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100094D80(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    *long long v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100095D40(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100093B48(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100095FD8();
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_100094D80(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    *long long v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100093C60()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100093DB4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100093F00()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100094018()
{
  return Hasher._finalize()();
}

Swift::Int sub_100094148()
{
  return Hasher._finalize()();
}

Swift::Void __swiftcall HealthAppOnboardingAnalyticsEventSubmitting.submitAnalyticsEvent(action:)(Health::OnboardingAnalyticsEvent::Action action)
{
  (*(void (**)())(v1 + 8))();
  sub_10005561C();
  AnalyticsSubmitting.submit()();
}

uint64_t *OnboardingAnalyticsEvent.eventName.unsafeMutableAddressor()
{
  return &static OnboardingAnalyticsEvent.eventName;
}

uint64_t static OnboardingAnalyticsEvent.eventName.getter()
{
  swift_beginAccess();
  uint64_t v0 = static OnboardingAnalyticsEvent.eventName;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static OnboardingAnalyticsEvent.eventName.setter(uint64_t a1, char *a2)
{
  static OnboardingAnalyticsEvent.eventName = a1;
  off_100107510 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static OnboardingAnalyticsEvent.eventName.modify())()
{
  return j__swift_endAccess;
}

unint64_t OnboardingAnalyticsEvent.Step.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6C61654872756F59;
      break;
    case 2:
    case 8:
      return result;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0xD000000000000018;
      break;
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 6:
      unint64_t result = 0x5365766F72706D49;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      unint64_t result = 0x656D6F636C6557;
      break;
  }
  return result;
}

uint64_t sub_100094540(unsigned __int8 *a1, char *a2)
{
  return sub_100098660(*a1, *a2);
}

Swift::Int sub_10009454C()
{
  return Hasher._finalize()();
}

uint64_t sub_100094594()
{
  return sub_100093DB4();
}

Swift::Int sub_10009459C()
{
  return Hasher._finalize()();
}

unint64_t sub_1000945E0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s6Health24OnboardingAnalyticsEventV4StepO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100094610@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = OnboardingAnalyticsEvent.Step.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL OnboardingAnalyticsEvent.Context.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000F51C8, v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

unint64_t OnboardingAnalyticsEvent.Context.rawValue.getter()
{
  return 0xD000000000000011;
}

Swift::Int sub_1000946A0()
{
  return Hasher._finalize()();
}

uint64_t sub_1000946F8()
{
  return String.hash(into:)();
}

Swift::Int sub_100094714()
{
  return Hasher._finalize()();
}

uint64_t sub_100094768@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000F5200, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_1000947BC(void *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x80000001000D0FA0;
}

unint64_t OnboardingAnalyticsEvent.Action.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000013;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x776F6C6C41;
      break;
    case 2:
      unint64_t result = 0x6C412074276E6F44;
      break;
    case 3:
      unint64_t result = 0x794D206572616853;
      break;
    case 4:
      return result;
    case 5:
      unint64_t result = 0x6E4F206E727554;
      break;
    case 6:
      unint64_t result = 0x75542074276E6F44;
      break;
    case 7:
      unint64_t result = 0x7472617453;
      break;
    default:
      unint64_t result = 0x65756E69746E6F43;
      break;
  }
  return result;
}

uint64_t sub_100094900(unsigned __int8 *a1, char *a2)
{
  return sub_1000983AC(*a1, *a2);
}

Swift::Int sub_10009490C()
{
  return sub_100094148();
}

uint64_t sub_100094918()
{
  return sub_100093C60();
}

Swift::Int sub_100094920()
{
  return sub_100094148();
}

unint64_t sub_100094928@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s6Health24OnboardingAnalyticsEventV6ActionO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100094958@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = OnboardingAnalyticsEvent.Action.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t OnboardingAnalyticsEvent.step.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*OnboardingAnalyticsEvent.step.modify())()
{
  return ConfigurationIntentResponseCode.rawValue.getter;
}

uint64_t OnboardingAnalyticsEvent.action.getter(__int16 a1)
{
  return HIBYTE(a1);
}

uint64_t OnboardingAnalyticsEvent.action.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*OnboardingAnalyticsEvent.action.modify())()
{
  return ConfigurationIntentResponseCode.rawValue.getter;
}

unint64_t OnboardingAnalyticsEvent.keyValuePairs.getter()
{
  sub_1000954C4();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000CC000;
  *(void *)(inited + 32) = 0x6E6F69746361;
  *(void *)(inited + 4sub_10004C8C4(0, 0) = 0xE600000000000000;
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v1;
  *(void *)(inited + 56) = 0x747865746E6F63;
  *(void *)(inited + 64) = 0xE700000000000000;
  *(void *)(inited + 72) = String._bridgeToObjectiveC()();
  *(void *)(inited + 8sub_10004C8C4(0, 0) = 0xD000000000000016;
  *(void *)(inited + 88) = 0x80000001000D6020;
  sub_100095594();
  static AnalyticsTransforming.activeWatchProductTypeString()();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 96) = v2;
  *(void *)(inited + 104) = 1885697139;
  *(void *)(inited + 112) = 0xE400000000000000;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 12sub_10004C8C4(0, 0) = v3;
  return sub_100093B48(inited);
}

unint64_t sub_100094D34()
{
  return OnboardingAnalyticsEvent.keyValuePairs.getter();
}

unint64_t sub_100094D3C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100094EFC(a1, v4);
}

unint64_t sub_100094D80(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100094FC4(a1, a2, v4);
}

unint64_t sub_100094DF8(uint64_t a1)
{
  type metadata accessor for BrowseCategory();
  sub_100096050((unint64_t *)&qword_100105FF8, (void (*)(uint64_t))&type metadata accessor for BrowseCategory);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_1000950A8(a1, v2);
}

unint64_t sub_100094E90(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_100095268(a1, v2);
}

unint64_t sub_100094EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100095D50(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100031B58((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100094FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        BOOL v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000950A8(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for BrowseCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    BOOL v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    BOOL v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_100096050(&qword_100107590, (void (*)(uint64_t))&type metadata accessor for BrowseCategory);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_100095268(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100095304(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100095ED0();
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v4 = *(void *)(a1 + 32);
  long long v16 = *(_OWORD *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t result = sub_100094E90(v4);
  long long v7 = v16;
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_unknownObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 64;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    uint64_t v10 = v3[7] + 24 * result;
    *(_OWORD *)uint64_t v10 = v7;
    *(void *)(v10 + 16) = v5;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 32;
    Swift::UInt v4 = *(void *)v9;
    long long v17 = *(_OWORD *)(v9 + 8);
    uint64_t v5 = *(void *)(v9 + 24);
    swift_unknownObjectRetain();
    unint64_t result = sub_100094E90(v4);
    uint64_t v9 = v14;
    long long v7 = v17;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t _s6Health24OnboardingAnalyticsEventV4StepO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000F50D0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

unint64_t _s6Health24OnboardingAnalyticsEventV6ActionO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000F5238, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

void sub_1000954C4()
{
  if (!qword_100107518)
  {
    sub_10009551C();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107518);
    }
  }
}

void sub_10009551C()
{
  if (!qword_100107520)
  {
    sub_10001E254(255, &qword_100104890);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100107520);
    }
  }
}

unint64_t sub_100095594()
{
  unint64_t result = qword_100107528;
  if (!qword_100107528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107528);
  }
  return result;
}

unint64_t sub_1000955EC()
{
  unint64_t result = qword_100107530;
  if (!qword_100107530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107530);
  }
  return result;
}

unint64_t sub_100095644()
{
  unint64_t result = qword_100107538;
  if (!qword_100107538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107538);
  }
  return result;
}

unint64_t sub_10009569C()
{
  unint64_t result = qword_100107540;
  if (!qword_100107540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107540);
  }
  return result;
}

unint64_t sub_1000956F4()
{
  unint64_t result = qword_100107548;
  if (!qword_100107548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107548);
  }
  return result;
}

unint64_t sub_10009574C()
{
  unint64_t result = qword_100107550;
  if (!qword_100107550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107550);
  }
  return result;
}

_WORD *initializeBufferWithCopyOfBuffer for OnboardingAnalyticsEvent(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for OnboardingAnalyticsEvent(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 65287 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65287 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65287;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65287;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65287;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for OnboardingAnalyticsEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65287 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65287 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 249;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009590CLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OnboardingAnalyticsEvent()
{
  return &type metadata for OnboardingAnalyticsEvent;
}

uint64_t getEnumTagSinglePayload for OnboardingAnalyticsEvent.Step(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for OnboardingAnalyticsEvent.Step(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100095AA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OnboardingAnalyticsEvent.Step()
{
  return &type metadata for OnboardingAnalyticsEvent.Step;
}

unsigned char *storeEnumTagSinglePayload for OnboardingAnalyticsEvent.Context(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100095B74);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for OnboardingAnalyticsEvent.Context()
{
  return &type metadata for OnboardingAnalyticsEvent.Context;
}

uint64_t getEnumTagSinglePayload for OnboardingAnalyticsEvent.Action(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for OnboardingAnalyticsEvent.Action(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100095D08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OnboardingAnalyticsEvent.Action()
{
  return &type metadata for OnboardingAnalyticsEvent.Action;
}

_OWORD *sub_100095D40(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100095D50(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_100095DAC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for _DictionaryStorage();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_100095E04(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  sub_100095E70(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_100095E70(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_100095ED0()
{
  if (!qword_100107570)
  {
    type metadata accessor for UIUserInterfaceSizeClass(255);
    sub_100095F7C();
    sub_100096050(&qword_100107580, type metadata accessor for UIUserInterfaceSizeClass);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107570);
    }
  }
}

unint64_t sub_100095F7C()
{
  unint64_t result = qword_100107578;
  if (!qword_100107578)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_100107578);
  }
  return result;
}

void sub_100095FD8()
{
  if (!qword_100107588)
  {
    sub_10001E254(255, &qword_100104890);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107588);
    }
  }
}

uint64_t sub_100096050(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000960A0()
{
  uint64_t v1 = v0;
  uint64_t v23 = *v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unsigned int v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  int v8 = (char *)&v23 - v7;
  static Logger.general.getter();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Resetting store demo mode pinned content now!", v11, 2u);
    swift_slowDealloc();
  }

  BOOL v12 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  uint64_t v25 = v3 + 8;
  uint64_t v26 = v2;
  unint64_t v24 = v12;
  v12(v8, v2);
  uint64_t v13 = (uint64_t)(v1 + 2);
  sub_10001D360(v13, (uint64_t)v28);
  sub_1000190DC(v28, v29);
  dispatch thunk of PinnedContentManaging.unpinAll()();
  _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v28);
  sub_100097368();
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v16 = v14 + 40;
    do
    {
      sub_10001D360(v13, (uint64_t)v28);
      sub_1000190DC(v28, v29);
      swift_bridgeObjectRetain();
      dispatch thunk of PinnedContentManaging.pin(identifier:)();
      _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v28);
      swift_bridgeObjectRelease();
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  swift_bridgeObjectRelease();
  static Logger.general.getter();
  long long v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315138;
    v28[0] = v23;
    swift_getMetatypeMetadata();
    uint64_t v20 = String.init<A>(describing:)();
    v28[0] = sub_100018DA0(v20, v21, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%s]: Reset demo mode pinned content completed.", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return v24(v6, v26);
}

uint64_t sub_100096418()
{
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for StoreDemoModeManager()
{
  return self;
}

uint64_t sub_100096474(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100096634(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_100096494(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100096DE4(a1, a2, a3, (void *)*v3, &qword_1001051E0, (void (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t (*)(void))&type metadata accessor for ContentConfigurationItem);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1000964E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000967A8(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100096504(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100096954(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100096524(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100096DE4(a1, a2, a3, (void *)*v3, &qword_100105210, (void (*)(uint64_t))type metadata accessor for HealthViewEntity, (uint64_t (*)(void))type metadata accessor for HealthViewEntity);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100096574(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100096C6C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100096594(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100096DE4(a1, a2, a3, (void *)*v3, &qword_100107670, (void (*)(uint64_t))sub_10009764C, (uint64_t (*)(void))sub_10009764C);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1000965E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100096DE4(a1, a2, a3, (void *)*v3, &qword_100107660, (void (*)(uint64_t))sub_100097590, (uint64_t (*)(void))sub_100097590);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100096634(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000193A8(0, &qword_100105230);
    os_log_type_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    os_log_type_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 16 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000967A8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000282D4();
    os_log_type_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    os_log_type_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_10001D3C4(0, (unint64_t *)&qword_100106A40);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100096954(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000193A8(0, (unint64_t *)&qword_100107330);
    os_log_type_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    os_log_type_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100096ACC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10009753C(0, &qword_1001074D0, (void (*)(uint64_t))sub_10001ECD4);
    os_log_type_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    os_log_type_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_10001ECD4();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100096C6C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10009753C(0, &qword_1001051E8, (void (*)(uint64_t))sub_100020334);
    os_log_type_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    os_log_type_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100096DE4(char a1, int64_t a2, char a3, void *a4, unint64_t *a5, void (*a6)(uint64_t), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (!v13)
  {
    long long v17 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10009753C(0, a5, a6);
  uint64_t v14 = *(void *)(a7(0) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  long long v17 = (void *)swift_allocObject();
  size_t v18 = j__malloc_size(v17);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v18 - v16 == 0x8000000000000000 && v15 == -1) {
    goto LABEL_34;
  }
  v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
LABEL_19:
  uint64_t v20 = *(void *)(a7(0) - 8);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  id v22 = (char *)v17 + v21;
  uint64_t v23 = (char *)a4 + v21;
  if (a1)
  {
    if (v17 < a4 || v22 >= &v23[*(void *)(v20 + 72) * v12])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v17 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v24 = *(void *)(v20 + 72) * v12;
  uint64_t v25 = &v22[v24];
  unint64_t v26 = (unint64_t)&v23[v24];
  if (v23 >= v25 || (unint64_t)v22 >= v26)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v17;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*sub_100097034(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100097150(v6, a2, a3);
  return sub_10009709C;
}

uint64_t (*sub_1000970A0(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000971D0(v6, a2, a3);
  return sub_10009709C;
}

void sub_100097108(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_100097150(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return j__s6Health10HKDataTypeOwxx;
  }
  __break(1u);
  return result;
}

void (*sub_1000971D0(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return destroy for HKDataType;
  }
  __break(1u);
  return result;
}

void destroy for HKDataType(id *a1)
{
}

void *sub_100097258(uint64_t a1, void *a2)
{
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v4; ++i)
    {
      Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      id v8 = [a2 displayTypeWithIdentifier:isa];

      if (v8)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_100097368()
{
  uint64_t v0 = self;
  id v1 = [objc_allocWithZone((Class)HKHealthStore) init];
  id v2 = [v0 sharedInstanceForHealthStore:v1];

  if (!v2) {
    goto LABEL_16;
  }
  id v3 = v2;
  unint64_t v4 = (unint64_t)sub_100097258((uint64_t)&off_1000F5318, v3);

  if (!(v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_4;
    }
LABEL_14:
    swift_bridgeObjectRelease();

    return;
  }
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  if (!v5) {
    goto LABEL_14;
  }
LABEL_4:
  sub_100096504(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }
  uint64_t v15 = v3;
  uint64_t v6 = 0;
  do
  {
    if ((v4 & 0xC000000000000001) != 0) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(v4 + 8 * v6 + 32);
    }
    id v8 = v7;
    uint64_t v9 = HKDisplayType.pinnedContentIdentifier.getter();
    uint64_t v11 = v10;

    unint64_t v13 = _swiftEmptyArrayStorage[2];
    unint64_t v12 = _swiftEmptyArrayStorage[3];
    if (v13 >= v12 >> 1) {
      sub_100096504(v12 > 1, v13 + 1, 1);
    }
    ++v6;
    _swiftEmptyArrayStorage[2] = v13 + 1;
    uint64_t v14 = &_swiftEmptyArrayStorage[2 * v13];
    v14[4] = v9;
    uint64_t v14[5] = v11;
  }
  while (v5 != v6);
  swift_bridgeObjectRelease();
}

void sub_10009753C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for _ContiguousArrayStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_100097590()
{
  if (!qword_100107668)
  {
    type metadata accessor for HealthViewEntity();
    sub_1000975F4();
    unint64_t v0 = type metadata accessor for IntentItem();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107668);
    }
  }
}

unint64_t sub_1000975F4()
{
  unint64_t result = qword_100104700;
  if (!qword_100104700)
  {
    type metadata accessor for HealthViewEntity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100104700);
  }
  return result;
}

void sub_10009764C()
{
  if (!qword_100107678)
  {
    sub_10001E254(255, (unint64_t *)&unk_100106AD0);
    unint64_t Descriptor = type metadata accessor for HKSampleQueryDescriptor();
    if (!v1) {
      atomic_store(Descriptor, (unint64_t *)&qword_100107678);
    }
  }
}

id sub_1000976B8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v7 - 8);
  id v8 = &v3[OBJC_IVAR____TtC6Health30CloudSyncWelcomeViewController_delegate];
  *(void *)&v3[OBJC_IVAR____TtC6Health30CloudSyncWelcomeViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  id v9 = objc_allocWithZone((Class)HKCloudSyncControl);
  uint64_t v10 = v3;
  id v11 = [v9 initWithHealthStore:a1];
  *(void *)&v10[OBJC_IVAR____TtC6Health30CloudSyncWelcomeViewController_cloudSyncControl] = v11;
  *((void *)v8 + 1) = a3;
  swift_unknownObjectWeakAssign();

  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v34.receiver = v10;
  v34.super_class = (Class)type metadata accessor for CloudSyncWelcomeViewController();
  id v14 = [super initWithTitle:v12 detailText:v13 icon:0 contentLayout:2];

  id v15 = v14;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  id v16 = [self boldButton];
  [v16 addTarget:v15 action:"didTapEnableCloudSync:" forControlEvents:64];
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v16 setTitle:v17 forState:0];

  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  id v18 = [self linkButton];
  [v18 addTarget:v15 action:"didTapDisableCloudSync:" forControlEvents:64];
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 setTitle:v19 forState:0];

  id v20 = v16;
  id v21 = v18;
  id v22 = [v15 buttonTray];
  [v22 addButton:v20];

  id v23 = v21;
  id v24 = [v15 buttonTray];
  [v24 addButton:v23];

  sub_100070EB8();
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1000CC0F0;
  *(void *)(v25 + 32) = 0xD00000000000002ALL;
  *(void *)(v25 + 4sub_10004C8C4(0, 0) = 0x80000001000D6100;
  strcpy((char *)(v25 + 48), "EnableButton");
  *(unsigned char *)(v25 + 61) = 0;
  *(_WORD *)(v25 + 62) = -5120;
  id v26 = v20;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v28 = (id)HKUIJoinStringsForAutomationIdentifier();

  [v26 setAccessibilityIdentifier:v28];
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1000CC0F0;
  *(void *)(v29 + 32) = 0xD00000000000002ALL;
  *(void *)(v29 + 4sub_10004C8C4(0, 0) = 0x80000001000D6100;
  strcpy((char *)(v29 + 48), "DisableButton");
  *(_WORD *)(v29 + 62) = -4864;
  id v30 = v23;
  Class v31 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v32 = (id)HKUIJoinStringsForAutomationIdentifier();

  [v30 setAccessibilityIdentifier:v32];
  swift_unknownObjectRelease();
  return v15;
}

void sub_100097D38()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC6Health30CloudSyncWelcomeViewController_cloudSyncControl);
  v3[4] = sub_100097E38;
  v3[5] = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_10000408C;
  v3[3] = &unk_1000F83D8;
  id v2 = _Block_copy(v3);
  [v1 enableCloudSyncWithCompletion:v2];
  _Block_release(v2);
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_10008A8F0(1);
    swift_unknownObjectRelease();
  }
  LOWORD(v3[0]) = 1288;
  sub_10005561C();
  AnalyticsSubmitting.submit()();
}

uint64_t sub_100097E38(char a1, uint64_t a2)
{
  return sub_100097F68(a1, a2, "Enable cloud sync success %{BOOL}d, error %{public}s");
}

void sub_100097E5C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC6Health30CloudSyncWelcomeViewController_cloudSyncControl);
  v3[4] = sub_100097F5C;
  v3[5] = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_10000408C;
  v3[3] = &unk_1000F83B0;
  id v2 = _Block_copy(v3);
  [v1 disableCloudSyncWithCompletion:v2];
  _Block_release(v2);
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_10008A8F0(0);
    swift_unknownObjectRelease();
  }
  LOWORD(v3[0]) = 1544;
  sub_10005561C();
  AnalyticsSubmitting.submit()();
}

uint64_t sub_100097F5C(char a1, uint64_t a2)
{
  return sub_100097F68(a1, a2, "Disable cloud sync success %{BOOL}d, error %{public}s");
}

uint64_t sub_100097F68(char a1, uint64_t a2, const char *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    id v18 = a3;
    uint64_t v13 = v12;
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 67109378;
    LODWORD(v19) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 8) = 2082;
    uint64_t v19 = a2;
    swift_errorRetain();
    sub_10009834C();
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v19 = sub_100018DA0(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, v18, (uint8_t *)v13, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000981C8(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_unknownObjectRetain();
  id v6 = a1;
  _bridgeAnyObjectToAny(_:)();
  uint64_t v7 = swift_unknownObjectRelease();
  a4(v7);

  return _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)&v9);
}

id sub_1000982A0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudSyncWelcomeViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for CloudSyncWelcomeViewController()
{
  return self;
}

uint64_t sub_100098344()
{
  return 8;
}

void sub_10009834C()
{
  if (!qword_100104660)
  {
    sub_10001E8C0();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100104660);
    }
  }
}

uint64_t sub_1000983AC(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000013;
  unint64_t v3 = 0x80000001000D0FE0;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000013;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x776F6C6C41;
      break;
    case 2:
      unint64_t v3 = 0xEB00000000776F6CLL;
      unint64_t v5 = 0x6C412074276E6F44;
      break;
    case 3:
      unint64_t v3 = 0xED00006174614420;
      unint64_t v5 = 0x794D206572616853;
      break;
    case 4:
      break;
    case 5:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x6E4F206E727554;
      break;
    case 6:
      unint64_t v3 = 0xED00006E4F206E72;
      unint64_t v5 = 0x75542074276E6F44;
      break;
    case 7:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x7472617453;
      break;
    default:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x65756E69746E6F43;
      break;
  }
  unint64_t v6 = 0x80000001000D0FE0;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x776F6C6C41) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v6 = 0xEB00000000776F6CLL;
      if (v5 != 0x6C412074276E6F44) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v6 = 0xED00006174614420;
      if (v5 != 0x794D206572616853) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      goto LABEL_21;
    case 5:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x6E4F206E727554) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      unint64_t v6 = 0xED00006E4F206E72;
      unint64_t v2 = 0x75542074276E6F44;
LABEL_21:
      if (v5 == v2) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 7:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x7472617453) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x65756E69746E6F43) {
        goto LABEL_25;
      }
LABEL_22:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_25:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100098660(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x80000001000D0ED0;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000012;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6C61654872756F59;
      unint64_t v3 = 0xEE00617461446874;
      break;
    case 2:
      break;
    case 3:
      unint64_t v5 = 0xD000000000000013;
      unint64_t v6 = "HealthNotifications";
      goto LABEL_10;
    case 4:
      unint64_t v5 = 0xD000000000000018;
      unint64_t v6 = "ImproveHealthAndActivity";
      goto LABEL_10;
    case 5:
      unint64_t v5 = 0xD000000000000014;
      unint64_t v6 = "ImproveHealthRecords";
      goto LABEL_10;
    case 6:
      unint64_t v5 = 0x5365766F72706D49;
      unint64_t v3 = 0xED00007974656661;
      break;
    case 7:
      unint64_t v5 = 0xD000000000000010;
      unint64_t v6 = "AccessHealthData";
      goto LABEL_10;
    case 8:
      unint64_t v6 = "CloudSyncTurnedOff";
LABEL_10:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    default:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x656D6F636C6557;
      break;
  }
  unint64_t v7 = 0x80000001000D0ED0;
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0x6C61654872756F59;
      unint64_t v7 = 0xEE00617461446874;
      break;
    case 2:
      break;
    case 3:
      unint64_t v2 = 0xD000000000000013;
      uint64_t v8 = "HealthNotifications";
      goto LABEL_20;
    case 4:
      unint64_t v2 = 0xD000000000000018;
      uint64_t v8 = "ImproveHealthAndActivity";
      goto LABEL_20;
    case 5:
      unint64_t v2 = 0xD000000000000014;
      uint64_t v8 = "ImproveHealthRecords";
      goto LABEL_20;
    case 6:
      unint64_t v2 = 0x5365766F72706D49;
      unint64_t v7 = 0xED00007974656661;
      break;
    case 7:
      unint64_t v2 = 0xD000000000000010;
      uint64_t v8 = "AccessHealthData";
      goto LABEL_20;
    case 8:
      uint64_t v8 = "CloudSyncTurnedOff";
LABEL_20:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      unint64_t v7 = 0xE700000000000000;
      unint64_t v2 = 0x656D6F636C6557;
      break;
  }
  if (v5 == v2 && v3 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_1000988DC(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000013;
  unint64_t v3 = 0x80000001000D0D80;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000013;
  switch(v4)
  {
    case 1:
      unint64_t v6 = "Article Highlight Alert Read States";
      goto LABEL_5;
    case 2:
      unint64_t v5 = 0xD000000000000026;
      unint64_t v7 = "Health Checklist Update Last Generated";
      goto LABEL_9;
    case 3:
      unint64_t v6 = "Health Checklist Update Last Viewed";
LABEL_5:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000023;
      break;
    case 4:
      unint64_t v5 = 0xD000000000000021;
      unint64_t v7 = "Health Checklist Update Dismissed";
      goto LABEL_9;
    case 5:
      unint64_t v5 = 0x6F636E4920444545;
      unint64_t v3 = 0xEE006574656C706DLL;
      break;
    case 6:
      unint64_t v5 = 0xD000000000000017;
      unint64_t v7 = "EED Complete w/o Stewie";
LABEL_9:
      unint64_t v3 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v8 = 0x80000001000D0D80;
  switch(a2)
  {
    case 1:
      char v9 = "Article Highlight Alert Read States";
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0xD000000000000026;
      uint64_t v10 = "Health Checklist Update Last Generated";
      goto LABEL_18;
    case 3:
      char v9 = "Health Checklist Update Last Viewed";
LABEL_14:
      unint64_t v8 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000023;
      break;
    case 4:
      unint64_t v2 = 0xD000000000000021;
      uint64_t v10 = "Health Checklist Update Dismissed";
      goto LABEL_18;
    case 5:
      unint64_t v2 = 0x6F636E4920444545;
      unint64_t v8 = 0xEE006574656C706DLL;
      break;
    case 6:
      unint64_t v2 = 0xD000000000000017;
      uint64_t v10 = "EED Complete w/o Stewie";
LABEL_18:
      unint64_t v8 = (unint64_t)(v10 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v8) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t sub_100098AEC()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for StubbedDeepLinkCanceler()
{
  return self;
}

uint64_t type metadata accessor for BuddyDataSource()
{
  uint64_t result = qword_100107760;
  if (!qword_100107760) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100098B6C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100098BB8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(void *)(v0 + qword_100107758) = 0;
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v15, "MutableArray<");
  HIWORD(v15[1]) = -4864;
  UUID.init()();
  uint64_t v5 = UUID.uuidString.getter();
  unint64_t v7 = v6;
  unint64_t v8 = *(void (**)(unsigned char *, uint64_t))(v2 + 8);
  v8(v4, v1);
  v9._uint64_t countAndFlagsBits = v5;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  uint64_t v11 = MutableArrayDataSource.init(arrangedSections:identifier:)();
  swift_retain_n();
  uint64_t v12 = sub_10009AC90((uint64_t)&off_1000F4878, v11);
  swift_release();
  sub_10009AE38(0, &qword_100104858, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for ArrayDataSourceSection();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000CBFD0;
  swift_retain();
  sub_1000B870C((uint64_t)v12);
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  v8(v4, v1);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)();
  dispatch thunk of MutableArrayDataSource.replaceAllSections(with:reconfigureOrReloadItemsIfNeeded:)();
  swift_bridgeObjectRelease();
  swift_release_n();
  return v11;
}

uint64_t sub_100098EA4@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = 0xD000000000000012;
  int v4 = *a1;
  switch(*a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      unint64_t v5 = 0x80000001000D63E0;
      if (v7)
      {
        int v6 = 0;
        switch(v4)
        {
          case 2:
            goto LABEL_16;
          case 3:
            int v6 = 0;
            goto LABEL_9;
          case 4:
            int v6 = 0;
            goto LABEL_11;
          case 5:
            int v6 = 0;
            goto LABEL_14;
          default:
            int v6 = 0;
            goto LABEL_7;
        }
      }
      else
      {
        int v6 = 1;
        switch(v4)
        {
          case 2:
            goto LABEL_16;
          case 3:
LABEL_9:
            unint64_t v3 = 0xD000000000000019;
            Swift::String v9 = "Improve Health & Activity";
            goto LABEL_12;
          case 4:
LABEL_11:
            unint64_t v3 = 0xD000000000000016;
            Swift::String v9 = "Improve Health Records";
LABEL_12:
            unint64_t v5 = (unint64_t)(v9 - 32) | 0x8000000000000000;
            goto LABEL_16;
          case 5:
LABEL_14:
            unint64_t v5 = 0xEE00797465666153;
            uint64_t v8 = 0x766F72706D49;
            goto LABEL_15;
          default:
LABEL_7:
            unint64_t v5 = 0xEF676E6972616853;
            uint64_t v8 = 0x6C69666F7250;
LABEL_15:
            unint64_t v3 = v8 & 0xFFFFFFFFFFFFLL | 0x2065000000000000;
            break;
        }
      }
      break;
    default:
      unint64_t v3 = 0x7964647542;
      unint64_t v5 = 0xE500000000000000;
      swift_bridgeObjectRelease();
      int v6 = 0;
      break;
  }
LABEL_16:
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(unsigned char *)(v11 + 24) = v4;
  return sub_10002B538(v3, v5, v6, (uint64_t)sub_10009AF0C, v11, a2);
}

uint64_t sub_100099160(void *a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000991D4(a3, a1);
    return swift_release();
  }
  return result;
}

void sub_1000991D4(char a1, id a2)
{
  switch(a1)
  {
    case 1:
      id v9 = [a2 resolvedHealthStore];
      if (!v9) {
        goto LABEL_17;
      }
      uint64_t v10 = v9;
      UIViewController.resolvedHealthExperienceStore.getter();
      uint64_t v16 = v2;
      type metadata accessor for BuddyDataSource();
      sub_10009AA60(&qword_1001077D8, (void (*)(uint64_t))type metadata accessor for BuddyDataSource);
      SummarySharingOnboardingPresenting.presentOnboardingVC(on:healthStore:healthExperienceStore:isInfoTile:needsOnboardingSetup:isPresentedViaLink:)();

      _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v17);
      return;
    case 2:
      id v8 = [a2 view];
      if (!v8)
      {
        __break(1u);
LABEL_17:
        int v14 = 0;
        uint64_t v13 = 70;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1000994B8);
      }
      id v15 = v8;
      sub_1000996E0(v8, a2);
      goto LABEL_7;
    case 3:
    case 5:
      uint64_t v11 = self;
      [v11 presentInViewController:a2 completion:0];
      return;
    case 4:
      uint64_t v7 = type metadata accessor for MainActor();
      __chkstk_darwin(v7);
      uint64_t v13 = (uint64_t)a2;
      sub_100099554((uint64_t)sub_10009ABEC, (uint64_t)&v12);
      return;
    default:
      id v4 = [a2 navigationController];
      if (!v4) {
        return;
      }
      unint64_t v5 = v4;
      v17[3] = type metadata accessor for StubbedDeepLinkCanceler();
      void v17[4] = &off_1000F8420;
      v17[0] = swift_allocObject();
      id v6 = objc_allocWithZone((Class)type metadata accessor for WelcomeViewController());
      id v15 = sub_100087A7C((uint64_t)v17);
      [v5 pushViewController:v15 animated:1];

LABEL_7:

      return;
  }
}

uint64_t sub_1000994D0(void *a1)
{
  type metadata accessor for ImprovementDataCollectionOptInViewController();
  *(void *)(swift_allocObject() + 16) = a1;
  id v2 = a1;
  static ImprovementDataCollectionOptInViewController.present(in:completion:)();
  return swift_release();
}

uint64_t sub_100099554(uint64_t a1, uint64_t a2)
{
  static MainActor.shared.getter();
  swift_release();
  swift_task_getMainExecutor();
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  sub_10009AC18();
  if (v2) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_6:
    _StringGuts.grow(_:)(66);
    v8._object = (void *)0x80000001000D6360;
    v8._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = 46;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void sub_1000996E0(void *a1, void *a2)
{
  uint64_t v5 = *v2;
  id v6 = [objc_allocWithZone((Class)HKHealthStore) init];
  id v7 = [objc_allocWithZone((Class)HKSharedSummaryCloudSyncManager) initWithHealthStore:v6];

  Swift::String v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = v5;
  void v12[4] = sub_10009AB30;
  v12[5] = v8;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = sub_10009A680;
  uint64_t v12[3] = &unk_1000F8458;
  Swift::String v9 = _Block_copy(v12);
  id v10 = a1;
  id v11 = a2;
  swift_release();
  [v7 fetchAccountInfoWithCompletion:v9];
  _Block_release(v9);
}

uint64_t sub_100099838(void *a1, uint64_t a2, void *a3, void *a4, char *a5)
{
  uint64_t v93 = a5;
  uint64_t v91 = a4;
  uint64_t v90 = a3;
  uint64_t v89 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  Swift::String v9 = (char *)v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v92 = (char *)v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009AE38(0, (unint64_t *)&unk_100104880, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v13 - 8);
  uint64_t v95 = (char *)v82 - v14;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v99 = *(void *)(v15 - 8);
  uint64_t v100 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  id v18 = (char *)v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v98 = (char *)v82 - v19;
  sub_10009AE38(0, &qword_1001077C8, (uint64_t (*)(uint64_t))&type metadata accessor for ContactDeepLinkingParameter, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v20 - 8);
  unint64_t v94 = (char *)v82 - v21;
  uint64_t v22 = type metadata accessor for SharingInviteFlowURLData();
  uint64_t v96 = *(void *)(v22 - 8);
  uint64_t v97 = v22;
  __chkstk_darwin(v22);
  uint64_t v102 = (char *)v82 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for ContactDeepLinkingParameter();
  uint64_t v103 = *(void *)(v24 - 8);
  uint64_t v104 = v24;
  __chkstk_darwin(v24);
  uint64_t v101 = (char *)v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = __chkstk_darwin(v26);
  id v30 = (char *)v82 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class v31 = (void *)__chkstk_darwin(v28);
  id v33 = (char *)v82 - v32;
  id v105 = v31;
  if (a1)
  {
    uint64_t v88 = v27;
    uint64_t v84 = v11;
    id v34 = a1;
    static Logger.general.getter();
    id v106 = v34;
    id v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v87 = v7;
    uint64_t v86 = v10;
    uint64_t v85 = v9;
    if (v37)
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      aBlock[0] = v83;
      *(_DWORD *)uint64_t v38 = 136315394;
      uint64_t v39 = _typeName(_:qualified:)();
      uint64_t v108 = sub_100018DA0(v39, v40, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2080;
      v82[1] = v38 + 14;
      uint64_t v93 = v18;
      id v41 = v106;
      id v42 = [v106 emailAddress];
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v45 = v44;

      uint64_t v108 = sub_100018DA0(v43, v45, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      id v18 = v93;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "[%s] Fetched cloudSyncAccountInfo identifier: %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v53 = v106;
    }
    (*(void (**)(char *, id))(v88 + 8))(v30, v105);
    uint64_t v54 = v100;
    id v55 = [v106 emailAddress];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v56 = v101;
    ContactDeepLinkingParameter.init(value:)();
    uint64_t v58 = v103;
    uint64_t v57 = v104;
    id v59 = v94;
    (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v94, v56, v104);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
    id v60 = v102;
    SharingInviteFlowURLData.init(contactData:)();
    uint64_t v61 = (uint64_t)v95;
    SharingInviteFlowURLData.url()();
    uint64_t v62 = v99;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v61, 1, v54) == 1)
    {

      (*(void (**)(char *, uint64_t))(v96 + 8))(v60, v97);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v57);
      return sub_100028AF8(v61);
    }
    else
    {
      id v64 = v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v98, v61, v54);
      NSString v65 = String._bridgeToObjectiveC()();
      id v66 = [self bundleWithIdentifier:v65];

      NSString v67 = String._bridgeToObjectiveC()();
      id v68 = [self imageNamed:v67 inBundle:v66];

      (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v18, v64, v54);
      id v105 = v68;
      static String.defaultURLProviderSubtitle.getter();
      id v69 = objc_allocWithZone((Class)type metadata accessor for HealthURLActivityItemProvider());
      char v70 = (void *)HealthURLActivityItemProvider.init(title:url:image:thumbnailImage:subtitle:)();
      sub_10002F03C();
      uint64_t v71 = (void *)static OS_dispatch_queue.main.getter();
      unint64_t v72 = (void *)swift_allocObject();
      unint64_t v73 = v90;
      v72[2] = v70;
      v72[3] = v73;
      uint64_t v74 = v91;
      v72[4] = v91;
      aBlock[4] = (uint64_t)sub_10009AB84;
      aBlock[5] = (uint64_t)v72;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100005388;
      aBlock[3] = (uint64_t)&unk_1000F84A8;
      uint64_t v75 = _Block_copy(aBlock);
      id v76 = v70;
      id v77 = v73;
      id v78 = v74;
      swift_release();
      uint64_t v79 = v92;
      static DispatchQoS.unspecified.getter();
      aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_10009AA60((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10009AE38(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
      sub_10001EF54();
      char v80 = v85;
      uint64_t v81 = v89;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v75);

      (*(void (**)(char *, uint64_t))(v87 + 8))(v80, v81);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v79, v86);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v98, v54);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v102, v97);
      return (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v101, v104);
    }
  }
  else
  {
    static Logger.general.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136315394;
      uint64_t v49 = _typeName(_:qualified:)();
      uint64_t v108 = sub_100018DA0(v49, v50, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2080;
      uint64_t v108 = a2;
      swift_errorRetain();
      sub_10009AE38(0, (unint64_t *)&qword_100104660, (uint64_t (*)(uint64_t))sub_10001E8C0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      uint64_t v51 = String.init<A>(reflecting:)();
      uint64_t v108 = sub_100018DA0(v51, v52, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "[%s] No cloudSyncAccountInfo was fetched: %s", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    return (*(uint64_t (**)(char *, id))(v27 + 8))(v33, v105);
  }
}

void sub_10009A524(void *a1, uint64_t a2, void *a3)
{
  sub_10009AB90();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1000CBFD0;
  *(void *)(v6 + 56) = type metadata accessor for HealthURLActivityItemProvider();
  *(void *)(v6 + 32) = a1;
  id v7 = objc_allocWithZone((Class)UIActivityViewController);
  id v8 = a1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = [v7 initWithActivityItems:isa applicationActivities:0];

  id v10 = [v12 popoverPresentationController];
  if (v10)
  {
    uint64_t v11 = v10;
    [v10 setSourceView:a2];
  }
  [a3 presentViewController:v12 animated:1 completion:0];
}

void sub_10009A650()
{
}

void sub_10009A680(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_10009A70C()
{
  return swift_release();
}

uint64_t sub_10009A71C()
{
  MutableArrayDataSource.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10009A76C()
{
  return type metadata accessor for BuddyDataSource();
}

uint64_t sub_10009A774@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for SummarySharingSetupAnalyticsBaseEvent.OnboardingLocation.summaryTab(_:);
  uint64_t v3 = type metadata accessor for SummarySharingSetupAnalyticsBaseEvent.OnboardingLocation();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_10009A7E8()
{
  return swift_retain();
}

uint64_t sub_10009A838(uint64_t a1)
{
  uint64_t v3 = (void *)(*v1 + qword_100107758);
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t (*sub_10009A890())()
{
  return j__swift_endAccess;
}

unint64_t sub_10009A900@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002B8B8(a1);
}

uint64_t sub_10009A97C(uint64_t a1, uint64_t a2)
{
  return sub_10002B8D0(a1, a2);
}

uint64_t sub_10009A9DC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10009AA60(&qword_1001077B0, (void (*)(uint64_t))type metadata accessor for BuddyDataSource);
  uint64_t result = sub_10009AA60(&qword_1001077B8, (void (*)(uint64_t))type metadata accessor for BuddyDataSource);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10009AA60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009AAA8()
{
  return sub_10009AA60(&qword_1001077C0, (void (*)(uint64_t))type metadata accessor for BuddyDataSource);
}

uint64_t sub_10009AAF0()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10009AB30(void *a1, uint64_t a2)
{
  return sub_100099838(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), *(char **)(v2 + 32));
}

uint64_t sub_10009AB3C()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_10009AB84()
{
  sub_10009A524(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

void sub_10009AB90()
{
  if (!qword_1001077D0)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001077D0);
    }
  }
}

uint64_t sub_10009ABEC()
{
  return sub_1000994D0(*(void **)(v0 + 16));
}

uint64_t sub_10009AC08()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009AC18()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10009AC40()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_10009AC78()
{
  return [*(id *)(v0 + 16) dismissViewControllerAnimated:1 completion:0];
}

void *sub_10009AC90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v17 = a2;
  uint64_t v16 = type metadata accessor for ContentConfigurationItem();
  uint64_t v5 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *(void *)(a1 + 16);
  Swift::String v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_100096494(0, v8, 0);
    Swift::String v9 = v19;
    id v10 = (char *)(a1 + 32);
    while (1)
    {
      char v11 = *v10++;
      char v18 = v11;
      sub_100098EA4(&v18, (uint64_t)v7);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      uint64_t v19 = v9;
      unint64_t v13 = v9[2];
      unint64_t v12 = v9[3];
      if (v13 >= v12 >> 1)
      {
        sub_100096494(v12 > 1, v13 + 1, 1);
        Swift::String v9 = v19;
      }
      v9[2] = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v13, v7, v16);
      if (!--v8) {
        return v9;
      }
    }
    swift_release();
  }
  return v9;
}

void sub_10009AE38(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_10009AE9C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009AED4()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10009AF0C(void *a1)
{
  return sub_100099160(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

void sub_10009AF20()
{
}

void sub_10009AF3C()
{
}

void sub_10009AF58()
{
}

uint64_t sub_10009AF84()
{
  return type metadata accessor for LoadingPersonalizedHighlightsDataSource();
}

uint64_t sub_10009AF8C()
{
  uint64_t v0 = type metadata accessor for LayoutConfiguration();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static LayoutConfiguration.card.getter();
  uint64_t v4 = LayoutConfiguration.layoutSection.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_10009B068@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UIListContentConfiguration();
  __chkstk_darwin(v2 - 8);
  ForYouSectionKind.localizedTitle.getter();
  static UIListContentConfiguration.extraProminentInsetGroupedHeader()();
  uint64_t v3 = type metadata accessor for HeaderItem();
  swift_allocObject();
  uint64_t v4 = HeaderItem.init(title:buttonText:buttonWasTapped:configuration:automationIdentifier:)();
  a1[3] = v3;
  uint64_t result = sub_100020654((unint64_t *)&unk_100105760, (void (*)(uint64_t))&type metadata accessor for HeaderItem);
  a1[4] = result;
  *a1 = v4;
  return result;
}

uint64_t type metadata accessor for InternalNotificationsDataSource()
{
  uint64_t result = qword_100107830;
  if (!qword_100107830) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10009B1D4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10009B214()
{
  uint64_t v0 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v52 = *(void *)(v0 - 8);
  uint64_t v53 = v0;
  __chkstk_darwin(v0);
  uint64_t v51 = (char *)v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C1B8(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2 - 8);
  unint64_t v50 = (char *)v40 - v3;
  uint64_t v45 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v44 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v43 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001C1B8(0, &qword_100104AB8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v40 - v6;
  uint64_t v42 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions();
  uint64_t v41 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UICellAccessory.DisplayedState();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v46 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for ContentConfigurationItem();
  uint64_t v49 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  id v55 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  v40[1] = UUID.uuidString.getter();
  v40[0] = v19;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v47 = v15 + 8;
  uint64_t v48 = v20;
  v20(v17, v14);
  void v58[3] = type metadata accessor for UIListContentConfiguration();
  v58[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
  sub_100004F38(v58);
  static UIListContentConfiguration.cell()();
  UIListContentConfiguration.text.setter();
  id v21 = [self blackColor];
  uint64_t v22 = (void (*)(char *, void))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v22(v57, 0);
  sub_10001C1B8(0, &qword_100104AC0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for UICellAccessory();
  uint64_t v23 = swift_allocObject();
  long long v54 = xmmword_1000CBFD0;
  *(_OWORD *)(v23 + 16) = xmmword_1000CBFD0;
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for UICellAccessory.DisplayedState.always(_:), v10);
  uint64_t v24 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)();
  static UICellAccessory.disclosureIndicator(displayed:options:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v42);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, void, uint64_t))(v44 + 104))(v43, enum case for CellDeselectionBehavior.default(_:), v45);
  uint64_t v25 = type metadata accessor for UIBackgroundConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v50, 1, 1, v25);
  (*(void (**)(char *, void, uint64_t))(v52 + 104))(v51, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v53);
  uint64_t v26 = v55;
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();
  sub_10001C1B8(0, &qword_100104858, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  type metadata accessor for ArrayDataSourceSection();
  *(_OWORD *)(swift_allocObject() + 16) = v54;
  sub_10001C1B8(0, (unint64_t *)&qword_100104860, (uint64_t (*)(uint64_t))sub_10001AE44, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = v54;
  uint64_t v28 = v56;
  *(void *)(v27 + 56) = v56;
  *(void *)(v27 + 64) = sub_10009BE7C(&qword_100104870, (void (*)(uint64_t))&type metadata accessor for ContentConfigurationItem);
  uint64_t v29 = sub_100004F38((uint64_t *)(v27 + 32));
  uint64_t v30 = v49;
  (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 16))(v29, v26, v28);
  UUID.init()();
  UUID.uuidString.getter();
  uint64_t v31 = v46;
  uint64_t v32 = v48;
  v48(v17, v46);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)();
  v58[0] = 0x3C53447961727241;
  v58[1] = 0xE800000000000000;
  UUID.init()();
  uint64_t v33 = UUID.uuidString.getter();
  id v35 = v34;
  v32(v17, v31);
  v36._uint64_t countAndFlagsBits = v33;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 62;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  uint64_t v38 = ArrayDataSource.init(arrangedSections:identifier:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v55, v56);
  return v38;
}

void sub_10009BBD0(void *a1)
{
  sub_100079DD4([a1 resolvedHealthStore], (uint64_t)v14);
  long long v11 = v14[4];
  long long v12 = v14[5];
  uint64_t v13 = v15;
  long long v7 = v14[0];
  long long v8 = v14[1];
  long long v9 = v14[2];
  long long v10 = v14[3];
  sub_10009BEC4();
  id v3 = objc_allocWithZone(v2);
  sub_10007AE28((uint64_t)v14);
  uint64_t v4 = (void *)UIHostingController.init(rootView:)();
  id v5 = [a1 navigationController];
  if (v5)
  {
    uint64_t v6 = v5;
    [v5 pushViewController:v4 animated:1];
    sub_10009BF74((uint64_t)v14);
  }
  else
  {
    sub_10009BF74((uint64_t)v14);
  }
}

void sub_10009BCB0()
{
}

void sub_10009BCCC()
{
}

void sub_10009BCE8()
{
}

uint64_t sub_10009BD14()
{
  return type metadata accessor for InternalNotificationsDataSource();
}

unint64_t sub_10009BD1C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002BFF4(a1);
}

uint64_t sub_10009BD98(uint64_t a1, uint64_t a2)
{
  return sub_10002B8D0(a1, a2);
}

uint64_t sub_10009BDF8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10009BE7C(&qword_100107880, (void (*)(uint64_t))type metadata accessor for InternalNotificationsDataSource);
  uint64_t result = sub_10009BE7C(&qword_100107888, (void (*)(uint64_t))type metadata accessor for InternalNotificationsDataSource);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10009BE7C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10009BEC4()
{
  if (!qword_100107890)
  {
    sub_10009BF20();
    unint64_t v0 = type metadata accessor for UIHostingController();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107890);
    }
  }
}

unint64_t sub_10009BF20()
{
  unint64_t result = qword_100107898;
  if (!qword_100107898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107898);
  }
  return result;
}

uint64_t sub_10009BF74(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_100079FD8();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_10009C00C()
{
  uint64_t v1 = type metadata accessor for SectionedDataSourceCardStackConfiguration();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  id v5 = *(void **)(v0 + qword_1001078E0);
  if (v5) {
    id v6 = [v5 viewController];
  }
  else {
    id v6 = 0;
  }
  sub_10001D360(v0 + qword_1001078E8, (uint64_t)v12);
  id v7 = [*(id *)(v0 + qword_1001078F0) profileIdentifier];
  id v8 = objc_allocWithZone((Class)type metadata accessor for NoticesDataSource());
  long long v9 = (void *)NoticesDataSource.init(healthExperienceStore:associatedProfileIdentifier:)();
  sub_10001C598();
  static SectionedDataSourceCardStackConfiguration.alertsStack(with:)();
  type metadata accessor for SummaryFeedDataSource(0);
  SnapshotDataSource.presentCardStackOriginalDataSource(viewController:dataSource:config:)();

  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_10009C1B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  long long v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E254(0, (unint64_t *)&qword_100105730);
  uint64_t v14 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_10009D0FC;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = &unk_1000F8630;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  sub_10004CF94(a2);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_1000188E4((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010958(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_10001EF54();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v18);
}

uint64_t sub_10009C4C0(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v24 = a3;
  sub_10001881C(0, &qword_1001079C8, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, sub_10001C410, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v22 - v10;
  sub_10001881C(0, &qword_1001079D8, (uint64_t (*)(uint64_t))sub_10001C444, sub_10001C500, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v22 - v15;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v23 = a2;
    uint64_t v19 = enum case for HideableDataSource.Visibility.visible<A>(_:);
    (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for HideableDataSource.Visibility.visible<A>(_:), v13);
    dispatch thunk of HideableDataSource.visibility.setter();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 104))(v11, v19, v5);
    if (HAFeatureFlagShowTrendsInSummary())
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
      dispatch thunk of HideableDataSource.visibility.setter();
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    uint64_t v20 = (void *)(v18 + qword_1001078E8);
    id v21 = [*(id *)(v18 + qword_1001078F0) profileIdentifier];
    sub_10000CDF0(v20, v21);

    if (v23) {
      v23();
    }
    return swift_release();
  }
  return result;
}

void sub_10009C7D0()
{
}

uint64_t sub_10009C800()
{
  sub_10001E68C(v0 + qword_1001078A0, (uint64_t (*)(void))sub_1000207E0);
  sub_10001E68C(v0 + qword_1001078A8, (uint64_t (*)(void))sub_10001E6EC);

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + qword_1001078E8);
  uint64_t v1 = v0 + qword_1001078F8;

  return _s6Health23OpenSleepScheduleIntentVwxx_0(v1);
}

uint64_t sub_10009C928()
{
  uint64_t v0 = CompoundSectionedDataSource.deinit();
  sub_10001E68C(v0 + qword_1001078A0, (uint64_t (*)(void))sub_1000207E0);
  sub_10001E68C(v0 + qword_1001078A8, (uint64_t (*)(void))sub_10001E6EC);

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + qword_1001078E8);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + qword_1001078F8);
  return v0;
}

uint64_t sub_10009CA58()
{
  sub_10009C928();

  return swift_deallocClassInstance();
}

uint64_t sub_10009CAAC()
{
  return type metadata accessor for SummaryFeedDataSource(0);
}

BOOL sub_10009CAB4()
{
  uint64_t v0 = (void *)JustObservingFetchedResultsControllerDataSource.frc.getter();
  id v1 = [v0 fetchedObjects];

  if (!v1) {
    return 1;
  }
  type metadata accessor for Feed();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  return v3 != 0;
}

void sub_10009CB6C(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  v8[4] = sub_10009D150;
  void v8[5] = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100005388;
  v8[3] = &unk_1000F86D0;
  uint64_t v5 = _Block_copy(v8);
  id v6 = a2;
  id v7 = a1;
  swift_release();
  [v7 performBlock:v5];
  _Block_release(v5);
}

void sub_10009CC50()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  id v6 = (char *)&v16 - v5;
  if (NSManagedObjectContext.doesFeedEligibleForDisplayExist(kind:associatedProfileIdentifier:)())
  {
    static Logger.personalization.getter();
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Highlights section timeout complete, no population operation needed", v9, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  }
  else
  {
    static Logger.personalization.getter();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Highlights section timeout complete, dispatching population operation", v12, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    sub_10001E254(0, (unint64_t *)&qword_100105858);
    uint64_t v13 = (void *)static NSOperationQueue.userInitiated.getter();
    id v14 = objc_allocWithZone((Class)type metadata accessor for PopulateDiscoverFeedOperation());
    uint64_t v15 = (void *)PopulateDiscoverFeedOperation.init(feedKinds:)();
    [v13 addOperation:v15];
  }
}

void sub_10009CEB8(void *a1, uint64_t a2, void *a3)
{
  sub_10001D360(a2, (uint64_t)v8);
  id v5 = objc_allocWithZone((Class)type metadata accessor for AllHighlightsByCategoryViewController());
  id v6 = a3;
  id v7 = (void *)AllHighlightsByCategoryViewController.init(healthExperienceStore:healthStore:provenance:)();
  [a1 showViewController:v7 sender:a1];
}

void sub_10009CF50()
{
}

void sub_10009CF80()
{
  swift_release();
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + qword_100107960);
  uint64_t v1 = *(void **)(v0 + qword_100107968);
}

uint64_t sub_10009CFE0()
{
  uint64_t v0 = CompoundSectionedDataSource.deinit();

  swift_release();
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + qword_100107960);

  return swift_deallocClassInstance();
}

uint64_t sub_10009D060()
{
  return type metadata accessor for HighlightsFeedWithShowAllHighlightsDataSource(0);
}

uint64_t sub_10009D068()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009D0A4()
{
  return sub_10009C1B4(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10009D0B4()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10009D0FC()
{
  return sub_10009C4C0(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10009D108()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10009D148()
{
  sub_10009CB6C(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

void sub_10009D150()
{
}

void sub_10009D160()
{
  if (!qword_1001058E8)
  {
    type metadata accessor for MutableArrayDataSourceWithLayout();
    unint64_t v0 = type metadata accessor for CellRegistering();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001058E8);
    }
  }
}

void sub_10009D1C4(void *a1)
{
  sub_10009CEB8(a1, v1 + 16, *(void **)(v1 + 56));
}

void sub_10009D1D0()
{
  if (!qword_100107A70)
  {
    type metadata accessor for UIUserInterfaceSizeClass(255);
    sub_100095F7C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100107A70);
    }
  }
}

unint64_t sub_10009D240()
{
  unint64_t result = qword_100107A78;
  if (!qword_100107A78)
  {
    sub_10001881C(255, &qword_100107A58, (uint64_t (*)(uint64_t))&type metadata accessor for NoticesDataSource, sub_10001C598, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107A78);
  }
  return result;
}

void *sub_10009D304(char a1)
{
  uint64_t v1 = sub_10009D348((uint64_t)off_1000F8770[a1]);
  swift_bridgeObjectRelease();
  return v1;
}

void *sub_10009D348(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100096504(0, v1, 0);
    uint64_t v3 = (char *)(a1 + 32);
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 2 * v4;
    do
    {
      char v6 = *v3++;
      unint64_t v7 = sub_10009D428(v6);
      uint64_t v9 = v8;
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v4 >= v10 >> 1) {
        sub_100096504(v10 > 1, v4 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v4 + 1;
      os_log_type_t v11 = &_swiftEmptyArrayStorage[v5];
      v11[4] = v7;
      void v11[5] = v9;
      v5 += 2;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

unint64_t sub_10009D428(char a1)
{
  unint64_t result = 0xD000000000000042;
  switch(a1)
  {
    case 2:
      unint64_t result = 0xD00000000000004FLL;
      break;
    case 3:
      unint64_t result = 0xD00000000000004CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000054;
      break;
    case 5:
      unint64_t result = 0xD000000000000047;
      break;
    case 6:
      unint64_t result = 0xD0000000000000C8;
      break;
    case 7:
      unint64_t result = 0xD0000000000000C8;
      break;
    case 8:
      unint64_t result = 0xD0000000000000BBLL;
      break;
    case 9:
      unint64_t result = 0xD0000000000000C7;
      break;
    case 10:
      unint64_t result = 0xD0000000000000D0;
      break;
    case 11:
      unint64_t result = 0xD000000000000061;
      break;
    case 12:
      unint64_t result = 0xD000000000000062;
      break;
    case 13:
      unint64_t result = 0xD000000000000060;
      break;
    case 14:
      unint64_t result = 0xD00000000000005ELL;
      break;
    case 15:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 16:
      unint64_t result = 0x1000000000000058;
      break;
    case 17:
      unint64_t result = 0xD000000000000028;
      break;
    case 18:
      unint64_t result = 0xD000000000000034;
      break;
    case 19:
      unint64_t result = 0xD000000000000019;
      break;
    case 20:
      unint64_t result = 0xD000000000000051;
      break;
    case 21:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 22:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 23:
      unint64_t result = 0xD000000000000043;
      break;
    case 25:
      unint64_t result = 0xD000000000000049;
      break;
    case 26:
      unint64_t result = 0xD00000000000003CLL;
      break;
    case 27:
      unint64_t result = 0xD000000000000040;
      break;
    case 28:
      unint64_t result = 0xD000000000000041;
      break;
    case 29:
      unint64_t result = 0xD00000000000004ELL;
      break;
    case 30:
      unint64_t result = 0xD00000000000004FLL;
      break;
    case 31:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 32:
      unint64_t result = 0xD000000000000017;
      break;
    case 33:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10009D70C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000F4DD0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

uint64_t sub_10009D758()
{
  if (*(void *)(v0 + 56))
  {
    uint64_t v1 = *(void *)(v0 + 56);
  }
  else
  {
    uint64_t v2 = sub_100005CD8();
    uint64_t v5 = type metadata accessor for PinnedContentManager();
    char v6 = &protocol witness table for PinnedContentManager;
    *(void *)&long long v4 = v2;
    type metadata accessor for StoreDemoModeManager();
    uint64_t v1 = swift_allocObject();
    sub_10001CD68(&v4, v1 + 16);
    *(void *)(v0 + 56) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_10009D948()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Health16LifecycleManager__preloadPluginsAfterLaunch;
  sub_100020968();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10009D9E4()
{
  sub_10009D948();

  return swift_deallocClassInstance();
}

uint64_t sub_10009DA3C()
{
  return type metadata accessor for LifecycleManager();
}

uint64_t sub_10009DA44()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t AllHealthDataViewController.__allocating_init(healthStore:healthExperienceStore:)(void *a1, uint64_t a2)
{
  unint64_t v3 = v2;
  char v6 = (char *)objc_allocWithZone(v3);
  unint64_t v7 = &v6[direct field offset for AllHealthDataViewController.providedPresentation];
  uint64_t v8 = enum case for Presentation.showAllData(_:);
  uint64_t v9 = type metadata accessor for Presentation();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v7, v8, v9);
  *(void *)&v6[qword_100107C88] = a1;
  sub_10001D360(a2, (uint64_t)&v6[qword_100107C90]);
  sub_10001D360(a2, (uint64_t)v13);
  type metadata accessor for AllHealthDataDataSource(0);
  swift_allocObject();
  id v10 = a1;
  AllHealthDataDataSource.init(healthStore:healthExperienceStore:)(v10, (uint64_t)v13);
  uint64_t v11 = CompoundDataSourceCollectionViewController.init(dataSource:)();

  _s6Health23OpenSleepScheduleIntentVwxx_0(a2);
  return v11;
}

uint64_t AllHealthDataViewController.providedPresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for AllHealthDataViewController.providedPresentation;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Presentation();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AllHealthDataViewController.providedPresentation.setter(uint64_t a1)
{
  uint64_t v3 = v1 + direct field offset for AllHealthDataViewController.providedPresentation;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Presentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*AllHealthDataViewController.providedPresentation.modify())()
{
  return j__swift_endAccess;
}

uint64_t AllHealthDataViewController.init(healthStore:healthExperienceStore:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v3 + direct field offset for AllHealthDataViewController.providedPresentation;
  uint64_t v7 = enum case for Presentation.showAllData(_:);
  uint64_t v8 = type metadata accessor for Presentation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104))(v6, v7, v8);
  *(void *)(v3 + qword_100107C88) = a1;
  sub_10001D360(a2, v3 + qword_100107C90);
  sub_10001D360(a2, (uint64_t)v12);
  type metadata accessor for AllHealthDataDataSource(0);
  swift_allocObject();
  id v9 = a1;
  AllHealthDataDataSource.init(healthStore:healthExperienceStore:)(v9, (uint64_t)v12);
  uint64_t v10 = CompoundDataSourceCollectionViewController.init(dataSource:)();

  _s6Health23OpenSleepScheduleIntentVwxx_0(a2);
  return v10;
}

void sub_10009DE10(char *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = &a1[direct field offset for AllHealthDataViewController.providedPresentation];
  uint64_t v6 = enum case for Presentation.showAllData(_:);
  uint64_t v7 = type metadata accessor for Presentation();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(v5, v6, v7);
  id v8 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall AllHealthDataViewController.viewDidLoad()()
{
  uint64_t v1 = type metadata accessor for DeepLinkActivityType();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (objc_class *)type metadata accessor for AllHealthDataViewController();
  v16.receiver = v0;
  v16.super_class = v5;
  [super viewDidLoad];
  id v6 = [self mainBundle];
  v7._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v17._uint64_t countAndFlagsBits = 0xD00000000000007FLL;
  v17._object = (void *)0x80000001000D76D0;
  v7._object = (void *)0x80000001000D76B0;
  v8._uint64_t countAndFlagsBits = 0x6C616548206C6C41;
  v8._object = (void *)0xEF61746144206874;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v17);

  NSString v9 = String._bridgeToObjectiveC()();
  [v0 setTitle:v9];

  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DeepLinkActivityType.allHealthData(_:), v1);
  uint64_t v10 = (void *)static HAUserActivity.createActivity(title:restorationType:profileIdentifier:eligibleForSearch:eligibleForHandoff:eligibleForPrediction:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  [v0 setUserActivity:v10];

  id v11 = [v0 collectionView];
  if (v11)
  {
    uint64_t v12 = v11;
    sub_100070EB8();
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1000CC0F0;
    *(void *)(v13 + 32) = 0xD00000000000001BLL;
    *(void *)(v13 + 4sub_10004C8C4(0, 0) = 0x80000001000CF720;
    strcpy((char *)(v13 + 48), "CollectionView");
    *(unsigned char *)(v13 + 63) = -18;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v15 = (id)HKUIJoinStringsForAutomationIdentifier();

    [v12 setAccessibilityIdentifier:v15];
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for AllHealthDataViewController()
{
  uint64_t result = qword_100107C98;
  if (!qword_100107C98) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10009E208(void *a1)
{
  id v1 = a1;
  AllHealthDataViewController.viewDidLoad()();
}

Swift::Void __swiftcall AllHealthDataViewController.viewDidAppear(_:)(Swift::Bool a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for AllHealthDataViewController();
  [super viewDidAppear:a1];
  id v3 = [v1 userActivity];
  if (v3)
  {
    uint64_t v4 = v3;
    [v1 submitUserActivityForRestoration:v3];
  }
}

void sub_10009E2D0(void *a1, uint64_t a2, uint64_t a3)
{
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for AllHealthDataViewController();
  id v4 = v7.receiver;
  [super viewDidAppear:a3];
  id v5 = [v4 userActivity];
  if (v5)
  {
    id v6 = v5;
    [v4 submitUserActivityForRestoration:v5];

    id v4 = v6;
  }
}

Swift::Void __swiftcall AllHealthDataViewController.registerReusableCollectionViewTypes()()
{
  type metadata accessor for CompoundDataSourceCollectionViewController();
  id v1 = (void (*)(void))method lookup function for CompoundDataSourceCollectionViewController();
  v1();
  id v2 = [v0 collectionView];
  if (v2)
  {
    type metadata accessor for PlaceholderTextCollectionViewCell();
    UICollectionView.registerCell<A>(_:)();
  }
  else
  {
    __break(1u);
  }
}

void AllHealthDataViewController.init(dataSource:)()
{
}

id AllHealthDataViewController.__allocating_init(collectionViewLayout:)(void *a1)
{
  id v3 = [objc_allocWithZone(v1) initWithCollectionViewLayout:a1];

  return v3;
}

void AllHealthDataViewController.init(collectionViewLayout:)()
{
}

void sub_10009E4B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_10009E4E8()
{
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + qword_100107C90);
  uint64_t v1 = v0 + direct field offset for AllHealthDataViewController.providedPresentation;
  uint64_t v2 = type metadata accessor for Presentation();
  id v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

id AllHealthDataViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AllHealthDataViewController();
  return [super dealloc];
}

uint64_t sub_10009E5AC(uint64_t a1)
{
  _s6Health23OpenSleepScheduleIntentVwxx_0(a1 + qword_100107C90);
  uint64_t v2 = a1 + direct field offset for AllHealthDataViewController.providedPresentation;
  uint64_t v3 = type metadata accessor for Presentation();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_10009E63C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + direct field offset for AllHealthDataViewController.providedPresentation;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Presentation();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10009E6C4()
{
  uint64_t result = type metadata accessor for Presentation();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10009E774()
{
  return type metadata accessor for AllHealthDataViewController();
}

uint64_t type metadata accessor for CloudSyncDownloadingViewController()
{
  uint64_t result = qword_100107CF8;
  if (!qword_100107CF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10009E7C8()
{
  sub_10001E2F4(319, &qword_100104D78, (void (*)(uint64_t))&type metadata accessor for Date);
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

void sub_10009E894(void *a1)
{
  uint64_t v3 = type metadata accessor for Locale();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v4 - 8);
  *(void *)&v1[qword_100107CE8 + 8] = 0;
  swift_unknownObjectWeakInit();
  id v5 = &v1[qword_100107CF0];
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v40 = 0;
  id v7 = objc_allocWithZone((Class)type metadata accessor for CloudSyncStateObserver());
  Swift::String v8 = v1;
  id v36 = a1;
  *(void *)&v8[qword_100108DB0] = CloudSyncStateObserver.init(healthStore:store:)();

  id v9 = [objc_allocWithZone((Class)UIView) init];
  id v10 = [self configurationWithPointSize:4 weight:1 scale:50.0];
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [self systemImageNamed:v11 withConfiguration:v10];

  if (v12)
  {
    uint64_t v13 = (objc_class *)type metadata accessor for ImageWithCircleBackground();
    id v14 = (char *)objc_allocWithZone(v13);
    *(void *)&v14[OBJC_IVAR____TtC6Health25ImageWithCircleBackground_image] = v12;
    v37.receiver = v14;
    v37.super_class = v13;
    id v15 = v12;
    id v16 = [super initWithFrame:0.0, 0.0, 0.0, 0.0];
    sub_1000A477C();

    id v17 = [v16 heightAnchor];
    if (qword_100104030 != -1) {
      swift_once();
    }
    id v18 = [v17 constraintEqualToConstant:*(double *)&qword_100108C40];

    [v18 setActive:1];
    id v9 = v16;
  }
  [self wapiCapability];
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  id v19 = v9;
  uint64_t v20 = (void *)OnboardingHeroWithLinkViewController.init(title:detailText:heroView:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:heroViewUsesIntrinsicHeight:)();
  sub_100070EB8();
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1000CC0F0;
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1000CC0F0;
  *(void *)(v22 + 32) = 0x626E4F7964647542;
  *(void *)(v22 + 4sub_10004C8C4(0, 0) = 0xEF676E696472616FLL;
  *(void *)(v22 + 48) = 0xD000000000000014;
  *(void *)(v22 + 56) = 0x80000001000D78C0;
  id v23 = v20;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v25 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (v25)
  {
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;

    *(void *)(v21 + 32) = v26;
    *(void *)(v21 + 4sub_10004C8C4(0, 0) = v28;
    strcpy((char *)(v21 + 48), "ContinueButton");
    *(unsigned char *)(v21 + 63) = -18;
    Class v29 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v30 = (id)HKUIJoinStringsForAutomationIdentifier();

    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_1000CC0F0;
    *(void *)(v31 + 32) = 0x626E4F7964647542;
    *(void *)(v31 + 4sub_10004C8C4(0, 0) = 0xEF676E696472616FLL;
    *(void *)(v31 + 48) = 0xD000000000000014;
    *(void *)(v31 + 56) = 0x80000001000D78C0;
    id v32 = v23;
    Class v33 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v34 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v34)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v32 setAccessibilityIdentifier:v35];

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10009EF24()
{
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for CloudSyncDownloadingViewController();
  [super viewDidLoad];
  id v1 = [v0 navigationItem];
  [v1 setHidesBackButton:1];

  id v2 = [v0 view];
  if (v2)
  {
    uint64_t v3 = v2;
    sub_100070EB8();
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1000CC0F0;
    *(void *)(v4 + 32) = 0x626E4F7964647542;
    *(void *)(v4 + 4sub_10004C8C4(0, 0) = 0xEF676E696472616FLL;
    *(void *)(v4 + 48) = 0xD000000000000014;
    *(void *)(v4 + 56) = 0x80000001000D78C0;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = (id)HKUIJoinStringsForAutomationIdentifier();

    if (v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v3 setAccessibilityIdentifier:v7];

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10009F0A4(void *a1)
{
  id v1 = a1;
  sub_10009EF24();
}

uint64_t sub_10009F0EC(char a1)
{
  id v2 = v1;
  sub_10001E2F4(0, &qword_100104D78, (void (*)(uint64_t))&type metadata accessor for Date);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v11 - v5;
  NSString v7 = (objc_class *)type metadata accessor for CloudSyncDownloadingViewController();
  v12.receiver = v2;
  v12.super_class = v7;
  [super viewDidAppear:a1 & 1];
  Date.init()();
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 0, 1, v8);
  uint64_t v9 = (uint64_t)v2 + qword_100107CF0;
  swift_beginAccess();
  sub_10009FE94((uint64_t)v6, v9);
  swift_endAccess();
  dispatch thunk of CloudSyncStateObserver.startFirstRestoreIfNeeded()();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  dispatch thunk of CloudSyncStateObserver.firstRestoreStateChangeHandler.setter();
  return swift_release();
}

void sub_10009F278(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_10009F328(a1);
  }
}

void sub_10009F2D4(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  sub_10009F0EC(a3);
}

uint64_t sub_10009F328(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v45 = v2;
  uint64_t v46 = v3;
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v42 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v42 - v10;
  uint64_t v12 = type metadata accessor for CloudSyncRestoreState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  id v16 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  id v18 = (char *)v42 - v17;
  id v19 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v19((char *)v42 - v17, a1, v12);
  v19(v16, (uint64_t)v18, v12);
  if (CloudSyncRestoreState.isOngoing.getter())
  {
    static Logger.cloudSync.getter();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v48 = v43;
      *(_DWORD *)uint64_t v22 = 136315138;
      v42[1] = v22 + 4;
      uint64_t v23 = _typeName(_:qualified:)();
      uint64_t v47 = sub_100018DA0(v23, v24, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%s] Sync in progress", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v45);
    id v25 = *(void (**)(char *, uint64_t))(v13 + 8);
    v25(v16, v12);
    return ((uint64_t (*)(char *, uint64_t))v25)(v18, v12);
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t))(v13 + 8);
    v27(v16, v12);
    int v28 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v18, v12);
    if (v28 == enum case for CloudSyncRestoreState.failed(_:))
    {
      static Logger.cloudSync.getter();
      Class v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 136315138;
        uint64_t v32 = _typeName(_:qualified:)();
        uint64_t v47 = sub_100018DA0(v32, v33, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%s] Sync failed", v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v6, v45);
    }
    else if (v28 == enum case for CloudSyncRestoreState.completed(_:))
    {
      static Logger.cloudSync.getter();
      id v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      BOOL v36 = os_log_type_enabled(v34, v35);
      uint64_t v38 = v45;
      uint64_t v37 = v46;
      if (v36)
      {
        long long v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        *(_DWORD *)long long v39 = 136315138;
        uint64_t v40 = _typeName(_:qualified:)();
        uint64_t v47 = sub_100018DA0(v40, v41, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "[%s] Sync completed", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v9, v38);
    }
    else
    {
      return ((uint64_t (*)(char *, uint64_t))v27)(v18, v12);
    }
  }
}

uint64_t sub_10009F918()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  sub_10001E2F4(0, (unint64_t *)&qword_100107320, (void (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v23 - v6;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v25 = v1;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v26 = v5;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v24 = v8;
    uint64_t v16 = _typeName(_:qualified:)();
    uint64_t v27 = sub_100018DA0(v16, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%s] User tapped Done while sync was in progress", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v26;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v24);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v19 = enum case for CloudSyncRestoreState.activelyRestoring(_:);
    uint64_t v20 = type metadata accessor for CloudSyncRestoreState();
    uint64_t v21 = *(void *)(v20 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 104))(v7, v19, v20);
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
    v22(v7, 0, 1, v20);
    v22(v5, 1, 1, v20);
    sub_10008AC30((uint64_t)v7, (uint64_t)v5);
    swift_unknownObjectRelease();
    sub_10009FF54((uint64_t)v5, (unint64_t *)&qword_100107320, (void (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
    return sub_10009FF54((uint64_t)v7, (unint64_t *)&qword_100107320, (void (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
  }
  return result;
}

void sub_10009FCC8(void *a1)
{
  id v1 = a1;
  sub_10009F918();
}

void sub_10009FD10()
{
}

void sub_10009FD40()
{
}

void sub_10009FD70()
{
  sub_100070F10(v0 + qword_100107CE8);
  sub_10009FF54(v0 + qword_100107CF0, &qword_100104D78, (void (*)(uint64_t))&type metadata accessor for Date);
  id v1 = *(void **)(v0 + qword_100108DB0);
}

id sub_10009FDDC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudSyncDownloadingViewController();
  return [super dealloc];
}

void sub_10009FE14(uint64_t a1)
{
  sub_100070F10(a1 + qword_100107CE8);
  sub_10009FF54(a1 + qword_100107CF0, &qword_100104D78, (void (*)(uint64_t))&type metadata accessor for Date);
  objc_super v2 = *(void **)(a1 + qword_100108DB0);
}

uint64_t sub_10009FE8C()
{
  return type metadata accessor for CloudSyncDownloadingViewController();
}

uint64_t sub_10009FE94(uint64_t a1, uint64_t a2)
{
  sub_10001E2F4(0, &qword_100104D78, (void (*)(uint64_t))&type metadata accessor for Date);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009FF14()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10009FF4C(uint64_t a1)
{
}

uint64_t sub_10009FF54(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_10001E2F4(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t type metadata accessor for HealthNotificationsWelcomeViewController()
{
  uint64_t result = qword_100107D70;
  if (!qword_100107D70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10009FFFC()
{
  return swift_initClassMetadata2();
}

void sub_1000A0064(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

id sub_1000A00CC()
{
  uint64_t v1 = qword_100107D68;
  objc_super v2 = *(void **)(v0 + qword_100107D68);
  if (v2)
  {
    id v3 = *(id *)(v0 + qword_100107D68);
  }
  else
  {
    id v4 = sub_1000A012C();
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    objc_super v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1000A012C()
{
  type metadata accessor for DiffableCollectionViewAdaptor();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = [self bundleForClass:ObjCClassFromMetadata];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [self imageNamed:v2 inBundle:v1];

  id v4 = [objc_allocWithZone((Class)UIImageView) initWithImage:v3];
  [v4 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v4 setContentMode:1];

  return v4;
}

char *sub_1000A0230(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Locale();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v7 - 8);
  *(void *)(v3 + qword_100107D58 + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v3 + qword_100107D6sub_10004C8C4(0, 0) = 0;
  *(void *)(v3 + qword_100107D68) = 0;
  *(void *)(v3 + qword_100107D48) = a1;
  *(void *)(v3 + qword_100107D5sub_10004C8C4(0, 0) = a2;
  swift_retain();
  swift_retain();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  sub_10004D48C();
  static AdvertisableFeature.Identifier.healthWelcomeFlowIdentifiers.getter();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  uint64_t v8 = (char *)(id)AdvertisableFeatureOnboardingViewController.init(featureManager:featureIdentifiers:title:detailText:subtitleText:icon:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1000193A8(0, (unint64_t *)&qword_100107330);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1000CC0F0;
  *(void *)(v10 + 32) = 0xD00000000000002DLL;
  *(void *)(v10 + 4sub_10004C8C4(0, 0) = 0x80000001000D7A00;
  strcpy((char *)(v10 + 48), "ContinueButton");
  *(unsigned char *)(v10 + 63) = -18;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = (id)HKUIJoinStringsForAutomationIdentifier();

  id v13 = [v8 hxui_addPrimaryFooterButtonWithTitle:v9 accessibilityIdentifier:v12];
  uint64_t v14 = *(void **)&v8[qword_100107D60];
  *(void *)&v8[qword_100107D60] = v13;

  sub_1000A0614();
  swift_release();
  swift_release();
  return v8;
}

void sub_1000A0614()
{
  id v1 = [v0 headerView];
  [v1 setAllowFullWidthIcon:1];

  id v2 = [v0 headerView];
  id v24 = [v2 customIconContainerView];

  if (v24)
  {
    [v24 setClipsToBounds:0];
    id v3 = sub_1000A00CC();
    [v24 addSubview:v3];

    id v4 = self;
    if ((objc_msgSend(v4, "hk_currentDeviceHas4InchScreen") & 1) != 0
      || objc_msgSend(v4, "hk_currentDeviceHas4Point7InchScreen"))
    {
      uint64_t v5 = self;
      sub_1000193A8(0, (unint64_t *)&qword_1001057E0);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_1000CEBC0;
      id v7 = sub_1000A00CC();
      id v8 = [v7 topAnchor];

      id v9 = [v24 topAnchor];
      id v10 = [v8 constraintEqualToAnchor:v9 constant:10.0];

      *(void *)(v6 + 32) = v10;
      id v11 = sub_1000A00CC();
      id v12 = [v11 leadingAnchor];

      id v13 = [v24 leadingAnchor];
      id v14 = [v12 constraintEqualToAnchor:v13];

      *(void *)(v6 + 4sub_10004C8C4(0, 0) = v14;
      id v15 = sub_1000A00CC();
      id v16 = [v15 trailingAnchor];

      id v17 = [v24 trailingAnchor];
      id v18 = [v16 constraintEqualToAnchor:v17];

      *(void *)(v6 + 48) = v18;
      id v19 = sub_1000A00CC();
      id v20 = [v19 bottomAnchor];

      id v21 = [v24 bottomAnchor];
      id v22 = [v20 constraintEqualToAnchor:v21];

      *(void *)(v6 + 56) = v22;
      specialized Array._endMutation()();
      sub_10001E254(0, &qword_100107088);
      v23.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v5 activateConstraints:v23.super.isa, v24, v6];
    }
    else
    {
      v23.super.Class isa = (Class)sub_1000A00CC();
      -[objc_class hk_alignConstraintsWithView:](v23.super.isa, "hk_alignConstraintsWithView:", v24, v24, v26);
    }
  }
}

void sub_1000A09A4(void *a1)
{
  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for HealthNotificationsWelcomeViewController();
  id v1 = v5.receiver;
  [super viewDidLoad];
  id v2 = [v1 view];
  if (v2)
  {
    id v3 = v2;
    NSString v4 = String._bridgeToObjectiveC()();
    [v3 setAccessibilityIdentifier:v4];

    sub_100050DB8();
  }
  else
  {
    __break(1u);
  }
}

void sub_1000A0A70()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter();
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v20 = ObjectType;
  if (v9)
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v19 = v3;
    id v11 = (uint8_t *)v10;
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)id v11 = 136315138;
    uint64_t v12 = _typeName(_:qualified:)();
    uint64_t v21 = sub_100018DA0(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s Primary footer button tapped", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v19);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  id v14 = *(void **)(v1 + qword_100107D60);
  if (v14) {
    [v14 showsBusyIndicator];
  }
  char v15 = dispatch thunk of AdvertisableFeatureOnboardingViewController.hasAdvertisableFeatures.getter();
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v20;
  *(void *)(v17 + 16) = v16;
  *(void *)(v17 + 24) = v18;
  swift_retain();
  sub_10004E894(v15 & 1, (uint64_t)sub_1000A28E4, v17);
  swift_release();
  swift_release();
  LOWORD(v22) = 3;
  sub_10005561C();
  AnalyticsSubmitting.submit()();
}

uint64_t sub_1000A0D44(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  char v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E254(0, (unint64_t *)&qword_100105730);
  uint64_t v21 = static OS_dispatch_queue.main.getter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = a1;
  *(void *)(v16 + 32) = a2;
  *(unsigned char *)(v16 + 4sub_10004C8C4(0, 0) = a3;
  *(void *)(v16 + 48) = a5;
  aBlock[4] = sub_1000A2930;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005388;
  aBlock[3] = &unk_1000F88F0;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  sub_1000522B0(a1, a2, a3);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100019D64((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10004D3AC();
  sub_100019D64((unint64_t *)&qword_100105A10, (void (*)(uint64_t))sub_10004D3AC);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v18 = (void *)v21;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v22);
}

void sub_1000A1060(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5)
{
  uint64_t v59 = a5;
  uint64_t v60 = a2;
  uint64_t v7 = type metadata accessor for Locale();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v57 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v57 - v17;
  if (!a4)
  {
    static Logger.advertisableFeatures.getter();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v58 = v9;
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      v62[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v24 = _typeName(_:qualified:)();
      v61[0] = sub_100018DA0(v24, v25, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s Notifying that the user tapped continue in order to proceed, supplying follow up items", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v58);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    }
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong) {
      goto LABEL_28;
    }
    id v34 = (void *)Strong;
    uint64_t v35 = swift_unknownObjectWeakLoadStrong();

    if (!v35) {
      goto LABEL_28;
    }
    BOOL v36 = (void *)v60;
LABEL_26:
    sub_10008B5B0((uint64_t)v36);
    swift_unknownObjectRelease();
    goto LABEL_28;
  }
  if (a4 == 1)
  {
    swift_beginAccess();
    uint64_t v19 = swift_unknownObjectWeakLoadStrong();
    if (v19)
    {
      uint64_t v20 = (void *)v19;
      sub_1000A1870(v60, a3);
    }
    goto LABEL_28;
  }
  if (!(v60 | a3))
  {
    static Logger.general.getter();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v58 = v9;
      uint64_t v40 = (uint8_t *)v39;
      v62[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315138;
      uint64_t v41 = _typeName(_:qualified:)();
      v61[0] = sub_100018DA0(v41, v42, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s Notifying that the user tapped continue in order to proceed, no follow up items", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v58);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
    }
    swift_beginAccess();
    uint64_t v50 = swift_unknownObjectWeakLoadStrong();
    if (!v50) {
      goto LABEL_28;
    }
    uint64_t v51 = (void *)v50;
    uint64_t v52 = swift_unknownObjectWeakLoadStrong();

    if (!v52) {
      goto LABEL_28;
    }
    BOOL v36 = _swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  if (v60 ^ 1 | a3)
  {
    static Logger.general.getter();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc();
      v61[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136315394;
      uint64_t v58 = v9;
      uint64_t v46 = _typeName(_:qualified:)();
      v62[0] = sub_100018DA0(v46, v47, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 12) = 2080;
      v62[0] = v60;
      v62[1] = a3;
      char v63 = 2;
      uint64_t v48 = String.init<A>(describing:)();
      v62[0] = sub_100018DA0(v48, v49, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s Did not proceed: %s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v58);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v26 = swift_unknownObjectWeakLoadStrong();
    if (v26)
    {
      uint64_t v27 = (void *)v26;
      sub_1000A1ED8();
    }
    swift_beginAccess();
    uint64_t v28 = swift_unknownObjectWeakLoadStrong();
    if (v28)
    {
      Class v29 = (void *)v28;
      os_log_type_t v30 = *(void **)(v28 + qword_100107D60);
      id v31 = v30;

      if (v30)
      {
        String.LocalizationValue.init(stringLiteral:)();
        static Locale.current.getter();
        String.init(localized:table:bundle:locale:comment:)();
        NSString v32 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v31 setTitle:v32 forState:0];
      }
    }
  }
LABEL_28:
  swift_beginAccess();
  uint64_t v53 = swift_unknownObjectWeakLoadStrong();
  if (v53)
  {
    long long v54 = (void *)v53;
    id v55 = *(void **)(v53 + qword_100107D60);
    id v56 = v55;

    if (v55)
    {
      [v56 hidesBusyIndicator];
    }
  }
}

void sub_1000A1828(void *a1)
{
  id v1 = a1;
  sub_1000A0A70();
}

void sub_1000A1870(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Locale();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v11 - 8);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v33 = a1;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [self alertControllerWithTitle:v12 message:v13 preferredStyle:1];

  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v3;
  id v16 = v3;
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  aBlock[4] = (uint64_t)sub_1000A297C;
  aBlock[5] = v15;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000A0064;
  aBlock[3] = (uint64_t)&unk_1000F8990;
  uint64_t v18 = _Block_copy(aBlock);
  swift_release();
  id v19 = [self actionWithTitle:v17 style:1 handler:v18];
  _Block_release(v18);

  sub_1000193A8(0, (unint64_t *)&qword_100107330);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1000CC0F0;
  *(void *)(v20 + 32) = 0xD00000000000002DLL;
  *(void *)(v20 + 4sub_10004C8C4(0, 0) = 0x80000001000D7A00;
  strcpy((char *)(v20 + 48), "CancelAction");
  *(unsigned char *)(v20 + 61) = 0;
  *(_WORD *)(v20 + 62) = -5120;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v22 = (id)HKUIJoinStringsForAutomationIdentifier();

  [v19 setAccessibilityIdentifier:v22];
  [v14 addAction:v19];
  static Logger.general.getter();
  swift_bridgeObjectRetain_n();
  id v34 = v9;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v31 = v7;
    uint64_t v26 = v25;
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315395;
    uint64_t v27 = _typeName(_:qualified:)();
    uint64_t ObjectType = (uint64_t)v19;
    uint64_t v35 = sub_100018DA0(v27, v28, aBlock);
    uint64_t v30 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2081;
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_100018DA0(v33, a2, aBlock);
    id v19 = (id)ObjectType;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s Showing alert with description: %{private}s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v30);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v34, v6);
  }
  [v16 presentViewController:v14 animated:1 completion:0];
}

uint64_t sub_1000A1E78()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    sub_10008B5B0((uint64_t)_swiftEmptyArrayStorage);
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1000A1ED8()
{
  v27[1] = swift_getObjectType();
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v32 = *(void *)(v0 - 8);
  uint64_t v33 = v0;
  __chkstk_darwin(v0);
  uint64_t v30 = (char *)v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Locale();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v3 - 8);
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v29 = [self alertControllerWithTitle:v4 message:v5 preferredStyle:1];

  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v40 = ConfigurationIntentResponseCode.rawValue.getter;
  uint64_t v41 = 0;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  os_log_type_t v38 = sub_1000A0064;
  uint64_t v39 = &unk_1000F8918;
  uint64_t v7 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v8 = self;
  id v9 = [v8 actionWithTitle:v6 style:1 handler:v7];
  _Block_release(v7);

  sub_1000193A8(0, (unint64_t *)&qword_100107330);
  uint64_t v10 = swift_allocObject();
  long long v28 = xmmword_1000CC0F0;
  *(_OWORD *)(v10 + 16) = xmmword_1000CC0F0;
  *(void *)(v10 + 32) = 0xD00000000000002DLL;
  *(void *)(v10 + 4sub_10004C8C4(0, 0) = 0x80000001000D7A00;
  strcpy((char *)(v10 + 48), "CancelAction");
  *(unsigned char *)(v10 + 61) = 0;
  *(_WORD *)(v10 + 62) = -5120;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = (id)HKUIJoinStringsForAutomationIdentifier();

  [v9 setAccessibilityIdentifier:v12];
  id v13 = v29;
  id v31 = v9;
  [v29 addAction:v9];
  id v14 = v13;
  String.LocalizationValue.init(stringLiteral:)();
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v40 = sub_1000A262C;
  uint64_t v41 = 0;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  id v16 = v30;
  os_log_type_t v38 = sub_1000A0064;
  uint64_t v39 = &unk_1000F8940;
  NSString v17 = _Block_copy(&aBlock);
  swift_release();
  id v18 = [v8 actionWithTitle:v15 style:0 handler:v17];
  _Block_release(v17);

  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = v28;
  *(void *)(v19 + 32) = 0xD00000000000002DLL;
  *(void *)(v19 + 4sub_10004C8C4(0, 0) = 0x80000001000D7A00;
  strcpy((char *)(v19 + 48), "SettingsAction");
  *(unsigned char *)(v19 + 63) = -18;
  Class v20 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v21 = (id)HKUIJoinStringsForAutomationIdentifier();

  [v18 setAccessibilityIdentifier:v21];
  [v14 addAction:v18];
  [v14 setPreferredAction:v18];
  static Logger.general.getter();
  id v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v24 = 136315138;
    uint64_t v25 = _typeName(_:qualified:)();
    uint64_t v35 = sub_100018DA0(v25, v26, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s Showing notification authorization denied alert", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v33);
  [v34 presentViewController:v14 animated:1 completion:0];
}

uint64_t sub_1000A262C()
{
  uint64_t v0 = type metadata accessor for ExternalDeepLink();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for ExternalDeepLink.healthSettings(_:), v0);
  ExternalDeepLink.open()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

void sub_1000A2710()
{
}

void sub_1000A2740()
{
  swift_release();
  swift_release();
  sub_100070F10(v0 + qword_100107D58);

  uint64_t v1 = *(void **)(v0 + qword_100107D68);
}

id sub_1000A27B0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HealthNotificationsWelcomeViewController();
  return [super dealloc];
}

void sub_1000A27E8(uint64_t a1)
{
  swift_release();
  swift_release();
  sub_100070F10(a1 + qword_100107D58);

  objc_super v2 = *(void **)(a1 + qword_100107D68);
}

uint64_t sub_1000A2864()
{
  return type metadata accessor for HealthNotificationsWelcomeViewController();
}

uint64_t sub_1000A286C()
{
  return 3;
}

uint64_t sub_1000A2874()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A28AC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A28E4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return sub_1000A0D44(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1000A28EC()
{
  swift_release();
  sub_100051F3C(*(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000A2930()
{
  sub_1000A1060(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1000A2944()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A297C()
{
  return sub_1000A1E78();
}

void sub_1000A2998()
{
  uint64_t v1 = *v0;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = v1;
  uint64_t v3 = *(uint64_t *)((char *)v0 + qword_100105610);
  id v4 = objc_allocWithZone((Class)HKProfileStore);
  swift_retain();
  id v5 = [v4 initWithHealthStore:v3];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_1000A2C48;
  *(void *)(v6 + 24) = v2;
  v8[4] = sub_1000A43F4;
  void v8[5] = v6;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1000A43FC;
  v8[3] = &unk_1000F8A08;
  uint64_t v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  [v5 fetchAllProfilesWithCompletion:v7];
  _Block_release(v7);
  swift_release();
}

uint64_t sub_1000A2B10(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_10;
    }
  }
  if (v6 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v8 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(a1 + 8 * v8 + 32);
    }
    uint64_t v10 = v9;
    ++v8;
    id v11 = v9;
    sub_1000A2C50(&v11, a2, a3);
  }
  while (v6 != v8);
LABEL_10:

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A2C10()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A2C48(unint64_t a1)
{
  return sub_1000A2B10(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_1000A2C50(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = (void *)*a1;
  id v6 = [objc_allocWithZone((Class)HKProfileStore) initWithHealthStore:*a1];
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a2;
  v7[3] = v5;
  v7[4] = a3;
  v10[4] = sub_1000A44A8;
  v10[5] = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  void v10[2] = sub_1000A3E08;
  v10[3] = &unk_1000F8A58;
  uint64_t v8 = _Block_copy(v10);
  swift_retain();
  id v9 = v5;
  swift_release();
  [v6 fetchDisplayName:v8];
  _Block_release(v8);
}

uint64_t sub_1000A2D70(void (*a1)(char *, uint64_t), uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  unint64_t v94 = a8;
  uint64_t v97 = a7;
  uint64_t v117 = a6;
  uint64_t v96 = a3;
  uint64_t v95 = a1;
  uint64_t v111 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  id v11 = (char *)v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v110 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v108 = (char *)v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for DispatchQoS();
  uint64_t v107 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  id v106 = (char *)v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for SectionedDataSourceContainerViewType();
  uint64_t v102 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v101 = (char *)v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A46AC(0, &qword_100104850, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v16 - 8);
  uint64_t v113 = (char *)v82 - v17;
  uint64_t v112 = type metadata accessor for CellDeselectionBehavior();
  uint64_t v115 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v98 = (char *)v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  id v22 = (char *)v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for ContentConfigurationItem();
  uint64_t v104 = *(void *)(v105 - 8);
  uint64_t v23 = *(void *)(v104 + 64);
  uint64_t v24 = __chkstk_darwin(v105);
  uint64_t v100 = (char *)v82 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v99 = (char *)v82 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v103 = (char *)v82 - v28;
  __chkstk_darwin(v27);
  char v116 = (char *)v82 - v29;
  uint64_t v30 = type metadata accessor for PersonNameComponents();
  uint64_t v31 = __chkstk_darwin(v30);
  id v34 = (char *)v82 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5)
  {
    static Logger.profile.getter();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v124 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315138;
      uint64_t aBlock = v94;
      swift_getMetatypeMetadata();
      uint64_t v38 = String.init<A>(describing:)();
      uint64_t aBlock = (void *)sub_100018DA0(v38, v39, &v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "[%s] There was an error while getting the tinker user's name", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v111);
  }
  else
  {
    uint64_t v93 = v34;
    uint64_t v111 = v31;
    unint64_t v94 = v32;
    PersonNameComponents.init()();
    swift_bridgeObjectRetain();
    PersonNameComponents.givenName.setter();
    swift_bridgeObjectRetain();
    PersonNameComponents.familyName.setter();
    uint64_t v41 = self;
    Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    id v43 = [v41 localizedStringFromPersonNameComponents:isa style:2 options:0];

    os_log_type_t v44 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v96 = v44;
    uint64_t v46 = v45;

    uint64_t aBlock = v44;
    uint64_t v119 = v46;
    swift_bridgeObjectRetain();
    v47._uint64_t countAndFlagsBits = 0x656C69666F725020;
    v47._object = (void *)0xE800000000000000;
    String.append(_:)(v47);
    uint64_t v48 = swift_allocObject();
    unint64_t v49 = v97;
    *(void *)(v48 + 16) = v117;
    *(void *)(v48 + 24) = v49;
    swift_retain();
    id v90 = v49;
    UUID.init()();
    v82[1] = UUID.uuidString.getter();
    v82[0] = v50;
    uint64_t v92 = v19;
    uint64_t v95 = *(void (**)(char *, uint64_t))(v20 + 8);
    v95(v22, v19);
    uint64_t v91 = type metadata accessor for UIListContentConfiguration();
    uint64_t v121 = (void *)v91;
    unint64_t v122 = (uint64_t (*)())&protocol witness table for UIListContentConfiguration;
    sub_100004F38((uint64_t *)&aBlock);
    static UIListContentConfiguration.cell()();
    swift_bridgeObjectRetain();
    UIListContentConfiguration.text.setter();
    id v89 = self;
    id v51 = [v89 tintColor];
    uint64_t v52 = UIListContentConfiguration.textProperties.modify();
    uint64_t v97 = (void *)v12;
    uint64_t v53 = (void (*)(uint64_t *, void))v52;
    UIListContentConfiguration.TextProperties.color.setter();
    v53(&v124, 0);
    long long v54 = v98;
    unsigned char *v98 = 1;
    unsigned int v88 = enum case for CellDeselectionBehavior.deselectOnDidSelect(_:);
    id v55 = *(void (**)(void))(v115 + 104);
    v115 += 104;
    uint64_t v87 = (void (*)(unsigned char *, void, uint64_t))v55;
    v55(v54);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v85 = type metadata accessor for UIBackgroundConfiguration();
    uint64_t v56 = *(void *)(v85 - 8);
    uint64_t v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56);
    uint64_t v86 = v56 + 56;
    v84(v113, 1, 1, v85);
    unsigned int v83 = enum case for SectionedDataSourceContainerViewType.collectionView(_:);
    uint64_t v102 = *(void *)(v102 + 104);
    uint64_t v57 = v101;
    ((void (*)(char *))v102)(v101);
    ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();
    swift_release();
    uint64_t aBlock = v96;
    uint64_t v119 = v46;
    swift_bridgeObjectRetain();
    v58._uint64_t countAndFlagsBits = 0x6C61636964654D20;
    v58._object = (void *)0xEB00000000444920;
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    uint64_t v59 = swift_allocObject();
    uint64_t v60 = v90;
    *(void *)(v59 + 16) = v117;
    *(void *)(v59 + 24) = v60;
    swift_retain();
    id v61 = v60;
    UUID.init()();
    id v90 = (id)UUID.uuidString.getter();
    uint64_t v96 = v62;
    v95(v22, v92);
    uint64_t v121 = (void *)v91;
    unint64_t v122 = (uint64_t (*)())&protocol witness table for UIListContentConfiguration;
    sub_100004F38((uint64_t *)&aBlock);
    static UIListContentConfiguration.cell()();
    swift_bridgeObjectRetain();
    UIListContentConfiguration.text.setter();
    id v63 = [v89 tintColor];
    id v64 = (void (*)(uint64_t *, void))UIListContentConfiguration.textProperties.modify();
    UIListContentConfiguration.TextProperties.color.setter();
    v64(&v124, 0);
    *long long v54 = 1;
    v87(v54, v88, v112);
    swift_retain();
    swift_bridgeObjectRelease();
    v84(v113, 1, 1, v85);
    ((void (*)(char *, void, uint64_t))v102)(v57, v83, v114);
    NSString v65 = v103;
    ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)();
    swift_release();
    sub_10001E254(0, (unint64_t *)&qword_100105730);
    uint64_t v115 = static OS_dispatch_queue.main.getter();
    uint64_t v66 = v104;
    NSString v67 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
    id v68 = v99;
    uint64_t v69 = v105;
    v67(v99, v116, v105);
    char v70 = v100;
    v67(v100, v65, v69);
    uint64_t v71 = *(unsigned __int8 *)(v66 + 80);
    uint64_t v72 = (v71 + 24) & ~v71;
    uint64_t v73 = (v23 + v71 + v72) & ~v71;
    uint64_t v74 = swift_allocObject();
    *(void *)(v74 + 16) = v117;
    uint64_t v75 = *(void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    v75(v74 + v72, v68, v69);
    v75(v74 + v73, v70, v69);
    unint64_t v122 = sub_1000A461C;
    uint64_t v123 = v74;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v119 = 1107296256;
    unint64_t v120 = sub_100005388;
    uint64_t v121 = &unk_1000F8AF8;
    id v76 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    id v77 = v106;
    static DispatchQoS.unspecified.getter();
    uint64_t aBlock = _swiftEmptyArrayStorage;
    sub_100019E3C((unint64_t *)&qword_100105A00, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000A46AC(0, (unint64_t *)&qword_100105740, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    sub_10001EF54();
    id v78 = v108;
    uint64_t v79 = v97;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    char v80 = (void *)v115;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v76);

    (*(void (**)(char *, void *))(v110 + 8))(v78, v79);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v77, v109);
    uint64_t v81 = *(void (**)(char *, uint64_t))(v66 + 8);
    v81(v65, v69);
    v81(v116, v69);
    return ((uint64_t (*)(char *, uint64_t))v94[1])(v93, v111);
  }
}

uint64_t sub_1000A3C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ContentConfigurationItem();
  uint64_t v12 = v5;
  uint64_t v6 = sub_100019E3C(&qword_100104870, (void (*)(uint64_t))&type metadata accessor for ContentConfigurationItem);
  uint64_t v13 = v6;
  uint64_t v7 = sub_100004F38(v11);
  uint64_t v8 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  v8(v7, a2, v5);
  type metadata accessor for AuxiliaryProfilesDataSource();
  uint64_t result = SnapshotDataSource.sectionIdentifiers.getter();
  if (*(void *)(result + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    dispatch thunk of MutableArrayDataSource.append(item:toSectionWithID:)();
    swift_bridgeObjectRelease();
    _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v11);
    uint64_t v12 = v5;
    uint64_t v13 = v6;
    uint64_t v10 = sub_100004F38(v11);
    v8(v10, a3, v5);
    uint64_t result = SnapshotDataSource.sectionIdentifiers.getter();
    if (*(void *)(result + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      dispatch thunk of MutableArrayDataSource.append(item:toSectionWithID:)();
      swift_bridgeObjectRelease();
      return _s6Health23OpenSleepScheduleIntentVwxx_0((uint64_t)v11);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A3E08(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    if (v5)
    {
LABEL_3:
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v5 = v11;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v10 = 0;
LABEL_6:
  swift_retain();
  id v12 = a4;
  v6(v7, v9, v10, v5, a4);
  swift_release();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A3ED8(unint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2 && a1)
  {
    uint64_t v34 = (uint64_t)_swiftEmptyArrayStorage;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v12 = result;
      if (result)
      {
LABEL_5:
        if (v12 < 1)
        {
          __break(1u);
          goto LABEL_37;
        }
        for (uint64_t i = 0; i != v12; ++i)
        {
          if ((a1 & 0xC000000000000001) != 0) {
            id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v15 = *(id *)(a1 + 8 * i + 32);
          }
          uint64_t v16 = v15;
          if ([v15 type] == (id)3)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v23 = v34;
        if (v34 < 0) {
          goto LABEL_31;
        }
LABEL_22:
        if ((v23 & 0x4000000000000000) == 0)
        {
          uint64_t v24 = *(void *)(v23 + 16);
          if (!v24)
          {
LABEL_32:
            swift_release();
            a3((uint64_t)_swiftEmptyArrayStorage);
LABEL_33:
            return swift_bridgeObjectRelease();
          }
          goto LABEL_24;
        }
LABEL_31:
        swift_bridgeObjectRetain();
        uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (!v24) {
          goto LABEL_32;
        }
LABEL_24:
        uint64_t v34 = (uint64_t)_swiftEmptyArrayStorage;
        uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
        if ((v24 & 0x8000000000000000) == 0)
        {
          uint64_t v31 = a4;
          uint64_t v32 = a3;
          uint64_t v25 = 0;
          do
          {
            if ((v23 & 0xC000000000000001) != 0) {
              id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v26 = *(id *)(v23 + 8 * v25 + 32);
            }
            uint64_t v27 = v26;
            ++v25;
            id v28 = [objc_allocWithZone((Class)HKHealthStore) init];
            [v28 setProfileIdentifier:v27];
            [v28 resume];

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          while (v24 != v25);
          uint64_t v29 = v34;
          swift_release();
          v32(v29);
          goto LABEL_33;
        }
LABEL_37:
        __break(1u);
        return result;
      }
    }
    else
    {
      uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v12) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v23 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_31;
    }
    goto LABEL_22;
  }
  static Logger.profile.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v31 = a4;
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v33 = a2;
    uint64_t v34 = v20;
    uint64_t v32 = a3;
    *(_DWORD *)uint64_t v19 = 136315138;
    v30[1] = v19 + 4;
    swift_errorRetain();
    sub_1000A46AC(0, (unint64_t *)&qword_100104660, (uint64_t (*)(uint64_t))sub_10001E8C0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v33 = sub_100018DA0(v21, v22, &v34);
    a3 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "There was an error fetching tinker profiles: %s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return ((uint64_t (*)(void *))a3)(_swiftEmptyArrayStorage);
}

uint64_t sub_1000A43BC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A43F4(unint64_t a1, uint64_t a2)
{
  return sub_1000A3ED8(a1, a2, *(void (**)(uint64_t))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000A43FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10001E254(0, &qword_100107DC0);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A44A0()
{
  return sub_1000A44D0(40);
}

uint64_t sub_1000A44A8(void (*a1)(char *, uint64_t), uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return sub_1000A2D70(a1, a2, a3, a4, a5, *(void *)(v5 + 16), *(void **)(v5 + 24), *(void **)(v5 + 32));
}

uint64_t sub_1000A44B4()
{
  return sub_1000A44D0(32);
}

uint64_t sub_1000A44BC(void *a1)
{
  return sub_100040CA4(*(void *)(v1 + 24), a1);
}

uint64_t sub_1000A44C8()
{
  return sub_1000A44D0(32);
}

uint64_t sub_1000A44D0(uint64_t a1)
{
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

void sub_1000A451C(void *a1)
{
  sub_100041038(*(void *)(v1 + 24), a1);
}

uint64_t sub_1000A4528()
{
  uint64_t v1 = type metadata accessor for ContentConfigurationItem();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release();
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v6);
}

uint64_t sub_1000A461C()
{
  uint64_t v1 = *(void *)(type metadata accessor for ContentConfigurationItem() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + ((*(void *)(v1 + 64) + v2 + v3) & ~v2);

  return sub_1000A3C64(v4, v0 + v3, v5);
}

void sub_1000A46AC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1000A477C()
{
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v1 = [self secondarySystemBackgroundColor];
  [v0 setBackgroundColor:v1];

  id v2 = [objc_allocWithZone((Class)UIImageView) initWithImage:*(void *)&v0[OBJC_IVAR____TtC6Health25ImageWithCircleBackground_image]];
  [v2 setContentMode:1];
  [v0 addSubview:v2];
  [v2 hk_alignConstraintsWithView:v0 insets:12.0, 12.0, 12.0, 12.0];
  id v3 = [v0 heightAnchor];
  id v4 = [v0 widthAnchor];
  id v6 = [v3 constraintEqualToAnchor:v4];

  LODWORD(v5) = 1148846080;
  [v6 setPriority:v5];
  [v6 setActive:1];
}

id sub_1000A49DC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ImageWithCircleBackground();
  return [super dealloc];
}

uint64_t type metadata accessor for ImageWithCircleBackground()
{
  return self;
}

uint64_t sub_1000A4A44@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v40 = a1;
  sub_1000A4F68(0);
  uint64_t v39 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v38 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v36 - v6;
  uint64_t v7 = type metadata accessor for Calendar();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A4F9C(0, &qword_100104D78, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  os_log_type_t v36 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v36 - v19;
  __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v36 - v21;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v41 = &_swiftEmptySetSingleton;
  sub_1000A5000();
  State.init(wrappedValue:)();
  uint64_t v23 = v43;
  a2[3] = v42;
  a2[4] = v23;
  static Date.now.getter();
  static Calendar.current.getter();
  Date.startOfWeek(for:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v15 + 8);
  v24(v20, v14);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    id v26 = (int *)type metadata accessor for ExportDatasetView(0);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v22, v13, v14);
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v27(v20, v22, v14);
    State.init(wrappedValue:)();
    v24(v22, v14);
    static Date.now.getter();
    v27(v36, v20, v14);
    State.init(wrappedValue:)();
    v24(v20, v14);
    id v28 = (void *)((char *)a2 + v26[9]);
    uint64_t v41 = (void *)sub_1000B008C();
    sub_1000B0708(0, &qword_100107E00, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    State.init(wrappedValue:)();
    uint64_t v29 = v43;
    *id v28 = v42;
    v28[1] = v29;
    uint64_t v30 = (char *)a2 + v26[10];
    LOBYTE(v41) = 0;
    State.init(wrappedValue:)();
    uint64_t v31 = v43;
    *uint64_t v30 = v42;
    *((void *)v30 + 1) = v31;
    uint64_t v32 = (char *)a2 + v26[11];
    LOBYTE(v41) = 0;
    State.init(wrappedValue:)();
    uint64_t v33 = v43;
    char *v32 = v42;
    *((void *)v32 + 1) = v33;
    uint64_t v34 = type metadata accessor for URL();
    uint64_t v35 = (uint64_t)v37;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v37, 1, 1, v34);
    sub_1000B3CC0(v35, v38, (uint64_t (*)(void))sub_1000A4F68);
    State.init(wrappedValue:)();
    uint64_t result = sub_1000B3F68(v35, (uint64_t (*)(void))sub_1000A4F68);
    *a2 = v40;
  }
  return result;
}

void sub_1000A4F68(uint64_t a1)
{
}

void sub_1000A4F9C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1000A5000()
{
  if (!qword_100107DF8)
  {
    sub_1000937DC();
    unint64_t v0 = type metadata accessor for Set();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107DF8);
    }
  }
}

uint64_t type metadata accessor for ExportDatasetView(uint64_t a1)
{
  return sub_1000172F0(a1, qword_100107F10);
}

uint64_t sub_1000A507C(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  sub_1000B4A34(0, (unint64_t *)&qword_100107678, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for HKSampleQueryDescriptor);
  uint64_t v19 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v22 = (char *)v17 - v8;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    if (!v9) {
      return (uint64_t)v10;
    }
    uint64_t v24 = _swiftEmptyArrayStorage;
    uint64_t result = sub_100096594(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0) {
      break;
    }
    uint64_t v12 = 0;
    uint64_t v10 = v24;
    v17[1] = v7 + 32;
    unint64_t v18 = a3 & 0xC000000000000001;
    while (v9 != v12)
    {
      if (v18) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(a3 + 8 * v12 + 32);
      }
      uint64_t v14 = v13;
      id v23 = v13;
      v20(&v23);
      if (v4)
      {
        swift_release();

        return (uint64_t)v10;
      }
      uint64_t v4 = 0;

      uint64_t v24 = v10;
      unint64_t v16 = v10[2];
      unint64_t v15 = v10[3];
      if (v16 >= v15 >> 1)
      {
        sub_100096594(v15 > 1, v16 + 1, 1);
        uint64_t v10 = v24;
      }
      ++v12;
      void v10[2] = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v16, v22, v19);
      if (v9 == v12) {
        return (uint64_t)v10;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A52CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_1000A53C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for _ConditionalContent.Storage();
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_1000A54BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v60 = a2;
  uint64_t v3 = type metadata accessor for ExportDatasetView(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v54 = v3 - 8;
  uint64_t v59 = v4;
  uint64_t v58 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v56 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v50 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  unint64_t v49 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B2CC4();
  uint64_t v8 = v7;
  uint64_t v47 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>;
  sub_1000B3740(0, &qword_100107F90, (void (*)(uint64_t))sub_1000B2CC4, (void (*)(void))sub_1000B34F8);
  uint64_t v12 = v11;
  uint64_t v48 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v44 - v13;
  sub_1000B2BD0();
  uint64_t v52 = v15;
  uint64_t v53 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B2A5C();
  uint64_t v55 = v18;
  uint64_t v57 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v61 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = a1;
  sub_1000A4F9C(0, &qword_100107FA0, (uint64_t (*)(uint64_t))sub_1000B2D58, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
  sub_1000B3470();
  Form.init(content:)();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v20 = sub_1000B34F8();
  View.navigationTitle(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v10, v8);
  uint64_t v21 = v50;
  unint64_t v22 = v49;
  uint64_t v23 = v51;
  (*(void (**)(char *, void, uint64_t))(v50 + 104))(v49, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v51);
  uint64_t v64 = v8;
  unint64_t v65 = v20;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v23);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v12);
  uint64_t v25 = v45;
  uint64_t v62 = v45;
  sub_1000A4F9C(0, &qword_100108070, (uint64_t (*)(uint64_t))sub_1000B352C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleToolbarContent);
  unint64_t v27 = v26;
  uint64_t v64 = v12;
  unint64_t v65 = OpaqueTypeConformance2;
  uint64_t v28 = swift_getOpaqueTypeConformance2();
  unint64_t v29 = sub_1000B3A70();
  uint64_t v30 = v52;
  View.toolbar<A>(content:)();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v17, v30);
  uint64_t v31 = v25 + *(int *)(v54 + 48);
  char v32 = *(unsigned char *)v31;
  uint64_t v33 = *(void *)(v31 + 8);
  char v68 = v32;
  uint64_t v69 = v33;
  sub_1000B6424(0, &qword_100106BE0, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
  State.projectedValue.getter();
  uint64_t v34 = v25;
  uint64_t v35 = v56;
  sub_1000B3CC0(v34, v56, type metadata accessor for ExportDatasetView);
  unint64_t v36 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  uint64_t v37 = swift_allocObject();
  sub_1000B3D2C(v35, v37 + v36, type metadata accessor for ExportDatasetView);
  sub_1000B3AF8();
  uint64_t v64 = v30;
  unint64_t v65 = v27;
  uint64_t v66 = v28;
  unint64_t v67 = v29;
  swift_getOpaqueTypeConformance2();
  sub_1000B3B98(255, &qword_1001080E0, (uint64_t (*)(uint64_t, void *))type metadata accessor for SearchableListView);
  uint64_t v39 = v38;
  unint64_t v40 = sub_1000B3C3C();
  uint64_t v64 = v39;
  unint64_t v65 = v40;
  swift_getOpaqueTypeConformance2();
  uint64_t v41 = v55;
  uint64_t v42 = v61;
  View.sheet<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v42, v41);
}

uint64_t sub_1000A5CAC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v54 = a2;
  sub_1000B3380();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v59 = v3;
  uint64_t v60 = v4;
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v58 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v57 = (char *)&v47 - v7;
  uint64_t v52 = sub_1000B3300;
  sub_1000B3284(0, &qword_100108030, &qword_100108038, (uint64_t (*)(uint64_t))sub_1000B3300);
  uint64_t v53 = v8;
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v9 = v49;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = v12;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v47 - v13;
  uint64_t v48 = (char *)&v47 - v13;
  sub_1000B3284(0, &qword_100107FB0, &qword_100107FB8, (uint64_t (*)(uint64_t))sub_1000B2E28);
  uint64_t v56 = v15;
  uint64_t v51 = *(void *)(v15 - 8);
  uint64_t v16 = v51;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v55 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v47 - v19;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v64 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v65 = v21;
  char v66 = v22 & 1;
  uint64_t v67 = v23;
  uint64_t v63 = a1;
  sub_1000A4F9C(0, &qword_100107FB8, (uint64_t (*)(uint64_t))sub_1000B2E28, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
  sub_1000B42EC();
  uint64_t v50 = v20;
  Section<>.init(header:content:)();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v64 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v65 = v24;
  char v66 = v25 & 1;
  uint64_t v67 = v26;
  uint64_t v62 = a1;
  sub_1000A4F9C(0, &qword_100108038, (uint64_t (*)(uint64_t))v52, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
  sub_1000B437C();
  Section<>.init(header:content:)();
  uint64_t v61 = a1;
  sub_1000B33E4();
  sub_1000B440C(&qword_100108120, (void (*)(uint64_t))sub_1000B33E4, (void (*)(void))sub_10007AD68);
  unint64_t v27 = v57;
  Section<>.init(content:)();
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  unint64_t v29 = v55;
  uint64_t v30 = v20;
  uint64_t v31 = v56;
  v28(v55, v30, v56);
  uint64_t v52 = *(void (**)())(v9 + 16);
  uint64_t v32 = v53;
  ((void (*)(char *, char *, uint64_t))v52)(v12, v14, v53);
  uint64_t v33 = v59;
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
  v34(v58, v27, v59);
  uint64_t v35 = (void (*)(uint64_t, char *, uint64_t))v34;
  unint64_t v36 = v54;
  v28(v54, v29, v31);
  sub_1000B2D58();
  uint64_t v38 = v37;
  uint64_t v39 = v47;
  ((void (*)(char *, char *, uint64_t))v52)(&v36[*(int *)(v37 + 48)], v47, v32);
  unint64_t v40 = v58;
  v35((uint64_t)&v36[*(int *)(v38 + 64)], v58, v33);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v60 + 8);
  v41(v57, v33);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v49 + 8);
  uint64_t v43 = v32;
  v42(v48, v32);
  uint64_t v44 = *(void (**)(char *, uint64_t))(v51 + 8);
  uint64_t v45 = v56;
  v44(v50, v56);
  v41(v40, v59);
  v42(v39, v43);
  return ((uint64_t (*)(char *, uint64_t))v44)(v55, v45);
}

uint64_t sub_1000A631C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v48 = a2;
  sub_1000B304C();
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v45 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v50 = (char *)v40 - v6;
  uint64_t v7 = type metadata accessor for ExportDatasetView(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B2E5C();
  uint64_t v44 = v11;
  uint64_t v51 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v43 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v49 = (char *)v40 - v14;
  uint64_t v15 = *(void **)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v42 = a1;
  uint64_t v52 = v15;
  uint64_t v53 = v16;
  sub_1000A4F9C(0, &qword_1001080F8, (uint64_t (*)(uint64_t))sub_1000A5000, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  State.wrappedValue.getter();
  uint64_t v17 = sub_10008FF18((uint64_t)v56);
  swift_bridgeObjectRelease();
  uint64_t v56 = v17;
  void v40[2] = swift_getKeyPath();
  uint64_t v41 = type metadata accessor for ExportDatasetView;
  sub_1000B3CC0(a1, (uint64_t)v10, type metadata accessor for ExportDatasetView);
  uint64_t v18 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  v40[0] = v18 | 7;
  v40[1] = v19 + v9;
  uint64_t v20 = swift_allocObject();
  sub_1000B3D2C((uint64_t)v10, v20 + v19, type metadata accessor for ExportDatasetView);
  sub_1000B6424(0, &qword_100107FD0, (uint64_t)&type metadata for HKDataType, (uint64_t (*)(void, uint64_t))&type metadata accessor for Array);
  sub_1000B2F1C();
  sub_1000B3208();
  sub_1000937DC();
  sub_1000B2FE4();
  uint64_t v22 = v21;
  uint64_t v23 = sub_1000B440C(&qword_100108010, (void (*)(uint64_t))sub_1000B2FE4, (void (*)(void))sub_1000B31D4);
  uint64_t v52 = &type metadata for Text;
  uint64_t v53 = v22;
  uint64_t v54 = &protocol witness table for Text;
  uint64_t v55 = v23;
  swift_getOpaqueTypeConformance2();
  uint64_t v24 = v49;
  ForEach<>.init(_:id:content:)();
  sub_1000B3CC0(v42, (uint64_t)v10, v41);
  uint64_t v25 = swift_allocObject();
  sub_1000B3D2C((uint64_t)v10, v25 + v19, type metadata accessor for ExportDatasetView);
  sub_1000B30E0();
  sub_1000B5D38(&qword_100107FF8, (void (*)(uint64_t))sub_1000B30E0);
  uint64_t v26 = v50;
  Button.init(action:label:)();
  unint64_t v27 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  uint64_t v28 = v43;
  uint64_t v29 = v44;
  v27(v43, v24, v44);
  uint64_t v30 = v45;
  uint64_t v31 = v46;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  uint64_t v33 = v26;
  uint64_t v34 = v47;
  v32(v45, v33, v47);
  uint64_t v35 = v48;
  v27(v48, v28, v29);
  sub_1000B2E28(0);
  v32(&v35[*(int *)(v36 + 48)], v30, v34);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
  v37(v50, v34);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v51 + 8);
  v38(v49, v29);
  v37(v30, v34);
  return ((uint64_t (*)(char *, uint64_t))v38)(v28, v29);
}

uint64_t sub_1000A68A8()
{
  sub_1000A69BC();
  sub_100038AD4();
  uint64_t v3 = Text.init<A>(_:)();
  uint64_t v4 = v0;
  char v5 = v1 & 1;
  sub_1000B2FE4();
  sub_1000B440C(&qword_100108010, (void (*)(uint64_t))sub_1000B2FE4, (void (*)(void))sub_1000B31D4);
  View.swipeActions<A>(edge:allowsFullSwipe:content:)();
  sub_10003CDC8(v3, v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A69BC()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v0._uint64_t countAndFlagsBits = static HKSampleDataCodingConstants.categoryTypeIdentifierPrefix.getter();
  Swift::Bool v1 = String.hasPrefix(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;
  if (v1)
  {
    static HKSampleDataCodingConstants.categoryTypeIdentifierPrefix.getter();
    unint64_t v5 = String.count.getter();
    swift_bridgeObjectRelease();
    sub_1000B506C(v5, v2, v4);
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v8 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    return v8;
  }
  v6._uint64_t countAndFlagsBits = static HKSampleDataCodingConstants.quantityTypeIdentifierPrefix.getter();
  Swift::Bool v7 = String.hasPrefix(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;
  if (v7)
  {
    static HKSampleDataCodingConstants.quantityTypeIdentifierPrefix.getter();
    unint64_t v11 = String.count.getter();
    swift_bridgeObjectRelease();
    sub_1000B506C(v11, v8, v10);
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  return v8;
}

uint64_t sub_1000A6B24@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ExportDatasetView(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  sub_1000B304C();
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B3CC0(a1, (uint64_t)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ExportDatasetView);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = swift_allocObject();
  sub_1000B3D2C((uint64_t)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for ExportDatasetView);
  unint64_t v18 = v17 + ((v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v18 = a2;
  *(unsigned char *)(v18 + 8) = a3 & 1;
  sub_1000B30E0();
  sub_1000B5D38(&qword_100107FF8, (void (*)(uint64_t))sub_1000B30E0);
  id v19 = a2;
  Button.init(action:label:)();
  uint64_t v20 = static Color.red.getter();
  uint64_t KeyPath = swift_getKeyPath();
  v26[1] = v20;
  swift_retain();
  uint64_t v22 = AnyShapeStyle.init<A>(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a4, v15, v12);
  swift_release();
  sub_1000B2FE4();
  uint64_t v24 = (uint64_t *)(a4 + *(int *)(v23 + 36));
  *uint64_t v24 = KeyPath;
  v24[1] = v22;
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_1000A6DFC(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3 & 1;
  sub_1000A4F9C(0, &qword_1001080F8, (uint64_t (*)(uint64_t))sub_1000A5000, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  swift_bridgeObjectRetain();
  swift_retain();
  State.wrappedValue.getter();
  unint64_t v5 = (void *)sub_1000AFB0C(a2, v4);
  sub_1000B5058(v5, v6);
  State.wrappedValue.setter();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A6EDC()
{
  uint64_t v0 = LocalizedStringKey.init(stringLiteral:)();

  return Label<>.init(_:systemImage:)(v0);
}

uint64_t sub_1000A6F48()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000A6FD4()
{
  return sub_1000A8BDC();
}

uint64_t sub_1000A7010@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v55 = a2;
  uint64_t v51 = type metadata accessor for DatePickerComponents();
  uint64_t v49 = *(void *)(v51 - 8);
  uint64_t v2 = v49;
  __chkstk_darwin(v51);
  sub_1000A4F9C(0, &qword_100108150, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  __chkstk_darwin(v3 - 8);
  uint64_t v38 = (char *)v36 - v4;
  sub_1000B3668(0, &qword_100108048, (uint64_t (*)(void, void *, void *))&type metadata accessor for DatePicker);
  uint64_t v6 = v5;
  uint64_t v54 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v53 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v52 = (char *)v36 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v50 = (char *)v36 - v12;
  __chkstk_darwin(v11);
  uint64_t v37 = (char *)v36 - v13;
  uint64_t v14 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v45 = v15;
  uint64_t v46 = v14;
  int v42 = v16;
  uint64_t v44 = v17;
  uint64_t v47 = type metadata accessor for ExportDatasetView(0);
  sub_1000A4F9C(0, &qword_100107EA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  uint64_t v43 = v18;
  State.projectedValue.getter();
  sub_1000A4F9C(0, &qword_100108158, (uint64_t (*)(uint64_t))&type metadata accessor for DatePickerComponents, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v41 = v19;
  uint64_t v20 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v49 = ((v20 + 32) & ~v20) + 2 * *(void *)(v2 + 72);
  uint64_t v40 = v20 | 7;
  uint64_t v21 = swift_allocObject();
  long long v39 = xmmword_1000CC0F0;
  *(_OWORD *)(v21 + 16) = xmmword_1000CC0F0;
  static DatePickerComponents.hourAndMinute.getter();
  static DatePickerComponents.date.getter();
  uint64_t v56 = v21;
  v36[1] = sub_1000B5D38(&qword_100108160, (void (*)(uint64_t))&type metadata accessor for DatePickerComponents);
  sub_1000A4F9C(0, &qword_100108168, (uint64_t (*)(uint64_t))&type metadata accessor for DatePickerComponents, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  sub_1000B4B38();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  DatePicker<>.init(_:selection:displayedComponents:)();
  uint64_t v22 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v45 = v23;
  uint64_t v46 = v22;
  uint64_t v44 = v24;
  State.projectedValue.getter();
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = v39;
  static DatePickerComponents.hourAndMinute.getter();
  static DatePickerComponents.date.getter();
  uint64_t v56 = v25;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v26 = v50;
  DatePicker<>.init(_:selection:displayedComponents:)();
  uint64_t v27 = v54;
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  uint64_t v29 = v52;
  uint64_t v30 = v37;
  v28(v52, v37, v6);
  uint64_t v31 = v53;
  v28(v53, v26, v6);
  uint64_t v32 = v55;
  v28(v55, v29, v6);
  sub_1000B3300();
  v28(&v32[*(int *)(v33 + 48)], v31, v6);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v27 + 8);
  v34(v26, v6);
  v34(v30, v6);
  v34(v31, v6);
  return ((uint64_t (*)(char *, uint64_t))v34)(v29, v6);
}

uint64_t sub_1000A75A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v29 = type metadata accessor for ExportDatasetView(0);
  uint64_t v3 = *(void *)(v29 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = __chkstk_darwin(v29);
  uint64_t v6 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - v7;
  sub_1000B304C();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B33E4();
  uint64_t v30 = v14;
  __chkstk_darwin(v14);
  int v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B3CC0(a1, (uint64_t)v8, type metadata accessor for ExportDatasetView);
  unint64_t v17 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v18 = swift_allocObject();
  sub_1000B3D2C((uint64_t)v8, v18 + v17, type metadata accessor for ExportDatasetView);
  sub_1000B30E0();
  sub_1000B5D38(&qword_100107FF8, (void (*)(uint64_t))sub_1000B30E0);
  Button.init(action:label:)();
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v32 = *(void *)(a1 + 24);
  uint64_t v33 = v19;
  sub_1000A4F9C(0, &qword_1001080F8, (uint64_t (*)(uint64_t))sub_1000A5000, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  State.wrappedValue.getter();
  uint64_t v20 = *(void *)(v34 + 16);
  swift_bridgeObjectRelease();
  sub_1000B3CC0(a1, (uint64_t)v6, type metadata accessor for ExportDatasetView);
  if (v20)
  {
    uint64_t v21 = &v6[*(int *)(v29 + 44)];
    char v22 = *v21;
    uint64_t v23 = *((void *)v21 + 1);
    LOBYTE(v32) = v22;
    uint64_t v33 = v23;
    sub_1000B6424(0, &qword_100106BE0, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
    State.wrappedValue.getter();
    sub_1000B3F68((uint64_t)v6, type metadata accessor for ExportDatasetView);
    char v24 = v34;
  }
  else
  {
    sub_1000B3F68((uint64_t)v6, type metadata accessor for ExportDatasetView);
    char v24 = 1;
  }
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = v24;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v13, v10);
  uint64_t v27 = (uint64_t *)&v16[*(int *)(v30 + 36)];
  *uint64_t v27 = KeyPath;
  v27[1] = (uint64_t)sub_1000B4538;
  void v27[2] = v26;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return sub_1000B3D2C((uint64_t)v16, v31, (uint64_t (*)(void))sub_1000B33E4);
}

uint64_t sub_1000A79DC()
{
  Swift::Bool v1 = v0;
  uint64_t v2 = type metadata accessor for ExportDatasetView(0);
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v3 = *(void *)(v64 + 64);
  __chkstk_darwin(v2);
  char v66 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A4F9C(0, (unint64_t *)&qword_100104878, (uint64_t (*)(uint64_t))&type metadata accessor for TaskPriority, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v4 - 8);
  uint64_t v65 = (char *)&v52 - v5;
  uint64_t v6 = type metadata accessor for SampleExporter(0);
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v61 + 64);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v63 = (uint64_t)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v52 - v9);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v59 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v58 = (char *)&v52 - v14;
  uint64_t v67 = type metadata accessor for DateInterval();
  uint64_t v62 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v60 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v16 = v0[3];
  unint64_t v17 = v0[4];
  char v68 = v16;
  uint64_t v69 = v17;
  sub_1000A4F9C(0, &qword_1001080F8, (uint64_t (*)(uint64_t))sub_1000A5000, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  State.wrappedValue.getter();
  uint64_t v18 = *(void *)(v70 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v18)
  {
    uint64_t v54 = v6;
    uint64_t v55 = v7;
    uint64_t v20 = *(int *)(v2 + 44);
    uint64_t v56 = v1;
    uint64_t v21 = (char *)v1 + v20;
    char v22 = *v21;
    uint64_t v23 = (void *)*((void *)v21 + 1);
    LOBYTE(v68) = v22;
    uint64_t v69 = v23;
    LOBYTE(v7sub_10004C8C4(0, 0) = 1;
    sub_1000B6424(0, &qword_100106BE0, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
    State.wrappedValue.setter();
    char v68 = v16;
    uint64_t v69 = v17;
    State.wrappedValue.getter();
    uint64_t v24 = v70;
    uint64_t v25 = *(void *)(v70 + 16);
    uint64_t v57 = v3;
    if (v25)
    {
      uint64_t v52 = v2;
      uint64_t v53 = v10;
      char v68 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t result = sub_1000AFF20(v24);
      uint64_t v26 = result;
      uint64_t v28 = v27;
      char v30 = v29 & 1;
      while ((v26 & 0x8000000000000000) == 0 && v26 < 1 << *(unsigned char *)(v24 + 32))
      {
        if (((*(void *)(v24 + 56 + (((unint64_t)v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
          goto LABEL_17;
        }
        if (*(_DWORD *)(v24 + 36) != v28) {
          goto LABEL_18;
        }
        uint64_t v33 = *(void *)(v24 + 48) + 16 * v26;
        uint64_t v34 = *(void **)v33;
        if (*(unsigned char *)(v33 + 8))
        {
          sub_10001E254(0, &qword_1001074B8);
          HKQuantityType.init(_:)((__C::HKQuantityTypeIdentifier)v34);
        }
        else
        {
          sub_10001E254(0, &qword_1001074A0);
          HKCategoryType.init(_:)((__C::HKCategoryTypeIdentifier)v34);
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t result = sub_100051848(v26, v28, v30 & 1, v24);
        uint64_t v26 = result;
        uint64_t v28 = v31;
        char v30 = v32 & 1;
        if (!--v25)
        {
          sub_10001EDCC(result, v31, v32 & 1);
          uint64_t v35 = v68;
          swift_bridgeObjectRelease();
          uint64_t v36 = (uint64_t)v66;
          uint64_t v10 = v53;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v35 = _swiftEmptyArrayStorage;
      uint64_t v36 = (uint64_t)v66;
LABEL_14:
      uint64_t v37 = v56;
      sub_1000A4F9C(0, &qword_100107EA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
      State.wrappedValue.getter();
      State.wrappedValue.getter();
      uint64_t v38 = v60;
      DateInterval.init(start:end:)();
      uint64_t v39 = v54;
      uint64_t v40 = v62;
      (*(void (**)(char *, char *, uint64_t))(v62 + 16))((char *)v10 + *(int *)(v54 + 20), v38, v67);
      uint64_t v41 = *v37;
      int v42 = self;
      id v43 = v41;
      id v44 = [v42 defaultManager];
      void *v10 = v35;
      *(void *)((char *)v10 + *(int *)(v39 + 24)) = v43;
      *(void *)((char *)v10 + *(int *)(v39 + 28)) = v44;
      uint64_t v45 = type metadata accessor for TaskPriority();
      uint64_t v46 = (uint64_t)v65;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v65, 1, 1, v45);
      sub_1000B3CC0((uint64_t)v37, v36, type metadata accessor for ExportDatasetView);
      uint64_t v47 = v63;
      sub_1000B3CC0((uint64_t)v10, v63, type metadata accessor for SampleExporter);
      type metadata accessor for MainActor();
      uint64_t v48 = static MainActor.shared.getter();
      unint64_t v49 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
      unint64_t v50 = (v57 + *(unsigned __int8 *)(v61 + 80) + v49) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
      uint64_t v51 = swift_allocObject();
      *(void *)(v51 + 16) = v48;
      *(void *)(v51 + 24) = &protocol witness table for MainActor;
      sub_1000B3D2C(v36, v51 + v49, type metadata accessor for ExportDatasetView);
      sub_1000B3D2C(v47, v51 + v50, type metadata accessor for SampleExporter);
      sub_100052D04(v46, (uint64_t)&unk_100108130, v51);
      swift_release();
      sub_1000B3F68((uint64_t)v10, type metadata accessor for SampleExporter);
      return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v38, v67);
    }
  }
  return result;
}

uint64_t sub_1000A8160()
{
  return sub_1000A8BDC();
}

uint64_t sub_1000A8198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  sub_1000B352C(0);
  uint64_t v53 = v3;
  __chkstk_darwin(v3);
  uint64_t v52 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B37CC();
  uint64_t v51 = v5;
  uint64_t v46 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v45 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A4F68(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v47 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v44 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B36C4(0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v50 = (char *)&v43 - v16;
  uint64_t v17 = type metadata accessor for ToolbarItemPlacement();
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  id v43 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  sub_1000B35DC();
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(v20 - 8);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v43 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v43 - v26;
  static ToolbarItemPlacement.cancellationAction.getter();
  uint64_t v55 = a1;
  sub_1000B3668(0, &qword_100106B88, (uint64_t (*)(void, void *, void *))&type metadata accessor for Button);
  sub_10007ACF4();
  ToolbarItem<>.init(placement:content:)();
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  uint64_t v48 = v27;
  uint64_t v49 = v21;
  v28(v27, v25, v21);
  type metadata accessor for ExportDatasetView(0);
  sub_1000A4F9C(0, &qword_100107EB0, (uint64_t (*)(uint64_t))sub_1000A4F68, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  State.wrappedValue.getter();
  uint64_t v29 = v47;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v9, 1, v10) == 1)
  {
    sub_1000B3F68((uint64_t)v9, (uint64_t (*)(void))sub_1000A4F68);
    sub_1000B36F8(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v15, 1, 1, v30);
    uint64_t v31 = sub_1000B3A3C();
    uint64_t v56 = v51;
    uint64_t v57 = v31;
    swift_getOpaqueTypeConformance2();
    uint64_t v32 = (uint64_t)v50;
    static ToolbarContentBuilder.buildIf<A>(_:)();
    sub_1000B3F68((uint64_t)v15, (uint64_t (*)(void))sub_1000B36C4);
  }
  else
  {
    uint64_t v33 = v44;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v44, v9, v10);
    uint64_t v34 = static ToolbarItemPlacement.primaryAction.getter();
    __chkstk_darwin(v34);
    *(&v43 - 2) = v33;
    sub_1000B386C();
    sub_1000B5D38(&qword_1001080C0, (void (*)(uint64_t))sub_1000B386C);
    uint64_t v35 = v45;
    ToolbarItem<>.init(placement:content:)();
    uint64_t v36 = sub_1000B3A3C();
    uint64_t v37 = v51;
    static ToolbarContentBuilder.buildBlock<A>(_:)();
    sub_1000B36F8(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v15, 0, 1, v38);
    uint64_t v56 = v37;
    uint64_t v57 = v36;
    swift_getOpaqueTypeConformance2();
    uint64_t v32 = (uint64_t)v50;
    static ToolbarContentBuilder.buildIf<A>(_:)();
    sub_1000B3F68((uint64_t)v15, (uint64_t (*)(void))sub_1000B36C4);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v37);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v10);
  }
  uint64_t v39 = (uint64_t)&v52[*(int *)(v53 + 48)];
  uint64_t v41 = v48;
  uint64_t v40 = v49;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v52, v48, v49);
  sub_1000B3CC0(v32, v39, (uint64_t (*)(void))sub_1000B36C4);
  TupleToolbarContent.init(_:)();
  sub_1000B3F68(v32, (uint64_t (*)(void))sub_1000B36C4);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v41, v40);
}

uint64_t sub_1000A88FC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ExportDatasetView(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  sub_1000B3CC0(a1, (uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ExportDatasetView);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  sub_1000B3D2C((uint64_t)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, type metadata accessor for ExportDatasetView);
  return Button.init(action:label:)();
}

uint64_t sub_1000A8A50@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AEAEC(a1);
}

uint64_t sub_1000A8A64(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  sub_1000B30E0();
  sub_1000B5D38(&qword_100107FF8, (void (*)(uint64_t))sub_1000B30E0);
  return ShareLink<>.init<>(item:subject:message:label:)();
}

uint64_t sub_1000A8BB0()
{
  return sub_1000A8BDC();
}

uint64_t sub_1000A8BDC()
{
  uint64_t v0 = LocalizedStringKey.init(stringLiteral:)();

  return Label<>.init(_:systemImage:)(v0);
}

uint64_t sub_1000A8C30()
{
  type metadata accessor for ExportDatasetView(0);
  sub_1000B3EE4(0, &qword_1001080F0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  State.projectedValue.getter();
  sub_1000A4F9C(0, &qword_1001080F8, (uint64_t (*)(uint64_t))sub_1000A5000, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  State.projectedValue.getter();
  sub_1000B6424(0, &qword_100106BE0, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
  State.projectedValue.getter();
  sub_1000A8E34(0xD000000000000011, 0x80000001000D7E30, v1, v2, v3, v1, v2, v3, (uint64_t)&v1, v1, v2, v3);
  sub_1000B3B98(0, &qword_1001080E0, (uint64_t (*)(uint64_t, void *))type metadata accessor for SearchableListView);
  sub_1000B3C3C();
  View.interactiveDismissDisabled(_:)();
  return sub_1000B3E04((uint64_t)&v1);
}

uint64_t sub_1000A8E34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v55 = a1;
  uint64_t v56 = a2;
  uint64_t v61 = a11;
  uint64_t v62 = a10;
  sub_1000B3B98(0, &qword_100107E08, (uint64_t (*)(uint64_t, void *))type metadata accessor for SearchableListSection);
  uint64_t v50 = *(void *)(v19 - 8);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v48 - v20;
  uint64_t v63 = 0;
  unint64_t v64 = 0xE000000000000000;
  State.init(wrappedValue:)();
  uint64_t v53 = v66;
  uint64_t v54 = v65;
  uint64_t v52 = v67;
  char v68 = a12;
  uint64_t v65 = a6;
  uint64_t v66 = a7;
  uint64_t v67 = a8;
  sub_1000A4F9C(0, &qword_100108100, (uint64_t (*)(uint64_t))sub_1000A5000, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  swift_retain();
  swift_retain();
  uint64_t v60 = a8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v22 = v61;
  swift_retain();
  Binding.wrappedValue.getter();
  uint64_t v51 = v63;
  uint64_t v57 = a3;
  uint64_t v58 = a4;
  uint64_t v65 = a3;
  uint64_t v66 = a4;
  uint64_t v59 = a5;
  uint64_t v67 = a5;
  sub_1000B3EE4(0, &qword_100108108, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  Binding.wrappedValue.getter();
  uint64_t v23 = *(void *)(v63 + 16);
  if (!v23)
  {
    swift_release();
    uint64_t v39 = v62;
    swift_release();
    uint64_t v26 = _swiftEmptyArrayStorage;
    uint64_t v40 = v60;
LABEL_25:
    swift_bridgeObjectRelease();
    uint64_t v41 = v59;
    swift_bridgeObjectRelease();
    uint64_t v42 = v58;
    swift_release();
    uint64_t v43 = v57;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    char v45 = v68;
    uint64_t v46 = v56;
    *(void *)a9 = v55;
    *(void *)(a9 + 8) = v46;
    *(void *)(a9 + 16) = v43;
    *(void *)(a9 + 24) = v42;
    *(void *)(a9 + 32) = v41;
    *(void *)(a9 + 4sub_10004C8C4(0, 0) = a6;
    *(void *)(a9 + 48) = a7;
    *(void *)(a9 + 56) = v40;
    *(void *)(a9 + 64) = v39;
    *(void *)(a9 + 72) = v22;
    *(unsigned char *)(a9 + 8sub_10004C8C4(0, 0) = v45;
    *(void *)(a9 + 88) = v51;
    *(void *)(a9 + 96) = 0;
    uint64_t v47 = v53;
    *(void *)(a9 + 104) = v54;
    *(void *)(a9 + 112) = v47;
    *(void *)(a9 + 12sub_10004C8C4(0, 0) = v52;
    *(void *)(a9 + 128) = v26;
    return result;
  }
  uint64_t v48 = a6;
  uint64_t v49 = a7;
  uint64_t v24 = v63 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
  uint64_t v25 = *(void *)(v50 + 72);
  uint64_t v50 = v63;
  swift_bridgeObjectRetain();
  uint64_t v26 = _swiftEmptyArrayStorage;
  while (1)
  {
    sub_1000B0784(v24, (uint64_t)v21);
    uint64_t v27 = *((void *)v21 + 2);
    uint64_t v28 = *(void *)(v27 + 16);
    int64_t v29 = v26[2];
    int64_t v30 = v29 + v28;
    if (__OFADD__(v29, v28)) {
      break;
    }
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v30 <= v26[3] >> 1)
    {
      if (*(void *)(v27 + 16)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v29 <= v30) {
        int64_t v32 = v29 + v28;
      }
      else {
        int64_t v32 = v29;
      }
      uint64_t v26 = sub_100036AF8(isUniquelyReferenced_nonNull_native, v32, 1, v26);
      if (*(void *)(v27 + 16))
      {
LABEL_14:
        uint64_t v33 = v26[2];
        if ((v26[3] >> 1) - v33 < v28) {
          goto LABEL_28;
        }
        unint64_t v34 = (unint64_t)&v26[2 * v33 + 4];
        if (v27 + 32 < v34 + 16 * v28 && v34 < v27 + 32 + 16 * v28) {
          goto LABEL_30;
        }
        swift_arrayInitWithCopy();
        if (v28)
        {
          uint64_t v36 = v26[2];
          BOOL v37 = __OFADD__(v36, v28);
          uint64_t v38 = v36 + v28;
          if (v37) {
            goto LABEL_29;
          }
          void v26[2] = v38;
        }
        goto LABEL_4;
      }
    }
    if (v28) {
      goto LABEL_27;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    sub_1000B0884((uint64_t)v21);
    v24 += v25;
    if (!--v23)
    {
      uint64_t v22 = v61;
      swift_release();
      uint64_t v39 = v62;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v40 = v60;
      a6 = v48;
      a7 = v49;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A92A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a4;
  sub_1000A4F68(0);
  v4[8] = swift_task_alloc();
  uint64_t v5 = swift_task_alloc();
  v4[9] = v5;
  v4[10] = type metadata accessor for MainActor();
  v4[11] = static MainActor.shared.getter();
  uint64_t v6 = (void *)swift_task_alloc();
  v4[12] = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_1000A93A4;
  return sub_1000A98A4(v5);
}

uint64_t sub_1000A93A4()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    uint64_t v4 = sub_1000A96B8;
  }
  else {
    uint64_t v4 = sub_1000A9500;
  }
  return _swift_task_switch(v4, v3, v2);
}

uint64_t sub_1000A9500()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  swift_release();
  uint64_t v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 0, 1, v3);
  uint64_t v4 = type metadata accessor for ExportDatasetView(0);
  sub_1000B3CC0(v1, v2, (uint64_t (*)(void))sub_1000A4F68);
  sub_1000A4F9C(0, &qword_100107EB0, (uint64_t (*)(uint64_t))sub_1000A4F68, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  State.wrappedValue.setter();
  sub_1000B3F68(v1, (uint64_t (*)(void))sub_1000A4F68);
  uint64_t v5 = (char *)(*(void *)(v0 + 56) + *(int *)(v4 + 44));
  char v6 = *v5;
  uint64_t v7 = *((void *)v5 + 1);
  *(unsigned char *)(v0 + 32) = v6;
  *(void *)(v0 + 4sub_10004C8C4(0, 0) = v7;
  *(unsigned char *)(v0 + 112) = 0;
  sub_1000B6424(0, &qword_100106BE0, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
  State.wrappedValue.setter();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1000A96B8()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_release();
  sub_1000B6424(0, (unint64_t *)&qword_1001077D0, (uint64_t)&type metadata for Any + 8, (uint64_t (*)(void, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1000CBFD0;
  _StringGuts.grow(_:)(21);
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  v3._object = (void *)0x80000001000D7EA0;
  v3._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v3);
  *(void *)(v0 + 48) = v1;
  sub_10001E8C0();
  _print_unlocked<A, B>(_:_:)();
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 4sub_10004C8C4(0, 0) = v5;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = (char *)(v6 + *(int *)(type metadata accessor for ExportDatasetView(0) + 44));
  char v8 = *v7;
  uint64_t v9 = *((void *)v7 + 1);
  *(unsigned char *)(v0 + 32) = v8;
  *(void *)(v0 + 4sub_10004C8C4(0, 0) = v9;
  *(unsigned char *)(v0 + 112) = 0;
  sub_1000B6424(0, &qword_100106BE0, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
  State.wrappedValue.setter();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1000A98A4(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for URL();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  type metadata accessor for Logger();
  v2[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SampleDataEncoder();
  v2[15] = v5;
  v2[16] = *(void *)(v5 - 8);
  v2[17] = swift_task_alloc();
  sub_1000B4A34(0, (unint64_t *)&qword_100107678, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for HKSampleQueryDescriptor);
  v2[18] = v6;
  v2[19] = *(void *)(v6 - 8);
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_1000A9AFC, 0, 0);
}

uint64_t sub_1000A9AFC()
{
  uint64_t v1 = *(unint64_t **)(v0 + 48);
  unint64_t v2 = *v1;
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v1;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000A507C((void (*)(id *))sub_1000B4AA4, v3, v2);
  *(void *)(v0 + 168) = v4;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
  uint64_t v5 = *(void *)(v4 + 16);
  *(void *)(v0 + 176) = v5;
  if (v5)
  {
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v7 = *(void *)(v0 + 48);
    uint64_t v8 = *(int *)(type metadata accessor for SampleExporter(0) + 24);
    *(_DWORD *)(v0 + 232) = v8;
    uint64_t v9 = *(void (**)(void, unint64_t, void))(v6 + 16);
    v6 += 16;
    int v10 = *(_DWORD *)(v6 + 64);
    *(_DWORD *)(v0 + 236) = v10;
    *(void *)(v0 + 184) = *(void *)(v6 + 56);
    *(void *)(v0 + 192) = v9;
    *(void *)(v0 + 20sub_10004C8C4(0, 0) = 0;
    v9(*(void *)(v0 + 160), *(void *)(v0 + 168) + ((v10 + 32) & ~(unint64_t)v10), *(void *)(v0 + 144));
    uint64_t v11 = *(void *)(v7 + v8);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v12;
    void *v12 = v0;
    v12[1] = sub_1000AA094;
    uint64_t v13 = *(void *)(v0 + 144);
    return HKSampleQueryDescriptor.result(for:)(v11, v13);
  }
  else
  {
    swift_bridgeObjectRelease();
    static Logger.general.getter();
    SampleDataEncoder.init(samples:logger:)();
    uint64_t v14 = SampleDataEncoder.encodeSamples()();
    unint64_t v46 = v15;
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v18 = *(void *)(v0 + 56);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v19 = *(void *)(v0 + 48);
    UUID.init()();
    uint64_t v20 = *(int *)(type metadata accessor for SampleExporter(0) + 28);
    id v21 = [*(id *)(v19 + v20) temporaryDirectory];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.uuidString.getter();
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v22(v16, v18);
    uint64_t v23 = *(void **)(v19 + v20);
    URL._bridgeToObjectiveC()(v24);
    uint64_t v26 = v25;
    *(void *)(v0 + 32) = 0;
    LODWORD(v2sub_10004C8C4(0, 0) = [v23 createDirectoryAtURL:v25 withIntermediateDirectories:1 attributes:0 error:v0 + 32];

    uint64_t v27 = *(void **)(v0 + 32);
    char v45 = v22;
    if (v20)
    {
      id v28 = v27;
      URL.appendingPathComponent(_:)();
      Data.write(to:options:)();
      uint64_t v34 = *(void *)(v0 + 128);
      uint64_t v35 = *(void *)(v0 + 136);
      uint64_t v43 = *(void *)(v0 + 120);
      uint64_t v36 = *(void *)(v0 + 96);
      uint64_t v42 = *(void *)(v0 + 104);
      uint64_t v37 = *(void *)(v0 + 80);
      uint64_t v38 = *(void *)(v0 + 88);
      uint64_t v39 = *(void *)(v0 + 56);
      sub_100028C8C(v14, v46);
      v45(v37, v39);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v42, v38);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v43);
    }
    else
    {
      uint64_t v29 = *(void *)(v0 + 128);
      uint64_t v30 = *(void *)(v0 + 96);
      uint64_t v47 = *(void *)(v0 + 104);
      uint64_t v31 = *(void *)(v0 + 80);
      uint64_t v44 = *(void *)(v0 + 88);
      uint64_t v32 = *(void *)(v0 + 56);
      id v33 = v27;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100028C8C(v14, v46);
      v45(v31, v32);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v47, v44);
      (*(void (**)(void, void))(v29 + 8))(*(void *)(v0 + 136), *(void *)(v0 + 120));
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
    return v40();
  }
}

uint64_t sub_1000AA094(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 216) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1000AA744;
  }
  else
  {
    *(void *)(v4 + 224) = a1;
    uint64_t v5 = sub_1000AA1F4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000AA1F4()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 200) + 1;
  sub_1000754E8(*(void *)(v0 + 224));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v5 == v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = *(void *)(v0 + 216);
    static Logger.general.getter();
    SampleDataEncoder.init(samples:logger:)();
    uint64_t v7 = SampleDataEncoder.encodeSamples()();
    if (v6)
    {
      uint64_t v9 = *(void *)(v0 + 128);
    }
    else
    {
      uint64_t v17 = v7;
      unint64_t v47 = v8;
      uint64_t v18 = *(void *)(v0 + 72);
      uint64_t v20 = *(void *)(v0 + 56);
      uint64_t v19 = *(void *)(v0 + 64);
      uint64_t v21 = *(void *)(v0 + 48);
      UUID.init()();
      uint64_t v22 = *(int *)(type metadata accessor for SampleExporter(0) + 28);
      id v23 = [*(id *)(v21 + v22) temporaryDirectory];
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      UUID.uuidString.getter();
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v24(v18, v20);
      uint64_t v25 = *(void **)(v21 + v22);
      URL._bridgeToObjectiveC()(v26);
      id v28 = v27;
      *(void *)(v0 + 32) = 0;
      LODWORD(v22) = [v25 createDirectoryAtURL:v27 withIntermediateDirectories:1 attributes:0 error:v0 + 32];

      uint64_t v29 = *(void **)(v0 + 32);
      unint64_t v46 = v24;
      if (v22)
      {
        id v30 = v29;
        URL.appendingPathComponent(_:)();
        Data.write(to:options:)();
        uint64_t v35 = *(void *)(v0 + 128);
        uint64_t v36 = *(void *)(v0 + 136);
        uint64_t v44 = *(void *)(v0 + 120);
        uint64_t v37 = *(void *)(v0 + 96);
        uint64_t v43 = *(void *)(v0 + 104);
        uint64_t v38 = *(void *)(v0 + 80);
        uint64_t v39 = *(void *)(v0 + 88);
        uint64_t v40 = *(void *)(v0 + 56);
        sub_100028C8C(v17, v47);
        v46(v38, v40);
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v43, v39);
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v44);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
LABEL_11:
        return v41();
      }
      uint64_t v9 = *(void *)(v0 + 128);
      uint64_t v31 = *(void *)(v0 + 96);
      uint64_t v48 = *(void *)(v0 + 104);
      uint64_t v32 = *(void *)(v0 + 80);
      uint64_t v45 = *(void *)(v0 + 88);
      uint64_t v33 = *(void *)(v0 + 56);
      id v34 = v29;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_100028C8C(v17, v47);
      v46(v32, v33);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v48, v45);
    }
    (*(void (**)(void, void))(v9 + 8))(*(void *)(v0 + 136), *(void *)(v0 + 120));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_11;
  }
  int v10 = *(void (**)(void, unint64_t, void))(v0 + 192);
  uint64_t v11 = *(void *)(v0 + 200) + 1;
  *(void *)(v0 + 20sub_10004C8C4(0, 0) = v11;
  uint64_t v12 = *(int *)(v0 + 232);
  uint64_t v13 = *(void *)(v0 + 48);
  v10(*(void *)(v0 + 160), *(void *)(v0 + 168)+ ((*(unsigned __int8 *)(v0 + 236) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 236))+ *(void *)(v0 + 184) * v11, *(void *)(v0 + 144));
  uint64_t v14 = *(void *)(v13 + v12);
  unint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v15;
  *unint64_t v15 = v0;
  v15[1] = sub_1000AA094;
  uint64_t v16 = *(void *)(v0 + 144);
  return HKSampleQueryDescriptor.result(for:)(v14, v16);
}

uint64_t sub_1000AA744()
{
  (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000AA838()
{
  return NavigationView.init(content:)();
}

uint64_t sub_1000AAA60()
{
  sub_1000B4AC4();
  sub_1000B4A34(0, &qword_100108148, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for HKSamplePredicate);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000CBFD0;
  uint64_t v0 = self;
  type metadata accessor for SampleExporter(0);
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  id v2 = [v0 predicateForSamplesWithinDateInterval:isa options:0];

  sub_10001E254(0, (unint64_t *)&unk_100106AD0);
  static HKSamplePredicate.sample(type:predicate:)();

  return HKSampleQueryDescriptor.init(predicates:sortDescriptors:limit:)();
}

Swift::Int sub_1000AABEC()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000AAC50()
{
  return Hasher._finalize()();
}

uint64_t sub_1000AACB0()
{
  return sub_1000A69BC();
}

uint64_t sub_1000AACBC(uint64_t a1, uint64_t a2)
{
  return sub_1000AFFC0(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t sub_1000AACD8(uint64_t a1)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 32);
  long long v3 = *(_OWORD *)(a1 + 32);
  v5[0] = *(_OWORD *)(a1 + 16);
  v5[1] = v3;
  uint64_t v5[2] = v2;
  type metadata accessor for SearchableListSection(255, (uint64_t)v5);
  type metadata accessor for Array();
  type metadata accessor for Binding();
  Binding.wrappedValue.getter();
  return *(void *)&v5[0];
}

uint64_t sub_1000AAD48()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_1000AADB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 56);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

BOOL sub_1000AAE20()
{
  sub_1000B6424(0, &qword_100106C30, (uint64_t)&type metadata for String, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
  State.wrappedValue.getter();
  swift_bridgeObjectRelease();
  uint64_t v0 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v0 = *(void *)v2 & 0xFFFFFFFFFFFFLL;
  }
  return v0 != 0;
}

uint64_t sub_1000AAEB0()
{
  return _ArrayProtocol.filter(_:)();
}

uint64_t sub_1000AAF50()
{
  dispatch thunk of CustomStringConvertible.description.getter();
  sub_1000B6424(0, &qword_100106C30, (uint64_t)&type metadata for String, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
  State.wrappedValue.getter();
  sub_100038AD4();
  char v0 = StringProtocol.localizedCaseInsensitiveContains<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_1000AB034@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v3 = a1[2];
  uint64_t v4 = type metadata accessor for Array();
  uint64_t v5 = a1[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = a1[4];
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v43 = type metadata accessor for _TraitWritingModifier();
  uint64_t v42 = type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v76 = v7;
  uint64_t v44 = v7;
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  type metadata accessor for _TraitWritingModifier();
  uint64_t v41 = type metadata accessor for ModifiedContent();
  uint64_t v47 = v5;
  uint64_t v45 = v3;
  uint64_t v71 = v4;
  uint64_t v72 = (void *)AssociatedTypeWitness;
  uint64_t v73 = v41;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  type metadata accessor for Section();
  unint64_t v46 = (void *)a1[3];
  uint64_t v71 = v3;
  uint64_t v72 = v46;
  uint64_t v73 = v7;
  uint64_t WitnessTable = v5;
  type metadata accessor for SearchableListSection(255, (uint64_t)&v71);
  uint64_t v8 = type metadata accessor for Array();
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = type metadata accessor for Section();
  uint64_t v11 = swift_getWitnessTable();
  uint64_t v12 = sub_1000B5D38(&qword_100107F68, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v71 = v8;
  uint64_t v72 = (void *)v9;
  uint64_t v73 = v10;
  uint64_t WitnessTable = v11;
  uint64_t AssociatedConformanceWitness = v12;
  type metadata accessor for ForEach();
  uint64_t v13 = type metadata accessor for _ConditionalContent();
  uint64_t v69 = &protocol witness table for Text;
  uint64_t v70 = swift_getWitnessTable();
  uint64_t v67 = swift_getWitnessTable();
  uint64_t v68 = swift_getWitnessTable();
  uint64_t v66 = swift_getWitnessTable();
  uint64_t v63 = &protocol witness table for EmptyView;
  uint64_t v64 = swift_getWitnessTable();
  uint64_t v65 = &protocol witness table for EmptyView;
  uint64_t v14 = swift_getWitnessTable();
  uint64_t v60 = &protocol witness table for Text;
  uint64_t v61 = v64;
  uint64_t v62 = &protocol witness table for EmptyView;
  uint64_t v59 = swift_getWitnessTable();
  uint64_t v57 = v14;
  uint64_t v58 = swift_getWitnessTable();
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v16 = v3;
  uint64_t v71 = v3;
  uint64_t v72 = (void *)v13;
  uint64_t v17 = v7;
  uint64_t v73 = v7;
  uint64_t WitnessTable = v15;
  uint64_t v18 = type metadata accessor for List();
  uint64_t v19 = swift_getWitnessTable();
  unint64_t v20 = sub_100038AD4();
  uint64_t v71 = v18;
  uint64_t v72 = &type metadata for String;
  uint64_t v73 = v19;
  uint64_t WitnessTable = v20;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v71 = v18;
  uint64_t v72 = &type metadata for String;
  uint64_t v73 = v19;
  uint64_t WitnessTable = v20;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v71 = OpaqueTypeMetadata2;
  uint64_t v72 = (void *)OpaqueTypeConformance2;
  swift_getOpaqueTypeMetadata2();
  sub_1000A4F9C(255, &qword_1001082A0, (uint64_t (*)(uint64_t))sub_1000B5FF4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
  uint64_t v23 = type metadata accessor for ModifiedContent();
  sub_1000A4F9C(255, &qword_1001082B8, (uint64_t (*)(uint64_t))sub_1000B605C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleToolbarContent);
  uint64_t v25 = v24;
  uint64_t v71 = OpaqueTypeMetadata2;
  uint64_t v72 = (void *)OpaqueTypeConformance2;
  uint64_t v55 = swift_getOpaqueTypeConformance2();
  unint64_t v56 = sub_1000B60C0();
  uint64_t v26 = swift_getWitnessTable();
  unint64_t v27 = sub_1000B6148();
  uint64_t v71 = v23;
  uint64_t v72 = v25;
  uint64_t v73 = v26;
  uint64_t WitnessTable = v27;
  uint64_t v28 = swift_getOpaqueTypeMetadata2();
  uint64_t v71 = v23;
  uint64_t v72 = v25;
  uint64_t v73 = v26;
  uint64_t WitnessTable = v27;
  uint64_t v29 = swift_getOpaqueTypeConformance2();
  uint64_t v71 = v28;
  uint64_t v72 = (void *)v29;
  swift_getOpaqueTypeMetadata2();
  uint64_t v71 = v28;
  uint64_t v72 = (void *)v29;
  swift_getOpaqueTypeConformance2();
  uint64_t v30 = type metadata accessor for NavigationView();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = __chkstk_darwin(v30);
  id v34 = (char *)&v40 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v40 - v35;
  uint64_t v50 = v16;
  uint64_t v51 = v46;
  uint64_t v52 = v17;
  uint64_t v53 = v47;
  uint64_t v54 = v48;
  NavigationView.init(content:)();
  swift_getWitnessTable();
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  v37(v36, v34, v30);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v31 + 8);
  v38(v34, v30);
  v37(v49, v36, v30);
  return ((uint64_t (*)(char *, uint64_t))v38)(v36, v30);
}

uint64_t sub_1000AB81C@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char *a6@<X8>)
{
  unint64_t v132 = a1;
  uint64_t v133 = a3;
  uint64_t v127 = a6;
  uint64_t v9 = type metadata accessor for SearchFieldPlacement();
  uint64_t v125 = *(void *)(v9 - 8);
  uint64_t v126 = v9;
  __chkstk_darwin(v9);
  uint64_t v124 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for EditMode();
  uint64_t v122 = *(void *)(v11 - 8);
  uint64_t v123 = v11;
  __chkstk_darwin(v11);
  uint64_t v121 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B5FF4(0);
  __chkstk_darwin(v13 - 8);
  unint64_t v120 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for NavigationBarItem.TitleDisplayMode();
  uint64_t v118 = *(void *)(v15 - 8);
  uint64_t v119 = v15;
  __chkstk_darwin(v15);
  uint64_t v117 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v116 = type metadata accessor for _TraitWritingModifier();
  uint64_t v115 = type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v166 = a4;
  uint64_t v19 = a4;
  uint64_t v128 = a4;
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  type metadata accessor for _TraitWritingModifier();
  uint64_t v20 = type metadata accessor for ModifiedContent();
  uint64_t v114 = v20;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v131 = a5;
  uint64_t v129 = a2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v162 = v17;
  *((void *)&v162 + 1) = AssociatedTypeWitness;
  uint64_t v163 = v20;
  unint64_t v164 = WitnessTable;
  uint64_t v165 = AssociatedConformanceWitness;
  type metadata accessor for ForEach();
  type metadata accessor for Section();
  *(void *)&long long v162 = a2;
  *((void *)&v162 + 1) = v133;
  uint64_t v163 = v19;
  unint64_t v164 = a5;
  type metadata accessor for SearchableListSection(255, (uint64_t)&v162);
  uint64_t v23 = type metadata accessor for Array();
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v25 = type metadata accessor for Section();
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = sub_1000B5D38(&qword_100107F68, (void (*)(uint64_t))&type metadata accessor for UUID);
  *(void *)&long long v162 = v23;
  *((void *)&v162 + 1) = v24;
  uint64_t v163 = v25;
  unint64_t v164 = v26;
  uint64_t v165 = v27;
  type metadata accessor for ForEach();
  uint64_t v130 = type metadata accessor for _ConditionalContent();
  uint64_t v28 = swift_getWitnessTable();
  Swift::Int v160 = &protocol witness table for Text;
  uint64_t v161 = v28;
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v158 = v29;
  uint64_t v159 = v30;
  uint64_t v157 = swift_getWitnessTable();
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v154 = &protocol witness table for EmptyView;
  uint64_t v155 = v31;
  BOOL v156 = &protocol witness table for EmptyView;
  uint64_t v32 = swift_getWitnessTable();
  long long v151 = &protocol witness table for Text;
  uint64_t v152 = v31;
  Swift::Int v153 = &protocol witness table for EmptyView;
  uint64_t v150 = swift_getWitnessTable();
  uint64_t v33 = swift_getWitnessTable();
  uint64_t v148 = v32;
  uint64_t v149 = v33;
  uint64_t v34 = v130;
  uint64_t v110 = swift_getWitnessTable();
  uint64_t v35 = v128;
  uint64_t v36 = v129;
  *(void *)&long long v162 = v129;
  *((void *)&v162 + 1) = v34;
  uint64_t v163 = v128;
  unint64_t v164 = v110;
  uint64_t v37 = type metadata accessor for List();
  uint64_t v113 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v104 = (char *)&v90 - v38;
  uint64_t v39 = swift_getWitnessTable();
  unint64_t v40 = sub_100038AD4();
  *(void *)&long long v162 = v37;
  *((void *)&v162 + 1) = &type metadata for String;
  uint64_t v163 = v39;
  unint64_t v164 = v40;
  unint64_t v100 = v40;
  uint64_t v101 = v39;
  unint64_t v41 = v40;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v111 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v102 = (char *)&v90 - v43;
  *(void *)&long long v162 = v37;
  *((void *)&v162 + 1) = &type metadata for String;
  uint64_t v163 = v39;
  unint64_t v164 = v41;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(void *)&long long v162 = OpaqueTypeMetadata2;
  *((void *)&v162 + 1) = OpaqueTypeConformance2;
  uint64_t v91 = OpaqueTypeMetadata2;
  uint64_t v92 = OpaqueTypeConformance2;
  uint64_t v45 = OpaqueTypeConformance2;
  uint64_t v108 = swift_getOpaqueTypeMetadata2();
  uint64_t v116 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  unint64_t v94 = (char *)&v90 - v46;
  sub_1000A4F9C(255, &qword_1001082A0, (uint64_t (*)(uint64_t))sub_1000B5FF4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _EnvironmentKeyWritingModifier);
  uint64_t v47 = type metadata accessor for ModifiedContent();
  uint64_t v114 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v103 = (char *)&v90 - v48;
  sub_1000A4F9C(255, &qword_1001082B8, (uint64_t (*)(uint64_t))sub_1000B605C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleToolbarContent);
  uint64_t v50 = v49;
  *(void *)&long long v162 = OpaqueTypeMetadata2;
  *((void *)&v162 + 1) = v45;
  uint64_t v51 = swift_getOpaqueTypeConformance2();
  uint64_t v98 = v51;
  unint64_t v52 = sub_1000B60C0();
  uint64_t v146 = v51;
  unint64_t v147 = v52;
  uint64_t v53 = swift_getWitnessTable();
  unint64_t v54 = sub_1000B6148();
  *(void *)&long long v162 = v47;
  *((void *)&v162 + 1) = v50;
  uint64_t v93 = v50;
  uint64_t v163 = v53;
  unint64_t v164 = v54;
  uint64_t v55 = v53;
  unint64_t v95 = v54;
  uint64_t v96 = v53;
  uint64_t v56 = swift_getOpaqueTypeMetadata2();
  uint64_t v106 = v56;
  uint64_t v115 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v97 = (char *)&v90 - v57;
  *(void *)&long long v162 = v47;
  *((void *)&v162 + 1) = v50;
  uint64_t v163 = v55;
  unint64_t v164 = v54;
  uint64_t v105 = swift_getOpaqueTypeConformance2();
  *(void *)&long long v162 = v56;
  *((void *)&v162 + 1) = v105;
  uint64_t v112 = swift_getOpaqueTypeMetadata2();
  uint64_t v109 = *(void *)(v112 - 8);
  uint64_t v58 = __chkstk_darwin(v112);
  uint64_t v99 = (char *)&v90 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v58);
  uint64_t v107 = (char *)&v90 - v60;
  uint64_t v61 = v132;
  long long v144 = *(_OWORD *)((char *)v132 + 88);
  type metadata accessor for Set();
  type metadata accessor for State();
  State.projectedValue.getter();
  uint64_t v139 = v36;
  uint64_t v62 = v133;
  uint64_t v140 = v133;
  uint64_t v141 = v35;
  unint64_t v142 = v131;
  uint64_t v143 = v61;
  uint64_t v63 = v104;
  List.init(selection:content:)();
  long long v162 = *v61;
  uint64_t v64 = v102;
  View.navigationTitle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v113 + 8))(v63, v37);
  uint64_t v66 = v117;
  uint64_t v65 = v118;
  uint64_t v67 = v119;
  (*(void (**)(char *, void, uint64_t))(v118 + 104))(v117, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v119);
  uint64_t v68 = v94;
  uint64_t v69 = v91;
  View.navigationBarTitleDisplayMode(_:)();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v64, v69);
  swift_getKeyPath();
  uint64_t v70 = v121;
  uint64_t v71 = v122;
  uint64_t v72 = v123;
  (*(void (**)(char *, void, uint64_t))(v122 + 104))(v121, enum case for EditMode.active(_:), v123);
  uint64_t v73 = (uint64_t)v120;
  static Binding.constant(_:)();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v72);
  sub_1000B6028(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v73, 0, 1, v74);
  uint64_t v75 = v103;
  uint64_t v76 = v108;
  View.environment<A>(_:_:)();
  swift_release();
  sub_1000B3F68(v73, (uint64_t (*)(void))sub_1000B5FF4);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v68, v76);
  uint64_t v134 = v129;
  uint64_t v135 = v62;
  id v77 = v132;
  uint64_t v136 = v128;
  unint64_t v137 = v131;
  uint64_t v138 = v132;
  swift_checkMetadataState();
  id v78 = v97;
  View.toolbar<A>(content:)();
  (*(void (**)(char *, uint64_t))(v114 + 8))(v75, v47);
  long long v144 = *(_OWORD *)((char *)v77 + 104);
  uint64_t v145 = *((void *)v77 + 15);
  sub_1000B6424(0, &qword_100106C30, (uint64_t)&type metadata for String, (uint64_t (*)(void, uint64_t))&type metadata accessor for State);
  State.projectedValue.getter();
  uint64_t v79 = v124;
  static SearchFieldPlacement.automatic.getter();
  uint64_t v80 = v106;
  uint64_t v81 = v99;
  View.searchable(text:placement:prompt:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v125 + 8))(v79, v126);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v78, v80);
  uint64_t v82 = v109;
  unsigned int v83 = *(void (**)(char *, char *, uint64_t))(v109 + 16);
  uint64_t v84 = v107;
  uint64_t v85 = v81;
  uint64_t v86 = v81;
  uint64_t v87 = v112;
  v83(v107, v86, v112);
  unsigned int v88 = *(void (**)(char *, uint64_t))(v82 + 8);
  v88(v85, v87);
  v83(v127, v84, v87);
  return ((uint64_t (*)(char *, uint64_t))v88)(v84, v87);
}

uint64_t sub_1000AC6F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v75 = a3;
  uint64_t v76 = a1;
  uint64_t v81 = a6;
  uint64_t v129 = a2;
  uint64_t v130 = a3;
  uint64_t v131 = a4;
  uint64_t v132 = a5;
  uint64_t v74 = type metadata accessor for SearchableListSection(255, (uint64_t)&v129);
  unsigned int v83 = (uint64_t *)type metadata accessor for Array();
  uint64_t v82 = (void *)type metadata accessor for UUID();
  uint64_t v9 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v89 = type metadata accessor for _TraitWritingModifier();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v134 = a4;
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v90 = v11;
  uint64_t v87 = type metadata accessor for _TraitWritingModifier();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v129 = v9;
  uint64_t v130 = AssociatedTypeWitness;
  uint64_t v88 = v12;
  uint64_t v131 = v12;
  uint64_t v132 = WitnessTable;
  uint64_t v133 = AssociatedConformanceWitness;
  uint64_t v15 = type metadata accessor for ForEach();
  uint64_t v16 = type metadata accessor for Section();
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v18 = sub_1000B5D38(&qword_100107F68, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v129 = (uint64_t)v83;
  uint64_t v130 = (uint64_t)v82;
  uint64_t v86 = v16;
  uint64_t v131 = v16;
  uint64_t v132 = v17;
  uint64_t v71 = v17;
  uint64_t v133 = v18;
  uint64_t v19 = type metadata accessor for ForEach();
  uint64_t v73 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v72 = (char *)&v68 - v23;
  uint64_t v85 = v15;
  uint64_t v24 = type metadata accessor for Section();
  uint64_t v70 = *(void *)(v24 - 8);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v69 = (char *)&v68 - v28;
  uint64_t v77 = v29;
  uint64_t v80 = v19;
  uint64_t v30 = type metadata accessor for _ConditionalContent();
  uint64_t v78 = *(void *)(v30 - 8);
  uint64_t v79 = v30;
  __chkstk_darwin(v30);
  uint64_t v84 = (char *)&v68 - v31;
  uint64_t v32 = v75;
  uint64_t v129 = a2;
  uint64_t v130 = v75;
  uint64_t v131 = a4;
  uint64_t v132 = a5;
  uint64_t v33 = type metadata accessor for SearchableListView(0, (uint64_t)&v129);
  uint64_t v34 = v76;
  BOOL v35 = sub_1000AAE20();
  if (v35)
  {
    unsigned int v83 = &v68;
    __chkstk_darwin(v35);
    *(&v68 - 6) = a2;
    *(&v68 - 5) = v32;
    *(&v68 - 4) = a4;
    *(&v68 - 3) = a5;
    uint64_t v67 = v34;
    uint64_t v36 = swift_getWitnessTable();
    uint64_t v101 = &protocol witness table for Text;
    uint64_t v102 = v36;
    uint64_t v37 = swift_getWitnessTable();
    uint64_t v38 = swift_getWitnessTable();
    uint64_t v99 = v37;
    uint64_t v100 = v38;
    uint64_t v98 = swift_getWitnessTable();
    uint64_t v82 = &protocol conformance descriptor for <> ForEach<A, B, C>;
    uint64_t v39 = swift_getWitnessTable();
    Section<>.init(content:)();
    unint64_t v95 = &protocol witness table for EmptyView;
    uint64_t v96 = v39;
    uint64_t v97 = &protocol witness table for EmptyView;
    uint64_t v40 = v77;
    unsigned int v83 = (uint64_t *)swift_getWitnessTable();
    unint64_t v41 = v69;
    uint64_t v42 = v70;
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
    v43(v69, v27, v40);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v42 + 8);
    v44(v27, v40);
    v43(v27, v41, v40);
    uint64_t v92 = &protocol witness table for Text;
    uint64_t v93 = v39;
    unint64_t v94 = &protocol witness table for EmptyView;
    uint64_t v91 = swift_getWitnessTable();
    swift_getWitnessTable();
    sub_1000A52CC((uint64_t)v27, v40);
    v44(v27, v40);
    v44(v41, v40);
  }
  else
  {
    uint64_t v129 = sub_1000AACD8(v33);
    uint64_t v45 = (void *)swift_allocObject();
    _OWORD v45[2] = a2;
    v45[3] = v32;
    v45[4] = a4;
    v45[5] = a5;
    uint64_t v46 = swift_getWitnessTable();
    uint64_t v127 = &protocol witness table for Text;
    uint64_t v128 = v46;
    uint64_t v47 = swift_getWitnessTable();
    uint64_t v48 = swift_getWitnessTable();
    uint64_t v125 = v47;
    uint64_t v126 = v48;
    uint64_t v124 = swift_getWitnessTable();
    uint64_t v49 = swift_getWitnessTable();
    uint64_t v121 = &protocol witness table for Text;
    uint64_t v122 = v49;
    uint64_t v123 = &protocol witness table for EmptyView;
    uint64_t v50 = swift_getWitnessTable();
    uint64_t v67 = swift_getWitnessTable();
    ForEach<>.init(_:content:)();
    uint64_t v120 = v50;
    uint64_t v51 = v80;
    unsigned int v83 = (uint64_t *)swift_getWitnessTable();
    uint64_t v53 = v72;
    uint64_t v52 = v73;
    unint64_t v54 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    v54(v72, v22, v51);
    uint64_t v55 = *(void (**)(char *, uint64_t))(v52 + 8);
    v55(v22, v51);
    v54(v22, v53, v51);
    uint64_t v117 = &protocol witness table for EmptyView;
    uint64_t v118 = v49;
    uint64_t v119 = &protocol witness table for EmptyView;
    uint64_t v56 = v77;
    swift_getWitnessTable();
    sub_1000A53C4((uint64_t)v22, v56, v51);
    v55(v22, v51);
    v55(v53, v51);
  }
  uint64_t v57 = swift_getWitnessTable();
  uint64_t v115 = &protocol witness table for Text;
  uint64_t v116 = v57;
  uint64_t v58 = swift_getWitnessTable();
  uint64_t v59 = swift_getWitnessTable();
  uint64_t v113 = v58;
  uint64_t v114 = v59;
  uint64_t v112 = swift_getWitnessTable();
  uint64_t v60 = swift_getWitnessTable();
  uint64_t v109 = &protocol witness table for EmptyView;
  uint64_t v110 = v60;
  uint64_t v111 = &protocol witness table for EmptyView;
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v106 = &protocol witness table for Text;
  uint64_t v107 = v60;
  uint64_t v108 = &protocol witness table for EmptyView;
  uint64_t v105 = swift_getWitnessTable();
  uint64_t v62 = swift_getWitnessTable();
  uint64_t v103 = v61;
  uint64_t v104 = v62;
  uint64_t v63 = v79;
  swift_getWitnessTable();
  uint64_t v64 = v78;
  uint64_t v65 = v84;
  (*(void (**)(uint64_t, char *, uint64_t))(v78 + 16))(v81, v84, v63);
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v65, v63);
}

uint64_t sub_1000AD13C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v34 = a6;
  uint64_t v10 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v32 = type metadata accessor for _TraitWritingModifier();
  v28[0] = type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v45 = a4;
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  v28[1] = type metadata accessor for _TraitWritingModifier();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v31 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v30 = AssociatedTypeWitness;
  uint64_t v40 = v10;
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v42 = v12;
  uint64_t v43 = WitnessTable;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for ForEach();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v28 - v18;
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  type metadata accessor for SearchableListView(0, (uint64_t)&v40);
  uint64_t v40 = sub_1000AAEB0();
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = a2;
  v20[3] = a3;
  v20[4] = a4;
  v20[5] = a5;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v38 = &protocol witness table for Text;
  uint64_t v39 = v21;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v36 = v22;
  uint64_t v37 = v23;
  uint64_t v24 = swift_getWitnessTable();
  ForEach<>.init(_:content:)();
  uint64_t v35 = v24;
  swift_getWitnessTable();
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v25(v19, v17, v13);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v14 + 8);
  v26(v17, v13);
  v25(v34, v19, v13);
  return ((uint64_t (*)(char *, uint64_t))v26)(v19, v13);
}

uint64_t sub_1000AD518@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v34 = a5;
  v30[1] = a3;
  int v35 = a2;
  uint64_t v43 = a7;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v46 = a6;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v39 = v10;
  uint64_t v11 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t v42 = v11;
  __chkstk_darwin(v11);
  uint64_t v40 = (char *)v30 - v12;
  uint64_t v31 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v13 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v15 = (char *)v30 - v14;
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v32 = type metadata accessor for _TraitWritingModifier();
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v36 = *(void *)(v16 - 8);
  uint64_t v37 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v30 - v17;
  uint64_t v19 = *(void *)(a4 - 8);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v30[0] = a1;
  v20(v15, a1, a4);
  uint64_t v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56);
  v21(v15, 0, 1, a4);
  uint64_t v33 = v18;
  uint64_t v22 = v34;
  View._trait<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v31);
  if (v35)
  {
    uint64_t v23 = v40;
    v20(v40, v30[0], a4);
    v21(v23, 0, 1, a4);
    uint64_t v24 = swift_checkMetadataState();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 0, 1, v24);
  }
  else
  {
    uint64_t v25 = swift_checkMetadataState();
    uint64_t v23 = v40;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v40, 1, 1, v25);
  }
  type metadata accessor for TagValueTraitKey();
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v44 = v22;
  uint64_t v45 = v26;
  uint64_t v27 = v37;
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v28 = v33;
  View._trait<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v42);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v28, v27);
}

uint64_t sub_1000AD9B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v36 = a3;
  uint64_t v37 = a6;
  uint64_t v10 = type metadata accessor for Array();
  uint64_t v31 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v34 = a4;
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v35 = type metadata accessor for _TraitWritingModifier();
  uint64_t v33 = type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v56 = a4;
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  type metadata accessor for _TraitWritingModifier();
  uint64_t v32 = type metadata accessor for ModifiedContent();
  uint64_t v51 = v10;
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v53 = v32;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ForEach();
  uint64_t v12 = type metadata accessor for Section();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v30 - v17;
  uint64_t v19 = a1[1];
  uint64_t v51 = *a1;
  uint64_t v52 = v19;
  sub_100038AD4();
  swift_bridgeObjectRetain();
  uint64_t v51 = Text.init<A>(_:)();
  uint64_t v52 = v20;
  LOBYTE(v53) = v21 & 1;
  uint64_t WitnessTable = v22;
  uint64_t v38 = a2;
  uint64_t v39 = v36;
  uint64_t v40 = v34;
  uint64_t v41 = v31;
  uint64_t v42 = a1;
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v49 = &protocol witness table for Text;
  uint64_t v50 = v23;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v47 = v24;
  uint64_t v48 = v25;
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v26 = swift_getWitnessTable();
  Section<>.init(header:content:)();
  uint64_t v43 = &protocol witness table for Text;
  uint64_t v44 = v26;
  uint64_t v45 = &protocol witness table for EmptyView;
  swift_getWitnessTable();
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v27(v18, v16, v12);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  v28(v16, v12);
  v27(v37, v18, v12);
  return ((uint64_t (*)(char *, uint64_t))v28)(v18, v12);
}

uint64_t sub_1000ADE30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v36 = a3;
  uint64_t v37 = a6;
  uint64_t v10 = type metadata accessor for Array();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v34 = a4;
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v35 = type metadata accessor for _TraitWritingModifier();
  uint64_t v30 = type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v48 = a4;
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  type metadata accessor for _TraitWritingModifier();
  uint64_t v29 = type metadata accessor for ModifiedContent();
  uint64_t v33 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v32 = AssociatedTypeWitness;
  uint64_t v43 = v10;
  uint64_t v44 = AssociatedTypeWitness;
  uint64_t v45 = v29;
  uint64_t v46 = WitnessTable;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for ForEach();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v28 - v17;
  uint64_t v43 = *(void *)(a1 + 16);
  uint64_t v19 = (void *)swift_allocObject();
  uint64_t v20 = v36;
  _OWORD v19[2] = a2;
  void v19[3] = v20;
  void v19[4] = v34;
  uint64_t v19[5] = a5;
  swift_bridgeObjectRetain();
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v41 = &protocol witness table for Text;
  uint64_t v42 = v21;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v39 = v22;
  uint64_t v40 = v23;
  uint64_t v24 = swift_getWitnessTable();
  ForEach<>.init(_:content:)();
  uint64_t v38 = v24;
  swift_getWitnessTable();
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v25(v18, v16, v12);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v16, v12);
  v25(v37, v18, v12);
  return ((uint64_t (*)(char *, uint64_t))v26)(v18, v12);
}

uint64_t sub_1000AE214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v33 = a4;
  uint64_t v31 = a3;
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v32 = type metadata accessor for _TraitWritingModifier();
  uint64_t v29 = type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v42 = a3;
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v30 = type metadata accessor for _TraitWritingModifier();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v28 = (char *)&v27 - v12;
  uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v39 = v13;
  sub_100038AD4();
  uint64_t v14 = Text.init<A>(_:)();
  uint64_t v16 = v15;
  uint64_t v38 = v14;
  uint64_t v39 = v15;
  char v18 = v17 & 1;
  char v40 = v17 & 1;
  uint64_t v41 = v19;
  sub_1000AD518(a1, 1, (uint64_t)&type metadata for Text, a2, (uint64_t)&protocol witness table for Text, v31, (uint64_t)v11);
  sub_10003CDC8(v14, v16, v18);
  swift_bridgeObjectRelease();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v36 = &protocol witness table for Text;
  uint64_t v37 = WitnessTable;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v34 = v21;
  uint64_t v35 = v22;
  swift_getWitnessTable();
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v24 = v28;
  v23(v28, v11, v7);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v8 + 8);
  v25(v11, v7);
  v23(v33, v24, v7);
  return ((uint64_t (*)(char *, uint64_t))v25)(v24, v7);
}

uint64_t sub_1000AE540(uint64_t a1)
{
  sub_1000B5FF4(0);
  __chkstk_darwin(v2 - 8);
  sub_1000B3CC0(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))sub_1000B5FF4);
  return EnvironmentValues.editMode.setter();
}

uint64_t sub_1000AE5DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v27 = a2;
  uint64_t v30 = a1;
  uint64_t v32 = a6;
  sub_1000B605C();
  uint64_t v31 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ToolbarItemPlacement();
  __chkstk_darwin(v13 - 8);
  sub_1000B35DC();
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v27 - v20;
  static ToolbarItemPlacement.cancellationAction.getter();
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v22 = v30;
  uint64_t v42 = v30;
  sub_1000B3668(0, &qword_100106B88, (uint64_t (*)(void, void *, void *))&type metadata accessor for Button);
  sub_10007ACF4();
  ToolbarItem<>.init(placement:content:)();
  static ToolbarItemPlacement.confirmationAction.getter();
  uint64_t v33 = v27;
  uint64_t v34 = v28;
  uint64_t v35 = v29;
  uint64_t v36 = a5;
  uint64_t v37 = v22;
  ToolbarItem<>.init(placement:content:)();
  uint64_t v23 = &v12[*(int *)(v31 + 48)];
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v24(v12, v21, v15);
  v24(v23, v19, v15);
  TupleToolbarContent.init(_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v16 + 8);
  v25(v19, v15);
  return ((uint64_t (*)(char *, uint64_t))v25)(v21, v15);
}

uint64_t sub_1000AE8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&long long v7 = a2;
  *((void *)&v7 + 1) = a3;
  uint64_t v8 = a4;
  uint64_t v9 = a5;
  type metadata accessor for SearchableListView(0, (uint64_t)&v7);
  long long v7 = *(_OWORD *)(a1 + 64);
  LOBYTE(v8) = *(unsigned char *)(a1 + 80);
  char v10 = 0;
  sub_1000B6424(0, &qword_1001082D8, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for Binding);
  return Binding.wrappedValue.setter();
}

uint64_t sub_1000AE938(char a1)
{
  if (a1)
  {
    type metadata accessor for Set();
    type metadata accessor for State();
    State.wrappedValue.getter();
    sub_1000AAD48();
  }
  sub_1000B6424(0, &qword_1001082D8, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for Binding);
  return Binding.wrappedValue.setter();
}

uint64_t sub_1000AEA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  *(void *)(v10 + 32) = a4;
  *(void *)(v10 + 4sub_10004C8C4(0, 0) = a5;
  long long v11 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v10 + 144) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v10 + 16sub_10004C8C4(0, 0) = v11;
  *(void *)(v10 + 176) = *(void *)(a1 + 128);
  long long v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v10 + 8sub_10004C8C4(0, 0) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v10 + 96) = v12;
  long long v13 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v10 + 112) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v10 + 128) = v13;
  long long v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 64) = v14;
  sub_1000B6340(a1);

  return Button.init(action:label:)();
}

uint64_t sub_1000AEADC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AEAEC(a1);
}

uint64_t sub_1000AEAEC@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1000AEB4C@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return sub_1000AB034(a1, a2);
}

uint64_t sub_1000AEBA0(uint64_t *a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4, void (*a5)(id **, void ***, char **))
{
  uint64_t v10 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v10 = a2(v10);
    *a1 = v10;
  }
  uint64_t v12 = *(void *)(v10 + 16);
  v14[0] = v10 + 32;
  v14[1] = v12;
  sub_1000AEC4C(v14, a3, a4, a5);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int sub_1000AEC4C(uint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(id **, void ***, char **))
{
  Swift::Int v7 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v7);
  if (result >= v7)
  {
    if (v7 < 0) {
      goto LABEL_152;
    }
    if (v7) {
      return sub_1000AF568(0, v7, 1, a1);
    }
    return result;
  }
  if (v7 >= 0) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v7 + 1;
  }
  if (v7 < -1) {
    goto LABEL_160;
  }
  uint64_t v126 = a1;
  Swift::Int v127 = result;
  uint64_t v136 = v4;
  if (v7 < 2)
  {
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
    uint64_t v141 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v134 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v7 != 1)
    {
      unint64_t v15 = _swiftEmptyArrayStorage[2];
LABEL_117:
      if (v15 >= 2)
      {
        uint64_t v118 = *v126;
        do
        {
          unint64_t v119 = v15 - 2;
          if (v15 < 2) {
            goto LABEL_147;
          }
          if (!v118) {
            goto LABEL_159;
          }
          uint64_t v120 = *(void *)&v12[16 * v119 + 32];
          uint64_t v121 = *(void *)&v12[16 * v15 + 24];
          sub_1000AF6EC((id *)(v118 + 8 * v120), (id *)(v118 + 8 * *(void *)&v12[16 * v15 + 16]), (id *)(v118 + 8 * v121), v134, a4);
          if (v136) {
            goto LABEL_115;
          }
          if (v121 < v120) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v12 = sub_10009130C((uint64_t)v12);
          }
          if (v119 >= *((void *)v12 + 2)) {
            goto LABEL_149;
          }
          uint64_t v122 = &v12[16 * v119 + 32];
          *(void *)uint64_t v122 = v120;
          *((void *)v122 + 1) = v121;
          unint64_t v123 = *((void *)v12 + 2);
          if (v15 > v123) {
            goto LABEL_150;
          }
          memmove(&v12[16 * v15 + 16], &v12[16 * v15 + 32], 16 * (v123 - v15));
          *((void *)v12 + 2) = v123 - 1;
          unint64_t v15 = v123 - 1;
        }
        while (v123 > 2);
      }
      swift_bridgeObjectRelease();
      *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x1sub_10004C8C4(0, 0) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v10 = v9 >> 1;
    sub_10001E254(0, a2);
    uint64_t v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x1sub_10004C8C4(0, 0) = v10;
    uint64_t v134 = (void **)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v141 = v11;
  }
  Swift::Int v13 = 0;
  uint64_t v14 = *a1;
  uint64_t v124 = *a1 + 16;
  uint64_t v125 = *a1 - 8;
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v132 = v7;
  uint64_t v140 = *a1;
  while (2)
  {
    Swift::Int v16 = v13 + 1;
    Swift::Int v131 = v13;
    if (v13 + 1 >= v7) {
      goto LABEL_45;
    }
    uint64_t v128 = v12;
    uint64_t v17 = *(void **)(v14 + 8 * v13);
    id v18 = *(id *)(v14 + 8 * v16);
    id v19 = v17;
    id v20 = [v18 identifier];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    id v24 = [v19 identifier];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    if (v21 == v25 && v23 == v27) {
      int v137 = 0;
    }
    else {
      int v137 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    Swift::Int v16 = v13 + 2;
    Swift::Int v7 = v132;
    if (v13 + 2 >= v132) {
      goto LABEL_36;
    }
    uint64_t v29 = (id *)(v124 + 8 * v13);
    while (1)
    {
      Swift::Int v31 = v16;
      uint64_t v32 = *(v29 - 1);
      id v33 = *v29;
      id v34 = v32;
      id v35 = [v33 identifier];
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;

      id v39 = [v34 identifier];
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v42 = v41;

      if (v36 == v40 && v38 == v42)
      {

        swift_bridgeObjectRelease_n();
        if (v137)
        {
          uint64_t v12 = v128;
          uint64_t v14 = v140;
          Swift::Int v16 = v31;
          Swift::Int v13 = v131;
          Swift::Int v7 = v132;
          goto LABEL_37;
        }
        goto LABEL_25;
      }
      int v30 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v137 ^ v30)) {
        break;
      }
LABEL_25:
      Swift::Int v16 = v31 + 1;
      ++v29;
      Swift::Int v7 = v132;
      if (v132 == v31 + 1)
      {
        Swift::Int v16 = v132;
        goto LABEL_35;
      }
    }
    Swift::Int v7 = v132;
    Swift::Int v16 = v31;
LABEL_35:
    Swift::Int v13 = v131;
LABEL_36:
    uint64_t v12 = v128;
    uint64_t v14 = v140;
    if (v137)
    {
LABEL_37:
      if (v16 < v13) {
        goto LABEL_153;
      }
      if (v13 < v16)
      {
        uint64_t v44 = (uint64_t *)(v125 + 8 * v16);
        Swift::Int v45 = v16;
        Swift::Int v46 = v13;
        uint64_t v47 = (uint64_t *)(v14 + 8 * v13);
        do
        {
          if (v46 != --v45)
          {
            if (!v14) {
              goto LABEL_158;
            }
            uint64_t v48 = *v47;
            *uint64_t v47 = *v44;
            *uint64_t v44 = v48;
          }
          ++v46;
          --v44;
          ++v47;
        }
        while (v46 < v45);
      }
    }
LABEL_45:
    if (v16 >= v7) {
      goto LABEL_68;
    }
    if (__OFSUB__(v16, v13)) {
      goto LABEL_151;
    }
    if (v16 - v13 >= v127)
    {
LABEL_68:
      if (v16 < v13) {
        goto LABEL_146;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = sub_100091098(0, *((void *)v12 + 2) + 1, 1, v12);
      }
      unint64_t v68 = *((void *)v12 + 2);
      unint64_t v67 = *((void *)v12 + 3);
      unint64_t v15 = v68 + 1;
      uint64_t v14 = v140;
      if (v68 >= v67 >> 1)
      {
        uint64_t v117 = sub_100091098((char *)(v67 > 1), v68 + 1, 1, v12);
        uint64_t v14 = v140;
        uint64_t v12 = v117;
      }
      *((void *)v12 + 2) = v15;
      uint64_t v69 = v12 + 32;
      uint64_t v70 = &v12[16 * v68 + 32];
      *(void *)uint64_t v70 = v13;
      *((void *)v70 + 1) = v16;
      Swift::Int v139 = v16;
      if (!v68)
      {
        unint64_t v15 = 1;
LABEL_14:
        Swift::Int v7 = v132;
        Swift::Int v13 = v139;
        if (v139 >= v132) {
          goto LABEL_117;
        }
        continue;
      }
      while (1)
      {
        unint64_t v71 = v15 - 1;
        if (v15 >= 4)
        {
          uint64_t v76 = &v69[16 * v15];
          uint64_t v77 = *((void *)v76 - 8);
          uint64_t v78 = *((void *)v76 - 7);
          BOOL v82 = __OFSUB__(v78, v77);
          uint64_t v79 = v78 - v77;
          if (v82) {
            goto LABEL_135;
          }
          uint64_t v81 = *((void *)v76 - 6);
          uint64_t v80 = *((void *)v76 - 5);
          BOOL v82 = __OFSUB__(v80, v81);
          uint64_t v74 = v80 - v81;
          char v75 = v82;
          if (v82) {
            goto LABEL_136;
          }
          unint64_t v83 = v15 - 2;
          uint64_t v84 = &v69[16 * v15 - 32];
          uint64_t v86 = *(void *)v84;
          uint64_t v85 = *((void *)v84 + 1);
          BOOL v82 = __OFSUB__(v85, v86);
          uint64_t v87 = v85 - v86;
          if (v82) {
            goto LABEL_138;
          }
          BOOL v82 = __OFADD__(v74, v87);
          uint64_t v88 = v74 + v87;
          if (v82) {
            goto LABEL_141;
          }
          if (v88 >= v79)
          {
            uint64_t v106 = &v69[16 * v71];
            uint64_t v108 = *(void *)v106;
            uint64_t v107 = *((void *)v106 + 1);
            BOOL v82 = __OFSUB__(v107, v108);
            uint64_t v109 = v107 - v108;
            if (v82) {
              goto LABEL_145;
            }
            BOOL v99 = v74 < v109;
            goto LABEL_105;
          }
        }
        else
        {
          if (v15 != 3)
          {
            uint64_t v100 = *((void *)v12 + 4);
            uint64_t v101 = *((void *)v12 + 5);
            BOOL v82 = __OFSUB__(v101, v100);
            uint64_t v93 = v101 - v100;
            char v94 = v82;
            goto LABEL_99;
          }
          uint64_t v73 = *((void *)v12 + 4);
          uint64_t v72 = *((void *)v12 + 5);
          BOOL v82 = __OFSUB__(v72, v73);
          uint64_t v74 = v72 - v73;
          char v75 = v82;
        }
        if (v75) {
          goto LABEL_137;
        }
        unint64_t v83 = v15 - 2;
        uint64_t v89 = &v69[16 * v15 - 32];
        uint64_t v91 = *(void *)v89;
        uint64_t v90 = *((void *)v89 + 1);
        BOOL v92 = __OFSUB__(v90, v91);
        uint64_t v93 = v90 - v91;
        char v94 = v92;
        if (v92) {
          goto LABEL_140;
        }
        unint64_t v95 = &v69[16 * v71];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v82 = __OFSUB__(v96, v97);
        uint64_t v98 = v96 - v97;
        if (v82) {
          goto LABEL_143;
        }
        if (__OFADD__(v93, v98)) {
          goto LABEL_144;
        }
        if (v93 + v98 >= v74)
        {
          BOOL v99 = v74 < v98;
LABEL_105:
          if (v99) {
            unint64_t v71 = v83;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v94) {
          goto LABEL_139;
        }
        uint64_t v102 = &v69[16 * v71];
        uint64_t v104 = *(void *)v102;
        uint64_t v103 = *((void *)v102 + 1);
        BOOL v82 = __OFSUB__(v103, v104);
        uint64_t v105 = v103 - v104;
        if (v82) {
          goto LABEL_142;
        }
        if (v105 < v93) {
          goto LABEL_14;
        }
LABEL_107:
        unint64_t v110 = v71 - 1;
        if (v71 - 1 >= v15)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
          goto LABEL_155;
        }
        if (!v14) {
          goto LABEL_157;
        }
        uint64_t v111 = v12;
        uint64_t v112 = &v69[16 * v110];
        uint64_t v113 = *(void *)v112;
        uint64_t v114 = &v69[16 * v71];
        uint64_t v115 = *((void *)v114 + 1);
        sub_1000AF6EC((id *)(v14 + 8 * *(void *)v112), (id *)(v14 + 8 * *(void *)v114), (id *)(v14 + 8 * v115), v134, a4);
        if (v136)
        {
LABEL_115:
          swift_bridgeObjectRelease();
          *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x1sub_10004C8C4(0, 0) = 0;
          specialized Array._endMutation()();
          return swift_bridgeObjectRelease();
        }
        if (v115 < v113) {
          goto LABEL_132;
        }
        if (v71 > *((void *)v111 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v112 = v113;
        *(void *)&v69[16 * v110 + 8] = v115;
        unint64_t v116 = *((void *)v111 + 2);
        if (v71 >= v116) {
          goto LABEL_134;
        }
        uint64_t v12 = v111;
        uint64_t v136 = 0;
        unint64_t v15 = v116 - 1;
        memmove(&v69[16 * v71], v114 + 16, 16 * (v116 - 1 - v71));
        *((void *)v111 + 2) = v116 - 1;
        uint64_t v14 = v140;
        if (v116 <= 2) {
          goto LABEL_14;
        }
      }
    }
    break;
  }
  if (__OFADD__(v13, v127)) {
    goto LABEL_154;
  }
  if (v13 + v127 >= v7) {
    Swift::Int v49 = v7;
  }
  else {
    Swift::Int v49 = v13 + v127;
  }
  if (v49 >= v13)
  {
    if (v16 != v49)
    {
      uint64_t v129 = v12;
      Swift::Int v130 = v49;
      uint64_t v50 = v125 + 8 * v16;
      do
      {
        uint64_t v52 = *(void **)(v14 + 8 * v16);
        uint64_t v133 = v50;
        Swift::Int v138 = v16;
        while (1)
        {
          uint64_t v53 = *(void **)v50;
          id v54 = v52;
          id v55 = v53;
          id v56 = [v54 identifier];
          uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v59 = v58;

          id v60 = [v55 identifier];
          uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v63 = v62;

          if (v57 == v61 && v59 == v63) {
            break;
          }
          char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v65 & 1) == 0) {
            goto LABEL_56;
          }
          Swift::Int v51 = v138;
          uint64_t v14 = v140;
          if (!v140) {
            goto LABEL_156;
          }
          uint64_t v66 = *(void **)v50;
          uint64_t v52 = *(void **)(v50 + 8);
          *(void *)uint64_t v50 = v52;
          *(void *)(v50 + 8) = v66;
          v50 -= 8;
          if (v138 == ++v13) {
            goto LABEL_57;
          }
        }

        swift_bridgeObjectRelease_n();
LABEL_56:
        Swift::Int v51 = v138;
        uint64_t v14 = v140;
LABEL_57:
        Swift::Int v16 = v51 + 1;
        uint64_t v50 = v133 + 8;
        Swift::Int v13 = v131;
      }
      while (v16 != v130);
      Swift::Int v16 = v130;
      uint64_t v12 = v129;
    }
    goto LABEL_68;
  }
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000AF568(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v23 = result;
  if (a3 != a2)
  {
    uint64_t v25 = *a4;
    uint64_t v4 = *a4 + 8 * a3 - 8;
LABEL_6:
    uint64_t v6 = *(void **)(v25 + 8 * a3);
    uint64_t v7 = v23;
    uint64_t v24 = v4;
    uint64_t v26 = a3;
    while (1)
    {
      uint64_t v8 = *(void **)v4;
      id v9 = v6;
      id v10 = v8;
      id v11 = [v9 identifier];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      id v15 = [v10 identifier];
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      if (v12 == v16 && v14 == v18)
      {

        Swift::Int result = swift_bridgeObjectRelease_n();
        uint64_t v5 = v26;
LABEL_5:
        a3 = v5 + 1;
        uint64_t v4 = v24 + 8;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_6;
      }
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      uint64_t v5 = v26;
      if ((v20 & 1) == 0) {
        goto LABEL_5;
      }
      if (!v25) {
        break;
      }
      uint64_t v21 = *(void **)v4;
      uint64_t v6 = *(void **)(v4 + 8);
      *(void *)uint64_t v4 = v6;
      *(void *)(v4 + 8) = v21;
      v4 -= 8;
      if (v26 == ++v7) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AF6EC(id *__src, id *a2, id *a3, void **__dst, void (*a5)(id **, void ***, char **))
{
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v8 = __src;
  int64_t v9 = (char *)a2 - (char *)__src;
  int64_t v10 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v10 = (char *)a2 - (char *)__src;
  }
  uint64_t v11 = v10 >> 3;
  uint64_t v12 = (char *)a3 - (char *)a2;
  uint64_t v13 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0) {
    uint64_t v13 = (char *)a3 - (char *)a2;
  }
  uint64_t v14 = v13 >> 3;
  uint64_t v64 = __src;
  uint64_t v63 = __dst;
  if (v11 >= v13 >> 3)
  {
    if (v12 < -7) {
      goto LABEL_53;
    }
    if (__dst != a2 || &a2[v14] <= __dst) {
      memmove(__dst, a2, 8 * v14);
    }
    id v54 = (char *)__dst;
    id v33 = (char *)&__dst[v14];
    uint64_t v62 = v33;
    uint64_t v64 = v7;
    if (v8 >= v7 || v12 < 8)
    {
LABEL_52:
      a5(&v64, &v63, &v62);
      return 1;
    }
    id v34 = v7;
    uint64_t v59 = v8;
    while (1)
    {
      id v55 = v33;
      uint64_t v57 = v7;
      uint64_t v61 = v6;
      uint64_t v36 = (void *)*((void *)v33 - 1);
      v33 -= 8;
      id v35 = v36;
      uint64_t v37 = *--v34;
      id v38 = v35;
      id v39 = v37;
      id v40 = [v38 identifier];
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;

      id v44 = [v39 identifier];
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v47 = v46;

      if (v41 == v45 && v43 == v47) {
        break;
      }
      char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v50 = v61;
      uint64_t v6 = v61 - 1;
      if ((v49 & 1) == 0) {
        goto LABEL_46;
      }
      unint64_t v51 = (unint64_t)v59;
      id v33 = v55;
      if (v61 != v57 || v6 >= v57) {
        *uint64_t v6 = *v34;
      }
      uint64_t v64 = v34;
LABEL_50:
      if ((unint64_t)v34 > v51)
      {
        uint64_t v7 = v34;
        if (v33 > v54) {
          continue;
        }
      }
      goto LABEL_52;
    }

    swift_bridgeObjectRelease_n();
    uint64_t v50 = v61;
    uint64_t v6 = v61 - 1;
LABEL_46:
    id v34 = v57;
    unint64_t v51 = (unint64_t)v59;
    uint64_t v62 = v33;
    if (v50 < (id *)v55 || v6 >= (id *)v55 || v50 != (id *)v55) {
      *uint64_t v6 = *(id *)v33;
    }
    goto LABEL_50;
  }
  if (v9 >= -7)
  {
    if (__dst != __src || &__src[v11] <= __dst) {
      memmove(__dst, __src, 8 * v11);
    }
    id v56 = &__dst[v11];
    uint64_t v62 = (char *)v56;
    if (v7 < v6 && v9 >= 8)
    {
      id v15 = __dst;
      id v60 = v6;
      while (1)
      {
        uint64_t v58 = v8;
        uint64_t v16 = v7;
        uint64_t v17 = *v15;
        id v18 = *v7;
        id v19 = v17;
        id v20 = [v18 identifier];
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v23 = v22;

        id v24 = [v19 identifier];
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v27 = v26;

        if (v21 == v25 && v23 == v27) {
          break;
        }
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v29 & 1) == 0) {
          goto LABEL_23;
        }
        int v30 = v16 + 1;
        Swift::Int v31 = v58;
        uint64_t v32 = v60;
        if (v58 < v16 || v58 >= v30 || v58 != v16) {
          char *v58 = *v16;
        }
LABEL_26:
        uint64_t v8 = v31 + 1;
        if (v15 < v56)
        {
          uint64_t v7 = v30;
          if (v30 < v32) {
            continue;
          }
        }
        uint64_t v64 = v8;
        goto LABEL_52;
      }

      swift_bridgeObjectRelease_n();
LABEL_23:
      Swift::Int v31 = v58;
      uint64_t v32 = v60;
      if (v58 != v15) {
        char *v58 = *v15;
      }
      uint64_t v63 = ++v15;
      int v30 = v16;
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_53:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000AFB0C(uint64_t a1, char a2)
{
  uint64_t v4 = *v2;
  Hasher.init(_seed:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  id v19 = v2;
  uint64_t v8 = ~v6;
  while (1)
  {
    if (*(unsigned char *)(*(void *)(v4 + 48) + 16 * v7 + 8))
    {
      if ((a2 & 1) == 0) {
        goto LABEL_3;
      }
    }
    else if (a2)
    {
      goto LABEL_3;
    }
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
    if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12) {
      break;
    }
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_16;
    }
LABEL_3:
    unint64_t v7 = (v7 + 1) & v8;
    if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_16:
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *v19;
  uint64_t v20 = *v19;
  *id v19 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100091884();
    uint64_t v17 = v20;
  }
  uint64_t v15 = *(void *)(*(void *)(v17 + 48) + 16 * v7);
  sub_1000AFCFC(v7);
  *id v19 = v20;
  swift_bridgeObjectRelease();
  return v15;
}

unint64_t sub_1000AFCFC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      uint64_t v24 = v4;
      do
      {
        uint64_t v10 = 16 * v6;
        uint64_t v11 = v3;
        uint64_t v12 = *(void **)(*(void *)(v3 + 48) + 16 * v6);
        unint64_t v13 = v9;
        Hasher.init(_seed:)();
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        int64_t v14 = v2;
        id v15 = v12;
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Swift::Int v16 = Hasher._finalize()();

        int64_t v2 = v14;
        unint64_t v9 = v13;
        Swift::Int v17 = v16 & v7;
        if (v14 >= (uint64_t)v13)
        {
          if (v17 < v13)
          {
            uint64_t v4 = v24;
            uint64_t v3 = v11;
          }
          else
          {
            uint64_t v4 = v24;
            uint64_t v3 = v11;
            if (v2 >= v17) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v4 = v24;
          uint64_t v3 = v11;
          if (v17 >= v9 || v2 >= v17)
          {
LABEL_12:
            uint64_t v18 = *(void *)(v3 + 48);
            id v19 = (_OWORD *)(v18 + 16 * v2);
            uint64_t v20 = (_OWORD *)(v18 + v10);
            if (16 * v2 != v10 || (int64_t v2 = v6, v19 >= v20 + 1))
            {
              *id v19 = *v20;
              int64_t v2 = v6;
            }
          }
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v21 = *(void *)(v3 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000AFF20(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1000AFFC0(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    if (a4)
    {
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;
      if (v9 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v11 != v12) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if ((a4 & 1) == 0)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
    if (v4 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v6 != v7)
    {
LABEL_11:
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      goto LABEL_12;
    }
LABEL_10:
    char v8 = 1;
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v8 & 1;
  }
  char v8 = 0;
  return v8 & 1;
}

uint64_t sub_1000B008C()
{
  sub_1000B3B98(0, &qword_100107E08, (uint64_t (*)(uint64_t, void *))type metadata accessor for SearchableListSection);
  uint64_t v50 = v0;
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (uint64_t *)((char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  unint64_t v51 = (uint64_t *)((char *)&v48 - v5);
  id v6 = (id)_HKAllCategoryTypes();
  sub_10001E254(0, &qword_1001074A0);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 < 0 || (v7 & 0x4000000000000000) != 0)
  {
    unint64_t v20 = swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t)sub_10008FB08(v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  uint64_t v52 = v8;
  sub_1000AEBA0(&v52, sub_100093880, &qword_1001074A0, (uint64_t)HKCategoryType_ptr, (void (*)(id **, void ***, char **))sub_100091190);
  swift_bridgeObjectRelease();
  uint64_t v9 = v52;
  uint64_t v48 = v1;
  char v49 = v4;
  if (v52 < 0 || (v52 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v10) {
      goto LABEL_7;
    }
LABEL_18:
    swift_release();
    uint64_t v12 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  uint64_t v10 = *(void *)(v52 + 16);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_7:
  uint64_t v52 = (uint64_t)_swiftEmptyArrayStorage;
  sub_100096474(0, v10 & ~(v10 >> 63), 0);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v11 = 0;
  uint64_t v12 = (void *)v52;
  do
  {
    if ((v9 & 0xC000000000000001) != 0) {
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v13 = *(id *)(v9 + 8 * v11 + 32);
    }
    int64_t v14 = v13;
    id v15 = [v13 identifier:v48];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v52 = (uint64_t)v12;
    unint64_t v18 = v12[2];
    unint64_t v17 = v12[3];
    if (v18 >= v17 >> 1)
    {
      sub_100096474(v17 > 1, v18 + 1, 1);
      uint64_t v12 = (void *)v52;
    }
    ++v11;
    void v12[2] = v18 + 1;
    id v19 = &v12[2 * v18];
    void v19[4] = v16;
    *((unsigned char *)v19 + 4sub_10004C8C4(0, 0) = 0;
  }
  while (v10 != v11);
  swift_release();
LABEL_19:
  uint64_t v21 = static HKSampleDataCodingConstants.categoryTypeIdentifierPrefix.getter();
  BOOL v22 = v51;
  uint64_t *v51 = v21;
  v22[1] = v23;
  id v22[2] = (uint64_t)v12;
  UUID.init()();
  id v24 = (id)_HKAllQuantityTypes();
  sub_10001E254(0, &qword_1001074B8);
  uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v25 < 0 || (v25 & 0x4000000000000000) != 0)
  {
    unint64_t v38 = swift_bridgeObjectRetain();
    uint64_t v26 = (uint64_t)sub_10008FAF0(v38);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  uint64_t v52 = v26;
  sub_1000AEBA0(&v52, sub_100093880, &qword_1001074B8, (uint64_t)HKQuantityType_ptr, (void (*)(id **, void ***, char **))sub_100091190);
  swift_bridgeObjectRelease();
  uint64_t v27 = v52;
  if ((v52 & 0x8000000000000000) == 0 && (v52 & 0x4000000000000000) == 0)
  {
    uint64_t v28 = *(void *)(v52 + 16);
    if (v28) {
      goto LABEL_25;
    }
LABEL_36:
    swift_release();
    int v30 = _swiftEmptyArrayStorage;
LABEL_37:
    uint64_t v39 = static HKSampleDataCodingConstants.quantityTypeIdentifierPrefix.getter();
    uint64_t v40 = (uint64_t)v49;
    *char v49 = v39;
    *(void *)(v40 + 8) = v41;
    *(void *)(v40 + 16) = v30;
    UUID.init()();
    sub_1000B0708(0, qword_100107E20, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    uint64_t v42 = *(void *)(v48 + 72);
    unint64_t v43 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_1000CC0F0;
    uint64_t v45 = v44 + v43;
    uint64_t v46 = v51;
    sub_1000B0784((uint64_t)v51, v45);
    sub_1000B0804(v40, v45 + v42);
    sub_1000B0884((uint64_t)v46);
    return v44;
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v28) {
    goto LABEL_36;
  }
LABEL_25:
  uint64_t v52 = (uint64_t)_swiftEmptyArrayStorage;
  sub_100096474(0, v28 & ~(v28 >> 63), 0);
  if ((v28 & 0x8000000000000000) == 0)
  {
    uint64_t v29 = 0;
    int v30 = (void *)v52;
    do
    {
      if ((v27 & 0xC000000000000001) != 0) {
        id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v31 = *(id *)(v27 + 8 * v29 + 32);
      }
      uint64_t v32 = v31;
      id v33 = [v31 identifier:v48];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v52 = (uint64_t)v30;
      unint64_t v36 = v30[2];
      unint64_t v35 = v30[3];
      if (v36 >= v35 >> 1)
      {
        sub_100096474(v35 > 1, v36 + 1, 1);
        int v30 = (void *)v52;
      }
      ++v29;
      void v30[2] = v36 + 1;
      uint64_t v37 = &v30[2 * v36];
      unsigned char v37[4] = v34;
      *((unsigned char *)v37 + 4sub_10004C8C4(0, 0) = 1;
    }
    while (v28 != v29);
    swift_release();
    goto LABEL_37;
  }
LABEL_39:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_1000B0648()
{
  unint64_t result = qword_100107E10;
  if (!qword_100107E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107E10);
  }
  return result;
}

unint64_t sub_1000B069C()
{
  unint64_t result = qword_100107E18;
  if (!qword_100107E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107E18);
  }
  return result;
}

uint64_t type metadata accessor for SearchableListSection(uint64_t a1, uint64_t a2)
{
  return _swift_getGenericMetadata(a1, a2, &nominal type descriptor for SearchableListSection);
}

void sub_1000B0708(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_1000B3B98(255, &qword_100107E08, (uint64_t (*)(uint64_t, void *))type metadata accessor for SearchableListSection);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1000B0784(uint64_t a1, uint64_t a2)
{
  sub_1000B3B98(0, &qword_100107E08, (uint64_t (*)(uint64_t, void *))type metadata accessor for SearchableListSection);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B0804(uint64_t a1, uint64_t a2)
{
  sub_1000B3B98(0, &qword_100107E08, (uint64_t (*)(uint64_t, void *))type metadata accessor for SearchableListSection);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B0884(uint64_t a1)
{
  sub_1000B3B98(0, &qword_100107E08, (uint64_t (*)(uint64_t, void *))type metadata accessor for SearchableListSection);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B08FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_1000B0904()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000B09A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    uint64_t v6 = *(int *)(a3 + 56);
    unint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1000B0AA0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 56);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_1000B0B20(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 56);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *sub_1000B0BC8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 56);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_1000B0C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 56);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_1000B0D00(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 56);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1000B0D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B0DB0);
}

uint64_t sub_1000B0DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 56);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000B0E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B0E74);
}

uint64_t sub_1000B0E74(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 56);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HKDataType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for HKDataType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v6 = v3;

  return a1;
}

uint64_t initializeWithTake for HKDataType(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for HKDataType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for HKDataType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HKDataType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000B1070(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1000B1078(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for HKDataType()
{
  return &type metadata for HKDataType;
}

char *sub_1000B1094(char *a1, char **a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  id v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
  }
  else
  {
    uint64_t v9 = a2 + 1;
    uint64_t v8 = a2[1];
    uint64_t v10 = v5;
    if (v8)
    {
      uint64_t v11 = a2[2];
      *((void *)a1 + 1) = v8;
      *((void *)a1 + 2) = v11;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *v9;
    }
    uint64_t v12 = a2[4];
    *((void *)a1 + 3) = a2[3];
    *((void *)a1 + 4) = v12;
    uint64_t v13 = a3[7];
    int64_t v14 = &a1[v13];
    uint64_t v15 = (uint64_t)a2 + v13;
    uint64_t v16 = type metadata accessor for Date();
    unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    v17(v14, v15, v16);
    sub_1000A4F9C(0, &qword_100107EA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
    uint64_t v19 = v18;
    *(void *)&v14[*(int *)(v18 + 28)] = *(void *)(v15 + *(int *)(v18 + 28));
    uint64_t v20 = a3[8];
    uint64_t v21 = &a1[v20];
    uint64_t v22 = (uint64_t)a2 + v20;
    swift_retain();
    v17(v21, v22, v16);
    *(void *)&v21[*(int *)(v19 + 28)] = *(void *)(v22 + *(int *)(v19 + 28));
    uint64_t v23 = a3[9];
    uint64_t v24 = a3[10];
    uint64_t v25 = &a1[v23];
    uint64_t v26 = (char **)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    *(void *)uint64_t v25 = *v26;
    *((void *)v25 + 1) = v27;
    uint64_t v28 = &a1[v24];
    uint64_t v29 = (char *)a2 + v24;
    *uint64_t v28 = *v29;
    *((void *)v28 + 1) = *((void *)v29 + 1);
    uint64_t v30 = a3[11];
    uint64_t v31 = a3[12];
    uint64_t v32 = &a1[v30];
    id v33 = (char *)a2 + v30;
    char *v32 = *v33;
    *((void *)v32 + 1) = *((void *)v33 + 1);
    __dst = &a1[v31];
    NSString v34 = (char *)a2 + v31;
    uint64_t v35 = type metadata accessor for URL();
    uint64_t v36 = *(void *)(v35 - 8);
    uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
    swift_retain();
    uint64_t v37 = v34;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v42(v34, 1, v35))
    {
      sub_1000A4F68(0);
      uint64_t v39 = __dst;
      memcpy(__dst, v37, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      uint64_t v39 = __dst;
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(__dst, v37, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
    }
    sub_1000A4F9C(0, &qword_100107EB0, (uint64_t (*)(uint64_t))sub_1000A4F68, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
    *(void *)&v39[*(int *)(v40 + 28)] = *(void *)&v37[*(int *)(v40 + 28)];
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000B13E0(uint64_t a1, int *a2)
{
  if (*(void *)(a1 + 8)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = type metadata accessor for Date();
  id v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  sub_1000A4F9C(0, &qword_100107EA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  swift_release();
  v6(a1 + a2[8], v5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = a1 + a2[12];
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  sub_1000A4F9C(0, &qword_100107EB0, (uint64_t (*)(uint64_t))sub_1000A4F68, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);

  return swift_release();
}

void *sub_1000B15FC(void *a1, uint64_t a2, int *a3)
{
  id v6 = *(void **)a2;
  *a1 = *(void *)a2;
  uint64_t v7 = a1 + 1;
  uint64_t v9 = (_OWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 8);
  id v10 = v6;
  if (v8)
  {
    uint64_t v11 = *(void *)(a2 + 16);
    a1[1] = v8;
    a1[2] = v11;
    swift_retain();
  }
  else
  {
    *uint64_t v7 = *v9;
  }
  uint64_t v12 = *(void *)(a2 + 32);
  a1[3] = *(void *)(a2 + 24);
  a1[4] = v12;
  uint64_t v13 = a3[7];
  int64_t v14 = (char *)a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Date();
  unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  v17(v14, v15, v16);
  sub_1000A4F9C(0, &qword_100107EA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  uint64_t v19 = v18;
  *(void *)&v14[*(int *)(v18 + 28)] = *(void *)(v15 + *(int *)(v18 + 28));
  uint64_t v20 = a3[8];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = a2 + v20;
  swift_retain();
  v17(v21, v22, v16);
  *(void *)&v21[*(int *)(v19 + 28)] = *(void *)(v22 + *(int *)(v19 + 28));
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v25 = (void *)((char *)a1 + v23);
  uint64_t v26 = (void *)(a2 + v23);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = (char *)a1 + v24;
  uint64_t v29 = (char *)(a2 + v24);
  *uint64_t v28 = *v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  uint64_t v30 = a3[11];
  uint64_t v31 = a3[12];
  uint64_t v32 = (char *)a1 + v30;
  id v33 = (char *)(a2 + v30);
  char *v32 = *v33;
  *((void *)v32 + 1) = *((void *)v33 + 1);
  __dst = (char *)a1 + v31;
  NSString v34 = (char *)(a2 + v31);
  uint64_t v35 = type metadata accessor for URL();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
  swift_retain();
  uint64_t v37 = v34;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v42(v34, 1, v35))
  {
    sub_1000A4F68(0);
    uint64_t v39 = __dst;
    memcpy(__dst, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    uint64_t v39 = __dst;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(__dst, v37, v35);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
  }
  sub_1000A4F9C(0, &qword_100107EB0, (uint64_t (*)(uint64_t))sub_1000A4F68, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  *(void *)&v39[*(int *)(v40 + 28)] = *(void *)&v37[*(int *)(v40 + 28)];
  swift_retain();
  return a1;
}

uint64_t sub_1000B1904(uint64_t a1, uint64_t a2, int *a3)
{
  id v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  uint64_t v9 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v10;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v11;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_8:
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24);
  v16(v13, v14, v15);
  sub_1000A4F9C(0, &qword_100107EA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  uint64_t v18 = v17;
  *(void *)(v13 + *(int *)(v17 + 28)) = *(void *)(v14 + *(int *)(v17 + 28));
  swift_retain();
  swift_release();
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  v16(a1 + v19, a2 + v19, v15);
  *(void *)(v20 + *(int *)(v18 + 28)) = *(void *)(v21 + *(int *)(v18 + 28));
  swift_retain();
  swift_release();
  uint64_t v22 = a3[9];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)(a1 + v22) = *(void *)(a2 + v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  swift_retain();
  swift_release();
  uint64_t v25 = a3[10];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(unsigned char *)uint64_t v26 = *(unsigned char *)v27;
  *(void *)(v26 + 8) = *(void *)(v27 + 8);
  swift_retain();
  swift_release();
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  *(unsigned char *)uint64_t v29 = *(unsigned char *)v30;
  *(void *)(v29 + 8) = *(void *)(v30 + 8);
  swift_retain();
  swift_release();
  uint64_t v31 = a3[12];
  uint64_t v32 = (char *)(a1 + v31);
  id v33 = (char *)(a2 + v31);
  uint64_t v34 = type metadata accessor for URL();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  LODWORD(v23) = v36(v32, 1, v34);
  int v37 = v36(v33, 1, v34);
  if (!v23)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 24))(v32, v33, v34);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
    goto LABEL_13;
  }
  if (v37)
  {
LABEL_13:
    sub_1000A4F68(0);
    memcpy(v32, v33, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
LABEL_14:
  sub_1000A4F9C(0, &qword_100107EB0, (uint64_t (*)(uint64_t))sub_1000A4F68, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  *(void *)&v32[*(int *)(v39 + 28)] = *(void *)&v33[*(int *)(v39 + 28)];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000B1CE8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v7;
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  sub_1000A4F9C(0, &qword_100107EA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  uint64_t v14 = v13;
  *(void *)(v9 + *(int *)(v13 + 28)) = *(void *)(v10 + *(int *)(v13 + 28));
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  v12(a1 + v15, a2 + v15, v11);
  *(void *)(v16 + *(int *)(v14 + 28)) = *(void *)(v17 + *(int *)(v14 + 28));
  uint64_t v18 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  uint64_t v19 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  uint64_t v20 = (char *)(a1 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_1000A4F68(0);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  sub_1000A4F9C(0, &qword_100107EB0, (uint64_t (*)(uint64_t))sub_1000A4F68, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  *(void *)&v20[*(int *)(v25 + 28)] = *(void *)&v21[*(int *)(v25 + 28)];
  return a1;
}

uint64_t sub_1000B1F60(uint64_t a1, void *a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = a2[1];
  if (*(void *)(a1 + 8))
  {
    if (v7)
    {
      uint64_t v8 = a2[2];
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v8;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = a2[2];
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v9;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
LABEL_8:
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  swift_release();
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v13 - 8) + 40);
  v14(v11, v12, v13);
  sub_1000A4F9C(0, &qword_100107EA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  uint64_t v16 = v15;
  *(void *)(v11 + *(int *)(v15 + 28)) = *(void *)&v12[*(int *)(v15 + 28)];
  swift_release();
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  v14(a1 + v17, (char *)a2 + v17, v13);
  *(void *)(v18 + *(int *)(v16 + 28)) = *(void *)&v19[*(int *)(v16 + 28)];
  swift_release();
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  *(void *)(a1 + v2sub_10004C8C4(0, 0) = *(void *)((char *)a2 + v20);
  swift_bridgeObjectRelease();
  *(void *)(v21 + 8) = *((void *)v22 + 1);
  swift_release();
  uint64_t v23 = a3[10];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  *(unsigned char *)uint64_t v24 = *v25;
  *(void *)(v24 + 8) = *((void *)v25 + 1);
  swift_release();
  uint64_t v26 = a3[11];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  *(unsigned char *)uint64_t v27 = *v28;
  *(void *)(v27 + 8) = *((void *)v28 + 1);
  swift_release();
  uint64_t v29 = a3[12];
  uint64_t v30 = (char *)(a1 + v29);
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for URL();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  LODWORD(v22) = v34(v30, 1, v32);
  int v35 = v34(v31, 1, v32);
  if (!v22)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 40))(v30, v31, v32);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v30, v32);
    goto LABEL_13;
  }
  if (v35)
  {
LABEL_13:
    sub_1000A4F68(0);
    memcpy(v30, v31, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v30, v31, v32);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
LABEL_14:
  sub_1000A4F9C(0, &qword_100107EB0, (uint64_t (*)(uint64_t))sub_1000A4F68, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  *(void *)&v30[*(int *)(v37 + 28)] = *(void *)&v31[*(int *)(v37 + 28)];
  swift_release();
  return a1;
}

uint64_t sub_1000B22EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B2300);
}

uint64_t sub_1000B2300(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_1000A4F9C(0, &qword_100107EA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_1000A4F9C(0, &qword_100107EB0, (uint64_t (*)(uint64_t))sub_1000A4F68, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 48);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1000B248C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B24A0);
}

void *sub_1000B24A0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    sub_1000A4F9C(0, &qword_100107EA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      sub_1000A4F9C(0, &qword_100107EB0, (uint64_t (*)(uint64_t))sub_1000A4F68, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 48);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1000B262C()
{
  sub_1000A4F9C(319, &qword_100107EA8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  if (v0 <= 0x3F)
  {
    sub_1000A4F9C(319, &qword_100107EB0, (uint64_t (*)(uint64_t))sub_1000A4F68, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1000B2788()
{
  return sub_1000B5D38(&qword_100107F68, (void (*)(uint64_t))&type metadata accessor for UUID);
}

unint64_t sub_1000B27D4()
{
  unint64_t result = qword_100107F70;
  if (!qword_100107F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100107F70);
  }
  return result;
}

uint64_t sub_1000B2828()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B2844@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A54BC(*(void *)(v1 + 16), a1);
}

void sub_1000B284C()
{
  if (!qword_100107F78)
  {
    sub_1000B2A5C();
    sub_1000B3AF8();
    sub_1000B2BD0();
    sub_1000A4F9C(255, &qword_100108070, (uint64_t (*)(uint64_t))sub_1000B352C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleToolbarContent);
    sub_1000B3740(255, &qword_100107F90, (void (*)(uint64_t))sub_1000B2CC4, (void (*)(void))sub_1000B34F8);
    sub_1000B2CC4();
    sub_1000B34F8();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1000B3A70();
    swift_getOpaqueTypeConformance2();
    sub_1000B3B98(255, &qword_1001080E0, (uint64_t (*)(uint64_t, void *))type metadata accessor for SearchableListView);
    sub_1000B3C3C();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100107F78);
    }
  }
}

void sub_1000B2A5C()
{
  if (!qword_100107F80)
  {
    sub_1000B2BD0();
    sub_1000A4F9C(255, &qword_100108070, (uint64_t (*)(uint64_t))sub_1000B352C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleToolbarContent);
    sub_1000B3740(255, &qword_100107F90, (void (*)(uint64_t))sub_1000B2CC4, (void (*)(void))sub_1000B34F8);
    sub_1000B2CC4();
    sub_1000B34F8();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1000B3A70();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100107F80);
    }
  }
}

void sub_1000B2BD0()
{
  if (!qword_100107F88)
  {
    sub_1000B3740(255, &qword_100107F90, (void (*)(uint64_t))sub_1000B2CC4, (void (*)(void))sub_1000B34F8);
    sub_1000B2CC4();
    sub_1000B34F8();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100107F88);
    }
  }
}

void sub_1000B2CC4()
{
  if (!qword_100107F98)
  {
    sub_1000A4F9C(255, &qword_100107FA0, (uint64_t (*)(uint64_t))sub_1000B2D58, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    sub_1000B3470();
    unint64_t v0 = type metadata accessor for Form();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107F98);
    }
  }
}

void sub_1000B2D58()
{
  if (!qword_100107FA8)
  {
    sub_1000B3284(255, &qword_100107FB0, &qword_100107FB8, (uint64_t (*)(uint64_t))sub_1000B2E28);
    sub_1000B3284(255, &qword_100108030, &qword_100108038, (uint64_t (*)(uint64_t))sub_1000B3300);
    sub_1000B3380();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_100107FA8);
    }
  }
}

void sub_1000B2E28(uint64_t a1)
{
}

void sub_1000B2E5C()
{
  if (!qword_100107FC8)
  {
    sub_1000B6424(255, &qword_100107FD0, (uint64_t)&type metadata for HKDataType, (uint64_t (*)(void, uint64_t))&type metadata accessor for Array);
    sub_1000B2F1C();
    sub_1000B3208();
    sub_1000937DC();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107FC8);
    }
  }
}

void sub_1000B2F1C()
{
  if (!qword_100107FD8)
  {
    sub_1000B2FE4();
    sub_1000B440C(&qword_100108010, (void (*)(uint64_t))sub_1000B2FE4, (void (*)(void))sub_1000B31D4);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_100107FD8);
    }
  }
}

void sub_1000B2FE4()
{
  if (!qword_100107FE0)
  {
    sub_1000B304C();
    sub_1000B3158();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107FE0);
    }
  }
}

void sub_1000B304C()
{
  if (!qword_100107FE8)
  {
    sub_1000B30E0();
    sub_1000B5D38(&qword_100107FF8, (void (*)(uint64_t))sub_1000B30E0);
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107FE8);
    }
  }
}

void sub_1000B30E0()
{
  if (!qword_100107FF0)
  {
    unint64_t v0 = type metadata accessor for Label();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100107FF0);
    }
  }
}

void sub_1000B3158()
{
  if (!qword_100108000)
  {
    sub_1000B6424(255, &qword_100108008, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t (*)(void, uint64_t))&type metadata accessor for Optional);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100108000);
    }
  }
}

uint64_t sub_1000B31D4()
{
  return sub_1000B5D38(&qword_100108020, (void (*)(uint64_t))sub_1000B3158);
}

unint64_t sub_1000B3208()
{
  unint64_t result = qword_100108028;
  if (!qword_100108028)
  {
    sub_1000B6424(255, &qword_100107FD0, (uint64_t)&type metadata for HKDataType, (uint64_t (*)(void, uint64_t))&type metadata accessor for Array);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100108028);
  }
  return result;
}

void sub_1000B3284(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_1000A4F9C(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    unint64_t v5 = type metadata accessor for Section();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1000B3300()
{
  if (!qword_100108040)
  {
    sub_1000B3668(255, &qword_100108048, (uint64_t (*)(void, void *, void *))&type metadata accessor for DatePicker);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_100108040);
    }
  }
}

void sub_1000B3380()
{
  if (!qword_100108050)
  {
    sub_1000B33E4();
    unint64_t v0 = type metadata accessor for Section();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100108050);
    }
  }
}

void sub_1000B33E4()
{
  if (!qword_100108058)
  {
    sub_1000B304C();
    sub_1000B6424(255, &qword_100106B90, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for _EnvironmentKeyTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100108058);
    }
  }
}

unint64_t sub_1000B3470()
{
  unint64_t result = qword_100108060;
  if (!qword_100108060)
  {
    sub_1000A4F9C(255, &qword_100107FA0, (uint64_t (*)(uint64_t))sub_1000B2D58, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100108060);
  }
  return result;
}

uint64_t sub_1000B34F8()
{
  return sub_1000B5D38(&qword_100108068, (void (*)(uint64_t))sub_1000B2CC4);
}

void sub_1000B352C(uint64_t a1)
{
}

void sub_1000B3560(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_1000B35DC()
{
  if (!qword_100108080)
  {
    sub_1000B3668(255, &qword_100106B88, (uint64_t (*)(void, void *, void *))&type metadata accessor for Button);
    sub_10007ACF4();
    unint64_t v0 = type metadata accessor for ToolbarItem();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100108080);
    }
  }
}

void sub_1000B3668(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void *, void *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for Text, &protocol witness table for Text);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1000B36C4(uint64_t a1)
{
}

void sub_1000B36F8(uint64_t a1)
{
}

void sub_1000B3740(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v7) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

void sub_1000B37CC()
{
  if (!qword_100108098)
  {
    sub_1000B386C();
    sub_1000B5D38(&qword_1001080C0, (void (*)(uint64_t))sub_1000B386C);
    unint64_t v0 = type metadata accessor for ToolbarItem();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100108098);
    }
  }
}

void sub_1000B386C()
{
  if (!qword_1001080A0)
  {
    sub_1000A4F9C(255, &qword_1001080A8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for CollectionOfOne);
    sub_1000B30E0();
    sub_1000B39B4();
    sub_1000B5D38(&qword_100107FF8, (void (*)(uint64_t))sub_1000B30E0);
    sub_1000B5D38(&qword_1001080B8, (void (*)(uint64_t))&type metadata accessor for URL);
    unint64_t v0 = type metadata accessor for ShareLink();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001080A0);
    }
  }
}

unint64_t sub_1000B39B4()
{
  unint64_t result = qword_1001080B0;
  if (!qword_1001080B0)
  {
    sub_1000A4F9C(255, &qword_1001080A8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for CollectionOfOne);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001080B0);
  }
  return result;
}

uint64_t sub_1000B3A3C()
{
  return sub_1000B5D38(&qword_1001080C8, (void (*)(uint64_t))sub_1000B37CC);
}

unint64_t sub_1000B3A70()
{
  unint64_t result = qword_1001080D0;
  if (!qword_1001080D0)
  {
    sub_1000A4F9C(255, &qword_100108070, (uint64_t (*)(uint64_t))sub_1000B352C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleToolbarContent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001080D0);
  }
  return result;
}

void sub_1000B3AF8()
{
  if (!qword_1001080D8)
  {
    sub_1000B3B98(255, &qword_1001080E0, (uint64_t (*)(uint64_t, void *))type metadata accessor for SearchableListView);
    sub_1000B3C3C();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1001080D8);
    }
  }
}

void sub_1000B3B98(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    v8[0] = &type metadata for HKDataType;
    v8[1] = sub_1000B0648();
    v8[2] = sub_1000937DC();
    v8[3] = sub_1000B069C();
    unint64_t v6 = a3(a1, v8);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for SearchableListView(uint64_t a1, uint64_t a2)
{
  return _swift_getGenericMetadata(a1, a2, &nominal type descriptor for SearchableListView);
}

unint64_t sub_1000B3C3C()
{
  unint64_t result = qword_1001080E8;
  if (!qword_1001080E8)
  {
    sub_1000B3B98(255, &qword_1001080E0, (uint64_t (*)(uint64_t, void *))type metadata accessor for SearchableListView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001080E8);
  }
  return result;
}

uint64_t sub_1000B3CB0@<X0>(char *a1@<X8>)
{
  return sub_1000A5CAC(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000B3CB8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A8198(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000B3CC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000B3D2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000B3D94()
{
  type metadata accessor for ExportDatasetView(0);

  return sub_1000A8C30();
}

uint64_t sub_1000B3E04(uint64_t a1)
{
  return a1;
}

void sub_1000B3EE4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_1000B0708(255, &qword_100107E00, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1000B3F60()
{
  return sub_1000A88FC(*(void *)(v0 + 16));
}

uint64_t sub_1000B3F68(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}