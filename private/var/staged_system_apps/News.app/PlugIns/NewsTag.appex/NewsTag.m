void ITColor::ITColor(ITColor *this)
{
  this->mRed = 0.0;
  this->mGreen = 0.0;
  this->mBlue = 0.0;
  this->mAlpha = 1.0;
}

void ITColor::ITColor(ITColor *this, double a2, double a3, double a4, double a5)
{
  this->mRed = a2;
  this->mGreen = a3;
  this->mBlue = a4;
  this->mAlpha = a5;
}

double ITColor::CreateFromHSVColor(double *a1)
{
  double v4 = 0.0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  sub_100006008(&v4, (double *)&v3, (double *)&v2, *a1, a1[1], a1[2]);
  return v4;
}

double *sub_100006008(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  if (a5 > 1.0) {
    a5 = 1.0;
  }
  if (a5 >= 0.0) {
    double v6 = a5;
  }
  else {
    double v6 = 0.0;
  }
  if (a6 <= 1.0) {
    double v7 = a6;
  }
  else {
    double v7 = 1.0;
  }
  if (v7 < 0.0) {
    double v7 = 0.0;
  }
  if (v6 == 0.0)
  {
    *result = v7;
    *a2 = v7;
  }
  else
  {
    if (a4 > 1.0) {
      a4 = 1.0;
    }
    if (a4 >= 0.0) {
      double v8 = a4 * 6.0;
    }
    else {
      double v8 = 0.0;
    }
    int v9 = (int)v8;
    double v10 = v6 * v7 * (v8 - (double)(int)v8);
    double v11 = v7 - v6 * v7;
    double v12 = v11 + v10;
    if (v11 + v10 > 1.0) {
      double v12 = 1.0;
    }
    double v13 = v7 - v10;
    if (v13 > 1.0) {
      double v13 = 1.0;
    }
    double v14 = v11;
    if (v9) {
      double v15 = v13;
    }
    else {
      double v15 = v12;
    }
    if (v14 <= 1.0) {
      double v16 = v14;
    }
    else {
      double v16 = 1.0;
    }
    double v17 = v7;
    switch(v9)
    {
      case 0:
      case 5:
        break;
      case 1:
      case 4:
        double v17 = v15;
        break;
      default:
        double v17 = v16;
        break;
    }
    *result = v17;
    double v18 = v7;
    if ((v9 - 1) >= 2)
    {
      BOOL v19 = v9 == 3 || v9 == 0;
      double v18 = v15;
      if (!v19) {
        double v18 = v16;
      }
    }
    *a2 = v18;
    if ((v9 - 3) >= 2)
    {
      BOOL v20 = v9 == 5 || v9 == 2;
      double v7 = v15;
      if (!v20) {
        double v7 = v16;
      }
    }
  }
  *a3 = v7;
  return result;
}

double ITColor::CreateFromHSVDoubles(ITColor *this, double a2, double a3, double a4)
{
  double v7 = 0.0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_100006008(&v7, (double *)&v6, (double *)&v5, a2, a3, a4);
  return v7;
}

double ITColor::GetHSVColor(ITColor *this)
{
  sub_1000061C8(&v2, (double *)&v3, (double *)&v4, this->mRed, this->mGreen, this->mBlue);
  return v2;
}

double *sub_1000061C8(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  if (a4 >= 1.0) {
    a4 = 1.0;
  }
  double v6 = 0.0;
  if (a4 < 0.0) {
    a4 = 0.0;
  }
  if (a5 >= 1.0) {
    a5 = 1.0;
  }
  if (a5 < 0.0) {
    a5 = 0.0;
  }
  if (a6 >= 1.0) {
    a6 = 1.0;
  }
  if (a6 >= 0.0) {
    double v7 = a6;
  }
  else {
    double v7 = 0.0;
  }
  if (a5 <= a4) {
    double v8 = a4;
  }
  else {
    double v8 = a5;
  }
  if (a5 >= a4) {
    double v9 = a4;
  }
  else {
    double v9 = a5;
  }
  if (v7 <= a4) {
    double v10 = a4;
  }
  else {
    double v10 = v7;
  }
  if (v7 >= a4) {
    double v11 = a4;
  }
  else {
    double v11 = v7;
  }
  if (a5 <= v7) {
    double v8 = v10;
  }
  if (a5 >= v7) {
    double v9 = v11;
  }
  if (v8 <= 1.0) {
    double v12 = v8;
  }
  else {
    double v12 = 1.0;
  }
  *a3 = v12;
  if (v8 == 0.0)
  {
    *a2 = 0.0;
  }
  else
  {
    double v13 = v8 - v9;
    double v14 = v13 / v8;
    if (v13 / v8 <= 1.0)
    {
      *a2 = v14;
      if (v14 == 0.0) {
        goto LABEL_51;
      }
    }
    else
    {
      *a2 = 1.0;
    }
    if (v13 == 0.0)
    {
      double v15 = 0.0;
      double v16 = 0.0;
    }
    else
    {
      double v6 = (v8 - a4) / v13;
      double v15 = (v8 - a5) / v13;
      double v16 = (v8 - v7) / v13;
    }
    if (a4 == v8)
    {
      double v17 = v16 - v15;
    }
    else if (a5 == v8)
    {
      double v17 = v6 + 2.0 - v16;
    }
    else
    {
      double v17 = v15 + 4.0 - v6;
    }
    double v18 = v17 / 6.0;
    if (v18 < 0.0) {
      double v18 = v18 + 1.0;
    }
    if (v18 <= 1.0) {
      double v6 = v18;
    }
    else {
      double v6 = 1.0;
    }
  }
LABEL_51:
  *result = v6;
  return result;
}

void ITColor::GetLuminance(ITColor *this)
{
  uint64_t v1 = 0;
  long long v4 = *(_OWORD *)&this->mRed;
  double mBlue = this->mBlue;
  do
  {
    double v2 = *(double *)((char *)&v4 + v1);
    if (v2 <= 0.0392800011) {
      double v3 = v2 / 12.9200001;
    }
    else {
      double v3 = pow((v2 + 0.0549999997) / 1.05499995, 2.4);
    }
    *(double *)((char *)&v4 + v1) = v3;
    v1 += 8;
  }
  while (v1 != 24);
}

double ITColor::GetContrastWithColor(ITColor *this, ITColor *a2)
{
  ITColor::GetLuminance(a2);
  double v4 = v3;
  ITColor::GetLuminance(this);
  if (v5 <= v4) {
    double v6 = v4;
  }
  else {
    double v6 = v5;
  }
  if (v5 > v4) {
    double v5 = v4;
  }
  return (v6 + 0.0500000007) / (v5 + 0.0500000007);
}

double ITColor::GetContrastWithLuminance(ITColor *this, double a2)
{
  ITColor::GetLuminance(this);
  if (v3 <= a2) {
    double v4 = a2;
  }
  else {
    double v4 = v3;
  }
  if (v3 > a2) {
    double v3 = a2;
  }
  return (v4 + 0.0500000007) / (v3 + 0.0500000007);
}

double ITColor::CreateBlendedColorWithFraction(ITColor *this, double a2, ITColor a3)
{
  if (a2 < 1.0)
  {
    if (a2 <= 0.0) {
      a3.mRed = this->mRed;
    }
    else {
      a3.mRed = (1.0 - a2) * this->mRed + a3.mRed * a2;
    }
  }
  return a3.mRed;
}

BOOL isCloseToColor(ITColor *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  if (a1 && (a3 < 0.0500000007 && a7 < 0.0500000007 || a5 < 0.0149999997 && a9 < 0.0149999997))
  {
    v34.mRed = ITColor::CreateFromHSVDoubles(a1, a2, a3, a4);
    v34.mGreen = v23;
    v34.double mBlue = v24;
    v34.mAlpha = v25;
    v33.mRed = ITColor::CreateFromHSVDoubles(v26, a6, a7, a8);
    v33.mGreen = v27;
    v33.double mBlue = v28;
    v33.mAlpha = v29;
    if (ITColor::GetContrastWithColor(&v34, &v33) <= 1.65999997) {
      return 1;
    }
  }
  if (vabdd_f64(a3, a7) > a10 || vabdd_f64(a4, a8) > a10) {
    return 0;
  }
  if (vabdd_f64(a2, a6) <= a10) {
    return 1;
  }
  double v30 = a2 + 1.0;
  if (a2 >= a10) {
    double v30 = a2;
  }
  double v31 = a6 + 1.0;
  if (a6 >= a10) {
    double v31 = a6;
  }
  return vabdd_f64(v30, v31) <= a10;
}

void ImageAnalyzer::ImageAnalyzer(ImageAnalyzer *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
}

void ImageAnalyzer::~ImageAnalyzer(ImageAnalyzer *this)
{
  double v2 = *(void **)this;
  if (v2)
  {
    free(v2);
    *(void *)this = 0;
  }
  double v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    free(v3);
    *((void *)this + 2) = 0;
  }
  double v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    free(v4);
    *((void *)this + 1) = 0;
  }
  double v5 = (void *)*((void *)this + 44);
  if (v5)
  {
    *((void *)this + 45) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 41);
  if (v6)
  {
    *((void *)this + 42) = v6;
    operator delete(v6);
  }
}

uint64_t ImageAnalyzer::AnalyzeImage(ImageAnalyzer *this, CGContext *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = ImageAnalyzer::GenerateColorMaps(this, a2);
  if (result)
  {
    uint64_t result = ImageAnalyzer::QuantizeColorMaps(this);
    if (result)
    {
      ImageAnalyzer::PickBackgroundColor(this);
      ImageAnalyzer::PickTextColors(this);
      ImageAnalyzer::DoPostImageAnalysis(this);
      return 1;
    }
  }
  return result;
}

uint64_t ImageAnalyzer::GenerateColorMaps(ImageAnalyzer *this, CGContextRef context)
{
  if (!context) {
    return 0;
  }
  size_t BytesPerRow = CGBitmapContextGetBytesPerRow(context);
  int Width = CGBitmapContextGetWidth(context);
  int Height = CGBitmapContextGetHeight(context);
  uint64_t result = 0;
  if (Height == 102 && Width == 102)
  {
    ITColor::ITColor(&v35);
    __int16 BitmapInfo = CGBitmapContextGetBitmapInfo(context);
    uint64_t result = (uint64_t)CGBitmapContextGetData(context);
    uint64_t v33 = result;
    if (result)
    {
      size_t v8 = (102 * Width);
      uint64_t result = (uint64_t)malloc_type_calloc(v8, 0x20uLL, 0x1000040E0EAB150uLL);
      *(void *)this = result;
      if (result)
      {
        uint64_t result = (uint64_t)malloc_type_calloc(v8, 0x20uLL, 0x1000040E0EAB150uLL);
        *((void *)this + 1) = result;
        if (result)
        {
          uint64_t v12 = 0;
          int v13 = BitmapInfo & 0x3000;
          for (uint64_t i = 1; i != 101; ++i)
          {
            uint64_t v15 = 0;
            uint64_t v16 = 24;
            do
            {
              size_t v17 = v33 + BytesPerRow * i + v15;
              if (v13) {
                uint64_t v18 = 6;
              }
              else {
                uint64_t v18 = 5;
              }
              if (v13) {
                uint64_t v19 = 5;
              }
              else {
                uint64_t v19 = 6;
              }
              if (v13) {
                uint64_t v20 = 4;
              }
              else {
                uint64_t v20 = 7;
              }
              LOBYTE(v9) = *(unsigned char *)(v17 + v18);
              LOBYTE(v10) = *(unsigned char *)(v17 + v19);
              LOBYTE(v11) = *(unsigned char *)(v17 + v20);
              ITColor::ITColor(&v36, (double)*(unint64_t *)&v9 / 255.0, (double)*(unint64_t *)&v10 / 255.0, (double)v11 / 255.0, 1.0);
              ITColor v35 = v36;
              double HSVColor = ITColor::GetHSVColor(&v36);
              uint64_t v23 = v22;
              uint64_t v25 = v24;
              ITColor::GetLuminance(&v36);
              uint64_t v26 = *(void *)this + v12;
              double v27 = (double *)(v26 + v16);
              *(v27 - 3) = HSVColor;
              uint64_t v28 = v26 + 8 * v15;
              *(void *)(v28 + 8) = v23;
              *(void *)(v28 + 16) = v25;
              *double v27 = v29;
              uint64_t v30 = *((void *)this + 1) + v12;
              double v31 = (double *)(v30 + v16);
              *(v31 - 3) = HSVColor;
              uint64_t v32 = v30 + 8 * v15;
              *(void *)(v32 + 8) = v23;
              *(void *)(v32 + 16) = v25;
              *double v31 = v29;
              double v10 = *((double *)this + 48);
              double v9 = v29 + v10;
              *((double *)this + 48) = v9;
              v15 += 4;
              v16 += 32;
            }
            while (v15 != 400);
            v12 += 3200;
          }
          *((double *)this + 48) = v9 / 10000.0;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t ImageAnalyzer::QuantizeColorMaps(ImageAnalyzer *this)
{
  uint64_t result = (uint64_t)malloc_type_calloc(0x2710uLL, 8uLL, 0x100004000313F17uLL);
  *((void *)this + 2) = result;
  if (result)
  {
    uint64_t result = (uint64_t)malloc_type_calloc(0x2710uLL, 1uLL, 0x100004077774924uLL);
    if (result)
    {
      double v3 = (unsigned char *)result;
      uint64_t v4 = 0;
      double v5 = 0;
      unint64_t v6 = 0;
      __p = 0;
      v48 = 0;
      v49 = 0;
      uint64_t v7 = 1;
      do
      {
        if (!v3[v6])
        {
          size_t v8 = (double *)(*(void *)this + 32 * v6);
          double v9 = *v8;
          double v10 = v8[1];
          double v11 = v8[2];
          double v12 = v8[3];
          double v13 = ImageAnalyzer::WeightForPointOnEdge((ImageAnalyzer *)result, v6 - 100 * ((unsigned __int16)v6 / 0x64u), (unsigned __int16)v6 / 0x64u);
          double v14 = v13;
          v48 = v5;
          if (v5 >= v49)
          {
            unint64_t v15 = 0x5555555555555556 * (((char *)v49 - (char *)v5) >> 4);
            if (v15 <= 1) {
              unint64_t v15 = 1;
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v5) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v16 = 0x555555555555555;
            }
            else {
              unint64_t v16 = v15;
            }
            size_t v17 = (double *)sub_100008844((uint64_t)&v49, v16);
            *size_t v17 = v9;
            v17[1] = v10;
            v17[2] = v11;
            v17[3] = v12;
            *((_DWORD *)v17 + 8) = v6;
            v17[5] = v14;
            uint64_t v20 = (char *)__p;
            uint64_t v19 = v48;
            v21 = v17;
            if (v48 != __p)
            {
              do
              {
                long long v22 = *((_OWORD *)v19 - 3);
                long long v23 = *((_OWORD *)v19 - 1);
                *((_OWORD *)v21 - 2) = *((_OWORD *)v19 - 2);
                *((_OWORD *)v21 - 1) = v23;
                *((_OWORD *)v21 - 3) = v22;
                v21 -= 6;
                v19 -= 6;
              }
              while (v19 != (double *)v20);
              uint64_t v19 = (double *)v20;
            }
            double v5 = v17 + 6;
            __p = v21;
            v48 = v17 + 6;
            v49 = &v17[6 * v18];
            if (v19) {
              operator delete(v19);
            }
          }
          else
          {
            *double v5 = v9;
            v5[1] = v10;
            v5[2] = v11;
            v5[3] = v12;
            *((_DWORD *)v5 + 8) = v6;
            v5[5] = v13;
            v5 += 6;
          }
          v48 = v5;
          *(double *)(*((void *)this + 2) + 8 * v6) = v14;
          v3[v6] = 1;
          if (v6 <= 0x270E)
          {
            uint64_t v24 = v4;
            uint64_t v25 = v7;
            do
            {
              if (!v3[v25])
              {
                uint64_t v26 = (void *)(*(void *)this + v24);
                double v27 = (unsigned int (*)(void, void))v26[4];
                uint64_t v28 = (unsigned int (*)(void, void))v26[5];
                double v29 = (unsigned int (*)(void, void))v26[6];
                uint64_t v30 = (unsigned int (*)(void, void))v26[7];
                BOOL v31 = isCloseToColor(0, v9, v10, v11, v12, *(double *)&v27, *(double *)&v28, *(double *)&v29, *(double *)&v30, 0.0799999982);
                if (v31)
                {
                  double v32 = ImageAnalyzer::WeightForPointOnEdge((ImageAnalyzer *)v31, v25 - 100 * ((unsigned __int16)v25 / 0x64u), (unsigned __int16)v25 / 0x64u);
                  v44[0] = v27;
                  v44[1] = v28;
                  v44[2] = v29;
                  v44[3] = v30;
                  int v45 = v25;
                  double v46 = v32;
                  ImageAnalyzer::AddQuantizeColorEntryToSet(v33, (double *)v44, &__p);
                  v3[v25] = 1;
                }
              }
              ++v25;
              v24 += 32;
            }
            while (v25 != 10000);
            double v5 = v48;
          }
          uint64_t result = (uint64_t)__p;
          if (v5 != __p)
          {
            v44[0] = (unsigned int (*)(void, void))CompareQuantizeSortcolor;
            sub_1000088C0((long long *)__p, (long long *)v5, v44, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)__p) >> 4)), 1);
            double v5 = (double *)__p;
            uint64_t v34 = *((unsigned int *)__p + 8);
            double v35 = *((double *)__p + 5);
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (unsigned char *)__p) >> 4);
            if (v36 >= 2)
            {
              v37 = (double *)((char *)__p + 88);
              unint64_t v38 = v36 - 1;
              do
              {
                uint64_t v39 = *((unsigned int *)v37 - 2);
                double v40 = *v37;
                if (!v3[v39]) {
                  v3[v39] = 1;
                }
                double v35 = v35 + v40;
                v37 += 6;
                v41 = (_OWORD *)(*(void *)this + 32 * v34);
                long long v42 = v41[1];
                v43 = (_OWORD *)(*(void *)this + 32 * v39);
                _OWORD *v43 = *v41;
                v43[1] = v42;
                --v38;
              }
              while (v38);
            }
            *(double *)(*((void *)this + 2) + 8 * v34) = v35;
          }
        }
        ++v6;
        ++v7;
        v4 += 32;
      }
      while (v6 != 10000);
      free(v3);
      if (__p)
      {
        v48 = (double *)__p;
        operator delete(__p);
      }
      return 1;
    }
  }
  return result;
}

void sub_100006D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImageAnalyzer::PickBackgroundColor(ImageAnalyzer *this)
{
  double v2 = *((double *)this + 48);
  double v3 = ImageAnalyzer::DominantColors(this);
  long long v4 = *((_OWORD *)*v3 + 1);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)*v3;
  *(_OWORD *)((char *)this + 56) = v4;
  long long v5 = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)&v31.mRed = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&v31.double mBlue = v5;
  if (ITColor::GetContrastWithLuminance(&v31, 0.180000007) < 1.29999995)
  {
    double ContrastWithLuminance = ITColor::GetContrastWithLuminance((ITColor *)((char *)this + 40), 0.180000007);
    unint64_t v7 = (unint64_t)((unsigned char *)v3[1] - (unsigned char *)*v3) >> 5;
    if ((int)v7 >= 2)
    {
      double v8 = ContrastWithLuminance;
      if (v7 == 2) {
        uint64_t v9 = 2;
      }
      else {
        uint64_t v9 = 3;
      }
      for (uint64_t i = 1; i != v9; ++i)
      {
        double v11 = (double *)*((void *)this + 44);
        double v12 = v11[i];
        if (v12 <= 0.0) {
          break;
        }
        double v13 = *v11 / v12;
        if (v13 <= 0.9 || v13 >= 1.112) {
          break;
        }
        double v14 = ITColor::GetContrastWithLuminance((ITColor *)*v3 + i, 0.180000007);
        if (v14 > v8)
        {
          unint64_t v15 = (char *)*v3 + 32 * i;
          long long v16 = v15[1];
          *(_OWORD *)((char *)this + 40) = *v15;
          *(_OWORD *)((char *)this + 56) = v16;
          double v8 = v14;
        }
      }
    }
  }
  long long v17 = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)&v31.mRed = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&v31.double mBlue = v17;
  if (ITColor::GetContrastWithLuminance(&v31, 0.180000007) < 1.29999995)
  {
    double HSVColor = ITColor::GetHSVColor((ITColor *)((char *)this + 40));
    double v20 = v19;
    double v22 = v21;
    double v28 = HSVColor;
    double v29 = v19;
    double v30 = v21;
    if (v2 < 0.180000007
      || (long long v23 = *(_OWORD *)((char *)this + 56),
          *(_OWORD *)&v31.mRed = *(_OWORD *)((char *)this + 40),
          *(_OWORD *)&v31.double mBlue = v23,
          ITColor::GetLuminance(&v31),
          v24 < 0.180000007))
    {
      double v29 = v20 * 1.10000002;
      double v30 = v22 * 0.800000012;
    }
    *((double *)this + 5) = ITColor::CreateFromHSVColor(&v28);
    *((void *)this + 6) = v25;
    *((void *)this + 7) = v26;
    *((void *)this + 8) = v27;
  }
}

void ImageAnalyzer::PickTextColors(ImageAnalyzer *this)
{
  double v2 = ImageAnalyzer::DominantColors(this);
  unint64_t v3 = (unsigned char *)v2[1] - (unsigned char *)*v2;
  unint64_t v4 = v3 >> 5;
  if ((v3 >> 5) < 2)
  {
    BOOL v34 = 0;
    char v35 = 0;
    goto LABEL_28;
  }
  long long v5 = v2;
  double ContrastWithColor = ITColor::GetContrastWithColor((ITColor *)*v2 + 1, (ITColor *)((char *)this + 40));
  uint64_t v7 = 0;
  int v8 = 0;
  unint64_t v9 = (v3 >> 5);
  int v10 = 1;
  unsigned int v85 = v4;
  unsigned int v11 = v4;
  unsigned int v12 = 1;
  unsigned int v86 = 1;
  double v13 = ContrastWithColor;
  do
  {
    double v14 = (char *)*v5 + v7;
    long long v15 = v14[1];
    *(_OWORD *)&v87.mRed = *v14;
    *(_OWORD *)&v87.double mBlue = v15;
    if ((v8 & 1) == 0 && contrastsWithColor(v87, *(ITColor *)((char *)this + 40)))
    {
      ImageAnalyzer::EnhanceContrastWithColor(v87, *(ITColor *)((char *)this + 40), 0.449999988);
      *((void *)this + 9) = v16;
      *((void *)this + 10) = v17;
      *((void *)this + 11) = v18;
      *((void *)this + 12) = v19;
      int v8 = 1;
      unsigned int v11 = v10;
    }
    double v20 = ITColor::GetContrastWithColor(&v87, (ITColor *)((char *)this + 40));
    if (v20 > v13)
    {
      if (v20 <= ContrastWithColor)
      {
        double v13 = v20;
        unsigned int v86 = v10 - 1;
      }
      else
      {
        double v13 = ContrastWithColor;
        double ContrastWithColor = v20;
        unsigned int v86 = v12;
        unsigned int v12 = v10 - 1;
      }
    }
    ++v10;
    v7 += 32;
  }
  while (32 * v9 != v7);
  if (v11 >= v85)
  {
LABEL_15:
    ITColor::ITColor(&v87);
    int v29 = 0;
    if (v8)
    {
      LODWORD(v4) = v85;
      goto LABEL_24;
    }
    LOBYTE(v21) = 1;
    goto LABEL_17;
  }
  int v21 = 0;
  uint64_t v22 = 32 * v11;
  uint64_t v23 = v11;
  while (1)
  {
    double v24 = (double *)((char *)*v5 + v22);
    double v25 = *v24;
    double v26 = v24[1];
    double v27 = v24[2];
    double v28 = v24[3];
    v88.mRed = *v24;
    v88.mGreen = v26;
    v88.double mBlue = v27;
    v88.mAlpha = v28;
    if (contrastsEnoughWithColor(v88, *(ITColor *)((char *)this + 40))) {
      break;
    }
    int v21 = ++v23 >= v9;
    v22 += 32;
    if (v9 == v23) {
      goto LABEL_15;
    }
  }
  v90.mRed = v25;
  v90.mGreen = v26;
  v90.double mBlue = v27;
  v90.mAlpha = v28;
  ImageAnalyzer::EnhanceContrastWithColor(v90, *(ITColor *)((char *)this + 40), 0.449999988);
  *((void *)this + 13) = v36;
  *((void *)this + 14) = v37;
  *((void *)this + 15) = v38;
  *((void *)this + 16) = v39;
  if (v8 & ~v21)
  {
    char v35 = 1;
    int v29 = 1;
    LODWORD(v4) = v85;
    goto LABEL_27;
  }
  ITColor::ITColor(&v87);
  int v29 = 1;
  if ((v8 & 1) == 0)
  {
LABEL_17:
    ImageAnalyzer::EnhanceContrastWithColor(*((ITColor *)*v5 + v12), *(ITColor *)((char *)this + 40), 0.200000003);
    ITColor v87 = v89;
    if (contrastsEnoughWithColor(v89, *(ITColor *)((char *)this + 40)))
    {
      ImageAnalyzer::EnhanceContrastWithColor(v87, *(ITColor *)((char *)this + 40), 0.449999988);
      *((void *)this + 9) = v30;
      *((void *)this + 10) = v31;
      *((void *)this + 11) = v32;
      *((void *)this + 12) = v33;
      LOBYTE(v8) = 1;
    }
  }
  LODWORD(v4) = v85;
  if (v21)
  {
LABEL_24:
    ImageAnalyzer::EnhanceContrastWithColor(*((ITColor *)*v5 + v86), *(ITColor *)((char *)this + 40), 0.200000003);
    ITColor v87 = v91;
    if (contrastsEnoughWithColor(v91, *(ITColor *)((char *)this + 40)))
    {
      ImageAnalyzer::EnhanceContrastWithColor(v87, *(ITColor *)((char *)this + 40), 0.449999988);
      *((void *)this + 13) = v40;
      *((void *)this + 14) = v41;
      *((void *)this + 15) = v42;
      *((void *)this + 16) = v43;
      int v29 = 1;
    }
  }
  char v35 = v8;
LABEL_27:
  BOOL v34 = v29 != 0;
LABEL_28:
  long long v44 = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)&v87.mRed = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&v87.double mBlue = v44;
  ITColor::GetLuminance(&v87);
  int v45 = (long long *)((char *)this + 72);
  double v47 = *((double *)this + 10);
  double v46 = *((double *)this + 11);
  double v48 = *((double *)this + 12);
  v49 = (long long *)((char *)this + 104);
  if (v50 >= 0.180000007)
  {
    v87.mRed = *((double *)this + 9);
    v87.mGreen = v47;
    v87.double mBlue = v46;
    v87.mAlpha = v48;
    ITColor::GetLuminance(&v87);
    if (v51 >= 0.180000007) {
      char v35 = 0;
    }
    long long v52 = *(_OWORD *)((char *)this + 120);
    *(_OWORD *)&v87.mRed = *(_OWORD *)((char *)this + 104);
    *(_OWORD *)&v87.double mBlue = v52;
    ITColor::GetLuminance(&v87);
    if (v53 >= 0.180000007) {
      BOOL v34 = 0;
    }
    if (v35) {
      goto LABEL_50;
    }
LABEL_40:
    long long v57 = *(_OWORD *)((char *)this + 56);
    *(_OWORD *)&v87.mRed = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)&v87.double mBlue = v57;
    ITColor::GetLuminance(&v87);
    if (v58 < 0.180000007)
    {
      if (v4)
      {
        uint64_t v59 = *((void *)this + 5);
        uint64_t v60 = *((void *)this + 6);
        uint64_t v61 = *((void *)this + 7);
        uint64_t v62 = *((void *)this + 8);
        v63 = &ITColor::kWhite;
        goto LABEL_45;
      }
      v68 = &ITColor::kWhite;
    }
    else
    {
      if (v4)
      {
        uint64_t v59 = *((void *)this + 5);
        uint64_t v60 = *((void *)this + 6);
        uint64_t v61 = *((void *)this + 7);
        uint64_t v62 = *((void *)this + 8);
        v63 = &ITColor::kBlack;
LABEL_45:
        double BlendedColorWithFraction = ITColor::CreateBlendedColorWithFraction((ITColor *)v63, 0.0500000007, *(ITColor *)&v59);
LABEL_49:
        *((double *)this + 9) = BlendedColorWithFraction;
        *((void *)this + 10) = v65;
        *((void *)this + 11) = v66;
        *((void *)this + 12) = v67;
        goto LABEL_50;
      }
      v68 = &ITColor::kBlack;
    }
    double BlendedColorWithFraction = *(double *)v68;
    uint64_t v65 = *((void *)v68 + 1);
    uint64_t v66 = *((void *)v68 + 2);
    uint64_t v67 = *((void *)v68 + 3);
    goto LABEL_49;
  }
  v87.mRed = *((double *)this + 9);
  v87.mGreen = v47;
  v87.double mBlue = v46;
  v87.mAlpha = v48;
  ITColor::GetLuminance(&v87);
  if (v54 < 0.180000007) {
    char v35 = 0;
  }
  long long v55 = *(_OWORD *)((char *)this + 120);
  *(_OWORD *)&v87.mRed = *(_OWORD *)((char *)this + 104);
  *(_OWORD *)&v87.double mBlue = v55;
  ITColor::GetLuminance(&v87);
  if (v56 < 0.180000007) {
    BOOL v34 = 0;
  }
  if ((v35 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_50:
  if (v34) {
    goto LABEL_61;
  }
  long long v69 = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)&v87.mRed = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&v87.double mBlue = v69;
  ITColor::GetLuminance(&v87);
  if (v70 < 0.180000007)
  {
    if (v4)
    {
      uint64_t v71 = *((void *)this + 5);
      uint64_t v72 = *((void *)this + 6);
      uint64_t v73 = *((void *)this + 7);
      uint64_t v74 = *((void *)this + 8);
      v75 = &ITColor::kWhite;
      goto LABEL_56;
    }
    v80 = &ITColor::kWhite;
LABEL_59:
    double v76 = *(double *)v80;
    uint64_t v77 = *((void *)v80 + 1);
    uint64_t v78 = *((void *)v80 + 2);
    uint64_t v79 = *((void *)v80 + 3);
    goto LABEL_60;
  }
  if (!v4)
  {
    v80 = &ITColor::kBlack;
    goto LABEL_59;
  }
  uint64_t v71 = *((void *)this + 5);
  uint64_t v72 = *((void *)this + 6);
  uint64_t v73 = *((void *)this + 7);
  uint64_t v74 = *((void *)this + 8);
  v75 = &ITColor::kBlack;
LABEL_56:
  double v76 = ITColor::CreateBlendedColorWithFraction((ITColor *)v75, 0.100000001, *(ITColor *)&v71);
LABEL_60:
  *((double *)this + 13) = v76;
  *((void *)this + 14) = v77;
  *((void *)this + 15) = v78;
  *((void *)this + 16) = v79;
LABEL_61:
  double v81 = ITColor::GetContrastWithColor((ITColor *)((char *)this + 72), (ITColor *)((char *)this + 40));
  if (ITColor::GetContrastWithColor((ITColor *)((char *)this + 104), (ITColor *)((char *)this + 40)) > v81)
  {
    long long v83 = *v45;
    long long v82 = *(_OWORD *)((char *)this + 88);
    long long v84 = *(_OWORD *)((char *)this + 120);
    *int v45 = *v49;
    *(_OWORD *)((char *)this + 88) = v84;
    long long *v49 = v83;
    *(_OWORD *)((char *)this + 120) = v82;
  }
}

void ImageAnalyzer::DoPostImageAnalysis(ImageAnalyzer *this)
{
  uint64_t v1 = this;
  double v2 = (ITColor *)((char *)this + 72);
  unint64_t v3 = (ITColor *)((char *)this + 40);
  *((double *)this + 17) = ITColor::CreateBlendedColorWithFraction((ITColor *)((char *)this + 72), 0.200000003, *(ITColor *)((char *)this + 40));
  unint64_t v4 = (ITColor *)((char *)v1 + 136);
  *((void *)v1 + 18) = v5;
  *((void *)v1 + 19) = v6;
  *((void *)v1 + 20) = v7;
  int v8 = (ITColor *)((char *)v1 + 104);
  *((double *)v1 + 21) = ITColor::CreateBlendedColorWithFraction((ITColor *)((char *)v1 + 104), 0.200000003, *v3);
  *((void *)v1 + 22) = v9;
  uint64_t v1 = (ImageAnalyzer *)((char *)v1 + 168);
  *((void *)v1 + 2) = v10;
  *((void *)v1 + 3) = v11;
  ImageAnalyzer::CalculateOneShadowColor(v12, v2, v3);
  *((void *)v1 + 4) = v13;
  *((void *)v1 + 5) = v14;
  *((void *)v1 + 6) = v15;
  *((void *)v1 + 7) = v16;
  ImageAnalyzer::CalculateOneShadowColor(v17, v8, v3);
  *((void *)v1 + 12) = v18;
  *((void *)v1 + 13) = v19;
  *((void *)v1 + 14) = v20;
  *((void *)v1 + 15) = v21;
  ImageAnalyzer::CalculateOneShadowColor(v22, v4, v3);
  *((void *)v1 + 8) = v23;
  *((void *)v1 + 9) = v24;
  *((void *)v1 + 10) = v25;
  *((void *)v1 + 11) = v26;
  ImageAnalyzer::CalculateOneShadowColor(v27, (ITColor *)v1, v3);
  *((void *)v1 + 16) = v28;
  *((void *)v1 + 17) = v29;
  *((void *)v1 + 18) = v30;
  *((void *)v1 + 19) = v31;
}

void ImageAnalyzer::AddQuantizeColorEntryToSet(uint64_t a1, double *a2, void **a3)
{
  uint64_t v5 = a3[1];
  if (v5 == *a3)
  {
    int v8 = a3[1];
LABEL_7:
    unint64_t v9 = (unint64_t)a3[2];
    if ((unint64_t)v8 >= v9)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - v5) >> 4);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0x555555555555555) {
        sub_10000879C();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v5) >> 4);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v16 = 0x555555555555555;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)sub_100008844((uint64_t)(a3 + 2), v16);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = &v17[48 * v13];
      uint64_t v19 = &v17[48 * v16];
      long long v20 = *(_OWORD *)a2;
      long long v21 = *((_OWORD *)a2 + 2);
      *((_OWORD *)v18 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)v18 + 2) = v21;
      *(_OWORD *)uint64_t v18 = v20;
      unsigned int v12 = v18 + 48;
      uint64_t v23 = (char *)*a3;
      uint64_t v22 = (char *)a3[1];
      if (v22 != *a3)
      {
        do
        {
          long long v24 = *((_OWORD *)v22 - 3);
          long long v25 = *((_OWORD *)v22 - 1);
          *((_OWORD *)v18 - 2) = *((_OWORD *)v22 - 2);
          *((_OWORD *)v18 - 1) = v25;
          *((_OWORD *)v18 - 3) = v24;
          v18 -= 48;
          v22 -= 48;
        }
        while (v22 != v23);
        uint64_t v22 = (char *)*a3;
      }
      *a3 = v18;
      a3[1] = v12;
      a3[2] = v19;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      long long v10 = *(_OWORD *)a2;
      long long v11 = *((_OWORD *)a2 + 2);
      v8[1] = *((_OWORD *)a2 + 1);
      v8[2] = v11;
      *int v8 = v10;
      unsigned int v12 = v8 + 3;
    }
    a3[1] = v12;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v5 = *a3;
    while (!isCloseToColor(0, *a2, a2[1], a2[2], a2[3], *(double *)&v5[v6], *(double *)&v5[v6 + 8], *(double *)&v5[v6 + 16], *(double *)&v5[v6 + 24], 0.0799999982))
    {
      ++v7;
      uint64_t v5 = *a3;
      int v8 = a3[1];
      v6 += 48;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (unsigned char *)*a3) >> 4) <= v7) {
        goto LABEL_7;
      }
    }
    *(double *)((char *)*a3 + v6 + 40) = a2[5] + *(double *)((char *)*a3 + v6 + 40);
  }
}

double ImageAnalyzer::WeightForPointOnEdge(ImageAnalyzer *this, unsigned int a2, unsigned int a3)
{
  double v3 = (double)a2;
  if (a2 <= 0x14 && a3 <= 0x14)
  {
    double v4 = (double)a3;
    double v5 = 20.0000003 - v3;
    goto LABEL_4;
  }
  if (a2 > 0x14)
  {
    if (a2 >= 0x50 && a3 <= 0x14)
    {
      double v4 = (double)a3;
      double v5 = 79.9999997 - v3;
LABEL_4:
      double v6 = 20.0000003 - v4;
      if (v5 >= 1.0) {
        double v7 = v5 * 0.75;
      }
      else {
        double v7 = 0.75;
      }
      if (v6 >= 1.0) {
        double v8 = v6 * 0.75;
      }
      else {
        double v8 = 0.75;
      }
      if (v8 <= v7) {
        double v8 = v7;
      }
      goto LABEL_22;
    }
    double v8 = 1.0;
    if (a2 < 0x50) {
      goto LABEL_22;
    }
    double v9 = 79.9999997;
  }
  else
  {
    double v9 = 20.0000003;
  }
  double v10 = v9 - v3;
  double v8 = 0.75;
  if (v10 >= 1.0) {
    double v8 = v10 * 0.75;
  }
LABEL_22:
  double result = 1.0;
  if (v8 >= 1.0) {
    return v8;
  }
  return result;
}

BOOL CompareQuantizeSortcolor(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 40) > *(double *)(a2 + 40);
}

void **ImageAnalyzer::DominantColors(ImageAnalyzer *this)
{
  uint64_t v1 = (void **)((char *)this + 328);
  if (*((void *)this + 42) == *((void *)this + 41))
  {
    long long v44 = 0;
    int v45 = 0;
    uint64_t v46 = 0;
    ITColor::ITColor(&v42);
    for (uint64_t i = 0; i != 10000; ++i)
    {
      if (*(double *)(*((void *)this + 2) + 8 * i) >= 1.0)
      {
        v41[0] = *(double *)(*((void *)this + 2) + 8 * i);
        v42.mRed = ITColor::CreateFromHSVDoubles(v3, *(double *)(*(void *)this + 32 * i), *(double *)(*(void *)this + 32 * i + 8), *(double *)(*(void *)this + 32 * i + 16));
        v42.mGreen = v5;
        v42.double mBlue = v6;
        v42.mAlpha = v7;
        uint64_t v43 = *(void *)(*(void *)this + 32 * i + 24);
        ImageAnalyzer::AddDominantColorEntryToSet(v8, v41, (void **)&v44);
      }
    }
    double v9 = v45;
    if (v45 != v44)
    {
      double v47 = CompareSortColor;
      sub_10000A014(v44, v45, (unsigned int (**)(void, void))&v47, 126 - 2 * __clz(((char *)v45 - (char *)v44) >> 6), 1);
      sub_100008074(v1, ((char *)v45 - (char *)v44) >> 6);
      double v10 = (void **)((char *)this + 352);
      sub_100008124((void **)this + 44, ((char *)v45 - (char *)v44) >> 6);
      double v9 = v45;
      if (v45 != v44)
      {
        unint64_t v11 = 0;
        double v9 = v44;
        do
        {
          unsigned int v12 = &v9[4 * v11 + 1];
          unint64_t v13 = (char *)*((void *)this + 42);
          unint64_t v14 = *((void *)this + 43);
          if ((unint64_t)v13 >= v14)
          {
            uint64_t v17 = (v13 - (unsigned char *)*v1) >> 5;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 59) {
              sub_10000879C();
            }
            uint64_t v19 = v14 - (void)*v1;
            if (v19 >> 4 > v18) {
              unint64_t v18 = v19 >> 4;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20) {
              long long v21 = (char *)sub_10000B6C0((uint64_t)this + 344, v20);
            }
            else {
              long long v21 = 0;
            }
            uint64_t v22 = (long long *)&v21[32 * v17];
            long long v23 = v12[1];
            *uint64_t v22 = *v12;
            v22[1] = v23;
            long long v25 = (char *)*((void *)this + 41);
            long long v24 = (char *)*((void *)this + 42);
            uint64_t v26 = v22;
            if (v24 != v25)
            {
              do
              {
                long long v27 = *((_OWORD *)v24 - 1);
                *(v26 - 2) = *((_OWORD *)v24 - 2);
                *(v26 - 1) = v27;
                v26 -= 2;
                v24 -= 32;
              }
              while (v24 != v25);
              long long v24 = (char *)*v1;
            }
            unint64_t v16 = v22 + 2;
            *((void *)this + 41) = v26;
            *((void *)this + 42) = v22 + 2;
            *((void *)this + 43) = &v21[32 * v20];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            long long v15 = v9[4 * v11 + 2];
            *(_OWORD *)unint64_t v13 = *v12;
            *((_OWORD *)v13 + 1) = v15;
            unint64_t v16 = v13 + 32;
          }
          *((void *)this + 42) = v16;
          uint64_t v28 = &v44[4 * v11];
          uint64_t v30 = (char *)*((void *)this + 45);
          unint64_t v29 = *((void *)this + 46);
          if ((unint64_t)v30 >= v29)
          {
            uint64_t v32 = (char *)*v10;
            uint64_t v33 = (v30 - (unsigned char *)*v10) >> 3;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61) {
              sub_10000879C();
            }
            uint64_t v35 = v29 - (void)v32;
            if (v35 >> 2 > v34) {
              unint64_t v34 = v35 >> 2;
            }
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v34;
            }
            if (v36)
            {
              uint64_t v37 = (char *)sub_10000B6F8((uint64_t)this + 368, v36);
              uint64_t v32 = (char *)*((void *)this + 44);
              uint64_t v30 = (char *)*((void *)this + 45);
            }
            else
            {
              uint64_t v37 = 0;
            }
            uint64_t v38 = &v37[8 * v33];
            *(void *)uint64_t v38 = *(void *)v28;
            uint64_t v31 = v38 + 8;
            while (v30 != v32)
            {
              uint64_t v39 = *((void *)v30 - 1);
              v30 -= 8;
              *((void *)v38 - 1) = v39;
              v38 -= 8;
            }
            *((void *)this + 44) = v38;
            *((void *)this + 45) = v31;
            *((void *)this + 46) = &v37[8 * v36];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *(void *)uint64_t v30 = *(void *)v28;
            uint64_t v31 = v30 + 8;
          }
          *((void *)this + 45) = v31;
          ++v11;
          double v9 = v44;
        }
        while (v11 < ((char *)v45 - (char *)v44) >> 6);
      }
    }
    if (v9)
    {
      int v45 = v9;
      operator delete(v9);
    }
  }
  return v1;
}

void sub_100007B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL contrastsWithColor(ITColor a1, ITColor a2)
{
  double mAlpha = a2.mAlpha;
  double mBlue = a2.mBlue;
  double mGreen = a2.mGreen;
  double mRed = a2.mRed;
  ITColor v11 = a1;
  ITColor v10 = a2;
  ITColor v12 = a1;
  ITColor::GetLuminance(&v12);
  BOOL v7 = v6 >= 0.180000007;
  v12.double mRed = mRed;
  v12.double mGreen = mGreen;
  v12.double mBlue = mBlue;
  v12.double mAlpha = mAlpha;
  ITColor::GetLuminance(&v12);
  return v7 != v8 >= 0.180000007 && ITColor::GetContrastWithColor(&v11, &v10) >= 4.5999999;
}

void ImageAnalyzer::EnhanceContrastWithColor(ITColor a1, ITColor a2, double a3)
{
  double mAlpha = a2.mAlpha;
  double mBlue = a2.mBlue;
  double mGreen = a2.mGreen;
  double mRed = a2.mRed;
  ITColor v16 = a1;
  double HSVColor = ITColor::GetHSVColor(&v16);
  double v9 = v8;
  double v11 = v10;
  ITColor::GetLuminance(&v16);
  v16.double mRed = mRed;
  v16.double mGreen = mGreen;
  v16.double mBlue = mBlue;
  v16.double mAlpha = mAlpha;
  ITColor::GetLuminance(&v16);
  double v13 = 1.0 - (1.0 - v11) * a3;
  if (v14 >= 0.180000007) {
    double v13 = v11 * a3;
  }
  ITColor::CreateFromHSVDoubles(v12, HSVColor, v9, v13);
}

BOOL contrastsEnoughWithColor(ITColor a1, ITColor a2)
{
  double mAlpha = a2.mAlpha;
  double mBlue = a2.mBlue;
  double mGreen = a2.mGreen;
  double mRed = a2.mRed;
  ITColor v11 = a1;
  ITColor v10 = a2;
  ITColor v12 = a1;
  ITColor::GetLuminance(&v12);
  BOOL v7 = v6 >= 0.180000007;
  v12.double mRed = mRed;
  v12.double mGreen = mGreen;
  v12.double mBlue = mBlue;
  v12.double mAlpha = mAlpha;
  ITColor::GetLuminance(&v12);
  return v7 != v8 >= 0.180000007 && ITColor::GetContrastWithColor(&v11, &v10) >= 3.0999999;
}

void ImageAnalyzer::CalculateOneShadowColor(ImageAnalyzer *this, ITColor *a2, ITColor *a3)
{
  ITColor::ITColor(&v14);
  ITColor::GetLuminance(a2);
  double v6 = v5;
  ITColor::GetLuminance(a3);
  if (v6 >= v7) {
    double v8 = &ITColor::kBlack;
  }
  else {
    double v8 = &ITColor::kWhite;
  }
  long long v9 = v8[1];
  *(_OWORD *)&v14.double mRed = *v8;
  *(_OWORD *)&v14.double mBlue = v9;
  ITColor::GetLuminance(&v14);
  double v11 = v10;
  ITColor::GetLuminance(a3);
  double v13 = vabdd_f64(v11, v12);
  ITColor::CreateBlendedColorWithFraction(&v14, 1.0 - ((v13 + v13) * -0.599999994 + 1.0), *a3);
}

BOOL CompareSortColor(double *a1, double *a2)
{
  return *a1 > *a2;
}

void ImageAnalyzer::AddDominantColorEntryToSet(uint64_t a1, double *a2, void **a3)
{
  double v5 = a3[1];
  if (v5 == *a3)
  {
    long long v25 = a3[1];
LABEL_7:
    unint64_t v26 = (unint64_t)a3[2];
    if ((unint64_t)v25 >= v26)
    {
      uint64_t v31 = ((char *)v25 - v5) >> 6;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 58) {
        sub_10000879C();
      }
      uint64_t v33 = v26 - (void)v5;
      if (v33 >> 5 > v32) {
        unint64_t v32 = v33 >> 5;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v34 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34) {
        uint64_t v35 = (char *)sub_100009FDC((uint64_t)(a3 + 2), v34);
      }
      else {
        uint64_t v35 = 0;
      }
      unint64_t v36 = &v35[64 * v31];
      uint64_t v37 = &v35[64 * v34];
      long long v38 = *(_OWORD *)a2;
      long long v39 = *((_OWORD *)a2 + 1);
      long long v40 = *((_OWORD *)a2 + 3);
      *((_OWORD *)v36 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)v36 + 3) = v40;
      *(_OWORD *)unint64_t v36 = v38;
      *((_OWORD *)v36 + 1) = v39;
      uint64_t v30 = v36 + 64;
      ITColor v42 = (char *)*a3;
      uint64_t v41 = (char *)a3[1];
      if (v41 != *a3)
      {
        do
        {
          long long v43 = *((_OWORD *)v41 - 4);
          long long v44 = *((_OWORD *)v41 - 3);
          long long v45 = *((_OWORD *)v41 - 1);
          *((_OWORD *)v36 - 2) = *((_OWORD *)v41 - 2);
          *((_OWORD *)v36 - 1) = v45;
          *((_OWORD *)v36 - 4) = v43;
          *((_OWORD *)v36 - 3) = v44;
          v36 -= 64;
          v41 -= 64;
        }
        while (v41 != v42);
        uint64_t v41 = (char *)*a3;
      }
      *a3 = v36;
      a3[1] = v30;
      a3[2] = v37;
      if (v41) {
        operator delete(v41);
      }
    }
    else
    {
      long long v27 = *(_OWORD *)a2;
      long long v28 = *((_OWORD *)a2 + 1);
      long long v29 = *((_OWORD *)a2 + 3);
      v25[2] = *((_OWORD *)a2 + 2);
      v25[3] = v29;
      *long long v25 = v27;
      v25[1] = v28;
      uint64_t v30 = v25 + 4;
    }
    a3[1] = v30;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    double v5 = *a3;
    while (1)
    {
      double v8 = (double *)&v5[v6];
      double v9 = v8[4];
      double v10 = v8[5];
      long long v11 = *((_OWORD *)a2 + 2);
      long long v46 = *((_OWORD *)v8 + 1);
      *(_OWORD *)&v47.double mRed = *((_OWORD *)a2 + 1);
      *(_OWORD *)&v47.double mBlue = v11;
      double HSVColor = ITColor::GetHSVColor(&v47);
      double v14 = v13;
      double v16 = v15;
      ITColor::GetLuminance(&v47);
      double v18 = v17;
      *(_OWORD *)&v47.double mRed = v46;
      v47.double mBlue = v9;
      v47.double mAlpha = v10;
      double v19 = ITColor::GetHSVColor(&v47);
      double v21 = v20;
      double v23 = v22;
      ITColor::GetLuminance(&v47);
      if (isCloseToColor((ITColor *)1, HSVColor, v14, v16, v18, v19, v21, v23, v24, 0.0700000003)) {
        break;
      }
      ++v7;
      double v5 = *a3;
      long long v25 = a3[1];
      v6 += 64;
      if (v7 >= ((char *)v25 - (unsigned char *)*a3) >> 6) {
        goto LABEL_7;
      }
    }
    *(double *)((char *)*a3 + v6) = *a2 + *(double *)((char *)*a3 + v6);
  }
}

void sub_100008074(void **a1, unint64_t a2)
{
  double v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      sub_10000879C();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_10000B6C0(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    double v9 = &v6[32 * v8];
    long long v11 = (char *)*a1;
    double v10 = (char *)a1[1];
    double v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      double v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_100008124(void **a1, unint64_t a2)
{
  double v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_10000879C();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_10000B6F8(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    double v9 = &v6[8 * v8];
    double v10 = (char *)*a1;
    long long v11 = (char *)a1[1];
    double v12 = v7;
    if (v11 != *a1)
    {
      double v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

BOOL AnalyzeImagePlease(BOOL result, AnalyzedImageColors *a2)
{
  if (result)
  {
    uint64_t v3 = (CGContext *)result;
    ImageAnalyzer::ImageAnalyzer((ImageAnalyzer *)&v95);
    if (ImageAnalyzer::AnalyzeImage((ImageAnalyzer *)&v95, v3))
    {
      double v4 = v98;
      double v5 = v99;
      double v6 = v100;
      a2->backgroundColor.double mRed = v98;
      a2->backgroundColor.double mGreen = v5;
      a2->backgroundColor.double mBlue = v6;
      double v7 = *(double *)&v101;
      long long v8 = v102;
      *(_OWORD *)&a2->backgroundColor.double mAlpha = v101;
      *(_OWORD *)&a2->primaryTextColor.double mGreen = v8;
      long long v9 = v104;
      *(_OWORD *)&a2->primaryTextColor.double mAlpha = v103;
      *(_OWORD *)&a2->secondaryTextColor.double mGreen = v9;
      long long v10 = v106;
      *(_OWORD *)&a2->secondaryTextColor.double mAlpha = v105;
      *(_OWORD *)&a2->tertiaryTextColor.double mGreen = v10;
      long long v11 = v108;
      *(_OWORD *)&a2->tertiaryTextColor.double mAlpha = v107;
      *(_OWORD *)&a2->quaternaryTextColor.double mGreen = v11;
      long long v12 = v110;
      *(_OWORD *)&a2->quaternaryTextColor.double mAlpha = v109;
      *(void *)&long long v8 = v111;
      *(_OWORD *)&a2->primaryDropShadowColor.double mGreen = v12;
      *(void *)&a2->primaryDropShadowColor.double mAlpha = v8;
      long long v13 = v113;
      *(_OWORD *)&a2->tertiaryDropShadowColor.double mRed = v112;
      *(_OWORD *)&a2->tertiaryDropShadowColor.double mBlue = v13;
      long long v14 = v115;
      *(_OWORD *)&a2->secondaryDropShadowColor.double mRed = v114;
      *(_OWORD *)&a2->secondaryDropShadowColor.double mBlue = v14;
      long long v15 = v117;
      *(_OWORD *)&a2->quarnaryDropShadowColor.double mRed = v116;
      *(_OWORD *)&a2->quarnaryDropShadowColor.double mBlue = v15;
      a2->colorsValid = 1;
      v119.double mRed = v4;
      v119.double mGreen = v5;
      v119.double mBlue = v6;
      v119.double mAlpha = v7;
      ITColor::GetLuminance(&v119);
      a2->isBackgroundLight = v16 >= 0.180000007;
      long long v17 = *(_OWORD *)&a2->primaryTextColor.mBlue;
      *(_OWORD *)&v119.double mRed = *(_OWORD *)&a2->primaryTextColor.mRed;
      *(_OWORD *)&v119.double mBlue = v17;
      ITColor::GetLuminance(&v119);
      a2->isPrimaryColorLight = v18 >= 0.180000007;
      long long v19 = *(_OWORD *)&a2->secondaryTextColor.mBlue;
      *(_OWORD *)&v119.double mRed = *(_OWORD *)&a2->secondaryTextColor.mRed;
      *(_OWORD *)&v119.double mBlue = v19;
      ITColor::GetLuminance(&v119);
      a2->isSecondaryColorLight = v20 >= 0.180000007;
      double v21 = v118;
      a2->isBorderedImage = v118 > 0.0;
      a2->borderPercentage = v21;
      double v22 = (ITColor *)ImageAnalyzer::DominantColors((ImageAnalyzer *)&v95);
      p_double mRed = &v22->mRed;
      begin = a2->completeColorList.__begin_;
      a2->completeColorList.__end_ = begin;
      double mRed = v22->mRed;
      if (*(void *)&v22->mGreen != *(void *)&v22->mRed)
      {
        unint64_t v26 = 0;
        p_completeColorList = &a2->completeColorList;
        p_end_cap = &a2->completeColorList.__end_cap_;
        do
        {
          long long v29 = (_OWORD *)(*(void *)&mRed + 32 * v26);
          if (begin >= p_end_cap->__value_)
          {
            uint64_t v31 = begin - p_completeColorList->__begin_;
            if ((unint64_t)(v31 + 1) >> 59) {
              sub_10000879C();
            }
            uint64_t v32 = (char *)p_end_cap->__value_ - (char *)p_completeColorList->__begin_;
            uint64_t v33 = v32 >> 4;
            if (v32 >> 4 <= (unint64_t)(v31 + 1)) {
              uint64_t v33 = v31 + 1;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v33;
            }
            if (v34) {
              double v22 = (ITColor *)sub_10000B6C0((uint64_t)&a2->completeColorList.__end_cap_, v34);
            }
            else {
              double v22 = 0;
            }
            uint64_t v35 = &v22[v31];
            long long v36 = v29[1];
            *(_OWORD *)&v35->double mRed = *v29;
            *(_OWORD *)&v35->double mBlue = v36;
            long long v38 = a2->completeColorList.__begin_;
            end = a2->completeColorList.__end_;
            long long v39 = v35;
            if (end != v38)
            {
              do
              {
                long long v40 = *(_OWORD *)&end[-1].mBlue;
                *(_OWORD *)&v39[-1].double mRed = *(_OWORD *)&end[-1].mRed;
                *(_OWORD *)&v39[-1].double mBlue = v40;
                --v39;
                --end;
              }
              while (end != v38);
              end = p_completeColorList->__begin_;
            }
            begin = v35 + 1;
            a2->completeColorList.__begin_ = v39;
            a2->completeColorList.__end_ = v35 + 1;
            a2->completeColorList.__end_cap_.__value_ = &v22[v34];
            if (end) {
              operator delete(end);
            }
          }
          else
          {
            long long v30 = v29[1];
            *(_OWORD *)&begin->double mRed = *v29;
            *(_OWORD *)&begin->double mBlue = v30;
            ++begin;
          }
          a2->completeColorList.__end_ = begin;
          ++v26;
          double mRed = *p_mRed;
        }
        while (v26 < (uint64_t)(*((void *)p_mRed + 1) - *(void *)p_mRed) >> 5);
      }
      uint64_t v41 = 0;
      a2->internalColorMapint Width = 100;
      p_originalColorMap = &a2->originalColorMap;
      a2->originalColorMap.__end_ = a2->originalColorMap.__begin_;
      p_quantizedColorMap = &a2->quantizedColorMap;
      a2->quantizedColorMap.__end_ = a2->quantizedColorMap.__begin_;
      p_mColorCounts = &a2->mColorCounts;
      a2->mColorCounts.__end_ = a2->mColorCounts.__begin_;
      do
      {
        double v46 = ITColor::CreateFromHSVDoubles(v22, *(double *)(v96 + 32 * v41), *(double *)(v96 + 32 * v41 + 8), *(double *)(v96 + 32 * v41 + 16));
        double v50 = v46;
        double v51 = v47;
        double v52 = v48;
        double v53 = v49;
        long long v55 = a2->originalColorMap.__end_;
        value = a2->originalColorMap.__end_cap_.__value_;
        if (v55 >= value)
        {
          long long v45 = p_originalColorMap->__begin_;
          uint64_t v57 = v55 - p_originalColorMap->__begin_;
          unint64_t v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 59) {
            sub_10000879C();
          }
          uint64_t v59 = (char *)value - (char *)v45;
          if (v59 >> 4 > v58) {
            unint64_t v58 = v59 >> 4;
          }
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v60 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v60 = v58;
          }
          if (v60)
          {
            uint64_t v61 = (char *)sub_10000B6C0((uint64_t)&a2->originalColorMap.__end_cap_, v60);
            long long v45 = a2->originalColorMap.__begin_;
            long long v55 = a2->originalColorMap.__end_;
          }
          else
          {
            uint64_t v61 = 0;
          }
          uint64_t v62 = &v61[32 * v57];
          *(double *)uint64_t v62 = v50;
          *((double *)v62 + 1) = v51;
          *((double *)v62 + 2) = v52;
          *((double *)v62 + 3) = v53;
          v63 = (ITColor *)v62;
          if (v55 != v45)
          {
            do
            {
              long long v64 = *(_OWORD *)&v55[-1].mBlue;
              *(_OWORD *)&v63[-1].double mRed = *(_OWORD *)&v55[-1].mRed;
              *(_OWORD *)&v63[-1].double mBlue = v64;
              --v63;
              --v55;
            }
            while (v55 != v45);
            long long v45 = p_originalColorMap->__begin_;
          }
          double v56 = (ITColor *)(v62 + 32);
          a2->originalColorMap.__begin_ = v63;
          a2->originalColorMap.__end_ = (ITColor *)(v62 + 32);
          a2->originalColorMap.__end_cap_.__value_ = (ITColor *)&v61[32 * v60];
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          v55->double mRed = v46;
          v55->double mGreen = v47;
          double v56 = v55 + 1;
          v55->double mBlue = v48;
          v55->double mAlpha = v49;
        }
        a2->originalColorMap.__end_ = v56;
        double v65 = ITColor::CreateFromHSVDoubles(v45, *(double *)(v95 + 32 * v41), *(double *)(v95 + 32 * v41 + 8), *(double *)(v95 + 32 * v41 + 16));
        double v69 = v65;
        double v70 = v66;
        double v71 = v67;
        double v72 = v68;
        uint64_t v74 = a2->quantizedColorMap.__end_;
        uint64_t v73 = a2->quantizedColorMap.__end_cap_.__value_;
        if (v74 >= v73)
        {
          double v22 = p_quantizedColorMap->__begin_;
          uint64_t v76 = v74 - p_quantizedColorMap->__begin_;
          unint64_t v77 = v76 + 1;
          if ((unint64_t)(v76 + 1) >> 59) {
            sub_10000879C();
          }
          uint64_t v78 = (char *)v73 - (char *)v22;
          if (v78 >> 4 > v77) {
            unint64_t v77 = v78 >> 4;
          }
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v79 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v79 = v77;
          }
          if (v79)
          {
            v80 = (char *)sub_10000B6C0((uint64_t)&a2->quantizedColorMap.__end_cap_, v79);
            double v22 = a2->quantizedColorMap.__begin_;
            uint64_t v74 = a2->quantizedColorMap.__end_;
          }
          else
          {
            v80 = 0;
          }
          double v81 = &v80[32 * v76];
          *(double *)double v81 = v69;
          *((double *)v81 + 1) = v70;
          *((double *)v81 + 2) = v71;
          *((double *)v81 + 3) = v72;
          long long v82 = (ITColor *)v81;
          if (v74 != v22)
          {
            do
            {
              long long v83 = *(_OWORD *)&v74[-1].mBlue;
              *(_OWORD *)&v82[-1].double mRed = *(_OWORD *)&v74[-1].mRed;
              *(_OWORD *)&v82[-1].double mBlue = v83;
              --v82;
              --v74;
            }
            while (v74 != v22);
            double v22 = p_quantizedColorMap->__begin_;
          }
          v75 = (ITColor *)(v81 + 32);
          a2->quantizedColorMap.__begin_ = v82;
          a2->quantizedColorMap.__end_ = (ITColor *)(v81 + 32);
          a2->quantizedColorMap.__end_cap_.__value_ = (ITColor *)&v80[32 * v79];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          v74->double mRed = v65;
          v74->double mGreen = v66;
          v75 = v74 + 1;
          v74->double mBlue = v67;
          v74->double mAlpha = v68;
        }
        a2->quantizedColorMap.__end_ = v75;
        uint64_t v84 = v97;
        unsigned int v86 = a2->mColorCounts.__end_;
        unsigned int v85 = a2->mColorCounts.__end_cap_.__value_;
        if (v86 >= v85)
        {
          double v22 = (ITColor *)p_mColorCounts->__begin_;
          uint64_t v88 = v86 - p_mColorCounts->__begin_;
          unint64_t v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 61) {
            sub_10000879C();
          }
          uint64_t v90 = (char *)v85 - (char *)v22;
          if (v90 >> 2 > v89) {
            unint64_t v89 = v90 >> 2;
          }
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v91 = v89;
          }
          if (v91)
          {
            v92 = (char *)sub_10000B6F8((uint64_t)&a2->mColorCounts.__end_cap_, v91);
            double v22 = (ITColor *)a2->mColorCounts.__begin_;
            unsigned int v86 = a2->mColorCounts.__end_;
          }
          else
          {
            v92 = 0;
          }
          v93 = (double *)&v92[8 * v88];
          double *v93 = *(double *)(v84 + 8 * v41);
          ITColor v87 = v93 + 1;
          while (v86 != (double *)v22)
          {
            uint64_t v94 = *((void *)v86-- - 1);
            *((void *)v93-- - 1) = v94;
          }
          a2->mColorCounts.__begin_ = v93;
          a2->mColorCounts.__end_ = v87;
          a2->mColorCounts.__end_cap_.__value_ = (double *)&v92[8 * v91];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *unsigned int v86 = *(double *)(v97 + 8 * v41);
          ITColor v87 = v86 + 1;
        }
        a2->mColorCounts.__end_ = v87;
        ++v41;
      }
      while (v41 != 10000);
      ImageAnalyzer::~ImageAnalyzer((ImageAnalyzer *)&v95);
      return a2->colorsValid;
    }
    else
    {
      ImageAnalyzer::~ImageAnalyzer((ImageAnalyzer *)&v95);
      return 0;
    }
  }
  return result;
}

void sub_100008764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ImageAnalyzer::~ImageAnalyzer((ImageAnalyzer *)va);
  _Unwind_Resume(a1);
}

void sub_10000879C()
{
}

void sub_1000087B4(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100008810(exception, a1);
}

void sub_1000087FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100008810(std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_100008844(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_10000888C();
  }
  return operator new(48 * a2);
}

void sub_10000888C()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void sub_1000088C0(long long *a1, long long *a2, unsigned int (**a3)(void, void), uint64_t a4, char a5)
{
LABEL_1:
  long long v11 = a2 - 3;
  long long v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (a2 - v12);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v37 = *a3;
          long long v39 = *(a2 - 2);
          long long v38 = *(a2 - 1);
          v50[0] = *(a2 - 3);
          v50[1] = v39;
          v50[2] = v38;
          long long v40 = *v12;
          long long v41 = v12[2];
          v49[1] = v12[1];
          v49[2] = v41;
          v49[0] = v40;
          if (v37(v50, v49))
          {
            long long v42 = *v12;
            long long v43 = v12[2];
            long long v52 = v12[1];
            long long v53 = v43;
            long long v51 = v42;
            long long v44 = *v11;
            long long v45 = *(a2 - 1);
            v12[1] = *(a2 - 2);
            v12[2] = v45;
            *long long v12 = v44;
            long long v46 = v52;
            *long long v11 = v51;
            *(a2 - 2) = v46;
            *(a2 - 1) = v53;
          }
          break;
        case 3uLL:
          sub_100008E7C(v12, v12 + 3, a2 - 3, a3);
          break;
        case 4uLL:
          sub_100009724((__n128 *)v12, (__n128 *)v12 + 3, (__n128 *)v12 + 6, (__n128 *)a2 - 3, a3);
          break;
        case 5uLL:
          sub_100009868((__n128 *)v12, (__n128 *)v12 + 3, (__n128 *)v12 + 6, (__n128 *)v12 + 9, (__n128 *)a2 - 3, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 1151)
    {
      if (a5) {
        sub_100008C38((uint64_t)v12, a2, (uint64_t (**)(void, void))a3);
      }
      else {
        sub_100008D70((uint64_t)v12, a2, (uint64_t (**)(void, void))a3);
      }
      return;
    }
    if (v14 == 1) {
      break;
    }
    unint64_t v17 = v16 >> 1;
    double v18 = &v12[3 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0x1801)
    {
      sub_100008E7C(v12, &v12[3 * (v16 >> 1)], a2 - 3, a3);
      uint64_t v19 = 3 * v17;
      double v20 = &v12[3 * v17 - 3];
      sub_100008E7C(v12 + 3, v20, a2 - 6, a3);
      double v21 = v12 + 6;
      double v22 = &v12[v19 + 3];
      sub_100008E7C(v21, v22, a2 - 9, a3);
      sub_100008E7C(v20, v18, v22, a3);
      long long v23 = *a1;
      long long v24 = a1[2];
      long long v52 = a1[1];
      long long v53 = v24;
      long long v51 = v23;
      long long v25 = *v18;
      long long v26 = v18[2];
      a1[1] = v18[1];
      a1[2] = v26;
      *a1 = v25;
      long long v27 = v51;
      long long v28 = v53;
      v18[1] = v52;
      v18[2] = v28;
      *double v18 = v27;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_100008E7C(&v12[3 * (v16 >> 1)], v12, a2 - 3, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    long long v29 = *a3;
    long long v31 = *(a1 - 2);
    long long v30 = *(a1 - 1);
    v48[0] = *(a1 - 3);
    v48[1] = v31;
    v48[2] = v30;
    long long v32 = *a1;
    long long v33 = a1[2];
    v47[1] = a1[1];
    v47[2] = v33;
    v47[0] = v32;
    if ((((uint64_t (*)(_OWORD *, _OWORD *))v29)(v48, v47) & 1) == 0)
    {
      long long v12 = sub_100009070(a1, a2, (uint64_t (**)(void, void))a3);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v34 = (__n128 *)sub_1000092A0(a1, a2, (uint64_t (**)(void, void))a3);
    if ((v35 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v36 = sub_1000094B4((__n128 *)a1, v34, a3);
    long long v12 = (long long *)&v34[3];
    if (sub_1000094B4(v34 + 3, (__n128 *)a2, a3))
    {
      a4 = -v14;
      a2 = (long long *)v34;
      if (v36) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v36)
    {
LABEL_16:
      sub_1000088C0(a1, v34, a3, -v14, a5 & 1);
      long long v12 = (long long *)&v34[3];
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (v12 != a2) {
    sub_100009A08((uint64_t)v12, a2, a2, a3);
  }
}

  long long v11 = a2 - 4;
  long long v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = ((char *)a2 - (char *)v12) >> 6;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          long long v38 = *a3;
          long long v39 = *(a2 - 1);
          long long v41 = *(a2 - 4);
          long long v40 = *(a2 - 3);
          v56[2] = *(a2 - 2);
          v56[3] = v39;
          v56[0] = v41;
          v56[1] = v40;
          long long v42 = v12[3];
          long long v44 = *v12;
          long long v43 = v12[1];
          v55[2] = v12[2];
          v55[3] = v42;
          v55[0] = v44;
          v55[1] = v43;
          if (v38(v56, v55))
          {
            long long v45 = *v12;
            long long v46 = v12[1];
            double v47 = v12[3];
            uint64_t v59 = v12[2];
            unint64_t v60 = v47;
            uint64_t v57 = v45;
            unint64_t v58 = v46;
            double v48 = *v11;
            double v49 = *(a2 - 3);
            double v50 = *(a2 - 1);
            v12[2] = *(a2 - 2);
            v12[3] = v50;
            *long long v12 = v48;
            v12[1] = v49;
            long long v51 = v58;
            *long long v11 = v57;
            *(a2 - 3) = v51;
            long long v52 = v60;
            *(a2 - 2) = v59;
            *(a2 - 1) = v52;
          }
          break;
        case 3uLL:
          sub_10000A5B0(v12, v12 + 4, a2 - 4, a3);
          break;
        case 4uLL:
          sub_10000AE4C((__n128 *)v12, (__n128 *)v12 + 4, (__n128 *)v12 + 8, (__n128 *)a2 - 4, a3);
          break;
        case 5uLL:
          sub_10000AF98((uint64_t)v12, (__n128 *)v12 + 4, (__n128 *)v12 + 8, (__n128 *)v12 + 12, (__n128 *)a2 - 4, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 1535)
    {
      if (a5) {
        sub_10000A368((uint64_t)v12, a2, (uint64_t (**)(void, void))a3);
      }
      else {
        sub_10000A4A0((uint64_t)v12, a2, (uint64_t (**)(void, void))a3);
      }
      return;
    }
    if (v14 == 1) {
      break;
    }
    unint64_t v17 = v16 >> 1;
    double v18 = &v12[4 * (v16 >> 1)];
    if ((unint64_t)v15 > 0x2000)
    {
      sub_10000A5B0(v12, &v12[4 * (v16 >> 1)], a2 - 4, a3);
      sub_10000A5B0(v12 + 4, v18 - 4, a2 - 8, a3);
      sub_10000A5B0(v12 + 8, &v12[4 * v17 + 4], a2 - 12, a3);
      sub_10000A5B0(v18 - 4, v18, &v12[4 * v17 + 4], a3);
      uint64_t v19 = *v12;
      double v20 = v12[1];
      double v21 = v12[3];
      uint64_t v59 = v12[2];
      unint64_t v60 = v21;
      uint64_t v57 = v19;
      unint64_t v58 = v20;
      double v22 = *v18;
      long long v23 = v18[1];
      long long v24 = v18[3];
      v12[2] = v18[2];
      v12[3] = v24;
      *long long v12 = v22;
      v12[1] = v23;
      long long v25 = v57;
      long long v26 = v58;
      long long v27 = v60;
      v18[2] = v59;
      v18[3] = v27;
      *double v18 = v25;
      v18[1] = v26;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_10000A5B0(&v12[4 * (v16 >> 1)], v12, a2 - 4, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    long long v28 = *a3;
    long long v29 = *(v12 - 1);
    long long v31 = *(v12 - 4);
    long long v30 = *(v12 - 3);
    v54[2] = *(v12 - 2);
    v54[3] = v29;
    v54[0] = v31;
    v54[1] = v30;
    long long v32 = v12[3];
    unint64_t v34 = *v12;
    long long v33 = v12[1];
    v53[2] = v12[2];
    v53[3] = v32;
    v53[0] = v34;
    v53[1] = v33;
    if ((((uint64_t (*)(_OWORD *, _OWORD *))v28)(v54, v53) & 1) == 0)
    {
      long long v12 = sub_10000A7AC(v12, a2, (uint64_t (**)(void, void))a3);
      goto LABEL_18;
    }
LABEL_13:
    char v35 = sub_10000A9D4(v12, a2, (uint64_t (**)(void, void))a3);
    if ((v36 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v37 = sub_10000ABE4((uint64_t)v12, (__n128 *)v35, a3);
    long long v12 = v35 + 4;
    if (sub_10000ABE4((uint64_t)(v35 + 4), (__n128 *)a2, a3))
    {
      a4 = -v14;
      a2 = v35;
      if (v37) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v37)
    {
LABEL_16:
      sub_10000A014(a1, v35, a3, -v14, a5 & 1);
      long long v12 = v35 + 4;
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (v12 != a2) {
    sub_10000B144((uint64_t)v12, a2, a2, a3);
  }
}

uint64_t sub_100008C38(uint64_t result, long long *a2, uint64_t (**a3)(void, void))
{
  if ((long long *)result != a2)
  {
    uint64_t v31 = v3;
    uint64_t v32 = v4;
    char v6 = (_OWORD *)result;
    double v7 = (long long *)(result + 48);
    if ((long long *)(result + 48) != a2)
    {
      uint64_t v9 = 0;
      long long v10 = (long long *)result;
      do
      {
        long long v11 = v10;
        long long v10 = v7;
        long long v12 = *a3;
        long long v13 = v10[1];
        v30[0] = *v10;
        v30[1] = v13;
        v30[2] = v10[2];
        long long v14 = *v11;
        long long v15 = v11[2];
        v29[1] = v11[1];
        v29[2] = v15;
        v29[0] = v14;
        double result = v12(v30, v29);
        if (result)
        {
          long long v16 = v10[1];
          long long v26 = *v10;
          long long v27 = v16;
          long long v28 = v10[2];
          uint64_t v17 = v9;
          while (1)
          {
            double v18 = (_OWORD *)((char *)v6 + v17);
            long long v19 = *(_OWORD *)((char *)v6 + v17 + 16);
            v18[3] = *(_OWORD *)((char *)v6 + v17);
            v18[4] = v19;
            v18[5] = *(_OWORD *)((char *)v6 + v17 + 32);
            if (!v17) {
              break;
            }
            double v20 = *a3;
            v25[0] = v26;
            v25[1] = v27;
            v25[2] = v28;
            long long v21 = *(v18 - 2);
            v24[0] = *(v18 - 3);
            v24[1] = v21;
            v24[2] = *(v18 - 1);
            double result = v20(v25, v24);
            v17 -= 48;
            if ((result & 1) == 0)
            {
              double v22 = (_OWORD *)((char *)v6 + v17 + 48);
              goto LABEL_10;
            }
          }
          double v22 = v6;
LABEL_10:
          long long v23 = v27;
          *double v22 = v26;
          v22[1] = v23;
          v22[2] = v28;
        }
        double v7 = v10 + 3;
        v9 += 48;
      }
      while (v10 + 3 != a2);
    }
  }
  return result;
}

uint64_t sub_100008D70(uint64_t result, long long *a2, uint64_t (**a3)(void, void))
{
  if ((long long *)result != a2)
  {
    uint64_t v30 = v3;
    uint64_t v31 = v4;
    char v6 = (long long *)result;
    for (uint64_t i = (long long *)(result + 48); v6 + 3 != a2; uint64_t i = v6 + 3)
    {
      uint64_t v9 = v6;
      char v6 = i;
      long long v10 = *a3;
      long long v11 = v6[1];
      v29[0] = *v6;
      v29[1] = v11;
      v29[2] = v6[2];
      long long v12 = *v9;
      long long v13 = v9[2];
      v28[1] = v9[1];
      v28[2] = v13;
      v28[0] = v12;
      double result = v10(v29, v28);
      if (result)
      {
        long long v14 = v6[1];
        long long v25 = *v6;
        long long v26 = v14;
        long long v27 = v6[2];
        long long v15 = v6;
        do
        {
          long long v16 = v15 - 3;
          long long v17 = *(v15 - 2);
          long long v18 = *(v15 - 1);
          long long v19 = *(v15 - 4);
          *long long v15 = *(v15 - 3);
          v15[1] = v17;
          v15[2] = v18;
          double v20 = *a3;
          v24[0] = v25;
          v24[1] = v26;
          v24[2] = v27;
          long long v21 = *(v15 - 6);
          v23[1] = *(v15 - 5);
          v23[2] = v19;
          v23[0] = v21;
          double result = v20(v24, v23);
          long long v15 = v16;
        }
        while ((result & 1) != 0);
        long long v22 = v26;
        *long long v16 = v25;
        v16[1] = v22;
        v16[2] = v27;
      }
    }
  }
  return result;
}

uint64_t sub_100008E7C(_OWORD *a1, _OWORD *a2, _OWORD *a3, unsigned int (**a4)(void, void))
{
  long long v8 = *a4;
  long long v9 = a2[1];
  v60[0] = *a2;
  v60[1] = v9;
  v60[2] = a2[2];
  long long v10 = a1[1];
  v59[0] = *a1;
  v59[1] = v10;
  v59[2] = a1[2];
  char v11 = v8(v60, v59);
  long long v12 = *a4;
  if (v11)
  {
    long long v13 = a3[1];
    v54[0] = *a3;
    v54[1] = v13;
    v54[2] = a3[2];
    long long v14 = a2[1];
    v53[0] = *a2;
    v53[1] = v14;
    v53[2] = a2[2];
    if (v12(v54, v53))
    {
      long long v15 = *a1;
      long long v16 = a1[1];
      long long v17 = a1[2];
      long long v19 = a3[1];
      long long v18 = a3[2];
      *a1 = *a3;
      a1[1] = v19;
      a1[2] = v18;
      a3[2] = v17;
      uint64_t result = 1;
LABEL_9:
      *a3 = v15;
      a3[1] = v16;
      return result;
    }
    long long v38 = *a1;
    long long v39 = a1[1];
    long long v40 = a1[2];
    long long v42 = a2[1];
    long long v41 = a2[2];
    *a1 = *a2;
    a1[1] = v42;
    a1[2] = v41;
    a2[1] = v39;
    a2[2] = v40;
    *a2 = v38;
    long long v43 = *a4;
    long long v44 = *a3;
    long long v45 = a3[2];
    v52[1] = a3[1];
    v52[2] = v45;
    long long v46 = *a2;
    long long v47 = a2[1];
    v51[2] = a2[2];
    v52[0] = v44;
    v51[0] = v46;
    v51[1] = v47;
    if (v43(v52, v51))
    {
      long long v15 = *a2;
      long long v16 = a2[1];
      long long v48 = a2[2];
      long long v50 = a3[1];
      long long v49 = a3[2];
      *a2 = *a3;
      a2[1] = v50;
      a2[2] = v49;
      a3[2] = v48;
      uint64_t result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    long long v21 = a3[1];
    v58[0] = *a3;
    v58[1] = v21;
    v58[2] = a3[2];
    long long v22 = a2[1];
    v57[0] = *a2;
    v57[1] = v22;
    v57[2] = a2[2];
    uint64_t result = ((uint64_t (*)(_OWORD *, _OWORD *))v12)(v58, v57);
    if (!result) {
      return result;
    }
    long long v23 = *a2;
    long long v24 = a2[1];
    long long v25 = a2[2];
    long long v27 = a3[1];
    long long v26 = a3[2];
    *a2 = *a3;
    a2[1] = v27;
    a2[2] = v26;
    a3[1] = v24;
    a3[2] = v25;
    *a3 = v23;
    long long v28 = *a4;
    long long v29 = *a2;
    long long v30 = a2[2];
    v56[1] = a2[1];
    v56[2] = v30;
    long long v31 = *a1;
    long long v32 = a1[1];
    v55[2] = a1[2];
    v56[0] = v29;
    v55[0] = v31;
    v55[1] = v32;
    if (v28(v56, v55))
    {
      long long v33 = *a1;
      long long v34 = a1[1];
      long long v35 = a1[2];
      long long v37 = a2[1];
      long long v36 = a2[2];
      *a1 = *a2;
      a1[1] = v37;
      a1[2] = v36;
      a2[1] = v34;
      a2[2] = v35;
      uint64_t result = 2;
      *a2 = v33;
      return result;
    }
  }
  return 1;
}

long long *sub_100009070(long long *a1, long long *a2, uint64_t (**a3)(void, void))
{
  uint64_t v4 = a2;
  long long v6 = a1[1];
  long long v53 = *a1;
  long long v54 = v6;
  long long v55 = a1[2];
  double v7 = *a3;
  v52[0] = v53;
  v52[1] = v6;
  v52[2] = v55;
  long long v8 = *(a2 - 2);
  v51[0] = *(a2 - 3);
  v51[1] = v8;
  v51[2] = *(a2 - 1);
  if (v7(v52, v51))
  {
    long long v9 = a1;
    do
    {
      long long v10 = v9 + 3;
      char v11 = *a3;
      v50[0] = v53;
      v50[1] = v54;
      v50[2] = v55;
      long long v12 = v9[4];
      v49[0] = v9[3];
      v49[1] = v12;
      v49[2] = v9[5];
      char v13 = v11(v50, v49);
      long long v9 = v10;
    }
    while ((v13 & 1) == 0);
  }
  else
  {
    long long v14 = a1 + 3;
    do
    {
      long long v10 = v14;
      if (v14 >= v4) {
        break;
      }
      long long v15 = *a3;
      v48[0] = v53;
      v48[1] = v54;
      v48[2] = v55;
      long long v16 = v10[1];
      v47[0] = *v10;
      v47[1] = v16;
      v47[2] = v10[2];
      int v17 = v15(v48, v47);
      long long v14 = v10 + 3;
    }
    while (!v17);
  }
  if (v10 >= v4)
  {
    long long v18 = v4;
  }
  else
  {
    do
    {
      long long v18 = v4 - 3;
      long long v19 = *a3;
      v46[0] = v53;
      v46[1] = v54;
      v46[2] = v55;
      long long v20 = *(v4 - 2);
      v45[0] = *(v4 - 3);
      v45[1] = v20;
      v45[2] = *(v4 - 1);
      v4 -= 3;
    }
    while ((v19(v46, v45) & 1) != 0);
  }
  while (v10 < v18)
  {
    long long v21 = *v10;
    long long v22 = v10[2];
    long long v57 = v10[1];
    long long v58 = v22;
    long long v56 = v21;
    long long v23 = *v18;
    long long v24 = v18[2];
    v10[1] = v18[1];
    v10[2] = v24;
    *long long v10 = v23;
    long long v25 = v56;
    long long v26 = v58;
    v18[1] = v57;
    v18[2] = v26;
    *long long v18 = v25;
    do
    {
      v44[0] = v53;
      v44[1] = v54;
      v44[2] = v55;
      long long v28 = v10[3];
      long long v27 = v10[4];
      long long v29 = v10[5];
      v10 += 3;
      long long v30 = (unsigned int (*)(void, void))*a3;
      v43[1] = v27;
      v43[2] = v29;
      v43[0] = v28;
    }
    while (!v30(v44, v43));
    do
    {
      v42[0] = v53;
      v42[1] = v54;
      v42[2] = v55;
      long long v32 = *(v18 - 3);
      long long v31 = *(v18 - 2);
      long long v33 = *(v18 - 1);
      v18 -= 3;
      long long v34 = *a3;
      v41[1] = v31;
      double v41[2] = v33;
      v41[0] = v32;
    }
    while ((v34(v42, v41) & 1) != 0);
  }
  long long v35 = v10 - 3;
  if (v10 - 3 != a1)
  {
    long long v36 = *v35;
    long long v37 = *(v10 - 1);
    a1[1] = *(v10 - 2);
    a1[2] = v37;
    *a1 = v36;
  }
  long long v38 = v53;
  long long v39 = v55;
  *(v10 - 2) = v54;
  *(v10 - 1) = v39;
  *long long v35 = v38;
  return v10;
}

long long *sub_1000092A0(long long *a1, long long *a2, uint64_t (**a3)(void, void))
{
  uint64_t v6 = 0;
  long long v7 = a1[1];
  long long v47 = *a1;
  long long v48 = v7;
  long long v49 = a1[2];
  do
  {
    long long v8 = *a3;
    long long v9 = a1[v6 + 4];
    v46[0] = a1[v6 + 3];
    v46[1] = v9;
    v46[2] = a1[v6 + 5];
    v45[0] = v47;
    v45[1] = v48;
    v45[2] = v49;
    v6 += 3;
  }
  while ((v8(v46, v45) & 1) != 0);
  long long v10 = &a1[v6];
  char v11 = &a1[v6 - 3];
  if (v6 == 3)
  {
    while (v10 < a2)
    {
      long long v15 = *a3;
      long long v12 = a2 - 3;
      long long v16 = *(a2 - 2);
      v44[0] = *(a2 - 3);
      v44[1] = v16;
      v44[2] = *(a2 - 1);
      v43[0] = v47;
      v43[1] = v48;
      v43[2] = v49;
      a2 -= 3;
      if (v15(v44, v43)) {
        goto LABEL_9;
      }
    }
    long long v12 = a2;
  }
  else
  {
    do
    {
      long long v12 = a2 - 3;
      char v13 = (unsigned int (*)(void, void))*a3;
      long long v14 = *(a2 - 2);
      v42[0] = *(a2 - 3);
      v42[1] = v14;
      v42[2] = *(a2 - 1);
      v41[0] = v47;
      v41[1] = v48;
      double v41[2] = v49;
      a2 -= 3;
    }
    while (!v13(v42, v41));
  }
LABEL_9:
  if (v10 < v12)
  {
    int v17 = v10;
    long long v18 = v12;
    do
    {
      long long v20 = v17[1];
      long long v50 = *v17;
      long long v19 = v50;
      long long v51 = v20;
      long long v52 = v17[2];
      long long v21 = v52;
      long long v22 = *v18;
      long long v23 = v18[2];
      v17[1] = v18[1];
      v17[2] = v23;
      *int v17 = v22;
      v18[1] = v20;
      v18[2] = v21;
      *long long v18 = v19;
      do
      {
        long long v25 = v17[4];
        long long v24 = v17[5];
        long long v26 = v17[3];
        v17 += 3;
        long long v27 = *a3;
        v40[0] = v26;
        v40[1] = v25;
        v40[2] = v24;
        v39[1] = v48;
        v39[2] = v49;
        v39[0] = v47;
      }
      while ((v27(v40, v39) & 1) != 0);
      do
      {
        long long v29 = *(v18 - 2);
        long long v28 = *(v18 - 1);
        long long v30 = *(v18 - 3);
        v18 -= 3;
        long long v31 = (unsigned int (*)(void, void))*a3;
        v38[0] = v30;
        v38[1] = v29;
        v38[2] = v28;
        v37[1] = v48;
        v37[2] = v49;
        v37[0] = v47;
      }
      while (!v31(v38, v37));
    }
    while (v17 < v18);
    char v11 = v17 - 3;
  }
  if (v11 != a1)
  {
    long long v32 = *v11;
    long long v33 = v11[2];
    a1[1] = v11[1];
    a1[2] = v33;
    *a1 = v32;
  }
  long long v34 = v47;
  long long v35 = v49;
  v11[1] = v48;
  v11[2] = v35;
  *char v11 = v34;
  return v11;
}

BOOL sub_1000094B4(__n128 *a1, __n128 *a2, unsigned int (**a3)(void, void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v8 = *a3;
      __n128 v9 = a2[-2];
      v41[0] = a2[-3];
      v41[1] = v9;
      double v41[2] = a2[-1];
      __n128 v10 = a1[1];
      v40[0] = *a1;
      v40[1] = v10;
      v40[2] = a1[2];
      if (v8(v41, v40))
      {
        char v11 = a2 - 3;
        __n128 v12 = *a1;
        __n128 v13 = a1[1];
        __n128 v14 = a1[2];
        __n128 v16 = a2[-2];
        __n128 v15 = a2[-1];
        *a1 = a2[-3];
        a1[1] = v16;
        a1[2] = v15;
        v11[1] = v13;
        v11[2] = v14;
        *char v11 = v12;
      }
      return 1;
    case 3uLL:
      sub_100008E7C(a1, (__n128 *)a1[3].n128_u64, (__n128 *)a2[-3].n128_u64, a3);
      return 1;
    case 4uLL:
      sub_100009724(a1, a1 + 3, a1 + 6, a2 - 3, a3);
      return 1;
    case 5uLL:
      sub_100009868(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3, a3);
      return 1;
    default:
      int v17 = a1 + 6;
      sub_100008E7C(a1, (__n128 *)a1[3].n128_u64, (__n128 *)a1[6].n128_u64, a3);
      long long v18 = a1 + 9;
      if (&a1[9] == a2) {
        return 1;
      }
      uint64_t v19 = 0;
      int v20 = 0;
      break;
  }
  while (1)
  {
    long long v21 = *a3;
    __n128 v22 = v18[1];
    v39[0] = *v18;
    v39[1] = v22;
    v39[2] = v18[2];
    __n128 v23 = *v17;
    __n128 v24 = v17[2];
    v38[1] = v17[1];
    v38[2] = v24;
    v38[0] = v23;
    if (v21(v39, v38))
    {
      __n128 v25 = v18[1];
      __n128 v35 = *v18;
      __n128 v36 = v25;
      __n128 v37 = v18[2];
      uint64_t v26 = v19;
      while (1)
      {
        long long v27 = (_OWORD *)((char *)a1->n128_u64 + v26);
        long long v28 = *(long long *)((char *)&a1[7] + v26);
        v27[9] = *(__n128 *)((char *)&a1[6] + v26);
        v27[10] = v28;
        v27[11] = *(__n128 *)((char *)&a1[8] + v26);
        if (v26 == -96) {
          break;
        }
        long long v29 = *a3;
        v34[0] = v35;
        v34[1] = v36;
        v34[2] = v37;
        long long v30 = v27[4];
        v33[0] = v27[3];
        v33[1] = v30;
        v33[2] = v27[5];
        v26 -= 48;
        if ((((uint64_t (*)(_OWORD *, _OWORD *))v29)(v34, v33) & 1) == 0)
        {
          long long v31 = (__n128 *)((char *)a1 + v26 + 144);
          goto LABEL_12;
        }
      }
      long long v31 = a1;
LABEL_12:
      __n128 v32 = v36;
      *long long v31 = v35;
      v31[1] = v32;
      v31[2] = v37;
      if (++v20 == 8) {
        return &v18[3] == a2;
      }
    }
    int v17 = v18;
    v19 += 48;
    v18 += 3;
    if (v18 == a2) {
      return 1;
    }
  }
}

__n128 sub_100009724(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, unsigned int (**a5)(void, void))
{
  sub_100008E7C(a1, a2, a3, a5);
  __n128 v10 = *a5;
  __n128 v11 = a4[1];
  v43[0] = *a4;
  v43[1] = v11;
  v43[2] = a4[2];
  __n128 v12 = a3[1];
  v42[0] = *a3;
  v42[1] = v12;
  v42[2] = a3[2];
  if (v10(v43, v42))
  {
    __n128 v14 = *a3;
    __n128 v15 = a3[1];
    __n128 v16 = a3[2];
    __n128 v18 = a4[1];
    __n128 v17 = a4[2];
    *a3 = *a4;
    a3[1] = v18;
    a3[2] = v17;
    a4[1] = v15;
    a4[2] = v16;
    *a4 = v14;
    uint64_t v19 = *a5;
    __n128 v20 = *a3;
    __n128 v21 = a3[2];
    v41[1] = a3[1];
    double v41[2] = v21;
    __n128 v22 = *a2;
    __n128 v23 = a2[1];
    v40[2] = a2[2];
    v41[0] = v20;
    v40[0] = v22;
    v40[1] = v23;
    if (v19(v41, v40))
    {
      __n128 v24 = *a2;
      __n128 v25 = a2[1];
      __n128 v26 = a2[2];
      __n128 v28 = a3[1];
      __n128 v27 = a3[2];
      *a2 = *a3;
      a2[1] = v28;
      a2[2] = v27;
      a3[1] = v25;
      a3[2] = v26;
      *a3 = v24;
      long long v29 = *a5;
      __n128 v30 = *a2;
      __n128 v31 = a2[2];
      v39[1] = a2[1];
      v39[2] = v31;
      __n128 v32 = *a1;
      __n128 v33 = a1[1];
      v38[2] = a1[2];
      v39[0] = v30;
      v38[0] = v32;
      v38[1] = v33;
      if (v29(v39, v38))
      {
        __n128 result = *a1;
        __n128 v34 = a1[1];
        __n128 v35 = a1[2];
        __n128 v37 = a2[1];
        __n128 v36 = a2[2];
        *a1 = *a2;
        a1[1] = v37;
        a1[2] = v36;
        a2[1] = v34;
        a2[2] = v35;
        *a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_100009868(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, unsigned int (**a6)(void, void))
{
  sub_100009724((__n128 *)a1, a2, a3, a4, a6);
  __n128 v12 = *a6;
  __n128 v13 = a5[1];
  v57[0] = *a5;
  v57[1] = v13;
  v57[2] = a5[2];
  __n128 v14 = a4[1];
  v56[0] = *a4;
  v56[1] = v14;
  v56[2] = a4[2];
  if (v12(v57, v56))
  {
    __n128 v16 = *a4;
    __n128 v17 = a4[1];
    __n128 v18 = a4[2];
    __n128 v20 = a5[1];
    __n128 v19 = a5[2];
    *a4 = *a5;
    a4[1] = v20;
    a4[2] = v19;
    a5[1] = v17;
    a5[2] = v18;
    *a5 = v16;
    __n128 v21 = *a6;
    __n128 v22 = *a4;
    __n128 v23 = a4[2];
    v55[1] = a4[1];
    v55[2] = v23;
    __n128 v24 = *a3;
    __n128 v25 = a3[1];
    v54[2] = a3[2];
    v55[0] = v22;
    v54[0] = v24;
    v54[1] = v25;
    if (v21(v55, v54))
    {
      __n128 v26 = *a3;
      __n128 v27 = a3[1];
      __n128 v28 = a3[2];
      __n128 v30 = a4[1];
      __n128 v29 = a4[2];
      *a3 = *a4;
      a3[1] = v30;
      a3[2] = v29;
      a4[1] = v27;
      a4[2] = v28;
      *a4 = v26;
      __n128 v31 = *a6;
      __n128 v32 = *a3;
      __n128 v33 = a3[2];
      v53[1] = a3[1];
      v53[2] = v33;
      __n128 v34 = *a2;
      __n128 v35 = a2[1];
      v52[2] = a2[2];
      v53[0] = v32;
      v52[0] = v34;
      v52[1] = v35;
      if (v31(v53, v52))
      {
        __n128 v36 = *a2;
        __n128 v37 = a2[1];
        __n128 v38 = a2[2];
        __n128 v40 = a3[1];
        __n128 v39 = a3[2];
        *a2 = *a3;
        a2[1] = v40;
        a2[2] = v39;
        a3[1] = v37;
        a3[2] = v38;
        *a3 = v36;
        long long v41 = *a6;
        __n128 v42 = *a2;
        __n128 v43 = a2[2];
        v51[1] = a2[1];
        v51[2] = v43;
        __n128 v44 = *(__n128 *)a1;
        long long v45 = *(_OWORD *)(a1 + 16);
        v50[2] = *(_OWORD *)(a1 + 32);
        v51[0] = v42;
        v50[0] = v44;
        v50[1] = v45;
        if (v41(v51, v50))
        {
          __n128 result = *(__n128 *)a1;
          __n128 v46 = *(__n128 *)(a1 + 16);
          __n128 v47 = *(__n128 *)(a1 + 32);
          __n128 v49 = a2[1];
          __n128 v48 = a2[2];
          *(__n128 *)a1 = *a2;
          *(__n128 *)(a1 + 16) = v49;
          *(__n128 *)(a1 + 32) = v48;
          a2[1] = v46;
          a2[2] = v47;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

_OWORD *sub_100009A08(uint64_t a1, _OWORD *a2, _OWORD *a3, unsigned int (**a4)(void, void))
{
  if ((_OWORD *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 48;
    if ((uint64_t)a2 - a1 >= 49)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      __n128 v12 = (__n128 *)(a1 + 48 * v10);
      do
      {
        sub_100009BF4(a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    __n128 v13 = a2;
    if (a2 != a3)
    {
      __n128 v14 = a2;
      do
      {
        __n128 v15 = (unsigned int (*)(_OWORD *, _OWORD *))*a4;
        long long v16 = v14[1];
        v34[0] = *v14;
        v34[1] = v16;
        v34[2] = v14[2];
        long long v17 = *(_OWORD *)(a1 + 16);
        v33[0] = *(_OWORD *)a1;
        v33[1] = v17;
        v33[2] = *(_OWORD *)(a1 + 32);
        if (v15(v34, v33))
        {
          long long v18 = *v14;
          long long v19 = v14[1];
          long long v20 = v14[2];
          long long v22 = *(_OWORD *)(a1 + 16);
          long long v21 = *(_OWORD *)(a1 + 32);
          *__n128 v14 = *(_OWORD *)a1;
          v14[1] = v22;
          v14[2] = v21;
          *(_OWORD *)(a1 + 16) = v19;
          *(_OWORD *)(a1 + 32) = v20;
          *(_OWORD *)a1 = v18;
          sub_100009BF4(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      __n128 v13 = a3;
    }
    if (v8 >= 49)
    {
      int64_t v23 = v8 / 0x30uLL;
      __n128 v24 = (__n128 *)(a2 - 3);
      do
      {
        __n128 v25 = *(__n128 *)(a1 + 16);
        __n128 v35 = *(__n128 *)a1;
        __n128 v36 = v25;
        __n128 v37 = *(__n128 *)(a1 + 32);
        __n128 v26 = (__n128 *)sub_100009DD8((_OWORD *)a1, (unsigned int (**)(_OWORD *, _OWORD *))a4, v23);
        if (v24 == v26)
        {
          __n128 v30 = v36;
          __n128 *v26 = v35;
          v26[1] = v30;
          v26[2] = v37;
        }
        else
        {
          __n128 v27 = *v24;
          __n128 v28 = v24[2];
          v26[1] = v24[1];
          v26[2] = v28;
          __n128 *v26 = v27;
          __n128 v29 = v36;
          *__n128 v24 = v35;
          v24[1] = v29;
          v24[2] = v37;
          sub_100009EC4(a1, (uint64_t)&v26[3], a4, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)&v26[3] - a1) >> 4));
        }
        v24 -= 3;
      }
      while (v23-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 sub_100009BF4(uint64_t a1, unsigned int (**a2)(void, void), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v48 = v4;
    uint64_t v49 = v5;
    long long v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 4)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 4)) | 1;
      __n128 v13 = (__n128 *)(a1 + 48 * v12);
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 4) + 2;
      if (v14 < a3)
      {
        __n128 v15 = *a2;
        __n128 v16 = v13[1];
        v47[0] = *v13;
        v47[1] = v16;
        __n128 v17 = v13[3];
        v47[2] = v13[2];
        __n128 v18 = v13[4];
        __n128 v19 = v13[5];
        v46[0] = v17;
        v46[1] = v18;
        v46[2] = v19;
        if (v15(v47, v46))
        {
          v13 += 3;
          uint64_t v12 = v14;
        }
      }
      long long v20 = *a2;
      __n128 v21 = v13[1];
      v45[0] = *v13;
      v45[1] = v21;
      v45[2] = v13[2];
      __n128 v22 = v7[1];
      v44[0] = *v7;
      v44[1] = v22;
      v44[2] = v7[2];
      if ((((uint64_t (*)(_OWORD *, _OWORD *))v20)(v45, v44) & 1) == 0)
      {
        __n128 v24 = v7[1];
        __n128 v41 = *v7;
        __n128 v42 = v24;
        __n128 v43 = v7[2];
        do
        {
          __n128 v25 = v13;
          __n128 v26 = *v13;
          __n128 v27 = v13[2];
          v7[1] = v13[1];
          v7[2] = v27;
          *long long v7 = v26;
          if (v9 < v12) {
            break;
          }
          uint64_t v28 = (2 * v12) | 1;
          __n128 v13 = (__n128 *)(a1 + 48 * v28);
          if (2 * v12 + 2 < a3)
          {
            __n128 v29 = *a2;
            __n128 v30 = v13[1];
            v40[0] = *v13;
            v40[1] = v30;
            __n128 v31 = v13[3];
            v40[2] = v13[2];
            __n128 v32 = v13[4];
            __n128 v33 = v13[5];
            v39[0] = v31;
            v39[1] = v32;
            v39[2] = v33;
            if (v29(v40, v39))
            {
              v13 += 3;
              uint64_t v28 = 2 * v12 + 2;
            }
          }
          __n128 v34 = *a2;
          __n128 v35 = v13[1];
          v38[0] = *v13;
          v38[1] = v35;
          v38[2] = v13[2];
          v37[0] = v41;
          v37[1] = v42;
          v37[2] = v43;
          long long v7 = v25;
          uint64_t v12 = v28;
        }
        while (!v34(v38, v37));
        __n128 result = v41;
        __n128 v36 = v43;
        v25[1] = v42;
        v25[2] = v36;
        *__n128 v25 = result;
      }
    }
  }
  return result;
}

_OWORD *sub_100009DD8(_OWORD *a1, unsigned int (**a2)(_OWORD *, _OWORD *), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[3 * v6 + 3];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      uint64_t v12 = *a2;
      long long v14 = v9[1];
      long long v13 = v9[2];
      v21[0] = *v9;
      v21[1] = v14;
      v21[2] = v13;
      long long v15 = v9[3];
      long long v16 = v9[5];
      v20[1] = v9[4];
      v20[2] = v16;
      v20[0] = v15;
      if (v12(v21, v20))
      {
        v9 += 3;
        uint64_t v10 = v11;
      }
    }
    long long v17 = *v9;
    long long v18 = v9[2];
    a1[1] = v9[1];
    a1[2] = v18;
    *a1 = v17;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double sub_100009EC4(uint64_t a1, uint64_t a2, unsigned int (**a3)(void, void), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v31 = v4;
    uint64_t v32 = v5;
    unint64_t v9 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v10 = *a3;
    uint64_t v11 = (_OWORD *)(a1 + 48 * v9);
    long long v12 = v11[1];
    v30[0] = *v11;
    v30[1] = v12;
    v30[2] = v11[2];
    long long v13 = *(_OWORD *)(a2 - 32);
    v29[0] = *(_OWORD *)(a2 - 48);
    v29[1] = v13;
    v29[2] = *(_OWORD *)(a2 - 16);
    if (v10(v30, v29))
    {
      long long v15 = (_OWORD *)(a2 - 48);
      long long v16 = *(_OWORD *)(a2 - 32);
      long long v26 = *(_OWORD *)(a2 - 48);
      long long v27 = v16;
      long long v28 = *(_OWORD *)(a2 - 16);
      do
      {
        long long v17 = v11;
        long long v18 = *v11;
        long long v19 = v11[2];
        v15[1] = v11[1];
        v15[2] = v19;
        *long long v15 = v18;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        long long v20 = *a3;
        uint64_t v11 = (_OWORD *)(a1 + 48 * v9);
        long long v21 = v11[1];
        v25[0] = *v11;
        v25[1] = v21;
        v25[2] = v11[2];
        v24[0] = v26;
        v24[1] = v27;
        v24[2] = v28;
        char v22 = v20(v25, v24);
        long long v15 = v17;
      }
      while ((v22 & 1) != 0);
      long long v23 = v27;
      *long long v17 = v26;
      v17[1] = v23;
      double result = *(double *)&v28;
      v17[2] = v28;
    }
  }
  return result;
}

void *sub_100009FDC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_10000888C();
  }
  return operator new(a2 << 6);
}

void sub_10000A014(long long *a1, long long *a2, unsigned int (**a3)(void, void), uint64_t a4, char a5)
{
uint64_t sub_10000A368(uint64_t result, long long *a2, uint64_t (**a3)(void, void))
{
  if ((long long *)result != a2)
  {
    uint64_t v38 = v3;
    uint64_t v39 = v4;
    char v6 = (_OWORD *)result;
    uint64_t v7 = (long long *)(result + 64);
    if ((long long *)(result + 64) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (long long *)result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        long long v12 = *a3;
        long long v13 = v10[1];
        v37[0] = *v10;
        v37[1] = v13;
        long long v14 = v10[3];
        v37[2] = v10[2];
        _OWORD v37[3] = v14;
        long long v15 = v11[3];
        long long v17 = *v11;
        long long v16 = v11[1];
        v36[2] = v11[2];
        v36[3] = v15;
        v36[0] = v17;
        v36[1] = v16;
        double result = v12(v37, v36);
        if (result)
        {
          long long v18 = v10[1];
          long long v32 = *v10;
          long long v33 = v18;
          long long v19 = v10[3];
          long long v34 = v10[2];
          long long v35 = v19;
          uint64_t v20 = v9;
          while (1)
          {
            long long v21 = (_OWORD *)((char *)v6 + v20);
            long long v22 = *(_OWORD *)((char *)v6 + v20 + 16);
            v21[4] = *(_OWORD *)((char *)v6 + v20);
            v21[5] = v22;
            long long v23 = *(_OWORD *)((char *)v6 + v20 + 48);
            v21[6] = *(_OWORD *)((char *)v6 + v20 + 32);
            v21[7] = v23;
            if (!v20) {
              break;
            }
            long long v24 = *a3;
            v31[0] = v32;
            v31[1] = v33;
            v31[2] = v34;
            v31[3] = v35;
            long long v25 = *(v21 - 3);
            v30[0] = *(v21 - 4);
            v30[1] = v25;
            long long v26 = *(v21 - 1);
            v30[2] = *(v21 - 2);
            _OWORD v30[3] = v26;
            double result = v24(v31, v30);
            v20 -= 64;
            if ((result & 1) == 0)
            {
              long long v27 = (_OWORD *)((char *)v6 + v20 + 64);
              goto LABEL_10;
            }
          }
          long long v27 = v6;
LABEL_10:
          long long v28 = v33;
          *long long v27 = v32;
          v27[1] = v28;
          long long v29 = v35;
          v27[2] = v34;
          v27[3] = v29;
        }
        uint64_t v7 = v10 + 4;
        v9 += 64;
      }
      while (v10 + 4 != a2);
    }
  }
  return result;
}

uint64_t sub_10000A4A0(uint64_t result, long long *a2, uint64_t (**a3)(void, void))
{
  if ((long long *)result != a2)
  {
    uint64_t v36 = v3;
    uint64_t v37 = v4;
    char v6 = (long long *)result;
    for (uint64_t i = (long long *)(result + 64); v6 + 4 != a2; uint64_t i = v6 + 4)
    {
      uint64_t v9 = v6;
      char v6 = i;
      uint64_t v10 = *a3;
      long long v11 = v6[1];
      v35[0] = *v6;
      v35[1] = v11;
      long long v12 = v6[3];
      v35[2] = v6[2];
      v35[3] = v12;
      long long v13 = v9[3];
      long long v15 = *v9;
      long long v14 = v9[1];
      v34[2] = v9[2];
      _OWORD v34[3] = v13;
      v34[0] = v15;
      v34[1] = v14;
      double result = v10(v35, v34);
      if (result)
      {
        long long v16 = v6[1];
        long long v30 = *v6;
        long long v31 = v16;
        long long v17 = v6[3];
        long long v32 = v6[2];
        long long v33 = v17;
        long long v18 = v6;
        do
        {
          long long v19 = v18 - 4;
          long long v20 = *(v18 - 3);
          *long long v18 = *(v18 - 4);
          v18[1] = v20;
          long long v21 = *(v18 - 1);
          v18[2] = *(v18 - 2);
          v18[3] = v21;
          long long v22 = *a3;
          v29[0] = v30;
          v29[1] = v31;
          v29[2] = v32;
          _OWORD v29[3] = v33;
          long long v23 = *(v18 - 8);
          long long v24 = *(v18 - 7);
          long long v25 = *(v18 - 5);
          v28[2] = *(v18 - 6);
          _OWORD v28[3] = v25;
          v28[0] = v23;
          v28[1] = v24;
          double result = v22(v29, v28);
          long long v18 = v19;
        }
        while ((result & 1) != 0);
        long long v26 = v31;
        *long long v19 = v30;
        v19[1] = v26;
        long long v27 = v33;
        v19[2] = v32;
        v19[3] = v27;
      }
    }
  }
  return result;
}

uint64_t sub_10000A5B0(_OWORD *a1, _OWORD *a2, _OWORD *a3, unsigned int (**a4)(void, void))
{
  uint64_t v8 = *a4;
  long long v9 = a2[1];
  v80[0] = *a2;
  v80[1] = v9;
  long long v10 = a2[3];
  v80[2] = a2[2];
  v80[3] = v10;
  long long v11 = a1[1];
  v79[0] = *a1;
  v79[1] = v11;
  long long v12 = a1[3];
  v79[2] = a1[2];
  v79[3] = v12;
  char v13 = v8(v80, v79);
  long long v14 = *a4;
  if (v13)
  {
    long long v15 = a3[1];
    v74[0] = *a3;
    v74[1] = v15;
    long long v16 = a3[3];
    v74[2] = a3[2];
    v74[3] = v16;
    long long v17 = a2[1];
    v73[0] = *a2;
    v73[1] = v17;
    long long v18 = a2[3];
    v73[2] = a2[2];
    v73[3] = v18;
    if (v14(v74, v73))
    {
      long long v20 = a1[2];
      long long v19 = a1[3];
      long long v22 = *a1;
      long long v21 = a1[1];
      long long v23 = a3[3];
      long long v25 = *a3;
      long long v24 = a3[1];
      a1[2] = a3[2];
      a1[3] = v23;
      *a1 = v25;
      a1[1] = v24;
      *a3 = v22;
      a3[1] = v21;
      uint64_t result = 1;
LABEL_9:
      a3[2] = v20;
      a3[3] = v19;
      return result;
    }
    long long v53 = a1[2];
    long long v52 = a1[3];
    long long v55 = *a1;
    long long v54 = a1[1];
    long long v56 = a2[3];
    long long v58 = *a2;
    long long v57 = a2[1];
    a1[2] = a2[2];
    a1[3] = v56;
    *a1 = v58;
    a1[1] = v57;
    *a2 = v55;
    a2[1] = v54;
    a2[2] = v53;
    a2[3] = v52;
    long long v59 = *a4;
    long long v60 = *a3;
    long long v61 = a3[1];
    long long v62 = a3[3];
    v72[2] = a3[2];
    v72[3] = v62;
    v72[0] = v60;
    v72[1] = v61;
    long long v63 = *a2;
    long long v64 = a2[1];
    long long v65 = a2[3];
    v71[2] = a2[2];
    v71[3] = v65;
    v71[0] = v63;
    v71[1] = v64;
    if (v59(v72, v71))
    {
      long long v20 = a2[2];
      long long v19 = a2[3];
      long long v67 = *a2;
      long long v66 = a2[1];
      long long v68 = a3[3];
      long long v70 = *a3;
      long long v69 = a3[1];
      a2[2] = a3[2];
      a2[3] = v68;
      *a2 = v70;
      a2[1] = v69;
      *a3 = v67;
      a3[1] = v66;
      uint64_t result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    long long v27 = a3[1];
    v78[0] = *a3;
    v78[1] = v27;
    long long v28 = a3[3];
    v78[2] = a3[2];
    v78[3] = v28;
    long long v29 = a2[1];
    v77[0] = *a2;
    v77[1] = v29;
    long long v30 = a2[3];
    v77[2] = a2[2];
    v77[3] = v30;
    uint64_t result = ((uint64_t (*)(_OWORD *, _OWORD *))v14)(v78, v77);
    if (!result) {
      return result;
    }
    long long v32 = a2[2];
    long long v31 = a2[3];
    long long v34 = *a2;
    long long v33 = a2[1];
    long long v35 = a3[3];
    long long v37 = *a3;
    long long v36 = a3[1];
    a2[2] = a3[2];
    a2[3] = v35;
    *a2 = v37;
    a2[1] = v36;
    *a3 = v34;
    a3[1] = v33;
    a3[2] = v32;
    a3[3] = v31;
    uint64_t v38 = *a4;
    long long v39 = *a2;
    long long v40 = a2[1];
    long long v41 = a2[3];
    v76[2] = a2[2];
    v76[3] = v41;
    v76[0] = v39;
    v76[1] = v40;
    long long v42 = *a1;
    long long v43 = a1[1];
    long long v44 = a1[3];
    v75[2] = a1[2];
    v75[3] = v44;
    v75[0] = v42;
    v75[1] = v43;
    if (v38(v76, v75))
    {
      long long v46 = a1[2];
      long long v45 = a1[3];
      long long v48 = *a1;
      long long v47 = a1[1];
      long long v49 = a2[3];
      long long v51 = *a2;
      long long v50 = a2[1];
      a1[2] = a2[2];
      a1[3] = v49;
      *a1 = v51;
      a1[1] = v50;
      *a2 = v48;
      a2[1] = v47;
      uint64_t result = 2;
      a2[2] = v46;
      a2[3] = v45;
      return result;
    }
  }
  return 1;
}

long long *sub_10000A7AC(long long *a1, long long *a2, uint64_t (**a3)(void, void))
{
  uint64_t v4 = a2;
  long long v6 = a1[1];
  long long v66 = *a1;
  long long v67 = v6;
  long long v7 = a1[3];
  long long v68 = a1[2];
  long long v69 = v7;
  uint64_t v8 = *a3;
  v65[0] = v66;
  v65[1] = v6;
  v65[2] = v68;
  v65[3] = v7;
  long long v9 = *(a2 - 4);
  long long v10 = *(a2 - 3);
  long long v11 = *(a2 - 1);
  v64[2] = *(a2 - 2);
  v64[3] = v11;
  v64[0] = v9;
  v64[1] = v10;
  if (v8(v65, v64))
  {
    long long v12 = a1;
    do
    {
      char v13 = v12 + 4;
      long long v14 = *a3;
      v63[0] = v66;
      v63[1] = v67;
      v63[2] = v68;
      v63[3] = v69;
      long long v15 = v12[5];
      v62[0] = v12[4];
      v62[1] = v15;
      long long v16 = v12[7];
      v62[2] = v12[6];
      v62[3] = v16;
      char v17 = v14(v63, v62);
      long long v12 = v13;
    }
    while ((v17 & 1) == 0);
  }
  else
  {
    long long v18 = a1 + 4;
    do
    {
      char v13 = v18;
      if (v18 >= v4) {
        break;
      }
      long long v19 = *a3;
      v61[0] = v66;
      v61[1] = v67;
      v61[2] = v68;
      v61[3] = v69;
      long long v20 = v13[1];
      v60[0] = *v13;
      v60[1] = v20;
      long long v21 = v13[3];
      v60[2] = v13[2];
      v60[3] = v21;
      int v22 = v19(v61, v60);
      long long v18 = v13 + 4;
    }
    while (!v22);
  }
  if (v13 >= v4)
  {
    long long v23 = v4;
  }
  else
  {
    do
    {
      long long v23 = v4 - 4;
      long long v24 = *a3;
      v59[0] = v66;
      v59[1] = v67;
      v59[2] = v68;
      _OWORD v59[3] = v69;
      long long v25 = *(v4 - 3);
      v58[0] = *(v4 - 4);
      v58[1] = v25;
      long long v26 = *(v4 - 1);
      v58[2] = *(v4 - 2);
      _OWORD v58[3] = v26;
      v4 -= 4;
    }
    while ((v24(v59, v58) & 1) != 0);
  }
  while (v13 < v23)
  {
    long long v27 = *v13;
    long long v28 = v13[1];
    long long v29 = v13[3];
    long long v72 = v13[2];
    long long v73 = v29;
    long long v70 = v27;
    long long v71 = v28;
    long long v30 = *v23;
    long long v31 = v23[1];
    long long v32 = v23[3];
    v13[2] = v23[2];
    v13[3] = v32;
    *char v13 = v30;
    v13[1] = v31;
    long long v33 = v70;
    long long v34 = v71;
    long long v35 = v73;
    v23[2] = v72;
    _OWORD v23[3] = v35;
    *long long v23 = v33;
    v23[1] = v34;
    do
    {
      v57[0] = v66;
      v57[1] = v67;
      v57[2] = v68;
      _OWORD v57[3] = v69;
      long long v36 = v13[6];
      long long v37 = v13[7];
      long long v39 = v13[4];
      long long v38 = v13[5];
      v13 += 4;
      long long v40 = (unsigned int (*)(void, void))*a3;
      v56[2] = v36;
      _OWORD v56[3] = v37;
      v56[0] = v39;
      v56[1] = v38;
    }
    while (!v40(v57, v56));
    do
    {
      v55[0] = v66;
      v55[1] = v67;
      v55[2] = v68;
      _OWORD v55[3] = v69;
      long long v41 = *(v23 - 2);
      long long v42 = *(v23 - 1);
      long long v44 = *(v23 - 4);
      long long v43 = *(v23 - 3);
      v23 -= 4;
      long long v45 = *a3;
      v54[2] = v41;
      _OWORD v54[3] = v42;
      v54[0] = v44;
      v54[1] = v43;
    }
    while ((v45(v55, v54) & 1) != 0);
  }
  long long v46 = v13 - 4;
  if (v13 - 4 != a1)
  {
    long long v47 = *v46;
    long long v48 = *(v13 - 3);
    long long v49 = *(v13 - 1);
    a1[2] = *(v13 - 2);
    a1[3] = v49;
    *a1 = v47;
    a1[1] = v48;
  }
  long long v50 = v66;
  long long v51 = v67;
  long long v52 = v69;
  *(v13 - 2) = v68;
  *(v13 - 1) = v52;
  *long long v46 = v50;
  *(v13 - 3) = v51;
  return v13;
}

long long *sub_10000A9D4(long long *a1, long long *a2, uint64_t (**a3)(void, void))
{
  uint64_t v6 = 0;
  long long v7 = a1[1];
  long long v57 = *a1;
  long long v58 = v7;
  long long v8 = a1[3];
  long long v59 = a1[2];
  long long v60 = v8;
  do
  {
    long long v9 = *a3;
    long long v10 = a1[v6 + 5];
    v56[0] = a1[v6 + 4];
    v56[1] = v10;
    long long v11 = a1[v6 + 7];
    v56[2] = a1[v6 + 6];
    _OWORD v56[3] = v11;
    v55[0] = v57;
    v55[1] = v58;
    v55[2] = v59;
    _OWORD v55[3] = v60;
    v6 += 4;
  }
  while ((v9(v56, v55) & 1) != 0);
  long long v12 = &a1[v6];
  char v13 = &a1[v6 - 4];
  if (v6 == 4)
  {
    while (v12 < a2)
    {
      long long v18 = *a3;
      long long v14 = a2 - 4;
      long long v19 = *(a2 - 3);
      v54[0] = *(a2 - 4);
      v54[1] = v19;
      long long v20 = *(a2 - 1);
      v54[2] = *(a2 - 2);
      _OWORD v54[3] = v20;
      v53[0] = v57;
      v53[1] = v58;
      v53[2] = v59;
      _OWORD v53[3] = v60;
      a2 -= 4;
      if (v18(v54, v53)) {
        goto LABEL_9;
      }
    }
    long long v14 = a2;
  }
  else
  {
    do
    {
      long long v14 = a2 - 4;
      long long v15 = (unsigned int (*)(void, void))*a3;
      long long v16 = *(a2 - 3);
      v52[0] = *(a2 - 4);
      v52[1] = v16;
      long long v17 = *(a2 - 1);
      v52[2] = *(a2 - 2);
      _OWORD v52[3] = v17;
      v51[0] = v57;
      v51[1] = v58;
      v51[2] = v59;
      _OWORD v51[3] = v60;
      a2 -= 4;
    }
    while (!v15(v52, v51));
  }
LABEL_9:
  if (v12 < v14)
  {
    long long v21 = v12;
    int v22 = v14;
    do
    {
      long long v24 = v21[1];
      long long v61 = *v21;
      long long v23 = v61;
      long long v62 = v24;
      long long v26 = v21[3];
      long long v63 = v21[2];
      long long v25 = v63;
      long long v64 = v26;
      long long v28 = v22[2];
      long long v27 = v22[3];
      long long v29 = v22[1];
      long long *v21 = *v22;
      v21[1] = v29;
      v21[2] = v28;
      _OWORD v21[3] = v27;
      v22[2] = v25;
      v22[3] = v26;
      *int v22 = v23;
      v22[1] = v24;
      do
      {
        long long v30 = v21[6];
        long long v31 = v21[7];
        long long v33 = v21[4];
        long long v32 = v21[5];
        v21 += 4;
        long long v34 = *a3;
        v50[2] = v30;
        _OWORD v50[3] = v31;
        v50[0] = v33;
        v50[1] = v32;
        v49[0] = v57;
        v49[1] = v58;
        v49[2] = v59;
        _OWORD v49[3] = v60;
      }
      while ((v34(v50, v49) & 1) != 0);
      do
      {
        long long v35 = *(v22 - 2);
        long long v36 = *(v22 - 1);
        long long v38 = *(v22 - 4);
        long long v37 = *(v22 - 3);
        v22 -= 4;
        long long v39 = (unsigned int (*)(void, void))*a3;
        v48[2] = v35;
        _OWORD v48[3] = v36;
        v48[0] = v38;
        v48[1] = v37;
        v47[0] = v57;
        v47[1] = v58;
        v47[2] = v59;
        _OWORD v47[3] = v60;
      }
      while (!v39(v48, v47));
    }
    while (v21 < v22);
    char v13 = v21 - 4;
  }
  if (v13 != a1)
  {
    long long v40 = *v13;
    long long v41 = v13[1];
    long long v42 = v13[3];
    a1[2] = v13[2];
    a1[3] = v42;
    *a1 = v40;
    a1[1] = v41;
  }
  long long v43 = v57;
  long long v44 = v58;
  long long v45 = v60;
  v13[2] = v59;
  v13[3] = v45;
  *char v13 = v43;
  v13[1] = v44;
  return v13;
}

BOOL sub_10000ABE4(uint64_t a1, __n128 *a2, unsigned int (**a3)(void, void))
{
  uint64_t v6 = ((uint64_t)a2 - a1) >> 6;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v8 = *a3;
      __n128 v9 = a2[-3];
      v52[0] = a2[-4];
      v52[1] = v9;
      __n128 v10 = a2[-1];
      v52[2] = a2[-2];
      _OWORD v52[3] = v10;
      long long v11 = *(_OWORD *)(a1 + 16);
      v51[0] = *(_OWORD *)a1;
      v51[1] = v11;
      long long v12 = *(_OWORD *)(a1 + 48);
      v51[2] = *(_OWORD *)(a1 + 32);
      _OWORD v51[3] = v12;
      if (!v8(v52, v51)) {
        return 1;
      }
      char v13 = a2 - 4;
      __n128 v15 = *(__n128 *)(a1 + 32);
      __n128 v14 = *(__n128 *)(a1 + 48);
      __n128 v17 = *(__n128 *)a1;
      __n128 v16 = *(__n128 *)(a1 + 16);
      __n128 v18 = a2[-1];
      __n128 v20 = a2[-4];
      __n128 v19 = a2[-3];
      *(__n128 *)(a1 + 32) = a2[-2];
      *(__n128 *)(a1 + 48) = v18;
      *(__n128 *)a1 = v20;
      *(__n128 *)(a1 + 16) = v19;
      *char v13 = v17;
      v13[1] = v16;
      BOOL result = 1;
      v13[2] = v15;
      v13[3] = v14;
      return result;
    case 3:
      sub_10000A5B0((_OWORD *)a1, (_OWORD *)(a1 + 64), (__n128 *)a2[-4].n128_u64, a3);
      return 1;
    case 4:
      sub_10000AE4C((__n128 *)a1, (__n128 *)(a1 + 64), (__n128 *)(a1 + 128), a2 - 4, a3);
      return 1;
    case 5:
      sub_10000AF98(a1, (__n128 *)(a1 + 64), (__n128 *)(a1 + 128), (__n128 *)(a1 + 192), a2 - 4, a3);
      return 1;
    default:
      long long v21 = (__n128 *)(a1 + 128);
      sub_10000A5B0((_OWORD *)a1, (_OWORD *)(a1 + 64), (_OWORD *)(a1 + 128), a3);
      int v22 = (__n128 *)(a1 + 192);
      if ((__n128 *)(a1 + 192) == a2) {
        return 1;
      }
      uint64_t v23 = 0;
      int v24 = 0;
      break;
  }
  while (1)
  {
    long long v25 = *a3;
    __n128 v26 = v22[1];
    v50[0] = *v22;
    v50[1] = v26;
    __n128 v27 = v22[3];
    v50[2] = v22[2];
    _OWORD v50[3] = v27;
    __n128 v28 = v21[3];
    __n128 v30 = *v21;
    __n128 v29 = v21[1];
    v49[2] = v21[2];
    _OWORD v49[3] = v28;
    v49[0] = v30;
    v49[1] = v29;
    if (v25(v50, v49))
    {
      __n128 v31 = v22[1];
      __n128 v45 = *v22;
      __n128 v46 = v31;
      __n128 v32 = v22[3];
      __n128 v47 = v22[2];
      __n128 v48 = v32;
      uint64_t v33 = v23;
      while (1)
      {
        long long v34 = (_OWORD *)(a1 + v33);
        long long v35 = *(_OWORD *)(a1 + v33 + 144);
        v34[12] = *(_OWORD *)(a1 + v33 + 128);
        v34[13] = v35;
        long long v36 = *(_OWORD *)(a1 + v33 + 176);
        v34[14] = *(_OWORD *)(a1 + v33 + 160);
        v34[15] = v36;
        if (v33 == -128) {
          break;
        }
        long long v37 = *a3;
        v44[0] = v45;
        v44[1] = v46;
        v44[2] = v47;
        _OWORD v44[3] = v48;
        long long v38 = v34[5];
        v43[0] = v34[4];
        v43[1] = v38;
        long long v39 = v34[7];
        v43[2] = v34[6];
        _OWORD v43[3] = v39;
        v33 -= 64;
        if ((((uint64_t (*)(_OWORD *, _OWORD *))v37)(v44, v43) & 1) == 0)
        {
          long long v40 = (_OWORD *)(a1 + v33 + 192);
          goto LABEL_12;
        }
      }
      long long v40 = (_OWORD *)a1;
LABEL_12:
      __n128 v41 = v46;
      *long long v40 = v45;
      v40[1] = v41;
      __n128 v42 = v48;
      v40[2] = v47;
      _OWORD v40[3] = v42;
      if (++v24 == 8) {
        return &v22[4] == a2;
      }
    }
    long long v21 = v22;
    v23 += 64;
    v22 += 4;
    if (v22 == a2) {
      return 1;
    }
  }
}

__n128 sub_10000AE4C(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, unsigned int (**a5)(void, void))
{
  sub_10000A5B0(a1, a2, a3, a5);
  __n128 v10 = *a5;
  __n128 v11 = a4[1];
  v55[0] = *a4;
  v55[1] = v11;
  __n128 v12 = a4[3];
  v55[2] = a4[2];
  _OWORD v55[3] = v12;
  __n128 v13 = a3[1];
  v54[0] = *a3;
  v54[1] = v13;
  __n128 v14 = a3[3];
  v54[2] = a3[2];
  _OWORD v54[3] = v14;
  if (v10(v55, v54))
  {
    __n128 v17 = a3[2];
    __n128 v16 = a3[3];
    __n128 v19 = *a3;
    __n128 v18 = a3[1];
    __n128 v20 = a4[3];
    __n128 v22 = *a4;
    __n128 v21 = a4[1];
    a3[2] = a4[2];
    a3[3] = v20;
    *a3 = v22;
    a3[1] = v21;
    *a4 = v19;
    a4[1] = v18;
    a4[2] = v17;
    a4[3] = v16;
    uint64_t v23 = *a5;
    __n128 v24 = *a3;
    __n128 v25 = a3[1];
    __n128 v26 = a3[3];
    v53[2] = a3[2];
    _OWORD v53[3] = v26;
    v53[0] = v24;
    v53[1] = v25;
    __n128 v27 = *a2;
    __n128 v28 = a2[1];
    __n128 v29 = a2[3];
    v52[2] = a2[2];
    _OWORD v52[3] = v29;
    v52[0] = v27;
    v52[1] = v28;
    if (v23(v53, v52))
    {
      __n128 v31 = a2[2];
      __n128 v30 = a2[3];
      __n128 v33 = *a2;
      __n128 v32 = a2[1];
      __n128 v34 = a3[3];
      __n128 v36 = *a3;
      __n128 v35 = a3[1];
      a2[2] = a3[2];
      a2[3] = v34;
      *a2 = v36;
      a2[1] = v35;
      *a3 = v33;
      a3[1] = v32;
      a3[2] = v31;
      a3[3] = v30;
      long long v37 = *a5;
      __n128 v38 = *a2;
      __n128 v39 = a2[1];
      __n128 v40 = a2[3];
      v51[2] = a2[2];
      _OWORD v51[3] = v40;
      v51[0] = v38;
      v51[1] = v39;
      __n128 v41 = *a1;
      __n128 v42 = a1[1];
      __n128 v43 = a1[3];
      v50[2] = a1[2];
      _OWORD v50[3] = v43;
      v50[0] = v41;
      v50[1] = v42;
      if (v37(v51, v50))
      {
        __n128 v44 = a1[2];
        __n128 result = a1[3];
        __n128 v46 = *a1;
        __n128 v45 = a1[1];
        __n128 v47 = a2[3];
        __n128 v49 = *a2;
        __n128 v48 = a2[1];
        a1[2] = a2[2];
        a1[3] = v47;
        *a1 = v49;
        a1[1] = v48;
        *a2 = v46;
        a2[1] = v45;
        a2[2] = v44;
        a2[3] = result;
      }
    }
  }
  return result;
}

__n128 sub_10000AF98(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, unsigned int (**a6)(void, void))
{
  sub_10000AE4C((__n128 *)a1, a2, a3, a4, a6);
  __n128 v12 = *a6;
  __n128 v13 = a5[1];
  v73[0] = *a5;
  v73[1] = v13;
  __n128 v14 = a5[3];
  v73[2] = a5[2];
  v73[3] = v14;
  __n128 v15 = a4[1];
  v72[0] = *a4;
  v72[1] = v15;
  __n128 v16 = a4[3];
  v72[2] = a4[2];
  v72[3] = v16;
  if (v12(v73, v72))
  {
    __n128 v19 = a4[2];
    __n128 v18 = a4[3];
    __n128 v21 = *a4;
    __n128 v20 = a4[1];
    __n128 v22 = a5[3];
    __n128 v24 = *a5;
    __n128 v23 = a5[1];
    a4[2] = a5[2];
    a4[3] = v22;
    *a4 = v24;
    a4[1] = v23;
    *a5 = v21;
    a5[1] = v20;
    a5[2] = v19;
    a5[3] = v18;
    __n128 v25 = *a6;
    __n128 v26 = *a4;
    __n128 v27 = a4[1];
    __n128 v28 = a4[3];
    v71[2] = a4[2];
    v71[3] = v28;
    v71[0] = v26;
    v71[1] = v27;
    __n128 v29 = *a3;
    __n128 v30 = a3[1];
    __n128 v31 = a3[3];
    v70[2] = a3[2];
    v70[3] = v31;
    v70[0] = v29;
    v70[1] = v30;
    if (v25(v71, v70))
    {
      __n128 v33 = a3[2];
      __n128 v32 = a3[3];
      __n128 v35 = *a3;
      __n128 v34 = a3[1];
      __n128 v36 = a4[3];
      __n128 v38 = *a4;
      __n128 v37 = a4[1];
      a3[2] = a4[2];
      a3[3] = v36;
      *a3 = v38;
      a3[1] = v37;
      *a4 = v35;
      a4[1] = v34;
      a4[2] = v33;
      a4[3] = v32;
      __n128 v39 = *a6;
      __n128 v40 = *a3;
      __n128 v41 = a3[1];
      __n128 v42 = a3[3];
      v69[2] = a3[2];
      v69[3] = v42;
      v69[0] = v40;
      v69[1] = v41;
      __n128 v43 = *a2;
      __n128 v44 = a2[1];
      __n128 v45 = a2[3];
      v68[2] = a2[2];
      v68[3] = v45;
      v68[0] = v43;
      v68[1] = v44;
      if (v39(v69, v68))
      {
        __n128 v47 = a2[2];
        __n128 v46 = a2[3];
        __n128 v49 = *a2;
        __n128 v48 = a2[1];
        __n128 v50 = a3[3];
        __n128 v52 = *a3;
        __n128 v51 = a3[1];
        a2[2] = a3[2];
        a2[3] = v50;
        *a2 = v52;
        a2[1] = v51;
        *a3 = v49;
        a3[1] = v48;
        a3[2] = v47;
        a3[3] = v46;
        long long v53 = *a6;
        __n128 v54 = *a2;
        __n128 v55 = a2[1];
        __n128 v56 = a2[3];
        v67[2] = a2[2];
        v67[3] = v56;
        v67[0] = v54;
        v67[1] = v55;
        __n128 v57 = *(__n128 *)a1;
        long long v58 = *(_OWORD *)(a1 + 16);
        long long v59 = *(_OWORD *)(a1 + 48);
        v66[2] = *(_OWORD *)(a1 + 32);
        v66[3] = v59;
        v66[0] = v57;
        v66[1] = v58;
        if (v53(v67, v66))
        {
          __n128 v60 = *(__n128 *)(a1 + 32);
          __n128 result = *(__n128 *)(a1 + 48);
          __n128 v62 = *(__n128 *)a1;
          __n128 v61 = *(__n128 *)(a1 + 16);
          __n128 v63 = a2[3];
          __n128 v65 = *a2;
          __n128 v64 = a2[1];
          *(__n128 *)(a1 + 32) = a2[2];
          *(__n128 *)(a1 + 48) = v63;
          *(__n128 *)a1 = v65;
          *(__n128 *)(a1 + 16) = v64;
          *a2 = v62;
          a2[1] = v61;
          a2[2] = v60;
          a2[3] = result;
        }
      }
    }
  }
  return result;
}

_OWORD *sub_10000B144(uint64_t a1, _OWORD *a2, _OWORD *a3, unsigned int (**a4)(void, void))
{
  if ((_OWORD *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 6;
    if ((uint64_t)a2 - a1 >= 65)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      __n128 v12 = (__n128 *)(a1 + (v10 << 6));
      do
      {
        sub_10000B308(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    __n128 v13 = a2;
    if (a2 != a3)
    {
      __n128 v14 = a2;
      do
      {
        __n128 v15 = (unsigned int (*)(_OWORD *, _OWORD *))*a4;
        long long v16 = v14[1];
        v42[0] = *v14;
        v42[1] = v16;
        long long v17 = v14[3];
        v42[2] = v14[2];
        _OWORD v42[3] = v17;
        long long v18 = *(_OWORD *)(a1 + 16);
        v41[0] = *(_OWORD *)a1;
        v41[1] = v18;
        long long v19 = *(_OWORD *)(a1 + 48);
        double v41[2] = *(_OWORD *)(a1 + 32);
        _OWORD v41[3] = v19;
        if (v15(v42, v41))
        {
          long long v21 = v14[2];
          long long v20 = v14[3];
          long long v23 = *v14;
          long long v22 = v14[1];
          long long v24 = *(_OWORD *)(a1 + 48);
          long long v26 = *(_OWORD *)a1;
          long long v25 = *(_OWORD *)(a1 + 16);
          v14[2] = *(_OWORD *)(a1 + 32);
          v14[3] = v24;
          *__n128 v14 = v26;
          v14[1] = v25;
          *(_OWORD *)a1 = v23;
          *(_OWORD *)(a1 + 16) = v22;
          *(_OWORD *)(a1 + 32) = v21;
          *(_OWORD *)(a1 + 48) = v20;
          sub_10000B308(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      __n128 v13 = a3;
    }
    if (v8 >= 65)
    {
      uint64_t v27 = (unint64_t)v8 >> 6;
      __n128 v28 = (__n128 *)(a2 - 4);
      do
      {
        __n128 v29 = *(__n128 *)(a1 + 16);
        __n128 v43 = *(__n128 *)a1;
        __n128 v44 = v29;
        __n128 v30 = *(__n128 *)(a1 + 48);
        __n128 v45 = *(__n128 *)(a1 + 32);
        __n128 v46 = v30;
        __n128 v31 = (__n128 *)sub_10000B4D8((_OWORD *)a1, (unsigned int (**)(_OWORD *, _OWORD *))a4, v27);
        if (v28 == v31)
        {
          __n128 v37 = v44;
          *__n128 v31 = v43;
          v31[1] = v37;
          __n128 v38 = v46;
          v31[2] = v45;
          v31[3] = v38;
        }
        else
        {
          __n128 v32 = *v28;
          __n128 v33 = v28[1];
          __n128 v34 = v28[3];
          v31[2] = v28[2];
          v31[3] = v34;
          *__n128 v31 = v32;
          v31[1] = v33;
          __n128 v35 = v44;
          *__n128 v28 = v43;
          v28[1] = v35;
          __n128 v36 = v46;
          v28[2] = v45;
          _OWORD v28[3] = v36;
          sub_10000B5B8(a1, (uint64_t)&v31[4], a4, ((uint64_t)&v31[4] - a1) >> 6);
        }
        v28 -= 4;
      }
      while (v27-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 sub_10000B308(uint64_t a1, unsigned int (**a2)(void, void), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v56 = v4;
    uint64_t v57 = v5;
    long long v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 6)
    {
      uint64_t v12 = ((uint64_t)a4 - a1) >> 5;
      uint64_t v13 = v12 + 1;
      __n128 v14 = (__n128 *)(a1 + ((v12 + 1) << 6));
      uint64_t v15 = v12 + 2;
      if (v12 + 2 < a3)
      {
        long long v16 = *a2;
        __n128 v17 = v14[1];
        v55[0] = *v14;
        v55[1] = v17;
        __n128 v18 = v14[3];
        v55[2] = v14[2];
        _OWORD v55[3] = v18;
        __n128 v19 = v14[5];
        v54[0] = v14[4];
        v54[1] = v19;
        __n128 v20 = v14[7];
        v54[2] = v14[6];
        _OWORD v54[3] = v20;
        if (v16(v55, v54))
        {
          v14 += 4;
          uint64_t v13 = v15;
        }
      }
      long long v21 = *a2;
      __n128 v22 = v14[1];
      v53[0] = *v14;
      v53[1] = v22;
      __n128 v23 = v14[3];
      v53[2] = v14[2];
      _OWORD v53[3] = v23;
      __n128 v24 = v7[1];
      v52[0] = *v7;
      v52[1] = v24;
      __n128 v25 = v7[3];
      v52[2] = v7[2];
      _OWORD v52[3] = v25;
      if ((((uint64_t (*)(_OWORD *, _OWORD *))v21)(v53, v52) & 1) == 0)
      {
        __n128 v27 = v7[1];
        __n128 v48 = *v7;
        __n128 v49 = v27;
        __n128 v28 = v7[3];
        __n128 v50 = v7[2];
        __n128 v51 = v28;
        do
        {
          __n128 v29 = v14;
          __n128 v30 = *v14;
          __n128 v31 = v14[1];
          __n128 v32 = v14[3];
          v7[2] = v14[2];
          v7[3] = v32;
          *long long v7 = v30;
          v7[1] = v31;
          if (v9 < v13) {
            break;
          }
          uint64_t v33 = (2 * v13) | 1;
          __n128 v14 = (__n128 *)(a1 + (v33 << 6));
          if (2 * v13 + 2 < a3)
          {
            __n128 v34 = *a2;
            __n128 v35 = v14[1];
            v47[0] = *v14;
            v47[1] = v35;
            __n128 v36 = v14[3];
            v47[2] = v14[2];
            _OWORD v47[3] = v36;
            __n128 v37 = v14[5];
            v46[0] = v14[4];
            v46[1] = v37;
            __n128 v38 = v14[7];
            v46[2] = v14[6];
            _OWORD v46[3] = v38;
            if (v34(v47, v46))
            {
              v14 += 4;
              uint64_t v33 = 2 * v13 + 2;
            }
          }
          __n128 v39 = *a2;
          __n128 v40 = v14[1];
          v45[0] = *v14;
          v45[1] = v40;
          __n128 v41 = v14[3];
          v45[2] = v14[2];
          _OWORD v45[3] = v41;
          v44[0] = v48;
          v44[1] = v49;
          v44[2] = v50;
          _OWORD v44[3] = v51;
          long long v7 = v29;
          uint64_t v13 = v33;
        }
        while (!v39(v45, v44));
        __n128 result = v48;
        __n128 v42 = v49;
        __n128 v43 = v51;
        v29[2] = v50;
        _OWORD v29[3] = v43;
        *__n128 v29 = result;
        v29[1] = v42;
      }
    }
  }
  return result;
}

_OWORD *sub_10000B4D8(_OWORD *a1, unsigned int (**a2)(_OWORD *, _OWORD *), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    int64_t v9 = &a1[4 * v6 + 4];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      uint64_t v12 = *a2;
      long long v13 = v9[3];
      long long v15 = *v9;
      long long v14 = v9[1];
      v24[2] = v9[2];
      _OWORD v24[3] = v13;
      v24[0] = v15;
      v24[1] = v14;
      long long v16 = v9[7];
      long long v18 = v9[4];
      long long v17 = v9[5];
      v23[2] = v9[6];
      _OWORD v23[3] = v16;
      v23[0] = v18;
      v23[1] = v17;
      if (v12(v24, v23))
      {
        v9 += 4;
        uint64_t v10 = v11;
      }
    }
    long long v19 = *v9;
    long long v20 = v9[1];
    long long v21 = v9[3];
    a1[2] = v9[2];
    a1[3] = v21;
    *a1 = v19;
    a1[1] = v20;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double sub_10000B5B8(uint64_t a1, uint64_t a2, unsigned int (**a3)(void, void), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v39 = v4;
    uint64_t v40 = v5;
    uint64_t v10 = *a3;
    unint64_t v11 = v6 >> 1;
    uint64_t v12 = (_OWORD *)(a1 + (v6 >> 1 << 6));
    long long v13 = v12[1];
    v38[0] = *v12;
    v38[1] = v13;
    long long v14 = v12[3];
    v38[2] = v12[2];
    _OWORD v38[3] = v14;
    long long v15 = *(_OWORD *)(a2 - 48);
    v37[0] = *(_OWORD *)(a2 - 64);
    v37[1] = v15;
    long long v16 = *(_OWORD *)(a2 - 16);
    v37[2] = *(_OWORD *)(a2 - 32);
    _OWORD v37[3] = v16;
    if (v10(v38, v37))
    {
      long long v18 = (_OWORD *)(a2 - 64);
      long long v19 = *(_OWORD *)(a2 - 48);
      long long v33 = *(_OWORD *)(a2 - 64);
      long long v34 = v19;
      long long v20 = *(_OWORD *)(a2 - 16);
      long long v35 = *(_OWORD *)(a2 - 32);
      long long v36 = v20;
      do
      {
        long long v21 = v12;
        long long v22 = *v12;
        long long v23 = v12[1];
        long long v24 = v12[3];
        v18[2] = v12[2];
        v18[3] = v24;
        *long long v18 = v22;
        v18[1] = v23;
        if (!v11) {
          break;
        }
        __n128 v25 = *a3;
        unint64_t v11 = (v11 - 1) >> 1;
        uint64_t v12 = (_OWORD *)(a1 + (v11 << 6));
        long long v26 = v12[1];
        v32[0] = *v12;
        v32[1] = v26;
        long long v27 = v12[3];
        v32[2] = v12[2];
        v32[3] = v27;
        v31[0] = v33;
        v31[1] = v34;
        v31[2] = v35;
        v31[3] = v36;
        char v28 = v25(v32, v31);
        long long v18 = v21;
      }
      while ((v28 & 1) != 0);
      long long v29 = v34;
      _OWORD *v21 = v33;
      v21[1] = v29;
      double result = *(double *)&v35;
      long long v30 = v36;
      v21[2] = v35;
      _OWORD v21[3] = v30;
    }
  }
  return result;
}

void *sub_10000B6C0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_10000888C();
  }
  return operator new(32 * a2);
}

void *sub_10000B6F8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_10000888C();
  }
  return operator new(8 * a2);
}

BOOL sub_10000BE48(id a1, NTHeadlineProviding *a2)
{
  double v2 = [(NTHeadlineProviding *)a2 NewsURL];
  if (objc_msgSend(v2, "fc_isNewsArticleURL")) {
    unsigned __int8 v3 = 1;
  }
  else {
    unsigned __int8 v3 = [v2 fc_isHardPaywallNewsArticleURL:0];
  }

  return v3;
}

void sub_10000BED4(void *a1, NSObject *a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &buf, 0x26u);
}

uint64_t CGColorSpaceGetSRGB(void)
{
  if (qword_100112808 != -1) {
    dispatch_once(&qword_100112808, &stru_1000FB0D8);
  }
  return qword_100112800;
}

void sub_10000BF54(id a1)
{
  qword_100112800 = (uint64_t)CGColorSpaceCreateWithName(kCGColorSpaceSRGB);
}

BOOL FTWidgetLingerStatePropertiesAreDifferent(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!v3 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000C71C8();
    if (v4) {
      goto LABEL_6;
    }
  }
  else if (v4)
  {
    goto LABEL_6;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_1000C7104();
  }
LABEL_6:
  uint64_t v5 = [v3 todaySourceIdentifier];
  unint64_t v6 = [v4 todaySourceIdentifier];
  if ([v5 isEqual:v6])
  {
    uint64_t v7 = [v3 appConfigTreatmentID];
    uint64_t v8 = [v4 appConfigTreatmentID];
    if (+[NSObject nf_object:isEqualToObject:](NSObject, "nf_object:isEqualToObject:", v7, v8)&& (id v9 = [v3 widgetDisplayMode], v9 == objc_msgSend(v4, "widgetDisplayMode")))
    {
      id v10 = [v3 appearanceType];
      BOOL v11 = v10 != [v4 appearanceType];
    }
    else
    {
      BOOL v11 = 1;
    }
  }
  else
  {
    BOOL v11 = 1;
  }

  return v11;
}

void sub_10000DE34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000C7CA0();
    }
    uint64_t v4 = *(void *)(a1 + 32);
  }
  [v3 ft_setTemporalBoundsBySanitizingStartDate:v4 endDate:[*(void *)(a1 + 40)]];
}

id sub_10000DE94(id *a1, void *a2)
{
  id v3 = a2;
  if ([v3 itemType])
  {
    uint64_t v4 = 0;
LABEL_3:
    uint64_t v5 = 0;
    goto LABEL_9;
  }
  unint64_t v6 = FCCheckedProtocolCast();
  uint64_t v5 = [v6 analyticsElement];
  if (v5)
  {
    uint64_t v4 = objc_opt_new();
    [v4 setWidgetContentType:1];
    uint64_t v7 = [v5 articleID];
    [v4 setArticleId:v7];

    uint64_t v8 = [v5 channelID];
    [v4 setSourceChannelId:v8];

    [v4 setWidgetType:[a1[4] _pbWidgetTypeWithStackKind:[a1[5] stackKind]]];
    [v4 setWidgetExposureStackLocation:[a1[4] _pbStackLocationWithStackLocation:[a1[5] stackLocation]]];
    id v9 = [v6 storyType];
    [v4 setStoryType:v9];

    if (!v4) {
      goto LABEL_3;
    }
    [v4 setWidgetArticleCount:[a1[6] count]];
    [v4 setWidgetArticleRank:[a1[5] absoluteOrderOfItem:v3]];
    unint64_t v6 = [a1[5] sectionForItem:v3];
    [v4 setWidgetArticleRankInSection:[a1[5] absoluteOrderOfItemInSection:v3]];
    [v4 setWidgetSectionDisplayRank:[a1[5] absoluteOrderOfSection:v6]];
    id v10 = [v6 identifier];
    [v4 setWidgetSectionId:v10];

    BOOL v11 = [v6 subidentifier];
    [v4 setWidgetSectionSubid:v11];

    uint64_t v12 = [v6 items];
    [v4 setWidgetArticleCountInSection:[v12 count]];

    long long v13 = objc_opt_new();
    [v13 setTodayWidgetHeadlineExposure:v4];
    uint64_t v5 = +[NTPBEvent nss_eventWithIdentifier];
    long long v14 = [a1[4] eventAnnotator];
    [v14 annotateEvent:v5 withOptions:47];

    [a1[4] _annotateEvent:v5 withTrackableWidgetState:a1[5]];
    [v5 setEventObject:v13];
  }
  else
  {
    uint64_t v4 = 0;
  }

LABEL_9:

  return v5;
}

void sub_10000E138(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v10 = (id)objc_opt_new();
  [v10 setPersonalizationFeatureId:v6];

  [v5 floatValue];
  int v8 = v7;

  LODWORD(v9) = v8;
  [v10 setCtr:v9];
  [*(id *)(a1 + 32) addWidgetPersonalizationFeatureCTRPair:v10];
}

id sub_10000E1E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_new();
  id v5 = [v3 identifier];
  [v4 setWidgetSectionIdsExposed:v5];

  id v6 = [v3 subidentifier];
  [v4 setWidgetSectionSubidsExposed:v6];

  int v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];

  [v4 addCountOfArticlesExposedEachSection:[v7 unsignedIntegerValue]];

  return v4;
}

id sub_10000ED48(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) isEqual:v3])
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = [v3 identifier];
  }

  return v4;
}

BOOL sub_10000F2D4(id a1, NTTodayResults *a2, NTTodayResultOperationFetchInfoProviding *a3)
{
  id v3 = (void *)NTNewsSourceIdentifier;
  uint64_t v4 = [(NTTodayResultOperationFetchInfoProviding *)a3 todaySourceIdentifier];
  LOBYTE(v3) = [v3 isEqualToString:v4] ^ 1;

  return (char)v3;
}

BOOL sub_10000F4C8(id a1, NTTodayResults *a2, NTTodayResultOperationFetchInfoProviding *a3)
{
  id v3 = (void *)NTNewsSourceIdentifier;
  uint64_t v4 = [(NTTodayResultOperationFetchInfoProviding *)a3 todaySourceIdentifier];
  LOBYTE(v3) = [v3 isEqualToString:v4];

  return (char)v3;
}

id FTCampaignIdentifierForSourceIdentifier(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:NTNewsSourceIdentifier]
    || [v1 isEqualToString:NTUnknownSourceIdentifier])
  {
    id v2 = NSSNewsWidgetNewsModeCampaignID;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000C86CC();
    }
    id v2 = 0;
  }

  return v2;
}

double *FR_HSL_TO_RGB(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  if (a5 == 0.0)
  {
    if (result) {
      *double result = a6;
    }
    if (a2) {
      *a2 = a6;
    }
    if (!a3) {
      return result;
    }
LABEL_27:
    *a3 = a6;
    return result;
  }
  uint64_t v6 = 0;
  double v7 = a5 + a6 - a6 * a5;
  double v8 = (a5 + 1.0) * a6;
  if (a6 >= 0.5) {
    double v8 = v7;
  }
  double v9 = -(v8 - a6 * 2.0);
  double v12 = a4 + 0.333333333;
  double v13 = a4;
  double v14 = a4 + -0.333333333;
  do
  {
    double v10 = *(double *)((char *)&v12 + v6);
    if (v10 < 0.0) {
      double v10 = v10 + 1.0;
    }
    if (v10 > 1.0) {
      double v10 = v10 + -1.0;
    }
    if (v10 * 6.0 >= 1.0)
    {
      double v11 = v8;
      if (v10 + v10 >= 1.0)
      {
        double v11 = v9;
        if (v10 * 3.0 < 2.0) {
          double v11 = v9 + (v8 - v9) * (0.666666667 - v10) * 6.0;
        }
      }
    }
    else
    {
      double v11 = v9 + (v8 - v9) * 6.0 * v10;
    }
    *(double *)((char *)&v12 + v6) = v11;
    v6 += 8;
  }
  while (v6 != 24);
  if (result) {
    *double result = v12;
  }
  if (a2) {
    *a2 = v13;
  }
  if (a3)
  {
    a6 = v14;
    goto LABEL_27;
  }
  return result;
}

double *FR_RGB_TO_HSL(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  if (a4 >= a5) {
    double v6 = a4;
  }
  else {
    double v6 = a5;
  }
  if (a4 >= a5) {
    double v7 = a5;
  }
  else {
    double v7 = a4;
  }
  if (v6 >= a6) {
    double v8 = v6;
  }
  else {
    double v8 = a6;
  }
  if (v7 >= a6) {
    double v7 = a6;
  }
  double v9 = v7 + v8;
  double v10 = (v7 + v8) * 0.5;
  if (v10 <= 0.0)
  {
    if (result) {
      *double result = 0.0;
    }
    if (a2) {
      *a2 = 0.0;
    }
  }
  else
  {
    double v11 = v8 - v7;
    if (v8 - v7 <= 0.0)
    {
      if (result) {
        *double result = 0.0;
      }
      if (a2) {
        *a2 = v11;
      }
    }
    else
    {
      if (v10 > 0.5) {
        double v9 = 2.0 - v8 - v7;
      }
      double v12 = v11 / v9;
      double v13 = (v8 - a4) / v11;
      double v14 = (v8 - a5) / v11;
      double v15 = (v8 - a6) / v11;
      double v16 = v15 + 5.0;
      if (v7 != a5) {
        double v16 = 1.0 - v14;
      }
      double v17 = v14 + 3.0;
      if (v7 != a4) {
        double v17 = 5.0 - v13;
      }
      double v18 = v13 + 1.0;
      double v19 = 3.0 - v15;
      if (v7 == a6) {
        double v20 = v18;
      }
      else {
        double v20 = v19;
      }
      if (v8 == a5) {
        double v21 = v20;
      }
      else {
        double v21 = v17;
      }
      if (v8 == a4) {
        double v22 = v16;
      }
      else {
        double v22 = v21;
      }
      if (result) {
        *double result = v22 / 6.0;
      }
      if (a2) {
        *a2 = v12;
      }
    }
  }
  if (a3) {
    *a3 = v10;
  }
  return result;
}

void sub_100010B0C(id a1)
{
  id v3 = objc_alloc_init((Class)UIView);
  uint64_t v1 = [v3 tintColor];
  id v2 = (void *)qword_100112810;
  qword_100112810 = v1;
}

void sub_100010BC4(id a1)
{
  id v3 = +[UIColor systemPinkColor];
  uint64_t v1 = [v3 colorWithAlphaComponent:0.5];
  id v2 = (void *)qword_100112820;
  qword_100112820 = v1;
}

void sub_100010C78(id a1)
{
  uint64_t v1 = +[UIColor colorWithRed:0.960784314 green:0.62745098 blue:0.0901960784 alpha:1.0];
  id v2 = (void *)qword_100112830;
  qword_100112830 = v1;
}

void sub_100010D28(id a1)
{
  uint64_t v1 = +[UIColor colorWithRed:0.941176471 green:0.588235294 blue:0.196078431 alpha:1.0];
  id v2 = (void *)qword_100112840;
  qword_100112840 = v1;
}

void sub_100010DD8(id a1)
{
  uint64_t v1 = +[UIColor colorWithRed:0.360784314 green:0.752941176 blue:0.549019608 alpha:1.0];
  id v2 = (void *)qword_100112850;
  qword_100112850 = v1;
}

void sub_100010E88(id a1)
{
  uint64_t v1 = +[UIColor colorWithRed:1.0 green:0.556862745 blue:0.0 alpha:1.0];
  id v2 = (void *)qword_100112860;
  qword_100112860 = v1;
}

void sub_100010F74(id a1)
{
  uint64_t v1 = +[UIColor colorWithWhite:0.0 alpha:0.82];
  id v2 = (void *)qword_100112870;
  qword_100112870 = v1;
}

void sub_100011034(id a1)
{
  uint64_t v1 = +[UIColor colorWithWhite:1.0 alpha:0.82];
  id v2 = (void *)qword_100112880;
  qword_100112880 = v1;
}

void sub_100011114(id a1)
{
  id v4 = +[UIColor whiteColor];
  uint64_t v1 = +[UIColor blackColor];
  uint64_t v2 = +[UIColor fr_dynamicColor:v4 withDarkStyleVariant:v1];
  id v3 = (void *)qword_100112890;
  qword_100112890 = v2;
}

void sub_10001119C(id a1)
{
  id v4 = +[UIColor colorWithWhite:1.0 alpha:0.82];
  uint64_t v1 = +[UIColor colorWithWhite:0.0 alpha:0.82];
  uint64_t v2 = +[UIColor fr_dynamicColor:v4 withDarkStyleVariant:v1];
  id v3 = (void *)qword_1001128A0;
  qword_1001128A0 = v2;
}

void sub_1000112E0(id a1)
{
  id v4 = +[UIColor colorWithWhite:0.917647059 alpha:1.0];
  uint64_t v1 = +[UIColor colorWithWhite:0.250980392 alpha:1.0];
  uint64_t v2 = +[UIColor fr_dynamicColor:v4 withDarkStyleVariant:v1];
  id v3 = (void *)qword_1001128B0;
  qword_1001128B0 = v2;
}

void sub_1000113EC(id a1)
{
  id v4 = +[UIColor colorWithWhite:0.9 alpha:1.0];
  uint64_t v1 = +[UIColor colorWithWhite:0.1 alpha:1.0];
  uint64_t v2 = +[UIColor fr_dynamicColor:v4 withDarkStyleVariant:v1];
  id v3 = (void *)qword_1001128C0;
  qword_1001128C0 = v2;
}

void sub_100011534(id a1)
{
  id v4 = +[UIColor whiteColor];
  uint64_t v1 = +[UIColor blackColor];
  uint64_t v2 = +[UIColor fr_dynamicColor:v4 withDarkStyleVariant:v1];
  id v3 = (void *)qword_1001128D0;
  qword_1001128D0 = v2;
}

void sub_100011610(id a1)
{
  id v4 = +[UIColor colorWithWhite:0.88627451 alpha:1.0];
  uint64_t v1 = +[UIColor colorWithWhite:0.11372549 alpha:1.0];
  uint64_t v2 = +[UIColor fr_dynamicColor:v4 withDarkStyleVariant:v1];
  id v3 = (void *)qword_1001128E0;
  qword_1001128E0 = v2;
}

void sub_100011704(id a1)
{
  id v4 = +[UIColor colorWithWhite:0.58 alpha:1.0];
  uint64_t v1 = +[UIColor colorWithWhite:0.42 alpha:1.0];
  uint64_t v2 = +[UIColor fr_dynamicColor:v4 withDarkStyleVariant:v1];
  id v3 = (void *)qword_1001128F0;
  qword_1001128F0 = v2;
}

void sub_1000117F8(id a1)
{
  id v4 = +[UIColor colorWithRed:0.937254902 green:0.937254902 blue:0.956862745 alpha:1.0];
  uint64_t v1 = +[UIColor colorWithRed:0.062745098 green:0.062745098 blue:0.0431372549 alpha:1.0];
  uint64_t v2 = +[UIColor fr_dynamicColor:v4 withDarkStyleVariant:v1];
  id v3 = (void *)qword_100112900;
  qword_100112900 = v2;
}

void sub_100011904(id a1)
{
  id v4 = +[UIColor blackColor];
  uint64_t v1 = +[UIColor systemGrayColor];
  uint64_t v2 = +[UIColor fr_dynamicColor:v4 withDarkStyleVariant:v1];
  id v3 = (void *)qword_100112910;
  qword_100112910 = v2;
}

void sub_1000119EC(id a1)
{
  uint64_t v1 = +[UIColor colorWithRed:0.960784314 green:0.62745098 blue:0.0901960784 alpha:1.0];
  uint64_t v2 = (void *)qword_100112920;
  qword_100112920 = v1;
}

void sub_100011A9C(id a1)
{
  id v4 = +[UIColor colorWithWhite:0.92 alpha:1.0];
  uint64_t v1 = +[UIColor colorWithWhite:0.08 alpha:1.0];
  uint64_t v2 = +[UIColor fr_dynamicColor:v4 withDarkStyleVariant:v1];
  id v3 = (void *)qword_100112930;
  qword_100112930 = v2;
}

void sub_100011B9C(id a1)
{
  id v4 = +[UIColor colorWithRed:0.235294118 green:0.235294118 blue:0.262745098 alpha:0.3];
  uint64_t v1 = +[UIColor colorWithRed:0.921568627 green:0.921568627 blue:0.960784314 alpha:0.19];
  uint64_t v2 = +[UIColor fr_dynamicColor:v4 withDarkStyleVariant:v1];
  id v3 = (void *)qword_100112940;
  qword_100112940 = v2;
}

void sub_100011CB0(id a1)
{
  uint64_t v1 = +[UIColor colorWithWhite:0.156862745 alpha:1.0];
  uint64_t v2 = (void *)qword_100112950;
  qword_100112950 = v1;
}

void sub_100011D50(id a1)
{
  uint64_t v1 = +[UIColor colorWithWhite:0.843137255 alpha:1.0];
  uint64_t v2 = (void *)qword_100112960;
  qword_100112960 = v1;
}

void sub_100011E44(id a1)
{
  uint64_t v1 = +[UIColor colorWithWhite:0.301960784 alpha:1.0];
  uint64_t v2 = (void *)qword_100112970;
  qword_100112970 = v1;
}

void sub_100011EE4(id a1)
{
  uint64_t v1 = +[UIColor colorWithWhite:0.698039216 alpha:1.0];
  uint64_t v2 = (void *)qword_100112980;
  qword_100112980 = v1;
}

void sub_100012044(id a1)
{
  id v4 = +[UIColor colorWithWhite:0.58 alpha:1.0];
  uint64_t v1 = +[UIColor colorWithWhite:0.42 alpha:1.0];
  uint64_t v2 = +[UIColor fr_dynamicColor:v4 withDarkStyleVariant:v1];
  id v3 = (void *)qword_100112990;
  qword_100112990 = v2;
}

id sub_100012268(uint64_t a1, void *a2)
{
  id v3 = [a2 userInterfaceStyle];
  uint64_t v4 = 40;
  if (v3 == (id)2) {
    uint64_t v4 = 32;
  }
  id v5 = *(void **)(a1 + v4);

  return v5;
}

id sub_100012648(uint64_t a1, void *a2)
{
  id v3 = a2;
  ColorSpace = CGColorGetColorSpace((CGColorRef)[v3 CGColor]);
  if (CGColorSpaceGetModel(ColorSpace))
  {
    id v5 = v3;
  }
  else
  {
    double v6 = CGColorGetComponents((CGColorRef)[v3 CGColor]);
    components[0] = *v6;
    components[1] = components[0];
    components[2] = components[0];
    components[3] = v6[1];
    double v7 = CGColorCreate(*(CGColorSpaceRef *)(a1 + 32), components);
    id v5 = +[UIColor colorWithCGColor:v7];
    CGColorRelease(v7);
  }

  return v5;
}

id sub_100012908(uint64_t a1, void *a2)
{
  id v3 = a2;
  ColorSpace = CGColorGetColorSpace((CGColorRef)[v3 CGColor]);
  if (CGColorSpaceGetModel(ColorSpace))
  {
    id v5 = v3;
  }
  else
  {
    double v6 = CGColorGetComponents((CGColorRef)[v3 CGColor]);
    components[0] = *v6;
    components[1] = components[0];
    components[2] = components[0];
    components[3] = v6[1];
    double v7 = CGColorCreate(*(CGColorSpaceRef *)(a1 + 32), components);
    id v5 = +[UIColor colorWithCGColor:v7];
    CGColorRelease(v7);
  }

  return v5;
}

void sub_100012D08(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v8 = *(void **)(a1 + 32);
  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  double v9 = +[NSNumber numberWithDouble:a3];
  double v10 = +[NSNumber numberWithDouble:a4];
  double v11 = +[NSNumber numberWithDouble:a5];
  [v8 appendFormat:@"R : %@ G : %@ B : %@ A : %@", v12, v9, v10, v11];
}

void sub_100012DE0(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v8 = *(void **)(a1 + 32);
  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  double v9 = +[NSNumber numberWithDouble:a3];
  double v10 = +[NSNumber numberWithDouble:a4];
  double v11 = +[NSNumber numberWithDouble:a5];
  [v8 appendFormat:@"H : %@ S : %@ B : %@ A : %@", v12, v9, v10, v11];
}

void sub_100012F00(id a1, double a2, double a3, double a4, double a5)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    double v9 = +[NSNumber numberWithDouble:a2];
    double v10 = +[NSNumber numberWithDouble:a3];
    double v11 = +[NSNumber numberWithDouble:a4];
    id v12 = +[NSNumber numberWithDouble:a5];
    int v13 = 138413058;
    double v14 = v9;
    __int16 v15 = 2112;
    double v16 = v10;
    __int16 v17 = 2112;
    double v18 = v11;
    __int16 v19 = 2112;
    double v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "R : %@ G : %@ B : %@ A : %@", (uint8_t *)&v13, 0x2Au);
  }
}

void sub_100013044(id a1, double a2, double a3, double a4, double a5)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    double v9 = +[NSNumber numberWithDouble:a2];
    double v10 = +[NSNumber numberWithDouble:a3];
    double v11 = +[NSNumber numberWithDouble:a4];
    id v12 = +[NSNumber numberWithDouble:a5];
    int v13 = 138413058;
    double v14 = v9;
    __int16 v15 = 2112;
    double v16 = v10;
    __int16 v17 = 2112;
    double v18 = v11;
    __int16 v19 = 2112;
    double v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "H : %@ S : %@ B : %@ A : %@", (uint8_t *)&v13, 0x2Au);
  }
}

void sub_100013234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001324C(uint64_t result, double a2)
{
  *(double *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_100013308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100013320(uint64_t result, double a2, double a3)
{
  *(double *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  return result;
}

void sub_1000133DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000133F4(uint64_t result, double a2, double a3, double a4)
{
  *(double *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a4;
  return result;
}

void sub_1000134B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000134C8(uint64_t result, double a2, double a3, double a4, double a5)
{
  *(double *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a5;
  return result;
}

void sub_100013584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001359C(uint64_t result, double a2)
{
  *(double *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_100013658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100013670(uint64_t result, double a2, double a3)
{
  *(double *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  return result;
}

void sub_10001372C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100013744(uint64_t result, double a2, double a3, double a4)
{
  *(double *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a4;
  return result;
}

void sub_100013CFC(id a1)
{
  uint64_t v1 = +[UIColor colorWithRed:0.360784314 green:0.752941176 blue:0.549019608 alpha:1.0];
  uint64_t v2 = (void *)qword_1001129A0;
  qword_1001129A0 = v1;
}

void sub_100013DB8(id a1)
{
  uint64_t v1 = +[UIColor colorWithRed:0.941176471 green:0.588235294 blue:0.196078431 alpha:1.0];
  uint64_t v2 = (void *)qword_1001129B0;
  qword_1001129B0 = v1;
}

void sub_100013F58(id a1)
{
  uint64_t v1 = +[UIColor colorWithRed:1.0 green:0.11372549 blue:0.282352941 alpha:1.0];
  uint64_t v2 = (void *)qword_1001129C0;
  qword_1001129C0 = v1;
}

void sub_100014004(id a1)
{
  uint64_t v1 = +[UIColor colorWithRed:0.43 green:0.43 blue:0.45 alpha:1.0];
  uint64_t v2 = (void *)qword_1001129D0;
  qword_1001129D0 = v1;
}

void sub_1000142E8(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 analyticsElement];
  id v5 = [v4 articleID];

  if (v5)
  {
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    [v6 setObject:v5 forKey:FCWidgetArticleListArticleID];
    double v7 = [v3 sourceTagID];
    [v6 fc_safelySetObject:v7 forKey:FCWidgetArticleListSourceChannelID];

    double v8 = [a1[4] objectForKeyedSubscript:v3];
    double v9 = [v8 referralBarName];
    [v6 fc_safelySetObjectAllowingNil:v9 forKey:FCWidgetArticleListSectionName];

    double v10 = [v3 flintDocumentURL];
    double v11 = [v10 absoluteString];
    [v6 fc_safelySetObjectAllowingNil:v11 forKey:FCWidgetArticleListFlintDocumentURL];

    id v12 = [v3 backingElement];
    int v13 = [v12 articleRecordData];
    double v14 = [v13 base64EncodedStringWithOptions:0];
    [v6 fc_safelySetObjectAllowingNil:v14 forKey:FCWidgetArticleListArticleRecordData];

    __int16 v15 = [v3 backingElement];
    double v16 = [v15 sourceChannelRecordData];
    __int16 v17 = [v16 base64EncodedStringWithOptions:0];
    [v6 fc_safelySetObjectAllowingNil:v17 forKey:FCWidgetArticleListSourceChannelRecordData];

    double v18 = [v3 backingElement];
    __int16 v19 = [v18 parentIssueRecordData];
    double v20 = [v19 base64EncodedStringWithOptions:0];
    [v6 fc_safelySetObjectAllowingNil:v20 forKey:FCWidgetArticleListParentIssueRecordData];

    [a1[5] addObject:v6];
    double v21 = [v3 flintDocumentURL];
    if (v21)
    {
      uint64_t v22 = [a1[6] objectForKeyedSubscript:v21];
      if (v22)
      {
        long long v23 = (void *)v22;
        [a1[7] setObject:v22 forKeyedSubscript:v21];
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000C8BB8();
  }
}

__CFString *FTValidatedFreeValuedPropertyValue(void *a1)
{
  uint64_t v1 = a1;
  if (!v1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_1000C8C7C();
  }
  if (+[PETEventStringValidator stringIsValid:v1])uint64_t v2 = v1; {
  else
  }
    uint64_t v2 = @"invalid";
  id v3 = v2;

  return v3;
}

__CFString *FTHeadlineSourcePropertyValueWithTodaySource(void *a1)
{
  if (a1)
  {
    FTValidatedFreeValuedPropertyValue(a1);
    uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v2 = @"none";
  }
  return v2;
}

__CFString *FTSectionPropertyValueWithSection(void *a1)
{
  if (a1)
  {
    FTValidatedFreeValuedPropertyValue(a1);
    uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v2 = @"none";
  }
  return v2;
}

__CFString *FTUserGroupPropertyValueWithAppConfigTreatmentID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && ([v1 stringValue], (id v3 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v4 = v3;
    FTValidatedFreeValuedPropertyValue(v3);
    id v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v5 = @"none";
  }

  return v5;
}

id FTLocalTimeHourPropertyValue(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSCalendar currentCalendar];
  id v3 = +[NSTimeZone localTimeZone];
  uint64_t v4 = [v2 componentsInTimeZone:v3 fromDate:v1];

  id v5 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v4 hour]);

  return v5;
}

id FTTimeZonePropertyValue()
{
  v0 = +[NSTimeZone localTimeZone];
  id v1 = [v0 abbreviation];

  return v1;
}

__CFString *FTBooleanPropertyValue(int a1)
{
  if (a1) {
    return @"yes";
  }
  else {
    return @"no";
  }
}

BOOL sub_100014E74(id a1, NTTodayResults *a2, NTTodayResultOperationFetchInfoProviding *a3)
{
  id v3 = (void *)NTNewsSourceIdentifier;
  uint64_t v4 = [(NTTodayResultOperationFetchInfoProviding *)a3 todaySourceIdentifier];
  LOBYTE(v3) = [v3 isEqualToString:v4];

  return (char)v3;
}

NTPBEnvelope *__cdecl sub_100015288(id a1, NSSNewsAnalyticsPBEventAccumulator *a2)
{
  return (NTPBEnvelope *)[(NSSNewsAnalyticsPBEventAccumulator *)a2 dequeueEventsIntoEnvelope];
}

void sub_100015290(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) submissionGroup];
  dispatch_group_leave(v1);
}

id sub_10001585C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  double v7 = +[NSDate date];
  double v8 = [v6 engagementWithHeaderAtDate:v7 withTargetURL:*(void *)(a1 + 32) trackableWidgetState:v5];

  return v8;
}

id sub_100015AE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  double v7 = +[NSDate date];
  double v8 = [v6 engagementWithBannerAtDate:v7 withTargetURL:*(void *)(a1 + 32) trackableWidgetState:v5];

  return v8;
}

void sub_100016520(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) submissionGroup];
  dispatch_group_leave(v1);
}

uint64_t sub_10001660C()
{
  return objc_opt_respondsToSelector() & 1;
}

void sub_100016C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100016C60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100016C70(uint64_t a1)
{
}

void sub_100016C78(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  double v7 = [v6 filePath];
  if (v7)
  {
    double v8 = +[NSURL fileURLWithPath:v7 isDirectory:0];
    if (v8)
    {
      double v9 = +[NSUUID UUID];
      double v10 = [v9 UUIDString];

      double v11 = [*(id *)(a1 + 32) URLByAppendingPathComponent:v10 isDirectory:0];
      id v12 = *(void **)(a1 + 40);
      uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
      id obj = *(id *)(v13 + 40);
      [v12 copyItemAtURL:v8 toURL:v11 error:&obj];
      objc_storeStrong((id *)(v13 + 40), obj);
      double v14 = *(void **)(a1 + 48);
      __int16 v15 = [v6 remoteURL];
      [v14 setObject:v11 forKeyedSubscript:v15];

      if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)) {
        *a4 = 1;
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000C9270();
  }
}

id sub_1000172FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) assetHandleForURL:a2 prefetchedFileURL:a3 importMethod:0 lifetimeHint:0];
}

id PrefetchLog()
{
  if (qword_1001129E0 != -1) {
    dispatch_once(&qword_1001129E0, &stru_1000FB890);
  }
  v0 = (void *)qword_1001129E8;

  return v0;
}

void sub_1000177D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.news", "WidgetContentPrefetch");
  uint64_t v2 = (void *)qword_1001129E8;
  qword_1001129E8 = (uint64_t)v1;
}

void sub_100017BC0(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = [*(id *)(a1 + 32) filePath];

  uint64_t v4 = PrefetchLog();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v6 = [*(id *)(a1 + 40) identifier];
      int v7 = 138543362;
      double v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "successfully downloaded JSON for banner %{public}@", (uint8_t *)&v7, 0xCu);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    sub_1000C9740(a1, v2);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100017CC8(id *a1)
{
  uint64_t v2 = [a1[4] assetManager];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100017D7C;
  v3[3] = &unk_1000FB8E0;
  id v5 = a1[6];
  id v4 = a1[5];
  [v2 saveWithCompletionHandler:v3];
}

uint64_t sub_100017D7C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1000180A8(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = [*(id *)(a1 + 32) filePath];

  id v4 = PrefetchLog();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v6 = [*(id *)(a1 + 40) identifier];
      int v7 = 138543362;
      double v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "successfully downloaded JSON for headline %{public}@", (uint8_t *)&v7, 0xCu);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    sub_1000C97E8(a1, v2);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1000181B0(id *a1)
{
  uint64_t v2 = [a1[4] assetManager];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100018264;
  v3[3] = &unk_1000FB8E0;
  id v5 = a1[6];
  id v4 = a1[5];
  [v2 saveWithCompletionHandler:v3];
}

uint64_t sub_100018264(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100018308(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

id sub_100018328()
{
  if (qword_1001129F8[0] != -1) {
    dispatch_once(qword_1001129F8, &stru_1000FB928);
  }
  v0 = (void *)qword_1001129F0;

  return v0;
}

void sub_10001837C(id a1)
{
  uint64_t v1 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", FCErrorDomain, NSURLErrorDomain, NSCocoaErrorDomain, CKErrorDomain, 0);
  uint64_t v2 = (void *)qword_1001129F0;
  qword_1001129F0 = v1;
}

void sub_10001884C(id a1, NSMutableArray *a2)
{
  id v3 = a2;
  uint64_t v2 = sub_100018328();
  [(NSMutableArray *)v3 addObjectsFromArray:v2];

  [(NSMutableArray *)v3 addObject:@"other"];
}

id sub_100019920(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  int v7 = +[NSDate date];
  double v8 = [v6 engagementWithPlaceholderAtDate:v7 withTargetURL:*(void *)(a1 + 32) trackableWidgetState:v5];

  return v8;
}

void sub_100019E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100019EA0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  int v7 = [v6 items];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100019F84;
  v12[3] = &unk_1000FB9A8;
  double v8 = *(void **)(a1 + 40);
  v12[4] = *(void *)(a1 + 32);
  id v13 = v8;
  id v14 = v6;
  id v9 = *(id *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  id v15 = v9;
  uint64_t v16 = v10;
  uint64_t v17 = a4;
  id v11 = v6;
  [v7 enumerateObjectsUsingBlock:v12];
}

void sub_100019F84(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v12 = a2;
  id v6 = [v12 itemType];
  int v7 = v12;
  if (!v6)
  {
    double v8 = FCProtocolCast();
    id v9 = [*(id *)(a1 + 32) personalizationEventAtDate:*(void *)(a1 + 40) withAction:1 headline:v8 section:*(void *)(a1 + 48) trackableWidgetState:*(void *)(a1 + 56)];
    if (v9)
    {
      uint64_t v10 = [*(id *)(a1 + 32) events];
      [v10 addObject:v9];
    }
    id v11 = (id)++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    if (v11 == [*(id *)(a1 + 56) absoluteItemCountForCurrentDisplayMode])
    {
      *a4 = 1;
      **(unsigned char **)(a1 + 72) = 1;
    }

    int v7 = v12;
  }
}

uint64_t sub_10001A264(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001A44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001A468(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001A478(uint64_t a1)
{
}

void sub_10001A480(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = [a2 items];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10001A534;
  v9[3] = &unk_1000FBA20;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = a4;
  [v6 enumerateObjectsUsingBlock:v9];
}

void sub_10001A534(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  id v7 = [v9 identifier];
  unsigned int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
    **(unsigned char **)(a1 + 48) = 1;
  }
}

BOOL sub_10001B2F4(id a1, NTHeadlineProviding *a2)
{
  uint64_t v2 = [(NTHeadlineProviding *)a2 analyticsElement];
  unsigned __int8 v3 = [v2 needsSeenStateTracking];

  return v3;
}

NTHeadlineProviding *__cdecl sub_10001B330(id a1, NTTodayItem *a2)
{
  uint64_t v2 = a2;
  if ([(NTTodayItem *)v2 itemType]) {
    unsigned __int8 v3 = 0;
  }
  else {
    unsigned __int8 v3 = v2;
  }
  id v4 = v3;

  return v4;
}

void sub_10001B5EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 objectForKeyedSubscript:@"a"];
  id v5 = +[NSMutableOrderedSet orderedSetWithOrderedSet:v4];

  __n128 v25 = v3;
  id v6 = [v3 objectForKeyedSubscript:@"b"];
  id v7 = +[NSMutableDictionary dictionaryWithDictionary:v6];

  long long v26 = objc_opt_new();
  uint64_t v27 = a1;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v8 = *(id *)(a1 + 32);
  id v9 = [v8 countByEnumeratingWithState:&v30 objects:v42 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v31;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v31 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = [*(id *)(*((void *)&v30 + 1) + 8 * (void)v12) analyticsElement];
        id v14 = [v13 preseenCountTrackingIdentifier];
        if (v14)
        {
          id v15 = [v7 objectForKeyedSubscript:v14];
          if ((((v15 == 0) ^ [v5 containsObject:v14]) & 1) == 0
            && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            id v18 = [objc_alloc((Class)NSString) initWithFormat:@"storage data structures must stay in sync"];
            *(_DWORD *)buf = 136315906;
            long long v35 = "-[FTSeenHeadlineWidgetEventTracker _registerOnceVisibleHeadlines:withLastSeenDate:minimumNumberOfTimes"
                  "PreseenToBeSeen:]_block_invoke";
            __int16 v36 = 2080;
            __n128 v37 = "FTSeenHeadlineWidgetEventTracker.m";
            __int16 v38 = 1024;
            int v39 = 163;
            __int16 v40 = 2114;
            id v41 = v18;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);
          }
          uint64_t v16 = (char *)[v15 unsignedIntegerValue] + 1;
          if ((unint64_t)v16 >= *(void *)(v27 + 64))
          {
            [v26 addObject:v13];
            [v5 removeObject:v14];
            [v7 removeObjectForKey:v14];
          }
          else
          {
            [v5 removeObject:v14];
            [v5 addObject:v14];
            uint64_t v17 = +[NSNumber numberWithUnsignedInteger:v16];
            [v7 setObject:v17 forKeyedSubscript:v14];
          }
        }

        uint64_t v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v30 objects:v42 count:16];
    }
    while (v10);
  }

  if ((unint64_t)[v5 count] >= 0x3E9)
  {
    __int16 v19 = (char *)[v5 count];
    double v20 = v19 - 1000;
    if (v19 != (char *)1000)
    {
      double v21 = +[NSIndexSet indexSetWithIndexesInRange:](NSIndexSet, "indexSetWithIndexesInRange:", 0, v20);
      uint64_t v22 = [v5 objectsAtIndexes:v21];

      [v5 removeObjectsInRange:0, v20];
      [v7 removeObjectsForKeys:v22];
    }
  }
  [v25 setObject:v5 forKeyedSubscript:@"a"];
  [v25 setObject:v7 forKeyedSubscript:@"b"];
  long long v23 = [*(id *)(v27 + 40) submissionGroup];
  dispatch_group_enter(v23);

  id v28 = *(id *)(v27 + 48);
  id v29 = *(id *)(v27 + 56);
  id v24 = v26;
  FCPerformBlockOnMainThread();
}

id sub_10001BA60(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v1 = a1[5];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10001BAD8;
  v5[3] = &unk_1000FB800;
  uint64_t v3 = a1[6];
  v5[4] = a1[7];
  return [v2 writeUserDidSeeHeadlinesWithAnalyticsElements:v1 atDate:v3 withCompletion:v5];
}

void sub_10001BAD8(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) submissionGroup];
  dispatch_group_leave(v1);
}

void sub_10001BB1C(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) submissionGroup];
  dispatch_group_leave(v1);
}

id sub_10001BEC0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = +[NSDate date];
  id v8 = [v6 engagementWithBackgroundAtDate:v7 withTargetURL:*(void *)(a1 + 32) trackableWidgetState:v5];

  return v8;
}

CGContext *TSDBitmapContextCreate(char a1, double a2, double a3)
{
  float v4 = a2;
  float v5 = a3;
  size_t v6 = vcvtps_u32_f32(v4);
  size_t v7 = vcvtps_u32_f32(v5);
  if (a1)
  {
    if ((a1 & 0x20) != 0) {
      CGColorSpaceRef DeviceRGB = CGColorSpaceCreateWithName(kCGColorSpaceDisplayP3);
    }
    else {
      CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
    }
    id v8 = DeviceRGB;
    if ((a1 & 4) != 0) {
      int v13 = 4102;
    }
    else {
      int v13 = 8198;
    }
    uint64_t v14 = 5;
    if ((a1 & 4) == 0) {
      uint64_t v14 = 8;
    }
    uint64_t v15 = 2;
    if ((a1 & 4) == 0) {
      uint64_t v15 = 4;
    }
    if ((a1 & 0x10) != 0) {
      int v16 = 8193;
    }
    else {
      int v16 = 8194;
    }
    if ((a1 & 2) != 0) {
      uint32_t v9 = v16;
    }
    else {
      uint32_t v9 = v13;
    }
    if ((a1 & 2) != 0) {
      size_t v11 = 8;
    }
    else {
      size_t v11 = v14;
    }
    if ((a1 & 2) != 0) {
      uint64_t v10 = 4;
    }
    else {
      uint64_t v10 = v15;
    }
  }
  else
  {
    id v8 = 0;
    if ((a1 & 2) != 0) {
      uint32_t v9 = 7;
    }
    else {
      uint32_t v9 = 8194;
    }
    uint64_t v10 = 4;
    if ((a1 & 2) != 0) {
      uint64_t v10 = 1;
    }
    size_t v11 = 8;
  }
  uint64_t v17 = CGBitmapContextCreateWithData(0, v6, v7, v11, (v10 * v6 + 31) & 0xFFFFFFFFFFFFFFE0, v8, v9, 0, 0);
  if (v8) {
    CGColorSpaceRelease(v8);
  }
  if ((a1 & 8) != 0)
  {
    CGContextTranslateCTM(v17, 0.0, (double)v7);
    CGContextScaleCTM(v17, 1.0, -1.0);
  }
  return v17;
}

void sub_10001C874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_10001CB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void *sub_10001CB84(void *a1)
{
  uint64_t v2 = (void *)a1[46];
  if (v2)
  {
    a1[47] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[43];
  if (v3)
  {
    a1[44] = v3;
    operator delete(v3);
  }
  float v4 = (void *)a1[40];
  if (v4)
  {
    a1[41] = v4;
    operator delete(v4);
  }
  float v5 = (void *)a1[37];
  if (v5)
  {
    a1[38] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_10001CBE8(uint64_t a1)
{
  ITColor::ITColor((ITColor *)a1);
  ITColor::ITColor(v2 + 1);
  ITColor::ITColor((ITColor *)(a1 + 64));
  ITColor::ITColor((ITColor *)(a1 + 96));
  ITColor::ITColor((ITColor *)(a1 + 128));
  ITColor::ITColor((ITColor *)(a1 + 160));
  ITColor::ITColor((ITColor *)(a1 + 192));
  ITColor::ITColor((ITColor *)(a1 + 224));
  ITColor::ITColor((ITColor *)(a1 + 256));
  *(_DWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 389) = 0u;
  return a1;
}

void *sub_10001CC6C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    uint64_t result = sub_10001CCE8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10001CCCC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10001CCE8(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_10000879C();
  }
  uint64_t result = (char *)sub_10000B6C0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

BOOL sub_10001CD2C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10001CD44()
{
  Swift::UInt v1 = *v0;
  sub_1000CCAC0();
  sub_1000CCAD0(v1);
  return sub_1000CCAF0();
}

void sub_10001CD8C()
{
  sub_1000CCAD0(*v0);
}

Swift::Int sub_10001CDB8()
{
  Swift::UInt v1 = *v0;
  sub_1000CCAC0();
  sub_1000CCAD0(v1);
  return sub_1000CCAF0();
}

uint64_t sub_10001CDFC()
{
  if (*v0) {
    return 0x746E65746E6F63;
  }
  else {
    return 1702125924;
  }
}

uint64_t sub_10001CE30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100020AFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10001CE58()
{
  return 0;
}

void sub_10001CE64(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10001CE70(uint64_t a1)
{
  unint64_t v2 = sub_100020154();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001CEAC(uint64_t a1)
{
  unint64_t v2 = sub_100020154();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001CEE8(void *a1)
{
  uint64_t v3 = sub_10001D64C(&qword_10010E320);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  size_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100020110(a1, a1[3]);
  sub_100020154();
  sub_1000CCB30();
  v8[15] = 0;
  sub_1000CACC0();
  sub_1000201F8(&qword_10010E328, (void (*)(uint64_t))&type metadata accessor for Date);
  sub_1000CC9F0();
  if (!v1)
  {
    type metadata accessor for NewsTimelineEntry();
    v8[14] = 1;
    type metadata accessor for TodayContent();
    sub_1000201F8(&qword_10010E330, (void (*)(uint64_t))type metadata accessor for TodayContent);
    sub_1000CC9F0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10001D0E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v22 = type metadata accessor for TodayContent();
  __chkstk_darwin();
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_1000CACC0();
  uint64_t v21 = *(void *)(v25 - 8);
  __chkstk_darwin();
  long long v23 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10001D64C(&qword_10010E300);
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin();
  size_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NewsTimelineEntry();
  __chkstk_darwin();
  size_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100020110(a1, a1[3]);
  sub_100020154();
  sub_1000CCB10();
  if (v2) {
    return sub_1000201A8((uint64_t)a1);
  }
  uint64_t v18 = v9;
  __int16 v19 = v11;
  uint64_t v12 = v21;
  char v28 = 0;
  sub_1000201F8(&qword_10010E310, (void (*)(uint64_t))&type metadata accessor for Date);
  int v13 = v23;
  uint64_t v14 = v25;
  sub_1000CC980();
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v13, v14);
  char v27 = 1;
  sub_1000201F8(&qword_10010E318, (void (*)(uint64_t))type metadata accessor for TodayContent);
  sub_1000CC980();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v26);
  uint64_t v15 = (uint64_t)v19;
  sub_100020240((uint64_t)v5, (uint64_t)&v19[*(int *)(v18 + 20)]);
  sub_1000202A4(v15, v20);
  sub_1000201A8((uint64_t)a1);
  return sub_100020308(v15, (uint64_t (*)(void))type metadata accessor for NewsTimelineEntry);
}

uint64_t sub_10001D4D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000CACC0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_10001D53C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001D0E8(a1, a2);
}

uint64_t sub_10001D554(void *a1)
{
  return sub_10001CEE8(a1);
}

uint64_t sub_10001D56C(long long *a1)
{
  long long v2 = *a1;
  if (sub_1000C62F8(2, 17, 0, 0)) {
    return swift_getOpaqueTypeMetadata2();
  }
  else {
    return v2;
  }
}

uint64_t sub_10001D5E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (sub_1000C62F8(2, 17, 0, 0)) {
    return swift_getOpaqueTypeConformance2();
  }
  return v1;
}

uint64_t sub_10001D64C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10001D690(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t variable initialization expression of TodayIntentResponse.code()
{
  return 0;
}

uint64_t *sub_10001D6E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    uint64_t v22 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000CACC0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    __n128 v63 = a1;
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    size_t v11 = *(void **)((char *)a2 + v8);
    *uint64_t v9 = v11;
    uint64_t v12 = (int *)type metadata accessor for TodayContent();
    uint64_t v13 = v12[5];
    uint64_t v14 = (void *)((char *)v9 + v13);
    uint64_t v15 = &v10[v13];
    int v16 = (int *)type metadata accessor for Banner();
    uint64_t v17 = (void *)*((void *)v16 - 1);
    uint64_t v18 = (unsigned int (*)(char *, uint64_t, int *))v17[6];
    id v19 = v11;
    if (v18(v15, 1, v16))
    {
      uint64_t v20 = sub_10001D64C(&qword_10010DE20);
      memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v23 = *((void *)v15 + 1);
      *uint64_t v14 = *(void *)v15;
      v14[1] = v23;
      uint64_t v24 = *((void *)v15 + 3);
      __n128 v61 = v17;
      v14[2] = *((void *)v15 + 2);
      v14[3] = v24;
      uint64_t v25 = *((void *)v15 + 5);
      v14[4] = *((void *)v15 + 4);
      v14[5] = v25;
      uint64_t v26 = v16[7];
      __dst = (char *)v14 + v26;
      long long v59 = &v15[v26];
      uint64_t v27 = sub_1000CABE0();
      uint64_t v57 = *(void *)(v27 - 8);
      __n128 v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v60(v59, 1, v27))
      {
        uint64_t v28 = sub_10001D64C(&qword_10010F340);
        memcpy(__dst, v59, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v57 + 16))(__dst, v59, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(__dst, 0, 1, v27);
      }
      uint64_t v29 = v16[8];
      long long v30 = (void *)((char *)v14 + v29);
      long long v31 = &v15[v29];
      uint64_t v32 = *((void *)v31 + 1);
      *long long v30 = *(void *)v31;
      v30[1] = v32;
      uint64_t v33 = v16[9];
      long long v34 = *(void **)&v15[v33];
      swift_bridgeObjectRetain();
      if (v34 != (void *)1) {
        id v35 = v34;
      }
      *(void *)((char *)v14 + v33) = v34;
      uint64_t v36 = v16[10];
      __n128 v37 = (char *)v14 + v36;
      __int16 v38 = &v15[v36];
      int v39 = *(void **)v38;
      __int16 v40 = (void *)*((void *)v38 + 1);
      char v41 = v38[16];
      sub_10001DB84(*(void **)v38, v40);
      *(void *)__n128 v37 = v39;
      *((void *)v37 + 1) = v40;
      v37[16] = v41;
      (*((void (**)(void *, void, uint64_t, int *))v61 + 7))(v14, 0, 1, v16);
    }
    *(void *)((char *)v9 + v12[6]) = *(void *)&v10[v12[6]];
    *(void *)((char *)v9 + v12[7]) = *(void *)&v10[v12[7]];
    *((unsigned char *)v9 + v12[8]) = v10[v12[8]];
    uint64_t v42 = v12[9];
    __n128 v62 = (char *)v9 + v42;
    __n128 v43 = &v10[v42];
    uint64_t v44 = sub_1000CABE0();
    uint64_t v45 = *(void *)(v44 - 8);
    __n128 v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (v46(v43, 1, v44))
    {
      uint64_t v47 = sub_10001D64C(&qword_10010F340);
      memcpy(v62, v43, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v62, v43, v44);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v62, 0, 1, v44);
    }
    *(void *)((char *)v9 + v12[10]) = *(void *)&v10[v12[10]];
    uint64_t v48 = v12[11];
    __n128 v49 = (void *)((char *)v9 + v48);
    __n128 v50 = &v10[v48];
    uint64_t v51 = *((void *)v50 + 1);
    void *v49 = *(void *)v50;
    v49[1] = v51;
    uint64_t v52 = v12[12];
    long long v53 = (void *)((char *)v9 + v52);
    __n128 v54 = &v10[v52];
    uint64_t v55 = *((void *)v54 + 1);
    *long long v53 = *(void *)v54;
    v53[1] = v55;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v63;
  }
  return (uint64_t *)v22;
}

id sub_10001DB84(void *a1, void *a2)
{
  id v2 = a1;

  return a2;
}

uint64_t sub_10001DBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (id *)(a1 + *(int *)(a2 + 20));

  uint64_t v6 = type metadata accessor for TodayContent();
  uint64_t v7 = (char *)v5 + *(int *)(v6 + 20);
  uint64_t v8 = (int *)type metadata accessor for Banner();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v8 - 1) + 48))(v7, 1, v8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = &v7[v8[7]];
    uint64_t v10 = sub_1000CABE0();
    uint64_t v11 = *(void *)(v10 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void **)&v7[v8[9]];
    if (v12 != (void *)1) {

    }
    sub_10001DE30(*(void **)&v7[v8[10]], *(void **)&v7[v8[10] + 8]);
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v13 = (char *)v5 + *(int *)(v6 + 36);
  uint64_t v14 = sub_1000CABE0();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  }
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_10001DE30(void *a1, void *a2)
{
}

uint64_t sub_10001DE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v60 = a1;
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void **)(a2 + v7);
  *uint64_t v8 = v10;
  uint64_t v11 = (int *)type metadata accessor for TodayContent();
  uint64_t v12 = v11[5];
  uint64_t v13 = (void *)((char *)v8 + v12);
  uint64_t v14 = (void *)(v9 + v12);
  uint64_t v15 = (int *)type metadata accessor for Banner();
  int v16 = (void *)*((void *)v15 - 1);
  uint64_t v17 = (unsigned int (*)(void *, uint64_t, int *))v16[6];
  id v18 = v10;
  if (v17(v14, 1, v15))
  {
    uint64_t v19 = sub_10001D64C(&qword_10010DE20);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v20;
    uint64_t v21 = v14[3];
    v13[2] = v14[2];
    v13[3] = v21;
    uint64_t v22 = v14[5];
    v13[4] = v14[4];
    v13[5] = v22;
    uint64_t v23 = v15[7];
    __dst = (char *)v13 + v23;
    long long v58 = v16;
    uint64_t v55 = (char *)v14 + v23;
    uint64_t v24 = sub_1000CABE0();
    uint64_t v54 = *(void *)(v24 - 8);
    uint64_t v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v56(v55, 1, v24))
    {
      uint64_t v25 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v55, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(__dst, v55, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v24);
    }
    uint64_t v26 = v15[8];
    uint64_t v27 = (void *)((char *)v13 + v26);
    uint64_t v28 = (void *)((char *)v14 + v26);
    uint64_t v29 = v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = v15[9];
    long long v31 = *(void **)((char *)v14 + v30);
    swift_bridgeObjectRetain();
    if (v31 != (void *)1) {
      id v32 = v31;
    }
    *(void *)((char *)v13 + v30) = v31;
    uint64_t v33 = v15[10];
    long long v34 = (char *)v13 + v33;
    id v35 = (char *)v14 + v33;
    uint64_t v36 = *(void **)v35;
    __n128 v37 = (void *)*((void *)v35 + 1);
    char v38 = v35[16];
    sub_10001DB84(*(void **)v35, v37);
    *(void *)long long v34 = v36;
    *((void *)v34 + 1) = v37;
    v34[16] = v38;
    (*((void (**)(void *, void, uint64_t, int *))v58 + 7))(v13, 0, 1, v15);
  }
  *(void *)((char *)v8 + v11[6]) = *(void *)(v9 + v11[6]);
  *(void *)((char *)v8 + v11[7]) = *(void *)(v9 + v11[7]);
  *((unsigned char *)v8 + v11[8]) = *(unsigned char *)(v9 + v11[8]);
  uint64_t v39 = v11[9];
  long long v59 = (char *)v8 + v39;
  __int16 v40 = (const void *)(v9 + v39);
  uint64_t v41 = sub_1000CABE0();
  uint64_t v42 = *(void *)(v41 - 8);
  __n128 v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  if (v43(v40, 1, v41))
  {
    uint64_t v44 = sub_10001D64C(&qword_10010F340);
    memcpy(v59, v40, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v42 + 16))(v59, v40, v41);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v59, 0, 1, v41);
  }
  *(void *)((char *)v8 + v11[10]) = *(void *)(v9 + v11[10]);
  uint64_t v45 = v11[11];
  __n128 v46 = (void *)((char *)v8 + v45);
  uint64_t v47 = (void *)(v9 + v45);
  uint64_t v48 = v47[1];
  *__n128 v46 = *v47;
  v46[1] = v48;
  uint64_t v49 = v11[12];
  __n128 v50 = (void *)((char *)v8 + v49);
  uint64_t v51 = (void *)(v9 + v49);
  uint64_t v52 = v51[1];
  *__n128 v50 = *v51;
  v50[1] = v52;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v60;
}

uint64_t sub_10001E2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v85 = a1;
  uint64_t v8 = (void **)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void **)(a2 + v7);
  uint64_t v11 = *v8;
  *uint64_t v8 = v10;
  id v12 = v10;

  uint64_t v13 = (int *)type metadata accessor for TodayContent();
  uint64_t v14 = v13[5];
  uint64_t v15 = (void **)((char *)v8 + v14);
  int v16 = (void *)(v9 + v14);
  uint64_t v17 = (int *)type metadata accessor for Banner();
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, int *))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (v21)
    {
      sub_100020308((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_7;
    }
    *uint64_t v15 = *v16;
    v15[1] = v16[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v15[2] = v16[2];
    v15[3] = v16[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v15[4] = v16[4];
    v15[5] = v16[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v26 = v17[7];
    uint64_t v27 = (char *)v15 + v26;
    __dsta = (char *)v16 + v26;
    uint64_t v28 = sub_1000CABE0();
    uint64_t v81 = *(void *)(v28 - 8);
    long long v82 = v27;
    uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48);
    LODWORD(v27) = v29(v27, 1, v28);
    int v30 = v29(__dsta, 1, v28);
    if (v27)
    {
      if (v30)
      {
        size_t v31 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        id v32 = v82;
LABEL_17:
        memcpy(v32, __dsta, v31);
        goto LABEL_20;
      }
      (*(void (**)(void *, char *, uint64_t))(v81 + 16))(v82, __dsta, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v81 + 56))(v82, 0, 1, v28);
    }
    else
    {
      if (v30)
      {
        (*(void (**)(void *, uint64_t))(v81 + 8))(v82, v28);
        size_t v31 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        id v32 = v82;
        goto LABEL_17;
      }
      (*(void (**)(void *, char *, uint64_t))(v81 + 24))(v82, __dsta, v28);
    }
LABEL_20:
    uint64_t v45 = v17[8];
    __n128 v46 = (void *)((char *)v15 + v45);
    uint64_t v47 = (void *)((char *)v16 + v45);
    *__n128 v46 = *v47;
    v46[1] = v47[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v48 = v17[9];
    uint64_t v49 = (void *)((char *)v15 + v48);
    __n128 v50 = *(void **)((char *)v15 + v48);
    uint64_t v51 = *(void **)((char *)v16 + v48);
    if (v50 == (void *)1)
    {
      if (v51 != (void *)1)
      {
        void *v49 = v51;
        id v52 = v51;
LABEL_27:
        uint64_t v54 = v17[10];
        uint64_t v55 = (char *)v15 + v54;
        uint64_t v56 = (char *)v16 + v54;
        uint64_t v57 = *(void **)v56;
        long long v58 = (void *)*((void *)v56 + 1);
        char v59 = v56[16];
        sub_10001DB84(*(void **)v56, v58);
        uint64_t v60 = *(void **)v55;
        __n128 v61 = (void *)*((void *)v55 + 1);
        *(void *)uint64_t v55 = v57;
        *((void *)v55 + 1) = v58;
        _OWORD v55[16] = v59;
        sub_10001DE30(v60, v61);
        goto LABEL_28;
      }
    }
    else
    {
      if (v51 != (void *)1)
      {
        void *v49 = v51;
        id v53 = v51;

        goto LABEL_27;
      }
      sub_10001EA8C((uint64_t)v15 + v48);
      uint64_t v51 = *(void **)((char *)v16 + v48);
    }
    void *v49 = v51;
    goto LABEL_27;
  }
  if (v21)
  {
LABEL_7:
    uint64_t v25 = sub_10001D64C(&qword_10010DE20);
    memcpy(v15, v16, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_28;
  }
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  v15[2] = v16[2];
  v15[3] = v16[3];
  v15[4] = v16[4];
  v15[5] = v16[5];
  uint64_t v22 = v17[7];
  __dst = (char *)v15 + v22;
  unint64_t v79 = (char *)v16 + v22;
  uint64_t v23 = sub_1000CABE0();
  uint64_t v78 = *(void *)(v23 - 8);
  v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v80(v79, 1, v23))
  {
    uint64_t v24 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v79, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(__dst, v79, v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(__dst, 0, 1, v23);
  }
  uint64_t v33 = v17[8];
  long long v34 = (void *)((char *)v15 + v33);
  id v35 = (void *)((char *)v16 + v33);
  *long long v34 = *v35;
  v34[1] = v35[1];
  uint64_t v36 = v17[9];
  __n128 v37 = *(void **)((char *)v16 + v36);
  swift_bridgeObjectRetain();
  if (v37 != (void *)1) {
    id v38 = v37;
  }
  *(void *)((char *)v15 + v36) = v37;
  uint64_t v39 = v17[10];
  __int16 v40 = (char *)v15 + v39;
  uint64_t v41 = (char *)v16 + v39;
  uint64_t v42 = *(void **)v41;
  __n128 v43 = (void *)*((void *)v41 + 1);
  char v44 = v41[16];
  sub_10001DB84(*(void **)v41, v43);
  *(void *)__int16 v40 = v42;
  *((void *)v40 + 1) = v43;
  v40[16] = v44;
  (*(void (**)(void *, void, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
LABEL_28:
  *(void **)((char *)v8 + v13[6]) = *(void **)(v9 + v13[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void **)((char *)v8 + v13[7]) = *(void **)(v9 + v13[7]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *((unsigned char *)v8 + v13[8]) = *(unsigned char *)(v9 + v13[8]);
  uint64_t v62 = v13[9];
  __n128 v63 = (char *)v8 + v62;
  __n128 v64 = (char *)(v9 + v62);
  uint64_t v65 = sub_1000CABE0();
  uint64_t v66 = *(void *)(v65 - 8);
  long long v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
  int v68 = v67(v63, 1, v65);
  int v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v66 + 24))(v63, v64, v65);
      goto LABEL_34;
    }
    (*(void (**)(char *, uint64_t))(v66 + 8))(v63, v65);
    goto LABEL_33;
  }
  if (v69)
  {
LABEL_33:
    uint64_t v70 = sub_10001D64C(&qword_10010F340);
    memcpy(v63, v64, *(void *)(*(void *)(v70 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v63, v64, v65);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
LABEL_34:
  *(void **)((char *)v8 + v13[10]) = *(void **)(v9 + v13[10]);
  swift_retain();
  swift_release();
  uint64_t v71 = v13[11];
  long long v72 = (void **)((char *)v8 + v71);
  long long v73 = (void *)(v9 + v71);
  *long long v72 = *v73;
  v72[1] = v73[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v74 = v13[12];
  v75 = (void **)((char *)v8 + v74);
  uint64_t v76 = (void *)(v9 + v74);
  void *v75 = *v76;
  v75[1] = v76[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v85;
}

uint64_t sub_10001EA8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001EAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for TodayContent();
  uint64_t v11 = v10[5];
  id v12 = (_OWORD *)(v8 + v11);
  uint64_t v13 = (_OWORD *)(v9 + v11);
  uint64_t v14 = (int *)type metadata accessor for Banner();
  uint64_t v15 = *((void *)v14 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_10001D64C(&qword_10010DE20);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *id v12 = *v13;
    v12[1] = v17;
    v12[2] = v13[2];
    uint64_t v18 = v14[7];
    uint64_t v33 = a1;
    __dst = (char *)v12 + v18;
    uint64_t v19 = (char *)v13 + v18;
    uint64_t v20 = sub_1000CABE0();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(__dst, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    *(_OWORD *)((char *)v12 + v14[8]) = *(_OWORD *)((char *)v13 + v14[8]);
    *(void *)((char *)v12 + v14[9]) = *(void *)((char *)v13 + v14[9]);
    uint64_t v23 = v14[10];
    uint64_t v24 = (char *)v12 + v23;
    uint64_t v25 = (char *)v13 + v23;
    v24[16] = v25[16];
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
    a1 = v33;
  }
  *(void *)(v8 + v10[6]) = *(void *)(v9 + v10[6]);
  *(void *)(v8 + v10[7]) = *(void *)(v9 + v10[7]);
  *(unsigned char *)(v8 + v10[8]) = *(unsigned char *)(v9 + v10[8]);
  uint64_t v26 = v10[9];
  uint64_t v27 = (void *)(v8 + v26);
  uint64_t v28 = (const void *)(v9 + v26);
  uint64_t v29 = sub_1000CABE0();
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = sub_10001D64C(&qword_10010F340);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v27, v28, v29);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  *(void *)(v8 + v10[10]) = *(void *)(v9 + v10[10]);
  *(_OWORD *)(v8 + v10[11]) = *(_OWORD *)(v9 + v10[11]);
  *(_OWORD *)(v8 + v10[12]) = *(_OWORD *)(v9 + v10[12]);
  return a1;
}

uint64_t sub_10001EE8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v79 = a1;
  uint64_t v8 = (void **)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *v8;
  *uint64_t v8 = *(void **)(a2 + v7);

  uint64_t v11 = (int *)type metadata accessor for TodayContent();
  uint64_t v12 = v11[5];
  uint64_t v13 = (void **)((char *)v8 + v12);
  uint64_t v14 = (void *)(v9 + v12);
  uint64_t v15 = (int *)type metadata accessor for Banner();
  uint64_t v16 = *((void *)v15 - 1);
  long long v17 = *(uint64_t (**)(void *, uint64_t, int *))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      sub_100020308((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_7;
    }
    uint64_t v27 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v27;
    swift_bridgeObjectRelease();
    uint64_t v28 = v14[3];
    v13[2] = v14[2];
    v13[3] = v28;
    swift_bridgeObjectRelease();
    uint64_t v29 = v14[5];
    v13[4] = v14[4];
    v13[5] = v29;
    swift_bridgeObjectRelease();
    uint64_t v30 = v15[7];
    uint64_t v31 = (char *)v13 + v30;
    __dsta = (char *)v14 + v30;
    uint64_t v32 = sub_1000CABE0();
    uint64_t v75 = *(void *)(v32 - 8);
    uint64_t v76 = v31;
    uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48);
    LODWORD(v31) = v33(v31, 1, v32);
    int v34 = v33(__dsta, 1, v32);
    if (v31)
    {
      if (v34)
      {
        size_t v35 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v36 = v76;
LABEL_15:
        memcpy(v36, __dsta, v35);
        goto LABEL_18;
      }
      (*(void (**)(void *, char *, uint64_t))(v75 + 32))(v76, __dsta, v32);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v75 + 56))(v76, 0, 1, v32);
    }
    else
    {
      if (v34)
      {
        (*(void (**)(void *, uint64_t))(v75 + 8))(v76, v32);
        size_t v35 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v36 = v76;
        goto LABEL_15;
      }
      (*(void (**)(void *, char *, uint64_t))(v75 + 40))(v76, __dsta, v32);
    }
LABEL_18:
    uint64_t v40 = v15[8];
    uint64_t v41 = (void *)((char *)v13 + v40);
    uint64_t v42 = (void *)((char *)v14 + v40);
    uint64_t v44 = *v42;
    uint64_t v43 = v42[1];
    void *v41 = v44;
    v41[1] = v43;
    swift_bridgeObjectRelease();
    uint64_t v45 = v15[9];
    __n128 v46 = (void *)((char *)v13 + v45);
    uint64_t v47 = *(void **)((char *)v13 + v45);
    uint64_t v48 = *(void *)((char *)v14 + v45);
    if (v47 != (void *)1)
    {
      if (v48 != 1)
      {
        *__n128 v46 = v48;

        goto LABEL_23;
      }
      sub_10001EA8C((uint64_t)v13 + v45);
      uint64_t v48 = *(void *)((char *)v14 + v45);
    }
    *__n128 v46 = v48;
LABEL_23:
    uint64_t v49 = v15[10];
    __n128 v50 = (char *)v13 + v49;
    uint64_t v51 = (char *)v14 + v49;
    char v52 = v51[16];
    id v53 = *(void **)v50;
    uint64_t v54 = (void *)*((void *)v50 + 1);
    *(_OWORD *)__n128 v50 = *(_OWORD *)v51;
    v50[16] = v52;
    sub_10001DE30(v53, v54);
    goto LABEL_24;
  }
  if (v19)
  {
LABEL_7:
    uint64_t v26 = sub_10001D64C(&qword_10010DE20);
    memcpy(v13, v14, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_24;
  }
  long long v20 = *((_OWORD *)v14 + 1);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v20;
  *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
  uint64_t v21 = v15[7];
  __dst = (char *)v13 + v21;
  uint64_t v22 = (char *)v14 + v21;
  uint64_t v23 = sub_1000CABE0();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(__dst, v22, v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
  }
  *(_OWORD *)((char *)v13 + v15[8]) = *(_OWORD *)((char *)v14 + v15[8]);
  *(void *)((char *)v13 + v15[9]) = *(void *)((char *)v14 + v15[9]);
  uint64_t v37 = v15[10];
  id v38 = (char *)v13 + v37;
  uint64_t v39 = (char *)v14 + v37;
  v38[16] = v39[16];
  *(_OWORD *)id v38 = *(_OWORD *)v39;
  (*(void (**)(void *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
LABEL_24:
  *(void **)((char *)v8 + v11[6]) = *(void **)(v9 + v11[6]);
  swift_bridgeObjectRelease();
  *(void **)((char *)v8 + v11[7]) = *(void **)(v9 + v11[7]);
  swift_unknownObjectRelease();
  *((unsigned char *)v8 + v11[8]) = *(unsigned char *)(v9 + v11[8]);
  uint64_t v55 = v11[9];
  uint64_t v56 = (char *)v8 + v55;
  uint64_t v57 = (char *)(v9 + v55);
  uint64_t v58 = sub_1000CABE0();
  uint64_t v59 = *(void *)(v58 - 8);
  uint64_t v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  int v61 = v60(v56, 1, v58);
  int v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v56, v57, v58);
      goto LABEL_30;
    }
    (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v58);
    goto LABEL_29;
  }
  if (v62)
  {
LABEL_29:
    uint64_t v63 = sub_10001D64C(&qword_10010F340);
    memcpy(v56, v57, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v56, v57, v58);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
LABEL_30:
  *(void **)((char *)v8 + v11[10]) = *(void **)(v9 + v11[10]);
  swift_release();
  uint64_t v64 = v11[11];
  uint64_t v65 = (void **)((char *)v8 + v64);
  uint64_t v66 = (uint64_t *)(v9 + v64);
  uint64_t v68 = *v66;
  uint64_t v67 = v66[1];
  *uint64_t v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease();
  uint64_t v69 = v11[12];
  uint64_t v70 = (void **)((char *)v8 + v69);
  uint64_t v71 = (uint64_t *)(v9 + v69);
  uint64_t v73 = *v71;
  uint64_t v72 = v71[1];
  *uint64_t v70 = v73;
  v70[1] = v72;
  swift_bridgeObjectRelease();
  return v79;
}

uint64_t sub_10001F53C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001F550);
}

uint64_t sub_10001F550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for TodayContent();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10001F648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001F65C);
}

uint64_t sub_10001F65C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1000CACC0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for TodayContent();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for NewsTimelineEntry()
{
  uint64_t result = qword_10010DE80;
  if (!qword_10010DE80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001F7AC()
{
  uint64_t result = sub_1000CACC0();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for TodayContent();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void type metadata accessor for FTTrackableStackLocation(uint64_t a1)
{
}

void type metadata accessor for FTTrackableStackKind(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for MessageView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_10001F8D4(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10001F8E0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001F900(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for FCFeedPersonalizationConfigurationSet(uint64_t a1)
{
}

void type metadata accessor for FTEventTrackingWidgetAppearanceType(uint64_t a1)
{
}

uint64_t sub_10001F968(uint64_t a1, uint64_t a2)
{
  return sub_10001FBC4(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10001F988(uint64_t a1, uint64_t a2)
{
  return sub_10001FBC4(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10001F9AC(uint64_t a1, id *a2)
{
  uint64_t result = sub_1000CC1D0();
  *a2 = 0;
  return result;
}

uint64_t sub_10001FA24(uint64_t a1, id *a2)
{
  char v3 = sub_1000CC1E0();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_10001FAA4@<X0>(void *a1@<X8>)
{
  sub_1000CC1F0();
  NSString v2 = sub_1000CC1C0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

NSNumber sub_10001FAE8()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_10001FAF0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000CADD0();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t sub_10001FB44(uint64_t a1, uint64_t a2)
{
  char v3 = sub_1000CADE0();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t sub_10001FB9C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1000CADF0();
  *a1 = v3;
  return result;
}

uint64_t sub_10001FBC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1000CC1F0();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10001FC08()
{
  sub_1000CC1F0();
  sub_1000CC270();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001FC5C()
{
  sub_1000CC1F0();
  sub_1000CCAC0();
  sub_1000CC270();
  Swift::Int v0 = sub_1000CCAF0();
  swift_bridgeObjectRelease();
  return v0;
}

BOOL sub_10001FCD0(void *a1, void *a2)
{
  return *a1 == *a2;
}

void sub_10001FCE4(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10001FCF4()
{
  uint64_t v0 = sub_1000CC1F0();
  uint64_t v2 = v1;
  if (v0 == sub_1000CC1F0() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1000CCA30();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_10001FD84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000CC1F0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10001FDB0()
{
  sub_1000201F8(&qword_10010E3E0, type metadata accessor for URLResourceKey);
  sub_1000201F8(&qword_10010E3E8, type metadata accessor for URLResourceKey);

  return sub_1000CC8E0();
}

uint64_t sub_10001FE6C()
{
  sub_1000201F8((unint64_t *)&qword_10010E418, type metadata accessor for AttributeName);
  sub_1000201F8((unint64_t *)&unk_10010E420, type metadata accessor for AttributeName);

  return sub_1000CC8E0();
}

uint64_t sub_10001FF28@<X0>(void *a1@<X8>)
{
  NSString v2 = sub_1000CC1C0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10001FF70()
{
  sub_1000201F8(&qword_10010E408, type metadata accessor for TraitKey);
  sub_1000201F8(&qword_10010E410, type metadata accessor for TraitKey);

  return sub_1000CC8E0();
}

void *sub_10002002C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

double sub_10002003C@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

uint64_t sub_100020048()
{
  return sub_1000CC8E0();
}

void *sub_100020110(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100020154()
{
  unint64_t result = qword_10010E308;
  if (!qword_10010E308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E308);
  }
  return result;
}

uint64_t sub_1000201A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000201F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100020240(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TodayContent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000202A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NewsTimelineEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100020308(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *initializeBufferWithCopyOfBuffer for NewsTimelineEntry.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NewsTimelineEntry.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NewsTimelineEntry.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000204D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1000204F8(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100020504(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NewsTimelineEntry.CodingKeys()
{
  return &type metadata for NewsTimelineEntry.CodingKeys;
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for Weight(uint64_t a1)
{
}

void type metadata accessor for TraitKey(uint64_t a1)
{
}

void type metadata accessor for AttributeName(uint64_t a1)
{
}

__n128 initializeWithTake for ImageColorAnalysisResult(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for SourceView.LayoutOptions(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SourceView.LayoutOptions(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void sub_1000205EC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_100020634()
{
  return sub_1000201F8(&qword_10010E368, type metadata accessor for AttributeName);
}

uint64_t sub_10002067C()
{
  return sub_1000201F8(&qword_10010E370, type metadata accessor for AttributeName);
}

uint64_t sub_1000206C4()
{
  return sub_1000201F8(&qword_10010E378, type metadata accessor for TraitKey);
}

uint64_t sub_10002070C()
{
  return sub_1000201F8(&qword_10010E380, type metadata accessor for TraitKey);
}

uint64_t sub_100020754()
{
  return sub_1000201F8(&qword_10010E388, type metadata accessor for TraitKey);
}

uint64_t sub_10002079C()
{
  return sub_1000201F8(&qword_10010E390, type metadata accessor for Weight);
}

uint64_t sub_1000207E4()
{
  return sub_1000201F8(&qword_10010E398, type metadata accessor for Weight);
}

uint64_t sub_10002082C()
{
  return Double.hashValue.getter(*v0);
}

void sub_100020834()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  sub_1000CCAE0(v1);
}

uint64_t sub_100020868(uint64_t a1)
{
  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  return static Hasher._hash(seed:_:)(a1, v2);
}

BOOL sub_100020878(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10002088C()
{
  return sub_1000201F8(&qword_10010E3A0, type metadata accessor for Weight);
}

uint64_t sub_1000208D4()
{
  return sub_1000201F8(&qword_10010E3A8, type metadata accessor for URLResourceKey);
}

uint64_t sub_10002091C()
{
  return sub_1000201F8(&qword_10010E3B0, type metadata accessor for URLResourceKey);
}

unint64_t sub_100020968()
{
  unint64_t result = qword_10010E3B8;
  if (!qword_10010E3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E3B8);
  }
  return result;
}

unint64_t sub_1000209C0()
{
  unint64_t result = qword_10010E3C0;
  if (!qword_10010E3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E3C0);
  }
  return result;
}

unint64_t sub_100020A18()
{
  unint64_t result = qword_10010E3C8;
  if (!qword_10010E3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E3C8);
  }
  return result;
}

uint64_t sub_100020A6C()
{
  return sub_1000201F8(&qword_10010E3D0, type metadata accessor for URLResourceKey);
}

uint64_t sub_100020AB4()
{
  return sub_1000201F8(&qword_10010E3D8, type metadata accessor for AttributeName);
}

uint64_t sub_100020AFC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1000CCA30();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_100020BE0()
{
  unint64_t result = qword_10010E400;
  if (!qword_10010E400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E400);
  }
  return result;
}

uint64_t sub_100020C50()
{
  sub_1000201A8(v0 + 16);
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for EntryStore()
{
  return self;
}

uint64_t sub_100020CC4(uint64_t a1)
{
  uint64_t v3 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000CABE0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v48 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t v12 = type metadata accessor for NewsTimelineEntry();
  uint64_t v13 = *(int *)(v12 + 20);
  uint64_t v46 = a1;
  uint64_t v14 = (uint64_t *)(a1 + v13 + *(int *)(type metadata accessor for TodayContent() + 44));
  uint64_t v15 = (void *)v14[1];
  if (v15)
  {
    uint64_t v43 = v12;
    uint64_t v16 = *v14;
    sub_100020110((void *)(v1 + 16), *(void *)(v1 + 40));
    uint64_t v44 = v11;
    swift_bridgeObjectRetain();
    v47[0] = sub_1000241D0();
    v47[1] = v17;
    swift_bridgeObjectRetain();
    v49._countAndFlagsBits = 45;
    v49._object = (void *)0xE100000000000000;
    sub_1000CC2B0(v49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v42 = v16;
    v50._countAndFlagsBits = v16;
    v50._object = v15;
    sub_1000CC2B0(v50);
    swift_bridgeObjectRelease();
    int v18 = v44;
    sub_1000CAB70();
    swift_bridgeObjectRelease();
    sub_1000CAB80();
    sub_1000CAA70();
    swift_allocObject();
    sub_1000CAA60();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v5, v18, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    int v19 = (void (*)(void *, void))sub_1000CAA50();
    sub_100021248((uint64_t)v5);
    v19(v47, 0);
    sub_100022814(&qword_10010E720);
    uint64_t v20 = v45;
    uint64_t v21 = sub_1000CAA40();
    if (v20)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v23 = *(void (**)(char *, uint64_t))(v7 + 8);
      v23(v48, v6);
      return ((uint64_t (*)(char *, uint64_t))v23)(v18, v6);
    }
    else
    {
      unint64_t v26 = v22;
      uint64_t v45 = v7;
      uint64_t v46 = v21;
      sub_10001D64C((uint64_t *)&unk_10010E840);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_1000D34A0;
      *(void *)(v27 + 56) = &type metadata for String;
      unint64_t v28 = sub_1000225F0();
      *(void *)(v27 + 64) = v28;
      *(void *)(v27 + 32) = v42;
      *(void *)(v27 + 40) = v15;
      uint64_t v29 = 0;
      unint64_t v30 = v28;
      switch(v26 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v46), v46))
          {
            __break(1u);
LABEL_13:
            __break(1u);
            JUMPOUT(0x1000211E4);
          }
          uint64_t v29 = HIDWORD(v46) - (int)v46;
LABEL_10:
          id v33 = [self stringFromByteCount:v29 countStyle:0];
          uint64_t v34 = sub_1000CC1F0();
          uint64_t v36 = v35;

          *(void *)(v27 + 96) = &type metadata for String;
          *(void *)(v27 + 104) = v30;
          *(void *)(v27 + 72) = v34;
          *(void *)(v27 + 80) = v36;
          sub_100022644();
          uint64_t v37 = (void *)sub_1000CC630();
          sub_1000CC530();
          sub_1000CB230();
          swift_bridgeObjectRelease();

          id v38 = v48;
          uint64_t v39 = v46;
          sub_1000CAC20();
          sub_100022684(v39, v26);
          swift_release();
          uint64_t v40 = *(void (**)(char *, uint64_t))(v45 + 8);
          v40(v38, v6);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v40)(v44, v6);
          break;
        case 2uLL:
          uint64_t v32 = *(void *)(v46 + 16);
          uint64_t v31 = *(void *)(v46 + 24);
          uint64_t v29 = v31 - v32;
          if (!__OFSUB__(v31, v32)) {
            goto LABEL_10;
          }
          goto LABEL_13;
        case 3uLL:
          goto LABEL_10;
        default:
          uint64_t v29 = BYTE6(v26);
          goto LABEL_10;
      }
    }
  }
  else
  {
    sub_1000211F4();
    swift_allocError();
    *uint64_t v25 = 1;
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_1000211F4()
{
  unint64_t result = qword_10010E718;
  if (!qword_10010E718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E718);
  }
  return result;
}

uint64_t sub_100021248(uint64_t a1)
{
  uint64_t v2 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10001D64C(&qword_10010E728);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000CC840();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CC830();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    sub_1000226DC(a1, (uint64_t)v4);
    uint64_t v13 = sub_1000CABE0();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
    {
      sub_1000227A8((uint64_t)v4, &qword_10010F340);
      long long v16 = 0u;
      long long v17 = 0u;
    }
    else
    {
      *((void *)&v17 + 1) = v13;
      uint64_t v15 = sub_100022744((uint64_t *)&v16);
      (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(v15, v4, v13);
    }
    sub_1000224D0((uint64_t)&v16, (uint64_t)v11);
    return sub_1000227A8(a1, &qword_10010F340);
  }
  return result;
}

uint64_t sub_1000214C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v57 = type metadata accessor for NewsTimelineEntry();
  uint64_t v55 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v54 = (uint64_t)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10001D64C(&qword_10010F340);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v50 - v7;
  uint64_t v9 = sub_1000CABE0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v50 - v14;
  sub_100020110((void *)(v1 + 16), *(void *)(v1 + 40));
  sub_100023F78((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1000227A8((uint64_t)v8, &qword_10010F340);
    uint64_t v16 = 1;
    uint64_t v17 = v56;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v17, v16, 1, v57);
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
  sub_1000CAB80();
  int v19 = v59;
  uint64_t v20 = sub_1000CABF0();
  uint64_t v22 = (uint64_t)v19;
  if (!v19)
  {
    unint64_t v24 = v21;
    uint64_t v59 = v13;
    uint64_t v25 = v20;
    sub_1000CAA30();
    swift_allocObject();
    uint64_t v26 = sub_1000CAA20();
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v6, v15, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
    id v53 = v15;
    uint64_t v27 = v9;
    unint64_t v28 = (void (*)(char *, void))sub_1000CAA10();
    sub_100021248((uint64_t)v6);
    v28(v58, 0);
    sub_100022814(&qword_10010E730);
    uint64_t v29 = v54;
    uint64_t v30 = v57;
    sub_1000CAA00();
    uint64_t v50 = v26;
    uint64_t v51 = v27;
    uint64_t v52 = v25;
    sub_10001D64C((uint64_t *)&unk_10010E840);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_1000D34A0;
    uint64_t v32 = *(int *)(v30 + 20);
    id v33 = (uint64_t *)(v29 + v32 + *(int *)(type metadata accessor for TodayContent() + 44));
    uint64_t v35 = *v33;
    unint64_t v34 = v33[1];
    *(void *)(v31 + 56) = &type metadata for String;
    unint64_t v36 = sub_1000225F0();
    *(void *)(v31 + 64) = v36;
    if (v34) {
      uint64_t v37 = v35;
    }
    else {
      uint64_t v37 = 0;
    }
    unint64_t v38 = 0xE000000000000000;
    if (v34) {
      unint64_t v38 = v34;
    }
    *(void *)(v31 + 32) = v37;
    *(void *)(v31 + 40) = v38;
    unint64_t v39 = v36;
    switch(v24 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v52), v52))
        {
          __break(1u);
LABEL_18:
          __break(1u);
          JUMPOUT(0x100021AB4);
        }
        uint64_t v22 = HIDWORD(v52) - (int)v52;
LABEL_16:
        uint64_t v42 = self;
        swift_bridgeObjectRetain();
        id v43 = [v42 stringFromByteCount:v22 countStyle:0];
        uint64_t v44 = sub_1000CC1F0();
        uint64_t v46 = v45;

        *(void *)(v31 + 96) = &type metadata for String;
        *(void *)(v31 + 104) = v39;
        *(void *)(v31 + 72) = v44;
        *(void *)(v31 + 80) = v46;
        sub_100022644();
        uint64_t v47 = (void *)sub_1000CC630();
        sub_1000CC530();
        sub_1000CB230();
        swift_release();
        swift_bridgeObjectRelease();

        sub_100022684(v52, v24);
        uint64_t v48 = *(void (**)(char *, uint64_t))(v10 + 8);
        uint64_t v49 = v51;
        v48(v59, v51);
        v48(v53, v49);
        uint64_t v17 = v56;
        sub_100022858(v54, v56);
        uint64_t v16 = 0;
        break;
      case 2uLL:
        uint64_t v41 = *(void *)(v52 + 16);
        uint64_t v40 = *(void *)(v52 + 24);
        uint64_t v22 = v40 - v41;
        if (!__OFSUB__(v40, v41)) {
          goto LABEL_16;
        }
        goto LABEL_18;
      case 3uLL:
        goto LABEL_16;
      default:
        uint64_t v22 = BYTE6(v24);
        goto LABEL_16;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v17, v16, 1, v57);
  }
  uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23(v13, v9);
  return ((uint64_t (*)(char *, uint64_t))v23)(v15, v9);
}

uint64_t static Tag.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Int sub_100021ACC()
{
  return sub_1000CCAF0();
}

void sub_100021B10()
{
}

Swift::Int sub_100021B38()
{
  return sub_1000CCAF0();
}

uint64_t sub_100021B78()
{
  return 0x656D614E656C6966;
}

uint64_t sub_100021B90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x656D614E656C6966 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1000CCA30();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_100021C28(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100021C34(uint64_t a1)
{
  unint64_t v2 = sub_1000231A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100021C70(uint64_t a1)
{
  unint64_t v2 = sub_1000231A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_100021CAC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100021CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001D64C(&qword_10010E728);
  __chkstk_darwin();
  char v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000CC840();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CC830();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    if (*(void *)(a1 + 16) && (unint64_t v11 = sub_10003CBE8((uint64_t)v9), (v12 & 1) != 0))
    {
      sub_100023250(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v16);
    }
    else
    {
      long long v16 = 0u;
      long long v17 = 0u;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (*((void *)&v17 + 1))
    {
      uint64_t v13 = sub_1000CABE0();
      int v14 = swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a2, v14 ^ 1u, 1, v13);
    }
    else
    {
      sub_1000227A8((uint64_t)&v16, &qword_10010EF90);
      uint64_t v15 = sub_1000CABE0();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a2, 1, 1, v15);
    }
  }
  return result;
}

uint64_t sub_100021F24(void *a1, UIImage *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a4;
  uint64_t v45 = a3;
  uint64_t v46 = a2;
  uint64_t v5 = sub_1000CAB20();
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  __chkstk_darwin(v5);
  unint64_t v38 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001D64C(&qword_10010E758);
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  __chkstk_darwin(v7);
  uint64_t v49 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000CABE0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  long long v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  int v18 = (char *)&v37 - v17;
  sub_100020110(a1, a1[3]);
  uint64_t v19 = sub_1000CCB20();
  sub_100021CC0(v19, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1000227A8((uint64_t)v11, &qword_10010F340);
    sub_100023154();
    swift_allocError();
    *uint64_t v20 = 0;
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
    uint64_t v22 = UIImagePNGRepresentation(v46);
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v37 = sub_1000CAC10();
      uint64_t v46 = v24;

      sub_100020110(a1, a1[3]);
      sub_1000231A8();
      sub_1000CCB30();
      uint64_t v47 = v45;
      uint64_t v48 = v42;
      uint64_t v25 = v38;
      uint64_t v26 = v39;
      uint64_t v27 = v40;
      (*(void (**)(char *, void, uint64_t))(v39 + 104))(v38, enum case for URL.DirectoryHint.notDirectory(_:), v40);
      sub_1000231FC();
      swift_bridgeObjectRetain();
      sub_1000CABD0();
      uint64_t v28 = v37;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v27);
      uint64_t v29 = v46;
      swift_bridgeObjectRelease();
      uint64_t v30 = v41;
      sub_1000CAC20();
      if (v30)
      {
        sub_100022684(v28, (unint64_t)v29);
        uint64_t v31 = *(void (**)(char *, uint64_t))(v13 + 8);
        v31(v16, v12);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v49, v44);
        return ((uint64_t (*)(char *, uint64_t))v31)(v18, v12);
      }
      else
      {
        uint64_t v33 = v28;
        uint64_t v34 = v44;
        uint64_t v35 = v49;
        sub_1000CC9B0();
        sub_100022684(v33, (unint64_t)v29);
        unint64_t v36 = *(void (**)(char *, uint64_t))(v13 + 8);
        v36(v16, v12);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v35, v34);
        return ((uint64_t (*)(char *, uint64_t))v36)(v18, v12);
      }
    }
    else
    {
      sub_100023154();
      swift_allocError();
      *uint64_t v32 = 2;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    }
  }
}

void (*sub_100022434@<X0>(void *a1@<X0>, void (**a2)(char *, uint64_t)@<X8>))(char *, uint64_t)
{
  uint64_t result = sub_100022BF0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

void sub_100022464(void *a1)
{
  uint64_t v3 = *(UIImage **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  sub_100021F24(a1, v3, v4, v5);
}

uint64_t sub_1000224D0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_100022804((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_100093320(v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1000CC840();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_1000227A8(a1, &qword_10010EF90);
    sub_1000AA6D4(a2, v9);
    uint64_t v7 = sub_1000CC840();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
    return sub_1000227A8((uint64_t)v9, &qword_10010EF90);
  }
}

unint64_t sub_1000225F0()
{
  unint64_t result = qword_10010E850;
  if (!qword_10010E850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E850);
  }
  return result;
}

unint64_t sub_100022644()
{
  unint64_t result = qword_100110C20;
  if (!qword_100110C20)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100110C20);
  }
  return result;
}

uint64_t sub_100022684(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1000226DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001D64C(&qword_10010F340);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100022744(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1000227A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10001D64C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *sub_100022804(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100022814(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NewsTimelineEntry();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100022858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NewsTimelineEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for EntryStore.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100022988);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EntryStore.Errors()
{
  return &type metadata for EntryStore.Errors;
}

uint64_t destroy for EntryStoreImage(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *_s7NewsTag15EntryStoreImageVwCP_0(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EntryStoreImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for EntryStoreImage(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for EntryStoreImage(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EntryStoreImage(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EntryStoreImage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EntryStoreImage()
{
  return &type metadata for EntryStoreImage;
}

unint64_t sub_100022B9C()
{
  unint64_t result = qword_10010E738;
  if (!qword_10010E738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E738);
  }
  return result;
}

void (*sub_100022BF0(void *a1))(char *, uint64_t)
{
  uint64_t v2 = sub_1000CAB20();
  uint64_t v38 = *(void *)(v2 - 8);
  uint64_t v39 = v2;
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v37 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10001D64C(&qword_10010E740);
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v42 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D64C(&qword_10010F340);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000CABE0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v34 - v13;
  sub_100020110(a1, a1[3]);
  uint64_t v15 = (void (*)(char *, uint64_t))sub_1000CCB00();
  sub_100021CC0((uint64_t)v15, (uint64_t)v7);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000227A8((uint64_t)v7, &qword_10010F340);
    sub_100023154();
    swift_allocError();
    *long long v16 = 0;
    swift_willThrow();
  }
  else
  {
    unint64_t v36 = v12;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    uint64_t v15 = (void (*)(char *, uint64_t))sub_100020110(a1, a1[3]);
    sub_1000231A8();
    uint64_t v17 = v42;
    uint64_t v18 = v45;
    sub_1000CCB10();
    if (v18)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
    else
    {
      uint64_t v35 = a1;
      uint64_t v45 = v8;
      v34[0] = sub_1000CC940();
      uint64_t v43 = v34[0];
      uint64_t v44 = v20;
      uint64_t v22 = v37;
      uint64_t v21 = v38;
      uint64_t v23 = *(void (**)(char *, void, uint64_t))(v38 + 104);
      uint64_t v24 = v39;
      v34[1] = v20;
      v23(v37, enum case for URL.DirectoryHint.notDirectory(_:), v39);
      sub_1000231FC();
      uint64_t v25 = v36;
      sub_1000CABD0();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v24);
      sub_1000CABB0();
      id v26 = objc_allocWithZone((Class)UIImage);
      NSString v27 = sub_1000CC1C0();
      swift_bridgeObjectRelease();
      uint64_t v15 = (void (*)(char *, uint64_t))[v26 initWithContentsOfFile:v27];

      if (v15)
      {
        uint64_t v28 = *(void (**)(char *, uint64_t))(v9 + 8);
        uint64_t v29 = v25;
        uint64_t v30 = v45;
        v28(v29, v45);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v41);
        v28(v14, v30);
        sub_1000201A8((uint64_t)v35);
        return v15;
      }
      swift_bridgeObjectRelease();
      sub_100023154();
      swift_allocError();
      *uint64_t v31 = 1;
      swift_willThrow();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v32 = v25;
      uint64_t v33 = v45;
      v15(v32, v45);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v41);
      v15(v14, v33);
      a1 = v35;
    }
  }
  sub_1000201A8((uint64_t)a1);
  return v15;
}

unint64_t sub_100023154()
{
  unint64_t result = qword_10010E748;
  if (!qword_10010E748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E748);
  }
  return result;
}

unint64_t sub_1000231A8()
{
  unint64_t result = qword_10010E750;
  if (!qword_10010E750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E750);
  }
  return result;
}

unint64_t sub_1000231FC()
{
  unint64_t result = qword_1001119F0;
  if (!qword_1001119F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001119F0);
  }
  return result;
}

uint64_t sub_100023250(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t getEnumTagSinglePayload for EntryStoreImage.Errors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for EntryStoreImage.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100023408);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *sub_100023430(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for EntryStoreImage.Errors()
{
  return &type metadata for EntryStoreImage.Errors;
}

uint64_t getEnumTagSinglePayload for EntryStoreImage.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for EntryStoreImage.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100023538);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100023560()
{
  return 0;
}

ValueMetadata *type metadata accessor for EntryStoreImage.CodingKeys()
{
  return &type metadata for EntryStoreImage.CodingKeys;
}

unint64_t sub_10002357C()
{
  unint64_t result = qword_10010E760;
  if (!qword_10010E760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E760);
  }
  return result;
}

unint64_t sub_1000235D4()
{
  unint64_t result = qword_10010E768;
  if (!qword_10010E768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E768);
  }
  return result;
}

unint64_t sub_10002362C()
{
  unint64_t result = qword_10010E770;
  if (!qword_10010E770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E770);
  }
  return result;
}

unint64_t sub_100023684()
{
  unint64_t result = qword_10010E778;
  if (!qword_10010E778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E778);
  }
  return result;
}

id sub_1000236D8()
{
  uint64_t v1 = OBJC_IVAR____TtC7NewsTag16WidgetAssetStore____lazy_storage___pruneThrottler;
  int v2 = *(void **)(v0 + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore____lazy_storage___pruneThrottler);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore____lazy_storage___pruneThrottler);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)FCOperationThrottler) initWithDelegate:v0];
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    int v2 = 0;
  }
  id v6 = v2;
  return v3;
}

void *sub_100023750()
{
  uint64_t v0 = sub_1000CABE0();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [self defaultManager];
  sub_1000CAB60(v5);
  BOOL v7 = v6;
  uint64_t v37 = 0;
  id v8 = [v4 contentsOfDirectoryAtURL:v6 includingPropertiesForKeys:0 options:4 error:&v37];

  id v9 = v37;
  if (!v8)
  {
    uint64_t v25 = v37;
    uint64_t v26 = sub_1000CAB00();

    swift_willThrow();
    id v27 = PrefetchLog();
    sub_1000CC510();
    sub_10001D64C((uint64_t *)&unk_10010E840);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1000D37C0;
    uint64_t v37 = 0;
    unint64_t v38 = 0xE000000000000000;
    uint64_t v36 = v26;
    sub_10001D64C((uint64_t *)&unk_10010E898);
    sub_1000CC820();
    uint64_t v29 = v37;
    unint64_t v30 = v38;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = sub_1000225F0();
    *(void *)(v28 + 32) = v29;
    *(void *)(v28 + 40) = v30;
    sub_1000CB230();

    swift_bridgeObjectRelease();
    swift_errorRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v10 = sub_1000CC3B0();
  id v11 = v9;

  int64_t v12 = *(void *)(v10 + 16);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v37 = _swiftEmptyArrayStorage;
  sub_100026E58(0, v12, 0);
  uint64_t v13 = v1 + 16;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  uint64_t v15 = *(unsigned __int8 *)(v1 + 80);
  v32[1] = v10;
  uint64_t v16 = v10 + ((v15 + 32) & ~v15);
  uint64_t v33 = *(void *)(v13 + 56);
  uint64_t v34 = v14;
  uint64_t v35 = v13;
  uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
  do
  {
    v34(v3, v16, v0);
    uint64_t v18 = sub_1000CAB50();
    uint64_t v20 = v19;
    (*v17)(v3, v0);
    uint64_t v21 = v37;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100026E58(0, v21[2] + 1, 1);
      uint64_t v21 = v37;
    }
    unint64_t v23 = v21[2];
    unint64_t v22 = v21[3];
    if (v23 >= v22 >> 1)
    {
      sub_100026E58(v22 > 1, v23 + 1, 1);
      uint64_t v21 = v37;
    }
    v21[2] = v23 + 1;
    uint64_t v24 = &v21[2 * v23];
    _OWORD v24[4] = v18;
    v24[5] = v20;
    v16 += v33;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_100023AE8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = a3;
  uint64_t v6 = sub_1000CABE0();
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v32 = (id)sub_1000241D0();
  uint64_t v33 = v9;
  swift_bridgeObjectRetain();
  v34._countAndFlagsBits = 45;
  v34._object = (void *)0xE100000000000000;
  sub_1000CC2B0(v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v35._countAndFlagsBits = a1;
  v35._object = a2;
  sub_1000CC2B0(v35);
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t)v32;
  uint64_t v10 = v33;
  uint64_t v29 = v3;
  sub_1000CAB70();
  id v12 = PrefetchLog();
  sub_1000CC500();
  sub_10001D64C((uint64_t *)&unk_10010E840);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1000D37C0;
  sub_100028B24((unint64_t *)&qword_100111C10, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v14 = sub_1000CCA20();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_1000225F0();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  sub_1000CB230();

  swift_bridgeObjectRelease();
  id v17 = [self defaultManager];
  sub_1000CAB60(v18);
  uint64_t v20 = v19;
  id v32 = 0;
  unsigned __int8 v21 = [v17 createDirectoryAtURL:v19 withIntermediateDirectories:1 attributes:0 error:&v32];

  id v23 = v32;
  if (v21)
  {
    id v32 = *(id *)(v29 + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_lock);
    __chkstk_darwin(v22);
    *(&v28 - 4) = v24;
    *(&v28 - 3) = v11;
    *(&v28 - 2) = v10;
    *(&v28 - 1) = (uint64_t)v8;
    sub_1000CAE50();
    id v25 = v23;
    swift_retain();
    sub_1000CAFF0();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    id v27 = v32;
    swift_bridgeObjectRelease();
    sub_1000CAB00();

    swift_willThrow();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v8, v6);
}

uint64_t sub_100023EAC@<X0>(Swift::Int a1@<X1>, Swift::Int a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_100025768(&v10, a1, a2);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_1000CABE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a4, a3, v8);
}

uint64_t sub_100023F78@<X0>(uint64_t a1@<X8>)
{
  v9[1] = *(void *)&v1[OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_lock];
  sub_1000CAE50();
  swift_retain();
  sub_10001D64C((uint64_t *)&unk_10010E880);
  sub_1000CAFF0();
  swift_release();
  uint64_t v3 = v1;
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_1000AB018(v4);
  swift_bridgeObjectRelease();
  v9[0] = (uint64_t)v5;
  sub_10002A080(v9, v3);
  swift_bridgeObjectRelease();

  if (*(void *)(v9[0] + 16))
  {
    swift_bridgeObjectRetain();
    swift_release();
    sub_1000CAB70();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_1000CABE0();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 0, 1, v6);
  }
  else
  {
    swift_release();
    uint64_t v8 = sub_1000CABE0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t sub_100024144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_keysOfInterest);
  swift_beginAccess();
  uint64_t v6 = *v5;
  v8[2] = a2;
  swift_bridgeObjectRetain();
  uint64_t result = sub_10002773C((uint64_t)sub_10002A36C, (uint64_t)v8, v6);
  *a3 = result;
  return result;
}

uint64_t sub_1000241D0()
{
  uint64_t v1 = v0;
  sub_10001D64C((uint64_t *)&unk_10010E860);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1000D37D0;
  uint64_t v3 = (void *)((char *)v0 + *(int *)(type metadata accessor for NewsWidgetInfo() + 24));
  uint64_t v4 = v3[1];
  *(void *)(v2 + 32) = *v3;
  *(void *)(v2 + 40) = v4;
  if (*v1)
  {
    uint64_t v5 = v1[1];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    uint64_t v8 = v7(ObjectType, v5);
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = 0xE300000000000000;
    uint64_t v8 = 7104878;
  }
  *(void *)(v2 + 48) = v8;
  *(void *)(v2 + 56) = v9;
  sub_1000CBEC0();
  sub_100028B24((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
  *(void *)(v2 + 64) = sub_1000CCA20();
  *(void *)(v2 + 72) = v10;
  sub_10001D64C(&qword_10010E870);
  sub_100026B14();
  uint64_t v11 = sub_1000CC150();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100024358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v5 = sub_10001D64C((uint64_t *)&unk_100111DE0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000CAAE0();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000CABE0();
  uint64_t v31 = *(void *)(v12 - 8);
  uint64_t v32 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CAB70();
  sub_10001D64C(&qword_10010E890);
  uint64_t inited = swift_initStackObject();
  long long v30 = xmmword_1000D37C0;
  *(_OWORD *)(inited + 16) = xmmword_1000D37C0;
  *(void *)(inited + 32) = NSURLCreationDateKey;
  uint64_t v16 = NSURLCreationDateKey;
  sub_100028A08(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  sub_1000CAB40();
  uint64_t v29 = a2;
  uint64_t v17 = a1;
  swift_bridgeObjectRelease();
  sub_1000CAAD0();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v18 = sub_1000CACC0();
  uint64_t v19 = *(void *)(v18 - 8);
  int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v7, 1, v18);
  uint64_t v22 = v32;
  uint64_t v21 = v33;
  uint64_t v23 = v31;
  if (v20 == 1)
  {
    sub_100028AC4((uint64_t)v7);
    id v24 = PrefetchLog();
    sub_1000CC510();
    sub_10001D64C((uint64_t *)&unk_10010E840);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = v30;
    *(void *)(v25 + 56) = &type metadata for String;
    *(void *)(v25 + 64) = sub_1000225F0();
    uint64_t v26 = v29;
    *(void *)(v25 + 32) = v17;
    *(void *)(v25 + 40) = v26;
    swift_bridgeObjectRetain();
    sub_1000CB230();

    swift_bridgeObjectRelease();
    _s7NewsTag16TelemetryManagerC13lastFlushDate33_4E4017AC2BCC1D1AC48C0D84A0E547E910Foundation0G0Vvpfi_0();
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v14, v22);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(v21, v7, v18);
  }
}

id WidgetPersonalizationConfigurationManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_100024934()
{
  return type metadata accessor for WidgetAssetStore();
}

uint64_t type metadata accessor for WidgetAssetStore()
{
  uint64_t result = qword_10010E7D0;
  if (!qword_10010E7D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100024988()
{
  uint64_t result = sub_1000CABE0();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100024A48()
{
  id v0 = PrefetchLog();
  sub_1000CC510();
  sub_10001D64C((uint64_t *)&unk_10010E840);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1000D37C0;
  type metadata accessor for NewsWidgetInfo();
  uint64_t v2 = sub_1000CC3C0();
  uint64_t v4 = v3;
  *(void *)(v1 + 56) = &type metadata for String;
  *(void *)(v1 + 64) = sub_1000225F0();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v4;
  sub_1000CB230();

  swift_bridgeObjectRelease();
  sub_1000CAE50();
  swift_retain();
  sub_1000CAFF0();
  return swift_release();
}

uint64_t sub_100024BA4(uint64_t a1, char *a2)
{
  uint64_t v4 = 0;
  uint64_t v83 = sub_1000CABE0();
  uint64_t v74 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v84 = (char *)v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NewsWidgetInfo();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  unint64_t v79 = (unint64_t)v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = &_swiftEmptySetSingleton;
  uint64_t v88 = &_swiftEmptySetSingleton;
  uint64_t v78 = *(char **)(a1 + 16);
  if (!v78) {
    goto LABEL_21;
  }
  uint64_t v10 = (uint64_t *)&a2[OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_keysOfInterest];
  *(void *)&long long v76 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v73[1] = a1;
  swift_bridgeObjectRetain();
  unint64_t v77 = v10;
  swift_beginAccess();
  uint64_t v11 = 0;
  uint64_t v75 = *(char **)(v7 + 72);
  do
  {
    uint64_t v12 = *v77;
    uint64_t v13 = v79;
    uint64_t v14 = sub_10002A118(v76 + (void)v75 * (void)v11, v79);
    __chkstk_darwin(v14);
    v73[-2] = v13;
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_10002773C((uint64_t)sub_10002A17C, (uint64_t)&v73[-4], v12);
    sub_10002A19C(v13);
    uint64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      uint64_t v80 = 0;
      uint64_t v81 = v11;
      sub_10001D64C((uint64_t *)&unk_10010E860);
      uint64_t v17 = (void *)swift_allocObject();
      int64_t v18 = j__malloc_size(v17);
      uint64_t v19 = v18 - 32;
      if (v18 < 32) {
        uint64_t v19 = v18 - 17;
      }
      v17[2] = v16;
      v17[3] = 2 * (v19 >> 4);
      *(void *)&long long v82 = sub_1000AB9F4((uint64_t)&v89, v17 + 4, v16, v15);
      swift_retain_n();
      int v20 = a2;
      sub_10002A1F8();
      if ((void)v82 != v16) {
        goto LABEL_50;
      }
      swift_release();
      uint64_t v4 = v80;
      uint64_t v11 = v81;
    }
    else
    {
      uint64_t v21 = a2;
      uint64_t v17 = _swiftEmptyArrayStorage;
    }
    unint64_t v89 = v17;
    uint64_t v22 = a2;
    sub_10002A080((uint64_t *)&v89, v22);
    if (v4)
    {

      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
    swift_release();

    uint64_t v23 = v89;
    unsigned int v86 = v89;
    uint64_t v24 = v89[2];
    uint64_t v25 = 2;
    if (v24 > 2) {
      uint64_t v25 = v89[2];
    }
    unint64_t v26 = v25 - 2;
    if (v25 != 2)
    {
      if (v24 < v26) {
        goto LABEL_51;
      }
      sub_10002A200(0, v26);
      uint64_t v23 = v86;
      uint64_t v24 = v86[2];
    }
    if (v24)
    {
      id v27 = v23 + 5;
      do
      {
        Swift::Int v28 = *(v27 - 1);
        Swift::Int v29 = *v27;
        swift_bridgeObjectRetain();
        sub_100025768((Swift::Int *)&v89, v28, v29);
        swift_bridgeObjectRelease();
        v27 += 2;
        --v24;
      }
      while (v24);
    }
    uint64_t v11 = (unint64_t *)((char *)v11 + 1);
    swift_bridgeObjectRelease();
  }
  while (v11 != (unint64_t *)v78);
  swift_bridgeObjectRelease();
  uint64_t v9 = v88;
LABEL_21:
  id v30 = PrefetchLog();
  sub_1000CC510();
  uint64_t v80 = sub_10001D64C((uint64_t *)&unk_10010E840);
  uint64_t v31 = swift_allocObject();
  long long v82 = xmmword_1000D37C0;
  *(_OWORD *)(v31 + 16) = xmmword_1000D37C0;
  swift_bridgeObjectRetain();
  uint64_t v32 = sub_1000CC4C0();
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  *(void *)(v31 + 56) = &type metadata for String;
  unint64_t v79 = sub_1000225F0();
  *(void *)(v31 + 64) = v79;
  *(void *)(v31 + 32) = v32;
  *(void *)(v31 + 40) = v34;
  sub_1000CB230();

  swift_bridgeObjectRelease();
  Swift::String v35 = &a2[OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_keysOfInterest];
  swift_beginAccess();
  uint64_t v36 = *(void **)v35;
  unint64_t v37 = v9[2];
  unint64_t v38 = *(void *)(*(void *)v35 + 16);
  uint64_t v75 = v35;
  if (v37 > v38 >> 3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_100027F0C((uint64_t)v9, (uint64_t)v36);
    swift_bridgeObjectRelease();
  }
  else
  {
    unsigned int v86 = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100027D64((uint64_t)v9);
    swift_bridgeObjectRelease();
    uint64_t v39 = v86;
  }
  uint64_t v40 = v84;
  id v41 = PrefetchLog();
  sub_1000CC510();
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = v82;
  uint64_t v43 = sub_1000CC4C0();
  unint64_t v44 = v79;
  *(void *)(v42 + 56) = &type metadata for String;
  *(void *)(v42 + 64) = v44;
  *(void *)(v42 + 32) = v43;
  *(void *)(v42 + 40) = v45;
  sub_1000CB230();

  swift_bridgeObjectRelease();
  uint64_t v46 = 0;
  unint64_t v47 = v39[7];
  uint64_t v81 = v39 + 7;
  uint64_t v48 = 1 << *((unsigned char *)v39 + 32);
  uint64_t v49 = -1;
  if (v48 < 64) {
    uint64_t v49 = ~(-1 << v48);
  }
  uint64_t i = v49 & v47;
  *(void *)&long long v82 = (unint64_t)(v48 + 63) >> 6;
  uint64_t v51 = (uint64_t *)(v74 + 8);
  long long v76 = xmmword_1000D34A0;
  uint64_t v78 = &a2[OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_directoryUrl];
  unint64_t v77 = (uint64_t *)(v74 + 8);
  if ((v49 & v47) != 0) {
    goto LABEL_29;
  }
LABEL_30:
  if (__OFADD__(v46++, 1))
  {
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v46 < (uint64_t)v82)
  {
    unint64_t v63 = v81[v46];
    if (v63)
    {
LABEL_40:
      for (uint64_t i = (v63 - 1) & v63; ; i &= i - 1)
      {
        swift_bridgeObjectRetain();
        sub_1000CAB70();
        swift_bridgeObjectRelease();
        id v65 = [self defaultManager];
        sub_1000CAB60(v66);
        uint64_t v68 = v67;
        unsigned int v86 = 0;
        unsigned int v69 = [v65 removeItemAtURL:v67 error:&v86];

        if (v69)
        {
          uint64_t v70 = (void (*)(char *, uint64_t))*v51;
          uint64_t v71 = v86;
          v70(v40, v83);
          if (!i) {
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v52 = v86;
          uint64_t v53 = sub_1000CAB00();

          swift_willThrow();
          id v54 = PrefetchLog();
          sub_1000CC510();
          uint64_t v55 = swift_allocObject();
          *(_OWORD *)(v55 + 16) = v76;
          sub_100028B24((unint64_t *)&qword_100111C10, (void (*)(uint64_t))&type metadata accessor for URL);
          uint64_t v56 = v83;
          uint64_t v57 = sub_1000CCA20();
          unint64_t v58 = v79;
          *(void *)(v55 + 56) = &type metadata for String;
          *(void *)(v55 + 64) = v58;
          *(void *)(v55 + 32) = v57;
          *(void *)(v55 + 40) = v59;
          unsigned int v86 = 0;
          unint64_t v87 = 0xE000000000000000;
          uint64_t v85 = v53;
          sub_10001D64C((uint64_t *)&unk_10010E898);
          sub_1000CC820();
          uint64_t v60 = v86;
          unint64_t v61 = v87;
          *(void *)(v55 + 96) = &type metadata for String;
          *(void *)(v55 + 104) = v58;
          *(void *)(v55 + 72) = v60;
          *(void *)(v55 + 80) = v61;
          sub_1000CB230();

          uint64_t v40 = v84;
          swift_bridgeObjectRelease();
          uint64_t v51 = v77;
          swift_errorRelease();
          ((void (*)(char *, uint64_t))*v51)(v40, v56);
          if (!i) {
            goto LABEL_30;
          }
        }
LABEL_29:
        ;
      }
    }
    uint64_t v64 = v46 + 1;
    if (v46 + 1 < (uint64_t)v82)
    {
      unint64_t v63 = v81[v64];
      if (v63) {
        goto LABEL_39;
      }
      uint64_t v64 = v46 + 2;
      if (v46 + 2 < (uint64_t)v82)
      {
        unint64_t v63 = v81[v64];
        if (v63) {
          goto LABEL_39;
        }
        uint64_t v64 = v46 + 3;
        if (v46 + 3 < (uint64_t)v82)
        {
          unint64_t v63 = v81[v64];
          if (v63)
          {
LABEL_39:
            uint64_t v46 = v64;
            goto LABEL_40;
          }
          while (1)
          {
            uint64_t v46 = v64 + 1;
            if (__OFADD__(v64, 1)) {
              break;
            }
            if (v46 >= (uint64_t)v82) {
              goto LABEL_48;
            }
            unint64_t v63 = v81[v46];
            ++v64;
            if (v63) {
              goto LABEL_40;
            }
          }
LABEL_52:
          __break(1u);
        }
      }
    }
  }
LABEL_48:
  swift_release();
  *(void *)uint64_t v75 = v88;
  return swift_bridgeObjectRelease();
}

BOOL sub_100025564()
{
  v2._countAndFlagsBits = sub_1000241D0();
  BOOL v0 = sub_1000CC320(v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000255BC()
{
  id v0 = PrefetchLog();
  sub_1000CC500();
  sub_10001D64C((uint64_t *)&unk_10010E840);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1000D37C0;
  sub_10001D64C((uint64_t *)&unk_10010E898);
  sub_1000CC820();
  *(void *)(v1 + 56) = &type metadata for String;
  *(void *)(v1 + 64) = sub_1000225F0();
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0xE000000000000000;
  sub_1000CB230();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002575C@<X0>(uint64_t a1@<X8>)
{
  return sub_100023EAC(v1[3], v1[4], v1[5], a1);
}

uint64_t sub_100025768(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  sub_1000CCAC0();
  swift_bridgeObjectRetain();
  sub_1000CC270();
  Swift::Int v8 = sub_1000CCAF0();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1000CCA30() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      int64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1000CCA30() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100026138(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100025918(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  sub_1000CC1F0();
  sub_1000CCAC0();
  swift_bridgeObjectRetain();
  sub_1000CC270();
  Swift::Int v7 = sub_1000CCAF0();
  swift_bridgeObjectRelease();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v24 = a2;
    sub_1000262D4((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1;
  }
  uint64_t v10 = sub_1000CC1F0();
  uint64_t v12 = v11;
  if (v10 == sub_1000CC1F0() && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = sub_1000CCA30();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = ~v8;
      do
      {
        unint64_t v9 = (v9 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v17 = sub_1000CC1F0();
        uint64_t v19 = v18;
        if (v17 == sub_1000CC1F0() && v19 == v20) {
          goto LABEL_16;
        }
        char v22 = sub_1000CCA30();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  unint64_t v26 = *(void **)(*(void *)(*v3 + 48) + 8 * v9);
  *a1 = v26;
  id v27 = v26;
  return 0;
}

uint64_t sub_100025B44()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10001D64C(&qword_10010E858);
  uint64_t v3 = sub_1000CC730();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    id v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_1000CCAC0();
      sub_1000CC270();
      uint64_t result = sub_1000CCAF0();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100025E24()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10001D64C(&qword_10010E8A8);
  uint64_t v3 = sub_1000CC730();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    BOOL v27 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v29 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v28 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v28) {
          goto LABEL_33;
        }
        unint64_t v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v28) {
            goto LABEL_33;
          }
          unint64_t v15 = v29[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v28) {
              goto LABEL_33;
            }
            unint64_t v15 = v29[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v27;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v28) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v29[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      sub_1000CC1F0();
      sub_1000CCAC0();
      sub_1000CC270();
      Swift::Int v18 = sub_1000CCAF0();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = v18 & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v8 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int sub_100026138(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100025B44();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100026504();
      goto LABEL_22;
    }
    sub_100026864();
  }
  uint64_t v11 = *v4;
  sub_1000CCAC0();
  sub_1000CC270();
  uint64_t result = sub_1000CCAF0();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_1000CCA30(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_1000CCA50();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        Swift::Int v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_1000CCA30();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  Swift::Int *v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1000262D4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  if (a3)
  {
    sub_100025E24();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_1000266B8();
LABEL_22:
      uint64_t v25 = *v4;
      *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(void *)(*(void *)(v25 + 48) + 8 * a2) = v6;
      uint64_t v26 = *(void *)(v25 + 16);
      BOOL v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (!v27)
      {
        *(void *)(v25 + 16) = v28;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_100026B78();
  }
  uint64_t v9 = *v3;
  sub_1000CC1F0();
  sub_1000CCAC0();
  sub_1000CC270();
  Swift::Int v10 = sub_1000CCAF0();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v12 = sub_1000CC1F0();
  uint64_t v14 = v13;
  if (v12 == sub_1000CC1F0() && v14 == v15)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  char v17 = sub_1000CCA30();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    uint64_t v18 = ~v11;
    do
    {
      a2 = (a2 + 1) & v18;
      if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v19 = sub_1000CC1F0();
      uint64_t v21 = v20;
      if (v19 == sub_1000CC1F0() && v21 == v22) {
        goto LABEL_25;
      }
      char v24 = sub_1000CCA30();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v24 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for URLResourceKey(0);
  uint64_t result = sub_1000CCA50();
  __break(1u);
  return result;
}

void *sub_100026504()
{
  uint64_t v1 = v0;
  sub_10001D64C(&qword_10010E858);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1000CC720();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    char v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1000266B8()
{
  uint64_t v1 = v0;
  sub_10001D64C(&qword_10010E8A8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1000CC720();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    char v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100026864()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10001D64C(&qword_10010E858);
  uint64_t v3 = sub_1000CC730();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_1000CCAC0();
    swift_bridgeObjectRetain();
    sub_1000CC270();
    uint64_t result = sub_1000CCAF0();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_100026B14()
{
  unint64_t result = qword_10010E878;
  if (!qword_10010E878)
  {
    sub_10001D690(&qword_10010E870);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E878);
  }
  return result;
}

uint64_t sub_100026B70@<X0>(uint64_t *a1@<X8>)
{
  return sub_100024144(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100026B78()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10001D64C(&qword_10010E8A8);
  uint64_t v3 = sub_1000CC730();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v27 = v0;
  uint64_t v28 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v13);
    sub_1000CC1F0();
    sub_1000CCAC0();
    id v18 = v17;
    sub_1000CC270();
    Swift::Int v19 = sub_1000CCAF0();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v27;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100026E58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100026E98(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100026E78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000271A8(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100026E98(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10001D64C((uint64_t *)&unk_10010E860);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1000CC8D0();
  __break(1u);
  return result;
}

uint64_t sub_100027004(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10001D64C(&qword_10010E8B8);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_10001D64C(&qword_10010E8C0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1000CC8D0();
  __break(1u);
  return result;
}

uint64_t sub_1000271A8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10001D64C((uint64_t *)&unk_10010E8D0);
  uint64_t v10 = *(void *)(type metadata accessor for NewsWidgetInfo() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for NewsWidgetInfo() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  id v18 = (char *)v13 + v17;
  Swift::Int v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  unint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = sub_1000CC8D0();
  __break(1u);
  return result;
}

char *sub_1000273E8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10001D64C(&qword_10010E8B0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000274E4(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)sub_1000CC8D0();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_1000275A0(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -40)
  {
    uint64_t result = (char *)sub_1000CC8D0();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
    {
      return (char *)memmove(result, v3, 40 * v6);
    }
  }
  return result;
}

char *sub_10002766C(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)sub_1000CC8D0();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_100027728(uint64_t a1)
{
  return sub_1000273E8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10002773C(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t (*)(void *))isStackAllocationSafe;
  char v6 = *(unsigned char *)(a3 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = sub_1000278C0((uint64_t)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a3, v5);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = sub_1000278C0((uint64_t)v10, v7, a3, v5);
    swift_release();
    swift_slowDealloc();
  }
  return v9;
}

uint64_t sub_1000278C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *))
{
  uint64_t v20 = (unint64_t *)result;
  int64_t v7 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v24 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v7 << 6);
LABEL_17:
    uint64_t v16 = (void *)(*(void *)(a3 + 48) + 16 * v12);
    uint64_t v17 = v16[1];
    v23[0] = *v16;
    v23[1] = v17;
    swift_bridgeObjectRetain();
    char v18 = a4(v23);
    uint64_t result = swift_bridgeObjectRelease();
    if (v4) {
      return result;
    }
    if (v18)
    {
      *(unint64_t *)((char *)v20 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = __OFADD__(v21++, 1);
      if (v13) {
        goto LABEL_30;
      }
    }
  }
  BOOL v13 = __OFADD__(v7++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v24) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v7);
  if (v14)
  {
LABEL_16:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_17;
  }
  int64_t v15 = v7 + 1;
  if (v7 + 1 >= v24) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 2;
  if (v7 + 2 >= v24) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 3;
  if (v7 + 3 >= v24)
  {
LABEL_26:
    swift_retain();
    return sub_100027ACC(v20, a2, v21, a3);
  }
  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v7 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v7 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v7 >= v24) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v7);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100027ACC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10001D64C(&qword_10010E858);
  uint64_t result = sub_1000CC740();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    sub_1000CCAC0();
    swift_bridgeObjectRetain();
    sub_1000CC270();
    uint64_t result = sub_1000CCAF0();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100027D64(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_10002837C(v12, v13);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

unint64_t *sub_100027F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v36) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v36) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v36) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v36) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  sub_10002A1F8();
                  return (unint64_t *)v2;
                }
                unint64_t v13 = *(void *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      break;
                    }
                    if (v14 >= v36) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v37 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }
LABEL_49:
                  __break(1u);
                }
                int64_t v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        unint64_t v7 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        int64_t v9 = v14;
      }
      int64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      sub_1000CCAC0();
      swift_bridgeObjectRetain();
      sub_1000CC270();
      Swift::Int v19 = sub_1000CCAF0();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = *(void *)(v2 + 48);
    unint64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (sub_1000CCA30() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        BOOL v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (sub_1000CCA30() & 1) == 0);
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v29 = *(unsigned char *)(v2 + 32);
    unint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    size_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_10002850C((unint64_t *)((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0)), v30, v2, v21, &v38);
      swift_release();
      sub_10002A1F8();
    }
    else
    {
      uint64_t v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_10002850C((unint64_t *)v33, v30, v2, v21, &v38);
      swift_release();
      sub_10002A1F8();
      swift_slowDealloc();
    }
    return v32;
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_10002837C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_1000CCAC0();
  swift_bridgeObjectRetain();
  sub_1000CC270();
  Swift::Int v6 = sub_1000CCAF0();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (sub_1000CCA30() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      int64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (sub_1000CCA30() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100026504();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_100028804(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t *sub_10002850C(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v39 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v40 = a3 + 56;
  while (2)
  {
    uint64_t v38 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_45;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_45;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_15;
            }
            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_45;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v15 = v14 - 1;
                int64_t v36 = v9 + 6;
                while (v14 != v36)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    int64_t v13 = v36 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return (unint64_t *)sub_100027ACC(v39, a2, v38, a3);
              }
              goto LABEL_15;
            }
          }
          int64_t v13 = v18;
        }
LABEL_15:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        int64_t v9 = v13;
LABEL_16:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        sub_1000CCAC0();
        swift_bridgeObjectRetain();
        sub_1000CC270();
        Swift::Int v22 = sub_1000CCAF0();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v40 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_3;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        uint64_t v28 = (void *)(v27 + 16 * v24);
        BOOL v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (sub_1000CCA30() & 1) != 0) {
          break;
        }
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          uint64_t v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (sub_1000CCA30() & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_23;
          }
        }
LABEL_3:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      }
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_23:
      unint64_t v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v38 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

unint64_t sub_100028804(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_1000CC6E0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        sub_1000CCAC0();
        swift_bridgeObjectRetain();
        sub_1000CC270();
        Swift::Int v10 = sub_1000CCAF0();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          int64_t v13 = (_OWORD *)(v12 + 16 * v2);
          int64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *int64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000289CC(uint64_t a1)
{
  return sub_100026E98(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000289E0(void *a1)
{
  return sub_100027004(0, a1[2], 0, a1);
}

uint64_t sub_1000289F4(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100028A08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for URLResourceKey(0);
  sub_100028B24(&qword_10010E3E0, type metadata accessor for URLResourceKey);
  uint64_t result = sub_1000CC4D0();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_100025918(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_100028AC4(uint64_t a1)
{
  uint64_t v2 = sub_10001D64C((uint64_t *)&unk_100111DE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100028B24(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100028B70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_1000CC4D0();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100025768(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100028C08()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100028C40()
{
  return sub_10007D888(*(void *)(v0 + 16));
}

void sub_100028C48(uint64_t a1, uint64_t a2)
{
  id v5 = PrefetchLog();
  sub_1000CC500();
  sub_1000CB230();

  sub_10001D64C(&qword_10010E8C8);
  sub_1000CB0A0();
  *(void *)(swift_allocObject() + 16) = v2;
  id v6 = v2;
  Swift::Int v7 = (void *)sub_1000CB010();
  sub_1000CB030();
  swift_release();
  swift_release();

  uint64_t v8 = (void *)sub_1000CB010();
  sub_1000CB040();
  swift_release();

  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  swift_retain();
  Swift::Int v10 = (void *)sub_1000CB010();
  sub_1000CB060();
  swift_release();
  swift_release();
  swift_release();
}

uint64_t sub_100028E00()
{
  sub_100020110((void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_infoService), *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_infoService + 24));
  sub_1000CBFB0();
  return sub_100099640();
}

uint64_t sub_100028E78()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100028EB0()
{
  return sub_100024A48();
}

uint64_t sub_100028ECC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100028F04()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100028F2C()
{
  return sub_100024BA4(*(void *)(v0 + 16), *(char **)(v0 + 24));
}

uint64_t sub_100028F34(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  id v51 = a5;
  uint64_t v54 = sub_1000CACC0();
  uint64_t v9 = *(void *)(v54 - 8);
  uint64_t v10 = __chkstk_darwin(v54);
  uint64_t v53 = (uint64_t)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v52 = (uint64_t)&v44 - v12;
  uint64_t v13 = (char *)a2 - (char *)a1;
  uint64_t v14 = (char *)a2 - (char *)a1 + 15;
  if ((char *)a2 - (char *)a1 >= 0) {
    uint64_t v14 = (char *)a2 - (char *)a1;
  }
  uint64_t v15 = v14 >> 4;
  uint64_t v50 = a3;
  uint64_t v16 = (char *)a3 - (char *)a2;
  uint64_t v17 = v16 / 16;
  unint64_t v58 = a1;
  uint64_t v57 = a4;
  if (v14 >> 4 >= v16 / 16)
  {
    if (v16 < -15) {
      goto LABEL_43;
    }
    if (a4 != a2 || &a2[2 * v17] <= a4) {
      memmove(a4, a2, 16 * v17);
    }
    BOOL v29 = &a4[2 * v17];
    uint64_t v56 = v29;
    unint64_t v58 = a2;
    if (v16 < 16 || a1 >= a2) {
      goto LABEL_42;
    }
    uint64_t v45 = (void (**)(uint64_t, uint64_t))(v9 + 8);
    uint64_t v46 = a4;
    unint64_t v30 = v50 - 2;
    uint64_t v31 = a2;
    uint64_t v55 = a1;
    uint64_t v32 = v52;
    while (1)
    {
      uint64_t v50 = a2;
      uint64_t v48 = v29;
      uint64_t v49 = v30 + 2;
      uint64_t v34 = *(v29 - 2);
      uint64_t v33 = *(v29 - 1);
      v29 -= 2;
      uint64_t v35 = *(v31 - 2);
      uint64_t v36 = *(v31 - 1);
      v31 -= 2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100024358(v34, v33, v32);
      uint64_t v37 = v53;
      sub_100024358(v35, v36, v53);
      int v47 = sub_1000CAC60();
      uint64_t v38 = *v45;
      uint64_t v39 = v37;
      uint64_t v40 = v54;
      (*v45)(v39, v54);
      v38(v32, v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v47)
      {
        BOOL v29 = v48;
        if (v49 != v50 || v30 >= v50) {
          *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
        }
        unint64_t v58 = v31;
      }
      else
      {
        uint64_t v56 = v29;
        if (v49 >= v48 && v30 < v48)
        {
          unint64_t v41 = (unint64_t)v46;
          unint64_t v42 = v55;
          uint64_t v31 = v50;
          if (v49 != v48) {
            *(_OWORD *)unint64_t v30 = *(_OWORD *)v29;
          }
          goto LABEL_40;
        }
        *(_OWORD *)unint64_t v30 = *(_OWORD *)v29;
        uint64_t v31 = v50;
      }
      unint64_t v41 = (unint64_t)v46;
      unint64_t v42 = v55;
LABEL_40:
      if ((unint64_t)v29 > v41)
      {
        v30 -= 2;
        a2 = v31;
        if (v31 > v42) {
          continue;
        }
      }
      goto LABEL_42;
    }
  }
  if (v13 >= -15)
  {
    if (a4 != a1 || &a1[2 * v15] <= a4) {
      memmove(a4, a1, 16 * v15);
    }
    uint64_t v49 = &a4[2 * v15];
    uint64_t v56 = v49;
    if (v13 >= 16 && a2 < v50)
    {
      uint64_t v48 = (uint64_t *)(v9 + 8);
      do
      {
        uint64_t v55 = a1;
        uint64_t v19 = *a2;
        uint64_t v18 = a2[1];
        uint64_t v21 = *a4;
        uint64_t v20 = a4[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v22 = v52;
        sub_100024358(v19, v18, v52);
        uint64_t v23 = v53;
        sub_100024358(v21, v20, v53);
        LOBYTE(v21) = sub_1000CAC60();
        unint64_t v24 = (void (*)(uint64_t, uint64_t))*v48;
        uint64_t v25 = v23;
        uint64_t v26 = v54;
        ((void (*)(uint64_t, uint64_t))*v48)(v25, v54);
        v24(v22, v26);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v21)
        {
          uint64_t v27 = a2 + 2;
          uint64_t v28 = v55;
          if (v55 < a2 || v55 >= v27 || v55 != a2) {
            *(_OWORD *)uint64_t v55 = *(_OWORD *)a2;
          }
        }
        else
        {
          uint64_t v28 = v55;
          if (v55 != a4) {
            *(_OWORD *)uint64_t v55 = *(_OWORD *)a4;
          }
          a4 += 2;
          uint64_t v57 = a4;
          uint64_t v27 = a2;
        }
        a1 = v28 + 2;
        unint64_t v58 = a1;
        if (a4 >= v49) {
          break;
        }
        a2 = v27;
      }
      while (v27 < v50);
    }
LABEL_42:
    sub_1000274E4((void **)&v58, (const void **)&v57, &v56);
    return 1;
  }
LABEL_43:

  uint64_t result = sub_1000CC8D0();
  __break(1u);
  return result;
}

uint64_t sub_1000293E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v32 = a5;
  uint64_t v29 = a1;
  uint64_t v35 = sub_1000CACC0();
  uint64_t v8 = __chkstk_darwin(v35);
  uint64_t v34 = (uint64_t)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v33 = (char *)&v27 - v12;
  uint64_t v28 = a2;
  if (a3 != a2)
  {
    uint64_t v13 = *a4;
    uint64_t v31 = (void (**)(uint64_t, uint64_t))(v11 + 8);
    uint64_t v36 = v13;
    uint64_t v14 = (uint64_t *)(v13 + 16 * a3);
    uint64_t v15 = (uint64_t)v33;
LABEL_5:
    uint64_t v16 = (uint64_t *)(v36 + 16 * a3);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v29;
    unint64_t v30 = v14;
    uint64_t v37 = a3;
    while (1)
    {
      uint64_t v21 = *(v14 - 2);
      uint64_t v20 = *(v14 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100024358(v17, v18, v15);
      uint64_t v22 = v34;
      sub_100024358(v21, v20, v34);
      int v38 = sub_1000CAC60();
      uint64_t v23 = *v31;
      uint64_t v24 = v22;
      uint64_t v25 = v35;
      (*v31)(v24, v35);
      v23(v15, v25);
      swift_bridgeObjectRelease();
      uint64_t v26 = v37;
      uint64_t result = swift_bridgeObjectRelease();
      if ((v38 & 1) == 0)
      {
LABEL_4:
        a3 = v26 + 1;
        uint64_t v14 = v30 + 2;
        if (a3 == v28) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v36) {
        break;
      }
      uint64_t v17 = *v14;
      uint64_t v18 = v14[1];
      *(_OWORD *)uint64_t v14 = *((_OWORD *)v14 - 1);
      *(v14 - 1) = v18;
      *(v14 - 2) = v17;
      v14 -= 2;
      if (v26 == ++v19) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

void sub_100029608(uint64_t *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v150 = sub_1000CACC0();
  uint64_t v6 = *(void *)(v150 - 8);
  uint64_t v7 = __chkstk_darwin(v150);
  uint64_t v149 = (uint64_t)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v148 = (uint64_t)&v136 - v9;
  Swift::Int v10 = a1[1];
  uint64_t v11 = a2;
  Swift::Int v12 = sub_1000CCA10(v10);
  if (v12 >= v10)
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      if (v10)
      {
        uint64_t v16 = v11;
        sub_1000293E0(0, v10, 1, a1, (uint64_t)v16);
      }
      else
      {
      }
      goto LABEL_114;
    }
    goto LABEL_138;
  }
  if (v10 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v10 + 1;
  }
  if (v10 < -1)
  {
LABEL_146:

    sub_1000CC860();
    __break(1u);
    return;
  }
  v137 = (uint64_t **)a1;
  Swift::Int v138 = v12;
  v153 = v11;
  Swift::Int v141 = v10;
  if (v10 < 2)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    v143 = &_swiftEmptyArrayStorage[4];
    if (v10 != 1)
    {
      unint64_t v21 = _swiftEmptyArrayStorage[2];
      uint64_t v19 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_102;
    }
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = (uint64_t *)sub_1000CC410();
    v15[2] = v14;
    v143 = v15 + 4;
  }
  uint64_t v17 = 0;
  uint64_t v18 = *v137;
  v147 = (uint64_t *)(v6 + 8);
  v136 = v18 + 3;
  uint64_t v19 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v20 = v141;
  v152 = v18;
  v144 = v15;
  while (1)
  {
    uint64_t v22 = (uint64_t)v17 + 1;
    v145 = v17;
    if ((uint64_t)v17 + 1 >= v20)
    {
      uint64_t v34 = v17;
    }
    else
    {
      v140 = v19;
      uint64_t v23 = &v18[2 * v22];
      uint64_t v24 = *v23;
      uint64_t v25 = v23[1];
      uint64_t v26 = &v18[2 * (void)v145];
      uint64_t v27 = *v26;
      uint64_t v28 = v26[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v29 = v148;
      sub_100024358(v24, v25, v148);
      uint64_t v30 = v149;
      sub_100024358(v27, v28, v149);
      LODWORD(v154) = sub_1000CAC60();
      uint64_t v31 = (void (*)(uint64_t, uint64_t))*v147;
      uint64_t v32 = v30;
      uint64_t v33 = v150;
      ((void (*)(uint64_t, uint64_t))*v147)(v32, v150);
      v31(v29, v33);
      uint64_t v34 = v145;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v22 = (uint64_t)v34 + 2;
      if ((uint64_t)v34 + 2 < v20)
      {
        uint64_t v139 = v3;
        uint64_t v35 = &v136[2 * (void)v34];
        uint64_t v36 = v35;
        while (1)
        {
          uint64_t v37 = v22;
          uint64_t v38 = v36[2];
          v36 += 2;
          uint64_t v40 = *(v35 - 1);
          uint64_t v39 = *v35;
          uint64_t v41 = v35[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v42 = v148;
          sub_100024358(v41, v38, v148);
          uint64_t v43 = v149;
          sub_100024358(v40, v39, v149);
          LODWORD(v40) = sub_1000CAC60();
          uint64_t v44 = v43;
          uint64_t v45 = v150;
          v31(v44, v150);
          v31(v42, v45);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v154 ^ v40)) {
            break;
          }
          uint64_t v22 = v37 + 1;
          uint64_t v35 = v36;
          if (v141 == v37 + 1)
          {
            uint64_t v22 = v141;
            uint64_t v3 = v139;
            goto LABEL_23;
          }
        }
        uint64_t v3 = v139;
        uint64_t v22 = v37;
LABEL_23:
        uint64_t v15 = v144;
        uint64_t v34 = v145;
      }
      uint64_t v19 = v140;
      uint64_t v18 = v152;
      uint64_t v11 = v153;
      if (v154)
      {
        if (v22 < (uint64_t)v34) {
          goto LABEL_139;
        }
        if ((uint64_t)v34 < v22)
        {
          uint64_t v46 = 2 * v22;
          uint64_t v47 = 2 * (void)v34;
          uint64_t v48 = v22;
          uint64_t v49 = v34;
          do
          {
            if (v49 != (uint64_t *)--v48)
            {
              if (!v18) {
                goto LABEL_144;
              }
              uint64_t v50 = &v18[v46];
              uint64_t v51 = v18[v47];
              uint64_t v52 = v18[v47 + 1];
              *(_OWORD *)&v18[v47] = *(_OWORD *)&v18[v46 - 2];
              *(v50 - 2) = v51;
              *(v50 - 1) = v52;
            }
            uint64_t v49 = (uint64_t *)((char *)v49 + 1);
            v46 -= 2;
            v47 += 2;
          }
          while ((uint64_t)v49 < v48);
        }
      }
    }
    if (v22 < v141)
    {
      if (__OFSUB__(v22, v34)) {
        goto LABEL_137;
      }
      if (v22 - (uint64_t)v34 < v138)
      {
        uint64_t v53 = (char *)v34 + v138;
        if (__OFADD__(v34, v138)) {
          goto LABEL_140;
        }
        if ((uint64_t)v53 >= v141) {
          uint64_t v53 = (char *)v141;
        }
        if ((uint64_t)v53 < (uint64_t)v34) {
          goto LABEL_141;
        }
        if ((char *)v22 != v53)
        {
          uint64_t v139 = v3;
          v140 = v19;
          uint64_t v54 = &v18[2 * v22];
          v142 = v53;
          do
          {
            v151 = (uint64_t *)v22;
            uint64_t v55 = &v18[2 * v22];
            uint64_t v56 = *v55;
            uint64_t v57 = v55[1];
            unint64_t v58 = v34;
            v146 = v54;
            while (1)
            {
              uint64_t v60 = *(v54 - 2);
              uint64_t v59 = *(v54 - 1);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v61 = v148;
              sub_100024358(v56, v57, v148);
              uint64_t v62 = v149;
              sub_100024358(v60, v59, v149);
              LODWORD(v154) = sub_1000CAC60();
              uint64_t v11 = v147;
              unint64_t v63 = (void (*)(uint64_t, uint64_t))*v147;
              uint64_t v64 = v62;
              uint64_t v65 = v150;
              ((void (*)(uint64_t, uint64_t))*v147)(v64, v150);
              v63(v61, v65);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v154 & 1) == 0) {
                break;
              }
              uint64_t v18 = v152;
              if (!v152) {
                goto LABEL_142;
              }
              uint64_t v56 = *v54;
              uint64_t v57 = v54[1];
              *(_OWORD *)uint64_t v54 = *((_OWORD *)v54 - 1);
              *(v54 - 1) = v57;
              *(v54 - 2) = v56;
              v54 -= 2;
              unint64_t v58 = (uint64_t *)((char *)v58 + 1);
              if (v151 == v58) {
                goto LABEL_43;
              }
            }
            uint64_t v18 = v152;
LABEL_43:
            uint64_t v22 = (uint64_t)v151 + 1;
            uint64_t v34 = v145;
            uint64_t v54 = v146 + 2;
          }
          while ((char *)v151 + 1 != v142);
          uint64_t v22 = (uint64_t)v142;
          uint64_t v3 = v139;
          uint64_t v19 = v140;
          uint64_t v15 = v144;
        }
      }
    }
    if (v22 < (uint64_t)v34)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v151 = (uint64_t *)v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v19 = sub_1000273E8(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v68 = *((void *)v19 + 2);
    unint64_t v67 = *((void *)v19 + 3);
    unint64_t v21 = v68 + 1;
    uint64_t v18 = v152;
    if (v68 >= v67 >> 1)
    {
      v121 = sub_1000273E8((char *)(v67 > 1), v68 + 1, 1, v19);
      uint64_t v18 = v152;
      uint64_t v19 = v121;
    }
    *((void *)v19 + 2) = v21;
    unsigned int v69 = v19 + 32;
    uint64_t v70 = &v19[16 * v68 + 32];
    uint64_t v71 = v151;
    *(void *)uint64_t v70 = v34;
    *((void *)v70 + 1) = v71;
    if (v68) {
      break;
    }
    unint64_t v21 = 1;
LABEL_14:
    Swift::Int v20 = v141;
    uint64_t v17 = v151;
    if ((uint64_t)v151 >= v141)
    {
      uint64_t v11 = v153;
LABEL_102:
      uint64_t v139 = v3;
      if (v21 < 2)
      {
LABEL_113:
        swift_bridgeObjectRelease();
        v15[2] = 0;

        swift_bridgeObjectRelease();
        goto LABEL_114;
      }
      v123 = *v137;
      v144 = v15;
      v154 = v123;
      while (1)
      {
        unint64_t v124 = v21 - 2;
        if (v21 < 2) {
          break;
        }
        if (!v123) {
          goto LABEL_145;
        }
        v140 = v19;
        uint64_t v125 = *(void *)&v19[16 * v124 + 32];
        uint64_t v126 = *(void *)&v19[16 * v21 + 24];
        uint64_t v11 = &v123[2 * v125];
        v127 = &v123[2 * *(void *)&v19[16 * v21 + 16]];
        v128 = &v123[2 * v126];
        v129 = v153;
        uint64_t v130 = v139;
        sub_100028F34(v11, v127, v128, v143, v129);
        uint64_t v139 = v130;
        if (v130)
        {
          v122 = v144;
          goto LABEL_99;
        }

        uint64_t v15 = v144;
        if (v126 < v125) {
          goto LABEL_134;
        }
        uint64_t v19 = v140;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v19 = sub_100027728((uint64_t)v19);
        }
        uint64_t v11 = v153;
        if (v124 >= *((void *)v19 + 2)) {
          goto LABEL_135;
        }
        v131 = &v19[16 * v124 + 32];
        *(void *)v131 = v125;
        *((void *)v131 + 1) = v126;
        unint64_t v132 = *((void *)v19 + 2);
        if (v21 > v132) {
          goto LABEL_136;
        }
        memmove(&v19[16 * v21 + 16], &v19[16 * v21 + 32], 16 * (v132 - v21));
        *((void *)v19 + 2) = v132 - 1;
        unint64_t v21 = v132 - 1;
        v123 = v154;
        if (v132 <= 2) {
          goto LABEL_113;
        }
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      v133 = v153;

      __break(1u);
LABEL_143:
      v134 = v153;

      __break(1u);
LABEL_144:

      __break(1u);
LABEL_145:
      v135 = v153;

      __break(1u);
      goto LABEL_146;
    }
  }
  v142 = v19 + 32;
  while (1)
  {
    unint64_t v72 = v21 - 1;
    if (v21 >= 4)
    {
      unint64_t v77 = &v69[16 * v21];
      uint64_t v78 = *((void *)v77 - 8);
      uint64_t v79 = *((void *)v77 - 7);
      BOOL v83 = __OFSUB__(v79, v78);
      uint64_t v80 = v79 - v78;
      if (v83) {
        goto LABEL_121;
      }
      uint64_t v82 = *((void *)v77 - 6);
      uint64_t v81 = *((void *)v77 - 5);
      BOOL v83 = __OFSUB__(v81, v82);
      uint64_t v75 = v81 - v82;
      char v76 = v83;
      if (v83) {
        goto LABEL_122;
      }
      unint64_t v84 = v21 - 2;
      uint64_t v85 = &v69[16 * v21 - 32];
      uint64_t v87 = *(void *)v85;
      uint64_t v86 = *((void *)v85 + 1);
      BOOL v83 = __OFSUB__(v86, v87);
      uint64_t v88 = v86 - v87;
      if (v83) {
        goto LABEL_124;
      }
      BOOL v83 = __OFADD__(v75, v88);
      uint64_t v89 = v75 + v88;
      if (v83) {
        goto LABEL_127;
      }
      if (v89 >= v80)
      {
        long long v107 = &v69[16 * v72];
        uint64_t v109 = *(void *)v107;
        uint64_t v108 = *((void *)v107 + 1);
        BOOL v83 = __OFSUB__(v108, v109);
        uint64_t v110 = v108 - v109;
        if (v83) {
          goto LABEL_131;
        }
        BOOL v100 = v75 < v110;
        goto LABEL_88;
      }
    }
    else
    {
      if (v21 != 3)
      {
        uint64_t v101 = *((void *)v19 + 4);
        uint64_t v102 = *((void *)v19 + 5);
        BOOL v83 = __OFSUB__(v102, v101);
        uint64_t v94 = v102 - v101;
        char v95 = v83;
        goto LABEL_82;
      }
      uint64_t v74 = *((void *)v19 + 4);
      uint64_t v73 = *((void *)v19 + 5);
      BOOL v83 = __OFSUB__(v73, v74);
      uint64_t v75 = v73 - v74;
      char v76 = v83;
    }
    if (v76) {
      goto LABEL_123;
    }
    unint64_t v84 = v21 - 2;
    uint64_t v90 = &v69[16 * v21 - 32];
    uint64_t v92 = *(void *)v90;
    uint64_t v91 = *((void *)v90 + 1);
    BOOL v93 = __OFSUB__(v91, v92);
    uint64_t v94 = v91 - v92;
    char v95 = v93;
    if (v93) {
      goto LABEL_126;
    }
    uint64_t v96 = &v69[16 * v72];
    uint64_t v98 = *(void *)v96;
    uint64_t v97 = *((void *)v96 + 1);
    BOOL v83 = __OFSUB__(v97, v98);
    uint64_t v99 = v97 - v98;
    if (v83) {
      goto LABEL_129;
    }
    if (__OFADD__(v94, v99)) {
      goto LABEL_130;
    }
    if (v94 + v99 >= v75)
    {
      BOOL v100 = v75 < v99;
LABEL_88:
      if (v100) {
        unint64_t v72 = v84;
      }
      goto LABEL_90;
    }
LABEL_82:
    if (v95) {
      goto LABEL_125;
    }
    long long v103 = &v69[16 * v72];
    uint64_t v105 = *(void *)v103;
    uint64_t v104 = *((void *)v103 + 1);
    BOOL v83 = __OFSUB__(v104, v105);
    uint64_t v106 = v104 - v105;
    if (v83) {
      goto LABEL_128;
    }
    if (v106 < v94) {
      goto LABEL_14;
    }
LABEL_90:
    unint64_t v111 = v72 - 1;
    if (v72 - 1 >= v21)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v18) {
      goto LABEL_143;
    }
    long long v112 = v69;
    long long v113 = (id *)&v69[16 * v111];
    uint64_t v11 = (uint64_t *)*v113;
    unint64_t v114 = v72;
    long long v115 = &v112[16 * v72];
    uint64_t v116 = *(void *)v115;
    uint64_t v117 = *((void *)v115 + 1);
    v154 = &v18[2 * (void)*v113];
    v145 = &v18[2 * v117];
    v146 = &v18[2 * v116];
    double v118 = v153;
    sub_100028F34(v154, v146, v145, v143, v118);
    if (v3) {
      break;
    }

    if (v117 < (uint64_t)v11) {
      goto LABEL_118;
    }
    if (v114 > *((void *)v19 + 2)) {
      goto LABEL_119;
    }
    unint64_t v119 = v114;
    *long long v113 = v11;
    unsigned int v69 = v142;
    *(void *)&v142[16 * v111 + 8] = v117;
    unint64_t v120 = *((void *)v19 + 2);
    if (v119 >= v120) {
      goto LABEL_120;
    }
    unint64_t v21 = v120 - 1;
    memmove(v115, v115 + 16, 16 * (v120 - 1 - v119));
    *((void *)v19 + 2) = v120 - 1;
    uint64_t v15 = v144;
    uint64_t v18 = v152;
    if (v120 <= 2) {
      goto LABEL_14;
    }
  }
  v122 = v144;
LABEL_99:
  swift_bridgeObjectRelease();
  uint64_t v11 = v153;

  v122[2] = 0;
  swift_bridgeObjectRelease();
LABEL_114:
}

void sub_10002A080(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  id v4 = a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_1000289CC(v3);
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v7[0] = v3 + 32;
  v7[1] = v5;
  id v6 = v4;
  sub_100029608(v7, v6);

  *a1 = v3;
}

uint64_t sub_10002A118(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NewsWidgetInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL sub_10002A17C()
{
  return sub_100025564();
}

uint64_t sub_10002A19C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NewsWidgetInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002A1F8()
{
  return swift_release();
}

uint64_t sub_10002A200(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_100087EF4(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = sub_1000CC8D0();
  __break(1u);
  return result;
}

BOOL sub_10002A36C()
{
  return sub_10002A17C();
}

unint64_t sub_10002A388(unint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    unint64_t v19 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    id v6 = a3;
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    sub_10002AB64(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = *(void *)(v3 + 16);
    uint64_t v10 = *(void *)(v3 + 24);
    uint64_t v11 = *(void *)(v3 + 32);
    uint64_t v12 = *(void *)(v3 + 40);
    char v13 = *(unsigned char *)(v3 + 48);
    sub_10002AB70(v9, v10, v11, v12, v13);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v11;
    *(void *)(a1 + 40) = v12;
    *(unsigned char *)(a1 + 48) = v13;
    uint64_t v14 = v6[6];
    uint64_t v15 = (void *)(a1 + v14);
    uint64_t v16 = (void *)(v3 + v14);
    sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = sub_1000CBEF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    }
    else
    {
      *uint64_t v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = v6[7];
    unint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (void *)(v3 + v20);
    type metadata accessor for Item(0);
    uint64_t v109 = v6;
    uint64_t v111 = v3;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = v22[1];
      void *v21 = *v22;
      v21[1] = v23;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v24 = v22[1];
      void *v21 = *v22;
      v21[1] = v24;
      uint64_t v25 = type metadata accessor for Item.Headline(0);
      uint64_t v26 = *(int *)(v25 + 24);
      __dst = (char *)v21 + v26;
      uint64_t v104 = (int *)v25;
      uint64_t v27 = (char *)v22 + v26;
      uint64_t v28 = sub_1000CABE0();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v30(v27, 1, v28))
      {
        uint64_t v31 = sub_10001D64C(&qword_10010F340);
        memcpy(__dst, v27, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 16))(__dst, v27, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
      }
      id v6 = v109;
      uint64_t v32 = v104[7];
      uint64_t v33 = (void *)((char *)v21 + v32);
      uint64_t v34 = (char *)v22 + v32;
      uint64_t v35 = (void *)*((void *)v34 + 1);
      if (v35)
      {
        uint64_t v36 = *(void **)v34;
        *uint64_t v33 = v36;
        v33[1] = v35;
        id v37 = v36;
        id v38 = v35;
      }
      else
      {
        *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
      }
      uint64_t v3 = v111;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v39 = v6[8];
    uint64_t v40 = a1 + v39;
    uint64_t v41 = v3 + v39;
    uint64_t v42 = *(void **)(v3 + v39);
    *(void *)(a1 + v39) = v42;
    long long v107 = (int *)type metadata accessor for TodayContent();
    uint64_t v43 = v107[5];
    uint64_t v44 = (void *)(v40 + v43);
    uint64_t v45 = (void *)(v41 + v43);
    uint64_t v46 = (int *)type metadata accessor for Banner();
    uint64_t v47 = (void *)*((void *)v46 - 1);
    uint64_t v48 = (unsigned int (*)(void *, uint64_t, int *))v47[6];
    id v49 = v42;
    unint64_t v108 = a1;
    if (v48(v45, 1, v46))
    {
      uint64_t v50 = sub_10001D64C(&qword_10010DE20);
      memcpy(v44, v45, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      __dsta = v46;
      uint64_t v105 = v47;
      uint64_t v51 = v45[1];
      *uint64_t v44 = *v45;
      v44[1] = v51;
      uint64_t v52 = v45[3];
      v44[2] = v45[2];
      _OWORD v44[3] = v52;
      uint64_t v53 = v45[5];
      _OWORD v44[4] = v45[4];
      v44[5] = v53;
      uint64_t v54 = v46[7];
      BOOL v100 = (char *)v44 + v54;
      uint64_t v55 = (char *)v45 + v54;
      uint64_t v56 = sub_1000CABE0();
      uint64_t v99 = *(void *)(v56 - 8);
      uint64_t v101 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v99 + 48);
      uint64_t v57 = v55;
      uint64_t v58 = v56;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v101(v57, 1, v58))
      {
        uint64_t v59 = sub_10001D64C(&qword_10010F340);
        memcpy(v100, v57, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v99 + 16))(v100, v57, v58);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v100, 0, 1, v58);
      }
      uint64_t v60 = v46[8];
      uint64_t v61 = (void *)((char *)v44 + v60);
      uint64_t v62 = (void *)((char *)v45 + v60);
      uint64_t v63 = v62[1];
      *uint64_t v61 = *v62;
      v61[1] = v63;
      uint64_t v64 = v46[9];
      uint64_t v65 = *(void **)((char *)v45 + v64);
      swift_bridgeObjectRetain();
      if (v65 != (void *)1) {
        id v66 = v65;
      }
      *(void *)((char *)v44 + v64) = v65;
      uint64_t v67 = __dsta[10];
      unint64_t v68 = (char *)v44 + v67;
      unsigned int v69 = (char *)v45 + v67;
      uint64_t v70 = *(void **)v69;
      uint64_t v71 = (void *)*((void *)v69 + 1);
      char v72 = v69[16];
      sub_10001DB84(*(void **)v69, v71);
      *(void *)unint64_t v68 = v70;
      *((void *)v68 + 1) = v71;
      v68[16] = v72;
      (*((void (**)(void *, void, uint64_t, int *))v105 + 7))(v44, 0, 1, __dsta);
    }
    *(void *)(v40 + v107[6]) = *(void *)(v41 + v107[6]);
    *(void *)(v40 + v107[7]) = *(void *)(v41 + v107[7]);
    *(unsigned char *)(v40 + v107[8]) = *(unsigned char *)(v41 + v107[8]);
    uint64_t v73 = v107[9];
    uint64_t v106 = (void *)(v40 + v73);
    uint64_t v74 = (const void *)(v41 + v73);
    uint64_t v75 = sub_1000CABE0();
    uint64_t v76 = *(void *)(v75 - 8);
    unint64_t v77 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v76 + 48);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (v77(v74, 1, v75))
    {
      uint64_t v78 = sub_10001D64C(&qword_10010F340);
      memcpy(v106, v74, *(void *)(*(void *)(v78 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v76 + 16))(v106, v74, v75);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v76 + 56))(v106, 0, 1, v75);
    }
    *(void *)(v40 + v107[10]) = *(void *)(v41 + v107[10]);
    uint64_t v79 = v107[11];
    uint64_t v80 = (void *)(v40 + v79);
    uint64_t v81 = (void *)(v41 + v79);
    uint64_t v82 = v81[1];
    void *v80 = *v81;
    v80[1] = v82;
    uint64_t v83 = v107[12];
    unint64_t v84 = (void *)(v40 + v83);
    uint64_t v85 = (void *)(v41 + v83);
    uint64_t v86 = v85[1];
    *unint64_t v84 = *v85;
    v84[1] = v86;
    uint64_t v87 = v109[9];
    unint64_t v19 = v108;
    uint64_t v88 = v108 + v87;
    uint64_t v89 = v111 + v87;
    *(_OWORD *)(v108 + v87) = *(_OWORD *)(v111 + v87);
    uint64_t v90 = (int *)type metadata accessor for LayoutContext();
    uint64_t v91 = v90[6];
    uint64_t v110 = v89 + v91;
    uint64_t v112 = v88 + v91;
    uint64_t v92 = sub_1000CBEC0();
    BOOL v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v93(v112, v110, v92);
    *(_OWORD *)(v88 + v90[7]) = *(_OWORD *)(v89 + v90[7]);
    uint64_t v94 = v90[8];
    uint64_t v95 = v88 + v94;
    uint64_t v96 = v89 + v94;
    uint64_t v97 = sub_1000CB6D0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 16))(v95, v96, v97);
    *(void *)(v88 + v90[9]) = *(void *)(v89 + v90[9]);
    *(void *)(v88 + v90[10]) = *(void *)(v89 + v90[10]);
    *(unsigned char *)(v88 + v90[11]) = *(unsigned char *)(v89 + v90[11]);
    *(unsigned char *)(v88 + v90[12]) = *(unsigned char *)(v89 + v90[12]);
  }
  return v19;
}

uint64_t sub_10002AB64(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10002AB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10002AB7C(uint64_t a1, int *a2)
{
  sub_10002AFC4(*(void *)a1, *(unsigned char *)(a1 + 8));
  sub_10002AFD0(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
  uint64_t v4 = a1 + a2[6];
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_1000CBEF0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + a2[7];
  type metadata accessor for Item(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = type metadata accessor for Item.Headline(0);
    uint64_t v8 = v6 + *(int *)(v7 + 24);
    uint64_t v9 = sub_1000CABE0();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
    uint64_t v11 = (id *)(v6 + *(int *)(v7 + 28));
    if (v11[1])
    {
    }
  }
  uint64_t v12 = (id *)(a1 + a2[8]);

  uint64_t v13 = type metadata accessor for TodayContent();
  uint64_t v14 = (char *)v12 + *(int *)(v13 + 20);
  uint64_t v15 = (int *)type metadata accessor for Banner();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v15 - 1) + 48))(v14, 1, v15))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = &v14[v15[7]];
    uint64_t v17 = sub_1000CABE0();
    uint64_t v18 = *(void *)(v17 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
    }
    swift_bridgeObjectRelease();
    unint64_t v19 = *(void **)&v14[v15[9]];
    if (v19 != (void *)1) {

    }
    sub_10001DE30(*(void **)&v14[v15[10]], *(void **)&v14[v15[10] + 8]);
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v20 = (char *)v12 + *(int *)(v13 + 36);
  uint64_t v21 = sub_1000CABE0();
  uint64_t v22 = *(void *)(v21 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21)) {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = a1 + a2[9];
  uint64_t v24 = type metadata accessor for LayoutContext();
  uint64_t v25 = v23 + *(int *)(v24 + 24);
  uint64_t v26 = sub_1000CBEC0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
  uint64_t v27 = v23 + *(int *)(v24 + 32);
  uint64_t v28 = sub_1000CB6D0();
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8);

  return v29(v27, v28);
}

uint64_t sub_10002AFC4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10002AFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10002AFDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_10002AB64(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(v4 + 16);
  uint64_t v9 = *(void *)(v4 + 24);
  uint64_t v10 = *(void *)(v4 + 32);
  uint64_t v11 = *(void *)(v4 + 40);
  char v12 = *(unsigned char *)(v4 + 48);
  sub_10002AB70(v8, v9, v10, v11, v12);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(unsigned char *)(a1 + 48) = v12;
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(v4 + v13);
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = sub_1000CBEF0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  else
  {
    *uint64_t v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)(a1 + v17);
  unint64_t v19 = (void *)(v4 + v17);
  type metadata accessor for Item(0);
  uint64_t v103 = v4;
  uint64_t v105 = a1;
  uint64_t v102 = a3;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v21 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v21;
    __dst = (int *)type metadata accessor for Item.Headline(0);
    uint64_t v22 = __dst[6];
    uint64_t v23 = (char *)v18 + v22;
    uint64_t v24 = (char *)v19 + v22;
    uint64_t v25 = sub_1000CABE0();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v27(v24, 1, v25))
    {
      uint64_t v28 = sub_10001D64C(&qword_10010F340);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    uint64_t v29 = __dst[7];
    uint64_t v30 = (void *)((char *)v18 + v29);
    uint64_t v31 = (char *)v19 + v29;
    uint64_t v32 = (void *)*((void *)v31 + 1);
    if (v32)
    {
      uint64_t v33 = *(void **)v31;
      *uint64_t v30 = v33;
      v30[1] = v32;
      id v34 = v33;
      id v35 = v32;
    }
    else
    {
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    }
    uint64_t v4 = v103;
    a1 = v105;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v36 = a3[8];
  id v37 = (void *)(a1 + v36);
  uint64_t v38 = v4 + v36;
  uint64_t v39 = *(void **)(v4 + v36);
  void *v37 = v39;
  uint64_t v40 = (int *)type metadata accessor for TodayContent();
  uint64_t v41 = v40[5];
  uint64_t v42 = (void *)((char *)v37 + v41);
  uint64_t v43 = (void *)(v38 + v41);
  uint64_t v44 = (int *)type metadata accessor for Banner();
  uint64_t v45 = (void *)*((void *)v44 - 1);
  uint64_t v46 = (unsigned int (*)(void *, uint64_t, int *))v45[6];
  id v47 = v39;
  if (v46(v43, 1, v44))
  {
    uint64_t v48 = sub_10001D64C(&qword_10010DE20);
    memcpy(v42, v43, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    uint64_t v49 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v49;
    uint64_t v50 = v43[3];
    v42[2] = v43[2];
    _OWORD v42[3] = v50;
    uint64_t v51 = v43[5];
    v42[4] = v43[4];
    v42[5] = v51;
    uint64_t v52 = v44[7];
    __dsta = (char *)v42 + v52;
    BOOL v100 = v45;
    uint64_t v96 = (char *)v43 + v52;
    uint64_t v53 = sub_1000CABE0();
    uint64_t v95 = *(void *)(v53 - 8);
    uint64_t v97 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v97(v96, 1, v53))
    {
      uint64_t v54 = sub_10001D64C(&qword_10010F340);
      memcpy(__dsta, v96, *(void *)(*(void *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v95 + 16))(__dsta, v96, v53);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(__dsta, 0, 1, v53);
    }
    uint64_t v55 = v44[8];
    uint64_t v56 = (void *)((char *)v42 + v55);
    uint64_t v57 = (void *)((char *)v43 + v55);
    uint64_t v58 = v57[1];
    *uint64_t v56 = *v57;
    v56[1] = v58;
    uint64_t v59 = v44[9];
    uint64_t v60 = *(void **)((char *)v43 + v59);
    swift_bridgeObjectRetain();
    if (v60 != (void *)1) {
      id v61 = v60;
    }
    *(void *)((char *)v42 + v59) = v60;
    uint64_t v62 = v44[10];
    uint64_t v63 = (char *)v42 + v62;
    uint64_t v64 = (char *)v43 + v62;
    uint64_t v65 = *(void **)v64;
    id v66 = (void *)*((void *)v64 + 1);
    char v67 = v64[16];
    sub_10001DB84(*(void **)v64, v66);
    *(void *)uint64_t v63 = v65;
    *((void *)v63 + 1) = v66;
    v63[16] = v67;
    (*((void (**)(void *, void, uint64_t, int *))v100 + 7))(v42, 0, 1, v44);
  }
  *(void *)((char *)v37 + v40[6]) = *(void *)(v38 + v40[6]);
  *(void *)((char *)v37 + v40[7]) = *(void *)(v38 + v40[7]);
  *((unsigned char *)v37 + v40[8]) = *(unsigned char *)(v38 + v40[8]);
  uint64_t v68 = v40[9];
  uint64_t v101 = (char *)v37 + v68;
  unsigned int v69 = (const void *)(v38 + v68);
  uint64_t v70 = sub_1000CABE0();
  uint64_t v71 = *(void *)(v70 - 8);
  char v72 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v71 + 48);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  if (v72(v69, 1, v70))
  {
    uint64_t v73 = sub_10001D64C(&qword_10010F340);
    memcpy(v101, v69, *(void *)(*(void *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v71 + 16))(v101, v69, v70);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v101, 0, 1, v70);
  }
  *(void *)((char *)v37 + v40[10]) = *(void *)(v38 + v40[10]);
  uint64_t v74 = v40[11];
  uint64_t v75 = (void *)((char *)v37 + v74);
  uint64_t v76 = (void *)(v38 + v74);
  uint64_t v77 = v76[1];
  void *v75 = *v76;
  v75[1] = v77;
  uint64_t v78 = v40[12];
  uint64_t v79 = (void *)((char *)v37 + v78);
  uint64_t v80 = (void *)(v38 + v78);
  uint64_t v81 = v80[1];
  *uint64_t v79 = *v80;
  v79[1] = v81;
  uint64_t v82 = v102[9];
  uint64_t v83 = v105 + v82;
  uint64_t v84 = v103 + v82;
  *(_OWORD *)(v105 + v82) = *(_OWORD *)(v103 + v82);
  uint64_t v85 = (int *)type metadata accessor for LayoutContext();
  uint64_t v86 = v85[6];
  uint64_t v104 = v83 + v86;
  uint64_t v87 = v84 + v86;
  uint64_t v88 = sub_1000CBEC0();
  uint64_t v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v89(v104, v87, v88);
  *(_OWORD *)(v83 + v85[7]) = *(_OWORD *)(v84 + v85[7]);
  uint64_t v90 = v85[8];
  uint64_t v91 = v83 + v90;
  uint64_t v92 = v84 + v90;
  uint64_t v93 = sub_1000CB6D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 16))(v91, v92, v93);
  *(void *)(v83 + v85[9]) = *(void *)(v84 + v85[9]);
  *(void *)(v83 + v85[10]) = *(void *)(v84 + v85[10]);
  *(unsigned char *)(v83 + v85[11]) = *(unsigned char *)(v84 + v85[11]);
  *(unsigned char *)(v83 + v85[12]) = *(unsigned char *)(v84 + v85[12]);
  return v105;
}

uint64_t sub_10002B764(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_10002AB64(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_10002AFC4(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 40);
  char v14 = *(unsigned char *)(a2 + 48);
  sub_10002AB70(v10, v11, v12, v13, v14);
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  char v19 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  *(unsigned char *)(a1 + 48) = v14;
  sub_10002AFD0(v15, v16, v17, v18, v19);
  v134 = a3;
  uint64_t v135 = a2;
  if (a1 != a2)
  {
    uint64_t v20 = a3[6];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (void *)(a2 + v20);
    sub_1000227A8(a1 + v20, &qword_10010E8E0);
    sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = sub_1000CBEF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    }
    else
    {
      void *v21 = *v22;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v24 = a3[7];
    uint64_t v25 = (void *)(a1 + v24);
    uint64_t v26 = (void *)(a2 + v24);
    sub_10002C2E4(a1 + v24, type metadata accessor for Item);
    type metadata accessor for Item(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *uint64_t v25 = *v26;
      v25[1] = v26[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      *uint64_t v25 = *v26;
      v25[1] = v26[1];
      uint64_t v27 = type metadata accessor for Item.Headline(0);
      uint64_t v28 = *(int *)(v27 + 24);
      __dst = (char *)v25 + v28;
      __src = (int *)v27;
      uint64_t v29 = (char *)v26 + v28;
      uint64_t v30 = sub_1000CABE0();
      uint64_t v31 = *(void *)(v30 - 8);
      uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v32(v29, 1, v30))
      {
        uint64_t v33 = sub_10001D64C(&qword_10010F340);
        memcpy(__dst, v29, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(__dst, v29, v30);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
      }
      a3 = v134;
      uint64_t v34 = __src[7];
      id v35 = (void *)((char *)v25 + v34);
      uint64_t v36 = (char *)v26 + v34;
      if (*((void *)v36 + 1))
      {
        id v37 = *(void **)v36;
        *id v35 = *(void *)v36;
        uint64_t v38 = (void *)*((void *)v36 + 1);
        v35[1] = v38;
        id v39 = v37;
        id v40 = v38;
      }
      else
      {
        *(_OWORD *)id v35 = *(_OWORD *)v36;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v41 = a3[8];
  uint64_t v42 = (void **)(a1 + v41);
  uint64_t v43 = a2 + v41;
  uint64_t v44 = *(void **)(a2 + v41);
  uint64_t v45 = *v42;
  *uint64_t v42 = v44;
  id v46 = v44;

  v136 = (int *)type metadata accessor for TodayContent();
  uint64_t v47 = v136[5];
  uint64_t v48 = (void **)((char *)v42 + v47);
  uint64_t v49 = (void *)(v43 + v47);
  uint64_t v50 = (int *)type metadata accessor for Banner();
  uint64_t v51 = *((void *)v50 - 1);
  uint64_t v52 = *(uint64_t (**)(void *, uint64_t, int *))(v51 + 48);
  LODWORD(v45) = v52(v48, 1, v50);
  int v53 = v52(v49, 1, v50);
  if (!v45)
  {
    if (v53)
    {
      sub_10002C2E4((uint64_t)v48, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_20;
    }
    void *v48 = *v49;
    v48[1] = v49[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v48[2] = v49[2];
    _OWORD v48[3] = v49[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    _OWORD v48[4] = v49[4];
    v48[5] = v49[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v58 = v50[7];
    uint64_t v59 = (char *)v48 + v58;
    __srcb = (char *)v49 + v58;
    uint64_t v60 = sub_1000CABE0();
    uint64_t v128 = *(void *)(v60 - 8);
    __dsta = v59;
    id v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v128 + 48);
    LODWORD(v59) = v61(v59, 1, v60);
    int v62 = v61(__srcb, 1, v60);
    if (v59)
    {
      if (v62)
      {
        size_t v63 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v64 = __dsta;
LABEL_30:
        memcpy(v64, __srcb, v63);
        goto LABEL_33;
      }
      (*(void (**)(void *, char *, uint64_t))(v128 + 16))(__dsta, __srcb, v60);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v128 + 56))(__dsta, 0, 1, v60);
    }
    else
    {
      if (v62)
      {
        (*(void (**)(void *, uint64_t))(v128 + 8))(__dsta, v60);
        size_t v63 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v64 = __dsta;
        goto LABEL_30;
      }
      (*(void (**)(void *, char *, uint64_t))(v128 + 24))(__dsta, __srcb, v60);
    }
LABEL_33:
    uint64_t v77 = v50[8];
    uint64_t v78 = (void *)((char *)v48 + v77);
    uint64_t v79 = (void *)((char *)v49 + v77);
    *uint64_t v78 = *v79;
    v78[1] = v79[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v80 = v50[9];
    uint64_t v81 = (void *)((char *)v48 + v80);
    uint64_t v82 = *(void **)((char *)v48 + v80);
    uint64_t v83 = *(void **)((char *)v49 + v80);
    if (v82 == (void *)1)
    {
      if (v83 != (void *)1)
      {
        *uint64_t v81 = v83;
        id v84 = v83;
LABEL_40:
        uint64_t v86 = v50[10];
        uint64_t v87 = (char *)v48 + v86;
        uint64_t v88 = (char *)v49 + v86;
        uint64_t v89 = *(void **)v88;
        uint64_t v90 = (void *)*((void *)v88 + 1);
        char v91 = v88[16];
        sub_10001DB84(*(void **)v88, v90);
        uint64_t v92 = *(void **)v87;
        uint64_t v93 = (void *)*((void *)v87 + 1);
        *(void *)uint64_t v87 = v89;
        *((void *)v87 + 1) = v90;
        v87[16] = v91;
        sub_10001DE30(v92, v93);
        goto LABEL_41;
      }
    }
    else
    {
      if (v83 != (void *)1)
      {
        *uint64_t v81 = v83;
        id v85 = v83;

        goto LABEL_40;
      }
      sub_10001EA8C((uint64_t)v48 + v80);
      uint64_t v83 = *(void **)((char *)v49 + v80);
    }
    *uint64_t v81 = v83;
    goto LABEL_40;
  }
  if (v53)
  {
LABEL_20:
    uint64_t v57 = sub_10001D64C(&qword_10010DE20);
    memcpy(v48, v49, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_41;
  }
  void *v48 = *v49;
  v48[1] = v49[1];
  v48[2] = v49[2];
  _OWORD v48[3] = v49[3];
  _OWORD v48[4] = v49[4];
  v48[5] = v49[5];
  uint64_t v54 = v50[7];
  __srca = (char *)v48 + v54;
  v127 = (char *)v49 + v54;
  uint64_t v55 = sub_1000CABE0();
  uint64_t v125 = *(void *)(v55 - 8);
  uint64_t v126 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v126(v127, 1, v55))
  {
    uint64_t v56 = sub_10001D64C(&qword_10010F340);
    memcpy(__srca, v127, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v125 + 16))(__srca, v127, v55);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v125 + 56))(__srca, 0, 1, v55);
  }
  uint64_t v65 = v50[8];
  id v66 = (void *)((char *)v48 + v65);
  char v67 = (void *)((char *)v49 + v65);
  *id v66 = *v67;
  v66[1] = v67[1];
  uint64_t v68 = v50[9];
  unsigned int v69 = *(void **)((char *)v49 + v68);
  swift_bridgeObjectRetain();
  if (v69 != (void *)1) {
    id v70 = v69;
  }
  *(void *)((char *)v48 + v68) = v69;
  uint64_t v71 = v50[10];
  char v72 = (char *)v48 + v71;
  uint64_t v73 = (char *)v49 + v71;
  uint64_t v74 = *(void **)v73;
  uint64_t v75 = (void *)*((void *)v73 + 1);
  char v76 = v73[16];
  sub_10001DB84(*(void **)v73, v75);
  *(void *)char v72 = v74;
  *((void *)v72 + 1) = v75;
  v72[16] = v76;
  (*(void (**)(void *, void, uint64_t, int *))(v51 + 56))(v48, 0, 1, v50);
LABEL_41:
  *(void **)((char *)v42 + v136[6]) = *(void **)(v43 + v136[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void **)((char *)v42 + v136[7]) = *(void **)(v43 + v136[7]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *((unsigned char *)v42 + v136[8]) = *(unsigned char *)(v43 + v136[8]);
  uint64_t v94 = v136[9];
  uint64_t v95 = (char *)v42 + v94;
  uint64_t v96 = (char *)(v43 + v94);
  uint64_t v97 = sub_1000CABE0();
  uint64_t v98 = *(void *)(v97 - 8);
  uint64_t v99 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v98 + 48);
  int v100 = v99(v95, 1, v97);
  int v101 = v99(v96, 1, v97);
  if (!v100)
  {
    if (!v101)
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 24))(v95, v96, v97);
      goto LABEL_47;
    }
    (*(void (**)(char *, uint64_t))(v98 + 8))(v95, v97);
    goto LABEL_46;
  }
  if (v101)
  {
LABEL_46:
    uint64_t v102 = sub_10001D64C(&qword_10010F340);
    memcpy(v95, v96, *(void *)(*(void *)(v102 - 8) + 64));
    goto LABEL_47;
  }
  (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v95, v96, v97);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
LABEL_47:
  *(void **)((char *)v42 + v136[10]) = *(void **)(v43 + v136[10]);
  swift_retain();
  swift_release();
  uint64_t v103 = v136[11];
  uint64_t v104 = (void **)((char *)v42 + v103);
  uint64_t v105 = (void *)(v43 + v103);
  *uint64_t v104 = *v105;
  v104[1] = v105[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v106 = v136[12];
  long long v107 = (void **)((char *)v42 + v106);
  unint64_t v108 = (void *)(v43 + v106);
  *long long v107 = *v108;
  v107[1] = v108[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v109 = v134[9];
  uint64_t v110 = (void *)(a1 + v109);
  uint64_t v111 = v135 + v109;
  *uint64_t v110 = *(void *)(v135 + v109);
  v110[1] = *(void *)(v135 + v109 + 8);
  uint64_t v112 = (int *)type metadata accessor for LayoutContext();
  uint64_t v113 = v112[6];
  unint64_t v114 = (char *)v110 + v113;
  uint64_t v115 = v111 + v113;
  uint64_t v116 = sub_1000CBEC0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v116 - 8) + 24))(v114, v115, v116);
  uint64_t v117 = v112[7];
  double v118 = (void *)((char *)v110 + v117);
  unint64_t v119 = (void *)(v111 + v117);
  *double v118 = *v119;
  v118[1] = v119[1];
  uint64_t v120 = v112[8];
  v121 = (char *)v110 + v120;
  uint64_t v122 = v111 + v120;
  uint64_t v123 = sub_1000CB6D0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v123 - 8) + 24))(v121, v122, v123);
  *(void *)((char *)v110 + v112[9]) = *(void *)(v111 + v112[9]);
  *(void *)((char *)v110 + v112[10]) = *(void *)(v111 + v112[10]);
  *((unsigned char *)v110 + v112[11]) = *(unsigned char *)(v111 + v112[11]);
  *((unsigned char *)v110 + v112[12]) = *(unsigned char *)(v111 + v112[12]);
  return a1;
}

uint64_t sub_10002C2E4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002C344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  char v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_1000CBEF0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v12 = *(int *)(v3 + 28);
  uint64_t v13 = (void *)(v5 + v12);
  char v14 = (void *)(v4 + v12);
  uint64_t v15 = type metadata accessor for Item(0);
  uint64_t v66 = v3;
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    uint64_t v16 = v5;
    uint64_t v17 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v17;
    uint64_t v18 = type metadata accessor for Item.Headline(0);
    uint64_t v19 = *(int *)(v18 + 24);
    uint64_t v20 = (char *)v13 + v19;
    uint64_t v21 = (char *)v14 + v19;
    uint64_t v22 = sub_1000CABE0();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = sub_10001D64C(&qword_10010F340);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    *(_OWORD *)((char *)v13 + *(int *)(v18 + 28)) = *(_OWORD *)((char *)v14 + *(int *)(v18 + 28));
    swift_storeEnumTagMultiPayload();
    uint64_t v5 = v16;
    uint64_t v3 = v66;
  }
  uint64_t v25 = *(int *)(v3 + 32);
  uint64_t v26 = v5 + v25;
  uint64_t v27 = v4 + v25;
  *(void *)(v5 + v25) = *(void *)(v4 + v25);
  uint64_t v28 = (int *)type metadata accessor for TodayContent();
  uint64_t v29 = v28[5];
  uint64_t v30 = (_OWORD *)(v26 + v29);
  uint64_t v31 = (_OWORD *)(v27 + v29);
  uint64_t v32 = (int *)type metadata accessor for Banner();
  uint64_t v33 = *((void *)v32 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    uint64_t v34 = sub_10001D64C(&qword_10010DE20);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    uint64_t v63 = v4;
    long long v35 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v35;
    v30[2] = v31[2];
    uint64_t v36 = v32[7];
    uint64_t v64 = (char *)v30 + v36;
    uint64_t v65 = v5;
    id v37 = (char *)v31 + v36;
    uint64_t v38 = sub_1000CABE0();
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = sub_10001D64C(&qword_10010F340);
      memcpy(v64, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v64, v37, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v64, 0, 1, v38);
    }
    *(_OWORD *)((char *)v30 + v32[8]) = *(_OWORD *)((char *)v31 + v32[8]);
    *(void *)((char *)v30 + v32[9]) = *(void *)((char *)v31 + v32[9]);
    uint64_t v41 = v32[10];
    uint64_t v42 = (char *)v30 + v41;
    uint64_t v43 = (char *)v31 + v41;
    v42[16] = v43[16];
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
    uint64_t v5 = v65;
    uint64_t v4 = v63;
  }
  *(void *)(v26 + v28[6]) = *(void *)(v27 + v28[6]);
  *(void *)(v26 + v28[7]) = *(void *)(v27 + v28[7]);
  *(unsigned char *)(v26 + v28[8]) = *(unsigned char *)(v27 + v28[8]);
  uint64_t v44 = v28[9];
  uint64_t v45 = (void *)(v26 + v44);
  id v46 = (const void *)(v27 + v44);
  uint64_t v47 = sub_1000CABE0();
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    uint64_t v49 = sub_10001D64C(&qword_10010F340);
    memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v48 + 32))(v45, v46, v47);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  *(void *)(v26 + v28[10]) = *(void *)(v27 + v28[10]);
  *(_OWORD *)(v26 + v28[11]) = *(_OWORD *)(v27 + v28[11]);
  *(_OWORD *)(v26 + v28[12]) = *(_OWORD *)(v27 + v28[12]);
  uint64_t v50 = *(int *)(v66 + 36);
  uint64_t v51 = v5 + v50;
  uint64_t v52 = v4 + v50;
  *(_OWORD *)(v5 + v50) = *(_OWORD *)(v4 + v50);
  int v53 = (int *)type metadata accessor for LayoutContext();
  uint64_t v54 = v53[6];
  uint64_t v55 = v51 + v54;
  uint64_t v56 = v52 + v54;
  uint64_t v57 = sub_1000CBEC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 32))(v55, v56, v57);
  *(_OWORD *)(v51 + v53[7]) = *(_OWORD *)(v52 + v53[7]);
  uint64_t v58 = v53[8];
  uint64_t v59 = v51 + v58;
  uint64_t v60 = v52 + v58;
  uint64_t v61 = sub_1000CB6D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 32))(v59, v60, v61);
  *(void *)(v51 + v53[9]) = *(void *)(v52 + v53[9]);
  *(void *)(v51 + v53[10]) = *(void *)(v52 + v53[10]);
  *(unsigned char *)(v51 + v53[11]) = *(unsigned char *)(v52 + v53[11]);
  *(unsigned char *)(v51 + v53[12]) = *(unsigned char *)(v52 + v53[12]);
  return v5;
}

uint64_t sub_10002C9D0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_10002AFC4(v8, v9);
  char v10 = *((unsigned char *)v4 + 48);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  char v15 = *(unsigned char *)(a1 + 48);
  long long v16 = *((_OWORD *)v4 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)v4 + 1);
  *(_OWORD *)(a1 + 32) = v16;
  *(unsigned char *)(a1 + 48) = v10;
  sub_10002AFD0(v11, v12, v13, v14, v15);
  v121 = a3;
  if ((uint64_t *)a1 != v4)
  {
    uint64_t v17 = a3[6];
    uint64_t v18 = (void *)(a1 + v17);
    uint64_t v19 = (char *)v4 + v17;
    sub_1000227A8(a1 + v17, &qword_10010E8E0);
    uint64_t v20 = sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = sub_1000CBEF0();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
    uint64_t v22 = a3[7];
    uint64_t v23 = (void *)(a1 + v22);
    uint64_t v24 = (uint64_t *)((char *)v4 + v22);
    sub_10002C2E4(a1 + v22, type metadata accessor for Item);
    uint64_t v25 = type metadata accessor for Item(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      uint64_t v26 = v4;
      uint64_t v27 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v27;
      uint64_t v28 = type metadata accessor for Item.Headline(0);
      uint64_t v29 = *(int *)(v28 + 24);
      uint64_t v30 = (char *)v23 + v29;
      uint64_t v31 = (char *)v24 + v29;
      uint64_t v32 = sub_1000CABE0();
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = sub_10001D64C(&qword_10010F340);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v30, v31, v32);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      *(_OWORD *)((char *)v23 + *(int *)(v28 + 28)) = *(_OWORD *)((char *)v24 + *(int *)(v28 + 28));
      swift_storeEnumTagMultiPayload();
      uint64_t v4 = v26;
      a3 = v121;
    }
  }
  uint64_t v35 = a3[8];
  uint64_t v36 = a1 + v35;
  unint64_t v119 = v4;
  uint64_t v37 = (uint64_t)v4 + v35;
  uint64_t v38 = *(void **)(a1 + v35);
  *(void *)(a1 + v35) = *(uint64_t *)((char *)v4 + v35);

  uint64_t v122 = (int *)type metadata accessor for TodayContent();
  uint64_t v39 = v122[5];
  uint64_t v40 = (void *)(v36 + v39);
  uint64_t v41 = (char *)(v37 + v39);
  uint64_t v42 = (int *)type metadata accessor for Banner();
  uint64_t v43 = *((void *)v42 - 1);
  uint64_t v44 = *(uint64_t (**)(char *, uint64_t, int *))(v43 + 48);
  int v45 = v44((char *)v40, 1, v42);
  __src = v41;
  int v46 = v44(v41, 1, v42);
  if (v45)
  {
    if (!v46)
    {
      long long v47 = *((_OWORD *)v41 + 1);
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
      *((_OWORD *)v40 + 1) = v47;
      *((_OWORD *)v40 + 2) = *((_OWORD *)v41 + 2);
      uint64_t v48 = v42[7];
      uint64_t v117 = (char *)v40 + v48;
      uint64_t v49 = &v41[v48];
      uint64_t v50 = sub_1000CABE0();
      uint64_t v51 = *(void *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        uint64_t v52 = sub_10001D64C(&qword_10010F340);
        memcpy(v117, v49, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v117, v49, v50);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v117, 0, 1, v50);
      }
      *(_OWORD *)((char *)v40 + v42[8]) = *(_OWORD *)&v41[v42[8]];
      *(void *)((char *)v40 + v42[9]) = *(void *)&v41[v42[9]];
      uint64_t v65 = v42[10];
      uint64_t v66 = (char *)v40 + v65;
      char v67 = &v41[v65];
      v66[16] = v67[16];
      *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
      (*(void (**)(char *, void, uint64_t, int *))(v43 + 56))((char *)v40, 0, 1, v42);
      goto LABEL_23;
    }
LABEL_17:
    uint64_t v53 = sub_10001D64C(&qword_10010DE20);
    memcpy(v40, v41, *(void *)(*(void *)(v53 - 8) + 64));
LABEL_23:
    uint64_t v68 = v122;
    goto LABEL_24;
  }
  if (v46)
  {
    sub_10002C2E4((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for Banner);
    goto LABEL_17;
  }
  uint64_t v54 = *((void *)v41 + 1);
  *uint64_t v40 = *(void *)v41;
  v40[1] = v54;
  swift_bridgeObjectRelease();
  uint64_t v55 = *((void *)v41 + 3);
  v40[2] = *((void *)v41 + 2);
  _OWORD v40[3] = v55;
  swift_bridgeObjectRelease();
  uint64_t v56 = *((void *)v41 + 5);
  v40[4] = *((void *)v41 + 4);
  v40[5] = v56;
  swift_bridgeObjectRelease();
  uint64_t v57 = v42[7];
  uint64_t v58 = (char *)v40 + v57;
  uint64_t v59 = &v41[v57];
  uint64_t v60 = sub_1000CABE0();
  uint64_t v116 = *(void *)(v60 - 8);
  double v118 = v58;
  uint64_t v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 48);
  LODWORD(v58) = v61(v58, 1, v60);
  int v62 = v61(v59, 1, v60);
  if (v58)
  {
    if (v62)
    {
      size_t v63 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
      uint64_t v64 = v118;
LABEL_34:
      memcpy(v64, v59, v63);
      goto LABEL_37;
    }
    (*(void (**)(void *, char *, uint64_t))(v116 + 32))(v118, v59, v60);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v118, 0, 1, v60);
  }
  else
  {
    if (v62)
    {
      (*(void (**)(void *, uint64_t))(v116 + 8))(v118, v60);
      size_t v63 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
      uint64_t v64 = v118;
      goto LABEL_34;
    }
    (*(void (**)(void *, char *, uint64_t))(v116 + 40))(v118, v59, v60);
  }
LABEL_37:
  uint64_t v101 = v42[8];
  uint64_t v102 = (void *)((char *)v40 + v101);
  uint64_t v103 = &__src[v101];
  uint64_t v105 = *(void *)v103;
  uint64_t v104 = *((void *)v103 + 1);
  *uint64_t v102 = v105;
  v102[1] = v104;
  swift_bridgeObjectRelease();
  uint64_t v106 = v42[9];
  long long v107 = (void *)((char *)v40 + v106);
  unint64_t v108 = *(void **)((char *)v40 + v106);
  uint64_t v109 = *(void *)&__src[v106];
  if (v108 != (void *)1)
  {
    if (v109 != 1)
    {
      *long long v107 = v109;

      goto LABEL_42;
    }
    sub_10001EA8C((uint64_t)v40 + v106);
    uint64_t v109 = *(void *)&__src[v106];
  }
  *long long v107 = v109;
LABEL_42:
  uint64_t v68 = v122;
  uint64_t v110 = v42[10];
  uint64_t v111 = (char *)v40 + v110;
  uint64_t v112 = &__src[v110];
  char v113 = v112[16];
  unint64_t v114 = *(void **)v111;
  uint64_t v115 = (void *)*((void *)v111 + 1);
  *(_OWORD *)uint64_t v111 = *(_OWORD *)v112;
  v111[16] = v113;
  sub_10001DE30(v114, v115);
LABEL_24:
  *(void *)(v36 + v68[6]) = *(void *)(v37 + v68[6]);
  swift_bridgeObjectRelease();
  *(void *)(v36 + v68[7]) = *(void *)(v37 + v68[7]);
  swift_unknownObjectRelease();
  *(unsigned char *)(v36 + v68[8]) = *(unsigned char *)(v37 + v68[8]);
  uint64_t v69 = v68[9];
  id v70 = (void *)(v36 + v69);
  uint64_t v71 = (void *)(v37 + v69);
  uint64_t v72 = sub_1000CABE0();
  uint64_t v73 = *(void *)(v72 - 8);
  uint64_t v74 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v73 + 48);
  int v75 = v74(v70, 1, v72);
  int v76 = v74(v71, 1, v72);
  if (!v75)
  {
    if (!v76)
    {
      (*(void (**)(void *, void *, uint64_t))(v73 + 40))(v70, v71, v72);
      goto LABEL_30;
    }
    (*(void (**)(void *, uint64_t))(v73 + 8))(v70, v72);
    goto LABEL_29;
  }
  if (v76)
  {
LABEL_29:
    uint64_t v77 = sub_10001D64C(&qword_10010F340);
    memcpy(v70, v71, *(void *)(*(void *)(v77 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(void *, void *, uint64_t))(v73 + 32))(v70, v71, v72);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
LABEL_30:
  *(void *)(v36 + v122[10]) = *(void *)(v37 + v122[10]);
  swift_release();
  uint64_t v78 = v122[11];
  uint64_t v79 = (void *)(v36 + v78);
  uint64_t v80 = (uint64_t *)(v37 + v78);
  uint64_t v82 = *v80;
  uint64_t v81 = v80[1];
  *uint64_t v79 = v82;
  v79[1] = v81;
  swift_bridgeObjectRelease();
  uint64_t v83 = v122[12];
  id v84 = (void *)(v36 + v83);
  id v85 = (uint64_t *)(v37 + v83);
  uint64_t v87 = *v85;
  uint64_t v86 = v85[1];
  *id v84 = v87;
  v84[1] = v86;
  swift_bridgeObjectRelease();
  uint64_t v88 = v121[9];
  uint64_t v89 = a1 + v88;
  uint64_t v90 = (uint64_t)v119 + v88;
  *(_OWORD *)(a1 + v88) = *(_OWORD *)((char *)v119 + v88);
  char v91 = (int *)type metadata accessor for LayoutContext();
  uint64_t v92 = v91[6];
  uint64_t v93 = v89 + v92;
  uint64_t v94 = v90 + v92;
  uint64_t v95 = sub_1000CBEC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 40))(v93, v94, v95);
  *(_OWORD *)(v89 + v91[7]) = *(_OWORD *)(v90 + v91[7]);
  uint64_t v96 = v91[8];
  uint64_t v97 = v89 + v96;
  uint64_t v98 = v90 + v96;
  uint64_t v99 = sub_1000CB6D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 40))(v97, v98, v99);
  *(void *)(v89 + v91[9]) = *(void *)(v90 + v91[9]);
  *(void *)(v89 + v91[10]) = *(void *)(v90 + v91[10]);
  *(unsigned char *)(v89 + v91[11]) = *(unsigned char *)(v90 + v91[11]);
  *(unsigned char *)(v89 + v91[12]) = *(unsigned char *)(v90 + v91[12]);
  return a1;
}

uint64_t sub_10002D3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002D3D4);
}

uint64_t sub_10002D3D4(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  uint64_t v8 = sub_10001D64C(&qword_10010E8E8);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v14(a1 + v11, a2, v9);
  }
  uint64_t v12 = type metadata accessor for Item(0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_11;
  }
  uint64_t v13 = type metadata accessor for TodayContent();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_11;
  }
  uint64_t v15 = type metadata accessor for LayoutContext();
  long long v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[9];

  return v16(v18, a2, v17);
}

uint64_t sub_10002D594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002D5A8);
}

uint64_t sub_10002D5A8(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
    return result;
  }
  uint64_t v8 = sub_10001D64C(&qword_10010E8E8);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_9:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = type metadata accessor for Item(0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_9;
  }
  uint64_t v13 = type metadata accessor for TodayContent();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for LayoutContext();
  long long v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = v5 + a4[9];

  return v16(v18, a2, a2, v17);
}

uint64_t type metadata accessor for SmallContentView(uint64_t a1)
{
  return sub_100032D40(a1, (uint64_t *)&unk_10010E948);
}

void sub_10002D78C()
{
  sub_10002D8E0();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Item(319);
    if (v1 <= 0x3F)
    {
      type metadata accessor for TodayContent();
      if (v2 <= 0x3F)
      {
        type metadata accessor for LayoutContext();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_10002D8E0()
{
  if (!qword_10010E958)
  {
    sub_1000CBEF0();
    unint64_t v0 = sub_1000CB2B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10010E958);
    }
  }
}

uint64_t sub_10002D938()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002D954@<X0>(uint64_t a1@<X8>)
{
  uint64_t v59 = a1;
  uint64_t v2 = sub_1000CB7C0();
  uint64_t v57 = *(void *)(v2 - 8);
  uint64_t v58 = v2;
  __chkstk_darwin(v2);
  uint64_t v56 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000CB3C0();
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  __chkstk_darwin(v4);
  uint64_t v52 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Item(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10001D64C(&qword_10010E998);
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  long long v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10001D64C(&qword_10010E9A0);
  uint64_t v50 = *(void *)(v17 - 8);
  uint64_t v51 = v17;
  __chkstk_darwin(v17);
  uint64_t v43 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10001D64C(&qword_10010E9A8);
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v49 = v19;
  __chkstk_darwin(v19);
  int v46 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1000CBD20();
  uint64_t v23 = v22;
  sub_10002E154(v1, (uint64_t)v65);
  *(void *)&long long v64 = v21;
  *((void *)&v64 + 1) = v23;
  uint64_t v24 = type metadata accessor for SmallContentView(0);
  uint64_t v25 = *(int *)(v24 + 28);
  uint64_t v55 = v1;
  sub_1000328E0(v1 + v25, (uint64_t)v11, type metadata accessor for Item);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10002C2E4((uint64_t)v11, type metadata accessor for Item);
    uint64_t v26 = sub_1000CABE0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v14, 1, 1, v26);
  }
  else
  {
    sub_100032DD0((uint64_t)v11, (uint64_t)v8, type metadata accessor for Item.Headline);
    sub_100036850((uint64_t)&v8[*(int *)(v6 + 24)], (uint64_t)v14, &qword_10010F340);
    sub_10002C2E4((uint64_t)v8, type metadata accessor for Item.Headline);
  }
  uint64_t v27 = sub_10001D64C(&qword_10010E9B0);
  uint64_t v28 = sub_100036A5C(&qword_10010E9B8, &qword_10010E9B0);
  uint64_t v44 = v16;
  sub_1000CB9F0();
  sub_1000227A8((uint64_t)v14, &qword_10010F340);
  v62[8] = v65[7];
  v62[9] = v65[8];
  v63[0] = v66[0];
  *(_OWORD *)((char *)v63 + 9) = *(_OWORD *)((char *)v66 + 9);
  _OWORD v62[4] = v65[3];
  v62[5] = v65[4];
  v62[6] = v65[5];
  v62[7] = v65[6];
  v62[0] = v64;
  v62[1] = v65[0];
  v62[2] = v65[1];
  v62[3] = v65[2];
  sub_10002FFDC((uint64_t)v62);
  uint64_t v29 = v55 + *(int *)(v24 + 36);
  uint64_t v30 = type metadata accessor for LayoutContext();
  uint64_t v31 = v52;
  if (*(unsigned char *)(v29 + *(int *)(v30 + 44)) == 1)
  {
    sub_1000CB3B0();
    uint64_t v32 = v54;
  }
  else
  {
    uint64_t v60 = _swiftEmptyArrayStorage;
    sub_1000300D4(&qword_10010E9C0, (void (*)(uint64_t))&type metadata accessor for RedactionReasons);
    sub_10001D64C(&qword_10010E9C8);
    sub_100036A5C((unint64_t *)&qword_10010E9D0, &qword_10010E9C8);
    uint64_t v32 = v54;
    sub_1000CC6D0();
  }
  uint64_t v60 = (void *)v27;
  uint64_t v61 = v28;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v35 = v43;
  uint64_t v34 = v44;
  uint64_t v36 = (void *)v47;
  sub_1000CBAE0();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v32);
  (*(void (**)(char *, void *))(v45 + 8))(v34, v36);
  uint64_t v37 = v56;
  uint64_t v38 = sub_1000CB7B0();
  __chkstk_darwin(v38);
  sub_1000CBD20();
  uint64_t v60 = v36;
  uint64_t v61 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v39 = v46;
  uint64_t v40 = v51;
  sub_1000CBA80();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v37, v58);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v35, v40);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v48 + 32))(v59, v39, v49);
}

__n128 sub_10002E154@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1000CBEF0();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t v10 = type metadata accessor for SmallContentView(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)a1;
  char v14 = *(unsigned char *)(a1 + 8);
  sub_10002AB64(*(void *)a1, v14);
  char v15 = sub_1000579AC(v13, v14);
  sub_10002AFC4(v13, v14);
  sub_1000328E0(a1, (uint64_t)v12, type metadata accessor for SmallContentView);
  if (v15)
  {
    sub_10002C2E4((uint64_t)v12, type metadata accessor for SmallContentView);
  }
  else
  {
    sub_100057BB0((uint64_t)v9);
    sub_1000CBEE0();
    char v16 = sub_1000CBED0();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v29 + 8);
    uint64_t v18 = v7;
    uint64_t v19 = v30;
    v17(v18, v30);
    v17(v9, v19);
    sub_10002C2E4((uint64_t)v12, type metadata accessor for SmallContentView);
    if ((v16 & 1) == 0)
    {
      sub_10002F468(v32);
      sub_100032948((uint64_t)v32);
      goto LABEL_6;
    }
  }
  uint64_t v20 = sub_1000CBD20();
  uint64_t v22 = v21;
  sub_10002E494(a1, (uint64_t)v33);
  v32[0] = v20;
  v32[1] = v22;
  sub_100032954((uint64_t)v32);
LABEL_6:
  sub_1000365A0((uint64_t)v32, (uint64_t)&v31, &qword_10010E9F8);
  sub_10001D64C(&qword_10010EA00);
  sub_100036A5C(&qword_10010EA08, &qword_10010EA00);
  sub_1000CB770();
  long long v23 = v34[0];
  *(_OWORD *)(a2 + 128) = v33[18];
  *(_OWORD *)(a2 + 144) = v23;
  *(_OWORD *)(a2 + 153) = *(_OWORD *)((char *)v34 + 9);
  long long v24 = v33[15];
  *(_OWORD *)(a2 + 64) = v33[14];
  *(_OWORD *)(a2 + 80) = v24;
  long long v25 = v33[17];
  *(_OWORD *)(a2 + 96) = v33[16];
  *(_OWORD *)(a2 + 112) = v25;
  long long v26 = v33[11];
  *(_OWORD *)a2 = v33[10];
  *(_OWORD *)(a2 + 16) = v26;
  __n128 result = (__n128)v33[13];
  *(_OWORD *)(a2 + 32) = v33[12];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t sub_10002E494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = type metadata accessor for Item(0);
  __chkstk_darwin(v36);
  uint64_t v5 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  uint64_t v6 = sub_1000CBEF0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v37 - v11 + 16;
  uint64_t v13 = type metadata accessor for SmallContentView(0);
  sub_100057BB0((uint64_t)v12);
  sub_1000CBEE0();
  char v14 = sub_1000CBED0();
  char v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  v15(v12, v6);
  double v16 = 0.0;
  if (v14)
  {
    sub_1000328E0(a1 + *(int *)(v13 + 28), (uint64_t)v5, type metadata accessor for Item);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_10002C2E4((uint64_t)v5, type metadata accessor for Item);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      double v20 = 0.0;
      double v21 = 0.0;
      double v22 = 0.0;
    }
    else
    {
      sub_10002E838(v40);
      uint64_t v18 = v40[0];
      long long v23 = *(_OWORD *)(a1 + 32);
      v37[0] = *(_OWORD *)(a1 + 16);
      v37[1] = v23;
      char v38 = *(unsigned char *)(a1 + 48);
      sub_1000365A0((uint64_t)v37, (uint64_t)v39, &qword_10010EA10);
      sub_10003295C((uint64_t)v39, (void (*)(void, void, void, void, void))sub_10002AB70);
      double v24 = sub_100057BE8();
      sub_10003295C((uint64_t)v37, (void (*)(void, void, void, void, void))sub_10002AFD0);
      double v16 = -v24;
      sub_10003295C((uint64_t)v39, (void (*)(void, void, void, void, void))sub_10002AB70);
      sub_100057BE8();
      double v26 = v25;
      sub_10003295C((uint64_t)v37, (void (*)(void, void, void, void, void))sub_10002AFD0);
      double v20 = -v26;
      sub_10003295C((uint64_t)v39, (void (*)(void, void, void, void, void))sub_10002AB70);
      sub_100057BE8();
      double v28 = v27;
      sub_10003295C((uint64_t)v37, (void (*)(void, void, void, void, void))sub_10002AFD0);
      double v21 = -v28;
      sub_10003295C((uint64_t)v39, (void (*)(void, void, void, void, void))sub_10002AB70);
      sub_100057BE8();
      double v30 = v29;
      sub_10003295C((uint64_t)v37, (void (*)(void, void, void, void, void))sub_10002AFD0);
      double v22 = -v30;
      uint64_t v19 = sub_1000CB800();
    }
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    double v20 = 0.0;
    double v21 = 0.0;
    double v22 = 0.0;
  }
  uint64_t v31 = sub_1000CB600();
  uint64_t v32 = sub_1000CB6F0();
  sub_10002ED94(v40);
  uint64_t v33 = v40[0];
  uint64_t result = sub_10002F468(v40);
  uint64_t v35 = v40[0];
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v19;
  *(double *)(a2 + 16) = v16;
  *(double *)(a2 + 24) = v20;
  *(double *)(a2 + 32) = v21;
  *(double *)(a2 + 40) = v22;
  *(unsigned char *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = v31;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  *(void *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 88) = 1;
  *(void *)(a2 + 96) = v32;
  *(void *)(a2 + 104) = 0;
  *(unsigned char *)(a2 + 112) = 1;
  *(void *)(a2 + 120) = v33;
  *(void *)(a2 + 128) = 0;
  *(unsigned char *)(a2 + 136) = 1;
  *(void *)(a2 + 144) = v35;
  return result;
}

uint64_t sub_10002E838@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v33 = a1;
  uint64_t v32 = type metadata accessor for SmallBackgroundView(0);
  __chkstk_darwin(v32);
  uint64_t v29 = (uint64_t)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10001D64C(&qword_10010E9D8);
  __chkstk_darwin(v31);
  double v30 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v27);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Item(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000CABE0();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  double v28 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = (int *)type metadata accessor for SmallContentView(0);
  uint64_t v20 = v1 + v19[9];
  if (*(unsigned char *)(v20 + *(int *)(type metadata accessor for LayoutContext() + 44)) == 1)
  {
    uint64_t v21 = v2 + v19[8];
    uint64_t v22 = type metadata accessor for TodayContent();
    sub_100036850(v21 + *(int *)(v22 + 36), (uint64_t)v12, &qword_10010F340);
  }
  else
  {
    sub_1000328E0(v2 + v19[7], (uint64_t)v9, type metadata accessor for Item);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_10002C2E4((uint64_t)v9, type metadata accessor for Item);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    }
    else
    {
      sub_100032DD0((uint64_t)v9, (uint64_t)v6, type metadata accessor for Item.Headline);
      sub_100036850((uint64_t)&v6[*(int *)(v27 + 24)], (uint64_t)v12, &qword_10010F340);
      sub_10002C2E4((uint64_t)v6, type metadata accessor for Item.Headline);
    }
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1000227A8((uint64_t)v12, &qword_10010F340);
    sub_10002FC30(v29);
    sub_1000300D4(&qword_10010E9E0, (void (*)(uint64_t))type metadata accessor for SmallBackgroundView);
    uint64_t result = sub_1000CBC70();
    uint64_t v24 = result;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v12, v13);
    uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 16))(v28, v18, v13);
    __chkstk_darwin(v25);
    *(&v26 - 2) = v2;
    sub_1000300D4(&qword_10010E9E0, (void (*)(uint64_t))type metadata accessor for SmallBackgroundView);
    sub_1000CB8C0();
    sub_100036A5C(&qword_10010E9E8, &qword_10010E9D8);
    uint64_t v24 = sub_1000CBC70();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  }
  *uint64_t v33 = v24;
  return result;
}

uint64_t sub_10002ED94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_1000CBBD0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10001D64C(&qword_10010EA18);
  uint64_t v51 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v49 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10001D64C(&qword_10010EA20);
  __chkstk_darwin(v48);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10001D64C(&qword_10010EA28);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10001D64C(&qword_10010EA30);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v53 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_10001D64C(&qword_10010EA38);
  __chkstk_darwin(v54);
  uint64_t v50 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v1 + *(int *)(type metadata accessor for SmallContentView(0) + 32);
  uint64_t v18 = *(void *)(v17 + *(int *)(type metadata accessor for TodayContent() + 24));
  if (*(void *)(v18 + 16)
    && (uint64_t v19 = *(void *)(type metadata accessor for Section() - 8),
        *(unsigned char *)(v18
                 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))
                 + 24) == 1))
  {
    uint64_t v43 = v9;
    uint64_t v44 = v10;
    uint64_t v45 = v14;
    uint64_t v46 = v13;
    uint64_t v47 = a1;
    if (qword_10010DD48 != -1) {
      swift_once();
    }
    id v20 = (id)qword_10011ABE0;
    sub_1000CBBC0();
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v3);
    uint64_t v21 = sub_1000CBC30();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_1000CBD20();
    sub_1000CB310();
    uint64_t v22 = v66;
    char v23 = v67;
    uint64_t v24 = v68;
    char v25 = v69;
    uint64_t v27 = v70;
    uint64_t v26 = v71;
    uint64_t v28 = sub_1000CBB60();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v55 = v21;
    uint64_t v56 = 0x3FF0000000000000;
    __int16 v57 = 0;
    uint64_t v58 = v22;
    char v59 = v23;
    uint64_t v60 = v24;
    char v61 = v25;
    uint64_t v62 = v27;
    uint64_t v63 = v26;
    uint64_t v64 = KeyPath;
    uint64_t v65 = v28;
    sub_10001D64C(&qword_10010EA40);
    sub_100036918(&qword_10010EA48, &qword_10010EA40, (void (*)(void))sub_100032A4C);
    double v30 = v49;
    sub_1000CB9E0();
    swift_release();
    swift_release();
    swift_release();
    sub_1000CBB30();
    uint64_t v31 = sub_1000CBB70();
    swift_release();
    uint64_t v32 = v51;
    uint64_t v33 = (uint64_t)v43;
    uint64_t v34 = v52;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v43, v30, v52);
    uint64_t v35 = v33 + *(int *)(v48 + 36);
    *(void *)uint64_t v35 = v31;
    *(_OWORD *)(v35 + 8) = xmmword_1000D3870;
    *(void *)(v35 + 24) = 0x3FF0000000000000;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v34);
    sub_1000CBB30();
    uint64_t v36 = sub_1000CBB70();
    swift_release();
    sub_100036850(v33, (uint64_t)v12, &qword_10010EA20);
    uint64_t v37 = v44;
    char v38 = &v12[*(int *)(v44 + 36)];
    *(void *)char v38 = v36;
    *(_OWORD *)(v38 + 8) = xmmword_1000D3880;
    *((void *)v38 + 3) = 0x4000000000000000;
    sub_1000227A8(v33, &qword_10010EA20);
    unint64_t v39 = sub_100032AE8();
    uint64_t v40 = v53;
    sub_1000CBA20();
    sub_1000227A8((uint64_t)v12, &qword_10010EA28);
    uint64_t v55 = v37;
    uint64_t v56 = v39;
    swift_getOpaqueTypeConformance2();
    uint64_t v41 = v46;
    sub_1000CBA70();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v40, v41);
    sub_100032C40();
    uint64_t result = sub_1000CBC70();
    a1 = v47;
  }
  else
  {
    uint64_t result = sub_1000CBC70();
  }
  *a1 = result;
  return result;
}

uint64_t sub_10002F468@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  char v69 = a1;
  uint64_t v3 = sub_1000CB7A0();
  uint64_t v63 = *(void *)(v3 - 8);
  uint64_t v64 = v3;
  __chkstk_darwin(v3);
  uint64_t v62 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LayoutContext();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TodayContent();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (int *)type metadata accessor for SmallHeadlineContentView(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10001D64C(&qword_10010EAA0);
  uint64_t v67 = *(void *)(v14 - 8);
  uint64_t v68 = v14;
  __chkstk_darwin(v14);
  char v61 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_10001D64C(&qword_10010EAA8);
  __chkstk_darwin(v66);
  uint64_t v65 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Item.Headline(0);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  id v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (id *)((char *)&v61 - v21);
  uint64_t v23 = type metadata accessor for Item(0);
  __chkstk_darwin(v23);
  char v25 = (uint64_t *)((char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = (int *)type metadata accessor for SmallContentView(0);
  sub_1000328E0(v2 + v26[7], (uint64_t)v25, type metadata accessor for Item);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v27 = v25[1];
    uint64_t v72 = *v25;
    uint64_t v73 = v27;
    sub_1000231FC();
    uint64_t v28 = sub_1000CB9D0();
    uint64_t v30 = v29;
    char v32 = v31;
    uint64_t v34 = v33;
    id v35 = [self secondaryLabelColor];
    id v36 = [self traitCollectionWithUserInterfaceStyle:2];
    id v37 = [v35 resolvedColorWithTraitCollection:v36];

    uint64_t v38 = sub_1000CBBB0();
    uint64_t v72 = v28;
    uint64_t v73 = v30;
    char v74 = v32 & 1;
    uint64_t v75 = v34;
    uint64_t v76 = v38;
    sub_100032D78();
    uint64_t result = sub_1000CBC70();
    uint64_t v40 = result;
  }
  else
  {
    sub_100032DD0((uint64_t)v25, (uint64_t)v22, type metadata accessor for Item.Headline);
    sub_1000328E0((uint64_t)v22, (uint64_t)v20, type metadata accessor for Item.Headline);
    sub_1000328E0(v2 + v26[8], (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TodayContent);
    sub_1000328E0(v2 + v26[9], (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for LayoutContext);
    uint64_t KeyPath = swift_getKeyPath();
    *(void *)&v13[v11[5]] = swift_getKeyPath();
    sub_10001D64C(&qword_10010E8E0);
    swift_storeEnumTagMultiPayload();
    *(void *)uint64_t v13 = KeyPath;
    v13[8] = 0;
    sub_100032DD0((uint64_t)v20, (uint64_t)&v13[v11[6]], type metadata accessor for Item.Headline);
    sub_100032DD0((uint64_t)v10, (uint64_t)&v13[v11[7]], (uint64_t (*)(void))type metadata accessor for TodayContent);
    sub_100032DD0((uint64_t)v7, (uint64_t)&v13[v11[8]], (uint64_t (*)(void))type metadata accessor for LayoutContext);
    uint64_t v42 = v62;
    sub_1000CB790();
    uint64_t v43 = sub_1000300D4(&qword_10010EAB8, (void (*)(uint64_t))type metadata accessor for SmallHeadlineContentView);
    uint64_t v44 = v61;
    sub_1000CBAA0();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v42, v64);
    sub_10002C2E4((uint64_t)v13, type metadata accessor for SmallHeadlineContentView);
    sub_10001D64C((uint64_t *)&unk_10010E860);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_1000D34A0;
    id v46 = *v22;
    id v47 = [*v22 title];
    if (v47)
    {
      uint64_t v48 = v47;
      uint64_t v49 = sub_1000CC1F0();
      unint64_t v51 = v50;
    }
    else
    {
      uint64_t v49 = 0;
      unint64_t v51 = 0xE000000000000000;
    }
    *(void *)(v45 + 32) = v49;
    *(void *)(v45 + 40) = v51;
    id v52 = [v46 sourceName];
    if (v52)
    {
      uint64_t v53 = v52;
      uint64_t v54 = sub_1000CC1F0();
      unint64_t v56 = v55;
    }
    else
    {
      uint64_t v54 = 0;
      unint64_t v56 = 0xE000000000000000;
    }
    *(void *)(v45 + 48) = v54;
    *(void *)(v45 + 56) = v56;
    uint64_t v72 = v45;
    sub_10001D64C(&qword_10010E870);
    sub_100036A5C((unint64_t *)&qword_10010E878, &qword_10010E870);
    uint64_t v57 = sub_1000CC150();
    uint64_t v59 = v58;
    swift_bridgeObjectRelease();
    uint64_t v72 = v57;
    uint64_t v73 = v59;
    uint64_t v70 = v11;
    uint64_t v71 = v43;
    swift_getOpaqueTypeConformance2();
    sub_1000231FC();
    uint64_t v60 = v68;
    sub_1000CBA60();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v44, v60);
    sub_100032E38();
    uint64_t v40 = sub_1000CBC70();
    uint64_t result = sub_10002C2E4((uint64_t)v22, type metadata accessor for Item.Headline);
  }
  *char v69 = v40;
  return result;
}

uint64_t sub_10002FC30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10001D64C(&qword_10010E8E8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (id *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for Item(0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v15 = v1 + *(int *)(type metadata accessor for SmallContentView(0) + 28);
  uint64_t v16 = sub_1000B6950();
  sub_1000328E0(v15, (uint64_t)v14, type metadata accessor for Item);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10002C2E4((uint64_t)v14, type metadata accessor for Item);
    uint64_t v17 = 0;
  }
  else
  {
    sub_100032DD0((uint64_t)v14, (uint64_t)v8, type metadata accessor for Item.Headline);
    uint64_t v17 = sub_1000B7470();
    sub_10002C2E4((uint64_t)v8, type metadata accessor for Item.Headline);
  }
  id v18 = sub_1000B6AD4();
  sub_1000328E0(v15, (uint64_t)v12, type metadata accessor for Item);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    sub_100032DD0((uint64_t)v12, (uint64_t)v8, type metadata accessor for Item.Headline);
    [*v8 thumbnailFocalFrame];
    uint64_t v20 = v24;
    uint64_t v21 = v25;
    uint64_t v22 = v26;
    uint64_t v23 = v27;
    sub_10002C2E4((uint64_t)v8, type metadata accessor for Item.Headline);
  }
  uint64_t KeyPath = swift_getKeyPath();
  *uint64_t v5 = swift_getKeyPath();
  sub_10001D64C(&qword_10010E8E0);
  swift_storeEnumTagMultiPayload();
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = v18;
  *(void *)(a1 + 24) = v20;
  *(void *)(a1 + 32) = v21;
  *(void *)(a1 + 40) = v22;
  *(void *)(a1 + 48) = v23;
  *(unsigned char *)(a1 + 56) = EnumCaseMultiPayload == 1;
  uint64_t v29 = (int *)type metadata accessor for SmallBackgroundView(0);
  uint64_t v30 = (uint64_t *)(a1 + v29[8]);
  *uint64_t v30 = swift_getKeyPath();
  sub_10001D64C(&qword_10010E9F0);
  swift_storeEnumTagMultiPayload();
  uint64_t v31 = a1 + v29[9];
  *(void *)uint64_t v31 = KeyPath;
  *(unsigned char *)(v31 + 8) = 0;
  return sub_1000365A0((uint64_t)v5, a1 + v29[10], &qword_10010E8E8);
}

uint64_t sub_10002FFBC()
{
  return sub_1000CBA40();
}

uint64_t sub_10002FFDC(uint64_t a1)
{
  sub_100030048(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(unsigned char *)(a1 + 184));
  return a1;
}

uint64_t sub_100030048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if ((a22 & 1) == 0)
  {
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100030098@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_10002E838(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1000300D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003011C@<X0>(uint64_t a1@<X8>)
{
  return sub_10002FC30(a1);
}

uint64_t sub_100030140()
{
  uint64_t v1 = sub_1000CBEF0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = type metadata accessor for SmallHeadlineContentView(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)v0;
  char v12 = *(unsigned char *)(v0 + 8);
  sub_10002AB64(*(void *)v0, v12);
  char v13 = sub_1000579AC(v11, v12);
  sub_10002AFC4(v11, v12);
  sub_1000328E0(v0, (uint64_t)v10, type metadata accessor for SmallHeadlineContentView);
  if (v13)
  {
    sub_10002C2E4((uint64_t)v10, type metadata accessor for SmallHeadlineContentView);
    char v14 = 0;
  }
  else
  {
    sub_100057BB0((uint64_t)v7);
    sub_1000CBEE0();
    char v15 = sub_1000CBED0();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v2 + 8);
    v16(v5, v1);
    v16(v7, v1);
    sub_10002C2E4((uint64_t)v10, type metadata accessor for SmallHeadlineContentView);
    char v14 = v15 ^ 1;
  }
  return v14 & 1;
}

uint64_t sub_100030354()
{
  uint64_t v1 = sub_10001D64C(&qword_10010EB68);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10001D64C(&qword_10010EB70);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001D64C(&qword_10010EB78);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = sub_100030140();
  uint64_t v11 = sub_1000CB700();
  if (v10)
  {
    *(void *)uint64_t v9 = v11;
    *((void *)v9 + 1) = 0;
    v9[16] = 1;
    uint64_t v12 = sub_10001D64C(&qword_10010EB98);
    sub_100031828(v0, (uint64_t)&v9[*(int *)(v12 + 44)]);
    char v13 = &qword_10010EB78;
    sub_100036850((uint64_t)v9, (uint64_t)v6, &qword_10010EB78);
    swift_storeEnumTagMultiPayload();
    sub_100036A5C(&qword_10010EB88, &qword_10010EB78);
    sub_100036A5C(&qword_10010EB90, &qword_10010EB68);
    sub_1000CB770();
    uint64_t v14 = (uint64_t)v9;
  }
  else
  {
    *(void *)uint64_t v3 = v11;
    *((void *)v3 + 1) = 0;
    v3[16] = 1;
    uint64_t v15 = sub_10001D64C(&qword_10010EB80);
    sub_10003060C((uint64_t)&v3[*(int *)(v15 + 44)]);
    char v13 = &qword_10010EB68;
    sub_100036850((uint64_t)v3, (uint64_t)v6, &qword_10010EB68);
    swift_storeEnumTagMultiPayload();
    sub_100036A5C(&qword_10010EB88, &qword_10010EB78);
    sub_100036A5C(&qword_10010EB90, &qword_10010EB68);
    sub_1000CB770();
    uint64_t v14 = (uint64_t)v3;
  }
  return sub_1000227A8(v14, v13);
}

uint64_t sub_10003060C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10001D64C(&qword_10010EC70);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v54 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v43 - v6;
  uint64_t v8 = sub_10001D64C(&qword_10010EC78);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v63 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v43 - v11;
  uint64_t v13 = sub_10001D64C(&qword_10010EBB8);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v62 = (uint64_t)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v43 - v16;
  type metadata accessor for SmallHeadlineContentView(0);
  unsigned __int8 v18 = sub_1000B6C5C();
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if (v18)
  {
    uint64_t v19 = sub_1000832B8();
    sub_1000CBD20();
    sub_1000CB310();
    uint64_t v20 = v64;
    uint64_t v21 = v65;
    uint64_t v22 = v66;
    uint64_t v23 = v67;
    uint64_t v24 = v68;
    uint64_t v25 = v69;
  }
  uint64_t v55 = v19;
  uint64_t v56 = v21;
  uint64_t v57 = v22;
  uint64_t v58 = v20;
  uint64_t v59 = v23;
  uint64_t v60 = v24;
  uint64_t v61 = v25;
  sub_100030C0C((uint64_t)v17);
  id v26 = sub_10005B86C();
  [v26 capHeight];

  sub_10005BB94();
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v53 = v70;
  int v52 = v71;
  uint64_t v51 = v72;
  int v50 = v73;
  uint64_t v49 = v74;
  uint64_t v48 = v75;
  *(void *)uint64_t v12 = sub_1000CB600();
  *((void *)v12 + 1) = 0;
  v12[16] = 1;
  uint64_t v27 = &v12[*(int *)(sub_10001D64C(&qword_10010EC80) + 44)];
  sub_100031324((uint64_t)v7);
  id v47 = v17;
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v29 = v54;
  v28(v54, v7, v2);
  v28(v27, v29, v2);
  uint64_t v30 = &v27[*(int *)(sub_10001D64C(&qword_10010EC88) + 48)];
  *(void *)uint64_t v30 = 0;
  v30[8] = 0;
  uint64_t v31 = *(void (**)(char *, uint64_t))(v3 + 8);
  v31(v7, v2);
  v31(v29, v2);
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v54 = v76;
  int v46 = v77;
  uint64_t v45 = v78;
  LOBYTE(v29) = v79;
  uint64_t v44 = v80;
  uint64_t v43 = v81;
  uint64_t v32 = v62;
  sub_100036850((uint64_t)v17, v62, &qword_10010EBB8);
  uint64_t v33 = v63;
  sub_100036850((uint64_t)v12, v63, &qword_10010EC78);
  uint64_t v34 = v58;
  *(void *)a1 = v55;
  *(void *)(a1 + 8) = v34;
  uint64_t v35 = v57;
  *(void *)(a1 + 16) = v56;
  *(void *)(a1 + 24) = v35;
  uint64_t v36 = v60;
  *(void *)(a1 + 32) = v59;
  *(void *)(a1 + 40) = v36;
  *(void *)(a1 + 48) = v61;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  id v37 = (int *)sub_10001D64C(&qword_10010EC90);
  sub_100036850(v32, a1 + v37[16], &qword_10010EBB8);
  uint64_t v38 = a1 + v37[20];
  *(void *)uint64_t v38 = 0;
  *(unsigned char *)(v38 + 8) = 1;
  *(void *)(v38 + 16) = v53;
  *(unsigned char *)(v38 + 24) = v52;
  *(void *)(v38 + 32) = v51;
  *(unsigned char *)(v38 + 40) = v50;
  uint64_t v39 = v48;
  *(void *)(v38 + 48) = v49;
  *(void *)(v38 + 56) = v39;
  sub_100036850(v33, a1 + v37[24], &qword_10010EC78);
  uint64_t v40 = a1 + v37[28];
  *(void *)uint64_t v40 = 0;
  *(unsigned char *)(v40 + 8) = 1;
  *(void *)(v40 + 16) = v54;
  *(unsigned char *)(v40 + 24) = v46;
  *(void *)(v40 + 32) = v45;
  *(unsigned char *)(v40 + 40) = (_BYTE)v29;
  uint64_t v41 = v43;
  *(void *)(v40 + 48) = v44;
  *(void *)(v40 + 56) = v41;
  swift_retain();
  sub_1000227A8((uint64_t)v12, &qword_10010EC78);
  sub_1000227A8((uint64_t)v47, &qword_10010EBB8);
  sub_1000227A8(v33, &qword_10010EC78);
  sub_1000227A8(v32, &qword_10010EBB8);
  return swift_release();
}

uint64_t sub_100030C0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v74 = a1;
  uint64_t v2 = sub_1000CB6C0();
  uint64_t v75 = *(void *)(v2 - 8);
  uint64_t v76 = v2;
  __chkstk_darwin(v2);
  unsigned __int8 v73 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000CB650();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for SourceView();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_10001D64C(&qword_10010EC40);
  __chkstk_darwin(v64);
  uint64_t v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10001D64C(&qword_10010EC48);
  uint64_t v67 = *(void *)(v12 - 8);
  uint64_t v68 = v12;
  __chkstk_darwin(v12);
  unsigned __int8 v65 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_10001D64C(&qword_10010EC50);
  __chkstk_darwin(v69);
  uint64_t v70 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10001D64C(&qword_10010EBB8);
  __chkstk_darwin(v71);
  uint64_t v72 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (id *)(v1 + *(int *)(type metadata accessor for SmallHeadlineContentView(0) + 24));
  id v17 = sub_1000B6E00();
  id v18 = *v16;
  if (v17)
  {
    [v18 sourceNameImageScale];
    uint64_t v78 = v19;
    unsigned __int8 v77 = v17;
  }
  else
  {
    id v20 = [v18 sourceName];
    if (v20)
    {
      uint64_t v21 = v20;
      unsigned __int8 v77 = (void *)sub_1000CC1F0();
      uint64_t v78 = v22;
    }
    else
    {
      unsigned __int8 v77 = 0;
      uint64_t v78 = 0xE000000000000000;
    }
  }
  uint64_t v23 = (char *)v16 + *(int *)(type metadata accessor for Item.Headline(0) + 28);
  uint64_t v24 = *((void *)v23 + 1);
  uint64_t v63 = v6;
  if (v24)
  {
    uint64_t v25 = *(void **)v23;
    if (v25)
    {
      id v26 = v25;
      [v26 ts_luminance:v63];
      sub_100036814(0, (unint64_t *)&qword_100111C20);
      sub_1000CC5F0();
    }
  }
  id v66 = v17;
  char v27 = v17 != 0;
  uint64_t v28 = v77;
  uint64_t v29 = v78;
  sub_100036674(v77, v78, v27);
  sub_10005E358();
  uint64_t v31 = v30;
  sub_10005E358();
  double v33 = v32 + 3.0;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)&v9[v7[5]] = swift_getKeyPath();
  sub_10001D64C(&qword_10010E8E0);
  swift_storeEnumTagMultiPayload();
  *(void *)uint64_t v9 = KeyPath;
  v9[8] = 0;
  uint64_t v35 = &v9[v7[6]];
  *(void *)uint64_t v35 = v28;
  *((void *)v35 + 1) = v29;
  v35[16] = v27;
  uint64_t v36 = &v9[v7[7]];
  *(void *)uint64_t v36 = v31;
  *((double *)v36 + 1) = v33;
  char v37 = sub_100030140();
  uint64_t v38 = sub_1000CBB60();
  if ((v37 & 1) == 0)
  {
    uint64_t v39 = sub_1000CBB70();
    swift_release();
    uint64_t v38 = v39;
  }
  uint64_t v41 = v69;
  uint64_t v40 = (uint64_t)v70;
  uint64_t v42 = swift_getKeyPath();
  sub_1000328E0((uint64_t)v9, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SourceView);
  uint64_t v43 = (uint64_t *)&v11[*(int *)(v64 + 36)];
  uint64_t *v43 = v42;
  v43[1] = v38;
  sub_10002C2E4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SourceView);
  sub_100036684();
  uint64_t v44 = v65;
  sub_1000CB9E0();
  sub_1000227A8((uint64_t)v11, &qword_10010EC40);
  sub_1000CBB30();
  uint64_t v45 = sub_1000CBB70();
  swift_release();
  uint64_t v47 = v67;
  uint64_t v46 = v68;
  (*(void (**)(uint64_t, char *, uint64_t))(v67 + 16))(v40, v44, v68);
  uint64_t v48 = (uint64_t *)(v40 + *(int *)(v41 + 36));
  uint64_t *v48 = v45;
  v48[1] = 0x4020000000000000;
  v48[2] = 0;
  _OWORD v48[3] = 0;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v46);
  sub_1000CB640();
  uint64_t v49 = (void *)0xE000000000000000;
  v79._countAndFlagsBits = 0;
  v79._object = (void *)0xE000000000000000;
  sub_1000CB630(v79);
  id v50 = [*v16 sourceName];
  if (v50)
  {
    uint64_t v51 = v50;
    uint64_t v52 = sub_1000CC1F0();
    uint64_t v49 = v53;
  }
  else
  {
    uint64_t v52 = 0;
  }
  char v54 = v66 != 0;
  v80._countAndFlagsBits = v52;
  v80._object = v49;
  sub_1000CB620(v80);
  swift_bridgeObjectRelease();
  v81._countAndFlagsBits = 0;
  v81._object = (void *)0xE000000000000000;
  sub_1000CB630(v81);
  sub_1000CB670();
  uint64_t v55 = sub_1000CB9C0();
  uint64_t v57 = v56;
  char v59 = v58 & 1;
  sub_100036754();
  uint64_t v60 = (uint64_t)v72;
  sub_1000CBA30();
  sub_100036118(v55, v57, v59);
  swift_bridgeObjectRelease();
  sub_1000227A8(v40, &qword_10010EC50);
  uint64_t v61 = v73;
  sub_1000CB690();
  sub_1000CB380();
  sub_100036804(v77, v78, v54);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v61, v76);
  return sub_1000227A8(v60, &qword_10010EBB8);
}

uint64_t sub_100031324@<X0>(uint64_t a1@<X8>)
{
  uint64_t v54 = a1;
  uint64_t v2 = sub_1000CAD20();
  uint64_t v55 = *(void *)(v2 - 8);
  uint64_t v56 = v2;
  __chkstk_darwin(v2);
  uint64_t v53 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SmallHeadlineContentView(0);
  sub_10005B86C();
  sub_1000CB8B0();
  sub_10001D64C((uint64_t *)&unk_10010E840);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1000D37D0;
  uint64_t v51 = *(int *)(v4 + 24);
  uint64_t v52 = v1;
  uint64_t v6 = *(void **)(v1 + v51);
  id v7 = [v6 identifier];
  uint64_t v8 = sub_1000CC1F0();
  uint64_t v10 = v9;

  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v11 = sub_1000225F0();
  *(void *)(v5 + 64) = v11;
  *(void *)(v5 + 32) = v8;
  *(void *)(v5 + 40) = v10;
  uint64_t v57 = 0;
  uint64_t v58 = 0xE000000000000000;
  id v12 = [v6 title];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = sub_1000CC1F0();
    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v16 = (void *)0xE000000000000000;
  }
  v68._countAndFlagsBits = v14;
  v68._object = v16;
  sub_1000CC2B0(v68);
  swift_bridgeObjectRelease();
  uint64_t v17 = v57;
  uint64_t v18 = v58;
  *(void *)(v5 + 96) = &type metadata for String;
  *(void *)(v5 + 104) = v11;
  *(void *)(v5 + 72) = v17;
  *(void *)(v5 + 80) = v18;
  uint64_t v57 = 0;
  uint64_t v58 = 0xE000000000000000;
  id v19 = [v6 language];
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = sub_1000CC1F0();
    uint64_t v23 = v22;
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v23 = 0;
  }
  uint64_t v66 = v21;
  uint64_t v67 = v23;
  sub_10001D64C(&qword_100111300);
  sub_1000CC820();
  swift_bridgeObjectRelease();
  uint64_t v24 = v57;
  uint64_t v25 = v58;
  *(void *)(v5 + 136) = &type metadata for String;
  *(void *)(v5 + 144) = v11;
  *(void *)(v5 + 112) = v24;
  *(void *)(v5 + 120) = v25;
  sub_100036814(0, (unint64_t *)&qword_100110C20);
  id v26 = (void *)sub_1000CC630();
  sub_1000CC530();
  sub_1000CB230();
  swift_bridgeObjectRelease();

  id v27 = [v6 title];
  if (v27)
  {
    uint64_t v28 = v27;
    sub_1000CC1F0();
  }
  swift_retain();
  uint64_t v29 = sub_1000CB940();
  uint64_t v31 = v30;
  char v33 = v32;
  swift_bridgeObjectRelease();
  swift_release();
  char v34 = v33 & 1;
  sub_1000CBB30();
  sub_1000CBB70();
  swift_release();
  uint64_t v35 = sub_1000CB950();
  uint64_t v37 = v36;
  char v39 = v38;
  uint64_t v41 = v40;
  swift_release();
  sub_100036118(v29, v31, v34);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v43 = sub_1000CBB60();
  uint64_t v44 = swift_getKeyPath();
  uint64_t v57 = v35;
  uint64_t v58 = v37;
  char v59 = v39 & 1;
  uint64_t v60 = v41;
  uint64_t v61 = KeyPath;
  uint64_t v62 = 3;
  char v63 = 0;
  uint64_t v64 = v44;
  uint64_t v65 = v43;
  uint64_t v45 = *(void **)(v52 + v51);
  id v46 = [v45 language];
  if (v46)
  {
    uint64_t v47 = v46;
    sub_1000CC1F0();
  }
  uint64_t v48 = v53;
  sub_1000CAD10();
  id v49 = [v45 language];
  if (v49) {

  }
  sub_10001D64C(&qword_10010EC98);
  sub_100036918((unint64_t *)&qword_10010ECA0, &qword_10010EC98, (void (*)(void))sub_1000369BC);
  sub_1000CBA90();
  swift_release();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v48, v56);
  sub_100036118(v57, v58, v59);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100031828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10001D64C(&qword_10010EBA0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  id v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v23 - v8;
  *(void *)uint64_t v9 = sub_1000CB600();
  *((void *)v9 + 1) = 0;
  v9[16] = 1;
  uint64_t v10 = sub_10001D64C(&qword_10010EBA8);
  sub_100031A34(a1, (uint64_t)&v9[*(int *)(v10 + 44)]);
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v11 = v31;
  uint64_t v12 = v33;
  int v26 = v34;
  int v27 = v32;
  uint64_t v24 = v36;
  uint64_t v25 = v35;
  sub_100032338(v28);
  uint64_t v13 = v28[0];
  uint64_t v14 = v28[1];
  char v15 = v29;
  uint64_t v16 = v30;
  sub_100036850((uint64_t)v9, (uint64_t)v7, &qword_10010EBA0);
  sub_100036850((uint64_t)v7, a2, &qword_10010EBA0);
  uint64_t v17 = (int *)sub_10001D64C(&qword_10010EBB0);
  uint64_t v18 = a2 + v17[12];
  *(void *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 8) = 1;
  *(void *)(v18 + 16) = v11;
  *(unsigned char *)(v18 + 24) = v27;
  *(void *)(v18 + 32) = v12;
  *(unsigned char *)(v18 + 40) = v26;
  uint64_t v19 = v24;
  *(void *)(v18 + 48) = v25;
  *(void *)(v18 + 56) = v19;
  uint64_t v20 = a2 + v17[16];
  *(void *)uint64_t v20 = v13;
  *(void *)(v20 + 8) = v14;
  *(unsigned char *)(v20 + 16) = v15;
  *(void *)(v20 + 24) = v16;
  uint64_t v21 = a2 + v17[20];
  *(void *)uint64_t v21 = 0;
  *(unsigned char *)(v21 + 8) = 1;
  sub_100036108(v13, v14, v15);
  swift_bridgeObjectRetain();
  sub_1000227A8((uint64_t)v9, &qword_10010EBA0);
  sub_100036118(v13, v14, v15);
  swift_bridgeObjectRelease();
  return sub_1000227A8((uint64_t)v7, &qword_10010EBA0);
}

uint64_t sub_100031A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v78 = a1;
  uint64_t v79 = a2;
  uint64_t v2 = sub_10001D64C(&qword_10010EBB8);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  unsigned __int8 v77 = &v64[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  uint64_t v76 = &v64[-v5];
  uint64_t v6 = sub_10001D64C(&qword_10010EBC0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v75 = &v64[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  Swift::String v81 = &v64[-v9];
  uint64_t v10 = sub_10001D64C(&qword_10010EBC8) - 8;
  __chkstk_darwin(v10);
  uint64_t v71 = &v64[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_1000CBC10();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  char v15 = &v64[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v70 = sub_10001D64C(&qword_10010EBD0);
  __chkstk_darwin(v70);
  uint64_t v17 = (uint64_t *)&v64[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v73 = sub_10001D64C(&qword_10010EBD8);
  uint64_t v74 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v72 = &v64[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = sub_10001D64C(&qword_10010EBE0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v82 = &v64[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  Swift::String v80 = &v64[-v22];
  uint64_t v69 = sub_1000CBBF0();
  uint64_t v23 = sub_1000CBB20();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v25 = sub_1000CB890();
  uint64_t v26 = swift_getKeyPath();
  int v27 = *(void (**)(unsigned char *, void, uint64_t))(v13 + 104);
  uint64_t v67 = v15;
  uint64_t v68 = v12;
  v27(v15, enum case for Image.Scale.medium(_:), v12);
  uint64_t v28 = swift_getKeyPath();
  uint64_t v29 = *(int *)(v10 + 36);
  uint64_t v30 = (uint64_t)v71;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 16))(&v71[v29], v15, v12);
  *(void *)uint64_t v30 = v28;
  uint64_t v31 = v70;
  sub_100036850(v30, (uint64_t)v17 + *(int *)(v70 + 36), &qword_10010EBC8);
  *uint64_t v17 = v69;
  v17[1] = KeyPath;
  v17[2] = v23;
  v17[3] = v26;
  v17[4] = v25;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000227A8(v30, &qword_10010EBC8);
  (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v67, v68);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unint64_t v32 = sub_1000363C0();
  uint64_t v33 = v72;
  sub_1000CB9E0();
  sub_1000227A8((uint64_t)v17, &qword_10010EBD0);
  uint64_t v89 = v31;
  unint64_t v90 = v32;
  swift_getOpaqueTypeConformance2();
  unsigned __int8 v34 = v82;
  uint64_t v35 = v73;
  sub_1000CBA70();
  (*(void (**)(unsigned char *, uint64_t))(v74 + 8))(v33, v35);
  uint64_t v36 = v80;
  sub_1000365A0((uint64_t)v34, (uint64_t)v80, &qword_10010EBE0);
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v74 = v83;
  LODWORD(v73) = v84;
  uint64_t v72 = v85;
  LODWORD(v71) = v86;
  uint64_t v70 = v87;
  uint64_t v69 = v88;
  sub_1000CB890();
  uint64_t v37 = sub_1000CB940();
  uint64_t v39 = v38;
  LOBYTE(v33) = v40;
  swift_release();
  sub_1000CBB60();
  uint64_t v41 = sub_1000CB900();
  uint64_t v43 = v42;
  LOBYTE(v30) = v44;
  uint64_t v46 = v45;
  swift_release();
  sub_100036118(v37, v39, v33 & 1);
  swift_bridgeObjectRelease();
  uint64_t v89 = v41;
  unint64_t v90 = v43;
  LOBYTE(v91) = v30 & 1;
  uint64_t v92 = v46;
  uint64_t v93 = 0x3FE6666666666666;
  sub_10001D64C(&qword_10010EC28);
  sub_100036604((unint64_t *)&qword_10010EC30, &qword_10010EC28);
  uint64_t v47 = v81;
  sub_1000CBA70();
  sub_100036118(v41, v43, v30 & 1);
  swift_bridgeObjectRelease();
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v68 = v89;
  LODWORD(v67) = v90;
  uint64_t v66 = v91;
  int v65 = v92;
  uint64_t v48 = v93;
  uint64_t v49 = v94;
  id v50 = v76;
  sub_100030C0C((uint64_t)v76);
  uint64_t v51 = (uint64_t)v36;
  uint64_t v52 = v82;
  sub_100036850(v51, (uint64_t)v82, &qword_10010EBE0);
  uint64_t v53 = v75;
  sub_100036850((uint64_t)v47, (uint64_t)v75, &qword_10010EBC0);
  uint64_t v54 = (uint64_t)v50;
  uint64_t v55 = v77;
  sub_100036850((uint64_t)v50, (uint64_t)v77, &qword_10010EBB8);
  uint64_t v56 = (uint64_t)v52;
  uint64_t v57 = v79;
  sub_100036850(v56, v79, &qword_10010EBE0);
  uint64_t v58 = (int *)sub_10001D64C(&qword_10010EC38);
  uint64_t v59 = v57 + v58[12];
  *(void *)uint64_t v59 = 0;
  *(unsigned char *)(v59 + 8) = 1;
  *(void *)(v59 + 16) = v74;
  *(unsigned char *)(v59 + 24) = v73;
  *(void *)(v59 + 32) = v72;
  *(unsigned char *)(v59 + 40) = (_BYTE)v71;
  uint64_t v60 = v69;
  *(void *)(v59 + 48) = v70;
  *(void *)(v59 + 56) = v60;
  sub_100036850((uint64_t)v53, v57 + v58[16], &qword_10010EBC0);
  uint64_t v61 = v57 + v58[20];
  *(void *)uint64_t v61 = 0;
  *(unsigned char *)(v61 + 8) = 1;
  *(void *)(v61 + 16) = v68;
  *(unsigned char *)(v61 + 24) = (_BYTE)v67;
  *(void *)(v61 + 32) = v66;
  *(unsigned char *)(v61 + 40) = v65;
  *(void *)(v61 + 48) = v48;
  *(void *)(v61 + 56) = v49;
  sub_100036850((uint64_t)v55, v57 + v58[24], &qword_10010EBB8);
  uint64_t v62 = v57 + v58[28];
  *(void *)uint64_t v62 = 0;
  *(unsigned char *)(v62 + 8) = 1;
  sub_1000227A8(v54, &qword_10010EBB8);
  sub_1000227A8((uint64_t)v81, &qword_10010EBC0);
  sub_1000227A8((uint64_t)v80, &qword_10010EBE0);
  sub_1000227A8((uint64_t)v55, &qword_10010EBB8);
  sub_1000227A8((uint64_t)v53, &qword_10010EBC0);
  return sub_1000227A8((uint64_t)v82, &qword_10010EBE0);
}

uint64_t sub_100032338@<X0>(uint64_t *a1@<X8>)
{
  int v65 = a1;
  uint64_t v2 = sub_1000CAD20();
  uint64_t v63 = *(void *)(v2 - 8);
  uint64_t v64 = v2;
  __chkstk_darwin(v2);
  uint64_t v66 = (char *)v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SmallHeadlineContentView(0);
  sub_10005B86C();
  uint64_t v5 = (void *)sub_1000CB8B0();
  sub_10001D64C((uint64_t *)&unk_10010E840);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1000D37D0;
  uint64_t v7 = *(void **)(v1 + *(int *)(v4 + 24));
  id v8 = [v7 identifier];
  uint64_t v9 = sub_1000CC1F0();
  uint64_t v11 = v10;

  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v12 = sub_1000225F0();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 32) = v9;
  *(void *)(v6 + 40) = v11;
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  id v13 = [v7 title];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = sub_1000CC1F0();
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = (void *)0xE000000000000000;
  }
  v71._countAndFlagsBits = v15;
  v71._object = v17;
  sub_1000CC2B0(v71);
  swift_bridgeObjectRelease();
  uint64_t v18 = v69;
  unint64_t v19 = v70;
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v12;
  *(void *)(v6 + 72) = v18;
  *(void *)(v6 + 80) = v19;
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  id v20 = [v7 language];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = sub_1000CC1F0();
    uint64_t v24 = v23;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v24 = 0;
  }
  uint64_t v67 = v22;
  uint64_t v68 = v24;
  sub_10001D64C(&qword_100111300);
  sub_1000CC820();
  swift_bridgeObjectRelease();
  uint64_t v25 = v69;
  unint64_t v26 = v70;
  *(void *)(v6 + 136) = &type metadata for String;
  *(void *)(v6 + 144) = v12;
  *(void *)(v6 + 112) = v25;
  *(void *)(v6 + 120) = v26;
  sub_100036814(0, (unint64_t *)&qword_100110C20);
  int v27 = (void *)sub_1000CC630();
  sub_1000CC530();
  sub_1000CB230();
  swift_bridgeObjectRelease();

  id v28 = [v7 title];
  v62[0] = v7;
  if (v28)
  {
    uint64_t v29 = v28;
    sub_1000CC1F0();
  }
  swift_retain();
  uint64_t v30 = sub_1000CB940();
  uint64_t v32 = v31;
  char v34 = v33;
  swift_bridgeObjectRelease();
  v62[1] = v5;
  swift_release();
  char v35 = v34 & 1;
  sub_1000CBB30();
  sub_1000CBB70();
  swift_release();
  uint64_t v36 = sub_1000CB950();
  uint64_t v38 = v37;
  char v40 = v39;
  swift_release();
  char v41 = v40 & 1;
  sub_100036118(v30, v32, v35);
  swift_bridgeObjectRelease();
  sub_1000CBB60();
  uint64_t v42 = sub_1000CB900();
  uint64_t v44 = v43;
  char v46 = v45;
  swift_release();
  sub_100036118(v36, v38, v41);
  swift_bridgeObjectRelease();
  id v47 = v62[0];
  id v48 = [v62[0] language];
  if (v48)
  {
    uint64_t v49 = v48;
    sub_1000CC1F0();
  }
  sub_1000CAD10();
  id v50 = [v47 language];
  if (v50) {

  }
  char v51 = v46 & 1;
  uint64_t v52 = v66;
  uint64_t v53 = sub_1000CB920();
  uint64_t v55 = v54;
  char v57 = v56;
  uint64_t v59 = v58;
  sub_100036118(v42, v44, v51);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v52, v64);
  uint64_t v61 = v65;
  *int v65 = v53;
  v61[1] = v55;
  *((unsigned char *)v61 + 16) = v57 & 1;
  v61[3] = v59;
  return result;
}

uint64_t sub_10003281C()
{
  return sub_1000CB4A0();
}

uint64_t sub_100032840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000362B0(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for RedactionReasons, (uint64_t (*)(char *))&EnvironmentValues.redactionReasons.setter);
}

uint64_t sub_10003287C()
{
  return sub_1000CB4A0();
}

uint64_t sub_1000328A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000362B0(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for RedactionReasons, (uint64_t (*)(char *))&EnvironmentValues.redactionReasons.setter);
}

uint64_t sub_1000328E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100032948(uint64_t result)
{
  *(unsigned char *)(result + 168) = 1;
  return result;
}

uint64_t sub_100032954(uint64_t result)
{
  *(unsigned char *)(result + 168) = 0;
  return result;
}

uint64_t sub_10003295C(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_10003299C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000CB480();
  *a1 = result;
  return result;
}

uint64_t sub_1000329C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000CB480();
  *a1 = result;
  return result;
}

uint64_t sub_1000329F4()
{
  return sub_1000CB490();
}

uint64_t sub_100032A20()
{
  return sub_1000CB490();
}

unint64_t sub_100032A4C()
{
  unint64_t result = qword_10010EA50;
  if (!qword_10010EA50)
  {
    sub_10001D690(&qword_10010EA58);
    sub_100036604(&qword_10010EA60, &qword_10010EA68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EA50);
  }
  return result;
}

unint64_t sub_100032AE8()
{
  unint64_t result = qword_10010EA80;
  if (!qword_10010EA80)
  {
    sub_10001D690(&qword_10010EA28);
    sub_100032B64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EA80);
  }
  return result;
}

unint64_t sub_100032B64()
{
  unint64_t result = qword_10010EA88;
  if (!qword_10010EA88)
  {
    sub_10001D690(&qword_10010EA20);
    sub_10001D690(&qword_10010EA40);
    sub_100036918(&qword_10010EA48, &qword_10010EA40, (void (*)(void))sub_100032A4C);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EA88);
  }
  return result;
}

unint64_t sub_100032C40()
{
  unint64_t result = qword_10010EA90;
  if (!qword_10010EA90)
  {
    sub_10001D690(&qword_10010EA38);
    sub_10001D690(&qword_10010EA28);
    sub_100032AE8();
    swift_getOpaqueTypeConformance2();
    sub_1000300D4((unint64_t *)&qword_10010EA98, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EA90);
  }
  return result;
}

uint64_t type metadata accessor for SmallHeadlineContentView(uint64_t a1)
{
  return sub_100032D40(a1, qword_10010EB20);
}

uint64_t sub_100032D40(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_100032D78()
{
  unint64_t result = qword_10010EAB0;
  if (!qword_10010EAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EAB0);
  }
  return result;
}

uint64_t sub_100032DD0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100032E38()
{
  unint64_t result = qword_10010EAC0;
  if (!qword_10010EAC0)
  {
    sub_10001D690(&qword_10010EAA8);
    type metadata accessor for SmallHeadlineContentView(255);
    sub_1000300D4(&qword_10010EAB8, (void (*)(uint64_t))type metadata accessor for SmallHeadlineContentView);
    swift_getOpaqueTypeConformance2();
    sub_1000300D4((unint64_t *)&qword_10010EA98, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EAC0);
  }
  return result;
}

unint64_t sub_100032F44(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    unint64_t v14 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    sub_10002AB64(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_1000CBEF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[6];
    unint64_t v97 = a1;
    uint64_t v98 = a2;
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (void *)(a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v94 = type metadata accessor for Item.Headline(0);
    uint64_t v19 = *(int *)(v94 + 24);
    __dst = (char *)v16 + v19;
    id v20 = (char *)v17 + v19;
    uint64_t v21 = sub_1000CABE0();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v93 = v23;
    uint64_t v90 = v22;
    if (v23(v20, 1, v21))
    {
      uint64_t v24 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v20, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
    }
    uint64_t v25 = *(int *)(v94 + 28);
    unint64_t v26 = (void *)((char *)v16 + v25);
    int v27 = (char *)v17 + v25;
    id v28 = (void *)*((void *)v27 + 1);
    uint64_t v95 = v21;
    if (v28)
    {
      uint64_t v29 = *(void **)v27;
      void *v26 = v29;
      v26[1] = v28;
      id v30 = v29;
      id v31 = v28;
    }
    else
    {
      *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
    }
    __dsta = a3;
    uint64_t v32 = a3[7];
    uint64_t v33 = a1 + v32;
    uint64_t v34 = v98 + v32;
    char v35 = *(void **)(v98 + v32);
    *(void *)(a1 + v32) = v35;
    uint64_t v36 = (int *)type metadata accessor for TodayContent();
    uint64_t v37 = v36[5];
    uint64_t v38 = (void *)(v33 + v37);
    char v39 = (void *)(v34 + v37);
    char v40 = (int *)type metadata accessor for Banner();
    uint64_t v41 = *((void *)v40 - 1);
    uint64_t v42 = *(unsigned int (**)(void *, uint64_t, int *))(v41 + 48);
    id v43 = v35;
    if (v42(v39, 1, v40))
    {
      uint64_t v44 = sub_10001D64C(&qword_10010DE20);
      memcpy(v38, v39, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      uint64_t v89 = v41;
      uint64_t v45 = v39[1];
      *uint64_t v38 = *v39;
      v38[1] = v45;
      uint64_t v46 = v39[3];
      v38[2] = v39[2];
      _OWORD v38[3] = v46;
      uint64_t v47 = v39[5];
      _OWORD v38[4] = v39[4];
      v38[5] = v47;
      uint64_t v48 = v40[7];
      uint64_t v49 = (char *)v38 + v48;
      id v50 = (char *)v39 + v48;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v93(v50, 1, v95))
      {
        uint64_t v51 = sub_10001D64C(&qword_10010F340);
        memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v49, v50, v95);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v49, 0, 1, v95);
      }
      uint64_t v52 = v40[8];
      uint64_t v53 = (void *)((char *)v38 + v52);
      uint64_t v54 = (void *)((char *)v39 + v52);
      uint64_t v55 = v54[1];
      *uint64_t v53 = *v54;
      v53[1] = v55;
      uint64_t v56 = v40[9];
      char v57 = *(void **)((char *)v39 + v56);
      swift_bridgeObjectRetain();
      if (v57 != (void *)1) {
        id v58 = v57;
      }
      *(void *)((char *)v38 + v56) = v57;
      uint64_t v59 = v40[10];
      uint64_t v60 = (char *)v38 + v59;
      uint64_t v61 = (char *)v39 + v59;
      uint64_t v62 = *(void **)v61;
      uint64_t v63 = (void *)*((void *)v61 + 1);
      char v64 = v61[16];
      sub_10001DB84(*(void **)v61, v63);
      *(void *)uint64_t v60 = v62;
      *((void *)v60 + 1) = v63;
      v60[16] = v64;
      (*(void (**)(void *, void, uint64_t, int *))(v89 + 56))(v38, 0, 1, v40);
    }
    *(void *)(v33 + v36[6]) = *(void *)(v34 + v36[6]);
    *(void *)(v33 + v36[7]) = *(void *)(v34 + v36[7]);
    *(unsigned char *)(v33 + v36[8]) = *(unsigned char *)(v34 + v36[8]);
    uint64_t v65 = v36[9];
    uint64_t v66 = (void *)(v33 + v65);
    uint64_t v67 = (void *)(v34 + v65);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (v93((char *)v67, 1, v95))
    {
      uint64_t v68 = sub_10001D64C(&qword_10010F340);
      memcpy(v66, v67, *(void *)(*(void *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v90 + 16))(v66, v67, v95);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v90 + 56))(v66, 0, 1, v95);
    }
    *(void *)(v33 + v36[10]) = *(void *)(v34 + v36[10]);
    uint64_t v69 = v36[11];
    unint64_t v70 = (void *)(v33 + v69);
    Swift::String v71 = (void *)(v34 + v69);
    uint64_t v72 = v71[1];
    *unint64_t v70 = *v71;
    v70[1] = v72;
    uint64_t v73 = v36[12];
    uint64_t v74 = (void *)(v33 + v73);
    uint64_t v75 = (void *)(v34 + v73);
    uint64_t v76 = v75[1];
    *uint64_t v74 = *v75;
    v74[1] = v76;
    uint64_t v77 = __dsta[8];
    unint64_t v14 = v97;
    uint64_t v78 = v97 + v77;
    uint64_t v79 = v98 + v77;
    *(_OWORD *)(v97 + v77) = *(_OWORD *)(v98 + v77);
    Swift::String v80 = (int *)type metadata accessor for LayoutContext();
    uint64_t v81 = v80[6];
    uint64_t v99 = v78 + v81;
    uint64_t v96 = v79 + v81;
    uint64_t v82 = sub_1000CBEC0();
    uint64_t v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v83(v99, v96, v82);
    *(_OWORD *)(v78 + v80[7]) = *(_OWORD *)(v79 + v80[7]);
    uint64_t v84 = v80[8];
    uint64_t v85 = v78 + v84;
    uint64_t v86 = v79 + v84;
    uint64_t v87 = sub_1000CB6D0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 16))(v85, v86, v87);
    *(void *)(v78 + v80[9]) = *(void *)(v79 + v80[9]);
    *(void *)(v78 + v80[10]) = *(void *)(v79 + v80[10]);
    *(unsigned char *)(v78 + v80[11]) = *(unsigned char *)(v79 + v80[11]);
    *(unsigned char *)(v78 + v80[12]) = *(unsigned char *)(v79 + v80[12]);
  }
  return v14;
}

uint64_t sub_100033628(uint64_t a1, int *a2)
{
  sub_10002AFC4(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_1000CBEF0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + a2[6];
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for Item.Headline(0);
  uint64_t v8 = v6 + *(int *)(v7 + 24);
  uint64_t v9 = sub_1000CABE0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = (id *)(v6 + *(int *)(v7 + 28));
  if (v12[1])
  {
  }
  uint64_t v13 = (id *)(a1 + a2[7]);

  uint64_t v14 = type metadata accessor for TodayContent();
  uint64_t v15 = (char *)v13 + *(int *)(v14 + 20);
  uint64_t v16 = (int *)type metadata accessor for Banner();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v16 - 1) + 48))(v15, 1, v16))
  {
    id v28 = a2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = &v15[v16[7]];
    if (!v11((uint64_t)v17, 1, v9)) {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
    }
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void **)&v15[v16[9]];
    if (v18 != (void *)1) {

    }
    sub_10001DE30(*(void **)&v15[v16[10]], *(void **)&v15[v16[10] + 8]);
    a2 = v28;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v19 = (char *)v13 + *(int *)(v14 + 36);
  if (!v11((uint64_t)v19, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v19, v9);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = a1 + a2[8];
  uint64_t v21 = type metadata accessor for LayoutContext();
  uint64_t v22 = v20 + *(int *)(v21 + 24);
  uint64_t v23 = sub_1000CBEC0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
  uint64_t v24 = v20 + *(int *)(v21 + 32);
  uint64_t v25 = sub_1000CB6D0();
  unint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8);

  return v26(v24, v25);
}

uint64_t sub_1000339D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_10002AB64(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v94 = a3;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_1000CBEF0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v91 = a2;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)(a2 + v12 + 8);
  *uint64_t v13 = *(void *)(a2 + v12);
  v13[1] = v15;
  uint64_t v92 = type metadata accessor for Item.Headline(0);
  uint64_t v16 = *(int *)(v92 + 24);
  __dst = (char *)v13 + v16;
  uint64_t v17 = (void *)(v14 + v16);
  uint64_t v18 = sub_1000CABE0();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, void *))(v19 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v88 = v20;
  uint64_t v87 = v19;
  if (v20((char *)v17, 1, (void *)v18))
  {
    uint64_t v21 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v17, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v19 + 16))(__dst, v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
  }
  uint64_t v22 = *(int *)(v92 + 28);
  uint64_t v23 = (void *)((char *)v13 + v22);
  uint64_t v24 = v14 + v22;
  uint64_t v25 = *(void **)(v24 + 8);
  __dsta = (void *)v18;
  if (v25)
  {
    unint64_t v26 = *(void **)v24;
    *uint64_t v23 = v26;
    v23[1] = v25;
    id v27 = v26;
    id v28 = v25;
  }
  else
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }
  uint64_t v29 = *(int *)(v94 + 28);
  uint64_t v93 = a1;
  id v30 = (void *)(a1 + v29);
  uint64_t v31 = v91 + v29;
  uint64_t v32 = *(void **)(v91 + v29);
  *id v30 = v32;
  uint64_t v33 = (int *)type metadata accessor for TodayContent();
  uint64_t v34 = v33[5];
  char v35 = (void *)((char *)v30 + v34);
  uint64_t v36 = (void *)(v31 + v34);
  uint64_t v37 = (int *)type metadata accessor for Banner();
  uint64_t v38 = *((void *)v37 - 1);
  char v39 = *(unsigned int (**)(void *, uint64_t, int *))(v38 + 48);
  id v40 = v32;
  if (v39(v36, 1, v37))
  {
    uint64_t v41 = sub_10001D64C(&qword_10010DE20);
    memcpy(v35, v36, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    uint64_t v42 = v36[1];
    *char v35 = *v36;
    v35[1] = v42;
    uint64_t v43 = v36[3];
    v35[2] = v36[2];
    v35[3] = v43;
    uint64_t v44 = v36[5];
    _OWORD v35[4] = v36[4];
    v35[5] = v44;
    uint64_t v45 = v37[7];
    uint64_t v86 = (char *)v35 + v45;
    uint64_t v46 = (char *)v36 + v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v88(v46, 1, __dsta))
    {
      uint64_t v47 = sub_10001D64C(&qword_10010F340);
      memcpy(v86, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, void *))(v87 + 16))(v86, v46, __dsta);
      (*(void (**)(char *, void, uint64_t, void *))(v87 + 56))(v86, 0, 1, __dsta);
    }
    uint64_t v48 = v37[8];
    uint64_t v49 = (void *)((char *)v35 + v48);
    id v50 = (void *)((char *)v36 + v48);
    uint64_t v51 = v50[1];
    void *v49 = *v50;
    v49[1] = v51;
    uint64_t v52 = v37[9];
    uint64_t v53 = *(void **)((char *)v36 + v52);
    swift_bridgeObjectRetain();
    if (v53 != (void *)1) {
      id v54 = v53;
    }
    *(void *)((char *)v35 + v52) = v53;
    uint64_t v55 = v37[10];
    uint64_t v56 = (char *)v35 + v55;
    char v57 = (char *)v36 + v55;
    id v58 = *(void **)v57;
    uint64_t v59 = (void *)*((void *)v57 + 1);
    char v60 = v57[16];
    sub_10001DB84(*(void **)v57, v59);
    *(void *)uint64_t v56 = v58;
    *((void *)v56 + 1) = v59;
    v56[16] = v60;
    (*(void (**)(void *, void, uint64_t, int *))(v38 + 56))(v35, 0, 1, v37);
  }
  *(void *)((char *)v30 + v33[6]) = *(void *)(v31 + v33[6]);
  *(void *)((char *)v30 + v33[7]) = *(void *)(v31 + v33[7]);
  *((unsigned char *)v30 + v33[8]) = *(unsigned char *)(v31 + v33[8]);
  uint64_t v61 = v33[9];
  uint64_t v62 = (char *)v30 + v61;
  uint64_t v63 = (void *)(v31 + v61);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  if (v88((char *)v63, 1, __dsta))
  {
    uint64_t v64 = sub_10001D64C(&qword_10010F340);
    memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, void *, void *))(v87 + 16))(v62, v63, __dsta);
    (*(void (**)(char *, void, uint64_t, void *))(v87 + 56))(v62, 0, 1, __dsta);
  }
  *(void *)((char *)v30 + v33[10]) = *(void *)(v31 + v33[10]);
  uint64_t v65 = v33[11];
  uint64_t v66 = (void *)((char *)v30 + v65);
  uint64_t v67 = (void *)(v31 + v65);
  uint64_t v68 = v67[1];
  *uint64_t v66 = *v67;
  v66[1] = v68;
  uint64_t v69 = v33[12];
  unint64_t v70 = (void *)((char *)v30 + v69);
  Swift::String v71 = (void *)(v31 + v69);
  uint64_t v72 = v71[1];
  *unint64_t v70 = *v71;
  v70[1] = v72;
  uint64_t v73 = *(int *)(v94 + 32);
  uint64_t v74 = v93 + v73;
  uint64_t v75 = v91 + v73;
  *(_OWORD *)(v93 + v73) = *(_OWORD *)(v91 + v73);
  uint64_t v76 = (int *)type metadata accessor for LayoutContext();
  uint64_t v77 = v76[6];
  uint64_t v95 = v74 + v77;
  uint64_t v78 = v75 + v77;
  uint64_t v79 = sub_1000CBEC0();
  Swift::String v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v80(v95, v78, v79);
  *(_OWORD *)(v74 + v76[7]) = *(_OWORD *)(v75 + v76[7]);
  uint64_t v81 = v76[8];
  uint64_t v82 = v74 + v81;
  uint64_t v83 = v75 + v81;
  uint64_t v84 = sub_1000CB6D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 16))(v82, v83, v84);
  *(void *)(v74 + v76[9]) = *(void *)(v75 + v76[9]);
  *(void *)(v74 + v76[10]) = *(void *)(v75 + v76[10]);
  *(unsigned char *)(v74 + v76[11]) = *(unsigned char *)(v75 + v76[11]);
  *(unsigned char *)(v74 + v76[12]) = *(unsigned char *)(v75 + v76[12]);
  return v93;
}

uint64_t sub_100034064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_10002AB64(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_10002AFC4(v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_1000227A8(a1 + v10, &qword_10010E8E0);
    sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_1000CBEF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v132 = a3;
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v127 = type metadata accessor for Item.Headline(0);
  uint64_t v17 = *(int *)(v127 + 24);
  uint64_t v18 = (void *)(v15 + v17);
  uint64_t v19 = (const void *)(v16 + v17);
  uint64_t v20 = sub_1000CABE0();
  uint64_t v131 = *(void *)(v20 - 8);
  uint64_t v21 = *(uint64_t (**)(void))(v131 + 48);
  unsigned int v22 = ((uint64_t (*)(void *, uint64_t, uint64_t))v21)(v18, 1, v20);
  uint64_t v130 = v21;
  unsigned int v23 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v21)(v19, 1, v20);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, const void *, uint64_t))(v131 + 16))(v18, v19, v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v18, 0, 1, v20);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v131 + 8))(v18, v20);
LABEL_11:
    uint64_t v24 = sub_10001D64C(&qword_10010F340);
    memcpy(v18, v19, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, const void *, uint64_t))(v131 + 24))(v18, v19, v20);
LABEL_12:
  uint64_t v25 = *(int *)(v127 + 28);
  unint64_t v26 = (void **)(v15 + v25);
  uint64_t v27 = v16 + v25;
  uint64_t v28 = *(void *)(v15 + v25 + 8);
  uint64_t v29 = *(void *)(v27 + 8);
  uint64_t v129 = v20;
  if (v28)
  {
    if (v29)
    {
      id v30 = *v26;
      uint64_t v31 = *(void **)v27;
      void *v26 = *(void **)v27;
      id v32 = v31;

      uint64_t v33 = *(void **)(v27 + 8);
      uint64_t v34 = v26[1];
      v26[1] = v33;
      id v35 = v33;

      goto LABEL_19;
    }
    sub_100034B4C((uint64_t)v26);
  }
  else if (v29)
  {
    uint64_t v36 = *(void **)v27;
    void *v26 = *(void **)v27;
    uint64_t v37 = *(void **)(v27 + 8);
    v26[1] = v37;
    id v38 = v36;
    id v39 = v37;
    goto LABEL_19;
  }
  *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
LABEL_19:
  uint64_t v40 = *(int *)(v132 + 28);
  uint64_t v126 = a2;
  uint64_t v128 = a1;
  uint64_t v41 = (void **)(a1 + v40);
  uint64_t v42 = a2 + v40;
  uint64_t v43 = *(void **)(a2 + v40);
  uint64_t v44 = *v41;
  char *v41 = v43;
  id v45 = v43;

  uint64_t v46 = (int *)type metadata accessor for TodayContent();
  uint64_t v47 = v46[5];
  uint64_t v48 = (void **)((char *)v41 + v47);
  uint64_t v49 = (void *)(v42 + v47);
  id v50 = (int *)type metadata accessor for Banner();
  uint64_t v51 = *((void *)v50 - 1);
  uint64_t v52 = *(uint64_t (**)(void *, uint64_t, int *))(v51 + 48);
  int v53 = v52(v48, 1, v50);
  int v54 = v52(v49, 1, v50);
  if (v53)
  {
    if (!v54)
    {
      void *v48 = *v49;
      v48[1] = v49[1];
      v48[2] = v49[2];
      _OWORD v48[3] = v49[3];
      _OWORD v48[4] = v49[4];
      v48[5] = v49[5];
      uint64_t v55 = v50[7];
      __dst = (char *)v48 + v55;
      uint64_t v56 = (char *)v49 + v55;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v130)(v56, 1, v129))
      {
        uint64_t v57 = sub_10001D64C(&qword_10010F340);
        memcpy(__dst, v56, *(void *)(*(void *)(v57 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v131 + 16))(__dst, v56, v129);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(__dst, 0, 1, v129);
      }
      uint64_t v65 = v50[8];
      uint64_t v66 = (void *)((char *)v48 + v65);
      uint64_t v67 = (void *)((char *)v49 + v65);
      *uint64_t v66 = *v67;
      v66[1] = v67[1];
      uint64_t v68 = v50[9];
      uint64_t v69 = *(void **)((char *)v49 + v68);
      swift_bridgeObjectRetain();
      if (v69 != (void *)1) {
        id v70 = v69;
      }
      *(void *)((char *)v48 + v68) = v69;
      uint64_t v71 = v50[10];
      uint64_t v72 = (char *)v48 + v71;
      uint64_t v73 = (char *)v49 + v71;
      uint64_t v74 = *(void **)v73;
      uint64_t v75 = (void *)*((void *)v73 + 1);
      char v76 = v73[16];
      sub_10001DB84(*(void **)v73, v75);
      *(void *)uint64_t v72 = v74;
      *((void *)v72 + 1) = v75;
      v72[16] = v76;
      (*(void (**)(void *, void, uint64_t, int *))(v51 + 56))(v48, 0, 1, v50);
      goto LABEL_34;
    }
LABEL_25:
    uint64_t v58 = sub_10001D64C(&qword_10010DE20);
    memcpy(v48, v49, *(void *)(*(void *)(v58 - 8) + 64));
LABEL_34:
    uint64_t v77 = v126;
    uint64_t v61 = v129;
    goto LABEL_35;
  }
  if (v54)
  {
    sub_10002C2E4((uint64_t)v48, (uint64_t (*)(void))type metadata accessor for Banner);
    goto LABEL_25;
  }
  void *v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v48[2] = v49[2];
  _OWORD v48[3] = v49[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _OWORD v48[4] = v49[4];
  v48[5] = v49[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v59 = v50[7];
  char v60 = (char *)v49 + v59;
  uint64_t v123 = (char *)v48 + v59;
  uint64_t v61 = v129;
  int __dsta = v130();
  unsigned int v62 = ((uint64_t (*)(char *, uint64_t, uint64_t))v130)(v60, 1, v129);
  if (__dsta)
  {
    if (v62)
    {
      size_t v63 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
      uint64_t v64 = v123;
LABEL_45:
      memcpy(v64, v60, v63);
      goto LABEL_48;
    }
    (*(void (**)(char *, char *, uint64_t))(v131 + 16))(v123, v60, v129);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v123, 0, 1, v129);
  }
  else
  {
    if (v62)
    {
      (*(void (**)(char *, uint64_t))(v131 + 8))(v123, v129);
      size_t v63 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
      uint64_t v64 = v123;
      goto LABEL_45;
    }
    (*(void (**)(char *, char *, uint64_t))(v131 + 24))(v123, v60, v129);
  }
LABEL_48:
  uint64_t v106 = v50[8];
  long long v107 = (void *)((char *)v48 + v106);
  unint64_t v108 = (void *)((char *)v49 + v106);
  *long long v107 = *v108;
  v107[1] = v108[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v109 = v50[9];
  uint64_t v110 = (void *)((char *)v48 + v109);
  uint64_t v111 = *(void **)((char *)v48 + v109);
  uint64_t v112 = *(void **)((char *)v49 + v109);
  if (v111 != (void *)1)
  {
    if (v112 != (void *)1)
    {
      *uint64_t v110 = v112;
      id v114 = v112;

      goto LABEL_55;
    }
    sub_10001EA8C((uint64_t)v48 + v109);
    uint64_t v112 = *(void **)((char *)v49 + v109);
    goto LABEL_53;
  }
  if (v112 == (void *)1)
  {
LABEL_53:
    *uint64_t v110 = v112;
    goto LABEL_55;
  }
  *uint64_t v110 = v112;
  id v113 = v112;
LABEL_55:
  uint64_t v115 = v50[10];
  uint64_t v116 = (char *)v48 + v115;
  uint64_t v117 = (char *)v49 + v115;
  double v118 = *(void **)v117;
  unint64_t v119 = (void *)*((void *)v117 + 1);
  char v120 = v117[16];
  sub_10001DB84(*(void **)v117, v119);
  v121 = *(void **)v116;
  uint64_t v122 = (void *)*((void *)v116 + 1);
  *(void *)uint64_t v116 = v118;
  *((void *)v116 + 1) = v119;
  v116[16] = v120;
  sub_10001DE30(v121, v122);
  uint64_t v77 = v126;
LABEL_35:
  *(void **)((char *)v41 + v46[6]) = *(void **)(v42 + v46[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void **)((char *)v41 + v46[7]) = *(void **)(v42 + v46[7]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *((unsigned char *)v41 + v46[8]) = *(unsigned char *)(v42 + v46[8]);
  uint64_t v78 = v46[9];
  uint64_t v79 = (char *)v41 + v78;
  Swift::String v80 = (const void *)(v42 + v78);
  unsigned int v81 = ((uint64_t (*)(char *, uint64_t, uint64_t))v130)((char *)v41 + v78, 1, v61);
  unsigned int v82 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v130)(v80, 1, v61);
  if (!v81)
  {
    if (!v82)
    {
      (*(void (**)(char *, const void *, uint64_t))(v131 + 24))(v79, v80, v61);
      goto LABEL_41;
    }
    (*(void (**)(char *, uint64_t))(v131 + 8))(v79, v61);
    goto LABEL_40;
  }
  if (v82)
  {
LABEL_40:
    uint64_t v83 = sub_10001D64C(&qword_10010F340);
    memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64));
    goto LABEL_41;
  }
  (*(void (**)(char *, const void *, uint64_t))(v131 + 16))(v79, v80, v61);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v131 + 56))(v79, 0, 1, v61);
LABEL_41:
  *(void **)((char *)v41 + v46[10]) = *(void **)(v42 + v46[10]);
  swift_retain();
  swift_release();
  uint64_t v84 = v46[11];
  uint64_t v85 = (void **)((char *)v41 + v84);
  uint64_t v86 = (void *)(v42 + v84);
  *uint64_t v85 = *v86;
  v85[1] = v86[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v87 = v46[12];
  uint64_t v88 = (void **)((char *)v41 + v87);
  uint64_t v89 = (void *)(v42 + v87);
  *uint64_t v88 = *v89;
  v88[1] = v89[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v90 = *(int *)(v132 + 32);
  uint64_t v91 = (void *)(v128 + v90);
  uint64_t v92 = v77 + v90;
  *uint64_t v91 = *(void *)(v77 + v90);
  v91[1] = *(void *)(v77 + v90 + 8);
  uint64_t v93 = (int *)type metadata accessor for LayoutContext();
  uint64_t v94 = v93[6];
  uint64_t v95 = (char *)v91 + v94;
  uint64_t v96 = v92 + v94;
  uint64_t v97 = sub_1000CBEC0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v97 - 8) + 24))(v95, v96, v97);
  uint64_t v98 = v93[7];
  uint64_t v99 = (void *)((char *)v91 + v98);
  int v100 = (void *)(v92 + v98);
  *uint64_t v99 = *v100;
  v99[1] = v100[1];
  uint64_t v101 = v93[8];
  uint64_t v102 = (char *)v91 + v101;
  uint64_t v103 = v92 + v101;
  uint64_t v104 = sub_1000CB6D0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v104 - 8) + 24))(v102, v103, v104);
  *(void *)((char *)v91 + v93[9]) = *(void *)(v92 + v93[9]);
  *(void *)((char *)v91 + v93[10]) = *(void *)(v92 + v93[10]);
  *((unsigned char *)v91 + v93[11]) = *(unsigned char *)(v92 + v93[11]);
  *((unsigned char *)v91 + v93[12]) = *(unsigned char *)(v92 + v93[12]);
  return v128;
}

uint64_t sub_100034B4C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100034BA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  char v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_1000CBEF0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(v5 + v11);
  uint64_t v13 = a2 + v11;
  uint64_t v14 = *(void *)(a2 + v11 + 8);
  *uint64_t v12 = *(void *)(a2 + v11);
  v12[1] = v14;
  uint64_t v15 = type metadata accessor for Item.Headline(0);
  uint64_t v16 = *(int *)(v15 + 24);
  uint64_t v17 = (char *)v12 + v16;
  uint64_t v18 = (const void *)(v13 + v16);
  uint64_t v19 = sub_1000CABE0();
  uint64_t v20 = *(void *)(v19 - 8);
  char v60 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  if (v60(v18, 1, v19))
  {
    uint64_t v21 = sub_10001D64C(&qword_10010F340);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  *(_OWORD *)((char *)v12 + *(int *)(v15 + 28)) = *(_OWORD *)(v13 + *(int *)(v15 + 28));
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v22 = a3[7];
  uint64_t v23 = v5 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)(v5 + v22) = *(void *)(a2 + v22);
  uint64_t v25 = (int *)type metadata accessor for TodayContent();
  uint64_t v26 = v25[5];
  uint64_t v27 = (_OWORD *)(v23 + v26);
  uint64_t v28 = (_OWORD *)(v24 + v26);
  uint64_t v29 = (int *)type metadata accessor for Banner();
  uint64_t v30 = *((void *)v29 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = sub_10001D64C(&qword_10010DE20);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    long long v32 = v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v32;
    v27[2] = v28[2];
    uint64_t v33 = v29[7];
    uint64_t v56 = v5;
    __dst = (char *)v27 + v33;
    uint64_t v34 = (char *)v28 + v33;
    if (v60((char *)v28 + v33, 1, v19))
    {
      uint64_t v35 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(__dst, v34, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    *(_OWORD *)((char *)v27 + v29[8]) = *(_OWORD *)((char *)v28 + v29[8]);
    *(void *)((char *)v27 + v29[9]) = *(void *)((char *)v28 + v29[9]);
    uint64_t v36 = v29[10];
    uint64_t v37 = (char *)v27 + v36;
    id v38 = (char *)v28 + v36;
    v37[16] = v38[16];
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
    uint64_t v5 = v56;
  }
  *(void *)(v23 + v25[6]) = *(void *)(v24 + v25[6]);
  *(void *)(v23 + v25[7]) = *(void *)(v24 + v25[7]);
  *(unsigned char *)(v23 + v25[8]) = *(unsigned char *)(v24 + v25[8]);
  uint64_t v39 = v25[9];
  uint64_t v40 = (void *)(v23 + v39);
  uint64_t v41 = (const void *)(v24 + v39);
  if (v60((const void *)(v24 + v39), 1, v19))
  {
    uint64_t v42 = sub_10001D64C(&qword_10010F340);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v40, v41, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v40, 0, 1, v19);
  }
  *(void *)(v23 + v25[10]) = *(void *)(v24 + v25[10]);
  *(_OWORD *)(v23 + v25[11]) = *(_OWORD *)(v24 + v25[11]);
  *(_OWORD *)(v23 + v25[12]) = *(_OWORD *)(v24 + v25[12]);
  uint64_t v43 = v58[8];
  uint64_t v44 = v5 + v43;
  uint64_t v45 = v59 + v43;
  *(_OWORD *)(v5 + v43) = *(_OWORD *)(v59 + v43);
  uint64_t v46 = (int *)type metadata accessor for LayoutContext();
  uint64_t v47 = v46[6];
  uint64_t v48 = v44 + v47;
  uint64_t v49 = v45 + v47;
  uint64_t v50 = sub_1000CBEC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 32))(v48, v49, v50);
  *(_OWORD *)(v44 + v46[7]) = *(_OWORD *)(v45 + v46[7]);
  uint64_t v51 = v46[8];
  uint64_t v52 = v44 + v51;
  uint64_t v53 = v45 + v51;
  uint64_t v54 = sub_1000CB6D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 32))(v52, v53, v54);
  *(void *)(v44 + v46[9]) = *(void *)(v45 + v46[9]);
  *(void *)(v44 + v46[10]) = *(void *)(v45 + v46[10]);
  *(unsigned char *)(v44 + v46[11]) = *(unsigned char *)(v45 + v46[11]);
  *(unsigned char *)(v44 + v46[12]) = *(unsigned char *)(v45 + v46[12]);
  return v5;
}

uint64_t sub_100035164(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_10002AFC4(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (char *)a2 + v10;
    sub_1000227A8(a1 + v10, &qword_10010E8E0);
    uint64_t v13 = sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_1000CBEF0();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v115 = a3;
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t)a2 + v15;
  *(void *)(a1 + v15) = *(uint64_t *)((char *)a2 + v15);
  swift_unknownObjectRelease();
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  swift_bridgeObjectRelease();
  uint64_t v110 = type metadata accessor for Item.Headline(0);
  uint64_t v18 = *(int *)(v110 + 24);
  uint64_t v19 = (void *)(v16 + v18);
  uint64_t v20 = (const void *)(v17 + v18);
  uint64_t v21 = sub_1000CABE0();
  uint64_t v113 = *(void *)(v21 - 8);
  uint64_t v22 = *(uint64_t (**)(void))(v113 + 48);
  unsigned int v23 = ((uint64_t (*)(void *, uint64_t, uint64_t))v22)(v19, 1, v21);
  uint64_t v114 = v21;
  uint64_t v112 = v22;
  unsigned int v24 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v22)(v20, 1, v21);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, const void *, uint64_t))(v113 + 32))(v19, v20, v21);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v113 + 56))(v19, 0, 1, v21);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v113 + 8))(v19, v21);
LABEL_10:
    uint64_t v25 = sub_10001D64C(&qword_10010F340);
    memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(void *, const void *, uint64_t))(v113 + 40))(v19, v20, v21);
LABEL_11:
  uint64_t v26 = *(int *)(v110 + 28);
  uint64_t v27 = (void **)(v16 + v26);
  uint64_t v28 = (void **)(v17 + v26);
  if (*(void *)(v16 + v26 + 8))
  {
    if (v28[1])
    {
      uint64_t v29 = *v27;
      *uint64_t v27 = *v28;

      uint64_t v30 = v27[1];
      v27[1] = v28[1];

      goto LABEL_16;
    }
    sub_100034B4C((uint64_t)v27);
  }
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
LABEL_16:
  uint64_t v31 = *(int *)(v115 + 28);
  uint64_t v109 = a2;
  uint64_t v111 = a1;
  uint64_t v32 = a1 + v31;
  uint64_t v33 = (uint64_t)a2 + v31;
  uint64_t v34 = *(void **)(a1 + v31);
  *(void *)(a1 + v31) = *(uint64_t *)((char *)a2 + v31);

  uint64_t v35 = (int *)type metadata accessor for TodayContent();
  uint64_t v36 = v35[5];
  uint64_t v37 = (void *)(v32 + v36);
  id v38 = (void *)(v33 + v36);
  uint64_t v39 = (int *)type metadata accessor for Banner();
  uint64_t v40 = *((void *)v39 - 1);
  uint64_t v41 = *(uint64_t (**)(void *, uint64_t, int *))(v40 + 48);
  int v42 = v41(v37, 1, v39);
  int v43 = v41(v38, 1, v39);
  if (v42)
  {
    if (!v43)
    {
      long long v44 = *((_OWORD *)v38 + 1);
      *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
      *((_OWORD *)v37 + 1) = v44;
      *((_OWORD *)v37 + 2) = *((_OWORD *)v38 + 2);
      uint64_t v45 = v39[7];
      uint64_t v46 = (char *)v37 + v45;
      uint64_t v47 = (char *)v38 + v45;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v112)((char *)v38 + v45, 1, v114))
      {
        uint64_t v48 = sub_10001D64C(&qword_10010F340);
        memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v46, v47, v114);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v113 + 56))(v46, 0, 1, v114);
      }
      *(_OWORD *)((char *)v37 + v39[8]) = *(_OWORD *)((char *)v38 + v39[8]);
      *(void *)((char *)v37 + v39[9]) = *(void *)((char *)v38 + v39[9]);
      uint64_t v58 = v39[10];
      uint64_t v59 = (char *)v37 + v58;
      char v60 = (char *)v38 + v58;
      v59[16] = v60[16];
      *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
      (*(void (**)(void *, void, uint64_t, int *))(v40 + 56))(v37, 0, 1, v39);
      goto LABEL_29;
    }
LABEL_22:
    uint64_t v49 = sub_10001D64C(&qword_10010DE20);
    memcpy(v37, v38, *(void *)(*(void *)(v49 - 8) + 64));
LABEL_29:
    uint64_t v61 = v111;
    uint64_t v62 = v114;
    goto LABEL_30;
  }
  if (v43)
  {
    sub_10002C2E4((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for Banner);
    goto LABEL_22;
  }
  uint64_t v50 = v38[1];
  void *v37 = *v38;
  v37[1] = v50;
  swift_bridgeObjectRelease();
  uint64_t v51 = v38[3];
  _OWORD v37[2] = v38[2];
  _OWORD v37[3] = v51;
  swift_bridgeObjectRelease();
  uint64_t v52 = v38[5];
  _OWORD v37[4] = v38[4];
  v37[5] = v52;
  swift_bridgeObjectRelease();
  uint64_t v53 = v39[7];
  uint64_t v54 = (char *)v38 + v53;
  long long v107 = (char *)v37 + v53;
  int v108 = v112();
  unsigned int v55 = ((uint64_t (*)(char *, uint64_t, uint64_t))v112)(v54, 1, v114);
  if (v108)
  {
    if (v55)
    {
      size_t v56 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
      uint64_t v57 = v107;
LABEL_40:
      memcpy(v57, v54, v56);
      goto LABEL_43;
    }
    (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v107, v54, v114);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v113 + 56))(v107, 0, 1, v114);
  }
  else
  {
    if (v55)
    {
      (*(void (**)(char *, uint64_t))(v113 + 8))(v107, v114);
      size_t v56 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
      uint64_t v57 = v107;
      goto LABEL_40;
    }
    (*(void (**)(char *, char *, uint64_t))(v113 + 40))(v107, v54, v114);
  }
LABEL_43:
  uint64_t v92 = v39[8];
  uint64_t v93 = (void *)((char *)v37 + v92);
  uint64_t v94 = (void *)((char *)v38 + v92);
  uint64_t v96 = *v94;
  uint64_t v95 = v94[1];
  void *v93 = v96;
  v93[1] = v95;
  swift_bridgeObjectRelease();
  uint64_t v97 = v39[9];
  uint64_t v98 = (void *)((char *)v37 + v97);
  uint64_t v99 = *(void **)((char *)v37 + v97);
  uint64_t v100 = *(void *)((char *)v38 + v97);
  if (v99 != (void *)1)
  {
    if (v100 != 1)
    {
      *uint64_t v98 = v100;

      goto LABEL_48;
    }
    sub_10001EA8C((uint64_t)v37 + v97);
    uint64_t v100 = *(void *)((char *)v38 + v97);
  }
  *uint64_t v98 = v100;
LABEL_48:
  uint64_t v62 = v114;
  uint64_t v101 = v39[10];
  uint64_t v102 = (char *)v37 + v101;
  uint64_t v103 = (char *)v38 + v101;
  char v104 = v103[16];
  uint64_t v105 = *(void **)v102;
  uint64_t v106 = (void *)*((void *)v102 + 1);
  *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
  v102[16] = v104;
  sub_10001DE30(v105, v106);
  uint64_t v61 = v111;
LABEL_30:
  *(void *)(v32 + v35[6]) = *(void *)(v33 + v35[6]);
  swift_bridgeObjectRelease();
  *(void *)(v32 + v35[7]) = *(void *)(v33 + v35[7]);
  swift_unknownObjectRelease();
  *(unsigned char *)(v32 + v35[8]) = *(unsigned char *)(v33 + v35[8]);
  uint64_t v63 = v35[9];
  uint64_t v64 = (void *)(v32 + v63);
  uint64_t v65 = (const void *)(v33 + v63);
  unsigned int v66 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v112)(v32 + v63, 1, v62);
  unsigned int v67 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v112)(v65, 1, v62);
  if (!v66)
  {
    if (!v67)
    {
      (*(void (**)(void *, const void *, uint64_t))(v113 + 40))(v64, v65, v62);
      goto LABEL_36;
    }
    (*(void (**)(void *, uint64_t))(v113 + 8))(v64, v62);
    goto LABEL_35;
  }
  if (v67)
  {
LABEL_35:
    uint64_t v68 = sub_10001D64C(&qword_10010F340);
    memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(void *, const void *, uint64_t))(v113 + 32))(v64, v65, v62);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v113 + 56))(v64, 0, 1, v62);
LABEL_36:
  *(void *)(v32 + v35[10]) = *(void *)(v33 + v35[10]);
  swift_release();
  uint64_t v69 = v35[11];
  id v70 = (void *)(v32 + v69);
  uint64_t v71 = (uint64_t *)(v33 + v69);
  uint64_t v73 = *v71;
  uint64_t v72 = v71[1];
  *id v70 = v73;
  v70[1] = v72;
  swift_bridgeObjectRelease();
  uint64_t v74 = v35[12];
  uint64_t v75 = (void *)(v32 + v74);
  char v76 = (uint64_t *)(v33 + v74);
  uint64_t v78 = *v76;
  uint64_t v77 = v76[1];
  void *v75 = v78;
  v75[1] = v77;
  swift_bridgeObjectRelease();
  uint64_t v79 = *(int *)(v115 + 32);
  uint64_t v80 = v61 + v79;
  uint64_t v81 = (uint64_t)v109 + v79;
  *(_OWORD *)(v61 + v79) = *(_OWORD *)((char *)v109 + v79);
  unsigned int v82 = (int *)type metadata accessor for LayoutContext();
  uint64_t v83 = v82[6];
  uint64_t v84 = v80 + v83;
  uint64_t v85 = v81 + v83;
  uint64_t v86 = sub_1000CBEC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 40))(v84, v85, v86);
  *(_OWORD *)(v80 + v82[7]) = *(_OWORD *)(v81 + v82[7]);
  uint64_t v87 = v82[8];
  uint64_t v88 = v80 + v87;
  uint64_t v89 = v81 + v87;
  uint64_t v90 = sub_1000CB6D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 40))(v88, v89, v90);
  *(void *)(v80 + v82[9]) = *(void *)(v81 + v82[9]);
  *(void *)(v80 + v82[10]) = *(void *)(v81 + v82[10]);
  *(unsigned char *)(v80 + v82[11]) = *(unsigned char *)(v81 + v82[11]);
  *(unsigned char *)(v80 + v82[12]) = *(unsigned char *)(v81 + v82[12]);
  return v61;
}

uint64_t sub_100035AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100035B04);
}

uint64_t sub_100035B04(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  uint64_t v8 = sub_10001D64C(&qword_10010E8E8);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v14(a1 + v11, a2, v9);
  }
  uint64_t v12 = type metadata accessor for Item.Headline(0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_11;
  }
  uint64_t v13 = type metadata accessor for TodayContent();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_11;
  }
  uint64_t v15 = type metadata accessor for LayoutContext();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[8];

  return v16(v18, a2, v17);
}

uint64_t sub_100035CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100035CD8);
}

uint64_t sub_100035CD8(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
    return result;
  }
  uint64_t v8 = sub_10001D64C(&qword_10010E8E8);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_9:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = type metadata accessor for Item.Headline(0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_9;
  }
  uint64_t v13 = type metadata accessor for TodayContent();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for LayoutContext();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = v5 + a4[8];

  return v16(v18, a2, a2, v17);
}

void sub_100035E9C()
{
  sub_10002D8E0();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Item.Headline(319);
    if (v1 <= 0x3F)
    {
      type metadata accessor for TodayContent();
      if (v2 <= 0x3F)
      {
        type metadata accessor for LayoutContext();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_100035FE8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000360EC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100036108(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_100036118(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100036128@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1000CB590();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10003615C()
{
  return sub_1000CB5A0();
}

uint64_t sub_10003618C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000CB510();
  *a1 = result;
  return result;
}

uint64_t sub_1000361B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000CB510();
  *a1 = result;
  return result;
}

uint64_t sub_1000361E4()
{
  return sub_1000CB520();
}

uint64_t sub_100036210()
{
  return sub_1000CB520();
}

uint64_t sub_10003623C()
{
  return sub_1000CB3F0();
}

uint64_t sub_100036260()
{
  return sub_1000CB3F0();
}

uint64_t sub_100036284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000362B0(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

uint64_t sub_1000362B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(char *))
{
  a5(0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_100036380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000362B0(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

unint64_t sub_1000363C0()
{
  unint64_t result = qword_10010EBE8;
  if (!qword_10010EBE8)
  {
    sub_10001D690(&qword_10010EBD0);
    sub_100036460();
    sub_100036A5C(&qword_10010EC20, &qword_10010EBC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EBE8);
  }
  return result;
}

unint64_t sub_100036460()
{
  unint64_t result = qword_10010EBF0;
  if (!qword_10010EBF0)
  {
    sub_10001D690(&qword_10010EBF8);
    sub_100036500();
    sub_100036A5C(&qword_10010EC10, &qword_10010EC18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EBF0);
  }
  return result;
}

unint64_t sub_100036500()
{
  unint64_t result = qword_10010EC00;
  if (!qword_10010EC00)
  {
    sub_10001D690(&qword_10010EC08);
    sub_100036A5C(&qword_10010EA70, &qword_10010EA78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EC00);
  }
  return result;
}

uint64_t sub_1000365A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10001D64C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100036604(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001D690(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_100036674(void *a1, uint64_t a2, char a3)
{
  if (a3) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

unint64_t sub_100036684()
{
  unint64_t result = qword_10010EC58;
  if (!qword_10010EC58)
  {
    sub_10001D690(&qword_10010EC40);
    sub_1000300D4(&qword_10010EC60, (void (*)(uint64_t))type metadata accessor for SourceView);
    sub_100036A5C(&qword_10010EA70, &qword_10010EA78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EC58);
  }
  return result;
}

unint64_t sub_100036754()
{
  unint64_t result = qword_10010EC68;
  if (!qword_10010EC68)
  {
    sub_10001D690(&qword_10010EC50);
    sub_10001D690(&qword_10010EC40);
    sub_100036684();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EC68);
  }
  return result;
}

void sub_100036804(void *a1, uint64_t a2, char a3)
{
  if (a3) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100036814(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100036850(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10001D64C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000368B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1000CB590();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000368E8()
{
  return sub_1000CB5A0();
}

uint64_t sub_100036918(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001D690(a2);
    a3();
    sub_100036A5C(&qword_10010EA70, &qword_10010EA78);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000369BC()
{
  unint64_t result = qword_10010ECA8;
  if (!qword_10010ECA8)
  {
    sub_10001D690(&qword_10010ECB0);
    sub_100036A5C(&qword_10010ECB8, &qword_10010ECC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010ECA8);
  }
  return result;
}

uint64_t sub_100036A5C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001D690(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100036AA4()
{
  unint64_t result = qword_10010ECC8;
  if (!qword_10010ECC8)
  {
    sub_10001D690(&qword_10010ECD0);
    sub_100036A5C(&qword_10010EB88, &qword_10010EB78);
    sub_100036A5C(&qword_10010EB90, &qword_10010EB68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010ECC8);
  }
  return result;
}

uint64_t sub_100036B68()
{
  sub_1000201A8(v0 + 16);
  sub_1000201A8(v0 + 56);
  sub_1000201A8(v0 + 96);

  return _swift_deallocClassInstance(v0, 136, 7);
}

uint64_t type metadata accessor for EventProcessingSidecarTask()
{
  return self;
}

uint64_t sub_100036BD4(void **a1, uint64_t a2)
{
  sub_100077C80(*a1);
  sub_100020110((void *)(a2 + 96), *(void *)(a2 + 120));
  type metadata accessor for SessionReporter();
  uint64_t v3 = sub_10003C7EC();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100036C7C(char *a1, char *a2)
{
  uint64_t v79 = a2;
  uint64_t v75 = sub_10001D64C(&qword_10010ED88);
  uint64_t v3 = __chkstk_darwin(v75);
  char v76 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v72 = (char *)&v65 - v5;
  uint64_t v73 = sub_10001D64C(&qword_10010ED90);
  uint64_t v6 = __chkstk_darwin(v73);
  uint64_t v74 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v78 = (uint64_t)&v65 - v8;
  uint64_t v9 = sub_1000CACC0();
  uint64_t v81 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v80 = (char *)&v65 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v65 - v15;
  uint64_t v17 = sub_10001D64C(&qword_10010ED98);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for NewsTimelineEntry();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v71 = (uint64_t)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v65 - v25;
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v65 - v27;
  uint64_t v29 = *(int *)(type metadata accessor for TaskContext() + 20);
  uint64_t v77 = a1;
  sub_100037574((uint64_t)&a1[v29], (uint64_t)v19);
  uint64_t v70 = v21;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_1000227A8((uint64_t)v19, &qword_10010ED98);
    sub_100022644();
    uint64_t v30 = (void *)sub_1000CC630();
    sub_1000CC530();
    sub_1000CB230();

    sub_10001D64C((uint64_t *)&unk_10010F330);
    swift_allocObject();
    return sub_1000CB050();
  }
  sub_100022858((uint64_t)v19, (uint64_t)v28);
  sub_1000CACB0();
  sub_100037A3C(&qword_10010EDA0);
  if (sub_1000CC160())
  {
    sub_1000202A4((uint64_t)v28, (uint64_t)v26);
    sub_100022644();
    uint64_t v32 = sub_1000CC630();
    uint64_t v33 = (uint64_t)v28;
    os_log_type_t v34 = sub_1000CC530();
    if (os_log_type_enabled(v32, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v69 = v16;
      uint64_t v83 = v36;
      uint64_t v68 = (char *)v33;
      *(_DWORD *)uint64_t v35 = 136315138;
      sub_100037A3C(&qword_10010EDA8);
      uint64_t v37 = sub_1000CCA20();
      uint64_t v82 = sub_1000B2E18(v37, v38, &v83);
      uint64_t v33 = (uint64_t)v68;
      sub_1000CC660();
      swift_bridgeObjectRelease();
      sub_1000379E0((uint64_t)v26);
      _os_log_impl((void *)&_mh_execute_header, v32, v34, "event-processing sidecar task cannot query because the last entry dated %s is in the future", v35, 0xCu);
      swift_arrayDestroy();
      uint64_t v16 = v69;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1000379E0((uint64_t)v26);
    }
    uint64_t v64 = v81;
    sub_10001D64C((uint64_t *)&unk_10010F330);
    swift_allocObject();
    uint64_t v31 = sub_1000CB050();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v16, v9);
    sub_1000379E0(v33);
    return v31;
  }
  sub_1000CAC80();
  char v39 = sub_1000CC170();
  uint64_t v40 = v80;
  uint64_t v41 = v81;
  int v42 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
  if (v39) {
    int v43 = v12;
  }
  else {
    int v43 = v28;
  }
  v42(v80, v43, v9);
  unsigned int v66 = *(void (**)(char *, uint64_t))(v41 + 8);
  uint64_t v67 = v41 + 8;
  v66(v12, v9);
  long long v44 = v40;
  uint64_t result = sub_1000CC180();
  if (result)
  {
    uint64_t v68 = v28;
    uint64_t v69 = v16;
    uint64_t v46 = v75;
    uint64_t v47 = v72;
    uint64_t v48 = &v72[*(int *)(v75 + 48)];
    v42(v72, v44, v9);
    uint64_t v65 = v48;
    v42(v48, v16, v9);
    uint64_t v49 = v76;
    uint64_t v50 = &v76[*(int *)(v46 + 48)];
    v42(v76, v47, v9);
    v42(v50, v48, v9);
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    uint64_t v52 = (uint64_t)v74;
    v51(v74, v49, v9);
    v66(v50, v9);
    uint64_t v53 = &v49[*(int *)(v46 + 48)];
    v51(v49, v47, v9);
    v51(v53, v65, v9);
    v51((char *)(v52 + *(int *)(v73 + 36)), v53, v9);
    uint64_t v54 = v49;
    unsigned int v55 = v66;
    v66(v54, v9);
    uint64_t v56 = v78;
    uint64_t v57 = sub_1000375DC(v52, v78);
    __chkstk_darwin(v57);
    uint64_t v58 = v79;
    *(&v65 - 4) = v79;
    *(&v65 - 3) = (char *)v56;
    *(&v65 - 2) = v77;
    sub_10001D64C(&qword_100111020);
    sub_1000CB0A0();
    uint64_t v59 = (uint64_t)v68;
    uint64_t v60 = v71;
    sub_1000202A4((uint64_t)v68, v71);
    unint64_t v61 = (*(unsigned __int8 *)(v70 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = v58;
    sub_100022858(v60, v62 + v61);
    swift_retain();
    uint64_t v63 = (void *)sub_1000CB010();
    uint64_t v31 = sub_1000CB020();
    swift_release();
    swift_release();

    v55(v80, v9);
    v55(v69, v9);
    sub_1000379E0(v59);
    sub_1000227A8(v56, &qword_10010ED90);
    return v31;
  }
  __break(1u);
  return result;
}

uint64_t sub_100037574(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001D64C(&qword_10010ED98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000375DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001D64C(&qword_10010ED90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037644()
{
  return sub_1000B52E0(*(void *)(v0 + 24), *(uint8_t **)(v0 + 32));
}

uint64_t sub_100037670()
{
  unint64_t v1 = (int *)(type metadata accessor for NewsTimelineEntry() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  uint64_t v5 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  uint64_t v6 = (id *)(v0 + v3 + v1[7]);

  uint64_t v7 = type metadata accessor for TodayContent();
  uint64_t v8 = (char *)v6 + *(int *)(v7 + 20);
  uint64_t v9 = (int *)type metadata accessor for Banner();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v8, 1, v9))
  {
    uint64_t v18 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = &v8[v9[7]];
    uint64_t v11 = sub_1000CABE0();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void **)&v8[v9[9]];
    if (v13 != (void *)1) {

    }
    sub_10001DE30(*(void **)&v8[v9[10]], *(void **)&v8[v9[10] + 8]);
    uint64_t v4 = v18;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v14 = (char *)v6 + *(int *)(v7 + 36);
  uint64_t v15 = sub_1000CABE0();
  uint64_t v16 = *(void *)(v15 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100037970(void **a1)
{
  type metadata accessor for NewsTimelineEntry();
  return sub_100036BD4(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000379E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NewsTimelineEntry();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100037A3C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000CACC0();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for MessageView(uint64_t a1)
{
  sub_100036118(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for MessageView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_100036108(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MessageView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_100036108(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_100036118(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for MessageView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MessageView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_100036118(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessageView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageView()
{
  return &type metadata for MessageView;
}

uint64_t sub_100037CE0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100037CFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10001D64C(&qword_10010EDB0);
  __chkstk_darwin(v2 - 8);
  char v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D64C(&qword_10010EDB8);
  uint64_t inited = swift_initStackObject();
  long long v16 = xmmword_1000D37C0;
  *(_OWORD *)(inited + 16) = xmmword_1000D37C0;
  *(void *)(inited + 32) = UIFontDescriptorTraitsAttribute;
  sub_10001D64C(&qword_10010EDC0);
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = v16;
  *(void *)(v6 + 32) = UIFontWeightTrait;
  *(UIFontWeight *)(v6 + 40) = UIFontWeightSemibold;
  char v7 = UIFontDescriptorTraitsAttribute;
  uint64_t v8 = UIFontWeightTrait;
  unint64_t v9 = sub_10008A744(v6);
  *(void *)(inited + 64) = sub_10001D64C(&qword_10010EDC8);
  *(void *)(inited + 40) = v9;
  sub_10008A850(inited);
  id v10 = [self preferredFontDescriptorWithTextStyle:UIFontTextStyleSubheadline];
  type metadata accessor for AttributeName(0);
  sub_100038454();
  Class isa = sub_1000CC100().super.isa;
  swift_bridgeObjectRelease();
  id v12 = [v10 fontDescriptorByAddingAttributes:isa];

  id v13 = [self fontWithDescriptor:v12 size:0.0];
  sub_1000CB8B0();
  *(void *)char v4 = sub_1000CB6F0();
  *((void *)v4 + 1) = 0;
  v4[16] = 1;
  uint64_t v14 = sub_10001D64C(&qword_10010EDD0);
  sub_100037F8C(&v4[*(int *)(v14 + 44)]);
  sub_1000CBD20();
  sub_100038260(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a1, 0.0, 1, 0.0, 1);

  swift_release();
  return sub_1000384AC((uint64_t)v4);
}

uint64_t sub_100037F8C@<X0>(void *a1@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v36 = sub_10001D64C(&qword_10010EDE0);
  uint64_t v38 = *(void *)(v36 - 8);
  uint64_t v1 = __chkstk_darwin(v36);
  uint64_t v35 = &v30[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v1);
  char v4 = &v30[-v3];
  uint64_t v5 = sub_1000CB940();
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  uint64_t v10 = sub_1000CB900();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  sub_100036118(v5, v7, v9);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v39 = v10;
  uint64_t v40 = v12;
  LOBYTE(v41) = v16;
  uint64_t v42 = v14;
  uint64_t v43 = KeyPath;
  LOBYTE(v44) = 1;
  sub_10001D64C(&qword_10010EDE8);
  sub_1000385C8();
  sub_1000CBA20();
  sub_100036118(v10, v12, v16);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v34 = v39;
  int v33 = v40;
  uint64_t v32 = v41;
  int v31 = v42;
  uint64_t v18 = v43;
  uint64_t v19 = v44;
  uint64_t v20 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v38 + 16);
  uint64_t v21 = v35;
  uint64_t v22 = v4;
  uint64_t v23 = v4;
  uint64_t v24 = v36;
  v20(v35, v22, v36);
  uint64_t v25 = v37;
  void *v37 = 0;
  *((unsigned char *)v25 + 8) = 1;
  uint64_t v26 = sub_10001D64C(&qword_10010EE08);
  v20((unsigned char *)v25 + *(int *)(v26 + 48), v21, v24);
  uint64_t v27 = (char *)v25 + *(int *)(v26 + 64);
  *(void *)uint64_t v27 = 0;
  v27[8] = 1;
  *((void *)v27 + 2) = v34;
  v27[24] = v33;
  *((void *)v27 + 4) = v32;
  v27[40] = v31;
  *((void *)v27 + 6) = v18;
  *((void *)v27 + 7) = v19;
  uint64_t v28 = *(void (**)(unsigned char *, uint64_t))(v38 + 8);
  v28(v23, v24);
  return ((uint64_t (*)(unsigned char *, uint64_t))v28)(v21, v24);
}

__n128 sub_100038260@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_1000CC520();
    uint64_t v23 = (void *)sub_1000CB7E0();
    sub_1000CB240();
  }
  sub_1000CB3E0();
  sub_10003850C(v13, a9);
  uint64_t v24 = (_OWORD *)(a9 + *(int *)(sub_10001D64C(&qword_10010EDD8) + 36));
  _OWORD v24[4] = v30;
  v24[5] = v31;
  v24[6] = v32;
  *uint64_t v24 = v26;
  v24[1] = v27;
  __n128 result = v29;
  v24[2] = v28;
  _OWORD v24[3] = v29;
  return result;
}

uint64_t sub_100038418@<X0>(uint64_t a1@<X8>)
{
  return sub_100037CFC(a1);
}

unint64_t sub_100038454()
{
  unint64_t result = qword_10010E418;
  if (!qword_10010E418)
  {
    type metadata accessor for AttributeName(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E418);
  }
  return result;
}

uint64_t sub_1000384AC(uint64_t a1)
{
  uint64_t v2 = sub_10001D64C(&qword_10010EDB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003850C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001D64C(&qword_10010EDB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100038574@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000CB4F0();
  *a1 = result;
  return result;
}

uint64_t sub_1000385A0()
{
  return sub_1000CB500();
}

unint64_t sub_1000385C8()
{
  unint64_t result = qword_10010EDF0;
  if (!qword_10010EDF0)
  {
    sub_10001D690(&qword_10010EDE8);
    sub_100036A5C(&qword_10010EDF8, &qword_10010EE00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EDF0);
  }
  return result;
}

unint64_t sub_10003866C()
{
  unint64_t result = qword_10010EE10;
  if (!qword_10010EE10)
  {
    sub_10001D690(&qword_10010EDD8);
    sub_100036A5C(&qword_10010EE18, &qword_10010EDB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EE10);
  }
  return result;
}

uint64_t sub_10003870C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100020110(a1, a1[3]);
  uint64_t v3 = type metadata accessor for NTTodayContextResultsService();
  uint64_t result = sub_1000CAEB0();
  if (result)
  {
    a2[3] = v3;
    a2[4] = (uint64_t)&off_1000FE668;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100038780(void *a1)
{
  uint64_t v2 = sub_1000CABE0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v6 - 8);
  char v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100020110(a1, a1[3]);
  sub_10001D64C(&qword_10010EF50);
  uint64_t v9 = sub_1000CAEB0();
  if (!v9)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v10 = v9;
  id v11 = (id)FCURLForContainerizedUserAccountCachesDirectory();
  if (!v11)
  {
LABEL_7:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_8;
  }
  uint64_t v12 = v11;
  sub_1000CABA0();

  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if (result == 1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  sub_1000CAB60(v14);
  char v16 = v15;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  sub_100020110(a1, a1[3]);
  sub_100036814(0, (unint64_t *)&qword_10010EF48);
  uint64_t result = sub_1000CAEB0();
  if (result)
  {
    uint64_t v17 = (void *)result;
    id v18 = [self nt_contentContextWithConfigurationManager:v10 contentHostDirectory:v16 networkBehaviorMonitor:result];
    swift_unknownObjectRelease();

    return (uint64_t)v18;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100038A1C(void *a1)
{
  sub_100020110(a1, a1[3]);
  sub_100036814(0, (unint64_t *)&unk_10010EF60);
  uint64_t result = sub_1000CAEB0();
  if (!result) {
    __break(1u);
  }
  return result;
}

id sub_100038A80(void *a1)
{
  sub_100020110(a1, a1[3]);
  sub_100036814(0, (unint64_t *)&unk_10010EF60);
  id result = (id)sub_1000CAEB0();
  if (result)
  {
    uint64_t v2 = result;
    id v3 = [result asWidgetUpdateEventTracker];

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100038B08(void *a1)
{
  uint64_t v2 = sub_1000CC570();
  __chkstk_darwin(v2);
  uint64_t v3 = sub_1000CC580();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000CBD90();
  __chkstk_darwin(v7 - 8);
  sub_100036814(0, &qword_10010EF98);
  sub_1000CBD80();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  v14[1] = _swiftEmptyArrayStorage;
  sub_100039D8C();
  sub_10001D64C(&qword_10010EFA8);
  sub_100039DE4();
  sub_1000CC6D0();
  char v8 = (void *)sub_1000CC5C0();
  sub_100020110(a1, a1[3]);
  sub_10001D64C((uint64_t *)&unk_10010EEC0);
  uint64_t result = sub_1000CAEB0();
  if (result)
  {
    uint64_t v10 = result;
    sub_100020110(a1, a1[3]);
    sub_10001D64C(&qword_10010EFB8);
    uint64_t result = sub_1000CAEB0();
    if (result)
    {
      uint64_t v11 = result;
      id v12 = [objc_allocWithZone((Class)FCAsyncSerialQueue) init];
      id v13 = [objc_allocWithZone((Class)NTTodayContext) initWithContentContext:v10 feedPersonalizerFactory:v11 todayBannerValidator:0 processVariant:0 accessQueue:v8 fetchQueue:v12];
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      return (uint64_t)v13;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_100038DF4(void *a1)
{
  sub_100020110(a1, a1[3]);
  sub_10001D64C((uint64_t *)&unk_10010EEC0);
  id result = (id)sub_1000CAEB0();
  if (result)
  {
    id v2 = [result news_core_ConfigurationManager];
    swift_unknownObjectRelease();
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100038E74()
{
  id v0 = objc_allocWithZone((Class)FCNetworkBehaviorMonitor);

  return [v0 initWithOptions:7 cacheDirectory:0];
}

void sub_100038EB4(void *a1@<X8>)
{
  *a1 = 17;
}

void *sub_100038EC0(void *a1)
{
  sub_100020110(a1, a1[3]);
  sub_100036814(0, &qword_100112640);
  id result = (void *)sub_1000CAEB0();
  if (result)
  {
    id v2 = result;
    type metadata accessor for NTTodayContextResultsService();
    id result = (void *)swift_allocObject();
    result[2] = 0;
    result[3] = 0;
    result[4] = v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100038F44(void *a1)
{
  uint64_t v2 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = (id)FCBundle();
  if (!v5)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v6 = v5;
  NSString v7 = sub_1000CC1C0();
  id v8 = [v6 objectForInfoDictionaryKey:v7];

  if (v8)
  {
    sub_1000CC6B0();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v33 = 0u;
    long long v34 = 0u;
  }
  uint64_t v9 = 0x6E776F6E6B6E55;
  sub_100039CC4((uint64_t)&v33, (uint64_t)v35);
  if (v36) {
    swift_dynamicCast();
  }
  else {
    sub_100039D2C((uint64_t)v35);
  }
  id v10 = (id)FCBundle();
  if (!v10) {
    goto LABEL_26;
  }
  uint64_t v11 = v10;
  NSString v12 = sub_1000CC1C0();
  id v13 = [v11 objectForInfoDictionaryKey:v12];

  if (v13)
  {
    sub_1000CC6B0();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v33 = 0u;
    long long v34 = 0u;
  }
  sub_100039CC4((uint64_t)&v33, (uint64_t)v35);
  if (v36)
  {
    if (swift_dynamicCast()) {
      uint64_t v9 = v32[2];
    }
  }
  else
  {
    sub_100039D2C((uint64_t)v35);
  }
  id v14 = [self defaultConfiguration];
  id v15 = (id)FCURLForContainerizedUserAccountCachesDirectory();
  v32[1] = v9;
  if (v15)
  {
    char v16 = v15;
    sub_1000CABA0();

    uint64_t v17 = sub_1000CABE0();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v4, 0, 1, v17);
  }
  else
  {
    uint64_t v18 = sub_1000CABE0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v4, 1, 1, v18);
  }
  sub_100020110(a1, a1[3]);
  sub_10001D64C(&qword_10010EF58);
  uint64_t v19 = sub_1000CAEB0();
  if (!v19) {
    goto LABEL_27;
  }
  uint64_t v20 = v19;
  sub_100020110(a1, a1[3]);
  sub_100036814(0, (unint64_t *)&qword_10010EF48);
  uint64_t v21 = sub_1000CAEB0();
  if (!v21)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    return;
  }
  uint64_t v22 = (void *)v21;
  uint64_t v23 = sub_1000CABE0();
  uint64_t v24 = *(void *)(v23 - 8);
  long long v26 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v4, 1, v23) != 1)
  {
    sub_1000CAB60(v25);
    long long v26 = v27;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v23);
  }
  id v28 = objc_allocWithZone((Class)FCConfigurationManager);
  NSString v29 = sub_1000CC1C0();
  swift_bridgeObjectRelease();
  NSString v30 = sub_1000CC1C0();
  swift_bridgeObjectRelease();
  id v31 = [v28 initWithContextConfiguration:v14 contentHostDirectoryFileURL:v26 feldsparIDProvider:v20 appShortVersionString:v29 buildNumberString:v30 networkBehaviorMonitor:v22];

  swift_unknownObjectRelease();
  if (!v31) {
    goto LABEL_29;
  }
}

id sub_100039408()
{
  id v0 = [self sharedInstance];

  return v0;
}

uint64_t sub_100039448(void *a1)
{
  sub_10001D64C(&qword_100111C70);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1000D3C10;
  sub_100020110(a1, a1[3]);
  sub_10001D64C((uint64_t *)&unk_10010F180);
  uint64_t result = sub_1000CAE90();
  if (result)
  {
    *(void *)(v2 + 32) = result;
    sub_100020110(a1, a1[3]);
    sub_100036814(0, (unint64_t *)&unk_10010EF70);
    uint64_t result = sub_1000CAEB0();
    if (result)
    {
      *(void *)(v2 + 40) = result;
      sub_1000CC3D0();
      id v4 = objc_allocWithZone((Class)FTAggregateWidgetEventTracker);
      sub_10001D64C((uint64_t *)&unk_10010EF80);
      Class isa = sub_1000CC3A0().super.isa;
      swift_bridgeObjectRelease();
      id v6 = [v4 initWithEventTrackers:isa];

      return (uint64_t)v6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000395A8()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for TagWidgetServiceAssembly()
{
  return self;
}

uint64_t sub_1000395E0()
{
  uint64_t v0 = sub_1000CB000();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CAF10();
  sub_10001D64C(&qword_100112610);
  sub_1000CAF90();
  swift_release();
  uint64_t v4 = enum case for Scope.singleton(_:);
  id v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v5(v3, enum case for Scope.singleton(_:), v0);
  sub_1000CAE10();
  swift_release();
  swift_release();
  id v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  sub_1000CAF10();
  sub_10001D64C((uint64_t *)&unk_10010EEC0);
  sub_1000CAF80();
  swift_release();
  v5(v3, v4, v0);
  sub_1000CAE10();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_1000CAF10();
  sub_10001D64C((uint64_t *)&unk_10010F180);
  sub_1000CAF80();
  swift_release();
  swift_release();
  sub_1000CAF10();
  sub_10001D64C((uint64_t *)&unk_10010EED0);
  sub_1000CAF80();
  swift_release();
  v5(v3, v4, v0);
  sub_1000CAE10();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_1000CAF10();
  sub_100036814(0, &qword_100112640);
  sub_1000CAF80();
  swift_release();
  v5(v3, v4, v0);
  sub_1000CAE10();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_1000CAF10();
  sub_10001D64C(&qword_10010EF40);
  sub_1000CAF80();
  swift_release();
  v5(v3, v4, v0);
  sub_1000CAE10();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_1000CAF10();
  sub_100036814(0, (unint64_t *)&qword_10010EF48);
  sub_1000CAF80();
  swift_release();
  v5(v3, v4, v0);
  sub_1000CAE10();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_1000CAF10();
  type metadata accessor for FCFeedPersonalizationConfigurationSet(0);
  sub_1000CAF90();
  swift_release();
  swift_release();
  sub_1000CAF20();
  type metadata accessor for NTTodayContextResultsService();
  sub_1000CAF80();
  swift_release();
  v5(v3, v4, v0);
  sub_1000CAE10();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_1000CAF20();
  sub_10001D64C(&qword_10010EF50);
  sub_1000CAF80();
  swift_release();
  v5(v3, v4, v0);
  sub_1000CAE10();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_1000CAF20();
  sub_10001D64C(&qword_10010EF58);
  sub_1000CAF80();
  swift_release();
  v5(v3, v4, v0);
  sub_1000CAE10();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_1000CAF20();
  sub_100036814(0, (unint64_t *)&unk_10010EF60);
  sub_1000CAF80();
  swift_release();
  return swift_release();
}

uint64_t sub_100039CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001D64C(&qword_10010EF90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100039D2C(uint64_t a1)
{
  uint64_t v2 = sub_10001D64C(&qword_10010EF90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100039D8C()
{
  unint64_t result = qword_10010EFA0;
  if (!qword_10010EFA0)
  {
    sub_1000CC570();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EFA0);
  }
  return result;
}

unint64_t sub_100039DE4()
{
  unint64_t result = qword_10010EFB0;
  if (!qword_10010EFB0)
  {
    sub_10001D690(&qword_10010EFA8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EFB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioIndicatorView()
{
  return &type metadata for AudioIndicatorView;
}

uint64_t sub_100039E50()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100039E6C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_10001D64C(&qword_10010EFC8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v10 = (char *)v19 - v9;
  v19[1] = a1;
  sub_1000CB9E0();
  if (qword_10010DD50 != -1) {
    swift_once();
  }
  id v11 = [(id)qword_10011ABE8 imageWithRenderingMode:2];
  uint64_t v12 = sub_1000CBBC0();
  uint64_t v13 = sub_1000CBB60();
  uint64_t KeyPath = swift_getKeyPath();
  id v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v15(v8, v10, v4);
  v15(a2, v8, v4);
  char v16 = (uint64_t *)&a2[*(int *)(sub_10001D64C(&qword_10010EFD0) + 48)];
  *char v16 = v12;
  v16[1] = KeyPath;
  v16[2] = v13;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  v17(v10, v4);
  swift_release();
  swift_release();
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v17)(v8, v4);
}

uint64_t sub_10003A098@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  *a1 = sub_1000CBD20();
  a1[1] = v4;
  uint64_t v5 = sub_10001D64C(&qword_10010EFC0);
  return sub_100039E6C(v3, (char *)a1 + *(int *)(v5 + 44));
}

unint64_t sub_10003A0EC()
{
  unint64_t result = qword_10010EFD8;
  if (!qword_10010EFD8)
  {
    sub_10001D690((uint64_t *)&unk_10010EFE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EFD8);
  }
  return result;
}

uint64_t sub_10003A148@<X0>(uint64_t *a1@<X8>)
{
  return sub_10003A188((uint64_t (*)(void))type metadata accessor for BiomeEventStore, (uint64_t)&off_1000FE6D8, a1);
}

uint64_t sub_10003A168@<X0>(uint64_t *a1@<X8>)
{
  return sub_10003A188((uint64_t (*)(void))type metadata accessor for SessionAssembler, (uint64_t)&off_1000FD6F0, a1);
}

uint64_t sub_10003A188@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1(0);
  uint64_t result = swift_allocObject();
  a3[3] = v5;
  a3[4] = a2;
  *a3 = result;
  return result;
}

uint64_t sub_10003A1D8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100020110(a1, a1[3]);
  sub_10001D64C((uint64_t *)&unk_10010F180);
  uint64_t result = sub_1000CAEB0();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = type metadata accessor for SessionReporter();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    a2[3] = v5;
    a2[4] = (uint64_t)&off_1000FC780;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003A264(void *a1)
{
  sub_100020110(a1, a1[3]);
  sub_10001D64C((uint64_t *)&unk_10010F0A0);
  uint64_t result = sub_1000CAEC0();
  if (!v24)
  {
    __break(1u);
    goto LABEL_6;
  }
  sub_100020110(a1, a1[3]);
  sub_10003A9AC();
  uint64_t result = sub_1000CAEB0();
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = (void *)result;
  sub_100020110(a1, a1[3]);
  sub_10001D64C((uint64_t *)&unk_10010F110);
  uint64_t result = sub_1000CAEB0();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = sub_10003A9EC((uint64_t)v23, v24);
    __chkstk_darwin(v5);
    uint64_t v7 = (void *)((char *)&v21[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v8 + 16))(v7);
    uint64_t v9 = *v7;
    uint64_t v10 = type metadata accessor for TelemetryEnablement();
    v22[3] = v10;
    v22[4] = &off_1000FD5D8;
    v22[0] = v9;
    type metadata accessor for TelemetryManager();
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = sub_10003A9EC((uint64_t)v22, v10);
    __chkstk_darwin(v12);
    id v14 = (void *)((char *)&v21[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v15 + 16))(v14);
    uint64_t v16 = *v14;
    _OWORD v21[3] = v10;
    v21[4] = &off_1000FD5D8;
    v21[0] = v16;
    _s7NewsTag16TelemetryManagerC13lastFlushDate33_4E4017AC2BCC1D1AC48C0D84A0E547E910Foundation0G0Vvpfi_0();
    sub_10003AA3C((uint64_t)v21, v11 + 16);
    *(void *)(v11 + 56) = v3;
    id v17 = objc_allocWithZone((Class)NSSNewsAnalyticsTelemetryAnnotator);
    id v18 = v3;
    id v19 = [v17 initWithUserIDProvider:v4];

    swift_unknownObjectRelease();
    sub_1000201A8((uint64_t)v21);
    *(void *)(v11 + 64) = v19;
    sub_1000201A8((uint64_t)v22);
    sub_1000201A8((uint64_t)v23);
    return v11;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10003A550()
{
  sub_10001D64C((uint64_t *)&unk_10010F0A0);
  sub_1000CAF90();

  return swift_release();
}

uint64_t sub_10003A5B4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100020110(a1, a1[3]);
  sub_10001D64C(&qword_10010EF40);
  uint64_t result = sub_1000CAEB0();
  if (result)
  {
    uint64_t v5 = result;
    sub_100020110(a1, a1[3]);
    sub_10001D64C((uint64_t *)&unk_10010F110);
    uint64_t result = sub_1000CAEB0();
    if (result)
    {
      uint64_t v6 = result;
      uint64_t v7 = type metadata accessor for TelemetryEnablement();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v5;
      *(void *)(result + 24) = v6;
      a2[3] = v7;
      a2[4] = (uint64_t)&off_1000FD5D8;
      *a2 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for WidgetAnalyticsAssembly()
{
  return self;
}

uint64_t sub_10003A6B0()
{
  uint64_t v0 = sub_1000CB000();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CAF10();
  sub_10001D64C(&qword_10010F088);
  sub_1000CAF90();
  swift_release();
  uint64_t v4 = enum case for Scope.singleton(_:);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v5(v3, enum case for Scope.singleton(_:), v0);
  sub_1000CAE10();
  swift_release();
  swift_release();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  sub_1000CAF10();
  sub_10001D64C(&qword_10010F090);
  sub_1000CAF90();
  swift_release();
  v5(v3, v4, v0);
  sub_1000CAE10();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_1000CAF10();
  sub_10001D64C(&qword_10010F098);
  sub_1000CAF90();
  swift_release();
  swift_release();
  sub_1000CAF10();
  type metadata accessor for TelemetryManager();
  sub_1000CAF80();
  swift_release();
  v5(v3, v4, v0);
  sub_1000CAE10();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_1000CAF20();
  sub_1000CAF70();
  return swift_release();
}

unint64_t sub_10003A9AC()
{
  unint64_t result = qword_10010EF48;
  if (!qword_10010EF48)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10010EF48);
  }
  return result;
}

uint64_t sub_10003A9EC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10003AA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10003AAA0(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000CACC0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v65 - v11;
  if (![a2 hasIdentifier])
  {
    if (qword_10010DD68 != -1) {
      swift_once();
    }
    uint64_t v40 = sub_1000CB270();
    sub_10003B638(v40, (uint64_t)static Logger.todayWidgetBanner);
    id v14 = sub_1000CB250();
    os_log_type_t v41 = sub_1000CC510();
    if (!os_log_type_enabled(v14, v41)) {
      goto LABEL_38;
    }
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v42 = 0;
    uint64_t v43 = "TodayBannerValidator will not validate banner with no identifier";
LABEL_36:
    uint64_t v44 = v14;
    os_log_type_t v45 = v41;
    uint64_t v46 = v42;
    uint32_t v47 = 2;
    goto LABEL_37;
  }
  if ([a2 hasIsEnabled] && (objc_msgSend(a2, "isEnabled") & 1) == 0)
  {
    if (qword_10010DD68 != -1) {
      swift_once();
    }
    uint64_t v48 = sub_1000CB270();
    sub_10003B638(v48, (uint64_t)static Logger.todayWidgetBanner);
    id v14 = sub_1000CB250();
    os_log_type_t v41 = sub_1000CC530();
    if (!os_log_type_enabled(v14, v41)) {
      goto LABEL_38;
    }
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v42 = 0;
    uint64_t v43 = "TodayBannerValidator will suppress banner due to isEnabled=false";
    goto LABEL_36;
  }
  if (![a2 hasDaysVisibleToNewSubscribers]
    || ![a2 daysVisibleToNewSubscribers])
  {
LABEL_18:
    sub_10003AA3C(v3 + 16, (uint64_t)v68);
    sub_100020110(v68, v68[3]);
    uint64_t result = (uint64_t)[a2 identifier];
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v25 = (void *)result;
    uint64_t v26 = sub_1000CC1F0();
    uint64_t v28 = v27;

    sub_1000CAF40();
    uint64_t v29 = v67;
    if (v67)
    {
      if (*(void *)(v67 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v30 = sub_10003CED0(v26, v28);
        if (v31)
        {
          long long v32 = (unint64_t *)(*(void *)(v29 + 56) + 16 * v30);
          unint64_t v34 = *v32;
          unint64_t v33 = v32[1];
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          sub_1000201A8((uint64_t)v68);
          if (([a2 hasNumberOfAppearancesToHide] & 1) != 0
            && [a2 numberOfAppearancesToHide]
            && v34 >= (unint64_t)[a2 numberOfAppearancesToHide])
          {
            if (qword_10010DD68 != -1) {
              swift_once();
            }
            uint64_t v61 = sub_1000CB270();
            sub_10003B638(v61, (uint64_t)static Logger.todayWidgetBanner);
            id v14 = sub_1000CB250();
            os_log_type_t v62 = sub_1000CC530();
            if (!os_log_type_enabled(v14, v62)) {
              goto LABEL_38;
            }
            uint64_t v63 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v63 = 134217984;
            v68[0] = v34;
            sub_1000CC660();
            uint64_t v43 = "TodayBannerValidator will suppress banner due to numberOfAppearancesToHide reached. numberOfAppearances=%lu";
          }
          else
          {
            if (![a2 hasNumberOfTapsToHide]
              || ![a2 numberOfTapsToHide]
              || v33 < (unint64_t)[a2 numberOfTapsToHide])
            {
              if (qword_10010DD68 != -1) {
                swift_once();
              }
              uint64_t v35 = sub_1000CB270();
              sub_10003B638(v35, (uint64_t)static Logger.todayWidgetBanner);
              uint64_t v36 = sub_1000CB250();
              os_log_type_t v37 = sub_1000CC530();
              if (!os_log_type_enabled(v36, v37)) {
                goto LABEL_51;
              }
              uint64_t v38 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v38 = 0;
              uint64_t v39 = "TodayBannerValidator validated bannerConfig";
LABEL_50:
              _os_log_impl((void *)&_mh_execute_header, v36, v37, v39, v38, 2u);
              swift_slowDealloc();
LABEL_51:

              return 1;
            }
            if (qword_10010DD68 != -1) {
              swift_once();
            }
            uint64_t v64 = sub_1000CB270();
            sub_10003B638(v64, (uint64_t)static Logger.todayWidgetBanner);
            id v14 = sub_1000CB250();
            os_log_type_t v62 = sub_1000CC530();
            if (!os_log_type_enabled(v14, v62))
            {
LABEL_38:

              return 0;
            }
            uint64_t v63 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v63 = 134217984;
            v68[0] = v33;
            sub_1000CC660();
            uint64_t v43 = "TodayBannerValidator will suppress banner due to numberOfTapsToHide reached. numberOfTaps=%lu";
          }
          uint64_t v44 = v14;
          os_log_type_t v45 = v62;
          uint64_t v46 = v63;
          uint32_t v47 = 12;
LABEL_37:
          _os_log_impl((void *)&_mh_execute_header, v44, v45, v43, v46, v47);
          swift_slowDealloc();
          goto LABEL_38;
        }
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    sub_1000201A8((uint64_t)v68);
    if (qword_10010DD68 != -1) {
      swift_once();
    }
    uint64_t v49 = sub_1000CB270();
    sub_10003B638(v49, (uint64_t)static Logger.todayWidgetBanner);
    uint64_t v36 = sub_1000CB250();
    os_log_type_t v37 = sub_1000CC530();
    if (!os_log_type_enabled(v36, v37)) {
      goto LABEL_51;
    }
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    uint64_t v39 = "TodayBannerValidator validating banner due to no state";
    goto LABEL_50;
  }
  uint64_t v13 = [a1 bundleSubscription];
  if (!v13)
  {
    if (qword_10010DD68 != -1) {
      swift_once();
    }
    uint64_t v50 = sub_1000CB270();
    sub_10003B638(v50, (uint64_t)static Logger.todayWidgetBanner);
    id v14 = sub_1000CB250();
    os_log_type_t v41 = sub_1000CC510();
    if (!os_log_type_enabled(v14, v41)) {
      goto LABEL_38;
    }
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v42 = 0;
    goto LABEL_36;
  }
  id v14 = v13;
  if (![v13 isSubscribed])
  {
    if (qword_10010DD68 != -1) {
      swift_once();
    }
    uint64_t v51 = sub_1000CB270();
    sub_10003B638(v51, (uint64_t)static Logger.todayWidgetBanner);
    uint64_t v52 = sub_1000CB250();
    os_log_type_t v53 = sub_1000CC530();
    if (!os_log_type_enabled(v52, v53)) {
      goto LABEL_64;
    }
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v54 = 0;
    goto LABEL_63;
  }
  id v15 = [v14 initialPurchaseTimestamp];
  if (!v15)
  {
    if (qword_10010DD68 == -1)
    {
LABEL_61:
      uint64_t v56 = sub_1000CB270();
      sub_10003B638(v56, (uint64_t)static Logger.todayWidgetBanner);
      uint64_t v52 = sub_1000CB250();
      os_log_type_t v53 = sub_1000CC510();
      if (!os_log_type_enabled(v52, v53))
      {
LABEL_64:

        goto LABEL_38;
      }
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
            "Timestamp is missing";
LABEL_63:
      _os_log_impl((void *)&_mh_execute_header, v52, v53, v55, v54, 2u);
      swift_slowDealloc();
      goto LABEL_64;
    }
LABEL_82:
    swift_once();
    goto LABEL_61;
  }
  uint64_t v16 = v15;
  [v15 doubleValue];
  sub_1000CAC90();
  sub_1000CACB0();
  sub_1000CAC40();
  double v18 = v17;
  id v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v10, v6);
  double v20 = v18 / 86400.0;
  if ((~COERCE__INT64(v18 / 86400.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_80;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  unsigned int v66 = v19;
  if (v20 >= 9.22337204e18)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  uint64_t v21 = (uint64_t)v20;
  id v22 = [a2 daysVisibleToNewSubscribers];
  if (v21 < 1 || (unint64_t)v22 >= v21)
  {

    v66(v12, v6);
    goto LABEL_18;
  }
  if (qword_10010DD68 != -1) {
    swift_once();
  }
  uint64_t v57 = sub_1000CB270();
  sub_10003B638(v57, (uint64_t)static Logger.todayWidgetBanner);
  uint64_t v58 = sub_1000CB250();
  os_log_type_t v59 = sub_1000CC530();
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v60 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v60 = 134217984;
    v68[0] = v21;
    sub_1000CC660();
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "TodayBannerValidator will suppress banner due to daysVisibleToNewSubscribers limit reached. daysSubscribed=%lld", v60, 0xCu);
    swift_slowDealloc();
  }

  v66(v12, v6);
  return 0;
}

uint64_t sub_10003B5DC()
{
  sub_1000201A8(v0 + 16);

  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for TodayBannerValidator()
{
  return self;
}

uint64_t sub_10003B638(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10003B670()
{
  swift_unknownObjectRelease();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for SessionReporter()
{
  return self;
}

void sub_10003B6CC(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  uint64_t v13 = *(void *)(a5 + 16);
  if (v13)
  {
    id v14 = *(void **)(a6 + 16);
    uint64_t v15 = *(void *)(type metadata accessor for Session() - 8);
    uint64_t v16 = a5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v17 = *(void *)(v15 + 72);
    swift_retain();
    swift_bridgeObjectRetain();
    do
    {
      sub_10003B8F4(v16, a7);
      v16 += v17;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    sub_100036814(0, (unint64_t *)&qword_100110C20);
    double v18 = (void *)sub_1000CC630();
    sub_1000CC530();
    sub_1000CB230();

    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_10003C898;
    *(void *)(v19 + 24) = v12;
    v22[4] = sub_10003C8C0;
    void v22[5] = v19;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 1107296256;
    v22[2] = sub_10003C7A8;
    v22[3] = &unk_1000FC7E0;
    double v20 = _Block_copy(v22);
    swift_release();
    [v14 submitEventsIfNeededWithCompletion:v20];
    _Block_release(v20);
  }
  else
  {
    swift_retain();
    uint64_t v21 = swift_release();
    a1(v21);
  }
}

uint64_t sub_10003B8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DisappearanceEvent(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v84 = (uint64_t)v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v8 - 8);
  uint64_t v96 = (char *)v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10001D64C(&qword_10010F348);
  __chkstk_darwin(v10 - 8);
  uint64_t v94 = (char *)v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for EngagementEvent(0);
  v83[0] = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v95 = (char *)v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for VisibleRectChangedEvent(0);
  uint64_t v97 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v105 = (uint64_t)v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AppearanceEvent(0);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a2 + *(int *)(type metadata accessor for NewsTimelineEntry() + 20);
  uint64_t v19 = *(void *)(v18 + *(int *)(type metadata accessor for TodayContent() + 40));
  double v20 = *(void **)(v19 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
  swift_retain();
  id v21 = v20;
  id v22 = sub_10008C0A0();
  id v23 = [v21 sections];
  id v24 = [v23 array];

  uint64_t v25 = sub_1000CC3B0();
  uint64_t v26 = sub_10006D51C(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_10003E088((unint64_t)v26, (uint64_t)v22);
  uint64_t v106 = 0;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n();
  sub_10003E2CC(a1, (uint64_t)v17, type metadata accessor for AppearanceEvent);
  memset(v115, 0, sizeof(v115));
  char v116 = 1;
  uint64_t v28 = *(int *)(v15 + 28);
  uint64_t v98 = *(int *)(v15 + 32);
  uint64_t v29 = v17[v98];
  uint64_t v102 = v17;
  uint64_t v99 = v28;
  uint64_t v30 = v17[v28];
  uint64_t v101 = v19;
  uint64_t v31 = sub_10003C8E0((uint64_t)v115, v30, v29);
  if ([v3 respondsToSelector:"widgetDidAppearAtDate:withTrackableWidgetState:"])
  {
    swift_unknownObjectRetain();
    swift_retain();
    Class isa = sub_1000CAC50().super.isa;
    [v3 widgetDidAppearAtDate:isa withTrackableWidgetState:v31];
    swift_release();
    swift_unknownObjectRelease();
  }
  v83[1] = v31;
  uint64_t v86 = (int *)type metadata accessor for Session();
  uint64_t v33 = *(void *)(a1 + v86[5]);
  uint64_t v92 = *(void *)(v33 + 16);
  if (!v92)
  {
    uint64_t v62 = (uint64_t)v96;
    uint64_t v63 = (uint64_t)v95;
    uint64_t v64 = (uint64_t)v94;
    goto LABEL_48;
  }
  uint64_t v91 = v33 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
  uint64_t result = swift_bridgeObjectRetain();
  int v35 = 0;
  unint64_t v36 = 0;
  uint64_t v90 = (char *)&type metadata for Any + 8;
  uint64_t v87 = a1;
  unint64_t v37 = (unint64_t)v27;
  uint64_t v88 = v3;
  uint64_t v89 = v33;
  while (2)
  {
    if (v36 >= *(void *)(v33 + 16))
    {
LABEL_66:
      __break(1u);
      return result;
    }
    int v100 = v35;
    uint64_t v38 = *(void *)(v97 + 72);
    unint64_t v107 = v36;
    uint64_t v39 = v105;
    sub_10003E2CC(v91 + v38 * v36, v105, type metadata accessor for VisibleRectChangedEvent);
    uint64_t v40 = (_OWORD *)(v39 + *(int *)(v93 + 20));
    long long v41 = v40[1];
    v113[0] = *v40;
    v113[1] = v41;
    char v114 = 0;
    uint64_t v42 = sub_10003C8E0((uint64_t)v113, v102[v99], v102[v98]);
    id v43 = *(id *)(v42 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
    uint64_t v103 = v42;
    uint64_t v44 = sub_10008C0A0();
    id v45 = [v43 sections];
    id v46 = [v45 array];

    uint64_t v47 = sub_1000CC3B0();
    uint64_t v48 = sub_10006D51C(v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v49 = v106;
    unint64_t v50 = (unint64_t)sub_10003E088((unint64_t)v48, (uint64_t)v44);
    uint64_t v106 = v49;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n();
    if (v37 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = sub_1000CC890();
      uint64_t v51 = result;
    }
    else
    {
      uint64_t v51 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
    }
    uint64_t v52 = v50 & 0xFFFFFFFFFFFFFF8;
    if (v50 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v53 = sub_1000CC890();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v53 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v54 = 0;
    unint64_t v55 = 0;
    ++v107;
    uint64_t v109 = v37 & 0xFFFFFFFFFFFFFF8;
    unint64_t v110 = v37 & 0xC000000000000001;
    unint64_t v104 = v37;
    int v108 = (void *)(v37 + 32);
    unint64_t v56 = v50;
    unint64_t v57 = v50 & 0xC000000000000001;
    while (v55 == v51)
    {
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      unint64_t v55 = v51;
      unint64_t v37 = v56;
      if (v53 == v54) {
        goto LABEL_37;
      }
LABEL_21:
      if (v57)
      {
        uint64_t result = sub_1000CC780();
        uint64_t v59 = result;
        if (__OFADD__(v54, 1)) {
          goto LABEL_62;
        }
      }
      else
      {
        if (v54 >= *(void *)(v52 + 16))
        {
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        uint64_t v59 = *(void *)(v37 + 8 * v54 + 32);
        uint64_t result = swift_unknownObjectRetain();
        if (__OFADD__(v54, 1)) {
          goto LABEL_62;
        }
      }
      if (!v58) {
        goto LABEL_37;
      }
      if (!v59) {
        goto LABEL_35;
      }
      unsigned __int8 v61 = [v58 isEqual:v59];
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      ++v54;
      if ((v61 & 1) == 0)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v37 = v56;
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
    }
    if (v110)
    {
      uint64_t result = sub_1000CC780();
      uint64_t v58 = (void *)result;
      BOOL v60 = __OFADD__(v55++, 1);
      if (v60) {
        goto LABEL_65;
      }
    }
    else
    {
      if ((v55 & 0x8000000000000000) != 0) {
        goto LABEL_63;
      }
      if (v55 >= *(void *)(v109 + 16)) {
        goto LABEL_64;
      }
      uint64_t v58 = (void *)v108[v55];
      uint64_t result = swift_unknownObjectRetain();
      BOOL v60 = __OFADD__(v55++, 1);
      if (v60) {
        goto LABEL_65;
      }
    }
    unint64_t v37 = v56;
    if (v53 != v54) {
      goto LABEL_21;
    }
    if (v58)
    {
LABEL_35:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
LABEL_38:
      swift_unknownObjectRelease();
LABEL_39:
      uint64_t v3 = v88;
      a1 = v87;
      uint64_t v62 = (uint64_t)v96;
      uint64_t v63 = (uint64_t)v95;
      uint64_t v64 = (uint64_t)v94;
      goto LABEL_40;
    }
    uint64_t v59 = 0;
LABEL_37:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (v59) {
      goto LABEL_38;
    }
    uint64_t v3 = v88;
    a1 = v87;
    uint64_t v62 = (uint64_t)v96;
    uint64_t v63 = (uint64_t)v95;
    uint64_t v64 = (uint64_t)v94;
    if (v100)
    {
LABEL_5:
      sub_10003E334(v105, type metadata accessor for VisibleRectChangedEvent);
      uint64_t result = swift_release();
      goto LABEL_6;
    }
LABEL_40:
    if (([v3 respondsToSelector:"visibleItemsDidChangeAtDate:withTriggerEvent:trackableWidgetState:"] & 1) == 0)goto LABEL_5; {
    swift_unknownObjectRetain();
    }
    uint64_t v65 = v103;
    swift_retain();
    uint64_t v66 = v105;
    Class v67 = sub_1000CAC50().super.isa;
    [v3 visibleItemsDidChangeAtDate:v67 withTriggerEvent:5 trackableWidgetState:v65];
    swift_release_n();
    swift_unknownObjectRelease();

    uint64_t result = sub_10003E334(v66, type metadata accessor for VisibleRectChangedEvent);
LABEL_6:
    int v35 = 1;
    unint64_t v36 = v107;
    uint64_t v33 = v89;
    if (v107 != v92) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_48:
  swift_bridgeObjectRelease();
  sub_100036850(a1 + v86[6], v64, &qword_10010F348);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83[0] + 48))(v64, 1, v85) == 1)
  {
    sub_1000227A8(v64, &qword_10010F348);
  }
  else
  {
    sub_10003E1FC(v64, v63, type metadata accessor for EngagementEvent);
    if ([v3 respondsToSelector:"userEngagedWithWidgetAtDate:actionURL:trackableWidgetState:"])
    {
      uint64_t v68 = v63 + *(int *)(v85 + 20);
      swift_retain();
      swift_unknownObjectRetain();
      v69.super.Class isa = sub_1000CAC50().super.isa;
      sub_100036850(v68, v62, &qword_10010F340);
      uint64_t v70 = sub_1000CABE0();
      uint64_t v71 = *(void *)(v70 - 8);
      uint64_t v73 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v62, 1, v70) != 1)
      {
        sub_1000CAB60(v72);
        uint64_t v73 = v74;
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v62, v70);
      }
      [v3 userEngagedWithWidgetAtDate:v69.super.isa actionURL:v73 trackableWidgetState:v101];
      swift_unknownObjectRelease();
      swift_release();
    }
    sub_10003E334(v63, type metadata accessor for EngagementEvent);
  }
  char v112 = 0;
  memset(v111, 0, sizeof(v111));
  uint64_t v75 = sub_10003C8E0((uint64_t)v111, v102[v99], v102[v98]);
  if ([v3 respondsToSelector:"visibleItemsDidChangeAtDate:withTriggerEvent:trackableWidgetState:"])
  {
    uint64_t v76 = v84;
    sub_10003E2CC(a1 + v86[7], v84, type metadata accessor for DisappearanceEvent);
    swift_unknownObjectRetain();
    Class v77 = sub_1000CAC50().super.isa;
    [v3 visibleItemsDidChangeAtDate:v77 withTriggerEvent:4 trackableWidgetState:v75];
    swift_unknownObjectRelease();

    uint64_t v78 = sub_1000CACC0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v78 - 8) + 8))(v76, v78);
  }
  if ([v3 respondsToSelector:"widgetDidDisappearAtDate:withTrackableWidgetState:"])
  {
    uint64_t v79 = v84;
    sub_10003E2CC(a1 + v86[7], v84, type metadata accessor for DisappearanceEvent);
    uint64_t v80 = v101;
    swift_retain();
    swift_unknownObjectRetain();
    Class v81 = sub_1000CAC50().super.isa;
    [v3 widgetDidDisappearAtDate:v81 withTrackableWidgetState:v80];
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release_n();

    sub_10003E334((uint64_t)v102, type metadata accessor for AppearanceEvent);
    uint64_t v82 = sub_1000CACC0();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v82 - 8) + 8))(v79, v82);
  }
  else
  {
    sub_10003E334((uint64_t)v102, type metadata accessor for AppearanceEvent);
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_10003C718(uint64_t (*a1)(void))
{
  sub_100036814(0, (unint64_t *)&qword_100110C20);
  uint64_t v2 = (void *)sub_1000CC630();
  sub_1000CC530();
  sub_1000CB230();

  return a1();
}

uint64_t sub_10003C7A8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10003C7EC()
{
  return sub_1000CB080();
}

void sub_10003C854(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10003B6CC(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

uint64_t sub_10003C860()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003C898()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10003C8C0()
{
  return sub_10003C718(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10003C8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10003C8D8()
{
  return swift_release();
}

uint64_t sub_10003C8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a1;
  uint64_t v4 = sub_1000CACC0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LayoutContext();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_entryID + 8);
  uint64_t v24 = *(void *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_entryID);
  uint64_t v12 = *(void **)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
  uint64_t v13 = *(void **)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_fetchInfo);
  sub_10003E2CC(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LayoutContext);
  uint64_t v14 = *(void *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID + 8);
  uint64_t v15 = *(void *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_appearanceType);
  uint64_t v22 = *(void *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID);
  uint64_t v23 = v15;
  uint64_t v25 = v25;
  uint64_t v26 = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v16 = v12;
  id v17 = v13;
  sub_1000CACB0();
  uint64_t v18 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v18 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentFetchDate, v7, v4);
  uint64_t v19 = (void *)(v18 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_entryID);
  *uint64_t v19 = v24;
  v19[1] = v11;
  *(void *)(v18 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results) = v16;
  *(void *)(v18 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_fetchInfo) = v17;
  sub_10003E1FC((uint64_t)v10, v18 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext, (uint64_t (*)(void))type metadata accessor for LayoutContext);
  double v20 = (void *)(v18 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID);
  *double v20 = v22;
  v20[1] = v14;
  *(void *)(v18 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_appearanceType) = v23;
  sub_10003E264(v27, v18 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect);
  *(void *)(v18 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_stackKind) = v25;
  *(void *)(v18 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_stackLocation) = v26;
  return v18;
}

unint64_t sub_10003CBE8(uint64_t a1)
{
  sub_1000CC840();
  uint64_t v2 = sub_1000CC120();

  return sub_10003D054(a1, v2);
}

unint64_t sub_10003CC4C(uint64_t a1)
{
  uint64_t v2 = sub_1000CABE0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ImageStore.Key();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CCAC0();
  sub_10003E2CC(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_1000CCAD0(1uLL);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_1000CCAD0(0);
    sub_10003E394((unint64_t *)&qword_100111370);
    sub_1000CC130();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  Swift::Int v9 = sub_1000CCAF0();
  return sub_10003D1EC(a1, v9);
}

unint64_t sub_10003CE40(uint64_t a1)
{
  sub_1000CC1F0();
  sub_1000CCAC0();
  sub_1000CC270();
  Swift::Int v2 = sub_1000CCAF0();
  swift_bridgeObjectRelease();
  return sub_10003D654(a1, v2);
}

unint64_t sub_10003CED0(uint64_t a1, uint64_t a2)
{
  sub_1000CCAC0();
  sub_1000CC270();
  Swift::Int v4 = sub_1000CCAF0();

  return sub_10003D7CC(a1, a2, v4);
}

unint64_t sub_10003CF48(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = sub_1000CC610(*(void *)(v2 + 40));

  return sub_10003D8B0(a1, v4);
}

unint64_t sub_10003CF8C(uint64_t a1)
{
  sub_1000CABE0();
  sub_10003E394((unint64_t *)&qword_100111370);
  uint64_t v2 = sub_1000CC120();

  return sub_10003D9CC(a1, v2);
}

unint64_t sub_10003D010(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = sub_1000CC700(*(void *)(v2 + 40));

  return sub_10003DB78(a1, v4);
}

unint64_t sub_10003D054(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v4 = sub_1000CC840();
  __chkstk_darwin();
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v11 = v5 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      uint64_t v16 = v11;
      v12(v7, *(void *)(v22 + 48) + v14 * v9, v4);
      char v17 = sub_1000CC190();
      (*v15)(v7, v4);
      if (v17) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      uint64_t v11 = v16;
    }
    while (((*(void *)(v20 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_10003D1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = a1;
  uint64_t v4 = sub_1000CABE0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  long long v41 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v35 - v8;
  uint64_t v44 = sub_10001D64C((uint64_t *)&unk_10010F380);
  __chkstk_darwin(v44);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ImageStore.Key() - 8;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v17 = (char *)&v35 - v16;
  uint64_t v46 = v2;
  char v18 = *(unsigned char *)(v2 + 32);
  uint64_t v19 = v2 + 64;
  uint64_t v20 = -1 << v18;
  unint64_t v21 = a2 & ~v20;
  if ((*(void *)(v19 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21))
  {
    uint64_t v22 = *(void *)(v15 + 72);
    uint64_t v42 = ~v20;
    uint64_t v43 = v22;
    uint64_t v23 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    unint64_t v37 = (void (**)(char *, char *, uint64_t))(v5 + 32);
    uint64_t v38 = v19;
    uint64_t v24 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v39 = v14;
    unint64_t v36 = v24;
    while (1)
    {
      sub_10003E2CC(*(void *)(v46 + 48) + v43 * v21, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
      uint64_t v25 = (uint64_t)&v10[*(int *)(v44 + 48)];
      sub_10003E2CC((uint64_t)v17, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
      sub_10003E2CC(v45, v25, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
      uint64_t v26 = *v23;
      if ((*v23)(v10, 1, v4) == 1) {
        break;
      }
      sub_10003E2CC((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
      if (v26((char *)v25, 1, v4) == 1)
      {
        (*v24)(v14, v4);
LABEL_4:
        sub_1000227A8((uint64_t)v10, (uint64_t *)&unk_10010F380);
        sub_10003E334((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
        goto LABEL_5;
      }
      uint64_t v27 = *v37;
      uint64_t v28 = v40;
      (*v37)(v40, v14, v4);
      uint64_t v29 = v41;
      v27(v41, (char *)v25, v4);
      uint64_t v24 = v36;
      char v30 = sub_1000CAB90();
      uint64_t v31 = *v24;
      long long v32 = v29;
      uint64_t v14 = v39;
      (*v24)(v32, v4);
      uint64_t v33 = v28;
      uint64_t v19 = v38;
      v31(v33, v4);
      sub_10003E334((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
      sub_10003E334((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
      if (v30) {
        return v21;
      }
LABEL_5:
      unint64_t v21 = (v21 + 1) & v42;
      if (((*(void *)(v19 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
        return v21;
      }
    }
    if (v26((char *)v25, 1, v4) == 1)
    {
      sub_10003E334((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
      sub_10003E334((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
      return v21;
    }
    goto LABEL_4;
  }
  return v21;
}

unint64_t sub_10003D654(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_1000CC1F0();
    uint64_t v8 = v7;
    if (v6 == sub_1000CC1F0() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_1000CCA30();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_1000CC1F0();
          uint64_t v15 = v14;
          if (v13 == sub_1000CC1F0() && v15 == v16) {
            break;
          }
          char v18 = sub_1000CCA30();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_10003D7CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1000CCA30() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1000CCA30() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10003D8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_100036814(0, (unint64_t *)&qword_10010F590);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = sub_1000CC620();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = sub_1000CC620();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10003D9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = sub_1000CABE0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    BOOL v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_10003E394((unint64_t *)&qword_100110FE0);
      char v15 = sub_1000CC190();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_10003DB78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10003E428(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = sub_1000CC710();
      sub_10003E484((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_10003DC40(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1000CC890();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000CC890();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1000CC790();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10003DE68(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (uint64_t *)&unk_10010F360, (unint64_t *)&unk_10010F370, &qword_100111330, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10006E058);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    sub_1000CC890();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return sub_1000CC3D0();
}

uint64_t sub_10003DE38(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10003DE68(a1, a2, a3, &qword_10010F3F0, (unint64_t *)&unk_10010F400, &qword_10010F3F8, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10006E0C4);
}

uint64_t sub_10003DE68(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_1000CC890();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_1000CC890();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = sub_10003E3D8(a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = sub_10001D64C(a6);
          uint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          uint64_t v24 = *v23;
          swift_unknownObjectRetain();
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    sub_10001D64C(a4);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_1000CC8D0();
  __break(1u);
  return result;
}

void *sub_10003E088(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = sub_1000CC890())
  {
    unint64_t v15 = v3 & 0xC000000000000001;
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = v15 ? (id)sub_1000CC780() : *(id *)(v3 + 8 * v5);
      char v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      if (*(void *)(a2 + 16))
      {
        unint64_t v9 = v3;
        id v10 = v6;
        unint64_t v11 = sub_10003CF48((uint64_t)v10);
        uint64_t v12 = _swiftEmptyArrayStorage;
        if (v13)
        {
          uint64_t v12 = *(void **)(*(void *)(a2 + 56) + 8 * v11);
          swift_bridgeObjectRetain();
        }

        unint64_t v3 = v9;
      }
      else
      {
        uint64_t v12 = _swiftEmptyArrayStorage;
      }

      sub_10003DC40((unint64_t)v12);
      ++v5;
      if (v8 == v4) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10003E1FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003E264(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001D64C((uint64_t *)&unk_10010F350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003E2CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003E334(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10003E394(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000CABE0();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003E3D8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001D690(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003E428(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10003E484(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003E4DC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for ProactiveSuggestionManager()
{
  return self;
}

char *sub_10003E540(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    char v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    char v7 = a1;
    unint64_t v9 = a2[1];
    uint64_t v8 = a2[2];
    *((void *)a1 + 1) = v9;
    *((void *)a1 + 2) = v8;
    a1[24] = *((unsigned char *)a2 + 24);
    uint64_t v10 = *(int *)(a3 + 32);
    __dst = &a1[v10];
    unint64_t v11 = (char *)a2 + v10;
    uint64_t v12 = sub_1000CABE0();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    unint64_t v14 = v4;
    unint64_t v15 = v9;
    swift_bridgeObjectRetain();
    if (v24(v11, 1, v12))
    {
      uint64_t v16 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v11, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v17 = *(int *)(a3 + 36);
    uint64_t v18 = &v7[v17];
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = sub_1000CACC0();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = sub_10001D64C((uint64_t *)&unk_100111DE0);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  return v7;
}

uint64_t sub_10003E7E0(id *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 32);
  uint64_t v5 = sub_1000CABE0();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  char v7 = (char *)a1 + *(int *)(a2 + 36);
  uint64_t v8 = sub_1000CACC0();
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
    return v10(v7, v8);
  }
  return result;
}

uint64_t sub_10003E968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 32);
  __dst = (void *)(a1 + v7);
  uint64_t v8 = (const void *)(a2 + v7);
  uint64_t v9 = sub_1000CABE0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  id v12 = v5;
  id v13 = v6;
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v14 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v8, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  uint64_t v15 = *(int *)(a3 + 36);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = sub_1000CACC0();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_10001D64C((uint64_t *)&unk_100111DE0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

uint64_t sub_10003EBB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;
  id v11 = v9;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v12 = *(int *)(a3 + 32);
  id v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = sub_1000CABE0();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    uint64_t v20 = sub_10001D64C(&qword_10010F340);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = *(int *)(a3 + 36);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = sub_1000CACC0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 24))(v22, v23, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    uint64_t v29 = sub_10001D64C((uint64_t *)&unk_100111DE0);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t sub_10003EEC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (void *)(a1 + v6);
  id v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_1000CABE0();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10001D64C(&qword_10010F340);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = *(int *)(a3 + 36);
  id v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = sub_1000CACC0();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_10001D64C((uint64_t *)&unk_100111DE0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t sub_10003F0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = sub_1000CABE0();
  uint64_t v12 = *(void *)(v11 - 8);
  id v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_10001D64C(&qword_10010F340);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = *(int *)(a3 + 36);
  int v18 = (void *)(a1 + v17);
  int v19 = (void *)(a2 + v17);
  uint64_t v20 = sub_1000CACC0();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 40))(v18, v19, v20);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    uint64_t v25 = sub_10001D64C((uint64_t *)&unk_100111DE0);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v21 + 32))(v18, v19, v20);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t sub_10003F3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003F3F4);
}

uint64_t sub_10003F3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10001D64C(&qword_10010F340);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10001D64C((uint64_t *)&unk_100111DE0);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10003F528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003F53C);
}

uint64_t sub_10003F53C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_10001D64C(&qword_10010F340);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10001D64C((uint64_t *)&unk_100111DE0);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for Section()
{
  uint64_t result = qword_10010F518;
  if (!qword_10010F518) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10003F6BC()
{
  sub_10003F7EC(319, (unint64_t *)&qword_10010F528, (void (*)(uint64_t))&type metadata accessor for URL);
  if (v0 <= 0x3F)
  {
    sub_10003F7EC(319, (unint64_t *)&unk_10010F530, (void (*)(uint64_t))&type metadata accessor for Date);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10003F7EC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1000CC640();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10003F840@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  id v14 = [a1 items];
  v21[2] = a2;
  _OWORD v21[3] = a3;
  v21[4] = a4;
  uint64_t v15 = sub_10003FAD8((void (*)(_OWORD *))sub_10004196C, (uint64_t)v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  id v16 = [a1 backingTagID];
  if (v16)
  {
    uint64_t v17 = v16;
    id v18 = [self nu_safeColorForIdentifier:v16];
  }
  else
  {
    id v18 = 0;
  }
  uint64_t v19 = type metadata accessor for Section();
  sub_10003FE94(a1, a3, a7 + *(int *)(v19 + 32));
  *(void *)a7 = v18;
  *(void *)(a7 + 8) = a1;
  *(void *)(a7 + 16) = v15;
  *(unsigned char *)(a7 + 24) = a5 & 1;
  sub_1000365A0(a6, a7 + *(int *)(v19 + 36), (uint64_t *)&unk_100111DE0);
  return sub_1000201A8((uint64_t)a3);
}

uint64_t sub_10003F9A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  sub_100023250(a1, (uint64_t)v22);
  sub_10001D64C((uint64_t *)&unk_10010F360);
  swift_dynamicCast();
  uint64_t v9 = (void *)v22[5];
  sub_10003AA3C(a3, (uint64_t)v22);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = [v9 identifier];
  uint64_t v11 = sub_1000CC1F0();
  uint64_t v13 = v12;

  if (*(void *)(a4 + 16) && (unint64_t v14 = sub_10003CED0(v11, v13), (v15 & 1) != 0))
  {
    uint64_t v16 = *(void *)(a4 + 56) + 16 * v14;
    id v17 = *(id *)v16;
    id v18 = *(void **)(v16 + 8);
    id v19 = *(id *)v16;
    id v20 = v18;
  }
  else
  {
    id v17 = 0;
    id v18 = 0;
  }
  swift_bridgeObjectRelease();
  sub_1000B6FB8(v9, a2, v22, v17, v18, a5);
  return swift_unknownObjectRelease();
}

void *sub_10003FAD8(void (*a1)(_OWORD *), uint64_t a2)
{
  long long v32 = a1;
  uint64_t v5 = sub_10001D64C(&qword_10010F610);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Item(0);
  uint64_t v8 = *(void *)(v28 - 8);
  uint64_t v9 = __chkstk_darwin(v28);
  uint64_t v27 = (uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v26 = (uint64_t)&v23 - v11;
  uint64_t v12 = sub_1000CAB10();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  char v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = v2;
  sub_1000CC4F0();

  sub_10004198C((unint64_t *)&qword_100110710, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
  sub_1000CC650();
  uint64_t v23 = v13;
  if (v31)
  {
    uint64_t v24 = v8;
    id v17 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    id v18 = _swiftEmptyArrayStorage;
    uint64_t v25 = a2;
    while (1)
    {
      sub_100022804(&v30, v29);
      v32(v29);
      if (v3) {
        break;
      }
      sub_1000201A8((uint64_t)v29);
      if ((*v17)(v7, 1, v28) == 1)
      {
        sub_1000227A8((uint64_t)v7, &qword_10010F610);
      }
      else
      {
        uint64_t v19 = v26;
        sub_1000419D4((uint64_t)v7, v26);
        sub_1000419D4(v19, v27);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v18 = (void *)sub_10008815C(0, v18[2] + 1, 1, (unint64_t)v18);
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1) {
          id v18 = (void *)sub_10008815C(v20 > 1, v21 + 1, 1, (unint64_t)v18);
        }
        v18[2] = v21 + 1;
        sub_1000419D4(v27, (uint64_t)v18+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v21);
      }
      sub_1000CC650();
      if (!v31) {
        goto LABEL_13;
      }
    }
    sub_1000201A8((uint64_t)v29);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v18 = _swiftEmptyArrayStorage;
LABEL_13:
    (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v12);
  }
  return v18;
}

uint64_t sub_10003FE94@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000CABE0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v15 = (char *)&v26 - v14;
  id v16 = [a1 nameActionURL];
  if (!v16)
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v19(v8, 1, 1, v9);
LABEL_5:
    sub_1000227A8((uint64_t)v8, &qword_10010F340);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v19)(a3, 1, 1, v9);
  }
  id v17 = v16;
  sub_1000CABA0();

  id v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v18(v8, v13, v9);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v19(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
    goto LABEL_5;
  }
  v18(v15, v8, v9);
  unint64_t v21 = self;
  sub_1000CAB60(v22);
  uint64_t v24 = v23;
  id v25 = [v21 engagementDescriptorWithTargetURL:v23];

  sub_100020110(a2, a2[3]);
  sub_1000A542C(v25, a3);
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

uint64_t sub_100040144()
{
  unint64_t v1 = (id *)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  id v3 = [v2 nameColorLight];
  if (v3)
  {
    unint64_t v4 = v3;
    uint64_t v5 = sub_1000CC1F0();
    uint64_t v7 = v6;

    sub_100036814(0, (unint64_t *)&qword_100111C20);
    v8._countAndFlagsBits = v5;
    v8._object = v7;
    v9.super.Class isa = UIColor.init(hex:)(v8).super.isa;
  }
  else if (*(void *)v0)
  {
    v9.super.Class isa = (Class)*(id *)v0;
  }
  else
  {
    v9.super.Class isa = (Class)[self labelColor];
  }
  Class isa = v9.super.isa;
  id v11 = [v2 nameColorDark];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = sub_1000CC1F0();
    char v15 = v14;

    sub_100036814(0, (unint64_t *)&qword_100111C20);
    v16._countAndFlagsBits = v13;
    v16._object = v15;
    v17.super.Class isa = UIColor.init(hex:)(v16).super.isa;
  }
  else if (*v1)
  {
    v17.super.Class isa = (Class)*v1;
  }
  else
  {
    v17.super.Class isa = (Class)[self labelColor];
  }
  Class v18 = v17.super.isa;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = isa;
  *(void *)(v19 + 24) = v18;
  id v20 = objc_allocWithZone((Class)UIColor);
  v26[4] = sub_100042180;
  v26[5] = v19;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 1107296256;
  v26[2] = sub_10006CB14;
  v26[3] = &unk_1000FC968;
  unint64_t v21 = _Block_copy(v26);
  uint64_t v22 = isa;
  uint64_t v23 = v18;
  [v20 initWithDynamicProvider:v21];
  _Block_release(v21);
  swift_release();
  uint64_t v24 = sub_1000CBBB0();

  return v24;
}

id sub_10004037C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = type metadata accessor for Item(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v12 = *(void *)(v3 + 16);
  if (*(void *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      unint64_t v13 = *(void *)(v12 + 16);
      if (v13) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v12 = sub_100088698(v12);
      unint64_t v13 = *(void *)(v12 + 16);
      if (v13)
      {
LABEL_4:
        unint64_t v22 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
        uint64_t v9 = *(void *)(v9 + 72) * (v13 - 1);
        sub_100041A38(v12 + v22 + v9, type metadata accessor for Item);
        *(void *)(v12 + 16) = v13 - 1;
        *id v11 = a1;
        v11[1] = a2;
        swift_storeEnumTagMultiPayload();
        unint64_t v4 = *(void *)(v12 + 24);
        swift_bridgeObjectRetain();
        if (v13 <= v4 >> 1)
        {
LABEL_5:
          *(void *)(v12 + 16) = v13;
          sub_1000419D4((uint64_t)v11, v12 + v22 + v9);
          uint64_t v14 = *(void **)v3;
          unint64_t v22 = *(void *)(v3 + 8);
          uint64_t v15 = type metadata accessor for Section();
          sub_100036850(v3 + *(int *)(v15 + 32), a3 + *(int *)(v15 + 32), &qword_10010F340);
          char v16 = *(unsigned char *)(v3 + 24);
          sub_100036850(v3 + *(int *)(v15 + 36), a3 + *(int *)(v15 + 36), (uint64_t *)&unk_100111DE0);
          unint64_t v17 = v22;
          *(void *)a3 = v14;
          *(void *)(a3 + 8) = v17;
          *(void *)(a3 + 16) = v12;
          *(unsigned char *)(a3 + 24) = v16;
          id v18 = v14;
          uint64_t v19 = (void *)v22;
          return v19;
        }
LABEL_13:
        unint64_t v12 = sub_10008815C(v4 > 1, v13, 1, v12);
        goto LABEL_5;
      }
    }
    __break(1u);
    goto LABEL_13;
  }

  return (id)sub_1000416B4(v3, a3);
}

unint64_t sub_1000405C8(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F6974636553746ELL;
      break;
    case 2:
      unint64_t result = 0x736D657469;
      break;
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    case 4:
      unint64_t result = 0x69746341656D616ELL;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000406B4()
{
  return sub_1000405C8(*v0);
}

uint64_t sub_1000406BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100041E90(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000406E4(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1000406F0(uint64_t a1)
{
  unint64_t v2 = sub_1000413CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004072C(uint64_t a1)
{
  unint64_t v2 = sub_1000413CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100040768(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v39 = sub_10001D64C((uint64_t *)&unk_100111DE0);
  __chkstk_darwin(v39);
  uint64_t v40 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v41);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10001D64C(&qword_10010F570);
  uint64_t v42 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Section();
  __chkstk_darwin(v9);
  id v11 = (uint64_t *)((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100020110(a1, a1[3]);
  sub_1000413CC();
  uint64_t v12 = v43;
  sub_1000CCB10();
  if (v12) {
    goto LABEL_3;
  }
  unint64_t v37 = v5;
  uint64_t v13 = v42;
  uint64_t v43 = v9;
  char v46 = 0;
  sub_100041420();
  sub_1000CC930();
  uint64_t v14 = v6;
  unint64_t v36 = v8;
  unint64_t v15 = v45;
  if (v45 >> 60 == 15)
  {
    uint64_t v16 = 0;
    goto LABEL_6;
  }
  uint64_t v18 = v44;
  sub_100036814(0, (unint64_t *)&unk_1001112C0);
  sub_100036814(0, (unint64_t *)&qword_100111C20);
  uint64_t v16 = sub_1000CC540();
  if (!v16)
  {
    sub_100041474();
    swift_allocError();
    *id v25 = 0;
    swift_willThrow();
    sub_100041718(v18, v15);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v36, v14);
LABEL_3:
    sub_1000201A8((uint64_t)a1);
    return;
  }
  sub_100041718(v18, v15);
LABEL_6:
  uint64_t v17 = (uint64_t)v11;
  *id v11 = v16;
  char v46 = 1;
  sub_1000CC980();
  uint64_t v19 = v44;
  unint64_t v20 = v45;
  sub_100036814(0, (unint64_t *)&unk_1001112C0);
  sub_100036814(0, (unint64_t *)&qword_10010F590);
  uint64_t v21 = sub_1000CC540();
  unint64_t v22 = (void *)v21;
  uint64_t v35 = v19;
  if (v21)
  {
    unint64_t v34 = v20;
    *(void *)(v17 + 8) = v21;
    sub_10001D64C(&qword_10010F5A0);
    char v46 = 2;
    sub_1000414C8();
    id v23 = v22;
    uint64_t v24 = v36;
    sub_1000CC980();
    id v33 = v23;
    *(void *)(v17 + 16) = v44;
    LOBYTE(v44) = 3;
    *(unsigned char *)(v17 + 24) = sub_1000CC950() & 1;
    LOBYTE(v44) = 4;
    sub_10004156C();
    uint64_t v27 = (uint64_t)v37;
    sub_1000CC980();
    uint64_t v28 = v14;
    uint64_t v29 = v43;
    sub_1000365A0(v27, v17 + *(int *)(v43 + 32), &qword_10010F340);
    LOBYTE(v44) = 5;
    sub_100041610();
    uint64_t v30 = (uint64_t)v40;
    sub_1000CC980();
    uint64_t v31 = v33;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v24, v28);
    sub_100022684(v35, v34);

    sub_1000365A0(v30, v17 + *(int *)(v29 + 36), (uint64_t *)&unk_100111DE0);
    sub_1000416B4(v17, v38);
    sub_1000201A8((uint64_t)a1);
    sub_100041A38(v17, (uint64_t (*)(void))type metadata accessor for Section);
  }
  else
  {
    sub_100041474();
    swift_allocError();
    unsigned char *v26 = 1;
    swift_willThrow();
    sub_100022684(v35, v20);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v36, v14);
    sub_1000201A8((uint64_t)a1);
  }
}

uint64_t sub_100040ED0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10001D64C((uint64_t *)&unk_10010F5D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100020110(a1, a1[3]);
  sub_1000413CC();
  sub_1000CCB30();
  uint64_t v9 = *(void **)v3;
  if (*(void *)v3)
  {
    uint64_t v10 = self;
    id v33 = 0;
    id v11 = v9;
    id v12 = [v10 archivedDataWithRootObject:v11 requiringSecureCoding:1 error:&v33];
    id v13 = v33;
    if (!v12)
    {
      uint64_t v19 = v13;
      sub_1000CAB00();

      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    uint64_t v31 = v3;
    uint64_t v14 = (void *)sub_1000CAC10();
    unint64_t v16 = v15;

    id v33 = v14;
    unint64_t v34 = v16;
    char v32 = 0;
    sub_10004172C();
    sub_1000CC9F0();
    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

      uint64_t v17 = (uint64_t)v14;
      unint64_t v18 = v16;
      return sub_100022684(v17, v18);
    }

    sub_100022684((uint64_t)v14, v16);
    uint64_t v3 = v31;
  }
  unint64_t v20 = self;
  uint64_t v21 = *(void *)(v3 + 8);
  id v33 = 0;
  id v22 = [v20 archivedDataWithRootObject:v21 requiringSecureCoding:1 error:&v33];
  id v23 = v33;
  if (v22)
  {
    uint64_t v31 = v3;
    uint64_t v24 = (void *)sub_1000CAC10();
    unint64_t v26 = v25;

    id v33 = v24;
    unint64_t v34 = v26;
    char v32 = 1;
    sub_10004172C();
    sub_1000CC9F0();
    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v17 = (uint64_t)v24;
      unint64_t v18 = v26;
    }
    else
    {
      id v33 = v24;
      unint64_t v34 = v26;
      char v32 = 1;
      sub_1000CC9F0();
      id v33 = *(id *)(v31 + 16);
      char v32 = 2;
      swift_bridgeObjectRetain();
      sub_10001D64C(&qword_10010F5A0);
      sub_100041780();
      sub_1000CC9F0();
      swift_bridgeObjectRelease();
      LOBYTE(v33) = 3;
      sub_1000CC9C0();
      unint64_t v30 = v26;
      v29[1] = type metadata accessor for Section();
      LOBYTE(v33) = 4;
      sub_10001D64C(&qword_10010F340);
      sub_100041824();
      sub_1000CC9F0();
      LOBYTE(v33) = 5;
      sub_10001D64C((uint64_t *)&unk_100111DE0);
      sub_1000418C8();
      sub_1000CC9F0();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v17 = (uint64_t)v24;
      unint64_t v18 = v30;
    }
    return sub_100022684(v17, v18);
  }
  uint64_t v28 = v23;
  sub_1000CAB00();

  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_10004139C(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1000413B4(void *a1)
{
  return sub_100040ED0(a1);
}

unint64_t sub_1000413CC()
{
  unint64_t result = qword_10010F578;
  if (!qword_10010F578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F578);
  }
  return result;
}

unint64_t sub_100041420()
{
  unint64_t result = qword_10010F580;
  if (!qword_10010F580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F580);
  }
  return result;
}

unint64_t sub_100041474()
{
  unint64_t result = qword_10010F598;
  if (!qword_10010F598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F598);
  }
  return result;
}

unint64_t sub_1000414C8()
{
  unint64_t result = qword_10010F5A8;
  if (!qword_10010F5A8)
  {
    sub_10001D690(&qword_10010F5A0);
    sub_10004198C((unint64_t *)&unk_10010F5B0, (void (*)(uint64_t))type metadata accessor for Item);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F5A8);
  }
  return result;
}

unint64_t sub_10004156C()
{
  unint64_t result = qword_100110E80;
  if (!qword_100110E80)
  {
    sub_10001D690(&qword_10010F340);
    sub_10004198C(&qword_10010F5C0, (void (*)(uint64_t))&type metadata accessor for URL);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110E80);
  }
  return result;
}

unint64_t sub_100041610()
{
  unint64_t result = qword_10010F5C8;
  if (!qword_10010F5C8)
  {
    sub_10001D690((uint64_t *)&unk_100111DE0);
    sub_10004198C(&qword_10010E310, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F5C8);
  }
  return result;
}

uint64_t sub_1000416B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Section();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100041718(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100022684(a1, a2);
  }
  return a1;
}

unint64_t sub_10004172C()
{
  unint64_t result = qword_100110EB0;
  if (!qword_100110EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110EB0);
  }
  return result;
}

unint64_t sub_100041780()
{
  unint64_t result = qword_10010F5E0;
  if (!qword_10010F5E0)
  {
    sub_10001D690(&qword_10010F5A0);
    sub_10004198C(&qword_10010F5E8, (void (*)(uint64_t))type metadata accessor for Item);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F5E0);
  }
  return result;
}

unint64_t sub_100041824()
{
  unint64_t result = qword_10010F5F0;
  if (!qword_10010F5F0)
  {
    sub_10001D690(&qword_10010F340);
    sub_10004198C(&qword_100110EE0, (void (*)(uint64_t))&type metadata accessor for URL);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F5F0);
  }
  return result;
}

unint64_t sub_1000418C8()
{
  unint64_t result = qword_10010F600;
  if (!qword_10010F600)
  {
    sub_10001D690((uint64_t *)&unk_100111DE0);
    sub_10004198C(&qword_10010E328, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F600);
  }
  return result;
}

uint64_t sub_10004196C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10003F9A0(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_10004198C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000419D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Item(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100041A38(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for Section.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100041B64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Section.Errors()
{
  return &type metadata for Section.Errors;
}

uint64_t getEnumTagSinglePayload for Section.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Section.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100041CF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Section.CodingKeys()
{
  return &type metadata for Section.CodingKeys;
}

unint64_t sub_100041D34()
{
  unint64_t result = qword_10010F618;
  if (!qword_10010F618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F618);
  }
  return result;
}

unint64_t sub_100041D8C()
{
  unint64_t result = qword_10010F620;
  if (!qword_10010F620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F620);
  }
  return result;
}

unint64_t sub_100041DE4()
{
  unint64_t result = qword_10010F628;
  if (!qword_10010F628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F628);
  }
  return result;
}

unint64_t sub_100041E3C()
{
  unint64_t result = qword_10010F630;
  if (!qword_10010F630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F630);
  }
  return result;
}

uint64_t sub_100041E90(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001000DB890 || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F6974636553746ELL && a2 == 0xED0000617461446ELL || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000 || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001000DB8B0 || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x69746341656D616ELL && a2 == 0xED00006C72556E6FLL || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001000DAF90)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = sub_1000CCA30();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_100042140()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_100042180(void *a1)
{
  return sub_100099038(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100042188(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100042198()
{
  return swift_release();
}

id sub_1000421A0()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for TodayIntent()) init];
  qword_10011ABC8 = (uint64_t)result;
  unk_10011ABD0 = &off_1000FC990;
  return result;
}

id sub_1000421E0()
{
  id result = [objc_allocWithZone((Class)NTPBTodayModuleContentRequest) init];
  if (result)
  {
    id v1 = result;
    [result setModuleDescriptorType:0];
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100042234()
{
  return 0;
}

uint64_t sub_100042240()
{
  if (qword_10010DD30 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_10011ABC8;
  id v1 = (id)qword_10011ABC8;
  return v0;
}

uint64_t sub_1000422A4@<X0>(uint64_t a1@<X8>)
{
  id v2 = [self nss_NewsURLForForYou];
  if (v2)
  {
    int v3 = v2;
    sub_1000CABA0();

    uint64_t v4 = sub_1000CABE0();
    char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    uint64_t v6 = v4;
    uint64_t v7 = a1;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = sub_1000CABE0();
    char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v6 = v9;
    uint64_t v7 = a1;
    uint64_t v8 = 1;
  }

  return v5(v7, v8, 1, v6);
}

id sub_100042374()
{
  id result = [objc_allocWithZone((Class)NTPBTodayModuleContentRequest) init];
  if (result)
  {
    id v2 = result;
    [result setModuleDescriptorType:1];
    id v3 = [v0 tag];
    if (v3)
    {
      uint64_t v4 = v3;
      id v5 = [v3 identifier];
      if (v5)
      {
        uint64_t v6 = v5;
        [v2 setTagID:v5];

        NSString v7 = [v4 displayString];
        if (!v7)
        {
          sub_1000CC1F0();
          NSString v7 = sub_1000CC1C0();
          swift_bridgeObjectRelease();
        }
        [v2 setName:v7];

        id v8 = [v4 nameColorLight];
        [v2 setNameColorLight:v8];

        id v9 = [v4 nameColorDark];
        [v2 setNameColorDark:v9];

        uint64_t v4 = v9;
      }
    }
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000424E4@<X0>(uint64_t a1@<X8>)
{
  id v3 = [v1 tag];
  if (v3 && (uint64_t v4 = v3, v5 = [v3 identifier], v4, v5))
  {
    sub_1000CC1F0();

    uint64_t v6 = self;
    NSString v7 = sub_1000CC1C0();
    swift_bridgeObjectRelease();
    id v8 = [v6 nss_NewsURLForTagID:v7];

    sub_1000CABA0();
    uint64_t v9 = sub_1000CABE0();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v11 = v9;
    uint64_t v12 = a1;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v14 = sub_1000CABE0();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v11 = v14;
    uint64_t v12 = a1;
    uint64_t v13 = 1;
  }

  return v10(v12, v13, 1, v11);
}

uint64_t sub_100042640()
{
  uint64_t v1 = 1701736302;
  id v2 = [v0 tag];
  if (v2)
  {
    id v3 = v2;
    id v4 = [v2 identifier];

    if (v4)
    {
      uint64_t v1 = sub_1000CC1F0();
    }
  }
  return v1;
}

id sub_1000426D0()
{
  if (qword_10010DD38 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_10011ABD8;
  id v1 = objc_allocWithZone((Class)type metadata accessor for TagIntent());
  id v2 = v0;
  id v3 = [v1 init];
  [v3 setTag:v2];

  return v3;
}

void sub_100042788()
{
  swift_bridgeObjectRetain();
  id v0 = (id)NSSNewsTagWidgetPlaceholderName();
  if (v0)
  {
    id v1 = v0;
    type metadata accessor for Tag();
    sub_1000CC1F0();

    id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v3 = sub_1000CC1C0();
    swift_bridgeObjectRelease();
    NSString v4 = sub_1000CC1C0();
    swift_bridgeObjectRelease();
    id v5 = [v2 initWithIdentifier:v3 displayString:v4];

    qword_10011ABD8 = (uint64_t)v5;
  }
  else
  {
    __break(1u);
  }
}

uint64_t _s7NewsTag0B6IntentC14equalInContent3lhs3rhsSbAC_ACtFZ_0(void *a1, void *a2)
{
  id v3 = [a1 tag];
  NSString v4 = v3;
  if (v3)
  {
    id v5 = [v3 identifier];

    if (v5)
    {
      uint64_t v6 = sub_1000CC1F0();
      NSString v4 = v7;
    }
    else
    {
      uint64_t v6 = 0;
      NSString v4 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v8 = [a2 tag];
  uint64_t v9 = v8;
  if (v8)
  {
    id v10 = [v8 identifier];

    if (v10)
    {
      uint64_t v11 = sub_1000CC1F0();
      uint64_t v9 = v12;

      if (!v4) {
        goto LABEL_16;
      }
LABEL_11:
      if (v9)
      {
        if (v6 == v11 && v4 == v9)
        {
          swift_bridgeObjectRelease();
          char v13 = 1;
        }
        else
        {
          char v13 = sub_1000CCA30();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        char v13 = 0;
      }
      goto LABEL_20;
    }
    uint64_t v11 = 0;
    uint64_t v9 = 0;
    if (v4) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (v4) {
      goto LABEL_11;
    }
  }
LABEL_16:
  if (!v9)
  {
    char v13 = 1;
    return v13 & 1;
  }
  char v13 = 0;
LABEL_20:
  swift_bridgeObjectRelease();
  return v13 & 1;
}

void *sub_1000429E4(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000CACC0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_100042AC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100042B58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100042BEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100042C7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100042D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100042D20);
}

uint64_t sub_100042D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_100042DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100042DF0);
}

uint64_t sub_100042DF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000CACC0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata accessor for AppearanceEvent(uint64_t a1)
{
  return sub_100032D40(a1, qword_10010F6A8);
}

uint64_t sub_100042ECC()
{
  uint64_t result = sub_1000CACC0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100042F74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000CACC0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (_OWORD *)((char *)a1 + v8);
    unsigned int v10 = (_OWORD *)((char *)a2 + v8);
    long long v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
  }
  return a1;
}

uint64_t sub_100043048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  return a1;
}

uint64_t sub_1000430CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  return a1;
}

uint64_t sub_100043168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  return a1;
}

uint64_t sub_1000431EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  return a1;
}

uint64_t sub_100043270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100043284);
}

uint64_t sub_100043284(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CACC0();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000432F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100043304);
}

uint64_t sub_100043304(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CACC0();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for VisibleRectChangedEvent(uint64_t a1)
{
  return sub_100032D40(a1, qword_10010F740);
}

uint64_t sub_100043394()
{
  return sub_1000444A0();
}

uint64_t *sub_1000433A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000CACC0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    long long v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1000CABE0();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = sub_10001D64C(&qword_10010F340);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_100043540(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_1000CABE0();
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t sub_100043640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_1000CABE0();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_10001D64C(&qword_10010F340);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_100043790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = sub_1000CABE0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10001D64C(&qword_10010F340);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_100043944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_1000CABE0();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_10001D64C(&qword_10010F340);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_100043A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = sub_1000CABE0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10001D64C(&qword_10010F340);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_100043C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100043C5C);
}

uint64_t sub_100043C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_10001D64C(&qword_10010F340);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100043D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100043D6C);
}

uint64_t sub_100043D6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1000CACC0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_10001D64C(&qword_10010F340);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for EngagementEvent(uint64_t a1)
{
  return sub_100032D40(a1, qword_10010F7D0);
}

void sub_100043E94()
{
  sub_1000CACC0();
  if (v0 <= 0x3F)
  {
    sub_100043F5C();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100043F5C()
{
  if (!qword_10010F528)
  {
    sub_1000CABE0();
    unint64_t v0 = sub_1000CC640();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10010F528);
    }
  }
}

void *sub_100043FB4(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000CACC0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_100044080(uint64_t a1)
{
  uint64_t v2 = sub_1000CACC0();
  id v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1000440E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100044160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000441DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100044258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000442D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000442E8);
}

uint64_t sub_1000442E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1000443A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000443B8);
}

uint64_t sub_1000443B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000CACC0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

uint64_t type metadata accessor for DisappearanceEvent(uint64_t a1)
{
  return sub_100032D40(a1, qword_10010F860);
}

uint64_t sub_100044494()
{
  return sub_1000444A0();
}

uint64_t sub_1000444A0()
{
  uint64_t result = sub_1000CACC0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL sub_100044538(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_10004454C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_100044560(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_100044574(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t sub_10004458C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

uint64_t sub_100044598(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 20));
}

unsigned char *storeEnumTagSinglePayload for StackLocation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100044670);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StackLocation()
{
  return &type metadata for StackLocation;
}

uint64_t getEnumTagSinglePayload for StackKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for StackKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100044804);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StackKind()
{
  return &type metadata for StackKind;
}

unsigned char *storeEnumTagSinglePayload for BookendPosition(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100044908);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BookendPosition()
{
  return &type metadata for BookendPosition;
}

unint64_t sub_100044944()
{
  unint64_t result = qword_10010F898;
  if (!qword_10010F898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F898);
  }
  return result;
}

unint64_t sub_10004499C()
{
  unint64_t result = qword_10010F8A0;
  if (!qword_10010F8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F8A0);
  }
  return result;
}

unint64_t sub_1000449F4()
{
  unint64_t result = qword_10010F8A8;
  if (!qword_10010F8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F8A8);
  }
  return result;
}

unint64_t sub_100044A58(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    sub_10002AB64(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = a3[5];
    unsigned int v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_1000CBEF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *unsigned int v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[6];
    uint64_t v15 = a1 + v14;
    uint64_t v16 = a2 + v14;
    uint64_t v17 = *(void **)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    char v19 = *(unsigned char *)(v16 + 16);
    sub_100036674(*(void **)v16, v18, v19);
    *(void *)uint64_t v15 = v17;
    *(void *)(v15 + 8) = v18;
    *(unsigned char *)(v15 + 16) = v19;
    *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  }
  return a1;
}

void sub_100044BD0(uint64_t a1, uint64_t a2)
{
  sub_10002AFC4(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_1000CBEF0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = *(void **)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  char v9 = *(unsigned char *)(v6 + 16);

  sub_100036804(v7, v8, v9);
}

uint64_t sub_100044C94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_10002AB64(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = a3[5];
  char v9 = (void *)(a1 + v8);
  unsigned int v10 = (void *)(a2 + v8);
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_1000CBEF0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    *char v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void **)v14;
  uint64_t v16 = *(void *)(v14 + 8);
  char v17 = *(unsigned char *)(v14 + 16);
  sub_100036674(*(void **)v14, v16, v17);
  *(void *)uint64_t v13 = v15;
  *(void *)(v13 + 8) = v16;
  *(unsigned char *)(v13 + 16) = v17;
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100044DBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_10002AB64(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_10002AFC4(v8, v9);
  if (a1 != a2)
  {
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (void *)(a2 + v10);
    sub_100044F1C(a1 + v10);
    sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_1000CBEF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  char v17 = *(void **)v16;
  uint64_t v18 = *(void *)(v16 + 8);
  char v19 = *(unsigned char *)(v16 + 16);
  sub_100036674(*(void **)v16, v18, v19);
  unint64_t v20 = *(void **)v15;
  uint64_t v21 = *(void *)(v15 + 8);
  char v22 = *(unsigned char *)(v15 + 16);
  *(void *)uint64_t v15 = v17;
  *(void *)(v15 + 8) = v18;
  *(unsigned char *)(v15 + 16) = v19;
  sub_100036804(v20, v21, v22);
  uint64_t v23 = a3[7];
  uint64_t v24 = (void *)(a1 + v23);
  unint64_t v25 = (void *)(a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  return a1;
}

uint64_t sub_100044F1C(uint64_t a1)
{
  uint64_t v2 = sub_10001D64C(&qword_10010E8E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100044F7C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  char v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_1000CBEF0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  return a1;
}

uint64_t sub_10004508C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_10002AFC4(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (char *)a2 + v10;
    sub_100044F1C(a1 + v10);
    uint64_t v13 = sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_1000CBEF0();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v15 = a3[6];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t)a2 + v15;
  char v18 = *(unsigned char *)(v17 + 16);
  char v19 = *(void **)v16;
  uint64_t v20 = *(void *)(v16 + 8);
  char v21 = *(unsigned char *)(v16 + 16);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(unsigned char *)(v16 + 16) = v18;
  sub_100036804(v19, v20, v21);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t sub_1000451C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000451DC);
}

uint64_t sub_1000451DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_10001D64C(&qword_10010E8E8);
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100045288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004529C);
}

uint64_t sub_10004529C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = sub_10001D64C(&qword_10010E8E8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for SourceView()
{
  uint64_t result = qword_10010F908;
  if (!qword_10010F908) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100045390()
{
  sub_10002D8E0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10004543C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100045458()
{
  uint64_t v1 = sub_1000CBEF0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = type metadata accessor for SourceView();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)v0;
  char v12 = *(unsigned char *)(v0 + 8);
  sub_10002AB64(*(void *)v0, v12);
  char v13 = sub_1000579AC(v11, v12);
  sub_10002AFC4(v11, v12);
  sub_100045A28(v0, (uint64_t)v10);
  if (v13)
  {
    sub_100045A8C((uint64_t)v10);
    char v14 = 0;
  }
  else
  {
    sub_100057BB0((uint64_t)v7);
    sub_1000CBEE0();
    char v15 = sub_1000CBED0();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v2 + 8);
    v16(v5, v1);
    v16(v7, v1);
    sub_100045A8C((uint64_t)v10);
    char v14 = v15 ^ 1;
  }
  return v14 & 1;
}

void sub_100045630(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000CBBD0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SourceView();
  uint64_t v9 = v2 + *(int *)(v8 + 24);
  uint64_t v11 = *(void **)v9;
  uint64_t v10 = *(void *)(v9 + 8);
  if (*(unsigned char *)(v9 + 16))
  {
    id v12 = v11;
    sub_1000CBBC0();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    uint64_t v13 = sub_1000CBC30();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_100045458();
    sub_1000CBD20();
    sub_1000CB310();
    uint64_t v38 = (void *)v13;
    uint64_t v39 = 0;
    __int16 v40 = 1;
    uint64_t v41 = v46;
    LOBYTE(v42) = v47;
    uint64_t v43 = v48;
    char v44 = v49;
    long long v45 = v50;
    sub_10001D64C(&qword_10010EA58);
    sub_100032A4C();
    uint64_t v14 = sub_1000CBC70();
    sub_100036804(v11, v10, 1);
  }
  else
  {
    uint64_t v38 = *(void **)v9;
    uint64_t v39 = v10;
    sub_1000231FC();
    uint64_t v15 = sub_1000CC680();
    v37[1] = v16;
    uint64_t v38 = (void *)v15;
    uint64_t v39 = v16;
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_1000CB9D0();
    uint64_t v19 = v18;
    char v21 = v20 & 1;
    id v22 = [self systemFontOfSize:*(double *)(v2 + *(int *)(v8 + 28) + 8) weight:UIFontWeightBlack];
    sub_1000CB8B0();
    uint64_t v23 = sub_1000CB940();
    uint64_t v25 = v24;
    unint64_t v26 = a1;
    char v28 = v27;
    swift_release();
    char v29 = v28 & 1;
    a1 = v26;
    sub_100036118(v17, v19, v21);
    swift_bridgeObjectRelease();
    uint64_t v30 = sub_1000CB960();
    uint64_t v32 = v31;
    LOBYTE(v19) = v33;
    uint64_t v35 = v34;
    sub_100036118(v23, v25, v29);
    swift_bridgeObjectRelease();
    uint64_t KeyPath = swift_getKeyPath();
    swift_bridgeObjectRelease();
    uint64_t v38 = (void *)v30;
    uint64_t v39 = v32;
    LOBYTE(v40) = v19 & 1;
    uint64_t v41 = v35;
    uint64_t v42 = KeyPath;
    uint64_t v43 = 1;
    char v44 = 0;
    sub_10001D64C(&qword_10010ECB0);
    sub_1000369BC();
    uint64_t v14 = sub_1000CBC70();
  }
  *a1 = v14;
}

void sub_1000459E8(void *a1@<X8>)
{
  sub_100045630(&v2);
  *a1 = v2;
}

uint64_t sub_100045A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SourceView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100045A8C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SourceView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void destroy for SourceViewModel(uint64_t a1)
{
}

uint64_t _s7NewsTag15SourceViewModelOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100036674(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SourceViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100036674(*(void **)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_100036804(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for Banner.Background(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SourceViewModel(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_100036804(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Banner.Background(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Banner.Background(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100045C88(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100045C90(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SourceViewModel()
{
  return &type metadata for SourceViewModel;
}

ValueMetadata *type metadata accessor for SourceView.LayoutOptions()
{
  return &type metadata for SourceView.LayoutOptions;
}

void *sub_100045CBC()
{
  return &protocol witness table for AnyView;
}

uint64_t destroy for AudioPlayButton()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s7NewsTag15AudioPlayButtonVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioPlayButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for AudioPlayButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioPlayButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioPlayButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioPlayButton()
{
  return &type metadata for AudioPlayButton;
}

uint64_t sub_100045E3C()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_100045E58@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1000CBD20();
  uint64_t v4 = v3;
  sub_1000CBB30();
  uint64_t v5 = sub_1000CBB70();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  sub_1000CBD20();
  sub_1000CB310();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = KeyPath;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 56) = v11;
  double result = *(double *)&v12;
  *(_OWORD *)(a1 + 64) = v12;
  return result;
}

unint64_t sub_100045F28()
{
  unint64_t result = qword_10010F948;
  if (!qword_10010F948)
  {
    sub_10001D690(&qword_10010F950);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010F948);
  }
  return result;
}

id sub_100045F84()
{
  id result = [self mainBundle];
  qword_10010F958 = (uint64_t)result;
  return result;
}

void sub_100045FC0()
{
  if (qword_10010DD40 != -1) {
    swift_once();
  }
  id v0 = (id)qword_10010F958;
  NSString v1 = sub_1000CC1C0();
  id v2 = [self imageNamed:v1 inBundle:v0 compatibleWithTraitCollection:0];

  if (v2)
  {
    id v3 = [v2 imageWithRenderingMode:2];

    qword_10011ABE0 = (uint64_t)v3;
  }
  else
  {
    __break(1u);
  }
}

void sub_1000460AC()
{
  if (qword_10010DD40 != -1) {
    swift_once();
  }
  id v0 = (id)qword_10010F958;
  NSString v1 = sub_1000CC1C0();
  id v2 = [self imageNamed:v1 inBundle:v0 compatibleWithTraitCollection:0];

  if (v2) {
    qword_10011ABE8 = (uint64_t)v2;
  }
  else {
    __break(1u);
  }
}

id Images.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id Images.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Images();
  return [super init];
}

uint64_t type metadata accessor for Images()
{
  return self;
}

id Images.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Images();
  return [super dealloc];
}

void *sub_10004627C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    char v9 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_10001D64C(&qword_10010E9F0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000CB3C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = a3[5];
    char v11 = (void *)((char *)a1 + v10);
    long long v12 = (void *)((char *)a2 + v10);
    sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_1000CBEF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *char v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[6];
    uint64_t v15 = (void *)((char *)a1 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    sub_10001D64C(&qword_10010F988);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = sub_1000CBFC0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    }
    else
    {
      *uint64_t v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v18 = a3[7];
    uint64_t v19 = a3[8];
    char v20 = (void *)((char *)a1 + v18);
    char v21 = (void *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    *char v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = (void *)((char *)a1 + v19);
    uint64_t v24 = (void *)((char *)a2 + v19);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    int v108 = a1;
    uint64_t v109 = a3;
    uint64_t v26 = a3[9];
    char v27 = (void *)((char *)a1 + v26);
    unint64_t v110 = a2;
    char v28 = (void *)((char *)a2 + v26);
    uint64_t v29 = v28[1];
    *char v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = type metadata accessor for Item.Headline(0);
    uint64_t v31 = *(int *)(v30 + 24);
    int v100 = v27;
    __dst = (char *)v27 + v31;
    uint64_t v103 = v30;
    uint64_t v32 = (char *)v28 + v31;
    uint64_t v33 = sub_1000CABE0();
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v105 = v35;
    uint64_t v106 = v34;
    uint64_t v107 = v33;
    if (v35(v32, 1, v33))
    {
      uint64_t v36 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v32, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(__dst, v32, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
    }
    uint64_t v37 = *(int *)(v103 + 28);
    uint64_t v38 = (void *)((char *)v100 + v37);
    uint64_t v39 = (char *)v28 + v37;
    __int16 v40 = (void *)*((void *)v39 + 1);
    if (v40)
    {
      uint64_t v41 = *(void **)v39;
      *uint64_t v38 = v41;
      v38[1] = v40;
      id v42 = v41;
      id v43 = v40;
    }
    else
    {
      *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
    }
    uint64_t v44 = v109[10];
    long long v45 = (char *)v108 + v44;
    uint64_t v46 = (char *)v110 + v44;
    char v47 = *(void **)((char *)v110 + v44);
    *(void *)((char *)v108 + v44) = v47;
    uint64_t v48 = (int *)type metadata accessor for TodayContent();
    uint64_t v49 = v48[5];
    long long v50 = &v45[v49];
    uint64_t v51 = &v46[v49];
    uint64_t v52 = (int *)type metadata accessor for Banner();
    uint64_t v53 = *((void *)v52 - 1);
    unint64_t v54 = *(unsigned int (**)(char *, uint64_t, int *))(v53 + 48);
    id v55 = v47;
    if (v54(v51, 1, v52))
    {
      uint64_t v56 = sub_10001D64C(&qword_10010DE20);
      memcpy(v50, v51, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      uint64_t v57 = *((void *)v51 + 1);
      *(void *)long long v50 = *(void *)v51;
      *((void *)v50 + 1) = v57;
      uint64_t v58 = *((void *)v51 + 3);
      *((void *)v50 + 2) = *((void *)v51 + 2);
      *((void *)v50 + 3) = v58;
      uint64_t v59 = *((void *)v51 + 5);
      *((void *)v50 + 4) = *((void *)v51 + 4);
      *((void *)v50 + 5) = v59;
      uint64_t v60 = v52[7];
      int __dsta = &v50[v60];
      uint64_t v104 = v53;
      unsigned __int8 v61 = &v51[v60];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v105(v61, 1, v107))
      {
        uint64_t v62 = sub_10001D64C(&qword_10010F340);
        memcpy(__dsta, v61, *(void *)(*(void *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v106 + 16))(__dsta, v61, v107);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(__dsta, 0, 1, v107);
      }
      uint64_t v63 = v52[8];
      uint64_t v64 = &v50[v63];
      uint64_t v65 = &v51[v63];
      uint64_t v66 = *((void *)v65 + 1);
      *(void *)uint64_t v64 = *(void *)v65;
      *((void *)v64 + 1) = v66;
      uint64_t v67 = v52[9];
      uint64_t v68 = *(void **)&v51[v67];
      swift_bridgeObjectRetain();
      if (v68 != (void *)1) {
        id v69 = v68;
      }
      *(void *)&v50[v67] = v68;
      uint64_t v70 = v52[10];
      uint64_t v71 = &v50[v70];
      uint64_t v72 = &v51[v70];
      uint64_t v73 = *(void **)v72;
      uint64_t v74 = (void *)*((void *)v72 + 1);
      char v75 = v72[16];
      sub_10001DB84(*(void **)v72, v74);
      *(void *)uint64_t v71 = v73;
      *((void *)v71 + 1) = v74;
      v71[16] = v75;
      (*(void (**)(char *, void, uint64_t, int *))(v104 + 56))(v50, 0, 1, v52);
    }
    *(void *)&v45[v48[6]] = *(void *)&v46[v48[6]];
    *(void *)&v45[v48[7]] = *(void *)&v46[v48[7]];
    v45[v48[8]] = v46[v48[8]];
    uint64_t v76 = v48[9];
    Class v77 = &v45[v76];
    uint64_t v78 = &v46[v76];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (v105(v78, 1, v107))
    {
      uint64_t v79 = sub_10001D64C(&qword_10010F340);
      memcpy(v77, v78, *(void *)(*(void *)(v79 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v77, v78, v107);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v77, 0, 1, v107);
    }
    *(void *)&v45[v48[10]] = *(void *)&v46[v48[10]];
    uint64_t v80 = v48[11];
    Class v81 = &v45[v80];
    uint64_t v82 = &v46[v80];
    uint64_t v83 = *((void *)v82 + 1);
    *(void *)Class v81 = *(void *)v82;
    *((void *)v81 + 1) = v83;
    uint64_t v84 = v48[12];
    uint64_t v85 = &v45[v84];
    uint64_t v86 = &v46[v84];
    uint64_t v87 = *((void *)v86 + 1);
    *(void *)uint64_t v85 = *(void *)v86;
    *((void *)v85 + 1) = v87;
    char v9 = v108;
    uint64_t v88 = v109[11];
    uint64_t v89 = v109[12];
    uint64_t v90 = (char *)v108 + v88;
    uint64_t v91 = (char *)v110 + v88;
    uint64_t v92 = *(void **)v91;
    *(void *)uint64_t v90 = *(void *)v91;
    *(_OWORD *)(v90 + 17) = *(_OWORD *)(v91 + 17);
    *(_OWORD *)(v90 + 8) = *(_OWORD *)(v91 + 8);
    *(_OWORD *)(v90 + 40) = *(_OWORD *)(v91 + 40);
    *((void *)v90 + 12) = *((void *)v91 + 12);
    uint64_t v93 = (void *)*((void *)v91 + 8);
    *((void *)v90 + 7) = *((void *)v91 + 7);
    *((void *)v90 + 8) = v93;
    long long v94 = *((_OWORD *)v91 + 5);
    uint64_t v95 = (void *)*((void *)v91 + 9);
    *((void *)v90 + 9) = v95;
    *((_OWORD *)v90 + 5) = v94;
    *((unsigned char *)v108 + v89) = *((unsigned char *)v110 + v89);
    *((unsigned char *)v108 + v109[13]) = *((unsigned char *)v110 + v109[13]);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v96 = v92;
    id v97 = v93;
    id v98 = v95;
  }
  return v9;
}

void sub_100046A18(uint64_t a1, int *a2)
{
  sub_10001D64C(&qword_10010E9F0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_1000CB3C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + a2[5];
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1000CBEF0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = a1 + a2[6];
  sub_10001D64C(&qword_10010F988);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_1000CBFC0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  uint64_t v9 = a1 + a2[9];
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for Item.Headline(0);
  uint64_t v11 = v9 + *(int *)(v10 + 24);
  uint64_t v12 = sub_1000CABE0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (!v14(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  uint64_t v15 = (id *)(v9 + *(int *)(v10 + 28));
  if (v15[1])
  {
  }
  uint64_t v16 = (id *)(a1 + a2[10]);

  uint64_t v17 = type metadata accessor for TodayContent();
  uint64_t v18 = (char *)v16 + *(int *)(v17 + 20);
  uint64_t v19 = (int *)type metadata accessor for Banner();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v19 - 1) + 48))(v18, 1, v19))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v20 = v14;
    char v21 = &v18[v19[7]];
    uint64_t v26 = v20;
    if (!v20((uint64_t)v21, 1, v12)) {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
    }
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void **)&v18[v19[9]];
    if (v22 != (void *)1) {

    }
    sub_10001DE30(*(void **)&v18[v19[10]], *(void **)&v18[v19[10] + 8]);
    uint64_t v14 = v26;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v23 = (char *)v16 + *(int *)(v17 + 36);
  if (!v14((uint64_t)v23, 1, v12)) {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v23, v12);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = a1 + a2[11];

  uint64_t v25 = *(void **)(v24 + 72);
}

void *sub_100046E34(void *a1, void *a2, int *a3)
{
  sub_10001D64C(&qword_10010E9F0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1000CB3C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_1000CBEF0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  sub_10001D64C(&qword_10010F988);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_1000CBFC0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  else
  {
    *uint64_t v12 = *v13;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)((char *)a1 + v15);
  uint64_t v18 = (void *)((char *)a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  char v20 = (void *)((char *)a1 + v16);
  char v21 = (void *)((char *)a2 + v16);
  uint64_t v22 = v21[1];
  *char v20 = *v21;
  v20[1] = v22;
  uint64_t v106 = a2;
  uint64_t v107 = a3;
  uint64_t v23 = a3[9];
  uint64_t v105 = a1;
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = *(void *)((char *)a2 + v23 + 8);
  *uint64_t v24 = *(void *)((char *)a2 + v23);
  v24[1] = v26;
  uint64_t v27 = type metadata accessor for Item.Headline(0);
  uint64_t v28 = *(int *)(v27 + 24);
  __dst = (char *)v24 + v28;
  uint64_t v100 = v27;
  id v98 = v25;
  uint64_t v29 = &v25[v28];
  uint64_t v30 = sub_1000CABE0();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v102 = v32;
  uint64_t v103 = v31;
  uint64_t v104 = v30;
  if (v32(v29, 1, v30))
  {
    uint64_t v33 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v29, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(__dst, v29, v30);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
  }
  uint64_t v34 = *(int *)(v100 + 28);
  uint64_t v35 = (void *)((char *)v24 + v34);
  uint64_t v36 = &v98[v34];
  uint64_t v37 = (void *)*((void *)v36 + 1);
  if (v37)
  {
    uint64_t v38 = *(void **)v36;
    *uint64_t v35 = v38;
    v35[1] = v37;
    id v39 = v38;
    id v40 = v37;
  }
  else
  {
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  }
  uint64_t v41 = v107[10];
  id v42 = (char *)v105 + v41;
  id v43 = (char *)v106 + v41;
  uint64_t v44 = *(void **)((char *)v106 + v41);
  *(void *)((char *)v105 + v41) = v44;
  long long v45 = (int *)type metadata accessor for TodayContent();
  uint64_t v46 = v45[5];
  char v47 = &v42[v46];
  uint64_t v48 = &v43[v46];
  uint64_t v49 = (int *)type metadata accessor for Banner();
  uint64_t v50 = *((void *)v49 - 1);
  uint64_t v51 = *(unsigned int (**)(char *, uint64_t, int *))(v50 + 48);
  id v52 = v44;
  if (v51(v48, 1, v49))
  {
    uint64_t v53 = sub_10001D64C(&qword_10010DE20);
    memcpy(v47, v48, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    uint64_t v101 = v50;
    uint64_t v54 = *((void *)v48 + 1);
    *(void *)char v47 = *(void *)v48;
    *((void *)v47 + 1) = v54;
    uint64_t v55 = *((void *)v48 + 3);
    *((void *)v47 + 2) = *((void *)v48 + 2);
    *((void *)v47 + 3) = v55;
    uint64_t v56 = *((void *)v48 + 5);
    *((void *)v47 + 4) = *((void *)v48 + 4);
    *((void *)v47 + 5) = v56;
    uint64_t v57 = v49[7];
    uint64_t v58 = &v47[v57];
    uint64_t v59 = &v48[v57];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v102(v59, 1, v104))
    {
      uint64_t v60 = sub_10001D64C(&qword_10010F340);
      memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v58, v59, v104);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v103 + 56))(v58, 0, 1, v104);
    }
    uint64_t v61 = v49[8];
    uint64_t v62 = &v47[v61];
    uint64_t v63 = &v48[v61];
    uint64_t v64 = *((void *)v63 + 1);
    *(void *)uint64_t v62 = *(void *)v63;
    *((void *)v62 + 1) = v64;
    uint64_t v65 = v49[9];
    uint64_t v66 = *(void **)&v48[v65];
    swift_bridgeObjectRetain();
    if (v66 != (void *)1) {
      id v67 = v66;
    }
    *(void *)&v47[v65] = v66;
    uint64_t v68 = v49[10];
    id v69 = &v47[v68];
    uint64_t v70 = &v48[v68];
    uint64_t v71 = *(void **)v70;
    uint64_t v72 = (void *)*((void *)v70 + 1);
    char v73 = v70[16];
    sub_10001DB84(*(void **)v70, v72);
    *(void *)id v69 = v71;
    *((void *)v69 + 1) = v72;
    v69[16] = v73;
    (*(void (**)(char *, void, uint64_t, int *))(v101 + 56))(v47, 0, 1, v49);
  }
  *(void *)&v42[v45[6]] = *(void *)&v43[v45[6]];
  *(void *)&v42[v45[7]] = *(void *)&v43[v45[7]];
  v42[v45[8]] = v43[v45[8]];
  uint64_t v74 = v45[9];
  char v75 = &v42[v74];
  uint64_t v76 = &v43[v74];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  if (v102(v76, 1, v104))
  {
    uint64_t v77 = sub_10001D64C(&qword_10010F340);
    memcpy(v75, v76, *(void *)(*(void *)(v77 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v75, v76, v104);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v103 + 56))(v75, 0, 1, v104);
  }
  *(void *)&v42[v45[10]] = *(void *)&v43[v45[10]];
  uint64_t v78 = v45[11];
  uint64_t v79 = &v42[v78];
  uint64_t v80 = &v43[v78];
  uint64_t v81 = *((void *)v80 + 1);
  *(void *)uint64_t v79 = *(void *)v80;
  *((void *)v79 + 1) = v81;
  uint64_t v82 = v45[12];
  uint64_t v83 = &v42[v82];
  uint64_t v84 = &v43[v82];
  uint64_t v85 = *((void *)v84 + 1);
  *(void *)uint64_t v83 = *(void *)v84;
  *((void *)v83 + 1) = v85;
  uint64_t v86 = v107[11];
  uint64_t v87 = v107[12];
  uint64_t v88 = (char *)v105 + v86;
  uint64_t v89 = (char *)v106 + v86;
  uint64_t v90 = *(void **)v89;
  *(void *)uint64_t v88 = *(void *)v89;
  *(_OWORD *)(v88 + 17) = *(_OWORD *)(v89 + 17);
  *(_OWORD *)(v88 + 8) = *(_OWORD *)(v89 + 8);
  *(_OWORD *)(v88 + 40) = *(_OWORD *)(v89 + 40);
  *((void *)v88 + 12) = *((void *)v89 + 12);
  uint64_t v91 = (void *)*((void *)v89 + 8);
  *((void *)v88 + 7) = *((void *)v89 + 7);
  *((void *)v88 + 8) = v91;
  long long v92 = *((_OWORD *)v89 + 5);
  uint64_t v93 = (void *)*((void *)v89 + 9);
  *((void *)v88 + 9) = v93;
  *((_OWORD *)v88 + 5) = v92;
  *((unsigned char *)v105 + v87) = *((unsigned char *)v106 + v87);
  *((unsigned char *)v105 + v107[13]) = *((unsigned char *)v106 + v107[13]);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v94 = v90;
  id v95 = v91;
  id v96 = v93;
  return v105;
}

void *sub_10004757C(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_1000227A8((uint64_t)a1, &qword_10010E9F0);
    sub_10001D64C(&qword_10010E9F0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1000CB3C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = a3[5];
    uint64_t v8 = (void *)((char *)a1 + v7);
    uint64_t v9 = (void *)((char *)a2 + v7);
    sub_1000227A8((uint64_t)a1 + v7, &qword_10010E8E0);
    sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_1000CBEF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v11 = a3[6];
    uint64_t v12 = (void *)((char *)a1 + v11);
    uint64_t v13 = (void *)((char *)a2 + v11);
    sub_1000227A8((uint64_t)a1 + v11, &qword_10010F988);
    sub_10001D64C(&qword_10010F988);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_1000CBFC0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    else
    {
      *uint64_t v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_retain();
  swift_release();
  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)((char *)a1 + v18);
  char v20 = (void *)((char *)a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_retain();
  swift_release();
  v134 = a2;
  uint64_t v135 = a3;
  uint64_t v21 = a3[9];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (void *)((char *)a2 + v21);
  *(void *)((char *)a1 + v21) = *v23;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *((void *)v22 + 1) = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = type metadata accessor for Item.Headline(0);
  uint64_t v25 = *(int *)(v24 + 24);
  uint64_t v26 = &v22[v25];
  uint64_t v27 = (char *)v23 + v25;
  uint64_t v28 = sub_1000CABE0();
  uint64_t v132 = *(void *)(v28 - 8);
  uint64_t v29 = *(uint64_t (**)(void))(v132 + 48);
  int v30 = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)(v26, 1, v28);
  uint64_t v133 = v28;
  uint64_t v131 = v29;
  int v31 = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)(v27, 1, v28);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v26, 0, 1, v28);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v132 + 8))(v26, v28);
LABEL_17:
    uint64_t v32 = sub_10001D64C(&qword_10010F340);
    memcpy(v26, v27, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v132 + 24))(v26, v27, v28);
LABEL_18:
  uint64_t v33 = *(int *)(v24 + 28);
  uint64_t v34 = (void **)&v22[v33];
  uint64_t v35 = (char *)v23 + v33;
  uint64_t v36 = *(void *)&v22[v33 + 8];
  uint64_t v37 = *((void *)v35 + 1);
  if (v36)
  {
    if (v37)
    {
      uint64_t v38 = *v34;
      id v39 = *(void **)v35;
      *uint64_t v34 = *(void **)v35;
      id v40 = v39;

      uint64_t v41 = (void *)*((void *)v35 + 1);
      id v42 = v34[1];
      v34[1] = v41;
      id v43 = v41;

      goto LABEL_25;
    }
    sub_100034B4C((uint64_t)v34);
  }
  else if (v37)
  {
    uint64_t v44 = *(void **)v35;
    *uint64_t v34 = *(void **)v35;
    long long v45 = (void *)*((void *)v35 + 1);
    v34[1] = v45;
    id v46 = v44;
    id v47 = v45;
    goto LABEL_25;
  }
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
LABEL_25:
  uint64_t v48 = v135[10];
  uint64_t v130 = a1;
  uint64_t v49 = (void **)((char *)a1 + v48);
  uint64_t v50 = (char *)v134 + v48;
  uint64_t v51 = *(void **)((char *)v134 + v48);
  id v52 = *v49;
  int *v49 = v51;
  id v53 = v51;

  uint64_t v54 = (int *)type metadata accessor for TodayContent();
  uint64_t v55 = v54[5];
  uint64_t v56 = (char *)v49 + v55;
  v136 = v50;
  uint64_t v57 = &v50[v55];
  uint64_t v58 = (int *)type metadata accessor for Banner();
  uint64_t v59 = *((void *)v58 - 1);
  uint64_t v60 = *(uint64_t (**)(char *, uint64_t, int *))(v59 + 48);
  int v61 = v60(v56, 1, v58);
  int v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (v62)
    {
      sub_10004D298((uint64_t)v56, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_31;
    }
    *(void *)uint64_t v56 = *(void *)v57;
    *((void *)v56 + 1) = *((void *)v57 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v56 + 2) = *((void *)v57 + 2);
    *((void *)v56 + 3) = *((void *)v57 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v56 + 4) = *((void *)v57 + 4);
    *((void *)v56 + 5) = *((void *)v57 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v68 = v58[7];
    id v69 = &v57[v68];
    uint64_t v129 = &v56[v68];
    int v70 = v131();
    int v71 = ((uint64_t (*)(char *, uint64_t, uint64_t))v131)(v69, 1, v133);
    if (v70)
    {
      if (v71)
      {
        size_t v72 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        char v73 = v129;
LABEL_42:
        memcpy(v73, v69, v72);
        goto LABEL_45;
      }
      (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v129, v69, v133);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v129, 0, 1, v133);
    }
    else
    {
      if (v71)
      {
        (*(void (**)(char *, uint64_t))(v132 + 8))(v129, v133);
        size_t v72 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        char v73 = v129;
        goto LABEL_42;
      }
      (*(void (**)(char *, char *, uint64_t))(v132 + 24))(v129, v69, v133);
    }
LABEL_45:
    uint64_t v86 = v58[8];
    uint64_t v87 = &v56[v86];
    uint64_t v88 = &v57[v86];
    *(void *)uint64_t v87 = *(void *)v88;
    *((void *)v87 + 1) = *((void *)v88 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v89 = v58[9];
    uint64_t v90 = &v56[v89];
    uint64_t v91 = *(void **)&v56[v89];
    long long v92 = *(void **)&v57[v89];
    if (v91 == (void *)1)
    {
      if (v92 != (void *)1)
      {
        *(void *)uint64_t v90 = v92;
        id v93 = v92;
LABEL_52:
        uint64_t v95 = v58[10];
        id v96 = &v56[v95];
        id v97 = &v57[v95];
        id v98 = *(void **)v97;
        uint64_t v99 = (void *)*((void *)v97 + 1);
        char v100 = v97[16];
        sub_10001DB84(*(void **)v97, v99);
        uint64_t v101 = *(void **)v96;
        uint64_t v102 = (void *)*((void *)v96 + 1);
        *(void *)id v96 = v98;
        *((void *)v96 + 1) = v99;
        v96[16] = v100;
        sub_10001DE30(v101, v102);
        goto LABEL_53;
      }
    }
    else
    {
      if (v92 != (void *)1)
      {
        *(void *)uint64_t v90 = v92;
        id v94 = v92;

        goto LABEL_52;
      }
      sub_10001EA8C((uint64_t)&v56[v89]);
      long long v92 = *(void **)&v57[v89];
    }
    *(void *)uint64_t v90 = v92;
    goto LABEL_52;
  }
  if (v62)
  {
LABEL_31:
    uint64_t v67 = sub_10001D64C(&qword_10010DE20);
    memcpy(v56, v57, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_53;
  }
  *(void *)uint64_t v56 = *(void *)v57;
  *((void *)v56 + 1) = *((void *)v57 + 1);
  *((void *)v56 + 2) = *((void *)v57 + 2);
  *((void *)v56 + 3) = *((void *)v57 + 3);
  *((void *)v56 + 4) = *((void *)v57 + 4);
  *((void *)v56 + 5) = *((void *)v57 + 5);
  uint64_t v63 = v58[7];
  uint64_t v64 = &v56[v63];
  uint64_t v65 = &v57[v63];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v131)(v65, 1, v133))
  {
    uint64_t v66 = sub_10001D64C(&qword_10010F340);
    memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v64, v65, v133);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v64, 0, 1, v133);
  }
  uint64_t v74 = v58[8];
  char v75 = &v56[v74];
  uint64_t v76 = &v57[v74];
  *(void *)char v75 = *(void *)v76;
  *((void *)v75 + 1) = *((void *)v76 + 1);
  uint64_t v77 = v58[9];
  uint64_t v78 = *(void **)&v57[v77];
  swift_bridgeObjectRetain();
  if (v78 != (void *)1) {
    id v79 = v78;
  }
  *(void *)&v56[v77] = v78;
  uint64_t v80 = v58[10];
  uint64_t v81 = &v56[v80];
  uint64_t v82 = &v57[v80];
  uint64_t v83 = *(void **)v82;
  uint64_t v84 = (void *)*((void *)v82 + 1);
  char v85 = v82[16];
  sub_10001DB84(*(void **)v82, v84);
  *(void *)uint64_t v81 = v83;
  *((void *)v81 + 1) = v84;
  v81[16] = v85;
  (*(void (**)(char *, void, uint64_t, int *))(v59 + 56))(v56, 0, 1, v58);
LABEL_53:
  *(void **)((char *)v49 + v54[6]) = *(void **)&v136[v54[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void **)((char *)v49 + v54[7]) = *(void **)&v136[v54[7]];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *((unsigned char *)v49 + v54[8]) = v136[v54[8]];
  uint64_t v103 = v54[9];
  uint64_t v104 = (char *)v49 + v103;
  uint64_t v105 = &v136[v103];
  int v106 = ((uint64_t (*)(char *, uint64_t, uint64_t))v131)((char *)v49 + v103, 1, v133);
  int v107 = ((uint64_t (*)(char *, uint64_t, uint64_t))v131)(v105, 1, v133);
  if (!v106)
  {
    if (!v107)
    {
      (*(void (**)(char *, char *, uint64_t))(v132 + 24))(v104, v105, v133);
      goto LABEL_59;
    }
    (*(void (**)(char *, uint64_t))(v132 + 8))(v104, v133);
    goto LABEL_58;
  }
  if (v107)
  {
LABEL_58:
    uint64_t v108 = sub_10001D64C(&qword_10010F340);
    memcpy(v104, v105, *(void *)(*(void *)(v108 - 8) + 64));
    goto LABEL_59;
  }
  (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v104, v105, v133);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v104, 0, 1, v133);
LABEL_59:
  *(void **)((char *)v49 + v54[10]) = *(void **)&v136[v54[10]];
  swift_retain();
  swift_release();
  uint64_t v109 = v54[11];
  unint64_t v110 = (void **)((char *)v49 + v109);
  uint64_t v111 = &v136[v109];
  *unint64_t v110 = *(void *)v111;
  v110[1] = *((void *)v111 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v112 = v54[12];
  uint64_t v113 = (void **)((char *)v49 + v112);
  char v114 = &v136[v112];
  *uint64_t v113 = *(void *)v114;
  v113[1] = *((void *)v114 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v115 = v135[11];
  char v116 = (char *)v130 + v115;
  uint64_t v117 = (char *)v134 + v115;
  double v118 = *(void **)((char *)v134 + v115);
  unint64_t v119 = *(void **)v116;
  *(void *)char v116 = v118;
  id v120 = v118;

  *((void *)v116 + 1) = *((void *)v117 + 1);
  long long v121 = *((_OWORD *)v117 + 1);
  v116[32] = v117[32];
  *((_OWORD *)v116 + 1) = v121;
  *((void *)v116 + 5) = *((void *)v117 + 5);
  *((void *)v116 + 6) = *((void *)v117 + 6);
  *((void *)v116 + 7) = *((void *)v117 + 7);
  uint64_t v122 = (void *)*((void *)v117 + 8);
  uint64_t v123 = (void *)*((void *)v116 + 8);
  *((void *)v116 + 8) = v122;
  id v124 = v122;

  uint64_t v125 = (void *)*((void *)v117 + 9);
  uint64_t v126 = (void *)*((void *)v116 + 9);
  *((void *)v116 + 9) = v125;
  id v127 = v125;

  *((void *)v116 + 10) = *((void *)v117 + 10);
  *((void *)v116 + 11) = *((void *)v117 + 11);
  *((void *)v116 + 12) = *((void *)v117 + 12);
  *((unsigned char *)v130 + v135[12]) = *((unsigned char *)v134 + v135[12]);
  *((unsigned char *)v130 + v135[13]) = *((unsigned char *)v134 + v135[13]);
  return v130;
}

char *sub_100048174(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10001D64C(&qword_10010E9F0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_1000CB3C0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_1000CBEF0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = sub_10001D64C(&qword_10010F988);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = sub_1000CBFC0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  uint64_t v18 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v18] = *(_OWORD *)&a2[v18];
  uint64_t v19 = a3[9];
  char v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *(void *)&a2[v19 + 8];
  *(void *)char v20 = *(void *)&a2[v19];
  *((void *)v20 + 1) = v22;
  uint64_t v23 = type metadata accessor for Item.Headline(0);
  uint64_t v24 = *(int *)(v23 + 24);
  uint64_t v25 = &v20[v24];
  uint64_t v26 = &v21[v24];
  uint64_t v27 = sub_1000CABE0();
  uint64_t v28 = *(void *)(v27 - 8);
  int v62 = *(unsigned int (**)(void))(v28 + 48);
  uint64_t v60 = v28;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v26, 1, v27))
  {
    uint64_t v29 = sub_10001D64C(&qword_10010F340);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  *(_OWORD *)&v20[*(int *)(v23 + 28)] = *(_OWORD *)&v21[*(int *)(v23 + 28)];
  int v61 = a3;
  uint64_t v30 = a3[10];
  int v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *(void *)&a1[v30] = *(void *)&a2[v30];
  uint64_t v33 = (int *)type metadata accessor for TodayContent();
  uint64_t v34 = v33[5];
  uint64_t v35 = &v31[v34];
  uint64_t v36 = &v32[v34];
  uint64_t v37 = (int *)type metadata accessor for Banner();
  uint64_t v38 = *((void *)v37 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))(v36, 1, v37))
  {
    uint64_t v39 = sub_10001D64C(&qword_10010DE20);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    long long v40 = *((_OWORD *)v36 + 1);
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    *((_OWORD *)v35 + 1) = v40;
    *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
    uint64_t v41 = v37[7];
    uint64_t v58 = &v36[v41];
    uint64_t v59 = &v35[v41];
    if (v62())
    {
      uint64_t v42 = sub_10001D64C(&qword_10010F340);
      memcpy(v59, v58, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v59, v58, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v59, 0, 1, v27);
    }
    *(_OWORD *)&v35[v37[8]] = *(_OWORD *)&v36[v37[8]];
    *(void *)&v35[v37[9]] = *(void *)&v36[v37[9]];
    uint64_t v43 = v37[10];
    uint64_t v44 = &v35[v43];
    long long v45 = &v36[v43];
    v44[16] = v45[16];
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    (*(void (**)(char *, void, uint64_t, int *))(v38 + 56))(v35, 0, 1, v37);
  }
  *(void *)&v31[v33[6]] = *(void *)&v32[v33[6]];
  *(void *)&v31[v33[7]] = *(void *)&v32[v33[7]];
  v31[v33[8]] = v32[v33[8]];
  uint64_t v46 = v33[9];
  id v47 = &v31[v46];
  uint64_t v48 = &v32[v46];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(&v32[v46], 1, v27))
  {
    uint64_t v49 = sub_10001D64C(&qword_10010F340);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v47, v48, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v47, 0, 1, v27);
  }
  *(void *)&v31[v33[10]] = *(void *)&v32[v33[10]];
  *(_OWORD *)&v31[v33[11]] = *(_OWORD *)&v32[v33[11]];
  *(_OWORD *)&v31[v33[12]] = *(_OWORD *)&v32[v33[12]];
  uint64_t v50 = v61[11];
  uint64_t v51 = v61[12];
  id v52 = &a1[v50];
  id v53 = &a2[v50];
  long long v54 = *((_OWORD *)v53 + 1);
  *(_OWORD *)id v52 = *(_OWORD *)v53;
  *((_OWORD *)v52 + 1) = v54;
  *((void *)v52 + 12) = *((void *)v53 + 12);
  long long v55 = *((_OWORD *)v53 + 5);
  *((_OWORD *)v52 + 4) = *((_OWORD *)v53 + 4);
  *((_OWORD *)v52 + 5) = v55;
  long long v56 = *((_OWORD *)v53 + 3);
  *((_OWORD *)v52 + 2) = *((_OWORD *)v53 + 2);
  *((_OWORD *)v52 + 3) = v56;
  a1[v51] = a2[v51];
  a1[v61[13]] = a2[v61[13]];
  return a1;
}

char *sub_1000487A0(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_1000227A8((uint64_t)a1, &qword_10010E9F0);
    uint64_t v6 = sub_10001D64C(&qword_10010E9F0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000CB3C0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    sub_1000227A8((uint64_t)&a1[v8], &qword_10010E8E0);
    uint64_t v11 = sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_1000CBEF0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    uint64_t v13 = a3[6];
    uint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    sub_1000227A8((uint64_t)&a1[v13], &qword_10010F988);
    uint64_t v16 = sub_10001D64C(&qword_10010F988);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = sub_1000CBFC0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  char v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_release();
  uint64_t v21 = a3[8];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  swift_release();
  unint64_t v119 = a3;
  id v120 = a2;
  uint64_t v24 = a3[9];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)&a1[v24] = *(void *)v26;
  swift_unknownObjectRelease();
  *((void *)v25 + 1) = *((void *)v26 + 1);
  swift_bridgeObjectRelease();
  uint64_t v115 = type metadata accessor for Item.Headline(0);
  uint64_t v27 = *(int *)(v115 + 24);
  uint64_t v28 = &v25[v27];
  uint64_t v29 = &v26[v27];
  uint64_t v30 = sub_1000CABE0();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(void))(v31 + 48);
  unsigned int v33 = ((uint64_t (*)(char *, uint64_t, uint64_t))v32)(v28, 1, v30);
  double v118 = v32;
  unsigned int v34 = ((uint64_t (*)(char *, uint64_t, uint64_t))v32)(v29, 1, v30);
  uint64_t v117 = v30;
  uint64_t v114 = v31;
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
LABEL_16:
    uint64_t v35 = sub_10001D64C(&qword_10010F340);
    memcpy(v28, v29, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v28, v29, v30);
LABEL_17:
  uint64_t v36 = *(int *)(v115 + 28);
  uint64_t v37 = (void **)&v25[v36];
  uint64_t v38 = (void **)&v26[v36];
  if (*(void *)&v25[v36 + 8])
  {
    if (v38[1])
    {
      uint64_t v39 = *v37;
      int *v37 = *v38;

      long long v40 = v37[1];
      v37[1] = v38[1];

      goto LABEL_22;
    }
    sub_100034B4C((uint64_t)v37);
  }
  *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
LABEL_22:
  uint64_t v41 = v119[10];
  char v116 = a1;
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &v120[v41];
  uint64_t v44 = *(void **)&a1[v41];
  *(void *)&a1[v41] = *(void *)&v120[v41];

  long long v45 = (int *)type metadata accessor for TodayContent();
  uint64_t v46 = v45[5];
  id v47 = &v42[v46];
  uint64_t v48 = &v43[v46];
  uint64_t v49 = (int *)type metadata accessor for Banner();
  uint64_t v50 = *((void *)v49 - 1);
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t, int *))(v50 + 48);
  int v52 = v51(v47, 1, v49);
  int v53 = v51(v48, 1, v49);
  if (v52)
  {
    if (!v53)
    {
      long long v54 = *((_OWORD *)v48 + 1);
      *(_OWORD *)id v47 = *(_OWORD *)v48;
      *((_OWORD *)v47 + 1) = v54;
      *((_OWORD *)v47 + 2) = *((_OWORD *)v48 + 2);
      uint64_t v55 = v49[7];
      long long v56 = &v47[v55];
      uint64_t v57 = &v48[v55];
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v118)(&v48[v55], 1, v117))
      {
        uint64_t v58 = sub_10001D64C(&qword_10010F340);
        memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v56, v57, v117);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56))(v56, 0, 1, v117);
      }
      *(_OWORD *)&v47[v49[8]] = *(_OWORD *)&v48[v49[8]];
      *(void *)&v47[v49[9]] = *(void *)&v48[v49[9]];
      uint64_t v68 = v49[10];
      id v69 = &v47[v68];
      int v70 = &v48[v68];
      v69[16] = v70[16];
      *(_OWORD *)id v69 = *(_OWORD *)v70;
      (*(void (**)(char *, void, uint64_t, int *))(v50 + 56))(v47, 0, 1, v49);
      goto LABEL_35;
    }
LABEL_28:
    uint64_t v59 = sub_10001D64C(&qword_10010DE20);
    memcpy(v47, v48, *(void *)(*(void *)(v59 - 8) + 64));
LABEL_35:
    size_t v72 = v116;
    uint64_t v71 = v117;
    goto LABEL_36;
  }
  if (v53)
  {
    sub_10004D298((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for Banner);
    goto LABEL_28;
  }
  uint64_t v60 = *((void *)v48 + 1);
  *(void *)id v47 = *(void *)v48;
  *((void *)v47 + 1) = v60;
  swift_bridgeObjectRelease();
  uint64_t v61 = *((void *)v48 + 3);
  *((void *)v47 + 2) = *((void *)v48 + 2);
  *((void *)v47 + 3) = v61;
  swift_bridgeObjectRelease();
  uint64_t v62 = *((void *)v48 + 5);
  *((void *)v47 + 4) = *((void *)v48 + 4);
  *((void *)v47 + 5) = v62;
  swift_bridgeObjectRelease();
  uint64_t v63 = v49[7];
  uint64_t v64 = &v48[v63];
  uint64_t v112 = &v47[v63];
  int v113 = v118();
  unsigned int v65 = ((uint64_t (*)(char *, uint64_t, uint64_t))v118)(v64, 1, v117);
  if (v113)
  {
    if (v65)
    {
      size_t v66 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
      uint64_t v67 = v112;
LABEL_46:
      memcpy(v67, v64, v66);
      goto LABEL_49;
    }
    (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v112, v64, v117);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56))(v112, 0, 1, v117);
  }
  else
  {
    if (v65)
    {
      (*(void (**)(char *, uint64_t))(v114 + 8))(v112, v117);
      size_t v66 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
      uint64_t v67 = v112;
      goto LABEL_46;
    }
    (*(void (**)(char *, char *, uint64_t))(v114 + 40))(v112, v64, v117);
  }
LABEL_49:
  uint64_t v97 = v49[8];
  id v98 = &v47[v97];
  uint64_t v99 = (uint64_t *)&v48[v97];
  uint64_t v101 = *v99;
  uint64_t v100 = v99[1];
  *(void *)id v98 = v101;
  *((void *)v98 + 1) = v100;
  swift_bridgeObjectRelease();
  uint64_t v102 = v49[9];
  uint64_t v103 = &v47[v102];
  uint64_t v104 = *(void **)&v47[v102];
  uint64_t v105 = *(void *)&v48[v102];
  if (v104 != (void *)1)
  {
    if (v105 != 1)
    {
      *(void *)uint64_t v103 = v105;

      goto LABEL_54;
    }
    sub_10001EA8C((uint64_t)&v47[v102]);
    uint64_t v105 = *(void *)&v48[v102];
  }
  *(void *)uint64_t v103 = v105;
LABEL_54:
  uint64_t v71 = v117;
  uint64_t v106 = v49[10];
  int v107 = &v47[v106];
  uint64_t v108 = &v48[v106];
  char v109 = v108[16];
  unint64_t v110 = *(void **)v107;
  uint64_t v111 = (void *)*((void *)v107 + 1);
  *(_OWORD *)int v107 = *(_OWORD *)v108;
  v107[16] = v109;
  sub_10001DE30(v110, v111);
  size_t v72 = v116;
LABEL_36:
  *(void *)&v42[v45[6]] = *(void *)&v43[v45[6]];
  swift_bridgeObjectRelease();
  *(void *)&v42[v45[7]] = *(void *)&v43[v45[7]];
  swift_unknownObjectRelease();
  v42[v45[8]] = v43[v45[8]];
  uint64_t v73 = v45[9];
  uint64_t v74 = &v42[v73];
  char v75 = &v43[v73];
  unsigned int v76 = ((uint64_t (*)(char *, uint64_t, uint64_t))v118)(&v42[v73], 1, v71);
  unsigned int v77 = ((uint64_t (*)(char *, uint64_t, uint64_t))v118)(v75, 1, v71);
  if (!v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v114 + 40))(v74, v75, v71);
      goto LABEL_42;
    }
    (*(void (**)(char *, uint64_t))(v114 + 8))(v74, v71);
    goto LABEL_41;
  }
  if (v77)
  {
LABEL_41:
    uint64_t v78 = sub_10001D64C(&qword_10010F340);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v74, v75, v71);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56))(v74, 0, 1, v71);
LABEL_42:
  *(void *)&v42[v45[10]] = *(void *)&v43[v45[10]];
  swift_release();
  uint64_t v79 = v45[11];
  uint64_t v80 = &v42[v79];
  uint64_t v81 = &v43[v79];
  uint64_t v83 = *(void *)v81;
  uint64_t v82 = *((void *)v81 + 1);
  *(void *)uint64_t v80 = v83;
  *((void *)v80 + 1) = v82;
  swift_bridgeObjectRelease();
  uint64_t v84 = v45[12];
  char v85 = &v42[v84];
  uint64_t v86 = &v43[v84];
  uint64_t v88 = *(void *)v86;
  uint64_t v87 = *((void *)v86 + 1);
  *(void *)char v85 = v88;
  *((void *)v85 + 1) = v87;
  swift_bridgeObjectRelease();
  uint64_t v89 = v119[11];
  uint64_t v90 = &v72[v89];
  uint64_t v91 = &v120[v89];
  long long v92 = *(void **)&v72[v89];
  *(void *)&v72[v89] = *(void *)&v120[v89];

  *((void *)v90 + 1) = *((void *)v91 + 1);
  *((_OWORD *)v90 + 1) = *((_OWORD *)v91 + 1);
  v90[32] = v91[32];
  *(_OWORD *)(v90 + 40) = *(_OWORD *)(v91 + 40);
  *((void *)v90 + 7) = *((void *)v91 + 7);
  id v93 = (void *)*((void *)v90 + 8);
  *((void *)v90 + 8) = *((void *)v91 + 8);

  id v94 = (void *)*((void *)v90 + 9);
  *((void *)v90 + 9) = *((void *)v91 + 9);

  *((_OWORD *)v90 + 5) = *((_OWORD *)v91 + 5);
  *((void *)v90 + 12) = *((void *)v91 + 12);
  uint64_t v95 = v119[13];
  v72[v119[12]] = v120[v119[12]];
  v72[v95] = v120[v95];
  return v72;
}

uint64_t sub_100049238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004924C);
}

uint64_t sub_10004924C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10001D64C(&qword_10010F990);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_10001D64C(&qword_10010E8E8);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_11:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_12;
  }
  uint64_t v14 = sub_10001D64C(&qword_10010F998);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_11;
  }
  uint64_t v15 = type metadata accessor for Item.Headline(0);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[9];
    goto LABEL_11;
  }
  uint64_t v16 = type metadata accessor for TodayContent();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v12 = *(void *)(v16 - 8);
    uint64_t v13 = a3[10];
    goto LABEL_11;
  }
  unint64_t v18 = *(void *)(a1 + a3[11]);
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

uint64_t sub_100049450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100049464);
}

uint64_t sub_100049464(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_10001D64C(&qword_10010F990);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = sub_10001D64C(&qword_10010E8E8);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t v16 = sub_10001D64C(&qword_10010F998);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t v17 = type metadata accessor for Item.Headline(0);
        if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
        {
          uint64_t v10 = v17;
          uint64_t v14 = *(void *)(v17 - 8);
          uint64_t v15 = a4[9];
        }
        else
        {
          uint64_t result = type metadata accessor for TodayContent();
          if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
          {
            *(void *)(a1 + a4[11]) = (a2 - 1);
            return result;
          }
          uint64_t v10 = result;
          uint64_t v14 = *(void *)(result - 8);
          uint64_t v15 = a4[10];
        }
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for HeadlineCell(uint64_t a1)
{
  return sub_100032D40(a1, (uint64_t *)&unk_10010F9F8);
}

void sub_100049684()
{
  sub_100049874(319, &qword_10010FA08, (void (*)(uint64_t))&type metadata accessor for RedactionReasons);
  if (v0 <= 0x3F)
  {
    sub_100049874(319, (unint64_t *)&qword_10010E958, (void (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v1 <= 0x3F)
    {
      sub_100049874(319, (unint64_t *)&unk_10010FA10, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Item.Headline(319);
        if (v3 <= 0x3F)
        {
          type metadata accessor for TodayContent();
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

void sub_100049874(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1000CB2B0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void destroy for HeadlineCell.LayoutOptions(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 72);
}

uint64_t initializeWithCopy for HeadlineCell.LayoutOptions(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  unint64_t v4 = *(void **)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void **)(a2 + 72);
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  return a1;
}

uint64_t assignWithCopy for HeadlineCell.LayoutOptions(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  id v8 = *(void **)(a2 + 64);
  uint64_t v9 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v8;
  id v10 = v8;

  uint64_t v11 = *(void **)(a2 + 72);
  uint64_t v12 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v11;
  id v13 = v11;

  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

__n128 initializeWithTake for HeadlineCell.LayoutOptions(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for HeadlineCell.LayoutOptions(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  long long v5 = *(void **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);

  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for HeadlineCell.LayoutOptions(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HeadlineCell.LayoutOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HeadlineCell.LayoutOptions()
{
  return &type metadata for HeadlineCell.LayoutOptions;
}

uint64_t sub_100049B9C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100049BB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1000CB650();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = sub_10001D64C(&qword_10010FA60);
  __chkstk_darwin(v4);
  long long v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_10001D64C(&qword_10010FA68);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(void *)long long v6 = sub_1000CB700();
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  uint64_t v10 = sub_10001D64C(&qword_10010FA70);
  sub_100049EBC(v1, (uint64_t)&v6[*(int *)(v10 + 44)]);
  sub_1000CB640();
  uint64_t v11 = (void *)0xE000000000000000;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  sub_1000CB630(v29);
  uint64_t v12 = *(void **)(v1 + *(int *)(type metadata accessor for HeadlineCell(0) + 36));
  id v13 = [v12 sourceName];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = sub_1000CC1F0();
    uint64_t v11 = v16;
  }
  else
  {
    uint64_t v15 = 0;
  }
  v30._countAndFlagsBits = v15;
  v30._object = v11;
  sub_1000CB620(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 8236;
  v31._object = (void *)0xE200000000000000;
  sub_1000CB630(v31);
  id v17 = [v12 title];
  if (v17)
  {
    unint64_t v18 = v17;
    uint64_t v19 = sub_1000CC1F0();
    uint64_t v21 = v20;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v21 = (void *)0xE000000000000000;
  }
  v32._countAndFlagsBits = v19;
  v32._object = v21;
  sub_1000CB620(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  sub_1000CB630(v33);
  sub_1000CB670();
  uint64_t v22 = sub_1000CB9C0();
  uint64_t v24 = v23;
  char v26 = v25 & 1;
  sub_100036A5C(&qword_10010FA78, &qword_10010FA60);
  sub_1000CBA30();
  sub_100036118(v22, v24, v26);
  swift_bridgeObjectRelease();
  sub_1000227A8((uint64_t)v6, &qword_10010FA60);
  return sub_1000365A0((uint64_t)v9, a1, &qword_10010FA68);
}

uint64_t sub_100049EBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10001D64C(&qword_10010FA80);
  __chkstk_darwin(v4 - 8);
  long long v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001D64C(&qword_10010FA88);
  uint64_t v8 = v7 - 8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v13 = (char *)&v26 - v12;
  type metadata accessor for HeadlineCell(0);
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v32 = v33;
  int v31 = v34;
  uint64_t v30 = v35;
  int v29 = v36;
  uint64_t v28 = v37;
  uint64_t v27 = v38;
  *(void *)long long v6 = sub_1000CB5F0();
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  uint64_t v14 = sub_10001D64C(&qword_10010FA90);
  sub_10004A1DC(a1, (uint64_t)&v6[*(int *)(v14 + 44)]);
  sub_1000CBD20();
  sub_1000CB310();
  sub_100036850((uint64_t)v6, (uint64_t)v11, &qword_10010FA80);
  uint64_t v15 = &v11[*(int *)(v8 + 44)];
  long long v16 = v40;
  *(_OWORD *)uint64_t v15 = v39;
  *((_OWORD *)v15 + 1) = v16;
  *((_OWORD *)v15 + 2) = v41;
  sub_1000227A8((uint64_t)v6, &qword_10010FA80);
  sub_1000365A0((uint64_t)v11, (uint64_t)v13, &qword_10010FA88);
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v17 = v42;
  LOBYTE(a1) = v43;
  uint64_t v18 = v44;
  char v19 = v45;
  uint64_t v20 = v46;
  uint64_t v26 = v47;
  sub_100036850((uint64_t)v13, (uint64_t)v11, &qword_10010FA88);
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = v32;
  *(unsigned char *)(a2 + 24) = v31;
  *(void *)(a2 + 32) = v30;
  *(unsigned char *)(a2 + 40) = v29;
  uint64_t v21 = v27;
  *(void *)(a2 + 48) = v28;
  *(void *)(a2 + 56) = v21;
  uint64_t v22 = sub_10001D64C(&qword_10010FA98);
  sub_100036850((uint64_t)v11, a2 + *(int *)(v22 + 48), &qword_10010FA88);
  uint64_t v23 = a2 + *(int *)(v22 + 64);
  *(void *)uint64_t v23 = 0;
  *(unsigned char *)(v23 + 8) = 1;
  *(void *)(v23 + 16) = v17;
  *(unsigned char *)(v23 + 24) = a1;
  *(void *)(v23 + 32) = v18;
  *(unsigned char *)(v23 + 40) = v19;
  uint64_t v24 = v26;
  *(void *)(v23 + 48) = v20;
  *(void *)(v23 + 56) = v24;
  sub_1000227A8((uint64_t)v13, &qword_10010FA88);
  return sub_1000227A8((uint64_t)v11, &qword_10010FA88);
}

uint64_t sub_10004A1DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v3 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ThumbnailView(0);
  uint64_t v7 = (int *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v36 = (uint64_t)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v34 - v10);
  uint64_t v12 = sub_10001D64C(&qword_10010FAA0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v35 = (uint64_t)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  long long v16 = (uint64_t *)((char *)&v34 - v15);
  *long long v16 = sub_1000CBCE0();
  v16[1] = v17;
  uint64_t v18 = sub_10001D64C(&qword_10010FAA8);
  sub_10004A518(a1, (uint64_t *)((char *)v16 + *(int *)(v18 + 44)));
  char v19 = (int *)type metadata accessor for HeadlineCell(0);
  sub_10004D230(a1 + v19[9], (uint64_t)v5, type metadata accessor for Item.Headline);
  uint64_t v20 = a1 + v19[11];
  uint64_t v21 = *(void *)(v20 + 8);
  uint64_t v22 = *(void *)(v20 + 16);
  uint64_t v23 = *(void *)(v20 + 24);
  char v24 = *(unsigned char *)(v20 + 32);
  uint64_t v25 = sub_1000832B8();
  uint64_t v26 = v19[13];
  LOBYTE(v19) = *(unsigned char *)(a1 + v19[12]);
  LOBYTE(a1) = *(unsigned char *)(a1 + v26);
  *uint64_t v11 = swift_getKeyPath();
  sub_10001D64C(&qword_10010E8E0);
  swift_storeEnumTagMultiPayload();
  sub_10004D2FC((uint64_t)v5, (uint64_t)v11 + v7[7], type metadata accessor for Item.Headline);
  uint64_t v27 = (char *)v11 + v7[8];
  *(void *)uint64_t v27 = v21;
  *((void *)v27 + 1) = v22;
  *((void *)v27 + 2) = v23;
  v27[24] = v24;
  *(uint64_t *)((char *)v11 + v7[9]) = v25;
  *((unsigned char *)v11 + v7[10]) = (_BYTE)v19;
  *((unsigned char *)v11 + v7[11]) = a1;
  uint64_t v28 = v35;
  sub_100036850((uint64_t)v16, v35, &qword_10010FAA0);
  uint64_t v29 = v36;
  sub_10004D230((uint64_t)v11, v36, type metadata accessor for ThumbnailView);
  uint64_t v30 = v37;
  sub_100036850(v28, v37, &qword_10010FAA0);
  uint64_t v31 = sub_10001D64C(&qword_10010FAB0);
  uint64_t v32 = v30 + *(int *)(v31 + 48);
  *(void *)uint64_t v32 = 0;
  *(unsigned char *)(v32 + 8) = 1;
  sub_10004D230(v29, v30 + *(int *)(v31 + 64), type metadata accessor for ThumbnailView);
  sub_10004D298((uint64_t)v11, type metadata accessor for ThumbnailView);
  sub_1000227A8((uint64_t)v16, &qword_10010FAA0);
  sub_10004D298(v29, type metadata accessor for ThumbnailView);
  return sub_1000227A8(v28, &qword_10010FAA0);
}

uint64_t sub_10004A518@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10001D64C(&qword_10010EC48);
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v36 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - v7;
  uint64_t v9 = type metadata accessor for HeadlineCell(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9 - 8);
  sub_10004C550(&v37);
  uint64_t v33 = v37;
  sub_10004D230(a1, (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for HeadlineCell);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v32 = swift_allocObject();
  sub_10004D2FC((uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v32 + v12, type metadata accessor for HeadlineCell);
  uint64_t v13 = sub_1000CBD20();
  uint64_t v30 = v14;
  uint64_t v31 = v13;
  sub_10004A8B0((uint64_t)v8);
  sub_10004D230(a1, (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for HeadlineCell);
  uint64_t v29 = swift_allocObject();
  sub_10004D2FC((uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v29 + v12, type metadata accessor for HeadlineCell);
  sub_10004D230(a1, (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for HeadlineCell);
  uint64_t v15 = swift_allocObject();
  sub_10004D2FC((uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v12, type metadata accessor for HeadlineCell);
  uint64_t v17 = v34;
  uint64_t v16 = v35;
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
  char v19 = v36;
  uint64_t v28 = v8;
  v18(v36, v8, v35);
  uint64_t v20 = v32;
  *a2 = v33;
  a2[1] = (uint64_t)sub_10004C6BC;
  a2[2] = 0;
  a2[3] = (uint64_t)sub_10004D364;
  uint64_t v21 = v31;
  a2[4] = v20;
  a2[5] = v21;
  a2[6] = v30;
  uint64_t v22 = (int *)sub_10001D64C(&qword_10010FAB8);
  v18((char *)a2 + v22[12], v19, v16);
  uint64_t v23 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)a2 + v22[16]);
  uint64_t v24 = v29;
  *uint64_t v23 = sub_10004D828;
  v23[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v24;
  uint64_t v25 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)a2 + v22[20]);
  *uint64_t v25 = sub_10004D84C;
  v25[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v15;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v26(v28, v16);
  swift_release();
  swift_release();
  v26(v36, v16);
  swift_release();
  return swift_release();
}

uint64_t sub_10004A8B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v46 = a1;
  uint64_t v40 = sub_1000CBFC0();
  uint64_t v42 = *(void *)(v40 - 8);
  uint64_t v2 = __chkstk_darwin(v40);
  char v45 = &v38[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  uint64_t v44 = &v38[-v4];
  uint64_t v5 = (int *)type metadata accessor for SourceView();
  __chkstk_darwin(v5);
  uint64_t v7 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v43 = sub_10001D64C(&qword_10010EC40);
  __chkstk_darwin(v43);
  long long v41 = &v38[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for HeadlineCell(0);
  uint64_t v10 = v1;
  uint64_t v11 = (void **)(v1 + *(int *)(v9 + 36));
  id v12 = sub_1000B6E00();
  uint64_t v13 = *v11;
  if (v12)
  {
    [v13 sourceNameImageScale];
    uint64_t v15 = v14;
    uint64_t v16 = v12;
  }
  else
  {
    uint64_t v17 = v9;
    id v18 = [v13 sourceName];
    if (v18)
    {
      char v19 = v18;
      uint64_t v16 = (void *)sub_1000CC1F0();
      uint64_t v15 = v20;
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v15 = 0xE000000000000000;
    }
    uint64_t v9 = v17;
  }
  BOOL v21 = v12 != 0;
  uint64_t v22 = v10 + *(int *)(v9 + 44);
  uint64_t v23 = *(void *)(v22 + 80);
  uint64_t v24 = *(void *)(v22 + 88);
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)&v7[v5[5]] = swift_getKeyPath();
  sub_10001D64C(&qword_10010E8E0);
  swift_storeEnumTagMultiPayload();
  *(void *)uint64_t v7 = KeyPath;
  v7[8] = 0;
  uint64_t v26 = &v7[v5[6]];
  *(void *)uint64_t v26 = v16;
  *((void *)v26 + 1) = v15;
  BOOL v39 = v21;
  v26[16] = v21;
  uint64_t v27 = &v7[v5[7]];
  *uint64_t v27 = v23;
  v27[1] = v24;
  sub_100036674(v16, v15, v21);
  uint64_t v28 = sub_1000CBB90();
  uint64_t v29 = swift_getKeyPath();
  uint64_t v30 = v41;
  sub_10004D230((uint64_t)v7, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for SourceView);
  uint64_t v31 = (uint64_t *)&v30[*(int *)(v43 + 36)];
  *uint64_t v31 = v29;
  v31[1] = v28;
  sub_10004D298((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SourceView);
  uint64_t v32 = v44;
  sub_100057E1C((uint64_t)v44);
  uint64_t v33 = v42;
  uint64_t v34 = v45;
  uint64_t v35 = v40;
  (*(void (**)(unsigned char *, void, uint64_t))(v42 + 104))(v45, enum case for WidgetFamily.systemSmall(_:), v40);
  sub_10004EE2C(&qword_10010FB28, (void (*)(uint64_t))&type metadata accessor for WidgetFamily);
  sub_1000CC360();
  sub_1000CC360();
  uint64_t v36 = *(void (**)(unsigned char *, uint64_t))(v33 + 8);
  v36(v34, v35);
  v36(v32, v35);
  sub_100036684();
  sub_1000CB9E0();
  sub_100036804(v16, v15, v39);
  return sub_1000227A8((uint64_t)v30, &qword_10010EC40);
}

uint64_t sub_10004ACD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10001D64C(&qword_10010FAC8);
  uint64_t v24 = *(void *)(v2 - 8);
  uint64_t v3 = v24;
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - v7;
  type metadata accessor for HeadlineCell(0);
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v40 = v48;
  int v39 = v49;
  uint64_t v38 = v50;
  int v37 = v51;
  uint64_t v36 = v52;
  uint64_t v35 = v53;
  sub_1000CB320();
  uint64_t v25 = v8;
  sub_10004B174(0, 1, (uint64_t)v8);
  sub_10004B778(&v54);
  uint64_t v34 = v54;
  sub_1000CBD20();
  sub_1000CB3E0();
  uint64_t v33 = v54;
  uint64_t v32 = v56;
  uint64_t v31 = v58;
  uint64_t v30 = v60;
  uint64_t v29 = v62;
  uint64_t v28 = v64;
  uint64_t v27 = v66;
  uint64_t v26 = v67;
  char v47 = 1;
  char v46 = v55;
  char v45 = v57;
  char v44 = v59;
  unsigned __int8 v43 = v61;
  unsigned __int8 v42 = v63;
  unsigned __int8 v41 = v65;
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v10 = v6;
  uint64_t v22 = v6;
  v9(v6, v8, v2);
  char v11 = v47;
  LOBYTE(v6) = v46;
  LOBYTE(v3) = v45;
  LOBYTE(v8) = v44;
  int v20 = v43;
  int v21 = v42;
  int v23 = v41;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v40;
  *(unsigned char *)(a1 + 24) = v39;
  *(void *)(a1 + 32) = v38;
  *(unsigned char *)(a1 + 40) = v37;
  uint64_t v12 = v35;
  *(void *)(a1 + 48) = v36;
  *(void *)(a1 + 56) = v12;
  uint64_t v13 = (int *)sub_10001D64C(&qword_10010FB08);
  uint64_t v14 = v10;
  uint64_t v15 = v2;
  v9((char *)(a1 + v13[12]), v14, v2);
  *(void *)(a1 + v13[16]) = v34;
  uint64_t v16 = a1 + v13[20];
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = v11;
  *(void *)(v16 + 16) = v33;
  *(unsigned char *)(v16 + 24) = (_BYTE)v6;
  *(void *)(v16 + 32) = v32;
  *(unsigned char *)(v16 + 40) = v3;
  *(void *)(v16 + 48) = v31;
  *(unsigned char *)(v16 + 56) = (_BYTE)v8;
  *(void *)(v16 + 64) = v30;
  *(unsigned char *)(v16 + 72) = v20;
  *(void *)(v16 + 80) = v29;
  *(unsigned char *)(v16 + 88) = v21;
  *(void *)(v16 + 96) = v28;
  *(unsigned char *)(v16 + 104) = v23;
  uint64_t v17 = v26;
  *(void *)(v16 + 112) = v27;
  *(void *)(v16 + 120) = v17;
  id v18 = *(void (**)(char *, uint64_t))(v24 + 8);
  swift_retain();
  v18(v25, v15);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v18)(v22, v15);
}

uint64_t sub_10004B174@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v70 = a2;
  uint64_t v69 = a1;
  uint64_t v73 = a3;
  uint64_t v4 = sub_1000CAD20();
  uint64_t v74 = *(void *)(v4 - 8);
  uint64_t v75 = v4;
  __chkstk_darwin(v4);
  size_t v72 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_1000CB3C0();
  uint64_t v67 = *(void *)(v68 - 8);
  uint64_t v6 = __chkstk_darwin(v68);
  uint64_t v66 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v64 - v8;
  uint64_t v10 = type metadata accessor for HeadlineCell(0);
  id v11 = *(id *)(v3 + *(int *)(v10 + 44));
  uint64_t v76 = sub_1000CB8B0();
  sub_10001D64C((uint64_t *)&unk_10010E840);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1000D37D0;
  uint64_t v13 = *(int *)(v10 + 36);
  uint64_t v71 = v3;
  uint64_t v65 = v13;
  uint64_t v14 = *(void **)(v3 + v13);
  id v15 = [v14 identifier];
  uint64_t v16 = sub_1000CC1F0();
  uint64_t v18 = v17;

  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v19 = sub_1000225F0();
  *(void *)(v12 + 64) = v19;
  *(void *)(v12 + 32) = v16;
  *(void *)(v12 + 40) = v18;
  uint64_t v77 = 0;
  uint64_t v78 = 0xE000000000000000;
  id v20 = [v14 title];
  if (v20)
  {
    int v21 = v20;
    uint64_t v22 = sub_1000CC1F0();
    uint64_t v24 = v23;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v24 = (void *)0xE000000000000000;
  }
  v87._countAndFlagsBits = v22;
  v87._object = v24;
  sub_1000CC2B0(v87);
  swift_bridgeObjectRelease();
  uint64_t v25 = v77;
  uint64_t v26 = v78;
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v19;
  *(void *)(v12 + 72) = v25;
  *(void *)(v12 + 80) = v26;
  uint64_t v77 = 0;
  uint64_t v78 = 0xE000000000000000;
  id v27 = [v14 language];
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = sub_1000CC1F0();
    uint64_t v31 = v30;
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v31 = 0;
  }
  uint64_t v85 = v29;
  uint64_t v86 = v31;
  sub_10001D64C(&qword_100111300);
  sub_1000CC820();
  swift_bridgeObjectRelease();
  uint64_t v32 = v77;
  uint64_t v33 = v78;
  *(void *)(v12 + 136) = &type metadata for String;
  *(void *)(v12 + 144) = v19;
  *(void *)(v12 + 112) = v32;
  *(void *)(v12 + 120) = v33;
  sub_100022644();
  uint64_t v34 = (void *)sub_1000CC630();
  sub_1000CC530();
  sub_1000CB230();
  swift_bridgeObjectRelease();

  id v35 = [v14 title];
  if (v35)
  {
    uint64_t v36 = v35;
    sub_1000CC1F0();
  }
  swift_retain();
  uint64_t v37 = sub_1000CB940();
  uint64_t v39 = v38;
  char v41 = v40;
  swift_bridgeObjectRelease();
  swift_release();
  char v42 = v41 & 1;
  sub_1000CBB80();
  uint64_t v43 = sub_1000CB900();
  uint64_t v45 = v44;
  char v47 = v46;
  uint64_t v64 = v48;
  swift_release();
  sub_100036118(v37, v39, v42);
  swift_bridgeObjectRelease();
  unsigned __int8 v49 = v9;
  uint64_t v50 = v71;
  sub_100058110((uint64_t)v9);
  unsigned __int8 v51 = v66;
  sub_1000CB3B0();
  sub_10004EE2C(&qword_10010E9C0, (void (*)(uint64_t))&type metadata accessor for RedactionReasons);
  uint64_t v52 = v68;
  char v53 = sub_1000CC6C0();
  uint64_t v54 = *(void (**)(char *, uint64_t))(v67 + 8);
  v54(v51, v52);
  v54(v49, v52);
  if (v53) {
    uint64_t v55 = 3;
  }
  else {
    uint64_t v55 = v69;
  }
  char v56 = v70 & ~v53;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v77 = v43;
  uint64_t v78 = v45;
  char v79 = v47 & 1;
  uint64_t v80 = v64;
  uint64_t v81 = KeyPath;
  uint64_t v82 = v55;
  char v83 = v56 & 1;
  uint64_t v84 = 0x4059000000000000;
  uint64_t v58 = *(void **)(v50 + v65);
  id v59 = [v58 language];
  if (v59)
  {
    uint64_t v60 = v59;
    sub_1000CC1F0();
  }
  unsigned __int8 v61 = v72;
  sub_1000CAD10();
  id v62 = [v58 language];
  if (v62) {

  }
  sub_10001D64C(&qword_10010FAE0);
  sub_10004D9A0();
  sub_1000CBA90();
  swift_release();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v61, v75);
  sub_100036118(v77, v78, v79);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10004B778@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = (int *)type metadata accessor for HeadlineCell(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(v5 + 36);
  id v9 = [*(id *)(v2 + v8) storyType];
  if (!v9)
  {
    sub_10004D230(v2, (uint64_t)v7, type metadata accessor for HeadlineCell);
LABEL_5:
    unsigned int v13 = [*(id *)&v7[v4[9]] isBundlePaid];
    sub_10004D298((uint64_t)v7, type metadata accessor for HeadlineCell);
    if (!v13) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  uint64_t v10 = v9;
  sub_1000CC1F0();
  uint64_t v12 = v11;

  swift_bridgeObjectRelease();
  sub_10004D230(v2, (uint64_t)v7, type metadata accessor for HeadlineCell);
  if (!v12) {
    goto LABEL_5;
  }
  sub_10004D298((uint64_t)v7, type metadata accessor for HeadlineCell);
LABEL_6:
  uint64_t v14 = (uint64_t *)(v2 + v4[8]);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  *(void *)&long long v43 = v15;
  *((void *)&v43 + 1) = v16;
  sub_10001D64C(&qword_10010FAD8);
  sub_1000CBC50();
  double v17 = v54;
  uint64_t v18 = (uint64_t *)(v2 + v4[7]);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  *(void *)&long long v43 = v19;
  *((void *)&v43 + 1) = v20;
  sub_1000CBC50();
  if (v54 <= v17)
  {
    int v21 = *(void **)(v2 + v8);
    id v22 = [v21 storyType:v54];
    if (v22)
    {
      int v23 = v22;
      uint64_t v24 = sub_1000CC1F0();
      uint64_t v26 = v25;

      id v27 = *(id *)(v2 + v4[11] + 64);
      sub_1000CB8B0();
      uint64_t v28 = sub_1000CB6F0();
      sub_10004BEE4(v24, v26, v2, (uint64_t)&v43);
      swift_bridgeObjectRelease();
      swift_release();
      char v29 = v44;
      uint64_t v31 = *((void *)&v45 + 1);
      uint64_t v30 = v45;
      char v32 = v46;
      uint64_t v33 = v47;
      char v34 = v48;
      uint64_t v35 = v49;
      char v36 = v50;
      long long v37 = v43;
      long long v38 = v51;
      *(void *)&long long v43 = v28;
    }
    else
    {
      if (![v21 isBundlePaid]) {
        goto LABEL_13;
      }
      id v39 = *(id *)(v2 + v4[11] + 64);
      uint64_t v40 = sub_1000CB8B0();
      uint64_t v41 = sub_1000CB6F0();
      sub_10004C210(0x654EAF80E2BFA3EFLL, 0xAB000000002B7377, v40, v2, (uint64_t)&v43);
      swift_release();
      char v29 = v44;
      uint64_t v31 = *((void *)&v45 + 1);
      uint64_t v30 = v45;
      char v32 = v46;
      uint64_t v33 = v47;
      char v34 = v48;
      uint64_t v35 = v49;
      char v36 = v50;
      long long v37 = v43;
      long long v38 = v51;
      *(void *)&long long v43 = v41;
    }
    *((void *)&v43 + 1) = 0;
    char v44 = 1;
    long long v45 = v37;
    char v46 = v29;
    uint64_t v47 = v30;
    uint64_t v48 = v31;
    LOBYTE(v49) = v32;
    uint64_t v50 = v33;
    LOBYTE(v51) = v34;
    *((void *)&v51 + 1) = v35;
    char v52 = v36;
    long long v53 = v38;
    sub_10001D64C(&qword_10010FB10);
    sub_100036A5C(&qword_10010FB18, &qword_10010FB10);
  }
LABEL_13:
  uint64_t result = sub_1000CBC70();
  *a1 = result;
  return result;
}

uint64_t sub_10004BB10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = sub_1000CB700();
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 16) = 0;
  sub_10001D64C(a3);
  return a4(a2, a1);
}

uint64_t sub_10004BB7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for HeadlineCell(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v35 = sub_10001D64C(&qword_10010FAC8);
  uint64_t v7 = *(void *)(v35 - 8);
  uint64_t v8 = __chkstk_darwin(v35);
  char v34 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - v10;
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v33 = v36;
  int v32 = v37;
  uint64_t v31 = v38;
  int v30 = v39;
  uint64_t v28 = v41;
  uint64_t v29 = v40;
  sub_1000CB320();
  sub_10004B174(2, 0, (uint64_t)v11);
  uint64_t v12 = sub_1000CBB50();
  sub_10004D230(a1, (uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for HeadlineCell);
  unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = swift_allocObject();
  sub_10004D2FC((uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, type metadata accessor for HeadlineCell);
  uint64_t v15 = sub_1000CBD20();
  uint64_t v26 = v16;
  uint64_t v27 = v15;
  double v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v19 = v34;
  uint64_t v18 = v35;
  v17(v34, v11, v35);
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = v33;
  *(unsigned char *)(a2 + 24) = v32;
  *(void *)(a2 + 32) = v31;
  *(unsigned char *)(a2 + 40) = v30;
  uint64_t v20 = v28;
  *(void *)(a2 + 48) = v29;
  *(void *)(a2 + 56) = v20;
  uint64_t v21 = sub_10001D64C(&qword_10010FAD0);
  v17((char *)(a2 + *(int *)(v21 + 48)), v19, v18);
  id v22 = (uint64_t *)(a2 + *(int *)(v21 + 64));
  *id v22 = v12;
  v22[1] = (uint64_t)sub_10004C6BC;
  v22[2] = 0;
  v22[3] = (uint64_t)sub_10004D8FC;
  uint64_t v23 = v27;
  v22[4] = v14;
  void v22[5] = v23;
  void v22[6] = v26;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
  swift_retain();
  swift_retain();
  v24(v11, v18);
  swift_release();
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v24)(v19, v18);
}

uint64_t sub_10004BEE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v40 = a3;
  uint64_t v7 = sub_1000CBEF0();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v40 - v12;
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  sub_1000231FC();
  uint64_t v44 = sub_1000CC680();
  uint64_t v45 = v14;
  uint64_t v15 = sub_1000CB9D0();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  uint64_t v20 = sub_1000CB940();
  uint64_t v42 = v21;
  uint64_t v43 = v22;
  int v41 = v23;
  sub_100036118(v15, v17, v19);
  swift_bridgeObjectRelease();
  type metadata accessor for HeadlineCell(0);
  sub_100057BB0((uint64_t)v13);
  sub_1000CBEE0();
  sub_10004EE2C(&qword_10010FB20, (void (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  LOBYTE(v15) = sub_1000CC190();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
  v24(v11, v7);
  v24(v13, v7);
  if (v15) {
    uint64_t v25 = sub_1000CBB90();
  }
  else {
    uint64_t v25 = sub_1000B728C();
  }
  char v26 = v41 & 1;
  uint64_t v44 = v25;
  uint64_t v27 = v42;
  uint64_t v28 = sub_1000CB910();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  char v34 = v33 & 1;
  sub_100036118(v20, v27, v26);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v35 = v44;
  char v36 = v45;
  uint64_t v37 = v46;
  char v38 = v47;
  *(void *)a4 = v28;
  *(void *)(a4 + 8) = v30;
  *(unsigned char *)(a4 + 16) = v34;
  *(void *)(a4 + 24) = v32;
  *(void *)(a4 + 32) = 0;
  *(unsigned char *)(a4 + 40) = 1;
  *(void *)(a4 + 48) = v35;
  *(unsigned char *)(a4 + 56) = v36;
  *(void *)(a4 + 64) = v37;
  *(unsigned char *)(a4 + 72) = v38;
  *(_OWORD *)(a4 + 80) = v48;
  sub_100036108(v28, v30, v34);
  swift_bridgeObjectRetain();
  sub_100036118(v28, v30, v34);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004C210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v41 = a4;
  uint64_t v44 = a3;
  uint64_t v8 = sub_1000CBEF0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v41 - v13;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  sub_1000231FC();
  uint64_t v45 = sub_1000CC690();
  uint64_t v46 = v15;
  uint64_t v16 = sub_1000CB9D0();
  uint64_t v18 = v17;
  LOBYTE(a1) = v19 & 1;
  uint64_t v43 = sub_1000CB940();
  uint64_t v44 = v20;
  uint64_t v22 = v21;
  int v42 = v23;
  sub_100036118(v16, v18, a1);
  swift_bridgeObjectRelease();
  type metadata accessor for HeadlineCell(0);
  sub_100057BB0((uint64_t)v14);
  sub_1000CBEE0();
  sub_10004EE2C(&qword_10010FB20, (void (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  LOBYTE(v16) = sub_1000CC190();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v12, v8);
  v24(v14, v8);
  if (v16)
  {
    uint64_t v25 = sub_1000CBB90();
  }
  else
  {
    id v26 = [self systemPinkColor:v41];
    uint64_t v25 = sub_1000CBBB0();
  }
  char v27 = v42 & 1;
  uint64_t v45 = v25;
  uint64_t v28 = v43;
  uint64_t v29 = sub_1000CB910();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  char v35 = v34 & 1;
  sub_100036118(v28, v22, v27);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v36 = v45;
  char v37 = v46;
  uint64_t v38 = v47;
  char v39 = v48;
  *(void *)a5 = v29;
  *(void *)(a5 + 8) = v31;
  *(unsigned char *)(a5 + 16) = v35;
  *(void *)(a5 + 24) = v33;
  *(void *)(a5 + 32) = 0;
  *(unsigned char *)(a5 + 40) = 1;
  *(void *)(a5 + 48) = v36;
  *(unsigned char *)(a5 + 56) = v37;
  *(void *)(a5 + 64) = v38;
  *(unsigned char *)(a5 + 72) = v39;
  *(_OWORD *)(a5 + 80) = v49;
  sub_100036108(v29, v31, v35);
  swift_bridgeObjectRetain();
  sub_100036118(v29, v31, v35);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004C550@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for HeadlineCell(0);
  unsigned int v4 = [*(id *)(v1 + *(int *)(v3 + 36)) isBundlePaid];
  id v5 = *(id *)(v1 + *(int *)(v3 + 44) + 64);
  uint64_t v6 = sub_1000CB8B0();
  uint64_t v7 = sub_1000CB6F0();
  if (v4) {
    sub_10004C210(0x654EAF80E2BFA3EFLL, 0xAB000000002B7377, v6, v1, (uint64_t)&v18);
  }
  else {
    sub_10004BEE4(65, 0xE100000000000000, v1, (uint64_t)&v18);
  }
  swift_release();
  char v8 = v19;
  long long v9 = v20;
  char v10 = v21;
  uint64_t v11 = v22;
  char v12 = BYTE8(v22);
  uint64_t v13 = v23;
  char v14 = v24;
  long long v15 = v18;
  long long v16 = v25;
  long long v18 = (unint64_t)v7;
  char v19 = 1;
  long long v20 = v15;
  char v21 = v8;
  long long v22 = v9;
  LOBYTE(v23) = v10;
  uint64_t v24 = v11;
  LOBYTE(v25) = v12;
  *((void *)&v25 + 1) = v13;
  char v26 = v14;
  long long v27 = v16;
  sub_10001D64C(&qword_10010FB10);
  sub_100036A5C(&qword_10010FB18, &qword_10010FB10);
  uint64_t result = sub_1000CBC70();
  *a1 = result;
  return result;
}

uint64_t sub_10004C6C0()
{
  return sub_1000CBC60();
}

uint64_t sub_10004C730@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1000CBB40();
  uint64_t result = sub_1000CB320();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t sub_10004C770()
{
  return sub_1000CBC60();
}

uint64_t type metadata accessor for ThumbnailView(uint64_t a1)
{
  return sub_100032D40(a1, qword_10010FB88);
}

void sub_10004C804()
{
  qword_10011ABF0 = 0;
}

double sub_10004C810@<D0>(void *a1@<X8>)
{
  return sub_10004C870(&qword_10010DD58, (double *)&qword_10011ABF0, a1);
}

void sub_10004C840()
{
  qword_10011ABF8 = 0;
}

double sub_10004C84C@<D0>(void *a1@<X8>)
{
  return sub_10004C870(&qword_10010DD60, (double *)&qword_10011ABF8, a1);
}

double sub_10004C870@<D0>(void *a1@<X2>, double *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  double result = *a2;
  *a3 = *(void *)a2;
  return result;
}

void *sub_10004C8B8(double *a1, void *(*a2)(double *__return_ptr))
{
  double v3 = *a1;
  double result = a2(&v6);
  double v5 = v6;
  if (v3 > v6) {
    double v5 = v3;
  }
  *a1 = v5;
  return result;
}

uint64_t sub_10004C90C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10001D64C(&qword_10010FBD8);
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  double v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000CB3D0();
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  long long v9 = (_OWORD *)((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10004CB4C(v28);
  uint64_t v10 = v28[0];
  type metadata accessor for ThumbnailView(0);
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v11 = v28[1];
  char v12 = v29;
  uint64_t v13 = v30;
  int v27 = v31;
  uint64_t v25 = v33;
  uint64_t v26 = v32;
  char v14 = (char *)v9 + *(int *)(v7 + 28);
  uint64_t v15 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v16 = sub_1000CB680();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(v14, v15, v16);
  __asm { FMOV            V0.2D, #8.0 }
  *long long v9 = _Q0;
  sub_10004D230((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v5[*(int *)(v3 + 44)] = 256;
  uint64_t v22 = sub_10001D64C(&qword_10010FBE0);
  sub_100036850((uint64_t)v5, a1 + *(int *)(v22 + 36), &qword_10010FBD8);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v13;
  *(unsigned char *)(a1 + 32) = v27;
  uint64_t v23 = v25;
  *(void *)(a1 + 40) = v26;
  *(void *)(a1 + 48) = v23;
  swift_retain();
  sub_1000227A8((uint64_t)v5, &qword_10010FBD8);
  sub_10004D298((uint64_t)v9, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  return swift_release();
}

uint64_t sub_10004CB4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = (int *)type metadata accessor for ThumbnailView(0);
  if (sub_1000B6C5C())
  {
    long long v9 = sub_1000B7470();

    if (v9 && (*(unsigned char *)(v2 + v4[6] + 24) & 1) == 0)
    {
      uint64_t v10 = sub_1000CBD20();
      uint64_t v12 = v11;
      sub_10004D184(v2, (uint64_t)&v17);
      long long v13 = v17;
      unint64_t v14 = v18;
      char v15 = BYTE8(v18);
      *(void *)&long long v17 = v10;
      *((void *)&v17 + 1) = v12;
      long long v18 = v13;
      unint64_t v19 = v14;
      char v20 = v15;
      goto LABEL_9;
    }
    *(void *)&long long v17 = *(void *)(v2 + v4[7]);
    sub_10004EE90();
    swift_retain();
  }
  else
  {
    if (*(unsigned char *)(v1 + v4[9]) == 1)
    {
      uint64_t v5 = sub_1000CBD20();
      uint64_t v7 = v6;
      sub_10004CCFC((uint64_t *)&v18);
      char v8 = *(unsigned char *)(v1 + v4[8]);
      *(void *)&long long v17 = v5;
      *((void *)&v17 + 1) = v7;
      *((void *)&v18 + 1) = 0xD000000000000017;
      unint64_t v19 = 0x80000001000DB980;
      char v20 = v8;
LABEL_9:
      sub_10001D64C(&qword_10010FBF0);
      sub_100036A5C(&qword_10010FBF8, &qword_10010FBF0);
      goto LABEL_10;
    }
    sub_10004CCFC((uint64_t *)&v17);
  }
LABEL_10:
  uint64_t result = sub_1000CBC70();
  *a1 = result;
  return result;
}

uint64_t sub_10004CCFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_10001D64C(&qword_10010FC00);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000CBBD0();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10001D64C(&qword_10010FC08);
  uint64_t v32 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10001D64C(&qword_10010FC10);
  __chkstk_darwin(v31);
  unint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_10001D64C(&qword_10010FC18);
  uint64_t v15 = __chkstk_darwin(v35);
  uint64_t v34 = (uint64_t)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  long long v18 = (char *)&v28 - v17;
  uint64_t v30 = type metadata accessor for ThumbnailView(0);
  unint64_t v19 = sub_1000B7470();
  if (v19)
  {
    id v29 = v19;
    sub_1000CBBC0();
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Image.ResizingMode.stretch(_:), v6);
    sub_1000CBC30();
    uint64_t v28 = v1;
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_1000CBF10();
    uint64_t v20 = sub_1000CBF20();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v5, 0, 1, v20);
    sub_1000CBC20();
    swift_release();
    sub_1000227A8((uint64_t)v5, &qword_10010FC00);
    uint64_t v22 = v32;
    uint64_t v21 = v33;
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v14, v12, v33);
    uint64_t v23 = &v14[*(int *)(v31 + 36)];
    *(void *)uint64_t v23 = 0;
    *((_WORD *)v23 + 4) = 257;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v21);
    sub_1000CBD20();
    sub_1000CB310();
    sub_100036850((uint64_t)v14, (uint64_t)v18, &qword_10010FC10);
    uint64_t v24 = &v18[*(int *)(v35 + 36)];
    long long v25 = v37;
    *(_OWORD *)uint64_t v24 = v36;
    *((_OWORD *)v24 + 1) = v25;
    *((_OWORD *)v24 + 2) = v38;
    sub_1000227A8((uint64_t)v14, &qword_10010FC10);
    sub_100036850((uint64_t)v18, v34, &qword_10010FC18);
    sub_10004EEE4();
    uint64_t v26 = sub_1000CBC70();

    uint64_t result = sub_1000227A8((uint64_t)v18, &qword_10010FC18);
  }
  else
  {
    uint64_t result = sub_1000CBC70();
    uint64_t v26 = result;
  }
  *a1 = v26;
  return result;
}

void sub_10004D184(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10004CCFC(&v11);
  uint64_t v4 = v11;
  uint64_t v5 = type metadata accessor for ThumbnailView(0);
  id v6 = [*(id *)(a1 + *(int *)(v5 + 20)) identifier];
  uint64_t v7 = sub_1000CC1F0();
  uint64_t v9 = v8;

  char v10 = *(unsigned char *)(a1 + *(int *)(v5 + 32));
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 24) = v10;
}

uint64_t sub_10004D230(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004D298(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10004D2FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004D364(uint64_t a1)
{
  return sub_10004D914(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10004C6C0);
}

uint64_t sub_10004D380()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for HeadlineCell(0);
  uint64_t v26 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v24 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v25 = (v26 + 16) & ~v26;
  uint64_t v3 = v0 + v25;
  sub_10001D64C(&qword_10010E9F0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_1000CB3C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v3 + v2[5];
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1000CBEF0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = v3 + v2[6];
  sub_10001D64C(&qword_10010F988);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_1000CBFC0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  uint64_t v9 = v3 + v2[9];
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for Item.Headline(0);
  uint64_t v11 = v9 + *(int *)(v10 + 24);
  uint64_t v12 = sub_1000CABE0();
  uint64_t v13 = *(void *)(v12 - 8);
  int v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (!v27(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  unint64_t v14 = (id *)(v9 + *(int *)(v10 + 28));
  if (v14[1])
  {
  }
  uint64_t v15 = (id *)(v3 + v2[10]);

  uint64_t v16 = type metadata accessor for TodayContent();
  uint64_t v17 = (char *)v15 + *(int *)(v16 + 20);
  long long v18 = (int *)type metadata accessor for Banner();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v18 - 1) + 48))(v17, 1, v18))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v19 = &v17[v18[7]];
    if (!v27((uint64_t)v19, 1, v12)) {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    }
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void **)&v17[v18[9]];
    if (v20 != (void *)1) {

    }
    sub_10001DE30(*(void **)&v17[v18[10]], *(void **)&v17[v18[10] + 8]);
    uint64_t v1 = v0;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v21 = (char *)v15 + *(int *)(v16 + 36);
  if (!v27((uint64_t)v21, 1, v12)) {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = (id *)(v3 + v2[11]);

  return _swift_deallocObject(v1, v25 + v24, v26 | 7);
}

uint64_t sub_10004D828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004D86C(a1, &qword_10010FB00, (uint64_t (*)(uint64_t, uint64_t))sub_10004ACD4, a2);
}

uint64_t sub_10004D84C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004D86C(a1, &qword_10010FAC0, (uint64_t (*)(uint64_t, uint64_t))sub_10004BB7C, a2);
}

uint64_t sub_10004D86C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(type metadata accessor for HeadlineCell(0) - 8);
  return sub_10004BB10(a1, v4 + ((*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), a2, a3, a4);
}

uint64_t sub_10004D8FC(uint64_t a1)
{
  return sub_10004D914(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10004C770);
}

uint64_t sub_10004D914(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for HeadlineCell(0) - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

unint64_t sub_10004D9A0()
{
  unint64_t result = qword_10010FAE8;
  if (!qword_10010FAE8)
  {
    sub_10001D690(&qword_10010FAE0);
    sub_1000369BC();
    sub_100036A5C(&qword_10010FAF0, &qword_10010FAF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FAE8);
  }
  return result;
}

ValueMetadata *type metadata accessor for StoryTypeAvailableHeightPreferenceKey()
{
  return &type metadata for StoryTypeAvailableHeightPreferenceKey;
}

ValueMetadata *type metadata accessor for StoryTypeRequiredHeightPreferenceKey()
{
  return &type metadata for StoryTypeRequiredHeightPreferenceKey;
}

void *sub_10004DA6C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000CBEF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    long long v36 = a3;
    uint64_t v9 = a3[5];
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = *(void *)((char *)a2 + v9 + 8);
    *uint64_t v10 = *(void *)((char *)a2 + v9);
    v10[1] = v12;
    uint64_t v13 = type metadata accessor for Item.Headline(0);
    uint64_t v14 = *(int *)(v13 + 24);
    __dst = (char *)v10 + v14;
    uint64_t v35 = v13;
    uint64_t v33 = v11;
    uint64_t v15 = &v11[v14];
    uint64_t v16 = sub_1000CABE0();
    uint64_t v17 = *(void *)(v16 - 8);
    long long v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v18(v15, 1, v16))
    {
      uint64_t v19 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v15, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    uint64_t v20 = *(int *)(v35 + 28);
    uint64_t v21 = (void *)((char *)v10 + v20);
    uint64_t v22 = &v33[v20];
    uint64_t v23 = (void *)*((void *)v22 + 1);
    if (v23)
    {
      uint64_t v24 = *(void **)v22;
      void *v21 = v24;
      v21[1] = v23;
      id v25 = v24;
      id v26 = v23;
    }
    else
    {
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    }
    uint64_t v27 = v36[6];
    uint64_t v28 = v36[7];
    id v29 = (_OWORD *)((char *)a1 + v27);
    uint64_t v30 = (_OWORD *)((char *)a2 + v27);
    *id v29 = *v30;
    *(_OWORD *)((char *)v29 + 9) = *(_OWORD *)((char *)v30 + 9);
    *(void *)((char *)a1 + v28) = *(void *)((char *)a2 + v28);
    uint64_t v31 = v36[9];
    *((unsigned char *)a1 + v36[8]) = *((unsigned char *)a2 + v36[8]);
    *((unsigned char *)a1 + v31) = *((unsigned char *)a2 + v31);
  }
  swift_retain();
  return a1;
}

uint64_t sub_10004DD20(uint64_t a1, uint64_t a2)
{
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_1000CBEF0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for Item.Headline(0);
  uint64_t v7 = v5 + *(int *)(v6 + 24);
  uint64_t v8 = sub_1000CABE0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v10 = (id *)(v5 + *(int *)(v6 + 28));
  if (v10[1])
  {
  }

  return swift_release();
}

void *sub_10004DE98(void *a1, void *a2, int *a3)
{
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1000CBEF0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = a3;
  uint64_t v34 = a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)((char *)a2 + v7 + 8);
  *uint64_t v8 = *(void *)((char *)a2 + v7);
  v8[1] = v10;
  uint64_t v11 = type metadata accessor for Item.Headline(0);
  uint64_t v12 = *(int *)(v11 + 24);
  __dst = (char *)v8 + v12;
  uint64_t v32 = v11;
  uint64_t v13 = &v9[v12];
  uint64_t v14 = sub_1000CABE0();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v16(v13, 1, v14))
  {
    uint64_t v17 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
  }
  uint64_t v18 = *(int *)(v32 + 28);
  uint64_t v19 = (void *)((char *)v8 + v18);
  uint64_t v20 = &v9[v18];
  uint64_t v21 = (void *)*((void *)v20 + 1);
  if (v21)
  {
    uint64_t v22 = *(void **)v20;
    *uint64_t v19 = v22;
    v19[1] = v21;
    id v23 = v22;
    id v24 = v21;
  }
  else
  {
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  }
  uint64_t v25 = v33[6];
  uint64_t v26 = v33[7];
  uint64_t v27 = (_OWORD *)((char *)a1 + v25);
  uint64_t v28 = (_OWORD *)((char *)v34 + v25);
  *uint64_t v27 = *v28;
  *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)((char *)v28 + 9);
  *(void *)((char *)a1 + v26) = *(void *)((char *)v34 + v26);
  uint64_t v29 = v33[9];
  *((unsigned char *)a1 + v33[8]) = *((unsigned char *)v34 + v33[8]);
  *((unsigned char *)a1 + v29) = *((unsigned char *)v34 + v29);
  swift_retain();
  return a1;
}

void *sub_10004E100(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_1000227A8((uint64_t)a1, &qword_10010E8E0);
    sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1000CBEF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v40 = a3;
  uint64_t v41 = a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *((void *)v8 + 1) = *((void *)v9 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = type metadata accessor for Item.Headline(0);
  uint64_t v10 = *(int *)(v39 + 24);
  uint64_t v11 = &v8[v10];
  uint64_t v12 = &v9[v10];
  uint64_t v13 = sub_1000CABE0();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_11:
    uint64_t v18 = sub_10001D64C(&qword_10010F340);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_12:
  uint64_t v19 = *(int *)(v39 + 28);
  uint64_t v20 = &v8[v19];
  uint64_t v21 = &v9[v19];
  uint64_t v22 = *(void *)&v8[v19 + 8];
  uint64_t v23 = *(void *)&v9[v19 + 8];
  if (!v22)
  {
    if (v23)
    {
      uint64_t v30 = *(void **)v21;
      *(void *)uint64_t v20 = *(void *)v21;
      uint64_t v31 = (void *)*((void *)v21 + 1);
      *((void *)v20 + 1) = v31;
      id v32 = v30;
      id v33 = v31;
      goto LABEL_19;
    }
LABEL_18:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    goto LABEL_19;
  }
  if (!v23)
  {
    sub_100034B4C((uint64_t)v20);
    goto LABEL_18;
  }
  id v24 = *(void **)v20;
  uint64_t v25 = *(void **)v21;
  *(void *)uint64_t v20 = *(void *)v21;
  id v26 = v25;

  uint64_t v27 = (void *)*((void *)v21 + 1);
  uint64_t v28 = (void *)*((void *)v20 + 1);
  *((void *)v20 + 1) = v27;
  id v29 = v27;

LABEL_19:
  uint64_t v34 = v40[6];
  uint64_t v35 = (char *)a1 + v34;
  long long v36 = (char *)v41 + v34;
  *(void *)uint64_t v35 = *(void *)v36;
  long long v37 = *(_OWORD *)(v36 + 8);
  unsigned char v35[24] = v36[24];
  *(_OWORD *)(v35 + 8) = v37;
  *(void *)((char *)a1 + v40[7]) = *(void *)((char *)v41 + v40[7]);
  swift_retain();
  swift_release();
  *((unsigned char *)a1 + v40[8]) = *((unsigned char *)v41 + v40[8]);
  *((unsigned char *)a1 + v40[9]) = *((unsigned char *)v41 + v40[9]);
  return a1;
}

char *sub_10004E450(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_1000CBEF0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(void *)&a2[v8 + 8];
  *(void *)uint64_t v9 = *(void *)&a2[v8];
  *((void *)v9 + 1) = v11;
  uint64_t v12 = type metadata accessor for Item.Headline(0);
  uint64_t v13 = *(int *)(v12 + 24);
  uint64_t v14 = &v9[v13];
  uint64_t v15 = &v10[v13];
  uint64_t v16 = sub_1000CABE0();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_10001D64C(&qword_10010F340);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  *(_OWORD *)&v9[*(int *)(v12 + 28)] = *(_OWORD *)&v10[*(int *)(v12 + 28)];
  uint64_t v19 = a3[6];
  uint64_t v20 = a3[7];
  uint64_t v21 = &a1[v19];
  uint64_t v22 = &a2[v19];
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 9) = *(_OWORD *)(v22 + 9);
  *(void *)&a1[v20] = *(void *)&a2[v20];
  uint64_t v23 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v23] = a2[v23];
  return a1;
}

char *sub_10004E66C(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_1000227A8((uint64_t)a1, &qword_10010E8E0);
    uint64_t v6 = sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000CBEF0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  id v33 = a3;
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v31 = a2;
  uint64_t v10 = &a2[v8];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  swift_unknownObjectRelease();
  *((void *)v9 + 1) = *((void *)v10 + 1);
  swift_bridgeObjectRelease();
  uint64_t v32 = type metadata accessor for Item.Headline(0);
  uint64_t v11 = *(int *)(v32 + 24);
  uint64_t v12 = &v9[v11];
  uint64_t v13 = &v10[v11];
  uint64_t v14 = sub_1000CABE0();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_10:
    uint64_t v19 = sub_10001D64C(&qword_10010F340);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_11:
  uint64_t v20 = *(int *)(v32 + 28);
  uint64_t v21 = (uint64_t)&v9[v20];
  uint64_t v22 = &v10[v20];
  if (!*(void *)&v9[v20 + 8])
  {
LABEL_15:
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    goto LABEL_16;
  }
  if (!*((void *)v22 + 1))
  {
    sub_100034B4C(v21);
    goto LABEL_15;
  }
  uint64_t v23 = *(void **)v21;
  *(void *)uint64_t v21 = *(void *)v22;

  id v24 = *(void **)(v21 + 8);
  *(void *)(v21 + 8) = *((void *)v22 + 1);

LABEL_16:
  uint64_t v25 = v33[6];
  uint64_t v26 = v33[7];
  uint64_t v27 = &a1[v25];
  uint64_t v28 = &v31[v25];
  *(void *)uint64_t v27 = *(void *)v28;
  *(_OWORD *)(v27 + 8) = *(_OWORD *)(v28 + 8);
  v27[24] = v28[24];
  *(void *)&a1[v26] = *(void *)&v31[v26];
  swift_release();
  uint64_t v29 = v33[9];
  a1[v33[8]] = v31[v33[8]];
  a1[v29] = v31[v29];
  return a1;
}

uint64_t sub_10004E988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004E99C);
}

uint64_t sub_10004E99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10001D64C(&qword_10010E8E8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Item.Headline(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_10004EAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004EAC8);
}

uint64_t sub_10004EAC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_10001D64C(&qword_10010E8E8);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for Item.Headline(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10004EBDC()
{
  sub_100049874(319, (unint64_t *)&qword_10010E958, (void (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Item.Headline(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

__n128 initializeWithCopy for ThumbnailView.LayoutOptions(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ThumbnailView.LayoutOptions(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ThumbnailView.LayoutOptions(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ThumbnailView.LayoutOptions()
{
  return &type metadata for ThumbnailView.LayoutOptions;
}

unint64_t sub_10004ED5C()
{
  unint64_t result = qword_10010FBD0;
  if (!qword_10010FBD0)
  {
    sub_10001D690(&qword_10010FA68);
    sub_100036A5C(&qword_10010FA78, &qword_10010FA60);
    sub_10004EE2C((unint64_t *)&qword_10010EA98, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FBD0);
  }
  return result;
}

uint64_t sub_10004EE2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004EE74()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10004EE90()
{
  unint64_t result = qword_10010FBE8;
  if (!qword_10010FBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FBE8);
  }
  return result;
}

unint64_t sub_10004EEE4()
{
  unint64_t result = qword_10010FC20;
  if (!qword_10010FC20)
  {
    sub_10001D690(&qword_10010FC18);
    sub_10004EF60();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FC20);
  }
  return result;
}

unint64_t sub_10004EF60()
{
  unint64_t result = qword_10010FC28;
  if (!qword_10010FC28)
  {
    sub_10001D690(&qword_10010FC10);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FC28);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MediaIndicatorDisplayStyle(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MediaIndicatorDisplayStyle(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

uint64_t sub_10004F044(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10004F060(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 1;
  }
  else
  {
    *(unsigned char *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaIndicatorDisplayStyle()
{
  return &type metadata for MediaIndicatorDisplayStyle;
}

unint64_t sub_10004F094()
{
  unint64_t result = qword_10010FC30;
  if (!qword_10010FC30)
  {
    sub_10001D690(&qword_10010FBE0);
    sub_10004F134();
    sub_100036A5C((unint64_t *)&qword_10010FC48, &qword_10010FBD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FC30);
  }
  return result;
}

unint64_t sub_10004F134()
{
  unint64_t result = qword_10010FC38;
  if (!qword_10010FC38)
  {
    sub_10001D690(&qword_10010FC40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FC38);
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaIndicatorDisplayStyle.BadgeLayoutOptions()
{
  return &type metadata for MediaIndicatorDisplayStyle.BadgeLayoutOptions;
}

unint64_t sub_10004F1BC()
{
  if (*v0) {
    return 0xD000000000000017;
  }
  else {
    return 0xD000000000000013;
  }
}

uint64_t sub_10004F1FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10004F6FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10004F224(uint64_t a1)
{
  unint64_t v2 = sub_10004FC04();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004F260(uint64_t a1)
{
  unint64_t v2 = sub_10004FC04();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004F29C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v29 = a3;
  uint64_t v6 = sub_10001D64C(&qword_10010FD00);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100020110(a1, a1[3]);
  sub_10004FC04();
  sub_1000CCB30();
  if (a2)
  {
    uint64_t v10 = self;
    id v31 = 0;
    id v11 = a2;
    id v12 = [v10 archivedDataWithRootObject:v11 requiringSecureCoding:1 error:&v31];
    id v13 = v31;
    if (!v12)
    {
      uint64_t v19 = v13;
      sub_1000CAB00();

      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    uint64_t v14 = (void *)sub_1000CAC10();
    unint64_t v16 = v15;

    id v31 = v14;
    unint64_t v32 = v16;
    char v30 = 0;
    sub_10004172C();
    sub_1000CC9F0();
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

      uint64_t v17 = (uint64_t)v14;
      unint64_t v18 = v16;
      return sub_100022684(v17, v18);
    }

    sub_100022684((uint64_t)v14, v16);
  }
  uint64_t v20 = self;
  id v31 = 0;
  id v21 = [v20 archivedDataWithRootObject:v29 requiringSecureCoding:1 error:&v31];
  id v22 = v31;
  if (v21)
  {
    uint64_t v23 = (void *)sub_1000CAC10();
    unint64_t v25 = v24;

    id v31 = v23;
    unint64_t v32 = v25;
    char v30 = 1;
    sub_10004172C();
    sub_1000CC9F0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v17 = (uint64_t)v23;
    unint64_t v18 = v25;
    return sub_100022684(v17, v18);
  }
  uint64_t v27 = v22;
  sub_1000CAB00();

  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void *sub_10004F5AC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10004F7E8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10004F5D8(void *a1)
{
  return sub_10004F29C(a1, *(void **)v1, *(void *)(v1 + 8));
}

uint64_t type metadata accessor for ImageJoeColorAnalyzer()
{
  return self;
}

uint64_t sub_10004F6FC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x80000001000DB9D0 || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001000DB9F0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = sub_1000CCA30();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_10004F7E8(void *a1)
{
  uint64_t v3 = sub_10001D64C(&qword_10010FCE8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)a1[3];
  sub_100020110(a1, (uint64_t)v7);
  sub_10004FC04();
  sub_1000CCB10();
  if (v1) {
    goto LABEL_3;
  }
  char v20 = 0;
  sub_100041420();
  sub_1000CC930();
  uint64_t v9 = v18;
  unint64_t v10 = v19;
  uint64_t v17 = v18;
  if (v19 >> 60 == 15)
  {
    uint64_t v7 = 0;
    goto LABEL_7;
  }
  unint64_t v16 = sub_100036814(0, (unint64_t *)&unk_1001112C0);
  sub_100036814(0, (unint64_t *)&qword_100111C20);
  sub_10004FCAC(v9, v10);
  uint64_t v7 = (void *)sub_1000CC540();
  if (!v7)
  {
    sub_10004FC58();
    swift_allocError();
    *id v13 = 0;
    swift_willThrow();
    uint64_t v14 = v17;
    sub_100041718(v17, v10);
    sub_100041718(v14, v10);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
LABEL_3:
    sub_1000201A8((uint64_t)a1);
    return v7;
  }
  sub_100041718(v17, v10);
LABEL_7:
  char v20 = 1;
  sub_1000CC980();
  unint64_t v16 = v10;
  uint64_t v11 = v18;
  unint64_t v12 = v19;
  sub_100036814(0, (unint64_t *)&unk_1001112C0);
  sub_100036814(0, (unint64_t *)&qword_100111C20);
  if (sub_1000CC540())
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100041718(v17, v16);
    sub_100022684(v11, v12);
    sub_1000201A8((uint64_t)a1);
  }
  else
  {
    sub_10004FC58();
    swift_allocError();
    *unint64_t v15 = 0;
    swift_willThrow();
    sub_100022684(v11, v12);
    sub_100041718(v17, v16);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_1000201A8((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_10004FC04()
{
  unint64_t result = qword_10010FCF0;
  if (!qword_10010FCF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FCF0);
  }
  return result;
}

unint64_t sub_10004FC58()
{
  unint64_t result = qword_10010FCF8;
  if (!qword_10010FCF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FCF8);
  }
  return result;
}

uint64_t sub_10004FCAC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

ValueMetadata *type metadata accessor for ImageColorAnalysisResult.Errors()
{
  return &type metadata for ImageColorAnalysisResult.Errors;
}

unsigned char *_s7NewsTag24ImageColorAnalysisResultV6ErrorsOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004FDE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageColorAnalysisResult.CodingKeys()
{
  return &type metadata for ImageColorAnalysisResult.CodingKeys;
}

void *initializeBufferWithCopyOfBuffer for ImageColorAnalysisResult(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for ImageColorAnalysisResult(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for ImageColorAnalysisResult(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for ImageColorAnalysisResult(uint64_t a1, _OWORD *a2)
{
  unsigned int v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for ImageColorAnalysisResult(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageColorAnalysisResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageColorAnalysisResult()
{
  return &type metadata for ImageColorAnalysisResult;
}

unint64_t sub_10004FFC0()
{
  unint64_t result = qword_10010FD08;
  if (!qword_10010FD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FD08);
  }
  return result;
}

unint64_t sub_100050018()
{
  unint64_t result = qword_10010FD10;
  if (!qword_10010FD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FD10);
  }
  return result;
}

unint64_t sub_100050070()
{
  unint64_t result = qword_10010FD18;
  if (!qword_10010FD18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FD18);
  }
  return result;
}

unint64_t sub_1000500C8()
{
  unint64_t result = qword_10010FD20[0];
  if (!qword_10010FD20[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10010FD20);
  }
  return result;
}

uint64_t sub_100050128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_100050130()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_10005016C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_1000501B8(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100050220(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

uint64_t sub_100050270(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000502B8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for NewsWidgetConfiguration()
{
  return sub_1000506F4();
}

uint64_t sub_100050310()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100050354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_1000CAE80();
  __chkstk_darwin(v12 - 8);
  type metadata accessor for NewsTimelineProvider();
  sub_1000CAFE0();
  swift_bridgeObjectRetain();
  sub_1000CAE70();
  id v13 = (void *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a6;
  v13[4] = a3;
  v13[5] = a4;
  v13[6] = a1;
  v13[7] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v14 = sub_1000CAFD0();
  uint64_t WitnessTable = swift_getWitnessTable();
  TodayIntentResponseCode.rawValue.getter(v14, WitnessTable);
  type metadata accessor for ContentView();
  type metadata accessor for LazyIntentTimelineProvider();
  sub_10005069C();
  swift_getWitnessTable();
  return sub_1000CBFE0();
}

uint64_t sub_100050544@<X0>(void (*a1)(void *__return_ptr)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a1(v11);
  sub_100020110(v11, v11[3]);
  sub_10001D64C((uint64_t *)&unk_100112560);
  uint64_t result = sub_1000CAEC0();
  if (v10)
  {
    type metadata accessor for NewsTimelineProvider();
    sub_10003AA3C((uint64_t)v11, (uint64_t)v8);
    swift_bridgeObjectRetain();
    *a4 = sub_1000AD934(a2, a3, (uint64_t)v9, v8);
    return sub_1000201A8((uint64_t)v11);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10005062C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000202A4(a1, a2);
}

uint64_t sub_100050634(uint64_t a1)
{
  return sub_100050354(*v1, v1[1], v1[2], v1[3], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_10005064C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10005068C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100050544(*(void (**)(void *__return_ptr))(v1 + 32), *(void *)(v1 + 48), *(void *)(v1 + 56), a1);
}

unint64_t sub_10005069C()
{
  unint64_t result = qword_10010FDA8;
  if (!qword_10010FDA8)
  {
    type metadata accessor for ContentView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FDA8);
  }
  return result;
}

uint64_t sub_1000506F4()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100050724()
{
  type metadata accessor for ContentView();
  sub_10005069C();
  sub_1000CBFF0();

  return swift_getWitnessTable();
}

NSString *sub_100050790()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000CB6D0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for ContentSizeCategory.extraSmall(_:))
  {
    uint64_t v7 = &UIContentSizeCategoryExtraSmall;
  }
  else if (v6 == enum case for ContentSizeCategory.small(_:))
  {
    uint64_t v7 = &UIContentSizeCategorySmall;
  }
  else if (v6 == enum case for ContentSizeCategory.medium(_:))
  {
    uint64_t v7 = &UIContentSizeCategoryMedium;
  }
  else if (v6 == enum case for ContentSizeCategory.large(_:))
  {
    uint64_t v7 = &UIContentSizeCategoryLarge;
  }
  else if (v6 == enum case for ContentSizeCategory.extraLarge(_:))
  {
    uint64_t v7 = &UIContentSizeCategoryExtraLarge;
  }
  else if (v6 == enum case for ContentSizeCategory.extraExtraLarge(_:))
  {
    uint64_t v7 = &UIContentSizeCategoryExtraExtraLarge;
  }
  else if (v6 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    uint64_t v7 = &UIContentSizeCategoryExtraExtraExtraLarge;
  }
  else if (v6 == enum case for ContentSizeCategory.accessibilityMedium(_:))
  {
    uint64_t v7 = &UIContentSizeCategoryAccessibilityMedium;
  }
  else if (v6 == enum case for ContentSizeCategory.accessibilityLarge(_:))
  {
    uint64_t v7 = &UIContentSizeCategoryAccessibilityLarge;
  }
  else if (v6 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
  {
    uint64_t v7 = &UIContentSizeCategoryAccessibilityExtraLarge;
  }
  else if (v6 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
  {
    uint64_t v7 = &UIContentSizeCategoryAccessibilityExtraExtraLarge;
  }
  else
  {
    if (v6 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v11 = UIContentSizeCategoryUnspecified;
      v10(v5, v2);
      return v11;
    }
    uint64_t v7 = &UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
  }
  UIContentSizeCategory v8 = *v7;

  return v8;
}

uint64_t sub_100050A50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v45 = a1;
  uint64_t v46 = a3;
  uint64_t v4 = sub_1000CB6D0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v47 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v9 = (char *)&v30 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v43 = v3;
  char v48 = v10;
  v10((char *)&v30 - v8, v3, v4);
  uint64_t v35 = v5;
  uint64_t v44 = *(uint64_t (**)(char *, uint64_t))(v5 + 88);
  int v11 = v44(v9, v4);
  int v12 = v11;
  int v13 = enum case for ContentSizeCategory.extraSmall(_:);
  int v41 = enum case for ContentSizeCategory.small(_:);
  BOOL v15 = v11 == enum case for ContentSizeCategory.extraSmall(_:) || v11 == enum case for ContentSizeCategory.small(_:);
  BOOL v39 = v15;
  int v40 = enum case for ContentSizeCategory.medium(_:);
  if (v11 == enum case for ContentSizeCategory.medium(_:)) {
    BOOL v15 = 1;
  }
  int v16 = 1;
  BOOL v37 = v15;
  int v38 = enum case for ContentSizeCategory.large(_:);
  if (v15)
  {
    int v17 = 1;
    int v18 = 1;
    int v19 = 1;
    int v20 = 1;
    char v21 = 1;
    char v22 = 1;
    char v23 = 1;
  }
  else
  {
    int v17 = 1;
    int v18 = 1;
    int v19 = 1;
    int v20 = 1;
    char v21 = 1;
    char v22 = 1;
    char v23 = 1;
    if (v11 == enum case for ContentSizeCategory.large(_:)) {
      goto LABEL_28;
    }
    if (v11 == enum case for ContentSizeCategory.extraLarge(_:)) {
      goto LABEL_26;
    }
    if (v11 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
LABEL_25:
      char v22 = 0;
LABEL_26:
      char v23 = 0;
      goto LABEL_28;
    }
    if (v11 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
LABEL_24:
      char v21 = 0;
      goto LABEL_25;
    }
    if (v11 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
LABEL_23:
      int v20 = 0;
      goto LABEL_24;
    }
    if (v11 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
LABEL_22:
      int v19 = 0;
      goto LABEL_23;
    }
    if (v11 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
LABEL_21:
      int v18 = 0;
      goto LABEL_22;
    }
    if (v11 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
LABEL_20:
      int v17 = 0;
      goto LABEL_21;
    }
    if (v11 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      int v16 = 0;
      goto LABEL_20;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v4);
    int v16 = 1;
    int v17 = 1;
    int v18 = 1;
    int v19 = 1;
    int v20 = 1;
  }
LABEL_28:
  int v36 = v20;
  int v33 = v18;
  int v34 = v19;
  int v31 = v16;
  int v32 = v17;
  unint64_t v24 = v47;
  uint64_t v25 = v45;
  v48(v47, v45, v4);
  int v26 = v44(v24, v4);
  if (v26 != v13)
  {
    if (v26 == v41)
    {
      if (v12 == v13) {
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v48)(v46, v25, v4);
      }
    }
    else if (v26 == v40)
    {
      if (v39) {
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v48)(v46, v25, v4);
      }
    }
    else if (v26 == v38)
    {
      if (v37) {
        return ((uint64_t (*)(void, void, void))v48)(v46, v25, v4);
      }
    }
    else if (v26 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      if (v23) {
        return ((uint64_t (*)(void, void, void))v48)(v46, v25, v4);
      }
    }
    else if (v26 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      if (v22) {
        return ((uint64_t (*)(void, void, void))v48)(v46, v25, v4);
      }
    }
    else if (v26 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      if (v21) {
        return ((uint64_t (*)(void, void, void))v48)(v46, v25, v4);
      }
    }
    else if (v26 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      if (v36) {
        return ((uint64_t (*)(void, void, void))v48)(v46, v25, v4);
      }
    }
    else if (v26 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      if (v34) {
        return ((uint64_t (*)(void, void, void))v48)(v46, v25, v4);
      }
    }
    else if (v26 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      if (v33) {
        return ((uint64_t (*)(void, void, void))v48)(v46, v25, v4);
      }
    }
    else if (v26 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      if (v32) {
        return ((uint64_t (*)(void, void, void))v48)(v46, v25, v4);
      }
    }
    else if (v26 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      if (v31) {
        return ((uint64_t (*)(void, void, void))v48)(v46, v25, v4);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v47, v4);
      if (v37) {
        return ((uint64_t (*)(void, void, void))v48)(v46, v25, v4);
      }
    }
  }
  uint64_t v28 = v42;
  uint64_t v27 = v43;
  if (sub_100050EF4(v43, v42)) {
    uint64_t v25 = v28;
  }
  else {
    uint64_t v25 = v27;
  }
  return ((uint64_t (*)(void, void, void))v48)(v46, v25, v4);
}

BOOL sub_100050EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v3 = sub_1000CB6D0();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)&v18 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)&v18 - v8, a2, v3);
  int v11 = *(uint64_t (**)(char *, uint64_t))(v4 + 88);
  int v12 = v11(v9, v3);
  unint64_t v13 = 0;
  int v14 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v12 != enum case for ContentSizeCategory.extraSmall(_:))
  {
    if (v12 == enum case for ContentSizeCategory.small(_:))
    {
      unint64_t v13 = 1;
      goto LABEL_24;
    }
    if (v12 == enum case for ContentSizeCategory.medium(_:))
    {
      unint64_t v13 = 2;
      goto LABEL_24;
    }
    if (v12 == enum case for ContentSizeCategory.large(_:)) {
      goto LABEL_7;
    }
    if (v12 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      unint64_t v13 = 4;
    }
    else if (v12 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      unint64_t v13 = 5;
    }
    else if (v12 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      unint64_t v13 = 6;
    }
    else if (v12 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      unint64_t v13 = 7;
    }
    else if (v12 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      unint64_t v13 = 8;
    }
    else if (v12 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      unint64_t v13 = 9;
    }
    else if (v12 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      unint64_t v13 = 10;
    }
    else
    {
      if (v12 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
LABEL_7:
        unint64_t v13 = 3;
        goto LABEL_24;
      }
      unint64_t v13 = 11;
    }
  }
LABEL_24:
  v10(v7, v19, v3);
  int v15 = v11(v7, v3);
  if (v15 == v14)
  {
    unint64_t v16 = 0;
  }
  else if (v15 == enum case for ContentSizeCategory.small(_:))
  {
    unint64_t v16 = 1;
  }
  else if (v15 == enum case for ContentSizeCategory.medium(_:))
  {
    unint64_t v16 = 2;
  }
  else
  {
    if (v15 != enum case for ContentSizeCategory.large(_:))
    {
      if (v15 == enum case for ContentSizeCategory.extraLarge(_:))
      {
        unint64_t v16 = 4;
        return v13 < v16;
      }
      if (v15 == enum case for ContentSizeCategory.extraExtraLarge(_:))
      {
        unint64_t v16 = 5;
        return v13 < v16;
      }
      if (v15 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        unint64_t v16 = 6;
        return v13 < v16;
      }
      if (v15 == enum case for ContentSizeCategory.accessibilityMedium(_:))
      {
        unint64_t v16 = 7;
        return v13 < v16;
      }
      if (v15 == enum case for ContentSizeCategory.accessibilityLarge(_:))
      {
        unint64_t v16 = 8;
        return v13 < v16;
      }
      if (v15 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
      {
        unint64_t v16 = 9;
        return v13 < v16;
      }
      if (v15 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
      {
        unint64_t v16 = 10;
        return v13 < v16;
      }
      if (v15 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        unint64_t v16 = 11;
        return v13 < v16;
      }
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    }
    unint64_t v16 = 3;
  }
  return v13 < v16;
}

uint64_t Type3Widget.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(v7 + 16) = *(void *)(a1 + 16);
  *(void *)(v7 + 24) = v8;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v7 + v6, (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  sub_10001D690(&qword_10010FBD8);
  sub_1000CB3A0();
  sub_1000CB3A0();
  sub_1000CB3A0();
  unint64_t v9 = sub_100051BB0();
  uint64_t v22 = v8;
  unint64_t v23 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  char v21 = &protocol witness table for _FrameLayout;
  uint64_t v10 = swift_getWitnessTable();
  unint64_t v11 = sub_100051C0C();
  uint64_t v18 = v10;
  unint64_t v19 = v11;
  swift_getWitnessTable();
  uint64_t v16 = sub_1000CB350();
  uint64_t v17 = v12;
  uint64_t v13 = sub_1000CB360();
  swift_getWitnessTable();
  int v14 = *(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16);
  v14(v24, &v16, v13);
  swift_release();
  uint64_t v16 = v24[0];
  uint64_t v17 = v24[1];
  v14(a2, &v16, v13);
  return swift_release();
}

uint64_t sub_10005159C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v34 = a2;
  BOOL v39 = a4;
  uint64_t v40 = a1;
  uint64_t v5 = sub_1000CB3D0();
  __chkstk_darwin(v5);
  uint64_t v7 = (int64x2_t *)((char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D690(&qword_10010FBD8);
  uint64_t v8 = sub_1000CB3A0();
  uint64_t v36 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = sub_1000CB3A0();
  uint64_t v38 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int v32 = (char *)&v31 - v12;
  uint64_t v13 = sub_1000CB3A0();
  uint64_t v37 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  int v33 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v35 = (char *)&v31 - v16;
  uint64_t v17 = &v7->i8[*(int *)(v5 + 20)];
  uint64_t v18 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v19 = sub_1000CB680();
  (*(void (**)(__int8 *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v17, v18, v19);
  *uint64_t v7 = vdupq_n_s64(0x4044000000000000uLL);
  sub_100052408();
  sub_1000CBAF0();
  sub_100052460((uint64_t)v7);
  sub_1000CB320();
  sub_1000CBD20();
  unint64_t v20 = sub_100051BB0();
  uint64_t v45 = a3;
  unint64_t v46 = v20;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v22 = v32;
  sub_1000CBAC0();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v8);
  sub_1000CB320();
  sub_1000CB320();
  uint64_t v43 = WitnessTable;
  uint64_t v44 = &protocol witness table for _FrameLayout;
  uint64_t v23 = swift_getWitnessTable();
  unint64_t v24 = v33;
  sub_1000CBAD0();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v11);
  unint64_t v25 = sub_100051C0C();
  uint64_t v41 = v23;
  unint64_t v42 = v25;
  swift_getWitnessTable();
  uint64_t v26 = v37;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  uint64_t v28 = v35;
  v27(v35, v24, v13);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v26 + 8);
  v29(v24, v13);
  v27(v39, v28, v13);
  return ((uint64_t (*)(char *, uint64_t))v29)(v28, v13);
}

uint64_t sub_100051A28()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Type3Widget() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t type metadata accessor for Type3Widget()
{
  return sub_1000506F4();
}

uint64_t sub_100051B14@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(type metadata accessor for Type3Widget() - 8);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_10005159C(a1, v7, v5, a2);
}

unint64_t sub_100051BB0()
{
  unint64_t result = qword_10010FC48;
  if (!qword_10010FC48)
  {
    sub_10001D690(&qword_10010FBD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FC48);
  }
  return result;
}

unint64_t sub_100051C0C()
{
  unint64_t result = qword_10010FDB0[0];
  if (!qword_10010FDB0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10010FDB0);
  }
  return result;
}

uint64_t sub_100051C60()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100051CA8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100051D38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_100051DF0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_100051E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100051E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100051EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100051F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100051F5C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_1000520B8(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1000522D0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_1000522F8()
{
  return swift_getWitnessTable();
}

unint64_t sub_100052408()
{
  unint64_t result = qword_10010FE38;
  if (!qword_10010FE38)
  {
    sub_1000CB3D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FE38);
  }
  return result;
}

uint64_t sub_100052460(uint64_t a1)
{
  uint64_t v2 = sub_1000CB3D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1000524BC(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    BOOL v9 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_10001D64C(&qword_10010FE40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000CB2A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(int *)(a3 + 20);
    int v11 = (char *)a1 + v10;
    unsigned int v12 = (char *)a2 + v10;
    uint64_t v13 = *(void *)v12;
    uint64_t v14 = *((void *)v12 + 1);
    uint64_t v15 = *((void *)v12 + 2);
    uint64_t v16 = *((void *)v12 + 3);
    char v17 = v12[32];
    sub_10002AB70(*(void *)v12, v14, v15, v16, v17);
    *(void *)int v11 = v13;
    *((void *)v11 + 1) = v14;
    *((void *)v11 + 2) = v15;
    *((void *)v11 + 3) = v16;
    v11[32] = v17;
    uint64_t v85 = a3;
    Swift::String v87 = a2;
    uint64_t v18 = *(int *)(a3 + 24);
    uint64_t v19 = (char *)a1 + v18;
    unint64_t v20 = (char *)a2 + v18;
    char v21 = *(void **)((char *)a2 + v18);
    *(void *)((char *)a1 + v18) = v21;
    uint64_t v84 = (int *)type metadata accessor for TodayContent();
    uint64_t v22 = v84[5];
    uint64_t v23 = &v19[v22];
    unint64_t v24 = &v20[v22];
    unint64_t v25 = (int *)type metadata accessor for Banner();
    uint64_t v26 = (void *)*((void *)v25 - 1);
    uint64_t v27 = (unsigned int (*)(char *, uint64_t, int *))v26[6];
    id v28 = v21;
    uint64_t v89 = a1;
    if (v27(v24, 1, v25))
    {
      uint64_t v29 = sub_10001D64C(&qword_10010DE20);
      memcpy(v23, v24, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      uint64_t v81 = v25;
      uint64_t v82 = (void (**)(char *, void, uint64_t, int *))v26;
      uint64_t v30 = *((void *)v24 + 1);
      *(void *)uint64_t v23 = *(void *)v24;
      *((void *)v23 + 1) = v30;
      uint64_t v31 = *((void *)v24 + 3);
      *((void *)v23 + 2) = *((void *)v24 + 2);
      *((void *)v23 + 3) = v31;
      uint64_t v32 = *((void *)v24 + 5);
      *((void *)v23 + 4) = *((void *)v24 + 4);
      *((void *)v23 + 5) = v32;
      uint64_t v33 = v25[7];
      __dst = &v23[v33];
      uint64_t v34 = &v24[v33];
      uint64_t v35 = sub_1000CABE0();
      uint64_t v78 = *(void *)(v35 - 8);
      uint64_t v80 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v78 + 48);
      uint64_t v36 = v34;
      uint64_t v37 = v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v80(v36, 1, v37))
      {
        uint64_t v38 = sub_10001D64C(&qword_10010F340);
        memcpy(__dst, v36, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v78 + 16))(__dst, v36, v37);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(__dst, 0, 1, v37);
      }
      uint64_t v39 = v25[8];
      uint64_t v40 = &v23[v39];
      uint64_t v41 = &v24[v39];
      uint64_t v42 = *((void *)v41 + 1);
      *(void *)uint64_t v40 = *(void *)v41;
      *((void *)v40 + 1) = v42;
      uint64_t v43 = v25[9];
      uint64_t v44 = *(void **)&v24[v43];
      swift_bridgeObjectRetain();
      if (v44 != (void *)1) {
        id v45 = v44;
      }
      *(void *)&v23[v43] = v44;
      uint64_t v46 = v81[10];
      uint64_t v47 = &v23[v46];
      char v48 = &v24[v46];
      long long v49 = *(void **)v48;
      uint64_t v50 = (void *)*((void *)v48 + 1);
      char v51 = v48[16];
      sub_10001DB84(*(void **)v48, v50);
      *(void *)uint64_t v47 = v49;
      *((void *)v47 + 1) = v50;
      v47[16] = v51;
      v82[7](v23, 0, 1, v81);
    }
    *(void *)&v19[v84[6]] = *(void *)&v20[v84[6]];
    *(void *)&v19[v84[7]] = *(void *)&v20[v84[7]];
    v19[v84[8]] = v20[v84[8]];
    uint64_t v52 = v84[9];
    char v83 = &v19[v52];
    long long v53 = &v20[v52];
    uint64_t v54 = sub_1000CABE0();
    uint64_t v55 = *(void *)(v54 - 8);
    char v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (v56(v53, 1, v54))
    {
      uint64_t v57 = sub_10001D64C(&qword_10010F340);
      memcpy(v83, v53, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v83, v53, v54);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v83, 0, 1, v54);
    }
    *(void *)&v19[v84[10]] = *(void *)&v20[v84[10]];
    uint64_t v58 = v84[11];
    id v59 = &v19[v58];
    uint64_t v60 = &v20[v58];
    uint64_t v61 = *((void *)v60 + 1);
    *(void *)id v59 = *(void *)v60;
    *((void *)v59 + 1) = v61;
    uint64_t v62 = v84[12];
    unsigned __int8 v63 = &v19[v62];
    uint64_t v64 = &v20[v62];
    uint64_t v65 = *((void *)v64 + 1);
    *(void *)unsigned __int8 v63 = *(void *)v64;
    *((void *)v63 + 1) = v65;
    uint64_t v66 = *(int *)(v85 + 28);
    BOOL v9 = v89;
    uint64_t v67 = (char *)v89 + v66;
    uint64_t v68 = (char *)v87 + v66;
    *(_OWORD *)((char *)v89 + v66) = *(_OWORD *)((char *)v87 + v66);
    uint64_t v69 = (int *)type metadata accessor for LayoutContext();
    uint64_t v70 = v69[6];
    uint64_t v86 = &v68[v70];
    uint64_t v88 = &v67[v70];
    uint64_t v71 = sub_1000CBEC0();
    size_t v72 = *(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v72(v88, v86, v71);
    *(_OWORD *)&v67[v69[7]] = *(_OWORD *)&v68[v69[7]];
    uint64_t v73 = v69[8];
    uint64_t v74 = &v67[v73];
    uint64_t v75 = &v68[v73];
    uint64_t v76 = sub_1000CB6D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 16))(v74, v75, v76);
    *(void *)&v67[v69[9]] = *(void *)&v68[v69[9]];
    *(void *)&v67[v69[10]] = *(void *)&v68[v69[10]];
    v67[v69[11]] = v68[v69[11]];
    v67[v69[12]] = v68[v69[12]];
  }
  return v9;
}

uint64_t sub_100052AF0(uint64_t a1, int *a2)
{
  sub_10001D64C(&qword_10010FE40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_1000CB2A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + a2[5];
  sub_10002AFD0(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(unsigned char *)(v5 + 32));
  uint64_t v6 = (id *)(a1 + a2[6]);

  uint64_t v7 = type metadata accessor for TodayContent();
  uint64_t v8 = (char *)v6 + *(int *)(v7 + 20);
  BOOL v9 = (int *)type metadata accessor for Banner();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v9 - 1) + 48))(v8, 1, v9))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = &v8[v9[7]];
    uint64_t v11 = sub_1000CABE0();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void **)&v8[v9[9]];
    if (v13 != (void *)1) {

    }
    sub_10001DE30(*(void **)&v8[v9[10]], *(void **)&v8[v9[10] + 8]);
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v14 = (char *)v6 + *(int *)(v7 + 36);
  uint64_t v15 = sub_1000CABE0();
  uint64_t v16 = *(void *)(v15 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = a1 + a2[7];
  uint64_t v18 = type metadata accessor for LayoutContext();
  uint64_t v19 = v17 + *(int *)(v18 + 24);
  uint64_t v20 = sub_1000CBEC0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  uint64_t v21 = v17 + *(int *)(v18 + 32);
  uint64_t v22 = sub_1000CB6D0();
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8);

  return v23(v21, v22);
}

void *sub_100052E44(void *a1, void *a2, uint64_t a3)
{
  sub_10001D64C(&qword_10010FE40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1000CB2A0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  BOOL v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *((void *)v9 + 1);
  uint64_t v12 = *((void *)v9 + 2);
  uint64_t v13 = *((void *)v9 + 3);
  char v14 = v9[32];
  sub_10002AB70(*(void *)v9, v11, v12, v13, v14);
  *(void *)uint64_t v8 = v10;
  *((void *)v8 + 1) = v11;
  *((void *)v8 + 2) = v12;
  *((void *)v8 + 3) = v13;
  v8[32] = v14;
  uint64_t v79 = a3;
  uint64_t v80 = a2;
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v82 = a1;
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void **)((char *)a2 + v15);
  *uint64_t v16 = v18;
  uint64_t v19 = (int *)type metadata accessor for TodayContent();
  uint64_t v20 = v19[5];
  uint64_t v21 = (void *)((char *)v16 + v20);
  uint64_t v22 = &v17[v20];
  uint64_t v23 = (int *)type metadata accessor for Banner();
  uint64_t v24 = *((void *)v23 - 1);
  unint64_t v25 = *(unsigned int (**)(char *, uint64_t, int *))(v24 + 48);
  id v26 = v18;
  if (v25(v22, 1, v23))
  {
    uint64_t v27 = sub_10001D64C(&qword_10010DE20);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    uint64_t v28 = *((void *)v22 + 1);
    void *v21 = *(void *)v22;
    v21[1] = v28;
    uint64_t v29 = *((void *)v22 + 3);
    v21[2] = *((void *)v22 + 2);
    _OWORD v21[3] = v29;
    uint64_t v30 = *((void *)v22 + 5);
    v21[4] = *((void *)v22 + 4);
    void v21[5] = v30;
    uint64_t v31 = v23[7];
    __dst = (char *)v21 + v31;
    uint64_t v76 = &v22[v31];
    uint64_t v32 = sub_1000CABE0();
    uint64_t v74 = *(void *)(v32 - 8);
    uint64_t v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v75(v76, 1, v32))
    {
      uint64_t v33 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v76, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(__dst, v76, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(__dst, 0, 1, v32);
    }
    uint64_t v34 = v23[8];
    uint64_t v35 = (void *)((char *)v21 + v34);
    uint64_t v36 = &v22[v34];
    uint64_t v37 = *((void *)v36 + 1);
    *uint64_t v35 = *(void *)v36;
    v35[1] = v37;
    uint64_t v38 = v23[9];
    uint64_t v39 = *(void **)&v22[v38];
    swift_bridgeObjectRetain();
    if (v39 != (void *)1) {
      id v40 = v39;
    }
    *(void *)((char *)v21 + v38) = v39;
    uint64_t v41 = v23[10];
    uint64_t v42 = (char *)v21 + v41;
    uint64_t v43 = &v22[v41];
    uint64_t v44 = *(void **)v43;
    id v45 = (void *)*((void *)v43 + 1);
    char v46 = v43[16];
    sub_10001DB84(*(void **)v43, v45);
    *(void *)uint64_t v42 = v44;
    *((void *)v42 + 1) = v45;
    v42[16] = v46;
    (*(void (**)(void *, void, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  *(void *)((char *)v16 + v19[6]) = *(void *)&v17[v19[6]];
  *(void *)((char *)v16 + v19[7]) = *(void *)&v17[v19[7]];
  *((unsigned char *)v16 + v19[8]) = v17[v19[8]];
  uint64_t v47 = v19[9];
  uint64_t v78 = (char *)v16 + v47;
  char v48 = &v17[v47];
  uint64_t v49 = sub_1000CABE0();
  uint64_t v50 = *(void *)(v49 - 8);
  char v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  if (v51(v48, 1, v49))
  {
    uint64_t v52 = sub_10001D64C(&qword_10010F340);
    memcpy(v78, v48, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v78, v48, v49);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v78, 0, 1, v49);
  }
  *(void *)((char *)v16 + v19[10]) = *(void *)&v17[v19[10]];
  uint64_t v53 = v19[11];
  uint64_t v54 = (void *)((char *)v16 + v53);
  uint64_t v55 = &v17[v53];
  uint64_t v56 = *((void *)v55 + 1);
  *uint64_t v54 = *(void *)v55;
  v54[1] = v56;
  uint64_t v57 = v19[12];
  uint64_t v58 = (void *)((char *)v16 + v57);
  id v59 = &v17[v57];
  uint64_t v60 = *((void *)v59 + 1);
  *uint64_t v58 = *(void *)v59;
  v58[1] = v60;
  uint64_t v61 = *(int *)(v79 + 28);
  uint64_t v62 = (char *)v82 + v61;
  unsigned __int8 v63 = (char *)v80 + v61;
  *(_OWORD *)((char *)v82 + v61) = *(_OWORD *)((char *)v80 + v61);
  uint64_t v64 = (int *)type metadata accessor for LayoutContext();
  uint64_t v65 = v64[6];
  uint64_t v81 = &v62[v65];
  uint64_t v66 = &v63[v65];
  uint64_t v67 = sub_1000CBEC0();
  uint64_t v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v68(v81, v66, v67);
  *(_OWORD *)&v62[v64[7]] = *(_OWORD *)&v63[v64[7]];
  uint64_t v69 = v64[8];
  uint64_t v70 = &v62[v69];
  uint64_t v71 = &v63[v69];
  uint64_t v72 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16))(v70, v71, v72);
  *(void *)&v62[v64[9]] = *(void *)&v63[v64[9]];
  *(void *)&v62[v64[10]] = *(void *)&v63[v64[10]];
  v62[v64[11]] = v63[v64[11]];
  v62[v64[12]] = v63[v64[12]];
  return v82;
}

void *sub_100053428(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000227A8((uint64_t)a1, &qword_10010FE40);
    sub_10001D64C(&qword_10010FE40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1000CB2A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  BOOL v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *((void *)v9 + 1);
  uint64_t v12 = *((void *)v9 + 2);
  uint64_t v13 = *((void *)v9 + 3);
  char v14 = v9[32];
  sub_10002AB70(*(void *)v9, v11, v12, v13, v14);
  uint64_t v15 = *(void *)v8;
  uint64_t v16 = *((void *)v8 + 1);
  uint64_t v17 = *((void *)v8 + 2);
  uint64_t v18 = *((void *)v8 + 3);
  char v19 = v8[32];
  *(void *)uint64_t v8 = v10;
  *((void *)v8 + 1) = v11;
  *((void *)v8 + 2) = v12;
  *((void *)v8 + 3) = v13;
  v8[32] = v14;
  sub_10002AFD0(v15, v16, v17, v18, v19);
  uint64_t v113 = a3;
  uint64_t v114 = a2;
  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v115 = a1;
  uint64_t v21 = (void **)((char *)a1 + v20);
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = *(void **)((char *)a2 + v20);
  uint64_t v24 = *v21;
  void *v21 = v23;
  id v25 = v23;

  id v26 = (int *)type metadata accessor for TodayContent();
  uint64_t v27 = v26[5];
  uint64_t v28 = (char *)v21 + v27;
  uint64_t v29 = &v22[v27];
  uint64_t v30 = (int *)type metadata accessor for Banner();
  uint64_t v31 = *((void *)v30 - 1);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t, int *))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (!v33)
  {
    if (v34)
    {
      sub_100058A68((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_12;
    }
    *(void *)uint64_t v28 = *(void *)v29;
    *((void *)v28 + 1) = *((void *)v29 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v28 + 2) = *((void *)v29 + 2);
    *((void *)v28 + 3) = *((void *)v29 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v28 + 4) = *((void *)v29 + 4);
    *((void *)v28 + 5) = *((void *)v29 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v39 = v30[7];
    id v40 = &v28[v39];
    int __dsta = &v29[v39];
    uint64_t v41 = sub_1000CABE0();
    uint64_t v109 = *(void *)(v41 - 8);
    unint64_t v110 = v40;
    uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v109 + 48);
    LODWORD(v40) = v42(v40, 1, v41);
    int v43 = v42(__dsta, 1, v41);
    if (v40)
    {
      if (v43)
      {
        size_t v44 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        id v45 = v110;
LABEL_22:
        memcpy(v45, __dsta, v44);
        goto LABEL_25;
      }
      (*(void (**)(void *, char *, uint64_t))(v109 + 16))(v110, __dsta, v41);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v109 + 56))(v110, 0, 1, v41);
    }
    else
    {
      if (v43)
      {
        (*(void (**)(void *, uint64_t))(v109 + 8))(v110, v41);
        size_t v44 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        id v45 = v110;
        goto LABEL_22;
      }
      (*(void (**)(void *, char *, uint64_t))(v109 + 24))(v110, __dsta, v41);
    }
LABEL_25:
    uint64_t v58 = v30[8];
    id v59 = &v28[v58];
    uint64_t v60 = &v29[v58];
    *(void *)id v59 = *(void *)v60;
    *((void *)v59 + 1) = *((void *)v60 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v61 = v30[9];
    uint64_t v62 = &v28[v61];
    unsigned __int8 v63 = *(void **)&v28[v61];
    uint64_t v64 = *(void **)&v29[v61];
    if (v63 == (void *)1)
    {
      if (v64 != (void *)1)
      {
        *(void *)uint64_t v62 = v64;
        id v65 = v64;
LABEL_32:
        uint64_t v67 = v30[10];
        uint64_t v68 = &v28[v67];
        uint64_t v69 = &v29[v67];
        uint64_t v70 = *(void **)v69;
        uint64_t v71 = (void *)*((void *)v69 + 1);
        char v72 = v69[16];
        sub_10001DB84(*(void **)v69, v71);
        uint64_t v73 = *(void **)v68;
        uint64_t v74 = (void *)*((void *)v68 + 1);
        *(void *)uint64_t v68 = v70;
        *((void *)v68 + 1) = v71;
        v68[16] = v72;
        sub_10001DE30(v73, v74);
        goto LABEL_33;
      }
    }
    else
    {
      if (v64 != (void *)1)
      {
        *(void *)uint64_t v62 = v64;
        id v66 = v64;

        goto LABEL_32;
      }
      sub_10001EA8C((uint64_t)&v28[v61]);
      uint64_t v64 = *(void **)&v29[v61];
    }
    *(void *)uint64_t v62 = v64;
    goto LABEL_32;
  }
  if (v34)
  {
LABEL_12:
    uint64_t v38 = sub_10001D64C(&qword_10010DE20);
    memcpy(v28, v29, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_33;
  }
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  *((void *)v28 + 2) = *((void *)v29 + 2);
  *((void *)v28 + 3) = *((void *)v29 + 3);
  *((void *)v28 + 4) = *((void *)v29 + 4);
  *((void *)v28 + 5) = *((void *)v29 + 5);
  uint64_t v35 = v30[7];
  __dst = &v28[v35];
  int v107 = &v29[v35];
  uint64_t v36 = sub_1000CABE0();
  uint64_t v106 = *(void *)(v36 - 8);
  uint64_t v108 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v108(v107, 1, v36))
  {
    uint64_t v37 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v107, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v106 + 16))(__dst, v107, v36);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(__dst, 0, 1, v36);
  }
  uint64_t v46 = v30[8];
  uint64_t v47 = &v28[v46];
  char v48 = &v29[v46];
  *(void *)uint64_t v47 = *(void *)v48;
  *((void *)v47 + 1) = *((void *)v48 + 1);
  uint64_t v49 = v30[9];
  uint64_t v50 = *(void **)&v29[v49];
  swift_bridgeObjectRetain();
  if (v50 != (void *)1) {
    id v51 = v50;
  }
  *(void *)&v28[v49] = v50;
  uint64_t v52 = v30[10];
  uint64_t v53 = &v28[v52];
  uint64_t v54 = &v29[v52];
  uint64_t v55 = *(void **)v54;
  uint64_t v56 = (void *)*((void *)v54 + 1);
  char v57 = v54[16];
  sub_10001DB84(*(void **)v54, v56);
  *(void *)uint64_t v53 = v55;
  *((void *)v53 + 1) = v56;
  v53[16] = v57;
  (*(void (**)(char *, void, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
LABEL_33:
  *(void **)((char *)v21 + v26[6]) = *(void **)&v22[v26[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void **)((char *)v21 + v26[7]) = *(void **)&v22[v26[7]];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *((unsigned char *)v21 + v26[8]) = v22[v26[8]];
  uint64_t v75 = v26[9];
  uint64_t v76 = (char *)v21 + v75;
  uint64_t v77 = &v22[v75];
  uint64_t v78 = sub_1000CABE0();
  uint64_t v79 = *(void *)(v78 - 8);
  uint64_t v80 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v79 + 48);
  int v81 = v80(v76, 1, v78);
  int v82 = v80(v77, 1, v78);
  if (!v81)
  {
    if (!v82)
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 24))(v76, v77, v78);
      goto LABEL_39;
    }
    (*(void (**)(char *, uint64_t))(v79 + 8))(v76, v78);
    goto LABEL_38;
  }
  if (v82)
  {
LABEL_38:
    uint64_t v83 = sub_10001D64C(&qword_10010F340);
    memcpy(v76, v77, *(void *)(*(void *)(v83 - 8) + 64));
    goto LABEL_39;
  }
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v77, v78);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
LABEL_39:
  *(void **)((char *)v21 + v26[10]) = *(void **)&v22[v26[10]];
  swift_retain();
  swift_release();
  uint64_t v84 = v26[11];
  uint64_t v85 = (void **)((char *)v21 + v84);
  uint64_t v86 = &v22[v84];
  *uint64_t v85 = *(void *)v86;
  v85[1] = *((void *)v86 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v87 = v26[12];
  uint64_t v88 = (void **)((char *)v21 + v87);
  uint64_t v89 = &v22[v87];
  *uint64_t v88 = *(void *)v89;
  v88[1] = *((void *)v89 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v90 = *(int *)(v113 + 28);
  uint64_t v91 = (void *)((char *)v115 + v90);
  long long v92 = (char *)v114 + v90;
  *uint64_t v91 = *(void *)((char *)v114 + v90);
  v91[1] = *(void *)((char *)v114 + v90 + 8);
  id v93 = (int *)type metadata accessor for LayoutContext();
  uint64_t v94 = v93[6];
  uint64_t v95 = (char *)v91 + v94;
  id v96 = &v92[v94];
  uint64_t v97 = sub_1000CBEC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 24))(v95, v96, v97);
  uint64_t v98 = v93[7];
  uint64_t v99 = (void *)((char *)v91 + v98);
  uint64_t v100 = &v92[v98];
  *uint64_t v99 = *(void *)v100;
  v99[1] = *((void *)v100 + 1);
  uint64_t v101 = v93[8];
  uint64_t v102 = (char *)v91 + v101;
  uint64_t v103 = &v92[v101];
  uint64_t v104 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 24))(v102, v103, v104);
  *(void *)((char *)v91 + v93[9]) = *(void *)&v92[v93[9]];
  *(void *)((char *)v91 + v93[10]) = *(void *)&v92[v93[10]];
  *((unsigned char *)v91 + v93[11]) = v92[v93[11]];
  *((unsigned char *)v91 + v93[12]) = v92[v93[12]];
  return v115;
}

char *sub_100053DB8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10001D64C(&qword_10010FE40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_1000CB2A0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  long long v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  v10[32] = v11[32];
  uint64_t v13 = &a1[v9];
  char v14 = &a2[v9];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v15 = (int *)type metadata accessor for TodayContent();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v13[v16];
  uint64_t v18 = &v14[v16];
  char v19 = (int *)type metadata accessor for Banner();
  uint64_t v20 = *((void *)v19 - 1);
  uint64_t v53 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = sub_10001D64C(&qword_10010DE20);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    uint64_t v50 = a2;
    long long v22 = *((_OWORD *)v18 + 1);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    *((_OWORD *)v17 + 1) = v22;
    *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
    uint64_t v23 = v19[7];
    id v51 = &v17[v23];
    uint64_t v52 = a1;
    uint64_t v24 = &v18[v23];
    uint64_t v25 = sub_1000CABE0();
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = sub_10001D64C(&qword_10010F340);
      memcpy(v51, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v51, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v51, 0, 1, v25);
    }
    *(_OWORD *)&v17[v19[8]] = *(_OWORD *)&v18[v19[8]];
    *(void *)&v17[v19[9]] = *(void *)&v18[v19[9]];
    uint64_t v28 = v19[10];
    uint64_t v29 = &v17[v28];
    uint64_t v30 = &v18[v28];
    v29[16] = v30[16];
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    (*(void (**)(char *, void, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
    a1 = v52;
    a2 = v50;
  }
  *(void *)&v13[v15[6]] = *(void *)&v14[v15[6]];
  *(void *)&v13[v15[7]] = *(void *)&v14[v15[7]];
  v13[v15[8]] = v14[v15[8]];
  uint64_t v31 = v15[9];
  uint64_t v32 = &v13[v31];
  int v33 = &v14[v31];
  uint64_t v34 = sub_1000CABE0();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = sub_10001D64C(&qword_10010F340);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  *(void *)&v13[v15[10]] = *(void *)&v14[v15[10]];
  *(_OWORD *)&v13[v15[11]] = *(_OWORD *)&v14[v15[11]];
  *(_OWORD *)&v13[v15[12]] = *(_OWORD *)&v14[v15[12]];
  uint64_t v37 = *(int *)(v53 + 28);
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  *(_OWORD *)&a1[v37] = *(_OWORD *)&a2[v37];
  id v40 = (int *)type metadata accessor for LayoutContext();
  uint64_t v41 = v40[6];
  uint64_t v42 = &v38[v41];
  int v43 = &v39[v41];
  uint64_t v44 = sub_1000CBEC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
  *(_OWORD *)&v38[v40[7]] = *(_OWORD *)&v39[v40[7]];
  uint64_t v45 = v40[8];
  uint64_t v46 = &v38[v45];
  uint64_t v47 = &v39[v45];
  uint64_t v48 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 32))(v46, v47, v48);
  *(void *)&v38[v40[9]] = *(void *)&v39[v40[9]];
  *(void *)&v38[v40[10]] = *(void *)&v39[v40[10]];
  v38[v40[11]] = v39[v40[11]];
  v38[v40[12]] = v39[v40[12]];
  return a1;
}

char *sub_1000542D0(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000227A8((uint64_t)a1, &qword_10010FE40);
    uint64_t v6 = sub_10001D64C(&qword_10010FE40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000CB2A0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  char v11 = v10[32];
  uint64_t v12 = *(void *)v9;
  uint64_t v13 = *((void *)v9 + 1);
  uint64_t v14 = *((void *)v9 + 2);
  uint64_t v15 = *((void *)v9 + 3);
  char v16 = v9[32];
  long long v17 = *((_OWORD *)v10 + 1);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v17;
  v9[32] = v11;
  sub_10002AFD0(v12, v13, v14, v15, v16);
  uint64_t v102 = a3;
  uint64_t v103 = a2;
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v104 = a1;
  char v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(void **)&a1[v18];
  *(void *)&a1[v18] = *(void *)v20;

  long long v22 = (int *)type metadata accessor for TodayContent();
  uint64_t v23 = v22[5];
  uint64_t v24 = &v19[v23];
  uint64_t v25 = &v20[v23];
  uint64_t v26 = (int *)type metadata accessor for Banner();
  uint64_t v27 = *((void *)v26 - 1);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, int *))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (v30)
    {
      sub_100058A68((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_11;
    }
    uint64_t v38 = *((void *)v25 + 1);
    *(void *)uint64_t v24 = *(void *)v25;
    *((void *)v24 + 1) = v38;
    swift_bridgeObjectRelease();
    uint64_t v39 = *((void *)v25 + 3);
    *((void *)v24 + 2) = *((void *)v25 + 2);
    *((void *)v24 + 3) = v39;
    swift_bridgeObjectRelease();
    uint64_t v40 = *((void *)v25 + 5);
    *((void *)v24 + 4) = *((void *)v25 + 4);
    *((void *)v24 + 5) = v40;
    swift_bridgeObjectRelease();
    uint64_t v41 = v26[7];
    uint64_t v42 = &v24[v41];
    int __dsta = &v25[v41];
    uint64_t v43 = sub_1000CABE0();
    uint64_t v98 = *(void *)(v43 - 8);
    uint64_t v99 = v42;
    uint64_t v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v98 + 48);
    LODWORD(v42) = v44(v42, 1, v43);
    int v45 = v44(__dsta, 1, v43);
    if (v42)
    {
      if (v45)
      {
        size_t v46 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v47 = v99;
LABEL_19:
        memcpy(v47, __dsta, v46);
        goto LABEL_22;
      }
      (*(void (**)(void *, char *, uint64_t))(v98 + 32))(v99, __dsta, v43);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v98 + 56))(v99, 0, 1, v43);
    }
    else
    {
      if (v45)
      {
        (*(void (**)(void *, uint64_t))(v98 + 8))(v99, v43);
        size_t v46 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v47 = v99;
        goto LABEL_19;
      }
      (*(void (**)(void *, char *, uint64_t))(v98 + 40))(v99, __dsta, v43);
    }
LABEL_22:
    uint64_t v51 = v26[8];
    uint64_t v52 = &v24[v51];
    uint64_t v53 = (uint64_t *)&v25[v51];
    uint64_t v55 = *v53;
    uint64_t v54 = v53[1];
    *(void *)uint64_t v52 = v55;
    *((void *)v52 + 1) = v54;
    swift_bridgeObjectRelease();
    uint64_t v56 = v26[9];
    char v57 = &v24[v56];
    uint64_t v58 = *(void **)&v24[v56];
    uint64_t v59 = *(void *)&v25[v56];
    if (v58 != (void *)1)
    {
      if (v59 != 1)
      {
        *(void *)char v57 = v59;

        goto LABEL_27;
      }
      sub_10001EA8C((uint64_t)&v24[v56]);
      uint64_t v59 = *(void *)&v25[v56];
    }
    *(void *)char v57 = v59;
LABEL_27:
    uint64_t v60 = v26[10];
    uint64_t v61 = &v24[v60];
    uint64_t v62 = &v25[v60];
    char v63 = v62[16];
    uint64_t v64 = *(void **)v61;
    id v65 = (void *)*((void *)v61 + 1);
    *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
    v61[16] = v63;
    sub_10001DE30(v64, v65);
    goto LABEL_28;
  }
  if (v30)
  {
LABEL_11:
    uint64_t v37 = sub_10001D64C(&qword_10010DE20);
    memcpy(v24, v25, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_28;
  }
  long long v31 = *((_OWORD *)v25 + 1);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v31;
  *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
  uint64_t v32 = v26[7];
  __dst = &v24[v32];
  int v33 = &v25[v32];
  uint64_t v34 = sub_1000CABE0();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(__dst, v33, v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
  }
  *(_OWORD *)&v24[v26[8]] = *(_OWORD *)&v25[v26[8]];
  *(void *)&v24[v26[9]] = *(void *)&v25[v26[9]];
  uint64_t v48 = v26[10];
  uint64_t v49 = &v24[v48];
  uint64_t v50 = &v25[v48];
  v49[16] = v50[16];
  *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
  (*(void (**)(char *, void, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
LABEL_28:
  *(void *)&v19[v22[6]] = *(void *)&v20[v22[6]];
  swift_bridgeObjectRelease();
  *(void *)&v19[v22[7]] = *(void *)&v20[v22[7]];
  swift_unknownObjectRelease();
  v19[v22[8]] = v20[v22[8]];
  uint64_t v66 = v22[9];
  uint64_t v67 = &v19[v66];
  uint64_t v68 = &v20[v66];
  uint64_t v69 = sub_1000CABE0();
  uint64_t v70 = *(void *)(v69 - 8);
  uint64_t v71 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 48);
  int v72 = v71(v67, 1, v69);
  int v73 = v71(v68, 1, v69);
  if (!v72)
  {
    if (!v73)
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 40))(v67, v68, v69);
      goto LABEL_34;
    }
    (*(void (**)(char *, uint64_t))(v70 + 8))(v67, v69);
    goto LABEL_33;
  }
  if (v73)
  {
LABEL_33:
    uint64_t v74 = sub_10001D64C(&qword_10010F340);
    memcpy(v67, v68, *(void *)(*(void *)(v74 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, v68, v69);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
LABEL_34:
  *(void *)&v19[v22[10]] = *(void *)&v20[v22[10]];
  swift_release();
  uint64_t v75 = v22[11];
  uint64_t v76 = &v19[v75];
  uint64_t v77 = &v20[v75];
  uint64_t v79 = *(void *)v77;
  uint64_t v78 = *((void *)v77 + 1);
  *(void *)uint64_t v76 = v79;
  *((void *)v76 + 1) = v78;
  swift_bridgeObjectRelease();
  uint64_t v80 = v22[12];
  int v81 = &v19[v80];
  int v82 = &v20[v80];
  uint64_t v84 = *(void *)v82;
  uint64_t v83 = *((void *)v82 + 1);
  *(void *)int v81 = v84;
  *((void *)v81 + 1) = v83;
  swift_bridgeObjectRelease();
  uint64_t v85 = *(int *)(v102 + 28);
  uint64_t v86 = &v104[v85];
  uint64_t v87 = &v103[v85];
  *(_OWORD *)uint64_t v86 = *(_OWORD *)&v103[v85];
  uint64_t v88 = (int *)type metadata accessor for LayoutContext();
  uint64_t v89 = v88[6];
  uint64_t v90 = &v86[v89];
  uint64_t v91 = &v87[v89];
  uint64_t v92 = sub_1000CBEC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v92 - 8) + 40))(v90, v91, v92);
  *(_OWORD *)&v86[v88[7]] = *(_OWORD *)&v87[v88[7]];
  uint64_t v93 = v88[8];
  uint64_t v94 = &v86[v93];
  uint64_t v95 = &v87[v93];
  uint64_t v96 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 40))(v94, v95, v96);
  *(void *)&v86[v88[9]] = *(void *)&v87[v88[9]];
  *(void *)&v86[v88[10]] = *(void *)&v87[v88[10]];
  v86[v88[11]] = v87[v88[11]];
  v86[v88[12]] = v87[v88[12]];
  return v104;
}

uint64_t sub_100054B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100054B24);
}

uint64_t sub_100054B24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10001D64C(&qword_10010FE48);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_9:
    return v9(v10, a2, v8);
  }
  if (a2 == 254)
  {
    unsigned int v11 = *(unsigned __int8 *)(a1 + a3[5] + 32);
    if (v11 > 1) {
      return (v11 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  uint64_t v13 = type metadata accessor for TodayContent();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v10 = a1 + a3[6];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for LayoutContext();
  char v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[7];

  return v16(v18, a2, v17);
}

uint64_t sub_100054CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100054CB8);
}

uint64_t sub_100054CB8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_10001D64C(&qword_10010FE48);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 254)
  {
    *(unsigned char *)(a1 + a4[5] + 32) = -(char)a2;
    return result;
  }
  uint64_t v13 = type metadata accessor for TodayContent();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[6];
    unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = type metadata accessor for LayoutContext();
  char v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[7];

  return v16(v18, a2, a2, v17);
}

uint64_t type metadata accessor for RegularContentView()
{
  uint64_t result = qword_10010FEA8;
  if (!qword_10010FEA8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100054E88()
{
  sub_100054F94();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TodayContent();
    if (v1 <= 0x3F)
    {
      type metadata accessor for LayoutContext();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_100054F94()
{
  if (!qword_10010FEB8)
  {
    sub_1000CB2A0();
    unint64_t v0 = sub_1000CB2B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10010FEB8);
    }
  }
}

uint64_t sub_100054FEC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100055008@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v3 = sub_10001D64C(&qword_10010FF50);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v56 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v47 - v6);
  uint64_t v50 = sub_1000CB8A0();
  uint64_t v48 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for BannerView();
  __chkstk_darwin(v47);
  uint64_t v10 = (uint64_t *)((char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_10001D64C(&qword_10010FF58);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v53 = v11;
  uint64_t v54 = v12;
  __chkstk_darwin(v11);
  uint64_t v52 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10001D64C(&qword_10010DE20);
  __chkstk_darwin(v14 - 8);
  char v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Banner();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v51 = (uint64_t)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10001D64C(&qword_10010FF60);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v47 - v24;
  uint64_t v26 = a1;
  uint64_t v27 = a1 + *(int *)(type metadata accessor for RegularContentView() + 24);
  uint64_t v28 = type metadata accessor for TodayContent();
  sub_100036850(v27 + *(int *)(v28 + 20), (uint64_t)v16, &qword_10010DE20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_1000227A8((uint64_t)v16, &qword_10010DE20);
    uint64_t v29 = 1;
    uint64_t v30 = v53;
  }
  else
  {
    uint64_t v31 = v51;
    sub_100058AFC((uint64_t)v16, v51, (uint64_t (*)(void))type metadata accessor for Banner);
    uint64_t v32 = v26;
    uint64_t v33 = sub_10005565C();
    uint64_t v35 = v34;
    sub_100058A00(v31, (uint64_t)v10 + *(int *)(v47 + 20), (uint64_t (*)(void))type metadata accessor for Banner);
    *uint64_t v10 = v33;
    v10[1] = v35;
    *(void *)&long long v57 = 0x4028000000000000;
    (*(void (**)(char *, void, uint64_t))(v48 + 104))(v49, enum case for Font.TextStyle.caption(_:), v50);
    sub_100058504();
    sub_1000CB2D0();
    id v36 = sub_10005DC00();
    [v36 nt_scaledValueForValue:1.0];

    sub_10005C338();
    sub_10005DFFC();
    sub_1000CBD20();
    sub_1000CB310();
    uint64_t v37 = v52;
    sub_100058A00((uint64_t)v10, v52, (uint64_t (*)(void))type metadata accessor for BannerView);
    uint64_t v38 = v53;
    uint64_t v39 = (_OWORD *)(v37 + *(int *)(v53 + 36));
    long long v40 = v58;
    *uint64_t v39 = v57;
    v39[1] = v40;
    v39[2] = v59;
    sub_100058A68((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BannerView);
    sub_100058A68(v31, (uint64_t (*)(void))type metadata accessor for Banner);
    sub_1000365A0(v37, (uint64_t)v25, &qword_10010FF58);
    uint64_t v29 = 0;
    uint64_t v26 = v32;
    uint64_t v30 = v38;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v25, v29, 1, v30);
  *uint64_t v7 = sub_1000CBD00();
  v7[1] = v41;
  uint64_t v42 = sub_10001D64C(&qword_10010FF68);
  sub_100055898(v26, (uint64_t *)((char *)v7 + *(int *)(v42 + 44)));
  sub_100036850((uint64_t)v25, (uint64_t)v23, &qword_10010FF60);
  uint64_t v43 = v56;
  sub_100036850((uint64_t)v7, v56, &qword_10010FF50);
  uint64_t v44 = v55;
  sub_100036850((uint64_t)v23, v55, &qword_10010FF60);
  uint64_t v45 = sub_10001D64C(&qword_10010FF70);
  sub_100036850(v43, v44 + *(int *)(v45 + 48), &qword_10010FF50);
  sub_1000227A8((uint64_t)v7, &qword_10010FF50);
  sub_1000227A8((uint64_t)v25, &qword_10010FF60);
  sub_1000227A8(v43, &qword_10010FF50);
  return sub_1000227A8((uint64_t)v23, &qword_10010FF60);
}

uint64_t sub_10005565C()
{
  uint64_t v0 = sub_1000CB2A0();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v15 - v5;
  sub_100057E58(&qword_10010FE40, (uint64_t (*)(void))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)&v15 - v5);
  uint64_t v7 = enum case for ColorScheme.dark(_:);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v8(v4, enum case for ColorScheme.dark(_:), v0);
  char v9 = sub_1000CB290();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v10(v6, v0);
  if (v9) {
    uint64_t v11 = sub_1000CBB30();
  }
  else {
    uint64_t v11 = sub_1000CBB60();
  }
  uint64_t v12 = v11;
  sub_100057E58(&qword_10010FE40, (uint64_t (*)(void))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v6);
  v8(v4, v7, v0);
  char v13 = sub_1000CB290();
  v10(v4, v0);
  v10(v6, v0);
  if (v13) {
    sub_1000CBB60();
  }
  else {
    sub_1000CBB30();
  }
  return v12;
}

uint64_t sub_100055898@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10001D64C(&qword_10010FF80);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v9 = (char *)&v14 - v8;
  sub_1000559D4(&v15);
  uint64_t v10 = v15;
  *(void *)char v9 = sub_1000CB700();
  *((void *)v9 + 1) = 0;
  v9[16] = 0;
  uint64_t v11 = sub_10001D64C(&qword_10010FF88);
  sub_100055EB4(a1, &v9[*(int *)(v11 + 44)]);
  sub_100036850((uint64_t)v9, (uint64_t)v7, &qword_10010FF80);
  *a2 = v10;
  uint64_t v12 = sub_10001D64C(&qword_10010FF90);
  sub_100036850((uint64_t)v7, (uint64_t)a2 + *(int *)(v12 + 48), &qword_10010FF80);
  swift_retain();
  sub_1000227A8((uint64_t)v9, &qword_10010FF80);
  sub_1000227A8((uint64_t)v7, &qword_10010FF80);
  return swift_release();
}

uint64_t sub_1000559D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v2 = sub_10001D64C(&qword_10010FF30);
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_10001D64C(&qword_10010FF38);
  __chkstk_darwin(v32);
  v31[1] = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000CABE0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  char v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v31 - v14;
  uint64_t v16 = v1 + *(int *)(type metadata accessor for RegularContentView() + 24);
  uint64_t v17 = type metadata accessor for TodayContent();
  sub_100036850(v16 + *(int *)(v17 + 36), (uint64_t)v8, &qword_10010F340);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1000227A8((uint64_t)v8, &qword_10010F340);
    id v18 = [*(id *)(v16 + *(int *)(v17 + 28)) widgetConfig];
    id v19 = sub_100057614(v18, (SEL *)&selRef_backgroundColorLight);
    id v20 = sub_100057614(v18, (SEL *)&selRef_backgroundColorDark);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v19;
    *(void *)(v21 + 24) = v20;
    id v22 = objc_allocWithZone((Class)UIColor);
    aBlock[4] = sub_100042180;
    aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10006CB14;
    aBlock[3] = &unk_1000FD358;
    uint64_t v23 = _Block_copy(aBlock);
    id v24 = v19;
    id v25 = v20;
    [v22 initWithDynamicProvider:v23];
    _Block_release(v23);
    swift_release();
    uint64_t v26 = sub_1000CBBB0();

    aBlock[0] = v26;
    uint64_t result = sub_1000CBC70();
    uint64_t v28 = result;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
    uint64_t v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
    __chkstk_darwin(v29);
    v31[-2] = v1;
    sub_1000CB8C0();
    sub_100036A5C(&qword_10010FF40, &qword_10010FF30);
    uint64_t v30 = v34;
    sub_1000CBA70();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v30);
    sub_100058434();
    uint64_t v28 = sub_1000CBC70();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  *uint64_t v35 = v28;
  return result;
}

uint64_t sub_100055EB4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RegularContentView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10001D64C(&qword_10010FF98);
  uint64_t v26 = *(void *)(v7 - 8);
  uint64_t v8 = v26;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  char v13 = (char *)&v22 - v12;
  type metadata accessor for TodayContent();
  sub_100058A00(a1, (uint64_t)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for RegularContentView);
  unint64_t v14 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = swift_allocObject();
  sub_100058AFC((uint64_t)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, (uint64_t (*)(void))type metadata accessor for RegularContentView);
  type metadata accessor for SectionView();
  sub_1000589B8(&qword_10010FFA0, (void (*)(uint64_t))type metadata accessor for SectionView);
  id v25 = v13;
  sub_1000CBCA0();
  sub_1000CBD20();
  sub_1000CB3E0();
  uint64_t v34 = v42;
  uint64_t v33 = v44;
  uint64_t v32 = v46;
  uint64_t v31 = v48;
  uint64_t v30 = v50;
  uint64_t v29 = v52;
  uint64_t v28 = v54;
  uint64_t v27 = v55;
  char v41 = 1;
  char v40 = v43;
  char v39 = v45;
  char v38 = v47;
  char v37 = v49;
  unsigned __int8 v36 = v51;
  unsigned __int8 v35 = v53;
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  id v24 = v11;
  v16(v11, v13, v7);
  LOBYTE(v13) = v41;
  LOBYTE(a1) = v40;
  LOBYTE(v6) = v39;
  LOBYTE(v14) = v38;
  char v17 = v37;
  int v22 = v36;
  int v23 = v35;
  v16(a2, v11, v7);
  id v18 = &a2[*(int *)(sub_10001D64C(&qword_10010FFA8) + 48)];
  *(void *)id v18 = 0;
  v18[8] = (char)v13;
  *((void *)v18 + 2) = v34;
  v18[24] = a1;
  *((void *)v18 + 4) = v33;
  v18[40] = v6;
  *((void *)v18 + 6) = v32;
  v18[56] = v14;
  *((void *)v18 + 8) = v31;
  v18[72] = v17;
  *((void *)v18 + 10) = v30;
  v18[88] = v22;
  *((void *)v18 + 12) = v29;
  v18[104] = v23;
  uint64_t v19 = v27;
  *((void *)v18 + 14) = v28;
  *((void *)v18 + 15) = v19;
  id v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  v20(v25, v7);
  return ((uint64_t (*)(char *, uint64_t))v20)(v24, v7);
}

uint64_t sub_10005633C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for TodayContent();
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Section();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10 - 8);
  unint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v30 - v15;
  uint64_t result = type metadata accessor for RegularContentView();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = a2 + *(int *)(result + 24);
    uint64_t v19 = *(void *)(v18 + *(int *)(v7 + 32));
    if (*(void *)(v19 + 16) > a1)
    {
      uint64_t v20 = v19
          + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
          + *(void *)(v11 + 72) * a1;
      sub_100058A00(v20, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Section);
      sub_100058A00(v18, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TodayContent);
      sub_100058A00(v20, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Section);
      sub_10005661C(a1, (uint64_t)v31);
      sub_100058A68((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Section);
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v22 = swift_getKeyPath();
      int v23 = (int *)type metadata accessor for SectionView();
      *(void *)(a3 + v23[8]) = v22;
      sub_10001D64C(&qword_10010FE40);
      swift_storeEnumTagMultiPayload();
      sub_100058AFC((uint64_t)v16, a3, (uint64_t (*)(void))type metadata accessor for Section);
      uint64_t result = sub_100058AFC((uint64_t)v9, a3 + v23[5], (uint64_t (*)(void))type metadata accessor for TodayContent);
      uint64_t v24 = a3 + v23[6];
      long long v25 = v31[7];
      *(_OWORD *)(v24 + 96) = v31[6];
      *(_OWORD *)(v24 + 112) = v25;
      *(_OWORD *)(v24 + 128) = v31[8];
      *(void *)(v24 + 144) = v32;
      long long v26 = v31[3];
      *(_OWORD *)(v24 + 32) = v31[2];
      *(_OWORD *)(v24 + 48) = v26;
      long long v27 = v31[5];
      *(_OWORD *)(v24 + 64) = v31[4];
      *(_OWORD *)(v24 + 80) = v27;
      long long v28 = v31[1];
      *(_OWORD *)uint64_t v24 = v31[0];
      *(_OWORD *)(v24 + 16) = v28;
      uint64_t v29 = a3 + v23[7];
      *(void *)uint64_t v29 = KeyPath;
      *(unsigned char *)(v29 + 8) = 0;
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_10005661C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = type metadata accessor for RegularContentView();
    uint64_t v6 = v2 + *(int *)(v5 + 24);
    BOOL v7 = v3 != *(void *)(*(void *)(v6 + *(int *)(type metadata accessor for TodayContent() + 24)) + 16);
    uint64_t v8 = (double *)(v2 + *(int *)(v5 + 28));
    double v9 = sub_10005C338();
    id v10 = sub_10005DC00();
    [v10 nt_scaledValueForValue:1.0];
    double v12 = v11;

    double v13 = v12 * 12.0 + *v8 + 6.0;
    id v14 = sub_10005DC00();
    sub_10005C3C0((uint64_t)v27);
    uint64_t v15 = v27[0];
    uint64_t v16 = v27[1];
    uint64_t v17 = v27[2];
    uint64_t v18 = v27[3];
    char v19 = v28;
    uint64_t v20 = v30;
    long long v25 = v29;
    long long v26 = v32;
    uint64_t v21 = v33;
    double v22 = v8[1];
    sub_10005DFFC();
    char v34 = v19;
    long long v24 = v31;
    *(unsigned char *)a2 = v7;
    *(double *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = 0x402E000000000000;
    *(double *)(a2 + 24) = v13;
    *(void *)(a2 + 32) = v14;
    *(void *)(a2 + 40) = v15;
    *(void *)(a2 + 48) = v16;
    *(void *)(a2 + 56) = v17;
    *(void *)(a2 + 64) = v18;
    *(unsigned char *)(a2 + 72) = v19;
    *(_OWORD *)(a2 + 80) = v25;
    *(void *)(a2 + 96) = v20;
    *(_OWORD *)(a2 + 104) = v24;
    *(_OWORD *)(a2 + 120) = v26;
    *(void *)(a2 + 136) = v21;
    *(double *)(a2 + 144) = v22 - v23;
  }
}

__n128 sub_100056788@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1000CB6F0();
  sub_1000567F8(a1, (uint64_t *)v10);
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  __n128 result = (__n128)v10[0];
  long long v8 = v10[1];
  long long v9 = v10[2];
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(__n128 *)(a2 + 24) = result;
  *(_OWORD *)(a2 + 40) = v8;
  *(_OWORD *)(a2 + 56) = v9;
  *(void *)(a2 + 72) = v5;
  *(void *)(a2 + 80) = v6;
  return result;
}

uint64_t sub_1000567F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10001D64C(&qword_10010DE20);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RegularContentView();
  uint64_t v8 = a1 + *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for TodayContent();
  sub_100036850(v8 + *(int *)(v9 + 20), (uint64_t)v6, &qword_10010DE20);
  uint64_t v10 = type metadata accessor for Banner();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v6, 1, v10) == 1)
  {
    sub_1000227A8((uint64_t)v6, &qword_10010DE20);
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v18 = &v6[*(int *)(v10 + 40)];
    uint64_t v20 = (void *)*((void *)v18 + 1);
    char v21 = v18[16];
    long long v29 = *(void **)v18;
    char v19 = v29;
    char v28 = v20;
    sub_10001DB84(v29, v20);
    sub_100058A68((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Banner);
    sub_100056AF0(v19, v20, v21, v30);
    uint64_t v27 = v30[0];
    id v22 = sub_10005DC00();
    [v22 nt_scaledValueForValue:1.0];

    sub_10005C338();
    sub_10005DFFC();
    uint64_t v23 = a1 + *(int *)(v7 + 20);
    char v37 = *(unsigned char *)(v23 + 32);
    long long v24 = *(_OWORD *)(v23 + 16);
    v36[0] = *(_OWORD *)v23;
    v36[1] = v24;
    sub_1000365A0((uint64_t)v36, (uint64_t)v38, &qword_10010EA10);
    sub_10003295C((uint64_t)v38, (void (*)(void, void, void, void, void))sub_10002AB70);
    sub_100057BE8();
    sub_10003295C((uint64_t)v36, (void (*)(void, void, void, void, void))sub_10002AFD0);
    sub_1000CBD20();
    sub_1000CB310();
    uint64_t v12 = v30[1];
    uint64_t v13 = v31;
    uint64_t v14 = v32;
    uint64_t v15 = v33;
    uint64_t v16 = v34;
    uint64_t v17 = v35;
    uint64_t v11 = v27;
    sub_10001DE30(v29, v28);
  }
  uint64_t result = sub_1000559D4(v30);
  uint64_t v26 = v30[0];
  *a2 = v11;
  a2[1] = v12;
  a2[2] = v13;
  a2[3] = v14;
  a2[4] = v15;
  a2[5] = v16;
  a2[6] = v17;
  a2[7] = v26;
  return result;
}

void sub_100056AF0(void *a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v62 = a4;
  uint64_t v7 = sub_10001D64C(&qword_10010FF18);
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v61 = v7;
  __chkstk_darwin(v7);
  long long v58 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_10001D64C(&qword_10010FF20);
  __chkstk_darwin(v59);
  long long v57 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_1000CBB00();
  uint64_t v10 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v54 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000CB2A0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v55 = (uint64_t)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v52 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  char v21 = (char *)&v52 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v52 - v22;
  id v63 = a1;
  id v24 = a2;
  uint64_t v56 = v13;
  long long v25 = (uint64_t (**)(char *, uint64_t))(v13 + 88);
  if (a3)
  {
    sub_100057E58(&qword_10010FE40, (uint64_t (*)(void))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v21);
    uint64_t v30 = *v25;
    int v31 = (*v25)(v21, v12);
    int v32 = enum case for ColorScheme.light(_:);
    if (v31 == enum case for ColorScheme.light(_:))
    {
      id v33 = v63;
      uint64_t v54 = (char *)sub_1000A4BF8(v33);
    }
    else
    {
      if (v31 == enum case for ColorScheme.dark(_:))
      {
        char v37 = v24;
        id v38 = v24;
        uint64_t v54 = (char *)sub_1000A4BF8(v38);

LABEL_13:
        sub_100057E58(&qword_10010FE40, (uint64_t (*)(void))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v18);
        int v44 = v30(v18, v12);
        if (v44 == v32)
        {
          id v45 = v63;
          [v63 startPoint];
          [v45 startPoint];
        }
        else
        {
          id v45 = v63;
          if (v44 == enum case for ColorScheme.dark(_:))
          {
            [v37 startPoint];
            [v37 startPoint];
          }
          else
          {
            [v63 startPoint];
            [v45 startPoint];
            (*(void (**)(char *, uint64_t))(v56 + 8))(v18, v12);
          }
        }
        uint64_t v46 = v55;
        sub_100057E58(&qword_10010FE40, (uint64_t (*)(void))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, v55);
        int v47 = v30((char *)v46, v12);
        if (v47 == v32)
        {
          [v45 endPoint];
          [v45 endPoint];
        }
        else if (v47 == enum case for ColorScheme.dark(_:))
        {
          [v37 endPoint];
          [v37 endPoint];
        }
        else
        {
          [v45 endPoint];
          [v45 endPoint];
          (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v46, v12);
        }
        sub_1000CB370();
        long long v64 = v67[0];
        long long v65 = v67[1];
        uint64_t v66 = v68;
        unint64_t v48 = sub_100058354();
        char v49 = v58;
        sub_1000CBA20();
        sub_1000583A8((uint64_t)v67);
        *(void *)&long long v64 = &type metadata for LinearGradient;
        *((void *)&v64 + 1) = v48;
        uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
        uint64_t v51 = v61;
        sub_1000CB9E0();
        (*(void (**)(char *, uint64_t))(v60 + 8))(v49, v51);
        *(void *)&long long v64 = v51;
        *((void *)&v64 + 1) = OpaqueTypeConformance2;
        swift_getOpaqueTypeConformance2();
        uint64_t v29 = sub_1000CBC70();

        goto LABEL_24;
      }
      id v43 = v63;
      uint64_t v54 = (char *)sub_1000A4BF8(v43);

      (*(void (**)(char *, uint64_t))(v56 + 8))(v21, v12);
    }
    char v37 = v24;
    goto LABEL_13;
  }
  sub_100057E58(&qword_10010FE40, (uint64_t (*)(void))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v23);
  int v26 = (*v25)(v23, v12);
  if (v26 == enum case for ColorScheme.light(_:))
  {
    id v27 = v63;
    [v27 red];
    [v27 green];
    [v27 blue];
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v54, enum case for Color.RGBColorSpace.sRGB(_:), v53);
    uint64_t v28 = sub_1000CBBA0();

    *(void *)&v67[0] = v28;
    uint64_t v29 = sub_1000CBC70();
  }
  else
  {
    uint64_t v34 = (void (**)(char *, void, uint64_t))(v10 + 104);
    if (v26 != enum case for ColorScheme.dark(_:))
    {
      uint64_t v39 = v12;
      id v40 = v63;
      [v40 red];
      [v40 green];
      [v40 blue];
      (*v34)(v54, enum case for Color.RGBColorSpace.sRGB(_:), v53);
      uint64_t v41 = sub_1000CBBA0();

      *(void *)&v67[0] = v41;
      uint64_t v42 = sub_1000CBC70();

      *uint64_t v62 = v42;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v23, v39);
      return;
    }
    id v35 = v24;
    [v35 red];
    [v35 green];
    [v35 blue];
    (*v34)(v54, enum case for Color.RGBColorSpace.sRGB(_:), v53);
    uint64_t v36 = sub_1000CBBA0();

    *(void *)&v67[0] = v36;
    uint64_t v29 = sub_1000CBC70();
  }
LABEL_24:
  *uint64_t v62 = v29;
}

void sub_100057498(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for RegularContentView() + 24);
  id v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v3
                                                             + *(int *)(type metadata accessor for TodayContent() + 28)), "widgetConfig"));
  id v5 = sub_100057614(v4, (SEL *)&selRef_backgroundColorLight);
  id v6 = sub_100057614(v4, (SEL *)&selRef_backgroundColorDark);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  id v8 = objc_allocWithZone((Class)UIColor);
  v13[4] = sub_100058C34;
  v13[5] = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10006CB14;
  v13[3] = &unk_1000FD3A8;
  uint64_t v9 = _Block_copy(v13);
  id v10 = v5;
  id v11 = v6;
  [v8 initWithDynamicProvider:v9];
  _Block_release(v9);
  swift_release();
  uint64_t v12 = sub_1000CBBB0();

  *a2 = v12;
}

id sub_100057614(void *a1, SEL *a2)
{
  if (a1 && (id v2 = [a1 *a2]) != 0)
  {
    uint64_t v3 = v2;
    sub_1000CC1F0();

    swift_bridgeObjectRetain();
    NSString v4 = sub_1000CC1C0();
    swift_bridgeObjectRelease();
    id v5 = [self colorWithHexString:v4];

    [v5 red];
    double v7 = v6;
    [v5 green];
    double v9 = v8;
    [v5 blue];
    double v11 = v10;
    [v5 alpha];
    id v13 = [objc_allocWithZone((Class)UIColor) initWithRed:v7 green:v9 blue:v11 alpha:v12];
    swift_bridgeObjectRelease();

    return v13;
  }
  else
  {
    id v15 = [self clearColor];
    return v15;
  }
}

uint64_t sub_100057790@<X0>(uint64_t a1@<X8>)
{
  uint64_t v10 = a1;
  uint64_t v11 = sub_1000CB7C0();
  uint64_t v2 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  NSString v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10001D64C(&qword_10010FEF0);
  __chkstk_darwin(v5);
  double v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)double v7 = sub_1000CB700();
  *((void *)v7 + 1) = 0;
  v7[16] = 0;
  uint64_t v8 = sub_10001D64C(&qword_10010FEF8);
  sub_100055008(v1, (uint64_t)&v7[*(int *)(v8 + 44)]);
  sub_1000CB7B0();
  uint64_t v12 = v1;
  sub_1000CBD20();
  sub_10001D64C(&qword_10010FF00);
  sub_100036A5C(&qword_10010FF08, &qword_10010FEF0);
  sub_100036A5C(&qword_10010FF10, &qword_10010FF00);
  sub_1000CBA80();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v11);
  return sub_1000227A8((uint64_t)v7, &qword_10010FEF0);
}

double sub_1000579A4@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_100056788(*(void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t sub_1000579AC(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000CB5C0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  double v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = sub_1000CC520();
  double v9 = sub_1000CB7E0();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = sub_1000B2E18(1819242306, 0xE400000000000000, &v14);
    sub_1000CC660();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1000CB5B0();
  swift_getAtKeyPath();
  sub_10002AFC4(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

uint64_t sub_100057BB0@<X0>(uint64_t a1@<X8>)
{
  return sub_100057E58(&qword_10010E8E0, (uint64_t (*)(void))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x80000001000DBA10, a1);
}

double sub_100057BE8()
{
  uint64_t v1 = sub_1000CB5C0();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v0[32] == 1) {
    return *(double *)v0;
  }
  swift_retain();
  os_log_type_t v6 = sub_1000CC520();
  double v7 = sub_1000CB7E0();
  os_log_type_t v8 = v6;
  if (os_log_type_enabled(v7, v6))
  {
    double v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)double v9 = 136315138;
    v10[0] = v9 + 4;
    v10[1] = sub_1000B2E18(0x65736E4965676445, 0xEA00000000007374, &v11);
    sub_1000CC660();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1000CB5B0();
  swift_getAtKeyPath();
  sub_10003295C((uint64_t)v0, (void (*)(void, void, void, void, void))sub_10002AFD0);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return *(double *)&v11;
}

uint64_t sub_100057E1C@<X0>(uint64_t a1@<X8>)
{
  return sub_100057E58(&qword_10010F988, (uint64_t (*)(void))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, a1);
}

uint64_t sub_100057E58@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v9 = v5;
  uint64_t v11 = sub_1000CB5C0();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10001D64C(a1);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100036850(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    os_log_type_t v20 = sub_1000CC520();
    char v21 = sub_1000CB7E0();
    if (os_log_type_enabled(v21, v20))
    {
      unint64_t v25 = a4;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v26 = a5;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v28 = sub_1000B2E18(v27, v25, &v29);
      sub_1000CC660();
      _os_log_impl((void *)&_mh_execute_header, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1000CB5B0();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_100058110@<X0>(uint64_t a1@<X8>)
{
  return sub_100057E58(&qword_10010E9F0, (uint64_t (*)(void))&type metadata accessor for RedactionReasons, 0xD000000000000010, 0x80000001000DBA30, a1);
}

double sub_100058148(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000CB5C0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  double v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return *(double *)&a1;
  }
  swift_retain();
  os_log_type_t v8 = sub_1000CC520();
  uint64_t v9 = sub_1000CB7E0();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = sub_1000B2E18(0x74616F6C464743, 0xE700000000000000, &v14);
    sub_1000CC660();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1000CB5B0();
  swift_getAtKeyPath();
  sub_10002AFC4(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return *(double *)&v14;
}

unint64_t sub_100058354()
{
  unint64_t result = qword_10010FF28;
  if (!qword_10010FF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FF28);
  }
  return result;
}

uint64_t sub_1000583A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000583D4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100058414(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100058424()
{
  return swift_release();
}

void sub_10005842C(uint64_t *a1@<X8>)
{
  sub_100057498(*(void *)(v1 + 16), a1);
}

unint64_t sub_100058434()
{
  unint64_t result = qword_10010FF48;
  if (!qword_10010FF48)
  {
    sub_10001D690(&qword_10010FF38);
    sub_100036A5C(&qword_10010FF40, &qword_10010FF30);
    sub_1000589B8((unint64_t *)&qword_10010EA98, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FF48);
  }
  return result;
}

unint64_t sub_100058504()
{
  unint64_t result = qword_10010FF78;
  if (!qword_10010FF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010FF78);
  }
  return result;
}

uint64_t sub_100058558()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for RegularContentView();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v27 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v5 = v0 + v4;
  sub_10001D64C(&qword_10010FE40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1000CB2A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v4, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = v5 + v2[5];
  sub_10002AFD0(*(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(void *)(v7 + 24), *(unsigned char *)(v7 + 32));
  os_log_type_t v8 = (id *)(v5 + v2[6]);

  uint64_t v9 = type metadata accessor for TodayContent();
  os_log_type_t v10 = (char *)v8 + *(int *)(v9 + 20);
  uint64_t v11 = (int *)type metadata accessor for Banner();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v11 - 1) + 48))(v10, 1, v11))
  {
    uint64_t v26 = v1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = &v10[v11[7]];
    uint64_t v13 = sub_1000CABE0();
    uint64_t v14 = *(void *)(v13 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    }
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void **)&v10[v11[9]];
    if (v15 != (void *)1) {

    }
    sub_10001DE30(*(void **)&v10[v11[10]], *(void **)&v10[v11[10] + 8]);
    uint64_t v4 = (v3 + 16) & ~v3;
    uint64_t v1 = v26;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v16 = (char *)v8 + *(int *)(v9 + 36);
  uint64_t v17 = sub_1000CABE0();
  uint64_t v18 = *(void *)(v17 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = v5 + v2[7];
  uint64_t v20 = type metadata accessor for LayoutContext();
  uint64_t v21 = v19 + *(int *)(v20 + 24);
  uint64_t v22 = sub_1000CBEC0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
  uint64_t v23 = v19 + *(int *)(v20 + 32);
  uint64_t v24 = sub_1000CB6D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);

  return _swift_deallocObject(v1, v4 + v27, v3 | 7);
}

uint64_t sub_100058938@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for RegularContentView() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10005633C(a1, v6, a2);
}

uint64_t sub_1000589B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100058A00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100058A68(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100058AC8@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1000CB410();
  *a1 = v3;
  return result;
}

uint64_t sub_100058AFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100058B64()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_100058C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10001D64C((uint64_t *)&unk_10010E840);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1000D37C0;
  type metadata accessor for EntryRequest();
  sub_1000CC820();
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1000225F0();
  *(void *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = 0xE000000000000000;
  sub_100036814(0, (unint64_t *)&qword_100110C20);
  uint64_t v9 = (void *)sub_1000CC630();
  sub_1000CC530();
  sub_1000CB230();
  swift_bridgeObjectRelease();

  type metadata accessor for TodayContent();
  sub_1000CB0A0();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  swift_retain();
  uint64_t v11 = (void *)sub_1000CB010();
  sub_1000CB030();
  swift_release();
  swift_release();

  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  swift_retain();
  uint64_t v13 = (void *)sub_1000CB010();
  sub_1000CB040();
  swift_release();
  swift_release();
  swift_release();
}

uint64_t sub_100058E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContentServiceRequest();
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)&v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_100020110((void *)(a1 + 16), *(void *)(a1 + 40));
  uint64_t v9 = sub_100059574();
  uint64_t v10 = type metadata accessor for EntryRequest();
  sub_10005A034(a2 + *(int *)(v10 + 20), (uint64_t)v7 + *(int *)(v5 + 28), (uint64_t (*)(void))type metadata accessor for LayoutContext);
  sub_10005A034(a2 + *(int *)(v10 + 24), (uint64_t)v7 + *(int *)(v5 + 32), (uint64_t (*)(void))type metadata accessor for NewsWidgetInfo);
  *uint64_t v7 = v9;
  uint64_t v11 = *v8;
  uint64_t v15 = v7;
  uint64_t v16 = v11;
  sub_10001D64C(&qword_100110058);
  swift_allocObject();
  uint64_t v12 = sub_1000CB080();
  sub_10005A09C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ContentServiceRequest);
  return v12;
}

uint64_t sub_100058FD4(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = type metadata accessor for NewsTimelineEntry();
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005A034(a1, (uint64_t)&v7[*(int *)(v5 + 28)], (uint64_t (*)(void))type metadata accessor for TodayContent);
  sub_1000CACB0();
  a2(v7);
  return sub_10005A09C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NewsTimelineEntry);
}

uint64_t sub_1000590B0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  sub_1000CC510();
  sub_10001D64C((uint64_t *)&unk_10010E840);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000D37C0;
  sub_10001D64C((uint64_t *)&unk_10010E898);
  sub_1000CC820();
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000225F0();
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0xE000000000000000;
  sub_100036814(0, (unint64_t *)&qword_100110C20);
  uint64_t v5 = (void *)sub_1000CC630();
  sub_1000CB230();
  swift_bridgeObjectRelease();

  return a2(a1);
}

uint64_t sub_1000591E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for ContentServiceRequest();
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (id *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for TodayContent();
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v14 = (uint64_t *)((char *)&v24 - v13);
  sub_100020110((void *)(v2 + 16), *(void *)(v2 + 40));
  uint64_t v15 = sub_100059574();
  uint64_t v16 = type metadata accessor for EntryRequest();
  sub_10005A034(a1 + *(int *)(v16 + 20), (uint64_t)v8 + *(int *)(v6 + 28), (uint64_t (*)(void))type metadata accessor for LayoutContext);
  sub_10005A034(a1 + *(int *)(v16 + 24), (uint64_t)v8 + *(int *)(v6 + 32), (uint64_t (*)(void))type metadata accessor for NewsWidgetInfo);
  *uint64_t v8 = (id)v15;
  uint64_t v17 = (void *)sub_1000CAAF0();
  uint64_t v18 = sub_1000A9B88(v17);
  uint64_t v20 = v19;
  sub_1000A8D10(v8, v21, v12);
  sub_100084064(v18, v20, v14);
  sub_10005A09C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TodayContent);

  swift_bridgeObjectRelease();
  sub_10005A09C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ContentServiceRequest);
  uint64_t v22 = type metadata accessor for NewsTimelineEntry();
  sub_10005A034((uint64_t)v14, a2 + *(int *)(v22 + 20), (uint64_t (*)(void))type metadata accessor for TodayContent);
  sub_1000CACB0();
  return sub_10005A09C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for TodayContent);
}

uint64_t type metadata accessor for EntryService()
{
  return self;
}

uint64_t sub_100059444()
{
  return sub_1000CB080();
}

void sub_1000594A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t type metadata accessor for EntryRequest()
{
  uint64_t result = qword_1001100C8;
  if (!qword_1001100C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000594FC()
{
  return sub_100058E64(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100059518()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100059550(uint64_t a1)
{
  return sub_100058FD4(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_10005956C(uint64_t a1)
{
  return sub_1000590B0(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100059574()
{
  uint64_t v1 = v0;
  uint64_t v74 = type metadata accessor for EntryRequest();
  __chkstk_darwin(v74);
  uint64_t v72 = (uint64_t)&v69 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = (void *)sub_1000CBEC0();
  uint64_t v4 = *(v3 - 1);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v71 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v69 - v7;
  uint64_t v9 = (void *)sub_1000CABE0();
  unint64_t v10 = *(v9 - 1);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char **)((char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v73 = (char *)[objc_allocWithZone((Class)NTPBSectionSlotCostInfo) init];
  if (!v73)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  id v16 = [objc_allocWithZone((Class)NTPBTodayResultOperationInfo) init];
  if (!v16)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v17 = v16;
  uint64_t v18 = (double *)((char *)v0 + *(int *)(v74 + 20));
  uint64_t v77 = type metadata accessor for LayoutContext();
  uint64_t v70 = (double *)((char *)v18 + *(int *)(v77 + 28));
  [v17 setSlotsLimit:v70[1]];
  [v17 setRespectsWidgetSlotsLimit:1];
  [v17 setRespectsWidgetVisibleSectionsPerQueueLimit:1];
  uint64_t v78 = v18;
  uint64_t v19 = sub_10005C50C();
  if (v19 < 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  [v17 setSourceNameImageSizePreset:v19];
  id v76 = v17;
  [v17 setFetchWidgetConfig:1];
  id v20 = (id)FCURLForContainerizedUserAccountCachesDirectory();
  if (!v20)
  {
LABEL_40:
    uint64_t result = (*(uint64_t (**)(char **, uint64_t, uint64_t, void *))(v10 + 56))(v15, 1, 1, v9);
    goto LABEL_41;
  }
  uint64_t v21 = v20;
  sub_1000CABA0();

  (*(void (**)(char **, char *, void *))(v10 + 32))(v15, v12, v9);
  (*(void (**)(char **, void, uint64_t, void *))(v10 + 56))(v15, 0, 1, v9);
  uint64_t result = (*(uint64_t (**)(char **, uint64_t, void *))(v10 + 48))(v15, 1, v9);
  if (result != 1)
  {
    sub_1000CAB60(v23);
    unint64_t v25 = v24;
    (*(void (**)(char **, void *))(v10 + 8))(v15, v9);
    id v26 = v76;
    [v76 setAssetsDirectoryFileURL:v25];

    [v26 setThumbnailSizePreset:3];
    uint64_t v27 = v8;
    (*(void (**)(char *, char *, void *))(v4 + 16))(v8, (char *)v78 + *(int *)(v77 + 24), v3);
    int v28 = (*(uint64_t (**)(char *, void *))(v4 + 88))(v8, v3);
    uint64_t v29 = enum case for InternalWidgetFamily.systemSmall(_:);
    uint64_t v75 = v1;
    if (v28 == enum case for InternalWidgetFamily.systemSmall(_:))
    {
      uint64_t v30 = 1;
      int v31 = v71;
    }
    else if (v28 == enum case for InternalWidgetFamily.systemMedium(_:))
    {
      uint64_t v30 = 2;
      int v31 = v71;
    }
    else if (v28 == enum case for InternalWidgetFamily.systemLarge(_:))
    {
      uint64_t v30 = 3;
      int v31 = v71;
    }
    else
    {
      uint64_t v30 = 0;
      if (v28 == enum case for InternalWidgetFamily.systemExtraLarge(_:))
      {
        int v31 = v71;
      }
      else
      {
        int v31 = v71;
        if (v28 != enum case for InternalWidgetFamily.transparentMedium(_:))
        {
          if (v28 == enum case for InternalWidgetFamily.newsLargeTall(_:))
          {
            uint64_t v30 = 4;
          }
          else
          {
            (*(void (**)(char *, void *, void))(v4 + 8))(v27, v3, 0);
            uint64_t v30 = 0;
          }
        }
      }
    }
    [v26 setWidgetSize:v30];
    uint64_t v9 = *(void **)(v4 + 104);
    ((void (*)(char *, uint64_t, void *))v9)(v31, v29, v3);
    sub_100059FDC();
    sub_1000CC360();
    sub_1000CC360();
    uint64_t v33 = v79;
    uint64_t v32 = v80;
    uint64_t v15 = *(char ***)(v4 + 8);
    ((void (*)(char *, void *))v15)(v31, v3);
    uint64_t v34 = v72;
    sub_10005A034((uint64_t)v75, v72, (uint64_t (*)(void))type metadata accessor for EntryRequest);
    if (v32 == v33)
    {
      sub_10005A09C(v34, (uint64_t (*)(void))type metadata accessor for EntryRequest);
      uint64_t v35 = v77;
    }
    else
    {
      uint64_t v35 = v77;
      ((void (*)(char *, void, void *))v9)(v31, enum case for InternalWidgetFamily.accessoryRectangular(_:), v3);
      sub_1000CC360();
      sub_1000CC360();
      uint64_t v36 = v79;
      uint64_t v37 = v80;
      ((void (*)(char *, void *))v15)(v31, v3);
      sub_10005A09C(v34, (uint64_t (*)(void))type metadata accessor for EntryRequest);
      if (v37 != v36)
      {
        uint64_t v39 = v78;
        id v40 = sub_10005DC00();
        uint64_t v15 = &selRef_initWithUserIDProvider_;
        [v40 nt_scaledValueForValue:1.0];
        double v42 = v41;

        double v43 = *v39 + 6.0;
        uint64_t v12 = v73;
        [v73 setSectionTitleSlotCost:v42 * 12.0 + v43];
        double v44 = v39[1];
        sub_10005DFFC();
        [v12 setSectionFooterSlotCost:v44 - v45];
        [v12 setHeadlineSlotCost:sub_10005C338()];
        uint64_t v3 = v76;
        [v76 setDynamicThumbnailSizeMinimumSizeInPixels:*(double *)((char *)v39 + *(int *)(v35 + 36)) * 128.0, *(double *)((char *)v39 + *(int *)(v35 + 36)) * 128.0];
        [v3 setAllowSectionTitles:1];
        sub_10005DFFC();
        double v47 = v46 + v46 + 47.0;
        sub_10005DFFC();
        double v49 = v48 + v48;
        sub_10005F27C();
        [v3 setMinHeadlineScale:v47 / (v49 + v50)];
        sub_10005DFFC();
        double v52 = v51 + v51 + 128.0;
        sub_10005DFFC();
        double v54 = v53 + v53;
        sub_10005F27C();
        [v3 setMaxHeadlineScale:v52 / (v54 + v55)];
        id v56 = sub_10005DC00();
        [v56 nt_scaledValueForValue:1.0];
        double v58 = v57;

        double v59 = v43 + v58 * 12.0 + sub_10005C338();
        sub_10005DFFC();
        [v3 setBannerSlotCost:v59 + v44 - v60];
LABEL_23:
        uint64_t v1 = v75;
        [v3 setSectionSlotCostInfo:v12];
        [v3 setQualityOfService:25];
        id v61 = [self mainScreen];
        [v61 scale];
        double v63 = v62;

        [v3 setScale:v63];
        id v64 = [self activeInputModes];
        sub_100036814(0, &qword_100110068);
        unint64_t v10 = sub_1000CC3B0();

        if (!(v10 >> 62))
        {
          long long v65 = *(void **)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v65) {
            goto LABEL_30;
          }
          goto LABEL_25;
        }
LABEL_34:
        swift_bridgeObjectRetain();
        long long v65 = (void *)sub_1000CC890();
        swift_bridgeObjectRelease();
        if (!v65) {
          goto LABEL_30;
        }
LABEL_25:
        if ((v10 & 0xC000000000000001) != 0)
        {
          id v66 = (id)sub_1000CC780();
          goto LABEL_28;
        }
        if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v66 = *(id *)(v10 + 32);
LABEL_28:
          uint64_t v67 = v66;
          swift_bridgeObjectRelease();
          id v68 = [v67 primaryLanguage];

          if (!v68)
          {
            long long v65 = 0;
            goto LABEL_32;
          }
          sub_1000CC1F0();

          long long v65 = sub_1000CC1C0();
LABEL_30:
          swift_bridgeObjectRelease();
LABEL_32:
          [v3 setKeyboardInputMode:v65];

          [v3 setRequest:*v1];
          return (uint64_t)v3;
        }
        __break(1u);
        goto LABEL_38;
      }
    }
    uint64_t v12 = v73;
    [v73 setSectionTitleSlotCost:0.0];
    [v12 setSectionFooterSlotCost:0.0];
    uint64_t v3 = v76;
    [v76 slotsLimit];
    [v12 setHeadlineSlotCost:];
    double v38 = *(double *)((char *)v78 + *(int *)(v35 + 36));
    [v3 setDynamicThumbnailSizeMinimumSizeInPixels:*v70 * v38 v70[1] * v38];
    [v3 setAllowSectionTitles:0];
    goto LABEL_23;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100059FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A5874(a1, a2, a3, a4, *(uint64_t **)(v4 + 16), *(void *)(v4 + 24));
}

unint64_t sub_100059FDC()
{
  unint64_t result = qword_100110060;
  if (!qword_100110060)
  {
    sub_1000CBEC0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110060);
  }
  return result;
}

uint64_t sub_10005A034(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10005A09C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void **sub_10005A0FC(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    *(_OWORD *)((char *)a1 + v8) = *(_OWORD *)((char *)a2 + v8);
    uint64_t v11 = (int *)type metadata accessor for LayoutContext();
    uint64_t v12 = v11[6];
    uint64_t v33 = &v10[v12];
    uint64_t v34 = &v9[v12];
    uint64_t v13 = sub_1000CBEC0();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    uint64_t v15 = v4;
    v14(v34, v33, v13);
    *(_OWORD *)&v9[v11[7]] = *(_OWORD *)&v10[v11[7]];
    uint64_t v16 = v11[8];
    uint64_t v17 = &v9[v16];
    uint64_t v18 = &v10[v16];
    uint64_t v19 = sub_1000CB6D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    *(void *)&v9[v11[9]] = *(void *)&v10[v11[9]];
    *(void *)&v9[v11[10]] = *(void *)&v10[v11[10]];
    v9[v11[11]] = v10[v11[11]];
    v9[v11[12]] = v10[v11[12]];
    uint64_t v20 = *(int *)(a3 + 24);
    uint64_t v21 = (char *)v7 + v20;
    uint64_t v22 = (char *)a2 + v20;
    long long v35 = *(_OWORD *)((char *)a2 + v20);
    *(_OWORD *)((char *)v7 + v20) = v35;
    uint64_t v23 = type metadata accessor for NewsWidgetInfo();
    uint64_t v24 = *(int *)(v23 + 20);
    unint64_t v25 = &v21[v24];
    id v26 = &v22[v24];
    id v27 = (id)v35;
    v14(v25, v26, v13);
    uint64_t v28 = *(int *)(v23 + 24);
    uint64_t v29 = &v21[v28];
    uint64_t v30 = &v22[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_10005A30C(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for LayoutContext();
  uint64_t v6 = &v4[*(int *)(v5 + 24)];
  uint64_t v7 = sub_1000CBEC0();
  uint64_t v8 = *(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = &v4[*(int *)(v5 + 32)];
  uint64_t v10 = sub_1000CB6D0();
  (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = (id *)((char *)a1 + *(int *)(a2 + 24));

  uint64_t v12 = type metadata accessor for NewsWidgetInfo();
  v8((char *)v11 + *(int *)(v12 + 20), v7);

  return swift_bridgeObjectRelease();
}

void **sub_10005A438(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  *(_OWORD *)((char *)a1 + v5) = *(_OWORD *)((char *)a2 + v5);
  uint64_t v8 = (int *)type metadata accessor for LayoutContext();
  uint64_t v9 = v8[6];
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = sub_1000CBEC0();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  id v14 = v4;
  v13(v10, v11, v12);
  *(_OWORD *)&v6[v8[7]] = *(_OWORD *)&v7[v8[7]];
  uint64_t v15 = v8[8];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = &v7[v15];
  uint64_t v18 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  *(void *)&v6[v8[9]] = *(void *)&v7[v8[9]];
  *(void *)&v6[v8[10]] = *(void *)&v7[v8[10]];
  v6[v8[11]] = v7[v8[11]];
  v6[v8[12]] = v7[v8[12]];
  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  long long v34 = *(_OWORD *)((char *)a2 + v19);
  *(_OWORD *)((char *)a1 + v19) = v34;
  uint64_t v22 = type metadata accessor for NewsWidgetInfo();
  uint64_t v23 = *(int *)(v22 + 20);
  uint64_t v24 = &v20[v23];
  unint64_t v25 = &v21[v23];
  id v26 = (id)v34;
  v13(v24, v25, v12);
  uint64_t v27 = *(int *)(v22 + 24);
  uint64_t v28 = &v20[v27];
  uint64_t v29 = &v21[v27];
  uint64_t v30 = *((void *)v29 + 1);
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = v30;
  swift_bridgeObjectRetain();
  return a1;
}

void **sub_10005A5F4(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (void **)((char *)a1 + v9);
  uint64_t v11 = (char *)a2 + v9;
  *uint64_t v10 = *(void **)((char *)a2 + v9);
  v10[1] = *(void **)((char *)a2 + v9 + 8);
  uint64_t v12 = (int *)type metadata accessor for LayoutContext();
  uint64_t v13 = v12[6];
  id v14 = (char *)v10 + v13;
  uint64_t v15 = &v11[v13];
  uint64_t v16 = sub_1000CBEC0();
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24);
  v17(v14, v15, v16);
  uint64_t v18 = v12[7];
  uint64_t v19 = (void *)((char *)v10 + v18);
  uint64_t v20 = &v11[v18];
  *uint64_t v19 = *(void *)v20;
  v19[1] = *((void *)v20 + 1);
  uint64_t v21 = v12[8];
  uint64_t v22 = (char *)v10 + v21;
  uint64_t v23 = &v11[v21];
  uint64_t v24 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  *(void *)((char *)v10 + v12[9]) = *(void *)&v11[v12[9]];
  *(void *)((char *)v10 + v12[10]) = *(void *)&v11[v12[10]];
  *((unsigned char *)v10 + v12[11]) = v11[v12[11]];
  *((unsigned char *)v10 + v12[12]) = v11[v12[12]];
  uint64_t v25 = *(int *)(a3 + 24);
  id v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = *(void **)((char *)a2 + v25);
  uint64_t v29 = *((void *)v27 + 1);
  uint64_t v30 = *(void **)v26;
  *(void *)id v26 = v28;
  id v31 = v28;

  *((void *)v26 + 1) = v29;
  uint64_t v32 = type metadata accessor for NewsWidgetInfo();
  v17(&v26[*(int *)(v32 + 20)], &v27[*(int *)(v32 + 20)], v16);
  uint64_t v33 = *(int *)(v32 + 24);
  long long v34 = &v26[v33];
  long long v35 = &v27[v33];
  *(void *)long long v34 = *(void *)v35;
  *((void *)v34 + 1) = *((void *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_10005A7E4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  *(_OWORD *)((char *)a1 + v5) = *(_OWORD *)((char *)a2 + v5);
  id v8 = (int *)type metadata accessor for LayoutContext();
  uint64_t v9 = v8[6];
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = sub_1000CBEC0();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
  v13(v10, v11, v12);
  *(_OWORD *)&v6[v8[7]] = *(_OWORD *)&v7[v8[7]];
  uint64_t v14 = v8[8];
  uint64_t v15 = &v6[v14];
  uint64_t v16 = &v7[v14];
  uint64_t v17 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  *(void *)&v6[v8[9]] = *(void *)&v7[v8[9]];
  *(void *)&v6[v8[10]] = *(void *)&v7[v8[10]];
  v6[v8[11]] = v7[v8[11]];
  v6[v8[12]] = v7[v8[12]];
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(_OWORD *)((char *)a1 + v18) = *(_OWORD *)((char *)a2 + v18);
  uint64_t v21 = type metadata accessor for NewsWidgetInfo();
  v13(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v12);
  *(_OWORD *)&v19[*(int *)(v21 + 24)] = *(_OWORD *)&v20[*(int *)(v21 + 24)];
  return a1;
}

void **sub_10005A97C(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(_OWORD *)((char *)a1 + v7) = *(_OWORD *)((char *)a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for LayoutContext();
  uint64_t v11 = v10[6];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = sub_1000CBEC0();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  *(_OWORD *)&v8[v10[7]] = *(_OWORD *)&v9[v10[7]];
  uint64_t v16 = v10[8];
  uint64_t v17 = &v8[v16];
  uint64_t v18 = &v9[v16];
  uint64_t v19 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  *(void *)&v8[v10[9]] = *(void *)&v9[v10[9]];
  *(void *)&v8[v10[10]] = *(void *)&v9[v10[10]];
  v8[v10[11]] = v9[v10[11]];
  v8[v10[12]] = v9[v10[12]];
  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = *(uint64_t *)((char *)a2 + v20);
  uint64_t v24 = *((void *)v22 + 1);
  uint64_t v25 = *(void **)v21;
  *(void *)uint64_t v21 = v23;

  *((void *)v21 + 1) = v24;
  uint64_t v26 = type metadata accessor for NewsWidgetInfo();
  v15(&v21[*(int *)(v26 + 20)], &v22[*(int *)(v26 + 20)], v14);
  uint64_t v27 = *(int *)(v26 + 24);
  uint64_t v28 = &v21[v27];
  uint64_t v29 = &v22[v27];
  uint64_t v31 = *(void *)v29;
  uint64_t v30 = *((void *)v29 + 1);
  *(void *)uint64_t v28 = v31;
  *((void *)v28 + 1) = v30;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10005AB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005AB50);
}

uint64_t sub_10005AB50(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for LayoutContext();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for NewsWidgetInfo();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_10005AC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005AC90);
}

void *sub_10005AC90(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for LayoutContext();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for NewsWidgetInfo();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_10005ADBC()
{
  uint64_t result = type metadata accessor for LayoutContext();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NewsWidgetInfo();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_10005AE98(_OWORD *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    uint64_t v7 = a3[6];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_1000CBEC0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[8];
    *(_OWORD *)((char *)v4 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_1000CB6D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    uint64_t v15 = a3[10];
    *(void *)((char *)v4 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    *(void *)((char *)v4 + v15) = *(void *)((char *)a2 + v15);
    uint64_t v16 = a3[12];
    *((unsigned char *)v4 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *((unsigned char *)v4 + v16) = *((unsigned char *)a2 + v16);
  }
  return v4;
}

uint64_t sub_10005AFEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_1000CBEC0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t v7 = sub_1000CB6D0();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

_OWORD *sub_10005B0A4(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1000CBEC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  uint64_t v14 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v15 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  return a1;
}

void *sub_10005B1A8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1000CBEC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  uint64_t v13 = a3[8];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  return a1;
}

_OWORD *sub_10005B2D0(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1000CBEC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v15 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  return a1;
}

_OWORD *sub_10005B3D4(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1000CBEC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v15 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  return a1;
}

uint64_t sub_10005B4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005B4EC);
}

uint64_t sub_10005B4EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000CBEC0();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[6];
  }
  else
  {
    uint64_t v10 = sub_1000CB6D0();
    if (*(_DWORD *)(*(void *)(v10 - 8) + 84) != a2)
    {
      unsigned int v13 = *(unsigned __int8 *)(a1 + a3[11]);
      if (v13 >= 2) {
        return ((v13 + 2147483646) & 0x7FFFFFFF) + 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[8];
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);

  return v11(a1 + v9, a2, v7);
}

uint64_t sub_10005B60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005B620);
}

uint64_t sub_10005B620(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_1000CBEC0();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
  }
  else
  {
    uint64_t result = sub_1000CB6D0();
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(unsigned char *)(a1 + a4[11]) = a2 + 1;
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[8];
  }
  unsigned int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

uint64_t type metadata accessor for LayoutContext()
{
  uint64_t result = qword_100110160;
  if (!qword_100110160) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005B778()
{
  uint64_t result = sub_1000CBEC0();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1000CB6D0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

id sub_10005B86C()
{
  uint64_t v1 = sub_1000CB6D0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v21 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = self;
  id v22 = v11;
  uint64_t v23 = v0 + *(int *)(type metadata accessor for LayoutContext() + 32);
  unint64_t v24 = 0x80000001000DBB40;
  sub_10005D930((unsigned int *)&enum case for ContentSizeCategory.medium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraSmall(_:), 0x80000001000DBB40, 150, (uint64_t)v8);
  sub_10005D930((unsigned int *)&enum case for ContentSizeCategory.accessibilityMedium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:), 0x80000001000DBB10, 163, (uint64_t)v5);
  sub_100050A50((uint64_t)v8, (uint64_t)v5, (uint64_t)v10);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v2 + 8);
  v12(v5, v1);
  v12(v8, v1);
  unsigned int v13 = sub_100050790();
  v12(v10, v1);
  id v14 = [v11 nt_preferredFontForCondensedTextStyle:2 contentSizeCategory:v13];

  [v14 nt_scaledValueForValue:1.0];
  double v16 = v15;

  sub_10005D930((unsigned int *)&enum case for ContentSizeCategory.medium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraSmall(_:), v24, 150, (uint64_t)v8);
  sub_10005D930((unsigned int *)&enum case for ContentSizeCategory.accessibilityMedium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:), 0x80000001000DBB10, 163, (uint64_t)v5);
  sub_100050A50((uint64_t)v8, (uint64_t)v5, (uint64_t)v10);
  v12(v5, v1);
  v12(v8, v1);
  uint64_t v17 = sub_100050790();
  v12(v10, v1);
  id v18 = [v22 nt_preferredFontForCondensedTextStyle:2 contentSizeCategory:v17];

  id v19 = [v18 fontWithSize:v16 * 15.0];
  return v19;
}

uint64_t sub_10005BB94()
{
  uint64_t v1 = type metadata accessor for LayoutContext();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000CBEC0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v0 + *(int *)(v1 + 24), v4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (result != enum case for InternalWidgetFamily.systemSmall(_:))
  {
    BOOL v10 = result == enum case for InternalWidgetFamily.systemMedium(_:)
       || result == enum case for InternalWidgetFamily.systemLarge(_:)
       || result == enum case for InternalWidgetFamily.newsLargeTall(_:);
    if (!v10 && result != enum case for InternalWidgetFamily.accessoryRectangular(_:))
    {
      sub_10005DF98(v0, (uint64_t)v3);
      unint64_t v11 = 0;
      unint64_t v12 = 0xE000000000000000;
      sub_1000CC750(38);
      swift_bridgeObjectRelease();
      unint64_t v11 = 0xD000000000000024;
      unint64_t v12 = 0x80000001000DBC90;
      sub_10005FB38((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
      v13._countAndFlagsBits = sub_1000CCA20();
      sub_1000CC2B0(v13);
      swift_bridgeObjectRelease();
      uint64_t result = sub_1000CC870();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10005BE10(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6567616D69;
  }
  else {
    uint64_t v3 = 0x536D75696D657270;
  }
  if (v2) {
    unint64_t v4 = 0xEB000000006C6165;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6567616D69;
  }
  else {
    uint64_t v5 = 0x536D75696D657270;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xEB000000006C6165;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_1000CCA30();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10005BEBC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x746E656964617267;
  }
  else {
    uint64_t v3 = 0x64696C6F73;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x746E656964617267;
  }
  else {
    uint64_t v5 = 0x64696C6F73;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_1000CCA30();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10005BF60(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6567617373656DLL;
  }
  else {
    uint64_t v3 = 0x656E696C64616568;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6567617373656DLL;
  }
  else {
    uint64_t v5 = 0x656E696C64616568;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_1000CCA30();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10005C008(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE90000000000006ELL;
  uint64_t v3 = 0x696772614D706F74;
  unint64_t v4 = 0xE90000000000006ELL;
  uint64_t v5 = a1;
  unint64_t v6 = 0x696772614D706F74;
  switch(v5)
  {
    case 1:
      unint64_t v6 = 0x614D6D6F74746F62;
      unint64_t v4 = 0xEC0000006E696772;
      break;
    case 2:
      unint64_t v6 = 0x6E49796C696D6166;
      unint64_t v4 = 0xE900000000000074;
      break;
    case 3:
      unint64_t v6 = 0x5379616C70736964;
      unint64_t v4 = 0xEB00000000657A69;
      break;
    case 4:
      unint64_t v4 = 0x80000001000DAF30;
      unint64_t v6 = 0xD00000000000001BLL;
      break;
    case 5:
      unint64_t v6 = 0x5379616C70736964;
      unint64_t v4 = 0xEC000000656C6163;
      break;
    case 6:
      unint64_t v6 = 0x696C64616548746ELL;
      unint64_t v4 = 0xEF656C616353656ELL;
      break;
    case 7:
      unint64_t v6 = 0x686563616C507369;
      unint64_t v4 = 0xED00007265646C6FLL;
      break;
    case 8:
      unint64_t v6 = 0x6569766572507369;
      unint64_t v4 = 0xE900000000000077;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v7 = 0x614D6D6F74746F62;
      uint64_t v8 = 1852401522;
      goto LABEL_19;
    case 2:
      unint64_t v2 = 0xE900000000000074;
      if (v6 != 0x6E49796C696D6166) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 3:
      unint64_t v2 = 0xEB00000000657A69;
      if (v6 != 0x5379616C70736964) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 4:
      unint64_t v2 = 0x80000001000DAF30;
      if (v6 != 0xD00000000000001BLL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      uint64_t v7 = 0x5379616C70736964;
      uint64_t v8 = 1701601635;
LABEL_19:
      unint64_t v2 = v8 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      if (v6 != v7) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 6:
      unint64_t v2 = 0xEF656C616353656ELL;
      if (v6 != 0x696C64616548746ELL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 7:
      uint64_t v3 = 0x686563616C507369;
      unint64_t v2 = 0xED00007265646C6FLL;
      goto LABEL_24;
    case 8:
      unint64_t v2 = 0xE900000000000077;
      if (v6 != 0x6569766572507369) {
        goto LABEL_28;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v6 != v3) {
        goto LABEL_28;
      }
LABEL_25:
      if (v4 == v2) {
        char v9 = 1;
      }
      else {
LABEL_28:
      }
        char v9 = sub_1000CCA30();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

double sub_10005C338()
{
  sub_10005DFFC();
  double v2 = v1;
  sub_10005F27C();
  double v4 = v3;
  double v5 = *(double *)(v0 + *(int *)(type metadata accessor for LayoutContext() + 40));
  sub_10005F27C();
  double v7 = v5 * v6;
  sub_10005DFFC();
  double v9 = v7 - (v8 + v8);
  sub_10005DFFC();
  double v11 = v9 + (v5 + v5) * v10;
  sub_10005F27C();
  double v13 = v2 + v4 * (sub_10005ED08() * (v11 / v12));
  sub_10005DFFC();
  return v14 + v13;
}

uint64_t sub_10005C3C0@<X0>(uint64_t a1@<X8>)
{
  id v3 = sub_10005B86C();
  sub_10005F27C();
  double v5 = v4;
  double v6 = *(double *)(v1 + *(int *)(type metadata accessor for LayoutContext() + 40));
  sub_10005F27C();
  double v8 = v6 * v7;
  sub_10005DFFC();
  double v10 = v8 - (v9 + v9);
  sub_10005DFFC();
  double v12 = v10 + (v6 + v6) * v11;
  sub_10005F27C();
  double v14 = v5 * (sub_10005ED08() * (v12 / v13));
  uint64_t v15 = sub_10005EC70();
  uint64_t v17 = v16;
  char v19 = v18;
  sub_10005E358();
  uint64_t v21 = v20;
  sub_10005BB94();
  uint64_t v23 = v22;
  sub_10005E644();
  uint64_t v25 = v24;
  id v26 = sub_10005E9F0();
  id v27 = [self nt_preferredFontForCondensedTextStyle:2 contentSizeCategory:UIContentSizeCategoryLarge];
  sub_10005E358();
  uint64_t v29 = v28;
  sub_10005E358();
  double v31 = v30 + 3.0;
  uint64_t result = sub_10005DFFC();
  *(void *)a1 = v3;
  *(double *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v15;
  *(void *)(a1 + 24) = v17;
  *(unsigned char *)(a1 + 32) = v19 & 1;
  *(void *)(a1 + 40) = v21;
  *(void *)(a1 + 48) = v23;
  *(void *)(a1 + 56) = v25;
  *(void *)(a1 + 64) = v26;
  *(void *)(a1 + 72) = v27;
  *(void *)(a1 + 80) = v29;
  *(double *)(a1 + 88) = v31;
  *(void *)(a1 + 96) = v33;
  return result;
}

uint64_t sub_10005C50C()
{
  double v1 = *(double *)(v0 + *(int *)(type metadata accessor for LayoutContext() + 36));
  sub_10005E358();
  double v3 = v1 * v2;
  BOOL v4 = v3 >= 24.0 || v3 < 22.0;
  uint64_t v5 = 1;
  if (v4) {
    uint64_t v5 = 2;
  }
  if (v3 >= 22.0 || v3 < 0.0) {
    return v5;
  }
  else {
    return 0;
  }
}

unint64_t sub_10005C568(char a1)
{
  unint64_t result = 0x696772614D706F74;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x614D6D6F74746F62;
      break;
    case 2:
      unint64_t result = 0x6E49796C696D6166;
      break;
    case 3:
    case 5:
      unint64_t result = 0x5379616C70736964;
      break;
    case 4:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 6:
      unint64_t result = 0x696C64616548746ELL;
      break;
    case 7:
      unint64_t result = 0x686563616C507369;
      break;
    case 8:
      unint64_t result = 0x6569766572507369;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10005C6B0(char a1)
{
  unint64_t result = 0x696772614D706F74;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x614D6D6F74746F62;
      break;
    case 2:
      unint64_t result = 0x6E49796C696D6166;
      break;
    case 3:
    case 5:
      unint64_t result = 0x5379616C70736964;
      break;
    case 4:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 6:
      unint64_t result = 0x696C64616548746ELL;
      break;
    case 7:
      unint64_t result = 0x686563616C507369;
      break;
    case 8:
      unint64_t result = 0x6569766572507369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10005C7F8(unsigned __int8 *a1, char *a2)
{
  return sub_10005C008(*a1, *a2);
}

Swift::Int sub_10005C804()
{
  return sub_1000CCAF0();
}

uint64_t sub_10005C84C()
{
  return sub_10005C854();
}

uint64_t sub_10005C854()
{
  sub_1000CC270();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10005C9D0()
{
  return sub_1000CCAF0();
}

uint64_t sub_10005CA14@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10005FF78(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t sub_10005CA44@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10005C568(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10005CA70()
{
  return sub_10005C6B0(*v0);
}

uint64_t sub_10005CA78@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10005FF78(a1, a2);
  *a3 = result;
  return result;
}

void sub_10005CAA0(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_10005CAAC(uint64_t a1)
{
  unint64_t v2 = sub_10005F98C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005CAE8(uint64_t a1)
{
  unint64_t v2 = sub_10005F98C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005CB24(void *a1)
{
  double v3 = v1;
  uint64_t v5 = sub_10001D64C(&qword_1001101F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100020110(a1, a1[3]);
  sub_10005F98C();
  sub_1000CCB30();
  *(void *)&long long v13 = *v3;
  char v14 = 0;
  sub_10005FAE4();
  sub_1000CC9F0();
  if (!v2)
  {
    *(void *)&long long v13 = v3[1];
    char v14 = 1;
    sub_1000CC9F0();
    double v9 = (int *)type metadata accessor for LayoutContext();
    sub_1000CBEB0();
    LOBYTE(v13) = 2;
    sub_1000CC9D0();
    long long v13 = *(_OWORD *)((char *)v3 + v9[7]);
    char v14 = 3;
    type metadata accessor for CGSize(0);
    sub_10005FB38(&qword_100110200, type metadata accessor for CGSize);
    sub_1000CC9F0();
    double v11 = sub_100050790();
    v12[1] = sub_1000CC1F0();

    LOBYTE(v13) = 4;
    sub_1000CC9B0();
    swift_bridgeObjectRelease();
    *(void *)&long long v13 = *(void *)((char *)v3 + v9[9]);
    char v14 = 5;
    sub_1000CC9F0();
    *(void *)&long long v13 = *(void *)((char *)v3 + v9[10]);
    char v14 = 6;
    sub_1000CC9F0();
    LOBYTE(v13) = 7;
    sub_1000CC9C0();
    LOBYTE(v13) = 8;
    sub_1000CC9C0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005CEC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v3 = sub_10001D64C(&qword_1001101B8);
  __chkstk_darwin(v3 - 8);
  double v53 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000CB6D0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v54 = v5;
  uint64_t v55 = v6;
  __chkstk_darwin(v5);
  double v52 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10001D64C(&qword_1001101C0);
  __chkstk_darwin(v8 - 8);
  id v56 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000CBEC0();
  uint64_t v57 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  double v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10001D64C(&qword_1001101C8);
  uint64_t v58 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for LayoutContext();
  __chkstk_darwin(v16);
  char v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a1[3];
  double v59 = a1;
  sub_100020110(a1, v19);
  sub_10005F98C();
  uint64_t v20 = v60;
  sub_1000CCB10();
  if (v20) {
    return sub_1000201A8((uint64_t)v59);
  }
  double v49 = v12;
  uint64_t v50 = v10;
  double v60 = (int *)v16;
  uint64_t v21 = v18;
  id v22 = v56;
  uint64_t v23 = v57;
  char v62 = 0;
  unint64_t v24 = sub_10005F9E0();
  uint64_t v25 = v15;
  sub_1000CC980();
  uint64_t v26 = v13;
  id v27 = v21;
  void *v21 = v61;
  char v62 = 1;
  sub_1000CC980();
  uint64_t v28 = v26;
  uint64_t v29 = v58;
  unint64_t v48 = v24;
  v21[1] = v61;
  LOBYTE(v61) = 2;
  sub_1000CC960();
  double v46 = v25;
  uint64_t v47 = v28;
  sub_1000CBEA0();
  uint64_t v31 = v50;
  if ((*(unsigned int (**)(id, uint64_t, uint64_t))(v23 + 48))(v22, 1, v50) == 1)
  {
    sub_1000227A8((uint64_t)v22, &qword_1001101C0);
    sub_10005FA34();
    swift_allocError();
    *uint64_t v32 = 0;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v46, v47);
    return sub_1000201A8((uint64_t)v59);
  }
  uint64_t v33 = v49;
  (*(void (**)(char *, id, uint64_t))(v23 + 32))(v49, v22, v31);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))((char *)v21 + v60[6], v33, v31);
  type metadata accessor for CGSize(0);
  char v62 = 3;
  sub_10005FB38(&qword_1001101E8, type metadata accessor for CGSize);
  sub_1000CC980();
  *(_OWORD *)((char *)v21 + v60[7]) = v61;
  LOBYTE(v61) = 4;
  sub_1000CC940();
  uint64_t v34 = v55;
  NSString v35 = sub_1000CC1C0();
  swift_bridgeObjectRelease();
  uint64_t v36 = v35;
  uint64_t v37 = (uint64_t)v53;
  sub_1000CB6E0();
  uint64_t v38 = v54;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v37, 1, v54) == 1)
  {
    sub_1000227A8(v37, &qword_1001101B8);
    sub_10005FA34();
    swift_allocError();
    *uint64_t v39 = 1;
    swift_willThrow();

    id v40 = *(void (**)(char *, uint64_t))(v57 + 8);
    uint64_t v41 = v50;
    v40(v49, v50);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v46, v47);
    sub_1000201A8((uint64_t)v59);
    return ((uint64_t (*)(char *, uint64_t))v40)((char *)v27 + v60[6], v41);
  }
  else
  {
    id v56 = v36;
    uint64_t v42 = v37;
    double v43 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v52, v42, v38);
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))((char *)v21 + v60[8], v43, v38);
    char v62 = 5;
    sub_1000CC980();
    *(void *)((char *)v21 + v60[9]) = v61;
    char v62 = 6;
    sub_1000CC980();
    *(void *)((char *)v21 + v60[10]) = v61;
    LOBYTE(v61) = 7;
    *((unsigned char *)v21 + v60[11]) = sub_1000CC950() & 1;
    LOBYTE(v61) = 8;
    char v44 = sub_1000CC950();

    (*(void (**)(char *, uint64_t))(v55 + 8))(v52, v54);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v49, v50);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v46, v47);
    *((unsigned char *)v21 + v60[12]) = v44 & 1;
    sub_10005DF98((uint64_t)v21, v51);
    sub_1000201A8((uint64_t)v59);
    return sub_10005FA88((uint64_t)v21);
  }
}

uint64_t sub_10005D900@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005CEC8(a1, a2);
}

uint64_t sub_10005D918(void *a1)
{
  return sub_10005CB24(a1);
}

uint64_t sub_10005D930@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v22[1] = a4;
  uint64_t v10 = type metadata accessor for LayoutContext();
  __chkstk_darwin(v10);
  double v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000CBEC0();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v5 + *(int *)(v10 + 24), v13);
  int v17 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v16, v13);
  if (v17 == enum case for InternalWidgetFamily.systemSmall(_:)) {
    goto LABEL_2;
  }
  if (v17 == enum case for InternalWidgetFamily.systemMedium(_:)
    || (v17 != enum case for InternalWidgetFamily.systemLarge(_:)
      ? (BOOL v19 = v17 == enum case for InternalWidgetFamily.newsLargeTall(_:))
      : (BOOL v19 = 1),
        v19))
  {
    uint64_t v18 = *a2;
    goto LABEL_10;
  }
  if (v17 == enum case for InternalWidgetFamily.accessoryRectangular(_:))
  {
LABEL_2:
    uint64_t v18 = *a1;
LABEL_10:
    uint64_t v20 = sub_1000CB6D0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(a5, v18, v20);
  }
  sub_10005DF98(v5, (uint64_t)v12);
  unint64_t v23 = 0;
  unint64_t v24 = 0xE000000000000000;
  sub_1000CC750(49);
  swift_bridgeObjectRelease();
  unint64_t v23 = 0xD00000000000002FLL;
  unint64_t v24 = a3;
  sub_10005FB38((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
  v25._countAndFlagsBits = sub_1000CCA20();
  sub_1000CC2B0(v25);
  swift_bridgeObjectRelease();
  uint64_t result = sub_1000CC870();
  __break(1u);
  return result;
}

id sub_10005DC00()
{
  uint64_t v0 = sub_1000CB6D0();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v23 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v23 - v8;
  sub_10001D64C(&qword_10010EDB8);
  uint64_t inited = swift_initStackObject();
  long long v23 = xmmword_1000D37C0;
  *(_OWORD *)(inited + 16) = xmmword_1000D37C0;
  *(void *)(inited + 32) = UIFontDescriptorTraitsAttribute;
  sub_10001D64C(&qword_10010EDC0);
  uint64_t v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = v23;
  *(void *)(v11 + 32) = UIFontWeightTrait;
  *(UIFontWeight *)(v11 + 40) = UIFontWeightBold;
  double v12 = UIFontDescriptorTraitsAttribute;
  uint64_t v13 = UIFontWeightTrait;
  unint64_t v14 = sub_10008A744(v11);
  *(void *)(inited + 64) = sub_10001D64C(&qword_10010EDC8);
  *(void *)(inited + 40) = v14;
  sub_10008A850(inited);
  type metadata accessor for LayoutContext();
  sub_10005D930((unsigned int *)&enum case for ContentSizeCategory.medium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraSmall(_:), 0x80000001000DBB40, 150, (uint64_t)v7);
  sub_10005D930((unsigned int *)&enum case for ContentSizeCategory.accessibilityMedium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:), 0x80000001000DBB10, 163, (uint64_t)v4);
  sub_100050A50((uint64_t)v7, (uint64_t)v4, (uint64_t)v9);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v1 + 8);
  v15(v4, v0);
  v15(v7, v0);
  uint64_t v16 = sub_100050790();
  v15(v9, v0);
  id v17 = [self traitCollectionWithPreferredContentSizeCategory:v16];

  id v18 = [self preferredFontDescriptorWithTextStyle:UIFontTextStyleCallout compatibleWithTraitCollection:v17];
  type metadata accessor for AttributeName(0);
  sub_10005FB38((unint64_t *)&qword_10010E418, type metadata accessor for AttributeName);
  Class isa = sub_1000CC100().super.isa;
  swift_bridgeObjectRelease();
  id v20 = [v18 fontDescriptorByAddingAttributes:isa];

  id v21 = [self fontWithDescriptor:v20 size:0.0];
  return v21;
}

uint64_t sub_10005DF98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LayoutContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005DFFC()
{
  uint64_t v1 = type metadata accessor for LayoutContext();
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - v5;
  uint64_t v7 = sub_1000CBEC0();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v0 + *(int *)(v1 + 24), v7);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if (result == enum case for InternalWidgetFamily.systemSmall(_:))
  {
    sub_10005DF98(v0, (uint64_t)v6);
    unint64_t v13 = 0;
    unint64_t v14 = 0xE000000000000000;
    sub_1000CC750(46);
    swift_bridgeObjectRelease();
    unint64_t v13 = 0xD00000000000002CLL;
    unint64_t v14 = 0x80000001000DBBA0;
    sub_10005FB38((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
    v15._countAndFlagsBits = sub_1000CCA20();
    sub_1000CC2B0(v15);
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t result = sub_1000CC870();
    __break(1u);
    return result;
  }
  if (result != enum case for InternalWidgetFamily.systemMedium(_:))
  {
    BOOL v12 = result == enum case for InternalWidgetFamily.systemLarge(_:)
       || result == enum case for InternalWidgetFamily.newsLargeTall(_:);
    if (!v12 && result != enum case for InternalWidgetFamily.accessoryRectangular(_:))
    {
      sub_10005DF98(v0, (uint64_t)v4);
      unint64_t v13 = 0;
      unint64_t v14 = 0xE000000000000000;
      sub_1000CC750(46);
      swift_bridgeObjectRelease();
      unint64_t v13 = 0xD00000000000002CLL;
      unint64_t v14 = 0x80000001000DBBA0;
      sub_10005FB38((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
      v16._countAndFlagsBits = sub_1000CCA20();
      sub_1000CC2B0(v16);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  return result;
}

void sub_10005E358()
{
  uint64_t v1 = type metadata accessor for LayoutContext();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000CBEC0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v0 + *(int *)(v1 + 24), v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 != enum case for InternalWidgetFamily.systemSmall(_:))
  {
    if (v8 == enum case for InternalWidgetFamily.systemMedium(_:)
      || v8 == enum case for InternalWidgetFamily.systemLarge(_:)
      || v8 == enum case for InternalWidgetFamily.newsLargeTall(_:))
    {
      sub_10005F27C();
      sub_10005F27C();
      sub_10005DFFC();
      sub_10005DFFC();
      sub_10005F27C();
      sub_10005ED08();
    }
    else if (v8 != enum case for InternalWidgetFamily.accessoryRectangular(_:))
    {
      sub_10005DF98(v0, (uint64_t)v3);
      unint64_t v11 = 0;
      unint64_t v12 = 0xE000000000000000;
      sub_1000CC750(47);
      swift_bridgeObjectRelease();
      unint64_t v11 = 0xD00000000000002DLL;
      unint64_t v12 = 0x80000001000DBC00;
      sub_10005FB38((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
      v13._countAndFlagsBits = sub_1000CCA20();
      sub_1000CC2B0(v13);
      swift_bridgeObjectRelease();
      sub_1000CC870();
      __break(1u);
    }
  }
}

void sub_10005E644()
{
  uint64_t v1 = type metadata accessor for LayoutContext();
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - v5;
  uint64_t v7 = sub_1000CBEC0();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v0 + *(int *)(v1 + 24), v7);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if (v11 == enum case for InternalWidgetFamily.systemSmall(_:))
  {
    sub_10005DF98(v0, (uint64_t)v6);
    unint64_t v13 = 0;
    unint64_t v14 = 0xE000000000000000;
    sub_1000CC750(41);
    swift_bridgeObjectRelease();
    unint64_t v13 = 0xD000000000000027;
    unint64_t v14 = 0x80000001000DBC60;
    sub_10005FB38((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
    v15._countAndFlagsBits = sub_1000CCA20();
    sub_1000CC2B0(v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v11 == enum case for InternalWidgetFamily.systemMedium(_:)
      || (v11 != enum case for InternalWidgetFamily.systemLarge(_:)
        ? (BOOL v12 = v11 == enum case for InternalWidgetFamily.newsLargeTall(_:))
        : (BOOL v12 = 1),
          v12 || v11 == enum case for InternalWidgetFamily.accessoryRectangular(_:)))
    {
      sub_10005F27C();
      sub_10005DFFC();
      sub_10005DFFC();
      sub_10005F27C();
      sub_10005ED08();
      return;
    }
    sub_10005DF98(v0, (uint64_t)v4);
    unint64_t v13 = 0;
    unint64_t v14 = 0xE000000000000000;
    sub_1000CC750(41);
    swift_bridgeObjectRelease();
    unint64_t v13 = 0xD000000000000027;
    unint64_t v14 = 0x80000001000DBC60;
    sub_10005FB38((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
    v16._countAndFlagsBits = sub_1000CCA20();
    sub_1000CC2B0(v16);
    swift_bridgeObjectRelease();
  }
  sub_1000CC870();
  __break(1u);
}

id sub_10005E9F0()
{
  uint64_t v0 = sub_1000CB6D0();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v20 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v20 - v8;
  sub_10005FFC4();
  uint64_t v10 = (void *)sub_1000CC5D0();
  int v11 = self;
  type metadata accessor for LayoutContext();
  sub_10005D930((unsigned int *)&enum case for ContentSizeCategory.medium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraSmall(_:), 0x80000001000DBB40, 150, (uint64_t)v7);
  sub_10005D930((unsigned int *)&enum case for ContentSizeCategory.accessibilityMedium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:), 0x80000001000DBB10, 163, (uint64_t)v4);
  sub_100050A50((uint64_t)v7, (uint64_t)v4, (uint64_t)v9);
  BOOL v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v4, v0);
  v12(v7, v0);
  unint64_t v13 = sub_100050790();
  v12(v9, v0);
  id v14 = [v11 nt_preferredFontForCondensedTextStyle:2 contentSizeCategory:v13];

  [v14 nt_scaledValueForValue:1.0];
  double v16 = v15;

  sub_10005EF20();
  id v18 = [v10 fontWithSize:v16 * v17];

  return v18;
}

uint64_t sub_10005EC70()
{
  sub_10005F27C();
  double v2 = v1;
  double v3 = *(double *)(v0 + *(int *)(type metadata accessor for LayoutContext() + 40));
  sub_10005F27C();
  double v5 = v3 * v4;
  sub_10005DFFC();
  double v7 = v5 - (v6 + v6);
  sub_10005DFFC();
  double v9 = v7 + (v3 + v3) * v8;
  sub_10005F27C();
  if (v2 * (sub_10005ED08() * (v9 / v10)) + -16.0 >= 36.0) {
    return 0x4042000000000000;
  }
  else {
    return 0;
  }
}

double sub_10005ED08()
{
  uint64_t v0 = sub_1000CB6D0();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  double v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  double v7 = (char *)&v17 - v6;
  __chkstk_darwin(v5);
  double v9 = (char *)&v17 - v8;
  double v10 = self;
  type metadata accessor for LayoutContext();
  sub_10005D930((unsigned int *)&enum case for ContentSizeCategory.medium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraSmall(_:), 0x80000001000DBB40, 150, (uint64_t)v7);
  sub_10005D930((unsigned int *)&enum case for ContentSizeCategory.accessibilityMedium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:), 0x80000001000DBB10, 163, (uint64_t)v4);
  sub_100050A50((uint64_t)v7, (uint64_t)v4, (uint64_t)v9);
  int v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v4, v0);
  v11(v7, v0);
  BOOL v12 = sub_100050790();
  v11(v9, v0);
  id v13 = [v10 nt_preferredFontForCondensedTextStyle:2 contentSizeCategory:v12];

  [v13 nt_scaledValueForValue:1.0];
  double v15 = v14;

  return v15;
}

uint64_t sub_10005EF20()
{
  uint64_t v1 = type metadata accessor for LayoutContext();
  uint64_t v2 = __chkstk_darwin(v1);
  double v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - v5;
  uint64_t v7 = sub_1000CBEC0();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  double v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v0 + *(int *)(v1 + 24), v7);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if (result == enum case for InternalWidgetFamily.systemSmall(_:))
  {
    sub_10005DF98(v0, (uint64_t)v6);
    unint64_t v13 = 0;
    unint64_t v14 = 0xE000000000000000;
    sub_1000CC750(39);
    swift_bridgeObjectRelease();
    unint64_t v13 = 0xD000000000000025;
    unint64_t v14 = 0x80000001000DBC30;
    sub_10005FB38((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
    v15._countAndFlagsBits = sub_1000CCA20();
    sub_1000CC2B0(v15);
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t result = sub_1000CC870();
    __break(1u);
    return result;
  }
  if (result != enum case for InternalWidgetFamily.systemMedium(_:))
  {
    BOOL v12 = result == enum case for InternalWidgetFamily.systemLarge(_:)
       || result == enum case for InternalWidgetFamily.newsLargeTall(_:);
    if (!v12 && result != enum case for InternalWidgetFamily.accessoryRectangular(_:))
    {
      sub_10005DF98(v0, (uint64_t)v4);
      unint64_t v13 = 0;
      unint64_t v14 = 0xE000000000000000;
      sub_1000CC750(39);
      swift_bridgeObjectRelease();
      unint64_t v13 = 0xD000000000000025;
      unint64_t v14 = 0x80000001000DBC30;
      sub_10005FB38((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
      v16._countAndFlagsBits = sub_1000CCA20();
      sub_1000CC2B0(v16);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  return result;
}

void sub_10005F27C()
{
  uint64_t v1 = type metadata accessor for LayoutContext();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000CBEC0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v0 + *(int *)(v1 + 24), v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 != enum case for InternalWidgetFamily.systemSmall(_:))
  {
    if (v8 == enum case for InternalWidgetFamily.systemMedium(_:)
      || (v8 != enum case for InternalWidgetFamily.systemLarge(_:)
        ? (BOOL v9 = v8 == enum case for InternalWidgetFamily.newsLargeTall(_:))
        : (BOOL v9 = 1),
          v9))
    {
      sub_10005ED08();
    }
    else if (v8 != enum case for InternalWidgetFamily.accessoryRectangular(_:))
    {
      sub_10005DF98(v0, (uint64_t)v3);
      unint64_t v10 = 0;
      unint64_t v11 = 0xE000000000000000;
      sub_1000CC750(43);
      swift_bridgeObjectRelease();
      unint64_t v10 = 0xD000000000000029;
      unint64_t v11 = 0x80000001000DBB70;
      sub_10005FB38((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
      v12._countAndFlagsBits = sub_1000CCA20();
      sub_1000CC2B0(v12);
      swift_bridgeObjectRelease();
      sub_1000CC870();
      __break(1u);
    }
  }
}

void sub_10005F520()
{
  uint64_t v1 = type metadata accessor for LayoutContext();
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v21 = (uint64_t)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v22 = (uint64_t)&v21 - v4;
  uint64_t v5 = sub_1000CBEC0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  BOOL v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = v0 + *(int *)(v1 + 24);
  unint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13((char *)&v21 - v10, v12, v5);
  unint64_t v14 = *(uint64_t (**)(char *, uint64_t))(v6 + 88);
  int v15 = v14(v11, v5);
  int v16 = enum case for InternalWidgetFamily.systemSmall(_:);
  if (v15 != enum case for InternalWidgetFamily.systemSmall(_:))
  {
    if (v15 == enum case for InternalWidgetFamily.systemMedium(_:)
      || v15 == enum case for InternalWidgetFamily.systemLarge(_:)
      || v15 == enum case for InternalWidgetFamily.newsLargeTall(_:))
    {
      sub_10005DFFC();
      sub_10005F27C();
      sub_10005DFFC();
      return;
    }
    if (v15 != enum case for InternalWidgetFamily.accessoryRectangular(_:))
    {
      sub_10005DF98(v0, v21);
      unint64_t v23 = 0;
      unint64_t v24 = 0xE000000000000000;
      sub_1000CC750(20);
      swift_bridgeObjectRelease();
      unint64_t v23 = 0xD000000000000025;
      unint64_t v24 = 0x80000001000DBBD0;
      sub_10005FB38((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
      v26._countAndFlagsBits = sub_1000CCA20();
      sub_1000CC2B0(v26);
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
  }
  v13(v9, v12, v5);
  int v19 = v14(v9, v5);
  if (v19 != v16)
  {
    if (v19 == enum case for InternalWidgetFamily.systemMedium(_:)
      || (v19 != enum case for InternalWidgetFamily.systemLarge(_:)
        ? (BOOL v20 = v19 == enum case for InternalWidgetFamily.newsLargeTall(_:))
        : (BOOL v20 = 1),
          v20))
    {
      sub_10005ED08();
      return;
    }
    if (v19 != enum case for InternalWidgetFamily.accessoryRectangular(_:))
    {
      sub_10005DF98(v0, v22);
      unint64_t v23 = 0;
      unint64_t v24 = 0xE000000000000000;
      sub_1000CC750(43);
      swift_bridgeObjectRelease();
      unint64_t v23 = 0xD000000000000029;
      unint64_t v24 = 0x80000001000DBB70;
      sub_10005FB38((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
      v25._countAndFlagsBits = sub_1000CCA20();
      sub_1000CC2B0(v25);
      swift_bridgeObjectRelease();
LABEL_25:
      sub_1000CC870();
      __break(1u);
    }
  }
}

unint64_t sub_10005F98C()
{
  unint64_t result = qword_1001101D0;
  if (!qword_1001101D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001101D0);
  }
  return result;
}

unint64_t sub_10005F9E0()
{
  unint64_t result = qword_1001101D8;
  if (!qword_1001101D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001101D8);
  }
  return result;
}

unint64_t sub_10005FA34()
{
  unint64_t result = qword_1001101E0;
  if (!qword_1001101E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001101E0);
  }
  return result;
}

uint64_t sub_10005FA88(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LayoutContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10005FAE4()
{
  unint64_t result = qword_1001101F8;
  if (!qword_1001101F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001101F8);
  }
  return result;
}

uint64_t sub_10005FB38(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LayoutContext.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005FC4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutContext.Errors()
{
  return &type metadata for LayoutContext.Errors;
}

uint64_t getEnumTagSinglePayload for LayoutContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LayoutContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005FDE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutContext.CodingKeys()
{
  return &type metadata for LayoutContext.CodingKeys;
}

unint64_t sub_10005FE1C()
{
  unint64_t result = qword_100110208;
  if (!qword_100110208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110208);
  }
  return result;
}

unint64_t sub_10005FE74()
{
  unint64_t result = qword_100110210;
  if (!qword_100110210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110210);
  }
  return result;
}

unint64_t sub_10005FECC()
{
  unint64_t result = qword_100110218;
  if (!qword_100110218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110218);
  }
  return result;
}

unint64_t sub_10005FF24()
{
  unint64_t result = qword_100110220;
  if (!qword_100110220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110220);
  }
  return result;
}

uint64_t sub_10005FF78(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1000FBCA0;
  v6._object = a2;
  unint64_t v4 = sub_1000CC8F0(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 9) {
    return 9;
  }
  else {
    return v4;
  }
}

unint64_t sub_10005FFC4()
{
  unint64_t result = qword_100110228;
  if (!qword_100110228)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100110228);
  }
  return result;
}

char *sub_100060004(char *a1, char **a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    int v8 = a2[1];
    BOOL v9 = a2[2];
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v9;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    uint64_t v10 = a3[8];
    unint64_t v11 = &a1[v10];
    uint64_t v12 = (char **)((char *)a2 + v10);
    a1[56] = *((unsigned char *)a2 + 56);
    unint64_t v13 = v5;
    unint64_t v14 = v8;
    int v15 = v9;
    sub_10001D64C(&qword_10010E9F0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = sub_1000CB3C0();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v11, v12, v16);
    }
    else
    {
      *(void *)unint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = a3[9];
    id v18 = &a1[v17];
    uint64_t v19 = (uint64_t)a2 + v17;
    uint64_t v20 = *(void *)v19;
    char v21 = *(unsigned char *)(v19 + 8);
    sub_10002AB64(*(void *)v19, v21);
    *(void *)id v18 = v20;
    v18[8] = v21;
    uint64_t v22 = a3[10];
    unint64_t v23 = &a1[v22];
    unint64_t v24 = (char **)((char *)a2 + v22);
    sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v25 = sub_1000CBEF0();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    }
    else
    {
      *(void *)unint64_t v23 = *v24;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100060214(id *a1, int *a2)
{
  int v4 = (char *)a1 + a2[8];
  sub_10001D64C(&qword_10010E9F0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_1000CB3C0();
    (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  sub_10002AFC4(*(uint64_t *)((char *)a1 + a2[9]), *((unsigned char *)a1 + a2[9] + 8));
  Swift::String v6 = (char *)a1 + a2[10];
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_1000CBEF0();
    int v8 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v6, v7);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_100060368(uint64_t a1, uint64_t a2, int *a3)
{
  Swift::String v6 = *(void **)a2;
  uint64_t v7 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  int v8 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v9 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v10 = a3[8];
  unint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *(_OWORD *)(a1 + 40) = v9;
  id v13 = v6;
  id v14 = v7;
  id v15 = v8;
  sub_10001D64C(&qword_10010E9F0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = sub_1000CB3C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v11, v12, v16);
  }
  else
  {
    *unint64_t v11 = *v12;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = a3[9];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = *(void *)v19;
  char v21 = *(unsigned char *)(v19 + 8);
  sub_10002AB64(*(void *)v19, v21);
  *(void *)uint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v21;
  uint64_t v22 = a3[10];
  unint64_t v23 = (void *)(a1 + v22);
  unint64_t v24 = (void *)(a2 + v22);
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v25 = sub_1000CBEF0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
  }
  else
  {
    *unint64_t v23 = *v24;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100060528(uint64_t a1, uint64_t a2, int *a3)
{
  Swift::String v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  long long v9 = *(void **)(a1 + 8);
  uint64_t v10 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v10;
  id v11 = v10;

  uint64_t v12 = *(void **)(a1 + 16);
  id v13 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v13;
  id v14 = v13;

  long long v15 = *(_OWORD *)(a2 + 24);
  long long v16 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v16;
  *(_OWORD *)(a1 + 24) = v15;
  if (a1 != a2)
  {
    uint64_t v17 = a3[8];
    uint64_t v18 = (void *)(a1 + v17);
    uint64_t v19 = (void *)(a2 + v17);
    sub_1000227A8(a1 + v17, &qword_10010E9F0);
    sub_10001D64C(&qword_10010E9F0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = sub_1000CB3C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    }
    else
    {
      *uint64_t v18 = *v19;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v21 = a3[9];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = *(void *)v23;
  char v25 = *(unsigned char *)(v23 + 8);
  sub_10002AB64(*(void *)v23, v25);
  uint64_t v26 = *(void *)v22;
  char v27 = *(unsigned char *)(v22 + 8);
  *(void *)uint64_t v22 = v24;
  *(unsigned char *)(v22 + 8) = v25;
  sub_10002AFC4(v26, v27);
  if (a1 != a2)
  {
    uint64_t v28 = a3[10];
    uint64_t v29 = (void *)(a1 + v28);
    double v30 = (void *)(a2 + v28);
    sub_1000227A8(a1 + v28, &qword_10010E8E0);
    sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v31 = sub_1000CBEF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
    }
    else
    {
      *uint64_t v29 = *v30;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10006073C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = a3[8];
  uint64_t v7 = (void *)(a1 + v6);
  id v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10001D64C(&qword_10010E9F0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_1000CB3C0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[9];
  uint64_t v12 = a3[10];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  long long v15 = (void *)(a1 + v12);
  long long v16 = (const void *)(a2 + v12);
  uint64_t v17 = sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = sub_1000CBEF0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v18 - 8) + 32))(v15, v16, v18);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000608F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  id v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  if (a1 != a2)
  {
    uint64_t v9 = a3[8];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (const void *)(a2 + v9);
    sub_1000227A8(a1 + v9, &qword_10010E9F0);
    uint64_t v12 = sub_10001D64C(&qword_10010E9F0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_1000CB3C0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
  }
  uint64_t v14 = a3[9];
  uint64_t v15 = a1 + v14;
  long long v16 = (uint64_t *)(a2 + v14);
  uint64_t v17 = *v16;
  LOBYTE(v16) = *((unsigned char *)v16 + 8);
  uint64_t v18 = *(void *)v15;
  char v19 = *(unsigned char *)(v15 + 8);
  *(void *)uint64_t v15 = v17;
  *(unsigned char *)(v15 + 8) = (_BYTE)v16;
  sub_10002AFC4(v18, v19);
  if (a1 != a2)
  {
    uint64_t v20 = a3[10];
    uint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (const void *)(a2 + v20);
    sub_1000227A8(a1 + v20, &qword_10010E8E0);
    uint64_t v23 = sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = sub_1000CBEF0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100060B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100060B28);
}

uint64_t sub_100060B28(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_10001D64C(&qword_10010F990);
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == a2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = (char *)a1 + *(int *)(a3 + 32);
      uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
      return v13(v12, a2, v11);
    }
    else
    {
      uint64_t v14 = sub_10001D64C(&qword_10010E8E8);
      uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
      uint64_t v16 = v14;
      uint64_t v17 = (char *)a1 + *(int *)(a3 + 40);
      return v15(v17, a2, v16);
    }
  }
}

uint64_t sub_100060C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100060C7C);
}

void *sub_100060C7C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *unint64_t result = a2;
  }
  else
  {
    uint64_t v8 = sub_10001D64C(&qword_10010F990);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10001D64C(&qword_10010E8E8);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 40);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for SmallBackgroundView(uint64_t a1)
{
  return sub_100032D40(a1, qword_100110288);
}

void sub_100060DD0()
{
  sub_100060EF0(319, &qword_10010FA08, (void (*)(uint64_t))&type metadata accessor for RedactionReasons);
  if (v0 <= 0x3F)
  {
    sub_100060EF0(319, (unint64_t *)&qword_10010E958, (void (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100060EF0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1000CB2B0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100060F44()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100060F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v38 = sub_10001D64C(&qword_1001102E0);
  __chkstk_darwin(v38);
  id v40 = (uint64_t *)((char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v39 = sub_10001D64C(&qword_1001102E8);
  __chkstk_darwin(v39);
  uint64_t v5 = (uint64_t *)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v34 = type metadata accessor for Scrim(0);
  uint64_t v6 = __chkstk_darwin(v34);
  NSString v35 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v36 = (uint64_t *)((char *)&v34 - v8);
  uint64_t v9 = type metadata accessor for SmallBackgroundView(0);
  uint64_t v37 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v37 + 64);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000CBEF0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v34 - v17;
  sub_100057BB0((uint64_t)&v34 - v17);
  sub_1000CBEE0();
  sub_100062480(&qword_10010FB20, (void (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  char v19 = sub_1000CC190();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v16, v12);
  v20(v18, v12);
  if (v19)
  {
    sub_100062190(a1, (uint64_t)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SmallBackgroundView);
    unint64_t v21 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    uint64_t v22 = swift_allocObject();
    sub_100062120((uint64_t)v11, v22 + v21);
    uint64_t v23 = v40;
    *id v40 = sub_100062184;
    v23[1] = v22;
    swift_storeEnumTagMultiPayload();
    sub_10001D64C(&qword_1001102F8);
    sub_100036A5C(&qword_100110300, &qword_1001102E8);
    sub_100036A5C(&qword_100110308, &qword_1001102F8);
    return sub_1000CB770();
  }
  else
  {
    uint64_t v25 = sub_100061564();
    sub_100062190(a1, (uint64_t)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SmallBackgroundView);
    unint64_t v26 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    uint64_t v27 = swift_allocObject();
    sub_100062120((uint64_t)v11, v27 + v26);
    uint64_t v28 = *(void **)(a1 + 16);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v30 = (uint64_t)v36;
    *uint64_t v36 = KeyPath;
    sub_10001D64C(&qword_10010E8E0);
    swift_storeEnumTagMultiPayload();
    uint64_t v31 = (uint64_t)v35;
    *(void *)(v30 + *(int *)(v34 + 20)) = v28;
    sub_100062190(v30, v31, type metadata accessor for Scrim);
    *uint64_t v5 = v25;
    v5[1] = (uint64_t)sub_100062184;
    v5[2] = v27;
    uint64_t v32 = sub_10001D64C(&qword_1001102F0);
    sub_100062190(v31, (uint64_t)v5 + *(int *)(v32 + 64), type metadata accessor for Scrim);
    id v33 = v28;
    swift_retain_n();
    swift_retain_n();
    sub_1000621F8(v31);
    swift_release();
    swift_release();
    sub_100036850((uint64_t)v5, (uint64_t)v40, &qword_1001102E8);
    swift_storeEnumTagMultiPayload();
    sub_10001D64C(&qword_1001102F8);
    sub_100036A5C(&qword_100110300, &qword_1001102E8);
    sub_100036A5C(&qword_100110308, &qword_1001102F8);
    sub_1000CB770();
    sub_1000227A8((uint64_t)v5, &qword_1001102E8);
    sub_1000621F8(v30);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_100061564()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_1000CBEF0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v13 - v7;
  type metadata accessor for SmallBackgroundView(0);
  sub_100057BB0((uint64_t)v8);
  sub_1000CBEE0();
  sub_100062480(&qword_10010FB20, (void (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  char v9 = sub_1000CC190();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v6, v2);
  v10(v8, v2);
  if (v9) {
    return sub_1000CBB30();
  }
  if (!*v1) {
    return sub_1000CBB40();
  }
  id v12 = *v1;
  return sub_1000CBBB0();
}

void sub_1000616F8(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10001D64C(&qword_10010FC00);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_1000CBBD0();
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_10001D64C(&qword_10010FC08);
  uint64_t v68 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  id v66 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_10001D64C(&qword_10010FC10);
  __chkstk_darwin(v65);
  *(void *)&long long v70 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10001D64C(&qword_10010FC18);
  __chkstk_darwin(v67);
  uint64_t v72 = (uint64_t)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10001D64C(&qword_100110310);
  __chkstk_darwin(v12);
  uint64_t v71 = (uint64_t)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000CB3C0();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v60 - v19;
  unint64_t v21 = *(void **)(v2 + 8);
  if (v21)
  {
    double v60 = v6;
    uint64_t v61 = v12;
    char v62 = a1;
    uint64_t v22 = type metadata accessor for SmallBackgroundView(0);
    id v23 = v21;
    sub_100058110((uint64_t)v20);
    sub_1000CB3B0();
    sub_100062480(&qword_10010E9C0, (void (*)(uint64_t))&type metadata accessor for RedactionReasons);
    char v24 = sub_1000CC6C0();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v15 + 8);
    v25(v18, v14);
    v25(v20, v14);
    if ((v24 & 1) == 0)
    {
      if (*(unsigned char *)(v2 + 56))
      {
        id v28 = v23;
      }
      else
      {
        uint64_t v29 = v2 + *(int *)(v22 + 36);
        uint64_t v30 = *(void *)v29;
        char v31 = *(unsigned char *)(v29 + 8);
        sub_10002AB64(*(void *)v29, v31);
        sub_100058148(v30, v31);
        sub_10002AFC4(v30, v31);
        id v28 = (id)sub_1000CC600();
      }
      id v32 = v28;
      sub_1000CBBC0();
      uint64_t v33 = v63;
      uint64_t v34 = v64;
      (*(void (**)(char *, void, uint64_t))(v63 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v64);
      sub_1000CBC30();
      swift_release();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v34);
      uint64_t v35 = (uint64_t)v60;
      sub_1000CBF00();
      uint64_t v36 = sub_1000CBF20();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 0, 1, v36);
      uint64_t v37 = v66;
      sub_1000CBC20();
      swift_release();
      sub_1000227A8(v35, &qword_10010FC00);
      uint64_t v38 = v68;
      uint64_t v39 = v70;
      uint64_t v40 = v69;
      (*(void (**)(void, char *, uint64_t))(v68 + 16))(v70, v37, v69);
      uint64_t v41 = v39 + *(int *)(v65 + 36);
      *(void *)uint64_t v41 = 0;
      *(_WORD *)(v41 + 8) = 257;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v40);
      sub_1000CBD20();
      sub_1000CB310();
      uint64_t v42 = v72;
      sub_100036850(v39, v72, &qword_10010FC10);
      double v43 = (_OWORD *)(v42 + *(int *)(v67 + 36));
      long long v44 = v74;
      _OWORD *v43 = v73;
      v43[1] = v44;
      v43[2] = v75;
      sub_1000227A8(v39, &qword_10010FC10);
      sub_1000CBB30();
      uint64_t v45 = sub_1000CBCB0();
      uint64_t v47 = v46;
      sub_1000CBB30();
      uint64_t v48 = sub_1000CBCB0();
      uint64_t v50 = v49;
      sub_1000CBB30();
      sub_1000CBB70();
      swift_release();
      uint64_t v51 = sub_1000CBCB0();
      uint64_t v53 = v52;
      sub_10001D64C((uint64_t *)&unk_100111040);
      uint64_t v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_1000D37D0;
      *(void *)(v54 + 32) = v45;
      *(void *)(v54 + 40) = v47;
      *(void *)(v54 + 48) = v48;
      *(void *)(v54 + 56) = v50;
      *(void *)(v54 + 64) = v51;
      *(void *)(v54 + 72) = v53;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1000CBCC0();
      sub_1000CBD30();
      sub_1000CBD40();
      sub_1000CB370();
      uint64_t v55 = v76;
      long long v70 = v77;
      uint64_t v56 = v78;
      uint64_t v57 = v79;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v58 = v71;
      sub_100036850(v42, v71, &qword_10010FC18);
      uint64_t v59 = v58 + *(int *)(v61 + 36);
      *(void *)uint64_t v59 = v55;
      *(_OWORD *)(v59 + 8) = v70;
      *(void *)(v59 + 24) = v56;
      *(void *)(v59 + 32) = v57;
      sub_1000227A8(v42, &qword_10010FC18);
      sub_1000624C8();
      uint64_t v27 = sub_1000CBC70();

      a1 = v62;
      goto LABEL_11;
    }

    a1 = v62;
  }
  if (qword_10010DD78 != -1) {
    swift_once();
  }
  id v26 = (id)qword_10011AC70;
  *(void *)&long long v73 = sub_1000CBBB0();
  uint64_t v27 = sub_1000CBC70();
LABEL_11:
  *a1 = v27;
}

void sub_100061F8C(void *a1@<X8>)
{
  sub_1000CB320();
  sub_1000CB320();
  sub_1000616F8(&v2);
  *a1 = v2;
}

uint64_t sub_100062000@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_1000CBD00();
  a1[1] = v3;
  uint64_t v4 = sub_10001D64C(&qword_1001102D8);
  return sub_100060F60(v1, (uint64_t)a1 + *(int *)(v4 + 44));
}

uint64_t type metadata accessor for Scrim(uint64_t a1)
{
  return sub_100032D40(a1, qword_100110388);
}

void sub_100062064(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + *(int *)(type metadata accessor for Scrim(0) + 20));
  if (v3)
  {
    id v4 = v3;
    [v4 ts_luminance];
    double v6 = v5;
    sub_100062D70();
    sub_1000CC5F0();
    if (v7 >= v6)
    {
      uint64_t v8 = sub_1000CBB40();
    }
    else
    {
      sub_1000CBB30();
      uint64_t v8 = sub_1000CBB70();
      swift_release();
    }
  }
  else
  {
    uint64_t v8 = sub_1000CBB40();
  }
  *a1 = v8;
}

uint64_t sub_100062120(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SmallBackgroundView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100062190(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000621F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Scrim(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100062258()
{
  uint64_t v1 = (int *)type metadata accessor for SmallBackgroundView(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;

  uint64_t v6 = v0 + v3 + v1[8];
  sub_10001D64C(&qword_10010E9F0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_1000CB3C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  sub_10002AFC4(*(void *)(v5 + v1[9]), *(unsigned char *)(v5 + v1[9] + 8));
  uint64_t v8 = v5 + v1[10];
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_1000CBEF0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_10006240C(void *a1@<X8>)
{
}

uint64_t sub_100062480(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000624C8()
{
  unint64_t result = qword_100110318;
  if (!qword_100110318)
  {
    sub_10001D690(&qword_100110310);
    sub_10004EEE4();
    sub_100036A5C(&qword_100110320, &qword_100110328);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110318);
  }
  return result;
}

uint64_t *sub_100062568(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000CBEF0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v10;
    id v11 = v10;
  }
  return a1;
}

void sub_100062688(uint64_t a1, uint64_t a2)
{
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_1000CBEF0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  int v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

void *sub_100062728(void *a1, void *a2, uint64_t a3)
{
  sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_1000CBEF0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)((char *)a2 + v7);
  *(void *)((char *)a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

void *sub_1000627F8(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000227A8((uint64_t)a1, &qword_10010E8E0);
    sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_1000CBEF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)((char *)a1 + v7);
  id v9 = *(void **)((char *)a2 + v7);
  *(void *)((char *)a1 + v7) = v9;
  id v10 = v9;

  return a1;
}

char *sub_1000628E8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_10001D64C(&qword_10010E8E0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_1000CBEF0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1000629BC(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000227A8((uint64_t)a1, &qword_10010E8E0);
    uint64_t v6 = sub_10001D64C(&qword_10010E8E0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_1000CBEF0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  id v9 = *(void **)&a1[v8];
  *(void *)&a1[v8] = *(void *)&a2[v8];

  return a1;
}

uint64_t sub_100062AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100062AC4);
}

uint64_t sub_100062AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10001D64C(&qword_10010E8E8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100062B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100062BA8);
}

uint64_t sub_100062BA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10001D64C(&qword_10010E8E8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

void sub_100062C68()
{
  sub_100060EF0(319, (unint64_t *)&qword_10010E958, (void (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100062D18()
{
  return sub_100036A5C(&qword_1001103C0, &qword_1001103C8);
}

uint64_t sub_100062D54()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100062D70()
{
  unint64_t result = qword_100111C20;
  if (!qword_100111C20)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100111C20);
  }
  return result;
}

void *sub_100062DB0()
{
  return &protocol witness table for Color;
}

uint64_t sub_100062DBC()
{
  id v1 = [*(id *)(v0 + 24) userID];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_1000CC1F0();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  id v6 = [*(id *)(v0 + 16) possiblyUnfetchedAppConfiguration];
  if ([v6 respondsToSelector:"widgetTelemetrySamplingRate"])
  {
    [v6 widgetTelemetrySamplingRate];
    double v8 = v7;
    swift_unknownObjectRelease();
    float v9 = v8;
  }
  else
  {
    swift_unknownObjectRelease();
    float v9 = 0.0;
  }
  char v10 = sub_100062FB4(v9, v3, v5);
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_100062EA0()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for TelemetryEnablement()
{
  return self;
}

uint64_t sub_100062F04(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000CAAA0();
  if (!result || (uint64_t result = sub_1000CAAC0(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1000CAAB0();
      sub_1000CBE90();
      sub_1000636E8();
      return sub_1000CBE40();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100062FB4(float a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1000CBE90();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v8 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000CBE80();
  uint64_t v43 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000CC220();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3
    || (uint64_t v42 = v9,
        sub_1000CC210(),
        uint64_t v16 = sub_1000CC200(),
        unint64_t v18 = v17,
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12),
        v18 >> 60 == 15))
  {
    id v19 = FCAnalyticsLog;
    sub_1000CC530();
    sub_1000CB230();

    return 0;
  }
  int v45 = 0;
  sub_1000636E8();
  sub_1000CBE60();
  switch(v18 >> 62)
  {
    case 1uLL:
      uint64_t v22 = (int)v16;
      uint64_t v23 = v16;
      uint64_t v24 = v16 >> 32;
      if (v24 < v22) {
        goto LABEL_27;
      }
      sub_10004FCAC(v23, v18);
      sub_100062F04(v22, v24);
      sub_100041718(v23, v18);
      uint64_t v16 = v23;
      break;
    case 2uLL:
      uint64_t v25 = v16;
      uint64_t v26 = *(void *)(v16 + 16);
      uint64_t v27 = *(void *)(v25 + 24);
      sub_100063740(v25, v18);
      swift_retain();
      swift_retain();
      sub_100062F04(v26, v27);
      uint64_t v16 = v25;
      swift_release();
      swift_release();
      uint64_t v28 = v25;
      goto LABEL_13;
    case 3uLL:
      memset(v44, 0, 14);
      goto LABEL_12;
    default:
      v44[0] = v16;
      LOWORD(v44[1]) = v18;
      BYTE2(v44[1]) = BYTE2(v18);
      BYTE3(v44[1]) = BYTE3(v18);
      BYTE4(v44[1]) = BYTE4(v18);
      BYTE5(v44[1]) = BYTE5(v18);
LABEL_12:
      sub_1000CBE40();
      uint64_t v28 = v16;
LABEL_13:
      sub_100041718(v28, v18);
      break;
  }
  sub_1000CBE50();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1000CBE70();
  if (!CCBigNumFromData())
  {
    id v39 = FCAnalyticsLog;
    sub_1000CC530();
    sub_1000CB230();
    sub_100041718(v16, v18);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v42);
    return 0;
  }
  uint64_t v29 = CCBigNumFromHexString();
  float v30 = a1 * 100.0;
  if ((~COERCE_INT(a1 * 100.0) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v30 <= -1.0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v41 = v16;
  if (v30 >= 4295000000.0)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  uint64_t v31 = v29;
  CCBigNumFromDecimalString();
  CCCreateBigNum();
  v40[1] = v31;
  int v45 = CCBigNumMulI();
  CCCreateBigNum();
  v40[0] = CCCreateBigNum();
  int v45 = CCBigNumDiv();
  int v32 = CCBigNumCompare();
  uint64_t v20 = v32 >> 31;
  uint64_t v33 = (void *)FCAnalyticsLog;
  sub_10001D64C((uint64_t *)&unk_10010E840);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1000D34A0;
  unint64_t v35 = sub_1000225F0();
  uint64_t v36 = 0x64656C6261736964;
  if (v32 < 0) {
    uint64_t v36 = 0x64656C62616E65;
  }
  unint64_t v37 = 0xE800000000000000;
  if (v32 < 0) {
    unint64_t v37 = 0xE700000000000000;
  }
  *(void *)(v34 + 56) = &type metadata for String;
  *(void *)(v34 + 64) = v35;
  *(void *)(v34 + 32) = v36;
  *(void *)(v34 + 40) = v37;
  *(void *)(v34 + 96) = &type metadata for Float;
  *(void *)(v34 + 104) = &protocol witness table for Float;
  *(float *)(v34 + 72) = a1;
  id v38 = v33;
  sub_1000CC530();
  sub_1000CB230();

  swift_bridgeObjectRelease();
  CCBigNumFree();
  CCBigNumFree();
  CCBigNumFree();
  CCBigNumFree();
  CCBigNumFree();
  CCBigNumFree();
  sub_100041718(v41, v18);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v42);
  return v20;
}

unint64_t sub_1000636E8()
{
  unint64_t result = qword_100110478;
  if (!qword_100110478)
  {
    sub_1000CBE90();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110478);
  }
  return result;
}

uint64_t sub_100063740(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10004FCAC(a1, a2);
  }
  return a1;
}

id WidgetPersonalizationConfigurationManager.__allocating_init(appConfigurationManager:)()
{
  id v1 = v0;
  id v2 = objc_allocWithZone(v0);
  uint64_t v3 = (objc_class *)sub_1000CB100();
  objc_allocWithZone(v3);
  uint64_t v4 = (char *)v2;
  swift_unknownObjectRetain();
  uint64_t v5 = sub_1000CB0F0();
  uint64_t v6 = (uint64_t *)&v4[OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager];
  v6[3] = (uint64_t)v3;
  v6[4] = (uint64_t)&protocol witness table for NewsAppConfigurationManager;
  *uint64_t v6 = v5;

  v9.receiver = v4;
  v9.super_class = v1;
  [super init];
  swift_unknownObjectRelease();
  return v7;
}

id WidgetPersonalizationConfigurationManager.init(appConfigurationManager:)()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v2 = (objc_class *)sub_1000CB100();
  objc_allocWithZone(v2);
  uint64_t v3 = v0;
  swift_unknownObjectRetain();
  uint64_t v4 = sub_1000CB0F0();
  uint64_t v5 = (uint64_t *)&v3[OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager];
  v5[3] = (uint64_t)v2;
  v5[4] = (uint64_t)&protocol witness table for NewsAppConfigurationManager;
  *uint64_t v5 = v4;

  v8.receiver = v3;
  v8.super_class = ObjectType;
  id v6 = [super init];
  swift_unknownObjectRelease();
  return v6;
}

uint64_t sub_1000638F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v3 = sub_10001D64C(&qword_1001104B0);
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  __chkstk_darwin(v3);
  uint64_t v36 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10001D64C(&qword_1001104B8);
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  __chkstk_darwin(v5);
  unint64_t v35 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001D64C(&qword_1001104C0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v39 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10001D64C(&qword_1001104C8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10001D64C(&qword_1001104D0);
  __chkstk_darwin(v14 - 8);
  id v38 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([a1 respondsToSelector:"articleEmbeddingsScoringEnabled"]) {
    [a1 articleEmbeddingsScoringEnabled];
  }
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for FeatureState.Feature.articleEmbeddingsScoring<A>(_:), v10);
  if ([a1 respondsToSelector:"newsPersonalizationConfiguration"])
  {
    id v16 = [a1 newsPersonalizationConfiguration];
    id v17 = [v16 articleEmbeddingsConfiguration];
  }
  else
  {
    id v17 = 0;
  }
  id v40 = v17;
  sub_100064224();
  sub_1000CB110();

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if ([a1 respondsToSelector:"clientSideEngagementBoostEnabled"]) {
    unsigned int v30 = [a1 clientSideEngagementBoostEnabled];
  }
  else {
    unsigned int v30 = 0;
  }
  if ([a1 respondsToSelector:"fallbackToReverseChronSorting"]) {
    unsigned int v29 = [a1 fallbackToReverseChronSorting];
  }
  else {
    unsigned int v29 = 0;
  }
  id v18 = [a1 personalizationTreatment];
  uint64_t v19 = enum case for FeatureState.disabled<A>(_:);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v39, enum case for FeatureState.disabled<A>(_:), v7);
  if ([a1 respondsToSelector:"publisherDampeningConfig"])
  {
    id v20 = [a1 publisherDampeningConfig];
  }
  else
  {
    sub_10008ADA8((uint64_t)_swiftEmptyArrayStorage);
    id v21 = objc_allocWithZone((Class)FCPersonalizationPublisherDampeningConfig);
    Class isa = sub_1000CC100().super.isa;
    swift_bridgeObjectRelease();
    [v21 initWithConfig:isa];
  }
  if ([a1 respondsToSelector:"shadowPublisherDampeningConfig"])
  {
    [a1 shadowPublisherDampeningConfig];
  }
  else
  {
    sub_10008ADA8((uint64_t)_swiftEmptyArrayStorage);
    id v23 = objc_allocWithZone((Class)FCPersonalizationPublisherDampeningConfig);
    Class v24 = sub_1000CC100().super.isa;
    swift_bridgeObjectRelease();
    [v23 initWithConfig:v24];
  }
  if ([a1 respondsToSelector:"aggregatesInWidgetsXavierEnabled"]) {
    [a1 aggregatesInWidgetsXavierEnabled];
  }
  if ([a1 respondsToSelector:"tabiScoringInWidgetsEnabled"]) {
    [a1 tabiScoringInWidgetsEnabled];
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 104))(v35, v19, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 104))(v36, v19, v34);
  id v25 = objc_allocWithZone((Class)FCStatelessPersonalizationPublisherFavorability);
  sub_10001D64C(&qword_1001104E0);
  Class v26 = sub_1000CC3A0().super.isa;
  [v25 initWithArray:v26];

  return sub_1000CB120();
}

uint64_t WidgetPersonalizationConfigurationManager.configuration.getter()
{
  sub_100020110((void *)(v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager), *(void *)(v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager + 24));
  return sub_1000CB1E0();
}

uint64_t WidgetPersonalizationConfigurationManager.fetchConfigurationIfNeeded(cachedOnly:)()
{
  sub_100020110((void *)(v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager), *(void *)(v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager + 24));
  return sub_1000CB1D0();
}

uint64_t WidgetPersonalizationConfigurationManager.onChangeOfConfiguration(perform:)()
{
  sub_100020110((void *)(v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager), *(void *)(v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager + 24));
  return sub_1000CB1C0();
}

void WidgetPersonalizationConfigurationManager.init()()
{
}

uint64_t sub_1000640E4()
{
  sub_100020110((void *)(*v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager), *(void *)(*v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager + 24));
  return sub_1000CB1E0();
}

uint64_t sub_100064140()
{
  sub_100020110((void *)(*v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager), *(void *)(*v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager + 24));
  return sub_1000CB1D0();
}

uint64_t sub_100064198()
{
  sub_100020110((void *)(*v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager), *(void *)(*v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager + 24));
  return sub_1000CB1C0();
}

uint64_t type metadata accessor for WidgetPersonalizationConfigurationManager()
{
  return self;
}

unint64_t sub_100064224()
{
  unint64_t result = qword_1001104D8;
  if (!qword_1001104D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001104D8);
  }
  return result;
}

char *sub_100064264(char *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    uint64_t v9 = (char *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    type metadata accessor for Item(0);
    uint64_t v91 = v6;
    uint64_t v92 = a2;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v7;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v10 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v10;
      uint64_t v11 = type metadata accessor for Item.Headline(0);
      uint64_t v12 = *(int *)(v11 + 24);
      __dst = &a1[v12];
      uint64_t v13 = (char *)a2 + v12;
      uint64_t v14 = sub_1000CABE0();
      uint64_t v15 = *(void *)(v14 - 8);
      id v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v16(v13, 1, v14))
      {
        uint64_t v17 = sub_10001D64C(&qword_10010F340);
        memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
      }
      uint64_t v18 = *(int *)(v11 + 28);
      uint64_t v19 = &a1[v18];
      id v20 = (char *)a2 + v18;
      id v21 = (void *)*((void *)v20 + 1);
      if (v21)
      {
        uint64_t v22 = *(void **)v20;
        *(void *)uint64_t v19 = v22;
        *((void *)v19 + 1) = v21;
        id v23 = v22;
        id v24 = v21;
      }
      else
      {
        *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
      }
      uint64_t v6 = v91;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v25 = *(int *)(v6 + 20);
    int __dsta = a1;
    Class v26 = &a1[v25];
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = *(void **)((char *)a2 + v25);
    *(void *)&a1[v25] = v28;
    unsigned int v29 = (int *)type metadata accessor for TodayContent();
    uint64_t v30 = v29[5];
    uint64_t v31 = &v26[v30];
    uint64_t v32 = &v27[v30];
    uint64_t v33 = (int *)type metadata accessor for Banner();
    uint64_t v34 = (void *)*((void *)v33 - 1);
    unint64_t v35 = (unsigned int (*)(char *, uint64_t, int *))v34[6];
    id v36 = v28;
    if (v35(v32, 1, v33))
    {
      uint64_t v37 = sub_10001D64C(&qword_10010DE20);
      memcpy(v31, v32, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      uint64_t v38 = *((void *)v32 + 1);
      *(void *)uint64_t v31 = *(void *)v32;
      *((void *)v31 + 1) = v38;
      uint64_t v39 = *((void *)v32 + 3);
      *((void *)v31 + 2) = *((void *)v32 + 2);
      *((void *)v31 + 3) = v39;
      uint64_t v40 = *((void *)v32 + 5);
      *((void *)v31 + 4) = *((void *)v32 + 4);
      *((void *)v31 + 5) = v40;
      uint64_t v41 = v33[7];
      uint64_t v86 = &v31[v41];
      uint64_t v88 = &v32[v41];
      uint64_t v89 = (void (**)(char *, void, uint64_t, int *))v34;
      uint64_t v42 = sub_1000CABE0();
      uint64_t v85 = *(void *)(v42 - 8);
      uint64_t v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48);
      uint64_t v43 = v42;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v87(v88, 1, v43))
      {
        uint64_t v44 = sub_10001D64C(&qword_10010F340);
        memcpy(v86, v88, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v86, v88, v43);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v86, 0, 1, v43);
      }
      uint64_t v45 = v33[8];
      uint64_t v46 = &v31[v45];
      uint64_t v47 = &v32[v45];
      uint64_t v48 = *((void *)v47 + 1);
      *(void *)uint64_t v46 = *(void *)v47;
      *((void *)v46 + 1) = v48;
      uint64_t v49 = v33[9];
      uint64_t v50 = *(void **)&v32[v49];
      swift_bridgeObjectRetain();
      if (v50 != (void *)1) {
        id v51 = v50;
      }
      *(void *)&v31[v49] = v50;
      uint64_t v52 = v33[10];
      uint64_t v53 = &v31[v52];
      uint64_t v54 = &v32[v52];
      uint64_t v55 = *(void **)v54;
      uint64_t v56 = (void *)*((void *)v54 + 1);
      char v57 = v54[16];
      sub_10001DB84(*(void **)v54, v56);
      *(void *)uint64_t v53 = v55;
      *((void *)v53 + 1) = v56;
      v53[16] = v57;
      v89[7](v31, 0, 1, v33);
    }
    *(void *)&v26[v29[6]] = *(void *)&v27[v29[6]];
    *(void *)&v26[v29[7]] = *(void *)&v27[v29[7]];
    v26[v29[8]] = v27[v29[8]];
    uint64_t v58 = v29[9];
    uint64_t v90 = &v26[v58];
    uint64_t v59 = &v27[v58];
    uint64_t v60 = sub_1000CABE0();
    uint64_t v61 = *(void *)(v60 - 8);
    char v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (v62(v59, 1, v60))
    {
      uint64_t v63 = sub_10001D64C(&qword_10010F340);
      memcpy(v90, v59, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v90, v59, v60);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v90, 0, 1, v60);
    }
    *(void *)&v26[v29[10]] = *(void *)&v27[v29[10]];
    uint64_t v64 = v29[11];
    uint64_t v65 = &v26[v64];
    id v66 = &v27[v64];
    uint64_t v67 = *((void *)v66 + 1);
    *(void *)uint64_t v65 = *(void *)v66;
    *((void *)v65 + 1) = v67;
    uint64_t v68 = v29[12];
    uint64_t v69 = &v26[v68];
    long long v70 = &v27[v68];
    uint64_t v71 = *((void *)v70 + 1);
    *(void *)uint64_t v69 = *(void *)v70;
    *((void *)v69 + 1) = v71;
    uint64_t v72 = *(int *)(v91 + 24);
    long long v73 = &__dsta[v72];
    long long v74 = (char *)v92 + v72;
    *(_OWORD *)&__dsta[v72] = *(_OWORD *)((char *)v92 + v72);
    long long v75 = (int *)type metadata accessor for LayoutContext();
    uint64_t v76 = v75[6];
    uint64_t v93 = &v73[v76];
    long long v77 = &v74[v76];
    uint64_t v78 = sub_1000CBEC0();
    uint64_t v79 = *(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v79(v93, v77, v78);
    uint64_t v9 = __dsta;
    *(_OWORD *)&v73[v75[7]] = *(_OWORD *)&v74[v75[7]];
    uint64_t v80 = v75[8];
    int v81 = &v73[v80];
    int v82 = &v74[v80];
    uint64_t v83 = sub_1000CB6D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 16))(v81, v82, v83);
    *(void *)&v73[v75[9]] = *(void *)&v74[v75[9]];
    *(void *)&v73[v75[10]] = *(void *)&v74[v75[10]];
    v73[v75[11]] = v74[v75[11]];
    v73[v75[12]] = v74[v75[12]];
  }
  return v9;
}

uint64_t sub_100064954(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Item(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = type metadata accessor for Item.Headline(0);
    uint64_t v5 = a1 + *(int *)(v4 + 24);
    uint64_t v6 = sub_1000CABE0();
    uint64_t v7 = *(void *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    }
    uint64_t v8 = (id *)(a1 + *(int *)(v4 + 28));
    if (v8[1])
    {
    }
  }
  uint64_t v9 = (id *)(a1 + *(int *)(a2 + 20));

  uint64_t v10 = type metadata accessor for TodayContent();
  uint64_t v11 = (char *)v9 + *(int *)(v10 + 20);
  uint64_t v12 = (int *)type metadata accessor for Banner();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v12 - 1) + 48))(v11, 1, v12))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = &v11[v12[7]];
    uint64_t v14 = sub_1000CABE0();
    uint64_t v15 = *(void *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    }
    swift_bridgeObjectRelease();
    id v16 = *(void **)&v11[v12[9]];
    if (v16 != (void *)1) {

    }
    sub_10001DE30(*(void **)&v11[v12[10]], *(void **)&v11[v12[10] + 8]);
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v17 = (char *)v9 + *(int *)(v10 + 36);
  uint64_t v18 = sub_1000CABE0();
  uint64_t v19 = *(void *)(v18 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = a1 + *(int *)(a2 + 24);
  uint64_t v21 = type metadata accessor for LayoutContext();
  uint64_t v22 = v20 + *(int *)(v21 + 24);
  uint64_t v23 = sub_1000CBEC0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
  uint64_t v24 = v20 + *(int *)(v21 + 32);
  uint64_t v25 = sub_1000CB6D0();
  Class v26 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8);

  return v26(v24, v25);
}

void *sub_100064D0C(void *a1, void *a2, uint64_t a3)
{
  type metadata accessor for Item(0);
  uint64_t v88 = a2;
  uint64_t v90 = a1;
  uint64_t v87 = a3;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = type metadata accessor for Item.Headline(0);
    uint64_t v9 = *(int *)(v8 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_1000CABE0();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      uint64_t v15 = sub_10001D64C(&qword_10010F340);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    a2 = v88;
    uint64_t v16 = *(int *)(v8 + 28);
    uint64_t v17 = (void *)((char *)a1 + v16);
    uint64_t v18 = (char *)v88 + v16;
    uint64_t v19 = (void *)*((void *)v18 + 1);
    if (v19)
    {
      uint64_t v20 = *(void **)v18;
      *uint64_t v17 = v20;
      v17[1] = v19;
      id v21 = v20;
      id v22 = v19;
    }
    else
    {
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    }
    a3 = v87;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (char *)a2 + v23;
  Class v26 = *(void **)((char *)a2 + v23);
  *uint64_t v24 = v26;
  uint64_t v27 = (int *)type metadata accessor for TodayContent();
  uint64_t v28 = v27[5];
  unsigned int v29 = (void *)((char *)v24 + v28);
  uint64_t v30 = &v25[v28];
  uint64_t v31 = (int *)type metadata accessor for Banner();
  uint64_t v32 = *((void *)v31 - 1);
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, int *))(v32 + 48);
  id v34 = v26;
  if (v33(v30, 1, v31))
  {
    uint64_t v35 = sub_10001D64C(&qword_10010DE20);
    memcpy(v29, v30, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    uint64_t v36 = *((void *)v30 + 1);
    *unsigned int v29 = *(void *)v30;
    v29[1] = v36;
    uint64_t v37 = *((void *)v30 + 3);
    void v29[2] = *((void *)v30 + 2);
    _OWORD v29[3] = v37;
    uint64_t v38 = *((void *)v30 + 5);
    _OWORD v29[4] = *((void *)v30 + 4);
    v29[5] = v38;
    uint64_t v39 = v31[7];
    __dst = (char *)v29 + v39;
    uint64_t v84 = &v30[v39];
    uint64_t v40 = sub_1000CABE0();
    uint64_t v82 = *(void *)(v40 - 8);
    uint64_t v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v83(v84, 1, v40))
    {
      uint64_t v41 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v84, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(__dst, v84, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(__dst, 0, 1, v40);
    }
    uint64_t v42 = v31[8];
    uint64_t v43 = (void *)((char *)v29 + v42);
    uint64_t v44 = &v30[v42];
    uint64_t v45 = *((void *)v44 + 1);
    void *v43 = *(void *)v44;
    v43[1] = v45;
    uint64_t v46 = v31[9];
    uint64_t v47 = *(void **)&v30[v46];
    swift_bridgeObjectRetain();
    if (v47 != (void *)1) {
      id v48 = v47;
    }
    *(void *)((char *)v29 + v46) = v47;
    uint64_t v49 = v31[10];
    uint64_t v50 = (char *)v29 + v49;
    id v51 = &v30[v49];
    uint64_t v52 = *(void **)v51;
    uint64_t v53 = (void *)*((void *)v51 + 1);
    char v54 = v51[16];
    sub_10001DB84(*(void **)v51, v53);
    *(void *)uint64_t v50 = v52;
    *((void *)v50 + 1) = v53;
    v50[16] = v54;
    (*(void (**)(void *, void, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
  }
  *(void *)((char *)v24 + v27[6]) = *(void *)&v25[v27[6]];
  *(void *)((char *)v24 + v27[7]) = *(void *)&v25[v27[7]];
  *((unsigned char *)v24 + v27[8]) = v25[v27[8]];
  uint64_t v55 = v27[9];
  uint64_t v86 = (char *)v24 + v55;
  uint64_t v56 = &v25[v55];
  uint64_t v57 = sub_1000CABE0();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  if (v59(v56, 1, v57))
  {
    uint64_t v60 = sub_10001D64C(&qword_10010F340);
    memcpy(v86, v56, *(void *)(*(void *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v86, v56, v57);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v86, 0, 1, v57);
  }
  *(void *)((char *)v24 + v27[10]) = *(void *)&v25[v27[10]];
  uint64_t v61 = v27[11];
  char v62 = (void *)((char *)v24 + v61);
  uint64_t v63 = &v25[v61];
  uint64_t v64 = *((void *)v63 + 1);
  *char v62 = *(void *)v63;
  v62[1] = v64;
  uint64_t v65 = v27[12];
  id v66 = (void *)((char *)v24 + v65);
  uint64_t v67 = &v25[v65];
  uint64_t v68 = *((void *)v67 + 1);
  *id v66 = *(void *)v67;
  v66[1] = v68;
  uint64_t v69 = *(int *)(v87 + 24);
  long long v70 = (char *)v90 + v69;
  uint64_t v71 = (char *)v88 + v69;
  *(_OWORD *)((char *)v90 + v69) = *(_OWORD *)((char *)v88 + v69);
  uint64_t v72 = (int *)type metadata accessor for LayoutContext();
  uint64_t v73 = v72[6];
  uint64_t v89 = &v70[v73];
  long long v74 = &v71[v73];
  uint64_t v75 = sub_1000CBEC0();
  uint64_t v76 = *(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v76(v89, v74, v75);
  *(_OWORD *)&v70[v72[7]] = *(_OWORD *)&v71[v72[7]];
  uint64_t v77 = v72[8];
  uint64_t v78 = &v70[v77];
  uint64_t v79 = &v71[v77];
  uint64_t v80 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 16))(v78, v79, v80);
  *(void *)&v70[v72[9]] = *(void *)&v71[v72[9]];
  *(void *)&v70[v72[10]] = *(void *)&v71[v72[10]];
  v70[v72[11]] = v71[v72[11]];
  v70[v72[12]] = v71[v72[12]];
  return v90;
}

uint64_t sub_1000653A4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = (void *)a1;
  if ((void *)a1 != a2)
  {
    sub_1000676D0(a1, type metadata accessor for Item);
    type metadata accessor for Item(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *uint64_t v5 = *v4;
      v5[1] = v4[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      *uint64_t v5 = *v4;
      v5[1] = v4[1];
      uint64_t v6 = type metadata accessor for Item.Headline(0);
      uint64_t v7 = *(int *)(v6 + 24);
      uint64_t v8 = (char *)v5 + v7;
      uint64_t v9 = (char *)v4 + v7;
      uint64_t v10 = sub_1000CABE0();
      uint64_t v11 = *(void *)(v10 - 8);
      uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v12(v9, 1, v10))
      {
        uint64_t v13 = sub_10001D64C(&qword_10010F340);
        memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      uint64_t v14 = *(int *)(v6 + 28);
      uint64_t v4 = a2;
      uint64_t v5 = (void *)a1;
      uint64_t v15 = (void *)(a1 + v14);
      uint64_t v16 = (char *)a2 + v14;
      if (*((void *)v16 + 1))
      {
        uint64_t v17 = *(void **)v16;
        *uint64_t v15 = *(void *)v16;
        uint64_t v18 = (void *)*((void *)v16 + 1);
        v15[1] = v18;
        id v19 = v17;
        id v20 = v18;
      }
      else
      {
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      }
      uint64_t v3 = a3;
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v21 = *(int *)(v3 + 20);
  id v22 = (void **)((char *)v5 + v21);
  uint64_t v23 = (char *)v4 + v21;
  uint64_t v24 = *(void **)((char *)v4 + v21);
  uint64_t v25 = *v22;
  *id v22 = v24;
  id v26 = v24;

  uint64_t v27 = (int *)type metadata accessor for TodayContent();
  uint64_t v28 = v27[5];
  unsigned int v29 = (char *)v22 + v28;
  uint64_t v30 = &v23[v28];
  uint64_t v31 = (int *)type metadata accessor for Banner();
  uint64_t v32 = *((void *)v31 - 1);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, int *))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (v35)
    {
      sub_1000676D0((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_18;
    }
    *(void *)unsigned int v29 = *(void *)v30;
    *((void *)v29 + 1) = *((void *)v30 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v29 + 2) = *((void *)v30 + 2);
    *((void *)v29 + 3) = *((void *)v30 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v29 + 4) = *((void *)v30 + 4);
    *((void *)v29 + 5) = *((void *)v30 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v40 = v31[7];
    uint64_t v41 = &v29[v40];
    int __dsta = &v30[v40];
    uint64_t v42 = sub_1000CABE0();
    uint64_t v110 = *(void *)(v42 - 8);
    uint64_t v111 = v41;
    uint64_t v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v110 + 48);
    LODWORD(v41) = v43(v41, 1, v42);
    int v44 = v43(__dsta, 1, v42);
    if (v41)
    {
      if (v44)
      {
        size_t v45 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v46 = v111;
LABEL_28:
        memcpy(v46, __dsta, v45);
        goto LABEL_31;
      }
      (*(void (**)(void *, char *, uint64_t))(v110 + 16))(v111, __dsta, v42);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v110 + 56))(v111, 0, 1, v42);
    }
    else
    {
      if (v44)
      {
        (*(void (**)(void *, uint64_t))(v110 + 8))(v111, v42);
        size_t v45 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v46 = v111;
        goto LABEL_28;
      }
      (*(void (**)(void *, char *, uint64_t))(v110 + 24))(v111, __dsta, v42);
    }
LABEL_31:
    uint64_t v59 = v31[8];
    uint64_t v60 = &v29[v59];
    uint64_t v61 = &v30[v59];
    *(void *)uint64_t v60 = *(void *)v61;
    *((void *)v60 + 1) = *((void *)v61 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v62 = v31[9];
    uint64_t v63 = &v29[v62];
    uint64_t v64 = *(void **)&v29[v62];
    uint64_t v65 = *(void **)&v30[v62];
    if (v64 == (void *)1)
    {
      if (v65 != (void *)1)
      {
        *(void *)uint64_t v63 = v65;
        id v66 = v65;
LABEL_38:
        uint64_t v68 = v31[10];
        uint64_t v69 = &v29[v68];
        long long v70 = &v30[v68];
        uint64_t v71 = *(void **)v70;
        uint64_t v72 = (void *)*((void *)v70 + 1);
        char v73 = v70[16];
        sub_10001DB84(*(void **)v70, v72);
        long long v74 = *(void **)v69;
        uint64_t v75 = (void *)*((void *)v69 + 1);
        *(void *)uint64_t v69 = v71;
        *((void *)v69 + 1) = v72;
        v69[16] = v73;
        sub_10001DE30(v74, v75);
        goto LABEL_39;
      }
    }
    else
    {
      if (v65 != (void *)1)
      {
        *(void *)uint64_t v63 = v65;
        id v67 = v65;

        goto LABEL_38;
      }
      sub_10001EA8C((uint64_t)&v29[v62]);
      uint64_t v65 = *(void **)&v30[v62];
    }
    *(void *)uint64_t v63 = v65;
    goto LABEL_38;
  }
  if (v35)
  {
LABEL_18:
    uint64_t v39 = sub_10001D64C(&qword_10010DE20);
    memcpy(v29, v30, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_39;
  }
  *(void *)unsigned int v29 = *(void *)v30;
  *((void *)v29 + 1) = *((void *)v30 + 1);
  *((void *)v29 + 2) = *((void *)v30 + 2);
  *((void *)v29 + 3) = *((void *)v30 + 3);
  *((void *)v29 + 4) = *((void *)v30 + 4);
  *((void *)v29 + 5) = *((void *)v30 + 5);
  uint64_t v36 = v31[7];
  __dst = &v29[v36];
  uint64_t v108 = &v30[v36];
  uint64_t v37 = sub_1000CABE0();
  uint64_t v107 = *(void *)(v37 - 8);
  uint64_t v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v109(v108, 1, v37))
  {
    uint64_t v38 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v108, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v107 + 16))(__dst, v108, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(__dst, 0, 1, v37);
  }
  uint64_t v47 = v31[8];
  id v48 = &v29[v47];
  uint64_t v49 = &v30[v47];
  *(void *)id v48 = *(void *)v49;
  *((void *)v48 + 1) = *((void *)v49 + 1);
  uint64_t v50 = v31[9];
  id v51 = *(void **)&v30[v50];
  swift_bridgeObjectRetain();
  if (v51 != (void *)1) {
    id v52 = v51;
  }
  *(void *)&v29[v50] = v51;
  uint64_t v53 = v31[10];
  char v54 = &v29[v53];
  uint64_t v55 = &v30[v53];
  uint64_t v56 = *(void **)v55;
  uint64_t v57 = (void *)*((void *)v55 + 1);
  char v58 = v55[16];
  sub_10001DB84(*(void **)v55, v57);
  *(void *)char v54 = v56;
  *((void *)v54 + 1) = v57;
  v54[16] = v58;
  (*(void (**)(char *, void, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
LABEL_39:
  *(void **)((char *)v22 + v27[6]) = *(void **)&v23[v27[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void **)((char *)v22 + v27[7]) = *(void **)&v23[v27[7]];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *((unsigned char *)v22 + v27[8]) = v23[v27[8]];
  uint64_t v76 = v27[9];
  uint64_t v77 = (char *)v22 + v76;
  uint64_t v78 = &v23[v76];
  uint64_t v79 = sub_1000CABE0();
  uint64_t v80 = *(void *)(v79 - 8);
  int v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 48);
  int v82 = v81(v77, 1, v79);
  int v83 = v81(v78, 1, v79);
  if (!v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 24))(v77, v78, v79);
      goto LABEL_45;
    }
    (*(void (**)(char *, uint64_t))(v80 + 8))(v77, v79);
    goto LABEL_44;
  }
  if (v83)
  {
LABEL_44:
    uint64_t v84 = sub_10001D64C(&qword_10010F340);
    memcpy(v77, v78, *(void *)(*(void *)(v84 - 8) + 64));
    goto LABEL_45;
  }
  (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v77, v78, v79);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
LABEL_45:
  *(void **)((char *)v22 + v27[10]) = *(void **)&v23[v27[10]];
  swift_retain();
  swift_release();
  uint64_t v85 = v27[11];
  uint64_t v86 = (void **)((char *)v22 + v85);
  uint64_t v87 = &v23[v85];
  *uint64_t v86 = *(void *)v87;
  v86[1] = *((void *)v87 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v88 = v27[12];
  uint64_t v89 = (void **)((char *)v22 + v88);
  uint64_t v90 = &v23[v88];
  *uint64_t v89 = *(void *)v90;
  v89[1] = *((void *)v90 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v91 = *(int *)(a3 + 24);
  uint64_t v92 = (void *)(a1 + v91);
  uint64_t v93 = (char *)a2 + v91;
  void *v92 = *(void *)((char *)a2 + v91);
  v92[1] = *(void *)((char *)a2 + v91 + 8);
  uint64_t v94 = (int *)type metadata accessor for LayoutContext();
  uint64_t v95 = v94[6];
  uint64_t v96 = (char *)v92 + v95;
  uint64_t v97 = &v93[v95];
  uint64_t v98 = sub_1000CBEC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 24))(v96, v97, v98);
  uint64_t v99 = v94[7];
  uint64_t v100 = (void *)((char *)v92 + v99);
  uint64_t v101 = &v93[v99];
  *uint64_t v100 = *(void *)v101;
  v100[1] = *((void *)v101 + 1);
  uint64_t v102 = v94[8];
  uint64_t v103 = (char *)v92 + v102;
  uint64_t v104 = &v93[v102];
  uint64_t v105 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 24))(v103, v104, v105);
  *(void *)((char *)v92 + v94[9]) = *(void *)&v93[v94[9]];
  *(void *)((char *)v92 + v94[10]) = *(void *)&v93[v94[10]];
  *((unsigned char *)v92 + v94[11]) = v93[v94[11]];
  *((unsigned char *)v92 + v94[12]) = v93[v94[12]];
  return a1;
}

void *sub_100065DFC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Item(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = type metadata accessor for Item.Headline(0);
    uint64_t v9 = *(int *)(v8 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_1000CABE0();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_10001D64C(&qword_10010F340);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v8 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v8 + 28));
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  uint64_t v18 = (int *)type metadata accessor for TodayContent();
  uint64_t v19 = v18[5];
  id v20 = &v16[v19];
  uint64_t v21 = &v17[v19];
  id v22 = (int *)type metadata accessor for Banner();
  uint64_t v23 = *((void *)v22 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = sub_10001D64C(&qword_10010DE20);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v53 = a3;
    char v54 = a2;
    long long v25 = *((_OWORD *)v21 + 1);
    *(_OWORD *)id v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v25;
    *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
    uint64_t v26 = v22[7];
    uint64_t v55 = a1;
    __dst = &v20[v26];
    uint64_t v27 = &v21[v26];
    uint64_t v28 = sub_1000CABE0();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(__dst, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
    }
    *(_OWORD *)&v20[v22[8]] = *(_OWORD *)&v21[v22[8]];
    *(void *)&v20[v22[9]] = *(void *)&v21[v22[9]];
    uint64_t v31 = v22[10];
    uint64_t v32 = &v20[v31];
    uint64_t v33 = &v21[v31];
    v32[16] = v33[16];
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    (*(void (**)(char *, void, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
    a2 = v54;
    a1 = v55;
    a3 = v53;
  }
  *(void *)&v16[v18[6]] = *(void *)&v17[v18[6]];
  *(void *)&v16[v18[7]] = *(void *)&v17[v18[7]];
  v16[v18[8]] = v17[v18[8]];
  uint64_t v34 = v18[9];
  int v35 = &v16[v34];
  uint64_t v36 = &v17[v34];
  uint64_t v37 = sub_1000CABE0();
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    uint64_t v39 = sub_10001D64C(&qword_10010F340);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  *(void *)&v16[v18[10]] = *(void *)&v17[v18[10]];
  *(_OWORD *)&v16[v18[11]] = *(_OWORD *)&v17[v18[11]];
  *(_OWORD *)&v16[v18[12]] = *(_OWORD *)&v17[v18[12]];
  uint64_t v40 = *(int *)(a3 + 24);
  uint64_t v41 = (char *)a1 + v40;
  uint64_t v42 = (char *)a2 + v40;
  *(_OWORD *)((char *)a1 + v40) = *(_OWORD *)((char *)a2 + v40);
  uint64_t v43 = (int *)type metadata accessor for LayoutContext();
  uint64_t v44 = v43[6];
  size_t v45 = &v41[v44];
  uint64_t v46 = &v42[v44];
  uint64_t v47 = sub_1000CBEC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v45, v46, v47);
  *(_OWORD *)&v41[v43[7]] = *(_OWORD *)&v42[v43[7]];
  uint64_t v48 = v43[8];
  uint64_t v49 = &v41[v48];
  uint64_t v50 = &v42[v48];
  uint64_t v51 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
  *(void *)&v41[v43[9]] = *(void *)&v42[v43[9]];
  *(void *)&v41[v43[10]] = *(void *)&v42[v43[10]];
  v41[v43[11]] = v42[v43[11]];
  v41[v43[12]] = v42[v43[12]];
  return a1;
}

void *sub_1000663A8(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000676D0((uint64_t)a1, type metadata accessor for Item);
    uint64_t v6 = type metadata accessor for Item(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = type metadata accessor for Item.Headline(0);
      uint64_t v9 = *(int *)(v8 + 24);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = sub_1000CABE0();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = sub_10001D64C(&qword_10010F340);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v8 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v8 + 28));
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v99 = a3;
  uint64_t v100 = a2;
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v101 = a1;
  uint64_t v16 = (void **)((char *)a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *v16;
  *uint64_t v16 = *(void **)((char *)a2 + v15);

  uint64_t v19 = (int *)type metadata accessor for TodayContent();
  uint64_t v20 = v19[5];
  uint64_t v21 = (char *)v16 + v20;
  id v22 = &v17[v20];
  uint64_t v23 = (int *)type metadata accessor for Banner();
  uint64_t v24 = *((void *)v23 - 1);
  long long v25 = *(uint64_t (**)(char *, uint64_t, int *))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (v27)
    {
      sub_1000676D0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_14;
    }
    uint64_t v35 = *((void *)v22 + 1);
    *(void *)uint64_t v21 = *(void *)v22;
    *((void *)v21 + 1) = v35;
    swift_bridgeObjectRelease();
    uint64_t v36 = *((void *)v22 + 3);
    *((void *)v21 + 2) = *((void *)v22 + 2);
    *((void *)v21 + 3) = v36;
    swift_bridgeObjectRelease();
    uint64_t v37 = *((void *)v22 + 5);
    *((void *)v21 + 4) = *((void *)v22 + 4);
    *((void *)v21 + 5) = v37;
    swift_bridgeObjectRelease();
    uint64_t v38 = v23[7];
    uint64_t v39 = &v21[v38];
    int __dsta = &v22[v38];
    uint64_t v40 = sub_1000CABE0();
    uint64_t v95 = *(void *)(v40 - 8);
    uint64_t v96 = v39;
    uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v95 + 48);
    LODWORD(v39) = v41(v39, 1, v40);
    int v42 = v41(__dsta, 1, v40);
    if (v39)
    {
      if (v42)
      {
        size_t v43 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v44 = v96;
LABEL_22:
        memcpy(v44, __dsta, v43);
        goto LABEL_25;
      }
      (*(void (**)(void *, char *, uint64_t))(v95 + 32))(v96, __dsta, v40);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v95 + 56))(v96, 0, 1, v40);
    }
    else
    {
      if (v42)
      {
        (*(void (**)(void *, uint64_t))(v95 + 8))(v96, v40);
        size_t v43 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v44 = v96;
        goto LABEL_22;
      }
      (*(void (**)(void *, char *, uint64_t))(v95 + 40))(v96, __dsta, v40);
    }
LABEL_25:
    uint64_t v48 = v23[8];
    uint64_t v49 = &v21[v48];
    uint64_t v50 = &v22[v48];
    uint64_t v52 = *(void *)v50;
    uint64_t v51 = *((void *)v50 + 1);
    *(void *)uint64_t v49 = v52;
    *((void *)v49 + 1) = v51;
    swift_bridgeObjectRelease();
    uint64_t v53 = v23[9];
    char v54 = &v21[v53];
    uint64_t v55 = *(void **)&v21[v53];
    uint64_t v56 = *(void *)&v22[v53];
    if (v55 != (void *)1)
    {
      if (v56 != 1)
      {
        *(void *)char v54 = v56;

        goto LABEL_30;
      }
      sub_10001EA8C((uint64_t)&v21[v53]);
      uint64_t v56 = *(void *)&v22[v53];
    }
    *(void *)char v54 = v56;
LABEL_30:
    uint64_t v57 = v23[10];
    char v58 = &v21[v57];
    uint64_t v59 = &v22[v57];
    char v60 = v59[16];
    uint64_t v61 = *(void **)v58;
    uint64_t v62 = (void *)*((void *)v58 + 1);
    *(_OWORD *)char v58 = *(_OWORD *)v59;
    v58[16] = v60;
    sub_10001DE30(v61, v62);
    goto LABEL_31;
  }
  if (v27)
  {
LABEL_14:
    uint64_t v34 = sub_10001D64C(&qword_10010DE20);
    memcpy(v21, v22, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_31;
  }
  long long v28 = *((_OWORD *)v22 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v28;
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  uint64_t v29 = v23[7];
  __dst = &v21[v29];
  uint64_t v30 = &v22[v29];
  uint64_t v31 = sub_1000CABE0();
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(__dst, v30, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v31);
  }
  *(_OWORD *)&v21[v23[8]] = *(_OWORD *)&v22[v23[8]];
  *(void *)&v21[v23[9]] = *(void *)&v22[v23[9]];
  uint64_t v45 = v23[10];
  uint64_t v46 = &v21[v45];
  uint64_t v47 = &v22[v45];
  v46[16] = v47[16];
  *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
  (*(void (**)(char *, void, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
LABEL_31:
  *(void **)((char *)v16 + v19[6]) = *(void **)&v17[v19[6]];
  swift_bridgeObjectRelease();
  *(void **)((char *)v16 + v19[7]) = *(void **)&v17[v19[7]];
  swift_unknownObjectRelease();
  *((unsigned char *)v16 + v19[8]) = v17[v19[8]];
  uint64_t v63 = v19[9];
  uint64_t v64 = (char *)v16 + v63;
  uint64_t v65 = &v17[v63];
  uint64_t v66 = sub_1000CABE0();
  uint64_t v67 = *(void *)(v66 - 8);
  uint64_t v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
  int v69 = v68(v64, 1, v66);
  int v70 = v68(v65, 1, v66);
  if (!v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 40))(v64, v65, v66);
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v67 + 8))(v64, v66);
    goto LABEL_36;
  }
  if (v70)
  {
LABEL_36:
    uint64_t v71 = sub_10001D64C(&qword_10010F340);
    memcpy(v64, v65, *(void *)(*(void *)(v71 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v64, v65, v66);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
LABEL_37:
  *(void **)((char *)v16 + v19[10]) = *(void **)&v17[v19[10]];
  swift_release();
  uint64_t v72 = v19[11];
  char v73 = (void **)((char *)v16 + v72);
  long long v74 = &v17[v72];
  uint64_t v76 = *(void *)v74;
  uint64_t v75 = *((void *)v74 + 1);
  *char v73 = v76;
  v73[1] = v75;
  swift_bridgeObjectRelease();
  uint64_t v77 = v19[12];
  uint64_t v78 = (void **)((char *)v16 + v77);
  uint64_t v79 = &v17[v77];
  uint64_t v81 = *(void *)v79;
  uint64_t v80 = *((void *)v79 + 1);
  *uint64_t v78 = v81;
  v78[1] = v80;
  swift_bridgeObjectRelease();
  uint64_t v82 = *(int *)(v99 + 24);
  int v83 = (_OWORD *)((char *)v101 + v82);
  uint64_t v84 = (char *)v100 + v82;
  *int v83 = *(_OWORD *)((char *)v100 + v82);
  uint64_t v85 = (int *)type metadata accessor for LayoutContext();
  uint64_t v86 = v85[6];
  uint64_t v87 = (char *)v83 + v86;
  uint64_t v88 = &v84[v86];
  uint64_t v89 = sub_1000CBEC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 40))(v87, v88, v89);
  *(_OWORD *)((char *)v83 + v85[7]) = *(_OWORD *)&v84[v85[7]];
  uint64_t v90 = v85[8];
  uint64_t v91 = (char *)v83 + v90;
  uint64_t v92 = &v84[v90];
  uint64_t v93 = sub_1000CB6D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v93 - 8) + 40))(v91, v92, v93);
  *(void *)((char *)v83 + v85[9]) = *(void *)&v84[v85[9]];
  *(void *)((char *)v83 + v85[10]) = *(void *)&v84[v85[10]];
  *((unsigned char *)v83 + v85[11]) = v84[v85[11]];
  *((unsigned char *)v83 + v85[12]) = v84[v85[12]];
  return v101;
}

uint64_t sub_100066C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100066C90);
}

uint64_t sub_100066C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Item(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for TodayContent();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = type metadata accessor for LayoutContext();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t sub_100066DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100066DF0);
}

uint64_t sub_100066DF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Item(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for TodayContent();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = type metadata accessor for LayoutContext();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

uint64_t type metadata accessor for RectangularContentView(uint64_t a1)
{
  return sub_100032D40(a1, qword_100110540);
}

uint64_t sub_100066F68()
{
  uint64_t result = type metadata accessor for Item(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for TodayContent();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for LayoutContext();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10006706C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100067088@<X0>(uint64_t a1@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v20 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v20);
  unint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Item(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10001D64C(&qword_100110580);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000CBD20();
  uint64_t v16 = v15;
  sub_1000673A4(&v24);
  uint64_t v22 = v14;
  uint64_t v23 = v16;
  sub_100067750(v1, (uint64_t)v6, type metadata accessor for Item);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1000676D0((uint64_t)v6, type metadata accessor for Item);
    uint64_t v17 = sub_1000CABE0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v9, 1, 1, v17);
  }
  else
  {
    sub_10006766C((uint64_t)v6, (uint64_t)v3);
    sub_100036850((uint64_t)&v3[*(int *)(v20 + 24)], (uint64_t)v9, &qword_10010F340);
    sub_1000676D0((uint64_t)v3, type metadata accessor for Item.Headline);
  }
  sub_10001D64C(&qword_100110588);
  sub_100036A5C(&qword_100110590, &qword_100110588);
  sub_1000CB9F0();
  sub_1000227A8((uint64_t)v9, &qword_10010F340);
  swift_release();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v21, v13, v10);
}

uint64_t sub_1000673A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RectangularHeadlineView(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Item(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100067750(v2, (uint64_t)v12, type metadata accessor for Item);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = sub_1000CB600();
    *(void *)&long long v28 = v13;
    *((void *)&v28 + 1) = v14;
    sub_1000231FC();
    uint64_t v16 = sub_1000CB9D0();
    long long v28 = (unint64_t)v15;
    LOBYTE(v29) = 1;
    *((void *)&v29 + 1) = v16;
    *(void *)&long long v30 = v17;
    BYTE8(v30) = v18 & 1;
    *(void *)&long long v31 = v19;
    sub_10001D64C(&qword_100110598);
    sub_100036A5C(&qword_1001105A0, &qword_100110598);
    uint64_t result = sub_1000CBC70();
    uint64_t v21 = result;
  }
  else
  {
    sub_10006766C((uint64_t)v12, (uint64_t)v9);
    sub_100067750((uint64_t)v9, (uint64_t)v6, type metadata accessor for Item.Headline);
    uint64_t v22 = type metadata accessor for RectangularContentView(0);
    sub_10005C3C0((uint64_t)&v28);
    sub_100067750(v2 + *(int *)(v22 + 20), (uint64_t)&v6[*(int *)(v4 + 24)], (uint64_t (*)(void))type metadata accessor for TodayContent);
    uint64_t v23 = &v6[*(int *)(v4 + 20)];
    long long v24 = v33;
    *((_OWORD *)v23 + 4) = v32;
    *((_OWORD *)v23 + 5) = v24;
    *((void *)v23 + 12) = v34;
    long long v25 = v29;
    *(_OWORD *)uint64_t v23 = v28;
    *((_OWORD *)v23 + 1) = v25;
    long long v26 = v31;
    *((_OWORD *)v23 + 2) = v30;
    *((_OWORD *)v23 + 3) = v26;
    sub_1000677B8();
    uint64_t v21 = sub_1000CBC70();
    uint64_t result = sub_1000676D0((uint64_t)v9, type metadata accessor for Item.Headline);
  }
  *a1 = v21;
  return result;
}

uint64_t sub_10006766C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Item.Headline(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000676D0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for RectangularHeadlineView(uint64_t a1)
{
  return sub_100032D40(a1, qword_100110608);
}

uint64_t sub_100067750(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000677B8()
{
  unint64_t result = qword_1001105A8;
  if (!qword_1001105A8)
  {
    type metadata accessor for RectangularHeadlineView(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001105A8);
  }
  return result;
}

uint64_t *sub_100067810(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v14 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    uint64_t v85 = type metadata accessor for Item.Headline(0);
    uint64_t v8 = *(int *)(v85 + 24);
    __dst = (char *)a1 + v8;
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = sub_1000CABE0();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v87 = v12;
    uint64_t v79 = v11;
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    }
    uint64_t v15 = *(int *)(v85 + 28);
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (char *)a2 + v15;
    char v18 = (void *)*((void *)v17 + 1);
    uint64_t v84 = v10;
    if (v18)
    {
      uint64_t v19 = *(void **)v17;
      *uint64_t v16 = v19;
      v16[1] = v18;
      id v20 = v19;
      id v21 = v18;
    }
    else
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    }
    uint64_t v22 = *(int *)(a3 + 20);
    uint64_t v23 = *(int *)(a3 + 24);
    long long v24 = (char *)a1 + v22;
    long long v25 = (char *)a2 + v22;
    long long v26 = *(void **)v25;
    *(void *)long long v24 = *(void *)v25;
    *(_OWORD *)(v24 + 8) = *(_OWORD *)(v25 + 8);
    *(_OWORD *)(v24 + 17) = *(_OWORD *)(v25 + 17);
    *(_OWORD *)(v24 + 40) = *(_OWORD *)(v25 + 40);
    uint64_t v27 = (void *)*((void *)v25 + 8);
    *((void *)v24 + 7) = *((void *)v25 + 7);
    *((void *)v24 + 8) = v27;
    long long v28 = (void *)*((void *)v25 + 9);
    *((void *)v24 + 9) = v28;
    *((_OWORD *)v24 + 5) = *((_OWORD *)v25 + 5);
    *((void *)v24 + 12) = *((void *)v25 + 12);
    uint64_t v86 = a1;
    long long v29 = (uint64_t *)((char *)a1 + v23);
    long long v30 = (char *)a2 + v23;
    long long v31 = *(void **)((char *)a2 + v23);
    *long long v29 = v31;
    uint64_t v81 = v29;
    int __dsta = (int *)type metadata accessor for TodayContent();
    uint64_t v32 = __dsta[5];
    long long v33 = (void *)((char *)v29 + v32);
    uint64_t v80 = v30;
    uint64_t v34 = &v30[v32];
    uint64_t v35 = type metadata accessor for Banner();
    uint64_t v36 = *(void *)(v35 - 8);
    uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
    id v38 = v26;
    id v39 = v27;
    id v40 = v28;
    id v41 = v31;
    if (v37(v34, 1, v35))
    {
      uint64_t v42 = sub_10001D64C(&qword_10010DE20);
      memcpy(v33, v34, *(void *)(*(void *)(v42 - 8) + 64));
      uint64_t v43 = v84;
      uint64_t v44 = v81;
    }
    else
    {
      uint64_t v45 = *((void *)v34 + 1);
      *long long v33 = *(void *)v34;
      v33[1] = v45;
      uint64_t v46 = *((void *)v34 + 3);
      v33[2] = *((void *)v34 + 2);
      _OWORD v33[3] = v46;
      uint64_t v47 = *((void *)v34 + 5);
      v33[4] = *((void *)v34 + 4);
      v33[5] = v47;
      uint64_t v48 = *(int *)(v35 + 28);
      uint64_t v49 = (char *)v33 + v48;
      uint64_t v50 = &v34[v48];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v43 = v84;
      uint64_t v51 = (int *)v35;
      if (v87(v50, 1, v84))
      {
        uint64_t v52 = sub_10001D64C(&qword_10010F340);
        memcpy(v49, v50, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v49, v50, v84);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v49, 0, 1, v84);
      }
      uint64_t v44 = v81;
      uint64_t v53 = v51[8];
      char v54 = (void *)((char *)v33 + v53);
      uint64_t v55 = &v34[v53];
      uint64_t v56 = *((void *)v55 + 1);
      *char v54 = *(void *)v55;
      v54[1] = v56;
      uint64_t v57 = v51[9];
      char v58 = *(void **)&v34[v57];
      swift_bridgeObjectRetain();
      if (v58 != (void *)1) {
        id v59 = v58;
      }
      *(void *)((char *)v33 + v57) = v58;
      uint64_t v60 = v51[10];
      uint64_t v61 = (char *)v33 + v60;
      uint64_t v62 = &v34[v60];
      uint64_t v63 = *(void **)v62;
      uint64_t v64 = (void *)*((void *)v62 + 1);
      char v65 = v62[16];
      sub_10001DB84(*(void **)v62, v64);
      *(void *)uint64_t v61 = v63;
      *((void *)v61 + 1) = v64;
      v61[16] = v65;
      (*(void (**)(void *, void, uint64_t, int *))(v36 + 56))(v33, 0, 1, v51);
    }
    *(void *)((char *)v44 + __dsta[6]) = *(void *)&v80[__dsta[6]];
    *(void *)((char *)v44 + __dsta[7]) = *(void *)&v80[__dsta[7]];
    *((unsigned char *)v44 + __dsta[8]) = v80[__dsta[8]];
    uint64_t v66 = __dsta[9];
    uint64_t v67 = (char *)v44 + v66;
    uint64_t v68 = &v80[v66];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (v87(v68, 1, v43))
    {
      uint64_t v69 = sub_10001D64C(&qword_10010F340);
      memcpy(v67, v68, *(void *)(*(void *)(v69 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v67, v68, v43);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v67, 0, 1, v43);
    }
    *(void *)((char *)v44 + __dsta[10]) = *(void *)&v80[__dsta[10]];
    uint64_t v70 = __dsta[11];
    uint64_t v71 = (void *)((char *)v44 + v70);
    uint64_t v72 = &v80[v70];
    uint64_t v73 = *((void *)v72 + 1);
    *uint64_t v71 = *(void *)v72;
    v71[1] = v73;
    uint64_t v74 = __dsta[12];
    uint64_t v75 = (void *)((char *)v44 + v74);
    uint64_t v76 = &v80[v74];
    uint64_t v77 = *((void *)v76 + 1);
    void *v75 = *(void *)v76;
    v75[1] = v77;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v86;
  }
  return (uint64_t *)v14;
}

uint64_t sub_100067D98(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for Item.Headline(0);
  uint64_t v5 = a1 + *(int *)(v4 + 24);
  uint64_t v6 = sub_1000CABE0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = (id *)(a1 + *(int *)(v4 + 28));
  if (v9[1])
  {
  }
  uint64_t v10 = (id *)(a1 + *(int *)(a2 + 20));

  uint64_t v11 = (id *)(a1 + *(int *)(a2 + 24));
  uint64_t v12 = type metadata accessor for TodayContent();
  uint64_t v13 = (char *)v11 + *(int *)(v12 + 20);
  uint64_t v14 = (int *)type metadata accessor for Banner();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v14 - 1) + 48))(v13, 1, v14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = &v13[v14[7]];
    if (!v8((uint64_t)v15, 1, v6)) {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
    }
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void **)&v13[v14[9]];
    if (v16 != (void *)1) {

    }
    sub_10001DE30(*(void **)&v13[v14[10]], *(void **)&v13[v14[10] + 8]);
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v17 = (char *)v11 + *(int *)(v12 + 36);
  if (!v8((uint64_t)v17, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  }
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10006803C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = type metadata accessor for Item.Headline(0);
  uint64_t v7 = *(int *)(v6 + 24);
  __dst = (char *)a1 + v7;
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = sub_1000CABE0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v85 = v11;
  uint64_t v77 = v10;
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(v6 + 28);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = (void *)*((void *)v15 + 1);
  uint64_t v82 = v9;
  if (v16)
  {
    uint64_t v17 = *(void **)v15;
    *uint64_t v14 = v17;
    v14[1] = v16;
    id v18 = v17;
    id v19 = v16;
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  }
  uint64_t v20 = *(int *)(a3 + 20);
  uint64_t v21 = *(int *)(a3 + 24);
  uint64_t v22 = (char *)a1 + v20;
  uint64_t v23 = (char *)a2 + v20;
  long long v24 = *(void **)v23;
  *(void *)uint64_t v22 = *(void *)v23;
  *(_OWORD *)(v22 + 8) = *(_OWORD *)(v23 + 8);
  *(_OWORD *)(v22 + 17) = *(_OWORD *)(v23 + 17);
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v23 + 40);
  long long v25 = (void *)*((void *)v23 + 8);
  *((void *)v22 + 7) = *((void *)v23 + 7);
  *((void *)v22 + 8) = v25;
  long long v26 = (void *)*((void *)v23 + 9);
  *((void *)v22 + 9) = v26;
  *((_OWORD *)v22 + 5) = *((_OWORD *)v23 + 5);
  *((void *)v22 + 12) = *((void *)v23 + 12);
  uint64_t v84 = a1;
  uint64_t v27 = (void *)((char *)a1 + v21);
  long long v28 = (char *)a2 + v21;
  long long v29 = *(void **)((char *)a2 + v21);
  *uint64_t v27 = v29;
  uint64_t v79 = v27;
  int __dsta = (int *)type metadata accessor for TodayContent();
  uint64_t v30 = __dsta[5];
  long long v31 = (void *)((char *)v27 + v30);
  uint64_t v78 = v28;
  uint64_t v32 = &v28[v30];
  uint64_t v33 = type metadata accessor for Banner();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  id v36 = v24;
  id v37 = v25;
  id v38 = v26;
  id v39 = v29;
  if (v35(v32, 1, v33))
  {
    uint64_t v40 = sub_10001D64C(&qword_10010DE20);
    memcpy(v31, v32, *(void *)(*(void *)(v40 - 8) + 64));
    uint64_t v41 = v82;
    uint64_t v42 = v79;
  }
  else
  {
    uint64_t v43 = *((void *)v32 + 1);
    *long long v31 = *(void *)v32;
    v31[1] = v43;
    uint64_t v44 = *((void *)v32 + 3);
    void v31[2] = *((void *)v32 + 2);
    v31[3] = v44;
    uint64_t v45 = *((void *)v32 + 5);
    _OWORD v31[4] = *((void *)v32 + 4);
    v31[5] = v45;
    uint64_t v46 = *(int *)(v33 + 28);
    uint64_t v47 = (char *)v31 + v46;
    uint64_t v48 = &v32[v46];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v41 = v82;
    uint64_t v49 = (int *)v33;
    if (v85(v48, 1, v82))
    {
      uint64_t v50 = sub_10001D64C(&qword_10010F340);
      memcpy(v47, v48, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v47, v48, v82);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v47, 0, 1, v82);
    }
    uint64_t v42 = v79;
    uint64_t v51 = v49[8];
    uint64_t v52 = (void *)((char *)v31 + v51);
    uint64_t v53 = &v32[v51];
    uint64_t v54 = *((void *)v53 + 1);
    *uint64_t v52 = *(void *)v53;
    v52[1] = v54;
    uint64_t v55 = v49[9];
    uint64_t v56 = *(void **)&v32[v55];
    swift_bridgeObjectRetain();
    if (v56 != (void *)1) {
      id v57 = v56;
    }
    *(void *)((char *)v31 + v55) = v56;
    uint64_t v58 = v49[10];
    id v59 = (char *)v31 + v58;
    uint64_t v60 = &v32[v58];
    uint64_t v61 = *(void **)v60;
    uint64_t v62 = (void *)*((void *)v60 + 1);
    char v63 = v60[16];
    sub_10001DB84(*(void **)v60, v62);
    *(void *)id v59 = v61;
    *((void *)v59 + 1) = v62;
    v59[16] = v63;
    (*(void (**)(void *, void, uint64_t, int *))(v34 + 56))(v31, 0, 1, v49);
  }
  *(void *)((char *)v42 + __dsta[6]) = *(void *)&v78[__dsta[6]];
  *(void *)((char *)v42 + __dsta[7]) = *(void *)&v78[__dsta[7]];
  *((unsigned char *)v42 + __dsta[8]) = v78[__dsta[8]];
  uint64_t v64 = __dsta[9];
  char v65 = (char *)v42 + v64;
  uint64_t v66 = &v78[v64];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  if (v85(v66, 1, v41))
  {
    uint64_t v67 = sub_10001D64C(&qword_10010F340);
    memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v65, v66, v41);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v65, 0, 1, v41);
  }
  *(void *)((char *)v42 + __dsta[10]) = *(void *)&v78[__dsta[10]];
  uint64_t v68 = __dsta[11];
  uint64_t v69 = (void *)((char *)v42 + v68);
  uint64_t v70 = &v78[v68];
  uint64_t v71 = *((void *)v70 + 1);
  *uint64_t v69 = *(void *)v70;
  v69[1] = v71;
  uint64_t v72 = __dsta[12];
  uint64_t v73 = (void *)((char *)v42 + v72);
  uint64_t v74 = &v78[v72];
  uint64_t v75 = *((void *)v74 + 1);
  *uint64_t v73 = *(void *)v74;
  v73[1] = v75;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v84;
}

void *sub_10006856C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for Item.Headline(0);
  uint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1000CABE0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void))(v10 + 48);
  unsigned int v12 = ((uint64_t (*)(char *, uint64_t, uint64_t))v11)(v7, 1, v9);
  unint64_t v119 = v11;
  unsigned int v13 = ((uint64_t (*)(char *, uint64_t, uint64_t))v11)(v8, 1, v9);
  uint64_t v115 = v10;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10001D64C(&qword_10010F340);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3;
  uint64_t v16 = *(int *)(v5 + 28);
  uint64_t v17 = (void **)((char *)a1 + v16);
  id v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)((char *)a1 + v16 + 8);
  uint64_t v20 = *(void *)((char *)a2 + v16 + 8);
  uint64_t v118 = v9;
  if (v19)
  {
    if (v20)
    {
      uint64_t v21 = *v17;
      uint64_t v22 = *(void **)v18;
      *uint64_t v17 = *(void **)v18;
      id v23 = v22;

      long long v24 = (void *)*((void *)v18 + 1);
      long long v25 = v17[1];
      v17[1] = v24;
      id v26 = v24;

      goto LABEL_14;
    }
    sub_100034B4C((uint64_t)v17);
  }
  else if (v20)
  {
    uint64_t v27 = *(void **)v18;
    *uint64_t v17 = *(void **)v18;
    long long v28 = (void *)*((void *)v18 + 1);
    v17[1] = v28;
    id v29 = v27;
    id v30 = v28;
    goto LABEL_14;
  }
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
LABEL_14:
  uint64_t v31 = *(int *)(v15 + 20);
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = *(void **)((char *)a2 + v31);
  uint64_t v35 = *(void **)v32;
  *(void *)uint64_t v32 = v34;
  id v36 = v34;

  *((void *)v32 + 1) = *((void *)v33 + 1);
  long long v37 = *((_OWORD *)v33 + 1);
  v32[32] = v33[32];
  *((_OWORD *)v32 + 1) = v37;
  *((void *)v32 + 5) = *((void *)v33 + 5);
  *((void *)v32 + 6) = *((void *)v33 + 6);
  *((void *)v32 + 7) = *((void *)v33 + 7);
  id v38 = (void *)*((void *)v33 + 8);
  id v39 = (void *)*((void *)v32 + 8);
  *((void *)v32 + 8) = v38;
  id v40 = v38;

  uint64_t v41 = (void *)*((void *)v33 + 9);
  uint64_t v42 = (void *)*((void *)v32 + 9);
  *((void *)v32 + 9) = v41;
  id v43 = v41;

  *((void *)v32 + 10) = *((void *)v33 + 10);
  *((void *)v32 + 11) = *((void *)v33 + 11);
  *((void *)v32 + 12) = *((void *)v33 + 12);
  uint64_t v44 = *(int *)(v15 + 24);
  uint64_t v45 = (void **)((char *)a1 + v44);
  uint64_t v46 = (void **)((char *)a2 + v44);
  uint64_t v47 = *v46;
  uint64_t v48 = *v45;
  *uint64_t v45 = *v46;
  id v49 = v47;

  uint64_t v116 = type metadata accessor for TodayContent();
  uint64_t v50 = *(int *)(v116 + 20);
  uint64_t v51 = (void **)((char *)v45 + v50);
  uint64_t v52 = (void **)((char *)v46 + v50);
  uint64_t v53 = (int *)type metadata accessor for Banner();
  uint64_t v54 = *((void *)v53 - 1);
  uint64_t v55 = *(uint64_t (**)(void *, uint64_t, int *))(v54 + 48);
  int v56 = v55(v51, 1, v53);
  int v57 = v55(v52, 1, v53);
  if (v56)
  {
    if (!v57)
    {
      *uint64_t v51 = *v52;
      v51[1] = v52[1];
      v51[2] = v52[2];
      _OWORD v51[3] = v52[3];
      _OWORD v51[4] = v52[4];
      v51[5] = v52[5];
      uint64_t v58 = v53[7];
      id v59 = (char *)v51 + v58;
      uint64_t v60 = (char *)v52 + v58;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v119)(v60, 1, v118))
      {
        uint64_t v61 = sub_10001D64C(&qword_10010F340);
        memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v59, v60, v118);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v115 + 56))(v59, 0, 1, v118);
      }
      uint64_t v68 = v53[8];
      uint64_t v69 = (void *)((char *)v51 + v68);
      uint64_t v70 = (void *)((char *)v52 + v68);
      *uint64_t v69 = *v70;
      v69[1] = v70[1];
      uint64_t v71 = v53[9];
      uint64_t v72 = *(void **)((char *)v52 + v71);
      swift_bridgeObjectRetain();
      if (v72 != (void *)1) {
        id v73 = v72;
      }
      *(void *)((char *)v51 + v71) = v72;
      uint64_t v74 = v53[10];
      uint64_t v75 = (char *)v51 + v74;
      uint64_t v76 = (char *)v52 + v74;
      uint64_t v77 = *(void **)v76;
      uint64_t v78 = (void *)*((void *)v76 + 1);
      char v79 = v76[16];
      sub_10001DB84(*(void **)v76, v78);
      *(void *)uint64_t v75 = v77;
      *((void *)v75 + 1) = v78;
      v75[16] = v79;
      (*(void (**)(void *, void, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
      goto LABEL_29;
    }
LABEL_20:
    uint64_t v62 = sub_10001D64C(&qword_10010DE20);
    memcpy(v51, v52, *(void *)(*(void *)(v62 - 8) + 64));
LABEL_29:
    uint64_t v80 = (int *)v116;
    uint64_t v67 = v118;
    goto LABEL_30;
  }
  if (v57)
  {
    sub_1000676D0((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for Banner);
    goto LABEL_20;
  }
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v51[2] = v52[2];
  _OWORD v51[3] = v52[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _OWORD v51[4] = v52[4];
  v51[5] = v52[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = v53[7];
  uint64_t v64 = (char *)v52 + v63;
  uint64_t v113 = (char *)v51 + v63;
  int v114 = v119();
  __src = v64;
  unsigned int v65 = ((uint64_t (*)(char *, uint64_t, uint64_t))v119)(v64, 1, v118);
  if (v114)
  {
    if (v65)
    {
      uint64_t v66 = sub_10001D64C(&qword_10010F340);
      memcpy(v113, v64, *(void *)(*(void *)(v66 - 8) + 64));
      uint64_t v67 = v118;
    }
    else
    {
      uint64_t v67 = v118;
      (*(void (**)(char *, void *, uint64_t))(v115 + 16))(v113, __src, v118);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v115 + 56))(v113, 0, 1, v118);
    }
  }
  else
  {
    uint64_t v67 = v118;
    if (v65)
    {
      (*(void (**)(char *, uint64_t))(v115 + 8))(v113, v118);
      uint64_t v94 = sub_10001D64C(&qword_10010F340);
      memcpy(v113, __src, *(void *)(*(void *)(v94 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, void *, uint64_t))(v115 + 24))(v113, __src, v118);
    }
  }
  uint64_t v95 = v53[8];
  uint64_t v96 = (void *)((char *)v51 + v95);
  uint64_t v97 = (void *)((char *)v52 + v95);
  *uint64_t v96 = *v97;
  v96[1] = v97[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v98 = v53[9];
  uint64_t v99 = (void *)((char *)v51 + v98);
  uint64_t v100 = *(void **)((char *)v51 + v98);
  uint64_t v101 = *(void **)((char *)v52 + v98);
  if (v100 != (void *)1)
  {
    if (v101 != (void *)1)
    {
      *uint64_t v99 = v101;
      id v103 = v101;

      goto LABEL_49;
    }
    sub_10001EA8C((uint64_t)v51 + v98);
    uint64_t v101 = *(void **)((char *)v52 + v98);
    goto LABEL_47;
  }
  if (v101 == (void *)1)
  {
LABEL_47:
    *uint64_t v99 = v101;
    goto LABEL_49;
  }
  *uint64_t v99 = v101;
  id v102 = v101;
LABEL_49:
  uint64_t v80 = (int *)v116;
  uint64_t v104 = v53[10];
  uint64_t v105 = (char *)v51 + v104;
  uint64_t v106 = (char *)v52 + v104;
  uint64_t v107 = *(void **)v106;
  uint64_t v108 = (void *)*((void *)v106 + 1);
  char v109 = v106[16];
  sub_10001DB84(*(void **)v106, v108);
  uint64_t v110 = *(void **)v105;
  uint64_t v111 = (void *)*((void *)v105 + 1);
  *(void *)uint64_t v105 = v107;
  *((void *)v105 + 1) = v108;
  v105[16] = v109;
  sub_10001DE30(v110, v111);
LABEL_30:
  *(void **)((char *)v45 + v80[6]) = *(void **)((char *)v46 + v80[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void **)((char *)v45 + v80[7]) = *(void **)((char *)v46 + v80[7]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *((unsigned char *)v45 + v80[8]) = *((unsigned char *)v46 + v80[8]);
  uint64_t v81 = v80[9];
  uint64_t v82 = (char *)v45 + v81;
  int v83 = (char *)v46 + v81;
  unsigned int v84 = ((uint64_t (*)(char *, uint64_t, uint64_t))v119)((char *)v45 + v81, 1, v67);
  unsigned int v85 = ((uint64_t (*)(char *, uint64_t, uint64_t))v119)(v83, 1, v67);
  if (!v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v115 + 24))(v82, v83, v67);
      goto LABEL_36;
    }
    (*(void (**)(char *, uint64_t))(v115 + 8))(v82, v67);
    goto LABEL_35;
  }
  if (v85)
  {
LABEL_35:
    uint64_t v86 = sub_10001D64C(&qword_10010F340);
    memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v82, v83, v67);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v115 + 56))(v82, 0, 1, v67);
LABEL_36:
  *(void **)((char *)v45 + v80[10]) = *(void **)((char *)v46 + v80[10]);
  swift_retain();
  swift_release();
  uint64_t v87 = v80[11];
  uint64_t v88 = (void **)((char *)v45 + v87);
  uint64_t v89 = (void **)((char *)v46 + v87);
  *uint64_t v88 = *v89;
  v88[1] = v89[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v90 = v80[12];
  uint64_t v91 = (void **)((char *)v45 + v90);
  uint64_t v92 = (void **)((char *)v46 + v90);
  *uint64_t v91 = *v92;
  v91[1] = v92[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_100068EFC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = type metadata accessor for Item.Headline(0);
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_1000CABE0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v45(v10, 1, v11))
  {
    uint64_t v13 = sub_10001D64C(&qword_10010F340);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_OWORD *)((char *)a1 + *(int *)(v7 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 28));
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  long long v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  *((void *)v16 + 12) = *((void *)v17 + 12);
  long long v19 = *((_OWORD *)v17 + 5);
  *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
  *((_OWORD *)v16 + 5) = v19;
  long long v20 = *((_OWORD *)v17 + 3);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  *((_OWORD *)v16 + 3) = v20;
  uint64_t v21 = (char *)a1 + v15;
  uint64_t v22 = (char *)a2 + v15;
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  id v23 = (int *)type metadata accessor for TodayContent();
  uint64_t v24 = v23[5];
  long long v25 = &v21[v24];
  id v26 = &v22[v24];
  uint64_t v27 = (int *)type metadata accessor for Banner();
  uint64_t v28 = *((void *)v27 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = sub_10001D64C(&qword_10010DE20);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    long long v30 = *((_OWORD *)v26 + 1);
    *(_OWORD *)long long v25 = *(_OWORD *)v26;
    *((_OWORD *)v25 + 1) = v30;
    *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
    uint64_t v31 = v27[7];
    uint64_t v43 = v12;
    __dst = &v25[v31];
    uint64_t v32 = &v26[v31];
    if (v45(&v26[v31], 1, v11))
    {
      uint64_t v33 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v32, *(void *)(*(void *)(v33 - 8) + 64));
      uint64_t v12 = v43;
    }
    else
    {
      uint64_t v34 = v32;
      uint64_t v12 = v43;
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(__dst, v34, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v11);
    }
    *(_OWORD *)&v25[v27[8]] = *(_OWORD *)&v26[v27[8]];
    *(void *)&v25[v27[9]] = *(void *)&v26[v27[9]];
    uint64_t v35 = v27[10];
    id v36 = &v25[v35];
    long long v37 = &v26[v35];
    v36[16] = v37[16];
    *(_OWORD *)id v36 = *(_OWORD *)v37;
    (*(void (**)(char *, void, uint64_t, int *))(v28 + 56))(v25, 0, 1, v27);
  }
  *(void *)&v21[v23[6]] = *(void *)&v22[v23[6]];
  *(void *)&v21[v23[7]] = *(void *)&v22[v23[7]];
  v21[v23[8]] = v22[v23[8]];
  uint64_t v38 = v23[9];
  id v39 = &v21[v38];
  id v40 = &v22[v38];
  if (v45(&v22[v38], 1, v11))
  {
    uint64_t v41 = sub_10001D64C(&qword_10010F340);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v39, v40, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v39, 0, 1, v11);
  }
  *(void *)&v21[v23[10]] = *(void *)&v22[v23[10]];
  *(_OWORD *)&v21[v23[11]] = *(_OWORD *)&v22[v23[11]];
  *(_OWORD *)&v21[v23[12]] = *(_OWORD *)&v22[v23[12]];
  return a1;
}

void *sub_100069324(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for Item.Headline(0);
  uint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1000CABE0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void))(v10 + 48);
  int v12 = ((uint64_t (*)(char *, uint64_t, uint64_t))v11)(v7, 1, v9);
  uint64_t v96 = v11;
  int v13 = ((uint64_t (*)(char *, uint64_t, uint64_t))v11)(v8, 1, v9);
  uint64_t v95 = v9;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10001D64C(&qword_10010F340);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(v5 + 28);
  uint64_t v16 = (void **)((char *)a1 + v15);
  uint64_t v17 = (void **)((char *)a2 + v15);
  uint64_t v92 = v10;
  if (*(void *)((char *)a1 + v15 + 8))
  {
    if (v17[1])
    {
      long long v18 = *v16;
      *uint64_t v16 = *v17;

      long long v19 = v16[1];
      v16[1] = v17[1];

      goto LABEL_12;
    }
    sub_100034B4C((uint64_t)v16);
  }
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
LABEL_12:
  uint64_t v20 = *(int *)(a3 + 20);
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  id v23 = *(void **)((char *)a1 + v20);
  *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);

  *((void *)v21 + 1) = *((void *)v22 + 1);
  *((_OWORD *)v21 + 1) = *((_OWORD *)v22 + 1);
  v21[32] = v22[32];
  *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
  *((void *)v21 + 7) = *((void *)v22 + 7);
  uint64_t v24 = (void *)*((void *)v21 + 8);
  *((void *)v21 + 8) = *((void *)v22 + 8);

  long long v25 = (void *)*((void *)v21 + 9);
  *((void *)v21 + 9) = *((void *)v22 + 9);

  *((_OWORD *)v21 + 5) = *((_OWORD *)v22 + 5);
  *((void *)v21 + 12) = *((void *)v22 + 12);
  uint64_t v26 = *(int *)(a3 + 24);
  uint64_t v94 = a1;
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = *(void **)((char *)a1 + v26);
  *(void *)((char *)a1 + v26) = *(void *)((char *)a2 + v26);

  long long v30 = (int *)type metadata accessor for TodayContent();
  uint64_t v31 = v30[5];
  uint64_t v32 = &v27[v31];
  uint64_t v33 = &v28[v31];
  uint64_t v34 = (int *)type metadata accessor for Banner();
  uint64_t v35 = *((void *)v34 - 1);
  id v36 = *(uint64_t (**)(char *, uint64_t, int *))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      sub_1000676D0((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_18;
    }
    uint64_t v47 = *((void *)v33 + 1);
    *(void *)uint64_t v32 = *(void *)v33;
    *((void *)v32 + 1) = v47;
    swift_bridgeObjectRelease();
    uint64_t v48 = *((void *)v33 + 3);
    *((void *)v32 + 2) = *((void *)v33 + 2);
    *((void *)v32 + 3) = v48;
    swift_bridgeObjectRelease();
    uint64_t v49 = *((void *)v33 + 5);
    *((void *)v32 + 4) = *((void *)v33 + 4);
    *((void *)v32 + 5) = v49;
    swift_bridgeObjectRelease();
    uint64_t v50 = v34[7];
    uint64_t v51 = &v33[v50];
    uint64_t v90 = &v32[v50];
    int v91 = v96();
    int v52 = ((uint64_t (*)(char *, uint64_t, uint64_t))v96)(v51, 1, v95);
    if (v91)
    {
      if (v52)
      {
        size_t v53 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v54 = v90;
LABEL_27:
        memcpy(v54, v51, v53);
        goto LABEL_30;
      }
      (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v90, v51, v95);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v90, 0, 1, v95);
    }
    else
    {
      if (v52)
      {
        (*(void (**)(char *, uint64_t))(v92 + 8))(v90, v95);
        size_t v53 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v54 = v90;
        goto LABEL_27;
      }
      (*(void (**)(char *, char *, uint64_t))(v92 + 40))(v90, v51, v95);
    }
LABEL_30:
    uint64_t v46 = v94;
    uint64_t v58 = v34[8];
    id v59 = &v32[v58];
    uint64_t v60 = &v33[v58];
    uint64_t v62 = *(void *)v60;
    uint64_t v61 = *((void *)v60 + 1);
    *(void *)id v59 = v62;
    *((void *)v59 + 1) = v61;
    swift_bridgeObjectRelease();
    uint64_t v63 = v34[9];
    uint64_t v64 = &v32[v63];
    unsigned int v65 = *(void **)&v32[v63];
    uint64_t v66 = *(void *)&v33[v63];
    if (v65 != (void *)1)
    {
      if (v66 != 1)
      {
        *(void *)uint64_t v64 = v66;

        goto LABEL_35;
      }
      sub_10001EA8C((uint64_t)&v32[v63]);
      uint64_t v66 = *(void *)&v33[v63];
    }
    *(void *)uint64_t v64 = v66;
LABEL_35:
    uint64_t v45 = v95;
    uint64_t v67 = v34[10];
    uint64_t v68 = &v32[v67];
    uint64_t v69 = &v33[v67];
    char v70 = v69[16];
    uint64_t v71 = *(void **)v68;
    uint64_t v72 = (void *)*((void *)v68 + 1);
    *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
    v68[16] = v70;
    sub_10001DE30(v71, v72);
    goto LABEL_36;
  }
  if (v38)
  {
LABEL_18:
    uint64_t v44 = sub_10001D64C(&qword_10010DE20);
    memcpy(v32, v33, *(void *)(*(void *)(v44 - 8) + 64));
    uint64_t v46 = v94;
    uint64_t v45 = v95;
    goto LABEL_36;
  }
  long long v39 = *((_OWORD *)v33 + 1);
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  *((_OWORD *)v32 + 1) = v39;
  *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
  uint64_t v40 = v34[7];
  uint64_t v41 = &v32[v40];
  uint64_t v42 = &v33[v40];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v96)(&v33[v40], 1, v95))
  {
    uint64_t v43 = sub_10001D64C(&qword_10010F340);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v41, v42, v95);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v41, 0, 1, v95);
  }
  *(_OWORD *)&v32[v34[8]] = *(_OWORD *)&v33[v34[8]];
  *(void *)&v32[v34[9]] = *(void *)&v33[v34[9]];
  uint64_t v55 = v34[10];
  int v56 = &v32[v55];
  int v57 = &v33[v55];
  v56[16] = v57[16];
  *(_OWORD *)int v56 = *(_OWORD *)v57;
  (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
  uint64_t v46 = v94;
  uint64_t v45 = v95;
LABEL_36:
  *(void *)&v27[v30[6]] = *(void *)&v28[v30[6]];
  swift_bridgeObjectRelease();
  *(void *)&v27[v30[7]] = *(void *)&v28[v30[7]];
  swift_unknownObjectRelease();
  v27[v30[8]] = v28[v30[8]];
  uint64_t v73 = v30[9];
  uint64_t v74 = &v27[v73];
  uint64_t v75 = &v28[v73];
  int v76 = ((uint64_t (*)(char *, uint64_t, uint64_t))v96)(&v27[v73], 1, v45);
  int v77 = ((uint64_t (*)(char *, uint64_t, uint64_t))v96)(v75, 1, v45);
  if (!v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 40))(v74, v75, v45);
      goto LABEL_42;
    }
    (*(void (**)(char *, uint64_t))(v92 + 8))(v74, v45);
    goto LABEL_41;
  }
  if (v77)
  {
LABEL_41:
    uint64_t v78 = sub_10001D64C(&qword_10010F340);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v74, v75, v45);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v74, 0, 1, v45);
LABEL_42:
  *(void *)&v27[v30[10]] = *(void *)&v28[v30[10]];
  swift_release();
  uint64_t v79 = v30[11];
  uint64_t v80 = &v27[v79];
  uint64_t v81 = &v28[v79];
  uint64_t v83 = *(void *)v81;
  uint64_t v82 = *((void *)v81 + 1);
  *(void *)uint64_t v80 = v83;
  *((void *)v80 + 1) = v82;
  swift_bridgeObjectRelease();
  uint64_t v84 = v30[12];
  unsigned int v85 = &v27[v84];
  uint64_t v86 = &v28[v84];
  uint64_t v88 = *(void *)v86;
  uint64_t v87 = *((void *)v86 + 1);
  *(void *)unsigned int v85 = v88;
  *((void *)v85 + 1) = v87;
  swift_bridgeObjectRelease();
  return v46;
}

uint64_t sub_100069B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100069B60);
}

uint64_t sub_100069B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Item.Headline(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for TodayContent();
    int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 24);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100069C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100069CA0);
}

uint64_t sub_100069CA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Item.Headline(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for TodayContent();
    int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_100069DCC()
{
  uint64_t result = type metadata accessor for Item.Headline(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for TodayContent();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100069E9C(uint64_t a1)
{
  return sub_10006BD5C(a1, &qword_100110588, &qword_100110590);
}

uint64_t sub_100069ED8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100069EF4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v3 = sub_1000CB650();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = sub_1000CB7A0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10001D64C(&qword_100110660);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10001D64C(&qword_100110668);
  uint64_t v63 = *(void *)(v11 - 8);
  uint64_t v64 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10001D64C(&qword_100110670);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v66 = (uint64_t)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v61 = (char *)&v61 - v18;
  __chkstk_darwin(v17);
  uint64_t v68 = (uint64_t)&v61 - v19;
  *(void *)unint64_t v10 = sub_1000CB5E0();
  *((void *)v10 + 1) = 0;
  v10[16] = 1;
  uint64_t v20 = sub_10001D64C(&qword_100110678);
  sub_10006A544((uint64_t)a1, (uint64_t)&v10[*(int *)(v20 + 44)]);
  sub_1000CB780();
  uint64_t v21 = sub_100036A5C(&qword_100110680, &qword_100110660);
  uint64_t v62 = (void *)v8;
  sub_1000CBAA0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1000227A8((uint64_t)v10, &qword_100110660);
  sub_1000CB640();
  v71._object = (void *)0x80000001000DBF40;
  v71._countAndFlagsBits = 0xD000000000000011;
  sub_1000CB630(v71);
  unsigned int v65 = a1;
  id v22 = [*a1 sourceName];
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = sub_1000CC1F0();
    uint64_t v26 = v25;
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v26 = (void *)0xE000000000000000;
  }
  v72._countAndFlagsBits = v24;
  v72._object = v26;
  sub_1000CB620(v72);
  swift_bridgeObjectRelease();
  v73._countAndFlagsBits = 0;
  v73._object = (void *)0xE000000000000000;
  sub_1000CB630(v73);
  sub_1000CB670();
  uint64_t v27 = sub_1000CB9C0();
  uint64_t v29 = v28;
  char v31 = v30 & 1;
  id v69 = v62;
  uint64_t v70 = v21;
  swift_getOpaqueTypeConformance2();
  uint64_t v32 = (uint64_t)v61;
  uint64_t v33 = v64;
  sub_1000CBA50();
  sub_100036118(v27, v29, v31);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v13, v33);
  sub_1000365A0(v32, v68, &qword_100110670);
  uint64_t v34 = v65;
  id v69 = sub_1000B7798();
  uint64_t v70 = v35;
  sub_1000231FC();
  uint64_t v36 = sub_1000CB9D0();
  uint64_t v38 = v37;
  LOBYTE(v33) = v39 & 1;
  id v40 = *(id *)((char *)v34 + *(int *)(type metadata accessor for RectangularHeadlineView(0) + 20) + 72);
  sub_1000CB8B0();
  uint64_t v41 = sub_1000CB940();
  uint64_t v43 = v42;
  char v45 = v44;
  swift_release();
  char v46 = v45 & 1;
  sub_100036118(v36, v38, v33);
  swift_bridgeObjectRelease();
  sub_1000CBB60();
  uint64_t v47 = sub_1000CB900();
  uint64_t v49 = v48;
  char v51 = v50;
  uint64_t v53 = v52;
  swift_release();
  LOBYTE(v33) = v51 & 1;
  sub_100036118(v41, v43, v46);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v55 = swift_getKeyPath();
  uint64_t v56 = v68;
  uint64_t v57 = v66;
  sub_100036850(v68, v66, &qword_100110670);
  uint64_t v58 = v67;
  sub_100036850(v57, v67, &qword_100110670);
  uint64_t v59 = v58 + *(int *)(sub_10001D64C(&qword_100110688) + 48);
  *(void *)uint64_t v59 = v47;
  *(void *)(v59 + 8) = v49;
  *(unsigned char *)(v59 + 16) = v33;
  *(void *)(v59 + 24) = v53;
  *(void *)(v59 + 32) = KeyPath;
  *(void *)(v59 + 40) = 3;
  *(unsigned char *)(v59 + 48) = 0;
  *(void *)(v59 + 56) = v55;
  *(void *)(v59 + 64) = 0x3FE8000000000000;
  sub_100036108(v47, v49, v33);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1000227A8(v56, &qword_100110670);
  sub_100036118(v47, v49, v33);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_1000227A8(v57, &qword_100110670);
}

uint64_t sub_10006A544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v160 = a2;
  uint64_t v159 = sub_1000CB8F0();
  uint64_t v158 = *(void *)(v159 - 8);
  __chkstk_darwin(v159);
  v157 = (char *)&v129 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = sub_10001D64C(&qword_100110690);
  __chkstk_darwin(v145);
  uint64_t v149 = (uint64_t *)((char *)&v129 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10001D64C(&qword_100110698);
  __chkstk_darwin(v5 - 8);
  v147 = (char *)&v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_10001D64C(&qword_1001106A0);
  __chkstk_darwin(v144);
  uint64_t v148 = (char *)&v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = sub_10001D64C(&qword_1001106A8);
  __chkstk_darwin(v146);
  uint64_t v151 = (uint64_t)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = sub_10001D64C(&qword_1001106B0);
  __chkstk_darwin(v152);
  uint64_t v150 = (char *)&v129 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = sub_10001D64C(&qword_1001106B8);
  uint64_t v155 = *(void *)(v156 - 8);
  uint64_t v10 = __chkstk_darwin(v156);
  v154 = (char *)&v129 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v153 = (char *)&v129 - v12;
  uint64_t v13 = sub_10001D64C(&qword_10010EBC0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v129 - v17;
  uint64_t v137 = sub_10001D64C(&qword_10010EBC8);
  __chkstk_darwin(v137);
  uint64_t v20 = (uint64_t *)((char *)&v129 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v138 = sub_1000CBC10();
  uint64_t v21 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  id v23 = (char *)&v129 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10001D64C(&qword_10010EBD0);
  __chkstk_darwin(v24);
  uint64_t v26 = (uint64_t *)((char *)&v129 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v141 = sub_10001D64C(&qword_10010EBD8);
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v139 = (char *)&v129 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10001D64C(&qword_10010EBE0);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  uint64_t v143 = (uint64_t)&v129 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v142 = (uint64_t)&v129 - v31;
  uint64_t v32 = sub_10001D64C(&qword_1001106C0);
  uint64_t v33 = __chkstk_darwin(v32 - 8);
  uint64_t v162 = (uint64_t)&v129 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v129 - v35;
  uint64_t v37 = a1 + *(int *)(type metadata accessor for RectangularHeadlineView(0) + 24);
  uint64_t v38 = *(void *)(v37 + *(int *)(type metadata accessor for TodayContent() + 24));
  uint64_t v39 = *(void *)(v38 + 16);
  v161 = v36;
  if (v39
    && (uint64_t v40 = *(void *)(type metadata accessor for Section() - 8),
        *(unsigned char *)(v38
                 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))
                 + 24) == 1))
  {
    uint64_t v136 = sub_1000CBBF0();
    uint64_t v41 = sub_1000CBB20();
    uint64_t v133 = v18;
    uint64_t v132 = v41;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v135 = a1;
    uint64_t v43 = KeyPath;
    uint64_t v44 = sub_1000CB890();
    v134 = v16;
    uint64_t v45 = v44;
    uint64_t v46 = swift_getKeyPath();
    uint64_t v47 = v138;
    (*(void (**)(char *, void, uint64_t))(v21 + 104))(v23, enum case for Image.Scale.small(_:), v138);
    uint64_t v48 = swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))((char *)v20 + *(int *)(v137 + 28), v23, v47);
    *uint64_t v20 = v48;
    sub_100036850((uint64_t)v20, (uint64_t)v26 + *(int *)(v24 + 36), &qword_10010EBC8);
    uint64_t *v26 = v136;
    v26[1] = v43;
    v26[2] = v132;
    v26[3] = v46;
    v26[4] = v45;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000227A8((uint64_t)v20, &qword_10010EBC8);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v47);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    unint64_t v49 = sub_1000363C0();
    char v50 = v139;
    sub_1000CB9E0();
    sub_1000227A8((uint64_t)v26, &qword_10010EBD0);
    uint64_t v171 = v24;
    unint64_t v172 = v49;
    swift_getOpaqueTypeConformance2();
    uint64_t v51 = v143;
    uint64_t v52 = v141;
    sub_1000CBA70();
    (*(void (**)(char *, uint64_t))(v140 + 8))(v50, v52);
    sub_1000365A0(v51, v142, &qword_10010EBE0);
    sub_1000CBD20();
    sub_1000CB310();
    uint64_t v141 = v165;
    LODWORD(v140) = v166;
    uint64_t v139 = v167;
    LODWORD(v138) = v168;
    uint64_t v137 = v169;
    uint64_t v136 = v170;
    sub_1000CB890();
    uint64_t v53 = sub_1000CB940();
    uint64_t v55 = v54;
    char v57 = v56;
    swift_release();
    sub_1000CBB60();
    uint64_t v58 = sub_1000CB900();
    uint64_t v60 = v59;
    char v62 = v61;
    uint64_t v64 = v63;
    swift_release();
    sub_100036118(v53, v55, v57 & 1);
    swift_bridgeObjectRelease();
    uint64_t v171 = v58;
    unint64_t v172 = v60;
    LOBYTE(v173) = v62 & 1;
    uint64_t v174 = v64;
    uint64_t v175 = 0x3FE6666666666666;
    sub_10001D64C(&qword_10010EC28);
    sub_10006BCAC();
    uint64_t v65 = (uint64_t)v133;
    sub_1000CBA70();
    sub_100036118(v58, v60, v62 & 1);
    swift_bridgeObjectRelease();
    sub_1000CBD20();
    sub_1000CB310();
    uint64_t v132 = v171;
    int v131 = v172;
    uint64_t v130 = v173;
    LOBYTE(v58) = v174;
    uint64_t v66 = v175;
    uint64_t v67 = v176;
    uint64_t v68 = v142;
    uint64_t v69 = v143;
    sub_100036850(v142, v143, &qword_10010EBE0);
    uint64_t v70 = (uint64_t)v134;
    sub_100036850(v65, (uint64_t)v134, &qword_10010EBC0);
    uint64_t v71 = v162;
    sub_100036850(v69, v162, &qword_10010EBE0);
    Swift::String v72 = (int *)sub_10001D64C(&qword_100110708);
    uint64_t v73 = v71 + v72[12];
    *(void *)uint64_t v73 = 0;
    *(unsigned char *)(v73 + 8) = 1;
    *(void *)(v73 + 16) = v141;
    *(unsigned char *)(v73 + 24) = v140;
    *(void *)(v73 + 32) = v139;
    *(unsigned char *)(v73 + 40) = v138;
    uint64_t v74 = v136;
    *(void *)(v73 + 48) = v137;
    *(void *)(v73 + 56) = v74;
    sub_100036850(v70, v71 + v72[16], &qword_10010EBC0);
    uint64_t v75 = v71 + v72[20];
    *(void *)uint64_t v75 = 0;
    *(unsigned char *)(v75 + 8) = 1;
    *(void *)(v75 + 16) = v132;
    *(unsigned char *)(v75 + 24) = v131;
    *(void *)(v75 + 32) = v130;
    *(unsigned char *)(v75 + 40) = v58;
    *(void *)(v75 + 48) = v66;
    *(void *)(v75 + 56) = v67;
    sub_1000227A8(v65, &qword_10010EBC0);
    sub_1000227A8(v68, &qword_10010EBE0);
    sub_1000227A8(v70, &qword_10010EBC0);
    sub_1000227A8(v143, &qword_10010EBE0);
    uint64_t v76 = sub_10001D64C(&qword_1001106C8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v71, 0, 1, v76);
    sub_1000365A0(v71, (uint64_t)v161, &qword_1001106C0);
  }
  else
  {
    uint64_t v77 = sub_10001D64C(&qword_1001106C8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v36, 1, 1, v77);
  }
  id v163 = sub_1000B7610();
  uint64_t v164 = v78;
  sub_1000231FC();
  uint64_t v79 = sub_1000CB9D0();
  uint64_t v81 = v80;
  char v83 = v82 & 1;
  sub_1000CB890();
  uint64_t v84 = sub_1000CB940();
  uint64_t v86 = v85;
  char v88 = v87;
  swift_release();
  char v89 = v88 & 1;
  sub_100036118(v79, v81, v83);
  swift_bridgeObjectRelease();
  sub_1000CB830();
  uint64_t v90 = sub_1000CB8E0();
  uint64_t v92 = v91;
  LOBYTE(v81) = v93 & 1;
  sub_100036118(v84, v86, v89);
  swift_bridgeObjectRelease();
  sub_1000CBB20();
  uint64_t v94 = sub_1000CB900();
  uint64_t v96 = v95;
  LOBYTE(v86) = v97;
  uint64_t v99 = v98;
  swift_release();
  sub_100036118(v90, v92, v81);
  swift_bridgeObjectRelease();
  uint64_t v100 = enum case for Text.Case.uppercase(_:);
  uint64_t v101 = sub_1000CB930();
  uint64_t v102 = *(void *)(v101 - 8);
  uint64_t v103 = (uint64_t)v147;
  (*(void (**)(char *, uint64_t, uint64_t))(v102 + 104))(v147, v100, v101);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v102 + 56))(v103, 0, 1, v101);
  uint64_t v104 = swift_getKeyPath();
  uint64_t v105 = v149;
  sub_100036850(v103, (uint64_t)v149 + *(int *)(v145 + 28), &qword_100110698);
  *uint64_t v105 = v104;
  uint64_t v106 = (uint64_t)v148;
  sub_100036850((uint64_t)v105, (uint64_t)&v148[*(int *)(v144 + 36)], &qword_100110690);
  *(void *)uint64_t v106 = v94;
  *(void *)(v106 + 8) = v96;
  *(unsigned char *)(v106 + 16) = v86 & 1;
  *(void *)(v106 + 24) = v99;
  sub_100036108(v94, v96, v86 & 1);
  swift_bridgeObjectRetain();
  sub_1000227A8((uint64_t)v105, &qword_100110690);
  sub_1000227A8(v103, &qword_100110698);
  sub_100036118(v94, v96, v86 & 1);
  swift_bridgeObjectRelease();
  uint64_t v107 = swift_getKeyPath();
  uint64_t v108 = v151;
  sub_100036850(v106, v151, &qword_1001106A0);
  uint64_t v109 = v108 + *(int *)(v146 + 36);
  *(void *)uint64_t v109 = v107;
  *(void *)(v109 + 8) = 1;
  *(unsigned char *)(v109 + 16) = 0;
  sub_1000227A8(v106, &qword_1001106A0);
  uint64_t v110 = v158;
  uint64_t v111 = v157;
  uint64_t v112 = v159;
  (*(void (**)(char *, void, uint64_t))(v158 + 104))(v157, enum case for Text.TruncationMode.tail(_:), v159);
  uint64_t v113 = swift_getKeyPath();
  uint64_t v114 = (uint64_t)v150;
  uint64_t v115 = (uint64_t *)&v150[*(int *)(v152 + 36)];
  uint64_t v116 = sub_10001D64C(&qword_1001106D0);
  (*(void (**)(char *, char *, uint64_t))(v110 + 16))((char *)v115 + *(int *)(v116 + 28), v111, v112);
  *uint64_t v115 = v113;
  sub_100036850(v108, v114, &qword_1001106A8);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v112);
  sub_1000227A8(v108, &qword_1001106A8);
  sub_10006BAB4();
  uint64_t v117 = v154;
  sub_1000CB9E0();
  sub_1000227A8(v114, &qword_1001106B0);
  uint64_t v118 = v155;
  unint64_t v119 = v153;
  uint64_t v120 = v156;
  (*(void (**)(char *, char *, uint64_t))(v155 + 32))(v153, v117, v156);
  uint64_t v121 = (uint64_t)v161;
  uint64_t v122 = v162;
  sub_100036850((uint64_t)v161, v162, &qword_1001106C0);
  uint64_t v123 = *(void (**)(char *, char *, uint64_t))(v118 + 16);
  v123(v117, v119, v120);
  uint64_t v124 = v160;
  sub_100036850(v122, v160, &qword_1001106C0);
  uint64_t v125 = sub_10001D64C(&qword_100110700);
  v123((char *)(v124 + *(int *)(v125 + 48)), v117, v120);
  uint64_t v126 = v124 + *(int *)(v125 + 64);
  *(void *)uint64_t v126 = 0;
  *(unsigned char *)(v126 + 8) = 1;
  id v127 = *(void (**)(char *, uint64_t))(v118 + 8);
  v127(v119, v120);
  sub_1000227A8(v121, &qword_1001106C0);
  v127(v117, v120);
  return sub_1000227A8(v122, &qword_1001106C0);
}

uint64_t sub_10006B6B8()
{
  uint64_t v1 = sub_1000CB7A0();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10001D64C(&qword_100110648);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v7 = sub_1000CB700();
  *((void *)v7 + 1) = 0;
  v7[16] = 1;
  uint64_t v8 = sub_10001D64C(&qword_100110650);
  sub_100069EF4(v0, (uint64_t)&v7[*(int *)(v8 + 44)]);
  sub_1000CB790();
  sub_100036A5C(&qword_100110658, &qword_100110648);
  sub_1000CBAA0();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_1000227A8((uint64_t)v7, &qword_100110648);
}

uint64_t sub_10006B860@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1000CB4B0();
  *a1 = v3;
  return result;
}

uint64_t sub_10006B88C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1000CB4B0();
  *a1 = v3;
  return result;
}

uint64_t sub_10006B8B8()
{
  return sub_1000CB4C0();
}

uint64_t sub_10006B8E0()
{
  return sub_1000CB4C0();
}

uint64_t sub_10006B908()
{
  return sub_1000CB530();
}

uint64_t sub_10006B92C(uint64_t a1)
{
  uint64_t v2 = sub_10001D64C(&qword_100110698);
  __chkstk_darwin(v2 - 8);
  sub_100036850(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_100110698);
  return sub_1000CB540();
}

uint64_t sub_10006B9C4()
{
  return sub_1000CB460();
}

uint64_t sub_10006B9E8(uint64_t a1)
{
  uint64_t v2 = sub_1000CB8F0();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_1000CB470();
}

unint64_t sub_10006BAB4()
{
  unint64_t result = qword_1001106D8;
  if (!qword_1001106D8)
  {
    sub_10001D690(&qword_1001106B0);
    sub_10006BB54();
    sub_100036A5C(&qword_1001106F8, &qword_1001106D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001106D8);
  }
  return result;
}

unint64_t sub_10006BB54()
{
  unint64_t result = qword_1001106E0;
  if (!qword_1001106E0)
  {
    sub_10001D690(&qword_1001106A8);
    sub_10006BBF4();
    sub_100036A5C(&qword_10010ECB8, &qword_10010ECC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001106E0);
  }
  return result;
}

unint64_t sub_10006BBF4()
{
  unint64_t result = qword_1001106E8;
  if (!qword_1001106E8)
  {
    sub_10001D690(&qword_1001106A0);
    sub_100036A5C(&qword_1001106F0, &qword_100110690);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001106E8);
  }
  return result;
}

unint64_t sub_10006BCAC()
{
  unint64_t result = qword_10010EC30;
  if (!qword_10010EC30)
  {
    sub_10001D690(&qword_10010EC28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EC30);
  }
  return result;
}

uint64_t sub_10006BD20(uint64_t a1)
{
  return sub_10006BD5C(a1, &qword_100110648, &qword_100110658);
}

uint64_t sub_10006BD5C(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return swift_getOpaqueTypeConformance2();
}

void sub_10006BDD0()
{
  uint64_t v1 = sub_1000CAB10();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [v0 items];
  unint64_t v6 = (unint64_t)[v5 count];
  uint64_t v14 = _swiftEmptyArrayStorage;
  sub_1000CC7F0();
  id v7 = v5;
  sub_1000CC4F0();

  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v9 = v2;
  if (v6)
  {
    sub_10006C090();
    do
    {
      sub_1000CC650();
      if (!v13) {
        goto LABEL_10;
      }
      sub_100023250((uint64_t)&v12, (uint64_t)&v10);
      sub_10001D64C((uint64_t *)&unk_10010F360);
      swift_dynamicCast();
      sub_1000201A8((uint64_t)&v12);
      sub_1000CC7D0();
      sub_1000CC800();
      sub_1000CC810();
      sub_1000CC7E0();
    }
    while (--v6);
  }
  sub_10006C090();
  sub_1000CC650();
  while (v11)
  {
    sub_100022804(&v10, &v12);
    sub_100023250((uint64_t)&v12, (uint64_t)&v10);
    sub_10001D64C((uint64_t *)&unk_10010F360);
    swift_dynamicCast();
    sub_1000201A8((uint64_t)&v12);
    sub_1000CC7D0();
    sub_1000CC800();
    sub_1000CC810();
    sub_1000CC7E0();
    sub_1000CC650();
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v1);
  sub_100039D2C((uint64_t)&v10);
}

unint64_t sub_10006C090()
{
  unint64_t result = qword_100110710;
  if (!qword_100110710)
  {
    sub_1000CAB10();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110710);
  }
  return result;
}

uint64_t Logger.todayWidgetBanner.unsafeMutableAddressor()
{
  if (qword_10010DD68 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1000CB270();

  return sub_10003B638(v0, (uint64_t)static Logger.todayWidgetBanner);
}

uint64_t sub_10006C14C()
{
  uint64_t v0 = sub_1000CB270();
  sub_10006C278(v0, static Logger.todayWidgetBanner);
  sub_10003B638(v0, (uint64_t)static Logger.todayWidgetBanner);
  return sub_1000CB260();
}

uint64_t static Logger.todayWidgetBanner.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_10010DD68 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1000CB270();
  uint64_t v3 = sub_10003B638(v2, (uint64_t)static Logger.todayWidgetBanner);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t *sub_10006C278(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

UIColor __swiftcall UIColor.init(hex:)(Swift::String hex)
{
  uint64_t v1 = sub_10006C6AC(hex._countAndFlagsBits, (unint64_t)hex._object);
  unint64_t v3 = v2;
  result.super.Class isa = (Class)swift_bridgeObjectRelease();
  uint64_t v5 = HIBYTE(v3) & 0xF;
  uint64_t v6 = v1 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v7 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v7 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  if ((v3 & 0x1000000000000000) != 0)
  {
    LODWORD(v1) = sub_10006CB7C(v1, v3, 16);
    char v10 = v26;
    goto LABEL_48;
  }
  if ((v3 & 0x2000000000000000) == 0)
  {
    if ((v1 & 0x1000000000000000) != 0) {
      uint64_t v8 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v8 = (unsigned __int8 *)sub_1000CC7C0();
    }
    LODWORD(v1) = sub_10006CC7C(v8, v6, 16);
    char v10 = v9 & 1;
LABEL_48:
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return (UIColor)[objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithRed:(double)BYTE3(v1) / 255.0 green:(double)BYTE2(v1) / 255.0 blue:(double)BYTE1(v1) / 255.0 alpha:(double)v1 / 255.0];
    }
LABEL_51:
    id v24 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    uint64_t v31 = sub_10006CAD4;
    uint64_t v32 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256;
    uint64_t v29 = sub_10006CB14;
    uint64_t v30 = &unk_1000FD5E8;
    uint64_t v25 = _Block_copy(&aBlock);
    id v23 = [v24 initWithDynamicProvider:v25];
    _Block_release(v25);
    return (UIColor)v23;
  }
  aBlock = (void **)v1;
  uint64_t v28 = v3 & 0xFFFFFFFFFFFFFFLL;
  if (v1 == 43)
  {
    if (v5)
    {
      uint64_t v16 = v5 - 1;
      if (v16)
      {
        uint64_t v1 = 0;
        uint64_t v17 = (unsigned __int8 *)&aBlock + 1;
        while (1)
        {
          int v18 = *v17;
          unsigned __int8 v19 = v18 - 48;
          if ((v18 - 48) >= 0xA)
          {
            if ((v18 - 65) < 6)
            {
              unsigned __int8 v19 = v18 - 55;
            }
            else
            {
              if ((v18 - 97) > 5) {
                goto LABEL_47;
              }
              unsigned __int8 v19 = v18 - 87;
            }
          }
          if ((unint64_t)(v1 - 0x800000000000000) >> 60 != 15) {
            break;
          }
          BOOL v15 = __OFADD__(16 * v1, v19);
          uint64_t v1 = 16 * v1 + v19;
          if (v15) {
            break;
          }
          ++v17;
          if (!--v16)
          {
LABEL_46:
            char v10 = 0;
            goto LABEL_48;
          }
        }
      }
      goto LABEL_47;
    }
  }
  else
  {
    if (v1 != 45)
    {
      if (v5)
      {
        uint64_t v1 = 0;
        p_aBlock = &aBlock;
        while (1)
        {
          int v21 = *(unsigned __int8 *)p_aBlock;
          unsigned __int8 v22 = v21 - 48;
          if ((v21 - 48) >= 0xA)
          {
            if ((v21 - 65) < 6)
            {
              unsigned __int8 v22 = v21 - 55;
            }
            else
            {
              if ((v21 - 97) > 5) {
                goto LABEL_47;
              }
              unsigned __int8 v22 = v21 - 87;
            }
          }
          if ((unint64_t)(v1 - 0x800000000000000) >> 60 != 15) {
            break;
          }
          BOOL v15 = __OFADD__(16 * v1, v22);
          uint64_t v1 = 16 * v1 + v22;
          if (v15) {
            break;
          }
          p_aBlock = (void ***)((char *)p_aBlock + 1);
          if (!--v5) {
            goto LABEL_46;
          }
        }
      }
      goto LABEL_47;
    }
    if (v5)
    {
      uint64_t v11 = v5 - 1;
      if (v11)
      {
        uint64_t v1 = 0;
        long long v12 = (unsigned __int8 *)&aBlock + 1;
        while (1)
        {
          int v13 = *v12;
          unsigned __int8 v14 = v13 - 48;
          if ((v13 - 48) >= 0xA)
          {
            if ((v13 - 65) < 6)
            {
              unsigned __int8 v14 = v13 - 55;
            }
            else
            {
              if ((v13 - 97) > 5) {
                break;
              }
              unsigned __int8 v14 = v13 - 87;
            }
          }
          if ((unint64_t)(v1 - 0x800000000000000) >> 60 != 15) {
            break;
          }
          BOOL v15 = __OFSUB__(16 * v1, v14);
          uint64_t v1 = 16 * v1 - v14;
          if (v15) {
            break;
          }
          ++v12;
          if (!--v11) {
            goto LABEL_46;
          }
        }
      }
LABEL_47:
      LODWORD(v1) = 0;
      char v10 = 1;
      goto LABEL_48;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

UIColor __swiftcall UIColor.init(hex:)(Swift::Int hex)
{
  int v1 = hex;
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return (UIColor)[v2 initWithRed:(double)HIBYTE(v1) / 255.0 green:(double)BYTE2(v1) / 255.0 blue:(double)BYTE1(v1) / 255.0 alpha:(double)v1 / 255.0];
}

uint64_t sub_10006C6AC(uint64_t a1, unint64_t a2)
{
  v7._countAndFlagsBits = 35;
  v7._object = (void *)0xE100000000000000;
  BOOL v4 = sub_1000CC320(v7);
  swift_bridgeObjectRetain();
  if (v4)
  {
    sub_10006D3E4(1uLL, a1, a2);
    swift_bridgeObjectRelease();
    a1 = sub_1000CC250();
    swift_bridgeObjectRelease();
  }
  if (sub_1000CC280() != 8)
  {
    if (sub_1000CC280() == 6)
    {
      uint64_t v6 = a1;
LABEL_10:
      v8._countAndFlagsBits = 17990;
      v8._object = (void *)0xE200000000000000;
      sub_1000CC2B0(v8);
      return v6;
    }
    if (sub_1000CC280() == 4)
    {
      sub_1000CC2A0();
      sub_1000CC330();
      sub_1000CC2A0();
      sub_1000CC330();
      sub_1000CC2A0();
      sub_1000CC330();
      sub_1000CC2A0();
      sub_1000CC330();
      swift_bridgeObjectRelease();
      uint64_t v6 = 0;
      sub_1000CC750(16);
      sub_1000CC140();
      sub_1000CC140();
      swift_bridgeObjectRelease();
      sub_1000CC140();
      sub_1000CC140();
      swift_bridgeObjectRelease();
      sub_1000CC140();
      sub_1000CC140();
      swift_bridgeObjectRelease();
      sub_1000CC140();
      sub_1000CC140();
      swift_bridgeObjectRelease();
      return v6;
    }
    if (sub_1000CC280() == 3)
    {
      sub_1000CC2A0();
      sub_1000CC330();
      sub_1000CC2A0();
      sub_1000CC330();
      sub_1000CC2A0();
      sub_1000CC330();
      swift_bridgeObjectRelease();
      uint64_t v6 = 0;
      sub_1000CC140();
      sub_1000CC140();
      swift_bridgeObjectRelease();
      sub_1000CC140();
      sub_1000CC140();
      swift_bridgeObjectRelease();
      sub_1000CC140();
      sub_1000CC140();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  return a1;
}

id sub_10006CAD4()
{
  id v0 = [self clearColor];

  return v0;
}

id sub_10006CB14(uint64_t a1, void *a2)
{
  unint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  uint64_t v5 = (void *)v3();
  swift_release();

  return v5;
}

unsigned __int8 *sub_10006CB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1000CC340();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    Swift::String v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_10006CEF8();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    Swift::String v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    Swift::String v7 = (unsigned __int8 *)sub_1000CC7C0();
  }
LABEL_7:
  uint64_t v11 = sub_10006CC7C(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_10006CC64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10006CC74()
{
  return swift_release();
}

unsigned __int8 *sub_10006CC7C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  unsigned __int8 v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10006CEF8()
{
  unint64_t v0 = sub_1000CC350();
  uint64_t v4 = sub_10006CF78(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10006CF78(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_10006D0D0(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_1000B32B8(v9, 0),
          unint64_t v12 = sub_10006D1D0((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = sub_1000CC260();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return sub_1000CC260();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  sub_1000CC7C0();
LABEL_4:

  return sub_1000CC260();
}

uint64_t sub_10006D0D0(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_1000B3320(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_1000B3320(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t sub_10006D1D0(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    uint64_t v9[2] = a6;
    v9[3] = a7;
    void v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    UIColor result = v12;
    if (v17 == v15) {
      UIColor result = sub_1000B3320(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      UIColor result = sub_1000CC300();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        UIColor result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          UIColor result = sub_1000CC7C0();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    UIColor result = sub_1000B3320(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_1000CC2D0();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_10006D3E4(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  UIColor result = sub_1000CC290();
  if (v6) {
    UIColor result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }

  return sub_1000CC350();
}

void *NTTodayResults.sectionsArray.getter()
{
  id v1 = [v0 sections];
  id v2 = [v1 array];

  uint64_t v3 = sub_1000CC3B0();
  uint64_t v4 = sub_10006D51C(v3);
  swift_bridgeObjectRelease();
  return v4;
}

void *sub_10006D51C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  UIColor result = _swiftEmptyArrayStorage;
  if (v2)
  {
    char v6 = _swiftEmptyArrayStorage;
    sub_1000CC7F0();
    uint64_t v4 = a1 + 32;
    do
    {
      sub_100023250(v4, (uint64_t)&v5);
      sub_10006E3F8();
      swift_dynamicCast();
      sub_1000CC7D0();
      sub_1000CC800();
      sub_1000CC810();
      sub_1000CC7E0();
      v4 += 32;
      --v2;
    }
    while (v2);
    return v6;
  }
  return result;
}

uint64_t sub_10006D5F8@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000CABE0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - v14;
  id v16 = [a1 actionURL];
  if (!v16)
  {
    char v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v19(v8, 1, 1, v9);
LABEL_5:
    sub_10006E1FC((uint64_t)v8);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v19)(a3, 1, 1, v9);
  }
  unint64_t v17 = v16;
  sub_1000CABA0();

  unint64_t v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v18(v8, v13, v9);
  char v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v19(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
    goto LABEL_5;
  }
  v18(v15, v8, v9);
  if (qword_10010DD80 != -1) {
    swift_once();
  }
  sub_10003B638(v9, (uint64_t)qword_10011AC78);
  sub_10006E2B8();
  if (sub_1000CC190())
  {
    v18((char *)a3, v15, v9);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v19)(a3, 0, 1, v9);
  }
  else
  {
    uint64_t v21 = self;
    sub_1000CAB60(v22);
    unsigned __int8 v24 = v23;
    id v25 = [v21 engagementDescriptorWithTargetURL:v23];

    sub_100020110(a2, a2[3]);
    sub_1000A542C(v25, a3);
    swift_unknownObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
}

void *sub_10006D93C(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ImageStore.Key();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000CABE0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v16 = (char *)&v26 - v15;
  unint64_t v17 = 0;
  if ([a1 imageMethod] != (id)2) {
    return v17;
  }
  id v18 = [a1 imageURL];
  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_8;
  }
  char v19 = v18;
  sub_1000CABA0();

  unsigned int v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v20(v9, v14, v10);
  uint64_t v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
  v21(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
LABEL_8:
    sub_10006E1FC((uint64_t)v9);
    return 0;
  }
  v20(v16, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v6, v16, v10);
  v21(v6, 0, 1, v10);
  if (*(void *)(a2 + 16) && (unint64_t v22 = sub_10003CC4C((uint64_t)v6), (v23 & 1) != 0))
  {
    unint64_t v17 = *(void **)(*(void *)(a2 + 56) + 8 * v22);
    id v24 = v17;
  }
  else
  {
    unint64_t v17 = 0;
  }
  sub_10006E25C((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  return v17;
}

uint64_t sub_10006DC2C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = sub_10001D64C((uint64_t *)&unk_100111DE0);
  __chkstk_darwin(v16 - 8);
  id v18 = (char *)&v23[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003AA3C(a4, (uint64_t)v23);
  if (a1)
  {
    uint64_t v19 = sub_1000CACC0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
    a6 = 0;
  }
  else
  {
    sub_10006E310(a7, (uint64_t)v18);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003F840(a2, a3, v23, a5, a6 & 1, (uint64_t)v18, a8);
  uint64_t v20 = type metadata accessor for Section();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a8, 0, 1, v20);
}

void *NTTodayResults.allItems.getter()
{
  id v1 = [v0 sections];
  id v2 = [v1 array];

  uint64_t v3 = sub_1000CC3B0();
  unint64_t v4 = (unint64_t)sub_10006D51C(v3);
  swift_bridgeObjectRelease();
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    unint64_t v6 = 0;
    unint64_t v17 = v4 & 0xC000000000000001;
    uint64_t v15 = (void *)(v4 + 32);
    uint64_t v16 = v4 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v17)
      {
        id v7 = (id)sub_1000CC780();
      }
      else
      {
        if (v6 >= *(void *)(v16 + 16)) {
          goto LABEL_26;
        }
        id v7 = (id)v15[v6];
      }
      uint64_t v8 = v7;
      if (__OFADD__(v6++, 1)) {
        break;
      }
      unint64_t v4 = v5;
      sub_10006BDD0();
      unint64_t v11 = v10;
      if (v10 >> 62)
      {
        uint64_t v12 = sub_1000CC890();
        if (!v12) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v12) {
          goto LABEL_4;
        }
      }
      if (v12 < 1) {
        goto LABEL_25;
      }
      uint64_t v13 = 0;
      do
      {
        if ((v11 & 0xC000000000000001) != 0) {
          sub_1000CC780();
        }
        else {
          swift_unknownObjectRetain();
        }
        swift_unknownObjectRetain();
        sub_1000CC390();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1000CC400();
        }
        ++v13;
        sub_1000CC430();
        sub_1000CC3D0();
        swift_unknownObjectRelease();
      }
      while (v12 != v13);
LABEL_4:

      swift_bridgeObjectRelease();
      if (v6 == v5) {
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1000CC890();
    swift_bridgeObjectRelease();
  }
LABEL_28:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10006E02C(uint64_t result)
{
  if (result + 1 > *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    return sub_1000CC400();
  }
  return result;
}

void (*sub_10006E058(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *)
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10006E174(v6, a2, a3);
  return sub_10006E0C0;
}

void (*sub_10006E0C4(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *)
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10006E378(v6, a2, a3);
  return sub_10006E0C0;
}

void sub_10006E12C(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_10006E174(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = sub_1000CC780();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_unknownObjectRetain();
LABEL_5:
    *uint64_t v3 = v4;
    return sub_10006E1F4;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006E1F4()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_10006E1FC(uint64_t a1)
{
  uint64_t v2 = sub_10001D64C(&qword_10010F340);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006E25C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ImageStore.Key();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10006E2B8()
{
  unint64_t result = qword_100110FE0;
  if (!qword_100110FE0)
  {
    sub_1000CABE0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110FE0);
  }
  return result;
}

uint64_t sub_10006E310(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001D64C((uint64_t *)&unk_100111DE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_10006E378(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = sub_1000CC780();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_unknownObjectRetain();
LABEL_5:
    *uint64_t v3 = v4;
    return sub_10006E438;
  }
  __break(1u);
  return result;
}

unint64_t sub_10006E3F8()
{
  unint64_t result = qword_10010F590;
  if (!qword_10010F590)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10010F590);
  }
  return result;
}

char *sub_10006E43C(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v19 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    uint64_t v9 = a2[2];
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v9;
    a1[24] = *((unsigned char *)a2 + 24);
    uint64_t v10 = type metadata accessor for Section();
    uint64_t v11 = *(int *)(v10 + 32);
    uint64_t v100 = a1;
    __dst = &a1[v11];
    uint64_t v93 = v10;
    uint64_t v12 = (char *)a2 + v11;
    uint64_t v13 = sub_1000CABE0();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    uint64_t v16 = v4;
    unint64_t v17 = v8;
    swift_bridgeObjectRetain();
    uint64_t v96 = v15;
    uint64_t v98 = v13;
    if (v15(v12, 1, v13))
    {
      uint64_t v18 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v12, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v95 = v14;
    uint64_t v20 = *(int *)(v93 + 36);
    uint64_t v21 = &a1[v20];
    unint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = sub_1000CACC0();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_10001D64C((uint64_t *)&unk_100111DE0);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    int __dsta = a3;
    uint64_t v94 = a2;
    uint64_t v26 = a3[5];
    unint64_t v27 = &a1[v26];
    uint64_t v28 = (uint64_t)a2 + v26;
    uint64_t v29 = *(char **)((char *)a2 + v26);
    *(void *)&a1[v26] = v29;
    uint64_t v30 = (int *)type metadata accessor for TodayContent();
    uint64_t v31 = v30[5];
    uint64_t v32 = &v27[v31];
    uint64_t v33 = (void *)(v28 + v31);
    uint64_t v34 = (int *)type metadata accessor for Banner();
    uint64_t v35 = *((void *)v34 - 1);
    uint64_t v36 = *(unsigned int (**)(void *, uint64_t, int *))(v35 + 48);
    id v37 = v29;
    if (v36(v33, 1, v34))
    {
      uint64_t v38 = sub_10001D64C(&qword_10010DE20);
      memcpy(v32, v33, *(void *)(*(void *)(v38 - 8) + 64));
      uint64_t v39 = v98;
    }
    else
    {
      uint64_t v40 = v33[1];
      *(void *)uint64_t v32 = *v33;
      *((void *)v32 + 1) = v40;
      uint64_t v41 = v33[3];
      *((void *)v32 + 2) = v33[2];
      *((void *)v32 + 3) = v41;
      uint64_t v42 = v33[5];
      *((void *)v32 + 4) = v33[4];
      *((void *)v32 + 5) = v42;
      uint64_t v43 = v34[7];
      char v89 = &v32[v43];
      uint64_t v90 = v35;
      uint64_t v44 = (char *)v33 + v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v96(v44, 1, v98))
      {
        uint64_t v45 = sub_10001D64C(&qword_10010F340);
        memcpy(v89, v44, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v89, v44, v98);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v89, 0, 1, v98);
      }
      uint64_t v46 = v34[8];
      uint64_t v47 = &v32[v46];
      uint64_t v48 = (void *)((char *)v33 + v46);
      uint64_t v49 = v48[1];
      *(void *)uint64_t v47 = *v48;
      *((void *)v47 + 1) = v49;
      uint64_t v50 = v34[9];
      uint64_t v51 = *(void **)((char *)v33 + v50);
      swift_bridgeObjectRetain();
      if (v51 != (void *)1) {
        id v52 = v51;
      }
      *(void *)&v32[v50] = v51;
      uint64_t v53 = v34[10];
      uint64_t v54 = &v32[v53];
      uint64_t v55 = (char *)v33 + v53;
      char v56 = *(void **)v55;
      char v57 = (void *)*((void *)v55 + 1);
      char v58 = v55[16];
      sub_10001DB84(*(void **)v55, v57);
      *(void *)uint64_t v54 = v56;
      *((void *)v54 + 1) = v57;
      v54[16] = v58;
      (*(void (**)(char *, void, uint64_t, int *))(v90 + 56))(v32, 0, 1, v34);
      uint64_t v39 = v98;
    }
    *(void *)&v27[v30[6]] = *(void *)(v28 + v30[6]);
    *(void *)&v27[v30[7]] = *(void *)(v28 + v30[7]);
    v27[v30[8]] = *(unsigned char *)(v28 + v30[8]);
    uint64_t v59 = v30[9];
    uint64_t v60 = &v27[v59];
    char v61 = (void *)(v28 + v59);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (v96((char *)v61, 1, v39))
    {
      uint64_t v62 = sub_10001D64C(&qword_10010F340);
      memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, void *, uint64_t))(v95 + 16))(v60, v61, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v60, 0, 1, v39);
    }
    *(void *)&v27[v30[10]] = *(void *)(v28 + v30[10]);
    uint64_t v63 = v30[11];
    uint64_t v64 = &v27[v63];
    uint64_t v65 = (void *)(v28 + v63);
    uint64_t v99 = v65[1];
    *(void *)uint64_t v64 = *v65;
    *((void *)v64 + 1) = v99;
    uint64_t v66 = v30[12];
    uint64_t v67 = &v27[v66];
    uint64_t v68 = (void *)(v28 + v66);
    uint64_t v97 = v68[1];
    *(void *)uint64_t v67 = *v68;
    *((void *)v67 + 1) = v97;
    uint64_t v69 = __dsta[6];
    uint64_t v70 = __dsta[7];
    uint64_t v19 = v100;
    uint64_t v71 = &v100[v69];
    uint64_t v72 = (uint64_t)v94 + v69;
    *uint64_t v71 = *(unsigned char *)v72;
    *(_OWORD *)(v71 + 8) = *(_OWORD *)(v72 + 8);
    uint64_t v73 = *(void **)(v72 + 32);
    *((void *)v71 + 3) = *(void *)(v72 + 24);
    *((void *)v71 + 4) = v73;
    uint64_t v74 = *(void **)(v72 + 40);
    *((void *)v71 + 5) = v74;
    *(_OWORD *)(v71 + 57) = *(_OWORD *)(v72 + 57);
    *((_OWORD *)v71 + 3) = *(_OWORD *)(v72 + 48);
    *((_OWORD *)v71 + 5) = *(_OWORD *)(v72 + 80);
    uint64_t v75 = *(void **)(v72 + 104);
    *((void *)v71 + 12) = *(void *)(v72 + 96);
    *((void *)v71 + 13) = v75;
    uint64_t v76 = *(void **)(v72 + 112);
    *((void *)v71 + 14) = v76;
    *(_OWORD *)(v71 + 120) = *(_OWORD *)(v72 + 120);
    *(_OWORD *)(v71 + 136) = *(_OWORD *)(v72 + 136);
    uint64_t v77 = &v100[v70];
    uint64_t v78 = *(uint64_t *)((char *)v94 + v70);
    char v79 = *((unsigned char *)v94 + v70 + 8);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v80 = v73;
    id v81 = v74;
    id v82 = v75;
    id v83 = v76;
    sub_10002AB64(v78, v79);
    *(void *)uint64_t v77 = v78;
    v77[8] = v79;
    uint64_t v84 = __dsta[8];
    uint64_t v85 = &v100[v84];
    uint64_t v86 = (char **)((char *)v94 + v84);
    sub_10001D64C(&qword_10010FE40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v87 = sub_1000CB2A0();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v87 - 8) + 16))(v85, v86, v87);
    }
    else
    {
      *(void *)uint64_t v85 = *v86;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v19;
}

uint64_t sub_10006EB84(id *a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for Section();
  uint64_t v5 = (char *)a1 + *(int *)(v4 + 32);
  uint64_t v6 = sub_1000CABE0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = (char *)a1 + *(int *)(v4 + 36);
  uint64_t v10 = sub_1000CACC0();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }
  uint64_t v12 = (id *)((char *)a1 + a2[5]);

  uint64_t v13 = type metadata accessor for TodayContent();
  uint64_t v14 = (char *)v12 + *(int *)(v13 + 20);
  uint64_t v15 = (int *)type metadata accessor for Banner();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v15 - 1) + 48))(v14, 1, v15))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = v8;
    unint64_t v17 = &v14[v15[7]];
    uint64_t v25 = v16;
    if (!v16(v17, 1, v6)) {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
    }
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void **)&v14[v15[9]];
    if (v18 != (void *)1) {

    }
    sub_10001DE30(*(void **)&v14[v15[10]], *(void **)&v14[v15[10] + 8]);
    uint64_t v8 = v25;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v19 = (char *)v12 + *(int *)(v13 + 36);
  if (!v8(v19, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = (id *)((char *)a1 + a2[6]);

  sub_10002AFC4(*(uint64_t *)((char *)a1 + a2[7]), *((unsigned char *)a1 + a2[7] + 8));
  uint64_t v21 = (char *)a1 + a2[8];
  sub_10001D64C(&qword_10010FE40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = sub_1000CB2A0();
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8);
    return v23(v21, v22);
  }
  else
  {
    return swift_release();
  }
}

char *sub_10006EF64(void *a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  a1[2] = *(void *)(a2 + 16);
  *((unsigned char *)a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Section();
  uint64_t v8 = *(int *)(v7 + 32);
  __dst = (char *)a1 + v8;
  uint64_t v93 = a2;
  uint64_t v9 = (void *)(a2 + v8);
  uint64_t v10 = sub_1000CABE0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  id v13 = v5;
  id v14 = v6;
  swift_bridgeObjectRetain();
  char v89 = v12;
  uint64_t v91 = v10;
  uint64_t v88 = v11;
  if (v12((char *)v9, 1, v10))
  {
    uint64_t v15 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v9, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(__dst, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  uint64_t v16 = *(int *)(v7 + 36);
  unint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (const void *)(v93 + v16);
  uint64_t v19 = sub_1000CACC0();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = sub_10001D64C((uint64_t *)&unk_100111DE0);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v22 = a3[5];
  int __dsta = (char *)a1;
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = v93 + v22;
  uint64_t v25 = *(void **)(v93 + v22);
  *(void *)((char *)a1 + v22) = v25;
  uint64_t v26 = (int *)type metadata accessor for TodayContent();
  uint64_t v27 = v26[5];
  uint64_t v28 = &v23[v27];
  uint64_t v29 = (void *)(v24 + v27);
  uint64_t v30 = (int *)type metadata accessor for Banner();
  uint64_t v31 = *((void *)v30 - 1);
  uint64_t v32 = *(unsigned int (**)(void *, uint64_t, int *))(v31 + 48);
  id v33 = v25;
  if (v32(v29, 1, v30))
  {
    uint64_t v34 = sub_10001D64C(&qword_10010DE20);
    memcpy(v28, v29, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    uint64_t v85 = v31;
    uint64_t v35 = v29[1];
    *(void *)uint64_t v28 = *v29;
    *((void *)v28 + 1) = v35;
    uint64_t v36 = v29[3];
    *((void *)v28 + 2) = v29[2];
    *((void *)v28 + 3) = v36;
    uint64_t v37 = v29[5];
    *((void *)v28 + 4) = v29[4];
    *((void *)v28 + 5) = v37;
    uint64_t v38 = v30[7];
    uint64_t v39 = &v28[v38];
    uint64_t v40 = (char *)v29 + v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v89(v40, 1, v91))
    {
      uint64_t v41 = sub_10001D64C(&qword_10010F340);
      memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v39, v40, v91);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v39, 0, 1, v91);
    }
    uint64_t v42 = v30[8];
    uint64_t v43 = &v28[v42];
    uint64_t v44 = (void *)((char *)v29 + v42);
    uint64_t v45 = v44[1];
    *(void *)uint64_t v43 = *v44;
    *((void *)v43 + 1) = v45;
    uint64_t v46 = v30[9];
    uint64_t v47 = *(void **)((char *)v29 + v46);
    swift_bridgeObjectRetain();
    if (v47 != (void *)1) {
      id v48 = v47;
    }
    *(void *)&v28[v46] = v47;
    uint64_t v49 = v30[10];
    uint64_t v50 = &v28[v49];
    uint64_t v51 = (char *)v29 + v49;
    id v52 = *(void **)v51;
    uint64_t v53 = (void *)*((void *)v51 + 1);
    char v54 = v51[16];
    sub_10001DB84(*(void **)v51, v53);
    *(void *)uint64_t v50 = v52;
    *((void *)v50 + 1) = v53;
    v50[16] = v54;
    (*(void (**)(char *, void, uint64_t, int *))(v85 + 56))(v28, 0, 1, v30);
  }
  *(void *)&v23[v26[6]] = *(void *)(v24 + v26[6]);
  *(void *)&v23[v26[7]] = *(void *)(v24 + v26[7]);
  v23[v26[8]] = *(unsigned char *)(v24 + v26[8]);
  uint64_t v55 = v26[9];
  char v56 = &v23[v55];
  char v57 = (void *)(v24 + v55);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  if (v89((char *)v57, 1, v91))
  {
    uint64_t v58 = sub_10001D64C(&qword_10010F340);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, void *, uint64_t))(v88 + 16))(v56, v57, v91);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v56, 0, 1, v91);
  }
  *(void *)&v23[v26[10]] = *(void *)(v24 + v26[10]);
  uint64_t v59 = v26[11];
  uint64_t v60 = &v23[v59];
  char v61 = (void *)(v24 + v59);
  uint64_t v92 = v61[1];
  *(void *)uint64_t v60 = *v61;
  *((void *)v60 + 1) = v92;
  uint64_t v62 = v26[12];
  uint64_t v63 = &v23[v62];
  uint64_t v64 = (void *)(v24 + v62);
  uint64_t v90 = v64[1];
  *(void *)uint64_t v63 = *v64;
  *((void *)v63 + 1) = v90;
  uint64_t v65 = a3[6];
  uint64_t v66 = a3[7];
  uint64_t v67 = &__dsta[v65];
  uint64_t v68 = (char *)(v93 + v65);
  *uint64_t v67 = *v68;
  *(_OWORD *)(v67 + 8) = *(_OWORD *)(v68 + 8);
  uint64_t v69 = (void *)*((void *)v68 + 4);
  *((void *)v67 + 3) = *((void *)v68 + 3);
  *((void *)v67 + 4) = v69;
  uint64_t v70 = (void *)*((void *)v68 + 5);
  *((void *)v67 + 5) = v70;
  *(_OWORD *)(v67 + 57) = *(_OWORD *)(v68 + 57);
  *((_OWORD *)v67 + 3) = *((_OWORD *)v68 + 3);
  *((_OWORD *)v67 + 5) = *((_OWORD *)v68 + 5);
  uint64_t v71 = (void *)*((void *)v68 + 13);
  *((void *)v67 + 12) = *((void *)v68 + 12);
  *((void *)v67 + 13) = v71;
  uint64_t v72 = (void *)*((void *)v68 + 14);
  *((void *)v67 + 14) = v72;
  *(_OWORD *)(v67 + 120) = *(_OWORD *)(v68 + 120);
  *(_OWORD *)(v67 + 136) = *(_OWORD *)(v68 + 136);
  uint64_t v73 = &__dsta[v66];
  uint64_t v74 = *(void *)(v93 + v66);
  char v75 = *(unsigned char *)(v93 + v66 + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v76 = v69;
  id v77 = v70;
  id v78 = v71;
  id v79 = v72;
  sub_10002AB64(v74, v75);
  *(void *)uint64_t v73 = v74;
  v73[8] = v75;
  uint64_t v80 = a3[8];
  id v81 = &__dsta[v80];
  id v82 = (void *)(v93 + v80);
  sub_10001D64C(&qword_10010FE40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v83 = sub_1000CB2A0();
    (*(void (**)(char *, void *, uint64_t))(*(void *)(v83 - 8) + 16))(v81, v82, v83);
  }
  else
  {
    *(void *)id v81 = *v82;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return __dsta;
}

uint64_t sub_10006F64C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v7 = v6;

  uint64_t v8 = *(void **)(a2 + 8);
  uint64_t v9 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v8;
  id v10 = v8;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v11 = type metadata accessor for Section();
  uint64_t v12 = *(int *)(v11 + 32);
  id v13 = (void *)(a1 + v12);
  id v14 = (const void *)(a2 + v12);
  uint64_t v15 = sub_1000CABE0();
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v17 = *(uint64_t (**)(void))(v16 + 48);
  unsigned int v18 = ((uint64_t (*)(void *, uint64_t, uint64_t))v17)(v13, 1, v15);
  uint64_t v133 = v17;
  unsigned int v19 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v17)(v14, 1, v15);
  uint64_t v132 = v15;
  uint64_t v129 = v16;
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    uint64_t v20 = sub_10001D64C(&qword_10010F340);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = *(int *)(v11 + 36);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = sub_1000CACC0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    uint64_t v29 = sub_10001D64C((uint64_t *)&unk_100111DE0);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 24))(v22, v23, v24);
LABEL_13:
  uint64_t v30 = a3[5];
  uint64_t v130 = a2;
  uint64_t v131 = a1;
  uint64_t v31 = (void **)(a1 + v30);
  uint64_t v32 = a2 + v30;
  id v33 = *(void **)(a2 + v30);
  uint64_t v34 = *v31;
  *uint64_t v31 = v33;
  id v35 = v33;

  uint64_t v36 = (int *)type metadata accessor for TodayContent();
  uint64_t v37 = v36[5];
  uint64_t v38 = (void **)((char *)v31 + v37);
  uint64_t v135 = v32;
  uint64_t v39 = (void *)(v32 + v37);
  uint64_t v40 = (int *)type metadata accessor for Banner();
  uint64_t v41 = *((void *)v40 - 1);
  uint64_t v42 = *(uint64_t (**)(void *, uint64_t, int *))(v41 + 48);
  int v43 = v42(v38, 1, v40);
  int v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      *uint64_t v38 = *v39;
      v38[1] = v39[1];
      v38[2] = v39[2];
      _OWORD v38[3] = v39[3];
      unsigned char v38[4] = v39[4];
      v38[5] = v39[5];
      uint64_t v45 = v40[7];
      uint64_t v46 = (char *)v38 + v45;
      uint64_t v47 = (char *)v39 + v45;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v133)(v47, 1, v132))
      {
        uint64_t v48 = sub_10001D64C(&qword_10010F340);
        memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v46, v47, v132);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v129 + 56))(v46, 0, 1, v132);
      }
      uint64_t v56 = v40[8];
      char v57 = (void *)((char *)v38 + v56);
      uint64_t v58 = (void *)((char *)v39 + v56);
      *char v57 = *v58;
      v57[1] = v58[1];
      uint64_t v59 = v40[9];
      uint64_t v60 = *(void **)((char *)v39 + v59);
      swift_bridgeObjectRetain();
      if (v60 != (void *)1) {
        id v61 = v60;
      }
      *(void *)((char *)v38 + v59) = v60;
      uint64_t v62 = v40[10];
      uint64_t v63 = (char *)v38 + v62;
      uint64_t v64 = (char *)v39 + v62;
      uint64_t v65 = *(void **)v64;
      uint64_t v66 = (void *)*((void *)v64 + 1);
      char v67 = v64[16];
      sub_10001DB84(*(void **)v64, v66);
      *(void *)uint64_t v63 = v65;
      *((void *)v63 + 1) = v66;
      v63[16] = v67;
      (*(void (**)(void *, void, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
      goto LABEL_29;
    }
LABEL_19:
    uint64_t v49 = sub_10001D64C(&qword_10010DE20);
    memcpy(v38, v39, *(void *)(*(void *)(v49 - 8) + 64));
LABEL_29:
    uint64_t v69 = v130;
    uint64_t v68 = v131;
    uint64_t v70 = v132;
    goto LABEL_30;
  }
  if (v44)
  {
    sub_1000742BC((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for Banner);
    goto LABEL_19;
  }
  *uint64_t v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38[2] = v39[2];
  _OWORD v38[3] = v39[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned char v38[4] = v39[4];
  v38[5] = v39[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = v40[7];
  uint64_t v51 = (char *)v39 + v50;
  uint64_t v128 = (char *)v38 + v50;
  int v52 = v133();
  unsigned int v53 = ((uint64_t (*)(char *, uint64_t, uint64_t))v133)(v51, 1, v132);
  if (v52)
  {
    if (v53)
    {
      size_t v54 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
      uint64_t v55 = v128;
LABEL_45:
      memcpy(v55, v51, v54);
      goto LABEL_48;
    }
    (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v128, v51, v132);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v129 + 56))(v128, 0, 1, v132);
  }
  else
  {
    if (v53)
    {
      (*(void (**)(char *, uint64_t))(v129 + 8))(v128, v132);
      size_t v54 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
      uint64_t v55 = v128;
      goto LABEL_45;
    }
    (*(void (**)(char *, char *, uint64_t))(v129 + 24))(v128, v51, v132);
  }
LABEL_48:
  uint64_t v111 = v40[8];
  uint64_t v112 = (void *)((char *)v38 + v111);
  uint64_t v113 = (void *)((char *)v39 + v111);
  *uint64_t v112 = *v113;
  v112[1] = v113[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v114 = v40[9];
  uint64_t v115 = (void *)((char *)v38 + v114);
  uint64_t v116 = *(void **)((char *)v38 + v114);
  uint64_t v117 = *(void **)((char *)v39 + v114);
  if (v116 != (void *)1)
  {
    if (v117 != (void *)1)
    {
      *uint64_t v115 = v117;
      id v119 = v117;

      goto LABEL_55;
    }
    sub_10001EA8C((uint64_t)v38 + v114);
    uint64_t v117 = *(void **)((char *)v39 + v114);
    goto LABEL_53;
  }
  if (v117 == (void *)1)
  {
LABEL_53:
    *uint64_t v115 = v117;
    goto LABEL_55;
  }
  *uint64_t v115 = v117;
  id v118 = v117;
LABEL_55:
  uint64_t v70 = v132;
  uint64_t v120 = v40[10];
  uint64_t v121 = (char *)v38 + v120;
  uint64_t v122 = (char *)v39 + v120;
  uint64_t v123 = *(void **)v122;
  uint64_t v124 = (void *)*((void *)v122 + 1);
  char v125 = v122[16];
  sub_10001DB84(*(void **)v122, v124);
  uint64_t v126 = *(void **)v121;
  id v127 = (void *)*((void *)v121 + 1);
  *(void *)uint64_t v121 = v123;
  *((void *)v121 + 1) = v124;
  v121[16] = v125;
  sub_10001DE30(v126, v127);
  uint64_t v69 = v130;
  uint64_t v68 = v131;
LABEL_30:
  *(void **)((char *)v31 + v36[6]) = *(void **)(v135 + v36[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void **)((char *)v31 + v36[7]) = *(void **)(v135 + v36[7]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *((unsigned char *)v31 + v36[8]) = *(unsigned char *)(v135 + v36[8]);
  uint64_t v71 = v36[9];
  uint64_t v72 = (char *)v31 + v71;
  uint64_t v73 = (const void *)(v135 + v71);
  unsigned int v74 = ((uint64_t (*)(char *, uint64_t, uint64_t))v133)((char *)v31 + v71, 1, v70);
  unsigned int v75 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v133)(v73, 1, v70);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, const void *, uint64_t))(v129 + 16))(v72, v73, v70);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v129 + 56))(v72, 0, 1, v70);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v129 + 8))(v72, v70);
LABEL_35:
    uint64_t v76 = sub_10001D64C(&qword_10010F340);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, const void *, uint64_t))(v129 + 24))(v72, v73, v70);
LABEL_36:
  *(void **)((char *)v31 + v36[10]) = *(void **)(v135 + v36[10]);
  swift_retain();
  swift_release();
  uint64_t v77 = v36[11];
  id v78 = (void **)((char *)v31 + v77);
  id v79 = (void *)(v135 + v77);
  *id v78 = *v79;
  v78[1] = v79[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v80 = v36[12];
  id v81 = (void **)((char *)v31 + v80);
  id v82 = (void *)(v135 + v80);
  *id v81 = *v82;
  v81[1] = v82[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v83 = a3[6];
  uint64_t v84 = v68 + v83;
  uint64_t v85 = v69 + v83;
  *(unsigned char *)uint64_t v84 = *(unsigned char *)(v69 + v83);
  *(void *)(v84 + 8) = *(void *)(v69 + v83 + 8);
  *(void *)(v84 + 16) = *(void *)(v69 + v83 + 16);
  *(void *)(v84 + 24) = *(void *)(v69 + v83 + 24);
  uint64_t v86 = *(void **)(v69 + v83 + 32);
  uint64_t v87 = *(void **)(v84 + 32);
  *(void *)(v84 + 32) = v86;
  id v88 = v86;

  char v89 = *(void **)(v85 + 40);
  uint64_t v90 = *(void **)(v84 + 40);
  *(void *)(v84 + 40) = v89;
  id v91 = v89;

  *(void *)(v84 + 48) = *(void *)(v85 + 48);
  long long v92 = *(_OWORD *)(v85 + 56);
  *(unsigned char *)(v84 + 72) = *(unsigned char *)(v85 + 72);
  *(_OWORD *)(v84 + 56) = v92;
  *(void *)(v84 + 80) = *(void *)(v85 + 80);
  *(void *)(v84 + 88) = *(void *)(v85 + 88);
  *(void *)(v84 + 96) = *(void *)(v85 + 96);
  uint64_t v93 = *(void **)(v85 + 104);
  uint64_t v94 = *(void **)(v84 + 104);
  *(void *)(v84 + 104) = v93;
  id v95 = v93;

  uint64_t v96 = *(void **)(v85 + 112);
  uint64_t v97 = *(void **)(v84 + 112);
  *(void *)(v84 + 112) = v96;
  id v98 = v96;

  *(void *)(v84 + 120) = *(void *)(v85 + 120);
  *(void *)(v84 + 128) = *(void *)(v85 + 128);
  *(void *)(v84 + 136) = *(void *)(v85 + 136);
  *(void *)(v84 + 144) = *(void *)(v85 + 144);
  uint64_t v99 = a3[7];
  uint64_t v100 = v68 + v99;
  uint64_t v101 = v69 + v99;
  uint64_t v102 = *(void *)v101;
  char v103 = *(unsigned char *)(v101 + 8);
  sub_10002AB64(*(void *)v101, v103);
  uint64_t v104 = *(void *)v100;
  char v105 = *(unsigned char *)(v100 + 8);
  *(void *)uint64_t v100 = v102;
  *(unsigned char *)(v100 + 8) = v103;
  sub_10002AFC4(v104, v105);
  if (v68 != v69)
  {
    uint64_t v106 = a3[8];
    uint64_t v107 = (void *)(v68 + v106);
    uint64_t v108 = (void *)(v69 + v106);
    sub_1000227A8(v68 + v106, &qword_10010FE40);
    sub_10001D64C(&qword_10010FE40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v109 = sub_1000CB2A0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v109 - 8) + 16))(v107, v108, v109);
    }
    else
    {
      *uint64_t v107 = *v108;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v68;
}

uint64_t sub_1000701E0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Section();
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_1000CABE0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v59 = *(unsigned int (**)(void))(v11 + 48);
  uint64_t v58 = v11;
  if (((unsigned int (*)(const void *, uint64_t, uint64_t))v59)(v9, 1, v10))
  {
    uint64_t v12 = sub_10001D64C(&qword_10010F340);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = *(int *)(v6 + 36);
  id v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = sub_1000CACC0();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v60 = v10;
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_10001D64C((uint64_t *)&unk_100111DE0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v19 = a3[5];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  uint64_t v22 = (int *)type metadata accessor for TodayContent();
  uint64_t v23 = v22[5];
  uint64_t v24 = (_OWORD *)(v20 + v23);
  uint64_t v25 = (_OWORD *)(v21 + v23);
  uint64_t v26 = (int *)type metadata accessor for Banner();
  uint64_t v27 = *((void *)v26 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = sub_10001D64C(&qword_10010DE20);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    long long v29 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v29;
    void v24[2] = v25[2];
    uint64_t v30 = v26[7];
    __dst = (char *)v24 + v30;
    __src = (char *)v25 + v30;
    if (v59())
    {
      uint64_t v31 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, __src, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(__dst, __src, v60);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(__dst, 0, 1, v60);
    }
    *(_OWORD *)((char *)v24 + v26[8]) = *(_OWORD *)((char *)v25 + v26[8]);
    *(void *)((char *)v24 + v26[9]) = *(void *)((char *)v25 + v26[9]);
    uint64_t v32 = v26[10];
    id v33 = (char *)v24 + v32;
    uint64_t v34 = (char *)v25 + v32;
    v33[16] = v34[16];
    *(_OWORD *)id v33 = *(_OWORD *)v34;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
  }
  *(void *)(v20 + v22[6]) = *(void *)(v21 + v22[6]);
  *(void *)(v20 + v22[7]) = *(void *)(v21 + v22[7]);
  *(unsigned char *)(v20 + v22[8]) = *(unsigned char *)(v21 + v22[8]);
  uint64_t v35 = v22[9];
  uint64_t v36 = (void *)(v20 + v35);
  uint64_t v37 = (const void *)(v21 + v35);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v59)(v21 + v35, 1, v60))
  {
    uint64_t v38 = sub_10001D64C(&qword_10010F340);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v58 + 32))(v36, v37, v60);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v36, 0, 1, v60);
  }
  *(void *)(v20 + v22[10]) = *(void *)(v21 + v22[10]);
  *(_OWORD *)(v20 + v22[11]) = *(_OWORD *)(v21 + v22[11]);
  *(_OWORD *)(v20 + v22[12]) = *(_OWORD *)(v21 + v22[12]);
  uint64_t v39 = a3[6];
  uint64_t v40 = a3[7];
  uint64_t v41 = a1 + v39;
  uint64_t v42 = a2 + v39;
  long long v43 = *(_OWORD *)(v42 + 16);
  *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
  *(_OWORD *)(v41 + 16) = v43;
  long long v44 = *(_OWORD *)(v42 + 80);
  *(_OWORD *)(v41 + 64) = *(_OWORD *)(v42 + 64);
  *(_OWORD *)(v41 + 80) = v44;
  long long v45 = *(_OWORD *)(v42 + 48);
  *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
  *(_OWORD *)(v41 + 48) = v45;
  *(void *)(v41 + 144) = *(void *)(v42 + 144);
  long long v46 = *(_OWORD *)(v42 + 128);
  long long v47 = *(_OWORD *)(v42 + 96);
  *(_OWORD *)(v41 + 112) = *(_OWORD *)(v42 + 112);
  *(_OWORD *)(v41 + 128) = v46;
  *(_OWORD *)(v41 + 96) = v47;
  uint64_t v48 = a1 + v40;
  uint64_t v49 = a2 + v40;
  *(unsigned char *)(v48 + 8) = *(unsigned char *)(v49 + 8);
  *(void *)uint64_t v48 = *(void *)v49;
  uint64_t v50 = a3[8];
  uint64_t v51 = (void *)(a1 + v50);
  int v52 = (const void *)(a2 + v50);
  uint64_t v53 = sub_10001D64C(&qword_10010FE40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v54 = sub_1000CB2A0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v54 - 8) + 32))(v51, v52, v54);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000707CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v6 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Section();
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = sub_1000CABE0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  uint64_t v114 = (uint64_t (*)(char *, uint64_t, uint64_t))v13;
  int v15 = v13(v10, 1, v11);
  uint64_t v113 = v11;
  uint64_t v110 = v12;
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_10001D64C(&qword_10010F340);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = *(int *)(v7 + 36);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = sub_1000CACC0();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
LABEL_12:
    uint64_t v25 = sub_10001D64C((uint64_t *)&unk_100111DE0);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v21 + 40))(v18, v19, v20);
LABEL_13:
  uint64_t v26 = a3[5];
  uint64_t v111 = a2;
  uint64_t v112 = a1;
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  long long v29 = *(void **)(a1 + v26);
  *(void *)(a1 + v26) = *(void *)(a2 + v26);

  uint64_t v30 = (int *)type metadata accessor for TodayContent();
  uint64_t v31 = v30[5];
  uint64_t v32 = (char *)(v27 + v31);
  id v33 = (char *)(v28 + v31);
  uint64_t v34 = (int *)type metadata accessor for Banner();
  uint64_t v35 = *((void *)v34 - 1);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, int *))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  __src = v33;
  int v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      sub_1000742BC((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_19;
    }
    uint64_t v47 = *((void *)v33 + 1);
    *(void *)uint64_t v32 = *(void *)v33;
    *((void *)v32 + 1) = v47;
    swift_bridgeObjectRelease();
    uint64_t v48 = *((void *)v33 + 3);
    *((void *)v32 + 2) = *((void *)v33 + 2);
    *((void *)v32 + 3) = v48;
    swift_bridgeObjectRelease();
    uint64_t v49 = *((void *)v33 + 5);
    *((void *)v32 + 4) = *((void *)v33 + 4);
    *((void *)v32 + 5) = v49;
    swift_bridgeObjectRelease();
    uint64_t v50 = v34[7];
    uint64_t v51 = &v33[v50];
    uint64_t v109 = &v32[v50];
    int v52 = ((uint64_t (*)(void))v13)();
    int v53 = v114(v51, 1, v113);
    if (v52)
    {
      if (v53)
      {
        size_t v54 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v55 = v109;
LABEL_29:
        memcpy(v55, v51, v54);
        goto LABEL_32;
      }
      (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v109, v51, v113);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v109, 0, 1, v113);
    }
    else
    {
      if (v53)
      {
        (*(void (**)(char *, uint64_t))(v110 + 8))(v109, v113);
        size_t v54 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v55 = v109;
        goto LABEL_29;
      }
      (*(void (**)(char *, char *, uint64_t))(v110 + 40))(v109, v51, v113);
    }
LABEL_32:
    uint64_t v59 = v34[8];
    uint64_t v60 = &v32[v59];
    id v61 = &__src[v59];
    uint64_t v63 = *(void *)v61;
    uint64_t v62 = *((void *)v61 + 1);
    *uint64_t v60 = v63;
    v60[1] = v62;
    swift_bridgeObjectRelease();
    uint64_t v64 = v34[9];
    uint64_t v65 = &v32[v64];
    uint64_t v66 = *(void **)&v32[v64];
    uint64_t v67 = *(void *)&__src[v64];
    if (v66 == (void *)1)
    {
      uint64_t v43 = v112;
    }
    else
    {
      uint64_t v43 = v112;
      if (v67 != 1)
      {
        *uint64_t v65 = v67;

        goto LABEL_38;
      }
      sub_10001EA8C((uint64_t)&v32[v64]);
      uint64_t v67 = *(void *)&__src[v64];
    }
    *uint64_t v65 = v67;
LABEL_38:
    uint64_t v68 = v34[10];
    uint64_t v69 = &v32[v68];
    uint64_t v70 = &__src[v68];
    char v71 = v70[16];
    uint64_t v72 = *(void **)v69;
    uint64_t v73 = (void *)*((void *)v69 + 1);
    *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
    v69[16] = v71;
    sub_10001DE30(v72, v73);
    uint64_t v46 = v113;
    goto LABEL_39;
  }
  if (v38)
  {
LABEL_19:
    uint64_t v45 = sub_10001D64C(&qword_10010DE20);
    memcpy(v32, v33, *(void *)(*(void *)(v45 - 8) + 64));
    uint64_t v43 = v112;
    uint64_t v46 = v113;
    goto LABEL_39;
  }
  long long v39 = *((_OWORD *)v33 + 1);
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  *((_OWORD *)v32 + 1) = v39;
  *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
  uint64_t v40 = v34[7];
  uint64_t v41 = &v32[v40];
  uint64_t v42 = &v33[v40];
  uint64_t v43 = v112;
  if (v114(&__src[v40], 1, v113))
  {
    uint64_t v44 = sub_10001D64C(&qword_10010F340);
    memcpy(v41, v42, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v41, v42, v113);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56))(v41, 0, 1, v113);
  }
  uint64_t v46 = v113;
  *(_OWORD *)&v32[v34[8]] = *(_OWORD *)&__src[v34[8]];
  *(void *)&v32[v34[9]] = *(void *)&__src[v34[9]];
  uint64_t v56 = v34[10];
  char v57 = &v32[v56];
  uint64_t v58 = &__src[v56];
  v57[16] = v58[16];
  *(_OWORD *)char v57 = *(_OWORD *)v58;
  (*(void (**)(char *, void, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
LABEL_39:
  *(void *)(v27 + v30[6]) = *(void *)(v28 + v30[6]);
  swift_bridgeObjectRelease();
  *(void *)(v27 + v30[7]) = *(void *)(v28 + v30[7]);
  swift_unknownObjectRelease();
  *(unsigned char *)(v27 + v30[8]) = *(unsigned char *)(v28 + v30[8]);
  uint64_t v74 = v30[9];
  unsigned int v75 = (void *)(v27 + v74);
  uint64_t v76 = (char *)(v28 + v74);
  int v77 = v114((char *)(v27 + v74), 1, v46);
  int v78 = v114(v76, 1, v46);
  if (v77)
  {
    if (!v78)
    {
      (*(void (**)(void *, char *, uint64_t))(v110 + 32))(v75, v76, v46);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v110 + 56))(v75, 0, 1, v46);
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v78)
  {
    (*(void (**)(void *, uint64_t))(v110 + 8))(v75, v46);
LABEL_44:
    uint64_t v79 = sub_10001D64C(&qword_10010F340);
    memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
    goto LABEL_45;
  }
  (*(void (**)(void *, char *, uint64_t))(v110 + 40))(v75, v76, v46);
LABEL_45:
  *(void *)(v27 + v30[10]) = *(void *)(v28 + v30[10]);
  swift_release();
  uint64_t v80 = v30[11];
  id v81 = (void *)(v27 + v80);
  id v82 = (uint64_t *)(v28 + v80);
  uint64_t v84 = *v82;
  uint64_t v83 = v82[1];
  *id v81 = v84;
  v81[1] = v83;
  swift_bridgeObjectRelease();
  uint64_t v85 = v30[12];
  uint64_t v86 = (void *)(v27 + v85);
  uint64_t v87 = (uint64_t *)(v28 + v85);
  uint64_t v89 = *v87;
  uint64_t v88 = v87[1];
  *uint64_t v86 = v89;
  v86[1] = v88;
  swift_bridgeObjectRelease();
  uint64_t v90 = a3[6];
  uint64_t v91 = v43 + v90;
  uint64_t v92 = v111 + v90;
  *(unsigned char *)uint64_t v91 = *(unsigned char *)(v111 + v90);
  *(_OWORD *)(v91 + 8) = *(_OWORD *)(v111 + v90 + 8);
  *(void *)(v91 + 24) = *(void *)(v111 + v90 + 24);
  uint64_t v93 = *(void **)(v43 + v90 + 32);
  *(void *)(v91 + 32) = *(void *)(v111 + v90 + 32);

  uint64_t v94 = *(void **)(v91 + 40);
  *(void *)(v91 + 40) = *(void *)(v92 + 40);

  *(void *)(v91 + 48) = *(void *)(v92 + 48);
  *(_OWORD *)(v91 + 56) = *(_OWORD *)(v92 + 56);
  *(unsigned char *)(v91 + 72) = *(unsigned char *)(v92 + 72);
  *(_OWORD *)(v91 + 80) = *(_OWORD *)(v92 + 80);
  *(void *)(v91 + 96) = *(void *)(v92 + 96);
  id v95 = *(void **)(v91 + 104);
  *(void *)(v91 + 104) = *(void *)(v92 + 104);

  uint64_t v96 = *(void **)(v91 + 112);
  *(void *)(v91 + 112) = *(void *)(v92 + 112);

  *(_OWORD *)(v91 + 120) = *(_OWORD *)(v92 + 120);
  *(_OWORD *)(v91 + 136) = *(_OWORD *)(v92 + 136);
  uint64_t v97 = a3[7];
  uint64_t v98 = v43 + v97;
  uint64_t v99 = (uint64_t *)(v111 + v97);
  uint64_t v100 = *v99;
  LOBYTE(v99) = *((unsigned char *)v99 + 8);
  uint64_t v101 = *(void *)v98;
  char v102 = *(unsigned char *)(v98 + 8);
  *(void *)uint64_t v98 = v100;
  *(unsigned char *)(v98 + 8) = (_BYTE)v99;
  sub_10002AFC4(v101, v102);
  if (v43 != v111)
  {
    uint64_t v103 = a3[8];
    uint64_t v104 = (void *)(v43 + v103);
    char v105 = (const void *)(v111 + v103);
    sub_1000227A8(v43 + v103, &qword_10010FE40);
    uint64_t v106 = sub_10001D64C(&qword_10010FE40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v107 = sub_1000CB2A0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v107 - 8) + 32))(v104, v105, v107);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v104, v105, *(void *)(*(void *)(v106 - 8) + 64));
    }
  }
  return v43;
}

uint64_t sub_100071238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007124C);
}

uint64_t sub_10007124C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Section();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for TodayContent();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v14 = *(void *)(a1 + a3[6] + 32);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    return (v14 + 1);
  }
  else
  {
    uint64_t v15 = sub_10001D64C(&qword_10010FE48);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[8];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_1000713D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000713E8);
}

uint64_t sub_1000713E8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for Section();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = type metadata accessor for TodayContent();
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6] + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v15 = sub_10001D64C(&qword_10010FE48);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[8];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

uint64_t type metadata accessor for SectionView()
{
  uint64_t result = qword_100110770;
  if (!qword_100110770) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000715BC()
{
  type metadata accessor for Section();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TodayContent();
    if (v1 <= 0x3F)
    {
      sub_100054F94();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_1000716D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000716F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10001D64C(&qword_1001107C0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v21 - v8;
  uint64_t v10 = type metadata accessor for SectionView();
  if (*(unsigned char *)(a1 + *(int *)(v10 + 24)) == 1)
  {
    uint64_t v11 = v10;
    id v12 = [self separatorColor];
    uint64_t v13 = sub_1000CBBB0();
    uint64_t v14 = a1 + *(int *)(v11 + 28);
    uint64_t v15 = *(void *)v14;
    char v16 = *(unsigned char *)(v14 + 8);
    sub_10002AB64(*(void *)v14, v16);
    sub_100058148(v15, v16);
    sub_10002AFC4(v15, v16);
    sub_1000CBD20();
    sub_1000CB310();
    v21[1] = v13;
    v21[2] = v26;
    char v22 = v27;
    uint64_t v23 = v28;
    char v24 = v29;
    long long v25 = v30;
    sub_10001D64C(&qword_1001107D8);
    sub_100073F10(&qword_1001107E0, &qword_1001107D8);
  }
  uint64_t v17 = sub_1000CBC70();
  *(void *)uint64_t v9 = sub_1000CB700();
  *((void *)v9 + 1) = 0;
  v9[16] = 0;
  uint64_t v18 = sub_10001D64C(&qword_1001107C8);
  sub_100071950(a1, (uint64_t)&v9[*(int *)(v18 + 44)]);
  sub_100036850((uint64_t)v9, (uint64_t)v7, &qword_1001107C0);
  *a2 = v17;
  uint64_t v19 = sub_10001D64C(&qword_1001107D0);
  sub_100036850((uint64_t)v7, (uint64_t)a2 + *(int *)(v19 + 48), &qword_1001107C0);
  swift_retain();
  sub_1000227A8((uint64_t)v9, &qword_1001107C0);
  sub_1000227A8((uint64_t)v7, &qword_1001107C0);
  return swift_release();
}

uint64_t sub_100071950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v3 = type metadata accessor for SectionView();
  uint64_t v4 = v3 - 8;
  uint64_t v57 = *(void *)(v3 - 8);
  uint64_t v56 = *(void *)(v57 + 64);
  __chkstk_darwin(v3);
  uint64_t v55 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_10001D64C(&qword_1001107E8);
  uint64_t v60 = *(void *)(v58 - 8);
  uint64_t v6 = __chkstk_darwin(v58);
  uint64_t v59 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v42 - v8;
  uint64_t v10 = sub_1000CB6C0();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SectionHeaderView();
  __chkstk_darwin(v14);
  char v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10001D64C(&qword_1001107F0);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  char v22 = (char *)&v42 - v21;
  sub_10007411C(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Section);
  uint64_t v23 = a1 + *(int *)(v4 + 32);
  char v24 = *(void **)(v23 + 32);
  long long v25 = &v16[*(int *)(v14 + 20)];
  *(_OWORD *)long long v25 = *(_OWORD *)(v23 + 16);
  *((void *)v25 + 2) = v24;
  id v26 = v24;
  sub_1000CB6B0();
  sub_100074274(&qword_1001107F8, (void (*)(uint64_t))type metadata accessor for SectionHeaderView);
  sub_1000CBAB0();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_1000742BC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SectionHeaderView);
  sub_1000365A0((uint64_t)v20, (uint64_t)v22, &qword_1001107F0);
  uint64_t v69 = *(void *)(a1 + 16);
  swift_getKeyPath();
  uint64_t v27 = a1;
  uint64_t v28 = v55;
  sub_10007411C(v27, v55, (uint64_t (*)(void))type metadata accessor for SectionView);
  unint64_t v29 = (*(unsigned __int8 *)(v57 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
  uint64_t v30 = swift_allocObject();
  sub_10007420C(v28, v30 + v29, (uint64_t (*)(void))type metadata accessor for SectionView);
  swift_bridgeObjectRetain();
  sub_10001D64C(&qword_10010F5A0);
  sub_100036A5C(&qword_100110800, &qword_10010F5A0);
  sub_1000CBC90();
  sub_1000CBD20();
  sub_1000CB3E0();
  uint64_t v57 = v69;
  uint64_t v56 = v71;
  uint64_t v55 = v73;
  uint64_t v54 = v75;
  uint64_t v53 = v77;
  uint64_t v52 = v79;
  uint64_t v51 = v81;
  uint64_t v50 = v82;
  char v68 = 1;
  char v67 = v70;
  char v66 = v72;
  unsigned __int8 v65 = v74;
  unsigned __int8 v64 = v76;
  unsigned __int8 v63 = v78;
  unsigned __int8 v62 = v80;
  sub_100036850((uint64_t)v22, (uint64_t)v20, &qword_1001107F0);
  uint64_t v31 = v60;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
  uint64_t v49 = v22;
  id v33 = v59;
  uint64_t v34 = (uint64_t)v20;
  uint64_t v48 = v20;
  uint64_t v35 = v58;
  v32(v59, v9, v58);
  LOBYTE(v23) = v68;
  LOBYTE(v14) = v67;
  uint64_t v47 = v9;
  LOBYTE(v11) = v66;
  int v43 = v65;
  int v44 = v64;
  int v45 = v63;
  int v46 = v62;
  uint64_t v36 = v61;
  sub_100036850(v34, v61, &qword_1001107F0);
  uint64_t v37 = sub_10001D64C(&qword_100110808);
  v32((char *)(v36 + *(int *)(v37 + 48)), v33, v35);
  uint64_t v38 = v36 + *(int *)(v37 + 64);
  *(void *)uint64_t v38 = 0;
  *(unsigned char *)(v38 + 8) = v23;
  *(void *)(v38 + 16) = v57;
  *(unsigned char *)(v38 + 24) = v14;
  *(void *)(v38 + 32) = v56;
  *(unsigned char *)(v38 + 40) = v11;
  *(void *)(v38 + 48) = v55;
  *(unsigned char *)(v38 + 56) = v43;
  *(void *)(v38 + 64) = v54;
  *(unsigned char *)(v38 + 72) = v44;
  *(void *)(v38 + 80) = v53;
  *(unsigned char *)(v38 + 88) = v45;
  *(void *)(v38 + 96) = v52;
  *(unsigned char *)(v38 + 104) = v46;
  uint64_t v39 = v50;
  *(void *)(v38 + 112) = v51;
  *(void *)(v38 + 120) = v39;
  uint64_t v40 = *(void (**)(char *, uint64_t))(v31 + 8);
  v40(v47, v35);
  sub_1000227A8((uint64_t)v49, &qword_1001107F0);
  v40(v33, v35);
  return sub_1000227A8((uint64_t)v48, &qword_1001107F0);
}

uint64_t sub_100072138@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v4 = sub_10001D64C(&qword_100110810);
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  __chkstk_darwin(v4);
  uint64_t v38 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10001D64C(&qword_100110818);
  __chkstk_darwin(v39);
  uint64_t v37 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Item(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000CABE0();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v48 = (char *)v34 - v21;
  uint64_t v36 = v2;
  sub_100072790(a1, &v50);
  uint64_t v22 = v50;
  uint64_t v42 = v51;
  int v43 = v52;
  uint64_t v44 = v53;
  int v45 = v54;
  uint64_t v46 = v55;
  uint64_t v47 = v56;
  uint64_t v35 = a1;
  sub_10007411C(a1, (uint64_t)v12, type metadata accessor for Item);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1000742BC((uint64_t)v12, type metadata accessor for Item);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  }
  else
  {
    sub_10007420C((uint64_t)v12, (uint64_t)v9, type metadata accessor for Item.Headline);
    sub_100036850((uint64_t)&v9[*(int *)(v7 + 24)], (uint64_t)v15, &qword_10010F340);
    sub_1000742BC((uint64_t)v9, type metadata accessor for Item.Headline);
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1000227A8((uint64_t)v15, &qword_10010F340);
    uint64_t v50 = v22;
    uint64_t v51 = v42;
    unsigned __int8 v52 = v43;
    uint64_t v53 = v44;
    unsigned __int8 v54 = v45;
    uint64_t v55 = v46;
    uint64_t v56 = v47;
    sub_10001D64C(&qword_10010FC40);
    sub_100073F10((unint64_t *)&qword_10010FC38, &qword_10010FC40);
    uint64_t result = sub_1000CBC70();
    uint64_t v24 = result;
  }
  else
  {
    long long v25 = v48;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v48, v15, v16);
    uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 16))(v20, v25, v16);
    v34[1] = v22;
    uint64_t v50 = v22;
    uint64_t v51 = v42;
    unsigned __int8 v52 = v43;
    uint64_t v53 = v44;
    unsigned __int8 v54 = v45;
    uint64_t v55 = v46;
    uint64_t v56 = v47;
    __chkstk_darwin(v26);
    v34[-2] = &v50;
    swift_retain();
    sub_10001D64C(&qword_10010FC40);
    sub_100073F10((unint64_t *)&qword_10010FC38, &qword_10010FC40);
    uint64_t v27 = v38;
    sub_1000CB8D0();
    swift_release();
    uint64_t v28 = sub_100073728(v35);
    uint64_t v30 = v29;
    char v32 = v31 & 1;
    sub_100036A5C(&qword_100110820, &qword_100110810);
    uint64_t v33 = v41;
    sub_1000CBA50();
    sub_100036118(v28, v30, v32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v27, v33);
    sub_100073FAC();
    uint64_t v24 = sub_1000CBC70();
    swift_release();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v48, v16);
  }
  uint64_t *v49 = v24;
  return result;
}

uint64_t sub_100072790@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v149 = a2;
  uint64_t v3 = sub_10001D64C(&qword_10010F998);
  __chkstk_darwin(v3 - 8);
  uint64_t v144 = (uint64_t *)((char *)&v128 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10001D64C(&qword_10010E8E8);
  __chkstk_darwin(v5 - 8);
  uint64_t v146 = (uint64_t *)((char *)&v128 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for Section();
  uint64_t v145 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v143 = (char *)&v128 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = type metadata accessor for SectionView();
  uint64_t v9 = __chkstk_darwin(v152);
  uint64_t v148 = (uint64_t)&v128 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v147 = (uint64_t)&v128 - v11;
  uint64_t v150 = type metadata accessor for TodayContent();
  __chkstk_darwin(v150);
  uint64_t v151 = (uint64_t)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for HeadlineCell(0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v128 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Item.Headline(0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v128 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (void **)((char *)&v128 - v20);
  uint64_t v22 = type metadata accessor for Item(0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v128 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v128 - v28;
  __chkstk_darwin(v27);
  char v31 = (uint64_t *)((char *)&v128 - v30);
  sub_10007411C(a1, (uint64_t)&v128 - v30, type metadata accessor for Item);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    uint64_t v34 = sub_1000CB6F0();
    uint64_t v155 = v33;
    uint64_t v156 = v32;
    sub_1000231FC();
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_1000CB9D0();
    uint64_t v37 = v36;
    char v39 = v38;
    uint64_t v41 = v40;
    id v42 = [self secondaryLabelColor];
    uint64_t v43 = sub_1000CBBB0();
    swift_bridgeObjectRelease();
    LOBYTE(v32) = sub_1000CB800();
    sub_1000CB280();
    uint64_t v155 = v34;
    uint64_t v156 = 0;
    LOBYTE(v157) = 1;
    uint64_t v158 = (ValueMetadata *)v35;
    *(void *)&long long v159 = v37;
    BYTE8(v159) = v39 & 1;
    uint64_t v160 = v41;
    uint64_t v161 = v43;
    char v162 = v32;
    uint64_t v163 = v44;
    uint64_t v164 = v45;
    uint64_t v165 = v46;
    uint64_t v166 = v47;
    char v167 = 0;
    sub_10001D64C(&qword_100110830);
    sub_10007407C();
    uint64_t v48 = sub_1000CBC70();
    sub_1000CBD20();
    uint64_t result = sub_1000CB310();
    uint64_t v50 = v155;
    char v51 = v156;
    uint64_t v52 = v157;
    char v53 = (char)v158;
    unsigned __int8 v54 = v149;
    *uint64_t v149 = v48;
    v54[1] = v50;
    *((unsigned char *)v54 + 16) = v51;
    _OWORD v54[3] = v52;
    *((unsigned char *)v54 + 32) = v53;
    *(_OWORD *)(v54 + 5) = v159;
    return result;
  }
  uint64_t v128 = v23;
  uint64_t v129 = v26;
  uint64_t v142 = v29;
  uint64_t v131 = a1;
  uint64_t v137 = (uint64_t *)v15;
  uint64_t v140 = (int *)v13;
  sub_10007420C((uint64_t)v31, (uint64_t)v21, type metadata accessor for Item.Headline);
  uint64_t v132 = v19;
  sub_10007411C((uint64_t)v21, (uint64_t)v19, type metadata accessor for Item.Headline);
  uint64_t v55 = v152;
  uint64_t v56 = v153;
  uint64_t v57 = v153 + *(int *)(v152 + 20);
  sub_10007411C(v57, v151, (uint64_t (*)(void))type metadata accessor for TodayContent);
  uint64_t v58 = v56 + *(int *)(v55 + 24);
  uint64_t v59 = *(void **)(v58 + 40);
  uint64_t v60 = *(void *)(v58 + 48);
  uint64_t v61 = *(void *)(v58 + 56);
  uint64_t v139 = *(void *)(v58 + 64);
  int v138 = *(unsigned __int8 *)(v58 + 72);
  uint64_t v62 = *(void *)(v58 + 80);
  uint64_t v63 = *(void *)(v58 + 88);
  uint64_t v64 = *(void *)(v58 + 96);
  char v66 = *(void **)(v58 + 104);
  unsigned __int8 v65 = *(void **)(v58 + 112);
  uint64_t v67 = *(void *)(v58 + 120);
  uint64_t v68 = *(void *)(v58 + 128);
  uint64_t v69 = *(void *)(v58 + 136);
  char v70 = (uint64_t *)(v57 + *(int *)(v150 + 48));
  uint64_t v72 = *v70;
  uint64_t v71 = v70[1];
  uint64_t v141 = v21;
  uint64_t v73 = *v21;
  swift_bridgeObjectRetain();
  id v135 = v59;
  id v74 = v66;
  id v134 = v65;
  id v75 = [v73 identifier];
  uint64_t v76 = sub_1000CC1F0();
  uint64_t v78 = v77;

  id v136 = v74;
  uint64_t v133 = v61;
  if (v71)
  {
    uint64_t v79 = v148;
    unsigned __int8 v80 = v137;
    if (v72 == v76 && v71 == v78) {
      int v130 = 1;
    }
    else {
      int v130 = sub_1000CCA30();
    }
    uint64_t v81 = v149;
    uint64_t v82 = (uint64_t)v132;
    uint64_t v83 = (uint64_t)v143;
    swift_bridgeObjectRelease();
  }
  else
  {
    int v130 = 0;
    uint64_t v81 = v149;
    uint64_t v82 = (uint64_t)v132;
    uint64_t v79 = v148;
    unsigned __int8 v80 = v137;
    uint64_t v83 = (uint64_t)v143;
  }
  swift_bridgeObjectRelease();
  uint64_t v158 = &type metadata for FeatureFlags.NewsWidget;
  *(void *)&long long v159 = sub_100074184();
  char v84 = sub_1000CAE00();
  sub_1000201A8((uint64_t)&v155);
  uint64_t v85 = v153;
  uint64_t v86 = v147;
  sub_10007411C(v153, v147, (uint64_t (*)(void))type metadata accessor for SectionView);
  if ((v84 & 1) == 0)
  {
    sub_1000742BC(v86, (uint64_t (*)(void))type metadata accessor for SectionView);
    uint64_t v93 = (uint64_t)v141;
LABEL_20:
    uint64_t v102 = v131;
    sub_10007411C(v85, v79, (uint64_t (*)(void))type metadata accessor for SectionView);
    uint64_t v99 = (uint64_t)v142;
    sub_10007411C(v102, (uint64_t)v142, type metadata accessor for Item);
    goto LABEL_21;
  }
  uint64_t v87 = *(void *)(v86 + *(int *)(v152 + 20) + *(int *)(v150 + 24));
  uint64_t v88 = *(void *)(v87 + 16);
  if (v88)
  {
    sub_10007411C(v87+ ((*(unsigned __int8 *)(v145 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80))+ *(void *)(v145 + 72) * (v88 - 1), v83, (uint64_t (*)(void))type metadata accessor for Section);
    id v89 = [*(id *)(v83 + 8) identifier];
    uint64_t v90 = sub_1000CC1F0();
    uint64_t v92 = v91;

    sub_1000742BC(v83, (uint64_t (*)(void))type metadata accessor for Section);
  }
  else
  {
    uint64_t v90 = 0;
    uint64_t v92 = 0;
  }
  id v94 = [*(id *)(v86 + 8) identifier];
  uint64_t v95 = v86;
  uint64_t v96 = sub_1000CC1F0();
  uint64_t v98 = v97;

  if (!v92)
  {
    sub_1000742BC(v95, (uint64_t (*)(void))type metadata accessor for SectionView);
    swift_bridgeObjectRelease();
    uint64_t v93 = (uint64_t)v141;
    uint64_t v79 = v148;
    uint64_t v85 = v153;
    goto LABEL_20;
  }
  if (v90 != v96 || v92 != v98)
  {
    char v120 = sub_1000CCA30();
    swift_bridgeObjectRelease();
    sub_1000742BC(v147, (uint64_t (*)(void))type metadata accessor for SectionView);
    swift_bridgeObjectRelease();
    uint64_t v79 = v148;
    sub_10007411C(v153, v148, (uint64_t (*)(void))type metadata accessor for SectionView);
    uint64_t v99 = (uint64_t)v142;
    sub_10007411C(v131, (uint64_t)v142, type metadata accessor for Item);
    uint64_t v93 = (uint64_t)v141;
    uint64_t v100 = (uint64_t)v129;
    uint64_t v101 = v128;
    if (v120) {
      goto LABEL_24;
    }
LABEL_21:
    sub_1000742BC(v99, type metadata accessor for Item);
    sub_1000742BC(v79, (uint64_t (*)(void))type metadata accessor for SectionView);
    char v103 = 0;
    uint64_t v104 = v144;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  sub_1000742BC(v147, (uint64_t (*)(void))type metadata accessor for SectionView);
  swift_bridgeObjectRelease();
  uint64_t v79 = v148;
  sub_10007411C(v153, v148, (uint64_t (*)(void))type metadata accessor for SectionView);
  uint64_t v99 = (uint64_t)v142;
  sub_10007411C(v131, (uint64_t)v142, type metadata accessor for Item);
  uint64_t v93 = (uint64_t)v141;
  uint64_t v100 = (uint64_t)v129;
  uint64_t v101 = v128;
LABEL_24:
  uint64_t v121 = *(void *)(v79 + 16);
  uint64_t v122 = *(void *)(v121 + 16);
  if (v122)
  {
    sub_10007411C(v121+ ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80))+ *(void *)(v101 + 72) * (v122 - 1), v100, type metadata accessor for Item);
    uint64_t v123 = sub_1000B78DC();
    uint64_t v125 = v124;
    sub_1000742BC(v100, type metadata accessor for Item);
    uint64_t v126 = sub_1000B78DC();
    uint64_t v104 = v144;
    if (v125)
    {
      if (v123 == v126 && v125 == v127)
      {
        swift_bridgeObjectRelease();
        char v103 = 1;
      }
      else
      {
        char v103 = sub_1000CCA30();
        swift_bridgeObjectRelease();
      }
      uint64_t v93 = (uint64_t)v141;
      sub_1000742BC((uint64_t)v142, type metadata accessor for Item);
      sub_1000742BC(v148, (uint64_t (*)(void))type metadata accessor for SectionView);
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    uint64_t v93 = (uint64_t)v141;
    uint64_t v79 = v148;
    uint64_t v99 = (uint64_t)v142;
  }
  else
  {
    sub_1000B78DC();
    uint64_t v104 = v144;
  }
  sub_1000742BC(v99, type metadata accessor for Item);
  sub_1000742BC(v79, (uint64_t (*)(void))type metadata accessor for SectionView);
  swift_bridgeObjectRelease();
  char v103 = 0;
LABEL_22:
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v106 = (uint64_t)v146;
  uint64_t *v146 = KeyPath;
  sub_10001D64C(&qword_10010E8E0);
  swift_storeEnumTagMultiPayload();
  *uint64_t v104 = swift_getKeyPath();
  sub_10001D64C(&qword_10010F988);
  swift_storeEnumTagMultiPayload();
  uint64_t *v80 = swift_getKeyPath();
  sub_10001D64C(&qword_10010E9F0);
  swift_storeEnumTagMultiPayload();
  uint64_t v107 = v140;
  sub_1000365A0(v106, (uint64_t)v80 + v140[5], &qword_10010E8E8);
  sub_1000365A0((uint64_t)v104, (uint64_t)v80 + v107[6], &qword_10010F998);
  uint64_t v108 = (uint64_t *)((char *)v80 + v107[7]);
  uint64_t v154 = 0;
  sub_1000CBC40();
  uint64_t v109 = v156;
  *uint64_t v108 = v155;
  v108[1] = v109;
  uint64_t v110 = (uint64_t *)((char *)v80 + v107[8]);
  uint64_t v154 = 0;
  sub_1000CBC40();
  uint64_t v111 = v156;
  *uint64_t v110 = v155;
  v110[1] = v111;
  sub_10007420C(v82, (uint64_t)v80 + v107[9], type metadata accessor for Item.Headline);
  sub_10007420C(v151, (uint64_t)v80 + v107[10], (uint64_t (*)(void))type metadata accessor for TodayContent);
  uint64_t v112 = (char *)v80 + v107[11];
  *(void *)uint64_t v112 = v135;
  *((void *)v112 + 1) = v60;
  uint64_t v113 = v139;
  *((void *)v112 + 2) = v133;
  *((void *)v112 + 3) = v113;
  v112[32] = v138;
  *((void *)v112 + 5) = v62;
  *((void *)v112 + 6) = v63;
  *((void *)v112 + 7) = v64;
  id v114 = v134;
  *((void *)v112 + 8) = v136;
  *((void *)v112 + 9) = v114;
  *((void *)v112 + 10) = v67;
  *((void *)v112 + 11) = v68;
  *((void *)v112 + 12) = v69;
  *((unsigned char *)v80 + v107[12]) = v130 & 1;
  *((unsigned char *)v80 + v107[13]) = v103 & 1;
  sub_100074274(&qword_100110858, (void (*)(uint64_t))type metadata accessor for HeadlineCell);
  uint64_t v115 = sub_1000CBC70();
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v116 = v155;
  char v117 = v156;
  uint64_t v118 = v157;
  char v119 = (char)v158;
  *uint64_t v81 = v115;
  v81[1] = v116;
  *((unsigned char *)v81 + 16) = v117;
  v81[3] = v118;
  *((unsigned char *)v81 + 32) = v119;
  *(_OWORD *)(v81 + 5) = v159;
  return sub_1000742BC(v93, type metadata accessor for Item.Headline);
}

uint64_t sub_100073728(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (id *)&v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for Item(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)&v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10007411C(a1, (uint64_t)v7, type metadata accessor for Item);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = v7[1];
    uint64_t v27 = *v7;
    uint64_t v28 = v8;
    sub_1000231FC();
    return sub_1000CB9D0();
  }
  else
  {
    sub_10007420C((uint64_t)v7, (uint64_t)v4, type metadata accessor for Item.Headline);
    sub_10001D64C((uint64_t *)&unk_10010E860);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1000D34A0;
    id v11 = *v4;
    id v12 = [*v4 title];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = sub_1000CC1F0();
      unint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      unint64_t v16 = 0xE000000000000000;
    }
    *(void *)(v10 + 32) = v14;
    *(void *)(v10 + 40) = v16;
    id v17 = [v11 sourceName];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = sub_1000CC1F0();
      unint64_t v21 = v20;
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v21 = 0xE000000000000000;
    }
    *(void *)(v10 + 48) = v19;
    *(void *)(v10 + 56) = v21;
    uint64_t v27 = v10;
    sub_10001D64C(&qword_10010E870);
    sub_100036A5C((unint64_t *)&qword_10010E878, &qword_10010E870);
    uint64_t v22 = sub_1000CC150();
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v27 = v22;
    uint64_t v28 = v24;
    sub_1000231FC();
    uint64_t v9 = sub_1000CB9D0();
    sub_1000742BC((uint64_t)v4, type metadata accessor for Item.Headline);
  }
  return v9;
}

uint64_t sub_1000739E0@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_1000CBD10();
  a1[1] = v3;
  uint64_t v4 = sub_10001D64C(&qword_1001107B8);
  return sub_1000716F0(v1, (uint64_t *)((char *)a1 + *(int *)(v4 + 44)));
}

uint64_t sub_100073A24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000B78DC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100073A50()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for SectionView();
  uint64_t v24 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v22 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v23 = (v24 + 16) & ~v24;
  uint64_t v3 = v0 + v23;

  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for Section();
  uint64_t v5 = v0 + v23 + *(int *)(v4 + 32);
  uint64_t v6 = sub_1000CABE0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v25(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v8 = v3 + *(int *)(v4 + 36);
  uint64_t v9 = sub_1000CACC0();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  id v11 = (id *)(v3 + v2[5]);

  uint64_t v12 = type metadata accessor for TodayContent();
  uint64_t v13 = (char *)v11 + *(int *)(v12 + 20);
  uint64_t v14 = (int *)type metadata accessor for Banner();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v14 - 1) + 48))(v13, 1, v14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v15 = &v13[v14[7]];
    if (!v25((uint64_t)v15, 1, v6)) {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
    }
    swift_bridgeObjectRelease();
    unint64_t v16 = *(void **)&v13[v14[9]];
    if (v16 != (void *)1) {

    }
    sub_10001DE30(*(void **)&v13[v14[10]], *(void **)&v13[v14[10] + 8]);
    uint64_t v1 = v0;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  id v17 = (char *)v11 + *(int *)(v12 + 36);
  if (!v25((uint64_t)v17, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = (id *)(v3 + v2[6]);

  sub_10002AFC4(*(void *)(v3 + v2[7]), *(unsigned char *)(v3 + v2[7] + 8));
  uint64_t v19 = v3 + v2[8];
  sub_10001D64C(&qword_10010FE40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_1000CB2A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v1, v23 + v22, v24 | 7);
}

uint64_t sub_100073E8C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for SectionView();
  uint64_t result = sub_100072138(a1, &v5);
  *a2 = v5;
  return result;
}

uint64_t sub_100073F10(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001D690(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100073F7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 + 8);
  char v4 = *(unsigned char *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  char v6 = *(unsigned char *)(v2 + 32);
  *(void *)a1 = *(void *)v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v2 + 40);
  return swift_retain();
}

unint64_t sub_100073FAC()
{
  unint64_t result = qword_100110828;
  if (!qword_100110828)
  {
    sub_10001D690(&qword_100110818);
    sub_100036A5C(&qword_100110820, &qword_100110810);
    sub_100074274((unint64_t *)&qword_10010EA98, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110828);
  }
  return result;
}

unint64_t sub_10007407C()
{
  unint64_t result = qword_100110838;
  if (!qword_100110838)
  {
    sub_10001D690(&qword_100110830);
    sub_100036A5C(&qword_100110840, &qword_100110848);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110838);
  }
  return result;
}

uint64_t sub_10007411C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_100074184()
{
  unint64_t result = qword_100110850;
  if (!qword_100110850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110850);
  }
  return result;
}

uint64_t sub_1000741E0()
{
  return sub_1000CB560();
}

uint64_t sub_10007420C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100074274(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000742BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void destroy for SectionView.LayoutOptions(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
}

uint64_t initializeWithCopy for SectionView.LayoutOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  char v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  uint64_t v5 = *(void **)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v5;
  char v6 = *(void **)(a2 + 112);
  *(void *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  id v7 = v3;
  id v8 = v4;
  id v9 = v5;
  id v10 = v6;
  return a1;
}

uint64_t assignWithCopy for SectionView.LayoutOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  char v4 = *(void **)(a2 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  id v7 = *(void **)(a2 + 40);
  id v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v7;
  id v9 = v7;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  long long v10 = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v10;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  id v11 = *(void **)(a2 + 104);
  uint64_t v12 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v11;
  id v13 = v11;

  uint64_t v14 = *(void **)(a2 + 112);
  unint64_t v15 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v14;
  id v16 = v14;

  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  return a1;
}

__n128 initializeWithTake for SectionView.LayoutOptions(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for SectionView.LayoutOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  long long v4 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);

  long long v5 = *(void **)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);

  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionView.LayoutOptions(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionView.LayoutOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionView.LayoutOptions()
{
  return &type metadata for SectionView.LayoutOptions;
}

uint64_t sub_100074684()
{
  return sub_100036A5C(&qword_100110860, &qword_100110868);
}

ValueMetadata *type metadata accessor for AudioBadgeView()
{
  return &type metadata for AudioBadgeView;
}

uint64_t sub_1000746D0()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1000746EC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_retain();
  sub_1000CBB30();
  uint64_t v4 = sub_1000CBB70();
  swift_release();
  sub_1000CBB30();
  uint64_t v5 = sub_1000CBB70();
  swift_release();
  *(void *)a1 = v3;
  *(_WORD *)(a1 + 8) = 256;
  *(void *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = xmmword_1000D5570;
  *(void *)(a1 + 40) = 0x4000000000000000;
  *(void *)(a1 + 48) = v5;
  double result = 10.0;
  *(_OWORD *)(a1 + 56) = xmmword_1000D5580;
  *(void *)(a1 + 72) = 0x4000000000000000;
  return result;
}

uint64_t sub_10007479C()
{
  return sub_100074800(&qword_100110870, &qword_100110878, (void (*)(void))sub_1000747D8);
}

uint64_t sub_1000747D8()
{
  return sub_100074800(&qword_100110880, &qword_100110888, (void (*)(void))sub_100074880);
}

uint64_t sub_100074800(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001D690(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100074880()
{
  unint64_t result = qword_100110890;
  if (!qword_100110890)
  {
    sub_10001D690(&qword_100110898);
    sub_10004EE90();
    sub_1000748FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110890);
  }
  return result;
}

unint64_t sub_1000748FC()
{
  unint64_t result = qword_1001108A0;
  if (!qword_1001108A0)
  {
    sub_10001D690(&qword_1001108A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001108A0);
  }
  return result;
}

uint64_t Array.partitioned(using:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(a1);
  uint64_t v33 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v37 = (char *)&v26 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v26 - v13;
  sub_1000CC470();
  uint64_t v40 = sub_1000CC0F0();
  uint64_t v15 = sub_1000CC0F0();
  uint64_t v39 = v15;
  swift_bridgeObjectRetain();
  if (sub_1000CC450())
  {
    uint64_t v27 = v9;
    uint64_t v28 = v14;
    uint64_t v15 = 0;
    uint64_t v36 = (void (**)(char *, uint64_t *, uint64_t))(v8 + 16);
    uint64_t v30 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    char v31 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v32 = a3;
    uint64_t v29 = v8;
    while (1)
    {
      BOOL v18 = sub_1000CC420();
      sub_1000CC3F0();
      if (v18)
      {
        unint64_t v19 = a3
            + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
            + *(void *)(v8 + 72) * v15;
        uint64_t v20 = *(void (**)(char *, uint64_t *, uint64_t))(v8 + 16);
        v20(v14, (uint64_t *)v19, a4);
        uint64_t v21 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t result = sub_1000CC770();
        if (v27 != 8)
        {
          __break(1u);
          return result;
        }
        uint64_t v38 = result;
        uint64_t v20 = *v36;
        (*v36)(v14, &v38, a4);
        swift_unknownObjectRelease();
        uint64_t v21 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_13:
          __break(1u);
          break;
        }
      }
      uint64_t v22 = v37;
      (*v30)(v37, v14, a4);
      char v23 = v34(v22);
      if (v5)
      {
        (*v31)(v37, a4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v23)
      {
        uint64_t v24 = v39;
        uint64_t v38 = v39;
        swift_getWitnessTable();
        if ((sub_1000CC4E0() & 1) == 0)
        {
          uint64_t v38 = v24;
          sub_1000CC470();
          swift_bridgeObjectRetain();
          sub_1000CC440();
          sub_1000CC460(0);
        }
      }
      id v16 = v37;
      v20(v33, (uint64_t *)v37, a4);
      sub_1000CC440();
      (*v31)(v16, a4);
      a3 = v32;
      uint64_t v17 = sub_1000CC450();
      ++v15;
      uint64_t v5 = 0;
      uint64_t v14 = v28;
      uint64_t v8 = v29;
      if (v21 == v17)
      {
        swift_bridgeObjectRelease();
        uint64_t v15 = v39;
        goto LABEL_17;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_17:
  uint64_t v38 = v15;
  swift_getWitnessTable();
  if (sub_1000CC4E0())
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v38 = v15;
    sub_1000CC470();
    sub_1000CC440();
  }
  return v40;
}

uint64_t sub_100074D6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v54 = a3;
  uint64_t v48 = type metadata accessor for EngagementEvent(0);
  uint64_t v47 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10001D64C(&qword_10010F348);
  __chkstk_darwin(v5 - 8);
  long long v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DisappearanceEvent(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10001D64C(&qword_100110950);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v53 = (uint64_t)&v45 - v16;
  uint64_t v17 = sub_10001D64C(&qword_100110958);
  __chkstk_darwin(v17 - 8);
  unint64_t v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for AppearanceEvent(0);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v52 = (uint64_t)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v22 + 16);
  if (!v24)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
    goto LABEL_6;
  }
  uint64_t v45 = v7;
  uint64_t v46 = v11;
  uint64_t v25 = v22 + 32;
  uint64_t v49 = v22;
  sub_10003AA3C(v22 + 32, (uint64_t)&v57);
  sub_10001D64C(&qword_10010E8C0);
  int v26 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v19, v26 ^ 1u, 1, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
LABEL_6:
    sub_1000227A8((uint64_t)v19, &qword_100110958);
    sub_1000CC510();
    sub_100022644();
    char v31 = (void *)sub_1000CC630();
    sub_1000CB230();

LABEL_15:
    uint64_t v40 = type metadata accessor for Session();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v54, 1, 1, v40);
  }
  uint64_t v27 = v52;
  sub_1000781B8((uint64_t)v19, v52, type metadata accessor for AppearanceEvent);
  uint64_t v28 = v53;
  sub_100075580(v49, v50, v51, v53);
  sub_100036850(v28, (uint64_t)v15, &qword_100110950);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
  {
    sub_1000227A8((uint64_t)v15, &qword_100110950);
    sub_1000CC510();
    sub_100022644();
    uint64_t v29 = (void *)sub_1000CC630();
    sub_1000CB230();

    uint64_t v30 = v28;
LABEL_14:
    sub_1000227A8(v30, &qword_100110950);
    sub_1000780F4(v27, type metadata accessor for AppearanceEvent);
    goto LABEL_15;
  }
  uint64_t v32 = (uint64_t)v46;
  sub_1000781B8((uint64_t)v15, (uint64_t)v46, type metadata accessor for DisappearanceEvent);
  uint64_t v33 = swift_bridgeObjectRetain();
  uint64_t v34 = sub_10007596C(v33, v25, 1, (2 * v24) | 1, v27);
  if (!*(void *)(v34 + 16))
  {
    swift_bridgeObjectRelease();
    sub_1000CC510();
    sub_100022644();
    uint64_t v39 = (void *)sub_1000CC630();
    sub_1000CB230();

    swift_bridgeObjectRelease();
    sub_1000780F4(v32, type metadata accessor for DisappearanceEvent);
    uint64_t v30 = v53;
    goto LABEL_14;
  }
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v36 = 0;
  uint64_t v37 = v48;
  while (1)
  {
    uint64_t v38 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
      return result;
    }
    sub_10003AA3C(v25, (uint64_t)v56);
    sub_10003AA3C((uint64_t)v56, (uint64_t)v55);
    if (swift_dynamicCast()) {
      break;
    }
    uint64_t result = sub_1000201A8((uint64_t)v56);
    ++v36;
    v25 += 40;
    if (v38 == v24)
    {
      swift_bridgeObjectRelease();
      uint64_t v59 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
      goto LABEL_18;
    }
  }
  sub_1000780F4((uint64_t)v4, type metadata accessor for EngagementEvent);
  swift_bridgeObjectRelease();
  sub_100078088(v56, (uint64_t)&v57);
LABEL_18:
  swift_bridgeObjectRelease();
  sub_1000227A8(v53, &qword_100110950);
  if (*((void *)&v58 + 1))
  {
    uint64_t v41 = (uint64_t)v45;
    int v42 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v41, v42 ^ 1u, 1, v37);
  }
  else
  {
    sub_1000227A8((uint64_t)&v57, &qword_100110960);
    uint64_t v41 = (uint64_t)v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v45, 1, 1, v37);
  }
  uint64_t v43 = v54;
  sub_1000781B8(v52, v54, type metadata accessor for AppearanceEvent);
  uint64_t v44 = (int *)type metadata accessor for Session();
  sub_100036850(v41, v43 + v44[6], &qword_10010F348);
  sub_1000781B8((uint64_t)v46, v43 + v44[7], type metadata accessor for DisappearanceEvent);
  *(void *)(v43 + v44[5]) = v34;
  (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v44 - 1) + 56))(v43, 0, 1, v44);
  return sub_1000227A8(v41, &qword_10010F348);
}

uint64_t sub_100075580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10001D64C(&qword_100110950);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DisappearanceEvent(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v32 = a3;
    uint64_t v33 = a2;
    uint64_t v34 = v12;
    uint64_t v35 = v11;
    uint64_t v36 = a4;
    swift_bridgeObjectRetain();
    uint64_t v16 = a1 + 32;
    uint64_t v17 = v15;
    do
    {
      sub_10003AA3C(v16, (uint64_t)v37);
      uint64_t v19 = v38;
      uint64_t v18 = v39;
      sub_100020110(v37, v38);
      int v20 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v18 + 16))(v19, v18);
      sub_1000201A8((uint64_t)v37);
      if (v20 == 1)
      {
        swift_bridgeObjectRelease();
        sub_100022644();
        uint64_t v27 = (void *)sub_1000CC630();
        sub_1000CC530();
        sub_1000CB230();

        uint64_t v28 = v36;
        sub_1000CACB0();
        uint64_t v29 = v34;
        *(unsigned char *)(v28 + *(int *)(v35 + 20)) = 2;
        return (*(uint64_t (**)(uint64_t, void, uint64_t))(v29 + 56))(v28, 0, 1);
      }
      v16 += 40;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
    sub_10003AA3C(a1 + 32 + 40 * v15 - 40, (uint64_t)v37);
    sub_10001D64C(&qword_10010E8C0);
    uint64_t v11 = v35;
    int v21 = swift_dynamicCast();
    uint64_t v22 = v34;
    uint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56);
    v23(v10, v21 ^ 1u, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v10, 1, v11) == 1)
    {
      a4 = v36;
      a3 = v32;
      a2 = v33;
      goto LABEL_8;
    }
    sub_1000781B8((uint64_t)v10, (uint64_t)v14, type metadata accessor for DisappearanceEvent);
    uint64_t v31 = v36;
    sub_1000781B8((uint64_t)v14, v36, type metadata accessor for DisappearanceEvent);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v23)(v31, 0, 1, v11);
  }
  else
  {
    uint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
    v23(v10, 1, 1, v11);
LABEL_8:
    sub_1000227A8((uint64_t)v10, &qword_100110950);
    if (*(void *)(a3 + 16) - 1 == a2)
    {
      sub_100022644();
      uint64_t v24 = (void *)sub_1000CC630();
      sub_1000CC530();
      sub_1000CB230();

      sub_1000CACB0();
      *(unsigned char *)(a4 + *(int *)(v11 + 20)) = 2;
      uint64_t v25 = a4;
      uint64_t v26 = 0;
    }
    else
    {
      uint64_t v25 = a4;
      uint64_t v26 = 1;
    }
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(v25, v26, 1, v11);
  }
}

uint64_t sub_10007596C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10001D64C(&qword_100110968);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for VisibleRectChangedEvent(0);
  uint64_t v55 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v50 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v48 - v17;
  __chkstk_darwin(v16);
  uint64_t v54 = (uint64_t)&v48 - v19;
  uint64_t v20 = type metadata accessor for AppearanceEvent(0);
  uint64_t result = __chkstk_darwin(v20);
  uint64_t v51 = result;
  uint64_t v52 = (uint64_t)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v23 = (a4 >> 1) - a3;
  if (a4 >> 1 == a3)
  {
    uint64_t v24 = _swiftEmptyArrayStorage;
  }
  else
  {
    if ((uint64_t)(a4 >> 1) <= a3)
    {
      __break(1u);
      return result;
    }
    uint64_t v49 = a5;
    uint64_t v25 = a1;
    uint64_t v26 = (void (**)(char *, void, uint64_t, uint64_t))(v55 + 56);
    uint64_t v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
    uint64_t v48 = v25;
    swift_unknownObjectRetain();
    uint64_t v28 = a2 + 40 * a3;
    uint64_t v24 = _swiftEmptyArrayStorage;
    uint64_t v53 = v18;
    do
    {
      sub_10003AA3C(v28, (uint64_t)v57);
      sub_10003AA3C((uint64_t)v57, (uint64_t)v56);
      sub_10001D64C(&qword_10010E8C0);
      int v29 = swift_dynamicCast();
      (*v26)(v12, v29 ^ 1u, 1, v13);
      sub_1000201A8((uint64_t)v57);
      if ((*v27)(v12, 1, v13) == 1)
      {
        sub_1000227A8((uint64_t)v12, &qword_100110968);
      }
      else
      {
        uint64_t v30 = v13;
        uint64_t v31 = v54;
        sub_1000781B8((uint64_t)v12, v54, type metadata accessor for VisibleRectChangedEvent);
        sub_1000781B8(v31, (uint64_t)v18, type metadata accessor for VisibleRectChangedEvent);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v24 = (void *)sub_100088520(0, v24[2] + 1, 1, (unint64_t)v24);
        }
        unint64_t v33 = v24[2];
        unint64_t v32 = v24[3];
        uint64_t v13 = v30;
        if (v33 >= v32 >> 1) {
          uint64_t v24 = (void *)sub_100088520(v32 > 1, v33 + 1, 1, (unint64_t)v24);
        }
        void v24[2] = v33 + 1;
        uint64_t v34 = (uint64_t)v24
            + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))
            + *(void *)(v55 + 72) * v33;
        uint64_t v18 = v53;
        sub_1000781B8((uint64_t)v53, v34, type metadata accessor for VisibleRectChangedEvent);
      }
      v28 += 40;
      --v23;
    }
    while (v23);
    swift_unknownObjectRelease();
    a5 = v49;
  }
  uint64_t v35 = v24[2];
  uint64_t v36 = v52;
  sub_100078154(a5, v52);
  if (v35)
  {
    sub_1000780F4(v36, type metadata accessor for AppearanceEvent);
  }
  else
  {
    int v37 = *(unsigned __int8 *)(v36 + *(int *)(v51 + 24));
    sub_1000780F4(v36, type metadata accessor for AppearanceEvent);
    if (v37 != 1)
    {
      swift_bridgeObjectRelease();
      sub_100022644();
      uint64_t v38 = (void *)sub_1000CC630();
      sub_1000CC530();
      sub_1000CB230();

      uint64_t v39 = sub_1000CACC0();
      uint64_t v40 = (uint64_t)v50;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(v50, a5, v39);
      uint64_t v41 = v40 + *(int *)(v13 + 20);
      *(void *)uint64_t v41 = 0;
      *(void *)(v41 + 8) = 0;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)(v41 + 16) = _Q0;
      sub_10001D64C(&qword_100111010);
      unint64_t v47 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
      uint64_t v24 = (void *)swift_allocObject();
      *((_OWORD *)v24 + 1) = xmmword_1000D37C0;
      sub_1000781B8(v40, (uint64_t)v24 + v47, type metadata accessor for VisibleRectChangedEvent);
    }
  }
  return (uint64_t)v24;
}

Swift::Int sub_100075E74(void **a1)
{
  unint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v2 = (void *)sub_1000289E0(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_100075EE0(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100075EE0(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v167 = sub_1000CACC0();
  uint64_t v4 = *(void *)(v167 - 8);
  uint64_t v5 = __chkstk_darwin(v167);
  uint64_t v166 = (char *)&v156 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unsigned __int8 v168 = (char *)&v156 - v7;
  v185 = a1;
  Swift::Int v8 = a1[1];
  Swift::Int result = sub_1000CCA10(v8);
  if (result >= v8)
  {
    if (v8 < 0) {
      goto LABEL_142;
    }
    if (v8) {
      return sub_100076D68(0, v8, 1, v185);
    }
    return result;
  }
  if (v8 >= 0) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v8 + 1;
  }
  if (v8 < -1) {
    goto LABEL_150;
  }
  Swift::Int v157 = result;
  if (v8 < 2)
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
    uint64_t v163 = (char *)&_swiftEmptyArrayStorage[4];
    if (v8 != 1)
    {
      unint64_t v17 = _swiftEmptyArrayStorage[2];
      uint64_t v156 = _swiftEmptyArrayStorage;
      uint64_t v15 = (char *)_swiftEmptyArrayStorage;
LABEL_108:
      if (v17 >= 2)
      {
        uint64_t v149 = *v185;
        do
        {
          unint64_t v150 = v17 - 2;
          if (v17 < 2) {
            goto LABEL_137;
          }
          if (!v149) {
            goto LABEL_149;
          }
          uint64_t v151 = v15;
          uint64_t v152 = *(void *)&v15[16 * v150 + 32];
          uint64_t v153 = *(void *)&v15[16 * v17 + 24];
          sub_10007715C(v149 + 40 * v152, (char *)(v149 + 40 * *(void *)&v15[16 * v17 + 16]), (char *)(v149 + 40 * v153), v163);
          if (v2) {
            break;
          }
          if (v153 < v152) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v151 = sub_100027728((uint64_t)v151);
          }
          if (v150 >= *((void *)v151 + 2)) {
            goto LABEL_139;
          }
          uint64_t v154 = &v151[16 * v150 + 32];
          *(void *)uint64_t v154 = v152;
          *((void *)v154 + 1) = v153;
          unint64_t v155 = *((void *)v151 + 2);
          if (v17 > v155) {
            goto LABEL_140;
          }
          memmove(&v151[16 * v17 + 16], &v151[16 * v17 + 32], 16 * (v155 - v17));
          uint64_t v15 = v151;
          *((void *)v151 + 2) = v155 - 1;
          unint64_t v17 = v155 - 1;
        }
        while (v155 > 2);
      }
LABEL_119:
      swift_bridgeObjectRelease();
      v156[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v11 = v10 >> 1;
    sub_10001D64C(&qword_10010E8C0);
    uint64_t v12 = (void *)sub_1000CC410();
    void v12[2] = v11;
    uint64_t v163 = (char *)(v12 + 4);
  }
  Swift::Int v13 = 0;
  uint64_t v14 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v15 = (char *)_swiftEmptyArrayStorage;
  uint64_t v156 = v12;
  uint64_t v16 = v168;
  uint64_t v165 = (void (**)(char *, uint64_t))(v4 + 8);
  while (1)
  {
    uint64_t v18 = v13;
    Swift::Int v19 = v13 + 1;
    uint64_t v160 = v15;
    Swift::Int v162 = v13;
    if (v13 + 1 < v8)
    {
      uint64_t v170 = (void *)v8;
      uint64_t v164 = v2;
      uint64_t v20 = *v185;
      Swift::Int v21 = v13;
      sub_10003AA3C(*v185 + 40 * v19, (uint64_t)&v182);
      uint64_t v158 = v20;
      sub_10003AA3C(v20 + 40 * v21, (uint64_t)v179);
      uint64_t v22 = v183;
      uint64_t v23 = v184;
      uint64_t v24 = sub_100020110(&v182, v183);
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      uint64_t v175 = (void (*)(uint64_t, void))v24;
      uint64_t v176 = v25;
      uint64_t v177 = v23;
      uint64_t v178 = v22;
      v25(v22, v23);
      uint64_t v26 = v180;
      uint64_t v27 = v181;
      uint64_t v28 = sub_100020110(v179, v180);
      int v29 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      uint64_t v30 = v166;
      uint64_t v173 = v28;
      uint64_t v174 = v29;
      v29(v26, v27);
      sub_1000CAC40();
      double v32 = fabs(v31);
      unint64_t v33 = *v14;
      uint64_t v34 = v167;
      (*v14)(v30, v167);
      v33(v16, v34);
      if (v32 <= 1.0)
      {
        uint64_t v35 = v183;
        uint64_t v36 = v184;
        sub_100020110(&v182, v183);
        unsigned int v37 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
        uint64_t v38 = v180;
        uint64_t v39 = v181;
        sub_100020110(v179, v180);
        LODWORD(v161) = v37 < (*(unsigned __int8 (**)(uint64_t, uint64_t))(v39 + 16))(v38, v39);
      }
      else
      {
        v176(v178, v177);
        v174(v26, v27);
        LODWORD(v161) = sub_1000CAC60();
        v33(v30, v34);
        v33(v16, v34);
      }
      sub_1000201A8((uint64_t)v179);
      sub_1000201A8((uint64_t)&v182);
      uint64_t v18 = v162;
      Swift::Int v19 = v162 + 2;
      Swift::Int v8 = (Swift::Int)v170;
      uint64_t v2 = v164;
      if (v162 + 2 < (uint64_t)v170)
      {
        long long v159 = v33;
        uint64_t v40 = v158 + 40 * v162 + 40;
        while (1)
        {
          Swift::Int v169 = v19;
          uint64_t v164 = v2;
          sub_10003AA3C(v40 + 40, (uint64_t)&v182);
          uint64_t v178 = v40;
          sub_10003AA3C(v40, (uint64_t)v179);
          uint64_t v41 = v183;
          uint64_t v42 = v184;
          uint64_t v43 = (void (*)(uint64_t, uint64_t))sub_100020110(&v182, v183);
          uint64_t v44 = *(void (**)(uint64_t, void))(v42 + 8);
          uint64_t v45 = v168;
          uint64_t v174 = v43;
          uint64_t v175 = v44;
          uint64_t v176 = (void (*)(uint64_t, uint64_t))v42;
          uint64_t v177 = v41;
          v44(v41, v42);
          uint64_t v46 = v180;
          uint64_t v47 = v181;
          uint64_t v48 = sub_100020110(v179, v180);
          uint64_t v49 = *(void (**)(void *, uint64_t))(v47 + 8);
          uint64_t v50 = v166;
          uint64_t v171 = (void (*)(void, uint64_t))v48;
          unint64_t v172 = v49;
          uint64_t v173 = (void *)v46;
          v49((void *)v46, v47);
          sub_1000CAC40();
          double v52 = fabs(v51);
          uint64_t v53 = v167;
          uint64_t v54 = v159;
          v159(v50, v167);
          v54(v45, v53);
          if (v52 <= 1.0)
          {
            uint64_t v56 = v183;
            uint64_t v57 = v184;
            sub_100020110(&v182, v183);
            unsigned int v58 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v57 + 16))(v56, v57);
            uint64_t v59 = v180;
            uint64_t v60 = v181;
            sub_100020110(v179, v180);
            int v55 = v58 < (*(unsigned __int8 (**)(uint64_t, uint64_t))(v60 + 16))(v59, v60);
          }
          else
          {
            v175(v177, v176);
            v172(v173, v47);
            int v55 = sub_1000CAC60();
            v54(v50, v53);
            v54(v45, v53);
          }
          sub_1000201A8((uint64_t)v179);
          sub_1000201A8((uint64_t)&v182);
          uint64_t v2 = v164;
          Swift::Int v19 = v169;
          Swift::Int v8 = (Swift::Int)v170;
          if ((v161 ^ v55)) {
            break;
          }
          Swift::Int v19 = v169 + 1;
          uint64_t v40 = v178 + 40;
          if (v170 == (void *)(v169 + 1))
          {
            Swift::Int v19 = (Swift::Int)v170;
            break;
          }
        }
        uint64_t v18 = v162;
      }
      if (v161)
      {
        if (v19 < v18) {
          goto LABEL_143;
        }
        if (v18 < v19)
        {
          uint64_t v61 = 40 * v19 - 40;
          uint64_t v62 = 40 * v18;
          Swift::Int v63 = v19;
          Swift::Int v64 = v18;
          do
          {
            if (v64 != --v19)
            {
              if (!v158) {
                goto LABEL_148;
              }
              uint64_t v65 = v158 + v62;
              uint64_t v66 = v158 + v61;
              sub_100078088((long long *)(v158 + v62), (uint64_t)&v182);
              uint64_t v67 = *(void *)(v66 + 32);
              long long v68 = *(_OWORD *)(v66 + 16);
              *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
              *(_OWORD *)(v65 + 16) = v68;
              *(void *)(v65 + 32) = v67;
              sub_100078088(&v182, v66);
              uint64_t v18 = v162;
            }
            ++v64;
            v61 -= 40;
            v62 += 40;
          }
          while (v64 < v19);
          Swift::Int v19 = v63;
        }
      }
    }
    if (v19 < v8)
    {
      if (__OFSUB__(v19, v18)) {
        goto LABEL_141;
      }
      if (v19 - v18 < v157) {
        break;
      }
    }
LABEL_57:
    if (v19 < v18) {
      goto LABEL_136;
    }
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v15 = v160;
    }
    else {
      uint64_t v15 = sub_1000273E8(0, *((void *)v160 + 2) + 1, 1, v160);
    }
    unint64_t v99 = *((void *)v15 + 2);
    unint64_t v98 = *((void *)v15 + 3);
    unint64_t v17 = v99 + 1;
    Swift::Int v169 = v19;
    if (v99 >= v98 >> 1) {
      uint64_t v15 = sub_1000273E8((char *)(v98 > 1), v99 + 1, 1, v15);
    }
    *((void *)v15 + 2) = v17;
    uint64_t v100 = v15 + 32;
    uint64_t v101 = &v15[16 * v99 + 32];
    Swift::Int v102 = v169;
    *(void *)uint64_t v101 = v162;
    *((void *)v101 + 1) = v102;
    if (v99)
    {
      uint64_t v16 = v168;
      while (1)
      {
        unint64_t v103 = v17 - 1;
        if (v17 >= 4)
        {
          uint64_t v108 = &v100[16 * v17];
          uint64_t v109 = *((void *)v108 - 8);
          uint64_t v110 = *((void *)v108 - 7);
          BOOL v114 = __OFSUB__(v110, v109);
          uint64_t v111 = v110 - v109;
          if (v114) {
            goto LABEL_125;
          }
          uint64_t v113 = *((void *)v108 - 6);
          uint64_t v112 = *((void *)v108 - 5);
          BOOL v114 = __OFSUB__(v112, v113);
          uint64_t v106 = v112 - v113;
          char v107 = v114;
          if (v114) {
            goto LABEL_126;
          }
          unint64_t v115 = v17 - 2;
          uint64_t v116 = &v100[16 * v17 - 32];
          uint64_t v118 = *(void *)v116;
          uint64_t v117 = *((void *)v116 + 1);
          BOOL v114 = __OFSUB__(v117, v118);
          uint64_t v119 = v117 - v118;
          if (v114) {
            goto LABEL_128;
          }
          BOOL v114 = __OFADD__(v106, v119);
          uint64_t v120 = v106 + v119;
          if (v114) {
            goto LABEL_131;
          }
          if (v120 >= v111)
          {
            int v138 = &v100[16 * v103];
            uint64_t v140 = *(void *)v138;
            uint64_t v139 = *((void *)v138 + 1);
            BOOL v114 = __OFSUB__(v139, v140);
            uint64_t v141 = v139 - v140;
            if (v114) {
              goto LABEL_135;
            }
            BOOL v131 = v106 < v141;
            goto LABEL_95;
          }
        }
        else
        {
          if (v17 != 3)
          {
            uint64_t v132 = *((void *)v15 + 4);
            uint64_t v133 = *((void *)v15 + 5);
            BOOL v114 = __OFSUB__(v133, v132);
            uint64_t v125 = v133 - v132;
            char v126 = v114;
            goto LABEL_89;
          }
          uint64_t v105 = *((void *)v15 + 4);
          uint64_t v104 = *((void *)v15 + 5);
          BOOL v114 = __OFSUB__(v104, v105);
          uint64_t v106 = v104 - v105;
          char v107 = v114;
        }
        if (v107) {
          goto LABEL_127;
        }
        unint64_t v115 = v17 - 2;
        uint64_t v121 = &v100[16 * v17 - 32];
        uint64_t v123 = *(void *)v121;
        uint64_t v122 = *((void *)v121 + 1);
        BOOL v124 = __OFSUB__(v122, v123);
        uint64_t v125 = v122 - v123;
        char v126 = v124;
        if (v124) {
          goto LABEL_130;
        }
        uint64_t v127 = &v100[16 * v103];
        uint64_t v129 = *(void *)v127;
        uint64_t v128 = *((void *)v127 + 1);
        BOOL v114 = __OFSUB__(v128, v129);
        uint64_t v130 = v128 - v129;
        if (v114) {
          goto LABEL_133;
        }
        if (__OFADD__(v125, v130)) {
          goto LABEL_134;
        }
        if (v125 + v130 >= v106)
        {
          BOOL v131 = v106 < v130;
LABEL_95:
          if (v131) {
            unint64_t v103 = v115;
          }
          goto LABEL_97;
        }
LABEL_89:
        if (v126) {
          goto LABEL_129;
        }
        id v134 = &v100[16 * v103];
        uint64_t v136 = *(void *)v134;
        uint64_t v135 = *((void *)v134 + 1);
        BOOL v114 = __OFSUB__(v135, v136);
        uint64_t v137 = v135 - v136;
        if (v114) {
          goto LABEL_132;
        }
        if (v137 < v125) {
          goto LABEL_14;
        }
LABEL_97:
        unint64_t v142 = v103 - 1;
        if (v103 - 1 >= v17)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        if (!*v185) {
          goto LABEL_147;
        }
        uint64_t v143 = v15;
        uint64_t v144 = &v100[16 * v142];
        uint64_t v145 = *(void *)v144;
        uint64_t v146 = &v100[16 * v103];
        uint64_t v147 = *((void *)v146 + 1);
        sub_10007715C(*v185 + 40 * *(void *)v144, (char *)(*v185 + 40 * *(void *)v146), (char *)(*v185 + 40 * v147), v163);
        if (v2) {
          goto LABEL_119;
        }
        if (v147 < v145) {
          goto LABEL_122;
        }
        if (v103 > *((void *)v143 + 2)) {
          goto LABEL_123;
        }
        *(void *)uint64_t v144 = v145;
        *(void *)&v100[16 * v142 + 8] = v147;
        unint64_t v148 = *((void *)v143 + 2);
        if (v103 >= v148) {
          goto LABEL_124;
        }
        unint64_t v17 = v148 - 1;
        memmove(&v100[16 * v103], v146 + 16, 16 * (v148 - 1 - v103));
        uint64_t v15 = v143;
        *((void *)v143 + 2) = v148 - 1;
        uint64_t v16 = v168;
        if (v148 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v17 = 1;
    uint64_t v16 = v168;
LABEL_14:
    Swift::Int v8 = v185[1];
    Swift::Int v13 = v169;
    uint64_t v14 = v165;
    if (v169 >= v8) {
      goto LABEL_108;
    }
  }
  if (__OFADD__(v18, v157)) {
    goto LABEL_144;
  }
  if (v18 + v157 >= v8) {
    uint64_t v69 = (void (*)(char *, uint64_t))v8;
  }
  else {
    uint64_t v69 = (void (*)(char *, uint64_t))(v18 + v157);
  }
  if ((uint64_t)v69 >= v18)
  {
    if ((void (*)(char *, uint64_t))v19 != v69)
    {
      uint64_t v164 = v2;
      uint64_t v70 = 40 * v19 - 40;
      long long v159 = v69;
      do
      {
        uint64_t v161 = v70;
        uint64_t v71 = v70;
        Swift::Int v169 = v19;
        do
        {
          uint64_t v177 = v71;
          uint64_t v178 = v18;
          uint64_t v72 = *v185 + v71;
          sub_10003AA3C(v72 + 40, (uint64_t)&v182);
          sub_10003AA3C(v72, (uint64_t)v179);
          uint64_t v73 = v183;
          uint64_t v74 = v184;
          id v75 = sub_100020110(&v182, v183);
          uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
          uint64_t v77 = v168;
          uint64_t v173 = v75;
          uint64_t v174 = v76;
          uint64_t v175 = (void (*)(uint64_t, void))v74;
          uint64_t v176 = (void (*)(uint64_t, uint64_t))v73;
          v76(v73, v74);
          uint64_t v78 = v180;
          uint64_t v79 = v181;
          unsigned __int8 v80 = sub_100020110(v179, v180);
          uint64_t v81 = *(void (**)(void, uint64_t))(v79 + 8);
          uint64_t v82 = v166;
          uint64_t v170 = v80;
          uint64_t v171 = v81;
          unint64_t v172 = (void (*)(void *, uint64_t))v78;
          v81(v78, v79);
          sub_1000CAC40();
          double v84 = fabs(v83);
          uint64_t v85 = *v165;
          uint64_t v86 = v167;
          (*v165)(v82, v167);
          v85(v77, v86);
          if (v84 <= 1.0)
          {
            uint64_t v88 = v183;
            uint64_t v89 = v184;
            sub_100020110(&v182, v183);
            unsigned int v90 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v89 + 16))(v88, v89);
            uint64_t v91 = v180;
            uint64_t v92 = v181;
            sub_100020110(v179, v180);
            char v87 = v90 < (*(unsigned __int8 (**)(uint64_t, uint64_t))(v92 + 16))(v91, v92);
          }
          else
          {
            v174((uint64_t)v176, (uint64_t)v175);
            v171(v172, v79);
            char v87 = sub_1000CAC60();
            v85(v82, v86);
            v85(v77, v86);
          }
          sub_1000201A8((uint64_t)v179);
          sub_1000201A8((uint64_t)&v182);
          Swift::Int v93 = v169;
          if ((v87 & 1) == 0) {
            break;
          }
          uint64_t v94 = *v185;
          if (!*v185) {
            goto LABEL_146;
          }
          uint64_t v95 = v177;
          uint64_t v96 = v94 + v177;
          sub_100078088((long long *)(v94 + v177 + 40), (uint64_t)&v182);
          long long v97 = *(_OWORD *)(v96 + 16);
          *(_OWORD *)(v96 + 40) = *(_OWORD *)v96;
          *(_OWORD *)(v96 + 56) = v97;
          *(void *)(v96 + 72) = *(void *)(v96 + 32);
          sub_100078088(&v182, v96);
          uint64_t v71 = v95 - 40;
          uint64_t v18 = v178 + 1;
        }
        while (v93 != v178 + 1);
        Swift::Int v19 = v93 + 1;
        uint64_t v70 = v161 + 40;
        uint64_t v18 = v162;
      }
      while ((void (*)(char *, uint64_t))v19 != v159);
      Swift::Int v19 = (Swift::Int)v159;
      uint64_t v2 = v164;
    }
    goto LABEL_57;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = sub_1000CC860();
  __break(1u);
  return result;
}

uint64_t sub_100076D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v57 = a4;
  uint64_t v44 = a1;
  uint64_t v49 = sub_1000CACC0();
  uint64_t v6 = __chkstk_darwin(v49);
  Swift::Int v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t v50 = a3;
  uint64_t v43 = a2;
  if (a3 != a2)
  {
    Swift::Int v13 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v14 = 40 * v50 - 40;
    uint64_t v48 = v8;
    uint64_t v47 = (char *)&v42 - v11;
LABEL_5:
    uint64_t v58 = v44;
    uint64_t v45 = v14;
    uint64_t v15 = v14;
    while (1)
    {
      uint64_t v16 = *v57;
      uint64_t v65 = v15;
      uint64_t v17 = v16 + v15;
      sub_10003AA3C(v16 + v15 + 40, (uint64_t)&v62);
      sub_10003AA3C(v17, (uint64_t)v59);
      uint64_t v18 = v63;
      uint64_t v19 = v64;
      uint64_t v20 = sub_100020110(&v62, v63);
      Swift::Int v21 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      uint64_t v53 = v20;
      uint64_t v54 = v21;
      uint64_t v55 = v19;
      uint64_t v56 = v18;
      v21(v18, v19);
      uint64_t v23 = v60;
      uint64_t v22 = v61;
      uint64_t v24 = sub_100020110(v59, v60);
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      double v51 = v24;
      double v52 = v25;
      v25(v23, v22);
      sub_1000CAC40();
      double v27 = fabs(v26);
      uint64_t v28 = *v13;
      int v29 = v8;
      uint64_t v30 = v8;
      uint64_t v31 = v49;
      (*v13)(v29, v49);
      v28(v12, v31);
      if (v27 <= 1.0)
      {
        uint64_t v33 = v63;
        uint64_t v34 = v64;
        sub_100020110(&v62, v63);
        unsigned int v35 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v34 + 16))(v33, v34);
        uint64_t v36 = v60;
        uint64_t v37 = v61;
        sub_100020110(v59, v60);
        char v32 = v35 < (*(unsigned __int8 (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
        uint64_t v12 = v47;
      }
      else
      {
        uint64_t v12 = v47;
        uint64_t v46 = v22;
        v54(v56, v55);
        v52(v23, v46);
        char v32 = sub_1000CAC60();
        v28(v30, v31);
        v28(v12, v31);
      }
      sub_1000201A8((uint64_t)v59);
      uint64_t result = sub_1000201A8((uint64_t)&v62);
      Swift::Int v8 = v48;
      uint64_t v38 = v65;
      if ((v32 & 1) == 0)
      {
LABEL_4:
        uint64_t v14 = v45 + 40;
        if (++v50 == v43) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v39 = *v57;
      if (!*v57) {
        break;
      }
      uint64_t v40 = v39 + v65;
      sub_100078088((long long *)(v39 + v65 + 40), (uint64_t)&v62);
      long long v41 = *(_OWORD *)(v40 + 16);
      *(_OWORD *)(v40 + 40) = *(_OWORD *)v40;
      *(_OWORD *)(v40 + 56) = v41;
      *(void *)(v40 + 72) = *(void *)(v40 + 32);
      uint64_t result = sub_100078088(&v62, v40);
      uint64_t v15 = v38 - 40;
      if (v50 == ++v58) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10007715C(uint64_t a1, char *a2, char *a3, char *a4)
{
  uint64_t v95 = sub_1000CACC0();
  uint64_t v8 = *(void *)(v95 - 8);
  uint64_t v9 = __chkstk_darwin(v95);
  uint64_t v94 = &v81[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  Swift::Int v13 = &v81[-v12];
  uint64_t v14 = (uint64_t)&a2[-a1];
  uint64_t v15 = v14 / 40;
  uint64_t v85 = a3;
  uint64_t v16 = a3 - a2;
  uint64_t v17 = v16 / 40;
  uint64_t v105 = v11;
  uint64_t v104 = a4;
  if (v14 / 40 >= v16 / 40)
  {
    if (v16 >= -39)
    {
      if (a4 != a2 || &a2[40 * v17] <= a4)
      {
        uint64_t v46 = v11;
        memmove(a4, a2, 40 * v17);
        uint64_t v11 = v46;
      }
      uint64_t v47 = &a4[40 * v17];
      unint64_t v103 = v47;
      uint64_t v105 = a2;
      if (v16 >= 40 && v11 < a2)
      {
        uint64_t v48 = (void (**)(void, void))(v8 + 8);
        uint64_t v49 = v85 - 40;
        double v83 = a4;
        uint64_t v82 = v11;
        Swift::Int v93 = v13;
        uint64_t v50 = v95;
        while (1)
        {
          uint64_t v92 = (uint64_t)v49;
          sub_10003AA3C((uint64_t)(v47 - 40), (uint64_t)v100);
          uint64_t v96 = a2;
          uint64_t v91 = a2 - 40;
          sub_10003AA3C((uint64_t)(a2 - 40), (uint64_t)v97);
          uint64_t v53 = v101;
          uint64_t v54 = v102;
          uint64_t v55 = sub_100020110(v100, v101);
          uint64_t v56 = (void (*)(void, void *))v54[1];
          char v87 = (void (*)(uint64_t, void))v55;
          unsigned int v90 = (void (*)(uint64_t, char *))v53;
          uint64_t v89 = v54;
          uint64_t v88 = v56;
          v56(v53, v54);
          uint64_t v57 = v98;
          uint64_t v58 = v99;
          uint64_t v59 = sub_100020110(v97, v98);
          uint64_t v60 = *(char **)(v58 + 8);
          uint64_t v61 = v94;
          unint64_t v84 = (unint64_t)v59;
          uint64_t v86 = (void *)v57;
          uint64_t v85 = v60;
          ((void (*)(uint64_t, uint64_t))v60)(v57, v58);
          sub_1000CAC40();
          double v63 = fabs(v62);
          uint64_t v64 = v48;
          uint64_t v65 = (void (*)(unsigned char *, uint64_t))*v48;
          v65(v61, v50);
          v65(v13, v50);
          if (v63 <= 1.0)
          {
            uint64_t v68 = v101;
            uint64_t v67 = v102;
            sub_100020110(v100, v101);
            LODWORD(v68) = ((unsigned __int8 (*)(uint64_t, void *))v67[2])(v68, v67);
            uint64_t v70 = v98;
            uint64_t v69 = v99;
            sub_100020110(v97, v98);
            char v66 = v68 < (*(unsigned __int8 (**)(uint64_t, uint64_t))(v69 + 16))(v70, v69);
            Swift::Int v13 = v93;
          }
          else
          {
            Swift::Int v13 = v93;
            v88(v90, v89);
            ((void (*)(void *, uint64_t))v85)(v86, v58);
            char v66 = sub_1000CAC60();
            v65(v61, v50);
            v65(v13, v50);
          }
          uint64_t v48 = v64;
          unint64_t v71 = v92;
          uint64_t v72 = (char *)(v92 + 40);
          sub_1000201A8((uint64_t)v97);
          sub_1000201A8((uint64_t)v100);
          uint64_t v73 = v96;
          unint64_t v74 = (unint64_t)v83;
          if (v66)
          {
            id v75 = v82;
            uint64_t v76 = v91;
            if (v72 != v96 || v71 >= (unint64_t)v96)
            {
              long long v51 = *(_OWORD *)v91;
              long long v52 = *((_OWORD *)v91 + 1);
              *(void *)(v71 + 32) = *((void *)v91 + 4);
              *(_OWORD *)unint64_t v71 = v51;
              *(_OWORD *)(v71 + 16) = v52;
            }
            v105 -= 40;
            uint64_t v47 = v103;
            if ((unint64_t)v103 <= v74) {
              goto LABEL_47;
            }
          }
          else
          {
            uint64_t v77 = v103;
            uint64_t v47 = v103 - 40;
            v103 -= 40;
            id v75 = v82;
            if (v72 < v77 || v71 >= (unint64_t)v77 || v72 != v77)
            {
              long long v78 = *(_OWORD *)v47;
              long long v79 = *(_OWORD *)(v77 - 24);
              *(void *)(v71 + 32) = *((void *)v77 - 1);
              *(_OWORD *)unint64_t v71 = v78;
              *(_OWORD *)(v71 + 16) = v79;
            }
            uint64_t v76 = v73;
            if ((unint64_t)v47 <= v74) {
              goto LABEL_47;
            }
          }
          uint64_t v49 = (char *)(v71 - 40);
          a2 = v76;
          if (v76 <= v75) {
            goto LABEL_47;
          }
        }
      }
      goto LABEL_47;
    }
  }
  else if (v14 >= -39)
  {
    if (a4 != v11 || &v11[40 * v15] <= a4) {
      memmove(a4, v11, 40 * v15);
    }
    unint64_t v84 = (unint64_t)&a4[40 * v15];
    unint64_t v103 = (char *)v84;
    if (v14 >= 40 && a2 < v85)
    {
      uint64_t v18 = (void (**)(void, void))(v8 + 8);
      Swift::Int v93 = v13;
      do
      {
        uint64_t v96 = a2;
        sub_10003AA3C((uint64_t)a2, (uint64_t)v100);
        sub_10003AA3C((uint64_t)a4, (uint64_t)v97);
        uint64_t v19 = v101;
        uint64_t v20 = (char *)v102;
        Swift::Int v21 = sub_100020110(v100, v101);
        uint64_t v22 = (void (*)(uint64_t, char *))*((void *)v20 + 1);
        uint64_t v89 = v21;
        uint64_t v91 = v20;
        uint64_t v92 = v19;
        unsigned int v90 = v22;
        v22(v19, v20);
        uint64_t v24 = v98;
        uint64_t v23 = v99;
        uint64_t v25 = sub_100020110(v97, v98);
        double v26 = *(void (**)(uint64_t, void))(v23 + 8);
        double v27 = v94;
        uint64_t v86 = v25;
        uint64_t v88 = (void (*)(void, void *))v23;
        char v87 = v26;
        v26(v24, v23);
        sub_1000CAC40();
        double v29 = fabs(v28);
        uint64_t v30 = v18;
        uint64_t v31 = (void (*)(unsigned char *, uint64_t))*v18;
        uint64_t v32 = v95;
        v31(v27, v95);
        v31(v13, v32);
        if (v29 <= 1.0)
        {
          uint64_t v35 = v101;
          uint64_t v34 = v102;
          sub_100020110(v100, v101);
          LODWORD(v35) = ((unsigned __int8 (*)(uint64_t, void *))v34[2])(v35, v34);
          uint64_t v37 = v98;
          uint64_t v36 = v99;
          sub_100020110(v97, v98);
          char v33 = v35 < (*(unsigned __int8 (**)(uint64_t, uint64_t))(v36 + 16))(v37, v36);
          Swift::Int v13 = v93;
        }
        else
        {
          Swift::Int v13 = v93;
          v90(v92, v91);
          v87(v24, v88);
          char v33 = sub_1000CAC60();
          v31(v27, v32);
          v31(v13, v32);
        }
        uint64_t v18 = v30;
        sub_1000201A8((uint64_t)v97);
        sub_1000201A8((uint64_t)v100);
        uint64_t v38 = v105;
        unint64_t v39 = (unint64_t)v96;
        if (v33)
        {
          unint64_t v40 = (unint64_t)(v96 + 40);
          if (v105 >= v96 && (unint64_t)v105 < v40 && v105 == v96)
          {
            uint64_t v38 = v96;
          }
          else
          {
            long long v41 = *(_OWORD *)v96;
            long long v42 = *((_OWORD *)v96 + 1);
            *((void *)v105 + 4) = *((void *)v96 + 4);
            *uint64_t v38 = v41;
            v38[1] = v42;
          }
        }
        else
        {
          uint64_t v43 = v104 + 40;
          if (v105 != v104 || v105 >= v43)
          {
            long long v44 = *(_OWORD *)v104;
            long long v45 = *((_OWORD *)v104 + 1);
            *((void *)v105 + 4) = *((void *)v104 + 4);
            *uint64_t v38 = v44;
            v38[1] = v45;
          }
          uint64_t v104 = v43;
          unint64_t v40 = v39;
        }
        uint64_t v105 = (char *)v38 + 40;
        a4 = v104;
        if ((unint64_t)v104 >= v84) {
          break;
        }
        a2 = (char *)v40;
      }
      while (v40 < (unint64_t)v85);
    }
LABEL_47:
    sub_1000275A0((void **)&v105, (const void **)&v104, &v103);
    return 1;
  }
  uint64_t result = sub_1000CC8D0();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SessionAssembler()
{
  return self;
}

void *sub_1000779B8(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v25 = a2;
  uint64_t v4 = sub_10001D64C(&qword_100110948);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Session();
  uint64_t v7 = __chkstk_darwin(v24);
  uint64_t v23 = (uint64_t)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v20 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return _swiftEmptyArrayStorage;
  }
  v20[1] = v2;
  uint64_t v21 = v9;
  Swift::Int v13 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  uint64_t v14 = 0;
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v22 = a1;
  do
  {
    uint64_t v16 = *(void *)(a1 + 8 * v14 + 32);
    swift_bridgeObjectRetain();
    v25(v14, v16);
    swift_bridgeObjectRelease();
    if ((*v13)(v6, 1, v24) == 1)
    {
      sub_1000227A8((uint64_t)v6, &qword_100110948);
    }
    else
    {
      sub_1000781B8((uint64_t)v6, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Session);
      sub_1000781B8((uint64_t)v11, v23, (uint64_t (*)(void))type metadata accessor for Session);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v15 = (void *)sub_100088004(0, v15[2] + 1, 1, (unint64_t)v15);
      }
      unint64_t v18 = v15[2];
      unint64_t v17 = v15[3];
      if (v18 >= v17 >> 1) {
        uint64_t v15 = (void *)sub_100088004(v17 > 1, v18 + 1, 1, (unint64_t)v15);
      }
      v15[2] = v18 + 1;
      sub_1000781B8(v23, (uint64_t)v15+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v18, (uint64_t (*)(void))type metadata accessor for Session);
      a1 = v22;
    }
    ++v14;
  }
  while (v12 != v14);
  swift_bridgeObjectRelease();
  return v15;
}

void *sub_100077C80(void *a1)
{
  uint64_t v2 = type metadata accessor for AppearanceEvent(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = a1;
  swift_bridgeObjectRetain();
  sub_100075E74(v24);
  uint64_t v5 = v24[0][2];
  if (v5)
  {
    v22[1] = v24[0];
    void v22[2] = 0;
    uint64_t v6 = v24[0] + 4;
    swift_retain();
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v8 = _swiftEmptyArrayStorage;
    do
    {
      sub_10003AA3C((uint64_t)v6, (uint64_t)v24);
      sub_10003AA3C((uint64_t)v24, (uint64_t)v23);
      sub_10001D64C(&qword_10010E8C0);
      if (swift_dynamicCast())
      {
        sub_1000780F4((uint64_t)v4, type metadata accessor for AppearanceEvent);
        if (v8[2])
        {
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v7 = sub_10008804C(0, v7[2] + 1, 1, v7);
          }
          unint64_t v10 = v7[2];
          unint64_t v9 = v7[3];
          if (v10 >= v9 >> 1) {
            uint64_t v7 = sub_10008804C((void *)(v9 > 1), v10 + 1, 1, v7);
          }
          uint64_t v7[2] = v10 + 1;
          v7[v10 + 4] = v8;
          swift_bridgeObjectRelease();
          uint64_t v8 = _swiftEmptyArrayStorage;
        }
      }
      sub_10003AA3C((uint64_t)v24, (uint64_t)v23);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_100088038(0, v8[2] + 1, 1, v8);
      }
      unint64_t v12 = v8[2];
      unint64_t v11 = v8[3];
      if (v12 >= v11 >> 1) {
        uint64_t v8 = sub_100088038((void *)(v11 > 1), v12 + 1, 1, v8);
      }
      long long v8[2] = v12 + 1;
      sub_100078088(v23, (uint64_t)&v8[5 * v12 + 4]);
      sub_1000201A8((uint64_t)v24);
      v6 += 5;
      --v5;
    }
    while (v5);
    swift_release();
    if (v8[2]) {
      goto LABEL_16;
    }
LABEL_22:
    swift_release();
    uint64_t v15 = swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  uint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2]) {
    goto LABEL_22;
  }
LABEL_16:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = sub_10008804C(0, v7[2] + 1, 1, v7);
  }
  unint64_t v14 = v7[2];
  unint64_t v13 = v7[3];
  if (v14 >= v13 >> 1) {
    uint64_t v7 = sub_10008804C((void *)(v13 > 1), v14 + 1, 1, v7);
  }
  uint64_t v7[2] = v14 + 1;
  v7[v14 + 4] = v8;
  uint64_t v15 = swift_release();
LABEL_23:
  __chkstk_darwin(v15);
  v22[-2] = v7;
  uint64_t v16 = swift_bridgeObjectRetain();
  unint64_t v17 = sub_1000779B8(v16, (void (*)(uint64_t, uint64_t))sub_1000780A0);
  swift_bridgeObjectRelease_n();
  sub_10001D64C((uint64_t *)&unk_10010E840);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1000D37C0;
  uint64_t v19 = v17[2];
  *(void *)(v18 + 56) = &type metadata for Int;
  *(void *)(v18 + 64) = &protocol witness table for Int;
  *(void *)(v18 + 32) = v19;
  sub_100022644();
  uint64_t v20 = (void *)sub_1000CC630();
  sub_1000CC530();
  sub_1000CB230();
  swift_bridgeObjectRelease();

  return v17;
}

uint64_t sub_100078088(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1000780A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100074D6C(a1, *(void *)(v2 + 16), a2);
}

uint64_t type metadata accessor for Session()
{
  uint64_t result = qword_1001109C8;
  if (!qword_1001109C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000780F4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100078154(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppearanceEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000781B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

char *sub_100078220(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000CACC0();
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v32(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for AppearanceEvent(0);
    a1[v8[5]] = a2[v8[5]];
    a1[v8[6]] = a2[v8[6]];
    a1[v8[7]] = a2[v8[7]];
    uint64_t v9 = a3[6];
    *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
    unint64_t v10 = &a1[v9];
    unint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for EngagementEvent(0);
    uint64_t v13 = *(void *)(v12 - 8);
    unint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    uint64_t v15 = v12;
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v15))
    {
      uint64_t v16 = sub_10001D64C(&qword_10010F348);
      memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
      unint64_t v17 = v32;
    }
    else
    {
      v32(v10, v11, v7);
      uint64_t v30 = v15;
      uint64_t v31 = v10;
      uint64_t v19 = *(int *)(v15 + 20);
      __dst = &v10[v19];
      uint64_t v20 = &v11[v19];
      uint64_t v21 = sub_1000CABE0();
      uint64_t v22 = *(void *)(v21 - 8);
      unint64_t v17 = v32;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = sub_10001D64C(&qword_10010F340);
        memcpy(__dst, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v31, 0, 1, v30);
    }
    uint64_t v24 = a3[7];
    uint64_t v25 = &a1[v24];
    double v26 = &a2[v24];
    v17(&a1[v24], v26, v7);
    uint64_t v27 = type metadata accessor for DisappearanceEvent(0);
    v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
  }
  return a1;
}

uint64_t sub_100078548(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CACC0();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v12(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for EngagementEvent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v12(v5, v4);
    uint64_t v7 = v5 + *(int *)(v6 + 20);
    uint64_t v8 = sub_1000CABE0();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
  }
  uint64_t v10 = a1 + *(int *)(a2 + 28);

  return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v4);
}

uint64_t sub_1000786D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  uint64_t v7 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  double v29 = *v7;
  (*v7)(a1, a2, v6);
  uint64_t v8 = (int *)type metadata accessor for AppearanceEvent(0);
  *(unsigned char *)(a1 + v8[5]) = *(unsigned char *)(a2 + v8[5]);
  *(unsigned char *)(a1 + v8[6]) = *(unsigned char *)(a2 + v8[6]);
  *(unsigned char *)(a1 + v8[7]) = *(unsigned char *)(a2 + v8[7]);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v30 = a3;
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  __dst = (char *)(a1 + v9);
  uint64_t v10 = (char *)(a2 + v9);
  uint64_t v11 = type metadata accessor for EngagementEvent(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    uint64_t v14 = sub_10001D64C(&qword_10010F348);
    memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    uint64_t v15 = v29;
    uint64_t v16 = v6;
  }
  else
  {
    uint64_t v15 = v29;
    v29((uint64_t)__dst, (uint64_t)v10, v6);
    uint64_t v17 = *(int *)(v11 + 20);
    uint64_t v18 = &__dst[v17];
    uint64_t v19 = &v10[v17];
    uint64_t v20 = sub_1000CABE0();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = sub_10001D64C(&qword_10010F340);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    uint64_t v16 = v6;
  }
  uint64_t v23 = *(int *)(v30 + 28);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  v15(a1 + v23, v25, v16);
  uint64_t v26 = type metadata accessor for DisappearanceEvent(0);
  *(unsigned char *)(v24 + *(int *)(v26 + 20)) = *(unsigned char *)(v25 + *(int *)(v26 + 20));
  return a1;
}

uint64_t sub_1000789B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  long long v42 = *(void (**)(uint64_t, uint64_t))(v7 + 24);
  v42(a1, a2);
  uint64_t v8 = (int *)type metadata accessor for AppearanceEvent(0);
  *(unsigned char *)(a1 + v8[5]) = *(unsigned char *)(a2 + v8[5]);
  *(unsigned char *)(a1 + v8[6]) = *(unsigned char *)(a2 + v8[6]);
  *(unsigned char *)(a1 + v8[7]) = *(unsigned char *)(a2 + v8[7]);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = a3;
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = type metadata accessor for EngagementEvent(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      sub_1000780F4((uint64_t)v10, type metadata accessor for EngagementEvent);
      goto LABEL_7;
    }
    uint64_t v17 = v41;
    ((void (*)(char *, char *, uint64_t))v42)(v10, v11, v41);
    uint64_t v26 = *(int *)(v12 + 20);
    uint64_t v27 = &v10[v26];
    double v28 = &v11[v26];
    uint64_t v29 = sub_1000CABE0();
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
    int v32 = v31(v27, 1, v29);
    int v33 = v31(v28, 1, v29);
    if (v32)
    {
      if (!v33)
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
LABEL_16:
        uint64_t v25 = v40;
        goto LABEL_17;
      }
    }
    else
    {
      if (!v33)
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v27, v28, v29);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
    }
    uint64_t v34 = sub_10001D64C(&qword_10010F340);
    memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_16;
  }
  if (!v16)
  {
    uint64_t v17 = v41;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v41);
    uint64_t v18 = *(int *)(v12 + 20);
    uint64_t v19 = &v10[v18];
    uint64_t v20 = &v11[v18];
    uint64_t v21 = sub_1000CABE0();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = sub_10001D64C(&qword_10010F340);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    goto LABEL_16;
  }
LABEL_7:
  uint64_t v24 = sub_10001D64C(&qword_10010F348);
  memcpy(v10, v11, *(void *)(*(void *)(v24 - 8) + 64));
  uint64_t v25 = v40;
  uint64_t v17 = v41;
LABEL_17:
  uint64_t v35 = *(int *)(v25 + 28);
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  ((void (*)(uint64_t, uint64_t, uint64_t))v42)(a1 + v35, v37, v17);
  uint64_t v38 = type metadata accessor for DisappearanceEvent(0);
  *(unsigned char *)(v36 + *(int *)(v38 + 20)) = *(unsigned char *)(v37 + *(int *)(v38 + 20));
  return a1;
}

uint64_t sub_100078E4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000CACC0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = (int *)type metadata accessor for AppearanceEvent(0);
  *(unsigned char *)(a1 + v8[5]) = *(unsigned char *)(a2 + v8[5]);
  *(unsigned char *)(a1 + v8[6]) = *(unsigned char *)(a2 + v8[6]);
  *(unsigned char *)(a1 + v8[7]) = *(unsigned char *)(a2 + v8[7]);
  uint64_t v9 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = type metadata accessor for EngagementEvent(0);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = sub_10001D64C(&qword_10010F348);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v26 = v7;
    v7((uint64_t)v10, (uint64_t)v11, v6);
    uint64_t v15 = *(int *)(v12 + 20);
    uint64_t v25 = &v10[v15];
    int v16 = &v11[v15];
    uint64_t v17 = sub_1000CABE0();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_10001D64C(&qword_10010F340);
      memcpy(v25, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v25, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v25, 0, 1, v17);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    uint64_t v7 = v26;
  }
  uint64_t v20 = a3[7];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  v7(a1 + v20, v22, v6);
  uint64_t v23 = type metadata accessor for DisappearanceEvent(0);
  *(unsigned char *)(v21 + *(int *)(v23 + 20)) = *(unsigned char *)(v22 + *(int *)(v23 + 20));
  return a1;
}

uint64_t sub_100079108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CACC0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  long long v42 = *(void (**)(uint64_t, uint64_t))(v7 + 40);
  v42(a1, a2);
  uint64_t v8 = (int *)type metadata accessor for AppearanceEvent(0);
  *(unsigned char *)(a1 + v8[5]) = *(unsigned char *)(a2 + v8[5]);
  *(unsigned char *)(a1 + v8[6]) = *(unsigned char *)(a2 + v8[6]);
  *(unsigned char *)(a1 + v8[7]) = *(unsigned char *)(a2 + v8[7]);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  uint64_t v40 = a3;
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = type metadata accessor for EngagementEvent(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      sub_1000780F4((uint64_t)v10, type metadata accessor for EngagementEvent);
      goto LABEL_7;
    }
    uint64_t v17 = v41;
    ((void (*)(char *, char *, uint64_t))v42)(v10, v11, v41);
    uint64_t v26 = *(int *)(v12 + 20);
    uint64_t v27 = &v10[v26];
    double v28 = &v11[v26];
    uint64_t v29 = sub_1000CABE0();
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
    int v32 = v31(v27, 1, v29);
    int v33 = v31(v28, 1, v29);
    if (v32)
    {
      if (!v33)
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
LABEL_16:
        uint64_t v25 = v40;
        goto LABEL_17;
      }
    }
    else
    {
      if (!v33)
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v27, v28, v29);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
    }
    uint64_t v34 = sub_10001D64C(&qword_10010F340);
    memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_16;
  }
  if (!v16)
  {
    uint64_t v17 = v41;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v41);
    uint64_t v18 = *(int *)(v12 + 20);
    uint64_t v19 = &v10[v18];
    uint64_t v20 = &v11[v18];
    uint64_t v21 = sub_1000CABE0();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = sub_10001D64C(&qword_10010F340);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    goto LABEL_16;
  }
LABEL_7:
  uint64_t v24 = sub_10001D64C(&qword_10010F348);
  memcpy(v10, v11, *(void *)(*(void *)(v24 - 8) + 64));
  uint64_t v25 = v40;
  uint64_t v17 = v41;
LABEL_17:
  uint64_t v35 = *(int *)(v25 + 28);
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  ((void (*)(uint64_t, uint64_t, uint64_t))v42)(a1 + v35, v37, v17);
  uint64_t v38 = type metadata accessor for DisappearanceEvent(0);
  *(unsigned char *)(v36 + *(int *)(v38 + 20)) = *(unsigned char *)(v37 + *(int *)(v38 + 20));
  return a1;
}

uint64_t sub_10007959C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000795B0);
}

uint64_t sub_1000795B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AppearanceEvent(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_9:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[5]);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v13 = sub_10001D64C(&qword_10010F348);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a2)
    {
      uint64_t v8 = v13;
      uint64_t v10 = a1 + a3[6];
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      goto LABEL_9;
    }
    uint64_t v15 = type metadata accessor for DisappearanceEvent(0);
    int v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[7];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_100079734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100079748);
}

uint64_t sub_100079748(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for AppearanceEvent(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[5]) = (a2 - 1);
    return result;
  }
  uint64_t v13 = sub_10001D64C(&qword_10010F348);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[6];
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = type metadata accessor for DisappearanceEvent(0);
  int v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[7];

  return v16(v18, a2, a2, v17);
}

void sub_1000798CC()
{
  type metadata accessor for AppearanceEvent(319);
  if (v0 <= 0x3F)
  {
    sub_1000799DC();
    if (v1 <= 0x3F)
    {
      type metadata accessor for DisappearanceEvent(319);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1000799DC()
{
  if (!qword_1001109D8)
  {
    type metadata accessor for EngagementEvent(255);
    unint64_t v0 = sub_1000CC640();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001109D8);
    }
  }
}

uint64_t *sub_100079A34(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for NewsTimelineEntry();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    uint64_t v22 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = sub_1000CACC0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(v6 + 20);
    double v63 = a1;
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *(void **)((char *)a2 + v8);
    *uint64_t v9 = v11;
    uint64_t v12 = (int *)type metadata accessor for TodayContent();
    uint64_t v13 = v12[5];
    uint64_t v14 = (void *)((char *)v9 + v13);
    uint64_t v15 = &v10[v13];
    int v16 = (int *)type metadata accessor for Banner();
    uint64_t v17 = (void *)*((void *)v16 - 1);
    uint64_t v18 = (unsigned int (*)(char *, uint64_t, int *))v17[6];
    id v19 = v11;
    if (v18(v15, 1, v16))
    {
      uint64_t v20 = sub_10001D64C(&qword_10010DE20);
      memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v23 = *((void *)v15 + 1);
      *uint64_t v14 = *(void *)v15;
      v14[1] = v23;
      uint64_t v24 = *((void *)v15 + 3);
      uint64_t v61 = v17;
      void v14[2] = *((void *)v15 + 2);
      void v14[3] = v24;
      uint64_t v25 = *((void *)v15 + 5);
      v14[4] = *((void *)v15 + 4);
      v14[5] = v25;
      uint64_t v26 = v16[7];
      __dst = (char *)v14 + v26;
      uint64_t v59 = &v15[v26];
      uint64_t v27 = sub_1000CABE0();
      uint64_t v57 = *(void *)(v27 - 8);
      uint64_t v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v60(v59, 1, v27))
      {
        uint64_t v28 = sub_10001D64C(&qword_10010F340);
        memcpy(__dst, v59, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v57 + 16))(__dst, v59, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(__dst, 0, 1, v27);
      }
      uint64_t v29 = v16[8];
      uint64_t v30 = (void *)((char *)v14 + v29);
      uint64_t v31 = &v15[v29];
      uint64_t v32 = *((void *)v31 + 1);
      *uint64_t v30 = *(void *)v31;
      v30[1] = v32;
      uint64_t v33 = v16[9];
      uint64_t v34 = *(void **)&v15[v33];
      swift_bridgeObjectRetain();
      if (v34 != (void *)1) {
        id v35 = v34;
      }
      *(void *)((char *)v14 + v33) = v34;
      uint64_t v36 = v16[10];
      uint64_t v37 = (char *)v14 + v36;
      uint64_t v38 = &v15[v36];
      unint64_t v39 = *(void **)v38;
      uint64_t v40 = (void *)*((void *)v38 + 1);
      char v41 = v38[16];
      sub_10001DB84(*(void **)v38, v40);
      *(void *)uint64_t v37 = v39;
      *((void *)v37 + 1) = v40;
      v37[16] = v41;
      (*((void (**)(void *, void, uint64_t, int *))v61 + 7))(v14, 0, 1, v16);
    }
    *(void *)((char *)v9 + v12[6]) = *(void *)&v10[v12[6]];
    *(void *)((char *)v9 + v12[7]) = *(void *)&v10[v12[7]];
    *((unsigned char *)v9 + v12[8]) = v10[v12[8]];
    uint64_t v42 = v12[9];
    double v62 = (char *)v9 + v42;
    uint64_t v43 = &v10[v42];
    uint64_t v44 = sub_1000CABE0();
    uint64_t v45 = *(void *)(v44 - 8);
    uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (v46(v43, 1, v44))
    {
      uint64_t v47 = sub_10001D64C(&qword_10010F340);
      memcpy(v62, v43, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v62, v43, v44);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v62, 0, 1, v44);
    }
    *(void *)((char *)v9 + v12[10]) = *(void *)&v10[v12[10]];
    uint64_t v48 = v12[11];
    uint64_t v49 = (void *)((char *)v9 + v48);
    uint64_t v50 = &v10[v48];
    uint64_t v51 = *((void *)v50 + 1);
    void *v49 = *(void *)v50;
    v49[1] = v51;
    uint64_t v52 = v12[12];
    uint64_t v53 = (void *)((char *)v9 + v52);
    uint64_t v54 = &v10[v52];
    uint64_t v55 = *((void *)v54 + 1);
    *uint64_t v53 = *(void *)v54;
    v53[1] = v55;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v63;
  }
  return (uint64_t *)v22;
}

uint64_t sub_100079EDC(uint64_t a1)
{
  uint64_t v2 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = (id *)(a1 + *(int *)(type metadata accessor for NewsTimelineEntry() + 20));

  uint64_t v4 = type metadata accessor for TodayContent();
  int v5 = (char *)v3 + *(int *)(v4 + 20);
  uint64_t v6 = (int *)type metadata accessor for Banner();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v6 - 1) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = &v5[v6[7]];
    uint64_t v8 = sub_1000CABE0();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void **)&v5[v6[9]];
    if (v10 != (void *)1) {

    }
    sub_10001DE30(*(void **)&v5[v6[10]], *(void **)&v5[v6[10] + 8]);
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v11 = (char *)v3 + *(int *)(v4 + 36);
  uint64_t v12 = sub_1000CABE0();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  }
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10007A154(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = *(int *)(type metadata accessor for NewsTimelineEntry() + 20);
  uint64_t v58 = a1;
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = a2 + v5;
  uint64_t v8 = *(void **)(a2 + v5);
  *uint64_t v6 = v8;
  uint64_t v9 = (int *)type metadata accessor for TodayContent();
  uint64_t v10 = v9[5];
  unint64_t v11 = (void *)((char *)v6 + v10);
  uint64_t v12 = (void *)(v7 + v10);
  uint64_t v13 = (int *)type metadata accessor for Banner();
  uint64_t v14 = (void *)*((void *)v13 - 1);
  uint64_t v15 = (unsigned int (*)(void *, uint64_t, int *))v14[6];
  id v16 = v8;
  if (v15(v12, 1, v13))
  {
    uint64_t v17 = sub_10001D64C(&qword_10010DE20);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = v12[1];
    *unint64_t v11 = *v12;
    v11[1] = v18;
    uint64_t v19 = v12[3];
    v11[2] = v12[2];
    v11[3] = v19;
    uint64_t v20 = v12[5];
    void v11[4] = v12[4];
    v11[5] = v20;
    uint64_t v21 = v13[7];
    __dst = (char *)v11 + v21;
    uint64_t v56 = v14;
    uint64_t v53 = (char *)v12 + v21;
    uint64_t v22 = sub_1000CABE0();
    uint64_t v52 = *(void *)(v22 - 8);
    uint64_t v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v54(v53, 1, v22))
    {
      uint64_t v23 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v53, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(__dst, v53, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 1, v22);
    }
    uint64_t v24 = v13[8];
    uint64_t v25 = (void *)((char *)v11 + v24);
    uint64_t v26 = (void *)((char *)v12 + v24);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = v13[9];
    uint64_t v29 = *(void **)((char *)v12 + v28);
    swift_bridgeObjectRetain();
    if (v29 != (void *)1) {
      id v30 = v29;
    }
    *(void *)((char *)v11 + v28) = v29;
    uint64_t v31 = v13[10];
    uint64_t v32 = (char *)v11 + v31;
    uint64_t v33 = (char *)v12 + v31;
    uint64_t v34 = *(void **)v33;
    id v35 = (void *)*((void *)v33 + 1);
    char v36 = v33[16];
    sub_10001DB84(*(void **)v33, v35);
    *(void *)uint64_t v32 = v34;
    *((void *)v32 + 1) = v35;
    v32[16] = v36;
    (*((void (**)(void *, void, uint64_t, int *))v56 + 7))(v11, 0, 1, v13);
  }
  *(void *)((char *)v6 + v9[6]) = *(void *)(v7 + v9[6]);
  *(void *)((char *)v6 + v9[7]) = *(void *)(v7 + v9[7]);
  *((unsigned char *)v6 + v9[8]) = *(unsigned char *)(v7 + v9[8]);
  uint64_t v37 = v9[9];
  uint64_t v57 = (char *)v6 + v37;
  uint64_t v38 = (const void *)(v7 + v37);
  uint64_t v39 = sub_1000CABE0();
  uint64_t v40 = *(void *)(v39 - 8);
  char v41 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  if (v41(v38, 1, v39))
  {
    uint64_t v42 = sub_10001D64C(&qword_10010F340);
    memcpy(v57, v38, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v40 + 16))(v57, v38, v39);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v57, 0, 1, v39);
  }
  *(void *)((char *)v6 + v9[10]) = *(void *)(v7 + v9[10]);
  uint64_t v43 = v9[11];
  uint64_t v44 = (void *)((char *)v6 + v43);
  uint64_t v45 = (void *)(v7 + v43);
  uint64_t v46 = v45[1];
  *uint64_t v44 = *v45;
  v44[1] = v46;
  uint64_t v47 = v9[12];
  uint64_t v48 = (void *)((char *)v6 + v47);
  uint64_t v49 = (void *)(v7 + v47);
  uint64_t v50 = v49[1];
  void *v48 = *v49;
  v48[1] = v50;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v58;
}

uint64_t sub_10007A5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = *(int *)(type metadata accessor for NewsTimelineEntry() + 20);
  uint64_t v83 = a1;
  uint64_t v6 = (void **)(a1 + v5);
  uint64_t v7 = a2 + v5;
  uint64_t v8 = *(void **)(a2 + v5);
  uint64_t v9 = *v6;
  *uint64_t v6 = v8;
  id v10 = v8;

  unint64_t v11 = (int *)type metadata accessor for TodayContent();
  uint64_t v12 = v11[5];
  uint64_t v13 = (void **)((char *)v6 + v12);
  uint64_t v14 = (void *)(v7 + v12);
  uint64_t v15 = (int *)type metadata accessor for Banner();
  uint64_t v16 = *((void *)v15 - 1);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, int *))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      sub_10007D1D0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_7;
    }
    *uint64_t v13 = *v14;
    v13[1] = v14[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v13[2] = v14[2];
    v13[3] = v14[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v13[4] = v14[4];
    v13[5] = v14[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v24 = v15[7];
    uint64_t v25 = (char *)v13 + v24;
    int __dsta = (char *)v14 + v24;
    uint64_t v26 = sub_1000CABE0();
    uint64_t v79 = *(void *)(v26 - 8);
    unsigned __int8 v80 = v25;
    uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v79 + 48);
    LODWORD(v25) = v27(v25, 1, v26);
    int v28 = v27(__dsta, 1, v26);
    if (v25)
    {
      if (v28)
      {
        size_t v29 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        id v30 = v80;
LABEL_17:
        memcpy(v30, __dsta, v29);
        goto LABEL_20;
      }
      (*(void (**)(void *, char *, uint64_t))(v79 + 16))(v80, __dsta, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v79 + 56))(v80, 0, 1, v26);
    }
    else
    {
      if (v28)
      {
        (*(void (**)(void *, uint64_t))(v79 + 8))(v80, v26);
        size_t v29 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        id v30 = v80;
        goto LABEL_17;
      }
      (*(void (**)(void *, char *, uint64_t))(v79 + 24))(v80, __dsta, v26);
    }
LABEL_20:
    uint64_t v43 = v15[8];
    uint64_t v44 = (void *)((char *)v13 + v43);
    uint64_t v45 = (void *)((char *)v14 + v43);
    *uint64_t v44 = *v45;
    v44[1] = v45[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v46 = v15[9];
    uint64_t v47 = (void *)((char *)v13 + v46);
    uint64_t v48 = *(void **)((char *)v13 + v46);
    uint64_t v49 = *(void **)((char *)v14 + v46);
    if (v48 == (void *)1)
    {
      if (v49 != (void *)1)
      {
        *uint64_t v47 = v49;
        id v50 = v49;
LABEL_27:
        uint64_t v52 = v15[10];
        uint64_t v53 = (char *)v13 + v52;
        uint64_t v54 = (char *)v14 + v52;
        uint64_t v55 = *(void **)v54;
        uint64_t v56 = (void *)*((void *)v54 + 1);
        char v57 = v54[16];
        sub_10001DB84(*(void **)v54, v56);
        uint64_t v58 = *(void **)v53;
        uint64_t v59 = (void *)*((void *)v53 + 1);
        *(void *)uint64_t v53 = v55;
        *((void *)v53 + 1) = v56;
        v53[16] = v57;
        sub_10001DE30(v58, v59);
        goto LABEL_28;
      }
    }
    else
    {
      if (v49 != (void *)1)
      {
        *uint64_t v47 = v49;
        id v51 = v49;

        goto LABEL_27;
      }
      sub_10001EA8C((uint64_t)v13 + v46);
      uint64_t v49 = *(void **)((char *)v14 + v46);
    }
    *uint64_t v47 = v49;
    goto LABEL_27;
  }
  if (v19)
  {
LABEL_7:
    uint64_t v23 = sub_10001D64C(&qword_10010DE20);
    memcpy(v13, v14, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_28;
  }
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  v13[2] = v14[2];
  v13[3] = v14[3];
  v13[4] = v14[4];
  v13[5] = v14[5];
  uint64_t v20 = v15[7];
  __dst = (char *)v13 + v20;
  uint64_t v77 = (char *)v14 + v20;
  uint64_t v21 = sub_1000CABE0();
  uint64_t v76 = *(void *)(v21 - 8);
  long long v78 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v78(v77, 1, v21))
  {
    uint64_t v22 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v77, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(__dst, v77, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(__dst, 0, 1, v21);
  }
  uint64_t v31 = v15[8];
  uint64_t v32 = (void *)((char *)v13 + v31);
  uint64_t v33 = (void *)((char *)v14 + v31);
  *uint64_t v32 = *v33;
  v32[1] = v33[1];
  uint64_t v34 = v15[9];
  id v35 = *(void **)((char *)v14 + v34);
  swift_bridgeObjectRetain();
  if (v35 != (void *)1) {
    id v36 = v35;
  }
  *(void *)((char *)v13 + v34) = v35;
  uint64_t v37 = v15[10];
  uint64_t v38 = (char *)v13 + v37;
  uint64_t v39 = (char *)v14 + v37;
  uint64_t v40 = *(void **)v39;
  char v41 = (void *)*((void *)v39 + 1);
  char v42 = v39[16];
  sub_10001DB84(*(void **)v39, v41);
  *(void *)uint64_t v38 = v40;
  *((void *)v38 + 1) = v41;
  v38[16] = v42;
  (*(void (**)(void *, void, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
LABEL_28:
  *(void **)((char *)v6 + v11[6]) = *(void **)(v7 + v11[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void **)((char *)v6 + v11[7]) = *(void **)(v7 + v11[7]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *((unsigned char *)v6 + v11[8]) = *(unsigned char *)(v7 + v11[8]);
  uint64_t v60 = v11[9];
  uint64_t v61 = (char *)v6 + v60;
  double v62 = (char *)(v7 + v60);
  uint64_t v63 = sub_1000CABE0();
  uint64_t v64 = *(void *)(v63 - 8);
  uint64_t v65 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
  int v66 = v65(v61, 1, v63);
  int v67 = v65(v62, 1, v63);
  if (!v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(v64 + 24))(v61, v62, v63);
      goto LABEL_34;
    }
    (*(void (**)(char *, uint64_t))(v64 + 8))(v61, v63);
    goto LABEL_33;
  }
  if (v67)
  {
LABEL_33:
    uint64_t v68 = sub_10001D64C(&qword_10010F340);
    memcpy(v61, v62, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v61, v62, v63);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
LABEL_34:
  *(void **)((char *)v6 + v11[10]) = *(void **)(v7 + v11[10]);
  swift_retain();
  swift_release();
  uint64_t v69 = v11[11];
  uint64_t v70 = (void **)((char *)v6 + v69);
  unint64_t v71 = (void *)(v7 + v69);
  *uint64_t v70 = *v71;
  v70[1] = v71[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v72 = v11[12];
  uint64_t v73 = (void **)((char *)v6 + v72);
  unint64_t v74 = (void *)(v7 + v72);
  *uint64_t v73 = *v74;
  v73[1] = v74[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v83;
}

uint64_t sub_10007AD80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = *(int *)(type metadata accessor for NewsTimelineEntry() + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(void *)(a1 + v5) = *(void *)(a2 + v5);
  uint64_t v8 = (int *)type metadata accessor for TodayContent();
  uint64_t v9 = v8[5];
  id v10 = (_OWORD *)(v6 + v9);
  unint64_t v11 = (_OWORD *)(v7 + v9);
  uint64_t v12 = (int *)type metadata accessor for Banner();
  uint64_t v13 = *((void *)v12 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = sub_10001D64C(&qword_10010DE20);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    long long v15 = v11[1];
    *id v10 = *v11;
    v10[1] = v15;
    void v10[2] = v11[2];
    uint64_t v16 = v12[7];
    uint64_t v31 = a1;
    __dst = (char *)v10 + v16;
    uint64_t v17 = (char *)v11 + v16;
    uint64_t v18 = sub_1000CABE0();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(__dst, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    *(_OWORD *)((char *)v10 + v12[8]) = *(_OWORD *)((char *)v11 + v12[8]);
    *(void *)((char *)v10 + v12[9]) = *(void *)((char *)v11 + v12[9]);
    uint64_t v21 = v12[10];
    uint64_t v22 = (char *)v10 + v21;
    uint64_t v23 = (char *)v11 + v21;
    v22[16] = v23[16];
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    a1 = v31;
  }
  *(void *)(v6 + v8[6]) = *(void *)(v7 + v8[6]);
  *(void *)(v6 + v8[7]) = *(void *)(v7 + v8[7]);
  *(unsigned char *)(v6 + v8[8]) = *(unsigned char *)(v7 + v8[8]);
  uint64_t v24 = v8[9];
  uint64_t v25 = (void *)(v6 + v24);
  uint64_t v26 = (const void *)(v7 + v24);
  uint64_t v27 = sub_1000CABE0();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = sub_10001D64C(&qword_10010F340);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  *(void *)(v6 + v8[10]) = *(void *)(v7 + v8[10]);
  *(_OWORD *)(v6 + v8[11]) = *(_OWORD *)(v7 + v8[11]);
  *(_OWORD *)(v6 + v8[12]) = *(_OWORD *)(v7 + v8[12]);
  return a1;
}

uint64_t sub_10007B130(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = *(int *)(type metadata accessor for NewsTimelineEntry() + 20);
  uint64_t v77 = a1;
  uint64_t v6 = (void **)(a1 + v5);
  uint64_t v7 = a2 + v5;
  uint64_t v8 = *v6;
  *uint64_t v6 = *(void **)(a2 + v5);

  uint64_t v9 = (int *)type metadata accessor for TodayContent();
  uint64_t v10 = v9[5];
  unint64_t v11 = (void **)((char *)v6 + v10);
  uint64_t v12 = (void *)(v7 + v10);
  uint64_t v13 = (int *)type metadata accessor for Banner();
  uint64_t v14 = *((void *)v13 - 1);
  long long v15 = *(uint64_t (**)(void *, uint64_t, int *))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (v17)
    {
      sub_10007D1D0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_7;
    }
    uint64_t v25 = v12[1];
    *unint64_t v11 = *v12;
    v11[1] = v25;
    swift_bridgeObjectRelease();
    uint64_t v26 = v12[3];
    v11[2] = v12[2];
    v11[3] = v26;
    swift_bridgeObjectRelease();
    uint64_t v27 = v12[5];
    void v11[4] = v12[4];
    v11[5] = v27;
    swift_bridgeObjectRelease();
    uint64_t v28 = v13[7];
    uint64_t v29 = (char *)v11 + v28;
    int __dsta = (char *)v12 + v28;
    uint64_t v30 = sub_1000CABE0();
    uint64_t v73 = *(void *)(v30 - 8);
    unint64_t v74 = v29;
    uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 48);
    LODWORD(v29) = v31(v29, 1, v30);
    int v32 = v31(__dsta, 1, v30);
    if (v29)
    {
      if (v32)
      {
        size_t v33 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v34 = v74;
LABEL_15:
        memcpy(v34, __dsta, v33);
        goto LABEL_18;
      }
      (*(void (**)(void *, char *, uint64_t))(v73 + 32))(v74, __dsta, v30);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v73 + 56))(v74, 0, 1, v30);
    }
    else
    {
      if (v32)
      {
        (*(void (**)(void *, uint64_t))(v73 + 8))(v74, v30);
        size_t v33 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v34 = v74;
        goto LABEL_15;
      }
      (*(void (**)(void *, char *, uint64_t))(v73 + 40))(v74, __dsta, v30);
    }
LABEL_18:
    uint64_t v38 = v13[8];
    uint64_t v39 = (void *)((char *)v11 + v38);
    uint64_t v40 = (void *)((char *)v12 + v38);
    uint64_t v42 = *v40;
    uint64_t v41 = v40[1];
    *uint64_t v39 = v42;
    v39[1] = v41;
    swift_bridgeObjectRelease();
    uint64_t v43 = v13[9];
    uint64_t v44 = (void *)((char *)v11 + v43);
    uint64_t v45 = *(void **)((char *)v11 + v43);
    uint64_t v46 = *(void *)((char *)v12 + v43);
    if (v45 != (void *)1)
    {
      if (v46 != 1)
      {
        *uint64_t v44 = v46;

        goto LABEL_23;
      }
      sub_10001EA8C((uint64_t)v11 + v43);
      uint64_t v46 = *(void *)((char *)v12 + v43);
    }
    *uint64_t v44 = v46;
LABEL_23:
    uint64_t v47 = v13[10];
    uint64_t v48 = (char *)v11 + v47;
    uint64_t v49 = (char *)v12 + v47;
    char v50 = v49[16];
    id v51 = *(void **)v48;
    uint64_t v52 = (void *)*((void *)v48 + 1);
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
    v48[16] = v50;
    sub_10001DE30(v51, v52);
    goto LABEL_24;
  }
  if (v17)
  {
LABEL_7:
    uint64_t v24 = sub_10001D64C(&qword_10010DE20);
    memcpy(v11, v12, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_24;
  }
  long long v18 = *((_OWORD *)v12 + 1);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v18;
  *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
  uint64_t v19 = v13[7];
  __dst = (char *)v11 + v19;
  uint64_t v20 = (char *)v12 + v19;
  uint64_t v21 = sub_1000CABE0();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(__dst, v20, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
  }
  *(_OWORD *)((char *)v11 + v13[8]) = *(_OWORD *)((char *)v12 + v13[8]);
  *(void *)((char *)v11 + v13[9]) = *(void *)((char *)v12 + v13[9]);
  uint64_t v35 = v13[10];
  id v36 = (char *)v11 + v35;
  uint64_t v37 = (char *)v12 + v35;
  v36[16] = v37[16];
  *(_OWORD *)id v36 = *(_OWORD *)v37;
  (*(void (**)(void *, void, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
LABEL_24:
  *(void **)((char *)v6 + v9[6]) = *(void **)(v7 + v9[6]);
  swift_bridgeObjectRelease();
  *(void **)((char *)v6 + v9[7]) = *(void **)(v7 + v9[7]);
  swift_unknownObjectRelease();
  *((unsigned char *)v6 + v9[8]) = *(unsigned char *)(v7 + v9[8]);
  uint64_t v53 = v9[9];
  uint64_t v54 = (char *)v6 + v53;
  uint64_t v55 = (char *)(v7 + v53);
  uint64_t v56 = sub_1000CABE0();
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  int v59 = v58(v54, 1, v56);
  int v60 = v58(v55, 1, v56);
  if (!v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 40))(v54, v55, v56);
      goto LABEL_30;
    }
    (*(void (**)(char *, uint64_t))(v57 + 8))(v54, v56);
    goto LABEL_29;
  }
  if (v60)
  {
LABEL_29:
    uint64_t v61 = sub_10001D64C(&qword_10010F340);
    memcpy(v54, v55, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v54, v55, v56);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
LABEL_30:
  *(void **)((char *)v6 + v9[10]) = *(void **)(v7 + v9[10]);
  swift_release();
  uint64_t v62 = v9[11];
  uint64_t v63 = (void **)((char *)v6 + v62);
  uint64_t v64 = (uint64_t *)(v7 + v62);
  uint64_t v66 = *v64;
  uint64_t v65 = v64[1];
  void *v63 = v66;
  v63[1] = v65;
  swift_bridgeObjectRelease();
  uint64_t v67 = v9[12];
  uint64_t v68 = (void **)((char *)v6 + v67);
  uint64_t v69 = (uint64_t *)(v7 + v67);
  uint64_t v71 = *v69;
  uint64_t v70 = v69[1];
  void *v68 = v71;
  v68[1] = v70;
  swift_bridgeObjectRelease();
  return v77;
}

uint64_t sub_10007B7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007B7F8);
}

uint64_t sub_10007B7F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NewsTimelineEntry();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10007B864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007B878);
}

uint64_t sub_10007B878(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NewsTimelineEntry();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ContentView()
{
  uint64_t result = qword_100110A68;
  if (!qword_100110A68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10007B934()
{
  uint64_t result = type metadata accessor for NewsTimelineEntry();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10007B9C0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10007B9DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v125 = a1;
  uint64_t v2 = sub_10001D64C(&qword_10010FE48);
  __chkstk_darwin(v2 - 8);
  uint64_t v112 = (uint64_t *)((char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v114 = type metadata accessor for RegularContentView();
  __chkstk_darwin(v114);
  uint64_t v113 = (uint64_t)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_10001D64C(&qword_100110AA0);
  __chkstk_darwin(v110);
  uint64_t v109 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10001D64C(&qword_10010E8E8);
  __chkstk_darwin(v6 - 8);
  uint64_t v100 = (uint64_t *)((char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for LayoutContext();
  __chkstk_darwin(v8);
  uint64_t v116 = (uint64_t)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TodayContent();
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v115 = (uint64_t)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for SmallContentView(0);
  __chkstk_darwin(v104);
  Swift::Int v102 = (uint64_t *)((char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v103 = sub_10001D64C(&qword_100110AA8);
  __chkstk_darwin(v103);
  uint64_t v101 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000CB3C0();
  uint64_t v121 = *(void *)(v15 - 8);
  uint64_t v122 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v108 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v99 = (char *)&v98 - v19;
  __chkstk_darwin(v18);
  uint64_t v120 = (char *)&v98 - v20;
  uint64_t v119 = type metadata accessor for RectangularContentView(0);
  __chkstk_darwin(v119);
  uint64_t v118 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_10001D64C(&qword_100110AB0);
  __chkstk_darwin(v106);
  uint64_t v105 = (char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10001D64C(&qword_10010F610);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v111 = (uint64_t)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  char v126 = (uint64_t (*)())((char *)&v98 - v26);
  uint64_t v27 = type metadata accessor for Item(0);
  uint64_t v123 = *(void *)(v27 - 8);
  uint64_t v124 = v27;
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v98 = (uint64_t)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v107 = (uint64_t)&v98 - v31;
  __chkstk_darwin(v30);
  uint64_t v117 = (char *)&v98 - v32;
  uint64_t v33 = sub_1000CBEC0();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  id v36 = (char *)&v98 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for NewsTimelineEntry();
  uint64_t v38 = *(int *)(v11 + 48);
  uint64_t v128 = v1 + *(int *)(v37 + 20);
  uint64_t v129 = v38;
  uint64_t v127 = v8;
  uint64_t v39 = *(void (**)(char *, void, uint64_t))(v34 + 104);
  v39(v36, enum case for InternalWidgetFamily.accessoryRectangular(_:), v33);
  sub_10007D230((unint64_t *)&qword_100110060, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
  sub_1000CC360();
  sub_1000CC360();
  uint64_t v40 = v130;
  uint64_t v41 = v132;
  uint64_t v42 = *(void (**)(char *, uint64_t))(v34 + 8);
  v42(v36, v33);
  if (v40 == v41)
  {
    uint64_t v44 = (uint64_t)v117;
    uint64_t v43 = (uint64_t)v118;
    uint64_t v45 = v119;
    uint64_t v46 = v120;
    uint64_t v47 = v128;
    uint64_t v48 = v129;
    uint64_t v49 = v126;
    uint64_t v50 = v127;
    sub_10007C9F8((uint64_t)v126);
    if ((*(unsigned int (**)(uint64_t (*)(), uint64_t, uint64_t))(v123 + 48))(v49, 1, v124) == 1)
    {
      id v51 = (uint64_t (*)(void))v126;
LABEL_7:
      sub_10007D038((uint64_t)v51);
      uint64_t result = sub_1000CBC70();
      uint64_t v59 = result;
      int v60 = v125;
      goto LABEL_21;
    }
    sub_10007D098((uint64_t)v126, v44, type metadata accessor for Item);
    uint64_t v61 = v43;
    sub_10007D100(v44, v43, type metadata accessor for Item);
    uint64_t v62 = (int *)v45;
    sub_10007D100(v47, v43 + *(int *)(v45 + 20), (uint64_t (*)(void))type metadata accessor for TodayContent);
    uint64_t v63 = *(void *)(v47 + v48) + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext;
    sub_10007D100(v63, v43 + *(int *)(v45 + 24), (uint64_t (*)(void))type metadata accessor for LayoutContext);
    if (*(unsigned char *)(v63 + *(int *)(v50 + 44)) == 1)
    {
      uint64_t v64 = v46;
      sub_1000CB3B0();
      int v60 = v125;
      uint64_t v65 = v122;
    }
    else
    {
      uint64_t v130 = (int *)_swiftEmptyArrayStorage;
      sub_10007D230(&qword_10010E9C0, (void (*)(uint64_t))&type metadata accessor for RedactionReasons);
      sub_10001D64C(&qword_10010E9C8);
      sub_10007CFDC();
      uint64_t v64 = v46;
      uint64_t v65 = v122;
      sub_1000CC6D0();
      uint64_t v61 = v43;
      int v60 = v125;
    }
    uint64_t v92 = v121;
    uint64_t v93 = sub_10007D230(&qword_100110AC8, (void (*)(uint64_t))type metadata accessor for RectangularContentView);
    sub_1000CBAE0();
    (*(void (**)(char *, uint64_t))(v92 + 8))(v64, v65);
    sub_10007D1D0(v61, type metadata accessor for RectangularContentView);
    uint64_t v130 = v62;
    uint64_t v131 = v93;
    swift_getOpaqueTypeConformance2();
    uint64_t v59 = sub_1000CBC70();
    uint64_t v94 = v44;
    goto LABEL_20;
  }
  uint64_t v52 = v127;
  v39(v36, enum case for InternalWidgetFamily.systemSmall(_:), v33);
  sub_1000CC360();
  sub_1000CC360();
  uint64_t v53 = v130;
  uint64_t v54 = v132;
  v42(v36, v33);
  if (v53 == v54)
  {
    uint64_t v55 = v128;
    uint64_t v56 = v129;
    uint64_t v57 = v111;
    sub_10007C9F8(v111);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48))(v57, 1, v124) == 1)
    {
      id v51 = (uint64_t (*)(void))v57;
      goto LABEL_7;
    }
    uint64_t v78 = v57;
    uint64_t v79 = v107;
    sub_10007D098(v78, v107, type metadata accessor for Item);
    uint64_t v80 = v98;
    sub_10007D100(v79, v98, type metadata accessor for Item);
    char v126 = type metadata accessor for TodayContent;
    uint64_t v81 = v55;
    uint64_t v82 = v115;
    sub_10007D100(v55, v115, (uint64_t (*)(void))type metadata accessor for TodayContent);
    uint64_t v83 = v116;
    sub_10007D100(*(void *)(v55 + v56) + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext, v116, (uint64_t (*)(void))type metadata accessor for LayoutContext);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v85 = swift_getKeyPath();
    uint64_t v86 = (uint64_t)v100;
    *uint64_t v100 = v85;
    sub_10001D64C(&qword_10010E8E0);
    swift_storeEnumTagMultiPayload();
    uint64_t v87 = (uint64_t)v102;
    *Swift::Int v102 = KeyPath;
    *(unsigned char *)(v87 + 8) = 0;
    *(void *)(v87 + 16) = swift_getKeyPath();
    *(void *)(v87 + 24) = 0;
    *(void *)(v87 + 32) = 0;
    *(void *)(v87 + 40) = 0;
    *(unsigned char *)(v87 + 48) = 0;
    uint64_t v88 = (int *)v104;
    sub_1000365A0(v86, v87 + *(int *)(v104 + 24), &qword_10010E8E8);
    sub_10007D098(v80, v87 + v88[7], type metadata accessor for Item);
    sub_10007D098(v82, v87 + v88[8], (uint64_t (*)(void))v126);
    sub_10007D098(v83, v87 + v88[9], (uint64_t (*)(void))type metadata accessor for LayoutContext);
    int v60 = v125;
    uint64_t v90 = v121;
    uint64_t v89 = v122;
    uint64_t v91 = v99;
    if (*(unsigned char *)(*(void *)(v81 + v129)
                  + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext
                  + *(int *)(v127 + 44)) == 1)
    {
      sub_1000CB3B0();
    }
    else
    {
      uint64_t v130 = (int *)_swiftEmptyArrayStorage;
      sub_10007D230(&qword_10010E9C0, (void (*)(uint64_t))&type metadata accessor for RedactionReasons);
      sub_10001D64C(&qword_10010E9C8);
      sub_10007CFDC();
      sub_1000CC6D0();
    }
    uint64_t v97 = sub_10007D230(&qword_100110AC0, (void (*)(uint64_t))type metadata accessor for SmallContentView);
    sub_1000CBAE0();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v89);
    sub_10007D1D0(v87, type metadata accessor for SmallContentView);
    uint64_t v130 = v88;
    uint64_t v131 = v97;
    swift_getOpaqueTypeConformance2();
    uint64_t v59 = sub_1000CBC70();
    uint64_t v94 = v107;
LABEL_20:
    uint64_t result = sub_10007D1D0(v94, type metadata accessor for Item);
    goto LABEL_21;
  }
  uint64_t v66 = v128;
  uint64_t v67 = v115;
  sub_10007D100(v128, v115, (uint64_t (*)(void))type metadata accessor for TodayContent);
  uint64_t v68 = v129;
  uint64_t v69 = v116;
  sub_10007D100(*(void *)(v66 + v129) + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext, v116, (uint64_t (*)(void))type metadata accessor for LayoutContext);
  uint64_t v70 = swift_getKeyPath();
  uint64_t v71 = (uint64_t)v112;
  *uint64_t v112 = v70;
  sub_10001D64C(&qword_10010FE40);
  swift_storeEnumTagMultiPayload();
  uint64_t v72 = swift_getKeyPath();
  uint64_t v73 = v113;
  sub_1000365A0(v71, v113, &qword_10010FE48);
  uint64_t v74 = v114;
  uint64_t v75 = v73 + *(int *)(v114 + 20);
  *(void *)uint64_t v75 = v72;
  *(void *)(v75 + 8) = 0;
  *(void *)(v75 + 16) = 0;
  *(void *)(v75 + 24) = 0;
  *(unsigned char *)(v75 + 32) = 0;
  sub_10007D098(v67, v73 + *(int *)(v74 + 24), (uint64_t (*)(void))type metadata accessor for TodayContent);
  sub_10007D098(v69, v73 + *(int *)(v74 + 28), (uint64_t (*)(void))type metadata accessor for LayoutContext);
  if (*(unsigned char *)(*(void *)(v66 + v68)
                + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext
                + *(int *)(v52 + 44)) == 1)
  {
    uint64_t v76 = v108;
    sub_1000CB3B0();
    int v60 = v125;
    uint64_t v77 = v122;
  }
  else
  {
    uint64_t v130 = (int *)_swiftEmptyArrayStorage;
    sub_10007D230(&qword_10010E9C0, (void (*)(uint64_t))&type metadata accessor for RedactionReasons);
    sub_10001D64C(&qword_10010E9C8);
    sub_10007CFDC();
    uint64_t v76 = v108;
    uint64_t v77 = v122;
    sub_1000CC6D0();
    int v60 = v125;
  }
  uint64_t v95 = v121;
  uint64_t v96 = sub_10007D230(&qword_100110AB8, (void (*)(uint64_t))type metadata accessor for RegularContentView);
  sub_1000CBAE0();
  (*(void (**)(char *, uint64_t))(v95 + 8))(v76, v77);
  sub_10007D1D0(v73, (uint64_t (*)(void))type metadata accessor for RegularContentView);
  uint64_t v130 = (int *)v74;
  uint64_t v131 = v96;
  swift_getOpaqueTypeConformance2();
  uint64_t result = sub_1000CBC70();
  uint64_t v59 = result;
LABEL_21:
  *int v60 = v59;
  return result;
}

uint64_t sub_10007C9F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Item(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = sub_10001D64C(&qword_10010F610);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NewsTimelineEntry();
  uint64_t v12 = sub_1000834FC();
  if (v12[2])
  {
    sub_10007D100((uint64_t)v12 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), (uint64_t)v11, type metadata accessor for Item);
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v13(v11, 0, 1, v2);
  }
  else
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v13(v11, 1, 1, v2);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
  {
    uint64_t v14 = a1;
    uint64_t v15 = 1;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v14, v15, 1, v2);
  }
  sub_10007D098((uint64_t)v11, (uint64_t)v8, type metadata accessor for Item);
  sub_10007D100((uint64_t)v8, (uint64_t)v6, type metadata accessor for Item);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    sub_10007D098((uint64_t)v8, a1, type metadata accessor for Item);
    uint64_t v14 = a1;
    uint64_t v15 = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v14, v15, 1, v2);
  }
  sub_10007D098((uint64_t)v8, a1, type metadata accessor for Item);
  v13((char *)a1, 0, 1, v2);
  return sub_10007D1D0((uint64_t)v6, type metadata accessor for Item);
}

uint64_t sub_10007CCCC()
{
  sub_1000CB550();
  sub_10007D230(qword_100110AD0, (void (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey);
  sub_1000CB5D0();
  return v1;
}

uint64_t sub_10007CD48@<X0>(unsigned char *a1@<X8>)
{
  sub_1000CB550();
  sub_10007D230(qword_100110AD0, (void (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey);
  uint64_t result = sub_1000CB5D0();
  *a1 = v3;
  return result;
}

uint64_t sub_10007CDD8()
{
  return sub_1000CB570();
}

uint64_t sub_10007CDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007CE9C(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_10007CE28()
{
  return sub_1000CB400();
}

uint64_t sub_10007CE4C()
{
  return sub_1000CB400();
}

uint64_t sub_10007CE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007CE9C(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_10007CE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t (*a6)(char *))
{
  a5(0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_10007CF6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007CE9C(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_10007CFAC@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1000CB580();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

unint64_t sub_10007CFDC()
{
  unint64_t result = qword_10010E9D0;
  if (!qword_10010E9D0)
  {
    sub_10001D690(&qword_10010E9C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010E9D0);
  }
  return result;
}

uint64_t sub_10007D038(uint64_t a1)
{
  uint64_t v2 = sub_10001D64C(&qword_10010F610);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10007D098(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007D100(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007D16C()
{
  return sub_1000CB570();
}

uint64_t sub_10007D190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007CE9C(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_10007D1D0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10007D230(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10007D278()
{
  return &protocol witness table for AnyView;
}

uint64_t type metadata accessor for LazyIntentTimelineProvider()
{
  return sub_1000506F4();
}

uint64_t sub_10007D29C(uint64_t a1, uint64_t a2)
{
  return _swift_getAssociatedConformanceWitness(*(void *)(a2 + 24), *(void *)(a2 + 16), a1, &protocol requirements base descriptor for IntentTimelineProvider, &associated conformance descriptor for IntentTimelineProvider.IntentTimelineProvider.Entry: TimelineEntry);
}

uint64_t sub_10007D2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CAFC0();
  sub_1000CC020();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a3);
}

uint64_t sub_10007D3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v15 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  uint64_t v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CAFC0();
  a8(a1, a2, a3, a4, a6, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, a6);
}

uint64_t sub_10007D4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CAFC0();
  uint64_t v6 = sub_1000CC030();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a2);
  return v6;
}

uint64_t sub_10007D598(uint64_t a1)
{
  return sub_10007D4B8(*v1, *(void *)(a1 + 16));
}

uint64_t sub_10007D5A8(uint64_t a1, uint64_t a2)
{
  return sub_10007D2B8(a1, *v2, *(void *)(a2 + 16));
}

uint64_t sub_10007D5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10007D3A8(a1, a2, a3, a4, *v5, *(void *)(a5 + 16), *(void *)(a5 + 24), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of IntentTimelineProvider.getSnapshot(for:in:completion:));
}

uint64_t sub_10007D5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10007D3A8(a1, a2, a3, a4, *v5, *(void *)(a5 + 16), *(void *)(a5 + 24), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of IntentTimelineProvider.getTimeline(for:in:completion:));
}

uint64_t sub_10007D628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10007D6DC;
  return IntentTimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_10007D6DC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  unsigned __int8 v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10007D7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10007D884;
  return IntentTimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_10007D888(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_10007D894@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v69 = a3;
  uint64_t v7 = sub_1000CBE30();
  uint64_t v76 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [objc_allocWithZone((Class)FCMapTable) init];
  unint64_t v84 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v68 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_44;
  }
  uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    id v77 = v10;
    unint64_t v78 = a1;
    uint64_t v71 = a4;
    uint64_t v75 = v7;
    uint64_t v80 = a2;
    if (v11)
    {
      if (v11 < 1)
      {
        __break(1u);
LABEL_49:
        sub_1000CCA60();
        __break(1u);
        goto LABEL_50;
      }
      uint64_t v79 = isUniquelyReferenced_nonNull_native;
      uint64_t v12 = 0;
      uint64_t v13 = a2 + OBJC_IVAR____TtC7NewsTag28WidgetPersonalizationService_cachedScoreProfiles;
      unint64_t v14 = a1 & 0xC000000000000001;
      do
      {
        if (v14)
        {
          uint64_t v18 = (void *)sub_1000CC780();
        }
        else
        {
          uint64_t v18 = *(void **)(a1 + 8 * v12 + 32);
          swift_unknownObjectRetain();
        }
        id v19 = [v18 itemID];
        uint64_t v20 = sub_1000CC1F0();
        uint64_t v22 = v21;

        swift_beginAccess();
        uint64_t v23 = *(void *)v13;
        if (*(void *)(*(void *)v13 + 16) && (unint64_t v24 = sub_10003CED0(v20, v22), (v25 & 1) != 0))
        {
          uint64_t v15 = *(void **)(*(void *)(v23 + 56) + 8 * v24);
          swift_endAccess();
          id v16 = v15;
          swift_bridgeObjectRelease();
          id v17 = v16;
          [v77 setObject:v17 forKey:v18];
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_endAccess();
          swift_unknownObjectRetain();
          sub_1000CC390();
          if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_1000CC400();
          }
          sub_1000CC430();
          sub_1000CC3D0();
        }
        ++v12;
        swift_unknownObjectRelease();
        a1 = v78;
      }
      while (v11 != v12);
      swift_bridgeObjectRelease();
      unint64_t v26 = v84;
      id v10 = v77;
      uint64_t v7 = v75;
      uint64_t isUniquelyReferenced_nonNull_native = v79;
      a2 = v80;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v26 = (unint64_t)_swiftEmptyArrayStorage;
    }
    sub_10001D64C((uint64_t *)&unk_10010E840);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1000D37D0;
    uint64_t v82 = 0;
    unint64_t v83 = 0xE000000000000000;
    uint64_t v28 = a2;
    uint64_t v81 = (void *)a2;
    sub_1000CC820();
    uint64_t v29 = (uint64_t)v82;
    unint64_t v30 = v83;
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = sub_1000225F0();
    *(void *)(v27 + 32) = v29;
    *(void *)(v27 + 40) = v30;
    id v31 = [v10 count];
    *(void *)(v27 + 96) = &type metadata for UInt;
    *(void *)(v27 + 104) = &protocol witness table for UInt;
    *(void *)(v27 + 72) = v31;
    if (v26 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_1000CC890();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v32 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    *(void *)(v27 + 136) = &type metadata for Int;
    *(void *)(v27 + 144) = &protocol witness table for Int;
    *(void *)(v27 + 112) = v32;
    sub_100036814(0, (unint64_t *)&qword_100110C20);
    uint64_t v33 = (void *)sub_1000CC630();
    sub_1000CC530();
    sub_1000CB230();
    swift_bridgeObjectRelease();

    if (v84 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v66 = sub_1000CC890();
      swift_bridgeObjectRelease();
      if (!v66) {
        goto LABEL_37;
      }
    }
    else if (!*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_37;
    }
    uint64_t v82 = *(void **)(v28 + OBJC_IVAR____TtC7NewsTag28WidgetPersonalizationService_scoringService);
    uint64_t v34 = v82;
    sub_1000CB1B0();
    id v35 = v34;
    swift_bridgeObjectRetain();
    uint64_t v36 = sub_1000CB130();

    swift_bridgeObjectRelease();
    uint64_t v37 = *(void *)(v36 + 16);
    if (!v37) {
      break;
    }
    uint64_t v38 = (void *)(v80 + OBJC_IVAR____TtC7NewsTag28WidgetPersonalizationService_cachedScoreProfiles);
    uint64_t v74 = *(void (**)(uint64_t))(v76 + 16);
    unint64_t v39 = (*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
    uint64_t v67 = v36;
    unint64_t v40 = v36 + v39;
    v76 += 16;
    uint64_t v72 = *(void *)(v76 + 56);
    uint64_t v73 = (void (**)(unint64_t, uint64_t))(v76 - 8);
    while (1)
    {
      uint64_t v79 = v40;
      uint64_t v80 = v37;
      v74(isUniquelyReferenced_nonNull_native);
      a2 = sub_1000CBE00();
      id v10 = v45;
      a1 = isUniquelyReferenced_nonNull_native;
      uint64_t v46 = sub_1000CBE10();
      swift_beginAccess();
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v81 = (void *)*v38;
      a4 = v81;
      uint64_t v47 = v38;
      *uint64_t v38 = 0x8000000000000000;
      unint64_t v49 = sub_10003CED0(a2, (uint64_t)v10);
      uint64_t v50 = a4[2];
      BOOL v51 = (v48 & 1) == 0;
      uint64_t v52 = v50 + v51;
      if (__OFADD__(v50, v51)) {
        break;
      }
      uint64_t v7 = v48;
      if (a4[3] >= v52)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100094458();
        }
      }
      else
      {
        sub_100092D00(v52, isUniquelyReferenced_nonNull_native);
        unint64_t v53 = sub_10003CED0(a2, (uint64_t)v10);
        if ((v7 & 1) != (v54 & 1)) {
          goto LABEL_49;
        }
        unint64_t v49 = v53;
      }
      uint64_t isUniquelyReferenced_nonNull_native = a1;
      a4 = v81;
      if (v7)
      {
        uint64_t v41 = v81[7];
        uint64_t v42 = 8 * v49;

        *(void *)(v41 + v42) = v46;
      }
      else
      {
        v81[(v49 >> 6) + 8] |= 1 << v49;
        uint64_t v55 = (uint64_t *)(a4[6] + 16 * v49);
        *uint64_t v55 = a2;
        v55[1] = (uint64_t)v10;
        *(void *)(a4[7] + 8 * v49) = v46;
        uint64_t v56 = a4[2];
        BOOL v57 = __OFADD__(v56, 1);
        uint64_t v58 = v56 + 1;
        if (v57) {
          goto LABEL_43;
        }
        a4[2] = v58;
        swift_bridgeObjectRetain();
      }
      uint64_t v38 = v47;
      *uint64_t v47 = a4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v43 = (void *)sub_1000CBE10();
      uint64_t v44 = sub_1000CBE20();
      id v10 = v77;
      [v77 setObject:v43 forKey:v44];

      swift_unknownObjectRelease();
      uint64_t v7 = v75;
      (*v73)(a1, v75);
      unint64_t v40 = v79 + v72;
      uint64_t v37 = v80 - 1;
      if (v80 == 1)
      {
        swift_bridgeObjectRelease();
        a1 = v78;
        goto LABEL_37;
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1000CC890();
  }
  swift_bridgeObjectRelease();
LABEL_37:
  swift_getKeyPath();
  if (v68)
  {
    swift_bridgeObjectRetain();
    id v61 = v10;
    swift_retain();
    uint64_t v59 = (uint64_t)sub_1000AB100(a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v59 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    id v60 = v10;
    swift_retain();
  }
  uint64_t v82 = (void *)v59;
  uint64_t v62 = v70;
  sub_10007FBB4((uint64_t *)&v82, v10);
  if (!v62)
  {

    swift_release();
    swift_bridgeObjectRelease();
    id v63 = [objc_allocWithZone((Class)FCFeedPersonalizedItems) init];
    sub_10001D64C(&qword_10010F3F0);
    Class isa = sub_1000CC3A0().super.isa;
    swift_release();
    [v63 setSortedItems:isa];

    [v63 setScoreProfiles:v10];
    uint64_t result = swift_release();
    *uint64_t v71 = v63;
    return result;
  }
LABEL_50:

  swift_release();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for WidgetPersonalizationService()
{
  return self;
}

id sub_10007E614(void *a1, uint64_t a2)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v14 = sub_1000CC580();
  uint64_t v3 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000CC570();
  __chkstk_darwin(v6);
  uint64_t v7 = sub_1000CBD90();
  __chkstk_darwin(v7 - 8);
  *(void *)&v2[OBJC_IVAR____TtC7NewsTag28WidgetPersonalizationService_cachedScoreProfiles] = &_swiftEmptyDictionarySingleton;
  uint64_t v13 = OBJC_IVAR____TtC7NewsTag28WidgetPersonalizationService_cacheAccessQueue;
  sub_100036814(0, &qword_10010EF98);
  uint64_t v8 = v2;
  sub_1000CBD70();
  id v19 = _swiftEmptyArrayStorage;
  sub_100039D8C();
  sub_10001D64C(&qword_10010EFA8);
  sub_100039DE4();
  sub_1000CC6D0();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v14);
  *(void *)&v2[v13] = sub_1000CC5C0();
  uint64_t v9 = v15;
  uint64_t v10 = v16;
  *(void *)&v8[OBJC_IVAR____TtC7NewsTag28WidgetPersonalizationService_scoringService] = v15;
  *(void *)&v8[OBJC_IVAR____TtC7NewsTag28WidgetPersonalizationService_configurationSet] = v10;
  id v11 = v9;

  v18.receiver = v8;
  v18.super_class = ObjectType;
  return [super init];
}

uint64_t sub_10007E89C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007E8D4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

id sub_10007E8E4(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1000CC890();
    a1 = swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    id v1 = [objc_allocWithZone((Class)FCFeedPersonalizedItems) init];
    sub_10001D64C(&qword_10010F3F0);
    Class isa = sub_1000CC3A0().super.isa;
    [v1 setSortedItems:isa];

    id v4 = [objc_allocWithZone((Class)FCMapTable) init];
    [v1 setScoreProfiles:v4];

    return v1;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_3:
  __chkstk_darwin(a1);
  sub_100036814(0, &qword_100110C18);
  sub_1000CC5A0();
  return (id)v6;
}

uint64_t sub_10007EA70@<X0>(void *a1@<X8>)
{
  return sub_10007D894(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

const char *sub_10007EA90()
{
  return "sortingScore";
}

id sub_10007EA9C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 sortingScore];
  *a2 = v4;
  return result;
}

uint64_t sub_10007EAD0(char *a1, char *__src, unint64_t a3, char *__dst, void *a5)
{
  uint64_t v6 = __src;
  uint64_t v7 = __src - a1;
  uint64_t v8 = __src - a1 + 7;
  if (__src - a1 >= 0) {
    uint64_t v8 = __src - a1;
  }
  uint64_t v9 = v8 >> 3;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v50 = a1;
  unint64_t v49 = __dst;
  if (v9 >= v12 >> 3)
  {
    if (v11 < -7) {
      goto LABEL_54;
    }
    if (__dst != __src || &__src[8 * v13] <= __dst) {
      memmove(__dst, __src, 8 * v13);
    }
    uint64_t v43 = __dst;
    uint64_t v27 = &__dst[8 * v13];
    uint64_t v48 = v27;
    uint64_t v50 = v6;
    if (a1 >= v6 || v11 < 8)
    {
LABEL_53:
      sub_10002766C((void **)&v50, (const void **)&v49, &v48);
      return 1;
    }
    uint64_t v28 = (char *)(a3 - 8);
    uint64_t v29 = &selRef_components_fromDate_;
    unint64_t v30 = v6;
    while (1)
    {
      uint64_t v45 = v27;
      id v31 = v27 - 8;
      uint64_t v32 = *((void *)v27 - 1);
      uint64_t v34 = *((void *)v30 - 1);
      v30 -= 8;
      uint64_t v33 = v34;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      id v35 = [a5 v29[168] v32];
      if (v35)
      {
        uint64_t v36 = v35;
        swift_getAtKeyPath();

        double v37 = v47;
      }
      else
      {
        double v37 = 0.0;
      }
      uint64_t v38 = v28 + 8;
      unint64_t v39 = v29;
      id v40 = [a5 v29[168] v33];
      if (v40)
      {
        uint64_t v41 = v40;
        swift_getAtKeyPath();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        if (v47 >= v37) {
          goto LABEL_46;
        }
      }
      else
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (v37 <= 0.0)
        {
LABEL_46:
          uint64_t v48 = v31;
          uint64_t v29 = v39;
          if (v38 < v45 || v28 >= v45 || v38 != v45) {
            *(void *)uint64_t v28 = *(void *)v31;
          }
          unint64_t v30 = v6;
          uint64_t v27 = v31;
          goto LABEL_51;
        }
      }
      uint64_t v29 = v39;
      uint64_t v27 = v45;
      if (v38 != v6 || v28 >= v6) {
        *(void *)uint64_t v28 = *(void *)v30;
      }
      uint64_t v50 = v30;
LABEL_51:
      if (v30 > a1)
      {
        v28 -= 8;
        uint64_t v6 = v30;
        if (v27 > v43) {
          continue;
        }
      }
      goto LABEL_53;
    }
  }
  if (v7 >= -7)
  {
    if (__dst != a1 || &a1[8 * v9] <= __dst) {
      memmove(__dst, a1, 8 * v9);
    }
    uint64_t v14 = &__dst[8 * v9];
    uint64_t v48 = v14;
    if ((unint64_t)v6 < a3 && v7 >= 8)
    {
      uint64_t v15 = __dst;
      unint64_t v16 = a3;
      id v17 = v15;
      objc_super v18 = a1;
      while (1)
      {
        uint64_t v19 = *(void *)v6;
        uint64_t v20 = *(void *)v17;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        id v21 = [a5 objectForKey:v19];
        if (v21)
        {
          uint64_t v22 = v21;
          swift_getAtKeyPath();

          double v23 = v47;
        }
        else
        {
          double v23 = 0.0;
        }
        id v24 = [a5 objectForKey:v20];
        if (v24)
        {
          char v25 = v24;
          swift_getAtKeyPath();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();

          if (v47 >= v23) {
            goto LABEL_23;
          }
        }
        else
        {
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          if (v23 <= 0.0)
          {
LABEL_23:
            if (v18 != v17) {
              *(void *)objc_super v18 = *(void *)v17;
            }
            v17 += 8;
            unint64_t v49 = v17;
            unint64_t v26 = v6;
            goto LABEL_26;
          }
        }
        unint64_t v26 = v6 + 8;
        if (v18 < v6 || v18 >= v26 || v18 != v6) {
          *(void *)objc_super v18 = *(void *)v6;
        }
LABEL_26:
        v18 += 8;
        if (v17 < v14)
        {
          uint64_t v6 = v26;
          if ((unint64_t)v26 < v16) {
            continue;
          }
        }
        uint64_t v50 = v18;
        goto LABEL_53;
      }
    }
    goto LABEL_53;
  }
LABEL_54:
  swift_release();

  uint64_t result = sub_1000CC8D0();
  __break(1u);
  return result;
}

void sub_10007EF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    uint64_t v7 = *a4;
    uint64_t v8 = (uint64_t *)(*a4 + 8 * a3 - 8);
LABEL_5:
    uint64_t v9 = *(void *)(v7 + 8 * v6);
    uint64_t v10 = a1;
    uint64_t v20 = v8;
    while (1)
    {
      uint64_t v11 = *v8;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      id v12 = [a5 objectForKey:v9];
      if (v12)
      {
        uint64_t v13 = v12;
        swift_getAtKeyPath();

        double v14 = v21;
      }
      else
      {
        double v14 = 0.0;
      }
      id v15 = [a5 objectForKey:v11];
      if (v15)
      {
        unint64_t v16 = v15;
        swift_getAtKeyPath();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        if (v21 >= v14) {
          goto LABEL_4;
        }
      }
      else
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (v14 <= 0.0) {
          goto LABEL_4;
        }
      }
      if (!v7) {
        break;
      }
      uint64_t v17 = *v8;
      uint64_t v9 = v8[1];
      *uint64_t v8 = v9;
      v8[1] = v17;
      --v8;
      if (v6 == ++v10)
      {
LABEL_4:
        ++v6;
        uint64_t v8 = v20 + 1;
        if (v6 == a2) {
          return;
        }
        goto LABEL_5;
      }
    }
    __break(1u);
  }
}

uint64_t sub_10007F0A0(uint64_t *a1, void *a2)
{
  uint64_t v3 = v2;
  Swift::Int v5 = a1[1];
  id v6 = a2;
  swift_retain_n();
  id v137 = v6;
  Swift::Int v7 = sub_1000CCA10(v5);
  if (v7 >= v5)
  {
    if (v5 < 0) {
      goto LABEL_152;
    }
    if (v5)
    {
      id v11 = v137;
      swift_retain();
      sub_10007EF10(0, v5, 1, a1, v11);

      swift_release_n();
    }
    else
    {
      swift_release_n();
    }
    return swift_release();
  }
  if (v5 >= 0) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = v5 + 1;
  }
  if (v5 >= -1)
  {
    Swift::Int v120 = v7;
    uint64_t v117 = a1;
    if (v5 >= 2)
    {
      uint64_t v9 = v8 >> 1;
      sub_10001D64C(&qword_10010F3F0);
      uint64_t v10 = sub_1000CC410();
      *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
      __dst = (char *)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
      uint64_t v139 = v10;
      goto LABEL_12;
    }
    id v12 = (char *)_swiftEmptyArrayStorage;
    uint64_t v139 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v5 == 1)
    {
LABEL_12:
      Swift::Int v13 = 0;
      uint64_t v14 = *a1;
      uint64_t v118 = *a1 - 8;
      uint64_t v119 = *a1 + 16;
      id v12 = (char *)_swiftEmptyArrayStorage;
      Swift::Int v15 = v5;
      Swift::Int v122 = v5;
      uint64_t v135 = *a1;
      while (1)
      {
        Swift::Int v17 = v13;
        Swift::Int v18 = v13 + 1;
        uint64_t v132 = v12;
        if (v13 + 1 < v15)
        {
          uint64_t v19 = *(void *)(v14 + 8 * v18);
          uint64_t v20 = *(void *)(v14 + 8 * v13);
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          id v21 = [v137 objectForKey:v19];
          if (v21)
          {
            uint64_t v22 = v21;
            swift_getAtKeyPath();

            double v23 = v138;
          }
          else
          {
            double v23 = 0.0;
          }
          id v24 = [v137 objectForKey:v20];
          if (v24)
          {
            char v25 = v24;
            swift_getAtKeyPath();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();

            double v26 = v138;
          }
          else
          {
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            double v26 = 0.0;
          }
          id v12 = v132;
          Swift::Int v18 = v17 + 2;
          Swift::Int v15 = v122;
          if (v17 + 2 < v122)
          {
            uint64_t v27 = (uint64_t *)(v119 + 8 * v17);
            do
            {
              uint64_t v29 = *(v27 - 1);
              uint64_t v28 = *v27;
              swift_unknownObjectRetain();
              swift_unknownObjectRetain();
              id v30 = [v137 objectForKey:v28];
              if (v30)
              {
                id v31 = v30;
                swift_getAtKeyPath();

                double v32 = v138;
              }
              else
              {
                double v32 = 0.0;
              }
              id v33 = [v137 objectForKey:v29];
              if (v33)
              {
                uint64_t v34 = v33;
                swift_getAtKeyPath();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();

                id v12 = v132;
                if (v26 < v23 == v138 >= v32)
                {
LABEL_31:
                  Swift::Int v15 = v122;
                  goto LABEL_33;
                }
              }
              else
              {
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                id v12 = v132;
                if (v26 < v23 == v32 <= 0.0) {
                  goto LABEL_31;
                }
              }
              ++v18;
              ++v27;
              Swift::Int v15 = v122;
            }
            while (v122 != v18);
            Swift::Int v18 = v122;
          }
LABEL_33:
          uint64_t v14 = v135;
          if (v26 < v23)
          {
            if (v18 < v17) {
              goto LABEL_153;
            }
            if (v17 < v18)
            {
              id v35 = (uint64_t *)(v118 + 8 * v18);
              Swift::Int v36 = v18;
              Swift::Int v37 = v17;
              uint64_t v38 = (uint64_t *)(v135 + 8 * v17);
              do
              {
                if (v37 != --v36)
                {
                  if (!v135) {
                    goto LABEL_158;
                  }
                  uint64_t v39 = *v38;
                  *uint64_t v38 = *v35;
                  *id v35 = v39;
                }
                ++v37;
                --v35;
                ++v38;
              }
              while (v37 < v36);
            }
          }
        }
        if (v18 >= v15) {
          goto LABEL_65;
        }
        if (__OFSUB__(v18, v17)) {
          goto LABEL_151;
        }
        if (v18 - v17 >= v120) {
          goto LABEL_65;
        }
        if (__OFADD__(v17, v120)) {
          goto LABEL_154;
        }
        Swift::Int v40 = v17 + v120 >= v15 ? v15 : v17 + v120;
        if (v40 < v17) {
          break;
        }
        if (v18 == v40) {
          goto LABEL_65;
        }
        uint64_t v126 = v3;
        *(void *)uint64_t v129 = v17;
        uint64_t v41 = (uint64_t *)(v118 + 8 * v18);
        while (2)
        {
          Swift::Int v42 = v18;
          uint64_t v43 = *(void *)(v14 + 8 * v18);
          Swift::Int v44 = *(void *)v129;
          uint64_t v45 = v41;
          while (1)
          {
            uint64_t v46 = *v45;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            id v47 = [v137 objectForKey:v43];
            if (v47)
            {
              uint64_t v48 = v47;
              swift_getAtKeyPath();

              double v49 = v138;
            }
            else
            {
              double v49 = 0.0;
            }
            id v50 = [v137 objectForKey:v46];
            if (v50)
            {
              BOOL v51 = v50;
              swift_getAtKeyPath();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();

              if (v138 >= v49) {
                break;
              }
              goto LABEL_61;
            }
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            if (v49 <= 0.0) {
              break;
            }
LABEL_61:
            uint64_t v14 = v135;
            if (!v135) {
              goto LABEL_156;
            }
            uint64_t v52 = *v45;
            uint64_t v43 = v45[1];
            *uint64_t v45 = v43;
            v45[1] = v52;
            --v45;
            if (v42 == ++v44) {
              goto LABEL_52;
            }
          }
          uint64_t v14 = v135;
LABEL_52:
          Swift::Int v18 = v42 + 1;
          ++v41;
          if (v42 + 1 != v40) {
            continue;
          }
          break;
        }
        Swift::Int v18 = v40;
        uint64_t v3 = v126;
        Swift::Int v17 = *(void *)v129;
        id v12 = v132;
LABEL_65:
        if (v18 < v17) {
          goto LABEL_146;
        }
        Swift::Int v121 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v12 = sub_1000273E8(0, *((void *)v12 + 2) + 1, 1, v12);
        }
        unint64_t v54 = *((void *)v12 + 2);
        unint64_t v53 = *((void *)v12 + 3);
        unint64_t v16 = v54 + 1;
        uint64_t v14 = v135;
        if (v54 >= v53 >> 1)
        {
          uint64_t v106 = sub_1000273E8((char *)(v53 > 1), v54 + 1, 1, v12);
          uint64_t v14 = v135;
          id v12 = v106;
        }
        *((void *)v12 + 2) = v16;
        uint64_t v55 = v12 + 32;
        uint64_t v56 = &v12[16 * v54 + 32];
        *(void *)uint64_t v56 = v17;
        *((void *)v56 + 1) = v18;
        if (v54)
        {
          uint64_t v133 = v12;
          uint64_t v123 = v12 + 32;
          while (1)
          {
            unint64_t v57 = v16 - 1;
            if (v16 >= 4)
            {
              uint64_t v62 = &v55[16 * v16];
              uint64_t v63 = *((void *)v62 - 8);
              uint64_t v64 = *((void *)v62 - 7);
              BOOL v68 = __OFSUB__(v64, v63);
              uint64_t v65 = v64 - v63;
              if (v68) {
                goto LABEL_135;
              }
              uint64_t v67 = *((void *)v62 - 6);
              uint64_t v66 = *((void *)v62 - 5);
              BOOL v68 = __OFSUB__(v66, v67);
              uint64_t v60 = v66 - v67;
              char v61 = v68;
              if (v68) {
                goto LABEL_136;
              }
              unint64_t v69 = v16 - 2;
              uint64_t v70 = &v55[16 * v16 - 32];
              uint64_t v72 = *(void *)v70;
              uint64_t v71 = *((void *)v70 + 1);
              BOOL v68 = __OFSUB__(v71, v72);
              uint64_t v73 = v71 - v72;
              if (v68) {
                goto LABEL_138;
              }
              BOOL v68 = __OFADD__(v60, v73);
              uint64_t v74 = v60 + v73;
              if (v68) {
                goto LABEL_141;
              }
              if (v74 >= v65)
              {
                uint64_t v92 = &v55[16 * v57];
                uint64_t v94 = *(void *)v92;
                uint64_t v93 = *((void *)v92 + 1);
                BOOL v68 = __OFSUB__(v93, v94);
                uint64_t v95 = v93 - v94;
                if (v68) {
                  goto LABEL_145;
                }
                BOOL v85 = v60 < v95;
                goto LABEL_103;
              }
            }
            else
            {
              if (v16 != 3)
              {
                uint64_t v86 = *((void *)v12 + 4);
                uint64_t v87 = *((void *)v12 + 5);
                BOOL v68 = __OFSUB__(v87, v86);
                uint64_t v79 = v87 - v86;
                char v80 = v68;
                goto LABEL_97;
              }
              uint64_t v59 = *((void *)v12 + 4);
              uint64_t v58 = *((void *)v12 + 5);
              BOOL v68 = __OFSUB__(v58, v59);
              uint64_t v60 = v58 - v59;
              char v61 = v68;
            }
            if (v61) {
              goto LABEL_137;
            }
            unint64_t v69 = v16 - 2;
            uint64_t v75 = &v55[16 * v16 - 32];
            uint64_t v77 = *(void *)v75;
            uint64_t v76 = *((void *)v75 + 1);
            BOOL v78 = __OFSUB__(v76, v77);
            uint64_t v79 = v76 - v77;
            char v80 = v78;
            if (v78) {
              goto LABEL_140;
            }
            uint64_t v81 = &v55[16 * v57];
            uint64_t v83 = *(void *)v81;
            uint64_t v82 = *((void *)v81 + 1);
            BOOL v68 = __OFSUB__(v82, v83);
            uint64_t v84 = v82 - v83;
            if (v68) {
              goto LABEL_143;
            }
            if (__OFADD__(v79, v84)) {
              goto LABEL_144;
            }
            if (v79 + v84 >= v60)
            {
              BOOL v85 = v60 < v84;
LABEL_103:
              if (v85) {
                unint64_t v57 = v69;
              }
              goto LABEL_105;
            }
LABEL_97:
            if (v80) {
              goto LABEL_139;
            }
            uint64_t v88 = &v55[16 * v57];
            uint64_t v90 = *(void *)v88;
            uint64_t v89 = *((void *)v88 + 1);
            BOOL v68 = __OFSUB__(v89, v90);
            uint64_t v91 = v89 - v90;
            if (v68) {
              goto LABEL_142;
            }
            if (v91 < v79) {
              goto LABEL_14;
            }
LABEL_105:
            unint64_t v96 = v57 - 1;
            if (v57 - 1 >= v16)
            {
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
              goto LABEL_155;
            }
            if (!v14) {
              goto LABEL_157;
            }
            uint64_t v97 = v55;
            uint64_t v98 = &v55[16 * v96];
            uint64_t v99 = *(void *)v98;
            unint64_t v100 = v57;
            uint64_t v101 = &v97[16 * v57];
            uint64_t v102 = *((void *)v101 + 1);
            uint64_t v127 = (char *)(v14 + 8 * *(void *)v101);
            uint64_t v130 = (char *)(v14 + 8 * *(void *)v98);
            unint64_t v125 = v14 + 8 * v102;
            id v103 = v137;
            swift_retain();
            sub_10007EAD0(v130, v127, v125, __dst, v103);
            if (v3)
            {
LABEL_127:
              swift_bridgeObjectRelease();
              uint64_t v115 = v137;

              swift_release();
              *(void *)((v139 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
              sub_1000CC3D0();
              swift_release_n();
              goto LABEL_129;
            }

            swift_release();
            if (v102 < v99) {
              goto LABEL_132;
            }
            id v12 = v133;
            if (v100 > *((void *)v133 + 2)) {
              goto LABEL_133;
            }
            unint64_t v104 = v100;
            *(void *)uint64_t v98 = v99;
            uint64_t v55 = v123;
            *(void *)&v123[16 * v96 + 8] = v102;
            unint64_t v105 = *((void *)v133 + 2);
            if (v100 >= v105) {
              goto LABEL_134;
            }
            unint64_t v16 = v105 - 1;
            memmove(v101, v101 + 16, 16 * (v105 - 1 - v104));
            *((void *)v133 + 2) = v105 - 1;
            uint64_t v14 = v135;
            if (v105 <= 2) {
              goto LABEL_14;
            }
          }
        }
        unint64_t v16 = 1;
LABEL_14:
        Swift::Int v13 = v121;
        Swift::Int v15 = v122;
        if (v121 >= v122) {
          goto LABEL_115;
        }
      }
LABEL_155:
      __break(1u);
LABEL_156:
      swift_release_n();

      __break(1u);
LABEL_157:
      swift_release_n();

      __break(1u);
LABEL_158:
      swift_release_n();

      __break(1u);
LABEL_159:
      swift_release_n();

      __break(1u);
      goto LABEL_160;
    }
    unint64_t v16 = _swiftEmptyArrayStorage[2];
LABEL_115:
    if (v16 >= 2)
    {
      uint64_t v107 = *v117;
      uint64_t v128 = *v117;
      do
      {
        unint64_t v108 = v16 - 2;
        if (v16 < 2) {
          goto LABEL_147;
        }
        if (!v107) {
          goto LABEL_159;
        }
        uint64_t v109 = *(void *)&v12[16 * v108 + 32];
        uint64_t v110 = *(void *)&v12[16 * v16 + 24];
        uint64_t v134 = (uint64_t)v12;
        uint64_t v136 = (char *)(v107 + 8 * v109);
        uint64_t v111 = (char *)(v107 + 8 * *(void *)&v12[16 * v16 + 16]);
        unint64_t v131 = v107 + 8 * v110;
        id v112 = v137;
        swift_retain();
        sub_10007EAD0(v136, v111, v131, __dst, v112);
        if (v3) {
          goto LABEL_127;
        }

        swift_release();
        if (v110 < v109) {
          goto LABEL_148;
        }
        id v12 = (char *)v134;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v12 = sub_100027728(v134);
        }
        if (v108 >= *((void *)v12 + 2)) {
          goto LABEL_149;
        }
        uint64_t v113 = &v12[16 * v108 + 32];
        *(void *)uint64_t v113 = v109;
        *((void *)v113 + 1) = v110;
        unint64_t v114 = *((void *)v12 + 2);
        if (v16 > v114) {
          goto LABEL_150;
        }
        memmove(&v12[16 * v16 + 16], &v12[16 * v16 + 32], 16 * (v114 - v16));
        *((void *)v12 + 2) = v114 - 1;
        unint64_t v16 = v114 - 1;
        uint64_t v107 = v128;
      }
      while (v114 > 2);
    }
    swift_bridgeObjectRelease();
    *(void *)((v139 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
    sub_1000CC3D0();
    swift_release_n();
    uint64_t v115 = v137;
LABEL_129:

    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_160:
  swift_release_n();

  uint64_t result = sub_1000CC860();
  __break(1u);
  return result;
}

void sub_10007FBB4(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  id v4 = a2;
  swift_retain_n();
  id v5 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v3 = sub_1000289F4(v3);
    *a1 = v3;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  v9[0] = v3 + 32;
  v9[1] = v7;
  id v8 = v5;
  swift_retain();
  sub_10007F0A0(v9, v8);

  swift_release();
  sub_1000CC7E0();
  swift_release_n();
}

const char *sub_10007FC90()
{
  return "personalizationScore";
}

id sub_10007FC9C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 personalizationScore];
  *a2 = v4;
  return result;
}

id sub_10007FCD0(double *a1, id *a2)
{
  return [*a2 setPersonalizationScore:*a1];
}

char *sub_10007FCE4(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    id v6 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    id v6 = a1;
    uint64_t v7 = a2[1];
    id v8 = a2[2];
    *((void *)a1 + 1) = v7;
    *((void *)a1 + 2) = v8;
    a1[24] = *((unsigned char *)a2 + 24);
    uint64_t v9 = type metadata accessor for Section();
    uint64_t v10 = *(int *)(v9 + 32);
    __dst = &v6[v10];
    uint64_t v31 = v9;
    id v11 = (char *)a2 + v10;
    uint64_t v12 = sub_1000CABE0();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    Swift::Int v15 = v4;
    unint64_t v16 = v7;
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      uint64_t v17 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v11, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v18 = *(int *)(v31 + 36);
    uint64_t v19 = &v6[v18];
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = sub_1000CACC0();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = sub_10001D64C((uint64_t *)&unk_100111DE0);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    uint64_t v24 = *(int *)(a3 + 20);
    char v25 = &v6[v24];
    uint64_t v26 = (uint64_t)a2 + v24;
    *(_OWORD *)char v25 = *(_OWORD *)v26;
    uint64_t v27 = *(void **)(v26 + 16);
    *((void *)v25 + 2) = v27;
    id v28 = v27;
  }
  return v6;
}

void sub_10007FFA8(id *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for Section();
  id v5 = (char *)a1 + *(int *)(v4 + 32);
  uint64_t v6 = sub_1000CABE0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  id v8 = (char *)a1 + *(int *)(v4 + 36);
  uint64_t v9 = sub_1000CACC0();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  id v11 = *(id *)((char *)a1 + *(int *)(a2 + 20) + 16);
}

uint64_t sub_100080128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  id v5 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Section();
  uint64_t v8 = *(int *)(v7 + 32);
  __dst = (void *)(a1 + v8);
  uint64_t v29 = v7;
  uint64_t v9 = (const void *)(a2 + v8);
  uint64_t v10 = sub_1000CABE0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  id v13 = v6;
  id v14 = v5;
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v15 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v9, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(__dst, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  uint64_t v16 = *(int *)(v29 + 36);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_1000CACC0();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = sub_10001D64C((uint64_t *)&unk_100111DE0);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v22 = *(int *)(a3 + 20);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  char v25 = *(void **)(v24 + 16);
  *(void *)(v23 + 16) = v25;
  id v26 = v25;
  return a1;
}

uint64_t sub_1000803A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(void **)a1;
  uint64_t v6 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v7 = v6;

  uint64_t v8 = *(void **)(a2 + 8);
  uint64_t v9 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v8;
  id v10 = v8;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v11 = type metadata accessor for Section();
  uint64_t v12 = *(int *)(v11 + 32);
  id v13 = (void *)(a1 + v12);
  id v14 = (void *)(a2 + v12);
  uint64_t v15 = sub_1000CABE0();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    uint64_t v20 = sub_10001D64C(&qword_10010F340);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = *(int *)(v11 + 36);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = sub_1000CACC0();
  uint64_t v25 = *(void *)(v24 - 8);
  id v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 24))(v22, v23, v24);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    uint64_t v29 = sub_10001D64C((uint64_t *)&unk_100111DE0);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_13:
  uint64_t v30 = *(int *)(a3 + 20);
  uint64_t v31 = (void *)(a1 + v30);
  double v32 = (void *)(a2 + v30);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  id v33 = (void *)v32[2];
  uint64_t v34 = (void *)v31[2];
  void v31[2] = v33;
  id v35 = v33;

  return a1;
}

uint64_t sub_1000806F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Section();
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_1000CABE0();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_10001D64C(&qword_10010F340);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = *(int *)(v6 + 36);
  id v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = sub_1000CACC0();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_10001D64C((uint64_t *)&unk_100111DE0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v19 = *(int *)(a3 + 20);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *(void *)(v20 + 16) = *(void *)(v21 + 16);
  return a1;
}

uint64_t sub_100080940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v6 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Section();
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = sub_1000CABE0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_10001D64C(&qword_10010F340);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = *(int *)(v7 + 36);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = sub_1000CACC0();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 40))(v18, v19, v20);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    uint64_t v25 = sub_10001D64C((uint64_t *)&unk_100111DE0);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v21 + 32))(v18, v19, v20);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
LABEL_13:
  uint64_t v26 = *(int *)(a3 + 20);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  uint64_t v29 = *(void **)(v27 + 16);
  *(void *)(v27 + 16) = *(void *)(v28 + 16);

  return a1;
}

uint64_t sub_100080C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100080C90);
}

uint64_t sub_100080C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Section();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 16);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100080D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100080D68);
}

uint64_t sub_100080D68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Section();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 16) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for SectionHeaderView()
{
  uint64_t result = qword_100110CE8;
  if (!qword_100110CE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100080E74()
{
  uint64_t result = type metadata accessor for Section();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100080F08()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100080F24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_10001D64C(&qword_100110D20);
  __chkstk_darwin(v3 - 8);
  id v5 = (uint64_t *)((char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_10001D64C(&qword_100110D28);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [*(id *)(v1 + 8) name];
  if (v9)
  {
    unint64_t v10 = v9;
    uint64_t v11 = sub_1000CC1F0();
    unint64_t v13 = v12;

    *id v5 = sub_1000CBCF0();
    v5[1] = v14;
    uint64_t v15 = sub_10001D64C(&qword_100110D30);
    sub_100081100(v1, v11, v13, (uint64_t)v5 + *(int *)(v15 + 44));
    swift_bridgeObjectRelease();
    type metadata accessor for SectionHeaderView();
    sub_1000CBD20();
    sub_1000CB310();
    sub_100036850((uint64_t)v5, (uint64_t)v8, &qword_100110D20);
    uint64_t v16 = &v8[*(int *)(v6 + 36)];
    long long v17 = v19[1];
    *(_OWORD *)uint64_t v16 = v19[0];
    *((_OWORD *)v16 + 1) = v17;
    *((_OWORD *)v16 + 2) = v19[2];
    sub_1000227A8((uint64_t)v5, &qword_100110D20);
    sub_100082C38();
  }
  uint64_t result = sub_1000CBC70();
  *a1 = result;
  return result;
}

uint64_t sub_100081100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v7 = sub_10001D64C(&qword_100110D48);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  unint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = sub_10001D64C(&qword_100110D50);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v27 - v17;
  *(void *)uint64_t v18 = sub_1000CB700();
  *((void *)v18 + 1) = 0;
  v18[16] = 1;
  uint64_t v19 = &v18[*(int *)(sub_10001D64C(&qword_100110D58) + 44)];
  *(void *)unint64_t v12 = sub_1000CB5E0();
  *((void *)v12 + 1) = 0x4008000000000000;
  v12[16] = 0;
  uint64_t v20 = sub_10001D64C(&qword_100110D60);
  sub_100081AB8(a1, a2, a3, (uint64_t)&v12[*(int *)(v20 + 44)]);
  sub_100036850((uint64_t)v12, (uint64_t)v10, &qword_100110D48);
  *(void *)uint64_t v19 = 0;
  v19[8] = 1;
  uint64_t v21 = sub_10001D64C(&qword_100110D68);
  sub_100036850((uint64_t)v10, (uint64_t)&v19[*(int *)(v21 + 48)], &qword_100110D48);
  sub_1000227A8((uint64_t)v12, &qword_100110D48);
  sub_1000227A8((uint64_t)v10, &qword_100110D48);
  sub_100081364(&v28);
  uint64_t v22 = v28;
  char v23 = sub_1000CB810();
  sub_100036850((uint64_t)v18, (uint64_t)v16, &qword_100110D50);
  uint64_t v24 = v27;
  sub_100036850((uint64_t)v16, v27, &qword_100110D50);
  uint64_t v25 = v24 + *(int *)(sub_10001D64C(&qword_100110D70) + 48);
  *(void *)uint64_t v25 = v22;
  *(unsigned char *)(v25 + 8) = v23;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  *(unsigned char *)(v25 + 48) = 1;
  swift_retain();
  sub_1000227A8((uint64_t)v18, &qword_100110D50);
  swift_release();
  return sub_1000227A8((uint64_t)v16, &qword_100110D50);
}

uint64_t sub_100081364@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_10001D64C(&qword_100110D78);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v47 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10001D64C(&qword_100110D80);
  __chkstk_darwin(v6);
  uint64_t v46 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v44 = sub_1000CBB00();
  uint64_t v8 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  unint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000CBBD0();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = v1;
  if (*(unsigned char *)(v1 + 24) == 1)
  {
    uint64_t v40 = v6;
    uint64_t v41 = v4;
    uint64_t v42 = v3;
    uint64_t v43 = a1;
    if (qword_10010DD48 != -1) {
      swift_once();
    }
    id v15 = (id)qword_10011ABE0;
    sub_1000CBBC0();
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for Image.ResizingMode.stretch(_:), v11);
    uint64_t v39 = sub_1000CBC30();
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    NSString v16 = sub_1000CC1C0();
    uint64_t v17 = self;
    id v18 = [v17 colorWithHexString:v16];

    [v18 red];
    [v18 green];
    [v18 blue];
    uint64_t v19 = enum case for Color.RGBColorSpace.sRGB(_:);
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
    uint64_t v21 = v44;
    v20(v10, enum case for Color.RGBColorSpace.sRGB(_:), v44);
    uint64_t v22 = sub_1000CBBA0();

    NSString v23 = sub_1000CC1C0();
    id v24 = [v17 colorWithHexString:v23];

    [v24 red];
    [v24 green];
    [v24 blue];
    v20(v10, v19, v21);
    uint64_t v25 = sub_1000CBBA0();

    sub_10001D64C(&qword_100110D88);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1000D34A0;
    *(void *)(v26 + 32) = v22;
    *(void *)(v26 + 40) = v25;
    uint64_t v48 = v26;
    sub_1000CC3D0();
    swift_retain();
    swift_retain();
    sub_1000CBCD0();
    sub_1000CBD30();
    sub_1000CBD40();
    sub_1000CB370();
    uint64_t v27 = v60;
    long long v44 = v61;
    uint64_t v28 = v62;
    uint64_t v29 = v63;
    type metadata accessor for SectionHeaderView();
    uint64_t v30 = v39;
    swift_retain();
    sub_1000CBD20();
    sub_1000CB310();
    uint64_t v48 = v27;
    long long v49 = v44;
    uint64_t v50 = v28;
    uint64_t v51 = v29;
    uint64_t v52 = v30;
    uint64_t v53 = 0x3FF0000000000000;
    __int16 v54 = 0;
    uint64_t v55 = v64;
    char v56 = v65;
    uint64_t v57 = v66;
    char v58 = v67;
    long long v59 = v68;
    uint64_t v31 = sub_10001D64C(&qword_100110D90);
    uint64_t v32 = sub_100082CD8(&qword_100110D98, &qword_100110D90, (void (*)(void))sub_100082D54);
    id v33 = v47;
    sub_1000CBA20();
    sub_1000583A8((uint64_t)&v60);
    swift_release();
    uint64_t v48 = v31;
    *(void *)&long long v49 = v32;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v35 = v42;
    sub_1000CB9E0();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v33, v35);
    uint64_t v48 = v35;
    *(void *)&long long v49 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2();
    uint64_t v36 = sub_1000CBC70();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    a1 = v43;
  }
  else
  {
    uint64_t result = sub_1000CBC70();
    uint64_t v36 = result;
  }
  *a1 = v36;
  return result;
}

uint64_t sub_100081AB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v122 = a2;
  unint64_t v123 = a3;
  uint64_t v128 = a4;
  uint64_t v115 = sub_1000CB970();
  uint64_t v113 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v111 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_1000CB990();
  uint64_t v112 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  unint64_t v108 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_1000CB9B0();
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v107 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000CB650();
  __chkstk_darwin(v8 - 8);
  uint64_t v106 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10001D64C((uint64_t *)&unk_100111DE0);
  __chkstk_darwin(v10 - 8);
  uint64_t v126 = (uint64_t)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000CACC0();
  uint64_t v129 = *(void *)(v12 - 8);
  uint64_t v130 = v12;
  __chkstk_darwin(v12);
  uint64_t v127 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = sub_10001D64C(&qword_100110DD0);
  uint64_t v103 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v102 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_10001D64C(&qword_100110DD8);
  uint64_t v15 = __chkstk_darwin(v124);
  uint64_t v101 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v104 = (uint64_t)&v95 - v17;
  uint64_t v120 = sub_10001D64C(&qword_100110DE0);
  __chkstk_darwin(v120);
  uint64_t v121 = (uint64_t)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v100 = (uint64_t *)sub_1000CB6C0();
  uint64_t v99 = *(v100 - 1);
  __chkstk_darwin(v100);
  uint64_t v98 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_10001D64C(&qword_100110DE8);
  uint64_t v97 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v21 = (char *)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_10001D64C(&qword_100110DF0);
  uint64_t v22 = __chkstk_darwin(v119);
  id v24 = (char *)&v95 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22);
  unint64_t v96 = (char *)&v95 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v95 - v27;
  uint64_t v29 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v29 - 8);
  uint64_t v31 = (char *)&v95 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_1000CABE0();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v95 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v95 - v37;
  uint64_t v39 = sub_10001D64C(&qword_100110DF8);
  uint64_t v40 = __chkstk_darwin(v39 - 8);
  uint64_t v125 = (uint64_t)&v95 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  uint64_t v118 = (char *)&v95 - v42;
  uint64_t v117 = type metadata accessor for Section();
  sub_100036850(a1 + *(int *)(v117 + 32), (uint64_t)v31, &qword_10010F340);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
  {
    sub_1000227A8((uint64_t)v31, &qword_10010F340);
    uint64_t v43 = sub_100040144();
    uint64_t v45 = v122;
    unint64_t v44 = v123;
    sub_1000829A8(v122, v123, v43, (uint64_t)v21);
    swift_release();
    uint64_t v133 = v45;
    unint64_t v134 = v44;
    uint64_t v46 = sub_10001D690(&qword_100110E00);
    uint64_t v47 = sub_10001D690(&qword_10010EC98);
    unint64_t v48 = sub_100082E24();
    uint64_t v131 = v47;
    unint64_t v132 = v48;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v131 = v46;
    unint64_t v132 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2();
    sub_1000231FC();
    uint64_t v50 = v116;
    sub_1000CBA60();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v21, v50);
    uint64_t v51 = v98;
    sub_1000CB6A0();
    uint64_t v52 = (uint64_t)v96;
    sub_1000CB390();
    (*(void (**)(char *, uint64_t *))(v99 + 8))(v51, v100);
    sub_1000227A8((uint64_t)v24, &qword_100110DF0);
    sub_1000365A0(v52, (uint64_t)v28, &qword_100110DF0);
    sub_100036850((uint64_t)v28, v121, &qword_100110DF0);
    swift_storeEnumTagMultiPayload();
    sub_100082EC4();
    sub_100082FBC();
    uint64_t v53 = (uint64_t)v118;
    sub_1000CB770();
    sub_1000227A8((uint64_t)v28, &qword_100110DF0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v38, v31, v32);
    uint64_t v54 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 16))(v36, v38, v32);
    unint64_t v100 = &v95;
    __chkstk_darwin(v54);
    uint64_t v55 = v122;
    unint64_t v56 = v123;
    *(&v95 - 4) = a1;
    *(&v95 - 3) = v55;
    unint64_t v93 = v56;
    uint64_t v57 = sub_10001D690(&qword_100110E00);
    uint64_t v58 = sub_10001D690(&qword_10010EC98);
    unint64_t v59 = sub_100082E24();
    uint64_t v133 = v58;
    unint64_t v134 = v59;
    uint64_t v60 = swift_getOpaqueTypeConformance2();
    uint64_t v133 = v57;
    unint64_t v134 = v60;
    swift_getOpaqueTypeConformance2();
    long long v61 = v102;
    sub_1000CB8C0();
    uint64_t v133 = v55;
    unint64_t v134 = v56;
    sub_100036A5C(&qword_100110E10, &qword_100110DD0);
    sub_1000231FC();
    uint64_t v62 = (uint64_t)v101;
    uint64_t v63 = v105;
    sub_1000CBA60();
    (*(void (**)(char *, uint64_t))(v103 + 8))(v61, v63);
    uint64_t v64 = v104;
    sub_1000365A0(v62, v104, &qword_100110DD8);
    sub_100036850(v64, v121, &qword_100110DD8);
    swift_storeEnumTagMultiPayload();
    sub_100082EC4();
    sub_100082FBC();
    uint64_t v53 = (uint64_t)v118;
    sub_1000CB770();
    sub_1000227A8(v64, &qword_100110DD8);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v38, v32);
  }
  uint64_t v65 = v126;
  sub_100036850(a1 + *(int *)(v117 + 36), v126, (uint64_t *)&unk_100111DE0);
  uint64_t v67 = v129;
  uint64_t v66 = v130;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v65, 1, v130) == 1)
  {
    sub_1000227A8(v65, (uint64_t *)&unk_100111DE0);
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v127, v65, v66);
    sub_1000CB640();
    v135._countAndFlagsBits = 40;
    v135._object = (void *)0xE100000000000000;
    sub_1000CB630(v135);
    (*(void (**)(char *, void, uint64_t))(v113 + 104))(v111, enum case for Text.DateStyle.UnitsConfiguration.Style.brief(_:), v115);
    uint64_t v72 = v108;
    sub_1000CB980();
    uint64_t v73 = v107;
    sub_1000CB9A0();
    (*(void (**)(char *, uint64_t))(v112 + 8))(v72, v114);
    sub_1000CB610();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v73, v110);
    v136._countAndFlagsBits = 41;
    v136._object = (void *)0xE100000000000000;
    sub_1000CB630(v136);
    sub_1000CB670();
    __int16 v94 = 256;
    unint64_t v93 = 0;
    uint64_t v74 = sub_1000CB9C0();
    uint64_t v76 = v75;
    uint64_t v126 = v77;
    char v79 = v78 & 1;
    sub_1000CBB90();
    uint64_t v68 = sub_1000CB900();
    uint64_t v69 = v80;
    uint64_t v81 = v53;
    uint64_t v82 = a1;
    char v84 = v83;
    uint64_t v71 = v85;
    swift_release();
    uint64_t v70 = v84 & 1;
    a1 = v82;
    uint64_t v53 = v81;
    sub_100036118(v74, v76, v79);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v129 + 8))(v127, v130);
  }
  uint64_t v86 = *(void *)(a1 + *(int *)(type metadata accessor for SectionHeaderView() + 20));
  uint64_t v87 = v125;
  sub_100036850(v53, v125, &qword_100110DF8);
  uint64_t v88 = v128;
  sub_100036850(v87, v128, &qword_100110DF8);
  uint64_t v89 = sub_10001D64C((uint64_t *)&unk_100110E20);
  uint64_t v90 = (uint64_t *)(v88 + *(int *)(v89 + 48));
  *uint64_t v90 = v68;
  v90[1] = v69;
  v90[2] = v70;
  v90[3] = v71;
  uint64_t v91 = v88 + *(int *)(v89 + 64);
  *(void *)uint64_t v91 = v86;
  *(unsigned char *)(v91 + 8) = 0;
  sub_1000830A8(v68, v69, v70, v71);
  sub_1000227A8(v53, &qword_100110DF8);
  sub_1000830EC(v68, v69, v70, v71);
  return sub_1000227A8(v87, &qword_100110DF8);
}

uint64_t sub_10008293C@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100040144();
  sub_1000829A8(a1, a2, v6, a3);

  return swift_release();
}

uint64_t sub_1000829A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v8 = sub_10001D64C(&qword_100110E00);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v33 = v8;
  uint64_t v34 = v9;
  __chkstk_darwin(v8);
  uint64_t v32 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *(id *)(v4 + *(int *)(type metadata accessor for SectionHeaderView() + 20) + 16);
  v31[1] = sub_1000CB8B0();
  uint64_t v36 = a1;
  unint64_t v37 = a2;
  sub_1000231FC();
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1000CB9D0();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  swift_retain();
  uint64_t v17 = sub_1000CB940();
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t v23 = v22;
  v31[0] = v22;
  swift_release();
  v21 &= 1u;
  sub_100036118(v12, v14, v16);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v25 = swift_getKeyPath();
  uint64_t v36 = v17;
  unint64_t v37 = v19;
  char v38 = v21;
  uint64_t v39 = v23;
  uint64_t v40 = KeyPath;
  uint64_t v41 = 1;
  char v42 = 0;
  uint64_t v43 = v25;
  uint64_t v44 = a3;
  swift_retain();
  uint64_t v26 = sub_10001D64C(&qword_10010EC98);
  unint64_t v27 = sub_100082E24();
  uint64_t v28 = v32;
  sub_1000CB9E0();
  sub_100036118(v17, v19, v21);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v36 = v26;
  unint64_t v37 = v27;
  swift_getOpaqueTypeConformance2();
  uint64_t v29 = v33;
  sub_1000CBA20();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v28, v29);
}

unint64_t sub_100082C38()
{
  unint64_t result = qword_100110D38;
  if (!qword_100110D38)
  {
    sub_10001D690(&qword_100110D28);
    sub_100036A5C(&qword_100110D40, &qword_100110D20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110D38);
  }
  return result;
}

uint64_t sub_100082CD8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001D690(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100082D54()
{
  return sub_100082CD8(&qword_100110DA0, &qword_100110DA8, (void (*)(void))sub_100082D84);
}

unint64_t sub_100082D84()
{
  unint64_t result = qword_100110DB0;
  if (!qword_100110DB0)
  {
    sub_10001D690(&qword_100110DB8);
    sub_100058354();
    sub_100036A5C(&qword_100110DC0, &qword_100110DC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110DB0);
  }
  return result;
}

unint64_t sub_100082E24()
{
  unint64_t result = qword_10010ECA0;
  if (!qword_10010ECA0)
  {
    sub_10001D690(&qword_10010EC98);
    sub_1000369BC();
    sub_100036A5C(&qword_10010EA70, &qword_10010EA78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010ECA0);
  }
  return result;
}

unint64_t sub_100082EC4()
{
  unint64_t result = qword_100110E08;
  if (!qword_100110E08)
  {
    sub_10001D690(&qword_100110DD8);
    sub_100036A5C(&qword_100110E10, &qword_100110DD0);
    sub_100082F64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110E08);
  }
  return result;
}

unint64_t sub_100082F64()
{
  unint64_t result = qword_10010EA98;
  if (!qword_10010EA98)
  {
    sub_1000CB7D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10010EA98);
  }
  return result;
}

unint64_t sub_100082FBC()
{
  unint64_t result = qword_100110E18;
  if (!qword_100110E18)
  {
    sub_10001D690(&qword_100110DF0);
    sub_10001D690(&qword_100110E00);
    sub_10001D690(&qword_10010EC98);
    sub_100082E24();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_100082F64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110E18);
  }
  return result;
}

uint64_t sub_1000830A8(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100036108(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000830EC(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100036118(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100083130@<X0>(uint64_t a1@<X8>)
{
  return sub_10008293C(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t initializeBufferWithCopyOfBuffer for SectionHeaderView.LayoutOptions(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  id v4 = v3;
  return a1;
}

void destroy for SectionHeaderView.LayoutOptions(uint64_t a1)
{
}

void *assignWithCopy for SectionHeaderView.LayoutOptions(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = (void *)a2[2];
  id v4 = (void *)a1[2];
  a1[2] = v3;
  id v5 = v3;

  return a1;
}

uint64_t assignWithTake for SectionHeaderView.LayoutOptions(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for SectionHeaderView.LayoutOptions(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionHeaderView.LayoutOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionHeaderView.LayoutOptions()
{
  return &type metadata for SectionHeaderView.LayoutOptions;
}

void *sub_1000832A8()
{
  return &protocol witness table for AnyView;
}

uint64_t sub_1000832B8()
{
  uint64_t v1 = sub_1000CBB00();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + *(int *)(type metadata accessor for TodayContent() + 28)), "widgetConfig"));
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v6 = v5;
  id v7 = [v5 audioIndicatorColor];

  if (!v7) {
    goto LABEL_8;
  }
  uint64_t v8 = sub_1000CC1F0();
  unint64_t v10 = v9;

  uint64_t v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (!v11)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    NSString v12 = sub_1000CC1C0();
    id v13 = [self colorWithHexString:v12];
    goto LABEL_9;
  }
  NSString v12 = sub_1000CC1C0();
  swift_bridgeObjectRelease();
  id v13 = [self colorWithHexString:v12];
LABEL_9:
  id v14 = v13;

  [v14 red];
  [v14 green];
  [v14 blue];
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Color.RGBColorSpace.sRGB(_:), v1);
  uint64_t v15 = sub_1000CBBA0();

  return v15;
}

void *sub_1000834FC()
{
  uint64_t v1 = type metadata accessor for Item(0);
  uint64_t v21 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Section();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v24 = (uint64_t)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v0 + *(int *)(type metadata accessor for TodayContent() + 24));
  uint64_t v23 = *(void *)(v7 + 16);
  if (v23)
  {
    uint64_t v22 = v7 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    unint64_t result = (void *)swift_bridgeObjectRetain();
    unint64_t v9 = 0;
    unint64_t v10 = _swiftEmptyArrayStorage;
    uint64_t v19 = v7;
    uint64_t v20 = v5;
    while (v9 < *(void *)(v7 + 16))
    {
      uint64_t v11 = v24;
      sub_1000895D0(v22 + *(void *)(v5 + 72) * v9, v24, (uint64_t (*)(void))type metadata accessor for Section);
      uint64_t v12 = *(void *)(v11 + 16);
      swift_bridgeObjectRetain();
      sub_100089464(v11, (uint64_t (*)(void))type metadata accessor for Section);
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13)
      {
        unint64_t v14 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
        uint64_t v15 = v12 + v14;
        uint64_t v16 = *(void *)(v21 + 72);
        do
        {
          sub_1000895D0(v15, (uint64_t)v3, type metadata accessor for Item);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v10 = (void *)sub_100088190(0, v10[2] + 1, 1, (unint64_t)v10, (uint64_t *)&unk_100110FF8, type metadata accessor for Item, type metadata accessor for Item);
          }
          unint64_t v18 = v10[2];
          unint64_t v17 = v10[3];
          if (v18 >= v17 >> 1) {
            unint64_t v10 = (void *)sub_100088190(v17 > 1, v18 + 1, 1, (unint64_t)v10, (uint64_t *)&unk_100110FF8, type metadata accessor for Item, type metadata accessor for Item);
          }
          void v10[2] = v18 + 1;
          sub_100089638((uint64_t)v3, (uint64_t)v10 + v14 + v18 * v16, type metadata accessor for Item);
          v15 += v16;
          --v13;
        }
        while (v13);
        unint64_t result = (void *)swift_bridgeObjectRelease();
        uint64_t v7 = v19;
        uint64_t v5 = v20;
      }
      else
      {
        unint64_t result = (void *)swift_bridgeObjectRelease();
      }
      if (++v9 == v23)
      {
        swift_bridgeObjectRelease();
        return v10;
      }
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100083848@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v63 = a7;
  uint64_t v64 = a8;
  int v56 = a6;
  uint64_t v62 = a5;
  uint64_t v55 = a2;
  uint64_t v17 = sub_10001D64C((uint64_t *)&unk_100111DE0);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10001D64C(&qword_10010F340);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v54 - v24;
  uint64_t v26 = sub_10001D64C(&qword_10010DE20);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (uint64_t *)((char *)&v54 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v65 = a1;
  id v29 = [a1 banner];
  if (v29)
  {
    uint64_t v30 = v29;
    sub_10006D5F8(v29, a4, (uint64_t)v25);
    uint64_t v31 = a3;
    uint64_t v32 = sub_10006D93C(v30, a3);
    sub_100036850((uint64_t)v25, (uint64_t)v23, &qword_10010F340);
    sub_1000BCCA8(v30, (uint64_t)v23, v32, v28);
    sub_1000227A8((uint64_t)v25, &qword_10010F340);
    uint64_t v33 = type metadata accessor for Banner();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v28, 0, 1, v33);
  }
  else
  {
    uint64_t v31 = a3;
    uint64_t v34 = type metadata accessor for Banner();
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v28, 1, 1, v34);
  }
  uint64_t v59 = a12;
  uint64_t v60 = a13;
  uint64_t v57 = a10;
  uint64_t v58 = a11;
  char v35 = sub_100083CA8(v65);
  id v36 = (id)NewsCoreUserDefaults();
  NSString v37 = sub_1000CC1C0();
  unsigned int v38 = [v36 BOOLForKey:v37];

  long long v61 = v28;
  if (v38)
  {
    sub_1000CACB0();
    uint64_t v39 = sub_1000CACC0();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v19, 0, 1, v39);
  }
  else
  {
    uint64_t v40 = sub_1000CACC0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v19, 1, 1, v40);
  }
  char v41 = v56;
  uint64_t v42 = v55;
  uint64_t v43 = sub_100020110(a4, a4[3]);
  uint64_t v44 = a4;
  uint64_t v45 = v65;
  uint64_t v46 = sub_100088748(v31, *v43, v62, v35 & 1, (uint64_t)v19, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000227A8((uint64_t)v19, (uint64_t *)&unk_100111DE0);
  uint64_t v47 = v63;
  sub_100083D98(v63, v44, (uint64_t)v25);
  sub_1000227A8(v47, &qword_10010F340);
  sub_1000201A8((uint64_t)v44);
  *a9 = v45;
  unint64_t v48 = (int *)type metadata accessor for TodayContent();
  sub_1000365A0((uint64_t)v61, (uint64_t)a9 + v48[5], &qword_10010DE20);
  *(void *)((char *)a9 + v48[6]) = v46;
  *(void *)((char *)a9 + v48[7]) = v42;
  *((unsigned char *)a9 + v48[8]) = v41 & 1;
  uint64_t result = sub_1000365A0((uint64_t)v25, (uint64_t)a9 + v48[9], &qword_10010F340);
  *(void *)((char *)a9 + v48[10]) = v64;
  uint64_t v50 = (void *)((char *)a9 + v48[11]);
  uint64_t v51 = v58;
  *uint64_t v50 = v57;
  v50[1] = v51;
  uint64_t v52 = (void *)((char *)a9 + v48[12]);
  uint64_t v53 = v60;
  *uint64_t v52 = v59;
  v52[1] = v53;
  return result;
}

uint64_t sub_100083CA8(void *a1)
{
  id v2 = [a1 banner];
  if (v2 && (uint64_t v3 = v2, v4 = [v2 imageMethod], v3, v4 == (id)1))
  {
    char v5 = 0;
  }
  else
  {
    id v6 = [a1 sourceIdentifier];
    uint64_t v7 = sub_1000CC1F0();
    uint64_t v9 = v8;

    if (v7 == sub_1000CC1F0() && v9 == v10) {
      char v5 = 1;
    }
    else {
      char v5 = sub_1000CCA30();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5 & 1;
}

uint64_t sub_100083D98@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000CABE0();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100036850(a1, (uint64_t)v8, &qword_10010F340);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1000227A8((uint64_t)v8, &qword_10010F340);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, 1, 1, v9);
  }
  else
  {
    unint64_t v14 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v14(v12, v8, v9);
    if (qword_10010DD80 != -1) {
      swift_once();
    }
    sub_10003B638(v9, (uint64_t)qword_10011AC78);
    sub_100089408((unint64_t *)&qword_100110FE0, (void (*)(uint64_t))&type metadata accessor for URL);
    if (sub_1000CC190())
    {
      v14((char *)a3, v12, v9);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a3, 0, 1, v9);
    }
    else
    {
      uint64_t v15 = self;
      sub_1000CAB60(v16);
      uint64_t v18 = v17;
      id v19 = [v15 engagementDescriptorWithTargetURL:v17];

      sub_100020110(a2, a2[3]);
      sub_1000A542C(v19, a3);
      swift_unknownObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
  }
}

uint64_t sub_100084064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v4 = v3;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v6 = type metadata accessor for Section();
  unint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6 - 8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v39 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v39 - v17;
  id v19 = (int *)type metadata accessor for TodayContent();
  unint64_t v20 = *(unint64_t *)((char *)v4 + v19[6]);
  uint64_t v21 = *(void *)(v20 + 16);
  swift_bridgeObjectRetain();
  if (!v21)
  {
    sub_1000CC520();
    sub_100036814(0, (unint64_t *)&qword_100110C20);
    uint64_t v24 = (void *)sub_1000CC630();
    sub_1000CB230();

    goto LABEL_7;
  }
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    unint64_t v22 = *(void *)(v20 + 16);
    if (v22) {
      goto LABEL_4;
    }
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v20 = sub_1000886F0(v20);
  unint64_t v22 = *(void *)(v20 + 16);
  if (!v22) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v21 = (uint64_t)v10;
  unint64_t v23 = v22 - 1;
  unint64_t v40 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v39 = *(void *)(v7 + 72);
  sub_100089638(v20 + v40 + v39 * (v22 - 1), (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Section);
  *(void *)(v20 + 16) = v23;
  sub_100089638((uint64_t)v16, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Section);
  sub_10004037C(v41, v42, (uint64_t)v13);
  sub_1000895D0((uint64_t)v13, v21, (uint64_t (*)(void))type metadata accessor for Section);
  unint64_t v7 = *(void *)(v20 + 16);
  unint64_t v22 = *(void *)(v20 + 24);
  uint64_t v16 = (char *)(v7 + 1);
  if (v7 >= v22 >> 1) {
LABEL_10:
  }
    unint64_t v20 = sub_100088190(v22 > 1, (int64_t)v16, 1, v20, &qword_100110FF0, (uint64_t (*)(void))type metadata accessor for Section, (uint64_t (*)(void))type metadata accessor for Section);
  *(void *)(v20 + 16) = v16;
  sub_100089638(v21, v20 + v40 + v7 * v39, (uint64_t (*)(void))type metadata accessor for Section);
  sub_100089464((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Section);
  sub_100089464((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Section);
LABEL_7:
  uint64_t v25 = *v4;
  sub_100036850((uint64_t)v4 + v19[5], (uint64_t)a3 + v19[5], &qword_10010DE20);
  uint64_t v26 = *(uint64_t *)((char *)v4 + v19[7]);
  char v27 = *((unsigned char *)v4 + v19[8]);
  sub_100036850((uint64_t)v4 + v19[9], (uint64_t)a3 + v19[9], &qword_10010F340);
  uint64_t v28 = *(uint64_t *)((char *)v4 + v19[10]);
  id v29 = (uint64_t *)((char *)v4 + v19[11]);
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  uint64_t v32 = (uint64_t *)((char *)v4 + v19[12]);
  *a3 = v25;
  *(void *)((char *)a3 + v19[6]) = v20;
  *(void *)((char *)a3 + v19[7]) = v26;
  *((unsigned char *)a3 + v19[8]) = v27;
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *(void *)((char *)a3 + v19[10]) = v28;
  char v35 = (void *)((char *)a3 + v19[11]);
  *char v35 = v30;
  v35[1] = v31;
  id v36 = (void *)((char *)a3 + v19[12]);
  *id v36 = v34;
  v36[1] = v33;
  swift_bridgeObjectRetain();
  id v37 = v25;
  swift_unknownObjectRetain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_10008442C(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x72656E6E6162;
      break;
    case 2:
      unint64_t result = 0x736E6F6974636573;
      break;
    case 3:
      unint64_t result = 0x666E496863746566;
      break;
    case 4:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0x6F74537465737361;
      break;
    case 8:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100084548()
{
  return sub_10008442C(*v0);
}

uint64_t sub_100084550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100089050(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100084578(uint64_t a1)
{
  unint64_t v2 = sub_10008516C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000845B4(uint64_t a1)
{
  unint64_t v2 = sub_10008516C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void TodayContent.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v3 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v3);
  char v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10001D64C(&qword_10010DE20);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10001D64C(&qword_100110E30);
  uint64_t v41 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = (int *)type metadata accessor for TodayContent();
  __chkstk_darwin(v44);
  uint64_t v45 = (id *)((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = a1[3];
  uint64_t v42 = a1;
  sub_100020110(a1, v13);
  sub_10008516C();
  uint64_t v14 = (uint64_t)v43;
  sub_1000CCB10();
  if (v14)
  {
    LODWORD(v15) = 0;
    char v16 = 0;
    uint64_t v17 = v45;
  }
  else
  {
    uint64_t v43 = v8;
    uint64_t v38 = v3;
    uint64_t v39 = v5;
    char v47 = 0;
    sub_100041420();
    sub_1000CC980();
    long long v18 = v46;
    uint64_t v19 = sub_100036814(0, (unint64_t *)&unk_1001112C0);
    sub_100036814(0, &qword_100110E40);
    unint64_t v20 = (void *)sub_1000CC540();
    uint64_t v17 = v45;
    uint64_t v36 = v19;
    if (v20)
    {
      *uint64_t v45 = v20;
      char v47 = 3;
      id v37 = v20;
      sub_1000CC980();
      unint64_t v35 = *((void *)&v18 + 1);
      long long v22 = v46;
      sub_100036814(0, &qword_100110E50);
      uint64_t v23 = sub_1000CC540();
      uint64_t v36 = 0;
      uint64_t v15 = (void *)v23;
      uint64_t v34 = v22;
      if (v23)
      {
        unint64_t v33 = *((void *)&v22 + 1);
        *(id *)((char *)v17 + v44[7]) = (id)v23;
        LOBYTE(v46) = 1;
        sub_100085214();
        id v24 = v15;
        uint64_t v25 = v36;
        sub_1000CC980();
        if (!v25)
        {
          uint64_t v28 = v44;
          char v27 = v45;
          sub_1000365A0(*((uint64_t *)&v18 + 1), (uint64_t)v45 + v44[5], &qword_10010DE20);
          sub_10001D64C(&qword_100110E68);
          char v47 = 2;
          sub_1000852B8();
          sub_1000CC980();
          uint64_t v43 = (char *)v18;
          *(id *)((char *)v27 + v28[6]) = (id)v46;
          LOBYTE(v46) = 4;
          id v29 = v28;
          *((unsigned char *)v27 + v28[8]) = sub_1000CC950() & 1;
          LOBYTE(v46) = 5;
          sub_10004156C();
          uint64_t v30 = (uint64_t)v39;
          sub_1000CC980();
          sub_1000365A0(v30, (uint64_t)v27 + v29[9], &qword_10010F340);
          type metadata accessor for TrackableWidgetState();
          char v47 = 6;
          sub_100089408((unint64_t *)&unk_100110E90, (void (*)(uint64_t))type metadata accessor for TrackableWidgetState);
          sub_1000CC980();
          *(id *)((char *)v45 + v44[10]) = (id)v46;
          sub_10001D64C(&qword_100111300);
          char v47 = 7;
          sub_100085B60(&qword_100110EA0);
          sub_1000CC980();
          *(_OWORD *)((char *)v45 + v44[11]) = v46;
          char v47 = 8;
          sub_1000CC980();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v9);
          sub_100022684((uint64_t)v43, v35);

          sub_100022684(v34, v33);
          uint64_t v31 = (uint64_t)v45;
          *(_OWORD *)((char *)v45 + v44[12]) = v46;
          sub_1000895D0(v31, v40, (uint64_t (*)(void))type metadata accessor for TodayContent);
          sub_1000201A8((uint64_t)v42);
          sub_100089464(v31, (uint64_t (*)(void))type metadata accessor for TodayContent);
          return;
        }
        (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v9);
        sub_100022684(v18, v35);

        sub_100022684(v34, v33);
        char v16 = 9;
        LODWORD(v15) = 1;
        uint64_t v17 = v45;
      }
      else
      {
        sub_1000851C0();
        swift_allocError();
        char v16 = 1;
        unsigned char *v26 = 1;
        swift_willThrow();
        sub_100022684(v18, v35);
        sub_100022684(v34, *((unint64_t *)&v22 + 1));

        (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v9);
      }
    }
    else
    {
      sub_1000851C0();
      swift_allocError();
      unsigned char *v21 = 0;
      swift_willThrow();
      sub_100022684(v18, *((unint64_t *)&v18 + 1));
      (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v9);
      LODWORD(v15) = 0;
      char v16 = 0;
    }
  }
  sub_1000201A8((uint64_t)v42);
  if (v16) {

  }
  if (v15) {
    swift_unknownObjectRelease();
  }
}

uint64_t type metadata accessor for TodayContent()
{
  uint64_t result = qword_100110F50;
  if (!qword_100110F50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10008516C()
{
  unint64_t result = qword_100110E38;
  if (!qword_100110E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110E38);
  }
  return result;
}

unint64_t sub_1000851C0()
{
  unint64_t result = qword_100110E48;
  if (!qword_100110E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110E48);
  }
  return result;
}

unint64_t sub_100085214()
{
  unint64_t result = qword_100110E58;
  if (!qword_100110E58)
  {
    sub_10001D690(&qword_10010DE20);
    sub_100089408(&qword_100110E60, (void (*)(uint64_t))type metadata accessor for Banner);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110E58);
  }
  return result;
}

unint64_t sub_1000852B8()
{
  unint64_t result = qword_100110E70;
  if (!qword_100110E70)
  {
    sub_10001D690(&qword_100110E68);
    sub_100089408(&qword_100110E78, (void (*)(uint64_t))type metadata accessor for Section);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110E70);
  }
  return result;
}

uint64_t TodayContent.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = sub_10001D64C(&qword_100110EA8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100020110(a1, a1[3]);
  sub_10008516C();
  sub_1000CCB30();
  uint64_t v8 = self;
  uint64_t v9 = *v2;
  id v39 = 0;
  id v10 = [v8 archivedDataWithRootObject:v9 requiringSecureCoding:1 error:&v39];
  id v11 = v39;
  if (v10)
  {
    uint64_t v36 = v5;
    uint64_t v12 = (void *)sub_1000CAC10();
    unint64_t v14 = v13;

    id v39 = v12;
    unint64_t v40 = v14;
    char v38 = 0;
    sub_10004172C();
    uint64_t v15 = v37;
    sub_1000CC9F0();
    if (v15)
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v4);
      return sub_100022684((uint64_t)v12, v14);
    }
    else
    {
      unint64_t v34 = 0;
      uint64_t v35 = (uint64_t)v12;
      uint64_t v37 = v4;
      long long v18 = (int *)type metadata accessor for TodayContent();
      uint64_t v19 = v2;
      uint64_t v20 = *(uint64_t *)((char *)v2 + v18[7]);
      id v39 = 0;
      id v21 = [v8 archivedDataWithRootObject:v20 requiringSecureCoding:1 error:&v39];
      id v22 = v39;
      if (v21)
      {
        uint64_t v23 = (void *)sub_1000CAC10();
        unint64_t v25 = v24;

        id v39 = v23;
        unint64_t v40 = v25;
        char v38 = 3;
        uint64_t v26 = v37;
        unint64_t v27 = v34;
        sub_1000CC9F0();
        if (v27)
        {
          (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v26);
          sub_100022684(v35, v14);
          return sub_100022684((uint64_t)v23, v25);
        }
        else
        {
          unint64_t v34 = v25;
          LOBYTE(v39) = 1;
          sub_10001D64C(&qword_10010DE20);
          sub_100085A18();
          sub_1000CC9F0();
          id v39 = *(id *)((char *)v2 + v18[6]);
          char v38 = 2;
          swift_bridgeObjectRetain();
          sub_10001D64C(&qword_100110E68);
          sub_100085ABC();
          sub_1000CC9F0();
          swift_bridgeObjectRelease();
          LOBYTE(v39) = 4;
          sub_1000CC9C0();
          LOBYTE(v39) = 5;
          sub_10001D64C(&qword_10010F340);
          sub_100041824();
          sub_1000CC9F0();
          id v39 = *(id *)((char *)v2 + v18[10]);
          char v38 = 6;
          type metadata accessor for TrackableWidgetState();
          sub_100089408(&qword_100110EE8, (void (*)(uint64_t))type metadata accessor for TrackableWidgetState);
          swift_retain();
          sub_1000CC9F0();
          swift_release();
          id v29 = (char *)v2 + v18[11];
          unint64_t v30 = *((void *)v29 + 1);
          id v39 = *(id *)v29;
          unint64_t v40 = v30;
          char v38 = 7;
          swift_bridgeObjectRetain();
          sub_10001D64C(&qword_100111300);
          v33[1] = sub_100085B60((unint64_t *)&qword_100110EF0);
          sub_1000CC9F0();
          swift_bridgeObjectRelease();
          uint64_t v31 = (char *)v19 + v18[12];
          unint64_t v32 = *((void *)v31 + 1);
          id v39 = *(id *)v31;
          unint64_t v40 = v32;
          char v38 = 8;
          swift_bridgeObjectRetain();
          sub_1000CC9F0();
          sub_100022684((uint64_t)v23, v34);
          sub_100022684(v35, v14);
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(void, uint64_t))(v36 + 8))(0, v26);
        }
      }
      else
      {
        uint64_t v28 = v22;
        sub_1000CAB00();

        swift_willThrow();
        sub_100022684(v35, v14);
        return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v7, v37);
      }
    }
  }
  else
  {
    uint64_t v17 = v11;
    sub_1000CAB00();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

unint64_t sub_100085A18()
{
  unint64_t result = qword_100110EB8;
  if (!qword_100110EB8)
  {
    sub_10001D690(&qword_10010DE20);
    sub_100089408(&qword_100110EC0, (void (*)(uint64_t))type metadata accessor for Banner);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110EB8);
  }
  return result;
}

unint64_t sub_100085ABC()
{
  unint64_t result = qword_100110EC8;
  if (!qword_100110EC8)
  {
    sub_10001D690(&qword_100110E68);
    sub_100089408((unint64_t *)&unk_100110ED0, (void (*)(uint64_t))type metadata accessor for Section);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110EC8);
  }
  return result;
}

uint64_t sub_100085B60(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001D690(&qword_100111300);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100085BC4(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_100085BDC(void *a1)
{
  return TodayContent.encode(to:)(a1);
}

void **initializeBufferWithCopyOfBuffer for TodayContent(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (void **)((char *)a1 + v8);
    id v10 = (void **)((char *)a2 + v8);
    id v11 = (int *)type metadata accessor for Banner();
    uint64_t v12 = (void *)*((void *)v11 - 1);
    unint64_t v13 = (unsigned int (*)(void *, uint64_t, int *))v12[6];
    unint64_t v14 = v4;
    if (v13(v10, 1, v11))
    {
      uint64_t v15 = sub_10001D64C(&qword_10010DE20);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      int v56 = v12;
      uint64_t v16 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v16;
      uint64_t v17 = v10[3];
      uint64_t v9[2] = v10[2];
      v9[3] = v17;
      uint64_t v18 = v10[5];
      void v9[4] = v10[4];
      v9[5] = v18;
      uint64_t v19 = v11[7];
      __dst = (char *)v9 + v19;
      uint64_t v55 = (char *)v10 + v19;
      uint64_t v20 = sub_1000CABE0();
      uint64_t v52 = *(void *)(v20 - 8);
      uint64_t v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
      uint64_t v21 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v54(v55, 1, v21))
      {
        uint64_t v22 = sub_10001D64C(&qword_10010F340);
        memcpy(__dst, v55, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v52 + 16))(__dst, v55, v21);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 1, v21);
      }
      uint64_t v23 = v11[8];
      unint64_t v24 = (void *)((char *)v9 + v23);
      unint64_t v25 = (void *)((char *)v10 + v23);
      uint64_t v26 = v25[1];
      *unint64_t v24 = *v25;
      v24[1] = v26;
      uint64_t v27 = v11[9];
      uint64_t v28 = *(void **)((char *)v10 + v27);
      swift_bridgeObjectRetain();
      if (v28 != (void *)1) {
        id v29 = v28;
      }
      *(void *)((char *)v9 + v27) = v28;
      uint64_t v30 = v11[10];
      uint64_t v31 = (char *)v9 + v30;
      unint64_t v32 = (char *)v10 + v30;
      unint64_t v33 = *(void **)v32;
      unint64_t v34 = (void *)*((void *)v32 + 1);
      char v35 = v32[16];
      sub_10001DB84(*(void **)v32, v34);
      *(void *)uint64_t v31 = v33;
      *((void *)v31 + 1) = v34;
      v31[16] = v35;
      (*((void (**)(void *, void, uint64_t, int *))v56 + 7))(v9, 0, 1, v11);
    }
    uint64_t v36 = a3[7];
    *(void **)((char *)v7 + a3[6]) = *(void **)((char *)a2 + a3[6]);
    *(void **)((char *)v7 + v36) = *(void **)((char *)a2 + v36);
    uint64_t v37 = a3[9];
    *((unsigned char *)v7 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    uint64_t v57 = (char *)v7 + v37;
    char v38 = (char *)a2 + v37;
    uint64_t v39 = sub_1000CABE0();
    uint64_t v40 = *(void *)(v39 - 8);
    uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (v41(v38, 1, v39))
    {
      uint64_t v42 = sub_10001D64C(&qword_10010F340);
      memcpy(v57, v38, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v57, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v57, 0, 1, v39);
    }
    uint64_t v43 = a3[11];
    *(void **)((char *)v7 + a3[10]) = *(void **)((char *)a2 + a3[10]);
    uint64_t v44 = (void **)((char *)v7 + v43);
    uint64_t v45 = (void **)((char *)a2 + v43);
    uint64_t v46 = v45[1];
    *uint64_t v44 = *v45;
    v44[1] = v46;
    uint64_t v47 = a3[12];
    unint64_t v48 = (void **)((char *)v7 + v47);
    long long v49 = (void **)((char *)a2 + v47);
    uint64_t v50 = v49[1];
    void *v48 = *v49;
    v48[1] = v50;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for TodayContent(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = (int *)type metadata accessor for Banner();
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v5 - 1) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = &v4[v5[7]];
    uint64_t v7 = sub_1000CABE0();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    }
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void **)&v4[v5[9]];
    if (v9 != (void *)1) {

    }
    sub_10001DE30(*(void **)&v4[v5[10]], *(void **)&v4[v5[10] + 8]);
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  id v10 = (char *)a1 + *(int *)(a2 + 36);
  uint64_t v11 = sub_1000CABE0();
  uint64_t v12 = *(void *)(v11 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void **initializeWithCopy for TodayContent(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (void **)((char *)a1 + v7);
  uint64_t v9 = (void **)((char *)a2 + v7);
  id v10 = (int *)type metadata accessor for Banner();
  uint64_t v11 = (void *)*((void *)v10 - 1);
  uint64_t v12 = (unsigned int (*)(void *, uint64_t, int *))v11[6];
  id v13 = v6;
  if (v12(v9, 1, v10))
  {
    uint64_t v14 = sub_10001D64C(&qword_10010DE20);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v55 = v11;
    uint64_t v15 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v15;
    uint64_t v16 = v9[3];
    long long v8[2] = v9[2];
    v8[3] = v16;
    uint64_t v17 = v9[5];
    v8[4] = v9[4];
    void v8[5] = v17;
    uint64_t v18 = v10[7];
    uint64_t v53 = (char *)v9 + v18;
    __dst = (char *)v8 + v18;
    uint64_t v19 = sub_1000CABE0();
    uint64_t v51 = *(void *)(v19 - 8);
    uint64_t v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
    uint64_t v20 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v52(v53, 1, v20))
    {
      uint64_t v21 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v53, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(__dst, v53, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v20);
    }
    uint64_t v22 = v10[8];
    uint64_t v23 = (void *)((char *)v8 + v22);
    unint64_t v24 = (void *)((char *)v9 + v22);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = v10[9];
    uint64_t v27 = *(void **)((char *)v9 + v26);
    swift_bridgeObjectRetain();
    if (v27 != (void *)1) {
      id v28 = v27;
    }
    *(void *)((char *)v8 + v26) = v27;
    uint64_t v29 = v10[10];
    uint64_t v30 = (char *)v8 + v29;
    uint64_t v31 = (char *)v9 + v29;
    unint64_t v32 = *(void **)v31;
    unint64_t v33 = (void *)*((void *)v31 + 1);
    char v34 = v31[16];
    sub_10001DB84(*(void **)v31, v33);
    *(void *)uint64_t v30 = v32;
    *((void *)v30 + 1) = v33;
    v30[16] = v34;
    (*((void (**)(void *, void, uint64_t, int *))v55 + 7))(v8, 0, 1, v10);
  }
  uint64_t v35 = a3[7];
  *(void **)((char *)a1 + a3[6]) = *(void **)((char *)a2 + a3[6]);
  *(void **)((char *)a1 + v35) = *(void **)((char *)a2 + v35);
  uint64_t v36 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  int v56 = (char *)a1 + v36;
  uint64_t v37 = (char *)a2 + v36;
  uint64_t v38 = sub_1000CABE0();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  if (v40(v37, 1, v38))
  {
    uint64_t v41 = sub_10001D64C(&qword_10010F340);
    memcpy(v56, v37, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v56, v37, v38);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v56, 0, 1, v38);
  }
  uint64_t v42 = a3[11];
  *(void **)((char *)a1 + a3[10]) = *(void **)((char *)a2 + a3[10]);
  uint64_t v43 = (void **)((char *)a1 + v42);
  uint64_t v44 = (void **)((char *)a2 + v42);
  uint64_t v45 = v44[1];
  void *v43 = *v44;
  v43[1] = v45;
  uint64_t v46 = a3[12];
  uint64_t v47 = (void **)((char *)a1 + v46);
  unint64_t v48 = (void **)((char *)a2 + v46);
  uint64_t v49 = v48[1];
  *uint64_t v47 = *v48;
  v47[1] = v49;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void **assignWithCopy for TodayContent(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = a3[5];
  id v10 = (void **)((char *)a1 + v9);
  uint64_t v11 = (void **)((char *)a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for Banner();
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      sub_100089464((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_7;
    }
    *id v10 = *v11;
    v10[1] = v11[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    void v10[2] = v11[2];
    _OWORD v10[3] = v11[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v10[4] = v11[4];
    v10[5] = v11[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v22 = v12[7];
    uint64_t v23 = (char *)v10 + v22;
    int __dsta = (char *)v11 + v22;
    uint64_t v24 = sub_1000CABE0();
    uint64_t v77 = *(void *)(v24 - 8);
    char v78 = v23;
    uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 48);
    LODWORD(v23) = v25(v23, 1, v24);
    int v26 = v25(__dsta, 1, v24);
    if (v23)
    {
      if (v26)
      {
        size_t v27 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        id v28 = v78;
LABEL_17:
        memcpy(v28, __dsta, v27);
        goto LABEL_20;
      }
      (*(void (**)(void *, char *, uint64_t))(v77 + 16))(v78, __dsta, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v77 + 56))(v78, 0, 1, v24);
    }
    else
    {
      if (v26)
      {
        (*(void (**)(void *, uint64_t))(v77 + 8))(v78, v24);
        size_t v27 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        id v28 = v78;
        goto LABEL_17;
      }
      (*(void (**)(void *, char *, uint64_t))(v77 + 24))(v78, __dsta, v24);
    }
LABEL_20:
    uint64_t v41 = v12[8];
    uint64_t v42 = (void *)((char *)v10 + v41);
    uint64_t v43 = (void *)((char *)v11 + v41);
    *uint64_t v42 = *v43;
    v42[1] = v43[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v44 = v12[9];
    uint64_t v45 = (void *)((char *)v10 + v44);
    uint64_t v46 = *(void **)((char *)v10 + v44);
    uint64_t v47 = *(void **)((char *)v11 + v44);
    if (v46 == (void *)1)
    {
      if (v47 != (void *)1)
      {
        *uint64_t v45 = v47;
        id v48 = v47;
LABEL_27:
        uint64_t v50 = v12[10];
        uint64_t v51 = (char *)v10 + v50;
        uint64_t v52 = (char *)v11 + v50;
        uint64_t v53 = *(void **)v52;
        uint64_t v54 = (void *)*((void *)v52 + 1);
        char v55 = v52[16];
        sub_10001DB84(*(void **)v52, v54);
        int v56 = *(void **)v51;
        uint64_t v57 = (void *)*((void *)v51 + 1);
        *(void *)uint64_t v51 = v53;
        *((void *)v51 + 1) = v54;
        v51[16] = v55;
        sub_10001DE30(v56, v57);
        goto LABEL_28;
      }
    }
    else
    {
      if (v47 != (void *)1)
      {
        *uint64_t v45 = v47;
        id v49 = v47;

        goto LABEL_27;
      }
      sub_10001EA8C((uint64_t)v10 + v44);
      uint64_t v47 = *(void **)((char *)v11 + v44);
    }
    *uint64_t v45 = v47;
    goto LABEL_27;
  }
  if (v16)
  {
LABEL_7:
    uint64_t v21 = sub_10001D64C(&qword_10010DE20);
    memcpy(v10, v11, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_28;
  }
  *id v10 = *v11;
  v10[1] = v11[1];
  void v10[2] = v11[2];
  _OWORD v10[3] = v11[3];
  v10[4] = v11[4];
  v10[5] = v11[5];
  uint64_t v17 = v12[7];
  __dst = (char *)v10 + v17;
  uint64_t v76 = (char *)v11 + v17;
  uint64_t v18 = sub_1000CABE0();
  uint64_t v74 = *(void *)(v18 - 8);
  uint64_t v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
  uint64_t v19 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v75(v76, 1, v19))
  {
    uint64_t v20 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v76, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(__dst, v76, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(__dst, 0, 1, v19);
  }
  uint64_t v29 = v12[8];
  uint64_t v30 = (void *)((char *)v10 + v29);
  uint64_t v31 = (void *)((char *)v11 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  uint64_t v32 = v12[9];
  unint64_t v33 = *(void **)((char *)v11 + v32);
  swift_bridgeObjectRetain();
  if (v33 != (void *)1) {
    id v34 = v33;
  }
  *(void *)((char *)v10 + v32) = v33;
  uint64_t v35 = v12[10];
  uint64_t v36 = (char *)v10 + v35;
  uint64_t v37 = (char *)v11 + v35;
  uint64_t v38 = *(void **)v37;
  uint64_t v39 = (void *)*((void *)v37 + 1);
  char v40 = v37[16];
  sub_10001DB84(*(void **)v37, v39);
  *(void *)uint64_t v36 = v38;
  *((void *)v36 + 1) = v39;
  v36[16] = v40;
  (*(void (**)(void *, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
LABEL_28:
  *(void **)((char *)a1 + a3[6]) = *(void **)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void **)((char *)a1 + a3[7]) = *(void **)((char *)a2 + a3[7]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v58 = a3[9];
  uint64_t v59 = (char *)a1 + v58;
  uint64_t v60 = (char *)a2 + v58;
  uint64_t v61 = sub_1000CABE0();
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
  int v64 = v63(v59, 1, v61);
  int v65 = v63(v60, 1, v61);
  if (!v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v62 + 24))(v59, v60, v61);
      goto LABEL_34;
    }
    (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v61);
    goto LABEL_33;
  }
  if (v65)
  {
LABEL_33:
    uint64_t v66 = sub_10001D64C(&qword_10010F340);
    memcpy(v59, v60, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v59, v60, v61);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
LABEL_34:
  *(void **)((char *)a1 + a3[10]) = *(void **)((char *)a2 + a3[10]);
  swift_retain();
  swift_release();
  uint64_t v67 = a3[11];
  uint64_t v68 = (void **)((char *)a1 + v67);
  uint64_t v69 = (void **)((char *)a2 + v67);
  void *v68 = *v69;
  v68[1] = v69[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v70 = a3[12];
  uint64_t v71 = (void **)((char *)a1 + v70);
  uint64_t v72 = (void **)((char *)a2 + v70);
  *uint64_t v71 = *v72;
  v71[1] = v72[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for TodayContent(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  id v8 = (_OWORD *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for Banner();
  uint64_t v10 = *((void *)v9 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10001D64C(&qword_10010DE20);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    long long v12 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v12;
    uint64_t v7[2] = v8[2];
    uint64_t v13 = v9[7];
    __dst = (char *)v7 + v13;
    uint64_t v14 = (char *)v8 + v13;
    uint64_t v15 = sub_1000CABE0();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dst, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    *(_OWORD *)((char *)v7 + v9[8]) = *(_OWORD *)((char *)v8 + v9[8]);
    *(void *)((char *)v7 + v9[9]) = *(void *)((char *)v8 + v9[9]);
    uint64_t v18 = v9[10];
    uint64_t v19 = (char *)v7 + v18;
    uint64_t v20 = (char *)v8 + v18;
    v19[16] = v20[16];
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v21 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v21) = *(void *)((char *)a2 + v21);
  uint64_t v22 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = sub_1000CABE0();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = sub_10001D64C(&qword_10010F340);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  uint64_t v28 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v28) = *(_OWORD *)((char *)a2 + v28);
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  return a1;
}

void **assignWithTake for TodayContent(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = a3[5];
  id v8 = (void **)((char *)a1 + v7);
  uint64_t v9 = (void **)((char *)a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for Banner();
  uint64_t v11 = *((void *)v10 - 1);
  long long v12 = *(uint64_t (**)(void *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_100089464((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_7;
    }
    uint64_t v22 = v9[1];
    *id v8 = *v9;
    v8[1] = v22;
    swift_bridgeObjectRelease();
    uint64_t v23 = v9[3];
    long long v8[2] = v9[2];
    v8[3] = v23;
    swift_bridgeObjectRelease();
    uint64_t v24 = v9[5];
    v8[4] = v9[4];
    void v8[5] = v24;
    swift_bridgeObjectRelease();
    uint64_t v25 = v10[7];
    uint64_t v26 = (char *)v8 + v25;
    int __dsta = (char *)v9 + v25;
    uint64_t v27 = sub_1000CABE0();
    uint64_t v70 = *(void *)(v27 - 8);
    uint64_t v71 = v26;
    uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 48);
    LODWORD(v26) = v28(v26, 1, v27);
    int v29 = v28(__dsta, 1, v27);
    if (v26)
    {
      if (v29)
      {
        size_t v30 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v31 = v71;
LABEL_15:
        memcpy(v31, __dsta, v30);
        goto LABEL_18;
      }
      (*(void (**)(void *, char *, uint64_t))(v70 + 32))(v71, __dsta, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v70 + 56))(v71, 0, 1, v27);
    }
    else
    {
      if (v29)
      {
        (*(void (**)(void *, uint64_t))(v70 + 8))(v71, v27);
        size_t v30 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v31 = v71;
        goto LABEL_15;
      }
      (*(void (**)(void *, char *, uint64_t))(v70 + 40))(v71, __dsta, v27);
    }
LABEL_18:
    uint64_t v35 = v10[8];
    uint64_t v36 = (void *)((char *)v8 + v35);
    uint64_t v37 = (void *)((char *)v9 + v35);
    uint64_t v39 = *v37;
    uint64_t v38 = v37[1];
    *uint64_t v36 = v39;
    v36[1] = v38;
    swift_bridgeObjectRelease();
    uint64_t v40 = v10[9];
    uint64_t v41 = (void *)((char *)v8 + v40);
    uint64_t v42 = *(void **)((char *)v8 + v40);
    uint64_t v43 = *(void *)((char *)v9 + v40);
    if (v42 != (void *)1)
    {
      if (v43 != 1)
      {
        void *v41 = v43;

        goto LABEL_23;
      }
      sub_10001EA8C((uint64_t)v8 + v40);
      uint64_t v43 = *(void *)((char *)v9 + v40);
    }
    void *v41 = v43;
LABEL_23:
    uint64_t v44 = v10[10];
    uint64_t v45 = (char *)v8 + v44;
    uint64_t v46 = (char *)v9 + v44;
    char v47 = v46[16];
    id v48 = *(void **)v45;
    id v49 = (void *)*((void *)v45 + 1);
    *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
    v45[16] = v47;
    sub_10001DE30(v48, v49);
    goto LABEL_24;
  }
  if (v14)
  {
LABEL_7:
    uint64_t v21 = sub_10001D64C(&qword_10010DE20);
    memcpy(v8, v9, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_24;
  }
  long long v15 = *((_OWORD *)v9 + 1);
  *(_OWORD *)id v8 = *(_OWORD *)v9;
  *((_OWORD *)v8 + 1) = v15;
  *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
  uint64_t v16 = v10[7];
  __dst = (char *)v8 + v16;
  uint64_t v17 = (char *)v9 + v16;
  uint64_t v18 = sub_1000CABE0();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(__dst, v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
  }
  *(_OWORD *)((char *)v8 + v10[8]) = *(_OWORD *)((char *)v9 + v10[8]);
  *(void *)((char *)v8 + v10[9]) = *(void *)((char *)v9 + v10[9]);
  uint64_t v32 = v10[10];
  unint64_t v33 = (char *)v8 + v32;
  id v34 = (char *)v9 + v32;
  v33[16] = v34[16];
  *(_OWORD *)unint64_t v33 = *(_OWORD *)v34;
  (*(void (**)(void *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
LABEL_24:
  *(void **)((char *)a1 + a3[6]) = *(void **)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void **)((char *)a1 + a3[7]) = *(void **)((char *)a2 + a3[7]);
  swift_unknownObjectRelease();
  uint64_t v50 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  uint64_t v53 = sub_1000CABE0();
  uint64_t v54 = *(void *)(v53 - 8);
  char v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  int v56 = v55(v51, 1, v53);
  int v57 = v55(v52, 1, v53);
  if (!v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 40))(v51, v52, v53);
      goto LABEL_30;
    }
    (*(void (**)(char *, uint64_t))(v54 + 8))(v51, v53);
    goto LABEL_29;
  }
  if (v57)
  {
LABEL_29:
    uint64_t v58 = sub_10001D64C(&qword_10010F340);
    memcpy(v51, v52, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v51, v52, v53);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
LABEL_30:
  *(void **)((char *)a1 + a3[10]) = *(void **)((char *)a2 + a3[10]);
  swift_release();
  uint64_t v59 = a3[11];
  uint64_t v60 = (void **)((char *)a1 + v59);
  uint64_t v61 = (uint64_t *)((char *)a2 + v59);
  uint64_t v63 = *v61;
  uint64_t v62 = v61[1];
  *uint64_t v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease();
  uint64_t v64 = a3[12];
  int v65 = (void **)((char *)a1 + v64);
  uint64_t v66 = (uint64_t *)((char *)a2 + v64);
  uint64_t v68 = *v66;
  uint64_t v67 = v66[1];
  *int v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TodayContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100087774);
}

uint64_t sub_100087774(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10001D64C(&qword_10010DE20);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      long long v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10001D64C(&qword_10010F340);
      int v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for TodayContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000878BC);
}

void *sub_1000878BC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_10001D64C(&qword_10010DE20);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      long long v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10001D64C(&qword_10010F340);
      int v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 36);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1000879F0()
{
  sub_100087B38(319, qword_100110F60, (void (*)(uint64_t))type metadata accessor for Banner);
  if (v0 <= 0x3F)
  {
    sub_100087B38(319, (unint64_t *)&qword_10010F528, (void (*)(uint64_t))&type metadata accessor for URL);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100087B38(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1000CC640();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for TodayContent.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100087C58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TodayContent.Errors()
{
  return &type metadata for TodayContent.Errors;
}

unsigned char *storeEnumTagSinglePayload for TodayContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100087D5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TodayContent.CodingKeys()
{
  return &type metadata for TodayContent.CodingKeys;
}

unint64_t sub_100087D98()
{
  unint64_t result = qword_100110FB8;
  if (!qword_100110FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110FB8);
  }
  return result;
}

unint64_t sub_100087DF0()
{
  unint64_t result = qword_100110FC0;
  if (!qword_100110FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110FC0);
  }
  return result;
}

unint64_t sub_100087E48()
{
  unint64_t result = qword_100110FC8;
  if (!qword_100110FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110FC8);
  }
  return result;
}

unint64_t sub_100087EA0()
{
  unint64_t result = qword_100110FD0;
  if (!qword_100110FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110FD0);
  }
  return result;
}

void *sub_100087EF4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10001D64C((uint64_t *)&unk_10010E860);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      _OWORD v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10008886C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100088004(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100088190(a1, a2, a3, a4, &qword_100111008, (uint64_t (*)(void))type metadata accessor for Session, (uint64_t (*)(void))type metadata accessor for Session);
}

void *sub_100088038(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100088568(a1, a2, a3, a4, &qword_10010E8B8, &qword_10010E8C0);
}

void *sub_10008804C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10001D64C(&qword_100111018);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      _OWORD v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100088960(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10008815C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100088190(a1, a2, a3, a4, (uint64_t *)&unk_100110FF8, type metadata accessor for Item, type metadata accessor for Item);
}

uint64_t sub_100088190(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10001D64C(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = sub_1000CC860();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100088EF4(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_100088410(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10001D64C((uint64_t *)&unk_100111040);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      _OWORD v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100088E00(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100088520(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100088190(a1, a2, a3, a4, &qword_100111010, type metadata accessor for VisibleRectChangedEvent, type metadata accessor for VisibleRectChangedEvent);
}

void *sub_100088554(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100088568(a1, a2, a3, a4, &qword_100111028, (uint64_t *)&unk_100111030);
}

void *sub_100088568(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10001D64C(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = j__malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v15 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000894C4(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100088698(unint64_t a1)
{
  return sub_100088190(0, *(void *)(a1 + 16), 0, a1, (uint64_t *)&unk_100110FF8, type metadata accessor for Item, type metadata accessor for Item);
}

uint64_t sub_1000886F0(unint64_t a1)
{
  return sub_100088190(0, *(void *)(a1 + 16), 0, a1, &qword_100110FF0, (uint64_t (*)(void))type metadata accessor for Section, (uint64_t (*)(void))type metadata accessor for Section);
}

void *sub_100088748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  void v14[3] = type metadata accessor for EngagementURLProvider();
  v14[4] = &off_1000FE218;
  v14[0] = a2;
  swift_retain();
  id v8 = [a6 sections];
  id v9 = [v8 array];

  uint64_t v10 = sub_1000CC3B0();
  uint64_t v11 = sub_10006D51C(v10);
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_100088A6C((unint64_t)v11, (void (*)(uint64_t, id *))sub_100089450);
  swift_bridgeObjectRelease();
  sub_1000201A8((uint64_t)v14);
  return v12;
}

uint64_t sub_10008886C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1000CC8D0();
  __break(1u);
  return result;
}

uint64_t sub_100088960(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_10001D64C(&qword_100111020);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1000CC8D0();
  __break(1u);
  return result;
}

void *sub_100088A6C(unint64_t a1, void (*a2)(uint64_t, id *))
{
  uint64_t v3 = v2;
  uint64_t v27 = a2;
  uint64_t v5 = sub_10001D64C(&qword_100110FE8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for Section();
  uint64_t v22 = *(void *)(v26 - 8);
  uint64_t v8 = __chkstk_darwin(v26);
  uint64_t v25 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v21 = (uint64_t)v20 - v10;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v11; uint64_t v11 = sub_1000CC890())
  {
    v20[1] = v3;
    unint64_t v24 = a1 & 0xC000000000000001;
    uint64_t v12 = _swiftEmptyArrayStorage;
    uint64_t v13 = (unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    uint64_t v14 = 4;
    unint64_t v23 = (id *)a1;
    while (1)
    {
      uint64_t v15 = v24 ? (id *)sub_1000CC780() : (id *)*(id *)(a1 + 8 * v14);
      a1 = (unint64_t)v15;
      uint64_t v3 = v14 - 3;
      if (__OFADD__(v14 - 4, 1)) {
        break;
      }
      v27(v14 - 4, v15);

      if ((*v13)(v7, 1, v26) == 1)
      {
        sub_1000227A8((uint64_t)v7, &qword_100110FE8);
      }
      else
      {
        uint64_t v16 = v21;
        sub_100089638((uint64_t)v7, v21, (uint64_t (*)(void))type metadata accessor for Section);
        sub_100089638(v16, v25, (uint64_t (*)(void))type metadata accessor for Section);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v12 = (void *)sub_100088190(0, v12[2] + 1, 1, (unint64_t)v12, &qword_100110FF0, (uint64_t (*)(void))type metadata accessor for Section, (uint64_t (*)(void))type metadata accessor for Section);
        }
        unint64_t v18 = v12[2];
        unint64_t v17 = v12[3];
        if (v18 >= v17 >> 1) {
          uint64_t v12 = (void *)sub_100088190(v17 > 1, v18 + 1, 1, (unint64_t)v12, &qword_100110FF0, (uint64_t (*)(void))type metadata accessor for Section, (uint64_t (*)(void))type metadata accessor for Section);
        }
        void v12[2] = v18 + 1;
        sub_100089638(v25, (uint64_t)v12+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v18, (uint64_t (*)(void))type metadata accessor for Section);
      }
      ++v14;
      a1 = (unint64_t)v23;
      if (v3 == v11)
      {
        swift_bridgeObjectRelease();
        return v12;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100088E00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1000CC8D0();
  __break(1u);
  return result;
}

uint64_t sub_100088EF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_1000CC8D0();
  __break(1u);
  return result;
}

uint64_t sub_100089050(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001000DC320 || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72656E6E6162 && a2 == 0xE600000000000000 || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736E6F6974636573 && a2 == 0xE800000000000000 || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x666E496863746566 && a2 == 0xED0000617461446FLL || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001000DC340 || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001000DC360 || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001000DC380 || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6F74537465737361 && a2 == 0xEC00000044496572 || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001000DC3A0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v5 = sub_1000CCA30();
    swift_bridgeObjectRelease();
    if (v5) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t sub_100089408(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100089450@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10006DC2C(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(unsigned char *)(v3 + 40), *(void *)(v3 + 48), a3);
}

uint64_t sub_100089464(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000894C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      sub_10001D64C(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = sub_1000CC8D0();
  __break(1u);
  return result;
}

uint64_t sub_1000895D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100089638(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000896A0()
{
  uint64_t v0 = sub_10001D64C(&qword_100111058);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1000CB220();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001D64C(&qword_100111060);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v17 - v12;
  sub_1000CB210();
  sub_1000CB200();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v11, v7);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v14(v11, v13, v7);
  v14(v2, v11, v7);
  sub_1000CB2C0();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v13, v7);
  return ((uint64_t (*)(char *, uint64_t))v15)(v11, v7);
}

uint64_t sub_100089908()
{
  uint64_t v0 = sub_1000CB0B0();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D64C(&qword_100111080);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000D37D0;
  uint64_t v5 = type metadata accessor for WidgetAnalyticsAssembly();
  uint64_t v6 = swift_allocObject();
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 64) = sub_10008A39C(&qword_100111088, (void (*)(uint64_t))type metadata accessor for WidgetAnalyticsAssembly);
  *(void *)(v4 + 32) = v6;
  uint64_t v7 = type metadata accessor for WidgetServiceAssembly();
  uint64_t v8 = swift_allocObject();
  *(void *)(v4 + 96) = v7;
  *(void *)(v4 + 104) = sub_10008A39C(&qword_100111090, (void (*)(uint64_t))type metadata accessor for WidgetServiceAssembly);
  *(void *)(v4 + 72) = v8;
  uint64_t v9 = type metadata accessor for TagWidgetServiceAssembly();
  uint64_t v10 = swift_allocObject();
  *(void *)(v4 + 136) = v9;
  *(void *)(v4 + 144) = sub_10008A39C(&qword_100111098, (void (*)(uint64_t))type metadata accessor for TagWidgetServiceAssembly);
  *(void *)(v4 + 112) = v10;
  sub_1000CAF00();
  swift_allocObject();
  sub_1000CAEF0();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Container.Environment.normal(_:), v0);
  sub_1000CB0E0();
  swift_allocObject();
  uint64_t result = sub_1000CB0C0();
  qword_10011AC18 = result;
  return result;
}

uint64_t sub_100089B6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v1 = sub_10001D64C(&qword_10010DDA0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v47 = v1;
  uint64_t v48 = v2;
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10001D64C(&qword_10010DD98);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v51 = v5;
  uint64_t v52 = v6;
  __chkstk_darwin(v5);
  uint64_t v46 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10001D64C(&qword_10010DD90);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v53 = v8;
  uint64_t v54 = v9;
  __chkstk_darwin(v8);
  id v49 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10001D64C(&qword_10010DD88);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v55 = v11;
  uint64_t v56 = v12;
  __chkstk_darwin(v11);
  uint64_t v50 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_1000CC1F0();
  uint64_t v59 = v14;
  uint64_t v60 = sub_10008A218;
  uint64_t v61 = 0;
  sub_1000CB660();
  uint64_t v15 = sub_1000CB9C0();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  uint64_t v20 = sub_10001D64C(&qword_10010DDA8);
  uint64_t v21 = sub_100036A5C(&qword_10010DDB0, &qword_10010DDA8);
  sub_1000CB730();
  sub_100036118(v15, v17, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001D64C(&qword_100111078);
  uint64_t v22 = sub_1000CBFC0();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v23 + 72);
  unint64_t v25 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1000D5C40;
  unint64_t v27 = v26 + v25;
  uint64_t v28 = *(void (**)(unint64_t, void, uint64_t))(v23 + 104);
  v28(v27, enum case for WidgetFamily.accessoryRectangular(_:), v22);
  v28(v27 + v24, enum case for WidgetFamily.systemSmall(_:), v22);
  v28(v27 + 2 * v24, enum case for WidgetFamily.systemMedium(_:), v22);
  v28(v27 + 3 * v24, enum case for WidgetFamily.systemLarge(_:), v22);
  uint64_t v58 = v20;
  uint64_t v59 = v21;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v31 = v46;
  uint64_t v30 = v47;
  sub_1000CB720();
  swift_bridgeObjectRelease();
  uint64_t v32 = v30;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v4, v30);
  sub_1000CB660();
  uint64_t v33 = sub_1000CB9C0();
  uint64_t v35 = v34;
  LOBYTE(v23) = v36 & 1;
  uint64_t v58 = v32;
  uint64_t v59 = OpaqueTypeConformance2;
  uint64_t v37 = swift_getOpaqueTypeConformance2();
  uint64_t v38 = v49;
  uint64_t v39 = v51;
  sub_1000CB710();
  sub_100036118(v33, v35, v23);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v31, v39);
  uint64_t v58 = v39;
  uint64_t v59 = v37;
  uint64_t v40 = swift_getOpaqueTypeConformance2();
  uint64_t v41 = v50;
  uint64_t v42 = v53;
  sub_1000CB750();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v38, v42);
  id v43 = [self currentDevice];
  [v43 userInterfaceIdiom];

  uint64_t v58 = v42;
  uint64_t v59 = v40;
  swift_getOpaqueTypeConformance2();
  uint64_t v44 = v55;
  sub_1000CB740();
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v41, v44);
}

uint64_t sub_10008A218()
{
  if (qword_10010DD70 != -1) {
    swift_once();
  }
  return sub_1000CB0D0();
}

int main(int argc, const char **argv, const char **envp)
{
  return 0;
}

unint64_t sub_10008A2B4()
{
  unint64_t result = qword_100111050;
  if (!qword_100111050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111050);
  }
  return result;
}

ValueMetadata *type metadata accessor for TagWidgetBundle()
{
  return &type metadata for TagWidgetBundle;
}

uint64_t sub_10008A318()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for TagWidget()
{
  return &type metadata for TagWidget;
}

uint64_t sub_10008A344()
{
  return sub_100036A5C(&qword_100111068, &qword_100111070);
}

uint64_t sub_10008A380()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10008A39C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008A3E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10008A544()
{
  swift_release();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for TodayBannerStateStore()
{
  return self;
}

unint64_t sub_10008A5A4()
{
  unint64_t result = qword_100111140;
  if (!qword_100111140)
  {
    type metadata accessor for TodayBannerStateStore();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111140);
  }
  return result;
}

uint64_t sub_10008A5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Configurable.setting<A>(_:)(a1, *v5, a5);
}

uint64_t sub_10008A628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Configurable.setting<A>(_:defaultValue:)(a1, a2, *v6, a6);
}

uint64_t sub_10008A658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return Configurable.setting<A>(_:_:)(a1, a2, a3, *v7, a7);
}

uint64_t sub_10008A688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return Configurable.setting<A>(_:defaultValue:_:)(a1, a2, a3, a4, *v8, a8);
}

uint64_t sub_10008A6B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Updatable.save<A>(setting:value:)(a1, a2, *v6, a6);
}

uint64_t sub_10008A6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Updatable.reset<A>(setting:)(a1, *v5, a5);
}

uint64_t sub_10008A718(uint64_t a1)
{
  return Updatable.apply(preset:)(a1, *v1);
}

unint64_t sub_10008A744(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001D64C(&qword_100111358);
  uint64_t v2 = (void *)sub_1000CC8C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_10003CE3C();
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008A850(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001D64C(&qword_100111348);
  uint64_t v2 = sub_1000CC8C0();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100036850(v6, (uint64_t)&v13, &qword_100111350);
    uint64_t v7 = v13;
    unint64_t result = sub_10003CE3C(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_100022804(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008A980(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001D64C(&qword_100111340);
  uint64_t v2 = (void *)sub_1000CC8C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = sub_10003CF48((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008AA8C(uint64_t a1)
{
  uint64_t v2 = sub_10001D64C(&qword_100111388);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001D64C(&qword_100111390);
  uint64_t v6 = sub_1000CC8C0();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100036850(v12, (uint64_t)v5, &qword_100111388);
    unint64_t result = sub_10003CF8C((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_1000CABE0();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    uint64_t v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008AC80(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001D64C(&qword_100111360);
  uint64_t v2 = (void *)sub_1000CC8C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 56);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 3);
    uint64_t v6 = (uint64_t)*(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    id v9 = v8;
    id v10 = v7;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10003CED0(v5, v6);
    if (v12) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v13 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v13 = v5;
    v13[1] = v6;
    long long v14 = (void *)(v2[7] + 16 * result);
    *long long v14 = v8;
    v14[1] = v10;
    uint64_t v15 = v2[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v2[2] = v17;
    v4 += 4;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008ADA8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001D64C(&qword_1001113B0);
  uint64_t v2 = sub_1000CC8C0();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100036850(v6, (uint64_t)v15, &qword_1001113B8);
    unint64_t result = sub_10003D010((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_100022804(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008AEEC(uint64_t a1)
{
  uint64_t v2 = sub_10001D64C(&qword_100111C50);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001D64C(&qword_100111380);
  uint64_t v6 = sub_1000CC8C0();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  unint64_t v25 = &v5[*(int *)(v2 + 48)];
  uint64_t v9 = v6 + 64;
  uint64_t v10 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v11 = *(void *)(v3 + 72);
  v23[1] = a1;
  uint64_t v24 = v11;
  swift_retain();
  while (1)
  {
    sub_100036850(v10, (uint64_t)v5, &qword_100111C50);
    unint64_t result = sub_10003CF8C((uint64_t)v5);
    if (v13) {
      break;
    }
    unint64_t v14 = result;
    *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v15 = v7[6];
    uint64_t v16 = sub_1000CABE0();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void (**)(unint64_t, char *, uint64_t))(v17 + 32);
    unint64_t v19 = *(void *)(v17 + 72) * v14;
    v18(v15 + v19, v5, v16);
    unint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v18)(v7[7] + v19, v25, v16);
    uint64_t v20 = v7[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    uint64_t v7[2] = v22;
    v10 += v24;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_10008B104()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
  uint64_t v2 = sub_10008C0A0();
  id v3 = [v1 sections];
  id v4 = [v3 array];

  uint64_t v5 = sub_1000CC3B0();
  uint64_t v6 = sub_10006D51C(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_10003E088((unint64_t)v6, (uint64_t)v2);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n();
  return v7;
}

unint64_t sub_10008B2EC(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x44497972746E65;
      break;
    case 2:
      unint64_t result = 0x4473746C75736572;
      break;
    case 3:
      unint64_t result = 0x666E496863746566;
      break;
    case 4:
      unint64_t result = 0x6F4374756F79616CLL;
      break;
    case 5:
      unint64_t result = 0x49746E65746E6F63;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0x52656C6269736976;
      break;
    case 8:
      unint64_t result = 0x6E694B6B63617473;
      break;
    case 9:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10008B45C(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x44497972746E65;
      break;
    case 2:
      unint64_t result = 0x4473746C75736572;
      break;
    case 3:
      unint64_t result = 0x666E496863746566;
      break;
    case 4:
      unint64_t result = 0x6F4374756F79616CLL;
      break;
    case 5:
      unint64_t result = 0x49746E65746E6F63;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0x52656C6269736976;
      break;
    case 8:
      unint64_t result = 0x6E694B6B63617473;
      break;
    case 9:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10008B5CC(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10008B2EC(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10008B2EC(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1000CCA30();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10008B658()
{
  char v1 = *v0;
  sub_1000CCAC0();
  sub_10008B2EC(v1);
  sub_1000CC270();
  swift_bridgeObjectRelease();
  return sub_1000CCAF0();
}

uint64_t sub_10008B6BC()
{
  sub_10008B2EC(*v0);
  sub_1000CC270();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10008B710()
{
  char v1 = *v0;
  sub_1000CCAC0();
  sub_10008B2EC(v1);
  sub_1000CC270();
  swift_bridgeObjectRelease();
  return sub_1000CCAF0();
}

uint64_t sub_10008B770@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100094B58(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t sub_10008B7A0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10008B2EC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10008B7CC()
{
  return sub_10008B45C(*v0);
}

uint64_t sub_10008B7D4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100094B58(a1, a2);
  *a3 = result;
  return result;
}

void sub_10008B7FC(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_10008B808(uint64_t a1)
{
  unint64_t v2 = sub_100092170();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008B844(uint64_t a1)
{
  unint64_t v2 = sub_100092170();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008B978(void *a1)
{
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results), "sections"));
  id v4 = [v3 array];

  uint64_t v5 = sub_1000CC3B0();
  unint64_t v6 = (unint64_t)sub_10006D51C(v5);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1000CC890();
    uint64_t result = swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      unint64_t v9 = 0;
      unint64_t v22 = v6 & 0xC000000000000001;
      unint64_t v19 = v6 + 32;
      uint64_t v20 = v6 & 0xFFFFFFFFFFFFFF8;
      uint64_t v21 = v8;
      do
      {
        if (v22)
        {
          id v10 = (id)sub_1000CC780();
          BOOL v11 = __OFADD__(v9++, 1);
          if (v11)
          {
LABEL_27:
            __break(1u);
            goto LABEL_28;
          }
        }
        else
        {
          if (v9 >= *(void *)(v20 + 16))
          {
            __break(1u);
            return result;
          }
          id v10 = *(id *)(v19 + 8 * v9);
          BOOL v11 = __OFADD__(v9++, 1);
          if (v11) {
            goto LABEL_27;
          }
        }
        uint64_t v23 = v10;
        sub_10006BDD0();
        unint64_t v13 = v12;
        if (v12 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v14 = sub_1000CC890();
          swift_bridgeObjectRelease();
          if (v14)
          {
LABEL_13:
            uint64_t v15 = 0;
            unint64_t v6 = v13 & 0xC000000000000001;
            do
            {
              if (v6)
              {
                uint64_t v16 = sub_1000CC780();
                uint64_t v17 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_26;
                }
              }
              else
              {
                uint64_t v16 = *(void *)(v13 + 8 * v15 + 32);
                swift_unknownObjectRetain();
                uint64_t v17 = v15 + 1;
                if (__OFADD__(v15, 1))
                {
LABEL_26:
                  __break(1u);
                  goto LABEL_27;
                }
              }
              unsigned int v18 = [a1 isEqual:v16 v19];
              swift_unknownObjectRelease();
              if (v18)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                return v15;
              }
              ++v15;
            }
            while (v17 != v14);
          }
        }
        else
        {
          uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v14) {
            goto LABEL_13;
          }
        }

        uint64_t result = swift_bridgeObjectRelease();
      }
      while (v9 != v21);
    }
  }
  swift_bridgeObjectRelease();
  return -1;
}

uint64_t sub_10008BC54(void *a1)
{
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results), "sections"));
  id v4 = [v3 array];

  uint64_t v5 = sub_1000CC3B0();
  unint64_t v6 = sub_10006D51C(v5);
  swift_bridgeObjectRelease();
  id v7 = a1;
  uint64_t v8 = sub_100094CB4((unint64_t)v6, (uint64_t)v7);
  LOBYTE(v4) = v9;
  swift_bridgeObjectRelease();

  if (v4) {
    return -1;
  }
  if (v8 < 0)
  {
    sub_1000CC860();
    __break(1u);
    return -1;
  }
  return v8;
}

void *sub_10008BDCC()
{
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
  id v2 = [v1 sections];
  id v3 = [v2 array];

  uint64_t v4 = sub_1000CC3B0();
  uint64_t v5 = sub_10006D51C(v4);

  swift_bridgeObjectRelease();
  sub_10008C0A0();
  sub_100036814(0, (unint64_t *)&qword_10010F590);
  sub_100036814(0, &qword_100111E30);
  sub_1000947B8();
  uint64_t v6 = sub_1000CC3E0();
  swift_bridgeObjectRelease();
  id v7 = sub_100094DB8((unint64_t)v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

void *sub_10008C0A0()
{
  uint64_t v1 = sub_1000CB6D0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  v470 = (char *)&v412 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  v467 = (char *)&v412 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  v486 = (uint64_t)&v412 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v485 = (uint64_t)&v412 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v500 = (char *)&v412 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v501 = (char *)&v412 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v519 = (char *)&v412 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v518 = (char *)&v412 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v520 = (char *)&v412 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v543 = (char *)&v412 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v548 = (char *)&v412 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v536 = (char *)&v412 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v489 = (char *)&v412 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v484 = (char *)&v412 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v497 = (uint64_t)&v412 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v496 = (uint64_t)&v412 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v469 = (char *)&v412 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v466 = (char *)&v412 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v483 = (uint64_t)&v412 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v482 = (uint64_t)&v412 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v488 = (char *)&v412 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v481 = (char *)&v412 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v495 = (uint64_t)&v412 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v494 = (uint64_t)&v412 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  v468 = (char *)&v412 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v465 = (char *)&v412 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v480 = (uint64_t)&v412 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  uint64_t v479 = (uint64_t)&v412 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  v487 = (char *)&v412 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v478 = (char *)&v412 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v493 = (uint64_t)&v412 - v64;
  __chkstk_darwin(v63);
  uint64_t v492 = (uint64_t)&v412 - v65;
  uint64_t v66 = (int *)type metadata accessor for LayoutContext();
  uint64_t v67 = __chkstk_darwin(v66);
  uint64_t v69 = (char *)&v412 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __chkstk_darwin(v67);
  v441 = (char *)&v412 - v71;
  uint64_t v72 = __chkstk_darwin(v70);
  v440 = (char *)&v412 - v73;
  uint64_t v74 = __chkstk_darwin(v72);
  v439 = (char *)&v412 - v75;
  uint64_t v76 = __chkstk_darwin(v74);
  v438 = (char *)&v412 - v77;
  uint64_t v78 = __chkstk_darwin(v76);
  v437 = (char *)&v412 - v79;
  uint64_t v80 = __chkstk_darwin(v78);
  v436 = (char *)&v412 - v81;
  uint64_t v82 = __chkstk_darwin(v80);
  v435 = (char *)&v412 - v83;
  uint64_t v84 = __chkstk_darwin(v82);
  v434 = (char *)&v412 - v85;
  uint64_t v86 = __chkstk_darwin(v84);
  v433 = (char *)&v412 - v87;
  uint64_t v88 = __chkstk_darwin(v86);
  v432 = (char *)&v412 - v89;
  uint64_t v90 = __chkstk_darwin(v88);
  v431 = (char *)&v412 - v91;
  uint64_t v92 = __chkstk_darwin(v90);
  v430 = (char *)&v412 - v93;
  uint64_t v94 = __chkstk_darwin(v92);
  v429 = (char *)&v412 - v95;
  uint64_t v96 = __chkstk_darwin(v94);
  v428 = (char *)&v412 - v97;
  uint64_t v98 = __chkstk_darwin(v96);
  v427 = (char *)&v412 - v99;
  uint64_t v100 = __chkstk_darwin(v98);
  v426 = (char *)&v412 - v101;
  uint64_t v102 = __chkstk_darwin(v100);
  v425 = (char *)&v412 - v103;
  uint64_t v104 = __chkstk_darwin(v102);
  v424 = (char *)&v412 - v105;
  uint64_t v106 = __chkstk_darwin(v104);
  v423 = (char *)&v412 - v107;
  uint64_t v108 = __chkstk_darwin(v106);
  v422 = (char *)&v412 - v109;
  uint64_t v110 = __chkstk_darwin(v108);
  v421 = (char *)&v412 - v111;
  __chkstk_darwin(v110);
  v420 = (char *)&v412 - v112;
  uint64_t v113 = sub_1000CBEC0();
  uint64_t v114 = *(void *)(v113 - 8);
  uint64_t v115 = __chkstk_darwin(v113);
  v464 = (char *)&v412 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = __chkstk_darwin(v115);
  v463 = (char *)&v412 - v118;
  uint64_t v119 = __chkstk_darwin(v117);
  v517 = (char *)&v412 - v120;
  uint64_t v121 = __chkstk_darwin(v119);
  v516 = (char *)&v412 - v122;
  uint64_t v123 = __chkstk_darwin(v121);
  v477 = (char *)&v412 - v124;
  uint64_t v125 = __chkstk_darwin(v123);
  v476 = (char *)&v412 - v126;
  uint64_t v127 = __chkstk_darwin(v125);
  v462 = (char *)&v412 - v128;
  uint64_t v129 = __chkstk_darwin(v127);
  v461 = (char *)&v412 - v130;
  uint64_t v131 = __chkstk_darwin(v129);
  v515 = (char *)&v412 - v132;
  uint64_t v133 = __chkstk_darwin(v131);
  v514 = (char *)&v412 - v134;
  uint64_t v135 = __chkstk_darwin(v133);
  v513 = (char *)&v412 - v136;
  uint64_t v137 = __chkstk_darwin(v135);
  v475 = (char *)&v412 - v138;
  uint64_t v139 = __chkstk_darwin(v137);
  v474 = (char *)&v412 - v140;
  uint64_t v141 = __chkstk_darwin(v139);
  v460 = (char *)&v412 - v142;
  uint64_t v143 = __chkstk_darwin(v141);
  v459 = (char *)&v412 - v144;
  uint64_t v145 = __chkstk_darwin(v143);
  v512 = (char *)&v412 - v146;
  uint64_t v147 = __chkstk_darwin(v145);
  v473 = (char *)&v412 - v148;
  uint64_t v149 = __chkstk_darwin(v147);
  v472 = (char *)&v412 - v150;
  uint64_t v151 = __chkstk_darwin(v149);
  v511 = (char *)&v412 - v152;
  uint64_t v153 = __chkstk_darwin(v151);
  v510 = (char *)&v412 - v154;
  __chkstk_darwin(v153);
  uint64_t v156 = (char *)&v412 - v155;
  Swift::Int v157 = (CGFloat *)(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect + 32))
  {
    return (void *)sub_10008A980((uint64_t)_swiftEmptyArrayStorage);
  }
  v417 = v69;
  CGFloat v160 = v157[2];
  CGFloat v159 = v157[3];
  CGFloat v161 = *v157;
  CGFloat v162 = v157[1];
  id v163 = *(id *)(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
  v568.origin.x = v161;
  v568.origin.y = v162;
  v568.size.width = v160;
  v568.size.height = v159;
  CGFloat MinX = CGRectGetMinX(v568);
  uint64_t v165 = (double *)(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext);
  uint64_t v166 = v66[7];
  uint64_t v167 = (uint64_t)v165 + v166;
  double v168 = *(double *)((char *)v165 + v166);
  double v169 = ceil(MinX * v168);
  if (v168 >= v169) {
    double v170 = v169;
  }
  else {
    double v170 = *(double *)((char *)v165 + v166);
  }
  v569.origin.x = v161;
  v569.origin.y = v162;
  v569.size.width = v160;
  v569.size.height = v159;
  CGFloat MinY = CGRectGetMinY(v569);
  double v172 = *(double *)(v167 + 8);
  double v173 = ceil(MinY * v172);
  if (v172 >= v173) {
    double v174 = v173;
  }
  else {
    double v174 = *(double *)(v167 + 8);
  }
  v570.origin.x = v161;
  v570.origin.y = v162;
  v570.size.width = v160;
  v570.size.height = v159;
  double v175 = ceil(v168 * CGRectGetWidth(v570));
  if (v168 < v175) {
    double v175 = v168;
  }
  CGFloat v509 = v175;
  v571.origin.x = v161;
  v571.origin.y = v162;
  double v176 = v172;
  v571.size.width = v160;
  v571.size.height = v159;
  double v177 = ceil(v172 * CGRectGetHeight(v571));
  if (v172 >= v177) {
    CGFloat v178 = v177;
  }
  else {
    CGFloat v178 = v172;
  }
  uint64_t v179 = v66[6];
  v551 = v165;
  uint64_t v180 = (uint64_t)v165 + v179;
  uint64_t v181 = *(void (**)(char *))(v114 + 104);
  int v538 = enum case for InternalWidgetFamily.systemSmall(_:);
  v181(v156);
  sub_100092218(&qword_100111318, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
  char v182 = sub_1000CC190();
  (*(void (**)(char *, uint64_t))(v114 + 8))(v156, v113);
  id v452 = v163;
  if (v182)
  {
    v574.origin.x = 0.0;
    v574.origin.y = 0.0;
    v572.origin.x = v170;
    v572.origin.y = v174;
    v572.size.width = v509;
    v572.size.height = v178;
    v574.size.width = v168;
    v574.size.height = v172;
    if (CGRectContainsRect(v572, v574))
    {
      id v183 = v452;
      id v184 = [v452 sections];
      id v185 = [v184 array];

      uint64_t v186 = sub_1000CC3B0();
      sub_10006D51C(v186);
      swift_bridgeObjectRelease();
      sub_100036814(0, (unint64_t *)&qword_10010F590);
      sub_10001D64C(&qword_100111330);
      sub_1000947B8();
      unint64_t v187 = sub_1000CC3E0();

      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v187 = sub_10008A980((uint64_t)_swiftEmptyArrayStorage);
    }
    return (void *)v187;
  }
  id v188 = [v163 sections];
  id v189 = [v188 array];

  uint64_t v190 = sub_1000CC3B0();
  unint64_t v191 = (unint64_t)sub_10006D51C(v190);
  swift_bridgeObjectRelease();
  unint64_t v449 = v191;
  if (v191 >> 62)
  {
LABEL_495:
    swift_bridgeObjectRetain();
    uint64_t v192 = sub_1000CC890();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v192 = *(void *)((v191 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  int v193 = v538;
  if (!v192)
  {

    swift_bridgeObjectRelease();
    return &_swiftEmptyDictionarySingleton;
  }
  unint64_t v194 = 0;
  v195 = (void (**)(char *, uint64_t, uint64_t))(v114 + 16);
  int v544 = enum case for InternalWidgetFamily.systemMedium(_:);
  v559 = (uint64_t (**)(char *, uint64_t))(v114 + 88);
  int v545 = enum case for InternalWidgetFamily.systemLarge(_:);
  int v540 = enum case for InternalWidgetFamily.newsLargeTall(_:);
  int v528 = enum case for InternalWidgetFamily.accessoryRectangular(_:);
  unsigned int v558 = enum case for ContentSizeCategory.extraSmall(_:);
  v552 = (void (**)(char *, uint64_t, uint64_t))(v2 + 104);
  unsigned int v550 = enum case for ContentSizeCategory.medium(_:);
  unsigned int v542 = enum case for ContentSizeCategory.extraExtraLarge(_:);
  unsigned int v541 = enum case for ContentSizeCategory.accessibilityMedium(_:);
  v553 = (void (**)(uint64_t, uint64_t))(v2 + 8);
  v557 = (void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v556 = (uint64_t (**)(char *, uint64_t))(v2 + 88);
  int v549 = enum case for ContentSizeCategory.small(_:);
  int v529 = enum case for ContentSizeCategory.large(_:);
  int v526 = enum case for ContentSizeCategory.extraLarge(_:);
  int v491 = enum case for ContentSizeCategory.extraExtraExtraLarge(_:);
  int v455 = enum case for ContentSizeCategory.accessibilityLarge(_:);
  int v448 = enum case for ContentSizeCategory.accessibilityExtraLarge(_:);
  int v443 = enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:);
  int v419 = enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:);
  UIContentSizeCategory v413 = UIContentSizeCategoryUnspecified;
  UIContentSizeCategory v412 = UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
  UIContentSizeCategory v414 = UIContentSizeCategoryAccessibilityExtraExtraLarge;
  UIContentSizeCategory v415 = UIContentSizeCategoryAccessibilityExtraLarge;
  UIContentSizeCategory v416 = UIContentSizeCategoryAccessibilityLarge;
  UIContentSizeCategory v418 = UIContentSizeCategoryAccessibilityMedium;
  UIContentSizeCategory v442 = UIContentSizeCategoryExtraExtraExtraLarge;
  UIContentSizeCategory v446 = UIContentSizeCategoryExtraExtraLarge;
  UIContentSizeCategory v453 = UIContentSizeCategoryExtraLarge;
  UIContentSizeCategory v458 = UIContentSizeCategoryLarge;
  UIContentSizeCategory v490 = UIContentSizeCategoryMedium;
  double v196 = 0.0;
  UIContentSizeCategory v498 = UIContentSizeCategorySmall;
  UIContentSizeCategory v525 = UIContentSizeCategoryExtraSmall;
  unint64_t v451 = v449 & 0xC000000000000001;
  uint64_t v445 = v449 & 0xFFFFFFFFFFFFFF8;
  unint64_t v444 = v449 + 32;
  v457 = &_swiftEmptyDictionarySingleton;
  double v504 = v176;
  uint64_t v537 = v180;
  v539 = (void (**)(char *, uint64_t, uint64_t))(v114 + 16);
  uint64_t v508 = v113;
  v507 = v66;
  uint64_t v547 = v1;
  CGFloat v506 = v168;
  CGFloat v505 = v170;
  CGFloat v503 = v174;
  uint64_t v450 = v192;
  while (1)
  {
    if (v451)
    {
      id v203 = (id)sub_1000CC780();
    }
    else
    {
      if (v194 >= *(void *)(v445 + 16)) {
        goto LABEL_494;
      }
      id v203 = *(id *)(v444 + 8 * v194);
    }
    id v471 = v203;
    BOOL v204 = __OFADD__(v194, 1);
    unint64_t v205 = v194 + 1;
    if (v204)
    {
LABEL_493:
      __break(1u);
LABEL_494:
      __break(1u);
      goto LABEL_495;
    }
    unint64_t v456 = v205;
    v206 = v551;
    id v207 = sub_10005DC00();
    [v207 nt_scaledValueForValue:1.0 v412];
    double v209 = v208;

    double v210 = *v206;
    unint64_t v562 = (unint64_t)_swiftEmptyArrayStorage;
    sub_10006BDD0();
    unint64_t v212 = v211;
    if (v211 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v114 = sub_1000CC890();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v114 = *(void *)((v211 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    double v213 = v196 + v209 * 12.0 + v210 + 6.0;
    if (v114) {
      break;
    }
    swift_bridgeObjectRelease();
    v197 = _swiftEmptyArrayStorage;
LABEL_24:
    uint64_t v2 = (uint64_t)v471;
    unint64_t v198 = (unint64_t)v457;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v560 = v198;
    sub_1000934F8((uint64_t)v197, (void *)v2, isUniquelyReferenced_nonNull_native);
    v457 = (void *)v560;

    swift_bridgeObjectRelease();
    double v200 = v551[1];
    sub_10005DFFC();
    double v202 = v201;

    double v196 = v213 + v200 - v202;
    unint64_t v194 = v456;
    v195 = v539;
    if (v456 == v450)
    {

      swift_bridgeObjectRelease();
      return v457;
    }
  }
  unint64_t v523 = v212 & 0xC000000000000001;
  uint64_t v2 = 4;
  unint64_t v522 = v212;
  uint64_t v521 = v114;
  while (1)
  {
    uint64_t v214 = v2 - 4;
    if (v523)
    {
      id v546 = (id)sub_1000CC780();
      uint64_t v215 = v2 - 3;
      if (__OFADD__(v214, 1)) {
        goto LABEL_492;
      }
    }
    else
    {
      id v546 = *(id *)(v212 + 8 * v2);
      swift_unknownObjectRetain();
      uint64_t v215 = v2 - 3;
      if (__OFADD__(v214, 1))
      {
LABEL_492:
        __break(1u);
        goto LABEL_493;
      }
    }
    uint64_t v534 = v215;
    uint64_t v535 = v2;
    id v532 = [v546 itemType];
    v216 = *v195;
    v217 = v510;
    (*v195)(v510, v180, v113);
    v218 = *v559;
    int v219 = (*v559)(v217, v113);
    if (v219 == v193)
    {
      uint64_t v404 = (uint64_t)v551;
      v405 = &v453;
LABEL_499:
      sub_100094820(v404, (uint64_t)*(v405 - 32), (uint64_t (*)(void))type metadata accessor for LayoutContext);
      unint64_t v560 = 0;
      unint64_t v561 = 0xE000000000000000;
      sub_1000CC750(46);
      swift_bridgeObjectRelease();
      unint64_t v560 = 0xD00000000000002CLL;
      unint64_t v561 = 0x80000001000DBBA0;
      sub_100092218((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
      v564._countAndFlagsBits = sub_1000CCA20();
      sub_1000CC2B0(v564);
      swift_bridgeObjectRelease();
      goto LABEL_513;
    }
    double v220 = 4.5;
    int v221 = v544;
    if (v219 != v544)
    {
      double v220 = 6.0;
      if (v219 != v545 && v219 != v540)
      {
        double v220 = 1.0;
        if (v219 != v528)
        {
          uint64_t v404 = (uint64_t)v551;
          v405 = (UIContentSizeCategory *)&v454;
          goto LABEL_499;
        }
      }
    }
    double v533 = v220;
    v222 = v511;
    v216(v511, v180, v113);
    int v223 = v218(v222, v113);
    double v174 = v176;
    if (v223 != v193)
    {
      if (v223 == v221)
      {
        v224 = v472;
        v216(v472, v180, v113);
        int v225 = v218(v224, v113);
        if (v225 == v193) {
          goto LABEL_48;
        }
        if (v225 == v221 || v225 == v545 || v225 == v540)
        {
          v226 = *v552;
          (*v552)((char *)v493, v558, v1);
          goto LABEL_57;
        }
        if (v225 == v528)
        {
LABEL_48:
          v226 = *v552;
          (*v552)((char *)v493, v550, v1);
LABEL_57:
          v230 = v473;
          v216(v473, v180, v113);
          int v231 = v218(v230, v113);
          uint64_t v232 = v541;
          if (v231 != v193)
          {
            uint64_t v232 = v542;
            if (v231 != v544)
            {
              uint64_t v232 = v542;
              if (v231 != v545)
              {
                uint64_t v232 = v542;
                if (v231 != v540)
                {
                  uint64_t v232 = v541;
                  if (v231 != v528)
                  {
                    uint64_t v408 = (uint64_t)v551;
                    v409 = &v457;
                    goto LABEL_511;
                  }
                }
              }
            }
          }
          uint64_t v233 = (uint64_t)v478;
          v226(v478, v232, v1);
          uint64_t v234 = v492;
          uint64_t v235 = v493;
          sub_100050A50(v493, v233, v492);
          v236 = *v553;
          (*v553)(v233, v1);
          v236(v235, v1);
          v237 = v487;
          (*v557)(v487, v234, v1);
          int v238 = (*v556)(v237, v1);
          if (v238 == v558)
          {
            v239 = v525;
            uint64_t v180 = v537;
          }
          else
          {
            uint64_t v180 = v537;
            if (v238 == v549)
            {
              v240 = (uint64_t *)&v532;
            }
            else if (v238 == v550)
            {
              v240 = (uint64_t *)&v522;
            }
            else if (v238 == v529)
            {
              v240 = (uint64_t *)&v490;
            }
            else if (v238 == v526)
            {
              v240 = &v486;
            }
            else if (v238 == v542)
            {
              v240 = &v480;
            }
            else if (v238 == v491)
            {
              v240 = (uint64_t *)&v476;
            }
            else if (v238 == v541)
            {
              v240 = (uint64_t *)&v451;
            }
            else if (v238 == v455)
            {
              v240 = (uint64_t *)&v449;
            }
            else if (v238 == v448)
            {
              v240 = (uint64_t *)v447;
            }
            else if (v238 == v443)
            {
              v240 = (uint64_t *)&v446;
            }
            else
            {
              if (v238 != v419)
              {
                v239 = v413;
                v236((uint64_t)v487, v1);
                goto LABEL_124;
              }
              v240 = (uint64_t *)&v444;
            }
            v239 = (NSString *)(id)*(v240 - 32);
          }
LABEL_124:
          v251 = self;
          v236(v492, v1);
          id v252 = [v251 nt_preferredFontForCondensedTextStyle:2 contentSizeCategory:v239];
          *(double *)&uint64_t v253 = 45.0;
LABEL_129:
          double v255 = *(double *)&v253;
          id v256 = v252;

          [v256 nt_scaledValueForValue:1.0];
          double v258 = v257;

          double v174 = v258 * v255;
          int v193 = v538;
          int v221 = v544;
          goto LABEL_130;
        }
        uint64_t v410 = (uint64_t)v551;
        v411 = (char **)&v456;
LABEL_512:
        sub_100094820(v410, (uint64_t)*(v411 - 32), (uint64_t (*)(void))type metadata accessor for LayoutContext);
        unint64_t v560 = 0;
        unint64_t v561 = 0xE000000000000000;
        sub_1000CC750(49);
        swift_bridgeObjectRelease();
        unint64_t v560 = 0xD00000000000002FLL;
        unint64_t v561 = 0x80000001000DBB40;
        sub_100092218((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
        v567._countAndFlagsBits = sub_1000CCA20();
        sub_1000CC2B0(v567);
        swift_bridgeObjectRelease();
        goto LABEL_513;
      }
      if (v223 == v545 || v223 == v540)
      {
        v227 = v459;
        v216(v459, v180, v113);
        int v228 = v218(v227, v113);
        if (v228 == v193) {
          goto LABEL_54;
        }
        if (v228 == v221 || v228 == v545 || v228 == v540)
        {
          v229 = *v552;
          (*v552)((char *)v480, v558, v1);
        }
        else
        {
          if (v228 != v528)
          {
            uint64_t v410 = (uint64_t)v551;
            v411 = &v459;
            goto LABEL_512;
          }
LABEL_54:
          v229 = *v552;
          (*v552)((char *)v480, v550, v1);
        }
        v241 = v460;
        v216(v460, v180, v113);
        int v242 = v218(v241, v113);
        uint64_t v243 = v541;
        if (v242 != v193)
        {
          uint64_t v243 = v542;
          if (v242 != v544)
          {
            uint64_t v243 = v542;
            if (v242 != v545)
            {
              uint64_t v243 = v542;
              if (v242 != v540)
              {
                uint64_t v243 = v541;
                if (v242 != v528)
                {
                  uint64_t v408 = (uint64_t)v551;
                  v409 = (void **)&v460;
                  goto LABEL_511;
                }
              }
            }
          }
        }
        uint64_t v244 = (uint64_t)v465;
        v229(v465, v243, v1);
        uint64_t v245 = v479;
        uint64_t v246 = v480;
        sub_100050A50(v480, v244, v479);
        v247 = *v553;
        (*v553)(v244, v1);
        v247(v246, v1);
        v248 = v468;
        (*v557)(v468, v245, v1);
        int v249 = (*v556)(v248, v1);
        if (v249 == v558)
        {
          v239 = v525;
          uint64_t v180 = v537;
        }
        else
        {
          uint64_t v180 = v537;
          if (v249 == v549)
          {
            v250 = (uint64_t *)&v532;
          }
          else if (v249 == v550)
          {
            v250 = (uint64_t *)&v522;
          }
          else if (v249 == v529)
          {
            v250 = (uint64_t *)&v490;
          }
          else if (v249 == v526)
          {
            v250 = &v486;
          }
          else if (v249 == v542)
          {
            v250 = &v480;
          }
          else if (v249 == v491)
          {
            v250 = (uint64_t *)&v476;
          }
          else if (v249 == v541)
          {
            v250 = (uint64_t *)&v451;
          }
          else if (v249 == v455)
          {
            v250 = (uint64_t *)&v449;
          }
          else if (v249 == v448)
          {
            v250 = (uint64_t *)v447;
          }
          else if (v249 == v443)
          {
            v250 = (uint64_t *)&v446;
          }
          else
          {
            if (v249 != v419)
            {
              v239 = v413;
              v247((uint64_t)v468, v1);
              goto LABEL_128;
            }
            v250 = (uint64_t *)&v444;
          }
          v239 = (NSString *)(id)*(v250 - 32);
        }
LABEL_128:
        v254 = self;
        v247(v479, v1);
        id v252 = [v254 nt_preferredFontForCondensedTextStyle:2 contentSizeCategory:v239];
        *(double *)&uint64_t v253 = 72.0;
        goto LABEL_129;
      }
      double v174 = v176;
      if (v223 != v528)
      {
        uint64_t v406 = (uint64_t)v551;
        v407 = &v458;
        goto LABEL_503;
      }
    }
LABEL_130:
    double v168 = *(double *)((char *)v551 + v66[10]);
    v259 = v512;
    v216(v512, v180, v113);
    int v260 = v218(v259, v113);
    double v261 = v176;
    if (v260 == v193) {
      goto LABEL_216;
    }
    if (v260 != v221)
    {
      if (v260 != v545 && v260 != v540)
      {
        double v261 = v176;
        if (v260 == v528) {
          goto LABEL_216;
        }
        uint64_t v406 = (uint64_t)v551;
        v407 = (UIContentSizeCategory *)&v463;
LABEL_503:
        sub_100094820(v406, (uint64_t)*(v407 - 32), (uint64_t (*)(void))type metadata accessor for LayoutContext);
        unint64_t v560 = 0;
        unint64_t v561 = 0xE000000000000000;
        sub_1000CC750(43);
        swift_bridgeObjectRelease();
        unint64_t v560 = 0xD000000000000029;
        unint64_t v561 = 0x80000001000DBB70;
        sub_100092218((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
        v565._countAndFlagsBits = sub_1000CCA20();
        sub_1000CC2B0(v565);
        swift_bridgeObjectRelease();
        goto LABEL_513;
      }
      v265 = v461;
      v216(v461, v180, v113);
      int v266 = v218(v265, v113);
      if (v266 != v193)
      {
        if (v266 == v221 || v266 == v545 || v266 == v540)
        {
          v267 = *v552;
          (*v552)((char *)v483, v558, v1);
          goto LABEL_153;
        }
        if (v266 != v528)
        {
          uint64_t v410 = (uint64_t)v551;
          v411 = &v468;
          goto LABEL_512;
        }
      }
      v267 = *v552;
      (*v552)((char *)v483, v550, v1);
LABEL_153:
      v279 = v462;
      v216(v462, v180, v113);
      int v280 = v218(v279, v113);
      uint64_t v281 = v541;
      if (v280 != v193)
      {
        uint64_t v281 = v542;
        if (v280 != v544)
        {
          uint64_t v281 = v542;
          if (v280 != v545)
          {
            uint64_t v281 = v542;
            if (v280 != v540)
            {
              uint64_t v281 = v541;
              if (v280 != v528)
              {
                uint64_t v408 = (uint64_t)v551;
                v409 = (void **)&v469;
                goto LABEL_511;
              }
            }
          }
        }
      }
      uint64_t v282 = (uint64_t)v466;
      v267(v466, v281, v1);
      uint64_t v283 = v482;
      uint64_t v284 = v483;
      sub_100050A50(v483, v282, v482);
      v285 = *v553;
      (*v553)(v282, v1);
      v285(v284, v1);
      v286 = v469;
      (*v557)(v469, v283, v1);
      int v287 = (*v556)(v286, v1);
      if (v287 == v558)
      {
        v277 = v525;
        uint64_t v180 = v537;
      }
      else
      {
        uint64_t v180 = v537;
        if (v287 == v549)
        {
          v288 = (uint64_t *)&v532;
        }
        else if (v287 == v550)
        {
          v288 = (uint64_t *)&v522;
        }
        else if (v287 == v529)
        {
          v288 = (uint64_t *)&v490;
        }
        else if (v287 == v526)
        {
          v288 = &v486;
        }
        else if (v287 == v542)
        {
          v288 = &v480;
        }
        else if (v287 == v491)
        {
          v288 = (uint64_t *)&v476;
        }
        else if (v287 == v541)
        {
          v288 = (uint64_t *)&v451;
        }
        else if (v287 == v455)
        {
          v288 = (uint64_t *)&v449;
        }
        else if (v287 == v448)
        {
          v288 = (uint64_t *)v447;
        }
        else if (v287 == v443)
        {
          v288 = (uint64_t *)&v446;
        }
        else
        {
          if (v287 != v419)
          {
            v277 = v413;
            v285((uint64_t)v469, v1);
            goto LABEL_214;
          }
          v288 = (uint64_t *)&v444;
        }
        v277 = (NSString *)(id)*(v288 - 32);
      }
LABEL_214:
      v292 = self;
      v285(v482, v1);
      id v290 = [v292 nt_preferredFontForCondensedTextStyle:2 contentSizeCategory:v277];
      *(double *)&uint64_t v291 = 72.0;
      goto LABEL_215;
    }
    v262 = v474;
    v216(v474, v180, v113);
    int v263 = v218(v262, v113);
    if (v263 != v193)
    {
      if (v263 == v221 || v263 == v545 || v263 == v540)
      {
        v264 = *v552;
        (*v552)((char *)v495, v558, v1);
        goto LABEL_142;
      }
      if (v263 != v528)
      {
        uint64_t v410 = (uint64_t)v551;
        v411 = &v461;
        goto LABEL_512;
      }
    }
    v264 = *v552;
    (*v552)((char *)v495, v550, v1);
LABEL_142:
    v268 = v475;
    v216(v475, v180, v113);
    int v269 = v218(v268, v113);
    uint64_t v270 = v541;
    if (v269 != v193)
    {
      uint64_t v270 = v542;
      if (v269 != v544)
      {
        uint64_t v270 = v542;
        if (v269 != v545)
        {
          uint64_t v270 = v542;
          if (v269 != v540)
          {
            uint64_t v270 = v541;
            if (v269 != v528)
            {
              uint64_t v408 = (uint64_t)v551;
              v409 = (void **)&v462;
              goto LABEL_511;
            }
          }
        }
      }
    }
    uint64_t v271 = (uint64_t)v481;
    v264(v481, v270, v1);
    uint64_t v272 = v494;
    uint64_t v273 = v495;
    sub_100050A50(v495, v271, v494);
    v274 = *v553;
    (*v553)(v271, v1);
    v274(v273, v1);
    v275 = v488;
    (*v557)(v488, v272, v1);
    int v276 = (*v556)(v275, v1);
    if (v276 == v558)
    {
      v277 = v525;
      uint64_t v180 = v537;
    }
    else
    {
      uint64_t v180 = v537;
      if (v276 == v549)
      {
        v278 = (uint64_t *)&v532;
      }
      else if (v276 == v550)
      {
        v278 = (uint64_t *)&v522;
      }
      else if (v276 == v529)
      {
        v278 = (uint64_t *)&v490;
      }
      else if (v276 == v526)
      {
        v278 = &v486;
      }
      else if (v276 == v542)
      {
        v278 = &v480;
      }
      else if (v276 == v491)
      {
        v278 = (uint64_t *)&v476;
      }
      else if (v276 == v541)
      {
        v278 = (uint64_t *)&v451;
      }
      else if (v276 == v455)
      {
        v278 = (uint64_t *)&v449;
      }
      else if (v276 == v448)
      {
        v278 = (uint64_t *)v447;
      }
      else if (v276 == v443)
      {
        v278 = (uint64_t *)&v446;
      }
      else
      {
        if (v276 != v419)
        {
          v277 = v413;
          v274((uint64_t)v488, v1);
          goto LABEL_209;
        }
        v278 = (uint64_t *)&v444;
      }
      v277 = (NSString *)(id)*(v278 - 32);
    }
LABEL_209:
    v289 = self;
    v274(v494, v1);
    id v290 = [v289 nt_preferredFontForCondensedTextStyle:2 contentSizeCategory:v277];
    *(double *)&uint64_t v291 = 45.0;
LABEL_215:
    double v293 = *(double *)&v291;
    id v294 = v290;

    [v294 nt_scaledValueForValue:1.0];
    double v296 = v295;

    double v261 = v296 * v293;
    int v193 = v538;
    int v221 = v544;
LABEL_216:
    v297 = v513;
    v216(v513, v180, v113);
    int v298 = v218(v297, v113);
    if (v298 == v193)
    {
      uint64_t v404 = (uint64_t)v551;
      v405 = (UIContentSizeCategory *)&v464;
      goto LABEL_499;
    }
    double v170 = 9.0;
    if (v298 != v221)
    {
      double v170 = 12.0;
      if (v298 != v545 && v298 != v540)
      {
        double v170 = 2.0;
        if (v298 != v528)
        {
          uint64_t v404 = (uint64_t)v551;
          v405 = (UIContentSizeCategory *)&v465;
          goto LABEL_499;
        }
      }
    }
    v299 = v514;
    v216(v514, v180, v113);
    int v300 = v218(v299, v113);
    if (v300 == v193)
    {
      uint64_t v404 = (uint64_t)v551;
      v405 = (UIContentSizeCategory *)&v466;
      goto LABEL_499;
    }
    double v301 = 4.5;
    if (v300 != v221)
    {
      double v301 = 6.0;
      if (v300 != v545 && v300 != v540)
      {
        double v301 = 1.0;
        if (v300 != v528)
        {
          uint64_t v404 = (uint64_t)v551;
          v405 = (UIContentSizeCategory *)&v467;
          goto LABEL_499;
        }
      }
    }
    double v531 = v261;
    v302 = v515;
    v216(v515, v180, v113);
    int v303 = v218(v302, v113);
    double v304 = v176;
    if (v303 == v193) {
      goto LABEL_312;
    }
    if (v303 == v221)
    {
      v305 = v476;
      v216(v476, v180, v113);
      int v306 = v218(v305, v113);
      if (v306 == v193) {
        goto LABEL_229;
      }
      if (v306 == v221 || v306 == v545 || v306 == v540)
      {
        v307 = *v552;
        (*v552)((char *)v497, v558, v1);
      }
      else
      {
        if (v306 != v528)
        {
          uint64_t v410 = (uint64_t)v551;
          v411 = &v470;
          goto LABEL_512;
        }
LABEL_229:
        v307 = *v552;
        (*v552)((char *)v497, v550, v1);
      }
      v311 = v477;
      v216(v477, v180, v113);
      int v312 = v218(v311, v113);
      uint64_t v313 = v541;
      if (v312 != v193)
      {
        uint64_t v313 = v542;
        if (v312 != v544)
        {
          uint64_t v313 = v542;
          if (v312 != v545)
          {
            uint64_t v313 = v542;
            if (v312 != v540)
            {
              uint64_t v313 = v541;
              if (v312 != v528)
              {
                uint64_t v408 = (uint64_t)v551;
                v409 = &v471;
                goto LABEL_511;
              }
            }
          }
        }
      }
      uint64_t v314 = (uint64_t)v484;
      v307(v484, v313, v1);
      uint64_t v315 = v496;
      uint64_t v316 = v497;
      sub_100050A50(v497, v314, v496);
      v317 = *v553;
      (*v553)(v314, v1);
      v317(v316, v1);
      v318 = v489;
      (*v557)(v489, v315, v1);
      int v319 = (*v556)(v318, v1);
      if (v319 == v558)
      {
        v320 = v525;
        uint64_t v180 = v537;
        goto LABEL_305;
      }
      uint64_t v180 = v537;
      if (v319 == v549)
      {
        v321 = (uint64_t *)&v532;
        goto LABEL_304;
      }
      if (v319 == v550)
      {
        v321 = (uint64_t *)&v522;
        goto LABEL_304;
      }
      if (v319 == v529)
      {
        v321 = (uint64_t *)&v490;
        goto LABEL_304;
      }
      if (v319 == v526)
      {
        v321 = &v486;
        goto LABEL_304;
      }
      if (v319 == v542)
      {
        v321 = &v480;
        goto LABEL_304;
      }
      if (v319 == v491)
      {
        v321 = (uint64_t *)&v476;
        goto LABEL_304;
      }
      if (v319 == v541)
      {
        v321 = (uint64_t *)&v451;
        goto LABEL_304;
      }
      if (v319 == v455)
      {
        v321 = (uint64_t *)&v449;
        goto LABEL_304;
      }
      if (v319 == v448)
      {
        v321 = (uint64_t *)v447;
        goto LABEL_304;
      }
      if (v319 == v443)
      {
        v321 = (uint64_t *)&v446;
        goto LABEL_304;
      }
      if (v319 == v419)
      {
        v321 = (uint64_t *)&v444;
LABEL_304:
        v320 = (NSString *)(id)*(v321 - 32);
      }
      else
      {
        v320 = v413;
        v317((uint64_t)v489, v1);
      }
LABEL_305:
      v332 = self;
      v317(v496, v1);
      id v333 = [v332 nt_preferredFontForCondensedTextStyle:2 contentSizeCategory:v320];
      *(double *)&uint64_t v334 = 45.0;
LABEL_311:
      double v336 = *(double *)&v334;
      id v337 = v333;

      [v337 nt_scaledValueForValue:1.0];
      double v339 = v338;

      double v304 = v339 * v336;
      int v193 = v538;
      int v221 = v544;
      goto LABEL_312;
    }
    if (v303 == v545 || v303 == v540) {
      break;
    }
    double v304 = v176;
    if (v303 != v528)
    {
      uint64_t v406 = (uint64_t)v551;
      v407 = (UIContentSizeCategory *)&v472;
      goto LABEL_503;
    }
LABEL_312:
    v340 = v516;
    v216(v516, v180, v113);
    int v341 = v218(v340, v113);
    if (v341 != v193)
    {
      if (v341 == v221 || v341 == v545 || v341 == v540)
      {
        v342 = *v552;
        (*v552)(v548, v558, v1);
        goto LABEL_316;
      }
      if (v341 != v528)
      {
        uint64_t v410 = (uint64_t)v551;
        v411 = &v473;
        goto LABEL_512;
      }
    }
    v342 = *v552;
    (*v552)(v548, v550, v1);
LABEL_316:
    v343 = v517;
    v216(v517, v180, v113);
    int v344 = v218(v343, v113);
    uint64_t v345 = v541;
    if (v344 != v193)
    {
      uint64_t v345 = v542;
      if (v344 != v544)
      {
        uint64_t v345 = v542;
        if (v344 != v545)
        {
          uint64_t v345 = v542;
          if (v344 != v540)
          {
            uint64_t v345 = v541;
            if (v344 != v528)
            {
              uint64_t v408 = (uint64_t)v551;
              v409 = (void **)&v474;
              goto LABEL_511;
            }
          }
        }
      }
    }
    v342(v543, v345, v1);
    v346 = *v557;
    v347 = v520;
    v530 = (char *)v551 + v66[8];
    v554 = v346;
    ((void (*)(char *))v346)(v520);
    v555 = *v556;
    int v348 = v555(v347, v1);
    int v349 = v348;
    BOOL v351 = v348 == v558 || v348 == v549;
    BOOL v527 = v351;
    int v352 = v348 == v550 || v351;
    int v353 = 1;
    int v524 = v352;
    char v354 = 1;
    char v355 = 1;
    char v356 = 1;
    char v357 = 1;
    char v358 = 1;
    char v359 = 1;
    char v360 = 1;
    if ((v352 & 1) == 0 && v348 != v529)
    {
      if (v348 == v526) {
        goto LABEL_347;
      }
      if (v348 == v542) {
        goto LABEL_346;
      }
      if (v348 == v491) {
        goto LABEL_345;
      }
      if (v348 == v541) {
        goto LABEL_344;
      }
      if (v348 == v455) {
        goto LABEL_343;
      }
      if (v348 == v448) {
        goto LABEL_342;
      }
      if (v348 == v443) {
        goto LABEL_341;
      }
      if (v348 == v419)
      {
        int v353 = 0;
LABEL_341:
        char v354 = 0;
LABEL_342:
        char v355 = 0;
LABEL_343:
        char v356 = 0;
LABEL_344:
        char v357 = 0;
LABEL_345:
        char v358 = 0;
LABEL_346:
        char v359 = 0;
LABEL_347:
        char v360 = 0;
        goto LABEL_348;
      }
      (*v553)((uint64_t)v520, v547);
      int v353 = 1;
    }
LABEL_348:
    int v502 = v353;
    v361 = v518;
    uint64_t v362 = v547;
    v554(v518, (uint64_t)v548, v547);
    int v363 = v555(v361, v362);
    if (v363 == v558) {
      goto LABEL_349;
    }
    if (v363 == v549)
    {
      v380 = v548;
      if (v349 == v558) {
        goto LABEL_401;
      }
      goto LABEL_349;
    }
    if (v363 == v550)
    {
      v380 = v548;
      v381 = (char *)&v562 + 4;
      goto LABEL_395;
    }
    if (v363 == v529)
    {
      v380 = v548;
      v381 = (char *)&v560 + 4;
      goto LABEL_395;
    }
    if (v363 == v526)
    {
      v380 = v548;
      if (v360) {
        goto LABEL_401;
      }
    }
    else if (v363 == v542)
    {
      v380 = v548;
      if (v359) {
        goto LABEL_401;
      }
    }
    else if (v363 == v491)
    {
      v380 = v548;
      if (v358) {
        goto LABEL_401;
      }
    }
    else if (v363 == v541)
    {
      v380 = v548;
      if (v357) {
        goto LABEL_401;
      }
    }
    else if (v363 == v455)
    {
      v380 = v548;
      if (v356) {
        goto LABEL_401;
      }
    }
    else if (v363 == v448)
    {
      v380 = v548;
      if (v355) {
        goto LABEL_401;
      }
    }
    else if (v363 == v443)
    {
      v380 = v548;
      if (v354) {
        goto LABEL_401;
      }
    }
    else
    {
      if (v363 == v419)
      {
        v380 = v548;
        v381 = (char *)&v536 + 4;
LABEL_395:
        if (*((_DWORD *)v381 - 64)) {
          goto LABEL_401;
        }
        goto LABEL_349;
      }
      (*v553)((uint64_t)v518, v547);
      v380 = v548;
      if (v524) {
        goto LABEL_401;
      }
    }
LABEL_349:
    v364 = v501;
    uint64_t v365 = v547;
    v554(v501, (uint64_t)v543, v547);
    int v366 = v555(v364, v365);
    int v367 = v366;
    BOOL v369 = v366 == v558 || v366 == v549;
    BOOL v527 = v369;
    int v370 = v366 == v550 || v369;
    int v371 = 1;
    int v524 = v370;
    int v372 = 1;
    char v373 = 1;
    char v374 = 1;
    char v375 = 1;
    char v376 = 1;
    char v377 = 1;
    char v378 = 1;
    if (v370)
    {
      v379 = v530;
    }
    else
    {
      v379 = v530;
      if (v366 == v529) {
        goto LABEL_386;
      }
      if (v366 == v526) {
        goto LABEL_375;
      }
      if (v366 == v542) {
        goto LABEL_374;
      }
      if (v366 == v491) {
        goto LABEL_373;
      }
      if (v366 == v541) {
        goto LABEL_372;
      }
      if (v366 == v455) {
        goto LABEL_371;
      }
      if (v366 == v448) {
        goto LABEL_370;
      }
      if (v366 == v443) {
        goto LABEL_369;
      }
      if (v366 == v419)
      {
        int v371 = 0;
LABEL_369:
        int v372 = 0;
LABEL_370:
        char v373 = 0;
LABEL_371:
        char v374 = 0;
LABEL_372:
        char v375 = 0;
LABEL_373:
        char v376 = 0;
LABEL_374:
        char v377 = 0;
LABEL_375:
        char v378 = 0;
        goto LABEL_386;
      }
      (*v553)((uint64_t)v501, v547);
      v379 = v530;
      int v371 = 1;
      int v372 = 1;
    }
LABEL_386:
    int v502 = v372;
    int v499 = v371;
    v382 = v500;
    uint64_t v383 = v547;
    v554(v500, (uint64_t)v379, v547);
    int v384 = v555(v382, v383);
    if (v384 == v558)
    {
      v380 = v379;
      goto LABEL_401;
    }
    if (v384 == v549)
    {
      v380 = v543;
      if (v367 != v558) {
        goto LABEL_400;
      }
      goto LABEL_401;
    }
    if (v384 == v550)
    {
      v380 = v543;
      v385 = (char *)&v562 + 4;
LABEL_399:
      if (*((_DWORD *)v385 - 64)) {
        goto LABEL_401;
      }
LABEL_400:
      v380 = v530;
      goto LABEL_401;
    }
    if (v384 == v529) {
      goto LABEL_398;
    }
    if (v384 == v526)
    {
      v380 = v543;
      if ((v378 & 1) == 0) {
        goto LABEL_400;
      }
    }
    else if (v384 == v542)
    {
      v380 = v543;
      if ((v377 & 1) == 0) {
        goto LABEL_400;
      }
    }
    else if (v384 == v491)
    {
      v380 = v543;
      if ((v376 & 1) == 0) {
        goto LABEL_400;
      }
    }
    else if (v384 == v541)
    {
      v380 = v543;
      if ((v375 & 1) == 0) {
        goto LABEL_400;
      }
    }
    else if (v384 == v455)
    {
      v380 = v543;
      if ((v374 & 1) == 0) {
        goto LABEL_400;
      }
    }
    else
    {
      if (v384 != v448)
      {
        if (v384 == v443)
        {
          v380 = v543;
          v385 = (char *)&v536 + 4;
        }
        else if (v384 == v419)
        {
          v380 = v543;
          v385 = (char *)&v533 + 4;
        }
        else
        {
          (*v553)((uint64_t)v500, v547);
LABEL_398:
          v380 = v543;
          v385 = (char *)&v560 + 4;
        }
        goto LABEL_399;
      }
      v380 = v543;
      if ((v373 & 1) == 0) {
        goto LABEL_400;
      }
    }
LABEL_401:
    v386 = v536;
    uint64_t v1 = v547;
    v387 = v554;
    v554(v536, (uint64_t)v380, v547);
    v388 = *v553;
    (*v553)((uint64_t)v543, v1);
    v388((uint64_t)v548, v1);
    v389 = v519;
    v387(v519, (uint64_t)v386, v1);
    int v390 = v555(v389, v1);
    if (v390 == v558)
    {
      v391 = v525;
      uint64_t v113 = v508;
      uint64_t v66 = v507;
      uint64_t v180 = v537;
      unint64_t v212 = v522;
      uint64_t v114 = v521;
      uint64_t v392 = v535;
      id v393 = v532;
    }
    else
    {
      uint64_t v113 = v508;
      uint64_t v66 = v507;
      uint64_t v180 = v537;
      unint64_t v212 = v522;
      uint64_t v114 = v521;
      uint64_t v392 = v535;
      id v393 = v532;
      if (v390 == v549)
      {
        v394 = (uint64_t *)&v532;
      }
      else if (v390 == v550)
      {
        v394 = (uint64_t *)&v522;
      }
      else if (v390 == v529)
      {
        v394 = (uint64_t *)&v490;
      }
      else if (v390 == v526)
      {
        v394 = &v486;
      }
      else if (v390 == v542)
      {
        v394 = &v480;
      }
      else if (v390 == v491)
      {
        v394 = (uint64_t *)&v476;
      }
      else if (v390 == v541)
      {
        v394 = (uint64_t *)&v451;
      }
      else if (v390 == v455)
      {
        v394 = (uint64_t *)&v449;
      }
      else if (v390 == v448)
      {
        v394 = (uint64_t *)v447;
      }
      else if (v390 == v443)
      {
        v394 = (uint64_t *)&v446;
      }
      else
      {
        if (v390 != v419)
        {
          v391 = v413;
          v388((uint64_t)v519, v1);
          goto LABEL_471;
        }
        v394 = (uint64_t *)&v444;
      }
      v391 = (NSString *)(id)*(v394 - 32);
    }
LABEL_471:
    if (v393) {
      double v395 = 0.0;
    }
    else {
      double v395 = 1.0;
    }
    double v396 = (v168 * v531 - v170 + (v168 + v168) * v301) / v304;
    v397 = self;
    v388((uint64_t)v536, v1);
    id v398 = [v397 nt_preferredFontForCondensedTextStyle:2 contentSizeCategory:v391];

    [v398 nt_scaledValueForValue:1.0];
    double v400 = v399;

    double v401 = v533 + v174 * (v396 * v400);
    sub_10005DFFC();
    double v403 = (v402 + v401) * v395;
    v575.origin.x = 0.0;
    v573.origin.x = v505;
    v573.origin.y = v503;
    v573.size.width = v509;
    v573.size.height = v178;
    v575.origin.y = v213;
    v575.size.width = v506;
    v575.size.height = v403;
    if (CGRectContainsRect(v573, v575))
    {
      swift_unknownObjectRetain();
      sub_1000CC390();
      sub_10006E02C(*(void *)((v562 & 0xFFFFFFFFFFFFFF8) + 0x10));
      sub_1000CC430();
      sub_1000CC3D0();
    }
    swift_unknownObjectRelease();
    double v213 = v213 + v403;
    uint64_t v2 = v392 + 1;
    double v176 = v504;
    int v193 = v538;
    v195 = v539;
    if (v534 == v114)
    {
      swift_bridgeObjectRelease();
      v197 = (void *)v562;
      goto LABEL_24;
    }
  }
  v308 = v463;
  v216(v463, v180, v113);
  int v309 = v218(v308, v113);
  if (v309 == v193) {
    goto LABEL_235;
  }
  if (v309 == v221 || v309 == v545 || v309 == v540)
  {
    v310 = *v552;
    (*v552)((char *)v486, v558, v1);
  }
  else
  {
    if (v309 != v528)
    {
      uint64_t v410 = (uint64_t)v551;
      v411 = &v475;
      goto LABEL_512;
    }
LABEL_235:
    v310 = *v552;
    (*v552)((char *)v486, v550, v1);
  }
  v322 = v464;
  v216(v464, v180, v113);
  int v323 = v218(v322, v113);
  uint64_t v324 = v541;
  if (v323 == v193
    || (uint64_t v324 = v542, v323 == v544)
    || (uint64_t v324 = v542, v323 == v545)
    || (uint64_t v324 = v542, v323 == v540)
    || (uint64_t v324 = v541, v323 == v528))
  {
    uint64_t v325 = (uint64_t)v467;
    v310(v467, v324, v1);
    uint64_t v326 = v485;
    uint64_t v327 = v486;
    sub_100050A50(v486, v325, v485);
    v328 = *v553;
    (*v553)(v325, v1);
    v328(v327, v1);
    v329 = v470;
    (*v557)(v470, v326, v1);
    int v330 = (*v556)(v329, v1);
    if (v330 == v558)
    {
      v320 = v525;
      uint64_t v180 = v537;
    }
    else
    {
      uint64_t v180 = v537;
      if (v330 == v549)
      {
        v331 = (uint64_t *)&v532;
      }
      else if (v330 == v550)
      {
        v331 = (uint64_t *)&v522;
      }
      else if (v330 == v529)
      {
        v331 = (uint64_t *)&v490;
      }
      else if (v330 == v526)
      {
        v331 = &v486;
      }
      else if (v330 == v542)
      {
        v331 = &v480;
      }
      else if (v330 == v491)
      {
        v331 = (uint64_t *)&v476;
      }
      else if (v330 == v541)
      {
        v331 = (uint64_t *)&v451;
      }
      else if (v330 == v455)
      {
        v331 = (uint64_t *)&v449;
      }
      else if (v330 == v448)
      {
        v331 = (uint64_t *)v447;
      }
      else if (v330 == v443)
      {
        v331 = (uint64_t *)&v446;
      }
      else
      {
        if (v330 != v419)
        {
          v320 = v413;
          v328((uint64_t)v470, v1);
          goto LABEL_310;
        }
        v331 = (uint64_t *)&v444;
      }
      v320 = (NSString *)(id)*(v331 - 32);
    }
LABEL_310:
    v335 = self;
    v328(v485, v1);
    id v333 = [v335 nt_preferredFontForCondensedTextStyle:2 contentSizeCategory:v320];
    *(double *)&uint64_t v334 = 72.0;
    goto LABEL_311;
  }
  uint64_t v408 = (uint64_t)v551;
  v409 = (void **)&v450;
LABEL_511:
  sub_100094820(v408, (uint64_t)*(v409 - 32), (uint64_t (*)(void))type metadata accessor for LayoutContext);
  unint64_t v560 = 0;
  unint64_t v561 = 0xE000000000000000;
  sub_1000CC750(49);
  swift_bridgeObjectRelease();
  unint64_t v560 = 0xD00000000000002FLL;
  unint64_t v561 = 0x80000001000DBB10;
  sub_100092218((unint64_t *)&unk_100111320, (void (*)(uint64_t))&type metadata accessor for InternalWidgetFamily);
  v566._countAndFlagsBits = sub_1000CCA20();
  sub_1000CC2B0(v566);
  swift_bridgeObjectRelease();
LABEL_513:
  uint64_t result = (void *)sub_1000CC870();
  __break(1u);
  return result;
}

void *sub_100090620(id a1)
{
  id v3 = *(id *)(v1 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
  uint64_t v4 = sub_10008C0A0();
  id v5 = [v3 sections];
  id v6 = [v5 array];

  uint64_t v7 = sub_1000CC3B0();
  uint64_t v8 = sub_10006D51C(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v9 = (unint64_t)sub_10003E088((unint64_t)v8, (uint64_t)v4);
  swift_bridgeObjectRelease();

  uint64_t result = (void *)swift_bridgeObjectRelease_n();
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (!(v9 >> 62))
  {
    uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1000CC890();
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_14;
  }
LABEL_3:
  if (v11 < 1)
  {
    __break(1u);
  }
  else
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        uint64_t v13 = (void *)sub_1000CC780();
      }
      else
      {
        uint64_t v13 = *(void **)(v9 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      if (objc_msgSend(v13, "itemType", v14) == a1)
      {
        sub_1000CC7D0();
        sub_1000CC800();
        sub_1000CC810();
        sub_1000CC7E0();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    return v14;
  }
  return result;
}

id sub_1000908A8@<X0>(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(void *)(a2 + 16))
  {
    id v5 = *a1;
    unint64_t v6 = sub_10003CF48((uint64_t)v5);
    if (v7)
    {
      unint64_t v8 = *(void *)(*(void *)(a2 + 56) + 8 * v6);
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
  }
  else
  {
    unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1000CC890();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  id result = [objc_allocWithZone((Class)NSNumber) initWithInteger:v9];
  *a3 = result;
  return result;
}

uint64_t sub_100090D84(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10001D64C(&qword_1001112F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100020110(a1, a1[3]);
  sub_100092170();
  sub_1000CCB30();
  LOBYTE(v36[0]) = 0;
  sub_1000CACC0();
  sub_100092218(&qword_10010E328, (void (*)(uint64_t))&type metadata accessor for Date);
  sub_1000CC9F0();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  LOBYTE(v36[0]) = 1;
  sub_1000CC9B0();
  uint64_t v10 = self;
  uint64_t v11 = *(void *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
  *(void *)&v36[0] = 0;
  id v12 = [v10 archivedDataWithRootObject:v11 requiringSecureCoding:1 error:v36];
  id v13 = *(id *)&v36[0];
  if (!v12)
  {
    uint64_t v18 = v13;
    sub_1000CAB00();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  id v34 = v10;
  uint64_t v14 = sub_1000CAC10();
  unint64_t v16 = v15;

  *(void *)&v36[0] = v14;
  *((void *)&v36[0] + 1) = v16;
  char v35 = 2;
  unint64_t v17 = sub_10004172C();
  sub_1000CC9F0();
  v31[1] = v17;
  unint64_t v32 = v16;
  uint64_t v33 = v14;
  uint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_fetchInfo);
  *(void *)&v36[0] = 0;
  id v20 = [v34 archivedDataWithRootObject:v19 requiringSecureCoding:1 error:v36];
  id v21 = *(id *)&v36[0];
  if (!v20)
  {
    uint64_t v26 = v21;
    sub_1000CAB00();

    swift_willThrow();
    sub_100022684(v33, v32);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v22 = sub_1000CAC10();
  uint64_t v24 = v23;

  *(void *)&v36[0] = v22;
  *((void *)&v36[0] + 1) = v24;
  char v35 = 3;
  sub_1000CC9F0();
  uint64_t v25 = v33;
  id v34 = v24;
  LOBYTE(v36[0]) = 4;
  type metadata accessor for LayoutContext();
  sub_100092218(&qword_1001112F8, (void (*)(uint64_t))type metadata accessor for LayoutContext);
  sub_1000CC9F0();
  uint64_t v27 = *(void *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID + 8);
  *(void *)&v36[0] = *(void *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID);
  *((void *)&v36[0] + 1) = v27;
  char v35 = 5;
  swift_bridgeObjectRetain();
  sub_10001D64C(&qword_100111300);
  sub_100092260();
  sub_1000CC9F0();
  swift_bridgeObjectRelease();
  LOBYTE(v36[0]) = 6;
  sub_1000CC9E0();
  char v28 = *(unsigned char *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect + 32);
  long long v29 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect + 16);
  v36[0] = *(_OWORD *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect);
  v36[1] = v29;
  char v37 = v28;
  char v35 = 7;
  sub_10001D64C((uint64_t *)&unk_10010F350);
  sub_1000922CC();
  sub_1000CC9F0();
  unint64_t v30 = v32;
  LOBYTE(v36[0]) = 8;
  sub_1000CC9E0();
  LOBYTE(v36[0]) = 9;
  sub_1000CC9E0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100022684(v22, (unint64_t)v34);
  return sub_100022684(v25, v30);
}

void *sub_1000913A8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v1;
  uint64_t v59 = v2;
  uint64_t v60 = v5;
  uint64_t v55 = type metadata accessor for LayoutContext();
  __chkstk_darwin(v55);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000CACC0();
  uint64_t v56 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v58 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10001D64C(&qword_1001112B0);
  uint64_t v57 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100020110(a1, a1[3]);
  sub_100092170();
  id v13 = v59;
  sub_1000CCB10();
  if (v13) {
    goto LABEL_12;
  }
  uint64_t v53 = v7;
  uint64_t v54 = a1;
  uint64_t v14 = v57;
  uint64_t v59 = v1;
  LOBYTE(v61) = 0;
  sub_100092218(&qword_10010E310, (void (*)(uint64_t))&type metadata accessor for Date);
  sub_1000CC980();
  uint64_t v3 = v59;
  unint64_t v15 = (char *)v59 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentFetchDate;
  (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))((uint64_t)v59 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentFetchDate, v58, v8);
  LOBYTE(v61) = 1;
  uint64_t v16 = sub_1000CC920();
  uint64_t v51 = v15;
  uint64_t v52 = v8;
  uint64_t v18 = 0x6E776F6E6B6E75;
  if (v17) {
    uint64_t v18 = v16;
  }
  unint64_t v19 = 0xE700000000000000;
  if (v17) {
    unint64_t v19 = v17;
  }
  id v20 = (void *)((char *)v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_entryID);
  *id v20 = v18;
  v20[1] = v19;
  char v64 = 2;
  sub_100041420();
  uint64_t v58 = 0;
  sub_1000CC980();
  uint64_t v49 = v12;
  uint64_t v50 = v10;
  long long v21 = v61;
  uint64_t v22 = sub_100036814(0, (unint64_t *)&unk_1001112C0);
  sub_100036814(0, &qword_100110E40);
  uint64_t v23 = (void *)sub_1000CC540();
  uint64_t v46 = v22;
  if (v23)
  {
    unint64_t v47 = *((void *)&v21 + 1);
    uint64_t v48 = v21;
    *(void *)((char *)v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results) = v23;
    char v64 = 3;
    id v28 = v23;
    long long v29 = v49;
    sub_1000CC980();
    id v45 = v28;
    long long v31 = v61;
    sub_100036814(0, &qword_100110E50);
    uint64_t v32 = sub_1000CC540();
    uint64_t v33 = (void *)v32;
    uint64_t v46 = v31;
    if (v32)
    {
      unint64_t v44 = *((void *)&v31 + 1);
      *(void *)((char *)v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_fetchInfo) = v32;
      LOBYTE(v61) = 4;
      sub_100092218(&qword_1001112E0, (void (*)(uint64_t))type metadata accessor for LayoutContext);
      id v43 = v33;
      uint64_t v34 = (uint64_t)v53;
      sub_1000CC980();
      sub_100094888(v34, (uint64_t)v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext, (uint64_t (*)(void))type metadata accessor for LayoutContext);
      LOBYTE(v61) = 5;
      uint64_t v36 = sub_1000CC920();
      char v37 = (void *)((char *)v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID);
      uint64_t *v37 = v36;
      v37[1] = v38;
      LOBYTE(v61) = 6;
      *(void *)((char *)v59 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_appearanceType) = sub_1000CC970();
      type metadata accessor for CGRect(0);
      char v64 = 7;
      sub_100092218(&qword_1001112E8, type metadata accessor for CGRect);
      sub_1000CC930();
      char v39 = v63;
      uint64_t v40 = (char *)v59 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect;
      long long v41 = v62;
      *(_OWORD *)uint64_t v40 = v61;
      *((_OWORD *)v40 + 1) = v41;
      v40[32] = v39;
      LOBYTE(v61) = 8;
      *(void *)((char *)v59 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_stackKind) = sub_1000CC970();
      LOBYTE(v61) = 9;
      uint64_t v42 = sub_1000CC970();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v49, v50);
      sub_100022684(v48, v47);

      sub_100022684(v46, v44);
      uint64_t v3 = v59;
      *(void *)((char *)v59 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_stackLocation) = v42;
      uint64_t v26 = (uint64_t)v54;
      goto LABEL_13;
    }
    sub_1000921C4();
    swift_allocError();
    *char v35 = 4;
    swift_willThrow();
    sub_100022684(v48, v47);
    sub_100022684(v46, *((unint64_t *)&v31 + 1));

    (*(void (**)(char *, uint64_t))(v14 + 8))(v29, v50);
    int v24 = 1;
  }
  else
  {
    sub_1000921C4();
    swift_allocError();
    *unint64_t v30 = 3;
    swift_willThrow();
    sub_100022684(v21, *((unint64_t *)&v21 + 1));
    (*(void (**)(char *, uint64_t))(v14 + 8))(v49, v50);
    int v24 = 0;
  }
  uint64_t v25 = v58;
  (*(void (**)(char *, uint64_t))(v56 + 8))(v51, v52);
  if (!v25)
  {
    swift_bridgeObjectRelease();
    if (!v24) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (v24) {
LABEL_9:
  }

LABEL_11:
  a1 = v54;
LABEL_12:
  swift_deallocPartialClassInstance();
  uint64_t v26 = (uint64_t)a1;
LABEL_13:
  sub_1000201A8(v26);
  return v3;
}

void sub_100091E68(void *a1@<X8>)
{
  sub_10006BDD0();
  *a1 = v2;
}

uint64_t sub_100091EA4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentFetchDate;
  uint64_t v2 = sub_1000CACC0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  sub_10005FA88(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_100091F9C()
{
  return type metadata accessor for TrackableWidgetState();
}

uint64_t type metadata accessor for TrackableWidgetState()
{
  uint64_t result = qword_1001111D8;
  if (!qword_1001111D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100091FF0()
{
  uint64_t result = sub_1000CACC0();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for LayoutContext();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

void *sub_1000920F4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_1000913A8(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_10009214C(void *a1)
{
  return sub_100090D84(a1);
}

unint64_t sub_100092170()
{
  unint64_t result = qword_1001112B8;
  if (!qword_1001112B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001112B8);
  }
  return result;
}

unint64_t sub_1000921C4()
{
  unint64_t result = qword_1001112D0;
  if (!qword_1001112D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001112D0);
  }
  return result;
}

uint64_t sub_100092218(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100092260()
{
  unint64_t result = qword_100110EF0;
  if (!qword_100110EF0)
  {
    sub_10001D690(&qword_100111300);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110EF0);
  }
  return result;
}

unint64_t sub_1000922CC()
{
  unint64_t result = qword_100111308;
  if (!qword_100111308)
  {
    sub_10001D690((uint64_t *)&unk_10010F350);
    sub_100092218(&qword_100111310, type metadata accessor for CGRect);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111308);
  }
  return result;
}

uint64_t sub_100092370(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = sub_1000CC840();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10001D64C(&qword_100111398);
  int v45 = a2;
  uint64_t v9 = sub_1000CC8B0();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v39 = (unint64_t)(v11 + 63) >> 6;
    long long v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v42 = v8;
    id v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      uint64_t v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        sub_100022804((_OWORD *)(*(void *)(v8 + 56) + 32 * v20), v47);
      }
      else
      {
        (*v41)(v43, v26, v44);
        sub_100023250(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47);
      }
      uint64_t result = sub_1000CC120();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v46)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = (uint64_t)sub_100022804(v47, (_OWORD *)(*(void *)(v10 + 56) + 32 * v18));
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_10009276C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10001D64C(&qword_100111340);
  uint64_t v6 = sub_1000CC8B0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    unint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      swift_bridgeObjectRetain();
    }
    uint64_t result = sub_1000CC610(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100092A44(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for ImageStore.Key();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10001D64C(&qword_100111368);
  unint64_t v10 = (void *)sub_1000CC8B0();
  if (*(void *)(v9 + 16))
  {
    unint64_t v27 = v3;
    uint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v12 = (void *)(v9 + 64);
    uint64_t v13 = -1;
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    unint64_t v14 = v13 & *(void *)(v9 + 64);
    int64_t v15 = (unint64_t)(v11 + 63) >> 6;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
        if (v21 >= v15) {
          goto LABEL_23;
        }
        unint64_t v22 = v12[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v15) {
            goto LABEL_23;
          }
          unint64_t v22 = v12[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v15)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v27;
                goto LABEL_30;
              }
              uint64_t v25 = 1 << *(unsigned char *)(v9 + 32);
              if (v25 >= 64) {
                bzero((void *)(v9 + 64), ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v12 = -1 << v25;
              }
              uint64_t v3 = v27;
              *(void *)(v9 + 16) = 0;
              break;
            }
            unint64_t v22 = v12[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_32;
                }
                if (v17 >= v15) {
                  goto LABEL_23;
                }
                unint64_t v22 = v12[v17];
                ++v23;
                if (v22) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_20:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = *(void *)(v9 + 48) + *(void *)(v6 + 72) * v20;
      if (a2)
      {
        sub_100094888(v24, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
        id v18 = *(id *)(*(void *)(v9 + 56) + 8 * v20);
      }
      else
      {
        sub_100094820(v24, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
        id v18 = *(id *)(*(void *)(v9 + 56) + 8 * v20);
      }
      uint64_t result = sub_10009396C((uint64_t)v8, (uint64_t)v18, v10);
    }
  }
  uint64_t result = swift_release();
LABEL_30:
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100092D00(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10001D64C(&qword_1001113A8);
  char v38 = a2;
  uint64_t v6 = sub_1000CC8B0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    sub_1000CCAC0();
    sub_1000CC270();
    uint64_t result = sub_1000CCAF0();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    id v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *id v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100093010(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10001D64C(&qword_1001113A0);
  char v38 = a2;
  uint64_t v6 = sub_1000CC8B0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v11) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v14);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    long long v39 = *(_OWORD *)(*(void *)(v5 + 56) + v31);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_1000CCAC0();
    sub_1000CC270();
    uint64_t result = sub_1000CCAF0();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v17 == v28;
        if (v17 == v28) {
          unint64_t v17 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      unint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 16 * v18;
    unint64_t v20 = (void *)(*(void *)(v7 + 48) + v19);
    *unint64_t v20 = v34;
    v20[1] = v33;
    *(_OWORD *)(*(void *)(v7 + 56) + v19) = v39;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  int64_t v24 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

_OWORD *sub_100093320(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = sub_1000CC840();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  int64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10003CBE8(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100093D84();
      goto LABEL_7;
    }
    sub_100092370(v17, a3 & 1);
    unint64_t v23 = sub_10003CBE8(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100093C10(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = (_OWORD *)sub_1000CCA60();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  unint64_t v21 = (_OWORD *)(v20[7] + 32 * v14);
  sub_1000201A8((uint64_t)v21);

  return sub_100022804(a1, v21);
}

id sub_1000934F8(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_10003CF48((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10009402C();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_bridgeObjectRelease();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10009276C(v12, a3 & 1);
  unint64_t v18 = sub_10003CF48((uint64_t)a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_17:
    sub_100036814(0, (unint64_t *)&qword_10010F590);
    id result = (id)sub_1000CCA60();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v20 = 8 * v9;
  *(void *)(v15[6] + v20) = a2;
  *(void *)(v15[7] + v20) = a1;
  uint64_t v21 = v15[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v15[2] = v23;

  return a2;
}

void sub_10009366C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for ImageStore.Key();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v11 = (void *)*v3;
  unint64_t v13 = sub_10003CC4C(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    char v19 = *v4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];

      *(void *)(v20 + 8 * v13) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_1000941D8();
    goto LABEL_7;
  }
  sub_100092A44(v16, a3 & 1);
  unint64_t v21 = sub_10003CC4C(a2);
  if ((v17 & 1) != (v22 & 1))
  {
LABEL_14:
    sub_1000CCA60();
    __break(1u);
    return;
  }
  unint64_t v13 = v21;
  char v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100094820(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
  sub_100093CD0(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_1000937EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10003CED0(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= result && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= result && (a5 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10009460C();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      void *v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_100093010(result, a5 & 1);
  uint64_t result = sub_10003CED0(a3, a4);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = sub_1000CCA60();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v23 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v23 = a3;
  v23[1] = a4;
  char v24 = (void *)(v20[7] + 16 * v14);
  *char v24 = a1;
  v24[1] = a2;
  uint64_t v25 = v20[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v27;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10009396C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_1000CABE0();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ImageStore.Key();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  char v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CCAC0();
  sub_100094820(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    sub_1000CCAD0(1uLL);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    sub_1000CCAD0(0);
    sub_100092218((unint64_t *)&qword_100111370, (void (*)(uint64_t))&type metadata accessor for URL);
    sub_1000CC130();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  sub_1000CCAF0();
  unint64_t v14 = sub_1000CC6F0();
  *(void *)((char *)a3 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v14;
  uint64_t result = sub_100094888(a1, a3[6] + *(void *)(v11 + 72) * v14, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
  *(void *)(a3[7] + 8 * v14) = a2;
  ++a3[2];
  return result;
}

_OWORD *sub_100093C10(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_1000CC840();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = sub_100022804(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100093CD0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for ImageStore.Key();
  uint64_t result = sub_100094888(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

void *sub_100093D84()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_1000CC840();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D64C(&qword_100111398);
  uint64_t v6 = *v0;
  uint64_t v7 = sub_1000CC8A0();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *unint64_t v1 = v8;
    return result;
  }
  char v22 = v1;
  uint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v23 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v25 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v23 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 32 * v16;
    sub_100023250(*(void *)(v6 + 56) + v18, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    uint64_t result = sub_100022804(v26, (_OWORD *)(*(void *)(v8 + 56) + v18));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v24)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    unint64_t v1 = v22;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10009402C()
{
  unint64_t v1 = v0;
  sub_10001D64C(&qword_100111340);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1000CC8A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000941D8()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ImageStore.Key();
  uint64_t v26 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D64C(&qword_100111368);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_1000CC8A0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (id)swift_release();
LABEL_25:
    *unint64_t v1 = v7;
    return result;
  }
  int64_t v24 = v1;
  id result = (id)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v25 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v14) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v10);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v26 + 72) * v16;
    sub_100094820(*(void *)(v5 + 48) + v17, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
    uint64_t v18 = 8 * v16;
    id v19 = *(void **)(*(void *)(v5 + 56) + v18);
    sub_100094888((uint64_t)v4, *(void *)(v7 + 48) + v17, (uint64_t (*)(void))type metadata accessor for ImageStore.Key);
    *(void *)(*(void *)(v7 + 56) + v18) = v19;
    id result = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v14)
  {
LABEL_23:
    id result = (id)swift_release();
    unint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v10 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_100094458()
{
  unint64_t v1 = v0;
  sub_10001D64C(&qword_1001113A8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1000CC8A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    int64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10009460C()
{
  unint64_t v1 = v0;
  sub_10001D64C(&qword_1001113A0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1000CC8A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v20;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1000947B8()
{
  unint64_t result = qword_100111338;
  if (!qword_100111338)
  {
    sub_100036814(255, (unint64_t *)&qword_10010F590);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111338);
  }
  return result;
}

uint64_t sub_100094820(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100094888(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id sub_1000948F0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  return sub_1000908A8(a1, *(void *)(v2 + 16), a2);
}

id sub_10009490C(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1000CC890();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v5 = 4;
      while (1)
      {
        uint64_t v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          unint64_t v7 = (void *)sub_1000CC780();
          uint64_t v8 = v5 - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_12;
          }
        }
        else
        {
          unint64_t v7 = *(void **)(a1 + 8 * v5);
          swift_unknownObjectRetain();
          uint64_t v8 = v5 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_12:
            __break(1u);
            goto LABEL_13;
          }
        }
        id v9 = [v7 isEqual:a2];
        swift_unknownObjectRelease();
        if ((v9 & 1) == 0)
        {
          ++v5;
          if (v8 != v4) {
            continue;
          }
        }
        goto LABEL_15;
      }
    }
  }
  id v9 = 0;
LABEL_15:
  swift_bridgeObjectRelease();
  return v9;
}

void *sub_100094A20(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = sub_1000CC890())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0 ? (id)sub_1000CC780() : *(id *)(a1 + 8 * v5);
      unint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      sub_10006BDD0();
      unint64_t v10 = v9;
      swift_unknownObjectRetain();
      unsigned __int8 v11 = sub_10009490C(v10, a2);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      if (v11)
      {
        swift_bridgeObjectRelease();
        return v7;
      }

      ++v5;
      if (v8 == v4) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100094B58(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_1000FBDC8;
  v6._object = a2;
  unint64_t v4 = sub_1000CC8F0(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 0xA) {
    return 10;
  }
  else {
    return v4;
  }
}

uint64_t sub_100094BA4(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v5 = 0;
  if (v4)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        Swift::String v6 = (void *)sub_1000CC780();
      }
      else
      {
        Swift::String v6 = *(void **)(a1 + 8 * v5 + 32);
        swift_unknownObjectRetain();
      }
      unsigned __int8 v7 = [v6 isEqual:a2];
      swift_unknownObjectRelease();
      if (v7) {
        break;
      }
      uint64_t v8 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_12:
        swift_bridgeObjectRetain();
        uint64_t v4 = sub_1000CC890();
        swift_bridgeObjectRelease();
        uint64_t v5 = 0;
        if (!v4) {
          return v5;
        }
      }
      else
      {
        ++v5;
        if (v8 == v4) {
          return 0;
        }
      }
    }
  }
  return v5;
}

uint64_t sub_100094CB4(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v5 = 0;
  if (v4)
  {
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0 ? (id)sub_1000CC780() : *(id *)(a1 + 8 * v5 + 32);
      unsigned __int8 v7 = v6;
      unsigned __int8 v8 = [v6 isEqual:a2];

      if (v8) {
        break;
      }
      uint64_t v9 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_12:
        swift_bridgeObjectRetain();
        uint64_t v4 = sub_1000CC890();
        swift_bridgeObjectRelease();
        uint64_t v5 = 0;
        if (!v4) {
          return v5;
        }
      }
      else
      {
        ++v5;
        if (v9 == v4) {
          return 0;
        }
      }
    }
  }
  return v5;
}

void *sub_100094DB8(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_24;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)sub_1000CC780();
LABEL_10:
        id v6 = v5;
        unint64_t v7 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_23;
        }
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v8 = v5;
          if (!sub_1000CC850()) {
            goto LABEL_4;
          }
          sub_100036814(0, &qword_100111E30);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v9 = v15;
          swift_unknownObjectRelease();

          if (!v15) {
            goto LABEL_5;
          }
        }
        else
        {
          if (!*(void *)(a2 + 16)) {
            goto LABEL_5;
          }
          unint64_t v10 = sub_10003CF48((uint64_t)v5);
          if ((v11 & 1) == 0)
          {
LABEL_4:

            goto LABEL_5;
          }
          id v9 = *(id *)(*(void *)(a2 + 56) + 8 * v10);

          if (!v9) {
            goto LABEL_5;
          }
        }
        id v12 = [v9 integerValue];

        if ((uint64_t)v12 > 0)
        {
          sub_1000CC7D0();
          sub_1000CC800();
          sub_1000CC810();
          sub_1000CC7E0();
          goto LABEL_6;
        }
LABEL_5:

LABEL_6:
        ++v4;
        if (v7 == v3) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v4 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      uint64_t v3 = sub_1000CC890();
      if (!v3) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_10;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t getEnumTagSinglePayload for TrackableWidgetState.Errors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TrackableWidgetState.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009514CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrackableWidgetState.Errors()
{
  return &type metadata for TrackableWidgetState.Errors;
}

uint64_t getEnumTagSinglePayload for TrackableWidgetState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TrackableWidgetState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000952E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrackableWidgetState.CodingKeys()
{
  return &type metadata for TrackableWidgetState.CodingKeys;
}

unint64_t sub_10009531C()
{
  unint64_t result = qword_1001113C0;
  if (!qword_1001113C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001113C0);
  }
  return result;
}

unint64_t sub_100095374()
{
  unint64_t result = qword_1001113C8;
  if (!qword_1001113C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001113C8);
  }
  return result;
}

unint64_t sub_1000953CC()
{
  unint64_t result = qword_1001113D0;
  if (!qword_1001113D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001113D0);
  }
  return result;
}

unint64_t sub_100095424()
{
  unint64_t result = qword_1001113D8;
  if (!qword_1001113D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001113D8);
  }
  return result;
}

id sub_100095478@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  return sub_1000948F0(a1, a2);
}

id sub_100095490(void *a1)
{
  uint64_t v2 = v1;
  unsigned int v4 = (objc_class *)type metadata accessor for WidgetPersonalizationConfigurationManager();
  id v5 = objc_allocWithZone(v4);
  unsigned int v6 = (objc_class *)sub_1000CB100();
  objc_allocWithZone(v6);
  swift_unknownObjectRetain();
  BOOL v7 = (char *)v5;
  uint64_t v8 = sub_1000CB0F0();
  id v9 = (uint64_t *)&v7[OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager];
  v9[3] = (uint64_t)v6;
  void v9[4] = (uint64_t)&protocol witness table for NewsAppConfigurationManager;
  *id v9 = v8;

  v18.receiver = v7;
  v18.super_class = v4;
  [super init];
  sub_1000CB1B0();
  sub_1000956F8();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v11 = a1;
  id v12 = v10;
  int64_t v13 = (void *)sub_1000CB170();
  uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC7NewsTag23FeedPersonalizerFactory_configurationSet);
  id v15 = objc_allocWithZone((Class)type metadata accessor for WidgetPersonalizationService());
  id v16 = sub_10007E614(v13, v14);

  return v16;
}

uint64_t type metadata accessor for FeedPersonalizerFactory()
{
  return self;
}

unint64_t sub_1000956F8()
{
  unint64_t result = qword_100111418;
  if (!qword_100111418)
  {
    type metadata accessor for WidgetPersonalizationConfigurationManager();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111418);
  }
  return result;
}

uint64_t *sub_100095750(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    id v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    id v5 = a1;
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 20);
    BOOL v7 = (uint64_t *)((char *)a1 + v6);
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    *BOOL v7 = *(uint64_t *)((char *)a2 + v6);
    v7[1] = v9;
    uint64_t v10 = *(uint64_t *)((char *)a2 + v6 + 24);
    uint64_t v7[2] = *(uint64_t *)((char *)a2 + v6 + 16);
    v7[3] = v10;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v6 + 40);
    v7[4] = *(uint64_t *)((char *)a2 + v6 + 32);
    v7[5] = v11;
    uint64_t v12 = type metadata accessor for Banner();
    uint64_t v13 = *(int *)(v12 + 28);
    __dst = (char *)v7 + v13;
    char v38 = (int *)v12;
    int64_t v36 = &v8[v13];
    uint64_t v14 = sub_1000CABE0();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v35(v36, 1, v14))
    {
      uint64_t v16 = sub_10001D64C(&qword_10010F340);
      memcpy(__dst, v36, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v36, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v17 = v38[8];
    objc_super v18 = (void *)((char *)v7 + v17);
    uint64_t v19 = &v8[v17];
    uint64_t v20 = *((void *)v19 + 1);
    *objc_super v18 = *(void *)v19;
    v18[1] = v20;
    uint64_t v21 = v38[9];
    int64_t v22 = *(void **)&v8[v21];
    swift_bridgeObjectRetain();
    if (v22 != (void *)1) {
      id v23 = v22;
    }
    *(void *)((char *)v7 + v21) = v22;
    uint64_t v24 = v38[10];
    uint64_t v25 = (char *)v7 + v24;
    uint64_t v26 = &v8[v24];
    uint64_t v27 = *(void **)v26;
    unint64_t v28 = (void *)*((void *)v26 + 1);
    char v29 = v26[16];
    sub_10001DB84(*(void **)v26, v28);
    *(void *)uint64_t v25 = v27;
    *((void *)v25 + 1) = v28;
    v25[16] = v29;
    uint64_t v30 = *(int *)(a3 + 24);
    uint64_t v31 = (char *)v5 + v30;
    uint64_t v32 = (char *)a2 + v30;
    uint64_t v33 = sub_10001D64C(&qword_100111420);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
  }
  return v5;
}

uint64_t sub_1000959F4(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v5 = (int *)type metadata accessor for Banner();
  uint64_t v6 = v4 + v5[7];
  uint64_t v7 = sub_1000CABE0();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void **)(v4 + v5[9]);
  if (v9 != (void *)1) {

  }
  sub_10001DE30(*(void **)(v4 + v5[10]), *(void **)(v4 + v5[10] + 8));
  uint64_t v10 = a1 + *(int *)(a2 + 24);
  uint64_t v11 = sub_10001D64C(&qword_100111420);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);

  return v12(v10, v11);
}

void *sub_100095B70(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = *(int *)(a3 + 20);
  id v5 = (void *)((char *)a1 + v4);
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = *(void *)((char *)a2 + v4 + 8);
  *id v5 = *(void *)((char *)a2 + v4);
  v5[1] = v7;
  uint64_t v8 = *(void *)((char *)a2 + v4 + 24);
  uint64_t v5[2] = *(void *)((char *)a2 + v4 + 16);
  v5[3] = v8;
  uint64_t v9 = *(void *)((char *)a2 + v4 + 40);
  v5[4] = *(void *)((char *)a2 + v4 + 32);
  void v5[5] = v9;
  uint64_t v10 = type metadata accessor for Banner();
  uint64_t v11 = *(int *)(v10 + 28);
  __dst = (char *)v5 + v11;
  int64_t v36 = (int *)v10;
  uint64_t v34 = &v6[v11];
  uint64_t v12 = sub_1000CABE0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33(v34, 1, v12))
  {
    uint64_t v14 = sub_10001D64C(&qword_10010F340);
    memcpy(__dst, v34, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v34, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v15 = v36[8];
  uint64_t v16 = (void *)((char *)v5 + v15);
  uint64_t v17 = &v6[v15];
  uint64_t v18 = *((void *)v17 + 1);
  *uint64_t v16 = *(void *)v17;
  v16[1] = v18;
  uint64_t v19 = v36[9];
  uint64_t v20 = *(void **)&v6[v19];
  swift_bridgeObjectRetain();
  if (v20 != (void *)1) {
    id v21 = v20;
  }
  *(void *)((char *)v5 + v19) = v20;
  uint64_t v22 = v36[10];
  id v23 = (char *)v5 + v22;
  uint64_t v24 = &v6[v22];
  uint64_t v25 = *(void **)v24;
  uint64_t v26 = (void *)*((void *)v24 + 1);
  char v27 = v24[16];
  sub_10001DB84(*(void **)v24, v26);
  *(void *)id v23 = v25;
  *((void *)v23 + 1) = v26;
  v23[16] = v27;
  uint64_t v28 = *(int *)(a3 + 24);
  char v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = sub_10001D64C(&qword_100111420);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
  return a1;
}

void *sub_100095DC0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v41 = a3;
  uint64_t v42 = a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  *uint64_t v7 = *(void *)((char *)a2 + v6);
  v7[1] = *(void *)((char *)a2 + v6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7[2] = v8[2];
  v7[3] = v8[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[4] = v8[4];
  v7[5] = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = (int *)type metadata accessor for Banner();
  uint64_t v9 = v40[7];
  uint64_t v10 = (char *)v7 + v9;
  uint64_t v11 = (char *)v8 + v9;
  uint64_t v12 = sub_1000CABE0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_10001D64C(&qword_10010F340);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = v40[8];
  uint64_t v19 = (void *)((char *)v7 + v18);
  uint64_t v20 = (void *)((char *)v8 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v40[9];
  uint64_t v22 = (void *)((char *)v7 + v21);
  id v23 = *(void **)((char *)v7 + v21);
  uint64_t v24 = *(void **)((char *)v8 + v21);
  if (v23 != (void *)1)
  {
    if (v24 != (void *)1)
    {
      *uint64_t v22 = v24;
      id v26 = v24;

      goto LABEL_14;
    }
    sub_10001EA8C((uint64_t)v7 + v21);
    uint64_t v24 = *(void **)((char *)v8 + v21);
    goto LABEL_12;
  }
  if (v24 == (void *)1)
  {
LABEL_12:
    *uint64_t v22 = v24;
    goto LABEL_14;
  }
  *uint64_t v22 = v24;
  id v25 = v24;
LABEL_14:
  uint64_t v27 = v40[10];
  uint64_t v28 = (char *)v7 + v27;
  char v29 = (char *)v8 + v27;
  uint64_t v30 = *(void **)v29;
  uint64_t v31 = (void *)*((void *)v29 + 1);
  char v32 = v29[16];
  sub_10001DB84(*(void **)v29, v31);
  uint64_t v33 = *(void **)v28;
  uint64_t v34 = (void *)*((void *)v28 + 1);
  *(void *)uint64_t v28 = v30;
  *((void *)v28 + 1) = v31;
  unsigned char v28[16] = v32;
  sub_10001DE30(v33, v34);
  uint64_t v35 = *(int *)(v41 + 24);
  int64_t v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)v42 + v35;
  uint64_t v38 = sub_10001D64C(&qword_100111420);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 24))(v36, v37, v38);
  return a1;
}

_OWORD *sub_100096100(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  uint64_t v8 = (char *)a2 + v6;
  long long v9 = *(_OWORD *)((char *)a2 + v6 + 16);
  *uint64_t v7 = *(_OWORD *)((char *)a2 + v6);
  v7[1] = v9;
  uint64_t v7[2] = *(_OWORD *)((char *)a2 + v6 + 32);
  uint64_t v10 = (int *)type metadata accessor for Banner();
  uint64_t v11 = v10[7];
  uint64_t v12 = (char *)v7 + v11;
  uint64_t v13 = &v8[v11];
  uint64_t v14 = sub_1000CABE0();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_10001D64C(&qword_10010F340);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  *(_OWORD *)((char *)v7 + v10[8]) = *(_OWORD *)&v8[v10[8]];
  *(void *)((char *)v7 + v10[9]) = *(void *)&v8[v10[9]];
  uint64_t v17 = v10[10];
  uint64_t v18 = (char *)v7 + v17;
  uint64_t v19 = &v8[v17];
  v18[16] = v19[16];
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = sub_10001D64C(&qword_100111420);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  return a1;
}

void *sub_1000962D4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v42 = a3;
  id v43 = a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = *(void *)((char *)a2 + v6 + 8);
  *uint64_t v7 = *(void *)((char *)a2 + v6);
  v7[1] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = v8[3];
  uint64_t v7[2] = v8[2];
  v7[3] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = v8[5];
  v7[4] = v8[4];
  v7[5] = v11;
  swift_bridgeObjectRelease();
  uint64_t v41 = (int *)type metadata accessor for Banner();
  uint64_t v12 = v41[7];
  uint64_t v13 = (char *)v7 + v12;
  uint64_t v14 = (char *)v8 + v12;
  uint64_t v15 = sub_1000CABE0();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    uint64_t v20 = sub_10001D64C(&qword_10010F340);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = v41[8];
  uint64_t v22 = (void *)((char *)v7 + v21);
  uint64_t v23 = (void *)((char *)v8 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = v41[9];
  uint64_t v27 = (void *)((char *)v7 + v26);
  uint64_t v28 = *(void **)((char *)v7 + v26);
  uint64_t v29 = *(void *)((char *)v8 + v26);
  if (v28 != (void *)1)
  {
    if (v29 != 1)
    {
      *uint64_t v27 = v29;

      goto LABEL_12;
    }
    sub_10001EA8C((uint64_t)v7 + v26);
    uint64_t v29 = *(void *)((char *)v8 + v26);
  }
  *uint64_t v27 = v29;
LABEL_12:
  uint64_t v30 = v41[10];
  uint64_t v31 = (char *)v7 + v30;
  char v32 = (char *)v8 + v30;
  char v33 = v32[16];
  uint64_t v34 = *(void **)v31;
  uint64_t v35 = (void *)*((void *)v31 + 1);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  v31[16] = v33;
  sub_10001DE30(v34, v35);
  uint64_t v36 = *(int *)(v42 + 24);
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)v43 + v36;
  uint64_t v39 = sub_10001D64C(&qword_100111420);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 40))(v37, v38, v39);
  return a1;
}

uint64_t sub_1000965A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000965B8);
}

uint64_t sub_1000965B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Banner();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10001D64C(&qword_100111420);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1000966E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000966FC);
}

void *sub_1000966FC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  id v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Banner();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10001D64C(&qword_100111420);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for BannerView()
{
  uint64_t result = qword_100111480;
  if (!qword_100111480) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100096878()
{
  type metadata accessor for Banner();
  if (v0 <= 0x3F)
  {
    sub_10009694C();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10009694C()
{
  if (!qword_100111490)
  {
    sub_100058504();
    unint64_t v0 = sub_1000CB2F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100111490);
    }
  }
}

uint64_t sub_1000969A8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000969C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v29 = sub_10001D64C(&qword_1001114C8);
  __chkstk_darwin(v29);
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10001D64C(&qword_1001114D0);
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10001D64C(&qword_1001114D8);
  __chkstk_darwin(v26);
  uint64_t v25 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000CABE0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v25 - v16;
  int v18 = &v1[*(int *)(type metadata accessor for BannerView() + 20)];
  uint64_t v19 = type metadata accessor for Banner();
  sub_100036850((uint64_t)&v18[*(int *)(v19 + 28)], (uint64_t)v10, &qword_10010F340);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1000227A8((uint64_t)v10, &qword_10010F340);
    *(void *)uint64_t v3 = sub_1000CB700();
    *((void *)v3 + 1) = 0;
    v3[16] = 1;
    uint64_t v20 = sub_10001D64C(&qword_1001114E0);
    sub_100096E88(v1, (uint64_t)&v3[*(int *)(v20 + 44)]);
    sub_100036A5C(&qword_1001114E8, &qword_1001114C8);
    uint64_t result = sub_1000CBC70();
    uint64_t v22 = result;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
    uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    __chkstk_darwin(v23);
    *(&v25 - 2) = v1;
    sub_100036A5C(&qword_1001114E8, &qword_1001114C8);
    sub_1000CB8C0();
    sub_100036A5C(&qword_1001114F0, &qword_1001114D0);
    uint64_t v24 = v28;
    sub_1000CBA70();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v24);
    sub_100098C3C();
    uint64_t v22 = sub_1000CBC70();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
  *uint64_t v30 = v22;
  return result;
}

uint64_t sub_100096E38@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = sub_1000CB700();
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  uint64_t v4 = sub_10001D64C(&qword_1001114E0);
  return sub_100096E88(a1, a2 + *(int *)(v4 + 44));
}

uint64_t sub_100096E88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10001D64C(&qword_100111500);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v15 - v8;
  type metadata accessor for BannerView();
  sub_10001D64C(&qword_100111420);
  sub_1000CB2E0();
  uint64_t v10 = v15[1];
  *(void *)uint64_t v9 = sub_1000CB5F0();
  *((void *)v9 + 1) = 0;
  v9[16] = 1;
  uint64_t v11 = sub_10001D64C(&qword_100111508);
  sub_100096FEC(a1, (uint64_t)&v9[*(int *)(v11 + 44)]);
  sub_100036850((uint64_t)v9, (uint64_t)v7, &qword_100111500);
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v12 = sub_10001D64C(&qword_100111510);
  sub_100036850((uint64_t)v7, a2 + *(int *)(v12 + 48), &qword_100111500);
  uint64_t v13 = a2 + *(int *)(v12 + 64);
  *(void *)uint64_t v13 = 0x4028000000000000;
  *(unsigned char *)(v13 + 8) = 0;
  sub_1000227A8((uint64_t)v9, &qword_100111500);
  return sub_1000227A8((uint64_t)v7, &qword_100111500);
}

uint64_t sub_100096FEC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10001D64C(&qword_100111518);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v23[-1] - v8;
  *(void *)uint64_t v9 = sub_1000CB700();
  *((void *)v9 + 1) = 0;
  v9[16] = 1;
  uint64_t v10 = sub_10001D64C(&qword_100111520);
  sub_1000971A0(a1, &v9[*(int *)(v10 + 44)]);
  sub_100097DC8(v23);
  uint64_t v11 = v23[0];
  sub_1000CBD20();
  sub_1000CB310();
  uint64_t v12 = v23[1];
  char v13 = v24;
  uint64_t v14 = v25;
  char v15 = v26;
  uint64_t v16 = v27;
  uint64_t v22 = v28;
  sub_100036850((uint64_t)v9, (uint64_t)v7, &qword_100111518);
  sub_100036850((uint64_t)v7, a2, &qword_100111518);
  uint64_t v17 = sub_10001D64C(&qword_100111528);
  uint64_t v18 = a2 + *(int *)(v17 + 48);
  *(void *)uint64_t v18 = 0x4020000000000000;
  *(unsigned char *)(v18 + 8) = 0;
  uint64_t v19 = a2 + *(int *)(v17 + 64);
  *(void *)uint64_t v19 = v11;
  *(void *)(v19 + 8) = v12;
  *(unsigned char *)(v19 + 16) = v13;
  *(void *)(v19 + 24) = v14;
  *(unsigned char *)(v19 + 32) = v15;
  uint64_t v20 = v22;
  *(void *)(v19 + 40) = v16;
  *(void *)(v19 + 48) = v20;
  swift_retain();
  sub_1000227A8((uint64_t)v9, &qword_100111518);
  swift_release();
  return sub_1000227A8((uint64_t)v7, &qword_100111518);
}

uint64_t sub_1000971A0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v131 = a1;
  uint64_t v129 = a2;
  uint64_t v115 = sub_10001D64C(&qword_100111568);
  __chkstk_darwin(v115);
  uint64_t v118 = (char *)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000CBC80();
  __chkstk_darwin(v4 - 8);
  uint64_t v116 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_10001D64C(&qword_100111570);
  __chkstk_darwin(v114);
  uint64_t v7 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_10001D64C(&qword_100111578);
  uint64_t v125 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v117 = (uint64_t)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10001D64C(&qword_100111580);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v128 = (uint64_t)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v127 = (uint64_t)&v109 - v12;
  uint64_t v133 = sub_1000CB850();
  uint64_t v123 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v122 = (char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = (void *)((char *)a1 + *(int *)(type metadata accessor for BannerView() + 20));
  uint64_t v14 = v132[3];
  uint64_t v146 = v132[2];
  uint64_t v147 = v14;
  unint64_t v130 = sub_1000231FC();
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000CB9D0();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  sub_1000CB860();
  uint64_t v20 = sub_1000CB940();
  uint64_t v22 = v21;
  char v24 = v23;
  swift_release();
  sub_100036118(v15, v17, v19);
  swift_bridgeObjectRelease();
  sub_1000CB820();
  uint64_t v25 = sub_1000CB8E0();
  uint64_t v27 = v26;
  char v29 = v28 & 1;
  sub_100036118(v20, v22, v24 & 1);
  swift_bridgeObjectRelease();
  uint64_t v135 = sub_1000CB900();
  uint64_t v136 = v30;
  int v124 = v31;
  uint64_t v137 = v32;
  sub_100036118(v25, v27, v29);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v33 = v132[5];
  uint64_t v146 = v132[4];
  uint64_t v147 = v33;
  swift_bridgeObjectRetain();
  uint64_t v34 = sub_1000CB9D0();
  uint64_t v36 = v35;
  char v38 = v37 & 1;
  sub_1000CB870();
  uint64_t v39 = v123;
  uint64_t v40 = v122;
  uint64_t v41 = v133;
  (*(void (**)(char *, void, uint64_t))(v123 + 104))(v122, enum case for Font.Leading.tight(_:), v133);
  sub_1000CB880();
  swift_release();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
  uint64_t v52 = sub_1000CB940();
  uint64_t v43 = v42;
  LOBYTE(v40) = v44;
  swift_release();
  sub_100036118(v34, v36, v38);
  swift_bridgeObjectRelease();
  sub_1000CB840();
  uint64_t v45 = sub_1000CB8E0();
  uint64_t v47 = v46;
  char v49 = v48 & 1;
  sub_100036118(v52, v43, v40 & 1);
  swift_bridgeObjectRelease();
  sub_1000CBB10();
  uint64_t v123 = sub_1000CB900();
  uint64_t v122 = v50;
  LODWORD(v52) = v51;
  uint64_t v133 = v53;
  swift_release();
  sub_100036118(v45, v47, v49);
  swift_bridgeObjectRelease();
  uint64_t v121 = swift_getKeyPath();
  uint64_t v120 = swift_getKeyPath();
  uint64_t v119 = swift_getKeyPath();
  uint64_t v54 = (void *)((char *)v132 + *(int *)(type metadata accessor for Banner() + 32));
  uint64_t v55 = v54[1];
  if (v55)
  {
    uint64_t v146 = *v54;
    uint64_t v147 = v55;
    swift_bridgeObjectRetain();
    uint64_t v56 = sub_1000CB9D0();
    uint64_t v58 = v57;
    char v60 = v59 & 1;
    sub_1000CB870();
    LODWORD(v132) = v52;
    uint64_t v61 = sub_1000CB940();
    uint64_t v63 = v62;
    char v65 = v64;
    swift_release();
    sub_100036118(v56, v58, v60);
    swift_bridgeObjectRelease();
    sub_1000CB840();
    uint64_t v52 = sub_1000CB8E0();
    uint64_t v67 = v66;
    uint64_t v69 = v68;
    char v71 = v70 & 1;
    sub_100036118(v61, v63, v65 & 1);
    swift_bridgeObjectRelease();
    sub_1000CBD20();
    sub_1000CB310();
    uint64_t v110 = v146;
    LOBYTE(v56) = v147;
    uint64_t v111 = v148;
    char v72 = v149;
    unint64_t v130 = v150;
    uint64_t v113 = v151;
    int v112 = sub_1000CB7F0();
    sub_1000CB280();
    uint64_t v74 = v73;
    uint64_t v76 = v75;
    uint64_t v78 = v77;
    uint64_t v80 = v79;
    char v145 = v71;
    char v143 = v56;
    char v141 = v72;
    char v138 = 0;
    uint64_t v81 = v131;
    uint64_t v82 = *v131;
    uint64_t v83 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v84 = sub_1000CB680();
    uint64_t v85 = (uint64_t)v116;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v84 - 8) + 104))(v116, v83, v84);
    uint64_t v86 = v115;
    uint64_t v87 = v118;
    sub_100098D58(v85, (uint64_t)&v118[*(int *)(v115 + 52)]);
    *uint64_t v87 = v82;
    *(_WORD *)((char *)v87 + *(int *)(v86 + 56)) = 256;
    sub_100036850((uint64_t)v87, (uint64_t)&v7[*(int *)(v114 + 36)], &qword_100111568);
    *(void *)uint64_t v7 = v52;
    *((void *)v7 + 1) = v67;
    v7[16] = v145;
    *(_DWORD *)(v7 + 17) = *(_DWORD *)v144;
    *((_DWORD *)v7 + 5) = *(_DWORD *)&v144[3];
    uint64_t v88 = v110;
    *((void *)v7 + 3) = v69;
    *((void *)v7 + 4) = v88;
    v7[40] = v143;
    *(_DWORD *)(v7 + 41) = *(_DWORD *)v142;
    *((_DWORD *)v7 + 11) = *(_DWORD *)&v142[3];
    *((void *)v7 + 6) = v111;
    v7[56] = v141;
    *((_DWORD *)v7 + 15) = *(_DWORD *)&v140[3];
    *(_DWORD *)(v7 + 57) = *(_DWORD *)v140;
    uint64_t v89 = v113;
    *((void *)v7 + 8) = v130;
    *((void *)v7 + 9) = v89;
    v7[80] = v112;
    *((_DWORD *)v7 + 21) = *(_DWORD *)&v139[3];
    *(_DWORD *)(v7 + 81) = *(_DWORD *)v139;
    *((void *)v7 + 11) = v74;
    *((void *)v7 + 12) = v76;
    *((void *)v7 + 13) = v78;
    *((void *)v7 + 14) = v80;
    v7[120] = v138;
    swift_retain_n();
    sub_100036108(v52, v67, v71);
    swift_bridgeObjectRetain();
    sub_1000227A8((uint64_t)v87, &qword_100111568);
    sub_100098DBC(v85);
    swift_release();
    uint64_t v90 = v52;
    LOBYTE(v52) = (_BYTE)v132;
    sub_100036118(v90, v67, v71);
    swift_bridgeObjectRelease();
    uint64_t v91 = v81[1];
    uint64_t v92 = swift_getKeyPath();
    uint64_t v93 = v117;
    sub_100036850((uint64_t)v7, v117, &qword_100111570);
    uint64_t v94 = v126;
    uint64_t v95 = (uint64_t *)(v93 + *(int *)(v126 + 36));
    *uint64_t v95 = v92;
    v95[1] = v91;
    swift_retain();
    sub_1000227A8((uint64_t)v7, &qword_100111570);
    uint64_t v96 = v127;
    sub_100098E18(v93, v127);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v125 + 56))(v96, 0, 1, v94);
  }
  else
  {
    uint64_t v96 = v127;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 56))(v127, 1, 1, v126);
  }
  char v97 = v52 & 1;
  LODWORD(v132) = v52 & 1;
  char v98 = v124 & 1;
  v144[0] = v124 & 1;
  uint64_t v99 = v128;
  sub_100036850(v96, v128, &qword_100111580);
  uint64_t v100 = v129;
  uint64_t v101 = v135;
  uint64_t v102 = v136;
  void *v129 = v135;
  v100[1] = v102;
  *((unsigned char *)v100 + 16) = v98;
  uint64_t v103 = KeyPath;
  void v100[3] = v137;
  v100[4] = v103;
  v100[5] = 0x3FE6666666666666;
  v100[6] = 0x4010000000000000;
  *((unsigned char *)v100 + 56) = 0;
  uint64_t v104 = v123;
  uint64_t v105 = (uint64_t)v122;
  v100[8] = v123;
  v100[9] = v105;
  *((unsigned char *)v100 + 80) = v97;
  uint64_t v106 = v121;
  v100[11] = v133;
  v100[12] = v106;
  v100[13] = 0x3FECCCCCCCCCCCCDLL;
  v100[14] = v120;
  v100[15] = 0x3FE6666666666666;
  v100[16] = v119;
  v100[17] = 4;
  *((unsigned char *)v100 + 144) = 0;
  uint64_t v107 = sub_10001D64C(&qword_100111588);
  sub_100036850(v99, (uint64_t)v100 + *(int *)(v107 + 80), &qword_100111580);
  sub_100036108(v101, v136, v98);
  swift_bridgeObjectRetain();
  swift_retain();
  LOBYTE(v101) = (_BYTE)v132;
  sub_100036108(v104, v105, (char)v132);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000227A8(v96, &qword_100111580);
  sub_1000227A8(v99, &qword_100111580);
  sub_100036118(v104, v105, v101);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_100036118(v135, v136, v144[0]);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100097DC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v2 = sub_10001D64C(&qword_10010FC00);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000CBBD0();
  uint64_t v32 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10001D64C(&qword_10010FC08);
  uint64_t v34 = *(void *)(v8 - 8);
  uint64_t v35 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10001D64C(&qword_10010FC10);
  uint64_t v11 = __chkstk_darwin(v33);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v31 - v14;
  uint64_t v16 = sub_10001D64C(&qword_100111530);
  __chkstk_darwin(v16);
  char v18 = (uint64_t *)((char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = v1 + *(int *)(type metadata accessor for BannerView() + 20);
  uint64_t v20 = *(void **)(v19 + *(int *)(type metadata accessor for Banner() + 36));
  if (v20)
  {
    if (v20 != (void *)1)
    {
      id v25 = v20;
      sub_1000CBBC0();
      uint64_t v26 = v32;
      (*(void (**)(char *, void, uint64_t))(v32 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v5);
      sub_1000CBC30();
      swift_release();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
      sub_1000CBF10();
      uint64_t v27 = sub_1000CBF20();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v4, 0, 1, v27);
      sub_1000CBC20();
      swift_release();
      sub_1000227A8((uint64_t)v4, &qword_10010FC00);
      uint64_t v29 = v34;
      uint64_t v28 = v35;
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v15, v10, v35);
      uint64_t v30 = &v15[*(int *)(v33 + 36)];
      *(void *)uint64_t v30 = 0;
      *((_WORD *)v30 + 4) = 1;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v28);
      sub_100036850((uint64_t)v15, (uint64_t)v13, &qword_10010FC10);
      sub_10004EF60();
      uint64_t v24 = sub_1000CBC70();
      sub_100098CDC(v20);
      uint64_t result = sub_1000227A8((uint64_t)v15, &qword_10010FC10);
      goto LABEL_7;
    }
  }
  else
  {
    *char v18 = sub_1000CBD20();
    v18[1] = v21;
    uint64_t v22 = sub_10001D64C(&qword_100111538);
    sub_100098238(v1, (uint64_t)v18 + *(int *)(v22 + 44));
    sub_100036A5C(&qword_100111540, &qword_100111530);
  }
  uint64_t result = sub_1000CBC70();
  uint64_t v24 = result;
LABEL_7:
  *uint64_t v36 = v24;
  return result;
}

uint64_t sub_100098238@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v3 = sub_10001D64C(&qword_100111548);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v30 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v29 = (uint64_t)&v28 - v7;
  uint64_t v8 = sub_10001D64C(&qword_100111550);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000CBBD0();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = sub_100098B2C();
  sub_1000CBBC0();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for Image.ResizingMode.stretch(_:), v11);
  sub_1000CBC30();
  swift_release();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v16 = enum case for Image.TemplateRenderingMode.template(_:);
  uint64_t v17 = sub_1000CBC00();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v10, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v10, 0, 1, v17);
  uint64_t v19 = sub_1000CBBE0();
  swift_release();

  sub_1000227A8((uint64_t)v10, &qword_100111550);
  uint64_t v20 = *(void *)(v31 + 8);
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  uint64_t v22 = v29;
  sub_1000985F8(v29);
  char v23 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v24 = v30;
  v23(v30, v22, v3);
  *(void *)a2 = v19;
  *(void *)(a2 + 8) = 0x3FF0000000000000;
  *(_WORD *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = KeyPath;
  *(void *)(a2 + 32) = v20;
  uint64_t v25 = sub_10001D64C(&qword_100111558);
  v23((char *)(a2 + *(int *)(v25 + 48)), (uint64_t)v24, v3);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  v26(v22, v3);
  v26((uint64_t)v24, v3);
  swift_release();
  swift_release();
  return swift_release();
}

id sub_1000985F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v1 = sub_10001D64C(&qword_100111560);
  uint64_t v29 = *(void *)(v1 - 8);
  uint64_t v30 = v1;
  __chkstk_darwin(v1);
  uint64_t v28 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1000CBB00();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000CBBD0();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [self premiumSealInner:v27];
  if (result)
  {
    sub_1000CBBC0();
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for Image.ResizingMode.stretch(_:), v7);
    uint64_t v12 = sub_1000CBC30();
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    NSString v13 = sub_1000CC1C0();
    uint64_t v14 = self;
    id v15 = [v14 colorWithHexString:v13];

    [v15 red];
    [v15 green];
    [v15 blue];
    uint64_t v16 = enum case for Color.RGBColorSpace.sRGB(_:);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
    v17(v6, enum case for Color.RGBColorSpace.sRGB(_:), v3);
    uint64_t v18 = sub_1000CBBA0();

    NSString v19 = sub_1000CC1C0();
    id v20 = [v14 colorWithHexString:v19];

    [v20 red];
    [v20 green];
    [v20 blue];
    v17(v6, v16, v3);
    uint64_t v21 = sub_1000CBBA0();

    sub_10001D64C(&qword_100110D88);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1000D34A0;
    *(void *)(v22 + 32) = v18;
    *(void *)(v22 + 40) = v21;
    uint64_t v31 = v22;
    sub_1000CC3D0();
    swift_retain();
    swift_retain();
    sub_1000CBCD0();
    sub_1000CBD30();
    sub_1000CBD40();
    sub_1000CB370();
    uint64_t v31 = v37;
    long long v32 = v38;
    long long v33 = v39;
    uint64_t v34 = v12;
    uint64_t v35 = 0x3FF0000000000000;
    __int16 v36 = 0;
    swift_retain();
    uint64_t v23 = sub_10001D64C(&qword_100110DA8);
    uint64_t v24 = sub_100082D54();
    uint64_t v25 = v28;
    sub_1000CBA20();
    sub_1000583A8((uint64_t)&v37);
    swift_release();
    uint64_t v31 = v23;
    *(void *)&long long v32 = v24;
    swift_getOpaqueTypeConformance2();
    uint64_t v26 = v30;
    sub_1000CB9E0();
    swift_release();
    swift_release();
    swift_release();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v25, v26);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100098B2C()
{
  id v0 = [self sharedAccount];
  id v1 = [v0 supportedContentLanguage];

  if (v1 != (id)1)
  {
    if (v1) {
      goto LABEL_7;
    }
    id result = [self premiumSealOuter];
    if (result) {
      return result;
    }
    __break(1u);
  }
  id result = [self premiumSealOuterFR];
  if (result) {
    return result;
  }
  __break(1u);
LABEL_7:
  id result = [self premiumSealOuter];
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100098BFC@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1000969C4(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_100098C34@<X0>(uint64_t a1@<X8>)
{
  return sub_100096E38(*(void **)(v1 + 16), a1);
}

unint64_t sub_100098C3C()
{
  unint64_t result = qword_1001114F8;
  if (!qword_1001114F8)
  {
    sub_10001D690(&qword_1001114D8);
    sub_100036A5C(&qword_1001114F0, &qword_1001114D0);
    sub_100082F64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001114F8);
  }
  return result;
}

void sub_100098CDC(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t sub_100098CFC@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1000CB4D0();
  *a1 = v3;
  return result;
}

uint64_t sub_100098D28()
{
  return sub_1000CB4E0();
}

uint64_t sub_100098D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CBC80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100098DBC(uint64_t a1)
{
  uint64_t v2 = sub_1000CBC80();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100098E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001D64C(&qword_100111578);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for BannerView.LayoutOptions()
{
  swift_release();

  return swift_release();
}

void *_s7NewsTag10BannerViewV13LayoutOptionsVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for BannerView.LayoutOptions(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for BannerView.LayoutOptions(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BannerView.LayoutOptions(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BannerView.LayoutOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BannerView.LayoutOptions()
{
  return &type metadata for BannerView.LayoutOptions;
}

void *sub_10009902C()
{
  return &protocol witness table for AnyView;
}

id sub_100099038(void *a1, void *a2, void *a3)
{
  if ([a1 userInterfaceStyle] == (id)2) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = a2;
  }

  return v5;
}

void sub_100099080()
{
  id v0 = [self secondarySystemBackgroundColor];
  id v1 = [self traitCollectionWithUserInterfaceStyle:2];
  id v2 = [v0 resolvedColorWithTraitCollection:v1];

  qword_10011AC70 = (uint64_t)v2;
}

UIImage *sub_100099120(CGFloat a1, CGFloat a2)
{
  if (a1 == 0.0) {
    return 0;
  }
  uint64_t v3 = 0;
  BOOL v6 = (*(void *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&a1 & 0x7FF0000000000000) == 0;
  if (!v6 && a2 != 0.0)
  {
    if ((~*(void *)&a2 & 0x7FF0000000000000) != 0 || (*(void *)&a2 & 0xFFFFFFFFFFFFFLL) == 0)
    {
      UIGraphicsBeginImageContextWithOptions(*(CGSize *)&a1, 0, 0.0);
      [v2 set];
      id v8 = [self ts_bezierPathWithPillRect:0.0 cornerRadius:0.0 a1:a1 a2:a2];
      [v8 addClip];

      v9.origin.x = 0.0;
      v9.origin.y = 0.0;
      v9.size.width = a1;
      v9.size.height = a2;
      UIRectFill(v9);
      uint64_t v3 = UIGraphicsGetImageFromCurrentImageContext();
      UIGraphicsEndImageContext();
      return v3;
    }
    return 0;
  }
  return v3;
}

uint64_t sub_100099230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  CGRect v9 = (void *)swift_allocObject();
  uint64_t v9[2] = sub_1000996D8;
  v9[3] = v8;
  void v9[4] = a3;
  v9[5] = a4;
  swift_retain();
  swift_retain();
  sub_1000CBF90();

  return swift_release();
}

uint64_t sub_1000992FC(uint64_t a1, char a2, void (*a3)(void), uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v10 = sub_1000CBF60();
  uint64_t v37 = *(void *)(v10 - 8);
  uint64_t v38 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NewsWidgetInfo();
  uint64_t v36 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    swift_errorRetain();
    a5(a1);
    return sub_1000997AC(a1, 1);
  }
  int64_t v16 = *(void *)(a1 + 16);
  uint64_t v17 = &_swiftEmptyArrayStorage;
  if (!v16) {
    goto LABEL_24;
  }
  uint64_t v32 = a4;
  long long v33 = a3;
  long long v39 = &_swiftEmptyArrayStorage;
  sub_100026E78(0, v16, 0);
  uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
  unint64_t v19 = a1 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
  uint64_t v34 = *(void *)(v37 + 72);
  uint64_t v35 = v18;
  v37 += 16;
  id v20 = (void (**)(char *, uint64_t))(v37 - 8);
  do
  {
    v35(v12, v19, v38);
    uint64_t v21 = sub_1000CBF30();
    if (!v21)
    {
      uint64_t v25 = 0;
      goto LABEL_14;
    }
    uint64_t v22 = (void *)v21;
    swift_getObjectType();
    uint64_t v23 = swift_conformsToProtocol2();
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    if (v23) {
      uint64_t v25 = v22;
    }
    else {
      uint64_t v25 = 0;
    }
    if (!v25)
    {

LABEL_14:
      uint64_t v24 = 0;
    }
    sub_1000CBF40();
    uint64_t v26 = sub_1000CBF50();
    *id v15 = v25;
    v15[1] = v24;
    uint64_t v27 = (void *)((char *)v15 + *(int *)(v13 + 24));
    *uint64_t v27 = v26;
    v27[1] = v28;
    (*v20)(v12, v38);
    uint64_t v17 = v39;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100026E78(0, v17[2] + 1, 1);
      uint64_t v17 = v39;
    }
    unint64_t v30 = v17[2];
    unint64_t v29 = v17[3];
    if (v30 >= v29 >> 1)
    {
      sub_100026E78(v29 > 1, v30 + 1, 1);
      uint64_t v17 = v39;
    }
    v17[2] = v30 + 1;
    sub_1000997B8((uint64_t)v15, (uint64_t)v17+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(void *)(v36 + 72) * v30);
    v19 += v34;
    --v16;
  }
  while (v16);
  a3 = v33;
LABEL_24:
  a3(v17);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100099640()
{
  return sub_1000CB080();
}

uint64_t sub_100099698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100099230(a1, a2, a3, a4);
}

uint64_t sub_1000996A0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000996D8(uint64_t a1)
{
  id v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_100099710()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100099750(uint64_t a1, char a2)
{
  return sub_1000992FC(a1, a2 & 1, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t))(v2 + 32));
}

uint64_t type metadata accessor for NewsWidgetInfo()
{
  uint64_t result = qword_1001115F0;
  if (!qword_1001115F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000997AC(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000997B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NewsWidgetInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_10009981C(char *a1, char **a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *(void *)a1 = v5;
    uint64_t v3 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    *(void *)a1 = v5;
    *((void *)a1 + 1) = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = sub_1000CBEC0();
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    uint64_t v14 = v5;
    v13(v10, v11, v12);
    uint64_t v15 = *(int *)(a3 + 24);
    int64_t v16 = &v3[v15];
    uint64_t v17 = (char **)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *(void *)int64_t v16 = *v17;
    *((void *)v16 + 1) = v18;
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t sub_10009992C(id *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_1000CBEC0();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

long long *sub_1000999BC(long long *a1, long long *a2, uint64_t a3)
{
  long long v17 = *a2;
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1000CBEC0();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  id v11 = (id)v17;
  v10(v7, v8, v9);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100099A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v9 = v6;

  *(void *)(a1 + 8) = v7;
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_1000CBEC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (void *)(a1 + v14);
  int64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100099B4C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1000CBEC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100099BE4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = v6;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_1000CBEC0();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100099C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100099CAC);
}

uint64_t sub_100099CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CBEC0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_100099D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100099D88);
}

uint64_t sub_100099D88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000CBEC0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100099E4C()
{
  uint64_t result = sub_1000CBEC0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100099EF0()
{
  uint64_t result = type metadata accessor for TaskContext();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1000CC640();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_10009A00C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = swift_allocObject();
  sub_10009A06C(a1, a2, a3);
  return v6;
}

double *sub_10009A06C(uint64_t a1, uint64_t a2, double a3)
{
  int v4 = v3;
  uint64_t v8 = *(void *)v3;
  uint64_t v9 = sub_1000CAE30();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = sub_1000CACF0();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CACE0();
  uint64_t v14 = sub_1000CACD0();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *((void *)v4 + 2) = v14;
  *((void *)v4 + 3) = v16;
  uint64_t v17 = qword_100111638;
  *(void *)((char *)v4 + v17) = dispatch_group_create();
  uint64_t v18 = qword_100111640;
  *(void *)((char *)v4 + v18) = dispatch_group_create();
  uint64_t v19 = qword_100111648;
  sub_1000CAE20();
  sub_1000CAE50();
  swift_allocObject();
  *(void *)((char *)v4 + v19) = sub_1000CAE40();
  *(void *)((char *)v4 + qword_100111650) = _swiftEmptyArrayStorage;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(*(void *)(v8 + 80) - 8) + 56))((char *)v4 + *(void *)(*(void *)v4 + 168), 1, 1);
  v4[4] = a3 + -1.0;
  *((void *)v4 + 5) = a1;
  sub_10009F21C(a2, (uint64_t)v4 + qword_100111630);
  return v4;
}

uint64_t sub_10009A2A0(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000CBD60();
  uint64_t v50 = *(void *)(v6 - 8);
  uint64_t v51 = v6;
  __chkstk_darwin(v6);
  char v48 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_1000CBD90();
  uint64_t v47 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v46 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000CBD50();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char **)((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v53 = sub_1000CBDC0();
  uint64_t v45 = *(void *)(v53 - 8);
  uint64_t v13 = __chkstk_darwin(v53);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v52 = (char *)&v40 - v16;
  sub_100036814(0, (unint64_t *)&qword_100110C20);
  swift_retain_n();
  uint64_t v17 = sub_1000CC630();
  os_log_type_t v18 = sub_1000CC530();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v42 = v9;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v43 = a1;
    id v20 = (uint8_t *)v19;
    uint64_t v21 = (void **)swift_slowAlloc();
    char v44 = a2;
    aBlock = v21;
    uint64_t v40 = v15;
    *(_DWORD *)id v20 = 136315138;
    uint64_t v41 = v10;
    uint64_t v22 = *(void *)(v3 + 16);
    unint64_t v23 = *(void *)(v3 + 24);
    swift_bridgeObjectRetain();
    uint64_t v24 = v22;
    uint64_t v9 = v42;
    uint64_t v54 = (void *)sub_1000B2E18(v24, v23, (uint64_t *)&aBlock);
    uint64_t v15 = v40;
    sub_1000CC660();
    swift_release_n();
    uint64_t v10 = v41;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "task manager %s will start task", v20, 0xCu);
    swift_arrayDestroy();
    a2 = v44;
    swift_slowDealloc();
    a1 = v43;
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  dispatch_group_enter(*(dispatch_group_t *)(v3 + qword_100111638));
  uint64_t v25 = *(NSObject **)(v3 + qword_100111640);
  dispatch_group_enter(v25);
  uint64_t result = sub_1000CBDA0();
  double v27 = *(double *)(v3 + 32);
  if ((~*(void *)&v27 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v27 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v27 < 9.22337204e18)
  {
    *uint64_t v12 = (uint64_t)v27;
    (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchTimeInterval.seconds(_:), v9);
    sub_1000CBDF0();
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v45 = *(void *)(v45 + 8);
    ((void (*)(char *, uint64_t))v45)(v15, v53);
    sub_100036814(0, &qword_10010EF98);
    char v44 = v25;
    uint64_t v28 = (void *)sub_1000CC590();
    unint64_t v29 = (void *)swift_allocObject();
    void v29[2] = v3;
    _OWORD v29[3] = a1;
    _OWORD v29[4] = a2;
    swift_retain();
    swift_retain();
    sub_1000CBDB0();
    unint64_t v30 = (void *)swift_allocObject();
    uint64_t v30[2] = v3;
    _OWORD v30[3] = v28;
    unsigned char v30[4] = sub_10009EFE0;
    v30[5] = v29;
    char v59 = sub_10009F034;
    char v60 = v30;
    aBlock = _NSConcreteStackBlock;
    uint64_t v56 = 1107296256;
    uint64_t v57 = sub_10003C7A8;
    uint64_t v58 = &unk_1000FDC58;
    uint64_t v31 = _Block_copy(&aBlock);
    swift_retain();
    id v32 = v28;
    swift_retain();
    swift_release();
    id v33 = (id)FCHandleOperationTimeout();
    _Block_release(v31);
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = v33;
    uint64_t v35 = (void *)swift_allocObject();
    v35[2] = v3;
    v35[3] = sub_10009F090;
    _OWORD v35[4] = v34;
    v35[5] = sub_10009EFE0;
    v35[6] = v29;
    char v59 = sub_10009F0FC;
    char v60 = v35;
    aBlock = _NSConcreteStackBlock;
    uint64_t v56 = 1107296256;
    uint64_t v57 = sub_10003C7A8;
    uint64_t v58 = &unk_1000FDCD0;
    uint64_t v36 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v37 = v46;
    sub_1000CBD70();
    uint64_t v54 = _swiftEmptyArrayStorage;
    sub_10009F10C();
    sub_10001D64C((uint64_t *)&unk_100111DD0);
    sub_10009F164();
    uint64_t v38 = v48;
    uint64_t v39 = v51;
    sub_1000CC6D0();
    sub_1000CC550();
    _Block_release(v36);

    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v39);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v37, v49);
    ((void (*)(char *, uint64_t))v45)(v52, v53);
    return swift_release();
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10009AA44(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = *(void *)(*a1 + 80);
  uint64_t v7 = sub_1000CC640();
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v28 = (char *)&v24 - v11;
  sub_100036814(0, (unint64_t *)&qword_100110C20);
  swift_retain_n();
  uint64_t v12 = sub_1000CC630();
  os_log_type_t v13 = sub_1000CC530();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v27 = v6;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v31 = swift_slowAlloc();
    uint64_t v25 = v7;
    uint64_t v26 = a3;
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v24 = v15 + 4;
    uint64_t v16 = a2;
    uint64_t v17 = a1[2];
    unint64_t v18 = a1[3];
    swift_bridgeObjectRetain();
    uint64_t v19 = v17;
    a2 = v16;
    uint64_t v30 = sub_1000B2E18(v19, v18, &v31);
    uint64_t v7 = v25;
    sub_1000CC660();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "task manager %s invoking result handler", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v27;
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v31 = *(void *)((char *)a1 + qword_100111648);
  sub_1000CAE50();
  swift_retain();
  id v20 = v28;
  sub_1000CAFF0();
  swift_release();
  uint64_t v21 = v29;
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v10, v20, v7);
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v10, 1, v6);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    a2(v10);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v10, v6);
  }
  return result;
}

uint64_t sub_10009ADC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(void *)(*(void *)a1 + 168);
  swift_beginAccess();
  uint64_t v4 = sub_1000CC640();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t sub_10009AE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1000CBD60();
  __chkstk_darwin(v7);
  sub_100036814(0, (unint64_t *)&qword_100110C20);
  swift_retain_n();
  uint64_t v8 = sub_1000CC630();
  os_log_type_t v9 = sub_1000CC530();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v12 = *(void *)(a1 + 16);
    unint64_t v11 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    uint64_t v15 = (void *)sub_1000B2E18(v12, v11, aBlock);
    sub_1000CC660();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "task manager %s invoking cancellation handler", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v15 = *(void **)(a1 + qword_100111648);
  sub_1000CAE50();
  swift_retain();
  sub_10001D64C(&qword_100111780);
  sub_1000CAFF0();
  swift_release();
  swift_bridgeObjectRelease();
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10003C7A8;
  aBlock[3] = (uint64_t)&unk_1000FDCF8;
  _Block_copy(aBlock);
  uint64_t v15 = _swiftEmptyArrayStorage;
  sub_10009F10C();
  swift_retain();
  sub_10001D64C((uint64_t *)&unk_100111DD0);
  sub_10009F164();
  sub_1000CC6D0();
  sub_1000CBDE0();
  swift_allocObject();
  sub_1000CBDD0();
  swift_release();
  sub_1000CC560();
  return swift_release();
}

uint64_t sub_10009B1F4(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(void))
{
  sub_100036814(0, (unint64_t *)&qword_100110C20);
  swift_retain_n();
  uint64_t v7 = sub_1000CC630();
  os_log_type_t v8 = sub_1000CC530();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v9 = 136315138;
    os_log_type_t v13 = a2;
    uint64_t v10 = *(void *)(a1 + 16);
    unint64_t v11 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    sub_1000B2E18(v10, v11, &v14);
    sub_1000CC660();
    swift_release_n();
    a2 = v13;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "task manager %s completed all tasks", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t result = a2();
  if ((result & 1) == 0) {
    return a4();
  }
  return result;
}

void sub_10009B3C8()
{
  uint64_t v1 = v0;
  sub_100036814(0, (unint64_t *)&qword_100110C20);
  swift_retain_n();
  uint64_t v2 = sub_1000CC630();
  os_log_type_t v3 = sub_1000CC530();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v5 = *(void *)(v1 + 16);
    unint64_t v6 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    sub_1000B2E18(v5, v6, &v8);
    sub_1000CC660();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "task manager %s did finish task", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v8 = *(void *)(v1 + qword_100111648);
  __chkstk_darwin(v7);
  sub_1000CAE50();
  swift_retain();
  sub_1000CAFF0();
  swift_release();
  dispatch_group_leave(*(dispatch_group_t *)(v1 + qword_100111640));
  dispatch_group_leave(*(dispatch_group_t *)(v1 + qword_100111638));
}

uint64_t sub_10009B604(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 80);
  uint64_t v5 = sub_1000CC640();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  os_log_type_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v15 - v10, a2, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, v4);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
  uint64_t v13 = a1 + *(void *)(*(void *)a1 + 168);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v13, v9, v5);
  return swift_endAccess();
}

uint64_t sub_10009B7D4(void *a1)
{
  uint64_t v2 = v1;
  dispatch_group_enter(*(dispatch_group_t *)(v1 + qword_100111640));
  *(void *)&v18[0] = *(void *)(v1 + qword_100111648);
  sub_1000CAE50();
  swift_retain();
  sub_1000CAFF0();
  swift_release();
  sub_10003AA3C((uint64_t)a1, (uint64_t)v18);
  sub_100036814(0, (unint64_t *)&qword_100110C20);
  swift_retain_n();
  uint64_t v4 = sub_1000CC630();
  os_log_type_t v5 = sub_1000CC530();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v7 = *(void *)(v2 + 16);
    unint64_t v8 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    v16[0] = sub_1000B2E18(v7, v8, &v17);
    sub_1000CC660();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    sub_10003AA3C((uint64_t)v18, (uint64_t)v16);
    sub_10001D64C((uint64_t *)&unk_100111030);
    uint64_t v9 = sub_1000CC240();
    v16[0] = sub_1000B2E18(v9, v10, &v17);
    sub_1000CC660();
    swift_bridgeObjectRelease();
    sub_1000201A8((uint64_t)v18);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "task manager %s running sidecar task %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();

    sub_1000201A8((uint64_t)v18);
  }
  unint64_t v11 = (char **)sub_100020110(a1, a1[3]);
  sub_100036C7C((char *)(v2 + qword_100111630), *v11);
  sub_10003AA3C((uint64_t)a1, (uint64_t)v18);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v2;
  sub_100078088(v18, v12 + 24);
  swift_retain();
  uint64_t v13 = (void *)sub_1000CB010();
  uint64_t v14 = sub_1000CB060();
  swift_release();

  swift_release();
  return v14;
}

uint64_t sub_10009BB20(uint64_t a1, uint64_t a2)
{
  sub_10003AA3C(a2, (uint64_t)v18);
  os_log_type_t v3 = (void **)(a1 + qword_100111650);
  swift_beginAccess();
  uint64_t v4 = *v3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *os_log_type_t v3 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_100088554(0, v4[2] + 1, 1, v4);
    *os_log_type_t v3 = v4;
  }
  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    uint64_t v4 = sub_100088554((void *)(v6 > 1), v7 + 1, 1, v4);
    *os_log_type_t v3 = v4;
  }
  uint64_t v8 = sub_10003A9EC((uint64_t)v18, v19);
  __chkstk_darwin(v8);
  unint64_t v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  uint64_t v12 = *v10;
  uint64_t v16 = type metadata accessor for EventProcessingSidecarTask();
  uint64_t v17 = &off_1000FC698;
  *(void *)&long long v15 = v12;
  v4[2] = v7 + 1;
  sub_100078088(&v15, (uint64_t)&v4[5 * v7 + 4]);
  sub_1000201A8((uint64_t)v18);
  return swift_endAccess();
}

void sub_10009BCD8(uint64_t a1, uint64_t a2)
{
  sub_10003AA3C(a2, (uint64_t)v12);
  sub_100036814(0, (unint64_t *)&qword_100110C20);
  swift_retain_n();
  os_log_type_t v3 = sub_1000CC630();
  os_log_type_t v4 = sub_1000CC530();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = *(void *)(a1 + 16);
    unint64_t v7 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    v10[0] = sub_1000B2E18(v6, v7, &v11);
    sub_1000CC660();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    sub_10003AA3C((uint64_t)v12, (uint64_t)v10);
    sub_10001D64C((uint64_t *)&unk_100111030);
    uint64_t v8 = sub_1000CC240();
    v10[0] = sub_1000B2E18(v8, v9, &v11);
    sub_1000CC660();
    swift_bridgeObjectRelease();
    sub_1000201A8((uint64_t)v12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "task manager %s finished running sidecar task %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();

    sub_1000201A8((uint64_t)v12);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + qword_100111640));
}

id *sub_10009BEE4()
{
  swift_bridgeObjectRelease();

  sub_10009F280((uint64_t)v0 + qword_100111630, (uint64_t (*)(void))type metadata accessor for TaskContext);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = (char *)v0 + *((void *)*v0 + 21);
  uint64_t v2 = sub_1000CC640();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10009BFE0()
{
  sub_10009BEE4();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for TaskManager()
{
  return sub_1000506F4();
}

uint64_t type metadata accessor for TaskContext()
{
  uint64_t result = qword_100111730;
  if (!qword_100111730) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_10009C09C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1000CC0D0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for NewsTimelineEntry();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = sub_10001D64C(&qword_10010ED98);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v74 = v12;
      uint64_t v15 = sub_1000CACC0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v9, v10, v15);
      uint64_t v75 = v11;
      uint64_t v76 = v9;
      uint64_t v16 = *(int *)(v11 + 20);
      uint64_t v17 = &v9[v16];
      unint64_t v18 = &v10[v16];
      uint64_t v19 = *(void **)&v10[v16];
      *(void *)uint64_t v17 = v19;
      id v20 = (int *)type metadata accessor for TodayContent();
      uint64_t v21 = v20[5];
      uint64_t v22 = &v17[v21];
      unint64_t v23 = &v18[v21];
      uint64_t v24 = type metadata accessor for Banner();
      uint64_t v25 = *(void **)(v24 - 8);
      uint64_t v26 = (unsigned int (*)(char *, uint64_t, uint64_t))v25[6];
      id v27 = v19;
      if (v26(v23, 1, v24))
      {
        uint64_t v28 = sub_10001D64C(&qword_10010DE20);
        memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64));
        uint64_t v29 = v17;
      }
      else
      {
        uint64_t v30 = *((void *)v23 + 1);
        *(void *)uint64_t v22 = *(void *)v23;
        *((void *)v22 + 1) = v30;
        uint64_t v31 = *((void *)v23 + 3);
        char v71 = v25;
        *((void *)v22 + 2) = *((void *)v23 + 2);
        *((void *)v22 + 3) = v31;
        uint64_t v32 = *((void *)v23 + 5);
        *((void *)v22 + 4) = *((void *)v23 + 4);
        *((void *)v22 + 5) = v32;
        uint64_t v68 = v22;
        uint64_t v69 = (int *)v24;
        uint64_t v33 = *(int *)(v24 + 28);
        __dst = &v22[v33];
        uint64_t v34 = &v23[v33];
        uint64_t v35 = sub_1000CABE0();
        uint64_t v36 = *(void *)(v35 - 8);
        char v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v70(v34, 1, v35))
        {
          uint64_t v37 = sub_10001D64C(&qword_10010F340);
          memcpy(__dst, v34, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v36 + 16))(__dst, v34, v35);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
        }
        uint64_t v29 = v17;
        uint64_t v38 = v69[8];
        uint64_t v39 = (void *)((char *)v68 + v38);
        uint64_t v40 = &v23[v38];
        uint64_t v41 = *((void *)v40 + 1);
        *uint64_t v39 = *(void *)v40;
        v39[1] = v41;
        uint64_t v42 = v69[9];
        uint64_t v43 = *(void **)&v23[v42];
        swift_bridgeObjectRetain();
        if (v43 != (void *)1) {
          id v44 = v43;
        }
        *(void *)((char *)v68 + v42) = v43;
        uint64_t v45 = v69[10];
        uint64_t v46 = (char *)v68 + v45;
        uint64_t v47 = &v23[v45];
        char v48 = *(void **)v47;
        uint64_t v49 = (void *)*((void *)v47 + 1);
        char v50 = v47[16];
        sub_10001DB84(*(void **)v47, v49);
        *(void *)uint64_t v46 = v48;
        *((void *)v46 + 1) = v49;
        v46[16] = v50;
        (*((void (**)(void *, void, uint64_t, int *))v71 + 7))(v68, 0, 1, v69);
      }
      *(void *)((char *)v29 + v20[6]) = *(void *)&v18[v20[6]];
      *(void *)((char *)v29 + v20[7]) = *(void *)&v18[v20[7]];
      *((unsigned char *)v29 + v20[8]) = v18[v20[8]];
      uint64_t v51 = v20[9];
      char v72 = (char *)v29 + v51;
      uint64_t v73 = v20;
      uint64_t v52 = &v18[v51];
      uint64_t v53 = sub_1000CABE0();
      uint64_t v54 = *(void *)(v53 - 8);
      uint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      if (v55(v52, 1, v53))
      {
        uint64_t v56 = sub_10001D64C(&qword_10010F340);
        memcpy(v72, v52, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v72, v52, v53);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v72, 0, 1, v53);
      }
      *(void *)((char *)v29 + v73[10]) = *(void *)&v18[v73[10]];
      uint64_t v57 = v73[11];
      uint64_t v58 = (void *)((char *)v29 + v57);
      char v59 = &v18[v57];
      uint64_t v60 = *((void *)v59 + 1);
      *uint64_t v58 = *(void *)v59;
      v58[1] = v60;
      uint64_t v61 = v73[12];
      uint64_t v62 = (void *)((char *)v29 + v61);
      uint64_t v63 = &v18[v61];
      uint64_t v64 = *((void *)v63 + 1);
      *uint64_t v62 = *(void *)v63;
      v62[1] = v64;
      char v65 = *(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v65(v76, 0, 1, v75);
    }
  }
  return a1;
}

uint64_t sub_10009C644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CC0D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for NewsTimelineEntry();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = sub_1000CACC0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v5, v8);
    unint64_t v9 = (id *)(v5 + *(int *)(v6 + 20));

    uint64_t v10 = type metadata accessor for TodayContent();
    uint64_t v11 = (char *)v9 + *(int *)(v10 + 20);
    uint64_t v12 = (int *)type metadata accessor for Banner();
    if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v12 - 1) + 48))(v11, 1, v12))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = &v11[v12[7]];
      uint64_t v14 = sub_1000CABE0();
      uint64_t v15 = *(void *)(v14 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
        (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
      }
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void **)&v11[v12[9]];
      if (v16 != (void *)1) {

      }
      sub_10001DE30(*(void **)&v11[v12[10]], *(void **)&v11[v12[10] + 8]);
    }
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v17 = (char *)v9 + *(int *)(v10 + 36);
    uint64_t v18 = sub_1000CABE0();
    uint64_t v19 = *(void *)(v18 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
    }
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10009C954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CC0D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)(a1 + v7);
  unint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for NewsTimelineEntry();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_10001D64C(&qword_10010ED98);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v69 = v11;
    uint64_t v72 = a1;
    uint64_t v13 = sub_1000CACC0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v8, v9, v13);
    uint64_t v14 = *(int *)(v10 + 20);
    char v71 = v8;
    uint64_t v15 = &v8[v14];
    uint64_t v16 = &v9[v14];
    uint64_t v17 = *(void **)&v9[v14];
    *(void *)&v8[v14] = v17;
    uint64_t v68 = (int *)type metadata accessor for TodayContent();
    uint64_t v18 = v68[5];
    uint64_t v19 = &v15[v18];
    id v20 = &v16[v18];
    uint64_t v21 = (int *)type metadata accessor for Banner();
    uint64_t v22 = (void *)*((void *)v21 - 1);
    unint64_t v23 = (unsigned int (*)(char *, uint64_t, int *))v22[6];
    id v24 = v17;
    uint64_t v70 = v10;
    if (v23(v20, 1, v21))
    {
      uint64_t v25 = sub_10001D64C(&qword_10010DE20);
      memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      char v65 = v21;
      uint64_t v66 = (void (**)(char *, void, uint64_t, int *))v22;
      uint64_t v26 = *((void *)v20 + 1);
      *(void *)uint64_t v19 = *(void *)v20;
      *((void *)v19 + 1) = v26;
      uint64_t v27 = *((void *)v20 + 3);
      *((void *)v19 + 2) = *((void *)v20 + 2);
      *((void *)v19 + 3) = v27;
      uint64_t v28 = *((void *)v20 + 5);
      *((void *)v19 + 4) = *((void *)v20 + 4);
      *((void *)v19 + 5) = v28;
      uint64_t v29 = v21[7];
      __dst = &v19[v29];
      uint64_t v30 = &v20[v29];
      uint64_t v31 = sub_1000CABE0();
      uint64_t v62 = *(void *)(v31 - 8);
      uint64_t v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v63(v30, 1, v31))
      {
        uint64_t v32 = sub_10001D64C(&qword_10010F340);
        memcpy(__dst, v30, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v62 + 16))(__dst, v30, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(__dst, 0, 1, v31);
      }
      uint64_t v33 = v21[8];
      uint64_t v34 = &v19[v33];
      uint64_t v35 = &v20[v33];
      uint64_t v36 = *((void *)v35 + 1);
      *(void *)uint64_t v34 = *(void *)v35;
      *((void *)v34 + 1) = v36;
      uint64_t v37 = v21[9];
      uint64_t v38 = *(void **)&v20[v37];
      swift_bridgeObjectRetain();
      if (v38 != (void *)1) {
        id v39 = v38;
      }
      *(void *)&v19[v37] = v38;
      uint64_t v40 = v65[10];
      uint64_t v41 = &v19[v40];
      uint64_t v42 = &v20[v40];
      uint64_t v43 = *(void **)v42;
      id v44 = (void *)*((void *)v42 + 1);
      char v45 = v42[16];
      sub_10001DB84(*(void **)v42, v44);
      *(void *)uint64_t v41 = v43;
      *((void *)v41 + 1) = v44;
      v41[16] = v45;
      v66[7](v19, 0, 1, v65);
    }
    *(void *)&v15[v68[6]] = *(void *)&v16[v68[6]];
    *(void *)&v15[v68[7]] = *(void *)&v16[v68[7]];
    v15[v68[8]] = v16[v68[8]];
    uint64_t v46 = v68[9];
    uint64_t v67 = &v15[v46];
    uint64_t v47 = &v16[v46];
    uint64_t v48 = sub_1000CABE0();
    uint64_t v49 = *(void *)(v48 - 8);
    char v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    if (v50(v47, 1, v48))
    {
      uint64_t v51 = sub_10001D64C(&qword_10010F340);
      memcpy(v67, v47, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v67, v47, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v67, 0, 1, v48);
    }
    *(void *)&v15[v68[10]] = *(void *)&v16[v68[10]];
    uint64_t v52 = v68[11];
    uint64_t v53 = &v15[v52];
    uint64_t v54 = &v16[v52];
    uint64_t v55 = *((void *)v54 + 1);
    *(void *)uint64_t v53 = *(void *)v54;
    *((void *)v53 + 1) = v55;
    uint64_t v56 = v68[12];
    uint64_t v57 = &v15[v56];
    uint64_t v58 = &v16[v56];
    uint64_t v59 = *((void *)v58 + 1);
    *(void *)uint64_t v57 = *(void *)v58;
    *((void *)v57 + 1) = v59;
    uint64_t v60 = *(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v60(v71, 0, 1, v70);
    return v72;
  }
  return a1;
}

uint64_t sub_10009CEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CC0D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)(a1 + v7);
  unint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for NewsTimelineEntry();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_10009F280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NewsTimelineEntry);
      goto LABEL_7;
    }
    uint64_t v150 = a1;
    uint64_t v29 = sub_1000CACC0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 24))(v8, v9, v29);
    uint64_t v30 = *(int *)(v10 + 20);
    uint64_t v31 = (void **)&v8[v30];
    uint64_t v32 = &v9[v30];
    uint64_t v33 = *(void **)&v9[v30];
    uint64_t v34 = *v31;
    *uint64_t v31 = v33;
    id v35 = v33;

    uint64_t v36 = (int *)type metadata accessor for TodayContent();
    uint64_t v37 = v36[5];
    uint64_t v38 = (char *)v31 + v37;
    id v39 = &v32[v37];
    uint64_t v40 = (int *)type metadata accessor for Banner();
    uint64_t v41 = *((void *)v40 - 1);
    uint64_t v42 = *(uint64_t (**)(char *, uint64_t, int *))(v41 + 48);
    int v43 = v42(v38, 1, v40);
    int v44 = v42(v39, 1, v40);
    if (v43)
    {
      if (!v44)
      {
        *(void *)uint64_t v38 = *(void *)v39;
        *((void *)v38 + 1) = *((void *)v39 + 1);
        *((void *)v38 + 2) = *((void *)v39 + 2);
        *((void *)v38 + 3) = *((void *)v39 + 3);
        *((void *)v38 + 4) = *((void *)v39 + 4);
        *((void *)v38 + 5) = *((void *)v39 + 5);
        uint64_t v45 = v40[7];
        int __dsta = &v38[v45];
        uint64_t v139 = &v39[v45];
        uint64_t v46 = sub_1000CABE0();
        uint64_t v136 = *(void *)(v46 - 8);
        char v141 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v141(v139, 1, v46))
        {
          uint64_t v47 = sub_10001D64C(&qword_10010F340);
          memcpy(__dsta, v139, *(void *)(*(void *)(v47 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v136 + 16))(__dsta, v139, v46);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v136 + 56))(__dsta, 0, 1, v46);
        }
        uint64_t v87 = v40[8];
        uint64_t v88 = &v38[v87];
        uint64_t v89 = &v39[v87];
        *(void *)uint64_t v88 = *(void *)v89;
        *((void *)v88 + 1) = *((void *)v89 + 1);
        uint64_t v90 = v40[9];
        uint64_t v91 = *(void **)&v39[v90];
        swift_bridgeObjectRetain();
        if (v91 != (void *)1) {
          id v92 = v91;
        }
        *(void *)&v38[v90] = v91;
        uint64_t v93 = v40[10];
        uint64_t v94 = &v38[v93];
        uint64_t v95 = &v39[v93];
        uint64_t v96 = *(void **)v95;
        char v97 = (void *)*((void *)v95 + 1);
        char v98 = v95[16];
        sub_10001DB84(*(void **)v95, v97);
        *(void *)uint64_t v94 = v96;
        *((void *)v94 + 1) = v97;
        v94[16] = v98;
        (*(void (**)(char *, void, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
LABEL_45:
        *(void **)((char *)v31 + v36[6]) = *(void **)&v32[v36[6]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void **)((char *)v31 + v36[7]) = *(void **)&v32[v36[7]];
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        *((unsigned char *)v31 + v36[8]) = v32[v36[8]];
        uint64_t v116 = v36[9];
        uint64_t v117 = (char *)v31 + v116;
        uint64_t v118 = &v32[v116];
        uint64_t v119 = sub_1000CABE0();
        uint64_t v120 = *(void *)(v119 - 8);
        uint64_t v121 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 48);
        int v122 = v121(v117, 1, v119);
        int v123 = v121(v118, 1, v119);
        if (v122)
        {
          if (!v123)
          {
            (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v117, v118, v119);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v120 + 56))(v117, 0, 1, v119);
LABEL_51:
            a1 = v150;
            *(void **)((char *)v31 + v36[10]) = *(void **)&v32[v36[10]];
            swift_retain();
            swift_release();
            uint64_t v125 = v36[11];
            uint64_t v126 = (void **)((char *)v31 + v125);
            uint64_t v127 = &v32[v125];
            *uint64_t v126 = *(void *)v127;
            v126[1] = *((void *)v127 + 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v128 = v36[12];
            uint64_t v129 = (void **)((char *)v31 + v128);
            unint64_t v130 = &v32[v128];
            void *v129 = *(void *)v130;
            v129[1] = *((void *)v130 + 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            return a1;
          }
        }
        else
        {
          if (!v123)
          {
            (*(void (**)(char *, char *, uint64_t))(v120 + 24))(v117, v118, v119);
            goto LABEL_51;
          }
          (*(void (**)(char *, uint64_t))(v120 + 8))(v117, v119);
        }
        uint64_t v124 = sub_10001D64C(&qword_10010F340);
        memcpy(v117, v118, *(void *)(*(void *)(v124 - 8) + 64));
        goto LABEL_51;
      }
LABEL_16:
      uint64_t v53 = sub_10001D64C(&qword_10010DE20);
      memcpy(v38, v39, *(void *)(*(void *)(v53 - 8) + 64));
      goto LABEL_45;
    }
    if (v44)
    {
      sub_10009F280((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_16;
    }
    *(void *)uint64_t v38 = *(void *)v39;
    *((void *)v38 + 1) = *((void *)v39 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v38 + 2) = *((void *)v39 + 2);
    *((void *)v38 + 3) = *((void *)v39 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v38 + 4) = *((void *)v39 + 4);
    *((void *)v38 + 5) = *((void *)v39 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v80 = v40[7];
    uint64_t v81 = &v38[v80];
    __dstb = &v39[v80];
    uint64_t v82 = sub_1000CABE0();
    uint64_t v143 = *(void *)(v82 - 8);
    char v145 = v81;
    uint64_t v83 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v143 + 48);
    LODWORD(v81) = v83(v81, 1, v82);
    int v84 = v83(__dstb, 1, v82);
    if (v81)
    {
      if (v84)
      {
        size_t v85 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v86 = v145;
LABEL_34:
        memcpy(v86, __dstb, v85);
        goto LABEL_37;
      }
      (*(void (**)(void *, char *, uint64_t))(v143 + 16))(v145, __dstb, v82);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v143 + 56))(v145, 0, 1, v82);
    }
    else
    {
      if (v84)
      {
        (*(void (**)(void *, uint64_t))(v143 + 8))(v145, v82);
        size_t v85 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v86 = v145;
        goto LABEL_34;
      }
      (*(void (**)(void *, char *, uint64_t))(v143 + 24))(v145, __dstb, v82);
    }
LABEL_37:
    uint64_t v99 = v40[8];
    uint64_t v100 = &v38[v99];
    uint64_t v101 = &v39[v99];
    *(void *)uint64_t v100 = *(void *)v101;
    *((void *)v100 + 1) = *((void *)v101 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v102 = v40[9];
    uint64_t v103 = &v38[v102];
    uint64_t v104 = *(void **)&v38[v102];
    uint64_t v105 = *(void **)&v39[v102];
    if (v104 == (void *)1)
    {
      if (v105 != (void *)1)
      {
        *(void *)uint64_t v103 = v105;
        id v106 = v105;
LABEL_44:
        uint64_t v108 = v40[10];
        uint64_t v109 = &v38[v108];
        uint64_t v110 = &v39[v108];
        uint64_t v111 = *(void **)v110;
        int v112 = (void *)*((void *)v110 + 1);
        char v113 = v110[16];
        sub_10001DB84(*(void **)v110, v112);
        uint64_t v114 = *(void **)v109;
        uint64_t v115 = (void *)*((void *)v109 + 1);
        *(void *)uint64_t v109 = v111;
        *((void *)v109 + 1) = v112;
        v109[16] = v113;
        sub_10001DE30(v114, v115);
        goto LABEL_45;
      }
    }
    else
    {
      if (v105 != (void *)1)
      {
        *(void *)uint64_t v103 = v105;
        id v107 = v105;

        goto LABEL_44;
      }
      sub_10001EA8C((uint64_t)&v38[v102]);
      uint64_t v105 = *(void **)&v39[v102];
    }
    *(void *)uint64_t v103 = v105;
    goto LABEL_44;
  }
  if (v14)
  {
LABEL_7:
    uint64_t v28 = sub_10001D64C(&qword_10010ED98);
    memcpy(v8, v9, *(void *)(*(void *)(v28 - 8) + 64));
    return a1;
  }
  uint64_t v15 = sub_1000CACC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v8, v9, v15);
  uint64_t v16 = *(int *)(v10 + 20);
  char v138 = v8;
  uint64_t v17 = &v8[v16];
  uint64_t v18 = (void **)&v9[v16];
  uint64_t v19 = *v18;
  *(void *)&v8[v16] = *v18;
  uint64_t v144 = (int *)type metadata accessor for TodayContent();
  __dst = v17;
  uint64_t v20 = v144[5];
  uint64_t v21 = &v17[v20];
  uint64_t v140 = v18;
  uint64_t v22 = (void **)((char *)v18 + v20);
  uint64_t v23 = type metadata accessor for Banner();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48);
  id v26 = v19;
  uint64_t v149 = a1;
  uint64_t v142 = v11;
  if (v25(v22, 1, v23))
  {
    uint64_t v27 = sub_10001D64C(&qword_10010DE20);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    uint64_t v137 = v24;
    *(void *)uint64_t v21 = *v22;
    *((void *)v21 + 1) = v22[1];
    *((void *)v21 + 2) = v22[2];
    uint64_t v133 = v22;
    *((void *)v21 + 3) = v22[3];
    *((void *)v21 + 4) = v22[4];
    *((void *)v21 + 5) = v22[5];
    uint64_t v48 = *(int *)(v23 + 28);
    uint64_t v134 = (int *)v23;
    uint64_t v135 = &v21[v48];
    uint64_t v49 = (char *)v22 + v48;
    uint64_t v50 = sub_1000CABE0();
    uint64_t v51 = *(void *)(v50 - 8);
    uint64_t v132 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v132(v49, 1, v50))
    {
      uint64_t v52 = sub_10001D64C(&qword_10010F340);
      memcpy(v135, v49, *(void *)(*(void *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v135, v49, v50);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v135, 0, 1, v50);
    }
    uint64_t v54 = v134[8];
    uint64_t v55 = &v21[v54];
    uint64_t v56 = (void *)((char *)v133 + v54);
    *(void *)uint64_t v55 = *v56;
    *((void *)v55 + 1) = v56[1];
    uint64_t v57 = v134[9];
    uint64_t v58 = *(void **)((char *)v133 + v57);
    swift_bridgeObjectRetain();
    if (v58 != (void *)1) {
      id v59 = v58;
    }
    *(void *)&v21[v57] = v58;
    uint64_t v60 = v134[10];
    uint64_t v61 = &v21[v60];
    uint64_t v62 = (char *)v133 + v60;
    uint64_t v63 = *(void **)v62;
    uint64_t v64 = (void *)*((void *)v62 + 1);
    char v65 = v62[16];
    sub_10001DB84(*(void **)v62, v64);
    *(void *)uint64_t v61 = v63;
    *((void *)v61 + 1) = v64;
    v61[16] = v65;
    (*(void (**)(char *, void, uint64_t, int *))(v137 + 56))(v21, 0, 1, v134);
  }
  *(void *)&__dst[v144[6]] = *(void **)((char *)v140 + v144[6]);
  *(void *)&__dst[v144[7]] = *(void **)((char *)v140 + v144[7]);
  __dst[v144[8]] = *((unsigned char *)v140 + v144[8]);
  uint64_t v66 = v144[9];
  uint64_t v67 = &__dst[v66];
  uint64_t v68 = (char *)v140 + v66;
  uint64_t v69 = sub_1000CABE0();
  uint64_t v70 = *(void *)(v69 - 8);
  char v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  if (v71(v68, 1, v69))
  {
    uint64_t v72 = sub_10001D64C(&qword_10010F340);
    memcpy(v67, v68, *(void *)(*(void *)(v72 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v67, v68, v69);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
  }
  a1 = v149;
  *(void *)&__dst[v144[10]] = *(void **)((char *)v140 + v144[10]);
  uint64_t v73 = v144[11];
  uint64_t v74 = &__dst[v73];
  uint64_t v75 = (void **)((char *)v140 + v73);
  *(void *)uint64_t v74 = *v75;
  *((void *)v74 + 1) = v75[1];
  uint64_t v76 = v144[12];
  uint64_t v77 = &__dst[v76];
  uint64_t v78 = (void **)((char *)v140 + v76);
  *(void *)uint64_t v77 = *v78;
  *((void *)v77 + 1) = v78[1];
  uint64_t v79 = *(void (**)(char *, void, uint64_t, uint64_t))(v142 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79(v138, 0, 1, v10);
  return a1;
}

uint64_t sub_10009DC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CC0D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)(a1 + v7);
  unint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for NewsTimelineEntry();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_10001D64C(&qword_10010ED98);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = sub_1000CACC0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v8, v9, v13);
    uint64_t v14 = *(int *)(v10 + 20);
    uint64_t v45 = v8;
    uint64_t v15 = &v8[v14];
    uint64_t v16 = &v9[v14];
    *(void *)uint64_t v15 = *(void *)&v9[v14];
    uint64_t v17 = (int *)type metadata accessor for TodayContent();
    uint64_t v18 = v17[5];
    uint64_t v19 = &v15[v18];
    uint64_t v20 = &v16[v18];
    uint64_t v21 = (int *)type metadata accessor for Banner();
    uint64_t v22 = *((void *)v21 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = sub_10001D64C(&qword_10010DE20);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      long long v24 = *((_OWORD *)v20 + 1);
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
      *((_OWORD *)v19 + 1) = v24;
      *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
      uint64_t v25 = v21[7];
      uint64_t v43 = v22;
      __dst = &v19[v25];
      id v26 = &v20[v25];
      uint64_t v27 = sub_1000CABE0();
      uint64_t v41 = *(void *)(v27 - 8);
      __src = v26;
      uint64_t v28 = v26;
      uint64_t v29 = v27;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v28, 1, v27))
      {
        uint64_t v30 = sub_10001D64C(&qword_10010F340);
        memcpy(__dst, __src, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v41 + 32))(__dst, __src, v29);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v29);
      }
      *(_OWORD *)&v19[v21[8]] = *(_OWORD *)&v20[v21[8]];
      *(void *)&v19[v21[9]] = *(void *)&v20[v21[9]];
      uint64_t v31 = v21[10];
      uint64_t v32 = &v19[v31];
      uint64_t v33 = &v20[v31];
      v32[16] = v33[16];
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
      (*(void (**)(char *, void, uint64_t, int *))(v43 + 56))(v19, 0, 1, v21);
    }
    *(void *)&v15[v17[6]] = *(void *)&v16[v17[6]];
    *(void *)&v15[v17[7]] = *(void *)&v16[v17[7]];
    v15[v17[8]] = v16[v17[8]];
    uint64_t v34 = v17[9];
    id v35 = &v15[v34];
    uint64_t v36 = &v16[v34];
    uint64_t v37 = sub_1000CABE0();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = sub_10001D64C(&qword_10010F340);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    *(void *)&v15[v17[10]] = *(void *)&v16[v17[10]];
    *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
    *(_OWORD *)&v15[v17[12]] = *(_OWORD *)&v16[v17[12]];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v45, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_10009E0A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CC0D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)(a1 + v7);
  unint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for NewsTimelineEntry();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_10009F280((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NewsTimelineEntry);
      goto LABEL_7;
    }
    uint64_t v121 = a1;
    uint64_t v27 = sub_1000CACC0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 40))(v8, v9, v27);
    uint64_t v28 = *(int *)(v10 + 20);
    uint64_t v29 = &v8[v28];
    uint64_t v30 = &v9[v28];
    uint64_t v31 = *(void **)&v8[v28];
    *(void *)&v8[v28] = *(void *)&v9[v28];

    uint64_t v32 = (int *)type metadata accessor for TodayContent();
    uint64_t v33 = v32[5];
    uint64_t v34 = &v29[v33];
    id v35 = &v30[v33];
    uint64_t v36 = (int *)type metadata accessor for Banner();
    uint64_t v37 = *((void *)v36 - 1);
    uint64_t v38 = *(uint64_t (**)(char *, uint64_t, int *))(v37 + 48);
    int v39 = v38(v34, 1, v36);
    int v40 = v38(v35, 1, v36);
    if (v39)
    {
      if (!v40)
      {
        long long v41 = *((_OWORD *)v35 + 1);
        *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
        *((_OWORD *)v34 + 1) = v41;
        *((_OWORD *)v34 + 2) = *((_OWORD *)v35 + 2);
        uint64_t v42 = v36[7];
        __dst = &v34[v42];
        uint64_t v43 = &v35[v42];
        uint64_t v44 = sub_1000CABE0();
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        {
          uint64_t v46 = sub_10001D64C(&qword_10010F340);
          memcpy(__dst, v43, *(void *)(*(void *)(v46 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v45 + 32))(__dst, v43, v44);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(__dst, 0, 1, v44);
        }
        *(_OWORD *)&v34[v36[8]] = *(_OWORD *)&v35[v36[8]];
        *(void *)&v34[v36[9]] = *(void *)&v35[v36[9]];
        uint64_t v74 = v36[10];
        uint64_t v75 = &v34[v74];
        uint64_t v76 = &v35[v74];
        v75[16] = v76[16];
        *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
        (*(void (**)(char *, void, uint64_t, int *))(v37 + 56))(v34, 0, 1, v36);
LABEL_39:
        *(void *)&v29[v32[6]] = *(void *)&v30[v32[6]];
        swift_bridgeObjectRelease();
        *(void *)&v29[v32[7]] = *(void *)&v30[v32[7]];
        swift_unknownObjectRelease();
        v29[v32[8]] = v30[v32[8]];
        uint64_t v92 = v32[9];
        uint64_t v93 = &v29[v92];
        uint64_t v94 = &v30[v92];
        uint64_t v95 = sub_1000CABE0();
        uint64_t v96 = *(void *)(v95 - 8);
        char v97 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v96 + 48);
        int v98 = v97(v93, 1, v95);
        int v99 = v97(v94, 1, v95);
        if (v98)
        {
          if (!v99)
          {
            (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v93, v94, v95);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
LABEL_45:
            a1 = v121;
            *(void *)&v29[v32[10]] = *(void *)&v30[v32[10]];
            swift_release();
            uint64_t v101 = v32[11];
            uint64_t v102 = &v29[v101];
            uint64_t v103 = &v30[v101];
            uint64_t v105 = *(void *)v103;
            uint64_t v104 = *((void *)v103 + 1);
            *(void *)uint64_t v102 = v105;
            *((void *)v102 + 1) = v104;
            swift_bridgeObjectRelease();
            uint64_t v106 = v32[12];
            id v107 = &v29[v106];
            uint64_t v108 = &v30[v106];
            uint64_t v110 = *(void *)v108;
            uint64_t v109 = *((void *)v108 + 1);
            *(void *)id v107 = v110;
            *((void *)v107 + 1) = v109;
            swift_bridgeObjectRelease();
            return a1;
          }
        }
        else
        {
          if (!v99)
          {
            (*(void (**)(char *, char *, uint64_t))(v96 + 40))(v93, v94, v95);
            goto LABEL_45;
          }
          (*(void (**)(char *, uint64_t))(v96 + 8))(v93, v95);
        }
        uint64_t v100 = sub_10001D64C(&qword_10010F340);
        memcpy(v93, v94, *(void *)(*(void *)(v100 - 8) + 64));
        goto LABEL_45;
      }
LABEL_16:
      uint64_t v54 = sub_10001D64C(&qword_10010DE20);
      memcpy(v34, v35, *(void *)(*(void *)(v54 - 8) + 64));
      goto LABEL_39;
    }
    if (v40)
    {
      sub_10009F280((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for Banner);
      goto LABEL_16;
    }
    uint64_t v64 = *((void *)v35 + 1);
    *(void *)uint64_t v34 = *(void *)v35;
    *((void *)v34 + 1) = v64;
    swift_bridgeObjectRelease();
    uint64_t v65 = *((void *)v35 + 3);
    *((void *)v34 + 2) = *((void *)v35 + 2);
    *((void *)v34 + 3) = v65;
    swift_bridgeObjectRelease();
    uint64_t v66 = *((void *)v35 + 5);
    *((void *)v34 + 4) = *((void *)v35 + 4);
    *((void *)v34 + 5) = v66;
    swift_bridgeObjectRelease();
    uint64_t v67 = v36[7];
    uint64_t v68 = &v34[v67];
    __dstb = &v35[v67];
    uint64_t v69 = sub_1000CABE0();
    uint64_t v114 = *(void *)(v69 - 8);
    uint64_t v116 = v68;
    uint64_t v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 48);
    LODWORD(v68) = v70(v68, 1, v69);
    int v71 = v70(__dstb, 1, v69);
    if (v68)
    {
      if (v71)
      {
        size_t v72 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v73 = v116;
LABEL_30:
        memcpy(v73, __dstb, v72);
        goto LABEL_33;
      }
      (*(void (**)(void *, char *, uint64_t))(v114 + 32))(v116, __dstb, v69);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v114 + 56))(v116, 0, 1, v69);
    }
    else
    {
      if (v71)
      {
        (*(void (**)(void *, uint64_t))(v114 + 8))(v116, v69);
        size_t v72 = *(void *)(*(void *)(sub_10001D64C(&qword_10010F340) - 8) + 64);
        uint64_t v73 = v116;
        goto LABEL_30;
      }
      (*(void (**)(void *, char *, uint64_t))(v114 + 40))(v116, __dstb, v69);
    }
LABEL_33:
    uint64_t v77 = v36[8];
    uint64_t v78 = &v34[v77];
    uint64_t v79 = &v35[v77];
    uint64_t v81 = *(void *)v79;
    uint64_t v80 = *((void *)v79 + 1);
    *(void *)uint64_t v78 = v81;
    *((void *)v78 + 1) = v80;
    swift_bridgeObjectRelease();
    uint64_t v82 = v36[9];
    uint64_t v83 = &v34[v82];
    int v84 = *(void **)&v34[v82];
    uint64_t v85 = *(void *)&v35[v82];
    if (v84 != (void *)1)
    {
      if (v85 != 1)
      {
        *(void *)uint64_t v83 = v85;

        goto LABEL_38;
      }
      sub_10001EA8C((uint64_t)&v34[v82]);
      uint64_t v85 = *(void *)&v35[v82];
    }
    *(void *)uint64_t v83 = v85;
LABEL_38:
    uint64_t v86 = v36[10];
    uint64_t v87 = &v34[v86];
    uint64_t v88 = &v35[v86];
    char v89 = v88[16];
    uint64_t v90 = *(void **)v87;
    uint64_t v91 = (void *)*((void *)v87 + 1);
    *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
    v87[16] = v89;
    sub_10001DE30(v90, v91);
    goto LABEL_39;
  }
  if (v14)
  {
LABEL_7:
    uint64_t v26 = sub_10001D64C(&qword_10010ED98);
    memcpy(v8, v9, *(void *)(*(void *)(v26 - 8) + 64));
    return a1;
  }
  uint64_t v120 = a1;
  uint64_t v15 = sub_1000CACC0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v8, v9, v15);
  uint64_t v16 = *(int *)(v10 + 20);
  uint64_t v17 = &v8[v16];
  uint64_t v18 = &v9[v16];
  *(void *)&v8[v16] = *(void *)&v9[v16];
  uint64_t v19 = (int *)type metadata accessor for TodayContent();
  uint64_t v20 = v19[5];
  uint64_t v21 = &v17[v20];
  uint64_t v22 = &v18[v20];
  uint64_t v23 = (int *)type metadata accessor for Banner();
  uint64_t v24 = *((void *)v23 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_10001D64C(&qword_10010DE20);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    uint64_t v113 = v24;
    long long v47 = *((_OWORD *)v22 + 1);
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    *((_OWORD *)v21 + 1) = v47;
    *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
    uint64_t v48 = v23[7];
    int __dsta = &v21[v48];
    uint64_t v49 = &v22[v48];
    uint64_t v50 = sub_1000CABE0();
    uint64_t v112 = *(void *)(v50 - 8);
    uint64_t v115 = v49;
    uint64_t v51 = v49;
    uint64_t v52 = v50;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v51, 1, v50))
    {
      uint64_t v53 = sub_10001D64C(&qword_10010F340);
      memcpy(__dsta, v115, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v112 + 32))(__dsta, v115, v52);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(__dsta, 0, 1, v52);
    }
    *(_OWORD *)&v21[v23[8]] = *(_OWORD *)&v22[v23[8]];
    *(void *)&v21[v23[9]] = *(void *)&v22[v23[9]];
    uint64_t v55 = v23[10];
    uint64_t v56 = &v21[v55];
    uint64_t v57 = &v22[v55];
    v56[16] = v57[16];
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    (*(void (**)(char *, void, uint64_t, int *))(v113 + 56))(v21, 0, 1, v23);
  }
  *(void *)&v17[v19[6]] = *(void *)&v18[v19[6]];
  *(void *)&v17[v19[7]] = *(void *)&v18[v19[7]];
  v17[v19[8]] = v18[v19[8]];
  uint64_t v58 = v19[9];
  id v59 = &v17[v58];
  uint64_t v60 = &v18[v58];
  uint64_t v61 = sub_1000CABE0();
  uint64_t v62 = *(void *)(v61 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
  {
    uint64_t v63 = sub_10001D64C(&qword_10010F340);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v60, v61);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
  }
  a1 = v120;
  *(void *)&v17[v19[10]] = *(void *)&v18[v19[10]];
  *(_OWORD *)&v17[v19[11]] = *(_OWORD *)&v18[v19[11]];
  *(_OWORD *)&v17[v19[12]] = *(_OWORD *)&v18[v19[12]];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_10009EBF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009EC0C);
}

uint64_t sub_10009EC0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CC0D0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_10001D64C(&qword_10010ED98);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10009ED08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009ED1C);
}

uint64_t sub_10009ED1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1000CC0D0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_10001D64C(&qword_10010ED98);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_10009EE24()
{
  sub_1000CC0D0();
  if (v0 <= 0x3F)
  {
    sub_10009EEEC();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10009EEEC()
{
  if (!qword_100111740)
  {
    type metadata accessor for NewsTimelineEntry();
    unint64_t v0 = sub_1000CC640();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100111740);
    }
  }
}

uint64_t sub_10009EF44()
{
  return sub_10009BB20(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10009EF4C()
{
  swift_release();
  sub_1000201A8(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

void sub_10009EF8C()
{
  sub_10009BCD8(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10009EF98()
{
  return sub_10009B604(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10009EFA0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10009EFE0()
{
  return sub_10009AA44(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10009EFEC()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10009F034()
{
  return sub_10009AE78(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10009F040(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10009F050()
{
  return swift_release();
}

uint64_t sub_10009F058()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009F090()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10009F0B4()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10009F0FC()
{
  return sub_10009B1F4(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32), *(uint64_t (**)(void))(v0 + 40));
}

unint64_t sub_10009F10C()
{
  unint64_t result = qword_100111770;
  if (!qword_100111770)
  {
    sub_1000CBD60();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111770);
  }
  return result;
}

unint64_t sub_10009F164()
{
  unint64_t result = qword_100111778;
  if (!qword_100111778)
  {
    sub_10001D690((uint64_t *)&unk_100111DD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111778);
  }
  return result;
}

uint64_t sub_10009F1C0@<X0>(void *a1@<X8>)
{
  os_log_type_t v3 = (void *)(v1 + qword_100111650);
  swift_beginAccess();
  *a1 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10009F214@<X0>(uint64_t a1@<X8>)
{
  return sub_10009ADC4(v1, a1);
}

uint64_t sub_10009F21C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TaskContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009F280(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10009F2F0(void *a1)
{
  uint64_t v2 = sub_10001D64C(&qword_1001118F8);
  uint64_t v22 = *(void *)(v2 - 8);
  uint64_t v23 = v2;
  __chkstk_darwin(v2);
  uint64_t v21 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10001D64C(&qword_100111900);
  uint64_t v25 = *(void *)(v4 - 8);
  uint64_t v26 = v4;
  __chkstk_darwin(v4);
  uint64_t v24 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000CABE0();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v28 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ImageStore.Key();
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10001D64C(&qword_100111908);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100020110(a1, a1[3]);
  sub_1000A2818();
  sub_1000CCB30();
  sub_1000A0E14(v27, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6) == 1)
  {
    char v30 = 1;
    sub_1000A286C();
    uint64_t v16 = v21;
    sub_1000CC9A0();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v28, v11, v6);
    char v29 = 0;
    sub_1000A2924();
    uint64_t v18 = v24;
    sub_1000CC9A0();
    sub_1000A2978(&qword_100110EE0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v19 = v26;
    sub_1000CC9F0();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v28, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

Swift::Int sub_10009F748()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000CABE0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ImageStore.Key();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CCAC0();
  sub_1000A0E14(v1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_1000CCAD0(1uLL);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_1000CCAD0(0);
    sub_1000A2978((unint64_t *)&qword_100111370, (void (*)(uint64_t))&type metadata accessor for URL);
    sub_1000CC130();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return sub_1000CCAF0();
}

uint64_t sub_10009F920@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v38 = sub_10001D64C(&qword_1001118C0);
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v43 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10001D64C(&qword_1001118C8);
  uint64_t v39 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v42 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10001D64C(&qword_1001118D0);
  uint64_t v41 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ImageStore.Key();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v33 - v12;
  sub_100020110(a1, a1[3]);
  sub_1000A2818();
  uint64_t v14 = v44;
  sub_1000CCB10();
  if (v14) {
    goto LABEL_7;
  }
  uint64_t v34 = v11;
  id v35 = v13;
  uint64_t v16 = v42;
  uint64_t v15 = v43;
  uint64_t v44 = a1;
  uint64_t v17 = sub_1000CC990();
  uint64_t v18 = v5;
  uint64_t v19 = v7;
  if (*(void *)(v17 + 16) != 1)
  {
    uint64_t v21 = sub_1000CC7B0();
    swift_allocError();
    uint64_t v23 = v22;
    sub_10001D64C(&qword_1001118E0);
    *uint64_t v23 = v8;
    sub_1000CC910();
    sub_1000CC7A0();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, enum case for DecodingError.typeMismatch(_:), v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v5);
    a1 = v44;
LABEL_7:
    uint64_t v25 = (uint64_t)a1;
    return sub_1000201A8(v25);
  }
  uint64_t v20 = (uint64_t)v44;
  if (*(unsigned char *)(v17 + 32))
  {
    char v46 = 1;
    sub_1000A286C();
    sub_1000CC900();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v38);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v5);
    uint64_t v27 = sub_1000CABE0();
    uint64_t v28 = (uint64_t)v35;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v35, 1, 1, v27);
  }
  else
  {
    char v45 = 0;
    sub_1000A2924();
    uint64_t v24 = v16;
    sub_1000CC900();
    uint64_t v29 = sub_1000CABE0();
    sub_1000A2978(&qword_10010F5C0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v30 = (uint64_t)v34;
    uint64_t v31 = v37;
    sub_1000CC980();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v18);
    uint64_t v32 = v44;
    uint64_t v28 = (uint64_t)v35;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v30, 0, 1, v29);
    sub_1000A28C0(v30, v28);
    uint64_t v20 = (uint64_t)v32;
  }
  sub_1000A28C0(v28, v40);
  uint64_t v25 = v20;
  return sub_1000201A8(v25);
}

uint64_t sub_10009FF14()
{
  if (*v0) {
    return 0xD000000000000014;
  }
  else {
    return 0x725565746F6D6572;
  }
}

uint64_t sub_10009FF58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A11DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10009FF80(uint64_t a1)
{
  unint64_t v2 = sub_1000A2818();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009FFBC(uint64_t a1)
{
  unint64_t v2 = sub_1000A2818();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A0000()
{
  return 12383;
}

uint64_t sub_1000A000C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1000CCA30();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1000A008C(uint64_t a1)
{
  unint64_t v2 = sub_1000A2924();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A00C8(uint64_t a1)
{
  unint64_t v2 = sub_1000A2924();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A0104@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1000A0134(uint64_t a1)
{
  unint64_t v2 = sub_1000A286C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A0170(uint64_t a1)
{
  unint64_t v2 = sub_1000A286C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A01AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10009F920(a1, a2);
}

uint64_t sub_1000A01C4(void *a1)
{
  return sub_10009F2F0(a1);
}

void sub_1000A01E0()
{
  uint64_t v1 = sub_1000CABE0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  char v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  char v7 = (char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A0E14(v0, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    sub_1000CCAD0(1uLL);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v7, v1);
    sub_1000CCAD0(0);
    sub_1000A2978((unint64_t *)&qword_100111370, (void (*)(uint64_t))&type metadata accessor for URL);
    sub_1000CC130();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
}

Swift::Int sub_1000A0398()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000CABE0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CCAC0();
  sub_1000A0E14(v1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_1000CCAD0(1uLL);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    sub_1000CCAD0(0);
    sub_1000A2978((unint64_t *)&qword_100111370, (void (*)(uint64_t))&type metadata accessor for URL);
    sub_1000CC130();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return sub_1000CCAF0();
}

uint64_t sub_1000A0578(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001D64C(&qword_1001118A0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100020110(a1, a1[3]);
  sub_1000A25C4();
  sub_1000CCB30();
  v9[1] = a2;
  sub_10001D64C(&qword_100111880);
  sub_1000A2718();
  sub_1000CC9F0();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1000A06C8()
{
  return 0x7942736567616D69;
}

uint64_t sub_1000A06E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7942736567616D69 && a2 == 0xEB0000000079654BLL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1000CCA30();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1000A0798(uint64_t a1)
{
  unint64_t v2 = sub_1000A25C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A07D4(uint64_t a1)
{
  unint64_t v2 = sub_1000A25C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1000A0810@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000A12D8(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000A083C(void *a1)
{
  return sub_1000A0578(a1, *v1);
}

uint64_t sub_1000A085C()
{
  if (*v0) {
    return 0x6172576567616D69;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1000A0898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A1450(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A08C0(uint64_t a1)
{
  unint64_t v2 = sub_1000A171C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A08FC(uint64_t a1)
{
  unint64_t v2 = sub_1000A171C();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1000A0938()
{
  return sub_1000CCAF0();
}

uint64_t sub_1000A098C()
{
  return sub_1000CC270();
}

Swift::Int sub_1000A09A4()
{
  return sub_1000CCAF0();
}

uint64_t sub_1000A09F4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v7._countAndFlagsBits = *a1;
  uint64_t v3 = (void *)a1[1];
  v4._rawValue = &off_1000FBED8;
  v7._object = v3;
  Swift::Int v5 = sub_1000CC8F0(v4, v7);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

void sub_1000A0A48(void *a1@<X8>)
{
  *a1 = 0x6567616D496975;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1000A0A64()
{
  return sub_1000CC380();
}

uint64_t sub_1000A0AC4()
{
  return sub_1000CC370();
}

void sub_1000A0B14(void *a1, void *a2)
{
  uint64_t v5 = sub_1000CACF0();
  uint64_t v19 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10001D64C(&qword_1001117A8);
  uint64_t v20 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100020110(a1, a1[3]);
  sub_1000A171C();
  sub_1000CCB30();
  LOBYTE(v21) = 0;
  sub_1000A1818();
  id v11 = a2;
  sub_1000CC9F0();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  }
  else
  {
    unint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    id v12 = v11;
    sub_1000CACE0();
    uint64_t v13 = sub_1000CACD0();
    unint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v5);
    swift_bridgeObjectRelease();
    unint64_t v21 = v13;
    unint64_t v22 = v15;
    v25._countAndFlagsBits = 1735290926;
    v25._object = (void *)0xE400000000000000;
    sub_1000CC2B0(v25);

    unint64_t v16 = v21;
    unint64_t v17 = v22;
    unint64_t v21 = (unint64_t)v12;
    unint64_t v22 = v16;
    unint64_t v23 = v17;
    char v24 = 1;
    sub_1000A186C();
    sub_1000CC9F0();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  }
}

void *sub_1000A0DCC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000A154C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void sub_1000A0DF8(void *a1)
{
  sub_1000A0B14(a1, *v1);
}

uint64_t sub_1000A0E14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ImageStore.Key();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ImageStore.Key()
{
  uint64_t result = qword_100111830;
  if (!qword_100111830) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A0EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CABE0();
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for ImageStore.Key();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10001D64C((uint64_t *)&unk_10010F380);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  unint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (uint64_t)&v17[*(int *)(v15 + 56)];
  sub_1000A0E14(a1, (uint64_t)v17);
  sub_1000A0E14(a2, v18);
  uint64_t v19 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v5[6];
  if (v19((uint64_t)v17, 1, v4) != 1)
  {
    sub_1000A0E14((uint64_t)v17, (uint64_t)v13);
    if (v19(v18, 1, v4) != 1)
    {
      unint64_t v21 = (void (*)(char *, char *, uint64_t))v5[4];
      v21(v10, v13, v4);
      v21(v8, (char *)v18, v4);
      char v20 = sub_1000CAB90();
      unint64_t v22 = (void (*)(char *, uint64_t))v5[1];
      v22(v8, v4);
      v22(v10, v4);
      sub_10006E25C((uint64_t)v17);
      return v20 & 1;
    }
    ((void (*)(char *, uint64_t))v5[1])(v13, v4);
    goto LABEL_6;
  }
  if (v19(v18, 1, v4) != 1)
  {
LABEL_6:
    sub_1000A117C((uint64_t)v17);
    char v20 = 0;
    return v20 & 1;
  }
  sub_10006E25C((uint64_t)v17);
  char v20 = 1;
  return v20 & 1;
}

uint64_t sub_1000A117C(uint64_t a1)
{
  uint64_t v2 = sub_10001D64C((uint64_t *)&unk_10010F380);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A11DC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x725565746F6D6572 && a2 == 0xE90000000000006CLL;
  if (v2 || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001000DC890)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1000CCA30();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_1000A12D8(void *a1)
{
  uint64_t v3 = sub_10001D64C(&qword_100111870);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100020110(a1, a1[3]);
  sub_1000A25C4();
  sub_1000CCB10();
  if (v1)
  {
    sub_1000201A8((uint64_t)a1);
  }
  else
  {
    sub_10001D64C(&qword_100111880);
    sub_1000A2618();
    sub_1000CC980();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    sub_1000201A8((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_1000A1450(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_1000CCA30() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6172576567616D69 && a2 == 0xEC00000072657070)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1000CCA30();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_1000A154C(void *a1)
{
  uint64_t v3 = sub_10001D64C(&qword_100111788);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_100020110(a1, a1[3]);
  sub_1000A171C();
  sub_1000CCB10();
  if (!v1)
  {
    LOBYTE(v10) = 0;
    sub_1000A1770();
    sub_1000CC980();
    v9[7] = 1;
    sub_1000A17C4();
    sub_1000CC980();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v10;
    swift_bridgeObjectRelease();
  }
  sub_1000201A8((uint64_t)a1);
  return v7;
}

unint64_t sub_1000A171C()
{
  unint64_t result = qword_100111790;
  if (!qword_100111790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111790);
  }
  return result;
}

unint64_t sub_1000A1770()
{
  unint64_t result = qword_100111798;
  if (!qword_100111798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111798);
  }
  return result;
}

unint64_t sub_1000A17C4()
{
  unint64_t result = qword_1001117A0;
  if (!qword_1001117A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001117A0);
  }
  return result;
}

unint64_t sub_1000A1818()
{
  unint64_t result = qword_1001117B0;
  if (!qword_1001117B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001117B0);
  }
  return result;
}

unint64_t sub_1000A186C()
{
  unint64_t result = qword_1001117B8;
  if (!qword_1001117B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001117B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageStore.Image.CodingType()
{
  return &type metadata for ImageStore.Image.CodingType;
}

ValueMetadata *type metadata accessor for ImageStore.Image.CodingKeys()
{
  return &type metadata for ImageStore.Image.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageStore()
{
  return &type metadata for ImageStore;
}

uint64_t *sub_1000A18FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_1000CABE0();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1000A1A48(uint64_t a1)
{
  uint64_t v2 = sub_1000CABE0();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_1000A1B18(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CABE0();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_1000A1C28(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CABE0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_1000A1D9C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CABE0();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_1000A1EAC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CABE0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_1000A2020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A2034);
}

uint64_t sub_1000A2034(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CABE0();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000A20A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A20B4);
}

uint64_t sub_1000A20B4(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_1000CABE0();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_1000A2134(uint64_t a1)
{
  uint64_t v2 = sub_1000CABE0();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_1000A219C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CABE0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t sub_1000A220C()
{
  uint64_t result = sub_1000CABE0();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for Banner.Image(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for Banner.Image(id *a1)
{
}

void **assignWithCopy for Banner.Image(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void *initializeWithTake for Banner.Image(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void **assignWithTake for Banner.Image(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for ImageStore.Image(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageStore.Image(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageStore.Image()
{
  return &type metadata for ImageStore.Image;
}

uint64_t sub_1000A23C8()
{
  return sub_1000A2978(&qword_100111840, (void (*)(uint64_t))type metadata accessor for ImageStore.Key);
}

unint64_t sub_1000A2414()
{
  unint64_t result = qword_100111848;
  if (!qword_100111848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111848);
  }
  return result;
}

unint64_t sub_1000A246C()
{
  unint64_t result = qword_100111850;
  if (!qword_100111850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111850);
  }
  return result;
}

unint64_t sub_1000A24C4()
{
  unint64_t result = qword_100111858;
  if (!qword_100111858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111858);
  }
  return result;
}

unint64_t sub_1000A251C()
{
  unint64_t result = qword_100111860;
  if (!qword_100111860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111860);
  }
  return result;
}

unint64_t sub_1000A2570()
{
  unint64_t result = qword_100111868;
  if (!qword_100111868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111868);
  }
  return result;
}

unint64_t sub_1000A25C4()
{
  unint64_t result = qword_100111878;
  if (!qword_100111878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111878);
  }
  return result;
}

unint64_t sub_1000A2618()
{
  unint64_t result = qword_100111888;
  if (!qword_100111888)
  {
    sub_10001D690(&qword_100111880);
    sub_1000A2978(&qword_100111890, (void (*)(uint64_t))type metadata accessor for ImageStore.Key);
    sub_1000A26C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111888);
  }
  return result;
}

unint64_t sub_1000A26C4()
{
  unint64_t result = qword_100111898;
  if (!qword_100111898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111898);
  }
  return result;
}

unint64_t sub_1000A2718()
{
  unint64_t result = qword_1001118A8;
  if (!qword_1001118A8)
  {
    sub_10001D690(&qword_100111880);
    sub_1000A2978(&qword_1001118B0, (void (*)(uint64_t))type metadata accessor for ImageStore.Key);
    sub_1000A27C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001118A8);
  }
  return result;
}

unint64_t sub_1000A27C4()
{
  unint64_t result = qword_1001118B8;
  if (!qword_1001118B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001118B8);
  }
  return result;
}

unint64_t sub_1000A2818()
{
  unint64_t result = qword_1001118D8;
  if (!qword_1001118D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001118D8);
  }
  return result;
}

unint64_t sub_1000A286C()
{
  unint64_t result = qword_1001118E8;
  if (!qword_1001118E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001118E8);
  }
  return result;
}

uint64_t sub_1000A28C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ImageStore.Key();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A2924()
{
  unint64_t result = qword_1001118F0;
  if (!qword_1001118F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001118F0);
  }
  return result;
}

uint64_t sub_1000A2978(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s7NewsTag10ImageStoreV5ImageO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A2A8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageStore.Key.CodingKeys()
{
  return &type metadata for ImageStore.Key.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageStore.Key.RemoteUrlCodingKeys()
{
  return &type metadata for ImageStore.Key.RemoteUrlCodingKeys;
}

ValueMetadata *type metadata accessor for ImageStore.Key.ThumbnailPlaceholderCodingKeys()
{
  return &type metadata for ImageStore.Key.ThumbnailPlaceholderCodingKeys;
}

unsigned char *_s7NewsTag10ImageStoreV5ImageO10CodingTypeOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000A2B80);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageStore.CodingKeys()
{
  return &type metadata for ImageStore.CodingKeys;
}

unint64_t sub_1000A2BBC()
{
  unint64_t result = qword_100111910;
  if (!qword_100111910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111910);
  }
  return result;
}

unint64_t sub_1000A2C14()
{
  unint64_t result = qword_100111918;
  if (!qword_100111918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111918);
  }
  return result;
}

unint64_t sub_1000A2C6C()
{
  unint64_t result = qword_100111920;
  if (!qword_100111920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111920);
  }
  return result;
}

unint64_t sub_1000A2CC4()
{
  unint64_t result = qword_100111928;
  if (!qword_100111928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111928);
  }
  return result;
}

unint64_t sub_1000A2D1C()
{
  unint64_t result = qword_100111930;
  if (!qword_100111930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111930);
  }
  return result;
}

unint64_t sub_1000A2D74()
{
  unint64_t result = qword_100111938;
  if (!qword_100111938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111938);
  }
  return result;
}

unint64_t sub_1000A2DCC()
{
  unint64_t result = qword_100111940;
  if (!qword_100111940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111940);
  }
  return result;
}

unint64_t sub_1000A2E24()
{
  unint64_t result = qword_100111948;
  if (!qword_100111948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111948);
  }
  return result;
}

unint64_t sub_1000A2E7C()
{
  unint64_t result = qword_100111950;
  if (!qword_100111950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111950);
  }
  return result;
}

unint64_t sub_1000A2ED4()
{
  unint64_t result = qword_100111958;
  if (!qword_100111958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111958);
  }
  return result;
}

unint64_t sub_1000A2F2C()
{
  unint64_t result = qword_100111960;
  if (!qword_100111960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111960);
  }
  return result;
}

void sub_1000A2F88(int a1, id a2)
{
  id v3 = [a2 todayResults];
  if (v3)
  {
    unsigned int v4 = v3;
    id v5 = [v3 banner];

    if (v5)
    {
      unsigned int v6 = (void *)(v2 + OBJC_IVAR____TtC7NewsTag23TodayBannerEventTracker_store);
      sub_100020110((void *)(v2 + OBJC_IVAR____TtC7NewsTag23TodayBannerEventTracker_store), *(void *)(v2 + OBJC_IVAR____TtC7NewsTag23TodayBannerEventTracker_store + 24));
      id v7 = [v5 identifier];
      uint64_t v8 = sub_1000CC1F0();
      uint64_t v10 = v9;

      sub_1000CAF40();
      if (v31)
      {
        if (*(void *)(v31 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v11 = sub_10003CED0(v8, v10);
          if (v12)
          {
            uint64_t v13 = (uint64_t *)(*(void *)(v31 + 56) + 16 * v11);
            uint64_t v15 = *v13;
            uint64_t v14 = v13[1];
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            goto LABEL_18;
          }
          swift_bridgeObjectRelease_n();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v15 = 0;
      uint64_t v14 = 0;
LABEL_18:
      uint64_t v19 = v15 + 1;
      if (v15 == -1)
      {
        __break(1u);
      }
      else
      {
        sub_100020110(v6, v6[3]);
        id v20 = [v5 identifier];
        uint64_t v21 = sub_1000CC1F0();
        uint64_t v23 = v22;

        sub_1000CAF40();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        sub_1000937EC(v19, v14, v21, v23, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000CAF50();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (qword_10010DD68 == -1) {
          goto LABEL_20;
        }
      }
      swift_once();
LABEL_20:
      uint64_t v25 = sub_1000CB270();
      sub_10003B638(v25, (uint64_t)static Logger.todayWidgetBanner);
      id v26 = v5;
      uint64_t v27 = sub_1000CB250();
      os_log_type_t v28 = sub_1000CC530();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 134218240;
        sub_1000CC660();
        *(_WORD *)(v29 + 12) = 2048;
        [v26 numberOfAppearancesToHide];
        sub_1000CC660();

        _os_log_impl((void *)&_mh_execute_header, v27, v28, "TodayBannerEventTracker banner appeared, appearances=%lu numberOfAppearancesToHide=%llu", (uint8_t *)v29, 0x16u);
        swift_slowDealloc();
      }
      else
      {
      }
      return;
    }
  }
  if (qword_10010DD68 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_1000CB270();
  sub_10003B638(v16, (uint64_t)static Logger.todayWidgetBanner);
  oslog = sub_1000CB250();
  os_log_type_t v17 = sub_1000CC530();
  if (os_log_type_enabled(oslog, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v17, "TodayBannerEventTracker will ignore appearance when there is no banner", v18, 2u);
    swift_slowDealloc();
  }
}

void sub_1000A34B4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_10001D64C(&qword_10010F340);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  char v12 = (char *)&v64 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v64 - v13;
  id v15 = [a3 todayResults];
  if (v15)
  {
    uint64_t v16 = v15;
    os_log_type_t v17 = [v15 banner];

    if (v17)
    {
      sub_1000226DC(a2, (uint64_t)v14);
      uint64_t v18 = sub_1000CABE0();
      uint64_t v19 = *(void *)(v18 - 8);
      id v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
      if (v20(v14, 1, v18) == 1)
      {
        sub_1000227A8((uint64_t)v14, &qword_10010F340);
LABEL_24:
        if (qword_10010DD68 != -1) {
          swift_once();
        }
        uint64_t v47 = sub_1000CB270();
        sub_10003B638(v47, (uint64_t)static Logger.todayWidgetBanner);
        uint64_t v48 = sub_1000CB250();
        os_log_type_t v49 = sub_1000CC530();
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v50 = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "TodayBannerEventTracker will not track engagement when actionURL is unrelated", v50, 2u);
          swift_slowDealloc();

          return;
        }

        goto LABEL_29;
      }
      uint64_t v64 = v3;
      uint64_t v65 = sub_1000CAB30();
      uint64_t v66 = v25;
      id v26 = v14;
      uint64_t v27 = *(void (**)(char *, uint64_t))(v19 + 8);
      v27(v26, v18);
      uint64_t v67 = v17;
      id v28 = [v17 actionURL];
      if (v28)
      {
        uint64_t v29 = v28;
        sub_1000CABA0();

        uint64_t v30 = 0;
      }
      else
      {
        uint64_t v30 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v9, v30, 1, v18);
      sub_1000A4B90((uint64_t)v9, (uint64_t)v12);
      if (v20(v12, 1, v18) == 1)
      {
        swift_bridgeObjectRelease();
        sub_1000227A8((uint64_t)v12, &qword_10010F340);
LABEL_23:
        os_log_type_t v17 = v67;
        goto LABEL_24;
      }
      uint64_t v31 = sub_1000CAB30();
      uint64_t v33 = v32;
      v27(v12, v18);
      uint64_t v35 = v65;
      unint64_t v34 = v66;
      v70[0] = v65;
      v70[1] = v66;
      uint64_t v68 = v31;
      uint64_t v69 = v33;
      sub_1000231FC();
      LOBYTE(v31) = sub_1000CC6A0();
      swift_bridgeObjectRelease();
      if ((v31 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
      uint64_t v36 = (void *)(v64 + OBJC_IVAR____TtC7NewsTag23TodayBannerEventTracker_store);
      sub_100020110((void *)(v64 + OBJC_IVAR____TtC7NewsTag23TodayBannerEventTracker_store), *(void *)(v64 + OBJC_IVAR____TtC7NewsTag23TodayBannerEventTracker_store + 24));
      id v37 = [v67 identifier];
      uint64_t v38 = sub_1000CC1F0();
      uint64_t v40 = v39;

      sub_1000CAF40();
      uint64_t v41 = v70[0];
      if (v70[0])
      {
        if (*(void *)(v70[0] + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v42 = sub_10003CED0(v38, v40);
          if (v43)
          {
            uint64_t v44 = (uint64_t *)(*(void *)(v41 + 56) + 16 * v42);
            uint64_t v46 = *v44;
            char v45 = v44[1];
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            goto LABEL_34;
          }
          swift_bridgeObjectRelease_n();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v46 = 0;
      char v45 = 0;
LABEL_34:
      unint64_t v51 = (unint64_t)&v45->isa + 1;
      if (v45 == -1)
      {
        __break(1u);
      }
      else
      {
        sub_100020110(v36, v36[3]);
        char v45 = v67;
        id v52 = [v67 identifier];
        uint64_t v53 = sub_1000CC1F0();
        uint64_t v55 = v54;

        sub_1000CAF40();
        if (v70[0]) {
          uint64_t v56 = (void *)v70[0];
        }
        else {
          uint64_t v56 = &_swiftEmptyDictionarySingleton;
        }
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v70[0] = (uint64_t)v56;
        sub_1000937EC(v46, v51, v53, v55, isUniquelyReferenced_nonNull_native);
        uint64_t v58 = v70[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v70[0] = v58;
        sub_1000CAF50();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (qword_10010DD68 == -1)
        {
LABEL_39:
          uint64_t v59 = sub_1000CB270();
          sub_10003B638(v59, (uint64_t)static Logger.todayWidgetBanner);
          os_log_type_t v17 = v45;
          swift_bridgeObjectRetain();
          uint64_t v60 = sub_1000CB250();
          os_log_type_t v61 = sub_1000CC530();
          if (os_log_type_enabled(v60, v61))
          {
            uint64_t v62 = swift_slowAlloc();
            v70[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v62 = 136315650;
            swift_bridgeObjectRetain();
            uint64_t v68 = sub_1000B2E18(v35, v34, v70);
            sub_1000CC660();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v62 + 12) = 2048;
            uint64_t v68 = v51;
            sub_1000CC660();
            *(_WORD *)(v62 + 22) = 2048;
            id v63 = [v17 numberOfTapsToHide];

            uint64_t v68 = (uint64_t)v63;
            sub_1000CC660();

            _os_log_impl((void *)&_mh_execute_header, v60, v61, "TodayBannerEventTracker banner engaged, url=%s engagements=%lu numberOfTapsToHide=%llu", (uint8_t *)v62, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          if (v51 >= (unint64_t)[v17 numberOfTapsToHide])
          {
            sub_1000CBFB0();
            sub_1000CBFA0();
            sub_1000CBF80();
            swift_release();
          }
LABEL_29:

          return;
        }
      }
      swift_once();
      goto LABEL_39;
    }
  }
  if (qword_10010DD68 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_1000CB270();
  sub_10003B638(v21, (uint64_t)static Logger.todayWidgetBanner);
  uint64_t v67 = sub_1000CB250();
  os_log_type_t v22 = sub_1000CC530();
  if (os_log_type_enabled(v67, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v67, v22, "TodayBannerEventTracker will ignore engagement when there is no banner", v23, 2u);
    swift_slowDealloc();
  }
  uint64_t v24 = v67;
}

uint64_t sub_1000A41C0(const void *a1)
{
  uint64_t v2 = (void (**)(void))_Block_copy(a1);
  v2[2]();
  _Block_release(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return sub_1000A4B88(v3);
}

uint64_t type metadata accessor for TodayBannerEventTracker()
{
  return self;
}

uint64_t sub_1000A42C0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A4300()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10007D6DC;
  unsigned int v4 = (uint64_t (*)(const void *))((char *)&dword_1001119A8 + dword_1001119A8);
  return v4(v2);
}

uint64_t sub_1000A43AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *unsigned int v4 = v3;
  v4[1] = sub_10007D884;
  return v6();
}

uint64_t sub_1000A447C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  unsigned int v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10007D884;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1001119B8 + dword_1001119B8);
  return v6(v2, v3, v4);
}

uint64_t sub_1000A453C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10007D884;
  return v7();
}

uint64_t sub_1000A460C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000A464C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10007D884;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001119C8 + dword_1001119C8);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1000A4718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000CC4A0();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1000CC490();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000227A8(a1, &qword_1001119A0);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1000CC480();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000A48C4(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000A49A0;
  return v6(a1);
}

uint64_t sub_1000A49A0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000A4A98()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A4AD0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10007D6DC;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001119D8 + dword_1001119D8);
  return v6(a1, v4);
}

uint64_t sub_1000A4B88(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000A4B90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001D64C(&qword_10010F340);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_1000A4BF8(void *a1)
{
  uint64_t v48 = sub_1000CBB00();
  uint64_t v2 = *(void **)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (SEL *)&selRef_initWithUserIDProvider_;
  id v47 = a1;
  id v6 = [a1 colors];
  sub_100036814(0, &qword_100111A00);
  unint64_t v7 = sub_1000CC3B0();

  if (v7 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1000CC890();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  id v9 = [v47 locations];
  uint64_t v46 = sub_100036814(0, &qword_100111E30);
  unint64_t v10 = sub_1000CC3B0();

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1000CC890();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  id v12 = [v47 v5[110]];
  unint64_t v13 = sub_1000CC3B0();

  unint64_t v49 = v13;
  unint64_t v14 = v13 >> 62;
  if (v8 == v11)
  {
    if (v14)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_1000CC890();
      swift_bridgeObjectRelease();
      if (v15) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v15)
      {
LABEL_8:
        unint64_t result = self;
        id v45 = result;
        if (v15 >= 1)
        {
          unint64_t v17 = 0;
          unint64_t v44 = v13 & 0xC000000000000001;
          uint64_t v18 = (void (**)(char *, void, uint64_t))(v2 + 13);
          uint64_t v2 = _swiftEmptyArrayStorage;
          HIDWORD(v43) = enum case for Color.RGBColorSpace.sRGB(_:);
          while (1)
          {
            if (v44) {
              id v19 = (id)sub_1000CC780();
            }
            else {
              id v19 = *(id *)(v13 + 8 * v17 + 32);
            }
            id v20 = v19;
            id v21 = [v19 hex];
            sub_1000CC1F0();

            NSString v22 = sub_1000CC1C0();
            swift_bridgeObjectRelease();
            id v23 = [v45 colorWithHexString:v22];

            [v23 red];
            [v23 green];
            [v23 blue];
            (*v18)(v4, HIDWORD(v43), v48);
            sub_1000CBBA0();

            uint64_t v5 = (SEL *)[v47 locations];
            uint64_t v24 = sub_1000CC3B0();

            if ((v24 & 0xC000000000000001) != 0)
            {
              id v25 = (id)sub_1000CC780();
            }
            else
            {
              if (v17 >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_33;
              }
              id v25 = *(id *)(v24 + 8 * v17 + 32);
            }
            id v26 = v25;
            swift_bridgeObjectRelease();
            sub_1000CADB0();

            uint64_t v27 = sub_1000CBCB0();
            uint64_t v29 = v28;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v2 = sub_100088410(0, v2[2] + 1, 1, v2);
            }
            unint64_t v31 = v2[2];
            unint64_t v30 = v2[3];
            if (v31 >= v30 >> 1) {
              uint64_t v2 = sub_100088410((void *)(v30 > 1), v31 + 1, 1, v2);
            }
            ++v17;
            v2[2] = v31 + 1;
            uint64_t v32 = &v2[2 * v31];
            _OWORD v32[4] = v27;
            v32[5] = v29;

            unint64_t v13 = v49;
            if (v15 == v17) {
              goto LABEL_36;
            }
          }
        }
        __break(1u);
        goto LABEL_40;
      }
    }
LABEL_36:
    swift_bridgeObjectRelease();
    return (void *)sub_1000CBCC0();
  }
  if (!v14)
  {
    uint64_t v33 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v33) {
      goto LABEL_25;
    }
LABEL_38:
    swift_bridgeObjectRelease();
    return (void *)sub_1000CBCD0();
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = sub_1000CC890();
  swift_bridgeObjectRelease();
  if (!v33) {
    goto LABEL_38;
  }
LABEL_25:
  uint64_t v50 = _swiftEmptyArrayStorage;
  unint64_t result = (void *)sub_1000CC7F0();
  if ((v33 & 0x8000000000000000) == 0)
  {
    id v47 = self;
    uint64_t v34 = 0;
    unint64_t v35 = v13 & 0xC000000000000001;
    uint64_t v36 = enum case for Color.RGBColorSpace.sRGB(_:);
    id v37 = (void (**)(char *, uint64_t, uint64_t))(v2 + 13);
    do
    {
      if (v35) {
        id v38 = (id)sub_1000CC780();
      }
      else {
        id v38 = *(id *)(v49 + 8 * v34 + 32);
      }
      uint64_t v39 = v38;
      ++v34;
      id v40 = [v38 hex];
      sub_1000CC1F0();

      NSString v41 = sub_1000CC1C0();
      swift_bridgeObjectRelease();
      id v42 = [v47 colorWithHexString:v41];

      [v42 red];
      [v42 green];
      [v42 blue];
      (*v37)(v4, v36, v48);
      sub_1000CBBA0();

      sub_1000CC7D0();
      sub_1000CC800();
      sub_1000CC810();
      sub_1000CC7E0();
    }
    while (v33 != v34);
    goto LABEL_38;
  }
LABEL_40:
  __break(1u);
  return result;
}

unsigned char *storeEnumTagSinglePayload for FeatureFlags.NewsWidget(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000A5374);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureFlags.NewsWidget()
{
  return &type metadata for FeatureFlags.NewsWidget;
}

unint64_t sub_1000A53B0()
{
  unint64_t result = qword_100111A08;
  if (!qword_100111A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100111A08);
  }
  return result;
}

const char *sub_1000A5404()
{
  return "NewsWidget";
}

const char *sub_1000A5418()
{
  return "playbutton";
}

uint64_t sub_1000A542C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = sub_10001D64C(&qword_10010F340);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v2[4];
  id v8 = [a1 userEngagementWithWidgetEventTracker:v2[3] trackableWidgetState:v7];
  id v9 = (void *)v2[2];
  uint64_t v10 = sub_1000CABE0();
  sub_1000A57DC();
  sub_1000A581C();
  id v11 = v8;
  v12.super.Class isa = sub_1000CC100().super.isa;
  sub_1000226DC((uint64_t)v2 + OBJC_IVAR____TtC7NewsTag21EngagementURLProvider_sharedDirectoryFileUrl, (uint64_t)v6);
  uint64_t v13 = *(void *)(v10 - 8);
  uint64_t v15 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v6, 1, v10) != 1)
  {
    sub_1000CAB60(v14);
    uint64_t v15 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v10);
  }
  id v17 = [v9 URLForEngagement:a1 event:v11 trackableWidgetState:v7 prefetchAssetsByRemoteURL:v12.super.isa sharedDirectoryFileURL:v15];

  if (v17)
  {
    uint64_t v18 = v22;
    sub_1000CABA0();

    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = 1;
    uint64_t v18 = v22;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v18, v19, 1, v10);
}