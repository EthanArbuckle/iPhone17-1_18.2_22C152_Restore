uint64_t sub_100002528(uint64_t a1)
{
  *(void *)a1 = off_10045A4E8;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  sub_100075BE0(a1 + 8, *(void *)(a1 + 16));
  return a1;
}

void sub_100002584(uint64_t a1)
{
  *(void *)a1 = off_10045E890;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100002710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100002720(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_10047BF08 == -1)
  {
    v3 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
  }
  else
  {
    dispatch_once(&qword_10047BF08, &stru_100460658);
    v3 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
  }
  if (*(_DWORD *)(a1 + 40)) {
    v4 = "Encrypted";
  }
  else {
    v4 = "EncryptedUntilFirstUser";
  }
  *(_DWORD *)buf = 136315138;
  *(void *)v14 = v4;
  _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "making sure migration is unnecessary in %s DB", buf, 0xCu);
LABEL_7:
  unint64_t v5 = sub_10000A394(v2);
  unint64_t v12 = v5;
  if (v5 == 2 || !(_BYTE)v5 && HIDWORD(v5) == 17)
  {
    sub_1000A3F90(v2, 17);
    sub_100029C20(v2);
    sub_10009FF24(*(sqlite3 ***)(v2 + 40), 1);
  }
  else
  {
    v6 = sub_1001F5714();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      sub_1001F7060((char *)&v12, &__p);
      v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)v14 = 0;
      *(_WORD *)&v14[4] = 2082;
      *(void *)&v14[6] = "";
      __int16 v15 = 2082;
      v16 = v7;
      __int16 v17 = 2082;
      v18 = "assert";
      __int16 v19 = 2081;
      v20 = "currentVersion.dbOkForVersion(gDbVersion)";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Migration is not supported\", \"version\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    v8 = sub_1001F5714();
    if (os_signpost_enabled(v8))
    {
      sub_1001F7060((char *)&v12, &__p);
      v9 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)v14 = 0;
      *(_WORD *)&v14[4] = 2082;
      *(void *)&v14[6] = "";
      __int16 v15 = 2082;
      v16 = v9;
      __int16 v17 = 2082;
      v18 = "assert";
      __int16 v19 = 2081;
      v20 = "currentVersion.dbOkForVersion(gDbVersion)";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Migration is not supported", "{\"msg%{public}.0s\":\"Migration is not supported\", \"version\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    v10 = sub_1001F5714();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      sub_1001F7060((char *)&v12, &__p);
      sub_1003A4C10((char *)&__p, (uint64_t)buf, v10);
    }

    abort_report_np();
    __break(1u);
  }
}

void sub_100002A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100002A84(uint64_t a1)
{
  *(void *)a1 = off_10045E1B0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100002AEC(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_1000A9108();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_1000A6A10();
      }
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    __int16 v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (!v5) {
        return;
      }
      goto LABEL_30;
    }
    unint64_t v18 = v5 - v7 - 8;
    if (v18 < 0x78 || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5) {
      goto LABEL_39;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v14 -= v20;
    v6 = &v5[-v20];
    v21 = v5 - 16;
    v22 = &v13[8 * v9 - 16];
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *((_OWORD *)v21 - 1);
      long long v24 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v22 - 1) = v25;
      *(_OWORD *)v22 = v24;
      v21 -= 32;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_39:
      do
      {
        uint64_t v26 = *((void *)v6 - 1);
        v6 -= 8;
        *(void *)v6 = 0;
        *((void *)v14 - 1) = v26;
        v14 -= 8;
      }
      while (v6 != v7);
    }
    v27 = (char *)*a1;
    v6 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6 != v27)
    {
      do
      {
        v29 = (id *)*((void *)v6 - 1);
        v6 -= 8;
        v28 = v29;
        *(void *)v6 = 0;
        if (v29)
        {
          sub_100338BB4(v28);
          operator delete();
        }
      }
      while (v6 != v27);
      v6 = v27;
    }
    if (v6)
    {
LABEL_30:
      operator delete(v6);
    }
  }
}

void sub_100002D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  if (*(char *)(a2 + 23) < 0) {
    a2 = *(void *)a2;
  }
  rename((const std::__fs::filesystem::path *)a1, (const std::__fs::filesystem::path *)a2, (std::error_code *)a3);
  if (v6 && (uint64_t v7 = *__error(), v7))
  {
    sub_1000ADD4C(v7, v5, v4, a3, (uint64_t)"boost::filesystem::rename");
  }
  else if (a3)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

void sub_100002DB4()
{
}

__n128 sub_100002E00(__n128 *a1, uint64_t a2)
{
  uint64_t v4 = &a1[6].n128_u64[1];
  uint64_t v5 = (std::ios_base *)&a1[6].n128_i8[*(void *)(a1[6].n128_u64[1] - 24) + 8];
  v5->__exceptions_ = 1;
  std::ios_base::clear(v5, v5->__rdstate_);
  sub_100029648(a2);
  if ((v10 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    uint64_t v7 = v10;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_10002986C(v4, (uint64_t)v6, v7);
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  __n128 result = *(__n128 *)(*(unint64_t *)((char *)v4 + *(void *)(a1[6].n128_u64[1] - 24) + 40) + 40);
  a1[17] = result;
  return result;
}

uint64_t sub_100002EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v25 < 0) {
    operator delete(v24);
  }
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  __cxa_begin_catch(exception_object);
  __cxa_end_catch();
  return 0;
}

void sub_100002F44(uint64_t a1)
{
  *(void *)a1 = off_10045E100;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100002FAC(uint64_t a1, long long *a2, long long *a3, void *a4)
{
  *(void *)a1 = off_100464800;
  *(void *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000559FC((unsigned char *)(a1 + 16), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000559FC((unsigned char *)(a1 + 40), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    *(void *)(a1 + 56) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 40) = v9;
  }
  if (*a4) {
LABEL_18:
  }
    operator new();
  char v14 = 10;
  strcpy((char *)v13, "privacy.db");
  if (*((char *)a2 + 23) < 0) {
    sub_1000559FC(&__p, *(void **)a2, *((void *)a2 + 1));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  sub_1000512AC(&__p, (uint64_t)v13);
  sub_1000A3E48((uint64_t)&__p, 0, (uint64_t *)&v16);
  long long v10 = v16;
  long long v16 = 0uLL;
  uint64_t v11 = (std::__shared_weak_count *)a4[1];
  *(_OWORD *)a4 = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unint64_t v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_18;
      }
LABEL_21:
      operator delete(v13[0]);
      goto LABEL_18;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((v14 & 0x80000000) == 0) {
    goto LABEL_18;
  }
  goto LABEL_21;
}

void sub_10000326C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v21 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v21 + 39) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v21 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v24);
  if ((*(char *)(v21 + 39) & 0x80000000) == 0)
  {
LABEL_4:
    sub_1002B6704(v22);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(*v23);
  sub_1002B6704(v22);
  _Unwind_Resume(a1);
}

void sub_100003400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003410(uint64_t a1)
{
  *(void *)a1 = off_10045E260;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

uint64_t sub_100003478(uint64_t a1, long long *a2, void *a3, int a4)
{
  *(void *)a1 = off_100460490;
  uint64_t v7 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000559FC((unsigned char *)v7, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v7 = v8;
  }
  *(void *)(a1 + 32) = dispatch_queue_create("com.apple.indoor.privacy.sql.localizer", 0);
  *(void *)(a1 + 40) = *a3;
  uint64_t v9 = a3[1];
  *(void *)(a1 + 48) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100002720;
  v11[3] = &unk_1004604C0;
  v11[4] = a1;
  int v12 = a4;
  _os_activity_initiate((void *)&_mh_execute_header, "opening db & validating consistency", OS_ACTIVITY_FLAG_DEFAULT, v11);
  return a1;
}

uint64_t sub_1000035A8(wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a2, unsigned __int8 *a3)
{
  int v4 = *((_DWORD *)this + 13);
  if (v4)
  {
    uint64_t v7 = *((void *)this + 2);
    *(unsigned char *)a2 = 9;
    *(void *)(a2 + 1) = v7;
    a2 += 9;
    int v4 = *((_DWORD *)this + 13);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *((void *)this + 3);
  *(unsigned char *)a2 = 17;
  *(void *)(a2 + 1) = v8;
  a2 += 9;
  int v4 = *((_DWORD *)this + 13);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v9 = *((void *)this + 4);
  *(unsigned char *)a2 = 25;
  *(void *)(a2 + 1) = v9;
  a2 += 9;
  if ((*((_DWORD *)this + 13) & 8) == 0)
  {
LABEL_5:
    int v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    uint64_t v5 = (void *)*((void *)this + 1);
    if (!v5) {
      return a2;
    }
    goto LABEL_11;
  }
LABEL_10:
  long long v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((void *)this + 5);
  *(unsigned char *)a2 = 32;
  a2 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v10, a2 + 1, a3);
  uint64_t v11 = (void *)*((void *)this + 1);
  int v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  uint64_t v5 = v11;
  if (!v11) {
    return a2;
  }
LABEL_11:
  if (*v5 == v5[1]) {
    return a2;
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v6, (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)a2, a3);
}

void sub_100003730(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
}

uint64_t sub_100003774(uint64_t a1, long long *a2)
{
  *(void *)a1 = off_1004538C8;
  long long v3 = *a2;
  long long v4 = a2[1];
  uint64_t v5 = *((void *)a2 + 6);
  long long v6 = a2[2];
  *(void *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v7 = (void *)(a1 + 80);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  if (!*(unsigned char *)(a1 + 42))
  {
    size_t v15 = operator new(0x20uLL);
    v15[1] = 0;
    v15[2] = 0;
    *size_t v15 = off_100453A38;
    v15[3] = off_100453A88;
    *(void *)(a1 + 80) = v15 + 3;
    *(void *)(a1 + 88) = v15;
    if (*(unsigned char *)(a1 + 9)) {
      goto LABEL_6;
    }
LABEL_9:
    long long v16 = operator new(0x20uLL);
    v16[1] = 0;
    v16[2] = 0;
    void *v16 = off_100453B28;
    v16[3] = off_100453B78;
    v13 = *(std::__shared_weak_count **)(a1 + 72);
    *(void *)(a1 + 64) = v16 + 3;
    *(void *)(a1 + 72) = v16;
    if (!v13) {
      return a1;
    }
    goto LABEL_10;
  }
  uint64_t v8 = operator new(0x1C0uLL);
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = off_1004539E8;
  uint64_t v9 = sub_10009FD48((uint64_t)(v8 + 3), *(double *)(a1 + 48));
  long long v10 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v8;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (!*(unsigned char *)(a1 + 9)) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v11 = operator new(0x1F38uLL);
  v11[1] = 0;
  v11[2] = 0;
  *uint64_t v11 = off_100453AD8;
  uint64_t v12 = sub_1000A1A88((uint64_t)(v11 + 3), a1 + 16, v7);
  v13 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v11;
  if (!v13) {
    return a1;
  }
LABEL_10:
  if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_1000039EC(_Unwind_Exception *a1)
{
  long long v6 = *(void **)(v1 + 160);
  if (v6)
  {
    *(void *)(v1 + 168) = v6;
    operator delete(v6);
  }
  std::mutex::~mutex(v3);
  sub_1000BA884(v4);
  sub_1000BA884(v2);
  _Unwind_Resume(a1);
}

id sub_100003A48(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  id result = *(id *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_100003A84(uint64_t a1)
{
  *(void *)a1 = off_10045F7B0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100003C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003CA4(std::locale::facet *this)
{
  this->__vftable = (std::locale::facet_vtbl *)&off_10045D2B8;
  shared_owners = (std::locale::facet_vtbl *)this[19].__shared_owners_;
  if (shared_owners)
  {
    long long v3 = this[20].__vftable;
    uint64_t v4 = (void *)this[19].__shared_owners_;
    if (v3 != shared_owners)
    {
      do
      {
        if (SHIBYTE(v3[-1].__on_zero_shared) < 0) {
          operator delete(v3[-1].~facet);
        }
        --v3;
      }
      while (v3 != shared_owners);
      uint64_t v4 = (void *)this[19].__shared_owners_;
    }
    this[20].__vftable = shared_owners;
    operator delete(v4);
  }
  uint64_t v5 = this[18].__vftable;
  if (v5)
  {
    uint64_t v6 = this[18].__shared_owners_;
    uint64_t v7 = this[18].__vftable;
    if ((std::locale::facet_vtbl *)v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while ((std::locale::facet_vtbl *)v6 != v5);
      uint64_t v7 = this[18].__vftable;
    }
    this[18].__shared_owners_ = (uint64_t)v5;
    operator delete(v7);
  }
  uint64_t v8 = (std::locale::facet_vtbl *)this[16].__shared_owners_;
  if (v8)
  {
    uint64_t v9 = this[17].__vftable;
    long long v10 = (void *)this[16].__shared_owners_;
    if (v9 != v8)
    {
      do
      {
        if (SHIBYTE(v9[-1].__on_zero_shared) < 0) {
          operator delete(v9[-1].~facet);
        }
        --v9;
      }
      while (v9 != v8);
      long long v10 = (void *)this[16].__shared_owners_;
    }
    this[17].__vftable = v8;
    operator delete(v10);
  }
  uint64_t v11 = this[15].__vftable;
  if (v11)
  {
    uint64_t v12 = this[15].__shared_owners_;
    v13 = this[15].__vftable;
    if ((std::locale::facet_vtbl *)v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)(v12 - 24));
        }
        v12 -= 24;
      }
      while ((std::locale::facet_vtbl *)v12 != v11);
      v13 = this[15].__vftable;
    }
    this[15].__shared_owners_ = (uint64_t)v11;
    operator delete(v13);
  }
  char v14 = (std::locale::facet_vtbl *)this[13].__shared_owners_;
  if (v14)
  {
    size_t v15 = this[14].__vftable;
    long long v16 = (void *)this[13].__shared_owners_;
    if (v15 != v14)
    {
      do
      {
        if (SHIBYTE(v15[-1].__on_zero_shared) < 0) {
          operator delete(v15[-1].~facet);
        }
        --v15;
      }
      while (v15 != v14);
      long long v16 = (void *)this[13].__shared_owners_;
    }
    this[14].__vftable = v14;
    operator delete(v16);
  }
  __int16 v17 = this[12].__vftable;
  if (v17)
  {
    uint64_t v18 = this[12].__shared_owners_;
    uint64_t v19 = this[12].__vftable;
    if ((std::locale::facet_vtbl *)v18 != v17)
    {
      do
      {
        if (*(char *)(v18 - 1) < 0) {
          operator delete(*(void **)(v18 - 24));
        }
        v18 -= 24;
      }
      while ((std::locale::facet_vtbl *)v18 != v17);
      uint64_t v19 = this[12].__vftable;
    }
    this[12].__shared_owners_ = (uint64_t)v17;
    operator delete(v19);
  }
  if (SHIBYTE(this[11].__shared_owners_) < 0)
  {
    operator delete((void *)this[10].__shared_owners_);
    if ((SHIBYTE(this[10].__vftable) & 0x80000000) == 0)
    {
LABEL_51:
      if ((SHIBYTE(this[8].__shared_owners_) & 0x80000000) == 0) {
        goto LABEL_52;
      }
      goto LABEL_61;
    }
  }
  else if ((SHIBYTE(this[10].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete(this[9].__vftable);
  if ((SHIBYTE(this[8].__shared_owners_) & 0x80000000) == 0)
  {
LABEL_52:
    if ((SHIBYTE(this[7].__vftable) & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_62;
  }
LABEL_61:
  operator delete((void *)this[7].__shared_owners_);
  if ((SHIBYTE(this[7].__vftable) & 0x80000000) == 0)
  {
LABEL_53:
    if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_63;
  }
LABEL_62:
  operator delete(this[6].__vftable);
  if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
  {
LABEL_54:
    if ((SHIBYTE(this[3].__shared_owners_) & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_64;
  }
LABEL_63:
  operator delete(this[4].__vftable);
  if ((SHIBYTE(this[3].__shared_owners_) & 0x80000000) == 0)
  {
LABEL_55:
    if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_65;
  }
LABEL_64:
  operator delete((void *)this[2].__shared_owners_);
  if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
  {
LABEL_56:
    uint64_t v20 = this;
    goto LABEL_58;
  }
LABEL_65:
  operator delete(this[1].__vftable);
  uint64_t v20 = this;

LABEL_58:
  std::locale::facet::~facet(v20);
}

uint64_t sub_100003F70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)a1 = off_100463C50;
  *(void *)(a1 + 8) = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)a2;
  uint64_t v7 = (uint64_t *)(a1 + 104);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 120) = a3;
  sub_100096240(a4, a1 + 128);
  *(_DWORD *)(a1 + 184) = sub_10009A018(a4);
  *(double *)(a1 + 192) = sub_100099FD8(a4);
  sub_10009A030(a4, a1 + 200);
  if (!*v7)
  {
    sub_1000AE4B0(__p, "");
    sub_10029A30C("In order to auto-multifloor/multibuilding between a set of locations, you must at least provide a non-empty set of locations", &buf);
    sub_10016A2C4((uint64_t)__p, (uint64_t)&buf, 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    sub_10014B3FC((uint64_t)&v12);
  }
  if (qword_10047BED8 == -1)
  {
    uint64_t v8 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100463CC0);
    uint64_t v8 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_5;
    }
  }
  uint64_t v9 = sub_1002A1224(*v7);
  LODWORD(buf.__r_.__value_.__l.__data_) = 134283521;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v9;
  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Auto switching between %{private}zu locations", (uint8_t *)&buf, 0xCu);
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_100463CC0);
    long long v10 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      return a1;
    }
    goto LABEL_6;
  }
LABEL_5:
  long long v10 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_6:
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = a3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CoarseIndoorSpec is %d", (uint8_t *)&buf, 8u);
  }
  return a1;
}

void sub_1000041F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_100062BB4(v22);
  sub_1000BA884(v21);
  sub_10029B9C4((void *)(v20 + 8));
  _Unwind_Resume(a1);
}

void sub_100004444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100004598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000045B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000045C8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char v4 = 10;
  strcpy((char *)__p, "privacy.db");
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1000559FC(a2, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  sub_1000512AC(a2, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100004668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if ((a15 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000046B4(uint64_t a1)
{
  uint64_t v2 = std::__thread_local_data();
  long long v3 = *(std::__thread_struct **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void (**)(void *, uint64_t *))(a1 + 8);
  uint64_t v6 = (void *)(*(void *)(a1 + 24) + (v4 >> 1));
  if (v4) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v6 + v5);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v5(v6, &v11);
  uint64_t v7 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (a1)
  {
    uint64_t v8 = *(std::__thread_struct **)a1;
    *(void *)a1 = 0;
    if (v8)
    {
      std::__thread_struct::~__thread_struct(v8);
      operator delete();
    }
    operator delete();
  }
  return 0;
}

void sub_1000047B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__thread_struct **a10, uint64_t a11, uint64_t a12, _Unwind_Exception *a13)
{
  if (a12)
  {
    sub_1003A5FCC(a12);
    char v14 = a13;
    sub_100248D00(&a10);
    _Unwind_Resume(v14);
  }
  sub_100248D00(&a10);
  _Unwind_Resume(a1);
}

void sub_1000047F8(uint64_t a1)
{
  *(void *)a1 = off_10045F4F0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

uint64_t sub_100004860(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)a1 + 112) & 0x10) != 0)
  {
    uint64_t v4 = (unsigned int *)(*(void *)a1 + 60);
    return *v4;
  }
  if (qword_10047BEE8 != -1)
  {
    dispatch_once(&qword_10047BEE8, &stru_10045FE70);
    uint64_t v2 = qword_10047BEF0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v2 = qword_10047BEF0;
  if (os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO))
  {
LABEL_4:
    int v3 = *(_DWORD *)(*(void *)a1 + 56);
    v6[0] = 67240192;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "No regional value specified for 'regionalPrefetchRadiusKM', using indoor value of %{public}u", (uint8_t *)v6, 8u);
  }
LABEL_5:
  uint64_t v4 = (unsigned int *)(*(void *)a1 + 56);
  return *v4;
}

void sub_100004AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100004B18(uint64_t a1, uint64_t a2)
{
  std::string __p = 0;
  uint64_t v27 = 0;
  v28 = 0;
  unint64_t v3 = *(void *)(a2 + 40);
  if (v3)
  {
    if (v3 >> 61) {
      sub_1000A9108();
    }
    uint64_t v4 = (char *)operator new(8 * v3);
    std::string __p = v4;
    uint64_t v27 = (uint64_t)v4;
    v28 = &v4[8 * v3];
    uint64_t v5 = *(void **)(a2 + 32);
    if (!v5) {
      goto LABEL_37;
    }
    while (1)
    {
LABEL_9:
      uint64_t v7 = v5 + 4;
      if (v4 < v28)
      {
        *(void *)uint64_t v4 = v7;
        uint64_t v6 = (uint64_t)(v4 + 8);
        goto LABEL_8;
      }
      uint64_t v8 = (char *)__p;
      int64_t v9 = v4 - (unsigned char *)__p;
      uint64_t v10 = (v4 - (unsigned char *)__p) >> 3;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        sub_1000A9108();
      }
      uint64_t v12 = v28 - (unsigned char *)__p;
      if ((v28 - (unsigned char *)__p) >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        if (v13 >> 61) {
          sub_1000A6A10();
        }
        char v14 = operator new(8 * v13);
        size_t v15 = &v14[8 * v10];
        *size_t v15 = v7;
        uint64_t v6 = (uint64_t)(v15 + 1);
        if (v4 == v8)
        {
LABEL_19:
          std::string __p = v15;
          v28 = &v14[8 * v13];
          if (!v4) {
            goto LABEL_8;
          }
LABEL_26:
          operator delete(v4);
          goto LABEL_8;
        }
      }
      else
      {
        char v14 = 0;
        size_t v15 = (void *)(8 * v10);
        *(void *)(8 * v10) = v7;
        uint64_t v6 = 8 * v10 + 8;
        if (v4 == v8) {
          goto LABEL_19;
        }
      }
      unint64_t v16 = v4 - 8 - v8;
      if (v16 < 0x168)
      {
        __int16 v17 = v4;
        goto LABEL_24;
      }
      if (&v14[v9 - 8 - (v16 & 0xFFFFFFFFFFFFFFF8)] > &v14[v9 - 8]) {
        break;
      }
      if (&v4[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8)
      {
        __int16 v17 = v4;
        goto LABEL_24;
      }
      if ((unint64_t)(v4 - &v14[v9]) < 0x20)
      {
        __int16 v17 = v4;
        goto LABEL_24;
      }
      uint64_t v19 = (v16 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      __int16 v17 = &v4[-v20];
      size_t v15 = (void *)((char *)v15 - v20);
      uint64_t v21 = &v14[8 * v10 - 16];
      uint64_t v22 = v4 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_24;
      }
LABEL_25:
      uint64_t v4 = (char *)__p;
      std::string __p = v15;
      v28 = &v14[8 * v13];
      if (v4) {
        goto LABEL_26;
      }
LABEL_8:
      uint64_t v27 = v6;
      uint64_t v5 = (void *)*v5;
      uint64_t v4 = (char *)v6;
      if (!v5) {
        goto LABEL_37;
      }
    }
    __int16 v17 = v4;
    do
    {
LABEL_24:
      uint64_t v18 = *((void *)v17 - 1);
      v17 -= 8;
      *--size_t v15 = v18;
    }
    while (v17 != v8);
    goto LABEL_25;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *(void **)(a2 + 32);
  if (v5) {
    goto LABEL_9;
  }
LABEL_37:
  (*(void (**)(void, void **))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), &__p);
  if (__p)
  {
    uint64_t v27 = (uint64_t)__p;
    operator delete(__p);
  }
}

void sub_100004DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100005024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100005060(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained onQueueNotifyDelegatePrefetchComplete];

  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
}

void sub_1000050B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000050C4(uint64_t a1)
{
  *(void *)a1 = off_100457EA8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_100005114(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_100005128(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained onQueueHandleScanTimer];
}

void sub_100005178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000052A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000052B0(uint64_t a1)
{
  *(void *)a1 = off_100454A50;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_100005300(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_1000054BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000054DC()
{
  return 6;
}

void *sub_100005564(void *a1)
{
  uint64_t v2 = (char *)operator new(0x88uLL);
  sub_10000A6DC((uint64_t)v2, "UI thread");
  *a1 = v2 + 24;
  a1[1] = v2;
  uint64_t v3 = (char *)operator new(0x88uLL);
  sub_100005CB0((uint64_t)v3, "MapState");
  a1[2] = v3 + 24;
  a1[3] = v3;
  uint64_t v4 = (char *)operator new(0x88uLL);
  sub_100005664((uint64_t)v4, "DataUploadDb");
  a1[4] = v4 + 24;
  a1[5] = v4;
  return a1;
}

void sub_1000055E8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  sub_1000BA884(v1 + 16);
  sub_1000BA884(v1);
  _Unwind_Resume(a1);
}

void sub_100005618(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  sub_1000BA884(v1);
  _Unwind_Resume(a1);
}

void sub_100005638(_Unwind_Exception *a1)
{
  sub_1000BA884(v1);
  _Unwind_Resume(a1);
}

void sub_10000564C(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100005664(uint64_t a1, char *__s)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_10046B600;
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    __dst = p_dst;
    unint64_t v11 = v8 | 0x8000000000000000;
    goto LABEL_8;
  }
  HIBYTE(v11) = v4;
  p_dst = (void **)&__dst;
  if (v4) {
LABEL_8:
  }
    memcpy(p_dst, __s, v5);
  *((unsigned char *)p_dst + v5) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1003FE950;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 850045863;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  if (SHIBYTE(v11) < 0) {
    operator delete(__dst);
  }
  return a1;
}

void sub_10000578C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *sub_1000057A0(void *a1)
{
  *a1 = off_10045CE38;
  a1[52] = off_10045CE60;
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

void sub_100005870(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (objc_opt_respondsToSelector()) {
    [*(id *)(v2 + 48) wifiScanInitiated:*(unsigned int *)(v2 + 56)];
  }
  std::promise<void>::set_value((std::promise<void> *)(*(void *)(*(void *)(a1 + 40) + 8) + 48));
}

void sub_1000058D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __cxa_begin_catch(a1);
  size_t v15 = (std::promise<void> *)(*(void *)(*(void *)(v14 + 40) + 8) + 48);
  std::current_exception();
  v16.__ptr_ = v17;
  std::promise<void>::set_exception(v15, v16);
  std::exception_ptr::~exception_ptr(v17);
  __cxa_end_catch();
}

void sub_100005910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

id sub_10000592C(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  id result = *(id *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_100005C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100005CB0(uint64_t a1, char *__s)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_10046B600;
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    __dst = p_dst;
    unint64_t v11 = v8 | 0x8000000000000000;
    goto LABEL_8;
  }
  HIBYTE(v11) = v4;
  p_dst = (void **)&__dst;
  if (v4) {
LABEL_8:
  }
    memcpy(p_dst, __s, v5);
  *((unsigned char *)p_dst + v5) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1003FE950;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 850045863;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  if (SHIBYTE(v11) < 0) {
    operator delete(__dst);
  }
  return a1;
}

void sub_100005DD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100005DEC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
}

id sub_100005E30(void *a1, uint64_t a2)
{
  a1[4] = *(id *)(a2 + 32);
  a1[5] = *(id *)(a2 + 40);
  id result = *(id *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  a1[6] = result;
  a1[7] = v5;
  return result;
}

void sub_100005E7C(uint64_t a1)
{
  *(void *)a1 = off_100457F58;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

id sub_100005EE4(void *a1, id *a2)
{
  a1[4] = a2[4];
  a1[5] = a2[5];
  id result = objc_retainBlock(a2[6]);
  a1[6] = result;
  return result;
}

void sub_100005F2C(uint64_t a1)
{
  *(void *)a1 = off_10045E730;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100005FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100005FF0(uint64_t a1)
{
  *(void *)a1 = off_10045F700;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100006058(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  size_t v4 = a2;
  int v6 = *((_DWORD *)this + 19);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_15:
    unint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 12);
    *(unsigned char *)size_t v4 = 16;
    unint64_t v14 = (unint64_t)v4 + 1;
    if ((v13 & 0x80000000) != 0)
    {
      size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v13, v14, a3);
      int v7 = *((_DWORD *)this + 19);
      if ((v7 & 4) != 0) {
        goto LABEL_22;
      }
    }
    else if (v13 > 0x7F)
    {
      size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v13, v14, a3);
      int v7 = *((_DWORD *)this + 19);
      if ((v7 & 4) != 0) {
        goto LABEL_22;
      }
    }
    else
    {
      *((unsigned char *)v4 + 1) = (_BYTE)v13;
      size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
      int v7 = *((_DWORD *)this + 19);
      if ((v7 & 4) != 0) {
        goto LABEL_22;
      }
    }
LABEL_4:
    if ((v7 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 2);
  if (v8)
  {
    *(unsigned char *)a2 = 10;
    unsigned int v9 = a2 + 1;
    uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8[12];
    if (v10 <= 0x7F) {
      goto LABEL_11;
    }
LABEL_14:
    uint64_t v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v10, v9, a3);
    size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_1000035A8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v8, v11, v12);
    if ((*((_DWORD *)this + 19) & 2) != 0) {
      goto LABEL_15;
    }
    goto LABEL_3;
  }
  uint64_t v8 = *(unsigned int **)(qword_10047EB20 + 16);
  *(unsigned char *)a2 = 10;
  unsigned int v9 = a2 + 1;
  uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8[12];
  if (v10 > 0x7F) {
    goto LABEL_14;
  }
LABEL_11:
  *((unsigned char *)v4 + 1) = (_BYTE)v10;
  size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_1000035A8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v8, (uint64_t)v4 + 2, a3);
  if ((*((_DWORD *)this + 19) & 2) != 0) {
    goto LABEL_15;
  }
LABEL_3:
  int v7 = *((_DWORD *)this + 19);
  if ((v7 & 4) == 0) {
    goto LABEL_4;
  }
LABEL_22:
  uint64_t v15 = *((void *)this + 3);
  *(unsigned char *)size_t v4 = 26;
  if (*(char *)(v15 + 23) < 0)
  {
    std::exception_ptr v16 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v15 + 8);
    if (v16 <= 0x7F) {
      goto LABEL_24;
    }
  }
  else
  {
    std::exception_ptr v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v15 + 23);
    if (*(unsigned __int8 *)(v15 + 23) <= 0x7Fu)
    {
LABEL_24:
      *((unsigned char *)v4 + 1) = (_BYTE)v16;
      int v17 = v4 + 2;
      goto LABEL_27;
    }
  }
  int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v16, (int)v4 + 1, a3);
LABEL_27:
  int v18 = *(char *)(v15 + 23);
  if (v18 >= 0) {
    uint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15;
  }
  else {
    uint64_t v19 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)v15;
  }
  if (v18 >= 0) {
    uint64_t v20 = (const void *)*(unsigned __int8 *)(v15 + 23);
  }
  else {
    uint64_t v20 = (const void *)*(unsigned int *)(v15 + 8);
  }
  size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRawToArray(v19, v20, v17, a4);
  int v7 = *((_DWORD *)this + 19);
  if ((v7 & 8) == 0)
  {
LABEL_5:
    if ((v7 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_34:
  uint64_t v21 = *((void *)this + 4);
  *(unsigned char *)size_t v4 = 34;
  if (*(char *)(v21 + 23) < 0)
  {
    uint64_t v22 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v21 + 8);
    if (v22 <= 0x7F) {
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v21 + 23);
    if (*(unsigned __int8 *)(v21 + 23) <= 0x7Fu)
    {
LABEL_36:
      *((unsigned char *)v4 + 1) = (_BYTE)v22;
      int v23 = v4 + 2;
      goto LABEL_39;
    }
  }
  int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v22, (int)v4 + 1, a3);
LABEL_39:
  int v24 = *(char *)(v21 + 23);
  if (v24 >= 0) {
    char v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v21;
  }
  else {
    char v25 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)v21;
  }
  if (v24 >= 0) {
    uint64_t v26 = (const void *)*(unsigned __int8 *)(v21 + 23);
  }
  else {
    uint64_t v26 = (const void *)*(unsigned int *)(v21 + 8);
  }
  size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRawToArray(v25, v26, v23, a4);
  int v7 = *((_DWORD *)this + 19);
  if ((v7 & 0x10) == 0)
  {
LABEL_6:
    if ((v7 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_58;
  }
LABEL_46:
  uint64_t v27 = *((void *)this + 5);
  *(unsigned char *)size_t v4 = 42;
  if (*(char *)(v27 + 23) < 0)
  {
    v28 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v27 + 8);
    if (v28 <= 0x7F) {
      goto LABEL_48;
    }
  }
  else
  {
    v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v27 + 23);
    if (*(unsigned __int8 *)(v27 + 23) <= 0x7Fu)
    {
LABEL_48:
      *((unsigned char *)v4 + 1) = (_BYTE)v28;
      int v29 = v4 + 2;
      goto LABEL_51;
    }
  }
  int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v28, (int)v4 + 1, a3);
LABEL_51:
  int v30 = *(char *)(v27 + 23);
  if (v30 >= 0) {
    v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v27;
  }
  else {
    v31 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)v27;
  }
  if (v30 >= 0) {
    v32 = (const void *)*(unsigned __int8 *)(v27 + 23);
  }
  else {
    v32 = (const void *)*(unsigned int *)(v27 + 8);
  }
  size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRawToArray(v31, v32, v29, a4);
  int v7 = *((_DWORD *)this + 19);
  if ((v7 & 0x20) == 0)
  {
LABEL_7:
    if ((v7 & 0x40) == 0) {
      goto LABEL_85;
    }
    goto LABEL_70;
  }
LABEL_58:
  uint64_t v33 = *((void *)this + 7);
  *(unsigned char *)size_t v4 = 50;
  if (*(char *)(v33 + 23) < 0)
  {
    v34 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v33 + 8);
    if (v34 <= 0x7F) {
      goto LABEL_60;
    }
  }
  else
  {
    v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v33 + 23);
    if (*(unsigned __int8 *)(v33 + 23) <= 0x7Fu)
    {
LABEL_60:
      *((unsigned char *)v4 + 1) = (_BYTE)v34;
      int v35 = v4 + 2;
      goto LABEL_63;
    }
  }
  int v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v34, (int)v4 + 1, a3);
LABEL_63:
  int v36 = *(char *)(v33 + 23);
  if (v36 >= 0) {
    v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v33;
  }
  else {
    v37 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)v33;
  }
  if (v36 >= 0) {
    v38 = (const void *)*(unsigned __int8 *)(v33 + 23);
  }
  else {
    v38 = (const void *)*(unsigned int *)(v33 + 8);
  }
  size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRawToArray(v37, v38, v35, a4);
  if ((*((_DWORD *)this + 19) & 0x40) == 0) {
    goto LABEL_85;
  }
LABEL_70:
  uint64_t v39 = *((void *)this + 8);
  if (v39)
  {
    *(unsigned char *)size_t v4 = 58;
    unsigned int v40 = v4 + 1;
    v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v39 + 24);
    if (v41 <= 0x7F) {
      goto LABEL_72;
    }
  }
  else
  {
    uint64_t v39 = *(void *)(qword_10047EB20 + 64);
    *(unsigned char *)size_t v4 = 58;
    unsigned int v40 = v4 + 1;
    v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v39 + 24);
    if (v41 <= 0x7F)
    {
LABEL_72:
      *((unsigned char *)v4 + 1) = (_BYTE)v41;
      size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
      if ((*(unsigned char *)(v39 + 28) & 1) == 0) {
        goto LABEL_82;
      }
LABEL_76:
      v42 = *(unsigned int **)(v39 + 16);
      if (v42)
      {
        *(unsigned char *)size_t v4 = 10;
        unsigned int v43 = v4 + 1;
        v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v42[9];
        if (v44 <= 0x7F)
        {
LABEL_78:
          *((unsigned char *)v4 + 1) = (_BYTE)v44;
          v45 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
LABEL_81:
          size_t v4 = sub_10009B7F4((wireless_diagnostics::google::protobuf::internal::WireFormat *)v42, v45, a3);
          goto LABEL_82;
        }
      }
      else
      {
        v42 = *(unsigned int **)(qword_10047EB18 + 16);
        *(unsigned char *)size_t v4 = 10;
        unsigned int v43 = v4 + 1;
        v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v42[9];
        if (v44 <= 0x7F) {
          goto LABEL_78;
        }
      }
      v45 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v44, v43, a3);
      goto LABEL_81;
    }
  }
  size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v41, v40, a3);
  if (*(unsigned char *)(v39 + 28)) {
    goto LABEL_76;
  }
LABEL_82:
  v48 = *(void **)(v39 + 8);
  v47 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v39 + 8);
  v46 = v48;
  if (v48 && *v46 != v46[1]) {
    size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v47, v4, a3);
  }
LABEL_85:
  if ((*((unsigned char *)this + 76) & 0x80) == 0) {
    goto LABEL_89;
  }
  v49 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 13);
  *(unsigned char *)size_t v4 = 64;
  unint64_t v50 = (unint64_t)v4 + 1;
  if ((v49 & 0x80000000) != 0)
  {
    size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v49, v50, a3);
    v54 = (void *)*((void *)this + 1);
    v52 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v51 = v54;
    if (!v54) {
      return v4;
    }
    goto LABEL_94;
  }
  if (v49 <= 0x7F)
  {
    *((unsigned char *)v4 + 1) = (_BYTE)v49;
    size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
LABEL_89:
    v53 = (void *)*((void *)this + 1);
    v52 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v51 = v53;
    if (!v53) {
      return v4;
    }
    goto LABEL_94;
  }
  size_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v49, v50, a3);
  v55 = (void *)*((void *)this + 1);
  v52 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  v51 = v55;
  if (!v55) {
    return v4;
  }
LABEL_94:
  if (*v51 == v51[1]) {
    return v4;
  }

  return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v52, v4, a3);
}

void sub_1000064C4(void *a1)
{
  *a1 = off_10045F910;
  if ((void *)qword_10047F0E0 != a1)
  {
    uint64_t v2 = a1[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_10000656C(uint64_t a1)
{
  *(void *)a1 = off_10045E940;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_1000065D4(uint64_t a1, uint64_t a2)
{
  size_t v4 = (std::mutex *)(a1 + 1856);
  std::mutex::lock((std::mutex *)(a1 + 1856));
  uint64_t v5 = *(char **)(a1 + 1928);
  int v6 = v5;
  unint64_t v7 = *(void *)(a1 + 1936);
  if ((unint64_t)v5 < v7)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v8 = (uint64_t)(v5 + 8);
    goto LABEL_14;
  }
  unsigned int v9 = *(char **)(a1 + 1920);
  uint64_t v10 = (v5 - v9) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    sub_1000A9108();
  }
  uint64_t v12 = v7 - (void)v9;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      sub_1000A6A10();
    }
    unint64_t v14 = (char *)operator new(8 * v13);
    uint64_t v15 = &v14[8 * v10];
    std::exception_ptr v16 = &v14[8 * v13];
    *(void *)uint64_t v15 = a2;
    uint64_t v8 = (uint64_t)(v15 + 8);
    int v17 = (char *)(v5 - v9);
    if (v5 == v9)
    {
LABEL_12:
      *(void *)(a1 + 1920) = v15;
      *(void *)(a1 + 1928) = v8;
      *(void *)(a1 + 1936) = v16;
      if (!v5) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t v15 = (char *)(8 * v10);
    std::exception_ptr v16 = 0;
    *(void *)(8 * v10) = a2;
    uint64_t v8 = 8 * v10 + 8;
    int v17 = (char *)(v5 - v9);
    if (v5 == v9) {
      goto LABEL_12;
    }
  }
  unint64_t v18 = (unint64_t)(v17 - 8);
  if (v18 < 0x58) {
    goto LABEL_30;
  }
  if ((unint64_t)(v9 - v14) < 0x20) {
    goto LABEL_30;
  }
  uint64_t v19 = (v18 >> 3) + 1;
  uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  int v6 = &v5[-v20];
  v15 -= v20;
  uint64_t v21 = &v14[8 * v10 - 16];
  uint64_t v22 = (long long *)(v5 - 16);
  uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *v22;
    *((_OWORD *)v21 - 1) = *(v22 - 1);
    *(_OWORD *)uint64_t v21 = v24;
    v21 -= 32;
    v22 -= 2;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_30:
    do
    {
      uint64_t v25 = *((void *)v6 - 1);
      v6 -= 8;
      *((void *)v15 - 1) = v25;
      v15 -= 8;
    }
    while (v6 != v9);
  }
  int v6 = *(char **)(a1 + 1920);
  *(void *)(a1 + 1920) = v15;
  *(void *)(a1 + 1928) = v8;
  *(void *)(a1 + 1936) = v16;
  if (v6) {
LABEL_13:
  }
    operator delete(v6);
LABEL_14:
  *(void *)(a1 + 1928) = v8;
  std::mutex::unlock(v4);
}

void sub_100006798(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000067AC(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v6.__r_.__value_.__r.__words[1] = xmmword_1003E7210;
  strcpy(v6.__r_.__value_.__l.__data_, "com.apple.purpleslam.cpq.");
  uint64_t v2 = std::string::append(&v6, (const std::string::value_type *)((unint64_t)"19LocalizerInputEvent" & 0x7FFFFFFFFFFFFFFFLL));
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v8 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v8 >= 0) {
    size_t v4 = (char *)__p;
  }
  else {
    size_t v4 = (char *)__p[0];
  }
  sub_1000099BC((dispatch_queue_t *)(a1 + 32), v4);
  if (SHIBYTE(v8) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  return a1;
}

void sub_100006898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1000D8DD8(v15);
    _Unwind_Resume(a1);
  }
  sub_1000D8DD8(v15);
  _Unwind_Resume(a1);
}

void sub_1000068D0(uint64_t a1)
{
  *(void *)a1 = off_10045E680;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100006938(void *a1)
{
  *a1 = off_100456B20;
  if ((void *)qword_10047EA40 != a1)
  {
    uint64_t v2 = a1[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = a1[3];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = a1[4];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100006B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100007074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100007528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_10000756C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000559FC(__dst, *(void **)a3, *(void *)(a3 + 8));
    if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a3;
    uint64_t v9 = *(void *)(a3 + 16);
    if ((*(char *)(a4 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v7 = *(void *)(a4 + 16);
      goto LABEL_6;
    }
  }
  sub_1000559FC(__p, *(void **)a4, *(void *)(a4 + 8));
LABEL_6:
  sub_1000A1DBC(a2, (long long *)__dst, (long long *)__p);
  if ((SHIBYTE(v7) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v9) & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(__dst[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v9) < 0) {
    goto LABEL_10;
  }
}

void sub_100007634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100007680(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 8) = a2;
  if (qword_10047BED8 == -1)
  {
    uint64_t v2 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100462700);
    uint64_t v2 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_4:
      *(void *)std::string buf = sub_1000A2F70;
      uint64_t v4 = 0;
      sub_10000BD7C();
    }
  }
  *(_WORD *)std::string buf = 0;
  _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Starting localizer thread", buf, 2u);
  goto LABEL_4;
}

void sub_10000782C(void *a1)
{
  *a1 = off_1004580B8;
  uint64_t v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_1000123D4(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100007930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100007944(uint64_t a1)
{
  sub_100056B28((const char *)a1, 0, &v17);
  if (v17 != 3)
  {
    if (qword_10047BF08 == -1)
    {
      uint64_t v10 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
        goto LABEL_14;
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_100460658);
      uint64_t v10 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
        goto LABEL_14;
      }
    }
    LOWORD(v17) = 0;
    std::string v6 = "dbVersionMismatchWithExpected: directory is missing - no need to remove";
    uint64_t v7 = v10;
    os_log_type_t v8 = OS_LOG_TYPE_INFO;
LABEL_12:
    uint32_t v9 = 2;
    goto LABEL_13;
  }
  unint64_t v2 = sub_100012F80(a1);
  if (v2 == 2)
  {
    if (qword_10047BF08 == -1)
    {
      uint64_t v12 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
      {
LABEL_19:
        if (!sub_1001F57B8(a1)) {
          goto LABEL_14;
        }
        if (qword_10047BF08 == -1)
        {
          uint64_t v13 = qword_10047BF10;
          if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_FAULT)) {
            goto LABEL_14;
          }
        }
        else
        {
          dispatch_once(&qword_10047BF08, &stru_100460658);
          uint64_t v13 = qword_10047BF10;
          if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_FAULT)) {
            goto LABEL_14;
          }
        }
        LOWORD(v17) = 0;
        std::string v6 = "dbVersionMismatchWithExpected: #warning, user_version==0, but tables exist";
        uint64_t v7 = v13;
        os_log_type_t v8 = OS_LOG_TYPE_FAULT;
        goto LABEL_12;
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_100460658);
      uint64_t v12 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_19;
      }
    }
    LOWORD(v17) = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#warning, dbVersionMismatchWithExpected: On-disk db has user_version == 0.", (uint8_t *)&v17, 2u);
    goto LABEL_19;
  }
  if (v2 == 1)
  {
    if (qword_10047BF08 == -1)
    {
      uint64_t v14 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
        goto LABEL_14;
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_100460658);
      uint64_t v14 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
        goto LABEL_14;
      }
    }
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v15 = a1;
    }
    else {
      uint64_t v15 = *(void *)a1;
    }
    int v17 = 136315138;
    v18[0] = v15;
    std::string v6 = "dbVersionMismatchWithExpected: No on-disk db in %s";
    uint64_t v7 = v14;
    os_log_type_t v8 = OS_LOG_TYPE_INFO;
    uint32_t v9 = 12;
    goto LABEL_13;
  }
  if (!(_BYTE)v2)
  {
    unint64_t v4 = HIDWORD(v2);
    if (HIDWORD(v2) == 17)
    {
      if (qword_10047BF08 != -1)
      {
        dispatch_once(&qword_10047BF08, &stru_100460658);
        uint64_t v5 = qword_10047BF10;
        if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
          goto LABEL_14;
        }
        goto LABEL_8;
      }
      uint64_t v5 = qword_10047BF10;
      if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO))
      {
LABEL_8:
        int v17 = 67240192;
        LODWORD(v18[0]) = 17;
        std::string v6 = "dbVersionMismatchWithExpected: On-disk db in is correct version, %{public}d";
        uint64_t v7 = v5;
        os_log_type_t v8 = OS_LOG_TYPE_INFO;
        uint32_t v9 = 8;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, (uint8_t *)&v17, v9);
      }
LABEL_14:
      char v3 = 0;
      return v3 & 1;
    }
    if (qword_10047BF08 == -1)
    {
      std::exception_ptr v16 = qword_10047BF10;
      if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT))
      {
LABEL_31:
        int v17 = 67240448;
        LODWORD(v18[0]) = v4;
        WORD2(v18[0]) = 1026;
        *(_DWORD *)((char *)v18 + 6) = 17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "dbVersionMismatchWithExpected: current user_version, %{public}d, expected, %{public}d", (uint8_t *)&v17, 0xEu);
        char v3 = 1;
        return v3 & 1;
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_100460658);
      std::exception_ptr v16 = qword_10047BF10;
      if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_31;
      }
    }
    char v3 = 1;
  }
  return v3 & 1;
}

void sub_100007D34(uint64_t a1)
{
  *(void *)a1 = off_10045F860;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

id sub_100007D9C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  unint64_t v2 = [*(id *)(a1 + 24) path];
  char v3 = [v1 URLByAppendingPathComponent:v2];

  return v3;
}

void sub_100007DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100007E04(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained onQueueTick];
}

void sub_100007E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100008010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000080CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000080DC(void *a1, uint64_t a2)
{
  *a1 = off_100460330;
  a1[1] = off_1004603C8;
  sub_1000067AC((uint64_t)(a1 + 2));
  a1[7] = a2;
  operator new();
}

void sub_1000081CC()
{
}

void sub_100008270(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (std::mutex *)(a1 + 96);
  std::mutex::lock((std::mutex *)(a1 + 96));
  std::string v6 = *(char **)(a1 + 168);
  unint64_t v5 = *(void *)(a1 + 176);
  uint64_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(void *)std::string v6 = a2;
    uint64_t v8 = (uint64_t)(v6 + 8);
    goto LABEL_14;
  }
  uint32_t v9 = *(char **)(a1 + 160);
  uint64_t v10 = (v6 - v9) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    sub_1000A9108();
  }
  uint64_t v12 = v5 - (void)v9;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      sub_1000A6A10();
    }
    uint64_t v14 = (char *)operator new(8 * v13);
    uint64_t v15 = &v14[8 * v10];
    std::exception_ptr v16 = &v14[8 * v13];
    *(void *)uint64_t v15 = a2;
    uint64_t v8 = (uint64_t)(v15 + 8);
    int v17 = (char *)(v6 - v9);
    if (v6 == v9)
    {
LABEL_12:
      *(void *)(a1 + 160) = v15;
      *(void *)(a1 + 168) = v8;
      *(void *)(a1 + 176) = v16;
      if (!v6) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = (char *)(8 * v10);
    std::exception_ptr v16 = 0;
    *(void *)(8 * v10) = a2;
    uint64_t v8 = 8 * v10 + 8;
    int v17 = (char *)(v6 - v9);
    if (v6 == v9) {
      goto LABEL_12;
    }
  }
  unint64_t v18 = (unint64_t)(v17 - 8);
  if (v18 < 0x58) {
    goto LABEL_30;
  }
  if ((unint64_t)(v9 - v14) < 0x20) {
    goto LABEL_30;
  }
  uint64_t v19 = (v18 >> 3) + 1;
  uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v7 = &v6[-v20];
  v15 -= v20;
  uint64_t v21 = &v14[8 * v10 - 16];
  uint64_t v22 = (long long *)(v6 - 16);
  uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *v22;
    *((_OWORD *)v21 - 1) = *(v22 - 1);
    *(_OWORD *)uint64_t v21 = v24;
    v21 -= 32;
    v22 -= 2;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_30:
    do
    {
      uint64_t v25 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v25;
      v15 -= 8;
    }
    while (v7 != v9);
  }
  uint64_t v7 = *(char **)(a1 + 160);
  *(void *)(a1 + 160) = v15;
  *(void *)(a1 + 168) = v8;
  *(void *)(a1 + 176) = v16;
  if (v7) {
LABEL_13:
  }
    operator delete(v7);
LABEL_14:
  *(void *)(a1 + 168) = v8;
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 64) + 272))(*(void *)(a1 + 64), a2);

  std::mutex::unlock(v4);
}

void sub_10000845C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100008470(int a1@<W0>, uint64_t *a2@<X8>)
{
  switch(a1)
  {
    case 0:
      char v3 = (std::__shared_weak_count *)operator new(0x28uLL);
      v3->__shared_weak_owners_ = 0;
      v3->__shared_owners_ = 0;
      p_shared_owners = &v3->__shared_owners_;
      v3->__vftable = (std::__shared_weak_count_vtbl *)off_1004651A8;
      unint64_t v5 = v3 + 1;
      LODWORD(v3[1].__shared_owners_) = 0;
      std::string v6 = off_1004651F8;
      goto LABEL_5;
    case 1:
    case 3:
      __cxa_allocate_exception(0x40uLL);
      sub_1000AE4B0(&v9, "Localizer type not ported");
      std::runtime_error::runtime_error(&v15, &v9);
      v15.__vftable = (std::runtime_error_vtbl *)&off_100464360;
      sub_10018E868((uint64_t)v14);
      sub_1002A5E28(&v15, (uint64_t)"static shared_ptr<LocalizerSpec> LocalizerSpec::forLocalizerType(LocalizerType)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_spec.cpp", 35, (uint64_t)v14);
    case 2:
    case 10:
      __cxa_allocate_exception(0x40uLL);
      sub_1000AE4B0(&v9, "Localizer type deleted to simplify life.");
      std::runtime_error::runtime_error(&v15, &v9);
      v15.__vftable = (std::runtime_error_vtbl *)&off_100464360;
      sub_10018E868((uint64_t)v13);
      sub_1002A5E28(&v15, (uint64_t)"static shared_ptr<LocalizerSpec> LocalizerSpec::forLocalizerType(LocalizerType)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_spec.cpp", 42, (uint64_t)v13);
    case 4:
    case 5:
    case 7:
      __cxa_allocate_exception(0x40uLL);
      sub_1000AE4B0(&v9, "Localizer type not ported");
      std::runtime_error::runtime_error(&v15, &v9);
      v15.__vftable = (std::runtime_error_vtbl *)&off_100464360;
      sub_10018E868((uint64_t)v12);
      sub_1002A5E28(&v15, (uint64_t)"static shared_ptr<LocalizerSpec> LocalizerSpec::forLocalizerType(LocalizerType)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_spec.cpp", 50, (uint64_t)v12);
    case 6:
      char v3 = (std::__shared_weak_count *)operator new(0x28uLL);
      v3->__shared_weak_owners_ = 0;
      v3->__shared_owners_ = 0;
      p_shared_owners = &v3->__shared_owners_;
      v3->__vftable = (std::__shared_weak_count_vtbl *)off_1004652C0;
      unint64_t v5 = v3 + 1;
      LODWORD(v3[1].__shared_owners_) = 6;
      std::string v6 = off_100458938;
      goto LABEL_5;
    case 8:
      char v3 = (std::__shared_weak_count *)operator new(0x38uLL);
      v3->__shared_owners_ = 0;
      v3->__vftable = (std::__shared_weak_count_vtbl *)off_100465310;
      LODWORD(v3[1].__shared_owners_) = 8;
      v3->__shared_weak_owners_ = 0;
      v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_100465360;
      LODWORD(v3[2].__vftable) = 6;
      v3[1].__shared_weak_owners_ = (uint64_t)off_100458938;
      *a2 = (uint64_t)&v3[1];
      a2[1] = (uint64_t)v3;
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_14;
      }
      return;
    case 9:
      char v3 = (std::__shared_weak_count *)operator new(0x28uLL);
      v3->__shared_weak_owners_ = 0;
      v3->__shared_owners_ = 0;
      p_shared_owners = &v3->__shared_owners_;
      v3->__vftable = (std::__shared_weak_count_vtbl *)off_1004653E0;
      unint64_t v5 = v3 + 1;
      LODWORD(v3[1].__shared_owners_) = 9;
      std::string v6 = off_100465430;
LABEL_5:
      v3[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
      *a2 = (uint64_t)v5;
      a2[1] = (uint64_t)v3;
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_14:
        uint64_t v7 = v3;
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v7);
      }
      break;
    case 11:
    case 12:
      __cxa_allocate_exception(0x40uLL);
      sub_1000AE4B0(&v9, "Localizer type not ported");
      std::runtime_error::runtime_error(&v15, &v9);
      v15.__vftable = (std::runtime_error_vtbl *)&off_100464360;
      sub_10018E868((uint64_t)v10);
      sub_1002A5E28(&v15, (uint64_t)"static shared_ptr<LocalizerSpec> LocalizerSpec::forLocalizerType(LocalizerType)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_spec.cpp", 64, (uint64_t)v10);
    case 13:
      sub_10014907C(a2);
      break;
    case 14:
      __cxa_allocate_exception(0x40uLL);
      sub_1000AE4B0(&v9, "make_shared<specs::MultiphonePdrNoMag>()");
      std::runtime_error::runtime_error(&v15, &v9);
      v15.__vftable = (std::runtime_error_vtbl *)&off_100464360;
      sub_10018E868((uint64_t)v11);
      sub_1002A5E28(&v15, (uint64_t)"static shared_ptr<LocalizerSpec> LocalizerSpec::forLocalizerType(LocalizerType)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_spec.cpp", 56, (uint64_t)v11);
    case 15:
      sub_10014EC64(a2);
      break;
    default:
      __cxa_allocate_exception(0x40uLL);
      std::logic_error::logic_error((std::logic_error *)&v15, "Unrecognized localizer type");
      sub_10018E868((uint64_t)v8);
      sub_1000D8F04((std::logic_error *)&v15, (uint64_t)"static shared_ptr<LocalizerSpec> LocalizerSpec::forLocalizerType(LocalizerType)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_spec.cpp", 77, (uint64_t)v8);
  }
}

void sub_100008AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, std::invalid_argument a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v28 - 48));
  if (a18 < 0) {
    operator delete(a14.__vftable);
  }
  _Unwind_Resume(a1);
}

void sub_100008C18(uint64_t a1, long long *a2)
{
  *(void *)a1 = off_100463268;
  long long v3 = *a2;
  long long v4 = a2[1];
  *(void *)(a1 + 40) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 8) = v3;
  unint64_t v5 = operator new(0x3C8uLL);
  v5[1] = 0;
  v5[2] = 0;
  *unint64_t v5 = off_1004633C8;
  *(void *)(a1 + 48) = sub_1000A2478(v5 + 3);
  *(void *)(a1 + 56) = v5;
  operator new();
}

void sub_100008D64()
{
}

void sub_100008DEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_100008E04(uint64_t a1)
{
  *(void *)a1 = off_100457098;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_100008E58(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_100008E6C(uint64_t a1)
{
  *(void *)a1 = off_10045F5A0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100008ED4(uint64_t a1, uint64_t a2)
{
  long long v4 = (std::mutex *)(a1 + 7864);
  std::mutex::lock((std::mutex *)(a1 + 7864));
  unint64_t v5 = *(char **)(a1 + 7936);
  std::string v6 = v5;
  unint64_t v7 = *(void *)(a1 + 7944);
  if ((unint64_t)v5 < v7)
  {
    *(void *)unint64_t v5 = a2;
    uint64_t v8 = (uint64_t)(v5 + 8);
    goto LABEL_14;
  }
  std::string v9 = *(char **)(a1 + 7928);
  uint64_t v10 = (v5 - v9) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    sub_1000A9108();
  }
  uint64_t v12 = v7 - (void)v9;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      sub_1000A6A10();
    }
    uint64_t v14 = (char *)operator new(8 * v13);
    std::runtime_error v15 = &v14[8 * v10];
    std::exception_ptr v16 = &v14[8 * v13];
    *(void *)std::runtime_error v15 = a2;
    uint64_t v8 = (uint64_t)(v15 + 8);
    int v17 = (char *)(v5 - v9);
    if (v5 == v9)
    {
LABEL_12:
      *(void *)(a1 + 7928) = v15;
      *(void *)(a1 + 7936) = v8;
      *(void *)(a1 + 7944) = v16;
      if (!v5) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v14 = 0;
    std::runtime_error v15 = (char *)(8 * v10);
    std::exception_ptr v16 = 0;
    *(void *)(8 * v10) = a2;
    uint64_t v8 = 8 * v10 + 8;
    int v17 = (char *)(v5 - v9);
    if (v5 == v9) {
      goto LABEL_12;
    }
  }
  unint64_t v18 = (unint64_t)(v17 - 8);
  if (v18 < 0x58) {
    goto LABEL_30;
  }
  if ((unint64_t)(v9 - v14) < 0x20) {
    goto LABEL_30;
  }
  uint64_t v19 = (v18 >> 3) + 1;
  uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  std::string v6 = &v5[-v20];
  v15 -= v20;
  uint64_t v21 = &v14[8 * v10 - 16];
  uint64_t v22 = (long long *)(v5 - 16);
  uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *v22;
    *((_OWORD *)v21 - 1) = *(v22 - 1);
    *(_OWORD *)uint64_t v21 = v24;
    v21 -= 32;
    v22 -= 2;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_30:
    do
    {
      uint64_t v25 = *((void *)v6 - 1);
      v6 -= 8;
      *((void *)v15 - 1) = v25;
      v15 -= 8;
    }
    while (v6 != v9);
  }
  std::string v6 = *(char **)(a1 + 7928);
  *(void *)(a1 + 7928) = v15;
  *(void *)(a1 + 7936) = v8;
  *(void *)(a1 + 7944) = v16;
  if (v6) {
LABEL_13:
  }
    operator delete(v6);
LABEL_14:
  *(void *)(a1 + 7936) = v8;

  std::mutex::unlock(v4);
}

void sub_1000090A0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100009190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000091A4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }
  int v4 = *(_DWORD *)(a2 + 48);
  if (v4)
  {
    int v5 = *(_DWORD *)(a1 + 48);
    int v6 = *(_DWORD *)(a1 + 52);
    int v7 = v5 + v4;
    if (v6 < v7)
    {
      int v8 = 2 * v6;
      if (2 * v6 <= v7) {
        int v8 = v7;
      }
      if (v8 <= 4) {
        int v8 = 4;
      }
      *(_DWORD *)(a1 + 52) = v8;
      operator new[]();
    }
    memcpy((void *)(*(void *)(a1 + 40) + 4 * v5), *(const void **)(a2 + 40), 4 * *(int *)(a2 + 48));
    *(_DWORD *)(a1 + 48) += *(_DWORD *)(a2 + 48);
  }
  int v9 = *(_DWORD *)(a2 + 76);
  if (!(_BYTE)v9) {
    goto LABEL_20;
  }
  if (v9)
  {
    int v13 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 76) |= 1u;
    *(_DWORD *)(a1 + 16) = v13;
    int v9 = *(_DWORD *)(a2 + 76);
    if ((v9 & 2) == 0)
    {
LABEL_14:
      if ((v9 & 4) == 0) {
        goto LABEL_15;
      }
      goto LABEL_28;
    }
  }
  else if ((v9 & 2) == 0)
  {
    goto LABEL_14;
  }
  int v14 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 76) |= 2u;
  *(_DWORD *)(a1 + 20) = v14;
  int v9 = *(_DWORD *)(a2 + 76);
  if ((v9 & 4) == 0)
  {
LABEL_15:
    if ((v9 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v15 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 76) |= 4u;
  *(_DWORD *)(a1 + 24) = v15;
  int v9 = *(_DWORD *)(a2 + 76);
  if ((v9 & 8) == 0)
  {
LABEL_16:
    if ((v9 & 0x10) == 0) {
      goto LABEL_17;
    }
LABEL_30:
    int v17 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 76) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v17;
    int v9 = *(_DWORD *)(a2 + 76);
    if ((v9 & 0x20) == 0)
    {
LABEL_18:
      if ((v9 & 0x40) == 0) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    goto LABEL_31;
  }
LABEL_29:
  int v16 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 76) |= 8u;
  *(_DWORD *)(a1 + 28) = v16;
  int v9 = *(_DWORD *)(a2 + 76);
  if ((v9 & 0x10) != 0) {
    goto LABEL_30;
  }
LABEL_17:
  if ((v9 & 0x20) == 0) {
    goto LABEL_18;
  }
LABEL_31:
  int v18 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 76) |= 0x20u;
  *(_DWORD *)(a1 + 36) = v18;
  int v9 = *(_DWORD *)(a2 + 76);
  if ((v9 & 0x40) != 0)
  {
LABEL_19:
    int v10 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 76) |= 0x40u;
    *(_DWORD *)(a1 + 56) = v10;
    int v9 = *(_DWORD *)(a2 + 76);
  }
LABEL_20:
  if ((v9 & 0xFF00) == 0) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if ((v9 & 0x100) == 0)
  {
    if ((v9 & 0x200) == 0) {
      goto LABEL_23;
    }
LABEL_34:
    int v20 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 76) |= 0x200u;
    *(_DWORD *)(a1 + 64) = v20;
    if ((*(_DWORD *)(a2 + 76) & 0x400) == 0) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
    goto LABEL_24;
  }
  int v19 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 76) |= 0x100u;
  *(_DWORD *)(a1 + 60) = v19;
  int v9 = *(_DWORD *)(a2 + 76);
  if ((v9 & 0x200) != 0) {
    goto LABEL_34;
  }
LABEL_23:
  if ((v9 & 0x400) != 0)
  {
LABEL_24:
    int v11 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a1 + 76) |= 0x400u;
    *(_DWORD *)(a1 + 68) = v11;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100009430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100009444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

id sub_100009458(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  id result = *(id *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  return result;
}

id sub_100009494(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  id result = *(id *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_1000094D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_100014998(a1);
  *(void *)a1 = off_10046A4B8;
  objc_initWeak((id *)(a1 + 96), v3);

  return a1;
}

void sub_100009530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100009540(void *a1@<X8>)
{
}

void sub_100009668()
{
}

void sub_1000096BC(_Unwind_Exception *a1)
{
  sub_1000243FC(v1);
  _Unwind_Resume(a1);
}

void sub_1000096D0(void *a1)
{
  *a1 = off_100458008;
  if ((void *)qword_10047EB18 != a1)
  {
    uint64_t v2 = a1[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

uint64_t sub_100009778()
{
  return 5;
}

void sub_10000983C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000984C(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)a1 + 113) & 4) != 0)
  {
    int v4 = (unsigned int *)(*(void *)a1 + 84);
    return *v4;
  }
  if (qword_10047BEE8 != -1)
  {
    dispatch_once(&qword_10047BEE8, &stru_10045FE70);
    uint64_t v2 = qword_10047BEF0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v2 = qword_10047BEF0;
  if (os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    int v3 = *(_DWORD *)(*(void *)a1 + 80);
    v6[0] = 67240192;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "No regional value specified for 'regionalLocationOfInterestMergeRadiusKM', using indoor value of %{public}u", (uint8_t *)v6, 8u);
  }
LABEL_5:
  int v4 = (unsigned int *)(*(void *)a1 + 80);
  return *v4;
}

void sub_100009954(uint64_t a1)
{
  *(void *)a1 = off_10045F650;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

dispatch_queue_t *sub_1000099BC(dispatch_queue_t *a1, char *label)
{
  *a1 = dispatch_queue_create(label, 0);
  return a1;
}

uint64_t sub_1000099F0(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  if (a2)
  {
    int v6 = (const char *)a2;
    if (*(char *)(a2 + 23) < 0) {
      int v6 = *(const char **)a2;
    }
    if (stat(v6, &v12) < 0)
    {
      uint64_t v8 = *__error();
      goto LABEL_17;
    }
    mode_t st_mode = v12.st_mode;
    if ((v12.st_mode & 0xF000) != 0x4000)
    {
      uint64_t v8 = 20;
LABEL_17:
      sub_1000ADD4C(v8, a1, a2, (uint64_t)a3, (uint64_t)"boost::filesystem::create_directory");
      return 0;
    }
  }
  else
  {
    mode_t st_mode = 511;
  }
  if (*(char *)(a1 + 23) >= 0) {
    int v9 = (const char *)a1;
  }
  else {
    int v9 = *(const char **)a1;
  }
  if (mkdir(v9, st_mode))
  {
    uint64_t v10 = *__error();
    memset(&v12, 0, 24);
    sub_100056B28((const char *)a1, (uint64_t)&v12, &v13);
    if (v13 != 3) {
      sub_1000ADBDC(v10, a1, (uint64_t)a3, (uint64_t)"boost::filesystem::create_directory");
    }
    return 0;
  }
  return 1;
}

uint64_t sub_100009AFC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  sub_100014998(a1);
  *(void *)a1 = off_100468CA8;
  *(_DWORD *)(a1 + 96) = a2;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 144) = 0;
  objc_initWeak((id *)(a1 + 152), v5);

  return a1;
}

void sub_100009B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100009B90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  [*(id *)(*(void *)v2 + 8) startListeningCachedScans];
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 40));
}

void sub_100009BE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  __cxa_begin_catch(a1);
  int v17 = *(std::promise<void> **)(v16 + 40);
  std::current_exception();
  v18.__ptr_ = v19;
  std::promise<void>::set_exception(v17, v18);
  std::exception_ptr::~exception_ptr(v19);
  __cxa_end_catch();
}

void sub_100009C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_100009C40(uint64_t a1)
{
  *(void *)a1 = off_10045DFA0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100009CA8(uint64_t a1)
{
  *(void *)a1 = off_10045E050;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

intptr_t sub_100009DE4(uint64_t a1)
{
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_1004682C0);
    uint64_t v2 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
    }
    goto LABEL_3;
  }
  uint64_t v2 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Runloop has started, allowing init to continue", v4, 2u);
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100009F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100009F14(void *a1)
{
  *a1 = off_10045E520;
  if (a1[5]) {
    operator delete[]();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100009F9C(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  [WeakRetained strategyChanged:a2];
}

void sub_100009FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000A000(uint64_t a1, uint64_t a2)
{
  int v4 = (std::mutex *)(a1 + 1592);
  std::mutex::lock((std::mutex *)(a1 + 1592));
  id v5 = *(char **)(a1 + 1664);
  int v6 = v5;
  unint64_t v7 = *(void *)(a1 + 1672);
  if ((unint64_t)v5 < v7)
  {
    *(void *)id v5 = a2;
    uint64_t v8 = (uint64_t)(v5 + 8);
    goto LABEL_14;
  }
  int v9 = *(char **)(a1 + 1656);
  uint64_t v10 = (v5 - v9) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    sub_1000A9108();
  }
  uint64_t v12 = v7 - (void)v9;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      sub_1000A6A10();
    }
    int v14 = (char *)operator new(8 * v13);
    int v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *(void *)int v15 = a2;
    uint64_t v8 = (uint64_t)(v15 + 8);
    int v17 = (char *)(v5 - v9);
    if (v5 == v9)
    {
LABEL_12:
      *(void *)(a1 + 1656) = v15;
      *(void *)(a1 + 1664) = v8;
      *(void *)(a1 + 1672) = v16;
      if (!v5) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else
  {
    int v14 = 0;
    int v15 = (char *)(8 * v10);
    uint64_t v16 = 0;
    *(void *)(8 * v10) = a2;
    uint64_t v8 = 8 * v10 + 8;
    int v17 = (char *)(v5 - v9);
    if (v5 == v9) {
      goto LABEL_12;
    }
  }
  unint64_t v18 = (unint64_t)(v17 - 8);
  if (v18 < 0x58) {
    goto LABEL_30;
  }
  if ((unint64_t)(v9 - v14) < 0x20) {
    goto LABEL_30;
  }
  uint64_t v19 = (v18 >> 3) + 1;
  uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  int v6 = &v5[-v20];
  v15 -= v20;
  uint64_t v21 = &v14[8 * v10 - 16];
  uint64_t v22 = (long long *)(v5 - 16);
  uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *v22;
    *((_OWORD *)v21 - 1) = *(v22 - 1);
    *(_OWORD *)uint64_t v21 = v24;
    v21 -= 32;
    v22 -= 2;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_30:
    do
    {
      uint64_t v25 = *((void *)v6 - 1);
      v6 -= 8;
      *((void *)v15 - 1) = v25;
      v15 -= 8;
    }
    while (v6 != v9);
  }
  int v6 = *(char **)(a1 + 1656);
  *(void *)(a1 + 1656) = v15;
  *(void *)(a1 + 1664) = v8;
  *(void *)(a1 + 1672) = v16;
  if (v6) {
LABEL_13:
  }
    operator delete(v6);
LABEL_14:
  *(void *)(a1 + 1664) = v8;

  std::mutex::unlock(v4);
}

void sub_10000A1C4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10000A338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000A394(uint64_t a1)
{
  uint64_t v2 = sub_100027898(*(sqlite3 ***)(a1 + 40));
  if (qword_10047BF08 == -1)
  {
    int v3 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
      return v2;
    }
  }
  else
  {
    dispatch_once(&qword_10047BF08, &stru_100460658);
    int v3 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
      return v2;
    }
  }
  int v4 = (void *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    int v4 = (void *)*v4;
  }
  int v6 = 136446466;
  unint64_t v7 = v4;
  __int16 v8 = 1026;
  int v9 = HIDWORD(v2);
  _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "privacy.db @ %{public}s found to have %{public}d", (uint8_t *)&v6, 0x12u);
  return v2;
}

void sub_10000A4AC(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047E328, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = a1;
    uint64_t v3 = a2;
    int v4 = __cxa_guard_acquire(&qword_10047E328);
    a2 = v3;
    int v5 = v4;
    a1 = v2;
    if (v5)
    {
      sub_1000099BC(&qword_10047E320, "com.apple.indoor.WifiSettingsSingleton.changeListeners");
      __cxa_atexit((void (*)(void *))sub_100359A24, &qword_10047E320, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10047E328);
      a1 = v2;
      a2 = v3;
    }
  }
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x3802000000;
  v7[3] = sub_10033D194;
  v7[4] = nullsub_213;
  v7[5] = a1;
  v7[6] = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  _DWORD v6[2] = sub_100096DF0;
  v6[3] = &unk_1004687B0;
  v6[4] = v7;
  sub_100045DE8(&qword_10047E320, v6);
  _Block_object_dispose(v7, 8);
}

void sub_10000A604(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a2 + 96));
    objc_storeWeak((id *)(a1 + 104), WeakRetained);

    if (v4 != a2)
    {
      int v6 = *(uint64_t **)(a2 + 72);
      unint64_t v7 = *(uint64_t **)(a2 + 80);
      sub_100345848(a1 + 80, v6, v7, ((char *)v7 - (char *)v6) >> 4);
    }
  }
  else
  {
    sub_100014998(a1 + 8);
    *(void *)(a1 + 8) = off_100468DF0;
    id v8 = objc_loadWeakRetained((id *)(a2 + 96));
    objc_initWeak((id *)(a1 + 104), v8);

    *(unsigned char *)a1 = 1;
  }
}

uint64_t sub_10000A6DC(uint64_t a1, char *__s)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_10046B600;
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    __dst = p_dst;
    unint64_t v11 = v8 | 0x8000000000000000;
    goto LABEL_8;
  }
  HIBYTE(v11) = v4;
  p_dst = (void **)&__dst;
  if (v4) {
LABEL_8:
  }
    memcpy(p_dst, __s, v5);
  *((unsigned char *)p_dst + v5) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1003FE950;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 850045863;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  if (SHIBYTE(v11) < 0) {
    operator delete(__dst);
  }
  return a1;
}

void sub_10000A804(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10000A818()
{
}

void sub_10000AA10()
{
  if (v0) {
    (*(void (**)(uint64_t))(*(void *)v0 + 8))(v0);
  }
  operator delete();
}

void sub_10000AA80(uint64_t a1)
{
  *(void *)a1 = off_10045E5D0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

wireless_diagnostics::google::protobuf::io::FileOutputStream *sub_10000AAE8(uint64_t a1)
{
  id result = (wireless_diagnostics::google::protobuf::io::FileOutputStream *)sub_100048550();
  if ((uint64_t)result - *(void *)(a1 + 72) >= 0x12A05F201)
  {
    *(void *)(a1 + 72) = sub_100042EE0();
    id result = *(wireless_diagnostics::google::protobuf::io::FileOutputStream **)(a1 + 48);
    if (result)
    {
      return (wireless_diagnostics::google::protobuf::io::FileOutputStream *)wireless_diagnostics::google::protobuf::io::FileOutputStream::Flush(result);
    }
  }
  return result;
}

void sub_10000AB54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v2[25] = *(void *)(a1 + 8);
  v2[26] = v1;
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10000E8C8(v2);
}

void sub_10000ACD4(_Unwind_Exception *a1)
{
  sub_1000BA884(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_10000ACEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000243FC((uint64_t *)va);
  sub_1000BA884(v2 - 80);
  _Unwind_Resume(a1);
}

void sub_10000AD08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000BA884(v2 - 64);
  sub_1000A45A0((uint64_t)va);
  sub_1000BA884(v2 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_10000AD2C(uint64_t a1, unsigned __int16 *a2)
{
  sub_1000776C8(*(void *)a1);
  if (v15[0] == v15[0] >> 31)
  {
    uint64_t v4 = *a2;
  }
  else
  {
    uint64_t v4 = sub_10038D490(v15, (uint64_t)__p);
    if (!*(unsigned char *)(a1 + 8))
    {
      if (qword_10047BED8 != -1) {
        dispatch_once(&qword_10047BED8, &stru_10046B3D8);
      }
      size_t v5 = (id)qword_10047BEE0;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)a1;
        sub_10015F190(v15, (uint64_t)__p);
        if (v10 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v12 = v6;
        __int16 v13 = 2080;
        int v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "developer override of %s with %s", buf, 0x16u);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }

      *(unsigned char *)(a1 + 8) = 1;
    }
  }
  sub_100077BC8((uint64_t)v15);
  return v4;
}

void sub_10000AE9C(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::string __p = va_arg(va1, void *);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t buf = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  if (a2)
  {

    __cxa_begin_catch(a1);
    size_t v5 = sub_10038BA24();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      sub_10015F190((int *)va1, (uint64_t)va);
      sub_10015F2D0();
    }

    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_10000B0DC()
{
  operator delete();
}

void sub_10000B108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000B118(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 24))
  {
    sub_1000AE4B0(buf, "");
    sub_10016A2C4((uint64_t)buf, 0, 0);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_1000D11E0((uint64_t)&__p);
  }
  std::mutex::lock((std::mutex *)(a1 + 24));
  *(unsigned char *)(a1 + 17) = 1;
  std::mutex::unlock((std::mutex *)(a1 + 24));
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_100461DE0);
    uint64_t v3 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
  {
LABEL_4:
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Apply event queue in real time", buf, 2u);
  }
LABEL_5:
  uint64_t v30 = sub_100048550();
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 16));
  if (v4) {
    goto LABEL_45;
  }
  size_t v5 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(a1 + 136);
    if (!v7)
    {
      uint64_t v9 = v30 + 250000000;
      v30 += 250000000;
      double v8 = 1.0;
LABEL_12:
      uint64_t v10 = sub_100042EE0();
      sub_10009D218((uint64_t)(v8 * (double)(uint64_t)(v9 - v10)));
      uint64_t v9 = v30;
      goto LABEL_13;
    }
    sub_1002FF010(v7);
    double v8 = sub_1002FF004(*(unint64_t **)(a1 + 136));
    uint64_t v9 = v30 + 250000000;
    v30 += 250000000;
    if (v8 > 0.0) {
      goto LABEL_12;
    }
LABEL_13:
    *(void *)uint64_t buf = v9;
    uint64_t v11 = *(void *)(a2 + 24);
    if (!v11) {
      sub_10008F39C();
    }
    if ((*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)v11 + 48))(v11, buf) == 1) {
      break;
    }
    if (qword_10047BED8 == -1)
    {
      uint64_t v12 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_18;
      }
LABEL_17:
      uint64_t v13 = *(void *)a1;
      int v14 = (dispatch_queue_t *)(*(void *)a1 + 32);
      *(void *)uint64_t buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x3802000000;
      v38 = sub_100231D8C;
      uint64_t v39 = nullsub_129;
      unsigned int v40 = &v31;
      uint64_t v41 = v13;
      uint64_t v31 = 0;
      std::string __p = _NSConcreteStackBlock;
      uint64_t v33 = 0x40000000;
      v34 = sub_100231D9C;
      int v35 = &unk_100461F38;
      int v36 = buf;
      sub_100045DE8(v14, &__p);
      _Block_object_dispose(buf, 8);
      *(_DWORD *)uint64_t buf = 134217984;
      *(void *)&uint8_t buf[4] = v31;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "We have %zu events in queue", buf, 0xCu);
      goto LABEL_18;
    }
    dispatch_once(&qword_10047BED8, &stru_100461DE0);
    uint64_t v12 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_17;
    }
LABEL_18:
    uint64_t v15 = sub_100230220((uint64_t *)a1, v5);
    if (!v15) {
      goto LABEL_22;
    }
    if (qword_10047BED8 == -1)
    {
      uint64_t v16 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_22;
      }
LABEL_21:
      uint64_t v17 = *(void *)a1;
      unint64_t v18 = (dispatch_queue_t *)(*(void *)a1 + 32);
      *(void *)uint64_t buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x3802000000;
      v38 = sub_100231D8C;
      uint64_t v39 = nullsub_129;
      unsigned int v40 = &v31;
      uint64_t v41 = v17;
      uint64_t v31 = 0;
      std::string __p = _NSConcreteStackBlock;
      uint64_t v33 = 0x40000000;
      v34 = sub_100231D9C;
      int v35 = &unk_100461F38;
      int v36 = buf;
      sub_100045DE8(v18, &__p);
      _Block_object_dispose(buf, 8);
      *(_DWORD *)uint64_t buf = 134218240;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v31;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "WARNING: We have dropped %zu events.  %zu remaining", buf, 0x16u);
      goto LABEL_22;
    }
    dispatch_once(&qword_10047BED8, &stru_100461DE0);
    uint64_t v16 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_21;
    }
LABEL_22:
    size_t v5 = (char *)(v30 - 100000000);
    uint64_t v19 = sub_10022F8A0((uint64_t *)a1, v30 - 100000000);
    if (qword_10047BED8 == -1)
    {
      uint64_t v20 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_25;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100461DE0);
      uint64_t v20 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_25:
        uint64_t v21 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_27;
        }
LABEL_26:
        double v22 = sub_100190580(&v30);
        *(_DWORD *)uint64_t buf = 134217984;
        *(double *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Applying update motion event at %f", buf, 0xCu);
        goto LABEL_27;
      }
    }
    *(_DWORD *)uint64_t buf = 134218240;
    *(void *)&uint8_t buf[4] = v19;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v5;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Applied %zu events - simulating motion until %lld ns", buf, 0x16u);
    if (qword_10047BED8 == -1) {
      goto LABEL_25;
    }
    dispatch_once(&qword_10047BED8, &stru_100461DE0);
    uint64_t v21 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_26;
    }
LABEL_27:
    (*(void (**)(void, char *))(**(void **)(a1 + 8) + 248))(*(void *)(a1 + 8), v5);
    uint64_t v23 = sub_100048550();
    uint64_t v24 = v23 - v30;
    if ((uint64_t)(v23 - v30) >= 3000000001)
    {
      if (qword_10047BED8 == -1)
      {
        uint64_t v25 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEFAULT))
        {
LABEL_31:
          sub_10023060C((void *)a1);
          uint64_t v30 = v23;
          goto LABEL_7;
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_100461DE0);
        uint64_t v25 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_31;
        }
      }
      uint64_t v26 = *(void *)a1;
      uint64_t v27 = (dispatch_queue_t *)(*(void *)a1 + 32);
      *(void *)uint64_t buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x3802000000;
      v38 = sub_100231D8C;
      uint64_t v39 = nullsub_129;
      unsigned int v40 = &v31;
      uint64_t v41 = v26;
      uint64_t v31 = 0;
      std::string __p = _NSConcreteStackBlock;
      uint64_t v33 = 0x40000000;
      v34 = sub_100231D9C;
      int v35 = &unk_100461F38;
      int v36 = buf;
      sub_100045DE8(v27, &__p);
      _Block_object_dispose(buf, 8);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)&uint8_t buf[4] = (double)v24 / 1000000000.0;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v31;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "WARNING: Lag (%f) too high, dropping %zu events", buf, 0x16u);
      goto LABEL_31;
    }
LABEL_7:
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 16));
    if (v6) {
      goto LABEL_45;
    }
  }
  if (qword_10047BED8 == -1)
  {
    uint64_t v28 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_44;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100461DE0);
    uint64_t v28 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
    {
LABEL_44:
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Finished playing back events", buf, 2u);
    }
  }
LABEL_45:
  sub_10022F2EC(a1);
}

void sub_10000B914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000B9D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000BA88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000BAA0(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)a1 + 113)) {
    return *(unsigned int *)(*(void *)a1 + 76);
  }
  if (qword_10047BEE8 != -1) {
    dispatch_once(&qword_10047BEE8, &stru_10045FE70);
  }
  uint64_t v1 = 100000000;
  uint64_t v2 = qword_10047BEF0;
  if (os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67240192;
    v4[1] = 100000000;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "No regional value specified for 'regionalprefetchmaxtotalbytes', using value of %{public}d", (uint8_t *)v4, 8u);
  }
  return v1;
}

void sub_10000BBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000BC74(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)a1 + 112) & 0x40) != 0)
  {
    unsigned __int8 v4 = (unsigned int *)(*(void *)a1 + 68);
    return *v4;
  }
  if (qword_10047BEE8 != -1)
  {
    dispatch_once(&qword_10047BEE8, &stru_10045FE70);
    uint64_t v2 = qword_10047BEF0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v2 = qword_10047BEF0;
  if (os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO))
  {
LABEL_4:
    int v3 = *(_DWORD *)(*(void *)a1 + 64);
    v6[0] = 67240192;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "No regional value specified for 'regionalPrefetchMaxFloorCount', using indoor value of %{public}u", (uint8_t *)v6, 8u);
  }
LABEL_5:
  unsigned __int8 v4 = (unsigned int *)(*(void *)a1 + 64);
  return *v4;
}

void sub_10000BD7C()
{
}

void sub_10000BE40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100248D6C((std::__thread_struct **)va);
  _Unwind_Resume(a1);
}

void sub_10000BE54()
{
}

void sub_10000BE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__thread_struct **a9, std::__thread_struct *a10)
{
}

void sub_10000BF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10000C0BC(uint64_t a1, uint64_t a2)
{
  sub_10009E490(a1 + 40, a2);
  unsigned int v3 = *(_DWORD *)(a1 + 72);
  if (v3 <= 2) {
    *(unsigned char *)(a1 + 20) = 0x10100u >> (8 * v3);
  }
  int v36 = 0;
  v37 = 0;
  v38 = 0;
  int v4 = *(_DWORD *)(a1 + 88);
  if (!v4)
  {
    v38 = 0;
    int v35 = 0;
    int v36 = 0;
    std::string __p = 0;
    v34 = 0;
    goto LABEL_41;
  }
  if (v4 < 0) {
    sub_1000A9108();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 88);
  uint64_t v6 = v4;
  uint64_t v7 = (char *)operator new(4 * v4);
  uint64_t v8 = 0;
  v37 = v7;
  uint64_t v9 = v7;
  uint64_t v10 = &v7[4 * v6];
  uint64_t v11 = v5;
  do
  {
    while (1)
    {
      int v12 = *(_DWORD *)(*(void *)(a1 + 80) + 4 * v8);
      if (v7 >= v10) {
        break;
      }
      *(_DWORD *)uint64_t v7 = v12;
      v7 += 4;
      if (++v8 >= (int)v11) {
        goto LABEL_36;
      }
    }
    uint64_t v13 = (v7 - v9) >> 2;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
    {
      v37 = v7;
      v38 = v10;
      int v36 = v9;
      sub_1000A9108();
    }
    if ((v10 - v9) >> 1 > v14) {
      unint64_t v14 = (v10 - v9) >> 1;
    }
    if ((unint64_t)(v10 - v9) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 >> 62)
      {
        v37 = v7;
        v38 = v10;
        int v36 = v9;
        sub_1000A6A10();
      }
      uint64_t v16 = v11;
      unint64_t v17 = v15;
      unint64_t v18 = operator new(4 * v15);
      uint64_t v11 = v16;
      unint64_t v15 = v17;
      uint64_t v19 = &v18[4 * v13];
      *(_DWORD *)uint64_t v19 = v12;
      uint64_t v20 = (uint64_t)(v19 + 4);
      if (v7 == v9) {
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v18 = 0;
      uint64_t v19 = (char *)(4 * v13);
      *(_DWORD *)(4 * v13) = v12;
      uint64_t v20 = 4 * v13 + 4;
      if (v7 == v9) {
        goto LABEL_22;
      }
    }
    unint64_t v21 = v7 - 4 - v9;
    if (v21 < 0xBC)
    {
      double v22 = v7;
      goto LABEL_21;
    }
    if (&v18[v7 - v9 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v18[v7 - v9 - 4])
    {
      double v22 = v7;
      do
      {
LABEL_21:
        int v23 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v19 - 1) = v23;
        v19 -= 4;
      }
      while (v22 != v9);
      goto LABEL_22;
    }
    if (&v7[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
    {
      double v22 = v7;
      goto LABEL_21;
    }
    if ((unint64_t)(v9 - v18) < 0x20)
    {
      double v22 = v7;
      goto LABEL_21;
    }
    uint64_t v24 = (v21 >> 2) + 1;
    uint64_t v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    double v22 = &v7[-v25];
    v19 -= v25;
    uint64_t v26 = &v18[4 * v13 - 16];
    uint64_t v27 = (long long *)(v7 - 16);
    uint64_t v28 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v29 = *v27;
      *(v26 - 1) = *(v27 - 1);
      *uint64_t v26 = v29;
      v26 -= 2;
      v27 -= 2;
      v28 -= 8;
    }
    while (v28);
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_21;
    }
LABEL_22:
    uint64_t v10 = &v18[4 * v15];
    if (v9)
    {
      operator delete(v9);
      uint64_t v11 = *(unsigned int *)(a1 + 88);
    }
    uint64_t v9 = v19;
    uint64_t v7 = (char *)v20;
    ++v8;
  }
  while (v8 < (int)v11);
LABEL_36:
  v37 = v7;
  v38 = v10;
  int v35 = 0;
  int v36 = v9;
  std::string __p = 0;
  v34 = 0;
  int64_t v30 = v7 - v9;
  if (v30)
  {
    if (v30 < 0) {
      sub_1000A9108();
    }
    uint64_t v31 = (char *)operator new(v30);
    v32 = &v31[4 * (v30 >> 2)];
    std::string __p = v31;
    int v35 = v32;
    memcpy(v31, v9, v30);
    v34 = v32;
  }
LABEL_41:
  sub_1000A1658(a1 + 152, (uint64_t)&__p);
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  sub_100058ECC(a1);
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_10000C3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000C424(void *a1)
{
  *a1 = off_100458638;
  if ((void *)qword_10047EB60 != a1)
  {
    uint64_t v2 = a1[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = a1[18];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_10000C4F8(sqlite3 **a1, int __val)
{
  std::to_string(&v8, __val);
  uint64_t v3 = std::string::insert(&v8, 0, "PRAGMA user_version = ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = std::string::append(&v9, ";");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  int64_t v11 = v5->__r_.__value_.__r.__words[2];
  long long v10 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (v11 >= 0) {
    uint64_t v7 = (const char *)&v10;
  }
  else {
    uint64_t v7 = (const char *)v10;
  }
  sub_10008D100(a1, v7, "Failed to set user version");
  if (SHIBYTE(v11) < 0)
  {
    operator delete((void *)v10);
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_6:
      if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_10:
      operator delete(v8.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_10;
  }
}

void sub_10000C5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0)
  {
    operator delete(*(void **)(v21 - 48));
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a15 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000C668(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 1136) = 0;
  *(unsigned char *)(a1 + 1144) = 0;
  *(unsigned char *)(a1 + 2232) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)(a1 + 2240));
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)(a1 + 2680));
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)(a1 + 3120));
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)(a1 + 3560));
  *(void *)(a1 + 4024) = 0x100000003;
  *(void *)(a1 + 4000) = off_100452C18;
  *(void *)(a1 + 4032) = a1 + 4040;
  *(_OWORD *)(a1 + 4008) = xmmword_1003E69E0;
  *(void *)(a1 + 4040) = 0;
  *(void *)(a1 + 4056) = 0;
  *(void *)(a1 + 4048) = 0;
  *(void *)(a1 + 4088) = 0x100000003;
  *(void *)(a1 + 4064) = off_100452C18;
  *(void *)(a1 + 4096) = a1 + 4104;
  *(_OWORD *)(a1 + 4072) = xmmword_1003E69E0;
  *(void *)(a1 + 4104) = 0;
  *(void *)(a1 + 4120) = 0;
  *(void *)(a1 + 4112) = 0;
  *(void *)(a1 + 4152) = 0x300000003;
  *(void *)(a1 + 4128) = off_100452AF0;
  *(void *)(a1 + 4160) = a1 + 4168;
  *(_OWORD *)(a1 + 4136) = xmmword_1003E6950;
  *(unsigned char *)(a1 + 4256) = 0;
  *(_OWORD *)(a1 + 4225) = 0u;
  *(_OWORD *)(a1 + 4216) = 0u;
  *(_OWORD *)(a1 + 4200) = 0u;
  *(_OWORD *)(a1 + 4184) = 0u;
  *(_OWORD *)(a1 + 4168) = 0u;
  return a1;
}

void sub_10000C7CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 3440) = off_100452B48;
  *(void *)(v1 + 3328) = off_100452B48;
  *(void *)(v1 + 3216) = off_100452B48;
  *(void *)(v1 + 3152) = off_100452B48;
  sub_1003A362C((void *)v1);
  sub_1003A36B0((void *)v1);
  sub_1000D2AF4(v1 + 1144);
  if (*(unsigned char *)(v1 + 1136)) {
    sub_1000C9C38(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10000C898(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 24));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v6;
  *(void *)a1 = v8;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_10000CB48(_Unwind_Exception *a1)
{
}

void sub_10000CB68(_Unwind_Exception *a1)
{
}

uint64_t sub_10000CB7C(void *a1, int a2, std::ios_base *this, int a4, uint64_t a5, std::string *a6)
{
  uint64_t v10 = a1[39];
  if (v10 != a1[40])
  {
    uint64_t v11 = v10 + 24 * *(int *)(a5 + 24);
    int v12 = *(char *)(v11 + 23);
    uint64_t v13 = *(void *)(v11 + 8);
    if (v12 >= 0) {
      unint64_t v14 = (char *)v11;
    }
    else {
      unint64_t v14 = *(char **)v11;
    }
    if (v12 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(v11 + 23);
    }
    int v15 = SHIBYTE(a6->__r_.__value_.__r.__words[2]);
    BOOL v16 = v15 < 0;
    unint64_t v17 = (std::string *)a6->__r_.__value_.__r.__words[0];
    if (v15 >= 0) {
      unint64_t v17 = a6;
    }
    std::string::size_type size = HIBYTE(a6->__r_.__value_.__r.__words[2]);
    if (v16) {
      std::string::size_type size = a6->__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v19 = 0;
      uint64_t v20 = v17;
      while (1)
      {
        if (v17->__r_.__value_.__s.__data_[v19] == 37)
        {
          uint64_t v21 = (std::string *)((char *)&v17->__r_.__value_.__l.__data_ + v19 + 1);
          if (size - 1 != v19)
          {
            if (v21->__r_.__value_.__s.__data_[0] == 65)
            {
              uint64_t v21 = (std::string *)&v17->__r_.__value_.__s.__data_[v19 + 2];
              char v22 = -1;
            }
            else
            {
              char v22 = 0;
            }
            if (v22) {
              break;
            }
          }
        }
        uint64_t v20 = (std::string *)((char *)v20 + 1);
        if (size == ++v19) {
          goto LABEL_23;
        }
      }
      if ((std::string *)((char *)v17 + v19) != v21)
      {
        v64.__locale_ = (std::locale::__imp *)"%A";
        v65 = "";
        sub_1001922E4(a6, (uint64_t *)&v64, v14, &v14[v13], (std::string *)((char *)v17 + v19), v21, v14, &v14[v13]);
      }
    }
  }
LABEL_23:
  uint64_t v23 = a1[36];
  if (v23 != a1[37])
  {
    uint64_t v24 = v23 + 24 * *(int *)(a5 + 24);
    int v25 = *(char *)(v24 + 23);
    uint64_t v26 = *(void *)(v24 + 8);
    if (v25 >= 0) {
      uint64_t v27 = (char *)v24;
    }
    else {
      uint64_t v27 = *(char **)v24;
    }
    if (v25 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(v24 + 23);
    }
    int v28 = SHIBYTE(a6->__r_.__value_.__r.__words[2]);
    BOOL v29 = v28 < 0;
    int64_t v30 = (std::string *)a6->__r_.__value_.__r.__words[0];
    if (v28 >= 0) {
      int64_t v30 = a6;
    }
    std::string::size_type v31 = HIBYTE(a6->__r_.__value_.__r.__words[2]);
    if (v29) {
      std::string::size_type v31 = a6->__r_.__value_.__l.__size_;
    }
    if (v31)
    {
      uint64_t v32 = 0;
      uint64_t v33 = v30;
      while (1)
      {
        if (v30->__r_.__value_.__s.__data_[v32] == 37)
        {
          v34 = (std::string *)((char *)&v30->__r_.__value_.__l.__data_ + v32 + 1);
          if (v31 - 1 != v32)
          {
            if (v34->__r_.__value_.__s.__data_[0] == 97)
            {
              v34 = (std::string *)&v30->__r_.__value_.__s.__data_[v32 + 2];
              char v35 = -1;
            }
            else
            {
              char v35 = 0;
            }
            if (v35) {
              break;
            }
          }
        }
        uint64_t v33 = (std::string *)((char *)v33 + 1);
        if (v31 == ++v32) {
          goto LABEL_45;
        }
      }
      if ((std::string *)((char *)v30 + v32) != v34)
      {
        v64.__locale_ = (std::locale::__imp *)"%a";
        v65 = "";
        sub_1001922E4(a6, (uint64_t *)&v64, v27, &v27[v26], (std::string *)((char *)v30 + v32), v34, v27, &v27[v26]);
      }
    }
  }
LABEL_45:
  uint64_t v36 = a1[33];
  if (v36 != a1[34])
  {
    uint64_t v37 = v36 + 24 * *(int *)(a5 + 16);
    int v38 = *(char *)(v37 + 23);
    uint64_t v39 = *(void *)(v37 + 8);
    if (v38 >= 0) {
      unsigned int v40 = (char *)v37;
    }
    else {
      unsigned int v40 = *(char **)v37;
    }
    if (v38 >= 0) {
      uint64_t v39 = *(unsigned __int8 *)(v37 + 23);
    }
    int v41 = SHIBYTE(a6->__r_.__value_.__r.__words[2]);
    BOOL v42 = v41 < 0;
    unsigned int v43 = (std::string *)a6->__r_.__value_.__r.__words[0];
    if (v41 >= 0) {
      unsigned int v43 = a6;
    }
    std::string::size_type v44 = HIBYTE(a6->__r_.__value_.__r.__words[2]);
    if (v42) {
      std::string::size_type v44 = a6->__r_.__value_.__l.__size_;
    }
    if (v44)
    {
      uint64_t v45 = 0;
      v46 = v43;
      while (1)
      {
        if (v43->__r_.__value_.__s.__data_[v45] == 37)
        {
          v47 = (std::string *)((char *)&v43->__r_.__value_.__l.__data_ + v45 + 1);
          if (v44 - 1 != v45)
          {
            if (v47->__r_.__value_.__s.__data_[0] == 66)
            {
              v47 = (std::string *)&v43->__r_.__value_.__s.__data_[v45 + 2];
              char v48 = -1;
            }
            else
            {
              char v48 = 0;
            }
            if (v48) {
              break;
            }
          }
        }
        v46 = (std::string *)((char *)v46 + 1);
        if (v44 == ++v45) {
          goto LABEL_67;
        }
      }
      if ((std::string *)((char *)v43 + v45) != v47)
      {
        v64.__locale_ = (std::locale::__imp *)"%B";
        v65 = "";
        sub_1001922E4(a6, (uint64_t *)&v64, v40, &v40[v39], (std::string *)((char *)v43 + v45), v47, v40, &v40[v39]);
      }
    }
  }
LABEL_67:
  uint64_t v49 = a1[30];
  if (v49 != a1[31])
  {
    uint64_t v50 = v49 + 24 * *(int *)(a5 + 16);
    int v51 = *(char *)(v50 + 23);
    uint64_t v52 = *(void *)(v50 + 8);
    if (v51 >= 0) {
      v53 = (char *)v50;
    }
    else {
      v53 = *(char **)v50;
    }
    if (v51 >= 0) {
      uint64_t v52 = *(unsigned __int8 *)(v50 + 23);
    }
    int v54 = SHIBYTE(a6->__r_.__value_.__r.__words[2]);
    BOOL v55 = v54 < 0;
    v56 = (std::string *)a6->__r_.__value_.__r.__words[0];
    if (v54 >= 0) {
      v56 = a6;
    }
    std::string::size_type v57 = HIBYTE(a6->__r_.__value_.__r.__words[2]);
    if (v55) {
      std::string::size_type v57 = a6->__r_.__value_.__l.__size_;
    }
    if (v57)
    {
      uint64_t v58 = 0;
      v59 = v56;
      while (1)
      {
        if (v56->__r_.__value_.__s.__data_[v58] == 37)
        {
          v60 = (std::string *)((char *)&v56->__r_.__value_.__l.__data_ + v58 + 1);
          if (v57 - 1 != v58)
          {
            if (v60->__r_.__value_.__s.__data_[0] == 98)
            {
              v60 = (std::string *)&v56->__r_.__value_.__s.__data_[v58 + 2];
              char v61 = -1;
            }
            else
            {
              char v61 = 0;
            }
            if (v61) {
              break;
            }
          }
        }
        v59 = (std::string *)((char *)v59 + 1);
        if (v57 == ++v58) {
          goto LABEL_89;
        }
      }
      if ((std::string *)((char *)v56 + v58) != v60)
      {
        v64.__locale_ = (std::locale::__imp *)"%b";
        v65 = "";
        sub_1001922E4(a6, (uint64_t *)&v64, v53, &v53[v52], (std::string *)((char *)v56 + v58), v60, v53, &v53[v52]);
      }
    }
  }
LABEL_89:
  std::ios_base::getloc(this);
  std::locale::use_facet(&v64, &std::time_put<char,std::ostreambuf_iterator<char>>::id);
  uint64_t v62 = std::time_put<char,std::ostreambuf_iterator<char>>::put();
  std::locale::~locale(&v64);
  return v62;
}

void sub_10000CFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_10000D008(uint64_t a1)
{
  std::locale::locale(&v23);
  uint64_t v2 = std::locale::classic();
  if (std::locale::operator==(&v23, v2))
  {
    unsigned int v3 = *(_DWORD *)a1;
    do
    {
      uint64_t v4 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v4 - 1;
      *(unsigned char *)(v4 - 1) = *(_DWORD *)(a1 + 20) + v3 % 0xA;
      LODWORD(v4) = *(_DWORD *)a1;
      unsigned int v3 = *(_DWORD *)a1 / 0xAu;
      *(_DWORD *)a1 = v3;
    }
    while (v4 > 9);
    uint64_t v5 = *(void *)(a1 + 8);
    goto LABEL_28;
  }
  uint64_t v6 = std::locale::use_facet(&v23, &std::numpunct<char>::id);
  ((void (*)(void **__return_ptr))v6->__vftable[1].__on_zero_shared)(&__p);
  if ((char)v22 < 0)
  {
    unint64_t v7 = v21;
    if (!v21 || *(char *)__p <= 0) {
      goto LABEL_24;
    }
LABEL_11:
    char v8 = ((uint64_t (*)(const std::locale::facet *))v6->__vftable[1].~facet_0)(v6);
    uint64_t v9 = 0;
    p_p = __p;
    if ((v22 & 0x80u) == 0) {
      p_p = &__p;
    }
    uint64_t v11 = (uint64_t *)(a1 + 8);
    LOBYTE(v12) = *p_p;
    char v13 = *p_p;
    do
    {
      if (!v13)
      {
        if (++v9 < v7)
        {
          BOOL v16 = (v22 & 0x80u) == 0 ? &__p : (void **)__p;
          int v12 = *((char *)v16 + v9);
          if (v12 < 1) {
            LOBYTE(v12) = 127;
          }
        }
        unint64_t v14 = (unsigned char *)(*v11 - 1);
        *uint64_t v11 = (uint64_t)v14;
        unsigned char *v14 = v8;
        char v13 = v12;
      }
      --v13;
      uint64_t v15 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v15 - 1;
      *(unsigned char *)(v15 - 1) = *(_DWORD *)(a1 + 20) + *(_DWORD *)a1 % 0xAu;
      LODWORD(v15) = *(_DWORD *)a1;
      *(_DWORD *)a1 /= 0xAu;
    }
    while (v15 > 9);
    goto LABEL_26;
  }
  unint64_t v7 = v22;
  if (v22 && (char)__p > 0) {
    goto LABEL_11;
  }
LABEL_24:
  uint64_t v11 = (uint64_t *)(a1 + 8);
  unsigned int v17 = *(_DWORD *)a1;
  do
  {
    uint64_t v18 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v18 - 1;
    *(unsigned char *)(v18 - 1) = *(_DWORD *)(a1 + 20) + v17 % 0xA;
    LODWORD(v18) = *(_DWORD *)a1;
    unsigned int v17 = *(_DWORD *)a1 / 0xAu;
    *(_DWORD *)a1 = v17;
  }
  while (v18 > 9);
LABEL_26:
  uint64_t v5 = *v11;
  if ((char)v22 < 0) {
    operator delete(__p);
  }
LABEL_28:
  std::locale::~locale(&v23);
  return v5;
}

void sub_10000D27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::locale::~locale(&a15);
    _Unwind_Resume(a1);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

void sub_10000D2BC(id a1, NSArray *a2)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v2 = a2;
  id v3 = [(NSArray *)v2 countByEnumeratingWithState:&v12 objects:v18 count:16];
  if (v3)
  {
    uint64_t v5 = *(void *)v13;
    *(void *)&long long v4 = 138477827;
    long long v11 = v4;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        unint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if ((objc_msgSend(v7, "hasPrefix:", @"com.apple.pipelined.TilePrefetch", v11, (void)v12) & 1) != 0
          && ([v7 isEqualToString:@"com.apple.pipelined.TilePrefetch.v0"] & 1) == 0)
        {
          if (qword_10047BEF8 == -1)
          {
            char v8 = qword_10047BF00;
            if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO)) {
              goto LABEL_11;
            }
          }
          else
          {
            dispatch_once(&qword_10047BEF8, &stru_10046B930);
            char v8 = qword_10047BF00;
            if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO))
            {
LABEL_11:
              *(_DWORD *)uint64_t buf = v11;
              unsigned int v17 = v7;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Cancelling existing stale session %{private}@", buf, 0xCu);
            }
          }
          uint64_t v9 = +[NSURLSessionConfiguration backgroundSessionConfigurationWithIdentifier:v7];
          uint64_t v10 = +[NSURLSession sessionWithConfiguration:v9];
          [v10 invalidateAndCancel];

          continue;
        }
      }
      id v3 = [(NSArray *)v2 countByEnumeratingWithState:&v12 objects:v18 count:16];
    }
    while (v3);
  }
}

void sub_10000D4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WifiScannerSettings *sub_10000D500(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  if (v2 == v3)
  {
    unint64_t v7 = *(unsigned int **)(a1 + 72);
    if (v7 == *(unsigned int **)(a1 + 32)) {
      unint64_t v7 = *(unsigned int **)(a1 + 24);
    }
    uint64_t v4 = *v7;
    *(void *)(a1 + 72) = v7 + 1;
    unsigned int v8 = atomic_load((unsigned int *)(a1 + 16));
    float v5 = *(float *)&v8;
    uint64_t v6 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    *(void *)(a1 + 56) = v3 - 4;
    float v5 = 0.5;
    uint64_t v6 = 110;
  }
  uint64_t v9 = [WifiScannerSettings alloc];
  uint64_t v10 = +[NSNumber numberWithInt:v4];
  unsigned int v17 = v10;
  long long v11 = +[NSArray arrayWithObjects:&v17 count:1];
  if (v2 == v3)
  {
    unsigned __int8 v14 = atomic_load((unsigned __int8 *)(a1 + 80));
    uint64_t v13 = v14 & 1;
  }
  else
  {
    uint64_t v13 = 1;
  }
  *(float *)&double v12 = v5;
  long long v15 = [(WifiScannerSettings *)v9 initWithChannels:v11 dwell:v6 scanType:2 includingOffChannelResults:0 atDutyCycle:v13 asLowPriority:v12];

  return v15;
}

void sub_10000D664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000D688(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)a1 + 112) & 0x80) != 0) {
    return *(unsigned int *)(*(void *)a1 + 72);
  }
  if (qword_10047BEE8 != -1) {
    dispatch_once(&qword_10047BEE8, &stru_10045FE70);
  }
  uint64_t v1 = 200000000;
  uint64_t v2 = qword_10047BEF0;
  if (os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67240192;
    v4[1] = 200000000;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "No regional value specified for 'indoorprefetchmaxfloorcount', using value of %{public}d", (uint8_t *)v4, 8u);
  }
  return v1;
}

uint64_t sub_10000D76C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_7:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_7;
  }
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_10000D91C(uint64_t a1)
{
  id v4 = +[NSString ps_stringWithSTL:a1];
  uint64_t v2 = +[NSThread currentThread];
  [v2 setName:v4];

  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v3 = (const char *)a1;
  }
  else {
    uint64_t v3 = *(const char **)a1;
  }
  pthread_setname_np(v3);
}

void sub_10000D9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000D9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000DB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000DB18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000DB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000DB3C(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  int status = 0;
  size_t v16 = 0;
  if (*((char *)a1 + 23) < 0) {
    a1 = (void **)*a1;
  }
  id v4 = __cxa_demangle((const char *)a1, 0, &v16, &status);
  float v5 = v4;
  if (status)
  {
    free(v4);
    if (status != -3)
    {
      if (status == -2)
      {
        if (*((char *)v2 + 23) < 0) {
          goto LABEL_32;
        }
        goto LABEL_34;
      }
      if (status == -1)
      {
        if (*((char *)v2 + 23) < 0) {
          goto LABEL_32;
        }
        goto LABEL_34;
      }
      if (qword_10047BED8 == -1)
      {
        long long v11 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_31;
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_10045A388);
        long long v11 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_31;
        }
      }
      if (*((char *)v2 + 23) >= 0) {
        double v12 = v2;
      }
      else {
        double v12 = *v2;
      }
      *(_DWORD *)uint64_t buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = status;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Unknown status code %d demangling '%s'\n", buf, 0x12u);
LABEL_31:
      if (*((char *)v2 + 23) < 0)
      {
LABEL_32:
        sub_1000559FC((unsigned char *)a2, *v2, (unint64_t)v2[1]);
LABEL_35:
        *(unsigned char *)(a2 + 24) = 0;
        return;
      }
LABEL_34:
      *(_OWORD *)a2 = *(_OWORD *)v2;
      *(void *)(a2 + 16) = v2[2];
      goto LABEL_35;
    }
    if (qword_10047BED8 == -1)
    {
      uint64_t v9 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_23;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_10045A388);
      uint64_t v9 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_23;
      }
    }
    if (*((char *)v2 + 23) >= 0) {
      uint64_t v10 = v2;
    }
    else {
      uint64_t v10 = *v2;
    }
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Invalid args provided to demangle '%s'\n", buf, 0xCu);
LABEL_23:
    if (*((char *)v2 + 23) < 0) {
      goto LABEL_32;
    }
    goto LABEL_34;
  }
  if (!v4)
  {
    if (*((char *)v2 + 23) < 0) {
      goto LABEL_32;
    }
    goto LABEL_34;
  }
  size_t v6 = strlen(v4);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v13 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v13 = v6 | 7;
    }
    uint64_t v14 = v13 + 1;
    unsigned int v8 = operator new(v13 + 1);
    *(void *)&uint8_t buf[8] = v7;
    *(void *)&buf[16] = v14 | 0x8000000000000000;
    *(void *)uint64_t buf = v8;
LABEL_39:
    memmove(v8, v5, v7);
    v8[v7] = 0;
    free(v5);
    if ((buf[23] & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
  buf[23] = v6;
  unsigned int v8 = buf;
  if (v6) {
    goto LABEL_39;
  }
  buf[0] = 0;
  free(v5);
  if ((buf[23] & 0x80000000) == 0)
  {
LABEL_14:
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(void *)(a2 + 16) = *(void *)&buf[16];
    *(unsigned char *)(a2 + 24) = 1;
    return;
  }
LABEL_40:
  long long v15 = *(void **)buf;
  sub_1000559FC((unsigned char *)a2, *(void **)buf, *(unint64_t *)&buf[8]);
  *(unsigned char *)(a2 + 24) = 1;
  operator delete(v15);
}

void sub_10000DEE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10000DEF8(uint64_t a1)
{
  *(void *)a1 = off_10045A508;
  if (*(char *)(a1 + 399) < 0)
  {
    operator delete(*(void **)(a1 + 376));
    *(void *)(a1 + 288) = off_10045A4E8;
    if ((*(char *)(a1 + 343) & 0x80000000) == 0)
    {
LABEL_3:
      sub_100075BE0(a1 + 296, *(void *)(a1 + 304));
      uint64_t v2 = *(void ***)(a1 + 216);
      if (!v2) {
        goto LABEL_4;
      }
LABEL_15:
      id v4 = *(void ***)(a1 + 224);
      if (v4 == v2)
      {
        *(void *)(a1 + 224) = v2;
        operator delete(v2);
        if (*(char *)(a1 + 215) < 0) {
          goto LABEL_22;
        }
      }
      else
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v2);
        float v5 = *(void **)(a1 + 216);
        *(void *)(a1 + 224) = v2;
        operator delete(v5);
        if (*(char *)(a1 + 215) < 0) {
          goto LABEL_22;
        }
      }
LABEL_5:
      if ((*(char *)(a1 + 191) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_23;
    }
  }
  else
  {
    *(void *)(a1 + 288) = off_10045A4E8;
    if ((*(char *)(a1 + 343) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*(void **)(a1 + 320));
  sub_100075BE0(a1 + 296, *(void *)(a1 + 304));
  uint64_t v2 = *(void ***)(a1 + 216);
  if (v2) {
    goto LABEL_15;
  }
LABEL_4:
  if ((*(char *)(a1 + 215) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_22:
  operator delete(*(void **)(a1 + 192));
  if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 159) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(*(void **)(a1 + 168));
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 135) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(*(void **)(a1 + 136));
  if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 111) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(*(void **)(a1 + 112));
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_28:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_29;
  }
LABEL_27:
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_28;
  }
LABEL_11:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_29:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_10000E160(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = a3;
  uint64_t v9 = v8;
  if (v8) {
    os_activity_scope_enter(v8, &state);
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    long long v11 = (const char *)a2;
  }
  else {
    long long v11 = *(const char **)a2;
  }
  if (v10 >= 0) {
    int v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v12 = *(_DWORD *)(a2 + 8);
  }
  int v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_100088644(v13, *a1);
  if (v13)
  {
    uint64_t v14 = __error();
    sub_100295674(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v23, " w/ ");
    long long v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v27;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    uint64_t v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v21);
    sub_100204FC4(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 2UL, nQueries = 0UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(void *)(a4 + 8) = *a1;
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_10000E4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_100205504((std::runtime_error *)(v71 - 184));
    v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1002037D0(v68);

            _Unwind_Resume(a1);
          }
          sub_1002037D0(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_100205504((std::runtime_error *)(v71 - 184));
  v73 = a47;
  if (!a47) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_10000E788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000E79C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000E8B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000E8C8(void *a1@<X8>)
{
}

void sub_10000EA3C()
{
}

void sub_10000EAA4(_Unwind_Exception *a1)
{
  sub_1000243FC(v1);
  _Unwind_Resume(a1);
}

void sub_10000EB30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000EB40(void *a1)
{
  int v2 = *(unsigned __int8 *)(a1[1] + 32);
  size_t v3 = strlen((const char *)((unint64_t)"P11EventLogger" & 0x7FFFFFFFFFFFFFFFLL));
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (char **)operator new(v6 + 1);
    uint64_t v19 = (std::__shared_weak_count *)v4;
    unint64_t v20 = v7 | 0x8000000000000000;
    std::string __dst = (char *)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v20) = v3;
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memcpy(p_dst, (const void *)((unint64_t)"P11EventLogger" & 0x7FFFFFFFFFFFFFFFLL), v4);
  *((unsigned char *)p_dst + v4) = 0;
  sub_10000DB3C((void **)&__dst, (uint64_t)&v21);
  if (SHIBYTE(v20) < 0) {
    operator delete(__dst);
  }
  long long v8 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
  v16[0] = v21.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v16 + 3) = *(_DWORD *)((char *)&v21.__r_.__value_.__r.__words[2] + 3);
  int v9 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
  if (v2)
  {
    sub_1000AE4B0(&__dst, "");
    sub_100157138("Unexpected attempt to start logging that is already logging: ", &v21);
    if (v9 < 0)
    {
      sub_1000559FC(&__p, (void *)v8, *((unint64_t *)&v8 + 1));
    }
    else
    {
      long long __p = v8;
      *(_DWORD *)std::string v23 = v16[0];
      *(_DWORD *)&v23[3] = *(_DWORD *)((char *)v16 + 3);
      char v24 = v9;
    }
    sub_10016A2C4((uint64_t)&__dst, (uint64_t)&v21, 2);
    if (v24 < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_32:
        if ((SHIBYTE(v20) & 0x80000000) == 0) {
          goto LABEL_33;
        }
LABEL_36:
        operator delete(__dst);
LABEL_33:
        sub_1000D11E0((uint64_t)&v17);
      }
    }
    else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v20) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_36;
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  (*(void (**)(char **__return_ptr, void *))(*a1 + 48))(&__dst, a1);
  int v10 = __dst;
  if ((__dst[31] & 0x80000000) == 0)
  {
    if (__dst[31]) {
      goto LABEL_16;
    }
LABEL_26:
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v21, "Log directory not specified before call to start logging");
    std::runtime_error::runtime_error(&v17, &v21);
    v17.__vftable = (std::runtime_error_vtbl *)&off_100453860;
    sub_10018E868((uint64_t)v15);
    sub_1000D1698(&v17, (uint64_t)"virtual void EventLogger::start()", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/logging/event_logger.cpp", 51, (uint64_t)v15);
  }
  if (!*((void *)__dst + 2)) {
    goto LABEL_26;
  }
LABEL_16:
  __dst[32] = 1;
  (*(void (**)(char *))(*(void *)v10 + 16))(v10);
  int v12 = __dst;
  long long v11 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = (std::__shared_weak_count *)a1[2];
  a1[1] = v12;
  a1[2] = v11;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v19;
  if (v19)
  {
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_10000EEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::runtime_error a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (v31 < 0)
  {
    operator delete(v30);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000F010(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1000559FC(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a1;
    uint64_t v20 = *(void *)(a1 + 16);
  }
  v21[0] = 0;
  v21[1] = 0;
  if (v20 >= 0) {
    size_t v4 = (void *)HIBYTE(v20);
  }
  else {
    size_t v4 = __p[1];
  }
  if (!v4)
  {
LABEL_37:
    if (a2)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v20;
    return;
  }
  uint64_t v5 = 0;
  unsigned int v6 = 32;
  while (1)
  {
    if (v20 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if (*((unsigned char *)v7 + v5) != 37) {
      goto LABEL_32;
    }
    if (v6 == 32)
    {
      int v8 = open("/dev/urandom", 0x1000000);
      if (v8 != -1 || (int v8 = open("/dev/random", 0x1000000), v8 != -1))
      {
        unint64_t v9 = 0;
        int v10 = v21;
        while (1)
        {
          ssize_t v11 = read(v8, v10, 16 - v9);
          if (v11 == -1)
          {
            uint64_t v12 = *__error();
            if (v12 != 4)
            {
              close(v8);
              goto LABEL_35;
            }
          }
          else
          {
            v9 += v11;
            int v10 = (void *)((char *)v10 + v11);
          }
          if (v9 >= 0x10)
          {
            close(v8);
            goto LABEL_23;
          }
        }
      }
      uint64_t v12 = *__error();
LABEL_35:
      if (v12) {
        sub_1000ADA6C(v12, (uint64_t)a2, (uint64_t)"boost::filesystem::unique_path");
      }
LABEL_23:
      if (!a2 || (uint64_t v13 = a2[2], (v13 & 1) == 0))
      {
        unsigned int v6 = 0;
        goto LABEL_28;
      }
      if (v13 != 1) {
        break;
      }
      unsigned int v6 = *(_DWORD *)a2;
      if (*(_DWORD *)a2) {
        break;
      }
    }
LABEL_28:
    unsigned int v14 = *((char *)v21 + ((unint64_t)v6 >> 1));
    char v15 = 4 * (v6++ & 1);
    char v16 = a0123456789abcd[(v14 >> v15) & 0xFLL];
    if (v20 >= 0) {
      std::runtime_error v17 = __p;
    }
    else {
      std::runtime_error v17 = (void **)__p[0];
    }
    *((unsigned char *)v17 + v5) = v16;
LABEL_32:
    if ((void *)++v5 == v4) {
      goto LABEL_37;
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10000F274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_10000F300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000F318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

sqlite3 **sub_10000F32C(sqlite3 **a1)
{
  if (!*a1) {
    return a1;
  }
  if (qword_10047BF08 == -1)
  {
    int v2 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  dispatch_once(&qword_10047BF08, &stru_100463950);
  int v2 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO))
  {
LABEL_4:
    size_t v3 = *a1;
    size_t v4 = sqlite3_db_filename(*a1, "main");
    int v9 = 134218242;
    int v10 = v3;
    __int16 v11 = 2080;
    uint64_t v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Closing sqlite handle %p. main = %s", (uint8_t *)&v9, 0x16u);
  }
LABEL_5:
  int v5 = sqlite3_close(*a1);
  int v6 = v5;
  if (v5)
  {
    sub_100088644(v5, *a1);
    if (qword_10047BF08 != -1)
    {
      dispatch_once(&qword_10047BF08, &stru_100463950);
      uint64_t v7 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
        return a1;
      }
      goto LABEL_8;
    }
    uint64_t v7 = qword_10047BF10;
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
    {
LABEL_8:
      int v9 = 67109120;
      LODWORD(v10) = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error closing db (error %d)", (uint8_t *)&v9, 8u);
    }
  }
  return a1;
}

void sub_10000F4E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000A6954(a1);
}

void sub_10000F4F0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000559FC(&__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long __dst = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 16);
  }
  char v5 = 16;
  strcpy(__p, ".protoToFile-tmp");
  sub_1000535A8((uint64_t)&__dst, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(*(void **)__p);
  }
  sub_100052B3C((uint64_t)&__dst, 2, 0x1A4u, &v6);
  wireless_diagnostics::google::protobuf::io::FileOutputStream::FileOutputStream((wireless_diagnostics::google::protobuf::io::FileOutputStream *)__p, v6, -1);
  sub_1000A40A0(a1);
  wireless_diagnostics::google::protobuf::io::FileOutputStream::~FileOutputStream((wireless_diagnostics::google::protobuf::io::FileOutputStream *)__p);
  sub_100052AEC(&v6);
  sub_100002D10((uint64_t)&__dst, a2, 0);
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_10000F5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((*(char *)(v14 - 25) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)(v14 - 48));
  _Unwind_Resume(exception_object);
}

id sub_10000F66C(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    unsigned __int8 v22 = sub_10009D1E8();
    uint64_t v23 = v2;
    size_t v3 = (const char *)[v1 UTF8String];
    size_t v4 = strlen(v3);
    if (v4 > 0x7FFFFFFFFFFFFFF7) {
      sub_1000A6968();
    }
    size_t v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v12 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v12 = v4 | 7;
      }
      uint64_t v13 = v12 + 1;
      p_dst = (void **)operator new(v12 + 1);
      size_t v20 = v5;
      unint64_t v21 = v13 | 0x8000000000000000;
      long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v21) = v4;
      p_dst = (void **)&__dst;
      if (!v4)
      {
LABEL_17:
        *((unsigned char *)p_dst + v5) = 0;
        sub_10001D078((uint64_t)&v22, (uint64_t)&__dst, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        goto LABEL_27;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_17;
  }
  unsigned __int8 v22 = sub_10009D1E8();
  uint64_t v23 = v7;
  if (byte_10047ECA7 >= 0) {
    uint64_t v8 = (const char *)&qword_10047EC90;
  }
  else {
    uint64_t v8 = (const char *)qword_10047EC90;
  }
  size_t v9 = strlen(v8);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    sub_1000A6968();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    __int16 v11 = (void **)operator new(v15 + 1);
    size_t v20 = v10;
    unint64_t v21 = v16 | 0x8000000000000000;
    long long __dst = v11;
    goto LABEL_23;
  }
  HIBYTE(v21) = v9;
  __int16 v11 = (void **)&__dst;
  if (v9) {
LABEL_23:
  }
    memmove(v11, v8, v10);
  *((unsigned char *)v11 + v10) = 0;
  sub_10001D078((uint64_t)&v22, (uint64_t)&__dst, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
LABEL_27:
  std::runtime_error v17 = +[NSString stringWithUTF8String:p_p];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(__dst);
LABEL_29:

  return v17;
}

void sub_10000F8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, long long a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, long long __p, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete((void *)__p);
  }
  if (a14 < 0)
  {
    operator delete((void *)a10);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10000F988(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10045A4E8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  size_t v4 = (std::string *)(a1 + 32);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 60) &= 0xF8u;
  if (a1 != a2) {
    sub_10007A09C((uint64_t *)(a1 + 8), *(void **)(a2 + 8), (void *)(a2 + 16));
  }
  std::string::operator=(v4, (const std::string *)(a2 + 32));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  return a1;
}

void sub_10000FA3C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  sub_100075BE0(v2, *v4);
  _Unwind_Resume(a1);
}

void sub_10000FA64(uint64_t a1)
{
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v1 = *(id *)(*(void *)(a1 + 32) + 48);
  uint64_t v2 = (char *)[v1 countByEnumeratingWithState:&v5 objects:v9 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v6;
    do
    {
      size_t v4 = 0;
      do
      {
        if (*(void *)v6 != v3) {
          objc_enumerationMutation(v1);
        }
        WiFiDeviceClientRegisterScanUpdateCallback();
        ++v4;
      }
      while (v2 != v4);
      uint64_t v2 = (char *)[v1 countByEnumeratingWithState:&v5 objects:v9 count:16];
    }
    while (v2);
  }
}

void sub_10000FB78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000FB98(void *a1, const std::string *a2)
{
  sub_100056B28((const char *)a2, 0, (int *)&v11);
  if (v11 <= 1)
  {
    __cxa_allocate_exception(0x40uLL);
    std::logic_error::logic_error(&v10, "Path given to logger doesn't exist");
    sub_10018E868((uint64_t)v9);
    sub_1000D8F04(&v10, (uint64_t)"virtual void EventLogger::setLogDirectory(const fs::path &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/logging/event_logger.cpp", 19, (uint64_t)v9);
  }
  sub_100056B28((const char *)a2, 0, (int *)&v11);
  if (v11 != 3)
  {
    __cxa_allocate_exception(0x40uLL);
    std::logic_error::logic_error(&v10, "Path given to logger isn't a directory");
    sub_10018E868((uint64_t)v8);
    sub_1000D8F04(&v10, (uint64_t)"virtual void EventLogger::setLogDirectory(const fs::path &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/logging/event_logger.cpp", 24, (uint64_t)v8);
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 48))(&v11, a1);
  if (sub_10004008C((unint64_t)a2, v11 + 8))
  {
    std::string::operator=((std::string *)(v11 + 8), a2);
    uint64_t v4 = v11;
    if (*(unsigned char *)(v11 + 32))
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
      uint64_t v4 = v11;
    }
    long long v5 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v6 = (std::__shared_weak_count *)a1[2];
    a1[1] = v4;
    a1[2] = v5;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  long long v7 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_10000FEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::invalid_argument a22,std::invalid_argument a23)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_1000D924C(&a23);
  if (a9)
  {
    operator delete(a9);
    std::invalid_argument::~invalid_argument(&a22);
    if (v24)
    {
LABEL_8:
      __cxa_free_exception(v23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::invalid_argument::~invalid_argument(&a22);
    if (v24) {
      goto LABEL_8;
    }
  }
  _Unwind_Resume(a1);
}

void *sub_10000FFE0(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10046BD80;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000559FC(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }
  a1[3] = off_10046BDD0;
  uint64_t v3 = a1 + 4;
  if ((SHIBYTE(v6) & 0x80000000) == 0)
  {
    *(_OWORD *)uint64_t v3 = *(_OWORD *)__p;
    a1[6] = v6;
    return a1;
  }
  sub_1000559FC(v3, __p[0], (unint64_t)__p[1]);
  if ((SHIBYTE(v6) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(__p[0]);
  return a1;
}

void sub_1000100C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::__shared_weak_count::~__shared_weak_count(v14);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_1000100F8(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = a2[7];
  unsigned int v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    void *exception = off_100454818;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  int v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(void *)a2 + 32))(a2, "SurveySdkData");
  int v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "customProperties", 13, 1)+ v6;
  int v8 = v7
     + (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, void))(*(void *)a2 + 72))(a2, 11, 11, *(unsigned int *)(a1 + 24));
  size_t v9 = *(void **)(a1 + 8);
  if (v9 != (void *)(a1 + 16))
  {
    do
    {
      int v20 = (*(uint64_t (**)(_DWORD *, void *))(*(void *)a2 + 168))(a2, v9 + 4);
      int v21 = (*(uint64_t (**)(_DWORD *, void *))(*(void *)a2 + 168))(a2, v9 + 7);
      unsigned __int8 v22 = (void *)v9[1];
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          unsigned __int8 v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = (void *)v9[2];
          BOOL v24 = *v23 == (void)v9;
          size_t v9 = v23;
        }
        while (!v24);
      }
      v8 += v20 + v21;
      size_t v9 = v23;
    }
    while (v23 != (void *)(a1 + 16));
  }
  int v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 80))(a2) + v8;
  int v11 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v12 = v10
      + v11
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "surveyorId", 11, 2);
  int v13 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 168))(a2, a1 + 32);
  int v14 = v13 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v15 = v12
      + v14
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "specifiedSurveyType", 8, 3);
  int v16 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 144))(a2, *(unsigned int *)(a1 + 56));
  int v17 = v16 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v18 = v17 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 64))(a2);
  uint64_t result = v15 + v18 + (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_1000104DC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned int v3 = (int *)(a1 + 64);
  uint64_t v4 = (uint64_t *)(a1 + 8);
  long long v5 = (char *)operator new(0x1AD8uLL);
  uint64_t result = sub_100042904((uint64_t)v5, v3, v4);
  *a2 = v5 + 24;
  a2[1] = v5;
  return result;
}

void sub_10001052C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100010540(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v7 = a2;
  long long v5 = sub_10001CB4C(a1);
  int v6 = sub_10000F66C(v7);
  sub_100014280(a3, v5, v6);
}

void sub_1000105C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000105EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000107FC()
{
}

void sub_100010828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100010838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    sub_1003A7508(a10);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_100010B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_100010C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100010D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100010D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000110D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1000111D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100011360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001137C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_100011394(void *a1)
{
  *a1 = off_100457DC8;
  wireless_diagnostics::google::protobuf::internal::ExtensionSet::ExtensionSet((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 4));
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void sub_1000113F8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_100011414(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_100011428(uint64_t a1)
{
  unsigned int v2 = *(sqlite3_stmt **)a1;
  if (!v2) {
    return;
  }
  unsigned int v3 = sqlite3_sql(v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = "<unknown query>";
  }
  size_t v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    long long __dst = p_dst;
    unint64_t v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5) {
LABEL_12:
  }
    memmove(p_dst, v4, v6);
  *((unsigned char *)p_dst + v6) = 0;
  int v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_10047BF08 != -1)
    {
      dispatch_once(&qword_10047BF08, &stru_100460658);
      int v11 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    int v11 = qword_10047BF10;
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)uint64_t buf = 67240192;
      int v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(void *)a1 = 0;
  int v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(void *)(a1 + 16) = 0;
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst);
  }
}

void sub_1000115E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100011730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100011758(void *a1@<X8>)
{
  id v9 = +[DarwinDeviceInfo currentDevice];
  id v2 = [v9 osVersion];
  unsigned int v3 = (const char *)[v2 UTF8String];
  size_t v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
    goto LABEL_8;
  }
  *((unsigned char *)a1 + 23) = v4;
  if (v4) {
LABEL_8:
  }
    memmove(a1, v3, v5);
  *((unsigned char *)a1 + v5) = 0;
}

void sub_10001184C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100011860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100011878(uint64_t a1, std::string *a2)
{
  long long v23 = 0u;
  long long v24 = 0u;
  memset(v22, 0, sizeof(v22));
  std::streambuf::basic_streambuf();
  *(_OWORD *)std::string __p = 0u;
  long long v26 = 0u;
  uint64_t v27 = 24;
  *(void *)&long long v23 = 0;
  v22[0].n128_u64[0] = (unint64_t)off_100453E60;
  std::ios_base::init(&v29, v22);
  uint64_t v30 = 0;
  int v31 = -1;
  uint64_t v33 = (char *)&v32;
  v34 = (char *)&v32 + 2;
  sub_100002E00(v22, a1);
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v7 = v33;
    uint64_t v6 = v34;
    unint64_t v8 = v34 - v33;
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v12 = a2->__r_.__value_.__r.__words[2];
      std::string::size_type v11 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v11 >= v8)
      {
        unint64_t v13 = HIBYTE(v12);
LABEL_9:
        if ((v13 & 0x80u) == 0) {
          id v9 = a2;
        }
        else {
          id v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
        }
LABEL_12:
        if (v7 == v6)
        {
          unint64_t v14 = v9;
        }
        else
        {
          if (v8 < 0x20 || (unint64_t)((char *)v9 - v7) < 0x20)
          {
            unint64_t v14 = v9;
            int v15 = v7;
          }
          else
          {
            unint64_t v14 = (std::string *)((char *)v9 + (v8 & 0xFFFFFFFFFFFFFFE0));
            int v15 = &v7[v8 & 0xFFFFFFFFFFFFFFE0];
            int v16 = (long long *)(v7 + 16);
            int v17 = &v9->__r_.__value_.__r.__words[2];
            unint64_t v18 = v8 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v19 = *v16;
              *((_OWORD *)v17 - 1) = *(v16 - 1);
              *(_OWORD *)int v17 = v19;
              v16 += 2;
              v17 += 4;
              v18 -= 32;
            }
            while (v18);
            if (v8 == (v8 & 0xFFFFFFFFFFFFFFE0)) {
              goto LABEL_22;
            }
          }
          do
          {
            std::string::value_type v20 = *v15++;
            v14->__r_.__value_.__s.__data_[0] = v20;
            unint64_t v14 = (std::string *)((char *)v14 + 1);
          }
          while (v15 != v6);
        }
LABEL_22:
        v14->__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
          a2->__r_.__value_.__l.__size_ = v8;
        }
        else {
          *((unsigned char *)&a2->__r_.__value_.__s + 23) = v8 & 0x7F;
        }
        goto LABEL_25;
      }
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    else
    {
      id v9 = a2;
      if (v8 <= 0x16) {
        goto LABEL_12;
      }
      std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      std::string::size_type v11 = 22;
    }
    std::string::__grow_by(a2, v11, v8 - v11, size, 0, size, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v13) = *((unsigned char *)&a2->__r_.__value_.__s + 23);
    goto LABEL_9;
  }
LABEL_25:
  std::ostream::~ostream();
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  return v5;
}

void sub_100011ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100011AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100011B04(void *a1)
{
}

void sub_100011C18()
{
  operator delete();
}

void sub_100011C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100011C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100011F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100011FE4(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X2>, void *a4@<X8>)
{
  unsigned int v10 = a2;
  id v9 = objc_alloc_init((Class)NSOperationQueue);
  [v9 setName:@"Sensor Listener Queue"];
  [v9 setMaxConcurrentOperationCount:1];
  sub_1000A1824();
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = operator new(0x78uLL);
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = off_100469A10;
  sub_1000974A0((uint64_t)&v11, (uint64_t)(v7 + 3), a1 + 8, (uint64_t *)&v8, (uint64_t *)&v9, &v10, a3);
  *a4 = v7 + 3;
  a4[1] = v7;
}

void sub_1000120C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);

  _Unwind_Resume(a1);
}

void sub_1000120F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100012108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000123BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1000123D4(void *result)
{
  id v1 = result;
  uint64_t v2 = result[3];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  uint64_t v4 = result[4];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    operator delete();
  }
  uint64_t v6 = result[5];
  if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    operator delete();
  }
  uint64_t v8 = result[7];
  if ((_UNKNOWN *)v8 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    operator delete();
  }
  if ((void *)qword_10047EB20 != result)
  {
    uint64_t v10 = result[2];
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t result = (void *)v1[8];
    if (result)
    {
      char v11 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v11();
    }
  }
  return result;
}

void sub_1000125AC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 48) objectAtIndexedSubscript:a2];

  os_activity_scope_enter(*(os_activity_t *)(a1 + 40), &state);
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    [v6 initiateScanOnDevice:v4 withSettings:*(void *)(a1 + 48) deviceNumber:a2];
    uint64_t v7 = *(uint64_t **)(a1 + 56);
    uint64_t v8 = *v7;
    if (a2 < (v7[1] - *v7) >> 3) {
      goto LABEL_3;
    }
LABEL_9:
    sub_1001F352C();
  }
  unint64_t v13 = 0;
  unint64_t v12 = *(uint64_t **)(a1 + 56);
  uint64_t v8 = *v12;
  if (a2 >= (v12[1] - *v12) >> 3) {
    goto LABEL_9;
  }
LABEL_3:
  id v9 = v13;
  unint64_t v13 = 0;
  uint64_t v10 = *(id **)(v8 + 8 * a2);
  *(void *)(v8 + 8 * a2) = v9;
  if (v10)
  {
    sub_100338BB4(v10);
    operator delete();
  }
  char v11 = v13;
  unint64_t v13 = 0;
  if (v11)
  {
    sub_100338BB4(v11);
    operator delete();
  }
  os_activity_scope_leave(&state);
}

void sub_1000126CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10)
{
  if (a10) {
    sub_1003A741C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000126E8(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 6744);
  *(void *)a1 = off_100459DA8;
  if (*(unsigned char *)(a1 + 32))
  {
    dispatch_barrier_sync(*(dispatch_queue_t *)(a1 + 6736), &stru_100459E10);
    dispatch_semaphore_t v3 = dispatch_semaphore_create(0);
    dispatch_semaphore_t v4 = v3;
    if (*v2)
    {
      uint64_t v5 = *(void **)(a1 + 6752);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3321888768;
      _DWORD v16[2] = sub_10015F0F4;
      v16[3] = &unk_100459E30;
      uint64_t v6 = v3;
      int v17 = v6;
      [v5 finishWritingWithCompletionHandler:v16];

      dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    }
    if (v2[32])
    {
      uint64_t v7 = *(void **)(a1 + 6784);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10015F130;
      v14[3] = &unk_1004527B8;
      uint64_t v8 = v4;
      int v15 = v8;
      [v7 finishWritingWithCompletionHandler:v14];
      dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
    }
    if (v2[64])
    {
      id v9 = *(void **)(a1 + 6816);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_10015F138;
      v12[3] = &unk_1004527B8;
      uint64_t v10 = v4;
      unint64_t v13 = v10;
      [v9 finishWritingWithCompletionHandler:v12];
      dispatch_semaphore_wait(v10, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
  if (v2[64])
  {

    v2[64] = 0;
  }
  if (v2[32])
  {

    v2[32] = 0;
  }
  if (*v2)
  {

    *uint64_t v2 = 0;
  }

  sub_1000129A0(a1 + 4576);
  sub_100012B94(a1 + 40);
  *(void *)a1 = off_100459DF8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1000129A0(uint64_t a1)
{
  sub_100012B90(a1 + 2080);
  sub_100012B90(a1 + 2000);
  sub_100012B90(a1 + 1920);
  sub_100012B90(a1 + 1840);
  sub_100012B90(a1 + 1760);
  sub_100012B90(a1 + 1680);
  sub_100012B90(a1 + 1600);
  sub_100012B90(a1 + 1520);
  sub_100012B90(a1 + 1440);
  sub_100012B90(a1 + 1360);
  sub_100012B90(a1 + 1280);
  sub_100012B90(a1 + 1200);
  sub_100012B90(a1 + 1120);
  sub_100012B90(a1 + 1040);
  sub_100012B90(a1 + 960);
  sub_100012B90(a1 + 880);
  sub_100012B90(a1 + 800);
  sub_100012B90(a1 + 720);
  sub_100012B90(a1 + 640);
  sub_100012B90(a1 + 560);
  sub_100012B90(a1 + 480);
  sub_100012B90(a1 + 400);
  sub_100012B90(a1 + 320);
  sub_100012B90(a1 + 240);
  sub_100012B90(a1 + 160);
  sub_100012B90(a1 + 80);

  return sub_100012B90(a1);
}

uint64_t sub_100012AA4(uint64_t a1)
{
  uint64_t v2 = *(wireless_diagnostics::google::protobuf::io::FileOutputStream **)(a1 + 48);
  if (v2) {
    wireless_diagnostics::google::protobuf::io::FileOutputStream::Flush(v2);
  }
  dispatch_semaphore_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  dispatch_semaphore_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100012B94(uint64_t a1)
{
  sub_100012E68(a1 + 4368);
  sub_100012E68(a1 + 4200);
  sub_100012E68(a1 + 4032);
  sub_100012E68(a1 + 3864);
  sub_100012E68(a1 + 3696);
  sub_100012E68(a1 + 3528);
  sub_100012E68(a1 + 3360);
  sub_100012E68(a1 + 3192);
  sub_100012E68(a1 + 3024);
  sub_100012E68(a1 + 2856);
  sub_100012E68(a1 + 2688);
  sub_100012E68(a1 + 2520);
  sub_100012E68(a1 + 2352);
  sub_100012E68(a1 + 2184);
  sub_100012E68(a1 + 2016);
  sub_100012E68(a1 + 1848);
  sub_100012E68(a1 + 1680);
  sub_100012E68(a1 + 1512);
  sub_100012E68(a1 + 1344);
  sub_100012E68(a1 + 1176);
  sub_100012E68(a1 + 1008);
  sub_100012E68(a1 + 840);
  sub_100012E68(a1 + 672);
  sub_100012E68(a1 + 504);
  sub_100012E68(a1 + 336);
  sub_100012E68(a1 + 168);

  return sub_100012E68(a1);
}

uint64_t sub_100012CA0(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    std::ostream::flush();
  }
  if (*(unsigned char *)(a1 + 72))
  {
    *(void *)(a1 + 80) = off_1004594E8;
    uint64_t v2 = *(void **)(a1 + 136);
    if (v2)
    {
      free(v2);
      *(_DWORD *)(a1 + 144) = 0;
    }
    *(void *)(a1 + 80) = off_100454688;
    dispatch_semaphore_t v3 = *(atomic_uint **)(a1 + 96);
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    *(unsigned char *)(a1 + 72) = 0;
  }
  dispatch_semaphore_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

id sub_100012E6C(uint64_t a1, id *a2)
{
  if (qword_10047BEF8 != -1) {
    dispatch_once(&qword_10047BEF8, &stru_10046B230);
  }
  dispatch_semaphore_t v4 = (id)qword_10047BF00;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = [*a2 count];
    int v7 = 134349056;
    id v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CLIndoorProvider] startUpdatingLocationAtLocation. Universe was updated, start requesting %{public}lu venues", (uint8_t *)&v7, 0xCu);
  }

  id result = [*a2 count];
  if (result) {
    return [**(id **)(a1 + 32) setSet:*a2];
  }
  return result;
}

void sub_100012F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_100012F80(uint64_t a1)
{
  sub_1000045C8(a1, &__p);
  sub_100056B28((const char *)&__p, 0, (int *)&v9);
  if (v9 <= 1)
  {
    uint64_t v4 = 0;
    unint64_t v3 = 0;
    uint64_t v5 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
    }
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_10009FF20(&v9, &__p, 294914, 0);
    if (qword_10047BF08 != -1) {
      dispatch_once(&qword_10047BF08, &stru_100460658);
    }
    id v1 = (id)qword_10047BF10;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      sub_100056B28((const char *)&__p, 0, v7);
      *(_DWORD *)uint64_t buf = 67109120;
      int v11 = v7[1];
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "db permissions = %x", buf, 8u);
    }

    uint64_t v2 = sub_100027898(&v9);
    LODWORD(v5) = v2;
    unint64_t v3 = v2 & 0xFFFFFFFF00000000;
    sub_10009FF1C(&v9);
    uint64_t v4 = v5 & 0xFFFFFF00;
    uint64_t v5 = v5;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_9;
    }
  }
  return v3 | v4 | v5;
}

void sub_1000130F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_10009FF1C(&a17);
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10001313C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000131DC(a1, (uint64_t)&__p);
  sub_100020B9C("|", (char *)&__p, a2);
  unint64_t v3 = (void **)__p;
  if (__p)
  {
    uint64_t v4 = v7;
    uint64_t v5 = __p;
    if (v7 != __p)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      uint64_t v5 = __p;
    }
    int v7 = v3;
    operator delete(v5);
  }
}

void sub_1000131C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000E0AA4((void **)va);
  _Unwind_Resume(a1);
}

void sub_1000131DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  for (i = *(uint64_t **)(a1 + 32); i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 1015) < 0)
    {
      sub_1000559FC(__p, (void *)i[124], i[125]);
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)i + 62);
      uint64_t v10 = i[126];
    }
    char v4 = HIBYTE(v10);
    if (SHIBYTE(v10) < 0)
    {
      int v5 = *(unsigned __int8 *)__p[0];
      if (v5 == 71)
      {
        unint64_t v6 = *(void *)(a2 + 8);
        if (v6 < *(void *)(a2 + 16)) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
    }
    else
    {
      int v5 = LOBYTE(__p[0]);
      if (LOBYTE(__p[0]) == 71)
      {
        unint64_t v6 = *(void *)(a2 + 8);
        if (v6 < *(void *)(a2 + 16)) {
          goto LABEL_17;
        }
        goto LABEL_18;
      }
    }
    if (v5 != 76)
    {
      unint64_t v6 = *(void *)(a2 + 8);
      if (v6 < *(void *)(a2 + 16))
      {
        if ((SHIBYTE(v10) & 0x80000000) == 0)
        {
LABEL_17:
          long long v7 = *(_OWORD *)__p;
          *(void *)(v6 + 16) = v10;
          *(_OWORD *)unint64_t v6 = v7;
          goto LABEL_20;
        }
LABEL_19:
        sub_1000559FC((unsigned char *)v6, __p[0], (unint64_t)__p[1]);
LABEL_20:
        id v8 = (char *)(v6 + 24);
        *(void *)(a2 + 8) = v6 + 24;
LABEL_21:
        *(void *)(a2 + 8) = v8;
        char v4 = HIBYTE(v10);
        goto LABEL_22;
      }
LABEL_18:
      id v8 = sub_100013348((char **)a2, (uint64_t)__p);
      goto LABEL_21;
    }
LABEL_22:
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100013304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 8) = v15;
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1000E0AA4((void **)v14);
    _Unwind_Resume(a1);
  }
  sub_1000E0AA4((void **)v14);
  _Unwind_Resume(a1);
}

char *sub_100013348(char **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  char v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1000A9108();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_1000A6A10();
    }
    id v9 = (char *)operator new(24 * v8);
  }
  else
  {
    id v9 = 0;
  }
  uint64_t v10 = &v9[24 * v5];
  int v16 = v10;
  int v17 = v10;
  unint64_t v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000559FC(v10, *(void **)a2, *(void *)(a2 + 8));
    unint64_t v3 = *a1;
    char v4 = a1[1];
    uint64_t v10 = v16;
    int v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      unint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
    int v11 = v10 + 24;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    *((void *)v10 - 1) = *((void *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  unint64_t v13 = *a1;
  unint64_t v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    uint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    unint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_10001350C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000E2848((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000138EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000138FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001390C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001391C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001392C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10001393C(void *a1, uint64_t *a2)
{
  char v4 = (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::fmtflags fmtflags = v4->__fmtflags_;
  rduint64_t buf = (uint64_t)v4->__rdbuf_;
  std::ios_base::getloc(v4);
  BOOL has_facet = std::locale::has_facet(&v14, &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::id);
  std::locale::~locale(&v14);
  if (!has_facet) {
    operator new();
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  unint64_t v8 = std::locale::use_facet(&v13, &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::id);
  id v9 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::fmtflags v10 = v9[1].__fmtflags_;
  if (v10 == -1)
  {
    std::ios_base::getloc(v9);
    int v11 = std::locale::use_facet(&v14, &std::ctype<char>::id);
    std::ios_base::fmtflags v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
    std::locale::~locale(&v14);
    v9[1].__fmtflags_ = v10;
  }
  sub_10002DF5C((uint64_t)v8, rdbuf, v9, (char)v10, a2);
  std::locale::~locale(&v13);
  v4->__fmtflags_ = fmtflags;
  return a1;
}

void sub_100013C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, std::locale a11, std::locale a12)
{
  std::locale::~locale(&a12);
  std::locale::~locale(&a10);
  *(_DWORD *)(v12 + 8) = v13;
  _Unwind_Resume(a1);
}

void sub_100013CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  std::locale::~locale(&a11);
  *(_DWORD *)(v11 + 8) = v12;
  _Unwind_Resume(a1);
}

void sub_1000141A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19, char a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a19);
  if (a18 < 0) {
    operator delete(a13);
  }
  sub_1000BA884((uint64_t)&a20);

  _Unwind_Resume(a1);
}

uint64_t sub_100014280(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  std::operator+<char>();
  *(void *)(a1 + 24) = 0;
  id v7 = v5;
  *(void *)(a1 + 32) = v7;
  id v8 = objc_alloc_init((Class)NSURLComponents);
  id v9 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v8;

  [*(id *)(a1 + 24) setPath:v6];
  return a1;
}

void sub_100014314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100014328(_Unwind_Exception *a1)
{
  if (*(char *)(v3 + 23) < 0) {
    operator delete(*(void **)v3);
  }

  _Unwind_Resume(a1);
}

void sub_10001447C()
{
  operator delete();
}

void sub_1000144A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000144BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1000144CC(void *a1, int a2, char *__s, const char *a4, const char *a5, const char *a6)
{
  *(_DWORD *)a1 = a2;
  uint64_t v11 = a1 + 1;
  size_t v12 = strlen(__s);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_1000A6968();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    std::locale v14 = operator new(v15 + 1);
    a1[2] = v13;
    a1[3] = v16 | 0x8000000000000000;
    a1[1] = v14;
    goto LABEL_8;
  }
  *((unsigned char *)a1 + 31) = v12;
  std::locale v14 = v11;
  if (v12) {
LABEL_8:
  }
    memmove(v14, __s, v13);
  *((unsigned char *)v14 + v13) = 0;
  size_t v17 = strlen(a4);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    sub_1000A6968();
  }
  size_t v18 = v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    long long v19 = operator new(v20 + 1);
    a1[5] = v18;
    a1[6] = v21 | 0x8000000000000000;
    a1[4] = v19;
    goto LABEL_16;
  }
  *((unsigned char *)a1 + 55) = v17;
  long long v19 = a1 + 4;
  if (v17) {
LABEL_16:
  }
    memmove(v19, a4, v18);
  *((unsigned char *)v19 + v18) = 0;
  size_t v22 = strlen(a5);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    sub_1000A6968();
  }
  size_t v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    long long v24 = operator new(v25 + 1);
    a1[8] = v23;
    a1[9] = v26 | 0x8000000000000000;
    a1[7] = v24;
    goto LABEL_24;
  }
  *((unsigned char *)a1 + 79) = v22;
  long long v24 = a1 + 7;
  if (v22) {
LABEL_24:
  }
    memmove(v24, a5, v23);
  *((unsigned char *)v24 + v23) = 0;
  uint64_t v27 = a1 + 10;
  size_t v28 = strlen(a6);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    sub_1000A6968();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v30 = v28 | 7;
    }
    uint64_t v31 = v30 + 1;
    uint64_t v27 = operator new(v30 + 1);
    a1[11] = v29;
    a1[12] = v31 | 0x8000000000000000;
    a1[10] = v27;
  }
  else
  {
    *((unsigned char *)a1 + 103) = v28;
    if (!v28) {
      goto LABEL_33;
    }
  }
  memmove(v27, a6, v29);
LABEL_33:
  *((unsigned char *)v27 + v29) = 0;
  return a1;
}

void sub_100014724(_Unwind_Exception *exception_object)
{
  if (v1[79] < 0)
  {
    operator delete(*v4);
    if ((v1[55] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[31] & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((v1[55] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v1[31] & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100014938()
{
}

void sub_100014968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100014980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100014998(uint64_t a1)
{
  *(void *)a1 = off_10046A518;
  *(void *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_10046A580);
    uint64_t v2 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      return a1;
    }
    goto LABEL_3;
  }
  uint64_t v2 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    int v4 = 134217984;
    uint64_t v5 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Creating sensor %p", (uint8_t *)&v4, 0xCu);
  }
  return a1;
}

void sub_100014B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *sub_100014B6C(int a1, char *__s, char *a3, uint64_t a4)
{
  uint64_t v5 = __s;
  if (__s != a3)
  {
    while (1)
    {
      size_t v8 = strlen(v5);
      if (v8 >= 0x7FFFFFFFFFFFFFF8) {
        sub_1000A6968();
      }
      size_t v9 = v8;
      if (v8 >= 0x17)
      {
        uint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v12 = v8 | 7;
        }
        uint64_t v13 = v12 + 1;
        p_dst = (long long *)operator new(v12 + 1);
        *((void *)&__dst + 1) = v9;
        unint64_t v18 = v13 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v18) = v8;
        p_dst = &__dst;
        if (!v8)
        {
          LOBYTE(__dst) = 0;
          unint64_t v11 = *(void *)(a4 + 8);
          if (v11 >= *(void *)(a4 + 16)) {
            goto LABEL_14;
          }
          goto LABEL_3;
        }
      }
      memcpy(p_dst, v5, v9);
      *((unsigned char *)p_dst + v9) = 0;
      unint64_t v11 = *(void *)(a4 + 8);
      if (v11 >= *(void *)(a4 + 16))
      {
LABEL_14:
        std::locale v14 = sub_10008CF94((void **)a4, (uint64_t)&__dst);
        int v15 = SHIBYTE(v18);
        *(void *)(a4 + 8) = v14;
        if (v15 < 0) {
          operator delete((void *)__dst);
        }
        goto LABEL_4;
      }
LABEL_3:
      long long v7 = __dst;
      *(void *)(v11 + 16) = v18;
      *(_OWORD *)unint64_t v11 = v7;
      *(void *)(a4 + 8) = v11 + 24;
LABEL_4:
      v5 += 17;
      if (v5 == a3) {
        return a3;
      }
    }
  }
  return (char *)v5;
}

void sub_100014CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100014D8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::string::size_type v10 = *(void *)(a2 + 8);
  v28[0].__r_.__value_.__r.__words[0] = *(void *)a2;
  v28[0].__r_.__value_.__l.__size_ = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000771DC((uint64_t)&v28[0].__r_.__value_.__r.__words[2], a2 + 16);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v29 = *(void *)(a2 + 56);
  uint64_t v30 = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  char v31 = *(unsigned char *)(a2 + 72);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000559FC(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a3;
    uint64_t v27 = *(void *)(a3 + 16);
  }
  sub_1000A4B48((uint64_t)v33, v28, (uint64_t)__dst);
  uint64_t v12 = (std::__shared_weak_count *)operator new(0x38uLL);
  sub_10000FFE0(v12, a4);
  long long v24 = &v12[1].__vftable;
  uint64_t v25 = v12;
  uint64_t v22 = 0;
  size_t v23 = 0;
  v18[0] = off_10045A4C8;
  v18[1] = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  v21 &= 0xF0u;
  sub_10009DB0C((uint64_t)v32, a1, (uint64_t)v33, (uint64_t)&v24, 4, 2, (uint64_t)v18);
  nullsub_35(v18);
  uint64_t v13 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  std::locale v14 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  sub_100002528((uint64_t)&v44);
  if (v41)
  {
    if (v43 < 0) {
      operator delete(__p);
    }
    char v41 = 0;
  }
  if (v40 < 0)
  {
    operator delete(v39);
    if ((v38 & 0x80000000) == 0)
    {
LABEL_20:
      if ((v36 & 0x80000000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_27;
    }
  }
  else if ((v38 & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete(v37);
  if ((v36 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v34 & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_28:
    operator delete(v33[0]);
    if ((SHIBYTE(v27) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }
LABEL_27:
  operator delete(v35);
  if (v34 < 0) {
    goto LABEL_28;
  }
LABEL_22:
  if ((SHIBYTE(v27) & 0x80000000) == 0) {
    goto LABEL_23;
  }
LABEL_29:
  operator delete(__dst[0]);
LABEL_23:
  sub_1000748BC(v28);
  uint64_t v15 = sub_10009A6F8((uint64_t)v32);
  if (*(char *)(v15 + 23) < 0)
  {
    sub_1000559FC((unsigned char *)a5, *(void **)v15, *(void *)(v15 + 8));
  }
  else
  {
    long long v16 = *(_OWORD *)v15;
    *(void *)(a5 + 16) = *(void *)(v15 + 16);
    *(_OWORD *)a5 = v16;
  }
  return sub_10000D76C((uint64_t)v32);
}

void sub_100015068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_1000748BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10001507C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_1000748BC(&a25);
  _Unwind_Resume(a1);
}

void sub_1000150E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_objecta, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a23)
  {
    sub_1003A8AE0(a23);
    _Unwind_Resume(exception_objecta);
  }
  _Unwind_Resume(exception_object);
}

void sub_100015110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

uint64_t sub_100015124(uint64_t a1, char *__s, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  *(void *)a1 = &off_10045D2B8;
  *(void *)(a1 + 8) = a6 - 1;
  uint64_t v11 = (void *)(a1 + 16);
  size_t v12 = strlen(__s);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    std::locale v14 = operator new(v15 + 1);
    *(void *)(a1 + 24) = v13;
    *(void *)(a1 + 32) = v16 | 0x8000000000000000;
    *(void *)(a1 + 16) = v14;
  }
  else
  {
    *(unsigned char *)(a1 + 39) = v12;
    std::locale v14 = v11;
    if (!v12) {
      goto LABEL_9;
    }
  }
  memmove(v14, __s, v13);
LABEL_9:
  *((unsigned char *)v14 + v13) = 0;
  *(unsigned char *)(a1 + 63) = 2;
  strcpy((char *)(a1 + 40), "%b");
  *(unsigned char *)(a1 + 87) = 2;
  strcpy((char *)(a1 + 64), "%a");
  sub_10009ED88(a1 + 88, a3);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  sub_100015648((char *)(a1 + 192), *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3));
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  sub_100015648((char *)(a1 + 216), *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  return a1;
}

void sub_1000152AC(_Unwind_Exception *a1)
{
  sub_1000E0AA4(v3);
  sub_1001905A8(v4);
  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*(void **)(v1 + 64));
    if ((*(char *)(v1 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 39) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 40));
  if ((*(char *)(v1 + 39) & 0x80000000) == 0)
  {
LABEL_4:
    std::locale::facet::~facet((std::locale::facet *)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(*v2);
  std::locale::facet::~facet((std::locale::facet *)v1);
  _Unwind_Resume(a1);
}

void sub_100015330(_Unwind_Exception *a1)
{
  std::locale::facet::~facet(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100015344(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  sub_10009ED88((uint64_t)v33, a3);
  uint64_t v30 = 0;
  char v31 = 0;
  uint64_t v32 = 0;
  sub_100015648((char *)&v30, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  std::string __p = 0;
  size_t v28 = 0;
  uint64_t v29 = 0;
  sub_100015648((char *)&__p, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3));
  sub_100015124(a1, a2, (uint64_t)v33, (uint64_t *)&v30, (uint64_t *)&__p, a6);
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    size_t v12 = v28;
    size_t v13 = __p;
    if (v28 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      size_t v13 = __p;
    }
    size_t v28 = v11;
    operator delete(v13);
  }
  std::locale v14 = (void **)v30;
  if (v30)
  {
    uint64_t v15 = v31;
    uint64_t v16 = v30;
    if (v31 != v30)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = v30;
    }
    char v31 = v14;
    operator delete(v16);
  }
  if (v41 < 0)
  {
    operator delete(v40);
    if ((v39 & 0x80000000) == 0)
    {
LABEL_19:
      if ((v37 & 0x80000000) == 0) {
        goto LABEL_20;
      }
LABEL_34:
      operator delete(v36);
      if ((v35 & 0x80000000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_35;
    }
  }
  else if ((v39 & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v38);
  if (v37 < 0) {
    goto LABEL_34;
  }
LABEL_20:
  if ((v35 & 0x80000000) == 0) {
    goto LABEL_21;
  }
LABEL_35:
  operator delete(v34);
LABEL_21:
  *(void *)a1 = off_10045D240;
  size_t v17 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[0];
  size_t v18 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[0]);
  if (v18 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  std::string::size_type v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v20 = (std::string *)operator new(v21 + 1);
    v26.__r_.__value_.__l.__size_ = v19;
    v26.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    goto LABEL_28;
  }
  *((unsigned char *)&v26.__r_.__value_.__s + 23) = v18;
  uint64_t v20 = &v26;
  if (v18) {
LABEL_28:
  }
    memmove(v20, v17, v19);
  v20->__r_.__value_.__s.__data_[v19] = 0;
  size_t v23 = std::string::append(&v26, boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::default_time_duration_format[0]);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(void *)(a1 + 352) = *((void *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 336) = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1000155D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_100003CA4(v21);
    _Unwind_Resume(a1);
  }
  sub_100003CA4(v21);
  _Unwind_Resume(a1);
}

char *sub_100015648(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1000A9108();
    }
    id result = (char *)operator new(24 * a4);
    size_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        id result = &v8[v9];
        uint64_t v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          id result = (char *)sub_1000559FC(result, *(void **)v10, *(void *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)id result = *(_OWORD *)v10;
          *((void *)result + 2) = *(void *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_10001572C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_100015740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_1000DF3E8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10001577C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (*(unsigned char *)(a1 + 60))
  {
    uint64_t v5 = *(unsigned int **)(a1 + 40);
    if (v5)
    {
      *a2 = 10;
      unsigned int v6 = a2 + 1;
      long long v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v5[12];
      if (v7 <= 0x7F)
      {
LABEL_4:
        v3[1] = v7;
        uint64_t v8 = (uint64_t)(v3 + 2);
LABEL_7:
        uint64_t v3 = (unsigned __int8 *)sub_1000158C8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v5, v8, a3);
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v5 = *(unsigned int **)(qword_10047EAF8 + 40);
      *a2 = 10;
      unsigned int v6 = a2 + 1;
      long long v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v5[12];
      if (v7 <= 0x7F) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v7, v6, a3);
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v9 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::ExtensionSet::SerializeWithCachedSizesToArray((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8), 2, 3, v3);
  size_t v12 = v9;
  if ((*(unsigned char *)(a1 + 60) & 2) != 0)
  {
    size_t v13 = *(unsigned int **)(a1 + 48);
    if (v13)
    {
      *(unsigned char *)uint64_t v9 = 34;
      unsigned int v14 = v9 + 1;
      uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v13[18];
      if (v15 <= 0x7F)
      {
LABEL_11:
        *((unsigned char *)v12 + 1) = (_BYTE)v15;
        uint64_t v16 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v12 + 2);
LABEL_14:
        size_t v12 = sub_100015A50((wireless_diagnostics::google::protobuf::internal::WireFormat *)v13, v16, v10, v11);
        goto LABEL_15;
      }
    }
    else
    {
      size_t v13 = *(unsigned int **)(qword_10047EAF8 + 48);
      *(unsigned char *)uint64_t v9 = 34;
      unsigned int v14 = v9 + 1;
      uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v13[18];
      if (v15 <= 0x7F) {
        goto LABEL_11;
      }
    }
    uint64_t v16 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, v14, v10);
    goto LABEL_14;
  }
LABEL_15:
  std::string::size_type v19 = *(void **)(a1 + 32);
  size_t v18 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 32);
  size_t v17 = v19;
  if (!v19 || *v17 == v17[1]) {
    return (uint64_t)v12;
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v18, v12, v10);
}

uint64_t sub_1000158C8(wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a2, unsigned __int8 *a3)
{
  int v4 = *((_DWORD *)this + 13);
  if (v4)
  {
    uint64_t v7 = *((void *)this + 2);
    *(unsigned char *)a2 = 9;
    *(void *)(a2 + 1) = v7;
    a2 += 9;
    int v4 = *((_DWORD *)this + 13);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *((void *)this + 3);
  *(unsigned char *)a2 = 17;
  *(void *)(a2 + 1) = v8;
  a2 += 9;
  int v4 = *((_DWORD *)this + 13);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v9 = *((void *)this + 4);
  *(unsigned char *)a2 = 25;
  *(void *)(a2 + 1) = v9;
  a2 += 9;
  if ((*((_DWORD *)this + 13) & 8) == 0)
  {
LABEL_5:
    unsigned int v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    uint64_t v5 = (void *)*((void *)this + 1);
    if (!v5) {
      return a2;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((void *)this + 5);
  *(unsigned char *)a2 = 32;
  a2 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v10, a2 + 1, a3);
  uint64_t v11 = (void *)*((void *)this + 1);
  unsigned int v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  uint64_t v5 = v11;
  if (!v11) {
    return a2;
  }
LABEL_11:
  if (*v5 == v5[1]) {
    return a2;
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v6, (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)a2, a3);
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100015A50(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  int v4 = a2;
  int v6 = *((_DWORD *)this + 19);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v15 = (unsigned int *)*((void *)this + 3);
    if (v15)
    {
      *(unsigned char *)int v4 = 18;
      unsigned int v16 = v4 + 1;
      size_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15[12];
      if (v17 <= 0x7F) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v15 = *(unsigned int **)(qword_10047E8F0 + 24);
      *(unsigned char *)int v4 = 18;
      unsigned int v16 = v4 + 1;
      size_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15[12];
      if (v17 <= 0x7F)
      {
LABEL_18:
        *((unsigned char *)v4 + 1) = (_BYTE)v17;
        int v4 = sub_1001104D4((wireless_diagnostics::google::protobuf::internal::WireFormat *)v15, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3);
        int v6 = *((_DWORD *)this + 19);
        if ((v6 & 4) != 0) {
          goto LABEL_22;
        }
LABEL_4:
        if ((v6 & 8) == 0) {
          goto LABEL_5;
        }
LABEL_28:
        std::string v26 = (unsigned int *)*((void *)this + 5);
        if (v26)
        {
          *(_WORD *)int v4 = 16122;
          unsigned int v27 = v4 + 2;
          size_t v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26[11];
          if (v28 <= 0x7F) {
            goto LABEL_30;
          }
        }
        else
        {
          std::string v26 = *(unsigned int **)(qword_10047E8F0 + 40);
          *(_WORD *)int v4 = 16122;
          unsigned int v27 = v4 + 2;
          size_t v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26[11];
          if (v28 <= 0x7F)
          {
LABEL_30:
            *((unsigned char *)v4 + 2) = (_BYTE)v28;
            int v4 = sub_10009A880((wireless_diagnostics::google::protobuf::internal::WireFormat *)v26, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 3), a3, a4);
            int v6 = *((_DWORD *)this + 19);
            if ((v6 & 0x10) != 0) {
              goto LABEL_34;
            }
LABEL_6:
            if ((v6 & 0x20) == 0) {
              goto LABEL_7;
            }
LABEL_40:
            char v38 = (unsigned int *)*((void *)this + 7);
            if (v38)
            {
              *(_WORD *)int v4 = 16282;
              unsigned int v39 = v4 + 2;
              char v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v38[6];
              if (v40 <= 0x7F) {
                goto LABEL_42;
              }
            }
            else
            {
              char v38 = *(unsigned int **)(qword_10047E8F0 + 56);
              *(_WORD *)int v4 = 16282;
              unsigned int v39 = v4 + 2;
              char v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v38[6];
              if (v40 <= 0x7F)
              {
LABEL_42:
                *((unsigned char *)v4 + 2) = (_BYTE)v40;
                int v4 = sub_1000E41F0((wireless_diagnostics::google::protobuf::internal::WireFormat *)v38, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 3), a3, a4);
                if ((*((_DWORD *)this + 19) & 0x40) != 0) {
                  goto LABEL_46;
                }
LABEL_8:
                uint64_t v9 = (void *)*((void *)this + 1);
                uint64_t v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
                uint64_t v7 = v9;
                if (!v9) {
                  return v4;
                }
                goto LABEL_52;
              }
            }
            char v41 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v40, v39, a3);
            int v4 = sub_1000E41F0((wireless_diagnostics::google::protobuf::internal::WireFormat *)v38, v41, v42, v43);
            if ((*((_DWORD *)this + 19) & 0x40) != 0) {
              goto LABEL_46;
            }
            goto LABEL_8;
          }
        }
        uint64_t v29 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v28, v27, a3);
        int v4 = sub_10009A880((wireless_diagnostics::google::protobuf::internal::WireFormat *)v26, v29, v30, v31);
        int v6 = *((_DWORD *)this + 19);
        if ((v6 & 0x10) != 0) {
          goto LABEL_34;
        }
        goto LABEL_6;
      }
    }
    size_t v18 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v17, v16, a3);
    int v4 = sub_1001104D4((wireless_diagnostics::google::protobuf::internal::WireFormat *)v15, v18, v19);
    int v6 = *((_DWORD *)this + 19);
    if ((v6 & 4) != 0) {
      goto LABEL_22;
    }
    goto LABEL_4;
  }
  uint64_t v10 = (unsigned int *)*((void *)this + 2);
  if (v10)
  {
    *(unsigned char *)a2 = 10;
    unsigned int v11 = a2 + 1;
    size_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10[12];
    if (v12 <= 0x7F) {
      goto LABEL_12;
    }
LABEL_15:
    size_t v13 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v12, v11, a3);
    int v4 = sub_10010E8CC((wireless_diagnostics::google::protobuf::internal::WireFormat *)v10, v13, v14);
    int v6 = *((_DWORD *)this + 19);
    if ((v6 & 2) != 0) {
      goto LABEL_16;
    }
    goto LABEL_3;
  }
  uint64_t v10 = *(unsigned int **)(qword_10047E8F0 + 16);
  *(unsigned char *)a2 = 10;
  unsigned int v11 = a2 + 1;
  size_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10[12];
  if (v12 > 0x7F) {
    goto LABEL_15;
  }
LABEL_12:
  *((unsigned char *)v4 + 1) = (_BYTE)v12;
  int v4 = sub_10010E8CC((wireless_diagnostics::google::protobuf::internal::WireFormat *)v10, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3);
  int v6 = *((_DWORD *)this + 19);
  if ((v6 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    goto LABEL_4;
  }
LABEL_22:
  uint64_t v20 = (unsigned int *)*((void *)this + 4);
  if (v20)
  {
    *(_WORD *)int v4 = 434;
    unsigned int v21 = v4 + 2;
    uint64_t v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20[14];
    if (v22 <= 0x7F) {
      goto LABEL_24;
    }
LABEL_27:
    size_t v23 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v22, v21, a3);
    int v4 = sub_100114B6C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v20, v23, v24, v25);
    int v6 = *((_DWORD *)this + 19);
    if ((v6 & 8) != 0) {
      goto LABEL_28;
    }
    goto LABEL_5;
  }
  uint64_t v20 = *(unsigned int **)(qword_10047E8F0 + 32);
  *(_WORD *)int v4 = 434;
  unsigned int v21 = v4 + 2;
  uint64_t v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20[14];
  if (v22 > 0x7F) {
    goto LABEL_27;
  }
LABEL_24:
  *((unsigned char *)v4 + 2) = (_BYTE)v22;
  int v4 = sub_100114B6C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v20, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 3), a3, a4);
  int v6 = *((_DWORD *)this + 19);
  if ((v6 & 8) != 0) {
    goto LABEL_28;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    goto LABEL_6;
  }
LABEL_34:
  uint64_t v32 = (unsigned int *)*((void *)this + 6);
  if (v32)
  {
    *(_WORD *)int v4 = 16266;
    unsigned int v33 = v4 + 2;
    char v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32[20];
    if (v34 <= 0x7F) {
      goto LABEL_36;
    }
LABEL_39:
    char v35 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v34, v33, a3);
    int v4 = sub_100015E54((wireless_diagnostics::google::protobuf::internal::WireFormat *)v32, v35, v36, v37);
    int v6 = *((_DWORD *)this + 19);
    if ((v6 & 0x20) != 0) {
      goto LABEL_40;
    }
    goto LABEL_7;
  }
  uint64_t v32 = *(unsigned int **)(qword_10047E8F0 + 48);
  *(_WORD *)int v4 = 16266;
  unsigned int v33 = v4 + 2;
  char v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32[20];
  if (v34 > 0x7F) {
    goto LABEL_39;
  }
LABEL_36:
  *((unsigned char *)v4 + 2) = (_BYTE)v34;
  int v4 = sub_100015E54((wireless_diagnostics::google::protobuf::internal::WireFormat *)v32, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 3), a3, a4);
  int v6 = *((_DWORD *)this + 19);
  if ((v6 & 0x20) != 0) {
    goto LABEL_40;
  }
LABEL_7:
  if ((v6 & 0x40) == 0) {
    goto LABEL_8;
  }
LABEL_46:
  uint64_t v44 = (unsigned int *)*((void *)this + 8);
  if (v44)
  {
    *(_WORD *)int v4 = 16290;
    unsigned int v45 = v4 + 2;
    v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v44[22];
    if (v46 <= 0x7F) {
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v44 = *(unsigned int **)(qword_10047E8F0 + 64);
    *(_WORD *)int v4 = 16290;
    unsigned int v45 = v4 + 2;
    v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v44[22];
    if (v46 <= 0x7F)
    {
LABEL_48:
      *((unsigned char *)v4 + 2) = (_BYTE)v46;
      int v4 = sub_1001003D0((wireless_diagnostics::google::protobuf::internal::WireFormat *)v44, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 3), a3);
      v47 = (void *)*((void *)this + 1);
      uint64_t v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
      uint64_t v7 = v47;
      if (!v47) {
        return v4;
      }
      goto LABEL_52;
    }
  }
  char v48 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v46, v45, a3);
  int v4 = sub_1001003D0((wireless_diagnostics::google::protobuf::internal::WireFormat *)v44, v48, v49);
  uint64_t v50 = (void *)*((void *)this + 1);
  uint64_t v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  uint64_t v7 = v50;
  if (!v50) {
    return v4;
  }
LABEL_52:
  if (*v7 == v7[1]) {
    return v4;
  }

  return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v8, v4, a3);
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100015E54(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  int v4 = a2;
  int v6 = *((_DWORD *)this + 21);
  if (v6)
  {
    uint64_t v10 = (unsigned int *)*((void *)this + 2);
    if (v10)
    {
      *(unsigned char *)a2 = 10;
      unsigned int v11 = a2 + 1;
      size_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10[18];
      if (v12 <= 0x7F) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v10 = *(unsigned int **)(qword_10047EA78 + 16);
      *(unsigned char *)a2 = 10;
      unsigned int v11 = a2 + 1;
      size_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10[18];
      if (v12 <= 0x7F)
      {
LABEL_13:
        *((unsigned char *)v4 + 1) = (_BYTE)v12;
        int v4 = sub_100006058((wireless_diagnostics::google::protobuf::internal::WireFormat *)v10, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3, a4);
        int v6 = *((_DWORD *)this + 21);
        if ((v6 & 2) != 0) {
          goto LABEL_17;
        }
LABEL_3:
        if ((v6 & 4) == 0) {
          goto LABEL_4;
        }
LABEL_23:
        uint64_t v22 = (unsigned int *)*((void *)this + 4);
        if (v22)
        {
          *(unsigned char *)int v4 = 26;
          unsigned int v23 = v4 + 1;
          long long v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22[9];
          if (v24 <= 0x7F) {
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v22 = *(unsigned int **)(qword_10047EA78 + 32);
          *(unsigned char *)int v4 = 26;
          unsigned int v23 = v4 + 1;
          long long v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22[9];
          if (v24 <= 0x7F)
          {
LABEL_25:
            *((unsigned char *)v4 + 1) = (_BYTE)v24;
            int v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_100141580((wireless_diagnostics::google::protobuf::internal::WireFormat *)v22, (unsigned char *)v4 + 2, a3);
            int v6 = *((_DWORD *)this + 21);
            if ((v6 & 8) != 0) {
              goto LABEL_29;
            }
LABEL_5:
            if ((v6 & 0x10) == 0) {
              goto LABEL_6;
            }
LABEL_35:
            uint64_t v32 = (unsigned int *)*((void *)this + 6);
            if (v32)
            {
              *(unsigned char *)int v4 = 42;
              unsigned int v33 = v4 + 1;
              char v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32[12];
              if (v34 <= 0x7F) {
                goto LABEL_37;
              }
            }
            else
            {
              uint64_t v32 = *(unsigned int **)(qword_10047EA78 + 48);
              *(unsigned char *)int v4 = 42;
              unsigned int v33 = v4 + 1;
              char v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32[12];
              if (v34 <= 0x7F)
              {
LABEL_37:
                *((unsigned char *)v4 + 1) = (_BYTE)v34;
                int v4 = sub_1001430EC((wireless_diagnostics::google::protobuf::internal::WireFormat *)v32, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3, a4);
                int v6 = *((_DWORD *)this + 21);
                if ((v6 & 0x20) != 0) {
                  goto LABEL_41;
                }
LABEL_7:
                if ((v6 & 0x40) == 0) {
                  goto LABEL_8;
                }
LABEL_47:
                uint64_t v44 = (unsigned int *)*((void *)this + 8);
                if (v44)
                {
                  *(unsigned char *)int v4 = 58;
                  unsigned int v45 = v4 + 1;
                  v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v44[31];
                  if (v46 <= 0x7F) {
                    goto LABEL_49;
                  }
                }
                else
                {
                  uint64_t v44 = *(unsigned int **)(qword_10047EA78 + 64);
                  *(unsigned char *)int v4 = 58;
                  unsigned int v45 = v4 + 1;
                  v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v44[31];
                  if (v46 <= 0x7F)
                  {
LABEL_49:
                    *((unsigned char *)v4 + 1) = (_BYTE)v46;
                    int v4 = sub_100145EF4((wireless_diagnostics::google::protobuf::internal::WireFormat *)v44, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3, a4);
                    if ((*((_DWORD *)this + 21) & 0x80) != 0) {
                      goto LABEL_53;
                    }
LABEL_9:
                    uint64_t v9 = (void *)*((void *)this + 1);
                    uint64_t v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
                    uint64_t v7 = v9;
                    if (!v9) {
                      return v4;
                    }
                    goto LABEL_59;
                  }
                }
                v47 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v46, v45, a3);
                int v4 = sub_100145EF4((wireless_diagnostics::google::protobuf::internal::WireFormat *)v44, v47, v48, v49);
                if ((*((_DWORD *)this + 21) & 0x80) != 0) {
                  goto LABEL_53;
                }
                goto LABEL_9;
              }
            }
            char v35 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v34, v33, a3);
            int v4 = sub_1001430EC((wireless_diagnostics::google::protobuf::internal::WireFormat *)v32, v35, v36, v37);
            int v6 = *((_DWORD *)this + 21);
            if ((v6 & 0x20) != 0) {
              goto LABEL_41;
            }
            goto LABEL_7;
          }
        }
        uint64_t v25 = (unsigned char *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v24, v23, a3);
        int v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_100141580((wireless_diagnostics::google::protobuf::internal::WireFormat *)v22, v25, v26);
        int v6 = *((_DWORD *)this + 21);
        if ((v6 & 8) != 0) {
          goto LABEL_29;
        }
        goto LABEL_5;
      }
    }
    size_t v13 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v12, v11, a3);
    int v4 = sub_100006058((wireless_diagnostics::google::protobuf::internal::WireFormat *)v10, v13, v14, v15);
    int v6 = *((_DWORD *)this + 21);
    if ((v6 & 2) != 0) {
      goto LABEL_17;
    }
    goto LABEL_3;
  }
  if ((v6 & 2) == 0) {
    goto LABEL_3;
  }
LABEL_17:
  unsigned int v16 = (unsigned int *)*((void *)this + 3);
  if (v16)
  {
    *(unsigned char *)int v4 = 18;
    unsigned int v17 = v4 + 1;
    size_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16[12];
    if (v18 <= 0x7F) {
      goto LABEL_19;
    }
LABEL_22:
    std::string::size_type v19 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v18, v17, a3);
    int v4 = sub_10014054C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v16, v19, v20, v21);
    int v6 = *((_DWORD *)this + 21);
    if ((v6 & 4) != 0) {
      goto LABEL_23;
    }
    goto LABEL_4;
  }
  unsigned int v16 = *(unsigned int **)(qword_10047EA78 + 24);
  *(unsigned char *)int v4 = 18;
  unsigned int v17 = v4 + 1;
  size_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16[12];
  if (v18 > 0x7F) {
    goto LABEL_22;
  }
LABEL_19:
  *((unsigned char *)v4 + 1) = (_BYTE)v18;
  int v4 = sub_10014054C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v16, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3, a4);
  int v6 = *((_DWORD *)this + 21);
  if ((v6 & 4) != 0) {
    goto LABEL_23;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    goto LABEL_5;
  }
LABEL_29:
  unsigned int v27 = (unsigned int *)*((void *)this + 5);
  if (v27)
  {
    *(unsigned char *)int v4 = 34;
    unsigned int v28 = v4 + 1;
    uint64_t v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v27[8];
    if (v29 <= 0x7F) {
      goto LABEL_31;
    }
LABEL_34:
    uint64_t v30 = (unsigned char *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v29, v28, a3);
    int v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_1001422F8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v27, v30, v31);
    int v6 = *((_DWORD *)this + 21);
    if ((v6 & 0x10) != 0) {
      goto LABEL_35;
    }
    goto LABEL_6;
  }
  unsigned int v27 = *(unsigned int **)(qword_10047EA78 + 40);
  *(unsigned char *)int v4 = 34;
  unsigned int v28 = v4 + 1;
  uint64_t v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v27[8];
  if (v29 > 0x7F) {
    goto LABEL_34;
  }
LABEL_31:
  *((unsigned char *)v4 + 1) = (_BYTE)v29;
  int v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_1001422F8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v27, (unsigned char *)v4 + 2, a3);
  int v6 = *((_DWORD *)this + 21);
  if ((v6 & 0x10) != 0) {
    goto LABEL_35;
  }
LABEL_6:
  if ((v6 & 0x20) == 0) {
    goto LABEL_7;
  }
LABEL_41:
  char v38 = (unsigned int *)*((void *)this + 7);
  if (v38)
  {
    *(unsigned char *)int v4 = 50;
    unsigned int v39 = v4 + 1;
    char v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v38[15];
    if (v40 <= 0x7F) {
      goto LABEL_43;
    }
LABEL_46:
    char v41 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v40, v39, a3);
    int v4 = sub_100144458((wireless_diagnostics::google::protobuf::internal::WireFormat *)v38, v41, v42, v43);
    int v6 = *((_DWORD *)this + 21);
    if ((v6 & 0x40) != 0) {
      goto LABEL_47;
    }
    goto LABEL_8;
  }
  char v38 = *(unsigned int **)(qword_10047EA78 + 56);
  *(unsigned char *)int v4 = 50;
  unsigned int v39 = v4 + 1;
  char v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v38[15];
  if (v40 > 0x7F) {
    goto LABEL_46;
  }
LABEL_43:
  *((unsigned char *)v4 + 1) = (_BYTE)v40;
  int v4 = sub_100144458((wireless_diagnostics::google::protobuf::internal::WireFormat *)v38, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3, a4);
  int v6 = *((_DWORD *)this + 21);
  if ((v6 & 0x40) != 0) {
    goto LABEL_47;
  }
LABEL_8:
  if ((v6 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_53:
  uint64_t v50 = (unsigned int *)*((void *)this + 9);
  if (v50)
  {
    *(unsigned char *)int v4 = 66;
    unsigned int v51 = v4 + 1;
    uint64_t v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v50[38];
    if (v52 <= 0x7F) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v50 = *(unsigned int **)(qword_10047EA78 + 72);
    *(unsigned char *)int v4 = 66;
    unsigned int v51 = v4 + 1;
    uint64_t v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v50[38];
    if (v52 <= 0x7F)
    {
LABEL_55:
      *((unsigned char *)v4 + 1) = (_BYTE)v52;
      int v4 = sub_10009AF2C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v50, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3);
      v53 = (void *)*((void *)this + 1);
      uint64_t v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
      uint64_t v7 = v53;
      if (!v53) {
        return v4;
      }
      goto LABEL_59;
    }
  }
  int v54 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v52, v51, a3);
  int v4 = sub_10009AF2C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v50, v54, v55);
  v56 = (void *)*((void *)this + 1);
  uint64_t v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  uint64_t v7 = v56;
  if (!v56) {
    return v4;
  }
LABEL_59:
  if (*v7 == v7[1]) {
    return v4;
  }

  return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v8, v4, a3);
}

uint64_t sub_1000162DC(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = a2[7];
  unsigned int v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    void *exception = off_100454818;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  int v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(void *)a2 + 32))(a2, "ActivityState");
  int v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "cmLogTime", 4, 1)+ v6;
  int v8 = (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 8));
  int v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "timestampNanos", 10, 2);
  int v11 = v10 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 16));
  int v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "startDate", 4, 3);
  int v14 = v13 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 24));
  int v15 = v14 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v16 = v12
      + v15
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "endDate", 4, 4);
  int v17 = (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 32));
  int v18 = v17 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v19 = v18
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "classification", 12, 5);
  LODWORD(a1) = v19 + sub_10001C5FC(a1 + 40, a2);
  int v20 = v16 + a1 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  LODWORD(a1) = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 64))(a2);
  uint64_t result = v20 + a1 + (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_1000166EC(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = a2[7];
  unsigned int v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    void *exception = off_100454818;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  int v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(void *)a2 + 32))(a2, "DataRunSettings");
  int v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "scanStrategy", 8, 1)+ v6;
  int v8 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 144))(a2, *(unsigned int *)(a1 + 8));
  int v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "refreshPeriodMs", 8, 2);
  int v11 = v10 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 144))(a2, *(unsigned int *)(a1 + 12));
  int v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "dwellMs", 8, 3);
  int v14 = v13 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 144))(a2, *(unsigned int *)(a1 + 16));
  int v15 = v14 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v16 = v12
      + v15
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "dutyCycle", 4, 4);
  LODWORD(a1) = (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 24));
  LODWORD(a1) = a1 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  LODWORD(a1) = a1 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 64))(a2);
  uint64_t result = v16 + a1 + (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 40))(a2);
  --a2[6];
  return result;
}

void sub_100016A80(uint64_t a1@<X8>)
{
  sub_100016B48(a1);
  uint64_t v2 = sub_100042EE0();
  *(_DWORD *)(a1 + 52) |= 8u;
  *(void *)(a1 + 40) = v2;
  double v3 = sub_100016C70();
  *(_DWORD *)(a1 + 52) |= 2u;
  *(double *)(a1 + 24) = v3;
  double v4 = sub_100016BAC();
  *(_DWORD *)(a1 + 52) |= 4u;
  *(double *)(a1 + 32) = v4;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 52) |= 1u;
  *(CFAbsoluteTime *)(a1 + 16) = Current;
}

void sub_100016AF8(_Unwind_Exception *a1)
{
  sub_1000428B0(v1);
  _Unwind_Resume(a1);
}

void sub_100016B0C(_Unwind_Exception *a1)
{
  sub_1000428B0(v1);
  _Unwind_Resume(a1);
}

void sub_100016B20(_Unwind_Exception *a1)
{
  sub_1000428B0(v1);
  _Unwind_Resume(a1);
}

void sub_100016B34(_Unwind_Exception *a1)
{
  sub_1000428B0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100016B48(uint64_t a1)
{
  *(void *)a1 = off_100457D18;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_100016B98(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

double sub_100016BAC()
{
  uint64_t v0 = mach_continuous_time();
  double v1 = *(double *)&qword_10047E058;
  if (*(double *)&qword_10047E058 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      uint32_t denom = info.denom;
      uint32_t numer = info.numer;
      do
      {
        uint32_t v4 = denom;
        uint32_t denom = numer % denom;
        uint32_t numer = v4;
      }
      while (denom);
    }
    else
    {
      uint32_t v4 = info.numer;
    }
    unsigned int v5 = 1000000000;
    uint32_t v6 = info.numer / v4;
    do
    {
      uint32_t v7 = v6;
      uint32_t v6 = v5;
      unsigned int v5 = v7 % v5;
    }
    while (v5);
    double v1 = (double)(info.numer / v4 / v6) / (double)(0x3B9ACA00 / v6 * (unint64_t)(info.denom / v4));
    *(double *)&qword_10047E058 = v1;
  }
  return v1 * (double)v0;
}

double sub_100016C70()
{
  uint64_t v0 = mach_absolute_time();
  double v1 = *(double *)&qword_10047E058;
  if (*(double *)&qword_10047E058 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      uint32_t denom = info.denom;
      uint32_t numer = info.numer;
      do
      {
        uint32_t v4 = denom;
        uint32_t denom = numer % denom;
        uint32_t numer = v4;
      }
      while (denom);
    }
    else
    {
      uint32_t v4 = info.numer;
    }
    unsigned int v5 = 1000000000;
    uint32_t v6 = info.numer / v4;
    do
    {
      uint32_t v7 = v6;
      uint32_t v6 = v5;
      unsigned int v5 = v7 % v5;
    }
    while (v5);
    double v1 = (double)(info.numer / v4 / v6) / (double)(0x3B9ACA00 / v6 * (unint64_t)(info.denom / v4));
    *(double *)&qword_10047E058 = v1;
  }
  return v1 * (double)v0;
}

void sub_100017030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000170B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  double v3 = *(uint64_t **)(v1 + 40);
  uint64_t v2 = *(void **)(v1 + 48);
  uint32_t v4 = (void *)v3[1];
  if ((unint64_t)v4 >= v3[2])
  {
    uint32_t v6 = sub_100017420((uint64_t)v3, v2);
  }
  else
  {
    uint64_t v5 = v2[1];
    void *v4 = *v2;
    v4[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    uint32_t v6 = v4 + 2;
  }
  v3[1] = (uint64_t)v6;
  sub_100017138(*v3, (uint64_t)v6, (uint64_t)&v7, ((uint64_t)v6 - *v3) >> 4);
}

void sub_100017138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    int v8 = (_DWORD **)(a1 + 16 * (v4 >> 1));
    int v9 = sub_100017318(*v8);
    int v11 = *(_DWORD **)(a2 - 16);
    int v10 = (void *)(a2 - 16);
    if ((uint64_t)v9 >= (uint64_t)sub_100017318(v11))
    {
      long long v20 = *(_OWORD *)v10;
      void *v10 = 0;
      v10[1] = 0;
      while (1)
      {
        int v12 = v8;
        long long v13 = *(_OWORD *)v8;
        wireless_diagnostics::google::protobuf::internal::WireFormat *v8 = 0;
        v8[1] = 0;
        int v14 = (std::__shared_weak_count *)v10[1];
        *(_OWORD *)int v10 = v13;
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        int v8 = (_DWORD **)(a1 + 16 * v7);
        int v15 = sub_100017318(*v8);
        uint64_t v16 = v20;
        int v10 = v12;
        if ((uint64_t)v15 < (uint64_t)sub_100017318((_DWORD *)v20))
        {
          uint64_t v17 = *((void *)&v20 + 1);
          long long v21 = 0uLL;
          int v18 = (std::__shared_weak_count *)v12[1];
          *int v12 = v16;
          v12[1] = v17;
          if (!v18) {
            goto LABEL_14;
          }
          goto LABEL_12;
        }
      }
      long long v19 = v20;
      long long v21 = 0uLL;
      int v18 = (std::__shared_weak_count *)v8[1];
      *(_OWORD *)int v8 = v19;
      if (!v18) {
        goto LABEL_14;
      }
LABEL_12:
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
LABEL_14:
      if (*((void *)&v21 + 1))
      {
        if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(void))(**((void **)&v21 + 1) + 16))(*((void *)&v21 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v21 + 1));
        }
      }
    }
  }
}

void sub_100017304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100017318(_DWORD *a1)
{
  int v3 = *a1;
  uint64_t v1 = a1 + 2;
  int v2 = v3;
  switch(v3 ^ (v3 >> 31))
  {
    case 1:
      if (v2 < 0) {
        uint64_t v1 = (void *)*v1;
      }
      uint64_t result = (void *)v1[2];
      break;
    case 2:
    case 0xB:
    case 0xD:
    case 0xE:
    case 0x10:
      goto LABEL_3;
    case 3:
      if (v2 < 0) {
        uint64_t v1 = (void *)*v1;
      }
      uint64_t result = (void *)v1[4];
      break;
    case 4:
      if (v2 < 0) {
        uint64_t v1 = (void *)*v1;
      }
      uint64_t result = (void *)v1[1];
      break;
    case 5:
      if (v2 < 0) {
        uint64_t v1 = (void *)*v1;
      }
      uint64_t result = (void *)v1[1];
      break;
    case 6:
      if (v2 < 0) {
        uint64_t v1 = (void *)*v1;
      }
      uint64_t result = (void *)v1[1];
      break;
    case 7:
      if (v2 < 0) {
        uint64_t v1 = (void *)*v1;
      }
      uint64_t result = (void *)v1[1];
      break;
    case 8:
      if (v2 < 0) {
        uint64_t v1 = (void *)*v1;
      }
      uint64_t result = (void *)v1[4];
      break;
    case 9:
      if (v2 < 0) {
        uint64_t v1 = (void *)*v1;
      }
      uint64_t result = (void *)v1[1];
      break;
    case 0xA:
      if (v2 < 0) {
        uint64_t v1 = (void *)*v1;
      }
      uint64_t result = (void *)v1[1];
      break;
    case 0xF:
      if (v2 < 0) {
        uint64_t v1 = (void *)*v1;
      }
      uint64_t result = (void *)v1[1];
      break;
    default:
      if (v2 < 0) {
        uint64_t result = *(void **)*v1;
      }
      else {
LABEL_3:
      }
        uint64_t result = (void *)*v1;
      break;
  }
  return result;
}

void *sub_100017420(uint64_t a1, void *a2)
{
  int v3 = *(void **)a1;
  unint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = ((uint64_t)v4 - *(void *)a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_1000A9108();
  }
  uint64_t v8 = *(void *)(a1 + 16) - (void)v3;
  if (v8 >> 3 > v6) {
    unint64_t v6 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 60) {
      sub_1000A6A10();
    }
    int v10 = (char *)operator new(16 * v9);
    uint64_t v11 = a2[1];
    int v12 = &v10[16 * v5];
    *(void *)int v12 = *a2;
    *((void *)v12 + 1) = v11;
    if (v11) {
      goto LABEL_10;
    }
  }
  else
  {
    int v10 = 0;
    uint64_t v11 = a2[1];
    int v12 = (char *)(16 * v5);
    *(void *)int v12 = *a2;
    *((void *)v12 + 1) = v11;
    if (v11)
    {
LABEL_10:
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      int v3 = *(void **)a1;
      unint64_t v4 = *(void **)(a1 + 8);
    }
  }
  long long v13 = &v10[16 * v9];
  int v14 = v12 + 16;
  if (v4 == v3)
  {
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v13;
    if (!v3) {
      return v14;
    }
    goto LABEL_21;
  }
  do
  {
    long long v15 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v12 - 1) = v15;
    v12 -= 16;
    void *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  uint64_t v16 = *(void **)a1;
  int v3 = *(void **)(a1 + 8);
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v13;
  if (v3 != v16)
  {
    do
    {
      uint64_t v17 = (std::__shared_weak_count *)*(v3 - 1);
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      v3 -= 2;
    }
    while (v3 != v16);
    int v3 = v16;
  }
  if (v3) {
LABEL_21:
  }
    operator delete(v3);
  return v14;
}

void sub_1000176E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000176FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000BA884((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100017718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100017728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100017738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100017904(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10047E370);

  _Unwind_Resume(a1);
}

void sub_100017B48(_Unwind_Exception *a1)
{
  unint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_100017DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100017DF4(uint64_t a1, uint64_t a2)
{
  v4[0] = a1;
  v4[1] = a2;
  int v2 = *(id *)(a1 + 32);
  int v3 = std::promise<void>::promise(&v7);
  std::promise<void>::get_future(v3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100096E4C;
  block[3] = &unk_100460678;
  block[4] = v4;
  block[5] = &v7;
  dispatch_sync(v2, block);
  std::future<void>::get(&v6);
  std::future<void>::~future(&v6);
  std::promise<void>::~promise(&v7);
}

void sub_100017EB8(_Unwind_Exception *a1)
{
  std::future<void>::~future((std::future<void> *)(v2 - 32));
  std::promise<void>::~promise((std::promise<void> *)(v2 - 24));

  _Unwind_Resume(a1);
}

void sub_100017EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100017EF8(const void *a1@<X0>, size_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int *a6@<X8>)
{
  if (qword_10047BED8 == -1)
  {
    int v12 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_7;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_10045AD98);
    int v12 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_7;
    }
  }
  if ((char)a3[23] >= 0) {
    std::string::size_type v13 = (std::string::size_type)a3;
  }
  else {
    std::string::size_type v13 = *(void *)a3;
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 134218242;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v13;
  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Writing %zu bytes to %s", (uint8_t *)&buf, 0x16u);
LABEL_7:
  if ((char)a3[23] >= 0) {
    int v14 = a3;
  }
  else {
    int v14 = *(unsigned char **)a3;
  }
  unint64_t v15 = sub_10005587C(a3);
  std::string::size_type v16 = v15;
  if (v15 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_std::string buf = (std::string *)operator new(v19 + 1);
    buf.__r_.__value_.__l.__size_ = v16;
    buf.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
  }
  else
  {
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = v15;
    p_std::string buf = &buf;
    if (!v16)
    {
      int v18 = &buf;
      goto LABEL_25;
    }
  }
  if (v16 < 0x20 || (unint64_t)((char *)p_buf - v14) < 0x20)
  {
    long long v21 = v14;
    int v18 = p_buf;
  }
  else
  {
    long long v21 = &v14[v16 & 0xFFFFFFFFFFFFFFE0];
    int v18 = (std::string *)((char *)p_buf + (v16 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v22 = &p_buf->__r_.__value_.__r.__words[2];
    unsigned int v23 = (long long *)(v14 + 16);
    unint64_t v24 = v16 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v25 = *v23;
      *((_OWORD *)v22 - 1) = *(v23 - 1);
      *(_OWORD *)uint64_t v22 = v25;
      v22 += 4;
      v23 += 2;
      v24 -= 32;
    }
    while (v24);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_25;
    }
  }
  do
  {
    std::string::value_type v26 = *v21++;
    v18->__r_.__value_.__s.__data_[0] = v26;
    int v18 = (std::string *)((char *)v18 + 1);
  }
  while (v21 != &v14[v16]);
LABEL_25:
  v18->__r_.__value_.__s.__data_[0] = 0;
  sub_10009BB3C(a3, &v34);
  std::operator+<char>();
  unsigned int v27 = std::string::append(&v36, "-%%%%-%%%%-%%%%-%%%%.tmp");
  unsigned int v28 = (void *)v27->__r_.__value_.__r.__words[0];
  v42[0] = v27->__r_.__value_.__l.__size_;
  *(void *)((char *)v42 + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
  char v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  *(void *)&v38[7] = *(void *)((char *)v42 + 7);
  std::string __p = v28;
  *(void *)char v38 = v42[0];
  char v39 = v29;
  int v30 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000559FC(&__dst, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = buf;
  }
  sub_1000512AC(&__dst, (uint64_t)&__p);
  sub_10000F010((uint64_t)&__dst, 0, (uint64_t)v40);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v39 & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_31;
      }
LABEL_47:
      operator delete(v36.__r_.__value_.__l.__data_);
      if ((v35 & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_48;
    }
  }
  else if ((v39 & 0x80000000) == 0)
  {
    goto LABEL_30;
  }
  operator delete(__p);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_47;
  }
LABEL_31:
  if ((v35 & 0x80000000) == 0) {
    goto LABEL_32;
  }
LABEL_48:
  operator delete(v34);
LABEL_32:
  sub_100052C64(a6, (uint64_t)v40, 513, 0, 0x1A4u);
  sub_10009D2D4(a6, a1, a2);
  if (*(unsigned char *)a4)
  {
    time_t v31 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)(a4 + 8));
    sub_1000B1E90((uint64_t)v40, v31, 0);
  }
  if (a5 == 1) {
    sub_10009D3D4(a6);
  }
  sub_100002D10((uint64_t)v40, (uint64_t)a3, 0);
  if (qword_10047BED8 == -1)
  {
    uint64_t v32 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_42;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_10045AD98);
    uint64_t v32 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_42;
    }
  }
  if ((char)a3[23] >= 0) {
    std::string::size_type v33 = (std::string::size_type)a3;
  }
  else {
    std::string::size_type v33 = *(void *)a3;
  }
  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = v33;
  _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Writing to %s completed", (uint8_t *)&__dst, 0xCu);
LABEL_42:
  if ((v41 & 0x80000000) == 0)
  {
    if ((v30 & 0x80000000) == 0) {
      return;
    }
LABEL_50:
    operator delete(buf.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v40[0]);
  if (v30 < 0) {
    goto LABEL_50;
  }
}

void sub_100018350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a26 < 0)
  {
    operator delete(a21);
    if (a20 < 0)
    {
LABEL_3:
      operator delete(__p);
      if ((a14 & 0x80000000) == 0)
      {
LABEL_8:
        if ((*(unsigned char *)(v40 - 105) & 0x80) != 0) {
          operator delete(*(void **)(v40 - 128));
        }
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a9);
      goto LABEL_8;
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_3;
  }
  if ((a14 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_100018594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000185AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000185C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000185D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000185EC(void *a1@<X8>)
{
  id v7 = +[DarwinDeviceInfo currentDevice];
  uint64_t v2 = [v7 systemName];
  int v3 = [v7 systemVersion];
  unint64_t v4 = [v7 machine];
  uint64_t v5 = +[NSString stringWithFormat:@"systemName=%@\nsystemVersion=%@\nhw.machine=%@", v2, v3, v4];
  std::future<void> v6 = v5;
  if (v5)
  {
    [v5 ps_STLString];
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1000186CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_100018708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100018854(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100457D18;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_1000188F4(a1, a2);
  return a1;
}

void sub_1000188C4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_1000188E0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000188F4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 52);
  if (!(_BYTE)v4) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if (*(unsigned char *)(a2 + 52))
  {
    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 52) |= 1u;
    *(void *)(a1 + 16) = v7;
    int v4 = *(_DWORD *)(a2 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
LABEL_12:
      uint64_t v9 = *(void *)(a2 + 32);
      *(_DWORD *)(a1 + 52) |= 4u;
      *(void *)(a1 + 32) = v9;
      if ((*(_DWORD *)(a2 + 52) & 8) == 0) {
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
      }
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 2) == 0)
  {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 52) |= 2u;
  *(void *)(a1 + 24) = v8;
  int v4 = *(_DWORD *)(a2 + 52);
  if ((v4 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_7:
  if ((v4 & 8) != 0)
  {
LABEL_8:
    uint64_t v5 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 8u;
    *(void *)(a1 + 40) = v5;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1000189F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100018A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100018AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  std::future<void>::~future((std::future<void> *)(v11 - 32));
  std::promise<void>::~promise((std::promise<void> *)(v11 - 24));

  _Unwind_Resume(a1);
}

void sub_100018B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100018D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100018D98(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = off_100462070;
  a1[1] = off_100462188;
  a1[2] = sub_10009A690(*a3);
  if (a2)
  {
    a1[4] = 0;
    a1[3] = a2;
    a1[5] = 0;
    sub_1000A1528((uint64_t)(a1 + 7));
    uint64_t v6 = *a3;
    uint64_t v7 = operator new(0x100uLL);
    v7[1] = 0;
    int v7[2] = 0;
    void *v7 = off_1004622B8;
    a1[15] = sub_1000A4510((uint64_t)(v7 + 3), v6);
    a1[16] = v7;
    uint64_t v8 = *a3;
    uint64_t v9 = operator new(0xA8uLL);
    v9[1] = 0;
    v9[2] = 0;
    void *v9 = off_100462308;
    a1[17] = sub_1000A3AA8((uint64_t)(v9 + 3), v8);
    a1[18] = v9;
    sub_10009A69C(*a3, (uint64_t)buf);
    int v10 = (char *)operator new(0x90uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)int v10 = off_100462358;
    sub_1000A328C((__n128 *)(v10 + 24), (uint64_t)buf);
    a1[19] = v11;
    a1[20] = v10;
    sub_10009E214((uint64_t)buf);
    sub_10009FB5C();
  }
  sub_1000AE4B0(buf, "");
  sub_10016A2C4((uint64_t)buf, 0, 0);
  if (SBYTE7(v14) < 0) {
    operator delete(*(void **)buf);
  }
  sub_100149690((uint64_t)__p);
}

void sub_10001953C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_1002365C0(v28);
  sub_1002365FC(v26 + 184);
  uint64_t v30 = *(void *)(v26 + 176);
  *(void *)(v26 + 176) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
  }
  sub_100236690(a13);
  sub_1000BA884(v26 + 152);
  sub_1000BA884(v26 + 136);
  sub_1000BA884(a14);
  nullsub_20(a15);
  sub_1000BA884(v27);
  _Unwind_Resume(a1);
}

void sub_1000199FC()
{
}

void sub_100019A04(uint64_t a1, int a2)
{
  int v3 = *(void **)(*(void *)(a1 + 32) + 16);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = v3;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x4012000000;
  v15[3] = sub_1000965AC;
  v15[4] = sub_100096558;
  v15[5] = &unk_10042AA3F;
  id v16 = v4;
  int v17 = a2;
  uint64_t v8 = 0;
  uint64_t v9 = (std::promise<void> *)&v8;
  uint64_t v10 = 0x3812000000;
  uint64_t v11 = sub_100096EE4;
  int v12 = sub_100096EDC;
  std::string::size_type v13 = &unk_10042AA3F;
  std::promise<void>::promise(&v14);
  std::promise<void>::get_future(v9 + 6);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100005870;
  block[3] = &unk_1004689E0;
  block[4] = v15;
  block[5] = &v8;
  dispatch_async(v5, block);
  _Block_object_dispose(&v8, 8);
  std::promise<void>::~promise(&v14);
  _Block_object_dispose(v15, 8);

  std::future<void>::~future(&v6);
}

void sub_100019B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  std::promise<void>::~promise(v9);
  _Block_object_dispose((const void *)(v10 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_100019EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001A0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Unwind_Resume(a1);
}

void sub_10001A37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001A3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001A724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10001A9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001AA1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = v3;
  unint64_t v15 = off_10045D978;
  long long v16 = 0u;
  long long v17 = 0u;
  char v20 = 0;
  int v18 = off_10045D958;
  v19[0] = 0;
  *(void *)((char *)v19 + 6) = 0;
  [v5 timestamp];
  sub_100076484((uint64_t)&v15, v6);
  [v5 timestamp];
  uint64_t v8 = sub_100045E94(v7);
  sub_100041B20((uint64_t)&v15, v8);
  uint64_t v9 = [v5 startDate];
  [v9 timeIntervalSince1970];
  sub_100076F14((uint64_t)&v15, v10);

  uint64_t v11 = +[NSDate date];
  [v11 timeIntervalSince1970];
  sub_100076F1C((uint64_t)&v15, v12);

  *(void *)&long long v14 = 0;
  *(void *)((char *)&v14 + 6) = 0;
  sub_100041B18((uint64_t)&v13, (uint64_t)[v5 confidence:off_10045D958, 0, *((void *)&v14 + 1)]);
  sub_1000A0924((uint64_t)&v13, (char)[v5 stationary]);
  sub_1000A0934((uint64_t)&v13, (char)[v5 walking]);
  sub_1000A0944((uint64_t)&v13, (char)[v5 running]);
  sub_1000A092C((uint64_t)&v13, (char)[v5 automotive]);
  sub_1000A093C((uint64_t)&v13, (char)[v5 unknown]);
  sub_1000A3C84((uint64_t)&v15, (uint64_t)&v13);
  sub_1000A0508(v4, (uint64_t)&v15);
  nullsub_34(&v13);
  nullsub_37(&v15);
}

void sub_10001ABE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  nullsub_37(va);
  _Unwind_Resume(a1);
}

void sub_10001AC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nullsub_37(va);

  _Unwind_Resume(a1);
}

void sub_10001AC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  nullsub_34(&a9);
  nullsub_37(&a12);

  _Unwind_Resume(a1);
}

void sub_10001AE64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001AF1C(uint64_t a1)
{
  sub_10001AF44((uint64_t)&v1, a1 + 24);
}

void sub_10001AF44(uint64_t a1, uint64_t a2)
{
  id v3 = *(int **)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  if (v3)
  {
    sub_10006D968(v3);
    operator delete();
  }
  if (*(char *)(a2 + 55) < 0)
  {
    operator delete(*(void **)(a2 + 32));
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    if (!v4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  if (v4) {
LABEL_5:
  }
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
LABEL_6:
  id v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t sub_10001B03C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10001B308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, ...)
{
  va_start(va, a4);
  if (a4) {
    sub_10006E2E4((uint64_t *)va);
  }

  _Unwind_Resume(a1);
}

void sub_10001B848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001B8B8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10001B8B8(a1, *a2);
    sub_10001B8B8(a1, a2[1]);
    uint64_t v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    id v5 = (std::__shared_weak_count *)a2[5];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      double v6 = a2;
    }
    else
    {
      double v6 = a2;
    }
    operator delete(v6);
  }
}

void sub_10001BB28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001C32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001C5D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001C5E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10001C5FC(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = a2[7];
  unsigned int v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    void *exception = off_100454818;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  int v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(void *)a2 + 32))(a2, "ActivityStateClassification");
  int v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "confidence", 10, 1)+ v6;
  int v8 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 8));
  int v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "stationary", 2, 2);
  int v11 = v10 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 16));
  int v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "walking", 2, 3);
  int v14 = v13 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 17));
  int v15 = v14 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v16 = v12
      + v15
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "running", 2, 4);
  int v17 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 18));
  int v18 = v17 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v19 = v18
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "automotive", 2, 5);
  int v20 = v19 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 19));
  int v21 = v16 + v20 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v22 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "unknown", 2, 6);
  LODWORD(a1) = v22
              + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 20));
  LODWORD(a1) = a1 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  LODWORD(a1) = a1 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 64))(a2);
  uint64_t result = v21 + a1 + (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_10001CAC4()
{
  return 1;
}

id sub_10001CB4C(void *a1)
{
  id v1 = a1;
  unsigned int v2 = v1;
  memset(&v38, 0, sizeof(v38));
  memset(&v37, 0, sizeof(v37));
  unsigned int v36 = 0;
  if (v1)
  {
    id v3 = [v1 scheme];
    uint64_t v4 = (const char *)[v3 UTF8String];
    size_t v5 = strlen(v4);
    if (v5 > 0x7FFFFFFFFFFFFFF7) {
      sub_1000A6968();
    }
    std::string::size_type v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v28 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v28 = v5 | 7;
      }
      uint64_t v29 = v28 + 1;
      p_dst = (std::string *)operator new(v28 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
        __dst.__r_.__value_.__s.__data_[0] = 0;
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_6;
        }
LABEL_41:
        operator delete(v38.__r_.__value_.__l.__data_);
LABEL_6:
        std::string v38 = __dst;

        id v8 = [v2 host];
        int v9 = (const char *)[v8 UTF8String];
        size_t v10 = strlen(v9);
        if (v10 > 0x7FFFFFFFFFFFFFF7) {
          sub_1000A6968();
        }
        std::string::size_type v11 = v10;
        if (v10 >= 0x17)
        {
          uint64_t v30 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17) {
            uint64_t v30 = v10 | 7;
          }
          uint64_t v31 = v30 + 1;
          int v12 = (std::string *)operator new(v30 + 1);
          __dst.__r_.__value_.__l.__size_ = v11;
          __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10;
          int v12 = &__dst;
          if (!v10)
          {
            __dst.__r_.__value_.__s.__data_[0] = 0;
            if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_10:
              std::string v37 = __dst;

              int v13 = [v2 port];
              unsigned int v36 = [v13 unsignedIntValue];

              goto LABEL_18;
            }
LABEL_46:
            operator delete(v37.__r_.__value_.__l.__data_);
            goto LABEL_10;
          }
        }
        memmove(v12, v9, v11);
        v12->__r_.__value_.__s.__data_[v11] = 0;
        if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_10;
        }
        goto LABEL_46;
      }
    }
    memmove(p_dst, v4, v6);
    p_dst->__r_.__value_.__s.__data_[v6] = 0;
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
  if (byte_10047EC77 >= 0) {
    int v14 = (const std::string::value_type *)&qword_10047EC60;
  }
  else {
    int v14 = (const std::string::value_type *)qword_10047EC60;
  }
  std::string::assign(&v38, v14);
  if (byte_10047EC8F >= 0) {
    int v15 = (const std::string::value_type *)&qword_10047EC78;
  }
  else {
    int v15 = (const std::string::value_type *)qword_10047EC78;
  }
  std::string::assign(&v37, v15);
  unsigned int v36 = dword_10047ECA8;
LABEL_18:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_10009D124();
  __p.__r_.__value_.__l.__size_ = v16;
  sub_10001D078((uint64_t)&__p, (uint64_t)&v38, &__dst);
  uint64_t v32 = sub_10009C7A8();
  uint64_t v33 = v17;
  sub_10001D078((uint64_t)&v32, (uint64_t)&v37, &__p);
  uint64_t v32 = sub_10009D164();
  uint64_t v33 = v18;
  uint64_t v19 = sub_10009CD54((uint64_t)&v32, &v36);
  id v20 = objc_alloc_init((Class)NSURLComponents);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v21 = &__dst;
  }
  else {
    int v21 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  int v22 = +[NSString stringWithUTF8String:v21];
  [v20 setScheme:v22];

  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  unint64_t v24 = +[NSString stringWithUTF8String:p_p];
  [v20 setHost:v24];

  if (v19)
  {
    long long v25 = +[NSNumber numberWithUnsignedInt:v19];
    [v20 setPort:v25];
  }
  uint64_t v26 = [v20 URL];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_29;
      }
LABEL_35:
      operator delete(v37.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_35;
  }
LABEL_29:
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_30;
  }
LABEL_36:
  operator delete(v38.__r_.__value_.__l.__data_);
LABEL_30:

  return v26;
}

void sub_10001CF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long __p, int a12, __int16 a13, char a14, char a15, uint64_t a16, long long __dst, int a18, __int16 a19, char a20,char a21,int a22,int a23,long long a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete((void *)__p);
  }
  if (a21 < 0) {
    operator delete((void *)__dst);
  }
  if (a28 < 0)
  {
    operator delete((void *)a24);
    if ((*(char *)(v31 - 73) & 0x80000000) == 0)
    {
LABEL_7:

      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v31 - 73) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(v31 - 96));

  _Unwind_Resume(a1);
}

void sub_10001D078(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  sub_1000776C8(*(void *)a1);
  if (LODWORD(__str.__r_.__value_.__l.__data_) == SLODWORD(__str.__r_.__value_.__l.__data_) >> 31)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1000559FC(a3, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
  }
  else
  {
    sub_10035DA48(&__str, a3);
    if (!*(unsigned char *)(a1 + 8))
    {
      if (qword_10047BED8 != -1) {
        dispatch_once(&qword_10047BED8, &stru_100469C90);
      }
      std::string::size_type v6 = (id)qword_10047BEE0;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)a1;
        sub_10015F190(&__str, (uint64_t)__p);
        if (v10 >= 0) {
          id v8 = __p;
        }
        else {
          id v8 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v12 = v7;
        __int16 v13 = 2080;
        int v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "developer override of %s with %s", buf, 0x16u);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }

      *(unsigned char *)(a1 + 8) = 1;
    }
  }
  sub_100077BC8((uint64_t)&__str);
}

void sub_10001D20C(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v7 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::string __p = va_arg(va1, void *);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t buf = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  if (a2)
  {

    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    __cxa_begin_catch(a1);
    std::string::size_type v6 = sub_10035D9D8();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      sub_10015F190((int *)va1, (uint64_t)va);
      sub_10015F2D0();
    }

    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_10001D36C(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_10001D798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10001D800(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100458638;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_10001D8AC(a1, a2);
  return a1;
}

void sub_10001D87C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_10001D898(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001D8AC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v27);
    int v4 = *(_DWORD *)(a2 + 156);
    if (!(_BYTE)v4) {
      goto LABEL_18;
    }
  }
  else
  {
    int v4 = *(_DWORD *)(a2 + 156);
    if (!(_BYTE)v4) {
      goto LABEL_18;
    }
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 156) |= 1u;
    uint64_t v5 = *(void *)(a1 + 16);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = *(void *)(a2 + 16);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10047EB60 + 16);
    }
    sub_10001DD10(v5, v6);
    int v4 = *(_DWORD *)(a2 + 156);
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v21 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 156) |= 2u;
    *(void *)(a1 + 24) = v21;
    int v4 = *(_DWORD *)(a2 + 156);
    if ((v4 & 4) == 0)
    {
LABEL_12:
      if ((v4 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_50;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_12;
  }
  uint64_t v22 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 156) |= 4u;
  *(void *)(a1 + 32) = v22;
  int v4 = *(_DWORD *)(a2 + 156);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v23 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 156) |= 8u;
  *(_DWORD *)(a1 + 48) = v23;
  int v4 = *(_DWORD *)(a2 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v24 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 156) |= 0x10u;
  *(void *)(a1 + 40) = v24;
  int v4 = *(_DWORD *)(a2 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v25 = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 156) |= 0x20u;
  *(void *)(a1 + 56) = v25;
  int v4 = *(_DWORD *)(a2 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_53:
  int v26 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 156) |= 0x40u;
  *(_DWORD *)(a1 + 52) = v26;
  int v4 = *(_DWORD *)(a2 + 156);
  if ((v4 & 0x80) != 0)
  {
LABEL_17:
    uint64_t v7 = *(void *)(a2 + 64);
    *(_DWORD *)(a1 + 156) |= 0x80u;
    *(void *)(a1 + 64) = v7;
    int v4 = *(_DWORD *)(a2 + 156);
  }
LABEL_18:
  if ((v4 & 0xFF00) == 0) {
    goto LABEL_28;
  }
  if ((v4 & 0x100) != 0)
  {
    uint64_t v9 = *(void *)(a2 + 72);
    *(_DWORD *)(a1 + 156) |= 0x100u;
    *(void *)(a1 + 72) = v9;
    int v4 = *(_DWORD *)(a2 + 156);
    if ((v4 & 0x200) == 0)
    {
LABEL_21:
      if ((v4 & 0x400) == 0) {
        goto LABEL_22;
      }
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_21;
  }
  uint64_t v10 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 156) |= 0x200u;
  *(void *)(a1 + 80) = v10;
  int v4 = *(_DWORD *)(a2 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_22:
    if ((v4 & 0x800) == 0) {
      goto LABEL_23;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v11 = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 156) |= 0x400u;
  *(void *)(a1 + 88) = v11;
  int v4 = *(_DWORD *)(a2 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v12 = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 156) |= 0x800u;
  *(void *)(a1 + 96) = v12;
  int v4 = *(_DWORD *)(a2 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v13 = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 156) |= 0x1000u;
  *(void *)(a1 + 104) = v13;
  int v4 = *(_DWORD *)(a2 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_25:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v14 = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 156) |= 0x2000u;
  *(_DWORD *)(a1 + 112) = v14;
  int v4 = *(_DWORD *)(a2 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_39:
  int v15 = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 156) |= 0x4000u;
  *(_DWORD *)(a1 + 116) = v15;
  int v4 = *(_DWORD *)(a2 + 156);
  if ((v4 & 0x8000) != 0)
  {
LABEL_27:
    uint64_t v8 = *(void *)(a2 + 120);
    *(_DWORD *)(a1 + 156) |= 0x8000u;
    *(void *)(a1 + 120) = v8;
    int v4 = *(_DWORD *)(a2 + 156);
  }
LABEL_28:
  if ((v4 & 0xFF0000) == 0) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if ((v4 & 0x10000) == 0)
  {
    if ((v4 & 0x20000) == 0) {
      goto LABEL_31;
    }
LABEL_42:
    uint64_t v17 = *(void *)(a2 + 136);
    *(_DWORD *)(a1 + 156) |= 0x20000u;
    *(void *)(a1 + 136) = v17;
    if ((*(_DWORD *)(a2 + 156) & 0x40000) == 0) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
    goto LABEL_43;
  }
  uint64_t v16 = *(void *)(a2 + 128);
  *(_DWORD *)(a1 + 156) |= 0x10000u;
  *(void *)(a1 + 128) = v16;
  int v4 = *(_DWORD *)(a2 + 156);
  if ((v4 & 0x20000) != 0) {
    goto LABEL_42;
  }
LABEL_31:
  if ((v4 & 0x40000) == 0) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
LABEL_43:
  *(_DWORD *)(a1 + 156) |= 0x40000u;
  uint64_t v18 = *(_DWORD **)(a1 + 144);
  if (!v18) {
    operator new();
  }
  uint64_t v19 = *(void *)(a2 + 144);
  if (!v19) {
    uint64_t v19 = *(void *)(qword_10047EB60 + 144);
  }
  sub_10001DE38(v18, v19);
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10001DC98()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10001DCC0()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10001DCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10001DCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001DD10(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 52);
  if (!(_BYTE)v4) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if (*(unsigned char *)(a2 + 52))
  {
    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 52) |= 1u;
    *(void *)(a1 + 16) = v7;
    int v4 = *(_DWORD *)(a2 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
LABEL_12:
      uint64_t v9 = *(void *)(a2 + 32);
      *(_DWORD *)(a1 + 52) |= 4u;
      *(void *)(a1 + 32) = v9;
      if ((*(_DWORD *)(a2 + 52) & 8) == 0) {
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
      }
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 2) == 0)
  {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 52) |= 2u;
  *(void *)(a1 + 24) = v8;
  int v4 = *(_DWORD *)(a2 + 52);
  if ((v4 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_7:
  if ((v4 & 8) != 0)
  {
LABEL_8:
    uint64_t v5 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 8u;
    *(void *)(a1 + 40) = v5;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10001DE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10001DE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001DE38(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
    if ((*(unsigned char *)(a2 + 24) & 1) == 0) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
    goto LABEL_3;
  }
  if (*(unsigned char *)(a2 + 24))
  {
LABEL_3:
    int v4 = *(_DWORD *)(a2 + 16);
    a1[6] |= 1u;
    a1[4] = v4;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10001DEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10001DEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10001DF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100011394(v32);
  int v6 = v35 | 2;
  v35 |= 2u;
  uint64_t v7 = v34;
  if (!v34) {
    operator new();
  }
  int v35 = v6 | 1;
  uint64_t v8 = v33;
  if (!v33) {
    operator new();
  }
  *(_DWORD *)(v34 + 76) |= 0x10u;
  uint64_t v9 = *(void *)(v7 + 48);
  if (!v9) {
    operator new();
  }
  *(_DWORD *)(v9 + 84) |= 1u;
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10) {
    operator new();
  }
  *(_DWORD *)(v10 + 76) |= 0x40u;
  uint64_t v11 = *(void *)(v10 + 64);
  if (!v11) {
    operator new();
  }
  *(_DWORD *)(v11 + 28) |= 1u;
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    operator new();
  }
  int v13 = *(_DWORD *)(v10 + 76) | 1;
  *(_DWORD *)(v10 + 76) = v13;
  uint64_t v14 = *(void *)(v10 + 16);
  if (!v14) {
    operator new();
  }
  *(_DWORD *)(v10 + 52) = 2;
  *(_DWORD *)(v10 + 76) = v13 | 0x84;
  int v15 = *(std::string **)(v10 + 24);
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v15, (const std::string *)(a1 + 8));
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a2 + 32))(&__str, a2);
  *(_DWORD *)(v10 + 76) |= 8u;
  uint64_t v16 = *(std::string **)(v10 + 32);
  if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v16, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a2 + 24))(&__str, a2);
  *(_DWORD *)(v10 + 76) |= 0x10u;
  uint64_t v17 = *(std::string **)(v10 + 40);
  if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v17, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  int v18 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v10 + 76) |= 2u;
  *(_DWORD *)(v10 + 48) = v18;
  double v19 = sub_100016C70();
  *(_DWORD *)(v14 + 52) |= 2u;
  *(double *)(v14 + 24) = v19;
  double v20 = sub_100016BAC();
  *(_DWORD *)(v14 + 52) |= 4u;
  *(double *)(v14 + 32) = v20;
  v21.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  *(_DWORD *)(v14 + 52) |= 1u;
  *(double *)(v14 + 16) = (double)(1000 * v21.__d_.__rep_) / 1000000000.0 + -978307200.0;
  uint64_t v22 = sub_100048550();
  *(_DWORD *)(v14 + 52) |= 8u;
  *(void *)(v14 + 40) = v22;
  int v23 = *(_DWORD *)(v12 + 40);
  *(_DWORD *)(v12 + 32) = *(_DWORD *)(a3 + 16);
  uint64_t v24 = *(void *)(a3 + 24);
  *(_DWORD *)(v12 + 40) = v23 | 0xC;
  *(void *)(v12 + 24) = v24;
  int v25 = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(v12 + 40) = v23 | 0xE;
  *(_DWORD *)(v12 + 20) = v25;
  int v26 = sub_1000A1A7C(*(_DWORD *)(a3 + 8));
  *(_DWORD *)(v12 + 40) |= 1u;
  *(_DWORD *)(v12 + 16) = v26;
  int v27 = *(_DWORD *)(v8 + 52);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v14 + 16);
  *(void *)(v8 + 32) = *(void *)(v14 + 32);
  uint64_t v28 = *(void *)(v14 + 40);
  *(_DWORD *)(v8 + 52) = v27 | 0xF;
  *(void *)(v8 + 40) = v28;
  char v30 = 19;
  strcpy(__p, "datarun_metadata.pb");
  if (*(char *)(a1 + 55) < 0) {
    sub_1000559FC(&__str, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    std::string __str = *(std::string *)(a1 + 32);
  }
  sub_1000512AC(&__str, (uint64_t)__p);
  sub_10000F4F0((uint64_t)v32, (uint64_t)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v30 < 0) {
LABEL_32:
    }
      operator delete(*(void **)__p);
  }
  else if (v30 < 0)
  {
    goto LABEL_32;
  }
  sub_1000243FC(v32);
}

void sub_10001E440(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t buf, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_begin_catch(a1);
    if (qword_10047BED8 == -1)
    {
LABEL_3:
      uint64_t v24 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR))
      {
LABEL_5:
        __cxa_end_catch();
        JUMPOUT(0x10001E41CLL);
      }
LABEL_4:
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Exception writing protobuf metadata", (uint8_t *)&buf, 2u);
      goto LABEL_5;
    }
  }
  else
  {
    __cxa_begin_catch(a1);
    if (qword_10047BED8 == -1) {
      goto LABEL_3;
    }
  }
  dispatch_once(&qword_10047BED8, &stru_100469E98);
  uint64_t v24 = qword_10047BEE0;
  if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
    goto LABEL_5;
  }
  goto LABEL_4;
}

void sub_10001E644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000243FC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10001E658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000243FC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10001E66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000243FC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10001E680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000243FC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10001E694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_1000243FC(&a20);
    _Unwind_Resume(a1);
  }
  sub_1000243FC(&a20);
  _Unwind_Resume(a1);
}

void sub_10001E6D0(const std::chrono::system_clock::time_point *a1)
{
  time_t v1 = std::chrono::system_clock::to_time_t(a1);
  uint64_t v2 = 1000000 * v1;
  if (1000000 * v1 != 0x8000000000000000) {
    uint64_t v2 = 1000000 * v1 + 210866803200000000;
  }
  uint64_t v3 = v2;
  operator new();
}

void sub_10001EAE4(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_10001EAF8(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_1000E0AA4((void **)(v1 - 200));
  sub_1000E0AA4((void **)va);
  sub_1001905A8(v1 - 176);
  operator delete();
}

void sub_10001EB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::locale::~locale((std::locale *)&a9);
  sub_1000DEA14((uint64_t)&a10);
  std::locale::~locale((std::locale *)(v10 - 208));
  _Unwind_Resume(a1);
}

void sub_10001EB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_10001EB94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DEA14((uint64_t)va);
  std::locale::~locale((std::locale *)(v2 - 208));
  _Unwind_Resume(a1);
}

void sub_10001EDC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

sqlite3 **sub_10001EE40(sqlite3 **a1, char *a2, int a3, int a4)
{
  *a1 = 0;
  if (qword_10047BF08 != -1) {
    dispatch_once(&qword_10047BF08, &stru_100463950);
  }
  uint64_t v8 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO))
  {
    if (a2[23] >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(char **)a2;
    }
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Opening db %s", buf, 0xCu);
  }
  if (a4 == 1)
  {
    if (a2[23] >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(char **)a2;
    }
    unint64_t v11 = sub_10005587C(a2);
    unint64_t v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1000A6968();
    }
    if (v11 >= 0x17)
    {
      uint64_t v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v15 = v11 | 7;
      }
      uint64_t v16 = v15 + 1;
      int v13 = operator new(v15 + 1);
      *(void *)&uint8_t buf[8] = v12;
      *(void *)&uint8_t buf[16] = v16 | 0x8000000000000000;
      *(void *)uint64_t buf = v13;
    }
    else
    {
      buf[23] = v11;
      int v13 = buf;
      if (!v12)
      {
        uint64_t v14 = buf;
        goto LABEL_27;
      }
    }
    if (v12 < 0x20 || (unint64_t)(v13 - v10) < 0x20)
    {
      uint64_t v17 = v10;
      uint64_t v14 = v13;
    }
    else
    {
      uint64_t v17 = &v10[v12 & 0xFFFFFFFFFFFFFFE0];
      uint64_t v14 = &v13[v12 & 0xFFFFFFFFFFFFFFE0];
      int v18 = v13 + 16;
      double v19 = (long long *)(v10 + 16);
      unint64_t v20 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        _OWORD *v18 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 32;
      }
      while (v20);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_27:
        unsigned char *v14 = 0;
        sub_1000099F0((uint64_t)buf, 0, 0);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_29;
      }
    }
    do
    {
      char v22 = *v17++;
      *v14++ = v22;
    }
    while (v17 != &v10[v12]);
    goto LABEL_27;
  }
LABEL_29:
  if (a2[23] >= 0) {
    int v23 = a2;
  }
  else {
    int v23 = *(const char **)a2;
  }
  int v24 = sqlite3_open_v2(v23, a1, a3, 0);
  sub_100088644(v24, *a1);
  if (v24)
  {
    uint64_t v31 = __error();
    sub_100295674(*v31, &v44);
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v40, " w/ ");
    uint64_t v32 = std::string::insert(&v40, 0, "Couldn't open db");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v44;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    unsigned int v36 = std::string::append(&v41, (const std::string::value_type *)p_dst, size);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v43, &v42);
    v43.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v38);
    sub_100204FC4(&v43, (uint64_t)"db::resources::handle::handle(const fs::path &, int, handle::OpenOption)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.cpp", 247, (uint64_t)v38);
  }
  if (qword_10047BF08 == -1)
  {
    int v25 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
      goto LABEL_39;
    }
  }
  else
  {
    dispatch_once(&qword_10047BF08, &stru_100463950);
    int v25 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
      goto LABEL_39;
    }
  }
  if (a2[23] >= 0) {
    int v26 = a2;
  }
  else {
    int v26 = *(char **)a2;
  }
  int v27 = *a1;
  uint64_t v28 = sqlite3_db_filename(*a1, "main");
  *(_DWORD *)uint64_t buf = 136315650;
  *(void *)&uint8_t buf[4] = v26;
  *(_WORD *)&buf[12] = 2048;
  *(void *)&buf[14] = v27;
  *(_WORD *)&buf[22] = 2080;
  v46 = v28;
  _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Opened db %s with sqlite handle %p. main = %s", buf, 0x20u);
LABEL_39:
  sub_10008D100(a1, "PRAGMA auto_vacuum = 2", "Unable to enable auto_vacuum");
  sub_10008D100(a1, "PRAGMA journal_mode=WAL;", "Failed to set journal_mode=WAL");
  if (qword_10047BF08 != -1)
  {
    dispatch_once(&qword_10047BF08, &stru_100463950);
    uint64_t v29 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
      return a1;
    }
    goto LABEL_41;
  }
  uint64_t v29 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG))
  {
LABEL_41:
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Journal mode set to WAL", buf, 2u);
  }
  return a1;
}

void sub_10001F414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    sub_100205504((std::runtime_error *)(v62 - 160));
    std::locale v64 = a33;
    if (!a33)
    {
LABEL_10:
      std::runtime_error::~runtime_error((std::runtime_error *)(v62 - 200));
      if (a60 < 0)
      {
        operator delete(a55);
        if ((a41 & 0x80000000) == 0)
        {
LABEL_12:
          if ((a53 & 0x80000000) == 0) {
            goto LABEL_13;
          }
          goto LABEL_18;
        }
      }
      else if ((a41 & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(a36);
      if ((a53 & 0x80000000) == 0)
      {
LABEL_13:
        if (a47 < 0) {
          goto LABEL_14;
        }
        goto LABEL_19;
      }
LABEL_18:
      operator delete(a48);
      if (a47 < 0)
      {
LABEL_14:
        operator delete(a42);
        if ((v61 & 1) == 0)
        {
LABEL_21:
          if (*(char *)(v62 - 161) < 0)
          {
            operator delete(*(void **)(v62 - 184));
            _Unwind_Resume(a1);
          }
          _Unwind_Resume(a1);
        }
LABEL_20:
        __cxa_free_exception(v60);
        goto LABEL_21;
      }
LABEL_19:
      if (!v61) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
LABEL_9:
    operator delete(v64);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a23);
  sub_100205504((std::runtime_error *)(v62 - 160));
  std::locale v64 = a33;
  if (!a33) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_10001F818(_Unwind_Exception *a1)
{
  int v6 = v5;

  _Unwind_Resume(a1);
}

void sub_10001F840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001F85C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001FB9C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10015DC38((id *)(v13 + 32));
  sub_100336E3C((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_10001FF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }

  _Unwind_Resume(a1);
}

void sub_100020254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1000202DC(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4)
{
  int64_t v8 = sub_100048550();
  v9.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)off_10045A508;
  *(_OWORD *)&v12.__r_.__value_.__r.__words[1] = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  memset(v15, 0, 28);
  memset(&v15[32], 0, 153);
  uint64_t v16 = off_10045A4C8;
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  memset(v23, 0, sizeof(v23));
  long long v21 = off_10045A4E8;
  char v22 = v23;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v25 = 0;
  v24[2] = 0;
  v24[3] = 0;
  *(void *)((char *)v24 + 5) = 0;
  v24[0] = 0;
  char v30 = 1;
  __int16 v29 = 0;
  sub_1000A31D8((uint64_t)&v12, 4);
  sub_100077140((uint64_t)&v12, (const std::string *)(a1 + 8));
  sub_1000A3258((uint64_t)&v12, a2);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a3 + 32))(v31, a3);
  sub_1000A3250((uint64_t)&v12, v31);
  if (SHIBYTE(v31[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31[0].__r_.__value_.__l.__data_);
  }
  sub_1000A3284((uint64_t)&v12, *(_DWORD *)a1);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a3 + 24))(v31, a3);
  sub_1000A31AC((uint64_t)&v12, v31);
  if (SHIBYTE(v31[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31[0].__r_.__value_.__l.__data_);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a3 + 40))(v31, a3);
  sub_1000A31D0((uint64_t)&v12, v31);
  if (SHIBYTE(v31[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31[0].__r_.__value_.__l.__data_);
  }
  sub_1000A3190((uint64_t)&v12, v8 / 1000000);
  sub_1000A31BC((uint64_t)&v12, v8);
  sub_1000A3198((uint64_t)&v12, 1000 * v9.__d_.__rep_);
  sub_1000A3248(&v12, a2 + 2);
  sub_1000A31B4(&v12, a2 + 1);
  v29 |= 0x400u;
  sub_1000A3260((uint64_t)&v12, a4);
  sub_10000F988((uint64_t)v31, (uint64_t)&a2[5].__r_.__value_.__r.__words[2]);
  sub_1000A31EC((uint64_t)&v12, (uint64_t)v31);
  sub_100002528((uint64_t)v31);
  char v11 = 20;
  strcpy(__p, "datarun_metadata.bin");
  if (*(char *)(a1 + 55) < 0) {
    sub_1000559FC(&__dst, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    std::string __dst = *(std::string *)(a1 + 32);
  }
  sub_1000512AC(&__dst, (uint64_t)__p);
  sub_100052228(0, v31);
  sub_100051DE0((uint64_t)&__dst, (uint64_t)v31, 0, (uint64_t)v33);
  if (SHIBYTE(v31[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31[0].__r_.__value_.__l.__data_);
  }
  sub_1000516F8((uint64_t)v33, 7, &v32);
  *(_OWORD *)&v31[0].__r_.__value_.__l.__data_ = v32;
  if (*((void *)&v32 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  sub_10009F22C();
}

void sub_10002097C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a2 != 1) {
      goto LABEL_11;
    }
  }
  else if (a2 != 1)
  {
LABEL_11:
    sub_1000A318C(&a15);
    _Unwind_Resume(a1);
  }
  int v18 = __cxa_begin_catch(a1);
  if (qword_10047BED8 == -1)
  {
    uint64_t v19 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR))
    {
LABEL_8:
      __cxa_end_catch();
      JUMPOUT(0x10002093CLL);
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100469E98);
    uint64_t v19 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
  }
  uint64_t v20 = (*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
  *(_DWORD *)(v15 - 96) = 136315138;
  *(void *)(v15 - 92) = v20;
  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Somehow we failed to convert our metadata into a thrift file. %s", (uint8_t *)(v15 - 96), 0xCu);
  goto LABEL_8;
}

char *sub_100020B9C@<X0>(char *__s@<X1>, char *result@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void *)result;
  uint64_t v6 = *((void *)result + 1);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v5 == v6) {
    goto LABEL_10;
  }
  int v7 = *(char *)(v5 + 23);
  if (v7 >= 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = *(void *)v5;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(v5 + 8);
  }
  for (uint64_t result = sub_10006B648((std::string *)a3, a3, v8, (std::string::value_type *)(v8 + v9), v9);
        ;
        uint64_t result = sub_10006B648((std::string *)a3, v16, v18, (std::string::value_type *)(v18 + v19), v19))
  {
    v5 += 24;
LABEL_10:
    if (v5 == v6) {
      break;
    }
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = *(void *)a3;
    }
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a3 + 8);
    }
    uint64_t v12 = v11 + v10;
    size_t v13 = strlen(__s);
    sub_10006BAEC((std::string *)a3, v12, (unint64_t)__s, &__s[v13], v13);
    uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
    if ((v14 & 0x80u) == 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = *(void *)a3;
    }
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(a3 + 8);
    }
    uint64_t v16 = v15 + v14;
    int v17 = *(char *)(v5 + 23);
    if (v17 >= 0) {
      unint64_t v18 = v5;
    }
    else {
      unint64_t v18 = *(void *)v5;
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      std::string::size_type v19 = *(void *)(v5 + 8);
    }
  }
  return result;
}

void sub_100020CA0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

std::string *sub_100020CC0@<X0>(std::string *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  p_std::string::size_type size = &result[1].__r_.__value_.__l.__size_;
  while (1)
  {
    p_std::string::size_type size = (std::string::size_type *)*p_size;
    if (!p_size) {
      break;
    }
    uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *(void *)(a2 + 8);
    }
    if (v4) {
      std::string::push_back((std::string *)a2, 10);
    }
    uint64_t v5 = sub_100085D38((uint64_t)(p_size + 2));
    int v6 = *(char *)(v5 + 23);
    if (v6 >= 0) {
      int v7 = (const std::string::value_type *)v5;
    }
    else {
      int v7 = *(const std::string::value_type **)v5;
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      std::string::size_type v8 = *(void *)(v5 + 8);
    }
    uint64_t result = std::string::append((std::string *)a2, v7, v8);
  }
  return result;
}

void sub_100020D44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100020FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100021034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000211B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002120C(void *a1@<X8>)
{
  id v9 = +[DarwinDeviceInfo currentDevice];
  id v2 = [v9 hwModel];
  uint64_t v3 = (const char *)[v2 UTF8String];
  size_t v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    std::string::size_type v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
    goto LABEL_8;
  }
  *((unsigned char *)a1 + 23) = v4;
  if (v4) {
LABEL_8:
  }
    memmove(a1, v3, v5);
  *((unsigned char *)a1 + v5) = 0;
}

void sub_100021300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100021314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100021374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000213B4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream();
  unsigned int v2 = (*(uint64_t (**)(wireless_diagnostics::google::protobuf::MessageLite *))(*(void *)a1 + 72))(a1);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10, v2);
  if ((wireless_diagnostics::google::protobuf::MessageLite::SerializeToCodedStream(a1, (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10) & 1) == 0)
  {
    uint64_t v3 = sub_10015AD8C();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      (*(void (**)(void **__return_ptr, wireless_diagnostics::google::protobuf::MessageLite *))(*(void *)a1 + 16))(__p, a1);
      size_t v4 = v9 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 68289795;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2081;
      uint64_t v16 = v4;
      __int16 v17 = 2082;
      unint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "serialized";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to serialize-append-delimited properly\", \"typename\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }

    size_t v5 = sub_10015AD8C();
    if (os_signpost_enabled(v5))
    {
      (*(void (**)(void **__return_ptr, wireless_diagnostics::google::protobuf::MessageLite *))(*(void *)a1 + 16))(__p, a1);
      uint64_t v6 = v9 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 68289795;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2081;
      uint64_t v16 = v6;
      __int16 v17 = 2082;
      unint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "serialized";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to serialize-append-delimited properly", "{\"msg%{public}.0s\":\"Failed to serialize-append-delimited properly\", \"typename\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v7 = sub_10015AD8C();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, wireless_diagnostics::google::protobuf::MessageLite *))(*(void *)a1 + 16))(__p, a1);
      sub_1003A3C50((char *)__p, buf, v7);
    }

    abort_report_np();
    __break(1u);
  }
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10);
}

void sub_1000216B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)va);
  _Unwind_Resume(a1);
}

void sub_1000216DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)va);
  _Unwind_Resume(a1);
}

void sub_1000216E8()
{
  JUMPOUT(0x1000216F0);
}

uint64_t sub_100021704(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    int v3 = 0;
    goto LABEL_31;
  }
  if ((*(unsigned char *)(a1 + 60) & 1) == 0)
  {
    int v3 = 0;
    if ((*(unsigned char *)(a1 + 60) & 2) == 0) {
      goto LABEL_31;
    }
LABEL_25:
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10)
    {
      int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10002189C(v10, a2);
      if (v12 < 0x80)
      {
LABEL_27:
        int v13 = 1;
LABEL_30:
        v3 += v12 + v13 + 1;
        goto LABEL_31;
      }
    }
    else
    {
      int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10002189C(*(void *)(qword_10047EAF8 + 48), a2);
      if (v12 < 0x80) {
        goto LABEL_27;
      }
    }
    int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, v11);
    goto LABEL_30;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    int v5 = *(unsigned __int8 *)(v4 + 52);
    if (*(unsigned char *)(v4 + 52)) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(qword_10047EAF8 + 40);
    int v5 = *(unsigned __int8 *)(v4 + 52);
    if (*(unsigned char *)(v4 + 52))
    {
LABEL_8:
      unsigned int v6 = (v5 << 31 >> 31) & 9;
      if ((v5 & 2) != 0) {
        v6 += 9;
      }
      if ((v5 & 4) != 0) {
        uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v6 + 9);
      }
      else {
        uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v6;
      }
      if ((v5 & 8) != 0) {
        uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v7
      }
                                                                             + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v4 + 40), (unint64_t)a2)+ 1);
      std::string::size_type v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v4 + 8);
      char v9 = *(void **)(v4 + 8);
      if (!v9) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  uint64_t v7 = 0;
  std::string::size_type v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v4 + 8);
  char v9 = *(void **)(v4 + 8);
  if (v9)
  {
LABEL_19:
    if (*v9 != v9[1]) {
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v8, a2)+ v7);
    }
  }
LABEL_21:
  *(_DWORD *)(v4 + 48) = v7;
  if (v7 < 0x80)
  {
    int v3 = v7 + 2;
    if ((*(_DWORD *)(a1 + 60) & 2) == 0) {
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  int v3 = v7
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2)
     + 1;
  if ((*(_DWORD *)(a1 + 60) & 2) != 0) {
    goto LABEL_25;
  }
LABEL_31:
  uint64_t v15 = wireless_diagnostics::google::protobuf::internal::ExtensionSet::ByteSize((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8))
      + v3;
  uint64_t v16 = *(void **)(a1 + 32);
  if (v16 && *v16 != v16[1]) {
    uint64_t v15 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 32), v14)+ v15;
  }
  *(_DWORD *)(a1 + 56) = v15;
  return v15;
}

uint64_t sub_10002189C(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 76);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
    unsigned int v6 = *(void **)(a1 + 8);
    if (!v6) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
  if ((*(unsigned char *)(a1 + 76) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 76) & 2) == 0) {
      goto LABEL_19;
    }
LABEL_13:
    uint64_t v9 = *(void *)(a1 + 24);
    if (v9)
    {
      uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100110610(v9, a2);
      if (v10 < 0x80)
      {
LABEL_15:
        int v11 = 1;
LABEL_18:
        uint64_t v4 = (v4 + v10 + v11 + 1);
        int v3 = *(_DWORD *)(a1 + 76);
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100110610(*(void *)(qword_10047E8F0 + 24), a2);
      if (v10 < 0x80) {
        goto LABEL_15;
      }
    }
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    std::string::size_type v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10010EA08(v7, a2);
    if (v8 < 0x80) {
      goto LABEL_9;
    }
LABEL_12:
    uint64_t v4 = v8
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2)+ 1;
    int v3 = *(_DWORD *)(a1 + 76);
    if ((v3 & 2) == 0) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  std::string::size_type v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10010EA08(*(void *)(qword_10047E8F0 + 16), a2);
  if (v8 >= 0x80) {
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v4 = (v8 + 2);
  int v3 = *(_DWORD *)(a1 + 76);
  if ((v3 & 2) != 0) {
    goto LABEL_13;
  }
LABEL_19:
  if ((v3 & 4) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    if (v13)
    {
      uint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100114FB4(v13, a2);
      if (v14 < 0x80) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100114FB4(*(void *)(qword_10047E8F0 + 32), a2);
      if (v14 < 0x80)
      {
LABEL_28:
        uint64_t v4 = (v4 + v14 + 3);
        int v3 = *(_DWORD *)(a1 + 76);
        if ((v3 & 8) != 0) {
          goto LABEL_32;
        }
LABEL_21:
        if ((v3 & 0x10) == 0) {
          goto LABEL_22;
        }
LABEL_38:
        uint64_t v17 = *(void *)(a1 + 48);
        if (v17)
        {
          unint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100021DF8(v17, a2);
          if (v18 < 0x80) {
            goto LABEL_40;
          }
        }
        else
        {
          unint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100021DF8(*(void *)(qword_10047E8F0 + 48), a2);
          if (v18 < 0x80)
          {
LABEL_40:
            uint64_t v4 = (v4 + v18 + 3);
            int v3 = *(_DWORD *)(a1 + 76);
            if ((v3 & 0x20) != 0) {
              goto LABEL_44;
            }
LABEL_23:
            if ((v3 & 0x40) == 0) {
              goto LABEL_24;
            }
LABEL_50:
            uint64_t v21 = *(void *)(a1 + 64);
            if (v21)
            {
              char v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001008DC(v21, a2);
              if (v22 < 0x80)
              {
LABEL_52:
                int v23 = 1;
                goto LABEL_55;
              }
            }
            else
            {
              char v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001008DC(*(void *)(qword_10047E8F0 + 64), a2);
              if (v22 < 0x80) {
                goto LABEL_52;
              }
            }
            int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
LABEL_55:
            uint64_t v4 = (v4 + v22 + v23 + 2);
            int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
            unsigned int v6 = *(void **)(a1 + 8);
            if (!v6) {
              goto LABEL_25;
            }
            goto LABEL_56;
          }
        }
        uint64_t v4 = v4
           + v18
           + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2)+ 2;
        int v3 = *(_DWORD *)(a1 + 76);
        if ((v3 & 0x20) != 0) {
          goto LABEL_44;
        }
        goto LABEL_23;
      }
    }
    uint64_t v4 = v4
       + v14
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2)+ 2;
    int v3 = *(_DWORD *)(a1 + 76);
    if ((v3 & 8) != 0) {
      goto LABEL_32;
    }
    goto LABEL_21;
  }
  if ((v3 & 8) == 0) {
    goto LABEL_21;
  }
LABEL_32:
  uint64_t v15 = *(void *)(a1 + 40);
  if (v15)
  {
    uint64_t v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100021C08(v15, a2);
    if (v16 < 0x80) {
      goto LABEL_34;
    }
LABEL_37:
    uint64_t v4 = v4
       + v16
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2)+ 2;
    int v3 = *(_DWORD *)(a1 + 76);
    if ((v3 & 0x10) != 0) {
      goto LABEL_38;
    }
    goto LABEL_22;
  }
  uint64_t v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100021C08(*(void *)(qword_10047E8F0 + 40), a2);
  if (v16 >= 0x80) {
    goto LABEL_37;
  }
LABEL_34:
  uint64_t v4 = (v4 + v16 + 3);
  int v3 = *(_DWORD *)(a1 + 76);
  if ((v3 & 0x10) != 0) {
    goto LABEL_38;
  }
LABEL_22:
  if ((v3 & 0x20) == 0) {
    goto LABEL_23;
  }
LABEL_44:
  uint64_t v19 = *(void *)(a1 + 56);
  if (v19)
  {
    uint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000E42B8(v19, a2);
    if (v20 < 0x80) {
      goto LABEL_46;
    }
LABEL_49:
    uint64_t v4 = v4
       + v20
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2)+ 2;
    if ((*(_DWORD *)(a1 + 76) & 0x40) != 0) {
      goto LABEL_50;
    }
    goto LABEL_24;
  }
  uint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000E42B8(*(void *)(qword_10047E8F0 + 56), a2);
  if (v20 >= 0x80) {
    goto LABEL_49;
  }
LABEL_46:
  uint64_t v4 = (v4 + v20 + 3);
  if ((*(_DWORD *)(a1 + 76) & 0x40) != 0) {
    goto LABEL_50;
  }
LABEL_24:
  int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  unsigned int v6 = *(void **)(a1 + 8);
  if (!v6)
  {
LABEL_25:
    *(_DWORD *)(a1 + 72) = v4;
    return v4;
  }
LABEL_56:
  if (*v6 == v6[1]) {
    goto LABEL_25;
  }
  uint64_t v24 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v5, a2)
      + v4;
  *(_DWORD *)(a1 + 72) = v24;
  return v24;
}

uint64_t sub_100021C08(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
    unsigned int v6 = *(void **)(a1 + 8);
    if (!v6) {
      goto LABEL_23;
    }
    goto LABEL_36;
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 48) & 2) == 0) {
      goto LABEL_20;
    }
LABEL_14:
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8)
    {
      uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000F1144(v8, a2);
      if (v9 < 0x80)
      {
LABEL_16:
        int v10 = 1;
LABEL_19:
        uint64_t v4 = (v4 + v9 + v10 + 1);
        int v3 = *(_DWORD *)(a1 + 48);
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000F1144(*(void *)(qword_10047EA40 + 16), a2);
      if (v9 < 0x80) {
        goto LABEL_16;
      }
    }
    int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    goto LABEL_19;
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
  if ((v7 & 0x80000000) != 0)
  {
    uint64_t v4 = 11;
    if ((v3 & 2) != 0) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2)+ 1;
      int v3 = *(_DWORD *)(a1 + 48);
      if ((v3 & 2) == 0) {
        goto LABEL_20;
      }
      goto LABEL_14;
    }
    uint64_t v4 = 2;
    if ((v3 & 2) != 0) {
      goto LABEL_14;
    }
  }
LABEL_20:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    uint64_t v14 = *(void *)(a1 + 32);
    if (v14)
    {
      uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000FB998(v14, a2);
      if (v15 < 0x80)
      {
LABEL_32:
        int v16 = 1;
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000FB998(*(void *)(qword_10047EA40 + 32), a2);
      if (v15 < 0x80) {
        goto LABEL_32;
      }
    }
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
LABEL_35:
    uint64_t v4 = (v4 + v15 + v16 + 1);
    int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
    unsigned int v6 = *(void **)(a1 + 8);
    if (!v6) {
      goto LABEL_23;
    }
    goto LABEL_36;
  }
  uint64_t v12 = *(void *)(a1 + 24);
  if (v12)
  {
    uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000F784C(v12, a2);
    if (v13 < 0x80) {
      goto LABEL_26;
    }
LABEL_29:
    uint64_t v4 = v4
       + v13
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2)+ 1;
    if ((*(_DWORD *)(a1 + 48) & 8) != 0) {
      goto LABEL_30;
    }
    goto LABEL_22;
  }
  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000F784C(*(void *)(qword_10047EA40 + 24), a2);
  if (v13 >= 0x80) {
    goto LABEL_29;
  }
LABEL_26:
  uint64_t v4 = (v4 + v13 + 2);
  if ((*(_DWORD *)(a1 + 48) & 8) != 0) {
    goto LABEL_30;
  }
LABEL_22:
  int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  unsigned int v6 = *(void **)(a1 + 8);
  if (!v6)
  {
LABEL_23:
    *(_DWORD *)(a1 + 44) = v4;
    return v4;
  }
LABEL_36:
  if (*v6 == v6[1]) {
    goto LABEL_23;
  }
  uint64_t v17 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v5, a2)
      + v4;
  *(_DWORD *)(a1 + 44) = v17;
  return v17;
}

uint64_t sub_100021DF8(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 84);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
    unsigned int v6 = *(void **)(a1 + 8);
    if (!v6) {
      goto LABEL_26;
    }
    goto LABEL_63;
  }
  if ((*(unsigned char *)(a1 + 84) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 84) & 2) == 0) {
      goto LABEL_19;
    }
LABEL_13:
    uint64_t v9 = *(void *)(a1 + 24);
    if (v9)
    {
      int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001407B4(v9, a2);
      if (v10 < 0x80)
      {
LABEL_15:
        int v11 = 1;
LABEL_18:
        uint64_t v4 = (v4 + v10 + v11 + 1);
        int v3 = *(_DWORD *)(a1 + 84);
        goto LABEL_19;
      }
    }
    else
    {
      int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001407B4(*(void *)(qword_10047EA78 + 24), a2);
      if (v10 < 0x80) {
        goto LABEL_15;
      }
    }
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10009AAD0(v7, a2);
    if (v8 < 0x80) {
      goto LABEL_9;
    }
LABEL_12:
    uint64_t v4 = v8
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2)+ 1;
    int v3 = *(_DWORD *)(a1 + 84);
    if ((v3 & 2) == 0) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10009AAD0(*(void *)(qword_10047EA78 + 16), a2);
  if (v8 >= 0x80) {
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v4 = (v8 + 2);
  int v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 2) != 0) {
    goto LABEL_13;
  }
LABEL_19:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_21;
    }
LABEL_33:
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15)
    {
      int v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100142450(v15, a2);
      if (v16 < 0x80) {
        goto LABEL_35;
      }
    }
    else
    {
      int v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100142450(*(void *)(qword_10047EA78 + 40), a2);
      if (v16 < 0x80)
      {
LABEL_35:
        uint64_t v4 = (v4 + v16 + 2);
        int v3 = *(_DWORD *)(a1 + 84);
        if ((v3 & 0x10) != 0) {
          goto LABEL_39;
        }
LABEL_22:
        if ((v3 & 0x20) == 0) {
          goto LABEL_23;
        }
LABEL_45:
        uint64_t v19 = *(void *)(a1 + 56);
        if (v19)
        {
          uint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100144730(v19, a2);
          if (v20 < 0x80) {
            goto LABEL_47;
          }
        }
        else
        {
          uint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100144730(*(void *)(qword_10047EA78 + 56), a2);
          if (v20 < 0x80)
          {
LABEL_47:
            uint64_t v4 = (v4 + v20 + 2);
            int v3 = *(_DWORD *)(a1 + 84);
            if ((v3 & 0x40) != 0) {
              goto LABEL_51;
            }
LABEL_24:
            if ((v3 & 0x80) == 0) {
              goto LABEL_25;
            }
LABEL_57:
            uint64_t v23 = *(void *)(a1 + 72);
            if (v23)
            {
              uint64_t v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000221D4(v23, a2);
              if (v24 < 0x80)
              {
LABEL_59:
                int v25 = 1;
                goto LABEL_62;
              }
            }
            else
            {
              uint64_t v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000221D4(*(void *)(qword_10047EA78 + 72), a2);
              if (v24 < 0x80) {
                goto LABEL_59;
              }
            }
            int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
LABEL_62:
            uint64_t v4 = (v4 + v24 + v25 + 1);
            int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
            unsigned int v6 = *(void **)(a1 + 8);
            if (!v6) {
              goto LABEL_26;
            }
            goto LABEL_63;
          }
        }
        uint64_t v4 = v4
           + v20
           + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2)+ 1;
        int v3 = *(_DWORD *)(a1 + 84);
        if ((v3 & 0x40) != 0) {
          goto LABEL_51;
        }
        goto LABEL_24;
      }
    }
    uint64_t v4 = v4
       + v16
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2)+ 1;
    int v3 = *(_DWORD *)(a1 + 84);
    if ((v3 & 0x10) != 0) {
      goto LABEL_39;
    }
    goto LABEL_22;
  }
  uint64_t v13 = *(void *)(a1 + 32);
  if (v13)
  {
    uint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100141710(v13, a2);
    if (v14 < 0x80) {
      goto LABEL_29;
    }
LABEL_32:
    uint64_t v4 = v4
       + v14
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2)+ 1;
    int v3 = *(_DWORD *)(a1 + 84);
    if ((v3 & 8) != 0) {
      goto LABEL_33;
    }
    goto LABEL_21;
  }
  uint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100141710(*(void *)(qword_10047EA78 + 32), a2);
  if (v14 >= 0x80) {
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v4 = (v4 + v14 + 2);
  int v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 8) != 0) {
    goto LABEL_33;
  }
LABEL_21:
  if ((v3 & 0x10) == 0) {
    goto LABEL_22;
  }
LABEL_39:
  uint64_t v17 = *(void *)(a1 + 48);
  if (v17)
  {
    unint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100143228(v17, a2);
    if (v18 < 0x80) {
      goto LABEL_41;
    }
LABEL_44:
    uint64_t v4 = v4
       + v18
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2)+ 1;
    int v3 = *(_DWORD *)(a1 + 84);
    if ((v3 & 0x20) != 0) {
      goto LABEL_45;
    }
    goto LABEL_23;
  }
  unint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100143228(*(void *)(qword_10047EA78 + 48), a2);
  if (v18 >= 0x80) {
    goto LABEL_44;
  }
LABEL_41:
  uint64_t v4 = (v4 + v18 + 2);
  int v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 0x20) != 0) {
    goto LABEL_45;
  }
LABEL_23:
  if ((v3 & 0x40) == 0) {
    goto LABEL_24;
  }
LABEL_51:
  uint64_t v21 = *(void *)(a1 + 64);
  if (v21)
  {
    char v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001464D4(v21, a2);
    if (v22 < 0x80) {
      goto LABEL_53;
    }
LABEL_56:
    uint64_t v4 = v4
       + v22
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2)+ 1;
    if ((*(_DWORD *)(a1 + 84) & 0x80) != 0) {
      goto LABEL_57;
    }
    goto LABEL_25;
  }
  char v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001464D4(*(void *)(qword_10047EA78 + 64), a2);
  if (v22 >= 0x80) {
    goto LABEL_56;
  }
LABEL_53:
  uint64_t v4 = (v4 + v22 + 2);
  if ((*(_DWORD *)(a1 + 84) & 0x80) != 0) {
    goto LABEL_57;
  }
LABEL_25:
  int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  unsigned int v6 = *(void **)(a1 + 8);
  if (!v6)
  {
LABEL_26:
    *(_DWORD *)(a1 + 80) = v4;
    return v4;
  }
LABEL_63:
  if (*v6 == v6[1]) {
    goto LABEL_26;
  }
  uint64_t v26 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v5, a2)
      + v4;
  *(_DWORD *)(a1 + 80) = v26;
  return v26;
}

uint64_t sub_1000221D4(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3 = *(_DWORD *)(a1 + 156);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0;
    if ((v3 & 0xFF00) == 0) {
      goto LABEL_81;
    }
    goto LABEL_53;
  }
  if ((v3 & 1) == 0)
  {
    int v4 = 0;
    goto LABEL_25;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    int v7 = *(unsigned __int8 *)(v6 + 52);
    if (*(unsigned char *)(v6 + 52)) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(qword_10047EB60 + 16);
    int v7 = *(unsigned __int8 *)(v6 + 52);
    if (*(unsigned char *)(v6 + 52))
    {
LABEL_8:
      unsigned int v8 = (v7 << 31 >> 31) & 9;
      if ((v7 & 2) != 0) {
        v8 += 9;
      }
      if ((v7 & 4) != 0) {
        uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v8 + 9);
      }
      else {
        uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8;
      }
      if ((v7 & 8) != 0) {
        uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v9
      }
                                                                             + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v6 + 40), (unint64_t)a2)+ 1);
      int v10 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v6 + 8);
      int v11 = *(void **)(v6 + 8);
      if (!v11) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  uint64_t v9 = 0;
  int v10 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v6 + 8);
  int v11 = *(void **)(v6 + 8);
  if (v11)
  {
LABEL_19:
    if (*v11 != v11[1]) {
      uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v10, a2)+ v9);
    }
  }
LABEL_21:
  *(_DWORD *)(v6 + 48) = v9;
  if (v9 >= 0x80) {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
  }
  else {
    int v12 = 1;
  }
  int v4 = v9 + v12 + 1;
  int v3 = *(_DWORD *)(a1 + 156);
LABEL_25:
  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  if ((v3 & 4) != 0) {
    int v13 = v4 + 9;
  }
  else {
    int v13 = v4;
  }
  if ((v3 & 8) != 0)
  {
    uint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
    if ((v14 & 0x80000000) != 0)
    {
      int v15 = 10;
    }
    else if (v14 >= 0x80)
    {
      int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
      int v3 = *(_DWORD *)(a1 + 156);
    }
    else
    {
      int v15 = 1;
    }
    v13 += v15 + 1;
  }
  int v16 = v13 + 9;
  if ((v3 & 0x10) == 0) {
    int v16 = v13;
  }
  if ((v3 & 0x20) != 0) {
    LODWORD(v5) = v16 + 9;
  }
  else {
    LODWORD(v5) = v16;
  }
  if ((v3 & 0x40) != 0)
  {
    uint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if ((v17 & 0x80000000) != 0)
    {
      int v18 = 10;
    }
    else if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2);
      int v3 = *(_DWORD *)(a1 + 156);
    }
    else
    {
      int v18 = 1;
    }
    LODWORD(v5) = v5 + v18 + 1;
  }
  if ((v3 & 0x80) != 0) {
    uint64_t v5 = (v5 + 9);
  }
  else {
    uint64_t v5 = v5;
  }
  if ((v3 & 0xFF00) != 0)
  {
LABEL_53:
    int v19 = v5 + 9;
    if ((v3 & 0x100) == 0) {
      int v19 = v5;
    }
    if ((v3 & 0x200) != 0) {
      v19 += 9;
    }
    if ((v3 & 0x400) != 0) {
      v19 += 9;
    }
    if ((v3 & 0x800) != 0) {
      v19 += 9;
    }
    if ((v3 & 0x1000) != 0) {
      LODWORD(v5) = v19 + 9;
    }
    else {
      LODWORD(v5) = v19;
    }
    if ((v3 & 0x2000) != 0)
    {
      uint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 112);
      if ((v20 & 0x80000000) != 0)
      {
        int v21 = 11;
      }
      else if (v20 >= 0x80)
      {
        int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2)
            + 1;
        int v3 = *(_DWORD *)(a1 + 156);
      }
      else
      {
        int v21 = 2;
      }
      LODWORD(v5) = v21 + v5;
    }
    if ((v3 & 0x4000) != 0)
    {
      char v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 116);
      if ((v22 & 0x80000000) != 0)
      {
        int v23 = 11;
      }
      else if (v22 >= 0x80)
      {
        int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2)
            + 1;
        int v3 = *(_DWORD *)(a1 + 156);
      }
      else
      {
        int v23 = 2;
      }
      LODWORD(v5) = v23 + v5;
    }
    if ((v3 & 0x8000) != 0) {
      uint64_t v5 = (v5 + 10);
    }
    else {
      uint64_t v5 = v5;
    }
  }
LABEL_81:
  if ((v3 & 0xFF0000) != 0)
  {
    unsigned int v24 = v5 + 10;
    if ((v3 & 0x10000) == 0) {
      unsigned int v24 = v5;
    }
    uint64_t v5 = (v3 & 0x20000) != 0 ? v24 + 10 : v24;
    if ((v3 & 0x40000) != 0)
    {
      uint64_t v25 = *(void *)(a1 + 144);
      if (v25)
      {
        if ((*(unsigned char *)(v25 + 24) & 1) == 0) {
          goto LABEL_90;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(qword_10047EB60 + 144);
        if ((*(unsigned char *)(v25 + 24) & 1) == 0)
        {
LABEL_90:
          uint64_t v26 = 0;
          uint64_t v27 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v25 + 8);
          uint64_t v28 = *(void **)(v25 + 8);
          if (!v28) {
            goto LABEL_102;
          }
          goto LABEL_100;
        }
      }
      __int16 v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v25 + 16);
      if ((v29 & 0x80000000) != 0)
      {
        uint64_t v26 = 11;
        uint64_t v27 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v25 + 8);
        uint64_t v28 = *(void **)(v25 + 8);
        if (!v28) {
          goto LABEL_102;
        }
      }
      else if (v29 >= 0x80)
      {
        uint64_t v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2)+ 1;
        uint64_t v27 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v25 + 8);
        uint64_t v28 = *(void **)(v25 + 8);
        if (!v28)
        {
LABEL_102:
          *(_DWORD *)(v25 + 20) = v26;
          if (v26 >= 0x80) {
            int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26, a2);
          }
          else {
            int v30 = 1;
          }
          uint64_t v5 = (v5 + v26 + v30 + 2);
          goto LABEL_106;
        }
      }
      else
      {
        uint64_t v26 = 2;
        uint64_t v27 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v25 + 8);
        uint64_t v28 = *(void **)(v25 + 8);
        if (!v28) {
          goto LABEL_102;
        }
      }
LABEL_100:
      if (*v28 != v28[1]) {
        uint64_t v26 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v27, a2)+ v26;
      }
      goto LABEL_102;
    }
  }
LABEL_106:
  uint64_t v31 = *(void **)(a1 + 8);
  if (v31 && *v31 != v31[1]) {
    uint64_t v5 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8), a2)+ v5;
  }
  *(_DWORD *)(a1 + 152) = v5;
  return v5;
}

void sub_100023540()
{
}

void sub_10002354C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x100023398);
}

void sub_1000235E0(void *a1, int a2)
{
  if (qword_10047BED8 == -1)
  {
    int v4 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_10047BED8, &stru_10046A488);
  int v4 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    uint64_t v5 = (uint64_t)(a1[4] - a1[3]) >> 3;
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    __int16 v15 = 2048;
    __p[0] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Starting up sensor collection %d with %zu sensors in collection", buf, 0x12u);
  }
LABEL_4:
  sub_100023D08(a2, (uint64_t)buf);
  if ((*(uint64_t (**)(void *, uint8_t *))(*a1 + 16))(a1, buf)) {
    goto LABEL_8;
  }
  if (qword_10047BED8 == -1)
  {
    uint64_t v6 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_once(&qword_10047BED8, &stru_10046A488);
  uint64_t v6 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
  {
LABEL_7:
    uint64_t v7 = (uint64_t)(a1[4] - a1[3]) >> 3;
    v11[0] = 67109376;
    v11[1] = a2;
    __int16 v12 = 2048;
    uint64_t v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "WARNING: Attempt to start control group %d but no matching sensors found (%zu sensors available)", (uint8_t *)v11, 0x12u);
  }
LABEL_8:
  unsigned int v8 = *(void **)((char *)__p + 6);
  if (*(void *)((char *)__p + 6))
  {
    do
    {
      uint64_t v9 = (void *)*v8;
      operator delete(v8);
      unsigned int v8 = v9;
    }
    while (v9);
  }
  int v10 = *(void **)buf;
  *(void *)uint64_t buf = 0;
  if (v10) {
    operator delete(v10);
  }
}

void sub_1000237E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100258574((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100023800(uint64_t a1, void *a2)
{
  int v4 = *(void **)(a1 + 24);
  uint64_t v5 = *(void **)(a1 + 32);
  if (v4 == v5)
  {
    char v6 = 0;
  }
  else
  {
    char v6 = 0;
    do
    {
      uint64_t v7 = *v4;
      int v8 = (*(uint64_t (**)(void))(*(void *)*v4 + 48))(*v4);
      unint64_t v9 = a2[1];
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v11 = v8;
          if (v9 <= v8) {
            unint64_t v11 = v8 % v9;
          }
        }
        else
        {
          unint64_t v11 = (v9 - 1) & v8;
        }
        __int16 v12 = *(uint64_t ***)(*a2 + 8 * v11);
        if (v12)
        {
          uint64_t v13 = *v12;
          if (v13)
          {
            if (v10.u32[0] < 2uLL)
            {
              unint64_t v14 = v9 - 1;
              while (1)
              {
                uint64_t v16 = v13[1];
                if (v16 == v8)
                {
                  if (*((_DWORD *)v13 + 4) == v8) {
                    goto LABEL_3;
                  }
                }
                else if ((v16 & v14) != v11)
                {
                  goto LABEL_4;
                }
                uint64_t v13 = (uint64_t *)*v13;
                if (!v13) {
                  goto LABEL_4;
                }
              }
            }
            do
            {
              unint64_t v15 = v13[1];
              if (v15 == v8)
              {
                if (*((_DWORD *)v13 + 4) == v8)
                {
LABEL_3:
                  (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
                  char v6 = 1;
                  break;
                }
              }
              else
              {
                if (v15 >= v9) {
                  v15 %= v9;
                }
                if (v15 != v11) {
                  break;
                }
              }
              uint64_t v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
        }
      }
LABEL_4:
      ++v4;
    }
    while (v4 != v5);
  }
  uint64_t v17 = (int *)a2[2];
  if (v17)
  {
    uint64_t v18 = a1 + 48;
    do
    {
      sub_1000239AC(v18, v17 + 4, v17 + 4);
      uint64_t v17 = *(int **)v17;
    }
    while (v17);
  }
  return v6 & 1;
}

uint64_t *sub_1000239AC(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint8x8_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint8x8_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint8x8_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  unint64_t v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      void *v14 = *v18;
LABEL_61:
      void *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_100023CBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100023CD0()
{
  return 14;
}

uint64_t sub_100023CD8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_100023CE0()
{
  return 22;
}

uint64_t sub_100023CE8()
{
  return 1;
}

uint64_t sub_100023CF0()
{
  return 16;
}

uint64_t sub_100023CF8()
{
  return 17;
}

uint64_t sub_100023D00()
{
  return 11;
}

uint64_t *sub_100023D08@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  switch(a1)
  {
    case 0:
      LODWORD(v9) = 1;
      sub_1000240D8(a2, (int *)&v9, &v9);
      unint64_t v9 = sub_10009D154();
      v10[0] = v3;
      if (sub_100059C20((uint64_t)&v9, (unsigned char *)v10 + 1))
      {
        LODWORD(v9) = 11;
        sub_1000240D8(a2, (int *)&v9, &v9);
      }
      LODWORD(v9) = 17;
      uint64_t result = sub_1000240D8(a2, (int *)&v9, &v9);
      break;
    case 1:
      LODWORD(v9) = 8;
      sub_1000240D8(a2, (int *)&v9, &v9);
      LODWORD(v9) = 16;
      uint64_t result = sub_1000240D8(a2, (int *)&v9, &v9);
      break;
    case 2:
      LODWORD(v9) = 14;
      uint64_t result = sub_1000240D8(a2, (int *)&v9, &v9);
      break;
    case 3:
      LODWORD(v9) = 1;
      sub_1000240D8(a2, (int *)&v9, &v9);
      unint64_t v9 = sub_10009D154();
      v10[0] = v5;
      if (sub_100059C20((uint64_t)&v9, (unsigned char *)v10 + 1))
      {
        LODWORD(v9) = 11;
        sub_1000240D8(a2, (int *)&v9, &v9);
      }
      LODWORD(v9) = 7;
      sub_1000240D8(a2, (int *)&v9, &v9);
      LODWORD(v9) = 14;
      sub_1000240D8(a2, (int *)&v9, &v9);
      LODWORD(v9) = 17;
      sub_1000240D8(a2, (int *)&v9, &v9);
      LODWORD(v9) = 8;
      sub_1000240D8(a2, (int *)&v9, &v9);
      LODWORD(v9) = 16;
      uint64_t result = sub_1000240D8(a2, (int *)&v9, &v9);
      break;
    default:
      __cxa_allocate_exception(0x40uLL);
      sub_1000AE4B0(&v7, "Unsupported control group to get thrift types for");
      std::runtime_error::runtime_error(&v8, &v7);
      v8.__vftable = (std::runtime_error_vtbl *)&off_100453860;
      sub_10018E868((uint64_t)v6);
      sub_1000D1698(&v8, (uint64_t)"static std::unordered_set<SensorType> SensorManager::getAcceptedTypes(ControlGroup)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/sensors/sensor_manager.cpp", 85, (uint64_t)v6);
  }
  return result;
}

void sub_100023FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, std::runtime_error a20,std::runtime_error a21)
{
  sub_1000D19E0(&a21);
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a20);
  if (a19 < 0)
  {
    operator delete(a14);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      sub_100258574(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  sub_100258574(v21);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000240D8(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint8x8_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint8x8_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint8x8_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  unint64_t v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      void *v14 = *v18;
LABEL_61:
      void *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1000243E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000243FC(void *a1)
{
  *a1 = off_100457DC8;
  if ((void *)qword_10047EAF8 != a1)
  {
    uint64_t v2 = a1[5];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = a1[6];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 4));
  wireless_diagnostics::google::protobuf::internal::ExtensionSet::~ExtensionSet((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 1));

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_1000244C4(uint64_t a1)
{
  *(void *)a1 = off_100457D18;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_10002452C(void *a1)
{
  *a1 = off_100454A50;
  uint64_t v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_1000245A0(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void *sub_1000245A0(void *result)
{
  if ((void *)qword_10047E8F0 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[3];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = v1[4];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v1[5];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = v1[6];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = v1[7];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t result = (void *)v1[8];
    if (result)
    {
      uint8x8_t v8 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v8();
    }
  }
  return result;
}

void sub_10002471C(void *a1)
{
  *a1 = off_100457098;
  uint64_t v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_100024790(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void *sub_100024790(void *result)
{
  if ((void *)qword_10047EA78 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[3];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = v1[4];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v1[5];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = v1[6];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = v1[7];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = v1[8];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t result = (void *)v1[9];
    if (result)
    {
      unint64_t v9 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v9();
    }
  }
  return result;
}

void sub_100024938(void *a1@<X8>)
{
  id v11 = +[LSApplicationWorkspace defaultWorkspace];
  uint64_t v2 = [v11 deviceIdentifierForVendor];

  uint64_t v3 = (void *)v2;
  if (!v2)
  {
    uint64_t v3 = +[NSUUID UUID];
  }
  id v12 = v3;
  id v4 = [v3 UUIDString];
  uint64_t v5 = (const char *)[v4 UTF8String];
  size_t v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint8x8_t v10 = operator new(v8 + 1);
    a1[1] = v7;
    a1[2] = v9 | 0x8000000000000000;
    *a1 = v10;
    a1 = v10;
    goto LABEL_10;
  }
  *((unsigned char *)a1 + 23) = v6;
  if (v6) {
LABEL_10:
  }
    memmove(a1, v5, v7);
  *((unsigned char *)a1 + v7) = 0;
}

void sub_100024A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100024A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100024A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100025534(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

void sub_100025588()
{
}

void sub_100025594()
{
}

void sub_1000255A4()
{
}

BOOL sub_1000255C8(id a1, CLPrefetchFloorRequest *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  BOOL v5 = +[CLLocationContextUtil isRegional:[(CLPrefetchFloorRequest *)v4 locationContext]];

  return v5;
}

void sub_100025610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000256C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100025A94(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  sub_1000BA900((uint64_t)&a9);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    uint64_t v13 = sub_1000BA78C();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(a9) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "_openTileFileForIncrementalIO: fail to open availability tile; most likely due to race condition",
        (uint8_t *)&a9,
        2u);
    }

    a9 = 0uLL;
    sub_1000BA7FC(v9 + 8, &a9);
    sub_1000BA884((uint64_t)&a9);
    __cxa_end_catch();
    JUMPOUT(0x1000259F8);
  }
  if (*(char *)(v10 - 49) < 0) {
    operator delete(*(void **)(v10 - 72));
  }
  _Unwind_Resume(a1);
}

void sub_100025B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000260C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  _Unwind_Resume(a1);
}

void sub_100026254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *sub_100026268(id *a1, const void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  *a1 = a1;
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_1004682C0);
    float v15 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  float v15 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    id v16 = *a1;
    LODWORD(v22) = 134217984;
    *(void *)((char *)&v22 + 4) = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Pending scan information created: %p", (uint8_t *)&v22, 0xCu);
  }
LABEL_4:
  a1[1] = (id)CFRetain(a2);
  objc_initWeak(a1 + 2, v11);
  a1[3] = [v12 copy];
  a1[4] = v13;
  a1[5] = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v11[3]);
  a1[6] = [v14 copy];
  v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v18 = a1[5];
  a1[7] = (id)v17.__d_.__rep_;
  *((_DWORD *)a1 + 16) = 0;
  *(void *)&long long v22 = _NSConcreteStackBlock;
  *((void *)&v22 + 1) = 3321888768;
  unint64_t v23 = sub_1003397F0;
  uint8x8_t v24 = &unk_100468420;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v17.__d_.__rep_;
  BOOL v19 = objc_retainBlock(&v22);
  dispatch_source_set_event_handler(v18, v19);

  dispatch_time_t v20 = dispatch_time(0, 30000000000);
  dispatch_source_set_timer((dispatch_source_t)a1[5], v20, 0x6FC23AC00uLL, 0);
  dispatch_resume((dispatch_object_t)a1[5]);

  return a1;
}

void sub_1000264B4(_Unwind_Exception *a1)
{
  sub_100338D18(v5);

  objc_destroyWeak(v6);
  sub_100338D8C((const void **)(v2 + 8));
  sub_100338DC4((uint64_t *)v2);

  _Unwind_Resume(a1);
}

void sub_100026614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100026628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100026638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002664C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100026810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100026854(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = *a3;
  *a3 = 0;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = a3[1];
  a3[1] = 0;
  uint64_t v8 = a3[2];
  size_t v6 = a3 + 2;
  uint64_t v7 = v8;
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = (void *)(a1 + 32);
  uint64_t v10 = v6[1];
  *(void *)(a1 + 40) = v10;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)v6 + 4);
  if (!v10)
  {
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    goto LABEL_5;
  }
  unint64_t v11 = *(void *)(v7 + 8);
  unint64_t v12 = *(void *)(a1 + 24);
  if ((v12 & (v12 - 1)) != 0)
  {
    if (v11 >= v12) {
      v11 %= v12;
    }
  }
  else
  {
    v11 &= v12 - 1;
  }
  *(void *)(v5 + 8 * v11) = v9;
  void *v6 = 0;
  v6[1] = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = v13 == 1;
  if (!v13)
  {
LABEL_5:
    sub_1000AE4B0(v29, "");
    sub_10025351C("Cannot select an empty universe", &v31);
    sub_10016A2C4((uint64_t)v29, (uint64_t)&v31, 1);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v31.__r_.__value_.__l.__data_);
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
    else if ((v30 & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(v29[0]);
LABEL_7:
    sub_10014B3FC((uint64_t)__p);
  }
  id v14 = (void *)*v9;
  if (*v9)
  {
    do
    {
      int v15 = *((_DWORD *)v14 + 486);
      if ((v15 & 1) == 0)
      {
        if ((v15 & 2) == 0)
        {
          sub_1000AE4B0(v29, "");
          sub_10025356C("UID & ID missing from location configuration", &v31);
          sub_10016A2C4((uint64_t)v29, (uint64_t)&v31, 1);
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v31.__r_.__value_.__l.__data_);
          }
          if (v30 < 0) {
            operator delete(v29[0]);
          }
          sub_1000D11E0((uint64_t)__p);
        }
        std::string::operator=((std::string *)(v14 + 5), (const std::string *)(v14 + 8));
        *((_DWORD *)v14 + 486) |= 1u;
      }
      id v14 = (void *)*v14;
    }
    while (v14);
  }
  memset(&v31, 0, sizeof(v31));
  sub_100098108(&v31.__r_.__value_.__l.__data_, *(void *)(a1 + 40));
  id v16 = (void *)*v9;
  if (*v9)
  {
    std::string::size_type size = v31.__r_.__value_.__l.__size_;
    do
    {
      uint64_t v18 = (uint64_t)(v16 + 4);
      if (size >= v31.__r_.__value_.__r.__words[2])
      {
        std::string::size_type size = (std::string::size_type)sub_1002535BC(&v31, v18);
      }
      else
      {
        sub_1000776C4(size, v18);
        size += 1920;
      }
      v31.__r_.__value_.__l.__size_ = size;
      id v16 = (void *)*v16;
    }
    while (v16);
  }
  BOOL v19 = operator new(0x140uLL);
  v19[1] = 0;
  void v19[2] = 0;
  *BOOL v19 = off_100462AE8;
  uint64_t v20 = sub_1000A2814((uint64_t)(v19 + 3), (uint64_t *)&v31, a2);
  unint64_t v21 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v20;
  *(void *)(a1 + 64) = v19;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::string::size_type v22 = v31.__r_.__value_.__r.__words[0];
  if (v31.__r_.__value_.__r.__words[0])
  {
    unint64_t v23 = (void *)v31.__r_.__value_.__r.__words[0];
    if (v31.__r_.__value_.__l.__size_ != v31.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v24 = v31.__r_.__value_.__l.__size_ - 1920;
      uint64_t v25 = (void (***)(void))(v31.__r_.__value_.__l.__size_ - 1920);
      do
      {
        (**v25)(v25);
        v24 -= 1920;
        BOOL v26 = v25 == (void (***)(void))v22;
        v25 -= 240;
      }
      while (!v26);
      unint64_t v23 = (void *)v31.__r_.__value_.__r.__words[0];
    }
    v31.__r_.__value_.__l.__size_ = v22;
    operator delete(v23);
  }
  return a1;
}

void sub_100026BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1000BA884(v24);
  sub_1001F53E0(v23);
  sub_1000BA884(v22);
  _Unwind_Resume(a1);
}

void sub_100026C7C(dirent **a1@<X1>, dirent **a2@<X2>, uint64_t a3@<X3>, dirent **a4@<X8>)
{
  uint64_t v7 = *a1;
  for (i = *a2; *a1 != *a2; i = *a2)
  {
    if ((!v7 || !*(void *)&v7->d_name[27]) && (!i || !*(void *)&i->d_name[27])) {
      break;
    }
    p_d_seekoff = &v7->d_seekoff;
    unint64_t v12 = *(void *)(a3 + 8);
    if (v12 >= *(void *)(a3 + 16))
    {
      uint64_t v10 = sub_100026D70((char **)a3, (uint64_t)p_d_seekoff);
    }
    else
    {
      if (v7->d_name[10] < 0)
      {
        sub_1000559FC(*(unsigned char **)(a3 + 8), (void *)v7->d_seekoff, *(void *)&v7->d_reclen);
      }
      else
      {
        long long v13 = *(_OWORD *)p_d_seekoff;
        *(void *)(v12 + 16) = *(void *)&v7->d_name[3];
        *(_OWORD *)unint64_t v12 = v13;
      }
      *(void *)(v12 + 24) = *(void *)&v7->d_name[11];
      *(void *)(v12 + 32) = *(void *)&v7->d_name[19];
      uint64_t v10 = v12 + 40;
      *(void *)(a3 + 8) = v12 + 40;
    }
    *(void *)(a3 + 8) = v10;
    sub_1000551CC(a1, 0);
    uint64_t v7 = *a1;
  }
  *a1 = 0;
  *a4 = v7;
  a4[1] = (dirent *)a3;
}

void sub_100026D68(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100026D70(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  id v4 = a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    sub_1000A9108();
  }
  if (0x999999999999999ALL * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - v3) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      sub_1000A6A10();
    }
    uint64_t v9 = (char *)operator new(40 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[40 * v5];
  id v16 = &v9[40 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000559FC(v10, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    id v4 = a1[1];
    uint64_t v10 = &v9[40 * v5];
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
  }
  *(_OWORD *)&v9[40 * v5 + 24] = *(_OWORD *)(a2 + 24);
  uint64_t v11 = (uint64_t)&v9[40 * v5 + 40];
  if (v4 == v3)
  {
    long long v13 = v3;
  }
  else
  {
    do
    {
      long long v12 = *(_OWORD *)(v4 - 40);
      *((void *)v10 - 3) = *((void *)v4 - 3);
      *(_OWORD *)(v10 - 40) = v12;
      *((void *)v4 - 4) = 0;
      *((void *)v4 - 3) = 0;
      *((void *)v4 - 5) = 0;
      *((void *)v10 - 2) = *((void *)v4 - 2);
      *((void *)v10 - 1) = *((void *)v4 - 1);
      v10 -= 40;
      v4 -= 40;
    }
    while (v4 != v3);
    long long v13 = *a1;
    uint64_t v3 = a1[1];
  }
  *a1 = v10;
  a1[1] = (char *)v11;
  a1[2] = v16;
  if (v3 != v13)
  {
    id v14 = (void **)(v3 - 40);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 5;
    }
    while (v14 + 5 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_100026F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10038BB4C((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100026F64(id *a1, uint64_t *a2, void *a3, void *a4, unsigned int a5, uint64_t a6)
{
  id v11 = a3;
  id v12 = a4;
  sub_1000A272C((uint64_t)a1, a2);
  sub_1000A4B14(a1 + 11);
  *a1 = off_100468B40;
  if ((a5 & 0x10) == 0)
  {
    long long v13 = objc_alloc_init(WifiSensor);
    if ([(WifiSensor *)v13 sensorPresent])
    {
      sub_100027440(a1, (uint64_t)[(WifiSensor *)v13 getSensor]);
      sub_100027844(a1 + 11, v13);
    }
  }
  id v14 = objc_alloc_init(IOSPedometry);
  if ([(IOSPedometry *)v14 sensorPresent])
  {
    sub_100027440(a1, (uint64_t)[(IOSPedometry *)v14 getSensor]);
    sub_100027844(a1 + 11, v14);
  }
  if ((a5 & 1) == 0)
  {
    int v15 = [[IOSGps alloc] initWithDisableBackground:(a5 >> 2) & 1];
    if ([(IOSGps *)v15 sensorPresent])
    {
      sub_100027440(a1, (uint64_t)[(IOSGps *)v15 getSensor]);
      sub_100027844(a1 + 11, v15);
    }
  }
  id v16 = [[IOSAltimeter alloc] initWithOperationQueue:v12];
  if ([(IOSAltimeter *)v16 sensorPresent])
  {
    sub_100027440(a1, (uint64_t)[(IOSAltimeter *)v16 getSensor]);
    sub_100027844(a1 + 11, v16);
  }
  if ((a5 & 0x20) == 0)
  {
    std::chrono::steady_clock::time_point v17 = objc_alloc_init(IOSBeacon);
    if ([(IOSBeacon *)v17 sensorPresent])
    {
      sub_100027440(a1, (uint64_t)[(IOSBeacon *)v17 getSensor]);
      sub_100027844(a1 + 11, v17);
    }
  }
  if ((a5 & 8) != 0) {
    [v11 setDeviceMotionUpdateInterval:0.02];
  }
  uint64_t v18 = [IOSDeviceMotion alloc];
  if ((a5 & 2) != 0) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = 4;
  }
  uint64_t v20 = [(IOSDeviceMotion *)v18 initWithMotionManager:v11 andHandler:v12 usingReferenceFrame:v19];
  if ([(IOSDeviceMotion *)v20 sensorPresent])
  {
    sub_100027440(a1, (uint64_t)[(IOSAbstractInertialSensor *)v20 getSensor]);
    sub_100027844(a1 + 11, v20);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_10047E358, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_10047E358))
  {
    qword_10047E350 = (uint64_t)objc_alloc_init((Class)CMMotionActivityManager);
    __cxa_guard_release(qword_10047E358);
  }
  unint64_t v21 = [IOSActivityState alloc];
  uint64_t v22 = [(IOSActivityState *)v21 initWithMotionActivityManager:qword_10047E350 andHandler:v12];
  if ([(IOSActivityState *)v22 sensorPresent])
  {
    sub_100027440(a1, (uint64_t)[(IOSActivityState *)v22 getSensor]);
    sub_100027844(a1 + 11, v22);
  }
  uint64_t v23 = [[IOSNearbyObject alloc] initWithType:(a5 >> 6) & 1 reducedRate:(a5 >> 7) & 1];
  if ([(IOSNearbyObject *)v23 sensorPresent])
  {
    sub_100027440(a1, (uint64_t)[(IOSNearbyObject *)v23 getSensor]);
    sub_100027844(a1 + 11, v23);
  }
  uint64_t v24 = *(void *)(a6 + 24);
  if (v24)
  {
    id v30 = v11;
    (*(void (**)(void ***__return_ptr))(*(void *)v24 + 48))(&v31);
    uint64_t v25 = v31;
    if (v31 != v32)
    {
      do
      {
        sub_100027440(a1, (uint64_t)v25[5]);
        sub_100027844(a1 + 11, v25[4]);
        unint64_t v27 = v25[1];
        if (v27)
        {
          do
          {
            uint64_t v28 = (void **)v27;
            unint64_t v27 = (void *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            uint64_t v28 = (void **)v25[2];
            BOOL v29 = *v28 == v25;
            uint64_t v25 = v28;
          }
          while (!v29);
        }
        uint64_t v25 = v28;
      }
      while (v28 != v32);
    }
    sub_100342144((uint64_t)&v31, v32[0]);
    id v11 = v30;
  }

  return a1;
}

void sub_100027348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  __cxa_guard_abort(qword_10047E358);

  sub_100344340(v11);
  sub_100341EB4(v9);

  _Unwind_Resume(a1);
}

void sub_100027440(void *a1, uint64_t a2)
{
  id v4 = (char *)a1[3];
  unint64_t v6 = (char *)a1[4];
  unint64_t v5 = (void **)(a1 + 3);
  uint64_t v7 = v6;
  unint64_t v8 = v4;
  if (v4 != v6)
  {
    while (*(void *)v8 != a2)
    {
      v8 += 8;
      if (v8 == v6)
      {
        unint64_t v8 = (char *)a1[4];
        break;
      }
    }
  }
  if (v8 != v6)
  {
    if (qword_10047BED8 == -1)
    {
      uint64_t v9 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
        return;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_10046A488);
      uint64_t v9 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
        return;
      }
    }
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
    v38[0] = 67109120;
    v38[1] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Sensor %d already in collection", (uint8_t *)v38, 8u);
    return;
  }
  unint64_t v11 = a1[5];
  if ((unint64_t)v6 < v11)
  {
    *(void *)unint64_t v6 = a2;
    uint64_t v12 = (uint64_t)(v6 + 8);
    goto LABEL_31;
  }
  int64_t v13 = v6 - v4;
  uint64_t v14 = (v6 - v4) >> 3;
  unint64_t v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 61) {
    sub_1000A9108();
  }
  uint64_t v16 = v11 - (void)v4;
  if (v16 >> 2 > v15) {
    unint64_t v15 = v16 >> 2;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17)
  {
    if (v17 >> 61) {
      sub_1000A6A10();
    }
    uint64_t v18 = operator new(8 * v17);
    uint64_t v19 = &v18[8 * v14];
    uint64_t v20 = &v18[8 * v17];
    *uint64_t v19 = a2;
    uint64_t v12 = (uint64_t)(v19 + 1);
    if (v4 == v6) {
      goto LABEL_29;
    }
    goto LABEL_22;
  }
  uint64_t v18 = 0;
  uint64_t v19 = (void *)(8 * v14);
  uint64_t v20 = 0;
  *(void *)(8 * v14) = a2;
  uint64_t v12 = 8 * v14 + 8;
  if (v4 != v6)
  {
LABEL_22:
    if ((unint64_t)(v13 - 8) < 0x58) {
      goto LABEL_61;
    }
    if ((unint64_t)(v4 - v18) < 0x20) {
      goto LABEL_61;
    }
    unint64_t v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v7 = &v6[-v22];
    uint64_t v19 = (void *)((char *)v19 - v22);
    uint64_t v23 = &v18[8 * v14 - 16];
    uint64_t v24 = v6 - 16;
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *uint64_t v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_61:
      do
      {
        uint64_t v27 = *((void *)v7 - 1);
        v7 -= 8;
        *--uint64_t v19 = v27;
      }
      while (v7 != v4);
    }
    id v4 = (char *)*v5;
  }
LABEL_29:
  a1[3] = v19;
  a1[4] = v12;
  a1[5] = v20;
  if (v4) {
    operator delete(v4);
  }
LABEL_31:
  a1[4] = v12;
  int v28 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  unint64_t v29 = a1[7];
  if (v29)
  {
    uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = v28;
      if (v29 <= v28) {
        unint64_t v31 = v28 % v29;
      }
    }
    else
    {
      unint64_t v31 = (v29 - 1) & v28;
    }
    long long v32 = *(uint64_t ***)(a1[6] + 8 * v31);
    if (v32)
    {
      long long v33 = *v32;
      if (v33)
      {
        if (v30.u32[0] < 2uLL)
        {
          unint64_t v34 = v29 - 1;
          while (1)
          {
            uint64_t v36 = v33[1];
            if (v36 == v28)
            {
              if (*((_DWORD *)v33 + 4) == v28) {
                goto LABEL_52;
              }
            }
            else if ((v36 & v34) != v31)
            {
              return;
            }
            long long v33 = (uint64_t *)*v33;
            if (!v33) {
              return;
            }
          }
        }
        do
        {
          unint64_t v35 = v33[1];
          if (v35 == v28)
          {
            if (*((_DWORD *)v33 + 4) == v28)
            {
LABEL_52:
              long long v37 = *(void (**)(uint64_t))(*(void *)a2 + 24);
              v37(a2);
              return;
            }
          }
          else
          {
            if (v35 >= v29) {
              v35 %= v29;
            }
            if (v35 != v31) {
              return;
            }
          }
          long long v33 = (uint64_t *)*v33;
        }
        while (v33);
      }
    }
  }
}

void sub_100027844(id *a1, void *a2)
{
  id v3 = a2;
  [*a1 addObject:];
}

uint64_t sub_100027898(sqlite3 **a1)
{
  char v40 = 20;
  strcpy((char *)buf, "PRAGMA user_version;");
  os_activity_t v2 = _os_activity_create((void *)&_mh_execute_header, "query DB version", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  sub_100028E94(a1, (uint64_t)buf, v2, (uint64_t)&pStmt);

  if (v40 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v3 = 0;
  unsigned __int8 v4 = 2;
  unint64_t v5 = pStmt;
  unint64_t v6 = pStmt;
  while (1)
  {
    int v7 = sqlite3_step(v6);
    int v8 = v7;
    if (v7 != 100)
    {
      if (v7 != 101)
      {
        if (v7 != 19)
        {
          sub_100088644(v7, db);
          if (v8)
          {
            int64_t v13 = __error();
            sub_100295674(*v13, &__dst);
            __cxa_allocate_exception(0x40uLL);
            *((unsigned char *)&v34.__r_.__value_.__s + 23) = 4;
            strcpy((char *)&v34, " w/ ");
            uint64_t v14 = std::string::insert(&v34, 0, "Failed sqlite3_step");
            long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
            v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
            v14->__r_.__value_.__l.__size_ = 0;
            v14->__r_.__value_.__r.__words[2] = 0;
            v14->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              sub_1000559FC(&v33, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            }
            else {
              std::string v33 = __dst;
            }
            if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v16 = &v33;
            }
            else {
              uint64_t v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
            }
            if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v33.__r_.__value_.__l.__size_;
            }
            uint64_t v18 = std::string::append(&v35, (const std::string::value_type *)v16, size);
            long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            v36.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v19;
            v18->__r_.__value_.__l.__size_ = 0;
            v18->__r_.__value_.__r.__words[2] = 0;
            v18->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(&v37, &v36);
            v37.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
            sub_10018E868((uint64_t)v32);
            sub_100204FC4(&v37, (uint64_t)"void db::resources::statement<1, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:169:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v32);
          }
          goto LABEL_14;
        }
        if (qword_10047BF08 == -1)
        {
          uint64_t v12 = qword_10047BF10;
          if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
            goto LABEL_26;
          }
        }
        else
        {
          dispatch_once(&qword_10047BF08, &stru_100460658);
          uint64_t v12 = qword_10047BF10;
          if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO))
          {
LABEL_26:
            __cxa_allocate_exception(0x40uLL);
            v31.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
            *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = xmmword_1003F6340;
            strcpy(v31.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
            std::runtime_error::runtime_error((std::runtime_error *)&v36, &v31);
            v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100460ED8;
            sub_10018E868((uint64_t)&v30);
            sub_10020E390((std::runtime_error *)&v36, (uint64_t)"auto db::resources::statement<1, 0>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:169:19) &&)::(anonymous class)::operator()() const [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v30);
          }
        }
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Query constraint violation", buf, 2u);
        goto LABEL_26;
      }
      int v9 = sqlite3_reset(pStmt);
      sub_100088644(v9, db);
      if (v9)
      {
        uint64_t v20 = __error();
        sub_100295674(*v20, &__dst);
        __cxa_allocate_exception(0x40uLL);
        *((unsigned char *)&v34.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v34, " w/ ");
        unint64_t v21 = std::string::insert(&v34, 0, "Failed to execute query");
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_1000559FC(&v33, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string v33 = __dst;
        }
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v23 = &v33;
        }
        else {
          uint64_t v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v24 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v24 = v33.__r_.__value_.__l.__size_;
        }
        uint64_t v25 = std::string::append(&v35, (const std::string::value_type *)v23, v24);
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v36.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(&v37, &v36);
        v37.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
        sub_10018E868((uint64_t)v32);
        sub_100204FC4(&v37, (uint64_t)"void db::resources::statement<1, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:169:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v32);
      }
      if (qword_10047BF08 == -1)
      {
        int v10 = qword_10047BF10;
        if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO))
        {
LABEL_19:
          sub_100029460((uint64_t)&pStmt);

          return v4 | (unint64_t)(v3 << 32);
        }
      }
      else
      {
        dispatch_once(&qword_10047BF08, &stru_100460658);
        int v10 = qword_10047BF10;
        if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
          goto LABEL_19;
        }
      }
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "DB version retrieved from db = %d", buf, 8u);
      goto LABEL_19;
    }
    if (v3) {
      break;
    }
    if (sqlite3_column_type(v5, 0) == 5)
    {
      uint64_t v3 = 0;
      unint64_t v6 = pStmt;
    }
    else
    {
      uint64_t v3 = sqlite3_column_int(v5, 0);
      if (v3) {
        unsigned __int8 v4 = 0;
      }
LABEL_14:
      unint64_t v6 = pStmt;
    }
  }
  sub_1003A4AB4();
  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void sub_100028834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  std::runtime_error::~runtime_error(v71);
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    if (a40 < 0) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  operator delete(a15);
  if (a40 < 0)
  {
LABEL_4:
    operator delete(a35);
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    *(void *)(v73 - 192) = v72;
    if (*(char *)(v73 - 161) < 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a28);
  *(void *)(v73 - 192) = v72;
  if (*(char *)(v73 - 161) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v73 - 184));
    if ((a46 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  if ((a46 & 0x80000000) == 0)
  {
LABEL_7:
    *(void *)(v73 - 144) = &off_100451DC0;
    uint64_t v75 = *(void *)(v73 - 136);
    if (!v75) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a41);
  *(void *)(v73 - 144) = &off_100451DC0;
  uint64_t v75 = *(void *)(v73 - 136);
  if (!v75) {
    goto LABEL_17;
  }
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(void *)v75 + 32))(v75)) {
    *(void *)(v73 - 136) = 0;
  }
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v73 - 160));
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v73 - 232));
  if (*(char *)(v73 - 233) < 0) {
    operator delete(*(void **)(v73 - 256));
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  __cxa_free_exception(v71);
  if (*(char *)(v73 - 193) < 0)
  {
    operator delete(*(void **)(v73 - 216));
    sub_1001F5784((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_1001F5784((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100028E94(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  int v8 = a3;
  int v9 = v8;
  if (v8) {
    os_activity_scope_enter(v8, &state);
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    unint64_t v11 = (const char *)a2;
  }
  else {
    unint64_t v11 = *(const char **)a2;
  }
  if (v10 >= 0) {
    int v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v12 = *(_DWORD *)(a2 + 8);
  }
  int v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_100088644(v13, *a1);
  if (v13)
  {
    uint64_t v14 = __error();
    sub_100295674(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v23, " w/ ");
    long long v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v27;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    long long v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v21);
    sub_100204FC4(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 1UL, nQueries = 0UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(void *)(a4 + 8) = *a1;
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_1000291E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_100205504((std::runtime_error *)(v71 - 184));
    uint64_t v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1001F5784(v68);

            _Unwind_Resume(a1);
          }
          sub_1001F5784(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_100205504((std::runtime_error *)(v71 - 184));
  uint64_t v73 = a47;
  if (!a47) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_100029460(uint64_t a1)
{
  os_activity_t v2 = *(sqlite3_stmt **)a1;
  if (!v2) {
    return;
  }
  uint64_t v3 = sqlite3_sql(v2);
  if (v3) {
    unsigned __int8 v4 = v3;
  }
  else {
    unsigned __int8 v4 = "<unknown query>";
  }
  size_t v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    std::string __dst = p_dst;
    unint64_t v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5) {
LABEL_12:
  }
    memmove(p_dst, v4, v6);
  *((unsigned char *)p_dst + v6) = 0;
  int v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_10047BF08 != -1)
    {
      dispatch_once(&qword_10047BF08, &stru_100460658);
      unint64_t v11 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    unint64_t v11 = qword_10047BF10;
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)uint64_t buf = 67240192;
      int v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(void *)a1 = 0;
  int v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(void *)(a1 + 16) = 0;
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst);
  }
}

void sub_100029620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100029648(uint64_t a1)
{
  sub_10000C898((uint64_t)v5);
  sub_10002986C(v6, (uint64_t)"[", 1);
  os_activity_t v2 = *(uint64_t ***)(a1 + 16);
  if (v2)
  {
    sub_100029C00(v6, v2 + 2);
    while (1)
    {
      os_activity_t v2 = (uint64_t **)*v2;
      if (!v2) {
        break;
      }
      sub_10002986C(v6, (uint64_t)", ", 2);
      sub_100029C00(v6, v2 + 2);
    }
  }
  sub_10002986C(v6, (uint64_t)"]", 1);
  std::stringbuf::str();
  *(void *)((char *)v5
  v6[0] = v3;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10002981C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DEA14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100029830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DEA14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100029844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DEA14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100029858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DEA14((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10002986C(void *a1, uint64_t a2, uint64_t a3)
{
  std::ostream::sentry::sentry();
  if (v13)
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      int v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_100029A10(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  std::ostream::sentry::~sentry();
  return a1;
}

void sub_1000299A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::ostream::sentry::~sentry();
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x100029988);
}

void sub_1000299FC(_Unwind_Exception *a1)
{
}

uint64_t sub_100029A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        sub_1000A6968();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        char v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        int64_t v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        char v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (v22 >= 0) {
        int v16 = __b;
      }
      else {
        int v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_100029BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100029C00(void *a1, uint64_t **a2)
{
  uint64_t v2 = *((unsigned __int8 *)*a2 + 23);
  uint64_t v3 = (*a2)[1];
  if ((v2 & 0x80u) == 0) {
    uint64_t v4 = (uint64_t)*a2;
  }
  else {
    uint64_t v4 = **a2;
  }
  if ((v2 & 0x80u) == 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v3;
  }
  return sub_10002986C(a1, v4, v5);
}

void sub_100029C20(uint64_t a1)
{
  if (qword_10047BF08 != -1) {
    dispatch_once(&qword_10047BF08, &stru_100460658);
  }
  uint64_t v2 = (id)qword_10047BF10;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Enabling foreign key support", buf, 2u);
  }

  sub_10008D100(*(sqlite3 ***)(a1 + 40), "PRAGMA foreign_keys = ON;", "Failed to turn on foreign key support");
  if (qword_10047BF08 == -1)
  {
    uint64_t v3 = (id)qword_10047BF10;
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_once(&qword_10047BF08, &stru_100460658);
  uint64_t v3 = (id)qword_10047BF10;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
LABEL_7:
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Creating table for venues", buf, 2u);
  }
LABEL_8:

  v117.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  long long v116 = xmmword_1003E74F0;
  *(_OWORD *)&v117.__r_.__value_.__r.__words[1] = xmmword_1003E74F0;
  strcpy(v117.__r_.__value_.__l.__data_, "CREATE TABLE IF NOT EXISTS ");
  qmemcpy(v115, "E IF NOT EXISTS CREATE TABLE IF ", sizeof(v115));
  uint64_t v4 = std::string::append(&v117, "venues");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v118.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v118, "(");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v119.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DF67 >= 0) {
    int v8 = (const std::string::value_type *)&qword_10047DF50;
  }
  else {
    int v8 = (const std::string::value_type *)qword_10047DF50;
  }
  if (byte_10047DF67 >= 0) {
    std::string::size_type v9 = byte_10047DF67;
  }
  else {
    std::string::size_type v9 = *(void *)&byte_10047DF58;
  }
  int v10 = std::string::append(&v119, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v120.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  size_t v12 = std::string::append(&v120, " TEXT UNIQUE NOT NULL, ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v121.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DF7F >= 0) {
    uint64_t v14 = (const std::string::value_type *)&qword_10047DF68;
  }
  else {
    uint64_t v14 = (const std::string::value_type *)qword_10047DF68;
  }
  if (byte_10047DF7F >= 0) {
    std::string::size_type v15 = byte_10047DF7F;
  }
  else {
    std::string::size_type v15 = *(void *)&byte_10047DF70;
  }
  int v16 = std::string::append(&v121, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v122.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append(&v122, " TEXT NOT NULL, ");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v123.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DF97 >= 0) {
    long long v20 = (const std::string::value_type *)&qword_10047DF80;
  }
  else {
    long long v20 = (const std::string::value_type *)qword_10047DF80;
  }
  if (byte_10047DF97 >= 0) {
    std::string::size_type v21 = byte_10047DF97;
  }
  else {
    std::string::size_type v21 = *(void *)&byte_10047DF88;
  }
  int64_t v22 = std::string::append(&v123, v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  std::string v24 = std::string::append(&v124, " INTEGER PRIMARY KEY NOT NULL, ");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v141.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DFAF >= 0) {
    std::runtime_error v26 = (const std::string::value_type *)&qword_10047DF98;
  }
  else {
    std::runtime_error v26 = (const std::string::value_type *)qword_10047DF98;
  }
  if (byte_10047DFAF >= 0) {
    std::string::size_type v27 = byte_10047DFAF;
  }
  else {
    std::string::size_type v27 = unk_10047DFA0;
  }
  int v28 = std::string::append(&v141, v26, v27);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v125.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  uint64_t v30 = std::string::append(&v125, " INT NOT NULL, ");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v126.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047E00F >= 0) {
    long long v32 = (const std::string::value_type *)&qword_10047DFF8;
  }
  else {
    long long v32 = (const std::string::value_type *)qword_10047DFF8;
  }
  if (byte_10047E00F >= 0) {
    std::string::size_type v33 = byte_10047E00F;
  }
  else {
    std::string::size_type v33 = unk_10047E000;
  }
  std::string v34 = std::string::append(&v126, v32, v33);
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  std::string v36 = std::string::append(&v127, " INT, ");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DFC7 >= 0) {
    std::string v38 = (const std::string::value_type *)&xmmword_10047DFB0;
  }
  else {
    std::string v38 = (const std::string::value_type *)xmmword_10047DFB0;
  }
  if (byte_10047DFC7 >= 0) {
    std::string::size_type v39 = byte_10047DFC7;
  }
  else {
    std::string::size_type v39 = *((void *)&xmmword_10047DFB0 + 1);
  }
  char v40 = std::string::append(&v128, v38, v39);
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v129.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  std::string v42 = std::string::append(&v129, " INT, ");
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v130.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047E027 >= 0) {
    std::string v44 = (const std::string::value_type *)&xmmword_10047E010;
  }
  else {
    std::string v44 = (const std::string::value_type *)xmmword_10047E010;
  }
  if (byte_10047E027 >= 0) {
    std::string::size_type v45 = byte_10047E027;
  }
  else {
    std::string::size_type v45 = *((void *)&xmmword_10047E010 + 1);
  }
  v46 = std::string::append(&v130, v44, v45);
  long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v131.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  char v48 = std::string::append(&v131, " INT, ");
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v132.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DFDF >= 0) {
    uint64_t v50 = (const std::string::value_type *)&qword_10047DFC8;
  }
  else {
    uint64_t v50 = (const std::string::value_type *)qword_10047DFC8;
  }
  if (byte_10047DFDF >= 0) {
    std::string::size_type v51 = byte_10047DFDF;
  }
  else {
    std::string::size_type v51 = *(void *)&dword_10047DFD0;
  }
  uint64_t v52 = std::string::append(&v132, v50, v51);
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v133.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  int v54 = std::string::append(&v133, " INT, ");
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v134.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DFF7 >= 0) {
    v56 = (const std::string::value_type *)&qword_10047DFE0;
  }
  else {
    v56 = (const std::string::value_type *)qword_10047DFE0;
  }
  if (byte_10047DFF7 >= 0) {
    std::string::size_type v57 = byte_10047DFF7;
  }
  else {
    std::string::size_type v57 = qword_10047DFE8;
  }
  uint64_t v58 = std::string::append(&v134, v56, v57);
  long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v135.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v60 = std::string::append(&v135, " INT NOT NULL, ");
  long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v136.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047E03F >= 0) {
    uint64_t v62 = (const std::string::value_type *)&qword_10047E028;
  }
  else {
    uint64_t v62 = (const std::string::value_type *)qword_10047E028;
  }
  if (byte_10047E03F >= 0) {
    std::string::size_type v63 = byte_10047E03F;
  }
  else {
    std::string::size_type v63 = qword_10047E030;
  }
  std::locale v64 = std::string::append(&v136, v62, v63);
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v137.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  v66 = std::string::append(&v137, " INT, ");
  long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047E057 >= 0) {
    uint64_t v68 = (const std::string::value_type *)&qword_10047E040;
  }
  else {
    uint64_t v68 = (const std::string::value_type *)qword_10047E040;
  }
  if (byte_10047E057 >= 0) {
    std::string::size_type v69 = byte_10047E057;
  }
  else {
    std::string::size_type v69 = *(void *)&byte_10047E048;
  }
  int v70 = std::string::append(&v138, v68, v69);
  long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v139.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  uint64_t v72 = std::string::append(&v139, " BLOB);");
  long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  *(void *)&uint8_t buf[16] = *((void *)&v72->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t buf = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v139.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_76:
      if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_77;
      }
      goto LABEL_147;
    }
  }
  else if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_76;
  }
  operator delete(v138.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_77:
    if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_148;
  }
LABEL_147:
  operator delete(v137.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_78:
    if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_149;
  }
LABEL_148:
  operator delete(v136.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_79:
    if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_150;
  }
LABEL_149:
  operator delete(v135.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_80:
    if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_151;
  }
LABEL_150:
  operator delete(v134.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_81:
    if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_152;
  }
LABEL_151:
  operator delete(v133.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_82:
    if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_153;
  }
LABEL_152:
  operator delete(v132.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_83:
    if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_84;
    }
    goto LABEL_154;
  }
LABEL_153:
  operator delete(v131.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_84:
    if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_85;
    }
    goto LABEL_155;
  }
LABEL_154:
  operator delete(v130.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_85:
    if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_156;
  }
LABEL_155:
  operator delete(v129.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_86:
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_87;
    }
    goto LABEL_157;
  }
LABEL_156:
  operator delete(v128.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_87:
    if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_88;
    }
    goto LABEL_158;
  }
LABEL_157:
  operator delete(v127.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_88:
    if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_89;
    }
    goto LABEL_159;
  }
LABEL_158:
  operator delete(v126.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_160;
  }
LABEL_159:
  operator delete(v125.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_90:
    if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
    goto LABEL_161;
  }
LABEL_160:
  operator delete(v141.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_91:
    if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_92;
    }
    goto LABEL_162;
  }
LABEL_161:
  operator delete(v124.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_92:
    if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_93;
    }
    goto LABEL_163;
  }
LABEL_162:
  operator delete(v123.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_93:
    if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_94;
    }
    goto LABEL_164;
  }
LABEL_163:
  operator delete(v122.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_94:
    if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_95;
    }
    goto LABEL_165;
  }
LABEL_164:
  operator delete(v121.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_95:
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_96;
    }
    goto LABEL_166;
  }
LABEL_165:
  operator delete(v120.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_96:
    if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_97;
    }
LABEL_167:
    operator delete(v118.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_98;
    }
    goto LABEL_168;
  }
LABEL_166:
  operator delete(v119.__r_.__value_.__l.__data_);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_167;
  }
LABEL_97:
  if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_98;
  }
LABEL_168:
  operator delete(v117.__r_.__value_.__l.__data_);
LABEL_98:
  if ((buf[23] & 0x80u) == 0) {
    v74 = buf;
  }
  else {
    v74 = *(uint8_t **)buf;
  }
  sub_10008D100(*(sqlite3 ***)(a1 + 40), (const char *)v74, "Failed to create venues table");
  if (qword_10047BF08 == -1)
  {
    uint64_t v75 = (id)qword_10047BF10;
    if (!os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_104;
    }
    goto LABEL_103;
  }
  dispatch_once(&qword_10047BF08, &stru_100460658);
  uint64_t v75 = (id)qword_10047BF10;
  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
  {
LABEL_103:
    LOWORD(v139.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "Creating table for tiles", (uint8_t *)&v139, 2u);
  }
LABEL_104:

  v76 = (char *)operator new(0x20uLL);
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
  *(_OWORD *)&v125.__r_.__value_.__r.__words[1] = v116;
  *(_OWORD *)v76 = v115[1];
  *(_OWORD *)(v76 + 11) = v115[0];
  v76[27] = 0;
  v77 = std::string::append(&v125, "tile_data");
  long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  v126.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  v79 = std::string::append(&v126, "(");
  long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v80;
  v79->__r_.__value_.__l.__size_ = 0;
  v79->__r_.__value_.__r.__words[2] = 0;
  v79->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DF97 >= 0) {
    v81 = (const std::string::value_type *)&qword_10047DF80;
  }
  else {
    v81 = (const std::string::value_type *)qword_10047DF80;
  }
  if (byte_10047DF97 >= 0) {
    std::string::size_type v82 = byte_10047DF97;
  }
  else {
    std::string::size_type v82 = *(void *)&byte_10047DF88;
  }
  v83 = std::string::append(&v127, v81, v82);
  long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  v85 = std::string::append(&v128, " INTEGER PRIMARY KEY, ");
  long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
  v129.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v86;
  v85->__r_.__value_.__l.__size_ = 0;
  v85->__r_.__value_.__r.__words[2] = 0;
  v85->__r_.__value_.__r.__words[0] = 0;
  v87 = std::string::append(&v129, "headers");
  long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  v130.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  v89 = std::string::append(&v130, " BLOB NOT NULL, ");
  long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
  v131.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v90;
  v89->__r_.__value_.__l.__size_ = 0;
  v89->__r_.__value_.__r.__words[2] = 0;
  v89->__r_.__value_.__r.__words[0] = 0;
  v91 = std::string::append(&v131, "tiles");
  long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
  v132.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v92;
  v91->__r_.__value_.__l.__size_ = 0;
  v91->__r_.__value_.__r.__words[2] = 0;
  v91->__r_.__value_.__r.__words[0] = 0;
  v93 = std::string::append(&v132, " BLOB NOT NULL, ");
  long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v133.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  v95 = std::string::append(&v133, "FOREIGN KEY (");
  long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
  v134.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v96;
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DF97 >= 0) {
    v97 = (const std::string::value_type *)&qword_10047DF80;
  }
  else {
    v97 = (const std::string::value_type *)qword_10047DF80;
  }
  if (byte_10047DF97 >= 0) {
    std::string::size_type v98 = byte_10047DF97;
  }
  else {
    std::string::size_type v98 = *(void *)&byte_10047DF88;
  }
  v99 = std::string::append(&v134, v97, v98);
  long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
  v135.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v100;
  v99->__r_.__value_.__l.__size_ = 0;
  v99->__r_.__value_.__r.__words[2] = 0;
  v99->__r_.__value_.__r.__words[0] = 0;
  v101 = std::string::append(&v135, ") REFERENCES ");
  long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
  v136.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v102;
  v101->__r_.__value_.__l.__size_ = 0;
  v101->__r_.__value_.__r.__words[2] = 0;
  v101->__r_.__value_.__r.__words[0] = 0;
  v103 = std::string::append(&v136, "venues");
  long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
  v137.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v104;
  v103->__r_.__value_.__l.__size_ = 0;
  v103->__r_.__value_.__r.__words[2] = 0;
  v103->__r_.__value_.__r.__words[0] = 0;
  v105 = std::string::append(&v137, "(");
  long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v106;
  v105->__r_.__value_.__l.__size_ = 0;
  v105->__r_.__value_.__r.__words[2] = 0;
  v105->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DF97 >= 0) {
    v107 = (const std::string::value_type *)&qword_10047DF80;
  }
  else {
    v107 = (const std::string::value_type *)qword_10047DF80;
  }
  if (byte_10047DF97 >= 0) {
    std::string::size_type v108 = byte_10047DF97;
  }
  else {
    std::string::size_type v108 = *(void *)&byte_10047DF88;
  }
  v109 = std::string::append(&v138, v107, v108);
  long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
  v139.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v110;
  v109->__r_.__value_.__l.__size_ = 0;
  v109->__r_.__value_.__r.__words[2] = 0;
  v109->__r_.__value_.__r.__words[0] = 0;
  v111 = std::string::append(&v139, ") ON DELETE CASCADE ON UPDATE RESTRICT);");
  std::string::size_type v112 = v111->__r_.__value_.__r.__words[0];
  v141.__r_.__value_.__r.__words[0] = v111->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v141.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v111->__r_.__value_.__r.__words[1] + 7);
  uint8_t v113 = HIBYTE(v111->__r_.__value_.__r.__words[2]);
  v111->__r_.__value_.__l.__size_ = 0;
  v111->__r_.__value_.__r.__words[2] = 0;
  v111->__r_.__value_.__r.__words[0] = 0;
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  *(void *)uint64_t buf = v112;
  *(void *)&uint8_t buf[8] = v141.__r_.__value_.__r.__words[0];
  *(void *)&buf[15] = *(std::string::size_type *)((char *)v141.__r_.__value_.__r.__words + 7);
  uint8_t buf[23] = v113;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v139.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_126:
      if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_127;
      }
      goto LABEL_171;
    }
  }
  else if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_126;
  }
  operator delete(v138.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_127:
    if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_128;
    }
    goto LABEL_172;
  }
LABEL_171:
  operator delete(v137.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_128:
    if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_129;
    }
    goto LABEL_173;
  }
LABEL_172:
  operator delete(v136.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_129:
    if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_130;
    }
    goto LABEL_174;
  }
LABEL_173:
  operator delete(v135.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_130:
    if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_131;
    }
    goto LABEL_175;
  }
LABEL_174:
  operator delete(v134.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_131:
    if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_132;
    }
    goto LABEL_176;
  }
LABEL_175:
  operator delete(v133.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_132:
    if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_133;
    }
    goto LABEL_177;
  }
LABEL_176:
  operator delete(v132.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_133:
    if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_134;
    }
    goto LABEL_178;
  }
LABEL_177:
  operator delete(v131.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_134:
    if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_135;
    }
    goto LABEL_179;
  }
LABEL_178:
  operator delete(v130.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_135:
    if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_136;
    }
    goto LABEL_180;
  }
LABEL_179:
  operator delete(v129.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_136:
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_137;
    }
    goto LABEL_181;
  }
LABEL_180:
  operator delete(v128.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_137:
    if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_138;
    }
LABEL_182:
    operator delete(v126.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_139;
    }
    goto LABEL_183;
  }
LABEL_181:
  operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_182;
  }
LABEL_138:
  if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_139;
  }
LABEL_183:
  operator delete(v125.__r_.__value_.__l.__data_);
LABEL_139:
  if ((buf[23] & 0x80u) == 0) {
    v114 = buf;
  }
  else {
    v114 = *(uint8_t **)buf;
  }
  sub_10008D100(*(sqlite3 ***)(a1 + 40), (const char *)v114, "Failed to create tile data table");
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_10002A9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  if (*(char *)(v77 - 137) < 0)
  {
    operator delete(*(void **)(v77 - 160));
    if ((*(char *)(v77 - 169) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v77 - 201) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((*(char *)(v77 - 169) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v77 - 192));
  if ((*(char *)(v77 - 201) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v77 - 233) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(v77 - 224));
  if ((*(char *)(v77 - 233) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SLOBYTE(STACK[0x287]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(*(void **)(v77 - 256));
  if ((SLOBYTE(STACK[0x287]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete((void *)STACK[0x270]);
  if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x250]);
  if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete((void *)STACK[0x230]);
  if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x210]);
  if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((a76 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a66 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(a68);
  if ((a66 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a59 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a52 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(a54);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_16:
    if ((*(char *)(v77 - 105) & 0x80000000) == 0) {
LABEL_34:
    }
      _Unwind_Resume(a1);
LABEL_33:
    operator delete(*(void **)(v77 - 128));
    _Unwind_Resume(a1);
  }
LABEL_32:
  operator delete(a47);
  if ((*(char *)(v77 - 105) & 0x80000000) == 0) {
    goto LABEL_34;
  }
  goto LABEL_33;
}

void sub_10002B040(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (i = *(void **)(a1 + 32); i; i = (void *)*i)
  {
    uint64_t v4 = (std::__shared_weak_count *)i[3];
    uint64_t v6 = (uint64_t **)i[2];
    long long v7 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_10002BB0C(a2, &v6, (uint64_t)&v6);
    long long v5 = v7;
    if (v7)
    {
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_10002B110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100198250((uint64_t)&a9);
  sub_1000D8B48(v9);
  _Unwind_Resume(a1);
}

void sub_10002B12C(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_10047BED8 == -1)
  {
    uint64_t v6 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100462220);
    uint64_t v6 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
    {
LABEL_4:
      sub_1000A1C74((_OWORD *)(a1 + 2184));
      sub_100002DB4();
    }
  }
  int buf = 134218240;
  uint64_t buf_4 = a2;
  __int16 buf_12 = 1024;
  int buf_14 = a3;
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Getting a forceReset at timestamp %lld, localizerType %d", (uint8_t *)&buf, 0x12u);
  goto LABEL_4;
}

void sub_10002B954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::bad_cast a24,uint64_t a25)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x10002B858);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10002BB0C(uint64_t a1, uint64_t ***a2, uint64_t a3)
{
  unint64_t v7 = sub_100077F68((uint64_t)v31, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    long long v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      size_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = *((void *)v12 + 1);
            if (v14 == v8)
            {
              if (sub_1000706F4((const void ***)v12 + 2, (unsigned __int8 ***)a2)) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            size_t v12 = *(void **)v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (sub_1000706F4((const void ***)v12 + 2, (unsigned __int8 ***)a2)) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          size_t v12 = *(void **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  std::string::size_type v15 = (void *)(a1 + 16);
  size_t v12 = operator new(0x20uLL);
  v31[0] = v12;
  v31[1] = a1 + 16;
  *(void *)size_t v12 = 0;
  *((void *)v12 + 1) = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  char v32 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    long long v19 = *(void **)(*(void *)a1 + 8 * v3);
    if (v19)
    {
LABEL_26:
      *(void *)size_t v12 = *v19;
LABEL_61:
      *long long v19 = v12;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v24) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v24)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v24 < 3uLL || (uint8x8_t v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < *(void *)&v24) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v28 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v18 = *(void *)a1;
        long long v19 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v18 = *(void *)a1;
        long long v19 = *(void **)(*(void *)a1 + 8 * v8);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v28 & v8;
      uint64_t v18 = *(void *)a1;
      long long v19 = *(void **)(*(void *)a1 + 8 * (v28 & v8));
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  *(void *)size_t v12 = *v15;
  *std::string::size_type v15 = v12;
  *(void *)(v18 + 8 * v3) = v15;
  if (*(void *)v12)
  {
    unint64_t v29 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v29 >= v9) {
        v29 %= v9;
      }
    }
    else
    {
      v29 &= v9 - 1;
    }
    long long v19 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_10002BE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10022B004((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10002BE50()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047E5B0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_10047E5B0))
  {
    return &qword_10047E740;
  }
  qword_10047E740 = (uint64_t)sub_100163900();
  unk_10047E748 = v1;
  byte_10047E750 = 0;
  byte_10047E758 = 0;
  byte_10047E75A = 0;
  __cxa_guard_release(&qword_10047E5B0);
  return &qword_10047E740;
}

void sub_10002BEC8(_Unwind_Exception *a1)
{
}

void sub_10002BEE0(uint64_t a1, uint64_t a2)
{
  v79 = 0;
  long long v80 = 0;
  unint64_t v81 = 0;
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v87, ", ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047E03F >= 0) {
    uint64_t v6 = (const std::string::value_type *)&qword_10047E028;
  }
  else {
    uint64_t v6 = (const std::string::value_type *)qword_10047E028;
  }
  if (byte_10047E03F >= 0) {
    std::string::size_type v7 = byte_10047E03F;
  }
  else {
    std::string::size_type v7 = qword_10047E030;
  }
  unint64_t v8 = std::string::append(&v88, v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint8x8_t v10 = std::string::append(&__dst, " FROM ");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v82.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  size_t v12 = std::string::append(&v82, "venues");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v83.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v83, " WHERE ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v92.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047E03F >= 0) {
    float v16 = (const std::string::value_type *)&qword_10047E028;
  }
  else {
    float v16 = (const std::string::value_type *)qword_10047E028;
  }
  if (byte_10047E03F >= 0) {
    std::string::size_type v17 = byte_10047E03F;
  }
  else {
    std::string::size_type v17 = qword_10047E030;
  }
  uint64_t v18 = std::string::append(&v92, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v91.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  BOOL v20 = std::string::append(&v91, " IS NOT NULL");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v78 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v91.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_87;
    }
  }
  else if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v92.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_88;
  }
LABEL_87:
  operator delete(v83.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete(v82.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_90:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
LABEL_91:
    operator delete(v87.__r_.__value_.__l.__data_);
    goto LABEL_20;
  }
LABEL_89:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_90;
  }
LABEL_19:
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_91;
  }
LABEL_20:
  sub_10000E160(*(sqlite3 ***)(a1 + 40), (uint64_t)__p, 0, (uint64_t)&pStmt);
  unint64_t v22 = pStmt;
  for (i = pStmt; ; i = pStmt)
  {
    sqlite3_int64 v24 = sqlite3_step(i);
    sqlite3_int64 v25 = v24;
    if (v24 != 100) {
      break;
    }
    if (sqlite3_column_type(v22, 1) != 5) {
      sqlite3_int64 v25 = sqlite3_column_int64(v22, 1);
    }
    sqlite3_column_type(v22, 0);
    sqlite3_int64 v26 = sqlite3_column_int64(v22, 0);
    std::to_string(&v91, v26);
    v92.__r_.__value_.__r.__words[0] = v25;
    uint64_t v27 = *(void *)(a2 + 24);
    if (!v27) {
      sub_10008F39C();
    }
    if ((*(unsigned int (**)(uint64_t, std::string *))(*(void *)v27 + 48))(v27, &v92))
    {
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        continue;
      }
LABEL_44:
      operator delete(v91.__r_.__value_.__l.__data_);
      continue;
    }
    if (qword_10047BF08 == -1)
    {
      unint64_t v28 = qword_10047BF10;
      if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_35;
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_100460658);
      unint64_t v28 = qword_10047BF10;
      if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT))
      {
LABEL_35:
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v29 = &v91;
        }
        else {
          unint64_t v29 = (std::string *)v91.__r_.__value_.__r.__words[0];
        }
        LODWORD(v92.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "TileVisit, clear, %{private}s", (uint8_t *)&v92, 0xCu);
      }
    }
    uint64_t v30 = v80;
    if ((unint64_t)v80 >= v81)
    {
      long long v80 = sub_10021DB9C((char **)&v79, (uint64_t)&v91);
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        continue;
      }
      goto LABEL_44;
    }
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      long long v31 = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
      *((void *)v80 + 2) = *((void *)&v91.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v30 = v31;
      long long v80 = v30 + 24;
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        continue;
      }
      goto LABEL_44;
    }
    sub_1000559FC(v80, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
    long long v80 = v30 + 24;
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_44;
    }
LABEL_21:
    ;
  }
  if (v24 != 101)
  {
    if (v24 == 19)
    {
      if (qword_10047BF08 == -1)
      {
        long long v59 = qword_10047BF10;
        if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
          goto LABEL_113;
        }
      }
      else
      {
        dispatch_once(&qword_10047BF08, &stru_100460658);
        long long v59 = qword_10047BF10;
        if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO))
        {
LABEL_113:
          LOWORD(v91.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "Query constraint violation", (uint8_t *)&v91, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = xmmword_1003F6340;
      strcpy(v83.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v88, &v83);
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100460ED8;
      sub_10018E868((uint64_t)&v82);
      sub_10020E390((std::runtime_error *)&v88, (uint64_t)"auto db::resources::statement<2, 0>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1102:23) &&)::(anonymous class)::operator()() const [nCols = 2, nQueries = 0, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v82);
    }
    sub_100088644(v24, db);
    if (v25)
    {
      v60 = __error();
      sub_100295674(*v60, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((unsigned char *)&v86.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v86, " w/ ");
      long long v61 = std::string::insert(&v86, 0, "Failed sqlite3_step");
      long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        sub_1000559FC(&v85, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v85 = __dst;
      }
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v63 = &v85;
      }
      else {
        std::string::size_type v63 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v85.__r_.__value_.__l.__size_;
      }
      long long v65 = std::string::append(&v87, (const std::string::value_type *)v63, size);
      long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v89, &v88);
      v89.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
      sub_10018E868((uint64_t)&v84);
      sub_100204FC4(&v89, (uint64_t)"void db::resources::statement<2, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 2, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1102:23), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)&v84);
    }
    goto LABEL_21;
  }
  int v32 = sqlite3_reset(pStmt);
  sub_100088644(v32, db);
  if (v32)
  {
    long long v67 = __error();
    sub_100295674(*v67, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((unsigned char *)&v86.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v86, " w/ ");
    uint64_t v68 = std::string::insert(&v86, 0, "Failed to execute query");
    long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&v85, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else {
      std::string v85 = __dst;
    }
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v70 = &v85;
    }
    else {
      int v70 = (std::string *)v85.__r_.__value_.__r.__words[0];
    }
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v71 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v71 = v85.__r_.__value_.__l.__size_;
    }
    uint64_t v72 = std::string::append(&v87, (const std::string::value_type *)v70, v71);
    long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v89, &v88);
    v89.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)&v84);
    sub_100204FC4(&v89, (uint64_t)"void db::resources::statement<2, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 2, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1102:23), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)&v84);
  }
  sub_100011428((uint64_t)&pStmt);

  if (SHIBYTE(v78) < 0) {
    operator delete(__p[0]);
  }
  sub_10008DCF8(", ", (char *)&v79, (uint64_t)&v91);
  *((unsigned char *)&v84.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v84, "UPDATE ");
  std::string::size_type v33 = std::string::append(&v84, "venues");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v85.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  long long v35 = std::string::append(&v85, " SET ");
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v86.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047E03F >= 0) {
    long long v37 = (const std::string::value_type *)&qword_10047E028;
  }
  else {
    long long v37 = (const std::string::value_type *)qword_10047E028;
  }
  if (byte_10047E03F >= 0) {
    std::string::size_type v38 = byte_10047E03F;
  }
  else {
    std::string::size_type v38 = qword_10047E030;
  }
  std::string::size_type v39 = std::string::append(&v86, v37, v38);
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v87.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  long long v41 = std::string::append(&v87, " = NULL WHERE ");
  long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DF97 >= 0) {
    long long v43 = (const std::string::value_type *)&qword_10047DF80;
  }
  else {
    long long v43 = (const std::string::value_type *)qword_10047DF80;
  }
  if (byte_10047DF97 >= 0) {
    std::string::size_type v44 = byte_10047DF97;
  }
  else {
    std::string::size_type v44 = *(void *)&byte_10047DF88;
  }
  std::string::size_type v45 = std::string::append(&v88, v43, v44);
  long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  long long v47 = std::string::append(&__dst, " IN (");
  long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v82.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v49 = &v91;
  }
  else {
    long long v49 = (std::string *)v91.__r_.__value_.__r.__words[0];
  }
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v50 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v50 = v91.__r_.__value_.__l.__size_;
  }
  std::string::size_type v51 = std::string::append(&v82, (const std::string::value_type *)v49, v50);
  long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v83.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  long long v53 = std::string::append(&v83, ")");
  long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v92.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_72;
    }
LABEL_93:
    operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_94;
    }
LABEL_73:
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_74;
    }
LABEL_95:
    operator delete(v88.__r_.__value_.__l.__data_);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_96;
    }
LABEL_75:
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_76;
    }
LABEL_97:
    operator delete(v86.__r_.__value_.__l.__data_);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_98;
    }
LABEL_77:
    if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_78;
    }
LABEL_99:
    operator delete(v84.__r_.__value_.__l.__data_);
    goto LABEL_78;
  }
  operator delete(v83.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_93;
  }
LABEL_72:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_73;
  }
LABEL_94:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_95;
  }
LABEL_74:
  if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_75;
  }
LABEL_96:
  operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_97;
  }
LABEL_76:
  if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_77;
  }
LABEL_98:
  operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_99;
  }
LABEL_78:
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v55 = &v92;
  }
  else {
    long long v55 = (std::string *)v92.__r_.__value_.__r.__words[0];
  }
  sub_10008D100(*(sqlite3 ***)(a1 + 40), (const char *)v55, "Failed to clear last visited");
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v92.__r_.__value_.__l.__data_);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_101;
    }
LABEL_83:
    v56 = (char *)v79;
    if (v79)
    {
LABEL_102:
      std::string::size_type v57 = v80;
      uint64_t v58 = v56;
      if (v80 != v56)
      {
        do
        {
          if (*(v57 - 1) < 0) {
            operator delete(*((void **)v57 - 3));
          }
          v57 -= 24;
        }
        while (v57 != v56);
        uint64_t v58 = v79;
      }
      long long v80 = v56;
      operator delete(v58);
    }
  }
  else
  {
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_83;
    }
LABEL_101:
    operator delete(v91.__r_.__value_.__l.__data_);
    v56 = (char *)v79;
    if (v79) {
      goto LABEL_102;
    }
  }
}

void sub_10002D438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::runtime_error::~runtime_error(v77);
  if (a37 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
LABEL_3:
    if (a51 < 0) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  operator delete(a25);
  if (a51 < 0)
  {
LABEL_4:
    operator delete(a46);
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  if ((a44 & 0x80000000) == 0)
  {
LABEL_5:
    *(void *)(v79 - 144) = v78;
    if (*(char *)(v79 - 113) < 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a39);
  *(void *)(v79 - 144) = v78;
  if (*(char *)(v79 - 113) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v79 - 136));
    if ((a57 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  if ((a57 & 0x80000000) == 0)
  {
LABEL_7:
    *(void *)(v79 - 192) = &off_100451DC0;
    uint64_t v81 = *(void *)(v79 - 184);
    if (!v81) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a52);
  *(void *)(v79 - 192) = &off_100451DC0;
  uint64_t v81 = *(void *)(v79 - 184);
  if (!v81) {
    goto LABEL_17;
  }
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(void *)v81 + 32))(v81)) {
    *(void *)(v79 - 184) = 0;
  }
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v79 - 208));
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v79 - 256));
  if (a77 < 0) {
    operator delete(a76.__vftable);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  __cxa_free_exception(v77);
  if (*(char *)(v79 - 217) < 0) {
    operator delete(*(void **)(v79 - 240));
  }
  sub_1002037D0((uint64_t)&a12);
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_1000E0AA4(&a22);
  _Unwind_Resume(a1);
}

BOOL sub_10002DD10(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(id **)(a1 + 16);
  ++**(_DWORD **)(a1 + 8);
  if (![*v4 tileLastModified:(double)v3 - kCFAbsoluteTimeIntervalSince1970 needsEvictionAt:**(double **)(a1 + 24)])return 1; {
  ++**(_DWORD **)(a1 + 32);
  }
  if (qword_10047BEF8 == -1)
  {
    long long v5 = qword_10047BF00;
    BOOL result = os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO);
    if (!result) {
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_10047BEF8, &stru_10046BB50);
    long long v5 = qword_10047BF00;
    BOOL result = os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO);
    if (!result) {
      return result;
    }
  }
  *(_WORD *)std::string::size_type v7 = 0;
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Resetting visit for venue", v7, 2u);
  return 0;
}

uint64_t sub_10002DF5C(uint64_t a1, uint64_t a2, std::ios_base *a3, unsigned int a4, uint64_t *a5)
{
  if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    if (*(char *)(a1 + 39) < 0) {
      sub_1000559FC(&v260, *(void **)(a1 + 16), *(void *)(a1 + 24));
    }
    else {
      std::string v260 = *(std::string *)(a1 + 16);
    }
    unsigned __int8 v9 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
    long long v11 = &v260;
    std::string::size_type size = v260.__r_.__value_.__l.__size_;
    long long v13 = (std::string *)v260.__r_.__value_.__r.__words[0];
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      std::string::size_type v14 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
    }
    else
    {
      std::string::size_type v14 = v260.__r_.__value_.__l.__size_;
      long long v11 = (std::string *)v260.__r_.__value_.__r.__words[0];
    }
    if (v14)
    {
      uint64_t v15 = 0;
      float v16 = v11;
      while (1)
      {
        if (v11->__r_.__value_.__s.__data_[v15] == 37)
        {
          std::string::size_type v17 = (std::string *)((char *)&v11->__r_.__value_.__l.__data_ + v15 + 1);
          if (v14 - 1 != v15)
          {
            if (v17->__r_.__value_.__s.__data_[0] == 84)
            {
              std::string::size_type v17 = (std::string *)&v11->__r_.__value_.__s.__data_[v15 + 2];
              char v18 = -1;
            }
            else
            {
              char v18 = 0;
            }
            if (v18) {
              break;
            }
          }
        }
        float v16 = (std::string *)((char *)v16 + 1);
        if (v14 == ++v15) {
          goto LABEL_24;
        }
      }
      if ((std::string *)((char *)v11 + v15) != v17)
      {
        v254[0].__locale_ = (std::locale::__imp *)"%T";
        v254[1].__locale_ = (std::locale::__imp *)"";
        sub_100195078(&v260, (uint64_t *)v254, "%H:%M:%S", "", (std::string *)((char *)v11 + v15), v17, "%H:%M:%S", "");
        std::string::size_type v10 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
        std::string::size_type size = v260.__r_.__value_.__l.__size_;
        long long v13 = (std::string *)v260.__r_.__value_.__r.__words[0];
        unsigned __int8 v9 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
      }
    }
LABEL_24:
    long long v19 = &v260;
    if ((v9 & 0x80u) != 0)
    {
      long long v19 = v13;
      std::string::size_type v10 = size;
    }
    v248 = a3;
    if (v10)
    {
      uint64_t v20 = 0;
      long long v21 = v19;
      while (1)
      {
        if (v19->__r_.__value_.__s.__data_[v20] == 37)
        {
          unint64_t v22 = (std::string *)((char *)&v19->__r_.__value_.__l.__data_ + v20 + 1);
          if (v10 - 1 != v20)
          {
            if (v22->__r_.__value_.__s.__data_[0] == 82)
            {
              unint64_t v22 = (std::string *)&v19->__r_.__value_.__s.__data_[v20 + 2];
              char v23 = -1;
            }
            else
            {
              char v23 = 0;
            }
            if (v23) {
              break;
            }
          }
        }
        long long v21 = (std::string *)((char *)v21 + 1);
        if (v10 == ++v20) {
          goto LABEL_39;
        }
      }
      if ((std::string *)((char *)v19 + v20) != v22)
      {
        v254[0].__locale_ = (std::locale::__imp *)"%R";
        v254[1].__locale_ = (std::locale::__imp *)"";
        sub_100195078(&v260, (uint64_t *)v254, "%H:%M", "", (std::string *)((char *)v19 + v20), v22, "%H:%M", "");
        unsigned __int8 v9 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
        long long v13 = (std::string *)v260.__r_.__value_.__r.__words[0];
      }
    }
LABEL_39:
    unsigned int v247 = a4;
    long long v258 = 0uLL;
    uint64_t v259 = 0;
    sqlite3_int64 v24 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0];
    if ((v9 & 0x80u) == 0) {
      sqlite3_int64 v25 = &v260;
    }
    else {
      sqlite3_int64 v25 = v13;
    }
    int64_t v26 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0]);
    if (v26)
    {
      int64_t v27 = v26;
      std::string::size_type v28 = v260.__r_.__value_.__l.__size_;
      int64_t v29 = v9;
      if ((v9 & 0x80u) != 0) {
        int64_t v29 = v260.__r_.__value_.__l.__size_;
      }
      if (v29 >= v26)
      {
        uint64_t v30 = (char *)v25 + v29;
        int v31 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0];
        int v32 = v25;
        do
        {
          int64_t v33 = v29 - v27;
          if (v33 == -1) {
            break;
          }
          long long v34 = (char *)memchr(v32, v31, v33 + 1);
          if (!v34) {
            break;
          }
          long long v35 = v34;
          if (!memcmp(v34, v24, v27))
          {
            if (v35 == v30 || v35 - (char *)v25 == -1) {
              break;
            }
            goto LABEL_54;
          }
          int v32 = (std::string *)(v35 + 1);
          int64_t v29 = v30 - (v35 + 1);
        }
        while (v29 >= v27);
      }
LABEL_106:
      std::locale v64 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0];
      int64_t v65 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0]);
      if ((v9 & 0x80u) == 0) {
        long long v66 = &v260;
      }
      else {
        long long v66 = v13;
      }
      if ((v9 & 0x80u) == 0) {
        int64_t v67 = v9;
      }
      else {
        int64_t v67 = v28;
      }
      if (v65)
      {
        int64_t v68 = v65;
        if (v67 >= v65)
        {
          long long v69 = (char *)v66 + v67;
          int v70 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0];
          int64_t v71 = v67;
          uint64_t v72 = v66;
          do
          {
            int64_t v73 = v71 - v68;
            if (v73 == -1) {
              break;
            }
            v74 = (char *)memchr(v72, v70, v73 + 1);
            if (!v74) {
              break;
            }
            uint64_t v75 = v74;
            if (!memcmp(v74, v64, v68))
            {
              if (v75 == v69 || v75 - (char *)v66 == -1) {
                break;
              }
              goto LABEL_122;
            }
            uint64_t v72 = (std::string *)(v75 + 1);
            int64_t v71 = v69 - (v75 + 1);
          }
          while (v71 >= v68);
        }
      }
      else
      {
LABEL_122:
        size_t v76 = strlen(v64);
        if (v67 && v76)
        {
          uint64_t v77 = &v64[v76];
          uint64_t v78 = (std::string *)((char *)v66 + v67);
          int64_t v79 = v67 - 1;
LABEL_127:
          uint64_t v81 = 0;
          do
          {
            if (v66->__r_.__value_.__s.__data_[v81] != v64[v81])
            {
              long long v80 = (std::string *)((char *)v66 + v81);
              if (&v64[v81] == v77) {
                goto LABEL_133;
              }
LABEL_126:
              long long v66 = (std::string *)((char *)v66 + 1);
              --v79;
              if (v66 == v78) {
                goto LABEL_135;
              }
              goto LABEL_127;
            }
            uint64_t v82 = v81 + 1;
            if (v79 == v81) {
              break;
            }
            BOOL v63 = v76 - 1 == v81++;
          }
          while (!v63);
          long long v80 = (std::string *)((char *)v66 + v82);
          if (&v64[v82] != v77) {
            goto LABEL_126;
          }
LABEL_133:
          if (v66 != v80)
          {
            v254[0].__locale_ = (std::locale::__imp *)v64;
            v254[1].__locale_ = (std::locale::__imp *)&v64[v76];
            sub_100195D54(&v260, (uint64_t *)v254, v66, v80);
            unsigned __int8 v9 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
            long long v13 = (std::string *)v260.__r_.__value_.__r.__words[0];
          }
        }
      }
LABEL_135:
      std::string v83 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_name_format[0];
      if ((v9 & 0x80u) == 0) {
        std::string v84 = &v260;
      }
      else {
        std::string v84 = v13;
      }
      int64_t v85 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_name_format[0]);
      if (v85)
      {
        int64_t v86 = v85;
        int64_t v87 = v260.__r_.__value_.__l.__size_;
        if ((v9 & 0x80u) == 0) {
          int64_t v87 = v9;
        }
        if (v87 >= v85)
        {
          std::string v88 = (char *)v84 + v87;
          int v89 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_name_format[0];
          long long v90 = v84;
          do
          {
            int64_t v91 = v87 - v86;
            if (v91 == -1) {
              break;
            }
            std::string v92 = (char *)memchr(v90, v89, v91 + 1);
            if (!v92) {
              break;
            }
            v93 = v92;
            if (!memcmp(v92, v83, v86))
            {
              if (v93 == v88 || v93 - (char *)v84 == -1) {
                break;
              }
              goto LABEL_150;
            }
            long long v90 = (std::string *)(v93 + 1);
            int64_t v87 = v88 - (v93 + 1);
          }
          while (v87 >= v86);
        }
      }
      else
      {
LABEL_150:
        sub_1000CD96C((uint64_t)v254);
        __dst.__r_.__value_.__s.__data_[0] = 32;
        long long v94 = sub_10002986C(v254, (uint64_t)&__dst, 1);
        size_t v95 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_name_format[0]);
        sub_10002986C(v94, (uint64_t)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_name_format[0], v95);
        std::stringbuf::str();
        unsigned __int8 v96 = v253;
        p_p = (char *)__p;
        if ((v253 & 0x80u) != 0)
        {
          uint64_t v98 = v252;
        }
        else
        {
          p_p = (char *)&__p;
          uint64_t v98 = v253;
        }
        if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v99 = &v260;
        }
        else {
          v99 = (std::string *)v260.__r_.__value_.__r.__words[0];
        }
        if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v100 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v100 = v260.__r_.__value_.__l.__size_;
        }
        if (v100 && v98)
        {
          std::string::size_type v101 = (std::string::size_type)&p_p[v98];
          long long v102 = (std::string *)((char *)v99 + v100);
          uint64_t v103 = v98 - 1;
          std::string::size_type v104 = v100 - 1;
LABEL_164:
          uint64_t v106 = 0;
          do
          {
            if (v99->__r_.__value_.__s.__data_[v106] != p_p[v106])
            {
              v105 = (std::string *)((char *)v99 + v106);
              if (&p_p[v106] == (char *)v101) {
                goto LABEL_170;
              }
LABEL_163:
              v99 = (std::string *)((char *)v99 + 1);
              --v104;
              if (v99 == v102) {
                goto LABEL_172;
              }
              goto LABEL_164;
            }
            uint64_t v107 = v106 + 1;
            if (v104 == v106) {
              break;
            }
            BOOL v63 = v103 == v106++;
          }
          while (!v63);
          v105 = (std::string *)((char *)v99 + v107);
          if (&p_p[v107] != (char *)v101) {
            goto LABEL_163;
          }
LABEL_170:
          if (v99 != v105)
          {
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
            __dst.__r_.__value_.__l.__size_ = v101;
            sub_1001960A0(&v260, (uint64_t *)&__dst, v99, v105);
            unsigned __int8 v96 = v253;
          }
        }
LABEL_172:
        if ((v96 & 0x80) != 0) {
          operator delete(__p);
        }
        if (v257 < 0) {
          operator delete(v256);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        unsigned __int8 v9 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
        long long v13 = (std::string *)v260.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v108 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_abbrev_format[0];
      if ((v9 & 0x80u) == 0) {
        v109 = &v260;
      }
      else {
        v109 = v13;
      }
      int64_t v110 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_abbrev_format[0]);
      if (v110)
      {
        int64_t v111 = v110;
        int64_t v112 = v260.__r_.__value_.__l.__size_;
        int64_t v113 = v9;
        if ((v9 & 0x80u) != 0) {
          int64_t v113 = v260.__r_.__value_.__l.__size_;
        }
        if (v113 >= v110)
        {
          v114 = (char *)v109 + v113;
          int v115 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_abbrev_format[0];
          long long v116 = v109;
          do
          {
            int64_t v117 = v113 - v111;
            if (v117 == -1) {
              break;
            }
            std::string v118 = (char *)memchr(v116, v115, v117 + 1);
            if (!v118) {
              break;
            }
            std::string v119 = v118;
            if (!memcmp(v118, v108, v111))
            {
              if (v119 == v114 || v119 - (char *)v109 == -1) {
                break;
              }
              goto LABEL_192;
            }
            long long v116 = (std::string *)(v119 + 1);
            int64_t v113 = v114 - (v119 + 1);
          }
          while (v113 >= v111);
        }
      }
      else
      {
LABEL_192:
        sub_1000CD96C((uint64_t)v254);
        __dst.__r_.__value_.__s.__data_[0] = 32;
        std::string v120 = sub_10002986C(v254, (uint64_t)&__dst, 1);
        size_t v121 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_abbrev_format[0]);
        sub_10002986C(v120, (uint64_t)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_abbrev_format[0], v121);
        std::stringbuf::str();
        unsigned __int8 v122 = v253;
        std::string v123 = (char *)__p;
        if ((v253 & 0x80u) != 0)
        {
          uint64_t v124 = v252;
        }
        else
        {
          std::string v123 = (char *)&__p;
          uint64_t v124 = v253;
        }
        if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v125 = &v260;
        }
        else {
          std::string v125 = (std::string *)v260.__r_.__value_.__r.__words[0];
        }
        if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v126 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v126 = v260.__r_.__value_.__l.__size_;
        }
        if (v126 && v124)
        {
          std::string::size_type v127 = (std::string::size_type)&v123[v124];
          std::string v128 = (std::string *)((char *)v125 + v126);
          uint64_t v129 = v124 - 1;
          std::string::size_type v130 = v126 - 1;
LABEL_206:
          uint64_t v132 = 0;
          do
          {
            if (v125->__r_.__value_.__s.__data_[v132] != v123[v132])
            {
              std::string v131 = (std::string *)((char *)v125 + v132);
              if (&v123[v132] == (char *)v127) {
                goto LABEL_212;
              }
LABEL_205:
              std::string v125 = (std::string *)((char *)v125 + 1);
              --v130;
              if (v125 == v128) {
                goto LABEL_214;
              }
              goto LABEL_206;
            }
            uint64_t v133 = v132 + 1;
            if (v130 == v132) {
              break;
            }
            BOOL v63 = v129 == v132++;
          }
          while (!v63);
          std::string v131 = (std::string *)((char *)v125 + v133);
          if (&v123[v133] != (char *)v127) {
            goto LABEL_205;
          }
LABEL_212:
          if (v125 != v131)
          {
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
            __dst.__r_.__value_.__l.__size_ = v127;
            sub_1001960A0(&v260, (uint64_t *)&__dst, v125, v131);
            unsigned __int8 v122 = v253;
          }
        }
LABEL_214:
        if ((v122 & 0x80) != 0) {
          operator delete(__p);
        }
        if (v257 < 0) {
          operator delete(v256);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        unsigned __int8 v9 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
        int64_t v112 = v260.__r_.__value_.__l.__size_;
        long long v13 = (std::string *)v260.__r_.__value_.__r.__words[0];
      }
      std::string v134 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[0];
      int64_t v135 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[0]);
      if ((v9 & 0x80u) == 0) {
        std::string v136 = &v260;
      }
      else {
        std::string v136 = v13;
      }
      if ((v9 & 0x80u) == 0) {
        int64_t v137 = v9;
      }
      else {
        int64_t v137 = v112;
      }
      if (v135)
      {
        int64_t v138 = v135;
        if (v137 >= v135)
        {
          std::string v139 = (char *)v136 + v137;
          int v140 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[0];
          int64_t v141 = v137;
          v142 = v136;
          do
          {
            int64_t v143 = v141 - v138;
            if (v143 == -1) {
              break;
            }
            v144 = (char *)memchr(v142, v140, v143 + 1);
            if (!v144) {
              break;
            }
            v145 = v144;
            if (!memcmp(v144, v134, v138))
            {
              if (v145 == v139 || v145 - (char *)v136 == -1) {
                break;
              }
              goto LABEL_235;
            }
            v142 = (std::string *)(v145 + 1);
            int64_t v141 = v139 - (v145 + 1);
          }
          while (v141 >= v138);
        }
      }
      else
      {
LABEL_235:
        size_t v146 = strlen(v134);
        if (v137 && v146)
        {
          v147 = &v134[v146];
          v148 = (std::string *)((char *)v136 + v137);
          int64_t v149 = v137 - 1;
LABEL_240:
          uint64_t v151 = 0;
          do
          {
            if (v136->__r_.__value_.__s.__data_[v151] != v134[v151])
            {
              v150 = (std::string *)((char *)v136 + v151);
              if (&v134[v151] == v147) {
                goto LABEL_246;
              }
LABEL_239:
              std::string v136 = (std::string *)((char *)v136 + 1);
              --v149;
              if (v136 == v148) {
                goto LABEL_248;
              }
              goto LABEL_240;
            }
            uint64_t v152 = v151 + 1;
            if (v149 == v151) {
              break;
            }
            BOOL v63 = v146 - 1 == v151++;
          }
          while (!v63);
          v150 = (std::string *)((char *)v136 + v152);
          if (&v134[v152] != v147) {
            goto LABEL_239;
          }
LABEL_246:
          if (v136 != v150)
          {
            v254[0].__locale_ = (std::locale::__imp *)v134;
            v254[1].__locale_ = (std::locale::__imp *)&v134[v146];
            sub_100195D54(&v260, (uint64_t *)v254, v136, v150);
            unsigned __int8 v9 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
            int64_t v112 = v260.__r_.__value_.__l.__size_;
            long long v13 = (std::string *)v260.__r_.__value_.__r.__words[0];
          }
        }
      }
LABEL_248:
      v153 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_iso_format[0];
      int64_t v154 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_iso_format[0]);
      if ((v9 & 0x80u) == 0) {
        v155 = &v260;
      }
      else {
        v155 = v13;
      }
      if ((v9 & 0x80u) == 0) {
        int64_t v112 = v9;
      }
      if (v154)
      {
        int64_t v156 = v154;
        if (v112 >= v154)
        {
          v157 = (char *)v155 + v112;
          int v158 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_iso_format[0];
          int64_t v159 = v112;
          v160 = v155;
          do
          {
            int64_t v161 = v159 - v156;
            if (v161 == -1) {
              break;
            }
            v162 = (char *)memchr(v160, v158, v161 + 1);
            if (!v162) {
              break;
            }
            v163 = v162;
            if (!memcmp(v162, v153, v156))
            {
              if (v163 == v157 || v163 - (char *)v155 == -1) {
                break;
              }
              goto LABEL_263;
            }
            v160 = (std::string *)(v163 + 1);
            int64_t v159 = v157 - (v163 + 1);
          }
          while (v159 >= v156);
        }
      }
      else
      {
LABEL_263:
        size_t v164 = strlen(v153);
        if (v112 && v164)
        {
          v165 = &v153[v164];
          v166 = (std::string *)((char *)v155 + v112);
          int64_t v167 = v112 - 1;
LABEL_268:
          uint64_t v169 = 0;
          do
          {
            if (v155->__r_.__value_.__s.__data_[v169] != v153[v169])
            {
              v168 = (std::string *)((char *)v155 + v169);
              if (&v153[v169] == v165) {
                goto LABEL_274;
              }
LABEL_267:
              v155 = (std::string *)((char *)v155 + 1);
              --v167;
              if (v155 == v166) {
                goto LABEL_276;
              }
              goto LABEL_268;
            }
            uint64_t v170 = v169 + 1;
            if (v167 == v169) {
              break;
            }
            BOOL v63 = v164 - 1 == v169++;
          }
          while (!v63);
          v168 = (std::string *)((char *)v155 + v170);
          if (&v153[v170] != v165) {
            goto LABEL_267;
          }
LABEL_274:
          if (v155 != v168)
          {
            v254[0].__locale_ = (std::locale::__imp *)v153;
            v254[1].__locale_ = (std::locale::__imp *)&v153[v164];
            sub_100195D54(&v260, (uint64_t *)v254, v155, v168);
            unsigned __int8 v9 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
            long long v13 = (std::string *)v260.__r_.__value_.__r.__words[0];
          }
        }
      }
LABEL_276:
      v171 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format[0];
      if ((v9 & 0x80u) == 0) {
        v172 = &v260;
      }
      else {
        v172 = v13;
      }
      int64_t v173 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format[0]);
      if (v173)
      {
        int64_t v174 = v173;
        int64_t v175 = v260.__r_.__value_.__l.__size_;
        if ((v9 & 0x80u) == 0) {
          int64_t v175 = v9;
        }
        if (v175 >= v173)
        {
          v176 = (char *)v172 + v175;
          int v177 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format[0];
          v178 = v172;
          do
          {
            int64_t v179 = v175 - v174;
            if (v179 == -1) {
              break;
            }
            v180 = (char *)memchr(v178, v177, v179 + 1);
            if (!v180) {
              break;
            }
            v181 = v180;
            if (!memcmp(v180, v171, v174))
            {
              if (v181 == v176 || v181 - (char *)v172 == -1) {
                break;
              }
              goto LABEL_291;
            }
            v178 = (std::string *)(v181 + 1);
            int64_t v175 = v176 - (v181 + 1);
          }
          while (v175 >= v174);
        }
      }
      else
      {
LABEL_291:
        v182 = (std::locale::__imp *)HIBYTE(v259);
        LOBYTE(v183) = HIBYTE(v259);
        locale = (std::locale::__imp *)*((void *)&v258 + 1);
        if (v259 >= 0) {
          uint64_t v185 = HIBYTE(v259);
        }
        else {
          uint64_t v185 = *((void *)&v258 + 1);
        }
        if (!v185)
        {
          uint64_t v186 = *a5;
          unint64_t v187 = 0x7FFFFFFFFFFFFFFELL;
          if (*a5 == 0x8000000000000000) {
            unint64_t v187 = 0x8000000000000000;
          }
          if (v186 != 0x7FFFFFFFFFFFFFFFLL) {
            uint64_t v186 = v187;
          }
          if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) > 2) {
            uint64_t v186 = *a5 % 86400000000;
          }
          uint64_t v188 = v186 % 1000000;
          if (v188 >= 0) {
            uint64_t v189 = v188;
          }
          else {
            uint64_t v189 = -v188;
          }
          sub_100195A4C(v189, 6);
          if (SHIBYTE(v259) < 0) {
            operator delete((void *)v258);
          }
          uint64_t v259 = v255;
          long long v258 = *(_OWORD *)&v254[0].__locale_;
          v171 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format[0];
          v182 = (std::locale::__imp *)HIBYTE(v255);
          locale = v254[1].__locale_;
          unsigned __int8 v9 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
          long long v13 = (std::string *)v260.__r_.__value_.__r.__words[0];
          unint64_t v183 = HIBYTE(v255);
        }
        size_t v190 = strlen(v171);
        if ((v183 & 0x80u) == 0) {
          v191 = (char *)&v258;
        }
        else {
          v191 = (char *)v258;
        }
        if ((v183 & 0x80u) == 0) {
          v192 = v182;
        }
        else {
          v192 = locale;
        }
        if ((v9 & 0x80u) == 0) {
          v193 = &v260;
        }
        else {
          v193 = v13;
        }
        if ((v9 & 0x80u) == 0) {
          std::string::size_type v194 = v9;
        }
        else {
          std::string::size_type v194 = v260.__r_.__value_.__l.__size_;
        }
        if (v194 && v190)
        {
          v195 = &v171[v190];
          v196 = (char *)v192 + (void)v191;
          v197 = (std::string *)((char *)v193 + v194);
          std::string::size_type v198 = v194 - 1;
LABEL_324:
          uint64_t v200 = 0;
          do
          {
            if (v193->__r_.__value_.__s.__data_[v200] != v171[v200])
            {
              v199 = (std::string *)((char *)v193 + v200);
              if (&v171[v200] == v195) {
                goto LABEL_330;
              }
LABEL_323:
              v193 = (std::string *)((char *)v193 + 1);
              --v198;
              if (v193 == v197) {
                goto LABEL_332;
              }
              goto LABEL_324;
            }
            uint64_t v201 = v200 + 1;
            if (v198 == v200) {
              break;
            }
            BOOL v63 = v190 - 1 == v200++;
          }
          while (!v63);
          v199 = (std::string *)((char *)v193 + v201);
          if (&v171[v201] != v195) {
            goto LABEL_323;
          }
LABEL_330:
          if (v193 != v199)
          {
            v254[0].__locale_ = (std::locale::__imp *)v171;
            v254[1].__locale_ = (std::locale::__imp *)&v171[v190];
            sub_1001922E4(&v260, (uint64_t *)v254, v191, v196, v193, v199, v191, v196);
            unsigned __int8 v9 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
            long long v13 = (std::string *)v260.__r_.__value_.__r.__words[0];
          }
        }
      }
LABEL_332:
      v202 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0];
      if ((v9 & 0x80u) == 0) {
        long long v13 = &v260;
      }
      int64_t v203 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0]);
      if (v203)
      {
        int64_t v204 = v203;
        int64_t v205 = v260.__r_.__value_.__l.__size_;
        if ((v9 & 0x80u) == 0) {
          int64_t v205 = v9;
        }
        if (v205 >= v203)
        {
          v206 = (char *)v13 + v205;
          int v207 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0];
          v208 = v13;
          do
          {
            int64_t v209 = v205 - v204;
            if (v209 == -1) {
              break;
            }
            v210 = (char *)memchr(v208, v207, v209 + 1);
            if (!v210) {
              break;
            }
            v211 = v210;
            if (!memcmp(v210, v202, v204))
            {
              if (v211 == v206 || v211 - (char *)v13 == -1) {
                break;
              }
              goto LABEL_346;
            }
            v208 = (std::string *)(v211 + 1);
            int64_t v205 = v206 - (v211 + 1);
          }
          while (v205 >= v204);
        }
LABEL_416:
        sub_10009F36C(a5, (uint64_t)v254);
        if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
          sub_1000559FC(&v250, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
        }
        else {
          std::string v250 = v260;
        }
        uint64_t v244 = (*(uint64_t (**)(uint64_t, uint64_t, std::ios_base *, void, std::locale *, std::string *))(*(void *)a1 + 48))(a1, a2, v248, v247, v254, &v250);
        if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v250.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v259) & 0x80000000) == 0)
          {
LABEL_421:
            if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              return v244;
            }
LABEL_425:
            operator delete(v260.__r_.__value_.__l.__data_);
            return v244;
          }
        }
        else if ((SHIBYTE(v259) & 0x80000000) == 0)
        {
          goto LABEL_421;
        }
        operator delete((void *)v258);
        if ((SHIBYTE(v260.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return v244;
        }
        goto LABEL_425;
      }
LABEL_346:
      uint64_t v212 = *a5;
      unint64_t v213 = 0x7FFFFFFFFFFFFFFELL;
      if (*a5 == 0x8000000000000000) {
        unint64_t v213 = 0x8000000000000000;
      }
      if (v212 != 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v212 = v213;
      }
      if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) > 2) {
        uint64_t v212 = *a5 % 86400000000;
      }
      uint64_t v214 = v212 % 1000000;
      if (v214)
      {
        if (v214 >= 0) {
          uint64_t v215 = v214;
        }
        else {
          uint64_t v215 = -v214;
        }
        sub_100195A4C(v215, 6);
        v216 = v248;
        if ((SHIBYTE(v259) & 0x80000000) == 0)
        {
LABEL_357:
          uint64_t v259 = v255;
          long long v258 = *(_OWORD *)&v254[0].__locale_;
          unint64_t v217 = HIBYTE(v255);
          if ((v255 & 0x8000000000000000) != 0) {
            unint64_t v217 = *((void *)&v258 + 1);
          }
          if (v217)
          {
            std::ios_base::getloc(v216);
            v218 = std::locale::use_facet(v254, &std::numpunct<char>::id);
            std::string::value_type v219 = ((uint64_t (*)(const std::locale::facet *))v218->__vftable[1].~facet)(v218);
            std::locale::~locale(v254);
            memset(&__dst, 0, sizeof(__dst));
            std::string::push_back(&__dst, v219);
            if (v259 >= 0) {
              v220 = (const std::string::value_type *)&v258;
            }
            else {
              v220 = (const std::string::value_type *)v258;
            }
            if (v259 >= 0) {
              std::string::size_type v221 = HIBYTE(v259);
            }
            else {
              std::string::size_type v221 = *((void *)&v258 + 1);
            }
            std::string::append(&__dst, v220, v221);
            size_t v222 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0]);
            char v223 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            std::string::size_type v224 = __dst.__r_.__value_.__l.__size_;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_dst = &__dst;
            }
            else {
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v224 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v226 = &v260;
            }
            else {
              v226 = (std::string *)v260.__r_.__value_.__r.__words[0];
            }
            if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v227 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v227 = v260.__r_.__value_.__l.__size_;
            }
            if (v227 && v222)
            {
              v228 = (char *)p_dst + v224;
              v229 = (std::string *)((char *)v226 + v227);
              std::string::size_type v230 = v227 - 1;
              while (1)
              {
                uint64_t v231 = 0;
                while (v226->__r_.__value_.__s.__data_[v231] == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v231])
                {
                  uint64_t v232 = v231 + 1;
                  if (v230 != v231)
                  {
                    BOOL v63 = v222 - 1 == v231++;
                    if (!v63) {
                      continue;
                    }
                  }
                  v233 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v232];
                  v234 = (std::string *)((char *)v226 + v232);
                  goto LABEL_387;
                }
                v233 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v231];
                v234 = (std::string *)((char *)v226 + v231);
LABEL_387:
                if (v233 == &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v222]) {
                  break;
                }
                v226 = (std::string *)((char *)v226 + 1);
                --v230;
                if (v226 == v229) {
                  goto LABEL_412;
                }
              }
              if (v226 != v234)
              {
                v254[0] = (std::locale)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0];
                v254[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v222];
                sub_1001922E4(&v260, (uint64_t *)v254, (char *)p_dst, v228, v226, v234, (char *)p_dst, v228);
                char v223 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              }
            }
LABEL_412:
            if (v223 < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            size_t v235 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0]);
            std::string::size_type v236 = v260.__r_.__value_.__l.__size_;
            if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v237 = &v260;
            }
            else {
              v237 = (std::string *)v260.__r_.__value_.__r.__words[0];
            }
            if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v236 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
            }
            if (v236 && v235)
            {
              v238 = (std::string *)((char *)v237 + v236);
              std::string::size_type v239 = v236 - 1;
              while (1)
              {
                uint64_t v240 = 0;
                while (v237->__r_.__value_.__s.__data_[v240] == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v240])
                {
                  uint64_t v241 = v240 + 1;
                  if (v239 != v240)
                  {
                    BOOL v63 = v235 - 1 == v240++;
                    if (!v63) {
                      continue;
                    }
                  }
                  v242 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v241];
                  v243 = (std::string *)((char *)v237 + v241);
                  goto LABEL_407;
                }
                v242 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v240];
                v243 = (std::string *)((char *)v237 + v240);
LABEL_407:
                if (v242 == &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v235]) {
                  break;
                }
                v237 = (std::string *)((char *)v237 + 1);
                --v239;
                if (v237 == v238) {
                  goto LABEL_416;
                }
              }
              if (v237 != v243)
              {
                v254[0] = (std::locale)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0];
                v254[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v235];
                sub_100195D54(&v260, (uint64_t *)v254, v237, v243);
              }
            }
          }
          goto LABEL_416;
        }
      }
      else
      {
        v254[0].__locale_ = 0;
        v254[1].__locale_ = 0;
        unint64_t v255 = 0;
        v216 = v248;
        if ((SHIBYTE(v259) & 0x80000000) == 0) {
          goto LABEL_357;
        }
      }
      operator delete((void *)v258);
      goto LABEL_357;
    }
LABEL_54:
    uint64_t v36 = *a5;
    unint64_t v37 = 0x7FFFFFFFFFFFFFFELL;
    if (*a5 == 0x8000000000000000) {
      unint64_t v37 = 0x8000000000000000;
    }
    if (v36 != 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v36 = v37;
    }
    if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) > 2) {
      uint64_t v36 = *a5 % 86400000000;
    }
    uint64_t v38 = v36 % 1000000;
    if (v38 >= 0) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = -v38;
    }
    sub_100195A4C(v39, 6);
    if (SHIBYTE(v259) < 0) {
      operator delete((void *)v258);
    }
    long long v258 = *(_OWORD *)&v254[0].__locale_;
    uint64_t v259 = v255;
    std::ios_base::getloc(v248);
    long long v40 = std::locale::use_facet(v254, &std::numpunct<char>::id);
    std::string::value_type v41 = ((uint64_t (*)(const std::locale::facet *))v40->__vftable[1].~facet)(v40);
    std::locale::~locale(v254);
    long long v42 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_format[0];
    size_t v43 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_format[0]);
    if (v43 > 0x7FFFFFFFFFFFFFF7) {
      sub_1000A6968();
    }
    std::string::size_type v44 = v43;
    if (v43 >= 0x17)
    {
      uint64_t v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v46 = v43 | 7;
      }
      uint64_t v47 = v46 + 1;
      std::string::size_type v45 = (std::string *)operator new(v46 + 1);
      __dst.__r_.__value_.__l.__size_ = v44;
      __dst.__r_.__value_.__r.__words[2] = v47 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43;
      std::string::size_type v45 = &__dst;
      if (!v43) {
        goto LABEL_73;
      }
    }
    memmove(v45, v42, v44);
LABEL_73:
    v45->__r_.__value_.__s.__data_[v44] = 0;
    std::string::push_back(&__dst, v41);
    if (v259 >= 0) {
      long long v48 = (const std::string::value_type *)&v258;
    }
    else {
      long long v48 = (const std::string::value_type *)v258;
    }
    if (v259 >= 0) {
      std::string::size_type v49 = HIBYTE(v259);
    }
    else {
      std::string::size_type v49 = *((void *)&v258 + 1);
    }
    std::string::append(&__dst, v48, v49);
    size_t v50 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0]);
    char v51 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    std::string::size_type v52 = __dst.__r_.__value_.__l.__size_;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v53 = &__dst;
    }
    else {
      long long v53 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v52 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v54 = &v260;
    }
    else {
      long long v54 = (std::string *)v260.__r_.__value_.__r.__words[0];
    }
    if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v55 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v55 = v260.__r_.__value_.__l.__size_;
    }
    if (v55 && v50)
    {
      v56 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0][v50];
      std::string::size_type v57 = (char *)v53 + v52;
      uint64_t v58 = (std::string *)((char *)v54 + v55);
      std::string::size_type v59 = v55 - 1;
LABEL_95:
      uint64_t v61 = 0;
      do
      {
        if (v54->__r_.__value_.__s.__data_[v61] != boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0][v61])
        {
          v60 = (std::string *)((char *)v54 + v61);
          if (&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0][v61] == v56) {
            goto LABEL_101;
          }
LABEL_94:
          long long v54 = (std::string *)((char *)v54 + 1);
          --v59;
          if (v54 == v58) {
            goto LABEL_103;
          }
          goto LABEL_95;
        }
        uint64_t v62 = v61 + 1;
        if (v59 == v61) {
          break;
        }
        BOOL v63 = v50 - 1 == v61++;
      }
      while (!v63);
      v60 = (std::string *)((char *)v54 + v62);
      if (&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0][v62] != v56) {
        goto LABEL_94;
      }
LABEL_101:
      if (v54 != v60)
      {
        v254[0] = (std::locale)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0];
        v254[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0][v50];
        sub_1001922E4(&v260, (uint64_t *)v254, (char *)v53, v57, v54, v60, (char *)v53, v57);
        char v51 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
    }
LABEL_103:
    if (v51 < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    unsigned __int8 v9 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
    std::string::size_type v28 = v260.__r_.__value_.__l.__size_;
    long long v13 = (std::string *)v260.__r_.__value_.__r.__words[0];
    goto LABEL_106;
  }
  std::string::size_type v7 = *(uint64_t (**)(void))(*(void *)a1 + 40);

  return v7();
}

void sub_10002F5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  sub_1000CDB10((uint64_t)&a28);
  if (*(char *)(v28 - 153) < 0)
  {
    operator delete(*(void **)(v28 - 176));
    if ((*(char *)(v28 - 121) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((*(char *)(v28 - 121) & 0x80000000) == 0)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v28 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_10002F6DC(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, long long *a5)
{
  sub_10002FC84(a3, v14);
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(void *)a1 = off_100458C30;
  sub_10002FA20((void *)(a1 + 8), (uint64_t)v14);
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  sub_10002FCB0((uint64_t)v14);
  *(void *)a1 = off_1004657B0;
  sub_100032E28(a3, (uint64_t)v14);
  sub_10002FD04(a1 + 72, v14, 0.25);
  long long v12 = *a5;
  *(_OWORD *)(a1 + 120) = *a5;
  *(void *)a5 = 0;
  *((void *)a5 + 1) = 0;
  if (a4 == 1)
  {
    *(float *)&long long v12 = sub_1002A4038(a3);
  }
  else if (!a4)
  {
    *(float *)&long long v12 = sub_10009A024(a3);
  }
  *(double *)(a1 + 136) = sqrt(*(float *)&v12 * 0.25);
  return a1;
}

void sub_10002F7F8(_Unwind_Exception *a1)
{
  sub_1000BA884(v2);
  sub_10014D18C(v1);
  _Unwind_Resume(a1);
}

void sub_10002F814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10002F830(_Unwind_Exception *a1)
{
  sub_10014D18C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10002F844(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, void *a5)
{
  sub_10002FC84(a3, v21);
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(void *)a1 = off_100458C30;
  sub_10002FA20((void *)(a1 + 8), (uint64_t)v21);
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  sub_10002FCB0((uint64_t)v21);
  *(void *)a1 = off_100462D20;
  sub_100032E28(a3, (uint64_t)v21);
  sub_10002FD04(a1 + 72, v21, 0.25);
  uint64_t v13 = a1 + 120;
  if (a4 == 1)
  {
    v12.n128_u64[0] = 0.25;
    sub_1002A3B98(a3, v13, v12);
  }
  else if (!a4)
  {
    v12.n128_u64[0] = 0.25;
    sub_10002FC40(a3, v13, v12);
  }
  sub_10002FD50();
  *(void *)(a1 + 184) = v14;
  *(void *)(a1 + 192) = v15;
  sub_10002FD30();
  *(double *)(a1 + 200) = v16;
  *(void *)(a1 + 208) = v17;
  *(void *)(a1 + 224) = *a5;
  uint64_t v18 = a5[1];
  *(void *)(a1 + 232) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  if (a4 == 1)
  {
    float v19 = sub_1002A3F50(a3, 0.25);
    goto LABEL_11;
  }
  if (!a4)
  {
    float v19 = sub_10002FC28(a3, 0.25);
LABEL_11:
    double v16 = v19;
  }
  *(double *)(a1 + 216) = sqrt(v16 * 12.0);
  return a1;
}

void sub_10002F9C0(_Unwind_Exception *a1)
{
  sub_1000BA884(v2);
  sub_10014D18C(v1);
  _Unwind_Resume(a1);
}

void sub_10002F9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10002F9F8(_Unwind_Exception *a1)
{
  sub_10014D18C(v1);
  _Unwind_Resume(a1);
}

void sub_10002FA0C(_Unwind_Exception *a1)
{
  sub_10014D18C(v1);
  _Unwind_Resume(a1);
}

void *sub_10002FA20(void *a1, uint64_t a2)
{
  *a1 = off_10045E730;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[5] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(void *)((char *)a1 + 29) = 0;
  sub_10002FAC0((uint64_t)a1, a2);
  return a1;
}

void sub_10002FA90(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_10002FAAC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10002FAC0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 44);
  if (!(_BYTE)v4) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if (*(unsigned char *)(a2 + 44))
  {
    int v7 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 1u;
    *(_DWORD *)(a1 + 16) = v7;
    int v4 = *(_DWORD *)(a2 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) == 0)
  {
    goto LABEL_6;
  }
  int v8 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 44) |= 2u;
  *(_DWORD *)(a1 + 20) = v8;
  int v4 = *(_DWORD *)(a2 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v9 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 44) |= 4u;
  *(_DWORD *)(a1 + 24) = v9;
  int v4 = *(_DWORD *)(a2 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_16:
    int v11 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v11;
    if ((*(_DWORD *)(a2 + 44) & 0x20) == 0) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
    goto LABEL_10;
  }
LABEL_15:
  int v10 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) |= 8u;
  *(_DWORD *)(a1 + 28) = v10;
  int v4 = *(_DWORD *)(a2 + 44);
  if ((v4 & 0x10) != 0) {
    goto LABEL_16;
  }
LABEL_9:
  if ((v4 & 0x20) != 0)
  {
LABEL_10:
    char v5 = *(unsigned char *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(unsigned char *)(a1 + 36) = v5;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10002FC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10002FC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

float sub_10002FC28(uint64_t a1, double a2)
{
  return *(float *)(*(void *)(a1 + 8) + 44) * a2;
}

uint64_t sub_10002FC40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  char v5 = *(float **)(*(void *)(a1 + 8) + 64);
  if (!v5) {
    char v5 = *(float **)(qword_10047F018 + 64);
  }
  return sub_10002FFE8(a2, a3, (float)(v5[4] + v5[4]), v5[5], v5[6], v5[7]);
}

void *sub_10002FC84@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 160);
  if (!v2) {
    uint64_t v2 = *(void *)(qword_10047F018 + 160);
  }
  return sub_10002FA20(a2, v2);
}

void sub_10002FCB0(uint64_t a1)
{
  *(void *)a1 = off_10045E730;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

double sub_10002FD04(uint64_t a1, long long *a2, double a3)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  double result = sqrt(*(double *)a2 * a3 * 3.0);
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t sub_10002FD64(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(double *)(a1 + 16) = a6;
  *(double *)(a1 + 24) = a2;
  *(void *)(a1 + 56) = 0x7FF8000000000000;
  *(long double *)(a1 + 48) = exp(-(a5 * a2));
  *(double *)(a1 + 32) = sqrt(a2 * a3);
  *(double *)(a1 + 40) = a4 / sqrt(a2);
  if (a6 < 0.0)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)&v12);
  }
  *(double *)(a1 + 56) = a6 * a2;
  return a1;
}

void sub_10002FFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10002FFEC(void *a1, uint64_t a2, void *a3, void **a4)
{
  if (qword_10047BED8 != -1) {
    dispatch_once(&qword_10047BED8, &stru_100462BE8);
  }
  int v8 = qword_10047BEE0;
  if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
    goto LABEL_22;
  }
  uint64_t v9 = qword_10047EE50;
  if (!qword_10047EE50) {
LABEL_10:
  }
    sub_10018E334("map::at:  key not found");
  int v10 = *(_DWORD *)(*a3 + 8);
  while (1)
  {
    while (1)
    {
      int v11 = *(_DWORD *)(v9 + 32);
      if (v10 >= v11) {
        break;
      }
      uint64_t v9 = *(void *)v9;
      if (!v9) {
        goto LABEL_10;
      }
    }
    if (v11 >= v10) {
      break;
    }
    uint64_t v9 = *(void *)(v9 + 8);
    if (!v9) {
      goto LABEL_10;
    }
  }
  __n128 v12 = *(const char **)(v9 + 40);
  size_t v13 = strlen(v12);
  if (v13 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    uint64_t v30 = (void *)v14;
    int64_t v31 = v17 | 0x8000000000000000;
    std::string __dst = p_dst;
  }
  else
  {
    HIBYTE(v31) = v13;
    p_dst = (void **)&__dst;
    if (!v13)
    {
LABEL_19:
      *((unsigned char *)p_dst + v14) = 0;
      uint64_t v18 = (void **)&__dst;
      if (v31 < 0) {
        uint64_t v18 = __dst;
      }
      *(_DWORD *)int buf = 136315394;
      long long v35 = v18;
      __int16 v36 = 2048;
      uint64_t v37 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Creating new particle filter %s at timestamp %lld", buf, 0x16u);
      if (SHIBYTE(v31) < 0)
      {
        operator delete(__dst);
        float v19 = a1 + 47;
        if (a1 + 47 == a4)
        {
LABEL_24:
          uint64_t v21 = *a3;
          uint64_t v20 = a3[1];
          if (v20) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v22 = (std::__shared_weak_count *)a1[46];
          a1[45] = v21;
          a1[46] = v20;
          if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
          uint64_t v23 = a1[1];
          a1[57] = a2;
          for (uint64_t i = a1[2]; i != v23; uint64_t i = sub_1000A0CB0(i - 72))
            ;
          a1[2] = v23;
          uint64_t v25 = a1[4];
          a1[4] = 0;
          if (v25)
          {
            sub_1000A0CB0(v25);
            operator delete();
          }
          uint64_t v26 = a1[35];
          int64_t v27 = operator new(0x20uLL);
          *((void *)v27 + 1) = 0;
          *((void *)v27 + 2) = 0;
          *(void *)int64_t v27 = off_100462448;
          int v32 = sub_100032EE8((double *)v27 + 3, v26);
          int64_t v33 = v27;
          uint64_t v28 = operator new(0xB0uLL);
          v28[1] = 0;
          std::string v28[2] = 0;
          void *v28 = off_100462C68;
          sub_100097354((uint64_t)buf, (uint64_t)(v28 + 3), v19, a1 + 50);
          std::string __dst = (void **)(v28 + 3);
          uint64_t v30 = v28;
          (*(void (**)(void))(*(void *)*a3 + 16))();
          operator new();
        }
LABEL_23:
        sub_100097B00((uint64_t)v19, *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
        goto LABEL_24;
      }
LABEL_22:
      float v19 = a1 + 47;
      if (a1 + 47 == a4) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
  }
  memmove(p_dst, v12, v14);
  goto LABEL_19;
}

void sub_100030E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  *(void *)(v30 + 16) = v31;
  sub_100254C34(&a20);
  uint64_t v34 = a23;
  a23 = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  sub_1000BA884((uint64_t)&a16);
  uint64_t v35 = a26;
  a26 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  sub_1000BA884((uint64_t)&a18);
  uint64_t v36 = *(void *)(v32 + 48);
  *(void *)(v32 + 48) = 0;
  if (v36)
  {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    sub_1000BA884((uint64_t)&a27);
    sub_1000BA884((uint64_t)&a30);
    _Unwind_Resume(a1);
  }
  sub_1000BA884((uint64_t)&a27);
  sub_1000BA884((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_1000312FC(_Unwind_Exception *a1)
{
  long long v4 = *(void **)(v1 + 24);
  if (v4)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v2 - 144));
  if (*(char *)(v2 - 105) < 0) {
    operator delete(*(void **)(v1 + 64));
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_10003138C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8)
{
  unint64_t v9 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v10 = v9 + 1;
  if (v9 + 1 > 0x38E38E38E38E38ELL) {
    sub_1000A9108();
  }
  uint64_t v17 = a2;
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v10) {
    unint64_t v10 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v18 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v18 = v10;
  }
  if (v18)
  {
    if (v18 > 0x38E38E38E38E38ELL) {
      sub_1000A6A10();
    }
    float v19 = (char *)operator new(72 * v18);
    uint64_t v17 = a2;
  }
  else
  {
    float v19 = 0;
  }
  uint64_t v30 = (uint64_t)&v19[72 * v9];
  uint64_t v31 = &v19[72 * v18];
  sub_100031598((uint64_t)(a1 + 2), v30, v17, a3, a4, a5, a6, a7, a8);
  uint64_t v20 = v30;
  uint64_t v21 = v30 + 72;
  uint64_t v23 = (char *)*a1;
  unint64_t v22 = (char *)a1[1];
  if (v22 == (char *)*a1)
  {
    *a1 = v30;
    a1[1] = v21;
    a1[2] = (uint64_t)v31;
  }
  else
  {
    do
    {
      uint64_t v24 = *((void *)v22 - 9);
      v22 -= 72;
      *(void *)unint64_t v22 = 0;
      *(void *)(v20 - 72) = v24;
      v20 -= 72;
      uint64_t v25 = *((void *)v22 + 1);
      *((void *)v22 + 1) = 0;
      *(void *)(v20 + 8) = v25;
      long long v26 = *((_OWORD *)v22 + 1);
      *((void *)v22 + 2) = 0;
      *(_OWORD *)(v20 + 16) = v26;
      *(void *)(v20 + 32) = *((void *)v22 + 4);
      *((void *)v22 + 3) = 0;
      *((void *)v22 + 4) = 0;
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(v22 + 40);
      *((void *)v22 + 5) = 0;
      *((void *)v22 + 6) = 0;
      *(_OWORD *)(v20 + 56) = *(_OWORD *)(v22 + 56);
    }
    while (v22 != v23);
    int64_t v27 = (char *)*a1;
    unint64_t v22 = (char *)a1[1];
    *a1 = v20;
    a1[1] = v21;
    a1[2] = (uint64_t)v31;
    if (v22 != v27)
    {
      do
        unint64_t v22 = (char *)sub_1000A0CB0(v22 - 72);
      while (v22 != v27);
      unint64_t v22 = v27;
    }
  }
  if (v22) {
    operator delete(v22);
  }
  return v30 + 72;
}

void sub_100031584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10025B9D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100031598(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, uint64_t *a9)
{
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v18 = v9;
  uint64_t v16 = *a6;
  if (v16) {
    operator new();
  }
  uint64_t v17 = 0;
  *a6 = 0;
  size_t v13 = (std::__shared_weak_count *)a7[1];
  uint64_t v14 = *a7;
  uint64_t v15 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100031B64(a2, &v18, a4, a5, &v16, &v14, *a8, *a9);
  unint64_t v10 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  int v11 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_100031768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000317C0()
{
  return 1;
}

void sub_1000317C8()
{
}

void sub_1000318A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1003A381C(a10);
  }
  operator delete();
}

uint64_t sub_1000318D8()
{
  return 3;
}

uint64_t sub_1000318E0()
{
  return 5;
}

void sub_1000318E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)&long long v12 = *(void *)a1;
  *((void *)&v12 + 1) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(uint64_t **)(a1 + 24);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  long long v11 = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  sub_100033DFC(a2, &v12, v5, v4, v7, v8, &v11);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  unint64_t v10 = (std::__shared_weak_count *)*((void *)&v12 + 1);
  if (*((void *)&v12 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1000319F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100031A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_100463E60;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  double v5 = sub_100031B50(a3);
  *(long double *)(a1 + 24) = 1.0 - exp(v5 * -0.25);
  double v6 = sub_100031B14(a3);
  *(long double *)(a1 + 32) = 1.0 - exp(v6 * -0.25);
  double v7 = sub_100031AD8(a3);
  *(long double *)(a1 + 40) = 1.0 - exp(v7 * -0.25);
  return a1;
}

void sub_100031AC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_1003A4A40(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_100031AD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 208);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 208);
  }
  return 1.0 / *(double *)(v1 + 24);
}

double sub_100031B14(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 176);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 176);
  }
  return 1.0 / *(double *)(v1 + 56);
}

double sub_100031B50(uint64_t a1)
{
  return 1.0 / *(double *)(*(void *)(a1 + 8) + 112);
}

uint64_t sub_100031B64(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6, int a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v8;
  uint64_t v9 = *a3;
  *a3 = 0;
  *(void *)(result + 8) = v9;
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v12 = *a5;
  uint64_t v11 = a5[1];
  *(void *)(result + 16) = v10;
  *(void *)(result + 24) = v12;
  *(void *)(result + 32) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a6[1];
  *(void *)(result + 40) = *a6;
  *(void *)(result + 48) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 56) = a7;
  *(void *)(result + 64) = a8;
  return result;
}

uint64_t sub_100031BC4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)sub_100033500(a1, a2) = off_100462EC0;
  *(double *)(a1 + 128) = 1.0 / sub_100031D70(*a2, a3);
  *(double *)(a1 + 136) = sub_100031E04(*a2);
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_100462F20);
    double v6 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      return a1;
    }
    goto LABEL_3;
  }
  double v6 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    uint64_t v7 = sub_100031E10(*a2);
    float v8 = sub_100031D70(*a2, a3);
    int v10 = 134217984;
    double v11 = -(log(1.0 - 1.0 / (double)(unint64_t)v7) * v8);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Average injection rate if weight is exactly 50%% off-map: one injected particle every %f seconds", (uint8_t *)&v10, 0xCu);
  }
  return a1;
}

void sub_100031D48(_Unwind_Exception *a1)
{
  sub_10024A8F8(v1);
  _Unwind_Resume(a1);
}

void sub_100031D5C(_Unwind_Exception *a1)
{
  sub_10024A8F8(v1);
  _Unwind_Resume(a1);
}

float sub_100031D70(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 5:
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 72);
      if (!v4) {
        uint64_t v4 = *(void *)(qword_10047F018 + 72);
      }
      return *(float *)(v4 + 24);
    case 3:
      uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 72);
      if (!v5) {
        uint64_t v5 = *(void *)(qword_10047F018 + 72);
      }
      return *(float *)(v5 + 20);
    case 2:
      uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 72);
      if (!v2) {
        uint64_t v2 = *(void *)(qword_10047F018 + 72);
      }
      return *(float *)(v2 + 16);
  }
  return result;
}

double sub_100031E04(uint64_t a1)
{
  return *(double *)(*(void *)(a1 + 8) + 184);
}

uint64_t sub_100031E10(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 24);
}

void sub_100031E20(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = *a4;
  int v9 = *(_DWORD *)(a3 + 8);
  switch(v9)
  {
    case 0:
      operator new();
    case 1:
    case 3:
    case 4:
    case 5:
    case 7:
    case 10:
    case 11:
    case 12:
      sub_1001E3968();
    case 2:
    case 6:
      sub_1000331F0(v4);
      sub_100033204(v4, (uint64_t)v6);
      operator new();
    case 8:
    case 9:
    case 13:
    case 14:
    case 15:
      operator new();
    default:
      __cxa_allocate_exception(0x40uLL);
      sub_1000AE4B0(&v8, "LocalizerType not implemented to generate ParticleGenerator initialization step");
      std::runtime_error::runtime_error(&v5, &v8);
      v5.__vftable = (std::runtime_error_vtbl *)&off_100453860;
      sub_10018E868((uint64_t)v7);
      sub_1000D1698(&v5, (uint64_t)"ParticleGenerator::InitializationSteps newParticleGeneratorImpl(const LocalizerSpec &, const Params &, const Universal2d *)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/particle_generator.cpp", 125, (uint64_t)v7);
  }
}

void sub_100032654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::runtime_error a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  sub_1000D19E0(&a12);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a11);
  if (*(char *)(v25 - 121) < 0)
  {
    operator delete(*(void **)(v25 - 144));
    if ((v24 & 1) == 0)
    {
LABEL_8:
      sub_1000BA884(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  sub_1000BA884(v22);
  _Unwind_Resume(a1);
}

void *sub_100032DDC(void *a1, uint64_t a2)
{
  *a1 = off_100463720;
  sub_100032E28(a2, (uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_100032E28@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(v2 + 56);
  if (!v3)
  {
    uint64_t v10 = *(void *)(qword_10047F018 + 56);
    float v4 = *(float *)(v10 + 16);
    float32x2_t v5 = *(float32x2_t *)(v10 + 20);
    uint64_t v6 = *(void *)(v10 + 28);
    uint64_t v7 = *(void *)(v2 + 72);
    if (v7) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = *(void *)(qword_10047F018 + 72);
    goto LABEL_3;
  }
  float v4 = *(float *)(v3 + 16);
  float32x2_t v5 = *(float32x2_t *)(v3 + 20);
  uint64_t v6 = *(void *)(v3 + 28);
  uint64_t v7 = *(void *)(v2 + 72);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_3:
  int8x16_t v8 = (int8x16_t)vcvtq_f64_f32(v5);
  uint64_t v9 = *(unsigned int *)(v7 + 28);
  *(double *)a2 = v4;
  *(int8x16_t *)(a2 + 8) = vextq_s8(v8, v8, 8uLL);
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v9;
  return result;
}

uint64_t sub_100032EA4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1004636D0;
  sub_100032EE8((double *)(a1 + 8), a2);
  return a1;
}

double *sub_100032EE8(double *a1, uint64_t a2)
{
  *a1 = sub_100032F18(a2);
  return a1;
}

double sub_100032F18(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 8) + 136);
}

void sub_100032F28()
{
}

void sub_10003304C(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (a2) {
    sub_1003A45E4();
  }
  sub_1003A4674((uint64_t *)va);
  operator delete();
}

void sub_10003308C()
{
}

void sub_1000331B0(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (a2) {
    sub_1003A45E4();
  }
  sub_1003A4674((uint64_t *)va);
  operator delete();
}

BOOL sub_1000331F0(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(a1 + 8) + 100) != 0;
}

uint64_t sub_100033204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 72);
  if (!v2) {
    uint64_t v2 = *(void *)(qword_10047F018 + 72);
  }
  return sub_1000332D4(a2, v2);
}

void sub_100033230(uint64_t a1)
{
  *(void *)a1 = off_10045E100;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t sub_100033284(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)a1 = off_1004636F8;
  sub_1000332D4(a1 + 8, a3);
  *(unsigned char *)(a1 + 64) = a2;
  return a1;
}

uint64_t sub_1000332D4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10045E100;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_100033374((_DWORD *)a1, a2);
  return a1;
}

void sub_100033344(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_100033360(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100033374(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 48);
  if (!(_BYTE)v4) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if (*(unsigned char *)(a2 + 48))
  {
    int v7 = *(_DWORD *)(a2 + 16);
    a1[12] |= 1u;
    a1[4] = v7;
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_15;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 2) == 0)
  {
    goto LABEL_6;
  }
  int v8 = *(_DWORD *)(a2 + 20);
  a1[12] |= 2u;
  a1[5] = v8;
  int v4 = *(_DWORD *)(a2 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  int v9 = *(_DWORD *)(a2 + 24);
  a1[12] |= 4u;
  a1[6] = v9;
  int v4 = *(_DWORD *)(a2 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v10 = *(_DWORD *)(a2 + 28);
  a1[12] |= 8u;
  a1[7] = v10;
  int v4 = *(_DWORD *)(a2 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_18:
    int v12 = *(_DWORD *)(a2 + 36);
    a1[12] |= 0x20u;
    a1[9] = v12;
    if ((*(_DWORD *)(a2 + 48) & 0x40) == 0) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
    goto LABEL_11;
  }
LABEL_17:
  int v11 = *(_DWORD *)(a2 + 32);
  a1[12] |= 0x10u;
  a1[8] = v11;
  int v4 = *(_DWORD *)(a2 + 48);
  if ((v4 & 0x20) != 0) {
    goto LABEL_18;
  }
LABEL_10:
  if ((v4 & 0x40) != 0)
  {
LABEL_11:
    int v5 = *(_DWORD *)(a2 + 40);
    a1[12] |= 0x40u;
    a1[10] = v5;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1000334D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000334E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100033500(uint64_t a1, uint64_t *a2)
{
  sub_10003359C(a1);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v5;
  *(void *)(a1 + 104) = v4;
  if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t sub_10003359C(uint64_t a1)
{
  sub_100033734((uint64_t)&v3, 1.0);
  *(void *)a1 = off_100462878;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_100033728((__n128 *)(a1 + 32), &v3);
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  sub_100033718(a1 + 120);
  *(unsigned char *)(a1 + 120) = 0;
  return a1;
}

void sub_100033640(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 104);
  if (v4) {
    sub_1003A37A8(v4);
  }
  if (*(unsigned char *)(v1 + 64))
  {
    *(unsigned char *)(v1 + 64) = 0;
    if (!*(unsigned char *)(v1 + 48))
    {
LABEL_5:
      uint64_t v5 = (char *)*v2;
      if (!*v2) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if (!*(unsigned char *)(v1 + 48))
  {
    goto LABEL_5;
  }
  *(unsigned char *)(v1 + 48) = 0;
  uint64_t v5 = (char *)*v2;
  if (!*v2) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  uint64_t v6 = *(char **)(v1 + 16);
  int v7 = v5;
  if (v6 != v5)
  {
    do
    {
      int v8 = (std::__shared_weak_count *)*((void *)v6 - 2);
      if (v8)
      {
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 80;
    }
    while (v6 != v5);
    int v7 = *v2;
  }
  *(void *)(v1 + 16) = v5;
  operator delete(v7);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100033718(uint64_t result)
{
  *(unsigned char *)float result = 1;
  *(_DWORD *)(result + 4) = 0;
  return result;
}

__n128 sub_100033728(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100033734(uint64_t a1, long double a2)
{
  *(long double *)a1 = log(a2);
  *(void *)(a1 + 8) = 0;
  return a1;
}

void *sub_100033764(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  *a1 = off_1004637F0;
  a1[1] = 0;
  int v8 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  int v9 = (char *)operator new(0x18uLL);
  a1[1] = v9;
  a1[2] = v9;
  a1[3] = v9 + 24;
  uint64_t v10 = *a2;
  *a2 = 0;
  uint64_t v11 = *a3;
  *a3 = 0;
  uint64_t v18 = v11;
  v19[0] = v10;
  uint64_t v12 = *a4;
  *a4 = 0;
  uint64_t v17 = v12;
  sub_100033AA4(v8, v19, &v18, &v17);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = v18;
  uint64_t v18 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = v19[0];
  v19[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  return a1;
}

void sub_1000338AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *a13)
{
  if (a10) {
    sub_1003A45E4();
  }
  sub_1003A4784(&a11, &a12);
  uint64_t v14 = a13;
  sub_1001E460C(v13);
  _Unwind_Resume(v14);
}

void sub_1000338F0(_Unwind_Exception *a1)
{
  sub_1001E460C(v1);
  _Unwind_Resume(a1);
}

void *sub_100033904(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  *a1 = off_1004637F0;
  a1[1] = 0;
  int v8 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  int v9 = (char *)operator new(0x18uLL);
  a1[1] = v9;
  a1[2] = v9;
  a1[3] = v9 + 24;
  uint64_t v10 = *a2;
  *a2 = 0;
  uint64_t v11 = *a3;
  *a3 = 0;
  uint64_t v18 = v11;
  v19[0] = v10;
  uint64_t v12 = *a4;
  *a4 = 0;
  uint64_t v17 = v12;
  sub_100033C50(v8, v19, &v18, &v17);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = v18;
  uint64_t v18 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = v19[0];
  v19[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  return a1;
}

void sub_100033A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *a13)
{
  if (a10) {
    sub_1003A45E4();
  }
  sub_1003A4784(&a11, &a12);
  uint64_t v14 = a13;
  sub_1001E460C(v13);
  _Unwind_Resume(v14);
}

void sub_100033A90(_Unwind_Exception *a1)
{
  sub_1001E460C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100033AA4(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  int v7 = (uint64_t *)a1[1];
  if ((unint64_t)v7 >= a1[2])
  {
    int v9 = sub_1001E469C(a1, a2);
  }
  else
  {
    uint64_t v8 = *a2;
    *a2 = 0;
    uint64_t *v7 = v8;
    int v9 = v7 + 1;
  }
  a1[1] = v9;
  uint64_t v10 = *a3;
  *a3 = 0;
  uint64_t v17 = v10;
  uint64_t v11 = *a4;
  *a4 = 0;
  uint64_t v12 = (uint64_t *)a1[1];
  if ((unint64_t)v12 >= a1[2])
  {
    uint64_t v13 = sub_1001E469C(a1, &v17);
  }
  else
  {
    uint64_t v17 = 0;
    *uint64_t v12 = v10;
    uint64_t v13 = v12 + 1;
  }
  a1[1] = v13;
  uint64_t v18 = v11;
  if ((unint64_t)v13 >= a1[2])
  {
    uint64_t v14 = sub_1001E469C(a1, &v18);
    uint64_t v15 = v18;
    a1[1] = v14;
    uint64_t v18 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  else
  {
    void *v13 = v11;
    a1[1] = v13 + 1;
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_100033BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100033C50(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  int v7 = (uint64_t *)a1[1];
  if ((unint64_t)v7 >= a1[2])
  {
    int v9 = sub_1001E469C(a1, a2);
  }
  else
  {
    uint64_t v8 = *a2;
    *a2 = 0;
    uint64_t *v7 = v8;
    int v9 = v7 + 1;
  }
  a1[1] = v9;
  uint64_t v10 = *a3;
  *a3 = 0;
  uint64_t v17 = v10;
  uint64_t v11 = *a4;
  *a4 = 0;
  uint64_t v12 = (uint64_t *)a1[1];
  if ((unint64_t)v12 >= a1[2])
  {
    uint64_t v13 = sub_1001E469C(a1, &v17);
  }
  else
  {
    uint64_t v17 = 0;
    *uint64_t v12 = v10;
    uint64_t v13 = v12 + 1;
  }
  a1[1] = v13;
  uint64_t v18 = v11;
  if ((unint64_t)v13 >= a1[2])
  {
    uint64_t v14 = sub_1001E469C(a1, &v18);
    uint64_t v15 = v18;
    a1[1] = v14;
    uint64_t v18 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  else
  {
    void *v13 = v11;
    a1[1] = v13 + 1;
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_100033D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_100033DFC(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7)
{
  long long v7 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v10 = *a7;
  long long v11 = v7;
  *(void *)a7 = 0;
  *((void *)a7 + 1) = 0;
  (*(void (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, &v11, a3, a4, a5, a6, &v10);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  int v9 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_100033F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100033F1C()
{
}

void sub_100033F6C()
{
}

void sub_1000340A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1000340DC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  uint64_t v3 = *v2;
  uint64_t v4 = sub_100086D98(*v2, v2[1]);
  uint64_t v6 = v5;
  if ((v5 & 1) == 0) {
    sub_10008BEAC(v3, v2[1]);
  }
  uint64_t v7 = *v1;
  if (!v7) {
    sub_1000AD034(3u);
  }
  std::mutex::lock((std::mutex *)(v7 + 24));
  if ((*(unsigned char *)(v7 + 136) & 1) != 0
    || (v9.__ptr_ = 0, uint64_t v8 = *(void *)(v7 + 16), std::exception_ptr::~exception_ptr(&v9), v8))
  {
    sub_1000AD034(2u);
  }
  *(void *)(v7 + 144) = v4;
  *(void *)(v7 + 152) = v6;
  *(_DWORD *)(v7 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v7 + 88));
  std::mutex::unlock((std::mutex *)(v7 + 24));
}

void sub_1000341A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::mutex::unlock(v19);
  __cxa_begin_catch(a1);
  uint64_t v21 = *(std::__assoc_sub_state ***)(v18 + 32);
  std::current_exception();
  uint64_t v22 = *v21;
  if (!v22) {
    sub_1000AD034(3u);
  }
  std::exception_ptr::exception_ptr(v25, &v24);
  v23.__ptr_ = v25;
  std::__assoc_sub_state::set_exception(v22, v23);
  std::exception_ptr::~exception_ptr(v25);
  std::exception_ptr::~exception_ptr(&v24);
  __cxa_end_catch();
}

void sub_100034228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_100034324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100034340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100034350(void *a1@<X0>, char *a2@<X8>)
{
  unint64_t v8 = 0;
  id v5 = [a1 decodeBytesForKey:@"locationPrivateInfo" returnedLength:&v8];
  if (v8 >= 0x230) {
    size_t v6 = 560;
  }
  else {
    size_t v6 = v8;
  }
  if (v8 <= 0x230) {
    size_t v7 = 560 - v8;
  }
  else {
    size_t v7 = 0;
  }
  memcpy(a2, v5, v6);
  bzero(&a2[v6], v7);
}

id sub_1000343E4(void *a1)
{
  id v3 = [a1 decodeIntegerForKey:@"gpsExpiryInfo"];
  return v3;
}

void sub_10003442C(void *a1@<X0>, char *a2@<X8>)
{
  unint64_t v8 = 0;
  id v5 = [a1 decodeBytesForKey:@"locationInfo" returnedLength:&v8];
  if (v8 >= 0x9C) {
    size_t v6 = 156;
  }
  else {
    size_t v6 = v8;
  }
  if (v8 <= 0x9C) {
    size_t v7 = 156 - v8;
  }
  else {
    size_t v7 = 0;
  }
  memcpy(a2, v5, v6);
  bzero(&a2[v6], v7);
}

void sub_1000344C0(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = *v2;
  uint64_t v4 = sub_10007FC9C(*v2, v2[1]);
  sub_10007DE30(*(sqlite3 ***)(v3 + 40), "tile_data", "tiles", (sqlite3_int64)v4, 1, &v7);
  sub_100034698(v3 + 56, (char **)v2[1], &v7);
  int v5 = sqlite3_blob_close(v7);
  if (v5)
  {
    if (qword_10047BF08 != -1)
    {
      dispatch_once(&qword_10047BF08, &stru_100460658);
      size_t v6 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    size_t v6 = qword_10047BF10;
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      *(_DWORD *)int buf = 67240192;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", buf, 8u);
    }
  }
LABEL_5:
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 40));
}

void sub_10003460C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000A6954(exception_object);
}

void sub_100034624(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, sqlite3_blob *a10)
{
  if (a2)
  {
    int v12 = sqlite3_blob_close(a10);
    sub_1003A513C(v12);
    __cxa_begin_catch(a1);
    uint64_t v13 = *(std::promise<void> **)(v10 + 40);
    std::current_exception();
    v14.__ptr_ = &a9;
    std::promise<void>::set_exception(v13, v14);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x1000345ACLL);
  }
  JUMPOUT(0x100034614);
}

void sub_10003467C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void sub_100034698(uint64_t a1, char **a2, sqlite3_blob **a3)
{
  if (qword_10047BF08 == -1)
  {
    size_t v6 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_10047BF08, &stru_100465808);
  size_t v6 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_DWORD *)int buf = 136315138;
    uint64_t v16 = sub_1000900B8(a2);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "building offset map and inserting into map, locationId=%s", buf, 0xCu);
  }
LABEL_4:
  sub_10007E298((uint64_t)v11, *a3);
  uint64_t v7 = v12;
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)buf, (wireless_diagnostics::google::protobuf::io::CopyingInputStream *)v11, -1);
  sub_100063824((uint64_t)buf, v7, (uint64_t)v10);
  if (qword_10047BF08 == -1)
  {
    unint64_t v8 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  dispatch_once(&qword_10047BF08, &stru_100465808);
  unint64_t v8 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG))
  {
LABEL_6:
    int v9 = sub_1000900B8(a2);
    *(_DWORD *)uint64_t v13 = 136315138;
    std::exception_ptr v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "inserting offset map, locationId=%s", v13, 0xCu);
  }
LABEL_7:
  sub_1000348DC(a1, (uint64_t ***)a2, a2, (uint64_t)v10);
  if (v10[5]) {
    operator delete(v10[3]);
  }
  if (v10[2]) {
    operator delete(v10[0]);
  }
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)buf);
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)v11);
}

void sub_100034894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  sub_1002FBA58((uint64_t)va);
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)va2);
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)va1);
  _Unwind_Resume(a1);
}

void sub_1000348C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)va);
  _Unwind_Resume(a1);
}

char *sub_1000348DC(uint64_t a1, uint64_t ***a2, void *a3, uint64_t a4)
{
  unint64_t v9 = sub_100077F68((uint64_t)v35, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(char ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = *((void *)v14 + 1);
            if (v16 == v10)
            {
              if (sub_1000706F4((const void ***)v14 + 2, (unsigned __int8 ***)a2)) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v14 = *(char **)v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v10)
          {
            if (sub_1000706F4((const void ***)v14 + 2, (unsigned __int8 ***)a2)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t v18 = (char *)operator new(0x50uLL);
  uint64_t v14 = v18;
  v35[0] = v18;
  v35[1] = a1 + 16;
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  uint64_t v19 = a3[1];
  *((void *)v18 + 2) = *a3;
  *((void *)v18 + 3) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 4) = *(void *)a4;
  *(_OWORD *)(v18 + 40) = *(_OWORD *)(a4 + 8);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *((void *)v18 + 7) = *(void *)(a4 + 24);
  *((_OWORD *)v18 + 4) = *(_OWORD *)(a4 + 32);
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  char v36 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    std::exception_ptr v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_28:
      *(void *)uint64_t v14 = *v23;
LABEL_63:
      *std::exception_ptr v23 = v14;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v28) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v28)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < *(void *)&v28) {
LABEL_39:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v22 = *(void *)a1;
        std::exception_ptr v23 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v23) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v22 = *(void *)a1;
        std::exception_ptr v23 = *(void **)(*(void *)a1 + 8 * v10);
        if (v23) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v22 = *(void *)a1;
      std::exception_ptr v23 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v23) {
        goto LABEL_28;
      }
    }
  }
  *(void *)uint64_t v14 = *v17;
  *uint64_t v17 = v14;
  *(void *)(v22 + 8 * v4) = v17;
  if (*(void *)v14)
  {
    unint64_t v33 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    std::exception_ptr v23 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_100034C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002FBEA8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100034C64(uint64_t a1, void *a2, unsigned int a3)
{
  int v5 = *(_DWORD *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 20);
  if ((int)(v4 + a3) <= v5) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = (v5 - v4);
  }
  int v7 = sqlite3_blob_read(*(sqlite3_blob **)(a1 + 8), a2, v6, v4);
  if (!v7)
  {
    *(_DWORD *)(a1 + 20) += v6;
    return v6;
  }
  int v8 = v7;
  if (qword_10047BF08 != -1)
  {
    dispatch_once(&qword_10047BF08, &stru_100463FC8);
    unint64_t v9 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_7;
  }
  unint64_t v9 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
  {
LABEL_7:
    int v10 = *(_DWORD *)(a1 + 20);
    v12[0] = 67109632;
    v12[1] = v6;
    __int16 v13 = 1024;
    int v14 = v10;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed to read blob of size %d at offset %d: %d", (uint8_t *)v12, 0x14u);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100034DB8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16);
  int v7 = (unsigned int *)(a1 + 56);
  uint64_t v77 = (unsigned int *)(a1 + 80);
  uint64_t v78 = (unsigned int *)(a1 + 64);
  uint64_t v75 = (unsigned int *)(a1 + 60);
  size_t v76 = (unsigned int *)(a1 + 88);
  v74 = (unsigned int *)(a1 + 68);
  int v8 = (unsigned int *)(a1 + 84);
  unint64_t v9 = (unsigned int *)(a1 + 72);
  int v10 = (unsigned int *)(a1 + 76);
  unsigned int v11 = a1 + 8;
  while (1)
  {
    while (1)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            do
            {
              while (1)
              {
                while (1)
                {
                  do
                  {
                    while (1)
                    {
                      while (1)
                      {
                        do
                        {
                          while (1)
                          {
                            while (1)
                            {
                              while (1)
                              {
LABEL_2:
                                uint8x8_t v12 = (char *)*((void *)this + 1);
                                if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
                                {
                                  unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
                                  *((_DWORD *)this + 8) = TagFallback;
                                  if (!TagFallback) {
                                    return 1;
                                  }
                                }
                                else
                                {
                                  unint64_t TagFallback = *v12;
                                  *((_DWORD *)this + 8) = TagFallback;
                                  *((void *)this + 1) = v12 + 1;
                                  if (!TagFallback) {
                                    return 1;
                                  }
                                }
                                switch(TagFallback >> 3)
                                {
                                  case 1u:
                                    int v14 = TagFallback & 7;
                                    if (v14 != 2) {
                                      goto LABEL_89;
                                    }
                                    int v15 = *(_DWORD *)(a1 + 28);
                                    uint64_t v16 = *(int *)(a1 + 24);
                                    if ((int)v16 >= v15) {
                                      goto LABEL_11;
                                    }
                                    break;
                                  case 0x10u:
                                    int v14 = TagFallback & 7;
                                    if (v14 != 2) {
                                      goto LABEL_89;
                                    }
                                    *(_DWORD *)(a1 + 112) |= 2u;
                                    uint64_t v30 = *(void *)(a1 + 40);
                                    if (!v30) {
                                      goto LABEL_30;
                                    }
                                    goto LABEL_31;
                                  case 0x11u:
                                    int v14 = TagFallback & 7;
                                    if (v14 != 1) {
                                      goto LABEL_89;
                                    }
                                    *(void *)int64_t v79 = 0;
                                    if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v79))goto LABEL_36; {
                                    return 0;
                                    }
                                  case 0x12u:
                                    int v14 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0) {
                                      goto LABEL_89;
                                    }
                                    uint64_t v34 = (unsigned __int8 *)*((void *)this + 1);
                                    unint64_t v32 = *((void *)this + 2);
                                    goto LABEL_42;
                                  case 0x13u:
                                    int v14 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0) {
                                      goto LABEL_89;
                                    }
                                    char v36 = (unsigned __int8 *)*((void *)this + 1);
                                    unint64_t v32 = *((void *)this + 2);
                                    if ((unint64_t)v36 >= v32) {
                                      goto LABEL_121;
                                    }
                                    goto LABEL_118;
                                  case 0x14u:
                                    int v14 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0) {
                                      goto LABEL_89;
                                    }
                                    uint64_t v37 = (unsigned __int8 *)*((void *)this + 1);
                                    unint64_t v32 = *((void *)this + 2);
                                    if ((unint64_t)v37 >= v32) {
                                      goto LABEL_129;
                                    }
                                    goto LABEL_126;
                                  case 0x15u:
                                    int v14 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0) {
                                      goto LABEL_89;
                                    }
                                    uint64_t v38 = (unsigned __int8 *)*((void *)this + 1);
                                    unint64_t v32 = *((void *)this + 2);
                                    if ((unint64_t)v38 >= v32) {
                                      goto LABEL_137;
                                    }
                                    goto LABEL_134;
                                  case 0x16u:
                                    int v14 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0) {
                                      goto LABEL_89;
                                    }
                                    uint64_t v39 = (unsigned __int8 *)*((void *)this + 1);
                                    unint64_t v32 = *((void *)this + 2);
                                    if ((unint64_t)v39 >= v32) {
                                      goto LABEL_145;
                                    }
                                    goto LABEL_142;
                                  case 0x17u:
                                    int v14 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0) {
                                      goto LABEL_89;
                                    }
                                    long long v40 = (unsigned __int8 *)*((void *)this + 1);
                                    unint64_t v32 = *((void *)this + 2);
                                    if ((unint64_t)v40 >= v32) {
                                      goto LABEL_153;
                                    }
                                    goto LABEL_150;
                                  case 0x18u:
                                    int v14 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0) {
                                      goto LABEL_89;
                                    }
                                    std::string::value_type v41 = (unsigned __int8 *)*((void *)this + 1);
                                    unint64_t v32 = *((void *)this + 2);
                                    if ((unint64_t)v41 >= v32) {
                                      goto LABEL_161;
                                    }
                                    goto LABEL_158;
                                  case 0x19u:
                                    int v14 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0) {
                                      goto LABEL_89;
                                    }
                                    long long v42 = (unsigned __int8 *)*((void *)this + 1);
                                    unint64_t v32 = *((void *)this + 2);
                                    if ((unint64_t)v42 >= v32) {
                                      goto LABEL_169;
                                    }
                                    goto LABEL_166;
                                  case 0x1Au:
                                    int v14 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0) {
                                      goto LABEL_89;
                                    }
                                    size_t v43 = (unsigned __int8 *)*((void *)this + 1);
                                    unint64_t v32 = *((void *)this + 2);
                                    if ((unint64_t)v43 >= v32) {
                                      goto LABEL_177;
                                    }
                                    goto LABEL_174;
                                  case 0x1Bu:
                                    int v14 = TagFallback & 7;
                                    if (v14 != 5) {
                                      goto LABEL_89;
                                    }
                                    v79[0] = 0;
                                    if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v79))goto LABEL_72; {
                                    return 0;
                                    }
                                  case 0x1Cu:
                                    int v14 = TagFallback & 7;
                                    if (v14 == 5) {
                                      goto LABEL_77;
                                    }
                                    goto LABEL_89;
                                  case 0x1Du:
                                    int v14 = TagFallback & 7;
                                    if (v14 != 2) {
                                      goto LABEL_89;
                                    }
                                    *(_DWORD *)(a1 + 112) |= 0x4000u;
                                    uint64_t v47 = *(unsigned int **)(a1 + 96);
                                    if (!v47) {
                                      goto LABEL_85;
                                    }
                                    goto LABEL_86;
                                  default:
                                    int v14 = TagFallback & 7;
LABEL_89:
                                    if (v14 == 4) {
                                      return 1;
                                    }
                                    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v11, a4) & 1) == 0)return 0; {
                                    continue;
                                    }
                                }
                                while (1)
                                {
                                  uint64_t v17 = *(void *)(a1 + 16);
                                  *(_DWORD *)(a1 + 24) = v16 + 1;
                                  uint64_t v18 = *(void *)(v17 + 8 * v16);
                                  v79[0] = 0;
                                  uint64_t v19 = (char *)*((void *)this + 1);
                                  if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
                                  {
                                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v79))return 0; {
                                  }
                                    }
                                  else
                                  {
                                    v79[0] = *v19;
                                    *((void *)this + 1) = v19 + 1;
                                  }
                                  int v20 = *((_DWORD *)this + 14);
                                  int v21 = *((_DWORD *)this + 15);
                                  *((_DWORD *)this + 14) = v20 + 1;
                                  if (v20 >= v21) {
                                    return 0;
                                  }
                                  int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79[0]);
                                  if (!sub_100069A44(v18, this, v23, v24) || !*((unsigned char *)this + 36)) {
                                    return 0;
                                  }
                                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
                                  int v25 = *((_DWORD *)this + 14);
                                  BOOL v26 = __OFSUB__(v25, 1);
                                  int v27 = v25 - 1;
                                  if (v27 < 0 == v26) {
                                    *((_DWORD *)this + 14) = v27;
                                  }
                                  int8x8_t v28 = (unsigned __int8 *)*((void *)this + 1);
                                  unint64_t v29 = *((void *)this + 2);
                                  if ((unint64_t)v28 >= v29 || *v28 != 10) {
                                    break;
                                  }
                                  *((void *)this + 1) = v28 + 1;
                                  int v15 = *(_DWORD *)(a1 + 28);
                                  uint64_t v16 = *(int *)(a1 + 24);
                                  if ((int)v16 >= v15)
                                  {
LABEL_11:
                                    if (v15 == *(_DWORD *)(a1 + 32))
                                    {
                                      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v15 + 1);
                                      int v15 = *(_DWORD *)(a1 + 28);
                                    }
                                    *(_DWORD *)(a1 + 28) = v15 + 1;
                                    operator new();
                                  }
                                }
                                if ((int)v29 - (int)v28 >= 2 && *v28 == 130 && v28[1] == 1)
                                {
                                  *((void *)this + 1) = v28 + 2;
                                  *(_DWORD *)(a1 + 112) |= 2u;
                                  uint64_t v30 = *(void *)(a1 + 40);
                                  if (!v30) {
LABEL_30:
                                  }
                                    operator new();
LABEL_31:
                                  v79[0] = 0;
                                  uint64_t v31 = (char *)*((void *)this + 1);
                                  if ((unint64_t)v31 >= *((void *)this + 2) || *v31 < 0)
                                  {
                                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v79))return 0; {
                                  }
                                    }
                                  else
                                  {
                                    v79[0] = *v31;
                                    *((void *)this + 1) = v31 + 1;
                                  }
                                  int v56 = *((_DWORD *)this + 14);
                                  int v57 = *((_DWORD *)this + 15);
                                  *((_DWORD *)this + 14) = v56 + 1;
                                  if (v56 >= v57) {
                                    return 0;
                                  }
                                  int v58 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79[0]);
                                  if (!sub_100035A70(v30, this, v59, v60) || !*((unsigned char *)this + 36)) {
                                    return 0;
                                  }
                                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v58);
                                  int v61 = *((_DWORD *)this + 14);
                                  BOOL v26 = __OFSUB__(v61, 1);
                                  int v62 = v61 - 1;
                                  if (v62 < 0 == v26) {
                                    *((_DWORD *)this + 14) = v62;
                                  }
                                  BOOL v63 = (unsigned __int8 *)*((void *)this + 1);
                                  if (*((_DWORD *)this + 4) - (int)v63 > 1 && *v63 == 137 && v63[1] == 1)
                                  {
                                    *((void *)this + 1) = v63 + 2;
                                    *(void *)int64_t v79 = 0;
                                    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v79) & 1) == 0)return 0; {
LABEL_36:
                                    }
                                    *(void *)(a1 + 48) = *(void *)v79;
                                    *(_DWORD *)(a1 + 112) |= 4u;
                                    unint64_t v33 = (unsigned __int8 *)*((void *)this + 1);
                                    unint64_t v32 = *((void *)this + 2);
                                    if ((int)v32 - (int)v33 >= 2 && *v33 == 144 && v33[1] == 1) {
                                      break;
                                    }
                                  }
                                }
                              }
                              uint64_t v34 = v33 + 2;
                              *((void *)this + 1) = v34;
LABEL_42:
                              if ((unint64_t)v34 < v32 && ((char)*v34 & 0x80000000) == 0) {
                                break;
                              }
                              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
                              if (!result) {
                                return result;
                              }
                              uint64_t v35 = (unsigned __int8 *)*((void *)this + 1);
                              unint64_t v32 = *((void *)this + 2);
                              *(_DWORD *)(a1 + 112) |= 8u;
                              if ((int)v32 - (int)v35 >= 2) {
                                goto LABEL_115;
                              }
                            }
                            unsigned int *v7 = *v34;
                            uint64_t v35 = v34 + 1;
                            *((void *)this + 1) = v35;
                            *(_DWORD *)(a1 + 112) |= 8u;
                            if ((int)v32 - (int)v35 < 2) {
                              goto LABEL_2;
                            }
LABEL_115:
                            if (*v35 == 152 && v35[1] == 1)
                            {
                              char v36 = v35 + 2;
                              *((void *)this + 1) = v36;
                              if ((unint64_t)v36 < v32)
                              {
LABEL_118:
                                if (((char)*v36 & 0x80000000) == 0)
                                {
                                  *uint64_t v78 = *v36;
                                  int64_t v65 = v36 + 1;
                                  *((void *)this + 1) = v65;
                                  *(_DWORD *)(a1 + 112) |= 0x20u;
                                  if ((int)v32 - (int)v65 < 2) {
                                    goto LABEL_2;
                                  }
                                  break;
                                }
                              }
LABEL_121:
                              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v78);
                              if (!result) {
                                return result;
                              }
                              int64_t v65 = (unsigned __int8 *)*((void *)this + 1);
                              unint64_t v32 = *((void *)this + 2);
                              *(_DWORD *)(a1 + 112) |= 0x20u;
                              if ((int)v32 - (int)v65 >= 2) {
                                break;
                              }
                            }
                          }
                        }
                        while (*v65 != 160 || v65[1] != 1);
                        uint64_t v37 = v65 + 2;
                        *((void *)this + 1) = v37;
                        if ((unint64_t)v37 < v32) {
                          break;
                        }
LABEL_129:
                        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v77);
                        if (!result) {
                          return result;
                        }
                        long long v66 = (unsigned __int8 *)*((void *)this + 1);
                        unint64_t v32 = *((void *)this + 2);
                        *(_DWORD *)(a1 + 112) |= 0x200u;
                        if ((int)v32 - (int)v66 >= 2) {
                          goto LABEL_131;
                        }
                      }
LABEL_126:
                      if ((char)*v37 < 0) {
                        goto LABEL_129;
                      }
                      unsigned int *v77 = *v37;
                      long long v66 = v37 + 1;
                      *((void *)this + 1) = v66;
                      *(_DWORD *)(a1 + 112) |= 0x200u;
                      if ((int)v32 - (int)v66 < 2) {
                        goto LABEL_2;
                      }
LABEL_131:
                      if (*v66 == 168 && v66[1] == 1)
                      {
                        uint64_t v38 = v66 + 2;
                        *((void *)this + 1) = v38;
                        if ((unint64_t)v38 < v32)
                        {
LABEL_134:
                          if (((char)*v38 & 0x80000000) == 0)
                          {
                            unsigned int *v76 = *v38;
                            int64_t v67 = v38 + 1;
                            *((void *)this + 1) = v67;
                            *(_DWORD *)(a1 + 112) |= 0x800u;
                            if ((int)v32 - (int)v67 < 2) {
                              goto LABEL_2;
                            }
                            break;
                          }
                        }
LABEL_137:
                        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v76);
                        if (!result) {
                          return result;
                        }
                        int64_t v67 = (unsigned __int8 *)*((void *)this + 1);
                        unint64_t v32 = *((void *)this + 2);
                        *(_DWORD *)(a1 + 112) |= 0x800u;
                        if ((int)v32 - (int)v67 >= 2) {
                          break;
                        }
                      }
                    }
                  }
                  while (*v67 != 176 || v67[1] != 1);
                  uint64_t v39 = v67 + 2;
                  *((void *)this + 1) = v39;
                  if ((unint64_t)v39 < v32) {
                    break;
                  }
LABEL_145:
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v75);
                  if (!result) {
                    return result;
                  }
                  int64_t v68 = (unsigned __int8 *)*((void *)this + 1);
                  unint64_t v32 = *((void *)this + 2);
                  *(_DWORD *)(a1 + 112) |= 0x10u;
                  if ((int)v32 - (int)v68 >= 2) {
                    goto LABEL_147;
                  }
                }
LABEL_142:
                if ((char)*v39 < 0) {
                  goto LABEL_145;
                }
                *uint64_t v75 = *v39;
                int64_t v68 = v39 + 1;
                *((void *)this + 1) = v68;
                *(_DWORD *)(a1 + 112) |= 0x10u;
                if ((int)v32 - (int)v68 < 2) {
                  goto LABEL_2;
                }
LABEL_147:
                if (*v68 == 184 && v68[1] == 1)
                {
                  long long v40 = v68 + 2;
                  *((void *)this + 1) = v40;
                  if ((unint64_t)v40 < v32)
                  {
LABEL_150:
                    if (((char)*v40 & 0x80000000) == 0)
                    {
                      unsigned int *v74 = *v40;
                      long long v69 = v40 + 1;
                      *((void *)this + 1) = v69;
                      *(_DWORD *)(a1 + 112) |= 0x40u;
                      if ((int)v32 - (int)v69 < 2) {
                        goto LABEL_2;
                      }
                      break;
                    }
                  }
LABEL_153:
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v74);
                  if (!result) {
                    return result;
                  }
                  long long v69 = (unsigned __int8 *)*((void *)this + 1);
                  unint64_t v32 = *((void *)this + 2);
                  *(_DWORD *)(a1 + 112) |= 0x40u;
                  if ((int)v32 - (int)v69 >= 2) {
                    break;
                  }
                }
              }
            }
            while (*v69 != 192 || v69[1] != 1);
            std::string::value_type v41 = v69 + 2;
            *((void *)this + 1) = v41;
            if ((unint64_t)v41 < v32) {
              break;
            }
LABEL_161:
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
            if (!result) {
              return result;
            }
            int v70 = (unsigned __int8 *)*((void *)this + 1);
            unint64_t v32 = *((void *)this + 2);
            *(_DWORD *)(a1 + 112) |= 0x400u;
            if ((int)v32 - (int)v70 >= 2) {
              goto LABEL_163;
            }
          }
LABEL_158:
          if ((char)*v41 < 0) {
            goto LABEL_161;
          }
          unsigned int *v8 = *v41;
          int v70 = v41 + 1;
          *((void *)this + 1) = v70;
          *(_DWORD *)(a1 + 112) |= 0x400u;
          if ((int)v32 - (int)v70 < 2) {
            goto LABEL_2;
          }
LABEL_163:
          if (*v70 == 200 && v70[1] == 1)
          {
            long long v42 = v70 + 2;
            *((void *)this + 1) = v42;
            if ((unint64_t)v42 < v32)
            {
LABEL_166:
              if (((char)*v42 & 0x80000000) == 0)
              {
                unsigned int *v9 = *v42;
                int64_t v71 = v42 + 1;
                *((void *)this + 1) = v71;
                *(_DWORD *)(a1 + 112) |= 0x80u;
                if ((int)v32 - (int)v71 < 2) {
                  goto LABEL_2;
                }
                break;
              }
            }
LABEL_169:
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
            if (!result) {
              return result;
            }
            int64_t v71 = (unsigned __int8 *)*((void *)this + 1);
            unint64_t v32 = *((void *)this + 2);
            *(_DWORD *)(a1 + 112) |= 0x80u;
            if ((int)v32 - (int)v71 >= 2) {
              break;
            }
          }
        }
      }
      while (*v71 != 208 || v71[1] != 1);
      size_t v43 = v71 + 2;
      *((void *)this + 1) = v43;
      if ((unint64_t)v43 < v32) {
        break;
      }
LABEL_177:
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
      if (!result) {
        return result;
      }
      uint64_t v72 = (unsigned __int8 *)*((void *)this + 1);
      uint64_t v73 = *((void *)this + 2);
      *(_DWORD *)(a1 + 112) |= 0x100u;
      if ((int)v73 - (int)v72 >= 2) {
        goto LABEL_179;
      }
    }
LABEL_174:
    if ((char)*v43 < 0) {
      goto LABEL_177;
    }
    unsigned int *v10 = *v43;
    uint64_t v72 = v43 + 1;
    *((void *)this + 1) = v72;
    *(_DWORD *)(a1 + 112) |= 0x100u;
    if ((int)v32 - (int)v72 < 2) {
      goto LABEL_2;
    }
LABEL_179:
    if (*v72 == 221 && v72[1] == 1)
    {
      *((void *)this + 1) = v72 + 2;
      v79[0] = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v79) & 1) == 0) {
        return 0;
      }
LABEL_72:
      *(_DWORD *)(a1 + 92) = v79[0];
      *(_DWORD *)(a1 + 112) |= 0x1000u;
      std::string::size_type v44 = (unsigned __int8 *)*((void *)this + 1);
      if (*((_DWORD *)this + 4) - (int)v44 >= 2 && *v44 == 229 && v44[1] == 1)
      {
        *((void *)this + 1) = v44 + 2;
LABEL_77:
        v79[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v79) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 104) = v79[0];
        int v45 = *(_DWORD *)(a1 + 112) | 0x2000;
        *(_DWORD *)(a1 + 112) = v45;
        uint64_t v46 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v46 >= 2 && *v46 == 234 && v46[1] == 1)
        {
          *((void *)this + 1) = v46 + 2;
          *(_DWORD *)(a1 + 112) = v45 | 0x4000;
          uint64_t v47 = *(unsigned int **)(a1 + 96);
          if (!v47) {
LABEL_85:
          }
            operator new();
LABEL_86:
          v79[0] = 0;
          long long v48 = (char *)*((void *)this + 1);
          if ((unint64_t)v48 >= *((void *)this + 2) || *v48 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v79))return 0; {
          }
            }
          else
          {
            v79[0] = *v48;
            *((void *)this + 1) = v48 + 1;
          }
          int v49 = *((_DWORD *)this + 14);
          int v50 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v49 + 1;
          if (v49 >= v50) {
            return 0;
          }
          int v51 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79[0]);
          if (!sub_1001B8C00(v47, this, v52, v53) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v51);
          int v54 = *((_DWORD *)this + 14);
          BOOL v26 = __OFSUB__(v54, 1);
          int v55 = v54 - 1;
          if (v55 < 0 == v26) {
            *((_DWORD *)this + 14) = v55;
          }
          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            break;
          }
        }
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

void sub_100035A00()
{
}

void sub_100035A24()
{
}

void sub_100035A48()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100035A70(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t v6 = (unint64_t *)(a1 + 16);
  int v7 = (unsigned int *)(a1 + 24);
  int v8 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  while (1)
  {
    unint64_t v9 = (char *)*((void *)this + 1);
    if ((unint64_t)v9 < *((void *)this + 2) && (*v9 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v9;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v9 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_221;
        }
        __int16 v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!result) {
            return result;
          }
          int v14 = (unsigned char *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }
        else
        {
          unint64_t *v6 = *v13;
          int v14 = v13 + 1;
          *((void *)this + 1) = v14;
        }
        *(_DWORD *)(a1 + 300) |= 1u;
        if ((unint64_t)v14 >= v12 || *v14 != 16) {
          continue;
        }
        uint64_t v35 = v14 + 1;
        *((void *)this + 1) = v35;
        if ((unint64_t)v35 >= v12) {
          goto LABEL_443;
        }
LABEL_440:
        if (*v35 < 0)
        {
LABEL_443:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!result) {
            return result;
          }
          uint64_t v214 = (unsigned char *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
          *(_DWORD *)(a1 + 300) |= 2u;
          if ((unint64_t)v214 >= v12) {
            continue;
          }
        }
        else
        {
          unsigned int *v7 = *v35;
          uint64_t v214 = v35 + 1;
          *((void *)this + 1) = v214;
          *(_DWORD *)(a1 + 300) |= 2u;
          if ((unint64_t)v214 >= v12) {
            continue;
          }
        }
        if (*v214 != 24) {
          continue;
        }
        char v36 = v214 + 1;
        *((void *)this + 1) = v36;
LABEL_447:
        v284[0] = 0;
        if ((unint64_t)v36 >= v12 || *v36 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!result) {
            return result;
          }
          unsigned int v215 = v284[0];
          if (v284[0] <= 0xF)
          {
LABEL_450:
            *(_DWORD *)(a1 + 300) |= 4u;
            *(_DWORD *)(a1 + 28) = v215;
            goto LABEL_454;
          }
        }
        else
        {
          unsigned int v215 = *v36;
          *((void *)this + 1) = v36 + 1;
          if (v215 <= 0xF) {
            goto LABEL_450;
          }
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v8, 3, (int)v215);
LABEL_454:
        v216 = (unsigned char *)*((void *)this + 1);
        unint64_t v37 = *((void *)this + 2);
        if ((unint64_t)v216 >= v37 || *v216 != 32) {
          continue;
        }
        uint64_t v38 = v216 + 1;
        *((void *)this + 1) = v38;
LABEL_457:
        v284[0] = 0;
        if ((unint64_t)v38 >= v37 || *v38 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!result) {
            return result;
          }
          unsigned int v217 = v284[0];
          if (v284[0] <= 3)
          {
LABEL_460:
            *(_DWORD *)(a1 + 300) |= 8u;
            *(_DWORD *)(a1 + 32) = v217;
            goto LABEL_464;
          }
        }
        else
        {
          unsigned int v217 = *v38;
          *((void *)this + 1) = v38 + 1;
          if (v217 <= 3) {
            goto LABEL_460;
          }
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v8, 4, (int)v217);
LABEL_464:
        v218 = (unsigned char *)*((void *)this + 1);
        unint64_t v39 = *((void *)this + 2);
        if ((unint64_t)v218 >= v39 || *v218 != 40) {
          continue;
        }
        long long v40 = v218 + 1;
        *((void *)this + 1) = v40;
LABEL_467:
        v284[0] = 0;
        if ((unint64_t)v40 >= v39 || *v40 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!result) {
            return result;
          }
          unsigned int v219 = v284[0];
          if (v284[0] <= 2)
          {
LABEL_470:
            *(_DWORD *)(a1 + 300) |= 0x10u;
            *(_DWORD *)(a1 + 36) = v219;
            goto LABEL_474;
          }
        }
        else
        {
          unsigned int v219 = *v40;
          *((void *)this + 1) = v40 + 1;
          if (v219 <= 2) {
            goto LABEL_470;
          }
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v8, 5, (int)v219);
LABEL_474:
        v220 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v220 >= *((void *)this + 2) || *v220 != 61) {
          continue;
        }
        *((void *)this + 1) = v220 + 1;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0) {
          return 0;
        }
LABEL_477:
        *(_DWORD *)(a1 + 40) = v284[0];
        *(_DWORD *)(a1 + 300) |= 0x20u;
        std::string::size_type v221 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v221 >= *((void *)this + 2) || *v221 != 69) {
          continue;
        }
        *((void *)this + 1) = v221 + 1;
LABEL_480:
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 44) = v284[0];
        int v222 = *(_DWORD *)(a1 + 300) | 0x40;
        *(_DWORD *)(a1 + 300) = v222;
        char v223 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v223 >= *((void *)this + 2) || *v223 != 74) {
          continue;
        }
        *((void *)this + 1) = v223 + 1;
        *(_DWORD *)(a1 + 300) = v222 | 0x80;
        std::string::value_type v41 = *(_DWORD **)(a1 + 48);
        if (!v41) {
LABEL_484:
        }
          operator new();
LABEL_485:
        v284[0] = 0;
        std::string::size_type v224 = (char *)*((void *)this + 1);
        if ((unint64_t)v224 >= *((void *)this + 2) || *v224 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
        }
          }
        else
        {
          v284[0] = *v224;
          *((void *)this + 1) = v224 + 1;
        }
        int v225 = *((_DWORD *)this + 14);
        int v226 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v225 + 1;
        if (v225 >= v226) {
          return 0;
        }
        int v227 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001BFD6C(v41, this, v228, v229) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v227);
        int v230 = *((_DWORD *)this + 14);
        BOOL v90 = __OFSUB__(v230, 1);
        int v231 = v230 - 1;
        if (v231 < 0 == v90) {
          *((_DWORD *)this + 14) = v231;
        }
        uint64_t v232 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v232 >= *((void *)this + 2) || *v232 != 82) {
          continue;
        }
        *((void *)this + 1) = v232 + 1;
        *(_DWORD *)(a1 + 300) |= 0x100u;
        long long v42 = *(_DWORD **)(a1 + 56);
        if (!v42) {
LABEL_497:
        }
          operator new();
LABEL_83:
        v284[0] = 0;
        size_t v43 = (char *)*((void *)this + 1);
        if ((unint64_t)v43 >= *((void *)this + 2) || *v43 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
        }
          }
        else
        {
          v284[0] = *v43;
          *((void *)this + 1) = v43 + 1;
        }
        int v233 = *((_DWORD *)this + 14);
        int v234 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v233 + 1;
        if (v233 >= v234) {
          return 0;
        }
        int v235 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001C0628(v42, this, v236, v237) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v235);
        int v238 = *((_DWORD *)this + 14);
        BOOL v90 = __OFSUB__(v238, 1);
        int v239 = v238 - 1;
        if (v239 < 0 == v90) {
          *((_DWORD *)this + 14) = v239;
        }
        uint64_t v240 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v240 >= *((void *)this + 2) || *v240 != 90) {
          continue;
        }
        *((void *)this + 1) = v240 + 1;
        *(_DWORD *)(a1 + 300) |= 0x200u;
        uint64_t v44 = *(void *)(a1 + 64);
        if (!v44) {
LABEL_509:
        }
          operator new();
LABEL_87:
        v284[0] = 0;
        int v45 = (char *)*((void *)this + 1);
        if ((unint64_t)v45 >= *((void *)this + 2) || *v45 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
        }
          }
        else
        {
          v284[0] = *v45;
          *((void *)this + 1) = v45 + 1;
        }
        int v241 = *((_DWORD *)this + 14);
        int v242 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v241 + 1;
        if (v241 >= v242) {
          return 0;
        }
        int v243 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001C1404(v44, this, v244, v245) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v243);
        int v246 = *((_DWORD *)this + 14);
        BOOL v90 = __OFSUB__(v246, 1);
        int v247 = v246 - 1;
        if (v247 < 0 == v90) {
          *((_DWORD *)this + 14) = v247;
        }
        v248 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v248 >= *((void *)this + 2) || *v248 != 98) {
          continue;
        }
        *((void *)this + 1) = v248 + 1;
        *(_DWORD *)(a1 + 300) |= 0x400u;
        int v15 = *(unsigned int **)(a1 + 72);
        if (!v15) {
LABEL_521:
        }
          operator new();
LABEL_14:
        v284[0] = 0;
        uint64_t v16 = (char *)*((void *)this + 1);
        if ((unint64_t)v16 >= *((void *)this + 2) || *v16 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
        }
          }
        else
        {
          v284[0] = *v16;
          *((void *)this + 1) = v16 + 1;
        }
        int v249 = *((_DWORD *)this + 14);
        int v250 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v249 + 1;
        if (v249 >= v250) {
          return 0;
        }
        int v251 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001BF070(v15, this, v252, v253) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v251);
        int v254 = *((_DWORD *)this + 14);
        BOOL v90 = __OFSUB__(v254, 1);
        int v255 = v254 - 1;
        if (v255 < 0 == v90) {
          *((_DWORD *)this + 14) = v255;
        }
        v256 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v256 >= *((void *)this + 2) || *v256 != 109) {
          continue;
        }
        *((void *)this + 1) = v256 + 1;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0) {
          return 0;
        }
LABEL_533:
        *(_DWORD *)(a1 + 96) = v284[0];
        int v257 = *(_DWORD *)(a1 + 300) | 0x800;
        *(_DWORD *)(a1 + 300) = v257;
        long long v258 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v258 >= *((void *)this + 2) || *v258 != 114) {
          continue;
        }
        *((void *)this + 1) = v258 + 1;
        *(_DWORD *)(a1 + 300) = v257 | 0x1000;
        uint64_t v46 = *(void *)(a1 + 80);
        if (!v46) {
LABEL_536:
        }
          operator new();
LABEL_537:
        v284[0] = 0;
        uint64_t v259 = (char *)*((void *)this + 1);
        if ((unint64_t)v259 >= *((void *)this + 2) || *v259 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
        }
          }
        else
        {
          v284[0] = *v259;
          *((void *)this + 1) = v259 + 1;
        }
        int v260 = *((_DWORD *)this + 14);
        int v261 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v260 + 1;
        if (v260 >= v261) {
          return 0;
        }
        int v262 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_100038628(v46, this, v263, v264) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v262);
        int v265 = *((_DWORD *)this + 14);
        BOOL v90 = __OFSUB__(v265, 1);
        int v266 = v265 - 1;
        if (v266 < 0 == v90) {
          *((_DWORD *)this + 14) = v266;
        }
        v267 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v267 >= *((void *)this + 2) || *v267 != 122) {
          continue;
        }
        *((void *)this + 1) = v267 + 1;
        *(_DWORD *)(a1 + 300) |= 0x2000u;
        uint64_t v17 = *(void *)(a1 + 88);
        if (!v17) {
LABEL_549:
        }
          operator new();
LABEL_18:
        v284[0] = 0;
        uint64_t v18 = (char *)*((void *)this + 1);
        if ((unint64_t)v18 >= *((void *)this + 2) || *v18 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
        }
          }
        else
        {
          v284[0] = *v18;
          *((void *)this + 1) = v18 + 1;
        }
        int v268 = *((_DWORD *)this + 14);
        int v269 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v268 + 1;
        if (v268 >= v269) {
          return 0;
        }
        int v270 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001C2DA0(v17, this, v271, v272) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v270);
        int v273 = *((_DWORD *)this + 14);
        BOOL v90 = __OFSUB__(v273, 1);
        int v274 = v273 - 1;
        if (v274 < 0 == v90) {
          *((_DWORD *)this + 14) = v274;
        }
        v275 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v275 <= 1 || *v275 != 130 || v275[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v275 + 2;
        *(_DWORD *)(a1 + 300) |= 0x4000u;
        uint64_t v47 = *(void *)(a1 + 104);
        if (!v47) {
LABEL_562:
        }
          operator new();
LABEL_97:
        v284[0] = 0;
        long long v48 = (char *)*((void *)this + 1);
        if ((unint64_t)v48 >= *((void *)this + 2) || *v48 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
        }
          }
        else
        {
          v284[0] = *v48;
          *((void *)this + 1) = v48 + 1;
        }
        int v276 = *((_DWORD *)this + 14);
        int v277 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v276 + 1;
        if (v276 >= v277) {
          return 0;
        }
        int v278 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001BDA3C(v47, this, v279, v280) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v278);
        int v281 = *((_DWORD *)this + 14);
        BOOL v90 = __OFSUB__(v281, 1);
        int v282 = v281 - 1;
        if (v282 < 0 == v90) {
          *((_DWORD *)this + 14) = v282;
        }
        v283 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v283 <= 1 || *v283 != 137 || v283[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v283 + 2;
        *(void *)v284 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v284) & 1) == 0)return 0; {
LABEL_101:
        }
        *(void *)(a1 + 112) = *(void *)v284;
        *(_DWORD *)(a1 + 300) |= 0x8000u;
        int v50 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v49 = *((void *)this + 2);
        if ((int)v49 - (int)v50 < 2 || *v50 != 144 || v50[1] != 1) {
          continue;
        }
        int v51 = (char *)(v50 + 2);
        *((void *)this + 1) = v51;
LABEL_107:
        v284[0] = 0;
        if ((unint64_t)v51 >= v49 || *v51 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!result) {
            return result;
          }
          unsigned int v52 = v284[0];
          if (v284[0] <= 1)
          {
LABEL_110:
            *(_DWORD *)(a1 + 300) |= 0x10000u;
            *(_DWORD *)(a1 + 100) = v52;
            goto LABEL_374;
          }
        }
        else
        {
          unsigned int v52 = *v51;
          *((void *)this + 1) = v51 + 1;
          if (v52 <= 1) {
            goto LABEL_110;
          }
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v8, 18, (int)v52);
LABEL_374:
        v193 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v193 < 2 || *v193 != 157 || v193[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v193 + 2;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0) {
          return 0;
        }
LABEL_113:
        *(_DWORD *)(a1 + 120) = v284[0];
        *(_DWORD *)(a1 + 300) |= 0x20000u;
        long long v53 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v53 < 2 || *v53 != 165 || v53[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v53 + 2;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0) {
          return 0;
        }
LABEL_22:
        *(_DWORD *)(a1 + 124) = v284[0];
        *(_DWORD *)(a1 + 300) |= 0x40000u;
        uint64_t v19 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v19 < 2 || *v19 != 173 || v19[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v19 + 2;
LABEL_119:
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 128) = v284[0];
        *(_DWORD *)(a1 + 300) |= 0x80000u;
        int v54 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v54 < 2 || *v54 != 181 || v54[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v54 + 2;
LABEL_125:
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 248) = v284[0];
        *(_DWORD *)(a1 + 304) |= 0x100u;
        int v55 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v55 < 2 || *v55 != 189 || v55[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v55 + 2;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0) {
          return 0;
        }
LABEL_28:
        *(_DWORD *)(a1 + 136) = v284[0];
        int v20 = *(_DWORD *)(a1 + 300) | 0x200000;
        *(_DWORD *)(a1 + 300) = v20;
        int v21 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v21 < 2 || *v21 != 194 || v21[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v21 + 2;
        *(_DWORD *)(a1 + 300) = v20 | 0x400000;
        uint64_t v22 = *(void *)(a1 + 144);
        if (!v22) {
LABEL_133:
        }
          operator new();
LABEL_134:
        v284[0] = 0;
        int v56 = (char *)*((void *)this + 1);
        if ((unint64_t)v56 >= *((void *)this + 2) || *v56 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
        }
          }
        else
        {
          v284[0] = *v56;
          *((void *)this + 1) = v56 + 1;
        }
        int v84 = *((_DWORD *)this + 14);
        int v85 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v84 + 1;
        if (v84 >= v85) {
          return 0;
        }
        int v86 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001C4070(v22, this, v87, v88) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v86);
        int v89 = *((_DWORD *)this + 14);
        BOOL v90 = __OFSUB__(v89, 1);
        int v91 = v89 - 1;
        if (v91 < 0 == v90) {
          *((_DWORD *)this + 14) = v91;
        }
        v93 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v92 = *((void *)this + 2);
        if ((int)v92 - (int)v93 <= 1 || *v93 != 200 || v93[1] != 1) {
          continue;
        }
        BOOL v24 = (char *)(v93 + 2);
        *((void *)this + 1) = v24;
        v284[0] = 0;
        if ((unint64_t)v24 >= v92) {
          goto LABEL_386;
        }
LABEL_234:
        if (*v24 < 0)
        {
LABEL_386:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!result) {
            return result;
          }
          unsigned int v94 = v284[0];
          if (v284[0] <= 1)
          {
LABEL_236:
            *(_DWORD *)(a1 + 300) |= 0x800000u;
            *(_DWORD *)(a1 + 140) = v94;
            goto LABEL_389;
          }
        }
        else
        {
          unsigned int v94 = *v24;
          *((void *)this + 1) = v24 + 1;
          if (v94 <= 1) {
            goto LABEL_236;
          }
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v8, 25, (int)v94);
LABEL_389:
        std::string::size_type v194 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v194 < 2 || *v194 != 209 || v194[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v194 + 2;
        *(void *)v284 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v284) & 1) == 0)return 0; {
LABEL_139:
        }
        *(void *)(a1 + 152) = *(void *)v284;
        int v57 = *(_DWORD *)(a1 + 300) | 0x1000000;
        *(_DWORD *)(a1 + 300) = v57;
        int v58 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v58 < 2 || *v58 != 218 || v58[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v58 + 2;
        *(_DWORD *)(a1 + 300) = v57 | 0x2000000;
        uint64_t v25 = *(void *)(a1 + 160);
        if (!v25) {
LABEL_143:
        }
          operator new();
LABEL_144:
        v284[0] = 0;
        uint64_t v59 = (char *)*((void *)this + 1);
        if ((unint64_t)v59 >= *((void *)this + 2) || *v59 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
        }
          }
        else
        {
          v284[0] = *v59;
          *((void *)this + 1) = v59 + 1;
        }
        int v130 = *((_DWORD *)this + 14);
        int v131 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v130 + 1;
        if (v130 >= v131) {
          return 0;
        }
        int v132 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001C50C0(v25, this, v133, v134) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v132);
        int v135 = *((_DWORD *)this + 14);
        BOOL v90 = __OFSUB__(v135, 1);
        int v136 = v135 - 1;
        if (v136 < 0 == v90) {
          *((_DWORD *)this + 14) = v136;
        }
        int64_t v137 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v137 <= 1 || *v137 != 226 || v137[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v137 + 2;
        *(_DWORD *)(a1 + 300) |= 0x4000000u;
        uint64_t v60 = *(void *)(a1 + 168);
        if (!v60) {
LABEL_149:
        }
          operator new();
LABEL_294:
        v284[0] = 0;
        int64_t v138 = (char *)*((void *)this + 1);
        if ((unint64_t)v138 >= *((void *)this + 2) || *v138 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
        }
          }
        else
        {
          v284[0] = *v138;
          *((void *)this + 1) = v138 + 1;
        }
        int v148 = *((_DWORD *)this + 14);
        int v149 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v148 + 1;
        if (v148 >= v149) {
          return 0;
        }
        int v150 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001DA1C8(v60, this, v151, v152) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v150);
        int v153 = *((_DWORD *)this + 14);
        BOOL v90 = __OFSUB__(v153, 1);
        int v154 = v153 - 1;
        if (v154 < 0 == v90) {
          *((_DWORD *)this + 14) = v154;
        }
        v155 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v155 <= 1 || *v155 != 234 || v155[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v155 + 2;
        *(_DWORD *)(a1 + 300) |= 0x8000000u;
        uint64_t v61 = *(void *)(a1 + 176);
        if (!v61) {
LABEL_152:
        }
          operator new();
LABEL_320:
        v284[0] = 0;
        int64_t v156 = (char *)*((void *)this + 1);
        if ((unint64_t)v156 >= *((void *)this + 2) || *v156 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
        }
          }
        else
        {
          v284[0] = *v156;
          *((void *)this + 1) = v156 + 1;
        }
        int v166 = *((_DWORD *)this + 14);
        int v167 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v166 + 1;
        if (v166 >= v167) {
          return 0;
        }
        int v168 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001C45B8(v61, this, v169, v170) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v168);
        int v171 = *((_DWORD *)this + 14);
        BOOL v90 = __OFSUB__(v171, 1);
        int v172 = v171 - 1;
        if (v172 < 0 == v90) {
          *((_DWORD *)this + 14) = v172;
        }
        int64_t v173 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v62 = *((void *)this + 2);
        if ((int)v62 - (int)v173 <= 1 || *v173 != 240 || v173[1] != 1) {
          continue;
        }
        BOOL v63 = v173 + 2;
        *((void *)this + 1) = v63;
        v284[0] = 0;
        if ((unint64_t)v63 >= v62) {
          goto LABEL_428;
        }
LABEL_346:
        if ((char)*v63 < 0)
        {
LABEL_428:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!result) {
            return result;
          }
          unsigned int v174 = v284[0];
          int64_t v175 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v62 = *((void *)this + 2);
        }
        else
        {
          unsigned int v174 = *v63;
          int64_t v175 = v63 + 1;
          *((void *)this + 1) = v175;
        }
        *(unsigned char *)(a1 + 192) = v174 != 0;
        *(_DWORD *)(a1 + 300) |= 0x10000000u;
        if ((int)v62 - (int)v175 < 2 || *v175 != 249 || v175[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v175 + 2;
        *(void *)v284 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v284) & 1) == 0)return 0; {
LABEL_158:
        }
        *(void *)(a1 + 184) = *(void *)v284;
        *(_DWORD *)(a1 + 300) |= 0x20000000u;
        int64_t v65 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v64 = *((void *)this + 2);
        if ((int)v64 - (int)v65 < 2 || *v65 != 128 || v65[1] != 2) {
          continue;
        }
        long long v66 = v65 + 2;
        *((void *)this + 1) = v66;
LABEL_164:
        v284[0] = 0;
        if ((unint64_t)v66 >= v64 || (char)*v66 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!result) {
            return result;
          }
          unsigned int v67 = v284[0];
          int64_t v68 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v64 = *((void *)this + 2);
        }
        else
        {
          unsigned int v67 = *v66;
          int64_t v68 = v66 + 1;
          *((void *)this + 1) = v68;
        }
        *(unsigned char *)(a1 + 193) = v67 != 0;
        *(_DWORD *)(a1 + 300) |= 0x40000000u;
        if ((int)v64 - (int)v68 < 2 || *v68 != 141 || v68[1] != 2) {
          continue;
        }
        *((void *)this + 1) = v68 + 2;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0) {
          return 0;
        }
LABEL_169:
        *(_DWORD *)(a1 + 196) = v284[0];
        *(_DWORD *)(a1 + 300) |= 0x80000000;
        long long v69 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v69 < 2 || *v69 != 146 || v69[1] != 2) {
          continue;
        }
        *((void *)this + 1) = v69 + 2;
LABEL_174:
        *(_DWORD *)(a1 + 304) |= 1u;
        uint64_t v70 = *(void *)(a1 + 200);
        if (!v70) {
          operator new();
        }
        v284[0] = 0;
        int64_t v71 = (char *)*((void *)this + 1);
        if ((unint64_t)v71 >= *((void *)this + 2) || *v71 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
        }
          }
        else
        {
          v284[0] = *v71;
          *((void *)this + 1) = v71 + 1;
        }
        int v120 = *((_DWORD *)this + 14);
        int v121 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v120 + 1;
        if (v120 >= v121) {
          return 0;
        }
        int v122 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001BE42C(v70, this, v123, v124) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v122);
        int v125 = *((_DWORD *)this + 14);
        BOOL v90 = __OFSUB__(v125, 1);
        int v126 = v125 - 1;
        if (v126 < 0 == v90) {
          *((_DWORD *)this + 14) = v126;
        }
        std::string::size_type v127 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v26 = *((void *)this + 2);
        if ((int)v26 - (int)v127 <= 1 || *v127 != 152 || v127[1] != 2) {
          continue;
        }
        int v27 = v127 + 2;
        *((void *)this + 1) = v27;
        v284[0] = 0;
        if ((unint64_t)v27 >= v26) {
          goto LABEL_394;
        }
LABEL_282:
        if ((char)*v27 < 0)
        {
LABEL_394:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!result) {
            return result;
          }
          unsigned int v128 = v284[0];
          uint64_t v129 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v26 = *((void *)this + 2);
        }
        else
        {
          unsigned int v128 = *v27;
          uint64_t v129 = v27 + 1;
          *((void *)this + 1) = v129;
        }
        *(unsigned char *)(a1 + 194) = v128 != 0;
        int v195 = *(_DWORD *)(a1 + 304) | 2;
        *(_DWORD *)(a1 + 304) = v195;
        if ((int)v26 - (int)v129 >= 2 && *v129 == 162 && v129[1] == 2)
        {
          *((void *)this + 1) = v129 + 2;
          *(_DWORD *)(a1 + 304) = v195 | 4;
          uint64_t v72 = *(void *)(a1 + 208);
          if (!v72) {
LABEL_400:
          }
            operator new();
LABEL_401:
          v284[0] = 0;
          v196 = (char *)*((void *)this + 1);
          if ((unint64_t)v196 >= *((void *)this + 2) || *v196 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
          }
            }
          else
          {
            v284[0] = *v196;
            *((void *)this + 1) = v196 + 1;
          }
          int v197 = *((_DWORD *)this + 14);
          int v198 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v197 + 1;
          if (v197 >= v198) {
            return 0;
          }
          int v199 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
          if (!sub_1001C9740(v72, this, v200, v201) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v199);
          int v202 = *((_DWORD *)this + 14);
          BOOL v90 = __OFSUB__(v202, 1);
          int v203 = v202 - 1;
          if (v203 < 0 == v90) {
            *((_DWORD *)this + 14) = v203;
          }
          int64_t v204 = (unsigned __int8 *)*((void *)this + 1);
          if (*((_DWORD *)this + 4) - (int)v204 > 1 && *v204 == 170 && v204[1] == 2)
          {
            *((void *)this + 1) = v204 + 2;
            *(_DWORD *)(a1 + 304) |= 8u;
            uint64_t v73 = *(_DWORD **)(a1 + 216);
            if (!v73) {
LABEL_184:
            }
              operator new();
LABEL_414:
            v284[0] = 0;
            int64_t v205 = (char *)*((void *)this + 1);
            if ((unint64_t)v205 >= *((void *)this + 2) || *v205 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
            }
              }
            else
            {
              v284[0] = *v205;
              *((void *)this + 1) = v205 + 1;
            }
            int v206 = *((_DWORD *)this + 14);
            int v207 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v206 + 1;
            if (v206 >= v207) {
              return 0;
            }
            int v208 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
            if (!sub_1001CA47C(v73, this, v209, v210) || !*((unsigned char *)this + 36)) {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v208);
            int v211 = *((_DWORD *)this + 14);
            BOOL v90 = __OFSUB__(v211, 1);
            int v212 = v211 - 1;
            if (v212 < 0 == v90) {
              *((_DWORD *)this + 14) = v212;
            }
            unint64_t v213 = (unsigned __int8 *)*((void *)this + 1);
            if (*((_DWORD *)this + 4) - (int)v213 > 1 && *v213 == 181 && v213[1] == 2)
            {
              *((void *)this + 1) = v213 + 2;
              v284[0] = 0;
              if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0) {
                return 0;
              }
LABEL_44:
              *(_DWORD *)(a1 + 132) = v284[0];
              *(_DWORD *)(a1 + 300) |= 0x100000u;
              int8x8_t v28 = (unsigned __int8 *)*((void *)this + 1);
              if (*((_DWORD *)this + 4) - (int)v28 >= 2 && *v28 == 189 && v28[1] == 2)
              {
                *((void *)this + 1) = v28 + 2;
LABEL_186:
                v284[0] = 0;
                if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)return 0; {
                *(_DWORD *)(a1 + 224) = v284[0];
                }
                int v74 = *(_DWORD *)(a1 + 304) | 0x10;
                *(_DWORD *)(a1 + 304) = v74;
                uint64_t v75 = (unsigned __int8 *)*((void *)this + 1);
                if (*((_DWORD *)this + 4) - (int)v75 >= 2 && *v75 == 194 && v75[1] == 2)
                {
                  *((void *)this + 1) = v75 + 2;
                  *(_DWORD *)(a1 + 304) = v74 | 0x20;
                  uint64_t v29 = *(void *)(a1 + 232);
                  if (!v29) {
LABEL_191:
                  }
                    operator new();
LABEL_192:
                  v284[0] = 0;
                  size_t v76 = (char *)*((void *)this + 1);
                  if ((unint64_t)v76 >= *((void *)this + 2) || *v76 < 0)
                  {
                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
                  }
                    }
                  else
                  {
                    v284[0] = *v76;
                    *((void *)this + 1) = v76 + 1;
                  }
                  int v95 = *((_DWORD *)this + 14);
                  int v96 = *((_DWORD *)this + 15);
                  *((_DWORD *)this + 14) = v95 + 1;
                  if (v95 >= v96) {
                    return 0;
                  }
                  int v97 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
                  if (!sub_1001BE42C(v29, this, v98, v99) || !*((unsigned char *)this + 36)) {
                    return 0;
                  }
                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v97);
                  int v100 = *((_DWORD *)this + 14);
                  BOOL v90 = __OFSUB__(v100, 1);
                  int v101 = v100 - 1;
                  if (v101 < 0 == v90) {
                    *((_DWORD *)this + 14) = v101;
                  }
                  long long v102 = (unsigned __int8 *)*((void *)this + 1);
                  if (*((_DWORD *)this + 4) - (int)v102 > 1 && *v102 == 205 && v102[1] == 2)
                  {
                    *((void *)this + 1) = v102 + 2;
                    v284[0] = 0;
                    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)return 0; {
LABEL_53:
                    }
                    *(_DWORD *)(a1 + 228) = v284[0];
                    int v30 = *(_DWORD *)(a1 + 304) | 0x40;
                    *(_DWORD *)(a1 + 304) = v30;
                    uint64_t v31 = (unsigned __int8 *)*((void *)this + 1);
                    if (*((_DWORD *)this + 4) - (int)v31 >= 2 && *v31 == 210 && v31[1] == 2)
                    {
                      *((void *)this + 1) = v31 + 2;
                      *(_DWORD *)(a1 + 304) = v30 | 0x80;
                      uint64_t v32 = *(void *)(a1 + 240);
                      if (!v32) {
LABEL_197:
                      }
                        operator new();
LABEL_198:
                      v284[0] = 0;
                      uint64_t v77 = (char *)*((void *)this + 1);
                      if ((unint64_t)v77 >= *((void *)this + 2) || *v77 < 0)
                      {
                        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
                      }
                        }
                      else
                      {
                        v284[0] = *v77;
                        *((void *)this + 1) = v77 + 1;
                      }
                      int v103 = *((_DWORD *)this + 14);
                      int v104 = *((_DWORD *)this + 15);
                      *((_DWORD *)this + 14) = v103 + 1;
                      if (v103 >= v104) {
                        return 0;
                      }
                      int v105 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
                      if (!sub_1001C1404(v32, this, v106, v107) || !*((unsigned char *)this + 36)) {
                        return 0;
                      }
                      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v105);
                      int v108 = *((_DWORD *)this + 14);
                      BOOL v90 = __OFSUB__(v108, 1);
                      int v109 = v108 - 1;
                      if (v109 < 0 == v90) {
                        *((_DWORD *)this + 14) = v109;
                      }
                      int64_t v110 = (unsigned __int8 *)*((void *)this + 1);
                      if (*((_DWORD *)this + 4) - (int)v110 > 1 && *v110 == 221 && v110[1] == 2)
                      {
                        *((void *)this + 1) = v110 + 2;
                        v284[0] = 0;
                        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)return 0; {
LABEL_203:
                        }
                        *(_DWORD *)(a1 + 252) = v284[0];
                        int v78 = *(_DWORD *)(a1 + 304) | 0x200;
                        *(_DWORD *)(a1 + 304) = v78;
                        int64_t v79 = (unsigned __int8 *)*((void *)this + 1);
                        if (*((_DWORD *)this + 4) - (int)v79 >= 2 && *v79 == 226 && v79[1] == 2)
                        {
                          *((void *)this + 1) = v79 + 2;
                          *(_DWORD *)(a1 + 304) = v78 | 0x400;
                          uint64_t v80 = *(void *)(a1 + 256);
                          if (!v80) {
LABEL_210:
                          }
                            operator new();
LABEL_211:
                          v284[0] = 0;
                          uint64_t v81 = (char *)*((void *)this + 1);
                          if ((unint64_t)v81 >= *((void *)this + 2) || *v81 < 0)
                          {
                            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
                          }
                            }
                          else
                          {
                            v284[0] = *v81;
                            *((void *)this + 1) = v81 + 1;
                          }
                          int v111 = *((_DWORD *)this + 14);
                          int v112 = *((_DWORD *)this + 15);
                          *((_DWORD *)this + 14) = v111 + 1;
                          if (v111 >= v112) {
                            return 0;
                          }
                          int v113 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
                          if (!sub_1001DAB40(v80, this, v114, v115) || !*((unsigned char *)this + 36)) {
                            return 0;
                          }
                          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v113);
                          int v116 = *((_DWORD *)this + 14);
                          BOOL v90 = __OFSUB__(v116, 1);
                          int v117 = v116 - 1;
                          if (v117 < 0 == v90) {
                            *((_DWORD *)this + 14) = v117;
                          }
                          std::string v118 = (unsigned __int8 *)*((void *)this + 1);
                          if (*((_DWORD *)this + 4) - (int)v118 > 1 && *v118 == 234 && v118[1] == 2)
                          {
                            *((void *)this + 1) = v118 + 2;
                            *(_DWORD *)(a1 + 304) |= 0x800u;
                            uint64_t v33 = *(void *)(a1 + 264);
                            if (!v33) {
LABEL_60:
                            }
                              operator new();
LABEL_269:
                            v284[0] = 0;
                            std::string v119 = (char *)*((void *)this + 1);
                            if ((unint64_t)v119 >= *((void *)this + 2) || *v119 < 0)
                            {
                              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
                            }
                              }
                            else
                            {
                              v284[0] = *v119;
                              *((void *)this + 1) = v119 + 1;
                            }
                            int v139 = *((_DWORD *)this + 14);
                            int v140 = *((_DWORD *)this + 15);
                            *((_DWORD *)this + 14) = v139 + 1;
                            if (v139 >= v140) {
                              return 0;
                            }
                            int v141 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
                            if (!sub_1001DC4EC(v33, this, v142, v143) || !*((unsigned char *)this + 36)) {
                              return 0;
                            }
                            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v141);
                            int v144 = *((_DWORD *)this + 14);
                            BOOL v90 = __OFSUB__(v144, 1);
                            int v145 = v144 - 1;
                            if (v145 < 0 == v90) {
                              *((_DWORD *)this + 14) = v145;
                            }
                            size_t v146 = (unsigned __int8 *)*((void *)this + 1);
                            if (*((_DWORD *)this + 4) - (int)v146 > 1 && *v146 == 242 && v146[1] == 2)
                            {
                              *((void *)this + 1) = v146 + 2;
                              *(_DWORD *)(a1 + 304) |= 0x1000u;
                              uint64_t v34 = *(void *)(a1 + 272);
                              if (!v34) {
LABEL_63:
                              }
                                operator new();
LABEL_307:
                              v284[0] = 0;
                              v147 = (char *)*((void *)this + 1);
                              if ((unint64_t)v147 >= *((void *)this + 2) || *v147 < 0)
                              {
                                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
                              }
                                }
                              else
                              {
                                v284[0] = *v147;
                                *((void *)this + 1) = v147 + 1;
                              }
                              int v157 = *((_DWORD *)this + 14);
                              int v158 = *((_DWORD *)this + 15);
                              *((_DWORD *)this + 14) = v157 + 1;
                              if (v157 >= v158) {
                                return 0;
                              }
                              int v159 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
                              if (!sub_1001DDAE4(v34, this, v160, v161) || !*((unsigned char *)this + 36)) {
                                return 0;
                              }
                              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v159);
                              int v162 = *((_DWORD *)this + 14);
                              BOOL v90 = __OFSUB__(v162, 1);
                              int v163 = v162 - 1;
                              if (v163 < 0 == v90) {
                                *((_DWORD *)this + 14) = v163;
                              }
                              size_t v164 = (unsigned __int8 *)*((void *)this + 1);
                              if (*((_DWORD *)this + 4) - (int)v164 > 1 && *v164 == 250 && v164[1] == 2)
                              {
                                *((void *)this + 1) = v164 + 2;
                                *(_DWORD *)(a1 + 304) |= 0x2000u;
                                uint64_t v82 = *(void *)(a1 + 280);
                                if (!v82) {
LABEL_216:
                                }
                                  operator new();
LABEL_333:
                                v284[0] = 0;
                                v165 = (char *)*((void *)this + 1);
                                if ((unint64_t)v165 >= *((void *)this + 2) || *v165 < 0)
                                {
                                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
                                }
                                  }
                                else
                                {
                                  v284[0] = *v165;
                                  *((void *)this + 1) = v165 + 1;
                                }
                                int v176 = *((_DWORD *)this + 14);
                                int v177 = *((_DWORD *)this + 15);
                                *((_DWORD *)this + 14) = v176 + 1;
                                if (v176 >= v177) {
                                  return 0;
                                }
                                int v178 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
                                if (!sub_1001DB1F8(v82, this, v179, v180) || !*((unsigned char *)this + 36)) {
                                  return 0;
                                }
                                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v178);
                                int v181 = *((_DWORD *)this + 14);
                                BOOL v90 = __OFSUB__(v181, 1);
                                int v182 = v181 - 1;
                                if (v182 < 0 == v90) {
                                  *((_DWORD *)this + 14) = v182;
                                }
                                unint64_t v183 = (unsigned __int8 *)*((void *)this + 1);
                                if (*((_DWORD *)this + 4) - (int)v183 > 1 && *v183 == 130 && v183[1] == 3)
                                {
                                  *((void *)this + 1) = v183 + 2;
                                  *(_DWORD *)(a1 + 304) |= 0x4000u;
                                  uint64_t v83 = *(void *)(a1 + 288);
                                  if (!v83) {
LABEL_219:
                                  }
                                    operator new();
LABEL_358:
                                  v284[0] = 0;
                                  v184 = (char *)*((void *)this + 1);
                                  if ((unint64_t)v184 >= *((void *)this + 2) || *v184 < 0)
                                  {
                                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0; {
                                  }
                                    }
                                  else
                                  {
                                    v284[0] = *v184;
                                    *((void *)this + 1) = v184 + 1;
                                  }
                                  int v185 = *((_DWORD *)this + 14);
                                  int v186 = *((_DWORD *)this + 15);
                                  *((_DWORD *)this + 14) = v185 + 1;
                                  if (v185 >= v186) {
                                    return 0;
                                  }
                                  int v187 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
                                  if (!sub_1001DBA78(v83, this, v188, v189) || !*((unsigned char *)this + 36)) {
                                    return 0;
                                  }
                                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v187);
                                  int v190 = *((_DWORD *)this + 14);
                                  BOOL v90 = __OFSUB__(v190, 1);
                                  int v191 = v190 - 1;
                                  if (v191 < 0 == v90) {
                                    *((_DWORD *)this + 14) = v191;
                                  }
                                  if (*((void *)this + 1) == *((void *)this + 2)
                                    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                                  {
                                    *((_DWORD *)this + 8) = 0;
                                    uint64_t result = 1;
                                    *((unsigned char *)this + 36) = 1;
                                    return result;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        break;
      case 2u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_221;
        }
        uint64_t v35 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v35 >= v12) {
          goto LABEL_443;
        }
        goto LABEL_440;
      case 3u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_221;
        }
        char v36 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_447;
      case 4u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_221;
        }
        uint64_t v38 = (char *)*((void *)this + 1);
        unint64_t v37 = *((void *)this + 2);
        goto LABEL_457;
      case 5u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_221;
        }
        long long v40 = (char *)*((void *)this + 1);
        unint64_t v39 = *((void *)this + 2);
        goto LABEL_467;
      case 7u:
        int v11 = TagFallback & 7;
        if (v11 != 5) {
          goto LABEL_221;
        }
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0) {
          return 0;
        }
        goto LABEL_477;
      case 8u:
        int v11 = TagFallback & 7;
        if (v11 == 5) {
          goto LABEL_480;
        }
        goto LABEL_221;
      case 9u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 300) |= 0x80u;
        std::string::value_type v41 = *(_DWORD **)(a1 + 48);
        if (!v41) {
          goto LABEL_484;
        }
        goto LABEL_485;
      case 0xAu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 300) |= 0x100u;
        long long v42 = *(_DWORD **)(a1 + 56);
        if (v42) {
          goto LABEL_83;
        }
        goto LABEL_497;
      case 0xBu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 300) |= 0x200u;
        uint64_t v44 = *(void *)(a1 + 64);
        if (v44) {
          goto LABEL_87;
        }
        goto LABEL_509;
      case 0xCu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 300) |= 0x400u;
        int v15 = *(unsigned int **)(a1 + 72);
        if (v15) {
          goto LABEL_14;
        }
        goto LABEL_521;
      case 0xDu:
        int v11 = TagFallback & 7;
        if (v11 != 5) {
          goto LABEL_221;
        }
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0) {
          return 0;
        }
        goto LABEL_533;
      case 0xEu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 300) |= 0x1000u;
        uint64_t v46 = *(void *)(a1 + 80);
        if (!v46) {
          goto LABEL_536;
        }
        goto LABEL_537;
      case 0xFu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 300) |= 0x2000u;
        uint64_t v17 = *(void *)(a1 + 88);
        if (v17) {
          goto LABEL_18;
        }
        goto LABEL_549;
      case 0x10u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 300) |= 0x4000u;
        uint64_t v47 = *(void *)(a1 + 104);
        if (v47) {
          goto LABEL_97;
        }
        goto LABEL_562;
      case 0x11u:
        int v11 = TagFallback & 7;
        if (v11 != 1) {
          goto LABEL_221;
        }
        *(void *)v284 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v284))goto LABEL_101; {
        return 0;
        }
      case 0x12u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_221;
        }
        int v51 = (char *)*((void *)this + 1);
        unint64_t v49 = *((void *)this + 2);
        goto LABEL_107;
      case 0x13u:
        int v11 = TagFallback & 7;
        if (v11 != 5) {
          goto LABEL_221;
        }
        v284[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284)) {
          goto LABEL_113;
        }
        return 0;
      case 0x14u:
        int v11 = TagFallback & 7;
        if (v11 != 5) {
          goto LABEL_221;
        }
        v284[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284)) {
          goto LABEL_22;
        }
        return 0;
      case 0x15u:
        int v11 = TagFallback & 7;
        if (v11 == 5) {
          goto LABEL_119;
        }
        goto LABEL_221;
      case 0x16u:
        int v11 = TagFallback & 7;
        if (v11 == 5) {
          goto LABEL_125;
        }
        goto LABEL_221;
      case 0x17u:
        int v11 = TagFallback & 7;
        if (v11 != 5) {
          goto LABEL_221;
        }
        v284[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284)) {
          goto LABEL_28;
        }
        return 0;
      case 0x18u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 300) |= 0x400000u;
        uint64_t v22 = *(void *)(a1 + 144);
        if (!v22) {
          goto LABEL_133;
        }
        goto LABEL_134;
      case 0x19u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_221;
        }
        BOOL v24 = (char *)*((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        v284[0] = 0;
        if ((unint64_t)v24 >= v23) {
          goto LABEL_386;
        }
        goto LABEL_234;
      case 0x1Au:
        int v11 = TagFallback & 7;
        if (v11 != 1) {
          goto LABEL_221;
        }
        *(void *)v284 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v284))goto LABEL_139; {
        return 0;
        }
      case 0x1Bu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 300) |= 0x2000000u;
        uint64_t v25 = *(void *)(a1 + 160);
        if (!v25) {
          goto LABEL_143;
        }
        goto LABEL_144;
      case 0x1Cu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 300) |= 0x4000000u;
        uint64_t v60 = *(void *)(a1 + 168);
        if (!v60) {
          goto LABEL_149;
        }
        goto LABEL_294;
      case 0x1Du:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 300) |= 0x8000000u;
        uint64_t v61 = *(void *)(a1 + 176);
        if (!v61) {
          goto LABEL_152;
        }
        goto LABEL_320;
      case 0x1Eu:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_221;
        }
        BOOL v63 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v62 = *((void *)this + 2);
        v284[0] = 0;
        if ((unint64_t)v63 >= v62) {
          goto LABEL_428;
        }
        goto LABEL_346;
      case 0x1Fu:
        int v11 = TagFallback & 7;
        if (v11 != 1) {
          goto LABEL_221;
        }
        *(void *)v284 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v284))goto LABEL_158; {
        return 0;
        }
      case 0x20u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_221;
        }
        long long v66 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v64 = *((void *)this + 2);
        goto LABEL_164;
      case 0x21u:
        int v11 = TagFallback & 7;
        if (v11 != 5) {
          goto LABEL_221;
        }
        v284[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284)) {
          goto LABEL_169;
        }
        return 0;
      case 0x22u:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_174;
        }
        goto LABEL_221;
      case 0x23u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_221;
        }
        int v27 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v26 = *((void *)this + 2);
        v284[0] = 0;
        if ((unint64_t)v27 >= v26) {
          goto LABEL_394;
        }
        goto LABEL_282;
      case 0x24u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 304) |= 4u;
        uint64_t v72 = *(void *)(a1 + 208);
        if (!v72) {
          goto LABEL_400;
        }
        goto LABEL_401;
      case 0x25u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 304) |= 8u;
        uint64_t v73 = *(_DWORD **)(a1 + 216);
        if (!v73) {
          goto LABEL_184;
        }
        goto LABEL_414;
      case 0x26u:
        int v11 = TagFallback & 7;
        if (v11 != 5) {
          goto LABEL_221;
        }
        v284[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284)) {
          goto LABEL_44;
        }
        return 0;
      case 0x27u:
        int v11 = TagFallback & 7;
        if (v11 == 5) {
          goto LABEL_186;
        }
        goto LABEL_221;
      case 0x28u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 304) |= 0x20u;
        uint64_t v29 = *(void *)(a1 + 232);
        if (!v29) {
          goto LABEL_191;
        }
        goto LABEL_192;
      case 0x29u:
        int v11 = TagFallback & 7;
        if (v11 != 5) {
          goto LABEL_221;
        }
        v284[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284)) {
          goto LABEL_53;
        }
        return 0;
      case 0x2Au:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 304) |= 0x80u;
        uint64_t v32 = *(void *)(a1 + 240);
        if (!v32) {
          goto LABEL_197;
        }
        goto LABEL_198;
      case 0x2Bu:
        int v11 = TagFallback & 7;
        if (v11 != 5) {
          goto LABEL_221;
        }
        v284[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284)) {
          goto LABEL_203;
        }
        return 0;
      case 0x2Cu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 304) |= 0x400u;
        uint64_t v80 = *(void *)(a1 + 256);
        if (!v80) {
          goto LABEL_210;
        }
        goto LABEL_211;
      case 0x2Du:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 304) |= 0x800u;
        uint64_t v33 = *(void *)(a1 + 264);
        if (!v33) {
          goto LABEL_60;
        }
        goto LABEL_269;
      case 0x2Eu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 304) |= 0x1000u;
        uint64_t v34 = *(void *)(a1 + 272);
        if (!v34) {
          goto LABEL_63;
        }
        goto LABEL_307;
      case 0x2Fu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 304) |= 0x2000u;
        uint64_t v82 = *(void *)(a1 + 280);
        if (!v82) {
          goto LABEL_216;
        }
        goto LABEL_333;
      case 0x30u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_221;
        }
        *(_DWORD *)(a1 + 304) |= 0x4000u;
        uint64_t v83 = *(void *)(a1 + 288);
        if (!v83) {
          goto LABEL_219;
        }
        goto LABEL_358;
      default:
        int v11 = TagFallback & 7;
LABEL_221:
        if (v11 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v8, a4) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_100038394()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000383BC()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000383E4()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10003840C()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_100038444()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10003846C()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_100038494()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_100038588()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000385D8()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_100038600()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100038628(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  while (2)
  {
    int v7 = (char *)*((void *)this + 1);
    if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if (v9 != 5) {
          goto LABEL_36;
        }
        unsigned int v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 16) = v20;
        *(_DWORD *)(a1 + 44) |= 1u;
        int v10 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 != 21) {
          continue;
        }
        *((void *)this + 1) = v10 + 1;
        goto LABEL_15;
      case 2u:
        int v9 = TagFallback & 7;
        if (v9 != 5) {
          goto LABEL_36;
        }
LABEL_15:
        unsigned int v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 20) = v20;
        *(_DWORD *)(a1 + 44) |= 2u;
        int v11 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 != 29) {
          continue;
        }
        *((void *)this + 1) = v11 + 1;
LABEL_20:
        unsigned int v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 24) = v20;
        *(_DWORD *)(a1 + 44) |= 4u;
        unint64_t v12 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 != 37) {
          continue;
        }
        *((void *)this + 1) = v12 + 1;
LABEL_25:
        unsigned int v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 28) = v20;
        *(_DWORD *)(a1 + 44) |= 8u;
        __int16 v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 != 45) {
          continue;
        }
        *((void *)this + 1) = v13 + 1;
LABEL_30:
        unsigned int v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 32) = v20;
        *(_DWORD *)(a1 + 44) |= 0x10u;
        int v15 = (unsigned char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        if ((unint64_t)v15 >= v14 || *v15 != 48) {
          continue;
        }
        uint64_t v16 = v15 + 1;
        *((void *)this + 1) = v16;
        unsigned int v20 = 0;
        if ((unint64_t)v16 >= v14) {
          goto LABEL_42;
        }
LABEL_40:
        if (*v16 < 0)
        {
LABEL_42:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
          if (!result) {
            return result;
          }
          unsigned int v17 = v20;
          uint64_t v18 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v14 = *((void *)this + 2);
        }
        else
        {
          unsigned int v17 = *v16;
          uint64_t v18 = (unsigned __int8 *)(v16 + 1);
          *((void *)this + 1) = v18;
        }
        *(unsigned char *)(a1 + 36) = v17 != 0;
        *(_DWORD *)(a1 + 44) |= 0x20u;
        if (v18 != (unsigned __int8 *)v14 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v9 = TagFallback & 7;
        if (v9 == 5) {
          goto LABEL_20;
        }
        goto LABEL_36;
      case 4u:
        int v9 = TagFallback & 7;
        if (v9 == 5) {
          goto LABEL_25;
        }
        goto LABEL_36;
      case 5u:
        int v9 = TagFallback & 7;
        if (v9 == 5) {
          goto LABEL_30;
        }
        goto LABEL_36;
      case 6u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_36;
        }
        uint64_t v16 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        unsigned int v20 = 0;
        if ((unint64_t)v16 < v14) {
          goto LABEL_40;
        }
        goto LABEL_42;
      default:
        int v9 = TagFallback & 7;
LABEL_36:
        if (v9 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v6, a4) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_100038974(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (*a3) {
    sub_1000389D4();
  }
  sub_1000389D4();
}

void sub_1000389D4()
{
}

void sub_10003C568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,char a23,char a24,int a25,int a26,__int16 a27,char a28,char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v31 = *v29;
  uint64_t *v29 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003CD28(uint64_t a1)
{
  *(void *)a1 = off_10045E310;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_10003CD74(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void *sub_10003CD88(void *a1)
{
  *a1 = off_10045E3C0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}

void sub_10003CDD0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003CDE4()
{
  return 1;
}

uint64_t sub_10003CDEC()
{
  return 1;
}

uint64_t sub_10003CDF4()
{
  return 550;
}

uint64_t sub_10003CDFC()
{
  return 8;
}

const char *sub_10003CE04()
{
  return "STROBE_GPS_AUX_DEEP_INDOOR_INTERVAL_NS";
}

const char *sub_10003CE14()
{
  return "STROBE_GPS_AUX_NEAR_EDGE_INTERVAL_NS";
}

const char *sub_10003CE24()
{
  return "STROBE_GPS_DEEP_INDOOR_INTERVAL_NS";
}

const char *sub_10003CE34()
{
  return "SCAN_STRATEGY_DEFAULT_CHANNEL_SET";
}

const char *sub_10003CE44()
{
  return "STROBE_GPS_NEAR_EDGE_INTERVAL_NS";
}

const char *sub_10003CE54()
{
  return "STROBE_GPS_NO_YIELD_INTERVAL_NS";
}

const char *sub_10003CE64()
{
  return "CHANNELS_PER_SCAN_REQUEST";
}

const char *sub_10003CE74()
{
  return "SUPPRESS_PIPELINED_IN_AR";
}

const char *sub_10003CE84()
{
  return "OCCUPANCY_FOR_DR_ENABLED";
}

const char *sub_10003CE94()
{
  return "SUPPRESS_INDOOR_IN_AR";
}

const char *sub_10003CEA4()
{
  return "ENABLE_VIO_FUSION";
}

const char *sub_10003CEB4()
{
  return "UNIFY_GPS_INDOOR";
}

const char *sub_10003CEC4()
{
  return "SCAN_PRIORITY";
}

uint64_t sub_10003CED4(uint64_t a1)
{
  *(void *)a1 = off_10045F700;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_WORD *)(a1 + 48) = 0;
  return a1;
}

void sub_10003CF28(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void *sub_10003CF3C(void *a1)
{
  *a1 = off_10045E940;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_10003CF88(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003CF9C(uint64_t a1)
{
  *(void *)a1 = off_10045F650;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  return a1;
}

void sub_10003CFF0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D004(uint64_t a1)
{
  *(void *)a1 = off_10045DFA0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_10003D054(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D068(uint64_t a1)
{
  *(void *)a1 = off_10045E050;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_10003D0B4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D0C8(uint64_t a1)
{
  *(void *)a1 = off_10045F4F0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(unsigned char *)(a1 + 48) = 0;
  return a1;
}

void sub_10003D11C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void *sub_10003D130(void *a1)
{
  *a1 = off_10045F5A0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_10003D17C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D190(uint64_t a1)
{
  *(void *)a1 = off_10045E260;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_10003D1DC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D1F0(uint64_t a1)
{
  *(void *)a1 = off_10045E890;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 36) = 0;
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  return a1;
}

void sub_10003D24C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void *sub_10003D260(void *a1)
{
  *a1 = off_10045E730;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[5] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(void *)((char *)a1 + 29) = 0;
  return a1;
}

void sub_10003D2B0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D2C4(uint64_t a1)
{
  *(void *)a1 = off_10045E1B0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}

void sub_10003D310(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D324(uint64_t a1)
{
  *(void *)a1 = off_10045E100;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_10003D374(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D388(uint64_t a1)
{
  *(void *)a1 = off_10045F7B0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return a1;
}

void sub_10003D3D8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D3EC(uint64_t a1)
{
  *(void *)a1 = off_10045E680;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_10003D43C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D450(uint64_t a1)
{
  *(void *)a1 = off_10045F910;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  return a1;
}

void sub_10003D4A4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D4B8(uint64_t a1)
{
  *(void *)a1 = off_10045E5D0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_10003D504(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D518(uint64_t a1)
{
  *(void *)a1 = off_10045E520;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_10003D568(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void *sub_10003D57C(void *a1)
{
  *a1 = off_10045F860;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_10003D5C8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void *sub_10003D5DC(void *a1)
{
  *a1 = off_10045E470;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[5] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(void *)((char *)a1 + 29) = 0;
  return a1;
}

void sub_10003D62C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D640(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 2) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 40);
    if (v5)
    {
      uint64_t v6 = *(void *)result;
      *(_DWORD *)(v6 + 112) = *(_DWORD *)(*(void *)result + 112) | 2;
      uint64_t v7 = *(void *)(v6 + 40);
      if (!v7) {
LABEL_6:
      }
        operator new();
    }
    else
    {
      uint64_t v5 = *(void *)(qword_100492AD0 + 40);
      uint64_t v8 = *(void *)result;
      *(_DWORD *)(v8 + 112) = *(_DWORD *)(*(void *)result + 112) | 2;
      uint64_t v7 = *(void *)(v8 + 40);
      if (!v7) {
        goto LABEL_6;
      }
    }
    uint64_t result = sub_10003DA28(v7, v5);
    int v4 = *(_DWORD *)(a2 + 112);
  }
  if ((v4 & 4) != 0)
  {
    uint64_t v9 = *(void *)v3;
    uint64_t v10 = *(void *)(a2 + 48);
    *(_DWORD *)(v9 + 112) = *(_DWORD *)(*(void *)v3 + 112) | 4;
    *(void *)(v9 + 48) = v10;
    int v4 = *(_DWORD *)(a2 + 112);
    if ((v4 & 8) == 0)
    {
LABEL_10:
      if ((v4 & 0x10) == 0) {
        goto LABEL_11;
      }
      goto LABEL_24;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)v3;
  int v12 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(v11 + 112) = *(_DWORD *)(*(void *)v3 + 112) | 8;
  *(_DWORD *)(v11 + 56) = v12;
  int v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = *(void *)v3;
  int v14 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(v13 + 112) = *(_DWORD *)(*(void *)v3 + 112) | 0x10;
  *(_DWORD *)(v13 + 60) = v14;
  int v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v15 = *(void *)v3;
  int v16 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(v15 + 112) = *(_DWORD *)(*(void *)v3 + 112) | 0x20;
  *(_DWORD *)(v15 + 64) = v16;
  int v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v17 = *(void *)v3;
  int v18 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(v17 + 112) = *(_DWORD *)(*(void *)v3 + 112) | 0x40;
  *(_DWORD *)(v17 + 68) = v18;
  int v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v19 = *(void *)v3;
  int v20 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(v19 + 112) = *(_DWORD *)(*(void *)v3 + 112) | 0x80;
  *(_DWORD *)(v19 + 72) = v20;
  int v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v21 = *(void *)v3;
  int v22 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(v21 + 112) = *(_DWORD *)(*(void *)v3 + 112) | 0x100;
  *(_DWORD *)(v21 + 76) = v22;
  int v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v23 = *(void *)v3;
  int v24 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(v23 + 112) = *(_DWORD *)(*(void *)v3 + 112) | 0x200;
  *(_DWORD *)(v23 + 80) = v24;
  int v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_17:
    if ((v4 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v25 = *(void *)v3;
  int v26 = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(v25 + 112) = *(_DWORD *)(*(void *)v3 + 112) | 0x400;
  *(_DWORD *)(v25 + 84) = v26;
  int v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v27 = *(void *)v3;
  int v28 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(v27 + 112) = *(_DWORD *)(*(void *)v3 + 112) | 0x800;
  *(_DWORD *)(v27 + 88) = v28;
  int v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_20;
    }
LABEL_33:
    uint64_t v31 = *(void *)v3;
    int v32 = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(v31 + 112) = *(_DWORD *)(*(void *)v3 + 112) | 0x2000;
    *(_DWORD *)(v31 + 104) = v32;
    if ((*(_DWORD *)(a2 + 112) & 0x4000) == 0) {
      return result;
    }
    goto LABEL_34;
  }
LABEL_32:
  uint64_t v29 = *(void *)v3;
  int v30 = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(v29 + 112) = *(_DWORD *)(*(void *)v3 + 112) | 0x1000;
  *(_DWORD *)(v29 + 92) = v30;
  int v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x2000) != 0) {
    goto LABEL_33;
  }
LABEL_20:
  if ((v4 & 0x4000) == 0) {
    return result;
  }
LABEL_34:
  uint64_t v33 = *(void *)(a2 + 96);
  if (v33)
  {
    uint64_t v34 = *(void *)v3;
    *(_DWORD *)(v34 + 112) = *(_DWORD *)(*(void *)v3 + 112) | 0x4000;
    uint64_t v35 = *(void *)(v34 + 96);
    if (!v35) {
LABEL_38:
    }
      operator new();
  }
  else
  {
    uint64_t v33 = *(void *)(qword_100492AD0 + 96);
    uint64_t v36 = *(void *)v3;
    *(_DWORD *)(v36 + 112) = *(_DWORD *)(*(void *)v3 + 112) | 0x4000;
    uint64_t v35 = *(void *)(v36 + 96);
    if (!v35) {
      goto LABEL_38;
    }
  }

  return sub_1001B9480(v35, v33);
}

void sub_10003D94C()
{
}

void sub_10003D970()
{
}

uint64_t sub_10003D994(uint64_t a1)
{
  *(void *)a1 = off_10045E7E0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 191) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  return a1;
}

void sub_10003DA14(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003DA28(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v4 = result;
    (*(void (**)(uint64_t))(*(void *)result + 32))(result);
    return sub_10003E17C(v4, a2);
  }
  return result;
}

uint64_t sub_10003DA94(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = (unsigned int *)(this + 300);
  char v3 = *(unsigned char *)(this + 300);
  if (v3)
  {
    *(_OWORD *)(this + 16) = 0u;
    *(_OWORD *)(this + 32) = 0u;
    if (v3 < 0)
    {
      this = *(void *)(this + 48);
      if (this)
      {
        if (*(unsigned char *)(this + 32))
        {
          *(void *)(this + 16) = 0;
          *(_DWORD *)(this + 24) = 0;
        }
        uint64_t v4 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 24) = 0;
        if (v4) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
  }
  unsigned int v5 = *v2;
  if ((*v2 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      this = *(void *)(v1 + 56);
      if (this)
      {
        if (*(unsigned char *)(this + 44))
        {
          *(void *)(this + 16) = 0;
          *(void *)(this + 24) = 0;
          *(void *)(this + 32) = 0;
        }
        uint64_t v6 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 36) = 0;
        if (v6) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    if ((*((unsigned char *)v2 + 1) & 2) != 0)
    {
      uint64_t v7 = *(void *)(v1 + 64);
      if (v7)
      {
        char v8 = *(unsigned char *)(v7 + 44);
        if (v8)
        {
          *(void *)(v7 + 16) = 0;
          *(void *)(v7 + 24) = 0;
          if ((v8 & 0x10) != 0)
          {
            this = *(void *)(v7 + 32);
            if (this)
            {
              if (*(unsigned char *)(this + 28)) {
                *(void *)(this + 16) = 0;
              }
              uint64_t v9 = *(void *)(this + 8);
              this += 8;
              *(_DWORD *)(this + 20) = 0;
              if (v9) {
                this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
              }
            }
          }
        }
        uint64_t v11 = *(void *)(v7 + 8);
        uint64_t v10 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v7 + 8);
        *((_DWORD *)v10 + 9) = 0;
        if (v11) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v10);
        }
      }
    }
    if ((*((unsigned char *)v2 + 1) & 4) != 0)
    {
      this = *(void *)(v1 + 72);
      if (this)
      {
        if (*(unsigned char *)(this + 48))
        {
          *(void *)(this + 16) = 0;
          *(void *)(this + 24) = 0;
          *(_DWORD *)(this + 40) = 0;
          *(void *)(this + 32) = 0;
        }
        uint64_t v12 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 40) = 0;
        if (v12) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    *(_DWORD *)(v1 + 96) = 0;
    if ((*(unsigned char *)(v1 + 301) & 0x10) != 0)
    {
      this = *(void *)(v1 + 80);
      if (this)
      {
        if (*(unsigned char *)(this + 44))
        {
          *(void *)(this + 16) = 0;
          *(void *)(this + 24) = 0;
          *(void *)(this + 29) = 0;
        }
        uint64_t v13 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 36) = 0;
        if (v13) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    if ((*((unsigned char *)v2 + 1) & 0x20) != 0)
    {
      this = *(void *)(v1 + 88);
      if (this)
      {
        int v14 = *(_DWORD *)(this + 76);
        if ((_BYTE)v14)
        {
          *(_DWORD *)(this + 56) = 0;
          *(void *)(this + 24) = 0;
          *(void *)(this + 32) = 0;
          *(void *)(this + 16) = 0;
        }
        if ((v14 & 0xFF00) != 0)
        {
          *(void *)(this + 64) = 0;
          *(_DWORD *)(this + 60) = 0;
        }
        uint64_t v15 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 40) = 0;
        *(_DWORD *)(this + 68) = 0;
        if (v15) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    if ((*((unsigned char *)v2 + 1) & 0x40) != 0)
    {
      this = *(void *)(v1 + 104);
      if (this)
      {
        if (*(unsigned char *)(this + 40))
        {
          *(void *)(this + 16) = 0;
          *(void *)(this + 24) = 0;
          *(_DWORD *)(this + 32) = 0;
        }
        uint64_t v16 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 32) = 0;
        if (v16) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    *(void *)(v1 + 112) = 0;
    unsigned int v5 = *(_DWORD *)(v1 + 300);
  }
  if ((v5 & 0xFF0000) != 0)
  {
    *(_DWORD *)(v1 + 100) = 0;
    *(void *)(v1 + 120) = 0;
    *(void *)(v1 + 128) = 0;
    *(_DWORD *)(v1 + 136) = 0;
    if ((v5 & 0x400000) != 0)
    {
      this = *(void *)(v1 + 144);
      if (this)
      {
        if (*(unsigned char *)(this + 24)) {
          *(_DWORD *)(this + 16) = 0;
        }
        uint64_t v17 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 16) = 0;
        if (v17) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    *(_DWORD *)(v1 + 140) = 0;
    unsigned int v5 = *(_DWORD *)(v1 + 300);
  }
  if (HIBYTE(v5))
  {
    *(void *)(v1 + 152) = 0;
    if ((v5 & 0x2000000) != 0)
    {
      this = *(void *)(v1 + 160);
      if (this)
      {
        if (*(unsigned char *)(this + 44))
        {
          *(void *)(this + 16) = 0;
          *(void *)(this + 24) = 0;
          *(void *)(this + 29) = 0;
        }
        uint64_t v18 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 36) = 0;
        if (v18) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    if ((*((unsigned char *)v2 + 3) & 4) != 0)
    {
      this = *(void *)(v1 + 168);
      if (this)
      {
        if (*(unsigned char *)(this + 56))
        {
          *(unsigned char *)(this + 48) = 0;
          *(_OWORD *)(this + 16) = 0u;
          *(_OWORD *)(this + 32) = 0u;
        }
        uint64_t v19 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 48) = 0;
        if (v19) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    if ((*((unsigned char *)v2 + 3) & 8) != 0)
    {
      this = *(void *)(v1 + 176);
      if (this)
      {
        if (*(unsigned char *)(this + 76))
        {
          *(void *)(this + 64) = 0;
          *(_OWORD *)(this + 32) = 0u;
          *(_OWORD *)(this + 48) = 0u;
          *(_OWORD *)(this + 16) = 0u;
        }
        uint64_t v20 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 68) = 0;
        if (v20) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    *(_WORD *)(v1 + 192) = 0;
    *(void *)(v1 + 184) = 0;
    *(_DWORD *)(v1 + 196) = 0;
  }
  if (*(unsigned char *)(v1 + 304))
  {
    if (*(unsigned char *)(v1 + 304))
    {
      this = *(void *)(v1 + 200);
      if (this)
      {
        int v21 = *(_DWORD *)(this + 44);
        if ((_BYTE)v21)
        {
          *(void *)(this + 16) = 0;
          *(void *)(this + 24) = 0;
          *(_DWORD *)(this + 32) = 0;
        }
        if ((v21 & 0xFF00) != 0) {
          *(_DWORD *)(this + 36) = 0;
        }
        uint64_t v22 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 36) = 0;
        if (v22) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    *(unsigned char *)(v1 + 194) = 0;
    if ((*(unsigned char *)(v1 + 304) & 4) != 0)
    {
      this = *(void *)(v1 + 208);
      if (this)
      {
        int v23 = *(_DWORD *)(this + 60);
        if ((_BYTE)v23)
        {
          *(void *)(this + 40) = 0;
          *(_DWORD *)(this + 36) = 0;
          *(void *)(this + 16) = 0;
          *(void *)(this + 24) = 0;
          *(_WORD *)(this + 32) = 0;
        }
        if ((v23 & 0xFF00) != 0) {
          *(void *)(this + 48) = 0;
        }
        uint64_t v24 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 52) = 0;
        if (v24) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    if ((*(unsigned char *)(v1 + 304) & 8) != 0)
    {
      this = *(void *)(v1 + 216);
      if (this)
      {
        if (*(unsigned char *)(this + 36))
        {
          *(void *)(this + 16) = 0;
          *(void *)(this + 24) = 0;
        }
        uint64_t v25 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 28) = 0;
        if (v25) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    *(_DWORD *)(v1 + 224) = 0;
    if ((*(unsigned char *)(v1 + 304) & 0x20) != 0)
    {
      this = *(void *)(v1 + 232);
      if (this)
      {
        int v26 = *(_DWORD *)(this + 44);
        if ((_BYTE)v26)
        {
          *(void *)(this + 16) = 0;
          *(void *)(this + 24) = 0;
          *(_DWORD *)(this + 32) = 0;
        }
        if ((v26 & 0xFF00) != 0) {
          *(_DWORD *)(this + 36) = 0;
        }
        uint64_t v27 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 36) = 0;
        if (v27) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    *(_DWORD *)(v1 + 228) = 0;
    if ((*(unsigned char *)(v1 + 304) & 0x80) != 0)
    {
      uint64_t v28 = *(void *)(v1 + 240);
      if (v28)
      {
        char v29 = *(unsigned char *)(v28 + 44);
        if (v29)
        {
          *(void *)(v28 + 16) = 0;
          *(void *)(v28 + 24) = 0;
          if ((v29 & 0x10) != 0)
          {
            this = *(void *)(v28 + 32);
            if (this)
            {
              if (*(unsigned char *)(this + 28)) {
                *(void *)(this + 16) = 0;
              }
              uint64_t v30 = *(void *)(this + 8);
              this += 8;
              *(_DWORD *)(this + 20) = 0;
              if (v30) {
                this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
              }
            }
          }
        }
        uint64_t v32 = *(void *)(v28 + 8);
        uint64_t v31 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v28 + 8);
        *((_DWORD *)v31 + 9) = 0;
        if (v32) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v31);
        }
      }
    }
  }
  int v33 = *(_DWORD *)(v1 + 304);
  if ((v33 & 0xFF00) != 0)
  {
    *(void *)(v1 + 248) = 0;
    if ((v33 & 0x400) != 0)
    {
      this = *(void *)(v1 + 256);
      if (this)
      {
        if (*(unsigned char *)(this + 36))
        {
          *(void *)(this + 16) = 0;
          *(void *)(this + 24) = 0;
        }
        uint64_t v34 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 28) = 0;
        if (v34) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    if ((*(unsigned char *)(v1 + 305) & 8) != 0)
    {
      this = *(void *)(v1 + 264);
      if (this)
      {
        if (*(unsigned char *)(this + 60))
        {
          *(void *)(this + 48) = 0;
          *(_OWORD *)(this + 16) = 0u;
          *(_OWORD *)(this + 32) = 0u;
        }
        uint64_t v35 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 52) = 0;
        if (v35) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    if ((*(unsigned char *)(v1 + 305) & 0x10) != 0)
    {
      uint64_t v36 = *(void *)(v1 + 272);
      if (v36)
      {
        int v37 = *(_DWORD *)(v36 + 44);
        if ((_BYTE)v37)
        {
          *(_WORD *)(v36 + 24) = 0;
          if ((v37 & 4) != 0)
          {
            this = *(void *)(v36 + 16);
            if (this)
            {
              if (*(unsigned char *)(this + 36))
              {
                *(void *)(this + 16) = 0;
                *(void *)(this + 24) = 0;
              }
              uint64_t v38 = *(void *)(this + 8);
              this += 8;
              *(_DWORD *)(this + 28) = 0;
              if (v38) {
                this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
              }
            }
          }
          *(void *)(v36 + 26) = 0;
          int v37 = *(_DWORD *)(v36 + 44);
        }
        if ((v37 & 0xFF00) != 0)
        {
          *(_DWORD *)(v36 + 36) = 0;
          *(unsigned char *)(v36 + 34) = 0;
        }
        uint64_t v40 = *(void *)(v36 + 8);
        unint64_t v39 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v36 + 8);
        *((_DWORD *)v39 + 9) = 0;
        if (v40) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v39);
        }
      }
    }
    if ((*(unsigned char *)(v1 + 305) & 0x20) != 0)
    {
      this = *(void *)(v1 + 280);
      if (this)
      {
        if (*(unsigned char *)(this + 48))
        {
          *(void *)(this + 16) = 0;
          *(void *)(this + 24) = 0;
          *(unsigned char *)(this + 40) = 0;
          *(void *)(this + 32) = 0;
        }
        uint64_t v41 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 40) = 0;
        if (v41) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    if ((*(unsigned char *)(v1 + 305) & 0x40) != 0)
    {
      this = *(void *)(v1 + 288);
      if (this)
      {
        if (*(unsigned char *)(this + 56))
        {
          *(_WORD *)(this + 48) = 0;
          *(_OWORD *)(this + 16) = 0u;
          *(_OWORD *)(this + 32) = 0u;
        }
        uint64_t v42 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 48) = 0;
        if (v42) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
  }
  *(void *)uint64_t v2 = 0;
  uint64_t v44 = *(void *)(v1 + 8);
  size_t v43 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  if (v44)
  {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v43);
  }
  return this;
}

uint64_t sub_10003E040@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if ((*(unsigned char *)(*(void *)result + 112) & 2) != 0)
  {
    uint64_t v3 = *(void *)(*(void *)result + 40);
    if (!v3) {
      uint64_t v3 = *(void *)(qword_100492AD0 + 40);
    }
    *a2 = 0;
    uint64_t result = sub_10003E0AC((uint64_t)(a2 + 8), v3);
    *a2 = 1;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t sub_10003E0AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10045E7E0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 191) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  sub_10003E17C(a1, a2);
  return a1;
}

void sub_10003E14C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_10003E168(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E17C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v75);
    unsigned int v4 = *(_DWORD *)(a2 + 300);
    if (!(_BYTE)v4) {
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v4 = *(_DWORD *)(a2 + 300);
    if (!(_BYTE)v4)
    {
LABEL_13:
      if ((v4 & 0xFF00) == 0) {
        goto LABEL_62;
      }
      goto LABEL_28;
    }
  }
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 300) |= 1u;
    *(void *)(a1 + 16) = v5;
    unsigned int v4 = *(_DWORD *)(a2 + 300);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  int v6 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 300) |= 2u;
  *(_DWORD *)(a1 + 24) = v6;
  unsigned int v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  int v7 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 300) |= 4u;
  *(_DWORD *)(a1 + 28) = v7;
  unsigned int v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v8 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 300) |= 8u;
  *(_DWORD *)(a1 + 32) = v8;
  unsigned int v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v9 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 300) |= 0x10u;
  *(_DWORD *)(a1 + 36) = v9;
  unsigned int v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v10 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 300) |= 0x20u;
  *(_DWORD *)(a1 + 40) = v10;
  unsigned int v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v11 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 300) |= 0x40u;
  *(_DWORD *)(a1 + 44) = v11;
  unsigned int v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x80) == 0) {
    goto LABEL_13;
  }
LABEL_22:
  *(_DWORD *)(a1 + 300) |= 0x80u;
  uint64_t v12 = *(_DWORD **)(a1 + 48);
  if (!v12) {
    operator new();
  }
  uint64_t v13 = *(void *)(a2 + 48);
  if (v13)
  {
    sub_1001BFB58(v12, v13);
    unsigned int v4 = *(_DWORD *)(a2 + 300);
    if ((v4 & 0xFF00) == 0) {
      goto LABEL_62;
    }
  }
  else
  {
    sub_1001BFB58(v12, *(void *)(qword_10047F018 + 48));
    unsigned int v4 = *(_DWORD *)(a2 + 300);
    if ((v4 & 0xFF00) == 0) {
      goto LABEL_62;
    }
  }
LABEL_28:
  if ((v4 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x100u;
    int v14 = *(_DWORD **)(a1 + 56);
    if (!v14) {
      operator new();
    }
    uint64_t v15 = *(void *)(a2 + 56);
    if (!v15) {
      uint64_t v15 = *(void *)(qword_10047F018 + 56);
    }
    sub_1001C03B4(v14, v15);
    unsigned int v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x200) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x200u;
    uint64_t v16 = *(void *)(a1 + 64);
    if (!v16) {
      operator new();
    }
    uint64_t v17 = *(void *)(a2 + 64);
    if (!v17) {
      uint64_t v17 = *(void *)(qword_10047F018 + 64);
    }
    sub_1001C104C(v16, v17);
    unsigned int v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x400) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x400u;
    uint64_t v18 = *(_DWORD **)(a1 + 72);
    if (!v18) {
      operator new();
    }
    uint64_t v19 = *(void *)(a2 + 72);
    if (!v19) {
      uint64_t v19 = *(void *)(qword_10047F018 + 72);
    }
    sub_100033374(v18, v19);
    unsigned int v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x800) != 0)
  {
    int v20 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(a1 + 300) |= 0x800u;
    *(_DWORD *)(a1 + 96) = v20;
    unsigned int v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x1000) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x1000u;
    uint64_t v21 = *(void *)(a1 + 80);
    if (!v21) {
      operator new();
    }
    uint64_t v22 = *(void *)(a2 + 80);
    if (!v22) {
      uint64_t v22 = *(void *)(qword_10047F018 + 80);
    }
    sub_10003F480(v21, v22);
    unsigned int v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x2000) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x2000u;
    uint64_t v23 = *(void *)(a1 + 88);
    if (!v23) {
      operator new();
    }
    uint64_t v24 = *(void *)(a2 + 88);
    if (!v24) {
      uint64_t v24 = *(void *)(qword_10047F018 + 88);
    }
    sub_1000091A4(v23, v24);
    unsigned int v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x4000) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x4000u;
    uint64_t v25 = *(void *)(a1 + 104);
    if (!v25) {
      operator new();
    }
    uint64_t v26 = *(void *)(a2 + 104);
    if (!v26) {
      uint64_t v26 = *(void *)(qword_10047F018 + 104);
    }
    sub_1001BD824(v25, v26);
    unsigned int v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x8000) != 0)
  {
    uint64_t v27 = *(void *)(a2 + 112);
    *(_DWORD *)(a1 + 300) |= 0x8000u;
    *(void *)(a1 + 112) = v27;
    unsigned int v4 = *(_DWORD *)(a2 + 300);
  }
LABEL_62:
  if ((v4 & 0xFF0000) == 0) {
    goto LABEL_72;
  }
  if ((v4 & 0x10000) != 0)
  {
    int v50 = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a1 + 300) |= 0x10000u;
    *(_DWORD *)(a1 + 100) = v50;
    unsigned int v4 = *(_DWORD *)(a2 + 300);
    if ((v4 & 0x20000) == 0)
    {
LABEL_65:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_66;
      }
      goto LABEL_137;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_65;
  }
  int v51 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 300) |= 0x20000u;
  *(_DWORD *)(a1 + 120) = v51;
  unsigned int v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x40000) == 0)
  {
LABEL_66:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_138;
  }
LABEL_137:
  int v52 = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 300) |= 0x40000u;
  *(_DWORD *)(a1 + 124) = v52;
  unsigned int v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x80000) == 0)
  {
LABEL_67:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_139;
  }
LABEL_138:
  int v53 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 300) |= 0x80000u;
  *(_DWORD *)(a1 + 128) = v53;
  unsigned int v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x100000) == 0)
  {
LABEL_68:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_140;
  }
LABEL_139:
  int v54 = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 300) |= 0x100000u;
  *(_DWORD *)(a1 + 132) = v54;
  unsigned int v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x200000) == 0)
  {
LABEL_69:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_141;
  }
LABEL_140:
  int v55 = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 300) |= 0x200000u;
  *(_DWORD *)(a1 + 136) = v55;
  unsigned int v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x400000) == 0)
  {
LABEL_70:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }
LABEL_141:
  *(_DWORD *)(a1 + 300) |= 0x400000u;
  int v56 = *(_DWORD **)(a1 + 144);
  if (!v56) {
    operator new();
  }
  uint64_t v57 = *(void *)(a2 + 144);
  if (v57)
  {
    sub_1001C3E9C(v56, v57);
    unsigned int v4 = *(_DWORD *)(a2 + 300);
    if ((v4 & 0x800000) == 0) {
      goto LABEL_72;
    }
LABEL_71:
    int v28 = *(_DWORD *)(a2 + 140);
    *(_DWORD *)(a1 + 300) |= 0x800000u;
    *(_DWORD *)(a1 + 140) = v28;
    unsigned int v4 = *(_DWORD *)(a2 + 300);
    goto LABEL_72;
  }
  sub_1001C3E9C(v56, *(void *)(qword_10047F018 + 144));
  unsigned int v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x800000) != 0) {
    goto LABEL_71;
  }
LABEL_72:
  if (!HIBYTE(v4)) {
    goto LABEL_94;
  }
  if ((v4 & 0x1000000) != 0)
  {
    uint64_t v29 = *(void *)(a2 + 152);
    *(_DWORD *)(a1 + 300) |= 0x1000000u;
    *(void *)(a1 + 152) = v29;
    unsigned int v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x2000000) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x2000000u;
    uint64_t v30 = *(void *)(a1 + 160);
    if (!v30) {
      operator new();
    }
    uint64_t v31 = *(void *)(a2 + 160);
    if (!v31) {
      uint64_t v31 = *(void *)(qword_10047F018 + 160);
    }
    sub_10002FAC0(v30, v31);
    unsigned int v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x4000000) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x4000000u;
    uint64_t v32 = *(void *)(a1 + 168);
    if (!v32) {
      operator new();
    }
    uint64_t v33 = *(void *)(a2 + 168);
    if (!v33) {
      uint64_t v33 = *(void *)(qword_10047F018 + 168);
    }
    sub_10009E0CC(v32, v33);
    unsigned int v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x8000000) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x8000000u;
    uint64_t v34 = *(void *)(a1 + 176);
    if (!v34) {
      operator new();
    }
    uint64_t v35 = *(void *)(a2 + 176);
    if (!v35) {
      uint64_t v35 = *(void *)(qword_10047F018 + 176);
    }
    sub_10009E308(v34, v35);
    unsigned int v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x10000000) != 0)
  {
    char v62 = *(unsigned char *)(a2 + 192);
    *(_DWORD *)(a1 + 300) |= 0x10000000u;
    *(unsigned char *)(a1 + 192) = v62;
    unsigned int v4 = *(_DWORD *)(a2 + 300);
    if ((v4 & 0x20000000) == 0)
    {
LABEL_92:
      if ((v4 & 0x40000000) == 0) {
        goto LABEL_93;
      }
      goto LABEL_153;
    }
  }
  else if ((v4 & 0x20000000) == 0)
  {
    goto LABEL_92;
  }
  uint64_t v63 = *(void *)(a2 + 184);
  *(_DWORD *)(a1 + 300) |= 0x20000000u;
  *(void *)(a1 + 184) = v63;
  unsigned int v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_93:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_94;
    }
LABEL_154:
    int v65 = *(_DWORD *)(a2 + 196);
    *(_DWORD *)(a1 + 300) |= 0x80000000;
    *(_DWORD *)(a1 + 196) = v65;
    int v36 = *(_DWORD *)(a2 + 304);
    if (!(_BYTE)v36) {
      goto LABEL_126;
    }
    goto LABEL_95;
  }
LABEL_153:
  char v64 = *(unsigned char *)(a2 + 193);
  *(_DWORD *)(a1 + 300) |= 0x40000000u;
  *(unsigned char *)(a1 + 193) = v64;
  if ((*(_DWORD *)(a2 + 300) & 0x80000000) != 0) {
    goto LABEL_154;
  }
LABEL_94:
  int v36 = *(_DWORD *)(a2 + 304);
  if (!(_BYTE)v36) {
    goto LABEL_126;
  }
LABEL_95:
  if (v36)
  {
    *(_DWORD *)(a1 + 304) |= 1u;
    uint64_t v37 = *(void *)(a1 + 200);
    if (!v37) {
      operator new();
    }
    uint64_t v38 = *(void *)(a2 + 200);
    if (!v38) {
      uint64_t v38 = *(void *)(qword_10047F018 + 200);
    }
    sub_1001BE148(v37, v38);
    int v36 = *(_DWORD *)(a2 + 304);
  }
  if ((v36 & 2) != 0)
  {
    char v39 = *(unsigned char *)(a2 + 194);
    *(_DWORD *)(a1 + 304) |= 2u;
    *(unsigned char *)(a1 + 194) = v39;
    int v36 = *(_DWORD *)(a2 + 304);
  }
  if ((v36 & 4) != 0)
  {
    *(_DWORD *)(a1 + 304) |= 4u;
    uint64_t v40 = *(void *)(a1 + 208);
    if (!v40) {
      operator new();
    }
    uint64_t v41 = *(void *)(a2 + 208);
    if (!v41) {
      uint64_t v41 = *(void *)(qword_10047F018 + 208);
    }
    sub_1001C8D28(v40, v41);
    int v36 = *(_DWORD *)(a2 + 304);
  }
  if ((v36 & 8) != 0)
  {
    *(_DWORD *)(a1 + 304) |= 8u;
    uint64_t v42 = *(_DWORD **)(a1 + 216);
    if (!v42) {
      operator new();
    }
    uint64_t v43 = *(void *)(a2 + 216);
    if (!v43) {
      uint64_t v43 = *(void *)(qword_10047F018 + 216);
    }
    sub_1001C8F14(v42, v43);
    int v36 = *(_DWORD *)(a2 + 304);
  }
  if ((v36 & 0x10) != 0)
  {
    int v44 = *(_DWORD *)(a2 + 224);
    *(_DWORD *)(a1 + 304) |= 0x10u;
    *(_DWORD *)(a1 + 224) = v44;
    int v36 = *(_DWORD *)(a2 + 304);
  }
  if ((v36 & 0x20) != 0)
  {
    *(_DWORD *)(a1 + 304) |= 0x20u;
    uint64_t v45 = *(void *)(a1 + 232);
    if (!v45) {
      operator new();
    }
    uint64_t v46 = *(void *)(a2 + 232);
    if (!v46) {
      uint64_t v46 = *(void *)(qword_10047F018 + 232);
    }
    sub_1001BE148(v45, v46);
    int v36 = *(_DWORD *)(a2 + 304);
  }
  if ((v36 & 0x40) != 0)
  {
    int v47 = *(_DWORD *)(a2 + 228);
    *(_DWORD *)(a1 + 304) |= 0x40u;
    *(_DWORD *)(a1 + 228) = v47;
    int v36 = *(_DWORD *)(a2 + 304);
  }
  if ((v36 & 0x80) != 0)
  {
    *(_DWORD *)(a1 + 304) |= 0x80u;
    uint64_t v48 = *(void *)(a1 + 240);
    if (!v48) {
      operator new();
    }
    uint64_t v49 = *(void *)(a2 + 240);
    if (!v49) {
      uint64_t v49 = *(void *)(qword_10047F018 + 240);
    }
    sub_1001C104C(v48, v49);
    int v36 = *(_DWORD *)(a2 + 304);
  }
LABEL_126:
  if ((v36 & 0xFF00) == 0) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if ((v36 & 0x100) != 0)
  {
    int v58 = *(_DWORD *)(a2 + 248);
    *(_DWORD *)(a1 + 304) |= 0x100u;
    *(_DWORD *)(a1 + 248) = v58;
    int v36 = *(_DWORD *)(a2 + 304);
    if ((v36 & 0x200) == 0)
    {
LABEL_129:
      if ((v36 & 0x400) == 0) {
        goto LABEL_130;
      }
      goto LABEL_147;
    }
  }
  else if ((v36 & 0x200) == 0)
  {
    goto LABEL_129;
  }
  int v59 = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 304) |= 0x200u;
  *(_DWORD *)(a1 + 252) = v59;
  int v36 = *(_DWORD *)(a2 + 304);
  if ((v36 & 0x400) == 0)
  {
LABEL_130:
    if ((v36 & 0x800) == 0) {
      goto LABEL_131;
    }
LABEL_171:
    *(_DWORD *)(a1 + 304) |= 0x800u;
    uint64_t v66 = *(void *)(a1 + 264);
    if (!v66) {
      operator new();
    }
    uint64_t v67 = *(void *)(a2 + 264);
    if (v67)
    {
      sub_1001C911C(v66, v67);
      int v36 = *(_DWORD *)(a2 + 304);
      if ((v36 & 0x1000) != 0) {
        goto LABEL_178;
      }
    }
    else
    {
      sub_1001C911C(v66, *(void *)(qword_10047F018 + 264));
      int v36 = *(_DWORD *)(a2 + 304);
      if ((v36 & 0x1000) != 0) {
        goto LABEL_178;
      }
    }
LABEL_132:
    if ((v36 & 0x2000) == 0) {
      goto LABEL_133;
    }
LABEL_184:
    *(_DWORD *)(a1 + 304) |= 0x2000u;
    uint64_t v70 = *(void *)(a1 + 280);
    if (!v70) {
      operator new();
    }
    uint64_t v71 = *(void *)(a2 + 280);
    if (v71)
    {
      sub_10009DEAC(v70, v71);
      if ((*(_DWORD *)(a2 + 304) & 0x4000) == 0) {
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
      }
    }
    else
    {
      sub_10009DEAC(v70, *(void *)(qword_10047F018 + 280));
      if ((*(_DWORD *)(a2 + 304) & 0x4000) == 0) {
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
      }
    }
    goto LABEL_190;
  }
LABEL_147:
  *(_DWORD *)(a1 + 304) |= 0x400u;
  uint64_t v60 = *(void *)(a1 + 256);
  if (!v60) {
    operator new();
  }
  uint64_t v61 = *(void *)(a2 + 256);
  if (v61)
  {
    sub_1001C903C(v60, v61);
    int v36 = *(_DWORD *)(a2 + 304);
    if ((v36 & 0x800) != 0) {
      goto LABEL_171;
    }
  }
  else
  {
    sub_1001C903C(v60, *(void *)(qword_10047F018 + 256));
    int v36 = *(_DWORD *)(a2 + 304);
    if ((v36 & 0x800) != 0) {
      goto LABEL_171;
    }
  }
LABEL_131:
  if ((v36 & 0x1000) == 0) {
    goto LABEL_132;
  }
LABEL_178:
  *(_DWORD *)(a1 + 304) |= 0x1000u;
  uint64_t v68 = *(void *)(a1 + 272);
  if (!v68) {
    operator new();
  }
  uint64_t v69 = *(void *)(a2 + 272);
  if (v69)
  {
    sub_1001C9264(v68, v69);
    int v36 = *(_DWORD *)(a2 + 304);
    if ((v36 & 0x2000) != 0) {
      goto LABEL_184;
    }
  }
  else
  {
    sub_1001C9264(v68, *(void *)(qword_10047F018 + 272));
    int v36 = *(_DWORD *)(a2 + 304);
    if ((v36 & 0x2000) != 0) {
      goto LABEL_184;
    }
  }
LABEL_133:
  if ((v36 & 0x4000) == 0) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
LABEL_190:
  *(_DWORD *)(a1 + 304) |= 0x4000u;
  uint64_t v72 = *(void *)(a1 + 288);
  if (!v72) {
    operator new();
  }
  uint64_t v73 = *(void *)(a2 + 288);
  if (!v73) {
    uint64_t v73 = *(void *)(qword_10047F018 + 288);
  }
  sub_10009DCA0(v72, v73);
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10003F1C4()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10003F1EC()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10003F214()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10003F3B8()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10003F430()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10003F458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10003F46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003F480(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 44);
  if (!(_BYTE)v4) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if (*(unsigned char *)(a2 + 44))
  {
    int v7 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 1u;
    *(_DWORD *)(a1 + 16) = v7;
    int v4 = *(_DWORD *)(a2 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) == 0)
  {
    goto LABEL_6;
  }
  int v8 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 44) |= 2u;
  *(_DWORD *)(a1 + 20) = v8;
  int v4 = *(_DWORD *)(a2 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v9 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 44) |= 4u;
  *(_DWORD *)(a1 + 24) = v9;
  int v4 = *(_DWORD *)(a2 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_16:
    int v11 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v11;
    if ((*(_DWORD *)(a2 + 44) & 0x20) == 0) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
    goto LABEL_10;
  }
LABEL_15:
  int v10 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) |= 8u;
  *(_DWORD *)(a1 + 28) = v10;
  int v4 = *(_DWORD *)(a2 + 44);
  if ((v4 & 0x10) != 0) {
    goto LABEL_16;
  }
LABEL_9:
  if ((v4 & 0x20) != 0)
  {
LABEL_10:
    char v5 = *(unsigned char *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(unsigned char *)(a1 + 36) = v5;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10003F5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10003F5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003F5E8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    if (a2)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    sub_10009BB18(a1, &v32);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v32;
    }
    long long v31 = v33;
    if (*(char *)(a1 + 23) < 0) {
      sub_1000559FC(&v29, *(void **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string v29 = *(std::string *)a1;
    }
    int v6 = sub_10009F58C();
    int v7 = sub_10009F680();
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    sub_10003FE4C(&v29, __p);
    while (1)
    {
      sub_10003FD90(&v29);
      if (!v8)
      {
LABEL_28:
        int v10 = 2;
        goto LABEL_29;
      }
      int v9 = (void *)HIBYTE(v26);
      if (v26 < 0) {
        int v9 = __p[1];
      }
      if (v9
        && sub_10003FB24((unint64_t)__p, (unint64_t)v6)
        && sub_10003FB24((unint64_t)__p, (unint64_t)v7))
      {
        sub_100056B28((const char *)&v29, (uint64_t)&v27, (int *)&v21);
        if (v21 == 3) {
          goto LABEL_28;
        }
        if (!v21) {
          break;
        }
      }
      sub_10009F934(&__dst);
      sub_100055820(&v29);
      sub_10003FE4C(&v29, &v21);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v21;
      uint64_t v26 = v22;
    }
    if (!a2)
    {
      exception = __cxa_allocate_exception(0x30uLL);
      long long v23 = v27;
      uint64_t v24 = v28;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::create_directories", a1, &v29, &v23);
    }
    *(_OWORD *)a2 = v27;
    a2[2] = v28;
    int v10 = 1;
LABEL_29:
    if (SHIBYTE(v26) < 0) {
      operator delete(__p[0]);
    }
    if (v10 == 2)
    {
      char v11 = 0;
      while ((void)v31 != (void)v33 || *((void *)&v31 + 1) != *((void *)&v33 + 1))
      {
        sub_100055F74((uint64_t)&v29, &__dst);
        std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          if (sub_10003FB24((unint64_t)&__dst, (unint64_t)v6))
          {
            if (sub_10003FB24((unint64_t)&__dst, (unint64_t)v7))
            {
              char v11 = sub_1000099F0((uint64_t)&v29, 0, &v27);
              if ((v28 & 1) != 0 && (v28 != 1 || v27))
              {
                if (!a2)
                {
                  uint64_t v17 = __cxa_allocate_exception(0x30uLL);
                  long long v19 = v27;
                  uint64_t v20 = v28;
                  boost::filesystem::filesystem_error::filesystem_error(v17, "boost::filesystem::create_directories", a1, &v29, &v19);
                }
                char v11 = 0;
                *(_OWORD *)a2 = v27;
                a2[2] = v28;
                break;
              }
            }
          }
        }
        sub_10009F68C(&__dst);
      }
    }
    else
    {
      char v11 = 0;
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (!a2)
    {
      uint64_t v15 = __cxa_allocate_exception(0x30uLL);
      v34[0] = 0;
      if ((qword_10047BFC8 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0
        || ((unsigned int (*)(uint64_t (***)(), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 22))
      {
        uint64_t v16 = 3;
      }
      else
      {
        uint64_t v16 = 2;
      }
      LODWORD(v34[0]) = 22;
      v34[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      v34[2] = v16;
      boost::filesystem::filesystem_error::filesystem_error(v15, "boost::filesystem::create_directories", a1, v34);
    }
    if ((qword_10047BFC8 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0
      || ((unsigned int (*)(uint64_t (***)(), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 22))
    {
      uint64_t v5 = 3;
    }
    else
    {
      uint64_t v5 = 2;
    }
    char v11 = 0;
    *a2 = 22;
    a2[1] = &boost::system::detail::generic_cat_holder<void>::instance;
    a2[2] = v5;
  }
  return v11 & 1;
}

void sub_10003FA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003FB24(unint64_t a1, unint64_t a2)
{
  sub_10004014C(a1, &v11);
  memset(v10, 0, 24);
  v10[3] = a1;
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  v10[4] = v4;
  sub_10004014C(a2, &__p);
  memset(v8, 0, 24);
  v8[3] = a2;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  v8[4] = v5;
  uint64_t v6 = sub_10003FBE4(&v11, (uint64_t)v10, &__p, (uint64_t)v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v6;
}

uint64_t sub_10003FBE4(std::string *a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
  std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
  uint64_t v8 = *(char **)(a2 + 24);
  std::string::size_type v9 = *(void *)(a2 + 32);
  if (data == v8 && size == v9)
  {
LABEL_16:
    uint64_t v8 = data;
    std::string::size_type v9 = size;
  }
  else if (a3[1].__r_.__value_.__r.__words[0] != *(void *)(a4 + 24) {
         || a3[1].__r_.__value_.__l.__size_ != *(void *)(a4 + 32))
  }
  {
    while ((sub_100055BA0(a1, (void **)&a3->__r_.__value_.__l.__data_) & 0x80) == 0)
    {
      if ((sub_100055BA0(a3, (void **)&a1->__r_.__value_.__l.__data_) & 0x80) != 0) {
        return 1;
      }
      sub_10009F68C(a1);
      sub_10009F68C(a3);
      std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
      std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
      uint64_t v8 = *(char **)(a2 + 24);
      std::string::size_type v9 = *(void *)(a2 + 32);
      if (data == v8 && size == v9) {
        goto LABEL_16;
      }
      if (a3[1].__r_.__value_.__r.__words[0] == *(void *)(a4 + 24)
        && a3[1].__r_.__value_.__l.__size_ == *(void *)(a4 + 32))
      {
        goto LABEL_17;
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_17:
  if (data != v8 || size != v9) {
    return 1;
  }
  if (a3[1].__r_.__value_.__r.__words[0] != *(void *)(a4 + 24)
    || a3[1].__r_.__value_.__l.__size_ != *(void *)(a4 + 32))
  {
    return 0xFFFFFFFFLL;
  }
  return 0;
}

void *sub_10003FCE8(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    void v4[2] = v9 | 0x8000000000000000;
    void *v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

unint64_t sub_10003FD90(unsigned char *a1)
{
  uint64_t v1 = a1;
  unint64_t v10 = 0;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned char **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }
  else
  {
    unint64_t v2 = a1[23];
  }
  unint64_t v3 = sub_100056140(a1, v2, &v10);
  unint64_t result = v10;
  unint64_t v5 = v1[23];
  if ((char)v1[23] < 0)
  {
    unint64_t v6 = *((void *)v1 + 1);
    if (v3 >= v6) {
      return result;
    }
  }
  else
  {
    unint64_t v6 = v1[23];
    if (v3 >= v5) {
      return result;
    }
  }
  unint64_t v7 = v3 + 1;
  if (v6 <= v3 + 1) {
    unint64_t result = v3 + 1;
  }
  else {
    unint64_t result = v6;
  }
  while (v7 < v6)
  {
    uint64_t v8 = v1;
    if ((v5 & 0x80) != 0) {
      uint64_t v8 = *(unsigned char **)v1;
    }
    int v9 = v8[v7++];
    if (v9 != 47) {
      return v7 - 1;
    }
  }
  return result;
}

void *sub_10003FE4C@<X0>(unsigned char *a1@<X0>, void *a2@<X8>)
{
  unint64_t v2 = a1;
  unint64_t v4 = sub_10003FEAC(a1);
  if ((char)v2[23] < 0)
  {
    unint64_t v6 = v2;
    unint64_t v2 = *(unsigned char **)v2;
    uint64_t v5 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v5 = v2[23];
  }

  return sub_10003FCE8(a2, &v2[v5 - v4], &v2[v5], v4);
}

unint64_t sub_10003FEAC(unsigned char *a1)
{
  uint64_t v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned char **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }
  else
  {
    unint64_t v2 = a1[23];
  }
  unint64_t v10 = 0;
  sub_100056140(a1, v2, &v10);
  if (v2 >= v10) {
    unint64_t v3 = v10;
  }
  else {
    unint64_t v3 = v2;
  }
  if ((char)v1[23] >= 0) {
    unint64_t v4 = v1;
  }
  else {
    unint64_t v4 = *(unsigned char **)v1;
  }
  uint64_t v5 = v4 - 1;
  unint64_t v6 = v2;
  while (v6 > v10)
  {
    unint64_t v7 = v6 - 1;
    int v8 = v5[v6--];
    if (v8 == 47)
    {
      unint64_t v3 = v7 + 1;
      return v2 - v3;
    }
  }
  return v2 - v3;
}

void sub_10003FF44(unint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v19 = v2;
    uint64_t v20 = v3;
    unint64_t v6 = a1 + 40;
    if (a1 + 40 != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = a1;
      do
      {
        unint64_t v10 = v6;
        if ((sub_10004008C(v8, v6) & 0x80000000) != 0)
        {
          long long v16 = *(_OWORD *)v10;
          uint64_t v17 = *(void *)(v10 + 16);
          *(void *)(v10 + 8) = 0;
          *(void *)(v10 + 16) = 0;
          *(void *)unint64_t v10 = 0;
          long long v18 = *(_OWORD *)(v8 + 64);
          uint64_t v11 = v7;
          while (1)
          {
            uint64_t v12 = a1 + v11;
            uint64_t v13 = (void **)(a1 + v11 + 40);
            if (*(char *)(a1 + v11 + 63) < 0) {
              operator delete(*v13);
            }
            *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
            *(void *)(a1 + v11 + 56) = *(void *)(v12 + 16);
            *(unsigned char *)(v12 + 23) = 0;
            *(unsigned char *)uint64_t v12 = 0;
            uint64_t v14 = *(void *)(v12 + 32);
            *(void *)(v12 + 64) = *(void *)(v12 + 24);
            *(void *)(v12 + 72) = v14;
            if (!v11) {
              break;
            }
            v11 -= 40;
            if ((sub_10004008C(v11 + a1, (unint64_t)&v16) & 0x80000000) == 0)
            {
              uint64_t v15 = a1 + v11 + 40;
              if ((*(char *)(v15 + 23) & 0x80000000) == 0) {
                goto LABEL_4;
              }
              goto LABEL_15;
            }
          }
          uint64_t v15 = a1;
          if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
            goto LABEL_4;
          }
LABEL_15:
          operator delete(*(void **)v15);
LABEL_4:
          *(_OWORD *)uint64_t v15 = v16;
          *(void *)(v15 + 16) = v17;
          uint64_t v9 = *((void *)&v18 + 1);
          *(void *)(v15 + 24) = v18;
          *(void *)(v15 + 32) = v9;
        }
        unint64_t v6 = v10 + 40;
        v7 += 40;
        unint64_t v8 = v10;
      }
      while (v10 + 40 != a2);
    }
  }
}

uint64_t sub_10004008C(unint64_t a1, unint64_t a2)
{
  sub_10004014C(a1, &v11);
  memset(v10, 0, 24);
  v10[3] = a1;
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  v10[4] = v4;
  sub_10004014C(a2, &__p);
  memset(v8, 0, 24);
  v8[3] = a2;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  v8[4] = v5;
  uint64_t v6 = sub_100055A9C(&v11, (uint64_t)v10, &__p, (uint64_t)v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v6;
}

unint64_t sub_10004014C@<X0>(unint64_t result@<X0>, std::string *a2@<X8>)
{
  unint64_t v2 = result;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2[1].__r_.__value_.__r.__words[0] = result;
  int v4 = *(char *)(result + 23);
  uint64_t v5 = *(void *)(result + 8);
  if (v4 >= 0) {
    unint64_t v6 = *(unsigned __int8 *)(result + 23);
  }
  else {
    unint64_t v6 = *(void *)(result + 8);
  }
  a2[1].__r_.__value_.__l.__size_ = 0;
  if (v4 < 0)
  {
    if (!v5) {
      return result;
    }
    v14.__r_.__value_.__r.__words[0] = 0;
    unint64_t result = *(void *)result;
  }
  else
  {
    if (!v4) {
      return result;
    }
    v14.__r_.__value_.__r.__words[0] = 0;
  }
  unint64_t result = sub_100056140((unsigned char *)result, v6, (unint64_t *)&v14);
  std::string::size_type v7 = v14.__r_.__value_.__r.__words[0];
  if (v14.__r_.__value_.__r.__words[0]) {
    goto LABEL_10;
  }
  std::string::size_type v8 = result;
  if (result < v6)
  {
    a2[1].__r_.__value_.__l.__size_ = result;
    std::string::size_type v7 = 1;
    goto LABEL_13;
  }
  int v9 = *(char *)(v2 + 23);
  BOOL v10 = v9 < 0;
  if (v9 >= 0) {
    unint64_t v11 = v2;
  }
  else {
    unint64_t v11 = *(void *)v2;
  }
  if (v10) {
    std::string::size_type v7 = *(void *)(v2 + 8);
  }
  else {
    std::string::size_type v7 = *(unsigned __int8 *)(v2 + 23);
  }
  if (!v7)
  {
LABEL_25:
    if (!v7) {
      return result;
    }
LABEL_10:
    std::string::size_type v8 = 0;
LABEL_13:
    unint64_t result = (unint64_t)std::string::basic_string(&v14, (const std::string *)v2, v8, v7, (std::allocator<char> *)&v15);
    *a2 = v14;
    return result;
  }
  std::string::size_type v12 = 0;
  while (*(unsigned char *)(v11 + v12) != 47)
  {
    if (v7 == ++v12) {
      goto LABEL_25;
    }
  }
  if (v12 == -1) {
    std::string::size_type v13 = v7;
  }
  else {
    std::string::size_type v13 = v12;
  }
  if (v7 != v12) {
    std::string::size_type v7 = v13;
  }
  if (v7) {
    goto LABEL_10;
  }
  return result;
}

void sub_1000406B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100040DA8()
{
}

void sub_100041548(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000A6954(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100041664(uint64_t a1)
{
  *(void *)a1 = off_10045DEA8;
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    nullsub_15(a1 + 32);
  }
  else
  {
    nullsub_15(a1 + 32);
  }
  return a1;
}

uint64_t sub_1000416D4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10045DEA8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) &= 0xFCu;
  *(void *)(a1 + 64) = 0;
  int v4 = (std::string *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 136) &= 0xF800u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = off_10045DAB8;
  sub_10007B704(a1 + 32, a2 + 32);
  std::string::operator=(v4, (const std::string *)(a2 + 64));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

void sub_1000417AC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  nullsub_15(v2);
  _Unwind_Resume(a1);
}

void sub_100041808(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  _DWORD v16[2] = v6;
  uint64_t v17 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  v15[1] = 0;
  v16[0] = 0;
  v15[0] = off_100469AE8;
  *(void *)((char *)v16 + 5) = 0;
  sub_100041B18((uint64_t)v15, a3);
  sub_100041B20((uint64_t)v15, 1000 * rep);
  sub_100041B28((uint64_t)v15, a2);
  std::string::size_type v8 = *(id *)(v6 + 6736);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100096224;
  block[3] = &unk_100459BC0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100041AD4((uint64_t)v11, (uint64_t)v15);
  block[4] = v6;
  std::string::size_type v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100041AD4((uint64_t)v14, (uint64_t)v11);
  dispatch_sync(v8, block);
  nullsub_8(v11);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  nullsub_8(v14);
  int v9 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  nullsub_8(v15);
  BOOL v10 = v17;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_100041A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20) {
    sub_1003A381C(a20);
  }
  sub_10015978C((uint64_t)&a9);

  nullsub_8(v21 - 96);
  sub_1000BA884(v21 - 64);
  _Unwind_Resume(a1);
}

void sub_100041AB4(_Unwind_Exception *a1)
{
  nullsub_8(v1 - 96);
  sub_1000BA884(v1 - 64);
  _Unwind_Resume(a1);
}

__n128 sub_100041AD4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100469AE8;
  *(unsigned char *)(a1 + 28) &= 0xF8u;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  return result;
}

uint64_t sub_100041B18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t sub_100041B20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t sub_100041B28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_100041B30(uint64_t a1)
{
  if (!*(void *)(a1 + 24))
  {
    sub_1000AE4B0(v3, "");
    sub_10026F5B8("Haven't selected something to localize on", &__p);
    sub_10016A2C4((uint64_t)v3, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v4 < 0) {
      operator delete(v3[0]);
    }
    sub_100149690((uint64_t)&v2);
  }
  return a1 + 24;
}

void sub_100041C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100041C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100041EC0(v4 + 3064, a2);
  sub_100041808(a1, 7, *(void *)(a2 + 8));
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_100041D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100041D24()
{
  return sub_1000417D0();
}

uint64_t sub_100041D40(uint64_t result, double a2)
{
  *(double *)(result + 96) = a2;
  *(_WORD *)(result + 136) |= 0x40u;
  return result;
}

uint64_t sub_100041D54(uint64_t result, double a2)
{
  *(double *)(result + 128) = a2;
  *(_WORD *)(result + 136) |= 0x400u;
  return result;
}

uint64_t sub_100041D68(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  *(_WORD *)(result + 136) |= 0x200u;
  return result;
}

uint64_t sub_100041D7C(uint64_t result, double a2)
{
  *(double *)(result + 112) = a2;
  *(_WORD *)(result + 136) |= 0x100u;
  return result;
}

std::string *sub_100041D90(uint64_t a1, const std::string *a2)
{
  __n128 result = std::string::operator=((std::string *)(a1 + 64), a2);
  *(_WORD *)(a1 + 136) |= 0x10u;
  return result;
}

uint64_t sub_100041DC4(uint64_t result, double a2)
{
  *(double *)(result + 88) = a2;
  *(_WORD *)(result + 136) |= 0x20u;
  return result;
}

uint64_t sub_100041DD8(uint64_t result, double a2)
{
  *(double *)(result + 104) = a2;
  *(_WORD *)(result + 136) |= 0x80u;
  return result;
}

void sub_100041DEC(uint64_t a1, uint64_t a2)
{
  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x3802000000;
  v3[3] = sub_10009657C;
  v3[4] = nullsub_25;
  v3[5] = a1 + 16;
  v3[6] = a2;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_1000170B8;
  v2[3] = &unk_100460438;
  v2[4] = v3;
  sub_100045DE8((dispatch_queue_t *)(a1 + 48), v2);
  _Block_object_dispose(v3, 8);
}

uint64_t sub_100041EB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

double sub_100041EB8(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_10007B704(a1 + 32, a2).n128_u64[0];
  return result;
}

uint64_t sub_100041EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  if (*(void *)(a1 + 48))
  {
    sub_1000AE4B0(v7, "");
    sub_10014C790("Unexpected request to record legacy data for ", &v9);
    sub_1000DA214(v4, &v10);
    sub_10016A2C4((uint64_t)v7, (uint64_t)&v9, 2);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v10.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_5:
        if ((v8 & 0x80000000) == 0) {
          goto LABEL_6;
        }
LABEL_9:
        operator delete(v7[0]);
LABEL_6:
        sub_1000D11E0((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  sub_1000484E8(a1);
  sub_100048920(a2, (_DWORD *)(a1 + 80));
  *(unsigned char *)a1 = 1;
  return a1;
}

void sub_100041FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100042294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004245C(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 105) < 0) {
    operator delete(*(void **)(v2 - 128));
  }

  _Unwind_Resume(a1);
}

void sub_10004287C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_10004289C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  nullsub_15(va);
  _Unwind_Resume(a1);
}

void sub_1000428B0(uint64_t a1)
{
  *(void *)a1 = off_100457D18;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t sub_100042904(uint64_t a1, int *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100459D58;
  int v4 = *a2;
  sub_10004310C(a1 + 24, a3);
  *(void *)(a1 + 24) = off_100459DA8;
  sub_100042C0C(a1 + 64);
  sub_100042A1C(a1 + 4600);
  *(void *)(a1 + 6760) = 0;
  *(unsigned char *)(a1 + 6768) = 0;
  *(unsigned char *)(a1 + 6800) = 0;
  *(unsigned char *)(a1 + 6832) = 0;
  *(_DWORD *)(a1 + 6864) = v4;
  return a1;
}

void sub_1000429B4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  sub_100012B94(v3);
  *(void *)(v1 + 24) = off_100459DF8;
  if (*(char *)(v1 + 55) < 0)
  {
    operator delete(*(void **)(v1 + 32));
    std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100042A1C(uint64_t a1)
{
  uint64_t v2 = sub_100042BA4(a1);
  sub_100042BA4(v2 + 80);
  sub_100042BA4(a1 + 160);
  sub_100042BA4(a1 + 240);
  sub_100042BA4(a1 + 320);
  sub_100042BA4(a1 + 400);
  sub_100042BA4(a1 + 480);
  sub_100042BA4(a1 + 560);
  sub_100042BA4(a1 + 640);
  sub_100042BA4(a1 + 720);
  sub_100042BA4(a1 + 800);
  sub_100042BA4(a1 + 880);
  sub_100042BA4(a1 + 960);
  sub_100042BA4(a1 + 1040);
  sub_100042BA4(a1 + 1120);
  sub_100042BA4(a1 + 1200);
  sub_100042BA4(a1 + 1280);
  sub_100042BA4(a1 + 1360);
  sub_100042BA4(a1 + 1440);
  sub_100042BA4(a1 + 1520);
  sub_100042BA4(a1 + 1600);
  sub_100042BA4(a1 + 1680);
  sub_100042BA4(a1 + 1760);
  sub_100042BA4(a1 + 1840);
  sub_100042BA4(a1 + 1920);
  sub_100042BA4(a1 + 2000);
  sub_100042BA4(a1 + 2080);
  return a1;
}

void sub_100042B84(_Unwind_Exception *a1)
{
  do
  {
    v2 -= 80;
    sub_100012B90(v2);
  }
  while (v2 != v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100042BA4(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = sub_100042EE0();
  *(void *)(a1 + 64) = v2;
  *(void *)(a1 + 72) = v2;
  return a1;
}

void sub_100042BE8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 56);
  if (v3) {
    sub_1003A3868(v3);
  }
  sub_1003A3988();
  _Unwind_Resume(a1);
}

uint64_t sub_100042C0C(uint64_t a1)
{
  uint64_t v2 = sub_100042D9C(a1);
  sub_100042D9C(v2 + 168);
  sub_100042D9C(a1 + 336);
  sub_100042D9C(a1 + 504);
  sub_100042D9C(a1 + 672);
  sub_100042D9C(a1 + 840);
  sub_100042D9C(a1 + 1008);
  sub_100042D9C(a1 + 1176);
  sub_100042D9C(a1 + 1344);
  sub_100042D9C(a1 + 1512);
  sub_100042D9C(a1 + 1680);
  sub_100042D9C(a1 + 1848);
  sub_100042D9C(a1 + 2016);
  sub_100042D9C(a1 + 2184);
  sub_100042D9C(a1 + 2352);
  sub_100042D9C(a1 + 2520);
  sub_100042D9C(a1 + 2688);
  sub_100042D9C(a1 + 2856);
  sub_100042D9C(a1 + 3024);
  sub_100042D9C(a1 + 3192);
  sub_100042D9C(a1 + 3360);
  sub_100042D9C(a1 + 3528);
  sub_100042D9C(a1 + 3696);
  sub_100042D9C(a1 + 3864);
  sub_100042D9C(a1 + 4032);
  sub_100042D9C(a1 + 4200);
  sub_100042D9C(a1 + 4368);
  return a1;
}

void sub_100042D7C(_Unwind_Exception *a1)
{
  do
  {
    v2 -= 168;
    sub_100012E68(v2);
  }
  while (v2 != v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100042D9C(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  uint64_t v2 = sub_100042EE0();
  *(void *)(a1 + 152) = v2;
  *(void *)(a1 + 160) = v2;
  return a1;
}

void sub_100042DEC(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 72))
  {
    *(void *)(v1 + 80) = off_1004594E8;
    uint64_t v3 = *(void **)(v1 + 136);
    if (v3)
    {
      free(v3);
      *(_DWORD *)(v1 + 144) = 0;
    }
    *(void *)(v1 + 80) = off_100454688;
    int v4 = *(atomic_uint **)(v1 + 96);
    if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
    *(unsigned char *)(v1 + 72) = 0;
  }
  sub_1003A38CC();
  _Unwind_Resume(a1);
}

uint64_t sub_100042EE0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047DC30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10047DC30))
  {
    mach_timebase_info(&info);
    qword_10047DC28 = (uint64_t)info;
    __cxa_guard_release(&qword_10047DC30);
  }
  return qword_10047DC10 + mach_absolute_time() * qword_10047DC28 / HIDWORD(qword_10047DC28);
}

void sub_100042F64(_Unwind_Exception *a1)
{
}

void sub_100042F7C(void *a1)
{
  *a1 = off_100458638;
  if ((void *)qword_10047EB60 != a1)
  {
    uint64_t v2 = a1[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = a1[18];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_10004303C(uint64_t a1)
{
  *(void *)a1 = off_100457EA8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_1000430A4(uint64_t a1)
{
  *(void *)a1 = off_100458588;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

uint64_t sub_10004310C(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = off_100459DF8;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = *a2;
  if (*a2)
  {
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(v5 + 31) < 0)
    {
      sub_1000559FC((unsigned char *)v4, *(void **)(v5 + 8), *(void *)(v5 + 16));
    }
    else
    {
      long long v7 = *(_OWORD *)(v5 + 8);
      *(void *)(v4 + 16) = *(void *)(v5 + 24);
      *(_OWORD *)uint64_t v4 = v7;
    }
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 31) = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
  uint64_t v8 = *a2;
  if (*a2) {
    LOBYTE(v8) = *(unsigned char *)(v8 + 32) != 0;
  }
  *(unsigned char *)(a1 + 32) = v8;
  return a1;
}

void sub_10004320C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100043780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100044504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  _Unwind_Resume(a1);
}

void sub_10004474C(uint64_t a1, uint64_t a2)
{
}

void sub_1000448AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000448C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000449A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100044AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100044B44(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained onQueueRecordInputEventMetrics:a1 + 40];
}

void sub_100044B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100044BB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v7 = v6;
  if (v5)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 40);
    v98[0].receiver = *(id *)(a1 + 32);
    v98[0].super_class = (Class)IOSDeviceMotion;
    id v9 = [(objc_super *)v98 sensorBridge];
    id v10 = v5;
    uint8_t buf[23] = 18;
    strcpy((char *)buf, "DeviceMotion accel");
    [v10 userAcceleration];
    double v12 = v11;
    [v10 userAcceleration];
    double v14 = v13;
    [v10 userAcceleration];
    BOOL v16 = sub_100046AA0((uint64_t *)buf, v12, v14, v15);
    BOOL v17 = v16;
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (!v17) {
        goto LABEL_32;
      }
    }
    else if (!v16)
    {
      goto LABEL_32;
    }
    uint8_t buf[23] = 20;
    strcpy((char *)buf, "DeviceMotion gravity");
    [v10 gravity];
    double v21 = v20;
    [v10 gravity];
    double v23 = v22;
    [v10 gravity];
    BOOL v25 = sub_100046AA0((uint64_t *)buf, v21, v23, v24);
    BOOL v26 = v25;
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (!v26) {
        goto LABEL_32;
      }
    }
    else if (!v25)
    {
LABEL_32:

      id v47 = v10;
      [v47 rotationRate];
      double v49 = v48;
      double v51 = v50;
      double v53 = v52;
      [v47 timestamp];
      uint64_t v55 = sub_100045E94(v54);
      int v108 = off_10045D918;
      uint64_t v118 = 0;
      int v113 = 0;
      uint64_t v115 = 0;
      uint64_t v116 = 0;
      uint64_t v114 = 0;
      int v117 = 0;
      __int16 v119 = 0;
      double v109 = v49;
      double v110 = v51;
      double v111 = v53;
      uint64_t v112 = v55;
      [v47 timestamp];
      sub_100046A8C((uint64_t)&v108, v56);
      sub_100046D58(buf, 13, &v108);
      uint64_t v57 = operator new(0x108uLL);
      v57[1] = 0;
      v57[2] = 0;
      *uint64_t v57 = off_100454870;
      sub_1000458C4((uint64_t)(v57 + 4), (uint64_t)buf);
      *((_DWORD *)v57 + 32) = v124;
      *((_DWORD *)v57 + 6) = 8;
      *(void *)&long long v103 = v57 + 3;
      *((void *)&v103 + 1) = v57;
      sub_100045938((uint64_t)v9, (uint64_t)&v103);
      int v58 = (std::__shared_weak_count *)*((void *)&v103 + 1);
      if (*((void *)&v103 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
      nullsub_9(buf);
      nullsub_9(&v108);

      id v59 = v47;
      uint64_t v60 = [v59 attitude];
      uint64_t v61 = v60;
      if (v60)
      {
        [v60 rotationMatrix];
        double v62 = *(double *)buf;
      }
      else
      {
        uint64_t v123 = 0;
        long long v121 = 0u;
        long long v122 = 0u;
        memset(buf, 0, sizeof(buf));
        double v62 = 0.0;
      }
      uint64_t v63 = [v59 attitude];
      char v64 = v63;
      if (v63)
      {
        [v63 rotationMatrix];
        double v65 = *((double *)&v104 + 1);
      }
      else
      {
        uint64_t v107 = 0;
        long long v105 = 0u;
        long long v106 = 0u;
        long long v103 = 0u;
        long long v104 = 0u;
        double v65 = 0.0;
      }
      uint64_t v66 = [v59 attitude];
      uint64_t v67 = v66;
      if (v66)
      {
        [v66 rotationMatrix];
        double v68 = *(double *)&v101;
      }
      else
      {
        uint64_t v102 = 0;
        long long v100 = 0u;
        long long v101 = 0u;
        v98[1] = 0u;
        long long v99 = 0u;
        double v68 = 0.0;
      }
      [v59 timestamp];
      uint64_t v70 = sub_100045E94(v69);
      int v108 = off_10045D918;
      uint64_t v118 = 0;
      int v113 = 0;
      uint64_t v115 = 0;
      uint64_t v116 = 0;
      uint64_t v114 = 0;
      int v117 = 0;
      __int16 v119 = 0;
      double v109 = v62;
      double v110 = v65;
      double v111 = v68;
      uint64_t v112 = v70;
      [v59 timestamp];
      sub_100046A8C((uint64_t)&v108, v71);

      sub_1000472C0((uint64_t)buf, v8, (uint64_t)&v108);
      uint64_t v72 = operator new(0x108uLL);
      v72[1] = 0;
      v72[2] = 0;
      *uint64_t v72 = off_100454870;
      sub_1000458C4((uint64_t)(v72 + 4), (uint64_t)buf);
      *((_DWORD *)v72 + 32) = v124;
      *((_DWORD *)v72 + 6) = 3;
      *(void *)&long long v103 = v72 + 3;
      *((void *)&v103 + 1) = v72;
      sub_100045938((uint64_t)v9, (uint64_t)&v103);
      uint64_t v73 = (std::__shared_weak_count *)*((void *)&v103 + 1);
      if (*((void *)&v103 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
      nullsub_9(buf);
      nullsub_9(&v108);

      id v74 = v59;
      [v74 gravity];
      double v76 = v75;
      [v74 gravity];
      double v78 = v77;
      [v74 gravity];
      double v80 = v79;
      [v74 timestamp];
      uint64_t v82 = sub_100045E94(v81);
      int v108 = off_10045D918;
      uint64_t v118 = 0;
      int v113 = 0;
      uint64_t v115 = 0;
      uint64_t v116 = 0;
      uint64_t v114 = 0;
      int v117 = 0;
      __int16 v119 = 0;
      double v109 = v76 * 9.81;
      double v110 = v78 * 9.81;
      double v111 = v80 * 9.81;
      uint64_t v112 = v82;
      [v74 timestamp];
      sub_100046A8C((uint64_t)&v108, v83);
      sub_100046D58(buf, 12, &v108);
      int v84 = operator new(0x108uLL);
      v84[1] = 0;
      v84[2] = 0;
      *int v84 = off_100454870;
      sub_1000458C4((uint64_t)(v84 + 4), (uint64_t)buf);
      *((_DWORD *)v84 + 32) = v124;
      *((_DWORD *)v84 + 6) = 8;
      *(void *)&long long v103 = v84 + 3;
      *((void *)&v103 + 1) = v84;
      sub_100045938((uint64_t)v9, (uint64_t)&v103);
      int v85 = (std::__shared_weak_count *)*((void *)&v103 + 1);
      if (*((void *)&v103 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
      nullsub_9(buf);
      nullsub_9(&v108);

      if (v8 != 1)
      {
        id v86 = v74;
        [v86 magneticField];
        double v87 = *(double *)buf;
        [v86 magneticField];
        double v88 = *((double *)&v103 + 1);
        [v86 magneticField];
        double v89 = *(double *)&v99;
        [v86 timestamp];
        uint64_t v91 = sub_100045E94(v90);
        int v108 = off_10045D918;
        uint64_t v118 = 0;
        int v113 = 0;
        uint64_t v115 = 0;
        uint64_t v116 = 0;
        uint64_t v114 = 0;
        int v117 = 0;
        v119 &= 0xFC00u;
        double v109 = v87;
        double v110 = v88;
        double v111 = v89;
        uint64_t v112 = v91;
        [v86 timestamp];
        sub_100046A8C((uint64_t)&v108, v92);
        [v86 magneticField];
        sub_1001A7010((uint64_t)&v108, *(int *)&buf[24]);
        [v86 magneticField];
        sub_1001A7024((uint64_t)&v108, *(int *)&buf[24]);
        [v86 timestamp];
        sub_100046A8C((uint64_t)&v108, v93);
        sub_100046D58(buf, 3, &v108);
        unsigned int v94 = operator new(0x108uLL);
        v94[1] = 0;
        v94[2] = 0;
        *unsigned int v94 = off_100454870;
        sub_1000458C4((uint64_t)(v94 + 4), (uint64_t)buf);
        *((_DWORD *)v94 + 32) = v124;
        *((_DWORD *)v94 + 6) = 8;
        *(void *)&long long v103 = v94 + 3;
        *((void *)&v103 + 1) = v94;
        sub_100045938((uint64_t)v9, (uint64_t)&v103);
        int v95 = (std::__shared_weak_count *)*((void *)&v103 + 1);
        if (*((void *)&v103 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
        nullsub_9(buf);
        nullsub_9(&v108);
      }
      goto LABEL_56;
    }
    [v10 userAcceleration];
    double v28 = v27;
    [v10 gravity];
    double v30 = v29;
    [v10 userAcceleration];
    double v32 = v31;
    [v10 gravity];
    double v34 = v33;
    [v10 userAcceleration];
    double v36 = v35;
    [v10 gravity];
    double v38 = v37;
    [v10 timestamp];
    uint64_t v40 = sub_100045E94(v39);
    int v108 = off_10045D918;
    uint64_t v118 = 0;
    int v113 = 0;
    uint64_t v115 = 0;
    uint64_t v116 = 0;
    uint64_t v114 = 0;
    int v117 = 0;
    v119 &= 0xFC00u;
    double v109 = v28 + v30;
    double v110 = v32 + v34;
    double v111 = v36 + v38;
    uint64_t v112 = v40;
    [v10 timestamp];
    sub_100046A8C((uint64_t)&v108, v41);
    uint8_t buf[23] = 8;
    strcpy((char *)buf, "rawAccel");
    BOOL v42 = sub_100046AA0((uint64_t *)buf, v109, v110, v111);
    BOOL v43 = v42;
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (!v43)
      {
LABEL_31:
        nullsub_9(&v108);
        goto LABEL_32;
      }
    }
    else if (!v42)
    {
      goto LABEL_31;
    }
    +[IOSDeviceMotion convertGToAccel:&v108];
    strcpy((char *)buf, "convertGToAccel result");
    uint8_t buf[23] = 22;
    BOOL v44 = sub_100046AA0((uint64_t *)buf, v109, v110, v111);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    if (v44)
    {
      sub_100046D58(buf, 2, &v108);
      uint64_t v45 = operator new(0x108uLL);
      v45[1] = 0;
      v45[2] = 0;
      void *v45 = off_100454870;
      sub_1000458C4((uint64_t)(v45 + 4), (uint64_t)buf);
      *((_DWORD *)v45 + 32) = v124;
      *((_DWORD *)v45 + 6) = 8;
      *(void *)&long long v103 = v45 + 3;
      *((void *)&v103 + 1) = v45;
      sub_100045938((uint64_t)v9, (uint64_t)&v103);
      uint64_t v46 = (std::__shared_weak_count *)*((void *)&v103 + 1);
      if (*((void *)&v103 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      nullsub_9(buf);
    }
    goto LABEL_31;
  }
  if (!v6)
  {
    if (qword_10047BED8 == -1)
    {
      int v96 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100468AF0);
      int v96 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
    }
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "no data and no error", buf, 2u);
    goto LABEL_56;
  }
  if (qword_10047BED8 != -1) {
    dispatch_once(&qword_10047BED8, &stru_100468AF0);
  }
  long long v18 = (id)qword_10047BEE0;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    id v19 = [v7 description];
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = [v19 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "error reported: %s", buf, 0xCu);
  }
LABEL_56:
}

void sub_100045704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_1000E11EC((uint64_t)&a21);
  nullsub_9(v34 - 240);
  nullsub_9(&a31);

  _Unwind_Resume(a1);
}

double sub_1000458C4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10045D918;
  *(_WORD *)(a1 + 88) &= 0xFC00u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  double result = *(double *)(a2 + 80);
  *(double *)(a1 + 80) = result;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  return result;
}

void sub_100045938(uint64_t a1, uint64_t a2)
{
  double v12 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v3 = *(uint64_t **)(a1 + 72);
  uint64_t v4 = *(uint64_t **)(a1 + 80);
  if (v3 != v4)
  {
    for (uint64_t i = *(uint64_t **)(a1 + 72); i != v4; i += 2)
    {
      uint64_t v16 = 0;
      BOOL v17 = 0;
      id v6 = (std::__shared_weak_count *)i[1];
      if (v6)
      {
        long long v7 = std::__shared_weak_count::lock(v6);
        BOOL v17 = v7;
        if (v7)
        {
          uint64_t v8 = *i;
          uint64_t v16 = v8;
          if (v8)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, a2);
LABEL_16:
            if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
            goto LABEL_3;
          }
        }
      }
      else
      {
        long long v7 = 0;
      }
      if (qword_10047BED8 == -1)
      {
        id v9 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
          goto LABEL_15;
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_10046A580);
        id v9 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
          goto LABEL_15;
        }
      }
      uint64_t v10 = *(void *)(a1 + 72);
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 40))(__p, a1);
      double v11 = __p;
      if (v15 < 0) {
        double v11 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 134218242;
      uint64_t v19 = ((uint64_t)v3 - v10) >> 4;
      __int16 v20 = 2080;
      double v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "WARNING: Reference to dead observer @ [%ld] in %s. Did you forget to remove it?", buf, 0x16u);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
LABEL_15:
      if (v7) {
        goto LABEL_16;
      }
LABEL_3:
      v3 += 2;
    }
  }
  std::mutex::unlock(v12);
}

void sub_100045B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_100045BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100044B44;
  block[3] = &unk_10046B478;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v8 = *(void **)a2;
  id v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  objc_copyWeak(v11, &v7);
  v11[1] = v8;
  double v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_async(v3, block);
  id v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    objc_destroyWeak(&v7);
    id v6 = v12;
    if (!v12) {
      goto LABEL_11;
    }
  }
  else
  {
    objc_destroyWeak(&v7);
    id v6 = v12;
    if (!v12) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_11:
  objc_destroyWeak(v11);
}

void sub_100045D24(uint64_t a1, uint64_t a2)
{
  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x3802000000;
  v3[3] = sub_10009657C;
  v3[4] = nullsub_25;
  v3[5] = a1 + 8;
  v3[6] = a2;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_1000170B8;
  v2[3] = &unk_100460438;
  v2[4] = v3;
  sub_100045DE8((dispatch_queue_t *)(a1 + 40), v2);
  _Block_object_dispose(v3, 8);
}

void sub_100045DE8(dispatch_queue_t *a1, void *a2)
{
}

uint64_t sub_100045DF0(unsigned char *a1, uint64_t *a2)
{
  if (a1[44])
  {
    uint64_t v4 = sub_100017318((_DWORD *)*a2);
    sub_100045EC8((uint64_t)(a1 + 48), (uint64_t)v4);
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 32))(a1);
  if (result)
  {
    id v6 = a1 + 8;
    return sub_1000460F8(*a2, (uint64_t *)&v6);
  }
  return result;
}

uint64_t sub_100045E88(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 - 16) + 32);
}

uint64_t sub_100045E94(double a1)
{
  return qword_10047DC10 + (uint64_t)(a1 * 1000000000.0);
}

uint64_t sub_100045EB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_100045EC8(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 25) || !*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  BOOL v3 = __OFSUB__(a2, v2);
  uint64_t v4 = a2 - v2;
  BOOL v5 = !((v4 < 0) ^ v3 | (v4 == 0));
  *(unsigned char *)(a1 + 24) = v5;
  if ((v4 < 0) ^ v3 | (v4 == 0)) {
    return 0;
  }
  double v6 = (double)(v4 + 1000000000 * *(void *)(a1 + 32)) / 1000000000.0;
  if (!*(unsigned char *)a1)
  {
    if (0xEEEEEEEEEEEEEEEFLL * (uint64_t)v6 + 0x888888888888888 > 0x1111111111111110) {
      return 1;
    }
    if (qword_10047BED8 == -1)
    {
      uint64_t v12 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100463F00);
      uint64_t v12 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
    }
    int v13 = 134349056;
    double v14 = v6;
    uint64_t v8 = "WARNING: no Wi-Fi scans in %{public}f";
    id v9 = v12;
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_11;
  }
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_100463F00);
    uint64_t v7 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_FAULT)) {
      return 1;
    }
    goto LABEL_10;
  }
  uint64_t v7 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_FAULT))
  {
LABEL_10:
    int v13 = 134349056;
    double v14 = v6;
    uint64_t v8 = "FATAL: no Wi-Fi scan timer expired and no scans in %{public}f";
    id v9 = v7;
    os_log_type_t v10 = OS_LOG_TYPE_FAULT;
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v13, 0xCu);
  }
  return 1;
}

uint64_t sub_1000460CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  return sub_1000460F8(*a2, &v3);
}

uint64_t sub_1000460F8(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = (void **)(result + 8);
  int v4 = *(_DWORD *)result;
  switch(v4 ^ (v4 >> 31))
  {
    case 1:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)*a2 + 40))(*a2, v3);
      break;
    case 2:
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)*a2 + 48))(*a2, *(unsigned int *)(result + 16));
      break;
    case 3:
      if (v4 < 0) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)*a2 + 56))(*a2, *v3, *((unsigned int *)*v3 + 24));
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t, void **, void))(*(void *)*a2 + 56))(*a2, v3, *(unsigned int *)(result + 104));
      }
      break;
    case 4:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)*a2 + 64))(*a2, v3);
      break;
    case 5:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)*a2 + 72))(*a2, v3);
      break;
    case 6:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)*a2 + 88))(*a2, v3);
      break;
    case 7:
      return result;
    case 8:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      uint64_t result = sub_1000466A4((uint64_t)v3, *a2);
      break;
    case 9:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)*a2 + 120))(*a2, v3);
      break;
    case 0xA:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)*a2 + 128))(*a2, v3);
      break;
    case 0xB:
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)*a2 + 16))(*a2, *(void *)(result + 8), *(unsigned int *)(result + 16), result + 24);
      break;
    case 0xC:
      if (v4 < 0) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void, void *, void *))(*(void *)*a2 + 168))(*a2, **v3, *v3 + 3, *v3 + 1);
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)*a2 + 168))(*a2, *(void *)(result + 8), result + 32, result + 16);
      }
      break;
    case 0xD:
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)*a2 + 160))(*a2, *(void *)(result + 8), *(unsigned __int8 *)(result + 16), *(void *)(result + 24));
      break;
    case 0xE:
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)*a2 + 176))(*a2, *(void *)(result + 8), *(void *)(result + 16), result + 32);
      break;
    case 0xF:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)*a2 + 184))(*a2, v3);
      break;
    case 0x10:
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, double, double, double))(*(void *)*a2 + 192))(*a2, *(void *)(result + 8), result + 16, *(double *)(result + 40), *(double *)(result + 48), *(double *)(result + 56));
      break;
    case 0x11:
      if (v4 < 0) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)*a2 + 200))(*a2, *v3 + 2, *v3 + 1);
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a2 + 200))(*a2, result + 24, result + 16);
      }
      break;
    case 0x12:
      if (v4 < 0) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)*a2 + 208))(*a2, *v3 + 14, *v3 + 1);
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a2 + 208))(*a2, result + 120, result + 16);
      }
      break;
    case 0x13:
      if (v4 < 0) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)*a2 + 216))(*a2, *v3 + 10, *v3 + 1);
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a2 + 216))(*a2, result + 88, result + 16);
      }
      break;
    case 0x14:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      uint64_t result = sub_10015EE60((uint64_t)v3, *a2);
      break;
    case 0x15:
      if (v4 < 0) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)*a2 + 240))(*a2, *v3 + 13, *v3 + 1);
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a2 + 240))(*a2, result + 112, result + 16);
      }
      break;
    default:
      if (v4 < 0) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)*a2 + 32))(*a2, *v3 + 1);
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a2 + 32))(*a2, result + 16);
      }
      break;
  }
  return result;
}

uint64_t sub_1000466A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 96;
  switch(*(_DWORD *)(a1 + 96))
  {
    case 2:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24);
      uint64_t v5 = a2;
      uint64_t v6 = a1;
      break;
    case 3:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104);
      uint64_t v5 = a2;
      uint64_t v6 = a1;
      break;
    case 4:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 136);
      uint64_t v5 = a2;
      uint64_t v6 = a1;
      break;
    case 0xA:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 96);
      uint64_t v5 = a2;
      uint64_t v6 = a1;
      break;
    case 0xC:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80);
      uint64_t v5 = a2;
      uint64_t v6 = a1;
      break;
    case 0xD:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 144);
      uint64_t v5 = a2;
      uint64_t v6 = a1;
      break;
    case 0xF:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 112);
      uint64_t v5 = a2;
      uint64_t v6 = a1;
      break;
    default:
      __cxa_allocate_exception(0x40uLL);
      sub_10015EA8C(v2, &v11);
      uint64_t v8 = std::string::insert(&v11, 0, "Illegal state - how is the thrift type enum = ");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v12.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v13, &v12);
      v13.__vftable = (std::runtime_error_vtbl *)&off_100453860;
      sub_10018E868((uint64_t)v10);
      sub_1000D1698(&v13, (uint64_t)"void InertialInputEvent::applyTo(Receiver *) const [Receiver = ILocalizerInputEventReceiver]", (uint64_t)"../../../common/localize/localizer_input_event.h", 288, (uint64_t)v10);
  }
  return v4(v5, v6);
}

void sub_1000469C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v23 - 48));
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_100046A5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 && (*(_DWORD *)v2 ^ (*(int *)v2 >> 31)) == 0xE)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (*(unsigned char *)(*(void *)(v2 + 16) + 48)) {
      sub_10033D648(a1, v3);
    }
    else {
      sub_10033D9BC(a1, v3);
    }
  }
}

uint64_t sub_100046A8C(uint64_t result, double a2)
{
  *(double *)(result + 80) = a2;
  *(_WORD *)(result + 88) |= 0x200u;
  return result;
}

BOOL sub_100046AA0(uint64_t *a1, double a2, double a3, double a4)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    return 1;
  }
  if (qword_10047BED8 == -1)
  {
    long long v9 = qword_10047BEE0;
    BOOL result = os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100468AF0);
    long long v9 = qword_10047BEE0;
    BOOL result = os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
  }
  if (*((char *)a1 + 23) >= 0) {
    os_log_type_t v10 = a1;
  }
  else {
    os_log_type_t v10 = (uint64_t *)*a1;
  }
  int v11 = 136446978;
  std::string v12 = v10;
  __int16 v13 = 2050;
  double v14 = a2;
  __int16 v15 = 2050;
  double v16 = a3;
  __int16 v17 = 2050;
  double v18 = a4;
  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "%{public}s failed finite check: %{public}f, %{public}f, %{public}f", (uint8_t *)&v11, 0x2Au);
  return 0;
}

void sub_100046CC0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  sub_1000458C4(a1, a3);
  *(_DWORD *)(v4 + 96) = a2;
  if (a2 > 0xF || ((1 << a2) & 0xB41C) == 0)
  {
    sub_10035E5B0(a2, &v5);
    sub_1003A7624();
    abort_report_np();
    __break(1u);
  }
}

void sub_100046D5C(uint64_t a1, uint64_t a2)
{
}

void sub_100046D64(uint64_t a1, uint64_t a2)
{
}

void sub_100046D6C(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_100046D74(uint64_t a1, uint64_t a2)
{
}

void sub_100046D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  v5[8] = v4;
  v5[9] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100048324(v4 + 40, a2);
  if ((*(unsigned char *)(a1 + 64) & 0x10) != 0) {
    sub_100356DB0(v5);
  }
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100046E70(_Unwind_Exception *a1)
{
  sub_1000BA884(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_100046E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000243FC(&a9);
  sub_1000BA884(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_100046EA0(_Unwind_Exception *a1)
{
  sub_1000BA884(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_100046EB4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  std::string v5 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v16 = v4;
  __int16 v17 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  switch(a3)
  {
    case 1:
      uint64_t v6 = v4 + 712;
      break;
    case 2:
      uint64_t v6 = v4 + 880;
      break;
    case 4:
      uint64_t v6 = v4 + 1048;
      break;
    case 8:
      uint64_t v6 = v4 + 1216;
      break;
    default:
      __cxa_allocate_exception(0x40uLL);
      std::to_string(&v12, a3);
      uint64_t v7 = std::string::insert(&v12, 0, "cmAttitudeReferenceFrame ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = std::string::append(&v13, " not implemented");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v15, &v14);
      v15.__vftable = (std::runtime_error_vtbl *)&off_100453860;
      sub_10018E868((uint64_t)v11);
      sub_1000D1698(&v15, (uint64_t)"virtual void sensors::CombinedLogger::receiveAttitudeX(const SensorMeasurement &, int)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/sensors/sensor_logger.mm", 747, (uint64_t)v11);
  }
  sub_100048324(v6, a2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_100047094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v30 - 64));
  if (a30 < 0)
  {
    operator delete(a25);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a18);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_9:
    sub_1000BA884(v30 - 48);
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(a12);
  goto LABEL_9;
}

void sub_100047178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  v5[8] = v4;
  v5[9] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100048324(v4 + 2224, a2);
  if ((*(unsigned char *)(a1 + 64) & 0x10) != 0) {
    sub_1003572D4(v5);
  }
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10004726C(_Unwind_Exception *a1)
{
  sub_1000BA884(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_100047280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000243FC(&a9);
  sub_1000BA884(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_10004729C(_Unwind_Exception *a1)
{
  sub_1000BA884(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_1000472C0(uint64_t a1, int a2, uint64_t a3)
{
  sub_1000458C4(a1, a3);
  *(_DWORD *)(v4 + 96) = a2;
}

uint64_t sub_100047324(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = a2[7];
  unsigned int v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    void *exception = off_100454818;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  int v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(void *)a2 + 32))(a2, "GPSLocation");
  int v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "timestampNanos", 10, 1)+ v6;
  int v8 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 8));
  int v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "latlon", 12, 2);
  int v11 = v10 + sub_1000499E8(a1 + 32, a2);
  int v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  __int16 v13 = *(_WORD *)(a1 + 192);
  if ((v13 & 0x10) != 0)
  {
    int v31 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "provider", 11, 3);
    int v32 = v31 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 168))(a2, a1 + 64);
    v12 += v32 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
    __int16 v13 = *(_WORD *)(a1 + 192);
    if ((v13 & 0x20) == 0)
    {
LABEL_4:
      if ((v13 & 0x40) == 0) {
        goto LABEL_5;
      }
      goto LABEL_20;
    }
  }
  else if ((v13 & 0x20) == 0)
  {
    goto LABEL_4;
  }
  int v33 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "altitude", 4, 4);
  int v34 = v12 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 88));
  int v12 = v33 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v34;
  __int16 v13 = *(_WORD *)(a1 + 192);
  if ((v13 & 0x40) == 0)
  {
LABEL_5:
    if ((v13 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v35 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "accuracy", 4, 5);
  int v36 = v12 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 96));
  int v12 = v35 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v36;
  __int16 v13 = *(_WORD *)(a1 + 192);
  if ((v13 & 0x80) == 0)
  {
LABEL_6:
    if ((v13 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v37 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "bearing", 4, 6);
  int v38 = v12 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 104));
  int v12 = v37 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v38;
  __int16 v13 = *(_WORD *)(a1 + 192);
  if ((v13 & 0x100) == 0)
  {
LABEL_7:
    if ((v13 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_22:
  int v39 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "speed", 4, 7);
  int v40 = v12 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 112));
  int v12 = v39 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v40;
  if ((*(_WORD *)(a1 + 192) & 0x200) != 0)
  {
LABEL_8:
    int v14 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "numSatellites", 8, 8);
    int v15 = v12 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 144))(a2, *(unsigned int *)(a1 + 120));
    int v12 = v14 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v15;
  }
LABEL_9:
  int v16 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "receivedTimestampNanos", 10, 9);
  int v17 = v12 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 16));
  int v18 = v16 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v19 = v18
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "simulationTimestampNanos", 10, 10);
  int v20 = v19 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 24));
  int v21 = v20 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v17;
  int v22 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "clGpsConfidence", 8, 11);
  int v23 = v22 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 144))(a2, *(unsigned int *)(a1 + 124));
  int v24 = v21 + v23 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v25 = *(unsigned __int16 *)(a1 + 192);
  int v26 = v25 | (*(unsigned __int8 *)(a1 + 194) << 16);
  if ((v25 & 0x800) != 0)
  {
    int v41 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "horzUncSemiMaj", 4, 12);
    int v42 = v41 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 128));
    v24 += v42 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
    int v43 = *(unsigned __int16 *)(a1 + 192);
    int v26 = v43 | (*(unsigned __int8 *)(a1 + 194) << 16);
    if ((v43 & 0x1000) == 0)
    {
LABEL_11:
      if ((v26 & 0x2000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_26;
    }
  }
  else if ((v25 & 0x1000) == 0)
  {
    goto LABEL_11;
  }
  int v44 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "horzUncSemiMin", 4, 13);
  int v45 = v24 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 136));
  int v24 = v44 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v45;
  int v46 = *(unsigned __int16 *)(a1 + 192);
  int v26 = v46 | (*(unsigned __int8 *)(a1 + 194) << 16);
  if ((v46 & 0x2000) == 0)
  {
LABEL_12:
    if ((v26 & 0x4000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v47 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "horzUncSemiMajAz", 4, 14);
  int v48 = v24 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 144));
  int v24 = v47 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v48;
  int v49 = *(unsigned __int16 *)(a1 + 192);
  int v26 = v49 | (*(unsigned __int8 *)(a1 + 194) << 16);
  if ((v49 & 0x4000) == 0)
  {
LABEL_13:
    if ((v26 & 0x8000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v50 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "speedAccuracy", 4, 15);
  int v51 = v24 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 152));
  int v24 = v50 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v51;
  int v52 = *(unsigned __int16 *)(a1 + 192);
  int v26 = v52 | (*(unsigned __int8 *)(a1 + 194) << 16);
  if ((v52 & 0x8000) == 0)
  {
LABEL_14:
    if ((v26 & 0x10000) == 0) {
      goto LABEL_15;
    }
LABEL_29:
    int v55 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "verticalAccuracy", 4, 17);
    int v56 = v24 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 168));
    int v24 = v55 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v56;
    if (((*(unsigned __int16 *)(a1 + 192) | (*(unsigned __int8 *)(a1 + 194) << 16)) & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_28:
  int v53 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "bearingAccuracy", 4, 16);
  int v54 = v24 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 160));
  int v24 = v53 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v54;
  int v26 = *(unsigned __int16 *)(a1 + 192) | (*(unsigned __int8 *)(a1 + 194) << 16);
  if ((v26 & 0x10000) != 0) {
    goto LABEL_29;
  }
LABEL_15:
  if ((v26 & 0x20000) != 0)
  {
LABEL_16:
    int v27 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "wifiZaxisData", 12, 18);
    int v28 = v24 + sub_10009C550(a1 + 176, a2);
    int v24 = v27 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v28;
  }
LABEL_17:
  int v29 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 64))(a2);
  uint64_t result = v29 + v24 + (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 40))(a2);
  --a2[6];
  return result;
}

void sub_100048004(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 16);
  v5[8] = v4;
  v5[9] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100048324(v4 + 1888, a2);
  if ((*(unsigned char *)(a1 + 64) & 0x10) != 0) {
    sub_100357550(v5);
  }
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1000480F8(_Unwind_Exception *a1)
{
  sub_1000BA884(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_10004810C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000243FC(&a9);
  sub_1000BA884(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_100048128(_Unwind_Exception *a1)
{
  sub_1000BA884(v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_10004813C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  if (*(void *)(a1 + 48))
  {
    sub_1000AE4B0(v7, "");
    sub_10014C790("Unexpected request to record legacy data for ", &v9);
    sub_1000DA214(v4, &v10);
    sub_10016A2C4((uint64_t)v7, (uint64_t)&v9, 2);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v10.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_5:
        if ((v8 & 0x80000000) == 0) {
          goto LABEL_6;
        }
LABEL_9:
        operator delete(v7[0]);
LABEL_6:
        sub_1000D11E0((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  sub_1000484E8(a1);
  sub_1000485EC(a2, (_DWORD *)(a1 + 80));
  *(unsigned char *)a1 = 1;
  return a1;
}

void sub_10004826C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100048324(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 48))
  {
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
  }
  *(unsigned char *)a1 = 1;
  return a1;
}

uint64_t sub_1000484E8(uint64_t a1)
{
  uint64_t result = sub_100048550();
  if ((uint64_t)(result - *(void *)(a1 + 160)) >= 0x12A05F201)
  {
    *(void *)(a1 + 160) = sub_100042EE0();
    return std::ostream::flush();
  }
  return result;
}

uint64_t sub_100048550()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047DC30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10047DC30))
  {
    mach_timebase_info(&info);
    qword_10047DC28 = (uint64_t)info;
    __cxa_guard_release(&qword_10047DC30);
  }
  return qword_10047DC10 + mach_absolute_time() * qword_10047DC28 / HIDWORD(qword_10047DC28);
}

void sub_1000485D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000485EC(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = a2[7];
  unsigned int v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    void *exception = off_100454818;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  int v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(void *)a2 + 32))(a2, "TimeMappingDiag");
  int v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "timestampNanos", 10, 1)+ v6;
  int v8 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 8));
  int v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "systemTimestampNanos", 10, 2);
  int v11 = v10 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 16));
  int v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "source", 8, 3);
  LODWORD(a1) = v13
              + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 144))(a2, *(unsigned int *)(a1 + 24));
  LODWORD(a1) = a1 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  LODWORD(a1) = v12 + a1 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 64))(a2);
  uint64_t result = a1 + (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_1000488E4()
{
  return 4;
}

uint64_t sub_100048920(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = a2[7];
  unsigned int v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    void *exception = off_100454818;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  int v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(void *)a2 + 32))(a2, "CLOutdoorPosition");
  int v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "timestampNanos", 10, 1)+ v6;
  int v8 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 8));
  int v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "latlon", 12, 2);
  int v11 = v10 + sub_1000499E8(a1 + 32, a2);
  int v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  __int16 v13 = *(_WORD *)(a1 + 136);
  if ((v13 & 0x10) != 0)
  {
    int v27 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "provider", 11, 3);
    int v28 = v27 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 168))(a2, a1 + 64);
    v12 += v28 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
    __int16 v13 = *(_WORD *)(a1 + 136);
    if ((v13 & 0x20) == 0)
    {
LABEL_4:
      if ((v13 & 0x40) == 0) {
        goto LABEL_5;
      }
      goto LABEL_14;
    }
  }
  else if ((v13 & 0x20) == 0)
  {
    goto LABEL_4;
  }
  int v29 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "altitude", 4, 4);
  int v30 = v12 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 88));
  int v12 = v29 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v30;
  __int16 v13 = *(_WORD *)(a1 + 136);
  if ((v13 & 0x40) == 0)
  {
LABEL_5:
    if ((v13 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_14:
  int v31 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "horizontalAccuracy", 4, 5);
  int v32 = v12 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 96));
  int v12 = v31 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v32;
  if ((*(_WORD *)(a1 + 136) & 0x80) != 0)
  {
LABEL_6:
    int v14 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "speed", 4, 6);
    int v15 = v12 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 104));
    int v12 = v14 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v15;
  }
LABEL_7:
  int v16 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "receivedTimestampNanos", 10, 7);
  int v17 = v12 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 16));
  int v18 = v16 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v19 = v18
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "simulationTimestampNanos", 10, 8);
  int v20 = v19 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 24));
  int v21 = v20 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v17;
  __int16 v22 = *(_WORD *)(a1 + 136);
  if ((v22 & 0x100) == 0)
  {
    if ((*(_WORD *)(a1 + 136) & 0x200) == 0) {
      goto LABEL_9;
    }
LABEL_17:
    int v35 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "horzUncSemiMin", 4, 10);
    int v36 = v21 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 120));
    int v21 = v35 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v36;
    if ((*(_WORD *)(a1 + 136) & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  int v33 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "horzUncSemiMaj", 4, 9);
  int v34 = v33 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 112));
  v21 += v34 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  __int16 v22 = *(_WORD *)(a1 + 136);
  if ((v22 & 0x200) != 0) {
    goto LABEL_17;
  }
LABEL_9:
  if ((v22 & 0x400) != 0)
  {
LABEL_10:
    int v23 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "horzUncSemiMajAz", 4, 11);
    int v24 = v21 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 128));
    int v21 = v23 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v24;
  }
LABEL_11:
  int v25 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 64))(a2);
  uint64_t result = v25 + v21 + (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_10004912C(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = a2[7];
  unsigned int v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    void *exception = off_100454818;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  int v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(void *)a2 + 32))(a2, "SensorMeasurement");
  int v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "x", 4, 1)
     + v6;
  int v8 = (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 8));
  int v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "y", 4, 2);
  int v11 = v10 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 16));
  int v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "z", 4, 3);
  int v14 = v13 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 24));
  int v15 = v14 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v16 = v12
      + v15
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "timestampNanos", 10, 4);
  int v17 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 32));
  int v18 = v16 + v17 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  __int16 v19 = *(_WORD *)(a1 + 88);
  if ((v19 & 0x10) != 0)
  {
    int v24 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "accuracy", 8, 5);
    int v25 = v24 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 144))(a2, *(unsigned int *)(a1 + 40));
    v18 += v25 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
    __int16 v19 = *(_WORD *)(a1 + 88);
    if ((v19 & 0x20) == 0)
    {
LABEL_4:
      if ((v19 & 0x40) == 0) {
        goto LABEL_5;
      }
      goto LABEL_12;
    }
  }
  else if ((v19 & 0x20) == 0)
  {
    goto LABEL_4;
  }
  int v26 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "DEPRECATED_eventTimestampNanos", 10, 6);
  int v27 = v18 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 48));
  int v18 = v26 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v27;
  __int16 v19 = *(_WORD *)(a1 + 88);
  if ((v19 & 0x40) == 0)
  {
LABEL_5:
    if ((v19 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  int v28 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "DEPRECATED_pdrTimestampNanos", 10, 7);
  int v29 = v18 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 56));
  int v18 = v28 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v29;
  __int16 v19 = *(_WORD *)(a1 + 88);
  if ((v19 & 0x80) == 0)
  {
LABEL_6:
    if ((v19 & 0x100) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    int v32 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "magAccuracy", 8, 9);
    int v33 = v18 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 144))(a2, *(unsigned int *)(a1 + 72));
    int v18 = v32 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v33;
    if ((*(_WORD *)(a1 + 88) & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_13:
  int v30 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "w", 4, 8);
  int v31 = v18 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 64));
  int v18 = v30 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v31;
  __int16 v19 = *(_WORD *)(a1 + 88);
  if ((v19 & 0x100) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v19 & 0x200) != 0)
  {
LABEL_8:
    int v20 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "cmTimestampSeconds", 4, 10);
    int v21 = v18 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 80));
    int v18 = v20 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v21;
  }
LABEL_9:
  int v22 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 64))(a2);
  uint64_t result = v22 + v18 + (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_1000498B4()
{
  return 3;
}

uint64_t sub_10004991C()
{
  return 0;
}

uint64_t sub_100049924()
{
  return 8;
}

uint64_t sub_100049964()
{
  return 8;
}

uint64_t sub_1000499A0()
{
  return 0;
}

uint64_t sub_1000499A8()
{
  return 0;
}

uint64_t sub_1000499B0()
{
  return 1;
}

uint64_t sub_1000499E8(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = a2[7];
  unsigned int v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    void *exception = off_100454818;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  int v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(void *)a2 + 32))(a2, "LatLon");
  int v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "lat", 4, 1)
     + v6;
  int v8 = (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 8));
  int v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "lon", 4, 2);
  LODWORD(a1) = v10 + (*(uint64_t (**)(_DWORD *, double))(*(void *)a2 + 160))(a2, *(double *)(a1 + 16));
  int v11 = v9 + a1 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  LODWORD(a1) = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 64))(a2);
  uint64_t result = v11 + a1 + (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_100049C48(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = a2[7];
  unsigned int v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    void *exception = off_100454818;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  int v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(void *)a2 + 32))(a2, "DataRunMetadata");
  int v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "locationId", 11, 1)+ v6;
  int v8 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 168))(a2, a1 + 32);
  int v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "phoneModel", 11, 2);
  int v11 = v10 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 168))(a2, a1 + 56);
  int v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "runType", 8, 3);
  int v14 = v13 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 144))(a2, *(unsigned int *)(a1 + 80));
  int v15 = v14 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v16 = v12
      + v15
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "macAddress", 11, 4);
  int v17 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 168))(a2, a1 + 88);
  int v18 = v17 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v19 = v18
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "androidVersion", 11, 5);
  int v20 = v19 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 168))(a2, a1 + 136);
  int v21 = v16 + v20 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v22 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "mappingStartTimestampMillis", 10, 6);
  int v23 = v22 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 160));
  int v24 = v23 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v25 = v24
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "emailAddress", 11, 7);
  int v26 = v25 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 168))(a2, a1 + 168);
  int v27 = v21 + v26 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v28 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "locationGroupId", 11, 8);
  int v29 = v28 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 168))(a2, a1 + 192);
  int v30 = v29 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v31 = v30
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "origDemoWifiSnapshot", 15, 9);
  int v32 = v27
      + v31
      + (*(uint64_t (**)(_DWORD *, uint64_t, void))(*(void *)a2 + 88))(a2, 11, -1431655765 * ((*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 3));
  for (uint64_t i = *(void *)(a1 + 216); i != *(void *)(a1 + 224); i += 24)
    v32 += (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 168))(a2, i);
  int v34 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 96))(a2);
  int v35 = v34 + v32 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v36 = (unsigned __int16 *)(a1 + 400);
  if ((*(_WORD *)(a1 + 400) & 0x800) != 0)
  {
    int v37 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "isServerDataRun", 2, 10);
    int v38 = v37
        + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 240));
    v35 += v38 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  }
  int v39 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "settings", 12, 11);
  int v40 = v35 + sub_1000166EC(a1 + 248, a2);
  int v41 = v39 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v42 = v41
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "surveySdkData", 12, 12);
  int v43 = v42 + sub_1000100F8(a1 + 288, a2);
  int v44 = v43 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v40;
  int v45 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "surveyId", 11, 13);
  int v46 = v45 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 168))(a2, a1 + 8);
  int v47 = v46 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v48 = v47
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "deviceIdForVendor", 11, 14);
  int v49 = v48 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 168))(a2, a1 + 112);
  int v50 = v44 + v49 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  int v51 = *v36;
  int v52 = v51 | (*(unsigned __int8 *)(a1 + 402) << 16);
  if ((v51 & 0x4000) != 0)
  {
    int v57 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "startTimeNanos", 10, 15);
    int v58 = v57 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 352));
    v50 += v58 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
    int v59 = *v36;
    int v52 = v59 | (*(unsigned __int8 *)(a1 + 402) << 16);
    if ((v59 & 0x8000) == 0)
    {
LABEL_8:
      if ((v52 & 0x10000) == 0) {
        goto LABEL_9;
      }
LABEL_14:
      int v62 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "versionNumber", 8, 17);
      int v63 = v50 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 144))(a2, *(unsigned int *)(a1 + 368));
      int v50 = v62 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v63;
      if (((*v36 | (*(unsigned __int8 *)(a1 + 402) << 16)) & 0x20000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if ((v51 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  int v60 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "wallclockStartTimeNanos", 10, 16);
  int v61 = v50 + (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 152))(a2, *(void *)(a1 + 360));
  int v50 = v60 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v61;
  int v52 = *v36 | (*(unsigned __int8 *)(a1 + 402) << 16);
  if ((v52 & 0x10000) != 0) {
    goto LABEL_14;
  }
LABEL_9:
  if ((v52 & 0x20000) != 0)
  {
LABEL_10:
    int v53 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "originalSurveyId", 11, 18);
    int v54 = v50 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a2 + 168))(a2, a1 + 376);
    int v50 = v53 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2) + v54;
  }
LABEL_11:
  int v55 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 64))(a2);
  uint64_t result = v55 + v50 + (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_10004A914(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v2 = *(void *)(a2 + 8);
    if (v2 >> 31)
    {
      exception = __cxa_allocate_exception(0x28uLL);
      exception[2] = 0;
      exception[3] = 0;
      void *exception = off_100454818;
      exception[1] = 0;
      *((_DWORD *)exception + 8) = 3;
    }
  }
  else
  {
    LODWORD(v2) = *(unsigned __int8 *)(a2 + 23);
  }
  std::ostream::write();
  if (v2) {
    std::ostream::write();
  }
  return (v2 + 4);
}

WifiScannerSettings *sub_10004A9F4(uint64_t a1, unint64_t a2, void *a3)
{
  id v333 = a3;
  unint64_t v343 = a2;
  uint64_t v345 = a1;
  if (a2 || [v333 count])
  {
    id v340 = v333;
    *(_OWORD *)v350 = 0u;
    long long v351 = 0u;
    long long v352 = 0u;
    long long v353 = 0u;
    id obj = *(id *)(a1 + 56);
    std::string v5 = (char *)[obj countByEnumeratingWithState:v350 objects:v357 count:16];
    if (!v5) {
      goto LABEL_95;
    }
    uint64_t v338 = *(void *)v351;
    int v6 = (uint64_t *)(a1 + 16);
    v334 = (void *)(a1 + 32);
    while (1)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v351 != v338) {
          objc_enumerationMutation(obj);
        }
        int v8 = [*((id *)v350[1] + i) intValue];
        int v9 = sub_10005AFC4(v8);
        int v10 = v9;
        unint64_t v11 = v9;
        unint64_t v12 = *(void *)(v345 + 24);
        if (v12)
        {
          uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
          v13.i16[0] = vaddlv_u8(v13);
          if (v13.u32[0] > 1uLL)
          {
            a2 = v9;
            if (v12 <= v9) {
              a2 = v9 % v12;
            }
          }
          else
          {
            a2 = (v12 - 1) & v9;
          }
          int v14 = *(void ***)(*v6 + 8 * a2);
          if (v14)
          {
            int v15 = *v14;
            if (*v14)
            {
              if (v13.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v17 = v15[1];
                  if (v17 == v9)
                  {
                    if (*((_DWORD *)v15 + 4) == v9) {
                      goto LABEL_54;
                    }
                  }
                  else if ((v17 & (v12 - 1)) != a2)
                  {
                    goto LABEL_30;
                  }
                  int v15 = (void *)*v15;
                  if (!v15) {
                    goto LABEL_30;
                  }
                }
              }
              do
              {
                unint64_t v16 = v15[1];
                if (v16 == v9)
                {
                  if (*((_DWORD *)v15 + 4) == v9) {
                    goto LABEL_54;
                  }
                }
                else
                {
                  if (v16 >= v12) {
                    v16 %= v12;
                  }
                  if (v16 != a2) {
                    break;
                  }
                }
                int v15 = (void *)*v15;
              }
              while (v15);
            }
          }
        }
LABEL_30:
        int v15 = operator new(0x48uLL);
        *int v15 = 0;
        v15[1] = v11;
        *((_DWORD *)v15 + 4) = v10;
        v15[7] = 0;
        _DWORD v15[8] = 0;
        v15[3] = 10000000000;
        v15[4] = 0;
        v15[5] = 0;
        void v15[6] = 0;
        *((_DWORD *)v15 + 14) = 0;
        float v18 = (float)(unint64_t)(*(void *)(v345 + 40) + 1);
        float v19 = *(float *)(v345 + 48);
        if (v12 && (float)(v19 * (float)v12) >= v18)
        {
          uint64_t v20 = *v6;
          int v21 = *(void **)(*v6 + 8 * a2);
          if (v21) {
            goto LABEL_33;
          }
        }
        else
        {
          BOOL v22 = (v12 & (v12 - 1)) != 0;
          if (v12 < 3) {
            BOOL v22 = 1;
          }
          unint64_t v23 = v22 | (2 * v12);
          unint64_t v24 = vcvtps_u32_f32(v18 / v19);
          if (v23 <= v24) {
            size_t v25 = v24;
          }
          else {
            size_t v25 = v23;
          }
          sub_10005AFE0((uint64_t)v6, v25);
          unint64_t v12 = *(void *)(v345 + 24);
          unint64_t v26 = v12 - 1;
          if ((v12 & (v12 - 1)) != 0)
          {
            if (v12 <= v11)
            {
              a2 = v11 % v12;
              uint64_t v20 = *v6;
              int v21 = *(void **)(*v6 + 8 * (v11 % v12));
              if (v21)
              {
LABEL_33:
                *int v15 = *v21;
LABEL_52:
                void *v21 = v15;
                goto LABEL_53;
              }
            }
            else
            {
              a2 = v11;
              uint64_t v20 = *v6;
              int v21 = *(void **)(*v6 + 8 * v11);
              if (v21) {
                goto LABEL_33;
              }
            }
          }
          else
          {
            a2 = v26 & v11;
            uint64_t v20 = *v6;
            int v21 = *(void **)(*v6 + 8 * (v26 & v11));
            if (v21) {
              goto LABEL_33;
            }
          }
        }
        *int v15 = *v334;
        void *v334 = v15;
        *(void *)(v20 + 8 * a2) = v334;
        if (*v15)
        {
          unint64_t v27 = *(void *)(*v15 + 8);
          if ((v12 & (v12 - 1)) != 0)
          {
            if (v27 >= v12) {
              v27 %= v12;
            }
          }
          else
          {
            v27 &= v12 - 1;
          }
          int v21 = (void *)(*v6 + 8 * v27);
          goto LABEL_52;
        }
LABEL_53:
        ++*(void *)(v345 + 40);
LABEL_54:
        long long v348 = 0u;
        long long v349 = 0u;
        *(_OWORD *)v346 = 0u;
        long long v347 = 0u;
        id v28 = v340;
        int v29 = 0;
        int v30 = (char *)[v28 countByEnumeratingWithState:v346 objects:__p count:16];
        if (v30)
        {
          uint64_t v31 = *(void *)v347;
          do
          {
            for (j = 0; j != v30; ++j)
            {
              if (*(void *)v347 != v31) {
                objc_enumerationMutation(v28);
              }
              if ([*((id *)v346[1] + (void)j) channel] == v8) {
                ++v29;
              }
            }
            int v30 = (char *)[v28 countByEnumeratingWithState:v346 objects:__p count:16];
          }
          while (v30);
        }

        int v34 = (char *)v15[5];
        unint64_t v33 = v15[6];
        if ((unint64_t)v34 >= v33)
        {
          int v36 = (char *)v15[4];
          uint64_t v37 = (v34 - v36) >> 4;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 60) {
            sub_1000A9108();
          }
          uint64_t v39 = v33 - (void)v36;
          if (v39 >> 3 > v38) {
            unint64_t v38 = v39 >> 3;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            if (v40 >> 60) {
              sub_1000A6A10();
            }
            int v41 = (char *)operator new(16 * v40);
          }
          else
          {
            int v41 = 0;
          }
          int v42 = &v41[16 * v37];
          *(void *)int v42 = v343;
          *((_DWORD *)v42 + 2) = v29;
          int v43 = v42;
          if (v34 != v36)
          {
            do
            {
              *((_OWORD *)v43 - 1) = *((_OWORD *)v34 - 1);
              v43 -= 16;
              v34 -= 16;
            }
            while (v34 != v36);
            int v34 = (char *)v15[4];
          }
          a2 = 2;
          int v35 = v42 + 16;
          v15[4] = v43;
          v15[5] = v42 + 16;
          void v15[6] = &v41[16 * v40];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(void *)int v34 = v343;
          *((_DWORD *)v34 + 2) = v29;
          int v35 = v34 + 16;
          a2 = 2;
        }
        v15[5] = v35;
        int v44 = (char *)v15[4];
        uint64_t v45 = ((v35 - v44) >> 4) - 1;
        if (v35 - v44 == 16)
        {
          *((_DWORD *)v15 + 14) = 1;
        }
        else if ((unint64_t)(v35 - v44) >= 0x10)
        {
          uint64_t v46 = 0;
          if ((v35 - v44) >> 4 != 1)
          {
            uint64_t v47 = *(void *)&v44[16 * v45];
            uint64_t v48 = v15[3];
            int v49 = (uint64_t *)v15[4];
            while (1)
            {
              uint64_t v50 = *v49;
              v49 += 2;
              if (v48 >= v47 - v50) {
                break;
              }
              ++v46;
              *((_DWORD *)v15 + 14) = 2;
              if (v45 == v46) {
                goto LABEL_88;
              }
            }
          }
          if (v46 == v45)
          {
LABEL_88:
            *((_DWORD *)v15 + 14) = 1;
            uint64_t v46 = ((v35 - v44) >> 4) - 1;
          }
          memset(v354, 0, sizeof(v354));
          if (v46)
          {
            if (v46 < 0) {
              sub_1000A9108();
            }
            int v51 = &v44[16 * v46];
            size_t v52 = v35 - v51;
            if (v52) {
              memmove(v44, v51, v52);
            }
            v15[5] = &v44[v52];
          }
        }
        _DWORD v15[8] = v343;
      }
      std::string v5 = (char *)[obj countByEnumeratingWithState:v350 objects:v357 count:16];
      if (!v5)
      {
LABEL_95:

        a1 = v345;
        break;
      }
    }
  }
  if (*(_DWORD *)(a1 + 8))
  {
    int v53 = [WifiScannerSettings alloc];
    uint64_t v54 = v345;
    int v55 = *(void **)(v345 + 128);
    *(_OWORD *)v357 = 0u;
    *(_OWORD *)v358 = 0u;
    int v359 = 1065353216;
    v360 = v55;
    int v56 = *(_DWORD *)(v345 + 8);
    if (!v56)
    {
      sub_1000AE4B0(v350, "");
      sub_10024F040("Cannot pickChannels in UNINITALIZED state ", (std::string *)__p);
      sub_10016A2C4((uint64_t)v350, (uint64_t)__p, 1);
      if (SBYTE7(v356) < 0) {
        operator delete(__p[0]);
      }
      if (SBYTE7(v351) < 0) {
        operator delete(v350[0]);
      }
      sub_1000D11E0((uint64_t)v346);
    }
    if (v56 == 1)
    {
      uint64_t v57 = *(void *)(v345 + 88);
      unint64_t v58 = (v57 - *(void *)(v345 + 80)) >> 2 >= (unint64_t)v55 - (unint64_t)v358[1]
          ? (unsigned char *)v55 - (char *)v358[1]
          : (v57 - *(void *)(v345 + 80)) >> 2;
      if (v58)
      {
        do
        {
          LODWORD(v354[0]) = *(_DWORD *)(v57 - 4);
          sub_10033AC28((uint64_t)v357, (int *)v354, v354);
          if (v358[1] > v360)
          {
            sub_1000AE4B0(v350, "");
            sub_10029A20C("Selected channels cannot exceed channelsPerScanCount", (std::string *)__p);
            sub_10016A2C4((uint64_t)v350, (uint64_t)__p, 1);
            if (SBYTE7(v356) < 0) {
              operator delete(__p[0]);
            }
            if (SBYTE7(v351) < 0) {
              operator delete(v350[0]);
            }
            sub_1000D11E0((uint64_t)v346);
          }
          uint64_t v57 = *(void *)(v345 + 88) - 4;
          *(void *)(v345 + 88) = v57;
          --v58;
        }
        while (v58);
        int v55 = v360;
        uint64_t v54 = v345;
      }
    }
    uint64_t v66 = v358[1];
    if (v358[1] >= v55)
    {
      sub_10033AB80((uint64_t)v357);
      id v104 = (id)objc_claimAutoreleasedReturnValue();
      long long v106 = v358[0];
      if (!v358[0]) {
        goto LABEL_173;
      }
      goto LABEL_172;
    }
    v335 = v53;
    uint64_t v67 = *(uint64_t **)(v54 + 32);
    if (v67)
    {
      double v68 = 0;
      double v69 = 0;
      uint64_t v70 = 0;
      while (1)
      {
        int v71 = sub_10016646C(*((_DWORD *)v67 + 4));
        if (v357[1])
        {
          uint8x8_t v72 = (uint8x8_t)vcnt_s8((int8x8_t)v357[1]);
          v72.i16[0] = vaddlv_u8(v72);
          if (v72.u32[0] > 1uLL)
          {
            unint64_t v73 = v71;
            if (v357[1] <= (void *)v71) {
              unint64_t v73 = v71 % (unint64_t)v357[1];
            }
          }
          else
          {
            unint64_t v73 = ((unint64_t)v357[1] - 1) & v71;
          }
          id v74 = (uint64_t **)*((void *)v357[0] + v73);
          if (v74)
          {
            double v75 = *v74;
            if (v75)
            {
              if (v72.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v77 = v75[1];
                  if (v77 == v71)
                  {
                    if (*((_DWORD *)v75 + 4) == v71) {
                      goto LABEL_166;
                    }
                  }
                  else if ((v77 & ((uint64_t)v357[1] - 1)) != v73)
                  {
                    goto LABEL_138;
                  }
                  double v75 = (uint64_t *)*v75;
                  if (!v75) {
                    goto LABEL_138;
                  }
                }
              }
              do
              {
                unint64_t v76 = v75[1];
                if (v76 == v71)
                {
                  if (*((_DWORD *)v75 + 4) == v71) {
                    goto LABEL_166;
                  }
                }
                else
                {
                  if ((void *)v76 >= v357[1]) {
                    v76 %= (unint64_t)v357[1];
                  }
                  if (v76 != v73) {
                    break;
                  }
                }
                double v75 = (uint64_t *)*v75;
              }
              while (v75);
            }
          }
        }
LABEL_138:
        uint64_t v78 = v67[4];
        uint64_t v79 = v67[5];
        if (v78 == v79)
        {
          double v83 = 0.0;
        }
        else
        {
          unint64_t v80 = v79 - v78 - 16;
          if (v80 >= 0x80)
          {
            uint64_t v84 = (v80 >> 4) + 1;
            uint64_t v85 = v84 & 7;
            if ((v84 & 7) == 0) {
              uint64_t v85 = 8;
            }
            uint64_t v86 = v84 - v85;
            uint64_t v82 = v78 + 16 * v86;
            double v87 = (const float *)(v78 + 72);
            int32x4_t v88 = 0uLL;
            int32x4_t v89 = 0uLL;
            do
            {
              double v90 = v87 - 16;
              unsigned long long v91 = (unsigned __int128)vld4q_f32(v90);
              unsigned long long v92 = (unsigned __int128)vld4q_f32(v87);
              int32x4_t v88 = vaddq_s32((int32x4_t)v91, v88);
              int32x4_t v89 = vaddq_s32((int32x4_t)v92, v89);
              v87 += 32;
              v86 -= 8;
            }
            while (v86);
            int v81 = vaddvq_s32(vaddq_s32(v89, v88));
          }
          else
          {
            int v81 = 0;
            uint64_t v82 = v67[4];
          }
          do
          {
            v81 += *(_DWORD *)(v82 + 8);
            v82 += 16;
          }
          while (v82 != v79);
          double v83 = (double)v81;
        }
        int v93 = *((_DWORD *)v67 + 4);
        unint64_t v94 = v343 - v67[8];
        double v95 = v83 / (double)(unint64_t)((v79 - v78) >> 4);
        if (v69 < (double *)v68)
        {
          *(void *)double v69 = v94;
          v69[1] = v95;
          *((_DWORD *)v69 + 6) = v93;
          v69 += 4;
          goto LABEL_165;
        }
        uint64_t v96 = ((char *)v69 - (char *)v70) >> 5;
        unint64_t v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 59) {
          sub_1000A9108();
        }
        if ((v68 - (char *)v70) >> 4 > v97) {
          unint64_t v97 = (v68 - (char *)v70) >> 4;
        }
        if ((unint64_t)(v68 - (char *)v70) >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v98 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v98 = v97;
        }
        if (v98)
        {
          if (v98 >> 59) {
            sub_1000A6A10();
          }
          long long v99 = (char *)operator new(32 * v98);
          uint64_t v100 = (uint64_t)&v99[32 * v96];
          *(void *)uint64_t v100 = v94;
          *(double *)(v100 + 8) = v95;
          *(_DWORD *)(v100 + 24) = v93;
          if (v69 == v70)
          {
LABEL_169:
            long long v103 = (char *)v100;
            double v68 = &v99[32 * v98];
            double v69 = (double *)(v100 + 32);
            if (!v70) {
              goto LABEL_164;
            }
            goto LABEL_163;
          }
        }
        else
        {
          long long v99 = 0;
          uint64_t v100 = 32 * v96;
          *(void *)uint64_t v100 = v94;
          *(double *)(v100 + 8) = v95;
          *(_DWORD *)(v100 + 24) = v93;
          if (v69 == v70) {
            goto LABEL_169;
          }
        }
        uint64_t v101 = v100;
        do
        {
          long long v102 = *((_OWORD *)v69 - 1);
          long long v103 = (char *)(v101 - 32);
          *(_OWORD *)(v101 - 32) = *((_OWORD *)v69 - 2);
          *(_OWORD *)(v101 - 16) = v102;
          v69 -= 4;
          v101 -= 32;
        }
        while (v69 != v70);
        double v68 = &v99[32 * v98];
        double v69 = (double *)(v100 + 32);
        if (!v70) {
          goto LABEL_164;
        }
LABEL_163:
        operator delete(v70);
LABEL_164:
        uint64_t v70 = (double *)v103;
LABEL_165:
        uint64_t v54 = v345;
LABEL_166:
        uint64_t v67 = (uint64_t *)*v67;
        if (!v67)
        {
          uint64_t v66 = v358[1];
          int v55 = v360;
          goto LABEL_195;
        }
      }
    }
    double v69 = 0;
    uint64_t v70 = 0;
LABEL_195:
    unint64_t v123 = (unsigned char *)v55 - v66;
    if (((char *)v69 - (char *)v70) >> 5 < v123) {
      unint64_t v123 = ((char *)v69 - (char *)v70) >> 5;
    }
    int v331 = v123;
    unint64_t v332 = v123 << 32;
    v350[0] = (void *)v54;
    obja = (int *)v70;
    v339 = (char *)&v70[4 * (int)v123];
    if (v339 == (char *)v69) {
      goto LABEL_445;
    }
    int v124 = (char *)v70;
    while (1)
    {
      unint64_t v125 = ((char *)v69 - v124) >> 5;
      if (v125 < 2) {
        goto LABEL_445;
      }
      if (v125 == 3)
      {
        sub_10033AF4C((uint64_t *)v124, (uint64_t *)v124 + 4, (uint64_t *)v69 - 4, (uint64_t *)v350);
        goto LABEL_445;
      }
      if (v125 == 2) {
        break;
      }
      if ((char *)v69 - v124 <= 255)
      {
        if (v69 - 4 == (double *)v124) {
          goto LABEL_445;
        }
LABEL_416:
        if (v124 == (char *)v69) {
          goto LABEL_415;
        }
        v295 = v124 + 32;
        if (v124 + 32 == (char *)v69) {
          goto LABEL_415;
        }
        uint64_t v296 = *(void *)(v54 + 144);
        uint64_t v297 = 1000000 * *(void *)(v54 + 136) + 50000000;
        uint64_t v298 = 1000000 * v296;
        double v299 = (double)v296 * 1000000.0;
        v300 = (double *)v124;
        while (1)
        {
          uint64_t v301 = *(void *)v295;
          uint64_t v302 = *(void *)v295 + v297;
          uint64_t v303 = *(void *)v300;
          uint64_t v304 = *(void *)v300 + v297;
          if (v302 < v298 && v304 < v298)
          {
            double v306 = (double)v302 / v299;
            double v307 = (double)v304;
            if (*(unsigned char *)(v54 + 152))
            {
              long double v308 = v306 * (1.0 - exp(-*((double *)v295 + 1)));
              long double v309 = v307 / v299 * (1.0 - exp(-v300[1]));
              BOOL v310 = v308 == v309;
              if (v308 <= v309) {
                goto LABEL_432;
              }
            }
            else
            {
              BOOL v310 = v306 == v307 / v299;
              if (v306 <= v307 / v299)
              {
LABEL_432:
                if (!v310) {
                  goto LABEL_420;
                }
LABEL_434:
                if (*((_DWORD *)v300 + 6) <= *((_DWORD *)v295 + 6)) {
                  goto LABEL_420;
                }
              }
            }
          }
          else if (v303 >= v301)
          {
            if (v301 != v303) {
              goto LABEL_420;
            }
            goto LABEL_434;
          }
          v300 = (double *)v295;
LABEL_420:
          v295 += 32;
          if (v295 == (char *)v69)
          {
            if (v300 != (double *)v124)
            {
              long long v311 = *((_OWORD *)v124 + 1);
              *(_OWORD *)std::string __p = *(_OWORD *)v124;
              long long v356 = v311;
              long long v312 = *((_OWORD *)v300 + 1);
              *(_OWORD *)int v124 = *(_OWORD *)v300;
              *((_OWORD *)v124 + 1) = v312;
              long long v313 = v356;
              *(_OWORD *)v300 = *(_OWORD *)__p;
              *((_OWORD *)v300 + 1) = v313;
            }
LABEL_415:
            v124 += 32;
            if (v124 != (char *)(v69 - 4)) {
              goto LABEL_416;
            }
LABEL_445:
            v321 = sub_10033AB80((uint64_t)v357);
            int v53 = v335;
            if (v332)
            {
              uint64_t v322 = 32 * v331;
              v323 = obja + 6;
              do
              {
                int v324 = *v323;
                v323 += 8;
                v325 = +[NSNumber numberWithInt:sub_10016646C(v324)];
                [v321 addObject:v325];

                v322 -= 32;
              }
              while (v322);
            }
            id v104 = v321;

            if (obja) {
              operator delete(obja);
            }
            uint64_t v54 = v345;
            long long v106 = v358[0];
            if (!v358[0])
            {
LABEL_173:
              int v108 = v357[0];
              v357[0] = 0;
              if (v108) {
                operator delete(v108);
              }
              uint64_t v109 = *(void *)(v54 + 64);
              unsigned int v110 = atomic_load((unsigned int *)(v54 + 72));
              LODWORD(v105) = v110;
              LOBYTE(v110) = atomic_load((unsigned __int8 *)(v54 + 104));
              double v111 = [(WifiScannerSettings *)v53 initWithChannels:v104 dwell:v109 scanType:2 includingOffChannelResults:0 atDutyCycle:v110 & 1 asLowPriority:v105];

              goto LABEL_185;
            }
            do
            {
LABEL_172:
              uint64_t v107 = (void *)*v106;
              operator delete(v106);
              long long v106 = v107;
            }
            while (v107);
            goto LABEL_173;
          }
        }
      }
      unint64_t v126 = v125 >> 1;
      unint64_t v127 = (unint64_t)&v124[32 * (v125 >> 1)];
      unint64_t v128 = (unint64_t)(v69 - 4);
      int v344 = sub_10033AF4C((uint64_t *)v124, (uint64_t *)v127, (uint64_t *)v69 - 4, (uint64_t *)v350);
      uint64_t v129 = *(void *)(v54 + 144);
      uint64_t v130 = *(void *)v124;
      uint64_t v131 = 1000000 * *(void *)(v54 + 136) + 50000000;
      uint64_t v132 = v131 + *(void *)v124;
      uint64_t v133 = 1000000 * v129;
      uint64_t v134 = *(void *)v127;
      uint64_t v135 = *(void *)v127 + v131;
      BOOL v136 = v132 < 1000000 * v129 && v135 < v133;
      if (v136)
      {
        uint64_t v326 = v131 + *(void *)v124;
        uint64_t v327 = *(void *)(v54 + 144);
        double v137 = (double)v129 * 1000000.0;
        double v138 = (double)v132 / v137;
        if (*(unsigned char *)(v54 + 152))
        {
          uint64_t v341 = *(void *)v124;
          long double v139 = v138 * (1.0 - exp(-*((double *)v124 + 1)));
          long double v140 = exp(-*(double *)(v127 + 8));
          uint64_t v130 = v341;
          long double v141 = (double)v135 / v137 * (1.0 - v140);
          BOOL v142 = v139 == v141;
          if (v139 > v141) {
            goto LABEL_225;
          }
        }
        else
        {
          double v143 = (double)v135 / v137;
          BOOL v142 = v138 == v143;
          if (v138 > v143) {
            goto LABEL_225;
          }
        }
        uint64_t v132 = v326;
        uint64_t v129 = v327;
        if (!v142) {
          goto LABEL_217;
        }
LABEL_216:
        if (*(_DWORD *)&v124[32 * v126 + 24] > *((_DWORD *)v124 + 6)) {
          goto LABEL_225;
        }
        goto LABEL_217;
      }
      if (v134 < v130) {
        goto LABEL_225;
      }
      if (v130 == v134) {
        goto LABEL_216;
      }
LABEL_217:
      unint64_t v144 = (unint64_t)(v69 - 8);
      if (v124 == (char *)(v69 - 8))
      {
LABEL_288:
        unint64_t v201 = (unint64_t)(v124 + 32);
        uint64_t v202 = *(void *)v128;
        if (v132 >= v133 || (uint64_t v203 = v202 + v131, v202 + v131 >= v133))
        {
          if (v202 < v130) {
            goto LABEL_366;
          }
          if (v130 == v202) {
            goto LABEL_349;
          }
          goto LABEL_350;
        }
        uint64_t v328 = v129;
        uint64_t v204 = v132;
        double v205 = (double)v129 * 1000000.0;
        double v206 = (double)v132 / v205;
        if (*(unsigned char *)(v54 + 152))
        {
          uint64_t v207 = v130;
          double v206 = v206 * (1.0 - exp(-*((double *)v124 + 1)));
          long double v208 = exp(-*(v69 - 3));
          uint64_t v130 = v207;
          double v209 = (double)v203 / v205 * (1.0 - v208);
        }
        else
        {
          double v209 = (double)v203 / v205;
        }
        if (v206 <= v209)
        {
          uint64_t v132 = v204;
          uint64_t v129 = v328;
          if (v206 == v209)
          {
LABEL_349:
            if (*((_DWORD *)v69 - 2) > *((_DWORD *)v124 + 6)) {
              goto LABEL_366;
            }
          }
LABEL_350:
          if (v201 == v128) {
            goto LABEL_445;
          }
          double v246 = (double)v129 * 1000000.0;
          double v247 = (double)v132 / v246;
          while (2)
          {
            uint64_t v248 = *(void *)v201;
            if (v132 >= v133 || (uint64_t v249 = v248 + v131, v248 + v131 >= v133))
            {
              if (v248 < v130) {
                goto LABEL_365;
              }
              if (v130 == v248) {
                goto LABEL_352;
              }
            }
            else
            {
              if (*(unsigned char *)(v54 + 152))
              {
                uint64_t v250 = v130;
                uint64_t v251 = v132;
                long double v252 = v247 * (1.0 - exp(-*((double *)v124 + 1)));
                long double v253 = exp(-*(double *)(v201 + 8));
                uint64_t v132 = v251;
                uint64_t v130 = v250;
                long double v254 = (double)v249 / v246 * (1.0 - v253);
                BOOL v255 = v252 == v254;
                if (v252 > v254) {
                  goto LABEL_365;
                }
              }
              else
              {
                double v256 = (double)v249 / v246;
                BOOL v255 = v247 == v256;
                if (v247 > v256)
                {
LABEL_365:
                  long long v257 = *(_OWORD *)(v201 + 16);
                  *(_OWORD *)std::string __p = *(_OWORD *)v201;
                  long long v356 = v257;
                  long long v258 = *((_OWORD *)v69 - 1);
                  *(_OWORD *)unint64_t v201 = *(_OWORD *)v128;
                  *(_OWORD *)(v201 + 16) = v258;
                  v201 += 32;
                  long long v259 = v356;
                  *(_OWORD *)unint64_t v128 = *(_OWORD *)__p;
                  *((_OWORD *)v69 - 1) = v259;
                  break;
                }
              }
              if (!v255) {
                goto LABEL_353;
              }
LABEL_352:
              if (*(_DWORD *)(v201 + 24) > *((_DWORD *)v124 + 6)) {
                goto LABEL_365;
              }
            }
LABEL_353:
            v201 += 32;
            if (v201 == v128) {
              goto LABEL_445;
            }
            continue;
          }
        }
LABEL_366:
        if (v201 == v128) {
          goto LABEL_445;
        }
        while (2)
        {
          uint64_t v260 = *(void *)(v54 + 144);
          uint64_t v261 = *(void *)v124;
          uint64_t v262 = 1000000 * *(void *)(v54 + 136) + 50000000;
          uint64_t v263 = v262 + *(void *)v124;
          uint64_t v264 = 1000000 * v260;
          double v265 = (double)v260 * 1000000.0;
          double v266 = (double)v263 / v265;
          if (v263 >= 1000000 * v260)
          {
            uint64_t v267 = *(void *)v201;
            if (*(void *)v201 < v261) {
              goto LABEL_388;
            }
            do
            {
              if (v261 == v267 && *(_DWORD *)(v201 + 24) > *((_DWORD *)v124 + 6)) {
                break;
              }
              uint64_t v274 = *(void *)(v201 + 32);
              v201 += 32;
              uint64_t v267 = v274;
            }
            while (v274 >= v261);
LABEL_385:
            if (v263 >= v264)
            {
LABEL_388:
              do
              {
                do
                {
                  uint64_t v276 = *(void *)(v128 - 32);
                  v128 -= 32;
                  uint64_t v275 = v276;
                }
                while (v276 < v261);
              }
              while (v261 == v275 && *(_DWORD *)(v128 + 24) > *((_DWORD *)v124 + 6));
LABEL_400:
              if (v201 >= v128)
              {
                if (v201 > (unint64_t)v339) {
                  goto LABEL_445;
                }
                goto LABEL_403;
              }
              long long v284 = *(_OWORD *)(v201 + 16);
              *(_OWORD *)std::string __p = *(_OWORD *)v201;
              long long v356 = v284;
              long long v285 = *(_OWORD *)(v128 + 16);
              *(_OWORD *)unint64_t v201 = *(_OWORD *)v128;
              *(_OWORD *)(v201 + 16) = v285;
              v201 += 32;
              long long v286 = v356;
              *(_OWORD *)unint64_t v128 = *(_OWORD *)__p;
              *(_OWORD *)(v128 + 16) = v286;
              continue;
            }
            while (1)
            {
              uint64_t v278 = *(void *)(v128 - 32);
              v128 -= 32;
              uint64_t v277 = v278;
              uint64_t v279 = v278 + v262;
              if (v278 + v262 >= v264)
              {
                if (v277 < v261) {
                  continue;
                }
                if (v261 != v277) {
                  goto LABEL_400;
                }
              }
              else
              {
                if (*(unsigned char *)(v54 + 152))
                {
                  long double v280 = v266 * (1.0 - exp(-*((double *)v124 + 1)));
                  long double v281 = (double)v279 / v265 * (1.0 - exp(-*(double *)(v128 + 8)));
                  BOOL v282 = v280 == v281;
                  if (v280 > v281) {
                    continue;
                  }
                }
                else
                {
                  double v283 = (double)v279 / v265;
                  BOOL v282 = v266 == v283;
                  if (v266 > v283) {
                    continue;
                  }
                }
                if (!v282) {
                  goto LABEL_400;
                }
              }
              if (*(_DWORD *)(v128 + 24) <= *((_DWORD *)v124 + 6)) {
                goto LABEL_400;
              }
            }
          }
          break;
        }
        while (2)
        {
          uint64_t v268 = *(void *)v201;
          uint64_t v269 = *(void *)v201 + v262;
          if (v269 >= v264)
          {
            if (v268 < v261) {
              goto LABEL_385;
            }
            if (v261 == v268) {
              goto LABEL_370;
            }
          }
          else
          {
            double v270 = (double)v269;
            if (*(unsigned char *)(v54 + 152))
            {
              long double v271 = v266 * (1.0 - exp(-*((double *)v124 + 1)));
              long double v272 = v270 / v265 * (1.0 - exp(-*(double *)(v201 + 8)));
              BOOL v273 = v271 == v272;
              if (v271 > v272) {
                goto LABEL_385;
              }
            }
            else
            {
              BOOL v273 = v266 == v270 / v265;
              if (v266 > v270 / v265) {
                goto LABEL_385;
              }
            }
            if (!v273) {
              goto LABEL_371;
            }
LABEL_370:
            if (*(_DWORD *)(v201 + 24) > *((_DWORD *)v124 + 6)) {
              goto LABEL_385;
            }
          }
LABEL_371:
          v201 += 32;
          continue;
        }
      }
      int v145 = &v124[32 * v126 + 24];
      if (v134 + v131 < v133)
      {
        double v146 = (double)v129 * 1000000.0;
        double v147 = (double)(v134 + v131) / v146;
        uint64_t v342 = v130;
        uint64_t v329 = v131;
        uint64_t v330 = v133;
        while (1)
        {
          uint64_t v180 = *(void *)v144;
          uint64_t v181 = *(void *)v144 + v131;
          if (v181 >= v133)
          {
            if (v134 < v180) {
              goto LABEL_224;
            }
            if (v180 == v134) {
              goto LABEL_268;
            }
          }
          else
          {
            double v182 = (double)v181 / v146;
            if (*(unsigned char *)(v54 + 152))
            {
              uint64_t v183 = v132;
              uint64_t v184 = v129;
              long double v185 = v182 * (1.0 - exp(-*(double *)(v144 + 8)));
              long double v186 = exp(-*(double *)(v127 + 8));
              uint64_t v129 = v184;
              uint64_t v132 = v183;
              uint64_t v130 = v342;
              long double v187 = v147 * (1.0 - v186);
              BOOL v188 = v185 == v187;
              if (v185 > v187) {
                goto LABEL_224;
              }
            }
            else
            {
              BOOL v188 = v182 == v147;
              if (v182 > v147) {
                goto LABEL_224;
              }
            }
            uint64_t v131 = v329;
            uint64_t v133 = v330;
            if (v188)
            {
LABEL_268:
              if (*(_DWORD *)v145 > *(_DWORD *)(v144 + 24)) {
                goto LABEL_224;
              }
            }
          }
          v144 -= 32;
          if ((char *)v144 == v124) {
            goto LABEL_288;
          }
        }
      }
      while (v134 >= *(void *)v144 && (*(void *)v144 != v134 || *(_DWORD *)v145 <= *(_DWORD *)(v144 + 24)))
      {
        v144 -= 32;
        if ((char *)v144 == v124) {
          goto LABEL_288;
        }
      }
LABEL_224:
      long long v148 = *((_OWORD *)v124 + 1);
      *(_OWORD *)std::string __p = *(_OWORD *)v124;
      long long v356 = v148;
      long long v149 = *(_OWORD *)(v144 + 16);
      *(_OWORD *)int v124 = *(_OWORD *)v144;
      *((_OWORD *)v124 + 1) = v149;
      long long v150 = v356;
      *(_OWORD *)unint64_t v144 = *(_OWORD *)__p;
      *(_OWORD *)(v144 + 16) = v150;
      ++v344;
      unint64_t v128 = v144;
LABEL_225:
      if ((unint64_t)(v124 + 32) >= v128)
      {
        uint64_t k = 1;
        goto LABEL_281;
      }
      for (uint64_t k = 1; ; ++k)
      {
        uint64_t v152 = *(void *)(v54 + 144);
        uint64_t v153 = 1000000 * *(void *)(v54 + 136) + 50000000;
        uint64_t v154 = 1000000 * v152;
        uint64_t v155 = *(void *)v127;
        uint64_t v156 = *(void *)v127 + v153;
        double v157 = (double)v152 * 1000000.0;
        double v158 = (double)v156 / v157;
        BOOL v159 = v156 < 1000000 * v152;
        if (v156 < 1000000 * v152)
        {
          for (m = &v124[32 * k + 24]; ; m += 32)
          {
            uint64_t v161 = *((void *)m - 3);
            if (v161 + v153 >= v154)
            {
              if (v155 < v161) {
                goto LABEL_233;
              }
              if (v161 != v155)
              {
LABEL_249:
                uint64_t v54 = v345;
                if (v159) {
                  goto LABEL_258;
                }
                goto LABEL_250;
              }
            }
            else
            {
              double v162 = (double)(v161 + v153) / v157;
              if (*(unsigned char *)(v345 + 152))
              {
                long double v163 = v162 * (1.0 - exp(-*((double *)m - 2)));
                long double v164 = v158 * (1.0 - exp(-*(double *)(v127 + 8)));
                BOOL v165 = v163 == v164;
                if (v163 > v164) {
                  goto LABEL_233;
                }
              }
              else
              {
                BOOL v165 = v162 == v158;
                if (v162 > v158) {
                  goto LABEL_233;
                }
              }
              if (!v165) {
                goto LABEL_249;
              }
            }
            if (*(_DWORD *)(v127 + 24) <= *(_DWORD *)m) {
              goto LABEL_249;
            }
LABEL_233:
            ++k;
          }
        }
        for (n = &v124[32 * k];
              v155 < *(void *)n || *(void *)n == v155 && *(_DWORD *)(v127 + 24) > *((_DWORD *)n + 6);
              n += 32)
        {
          ++k;
        }
        if (v159)
        {
          while (1)
          {
LABEL_258:
            while (1)
            {
              uint64_t v174 = *(void *)(v128 - 32);
              v128 -= 32;
              uint64_t v173 = v174;
              uint64_t v175 = v174 + v153;
              if (v174 + v153 < v154) {
                break;
              }
              if (v155 < v173) {
                goto LABEL_253;
              }
              if (v173 == v155) {
                goto LABEL_257;
              }
            }
            double v176 = (double)v175 / v157;
            if (*(unsigned char *)(v54 + 152))
            {
              long double v177 = v176 * (1.0 - exp(-*(double *)(v128 + 8)));
              long double v178 = v158 * (1.0 - exp(-*(double *)(v127 + 8)));
              BOOL v179 = v177 == v178;
              if (v177 > v178) {
                goto LABEL_253;
              }
            }
            else
            {
              BOOL v179 = v176 == v158;
              if (v176 > v158) {
                goto LABEL_253;
              }
            }
            if (v179)
            {
LABEL_257:
              if (*(_DWORD *)(v127 + 24) > *(_DWORD *)(v128 + 24)) {
                goto LABEL_253;
              }
            }
          }
        }
        do
        {
LABEL_250:
          uint64_t v168 = *(void *)(v128 - 32);
          v128 -= 32;
          uint64_t v167 = v168;
        }
        while (v155 >= v168 && (v167 != v155 || *(_DWORD *)(v127 + 24) <= *(_DWORD *)(v128 + 24)));
LABEL_253:
        uint64_t v169 = &v124[32 * k];
        if ((unint64_t)v169 >= v128) {
          break;
        }
        long long v170 = *((_OWORD *)v169 + 1);
        *(_OWORD *)std::string __p = *(_OWORD *)v169;
        long long v356 = v170;
        long long v171 = *(_OWORD *)(v128 + 16);
        *(_OWORD *)uint64_t v169 = *(_OWORD *)v128;
        *((_OWORD *)v169 + 1) = v171;
        long long v172 = v356;
        *(_OWORD *)unint64_t v128 = *(_OWORD *)__p;
        *(_OWORD *)(v128 + 16) = v172;
        ++v344;
        if ((char *)v127 == v169) {
          unint64_t v127 = v128;
        }
      }
LABEL_281:
      uint64_t v189 = &v124[32 * k];
      if (v189 != (char *)v127)
      {
        uint64_t v190 = *(void *)(v54 + 144);
        uint64_t v191 = *(void *)v127;
        uint64_t v192 = 1000000 * *(void *)(v54 + 136) + 50000000;
        uint64_t v193 = v192 + *(void *)v127;
        uint64_t v194 = *(void *)v189;
        uint64_t v195 = *(void *)v189 + v192;
        if (v193 < 1000000 * v190 && v195 < 1000000 * v190)
        {
          double v210 = (double)v190 * 1000000.0;
          double v211 = (double)v193 / v210;
          double v212 = (double)v195;
          if (*(unsigned char *)(v54 + 152))
          {
            long double v213 = v211 * (1.0 - exp(-*(double *)(v127 + 8)));
            long double v214 = v212 / v210 * (1.0 - exp(-*((double *)v189 + 1)));
            BOOL v215 = v213 == v214;
            if (v213 > v214) {
              goto LABEL_287;
            }
          }
          else
          {
            BOOL v215 = v211 == v212 / v210;
            if (v211 > v212 / v210) {
              goto LABEL_287;
            }
          }
          if (v215 && *(_DWORD *)&v124[32 * k + 24] > *(_DWORD *)(v127 + 24))
          {
LABEL_287:
            long long v197 = *((_OWORD *)v189 + 1);
            *(_OWORD *)std::string __p = *(_OWORD *)v189;
            long long v356 = v197;
            long long v198 = *(_OWORD *)(v127 + 16);
            *(_OWORD *)uint64_t v189 = *(_OWORD *)v127;
            *((_OWORD *)v189 + 1) = v198;
            long long v199 = v356;
            *(_OWORD *)unint64_t v127 = *(_OWORD *)__p;
            *(_OWORD *)(v127 + 16) = v199;
            int v200 = v344 + 1;
            goto LABEL_306;
          }
        }
        else if (v194 < v191 || v191 == v194 && *(_DWORD *)&v124[32 * k + 24] > *(_DWORD *)(v127 + 24))
        {
          goto LABEL_287;
        }
      }
      int v200 = v344;
LABEL_306:
      if (v189 == v339) {
        goto LABEL_445;
      }
      if (!v200)
      {
        if (v189 > v339)
        {
          if (k == 1) {
            goto LABEL_445;
          }
          uint64_t v216 = *(void *)(v54 + 144);
          uint64_t v217 = 1000000 * *(void *)(v54 + 136) + 50000000;
          uint64_t v218 = 1000000 * v216;
          double v219 = (double)v216 * 1000000.0;
          std::string::size_type v221 = v124 + 56;
          uint64_t v220 = *(void *)v124;
          uint64_t v222 = 32 * k - 32;
          while (1)
          {
            uint64_t v223 = *((void *)v221 - 3);
            uint64_t v224 = v220 + v217;
            if (v223 + v217 < v218 && v224 < v218)
            {
              double v226 = (double)(v223 + v217) / v219;
              double v227 = (double)v224;
              if (*(unsigned char *)(v54 + 152))
              {
                long double v228 = v226 * (1.0 - exp(-*((double *)v221 - 2)));
                long double v229 = v227 / v219 * (1.0 - exp(-*((double *)v221 - 6)));
                BOOL v230 = v228 == v229;
                if (v228 > v229) {
                  goto LABEL_308;
                }
              }
              else
              {
                BOOL v230 = v226 == v227 / v219;
                if (v226 > v227 / v219) {
                  goto LABEL_308;
                }
              }
              if (v230)
              {
LABEL_314:
                if (*(v221 - 8) > *v221) {
                  goto LABEL_308;
                }
              }
            }
            else
            {
              if (v220 < v223) {
                goto LABEL_308;
              }
              if (v223 == v220) {
                goto LABEL_314;
              }
            }
            v221 += 8;
            uint64_t v220 = v223;
            v222 -= 32;
            if (!v222) {
              goto LABEL_445;
            }
          }
        }
        if (v189 + 32 == (char *)v69) {
          goto LABEL_445;
        }
        uint64_t v231 = *(void *)(v54 + 144);
        uint64_t v232 = 1000000 * *(void *)(v54 + 136) + 50000000;
        uint64_t v233 = 1000000 * v231;
        double v234 = (double)v231 * 1000000.0;
        uint64_t v235 = *(void *)v189;
        uint64_t v236 = &v124[32 * k + 56];
        while (1)
        {
          uint64_t v238 = *((void *)v236 - 3);
          uint64_t v239 = v235 + v232;
          if (v238 + v232 < v233 && v239 < v233)
          {
            double v241 = (double)(v238 + v232) / v234;
            double v242 = (double)v239;
            if (*(unsigned char *)(v54 + 152))
            {
              long double v243 = v241 * (1.0 - exp(-*((double *)v236 - 2)));
              long double v244 = v242 / v234 * (1.0 - exp(-*((double *)v236 - 6)));
              BOOL v245 = v243 == v244;
              if (v243 > v244) {
                break;
              }
            }
            else
            {
              BOOL v245 = v241 == v242 / v234;
              if (v241 > v242 / v234) {
                break;
              }
            }
            if (v245)
            {
LABEL_331:
              if (*((_DWORD *)v236 - 8) > *(_DWORD *)v236) {
                break;
              }
            }
          }
          else
          {
            if (v235 < v238) {
              break;
            }
            if (v238 == v235) {
              goto LABEL_331;
            }
          }
          v237 = (double *)(v236 + 8);
          v236 += 32;
          uint64_t v235 = v238;
          if (v237 == v69) {
            goto LABEL_445;
          }
        }
      }
LABEL_308:
      if (v189 <= v339)
      {
        unint64_t v201 = (unint64_t)(v189 + 32);
      }
      else
      {
        double v69 = (double *)v189;
        unint64_t v201 = (unint64_t)v124;
      }
LABEL_403:
      int v124 = (char *)v201;
      if (v69 == (double *)v339) {
        goto LABEL_445;
      }
    }
    v288 = v69 - 4;
    uint64_t v287 = *((void *)v69 - 4);
    uint64_t v289 = *(void *)(v54 + 144);
    uint64_t v290 = 1000000 * *(void *)(v54 + 136) + 50000000;
    uint64_t v291 = v290 + v287;
    uint64_t v292 = *(void *)v124;
    BOOL v136 = v290 + v287 < 1000000 * v289;
    uint64_t v293 = *(void *)v124 + v290;
    if (v136 && v293 < 1000000 * v289)
    {
      double v314 = (double)v289 * 1000000.0;
      double v315 = (double)v291 / v314;
      double v316 = (double)v293;
      if (*(unsigned char *)(v54 + 152))
      {
        double v315 = v315 * (1.0 - exp(-*(v69 - 3)));
        double v317 = v316 / v314 * (1.0 - exp(-*((double *)v124 + 1)));
      }
      else
      {
        double v317 = v316 / v314;
      }
      if (v315 <= v317)
      {
        if (v315 != v317) {
          goto LABEL_445;
        }
LABEL_443:
        if (*((_DWORD *)v124 + 6) <= *((_DWORD *)v69 - 2)) {
          goto LABEL_445;
        }
      }
    }
    else if (v292 >= v287)
    {
      if (v287 != v292) {
        goto LABEL_445;
      }
      goto LABEL_443;
    }
    long long v318 = *((_OWORD *)v124 + 1);
    *(_OWORD *)std::string __p = *(_OWORD *)v124;
    long long v356 = v318;
    long long v319 = *((_OWORD *)v69 - 1);
    *(_OWORD *)int v124 = *(_OWORD *)v288;
    *((_OWORD *)v124 + 1) = v319;
    long long v320 = v356;
    *(_OWORD *)v288 = *(_OWORD *)__p;
    *((_OWORD *)v69 - 1) = v320;
    goto LABEL_445;
  }
  (*(void (**)(void, unint64_t, id))(**(void **)(a1 + 112) + 40))(*(void *)(a1 + 112), v343, v333);
  int v59 = (WifiScannerSettings *)objc_claimAutoreleasedReturnValue();
  int v61 = *(_DWORD **)(v345 + 80);
  int v60 = *(_DWORD **)(v345 + 88);
  if (v61 != v60)
  {
    while (1)
    {
      uint64_t v62 = *v61;
      int v63 = [(WifiScannerSettings *)v59 channels];
      char v64 = +[NSNumber numberWithInt:v62];
      unsigned __int8 v65 = [v63 containsObject:v64];

      if (v65) {
        break;
      }
      if (++v61 == v60)
      {
        int v61 = v60;
        goto LABEL_182;
      }
    }
    if (v61 != v60)
    {
      for (iuint64_t i = v61 + 1; ii != v60; ++ii)
      {
        uint64_t v113 = *ii;
        uint64_t v114 = [(WifiScannerSettings *)v59 channels];
        uint64_t v115 = +[NSNumber numberWithInt:v113];
        unsigned __int8 v116 = [v114 containsObject:v115];

        if ((v116 & 1) == 0) {
          *v61++ = *ii;
        }
      }
    }
  }
LABEL_182:
  if (v61 != *(_DWORD **)(v345 + 88)) {
    *(void *)(v345 + 88) = v61;
  }
  double v111 = v59;
LABEL_185:
  int v117 = [(WifiScannerSettings *)v111 channels];
  id v118 = [v117 copy];
  __int16 v119 = *(void **)(v345 + 56);
  *(void *)(v345 + 56) = v118;

  int v120 = *(_DWORD *)(v345 + 8);
  if (v120)
  {
    if (v120 != 1) {
      goto LABEL_193;
    }
    goto LABEL_187;
  }
  if (!(*(unsigned int (**)(void))(**(void **)(v345 + 112) + 16))(*(void *)(v345 + 112)))
  {
    if (*(_DWORD *)(v345 + 8) != 1) {
      goto LABEL_193;
    }
LABEL_187:
    if (*(void *)(v345 + 80) == *(void *)(v345 + 88)) {
      goto LABEL_191;
    }
    goto LABEL_193;
  }
  *(_DWORD *)(v345 + 8) = 1;
  if (*(void *)(v345 + 80) == *(void *)(v345 + 88)) {
LABEL_191:
  }
    *(_DWORD *)(v345 + 8) = 2;
LABEL_193:
  long long v121 = v111;

  return v121;
}

void sub_10004C5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  sub_100258574((uint64_t)&a62);

  _Unwind_Resume(a1);
}

void sub_10004CC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10004CE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004CE64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004CE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception a14)
{
  std::exception::~exception(&a14);

  _Unwind_Resume(a1);
}

double sub_10004CE90(double *a1, uint64_t a2)
{
  unsigned int v3 = *(double **)a2;
  uint64_t v4 = *(double **)(a2 + 8);
  if ((unint64_t)v4 - *(void *)a2 >= 0x40)
  {
    LODWORD(v23) = 0;
    BYTE4(v23) = 0;
    if (v3 + 2 != v4)
    {
      do
      {
        if (!sub_10004D030(a1, v3, v3 + 2, (uint64_t)&v23)) {
          break;
        }
        int v6 = v3 + 4;
        v3 += 2;
      }
      while (v6 != v4);
      if (BYTE4(v23) || v23) {
        return sub_10004D74C(a1, *(double ***)(a2 + 24), *(double ***)(a2 + 32));
      }
      unsigned int v3 = *(double **)a2;
      uint64_t v4 = *(double **)(a2 + 8);
    }
  }
  if (v4 == v3) {
    return 0.0;
  }
  uint64_t v21 = 0;
  BOOL v22 = 0;
  unint64_t v23 = 0;
  sub_10004D3F0(a1, v3, v4, (uint64_t)&v20, &v23, &v22, (double *)&v21);
  double v8 = v22[1];
  double v9 = *a1;
  double v10 = a1[1];
  double v11 = v23[1];
  double v12 = *v22 - *v23;
  double v13 = v8 - v11;
  double v14 = *a1 - *v23;
  double v15 = (v10 - v11) * (v8 - v11) + v14 * v12;
  if (v15 <= 0.0)
  {
    double v19 = v14 * v14 + 0.0 + (v10 - v11) * (v10 - v11);
  }
  else
  {
    double v16 = v13 * v13 + v12 * v12;
    if (v16 <= v15)
    {
      double v17 = v10 - v8;
      double v18 = v9 - *v22;
    }
    else
    {
      double v17 = v10 - (v11 + v13 * (v15 / v16));
      double v18 = v9 - (*v23 + v12 * (v15 / v16));
    }
    double v19 = v18 * v18 + 0.0 + v17 * v17;
  }
  return sqrt(v19);
}

BOOL sub_10004D030(double *a1, double *a2, double *a3, uint64_t a4)
{
  double v5 = *a1;
  double v6 = *a2;
  double v7 = *a3;
  if (*a2 != *a1)
  {
    if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      BOOL v8 = 0;
      if (v7 != v5) {
        goto LABEL_24;
      }
    }
    else
    {
      double v15 = vabdd_f64(v6, v5);
      double v16 = fabs(v6);
      double v17 = fabs(v5);
      if (v16 < v17) {
        double v16 = v17;
      }
      if (v16 >= 1.0) {
        double v18 = v16 * 2.22044605e-16;
      }
      else {
        double v18 = 2.22044605e-16;
      }
      BOOL v8 = v15 <= v18;
      if (v7 != v5) {
        goto LABEL_24;
      }
    }
LABEL_3:
    BOOL v9 = 1;
    if (v8)
    {
LABEL_4:
      double v10 = a1[1];
      double v11 = a2[1];
      double v12 = a3[1];
      BOOL v13 = v11 > v10 || v12 < v10;
      if (!v13 || (v11 >= v10 ? (BOOL v14 = v12 > v10) : (BOOL v14 = 1), !v14)) {
        *(unsigned char *)(a4 + 4) = 1;
      }
      return *(unsigned char *)(a4 + 4) == 0;
    }
    goto LABEL_36;
  }
  BOOL v8 = 1;
  if (v7 == v5) {
    goto LABEL_3;
  }
LABEL_24:
  if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v20 = vabdd_f64(v7, v5);
    double v21 = fabs(v7);
    double v22 = fabs(v5);
    if (v21 < v22) {
      double v21 = v22;
    }
    if (v21 >= 1.0) {
      double v23 = v21 * 2.22044605e-16;
    }
    else {
      double v23 = 2.22044605e-16;
    }
    BOOL v9 = v20 <= v23;
    if (v8 && v9) {
      goto LABEL_4;
    }
LABEL_36:
    if (v8) {
      goto LABEL_37;
    }
    if (v9)
    {
      int v24 = 1;
      BOOL v25 = v6 <= v5;
      int v26 = -1;
      goto LABEL_40;
    }
    goto LABEL_58;
  }
  if (v8)
  {
LABEL_37:
    int v24 = -1;
    BOOL v25 = v7 <= v5;
    int v26 = 1;
LABEL_40:
    if (v25) {
      int v27 = v24;
    }
    else {
      int v27 = v26;
    }
    if (v8) {
      id v28 = a2;
    }
    else {
      id v28 = a3;
    }
    double v29 = a1[1];
    double v30 = v28[1];
    if (v29 != v30)
    {
      if ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_55;
      }
      double v31 = vabdd_f64(v29, v30);
      double v32 = fabs(v29);
      double v33 = fabs(v30);
      if (v32 < v33) {
        double v32 = v33;
      }
      double v34 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
      if (v31 > v34)
      {
LABEL_55:
        if (v29 >= v30) {
          int v35 = v27;
        }
        else {
          int v35 = -v27;
        }
        goto LABEL_80;
      }
    }
    goto LABEL_70;
  }
LABEL_58:
  if (v6 < v5 && v7 > v5)
  {
    int v27 = 2;
    goto LABEL_69;
  }
  if (v6 > v5 && v7 < v5)
  {
    int v27 = -2;
LABEL_69:
    double v41 = 1.0;
    double v38 = sub_10004D628(a2, a3, a1, &v41);
    if (v38 != 0.0)
    {
      if ((*(void *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v38 > 0.0) {
          int v35 = 1;
        }
        else {
          int v35 = -1;
        }
      }
      else
      {
        double v40 = fabs(v38);
        if (v38 > 0.0) {
          int v35 = 1;
        }
        else {
          int v35 = -1;
        }
        if (v40 <= v41 * 2.22044605e-16) {
          goto LABEL_70;
        }
      }
LABEL_80:
      if (v27 * v35 >= 1) {
        *(_DWORD *)a4 += v27;
      }
      return *(unsigned char *)(a4 + 4) == 0;
    }
LABEL_70:
    BOOL result = 0;
    *(unsigned char *)(a4 + 4) = 1;
    *(_DWORD *)a4 = 0;
    return result;
  }
  return *(unsigned char *)(a4 + 4) == 0;
}

void sub_10004D39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004D3B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double *sub_10004D3F0(double *result, double *a2, double *a3, uint64_t a4, double **a5, double **a6, double *a7)
{
  if (a2 + 2 != a3)
  {
    double v7 = a2[2];
    double v8 = a2[3];
    double v9 = *result;
    double v10 = result[1];
    double v11 = a2[1];
    double v12 = v7 - *a2;
    double v13 = v8 - v11;
    double v14 = *result - *a2;
    double v15 = (v10 - v11) * (v8 - v11) + v14 * v12;
    if (v15 <= 0.0)
    {
      double v28 = v14 * v14 + 0.0 + (v10 - v11) * (v10 - v11);
      *a7 = v28;
      if (a2 + 4 != a3)
      {
LABEL_13:
        double v29 = a2 + 2;
        double v30 = a2 + 3;
        do
        {
          double v32 = *(v30 - 1);
          double v34 = v30[1];
          double v33 = v30[2];
          double v35 = *result;
          double v36 = result[1];
          double v37 = v34 - v32;
          double v38 = v33 - *v30;
          double v39 = *result - v32;
          double v40 = v36 - *v30;
          double v41 = v40 * v38 + v39 * (v34 - v32);
          if (v41 <= 0.0)
          {
            double v43 = v39 * v39 + 0.0 + v40 * v40;
            if (v43 == 0.0) {
              goto LABEL_25;
            }
          }
          else
          {
            double v42 = v38 * v38 + v37 * v37;
            if (v42 <= v41)
            {
              double v43 = (v35 - v34) * (v35 - v34) + 0.0 + (v36 - v33) * (v36 - v33);
              if (v43 == 0.0)
              {
LABEL_25:
                *a7 = 0.0;
                *a5 = v29;
                *a6 = v29 + 2;
                return result;
              }
            }
            else
            {
              double v43 = (v35 - (v32 + v37 * (v41 / v42))) * (v35 - (v32 + v37 * (v41 / v42)))
                  + 0.0
                  + (v36 - (*v30 + v38 * (v41 / v42))) * (v36 - (*v30 + v38 * (v41 / v42)));
              if (v43 == 0.0) {
                goto LABEL_25;
              }
            }
          }
          if (v43 < v28)
          {
            *a7 = v43;
            double v28 = v43;
            a2 = v30 - 1;
          }
          v29 += 2;
          double v31 = v30 + 3;
          v30 += 2;
        }
        while (v31 != a3);
      }
    }
    else
    {
      double v16 = v13 * v13 + v12 * v12;
      if (v16 <= v15)
      {
        double v17 = v10 - v8;
        double v18 = v9 - v7;
      }
      else
      {
        double v17 = v10 - (v11 + v13 * (v15 / v16));
        double v18 = v9 - (*a2 + v12 * (v15 / v16));
      }
      double v28 = v18 * v18 + 0.0 + v17 * v17;
      *a7 = v28;
      if (a2 + 4 != a3) {
        goto LABEL_13;
      }
    }
    *a6 = a2;
    *a5 = a2;
    *a6 += 2;
    return result;
  }
  *a6 = a2;
  *a5 = a2;
  double v19 = *a2;
  double v20 = a2[1];
  double v21 = result[1];
  double v22 = v19 - v19;
  double v23 = v20 - v20;
  double v24 = *result - *a2;
  double v25 = (v20 - v20) * (v21 - v20) + v24 * (v19 - v19);
  if (v25 <= 0.0 || (double v26 = v23 * v23 + v22 * v22, v26 <= v25))
  {
    *a7 = v24 * v24 + 0.0 + (v21 - v20) * (v21 - v20);
  }
  else
  {
    double v27 = *result - (v19 + v22 * (v25 / v26));
    *a7 = v27 * v27 + 0.0 + (v21 - (v20 + v23 * (v25 / v26))) * (v21 - (v20 + v23 * (v25 / v26)));
  }
  return result;
}

double sub_10004D628(double *a1, double *a2, double *a3, double *a4)
{
  double v4 = a1[1];
  v20[0] = *a1;
  v20[1] = v4;
  double v5 = a2[1];
  v19[0] = *a2;
  v19[1] = v5;
  double v6 = a3[1];
  v18[0] = *a3;
  v18[1] = v6;
  double v7 = v20[0] - v18[0];
  v27[0] = v20[0] - v18[0];
  double v8 = v5 - v6;
  v26[0] = v5 - v6;
  double v9 = v4 - v6;
  v25[0] = v4 - v6;
  double v10 = v19[0] - v18[0];
  v24[0] = v19[0] - v18[0];
  double v11 = vabdd_f64(v20[0], v18[0]);
  double v12 = vabdd_f64(v5, v6);
  double v13 = vabdd_f64(v4, v6);
  double v14 = vabdd_f64(v19[0], v18[0]);
  if (v11 < v12) {
    double v11 = v12;
  }
  if (v11 < v13) {
    double v11 = v13;
  }
  if (v11 < v14) {
    double v11 = v14;
  }
  if (v11 < 1.0) {
    double v11 = 1.0;
  }
  *a4 = v11;
  double v15 = v7 * v8;
  v23[0] = v7 * v8;
  double v16 = v10 * v9;
  double result = v7 * v8 - v10 * v9;
  double v21 = fabs(v7 * v8) + fabs(v10 * v9);
  v22[0] = v10 * v9;
  if (vabdd_f64(v7 * v8, v10 * v9) < v21 * 3.33066907e-16 && (v15 <= 0.0 || v16 > 0.0) && (v15 >= 0.0 || v16 < 0.0)) {
    return sub_1001DF5F4(v20, v19, v18, v27, v26, v25, v24, v23, v22, &v21);
  }
  return result;
}

double sub_10004D74C(double *a1, double **a2, double **a3)
{
  double v3 = 0.0;
  if (a2 != a3)
  {
    double v5 = a2;
    while (1)
    {
      double v7 = *v5;
      double v8 = v5[1];
      if ((unint64_t)((char *)v8 - (char *)*v5) >= 0x40)
      {
        LODWORD(v28) = 0;
        BYTE4(v28) = 0;
        if (v7 + 2 != v8)
        {
          do
          {
            if (!sub_10004D030(a1, v7, v7 + 2, (uint64_t)&v28)) {
              break;
            }
            double v9 = v7 + 4;
            v7 += 2;
          }
          while (v9 != v8);
          if (!BYTE4(v28) && v28) {
            break;
          }
        }
      }
      v5 += 3;
      if (v5 == a3) {
        return v3;
      }
    }
    double v10 = *v5;
    double v11 = v5[1];
    if (v11 != *v5)
    {
      uint64_t v26 = 0;
      double v27 = 0;
      double v28 = 0;
      sub_10004D3F0(a1, v10, v11, (uint64_t)&v25, &v28, &v27, (double *)&v26);
      double v12 = v27[1];
      double v13 = *a1;
      double v14 = a1[1];
      double v15 = v28[1];
      double v16 = *v27 - *v28;
      double v17 = v12 - v15;
      double v18 = *a1 - *v28;
      double v19 = (v14 - v15) * (v12 - v15) + v18 * v16;
      if (v19 <= 0.0)
      {
        double v23 = v18 * v18 + 0.0 + (v14 - v15) * (v14 - v15);
      }
      else
      {
        double v20 = v17 * v17 + v16 * v16;
        if (v20 <= v19)
        {
          double v21 = v14 - v12;
          double v22 = v13 - *v27;
        }
        else
        {
          double v21 = v14 - (v15 + v17 * (v19 / v20));
          double v22 = v13 - (*v28 + v16 * (v19 / v20));
        }
        double v23 = v22 * v22 + 0.0 + v21 * v21;
      }
      return sqrt(v23);
    }
  }
  return v3;
}

void sub_10004D8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (!*(unsigned char *)(a2 + 104))
  {
    buf.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
    sub_10001E6D0((const std::chrono::system_clock::time_point *)&buf);
  }
  double v8 = (_OWORD *)(a2 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_1000559FC(&buf.__r_.__value_.__s.__data_[8], *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = *v8;
    uint64_t v18 = *(void *)(a2 + 128);
  }
  buf.__r_.__value_.__s.__data_[0] = 1;
  if (SHIBYTE(v18) < 0)
  {
    operator delete((void *)buf.__r_.__value_.__l.__size_);
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (*(unsigned char *)(a2 + 104))
    {
LABEL_8:
      if (*(char *)(a2 + 135) < 0)
      {
        sub_1000559FC(&buf.__r_.__value_.__s.__data_[8], *(void **)(a2 + 112), *(void *)(a2 + 120));
      }
      else
      {
        *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = *v8;
        uint64_t v18 = *(void *)(a2 + 128);
      }
      buf.__r_.__value_.__s.__data_[0] = 1;
      uint64_t v9 = a1 + 8;
      if (*(char *)(a1 + 31) < 0) {
        goto LABEL_15;
      }
      goto LABEL_12;
    }
  }
  else
  {
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (*(unsigned char *)(a2 + 104)) {
      goto LABEL_8;
    }
  }
  uint64_t v9 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
LABEL_15:
  }
    operator delete(*(void **)v9);
LABEL_12:
  *(_OWORD *)uint64_t v9 = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
  *(void *)(v9 + 16) = v18;
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 56) + 32))(&v15);
  *((unsigned char *)&v16.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v16, "logs");
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000559FC(&buf, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = v15;
  }
  sub_1000512AC(&buf, (uint64_t)&v16);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_1000559FC(&v19, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v19 = *(_OWORD *)(a1 + 8);
    uint64_t v20 = *(void *)(a1 + 24);
  }
  sub_1000512AC(&buf, (uint64_t)&v19);
  std::string v14 = buf;
  memset(&buf, 0, sizeof(buf));
  if ((SHIBYTE(v20) & 0x80000000) == 0
    || (operator delete((void *)v19), (SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
LABEL_25:
  }
    operator delete(v16.__r_.__value_.__l.__data_);
LABEL_26:
  sub_10003F5E8((uint64_t)&v14, 0);
  sub_100056B28((const char *)&v14, 0, (int *)&buf);
  if (LODWORD(buf.__r_.__value_.__l.__data_) <= 1)
  {
    __cxa_allocate_exception(0x60uLL);
    memset(&v16, 0, sizeof(v16));
    boost::filesystem::filesystem_error::filesystem_error(&buf, "Log directory doesn't exist", &v14, &v16);
    sub_10018E868((uint64_t)&v19);
    sub_100171084((uint64_t)&buf, (uint64_t)"fs::path generateLogDirectory(const IBackgroundUploader &, const std::string &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/demo/map_run.cpp", 73, (uint64_t)&v19);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    double v10 = (void **)(a1 + 32);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_29;
    }
  }
  else
  {
    double v10 = (void **)(a1 + 32);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_29;
    }
  }
  operator delete(*v10);
LABEL_29:
  *(std::string *)double v10 = v14;
  if (qword_10047BED8 == -1)
  {
    double v11 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_34;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100469E98);
    double v11 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_34;
    }
  }
  double v12 = v10;
  if (*(char *)(a1 + 55) < 0) {
    double v12 = *v10;
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Logging sensors into %s", (uint8_t *)&buf, 0xCu);
LABEL_34:
  sub_10001DF04(a1, a3, a4);
  if (*(_DWORD *)(a1 + 4) == 2) {
    sub_1000202DC(a1, (const std::string *)a2, a3, a4);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a3 + 48))(&buf, a3);
  *((unsigned char *)&v15.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v15, "phoneinfo.txt");
  if (*(char *)(a1 + 55) < 0) {
    sub_1000559FC(&v16, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
    std::string v16 = *(std::string *)v10;
  }
  sub_1000512AC(&v16, (uint64_t)&v15);
  LOBYTE(v19) = 0;
  sub_10009D240((const void **)&buf.__r_.__value_.__l.__data_, &v16, (uint64_t)&v19, 1, &v13);
  sub_100052AEC(&v13);
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
LABEL_46:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_47;
  }
  operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_43:
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return;
  }
LABEL_47:
  operator delete(buf.__r_.__value_.__l.__data_);
}

void sub_10004E624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a49 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a49 & 0x80000000) == 0)
  {
LABEL_3:
    if (a42 < 0) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  operator delete(v62[4]);
  if (a42 < 0)
  {
LABEL_4:
    operator delete(a37);
    if ((a35 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  if ((a35 & 0x80000000) == 0)
  {
LABEL_5:
    if (a28 < 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a30);
  if (a28 < 0)
  {
LABEL_6:
    operator delete(a23);
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a56 & 0x80000000) == 0)
    {
LABEL_16:
      if (*(char *)(v63 - 105) < 0) {
        operator delete(v62[30]);
      }
      if (a62 < 0) {
        operator delete(v62[11]);
      }
      _Unwind_Resume(a1);
    }
LABEL_15:
    operator delete(v62[8]);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a17);
  if ((a56 & 0x80000000) == 0) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

void sub_10004E760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a38 < 0) {
    operator delete(v44[8]);
  }
  if (*(char *)(v45 - 105) < 0) {
    operator delete(v44[30]);
  }
  if (a44 < 0) {
    operator delete(v44[11]);
  }
  _Unwind_Resume(a1);
}

void sub_10004E7D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0)
  {
    operator delete(*(void **)(v43 + 88));
    if ((*(char *)(v44 - 201) & 0x80000000) == 0)
    {
LABEL_3:
      if (a2 != 1) {
LABEL_12:
      }
        JUMPOUT(0x10004ED54);
LABEL_7:
      __cxa_begin_catch(a1);
      if (*(void *)(v41 + 3800) == -1)
      {
        if (!os_log_type_enabled(*(os_log_t *)(v42 + 3808), OS_LOG_TYPE_ERROR))
        {
LABEL_9:
          __cxa_end_catch();
          JUMPOUT(0x10004E490);
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_100469E98);
        if (!os_log_type_enabled(*(os_log_t *)(v42 + 3808), OS_LOG_TYPE_ERROR)) {
          goto LABEL_9;
        }
      }
      __cxa_rethrow();
    }
  }
  else if ((*(char *)(v44 - 201) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v43 + 144));
  if (a2 != 1) {
    goto LABEL_12;
  }
  goto LABEL_7;
}

void sub_10004E7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (*(char *)(v45 - 201) < 0)
  {
    operator delete(*(void **)(v44 + 144));
    if (a44 < 0) {
      goto LABEL_8;
    }
  }
  else if (a44 < 0)
  {
LABEL_8:
    JUMPOUT(0x10004ED40);
  }
  JUMPOUT(0x10004ED44);
}

void sub_10004E7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if ((a44 & 0x80000000) == 0) {
    JUMPOUT(0x10004ED44);
  }
  JUMPOUT(0x10004ED0CLL);
}

void sub_10004E808()
{
}

void sub_10004E820(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0)
  {
    operator delete(v47[14]);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v48 - 201) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v47[11]);
  if ((*(char *)(v48 - 201) & 0x80000000) == 0)
  {
LABEL_4:
    if (a2 != 1) {
LABEL_10:
    }
      JUMPOUT(0x10004ED54);
LABEL_9:
    JUMPOUT(0x10004E894);
  }
LABEL_8:
  operator delete(v47[18]);
  if (a2 != 1) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_10004E884(uint64_t a1, int a2)
{
  if (a2 == 1) {
    JUMPOUT(0x10004E894);
  }
  JUMPOUT(0x10004ED54);
}

void sub_10004E8F4(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    __cxa_rethrow();
  }
  JUMPOUT(0x10004ED54);
}

void sub_10004E924(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int buf)
{
  if (a2)
  {
    uint64_t v44 = __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (a2 == 4) {
      unint64_t v45 = (unint64_t)v44;
    }
    else {
      unint64_t v45 = 0;
    }
    if (v40 | v45)
    {
      sub_10016010C(v40, v45, 1, 1, (char *)(v42 - 224));
      if (*(char *)(v42 - 201) >= 0) {
        uint64_t v46 = (char *)(v42 - 224);
      }
      else {
        uint64_t v46 = *(char **)(v41 + 144);
      }
    }
    else
    {
      uint64_t v46 = (char *)operator new(0x28uLL);
      *(void *)(v41 + 144) = v46;
      *(_OWORD *)(v41 + 152) = xmmword_1003EE110;
      strcpy(v46, "No diagnostic information available.");
    }
    std::string buf = 136315138;
    *(void *)(v41 + 116) = v46;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Trouble writing out stuff %s", (uint8_t *)&buf, 0xCu);
    if (*(char *)(v42 - 201) < 0) {
      operator delete(*(void **)(v41 + 144));
    }
    JUMPOUT(0x10004E8BCLL);
  }
  JUMPOUT(0x10004ED54);
}

void sub_10004EA00()
{
}

void sub_10004EA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    JUMPOUT(0x10004ED40);
  }
  JUMPOUT(0x10004ED44);
}

void sub_10004EBD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  boost::filesystem::filesystem_error::~filesystem_error(v45);
  *(void *)(v47 + 112) = v46;
  if (a45 < 0) {
    operator delete(*(void **)(v47 + 120));
  }
  *(void *)(v47 + 192) = &off_100451DC0;
  uint64_t v49 = *(void *)(v47 + 200);
  if (v49 && (*(unsigned int (**)(uint64_t))(*(void *)v49 + 32))(v49)) {
    *(void *)(v47 + 200) = 0;
  }
  boost::filesystem::filesystem_error::~filesystem_error((boost::filesystem::filesystem_error *)(v48 - 224));
  uint64_t v50 = *(void **)(v47 + 240);
  if (v50)
  {
    *(void *)(v47 + 248) = v50;
    operator delete(v50);
  }
  __cxa_free_exception(v45);
  __cxa_end_catch();
  JUMPOUT(0x10004EC9CLL);
}

void sub_10004ECAC(void *a1, int a2)
{
  if (a2) {
    sub_1000A6954(a1);
  }
  JUMPOUT(0x10004ED54);
}

void sub_10004ECBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (*(char *)(v45 - 105) < 0)
  {
    operator delete(*(void **)(v44 + 240));
    if (*(char *)(v45 - 201) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v44 + 144));
      if (a44 < 0) {
        goto LABEL_11;
      }
      goto LABEL_12;
    }
  }
  else if (*(char *)(v45 - 201) < 0)
  {
    goto LABEL_5;
  }
  if (a44 < 0) {
LABEL_11:
  }
    JUMPOUT(0x10004ED40);
LABEL_12:
  JUMPOUT(0x10004ED44);
}

void sub_10004ECF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if ((*(char *)(v45 - 201) & 0x80000000) == 0) {
    JUMPOUT(0x10004ED04);
  }
  operator delete(*(void **)(v44 + 144));
  if (a44 < 0) {
    JUMPOUT(0x10004ED0CLL);
  }
  JUMPOUT(0x10004ED44);
}

void sub_10004ED18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a38 < 0) {
    JUMPOUT(0x10004ED24);
  }
  if (*(char *)(v45 - 105) < 0) {
    operator delete(*(void **)(v44 + 240));
  }
  if (a44 < 0) {
    operator delete(*(void **)(v44 + 88));
  }
  _Unwind_Resume(a1);
}

void sub_10004ED5C(uint64_t a1)
{
  unint64_t v2 = off_10047C350[0];
  size_t v3 = strlen(off_10047C350[0]);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    sub_1000A6968();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v7 = v3 | 7;
    }
    uint64_t v8 = v7 + 1;
    double v5 = operator new(v7 + 1);
    __dst[1] = v4;
    unint64_t v10 = v8 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v10) = v3;
    double v5 = __dst;
    if (!v3)
    {
      double v6 = (std::string *)(a1 + 8);
      LOBYTE(__dst[0]) = 0;
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      {
LABEL_5:
        std::string __p = *v6;
        goto LABEL_11;
      }
LABEL_10:
      sub_1000559FC(&__p, *(void **)(a1 + 8), *(void *)(a1 + 16));
LABEL_11:
      sub_1000512AC(&__p, (uint64_t)__dst);
      sub_1000513B4(a1 + 40, &__p);
    }
  }
  memmove(v5, v2, v4);
  double v6 = (std::string *)(a1 + 8);
  *((unsigned char *)v5 + v4) = 0;
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    goto LABEL_5;
  }
  goto LABEL_10;
}

void sub_100050F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a15 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000512AC(std::string *a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  char v3 = v2;
  unint64_t v4 = *(void *)(a2 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    if (a1 == (std::string *)a2)
    {
      if ((char)v2 < 0)
      {
        sub_1000559FC(__p, *(void **)a2, v4);
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)a2;
        uint64_t v12 = *(void *)(a2 + 16);
      }
      sub_1000512AC(a2, __p);
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      uint64_t v8 = *(const std::string::value_type **)a2;
      if ((v2 & 0x80u) == 0) {
        uint64_t v9 = (unsigned char *)a2;
      }
      else {
        uint64_t v9 = *(unsigned char **)a2;
      }
      if (*v9 != 47)
      {
        sub_1000561D8((uint64_t)a1);
        unint64_t v2 = *(unsigned __int8 *)(a2 + 23);
        uint64_t v8 = *(const std::string::value_type **)a2;
        unint64_t v4 = *(void *)(a2 + 8);
        char v3 = *(unsigned char *)(a2 + 23);
      }
      if (v3 >= 0) {
        unint64_t v10 = (const std::string::value_type *)a2;
      }
      else {
        unint64_t v10 = v8;
      }
      if (v3 >= 0) {
        unint64_t v4 = v2;
      }
      std::string::append(a1, v10, v4);
    }
  }
}

void sub_100051398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000513B4(uint64_t a1, const std::string *a2)
{
  *(unsigned char *)a1 = 0;
  uint64_t v3 = a1 + 8;
  std::string::operator=((std::string *)(a1 + 8), a2);
  sub_1000516F8(v3, 7, &v6);
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v6;
  long long v6 = 0uLL;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      sub_100052384();
    }
  }
  sub_100052384();
}

void sub_1000516F8(uint64_t a1@<X0>, int a2@<W2>, void *a3@<X8>)
{
  sub_100052228(0, &v11);
  sub_100051DE0(a1, (uint64_t)&v11, 0, (uint64_t)v9);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v10) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
LABEL_3:
    *(_OWORD *)std::string __p = *(_OWORD *)v9;
    uint64_t v8 = v10;
    goto LABEL_6;
  }
  sub_1000559FC(__p, v9[0], (unint64_t)v9[1]);
LABEL_6:
  long long v6 = (char *)operator new(0x250uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = off_10045CD60;
  sub_100051B6C((uint64_t *)v6 + 3, (uint64_t *)&off_10045CDF8);
  *((void *)v6 + 3) = off_10045CDB8;
  *((void *)v6 + 55) = off_10045CDE0;
  *((_DWORD *)v6 + 119) = a2;
  std::ios_base::clear((std::ios_base *)(v6 + 440), *((_DWORD *)v6 + 118));
  *a3 = v6 + 24;
  a3[1] = v6;
  if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10) & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v9[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v10) < 0) {
    goto LABEL_10;
  }
}

void sub_100051894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100051B6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v4 - 24)) = a2[3];
  uint64_t v5 = a2[1];
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = a2[2];
  long long v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  uint64_t v7 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v7 - 24)) = a2[3];
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_100051DA8(_Unwind_Exception *a1)
{
}

void sub_100051DC0(_Unwind_Exception *a1)
{
}

void sub_100051DE0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  sub_1000521C4((unsigned char *)a1);
  if (v8)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      uint64_t v9 = *(void **)a1;
      unint64_t v10 = *(void *)(a1 + 8);
      sub_1000559FC((unsigned char *)a4, v9, v10);
    }
    else
    {
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(void *)(a4 + 16) = *(void *)(a1 + 16);
    }
    return;
  }
  if (*(char *)(a2 + 23) < 0) {
    sub_1000559FC(&__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __dst = *(std::string *)a2;
  }
  sub_1000521C4((unsigned char *)a2);
  if (v11) {
    goto LABEL_13;
  }
  if (!a3)
  {
    sub_100052228(0, &v22);
    sub_100051DE0(&__p, a2, &v22, 0);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    std::string __dst = __p;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    goto LABEL_13;
  }
  sub_100052228(a3, &__p);
  uint64_t v13 = a3[2];
  if ((v13 & 1) != 0 && (v13 != 1 || *(_DWORD *)a3)) {
    memset(&v22, 0, sizeof(v22));
  }
  else {
    sub_100051DE0(&v22, a2, &__p, a3);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::string __dst = v22;
  uint64_t v21 = a3[2];
  if ((v21 & 1) == 0 || v21 == 1 && !*(_DWORD *)a3)
  {
LABEL_13:
    uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a1 + 8);
    }
    if (v12)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      if (sub_1000B29B4((unsigned char *)a1)) {
        sub_1000AFDE8((char *)a1, &__p);
      }
      else {
        sub_1000AFDE8((char *)&__dst, &__p);
      }
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(std::string *)a4 = __p;
      sub_1000521C4((unsigned char *)a1);
      if (v14)
      {
        sub_1000AFE3C((unsigned char *)a1, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)a4, (const std::string::value_type *)p_p, size);
      }
      else
      {
        sub_1000AFE3C(&__dst, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          double v17 = &__p;
        }
        else {
          double v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)a4, (const std::string::value_type *)v17, v18);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_1000AFE90(&__dst, &__p);
        sub_100055F74(a4, &__p);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_1000AFE90((unsigned char *)a1, &__p);
      std::string::size_type v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      char v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
      }
      if (v19)
      {
        sub_100055F74(a4, &__p);
        char v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if (v20 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      *(std::string *)a4 = __dst;
      memset(&__dst, 0, sizeof(__dst));
    }
    goto LABEL_65;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
LABEL_65:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_100052124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000521C4(unsigned char *a1)
{
  uint64_t v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned char **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }
  else
  {
    unint64_t v2 = a1[23];
  }
  return sub_100056140(a1, v2, &v4);
}

void sub_100052228(void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  unint64_t v4 = getcwd(v9, 0x400uLL);
  if (v4)
  {
    sub_10005575C(a2, v4);
    if (a1)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
  }
  else if (!sub_1000B1E30(a1))
  {
    for (size_t i = 2048; ; i *= 2)
    {
      long long v6 = (char *)operator new[](i);
      if (getcwd(v6, i)) {
        break;
      }
      BOOL v7 = sub_1000B1E30(a1);
      operator delete[](v6);
      if (v7) {
        return;
      }
      if (i > 0x4000)
      {
        sub_1000ADA6C(63, (uint64_t)a1, (uint64_t)"boost::filesystem::current_path");
        return;
      }
    }
    sub_10005575C(a2, v6);
    if (a1)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    operator delete[](v6);
  }
}

void sub_10005234C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100052384()
{
}

void sub_1000524E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100052500(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v7 = *a2;
  uint64_t v8 = (atomic_uint *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  sub_100052628((void *)a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    if (atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
      if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
      }
    }
  }
  *(void *)a1 = off_1004594E8;
  *(void *)(a1 + 32) = *a2;
  *(void *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 256;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_100052614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100052628(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (atomic_uint *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(v4 + 2, 1u, memory_order_relaxed);
    atomic_fetch_add_explicit(v4 + 2, 1u, memory_order_relaxed);
  }
  *a1 = off_100454688;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(v4 + 2, 1u, memory_order_relaxed);
    a1[3] = 0x4000000000;
    if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
    *a1 = off_100454510;
    if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  else
  {
    a1[3] = 0x4000000000;
  }
  *a1 = off_100459690;
  return a1;
}

void sub_1000527DC()
{
}

void sub_100052914(void *a1)
{
}

void sub_100052920(_Unwind_Exception *a1)
{
}

uint64_t sub_100052934(uint64_t a1, const std::string *a2)
{
  *(unsigned char *)a1 = 0;
  uint64_t v3 = a1 + 8;
  std::string::operator=((std::string *)(a1 + 8), a2);
  sub_100052B3C(v3, 2, 0x1A4u, &v12);
  uint64_t v4 = operator new(0x20uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = off_100459808;
  uint64_t v5 = sub_100052B28((_DWORD *)v4 + 6, &v12);
  long long v6 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v4;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  sub_100052AEC(&v12);
  int v7 = **(_DWORD **)(a1 + 32);
  uint64_t v8 = operator new(0x68uLL);
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = off_100459858;
  uint64_t v9 = wireless_diagnostics::google::protobuf::io::FileOutputStream::FileOutputStream((wireless_diagnostics::google::protobuf::io::FileOutputStream *)(v8 + 3), v7, -1);
  unint64_t v10 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v8;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return a1;
}

void sub_100052AC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_100052AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
}

int *sub_100052AEC(int *a1)
{
  if (*a1 != -1) {
    sub_100053058(a1);
  }
  return a1;
}

_DWORD *sub_100052B28(_DWORD *result, _DWORD *a2)
{
  *double result = *a2;
  *a2 = -1;
  return result;
}

_DWORD *sub_100052B3C@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, _DWORD *a4@<X8>)
{
  if (!a3)
  {
    if (qword_10047BED8 == -1)
    {
      uint64_t v8 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        return sub_100052C64(a4, a1, a2 | 0x200u, 0, a3);
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_10045AD98);
      uint64_t v8 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        return sub_100052C64(a4, a1, a2 | 0x200u, 0, a3);
      }
    }
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(void *)a1;
    }
    int v11 = 136315138;
    uint64_t v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "WARNING: File %s will be created without any permission bits set.", (uint8_t *)&v11, 0xCu);
  }
  return sub_100052C64(a4, a1, a2 | 0x200u, 0, a3);
}

_DWORD *sub_100052C64(_DWORD *a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v9 = (const char *)a2;
  }
  else {
    uint64_t v9 = *(const char **)a2;
  }
  size_t v10 = strlen(v9);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  int v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    uint64_t v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    unint64_t v23 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_11;
  }
  HIBYTE(v23) = v10;
  uint64_t v12 = __dst;
  if (v10) {
LABEL_11:
  }
    memmove(v12, v9, (size_t)v11);
  *((unsigned char *)v11 + (void)v12) = 0;
  int v15 = sub_100053008((const char *)__dst, a3, a4, a5);
  if (SHIBYTE(v23) < 0) {
    operator delete(__dst[0]);
  }
  *a1 = v15;
  if (v15 == -1)
  {
    int v17 = *__error();
    __cxa_allocate_exception(0x50uLL);
    if (v17 == 1)
    {
      sub_1001701A8(&v21);
      sub_10018E868((uint64_t)v20);
      sub_100170224(&v21, (uint64_t)"FileUtil::PosixHandle::PosixHandle(const fs::path &, int, Lock, mode_t)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/file_util.cpp", 91, (uint64_t)v20);
    }
    std::string::size_type v18 = std::system_category();
    std::system_error::system_error(&v21, v17, v18);
    sub_10018E868((uint64_t)v19);
    sub_100170764(&v21, (uint64_t)"FileUtil::PosixHandle::PosixHandle(const fs::path &, int, Lock, mode_t)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/file_util.cpp", 93, (uint64_t)v19);
  }
  return a1;
}

void sub_100052EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__p, uint64_t a6, int a7, __int16 a8, void *a9, void *a10, uint64_t a11, uint64_t a12, std::system_error *__pa, std::system_error *a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a18 < 0) {
    operator delete(__pa);
  }
  sub_100170BF8((std::system_error *)&a26);
  if (a9)
  {
    operator delete(a9);
    std::system_error::~system_error((std::system_error *)&a22);
    if ((v27 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    std::system_error::~system_error((std::system_error *)&a22);
    if (!v27) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  __cxa_free_exception(v26);
  _Unwind_Resume(a1);
}

uint64_t sub_100053008(const char *a1, int a2, int a3, unsigned int a4)
{
  int v4 = a2 | 0x10;
  if (a3 != 1) {
    int v4 = a2;
  }
  if (a3 == 2) {
    int v5 = a2 | 0x20;
  }
  else {
    int v5 = v4;
  }
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return open(a1, v5, a4);
}

uint64_t sub_100053058(int *a1)
{
  int v2 = *a1;
  if (v2 == -1)
  {
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v7, "Trying to close file-handle not-opened");
    std::runtime_error::runtime_error(&v9, (const std::string *)&v7);
    v9.__vftable = (std::runtime_error_vtbl *)&off_100453860;
    sub_10018E868((uint64_t)v8);
    sub_1000D1698(&v9, (uint64_t)"void FileUtil::PosixHandle::close()", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/file_util.cpp", 138, (uint64_t)v8);
  }
  uint64_t result = close(v2);
  *a1 = -1;
  if (result == -1)
  {
    __cxa_allocate_exception(0x50uLL);
    int v4 = *__error();
    int v5 = std::system_category();
    std::system_error::system_error(&v7, v4, v5);
    sub_10018E868((uint64_t)v6);
    sub_100170764(&v7, (uint64_t)"void FileUtil::PosixHandle::close()", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/file_util.cpp", 147, (uint64_t)v6);
  }
  return result;
}

void sub_1000531B8(_Unwind_Exception *__p, uint64_t a2, uint64_t a3, std::system_error *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__pa, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__pa) {
    operator delete(__pa);
  }
  std::system_error::~system_error((std::system_error *)&a12);
  _Unwind_Resume(__p);
}

void sub_1000531DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::system_error *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::system_error::~system_error((std::system_error *)&a12);
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

void sub_1000531F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v20 - 48));
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_100053294(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 64) = a2;
  if (*(void *)(a1 + 48))
  {
    sub_1000AE4B0(__p, "");
    sub_10015F140("Legacy output stream already open", &v9);
    sub_10016A2C4((uint64_t)__p, (uint64_t)&v9, 1);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)&v6);
  }
  sub_10005349C(a1 + 8, (uint64_t)&v9);
  sub_1000516F8((uint64_t)&v9, 7, __p);
  long long v3 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  int v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = (std::__shared_weak_count *)__p[1];
  if (!__p[1] || atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
LABEL_8:
  }
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_10005343C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005349C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1000559FC(__dst, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a1;
    uint64_t v8 = *(void *)(a1 + 16);
  }
  char v6 = 3;
  LODWORD(__p) = 7627108;
  uint64_t v3 = sub_1000535A8((uint64_t)__dst, (uint64_t)&__p);
  if (*(char *)(v3 + 23) < 0)
  {
    sub_1000559FC((unsigned char *)a2, *(void **)v3, *(void *)(v3 + 8));
  }
  else
  {
    long long v4 = *(_OWORD *)v3;
    *(void *)(a2 + 16) = *(void *)(v3 + 16);
    *(_OWORD *)a2 = v4;
  }
  if ((v6 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(__dst[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v8) < 0) {
    goto LABEL_11;
  }
}

void sub_10005356C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000535A8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  sub_1000536AC((unsigned char *)a1, &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::erase((std::string *)a1, v4 - size, 0xFFFFFFFFFFFFFFFFLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v6 = *(char *)(a2 + 23);
  if (v6 < 0)
  {
    if (!*(void *)(a2 + 8)) {
      return a1;
    }
    std::system_error v7 = *(unsigned char **)a2;
  }
  else
  {
    std::system_error v7 = (unsigned char *)a2;
    if (!*(unsigned char *)(a2 + 23)) {
      return a1;
    }
  }
  if (*v7 != 46)
  {
    std::string::push_back((std::string *)a1, 46);
    LOBYTE(v6) = *(unsigned char *)(a2 + 23);
  }
  if ((v6 & 0x80u) == 0) {
    uint64_t v8 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v8 = *(const std::string::value_type **)a2;
  }
  if ((v6 & 0x80u) == 0) {
    std::string::size_type v9 = v6;
  }
  else {
    std::string::size_type v9 = *(void *)(a2 + 8);
  }
  std::string::append((std::string *)a1, v8, v9);
  return a1;
}

void sub_100053690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000536AC(unsigned char *a1@<X0>, std::string *a2@<X8>)
{
  int v2 = a1;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned char **)a1;
    unint64_t v4 = *((void *)v2 + 1);
  }
  else
  {
    unint64_t v4 = a1[23];
  }
  unint64_t v16 = 0;
  sub_100056140(a1, v4, &v16);
  int v5 = (char)v2[23];
  if (v4 >= v16) {
    unint64_t v6 = v16;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v5 >= 0) {
    std::system_error v7 = v2;
  }
  else {
    std::system_error v7 = *(unsigned char **)v2;
  }
  uint64_t v8 = v7 - 1;
  unint64_t v9 = v4;
  while (v9 > v16)
  {
    unint64_t v10 = v9 - 1;
    int v11 = v8[v9--];
    if (v11 == 47)
    {
      unint64_t v6 = v10 + 1;
      break;
    }
  }
  unint64_t v12 = v4 - v6;
  if (v4 != v6)
  {
    uint64_t v13 = v5 >= 0 ? v2 : *(unsigned char **)v2;
    if (v13[v6] != 46 || v12 != 1 && (v12 != 2 || v13[v6 + 1] != 46))
    {
      uint64_t v14 = 0;
      while (v4 + v14 > v6)
      {
        int v15 = v13[v4 - 1 + v14--];
        if (v15 == 46)
        {
          if (v4 + v14 > v6) {
            sub_100055EA4(a2, &v13[v4 + v14], &v13[v4], -v14);
          }
          return;
        }
      }
    }
  }
}

void sub_1000537DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100054F14(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000A6954(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000551CC(dirent **a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  memset(&__src, 0, sizeof(__src));
  int v29 = 0;
  uint64_t v28 = 0;
  unint64_t v4 = *a1;
  int v5 = *(DIR **)&(*a1)->d_name[27];
  while (1)
  {
    int v27 = 0;
    *__error() = 0;
    unint64_t v6 = (dirent **)&v4->d_name[35];
    if (sysconf(91) < 0)
    {
      *__error() = 0;
      unint64_t v9 = readdir(v5);
      int v27 = v9;
      if (v9)
      {
LABEL_14:
        sub_10005575C(&__src, v9->d_name);
        memset(&__p, 0, sizeof(__p));
        uint64_t v28 = 0;
        int v29 = 0;
        goto LABEL_15;
      }
      uint64_t v8 = *__error();
      if (v8) {
        goto LABEL_31;
      }
    }
    else
    {
      std::system_error v7 = *v6;
      if (!*v6)
      {
        uint64_t v20 = sub_1000562D0() + 25;
        int v15 = (dirent *)malloc(v20);
        void *v6 = v15;
        if (!v15)
        {
          uint64_t v8 = 12;
LABEL_31:
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
          if ((unint64_t)qword_10047BF98 >> 1 == 0x595588BD12BF6FE8
            || ((unsigned int (*)(uint64_t (***)(), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v8))
          {
            std::string::size_type v10 = 3;
          }
          else
          {
            std::string::size_type v10 = 2;
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = v8;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&boost::system::detail::system_cat_holder<void>::instance;
          __p.__r_.__value_.__r.__words[2] = v10;
          goto LABEL_9;
        }
        std::system_error v7 = v15;
        bzero(v15, v20);
      }
      uint64_t v8 = readdir_r(v5, v7, &v27);
      if (v8) {
        goto LABEL_31;
      }
    }
    unint64_t v9 = v27;
    if (v27) {
      goto LABEL_14;
    }
    sub_10005623C((DIR **)&v4->d_name[27], (void **)&v4->d_name[35], &__p);
    LODWORD(v8) = __p.__r_.__value_.__l.__data_;
    std::string::size_type v10 = __p.__r_.__value_.__r.__words[2];
LABEL_9:
    uint64_t v28 = *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4);
    int v29 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
    if ((v10 & 1) != 0 && (v10 != 1 || v8))
    {
      int v27 = *a1;
      std::string::size_type v18 = v27;
      *a1 = 0;
      sub_1000AE794((char *)&v18->d_seekoff, &__p);
      if (!a2)
      {
        exception = __cxa_allocate_exception(0x30uLL);
        int v21 = v8;
        uint64_t v22 = v28;
        int v23 = v29;
        std::string::size_type v24 = v10;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::directory_iterator::operator++", &__p, &v21);
      }
      *(_DWORD *)a2 = v8;
      *(void *)(a2 + 4) = v28;
      *(_DWORD *)(a2 + 12) = v29;
      *(void *)(a2 + 16) = v10;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      p_p = (atomic_uint **)&v27;
      goto LABEL_42;
    }
LABEL_15:
    unint64_t v4 = *a1;
    int v5 = *(DIR **)&(*a1)->d_name[27];
    if (!v5)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1;
      *a1 = 0;
      p_p = (atomic_uint **)&__p;
LABEL_42:
      sub_100056A60(p_p);
      goto LABEL_46;
    }
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_src = &__src;
    }
    else {
      p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
    }
    if (p_src->__r_.__value_.__s.__data_[0] != 46) {
      break;
    }
    unint64_t v12 = (__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__src
        : (std::string *)__src.__r_.__value_.__r.__words[0];
    int v13 = v12->__r_.__value_.__s.__data_[1];
    if (v13)
    {
      if (v13 != 46) {
        break;
      }
      uint64_t v14 = (__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__src
          : (std::string *)__src.__r_.__value_.__r.__words[0];
      if (v14->__r_.__value_.__s.__data_[2]) {
        break;
      }
    }
  }
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000559FC(&__p, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = __src;
  }
  sub_100055820((std::string *)&v4->d_seekoff);
  sub_100055F74((uint64_t)&v4->d_seekoff, &__p);
  *(void *)&long long v17 = 0xFFFF00000000;
  *((void *)&v17 + 1) = 0xFFFF00000000;
  *(_OWORD *)&v4->d_name[11] = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_46:
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__src.__r_.__value_.__l.__data_);
  }
}

void sub_10005554C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
}

void sub_100055670(_Unwind_Exception *a1)
{
}

void sub_100055678(_Unwind_Exception *a1)
{
}

void sub_100055684(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x10005568CLL);
  }
  sub_1000A6954(a1);
}

std::string *sub_10005569C(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = __dst->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      std::string::size_type size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    std::system_error v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    std::system_error v7 = __dst;
    if (__len > 0x16)
    {
      std::string::size_type size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      std::string::size_type v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((unsigned char *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    __dst->__r_.__value_.__l.__size_ = __len;
  }
  else {
    *((unsigned char *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_10005575C(std::string *a1, char *__s)
{
  size_t v4 = strlen(__s);

  return sub_10005569C(a1, __s, v4);
}

__darwin_time_t sub_1000557A4(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  if ((stat((const char *)a1, &v6) & 0x80000000) == 0) {
    return v6.st_mtimespec.tv_sec;
  }
  int v5 = __error();
  sub_1000ADBDC(*v5, v3, (uint64_t)a2, (uint64_t)"boost::filesystem::last_write_time");
  return 0x8000000000000000;
}

std::string *sub_100055820(std::string *a1)
{
  std::string::size_type v2 = sub_10005587C(a1);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    size_t v4 = (std::string *)a1->__r_.__value_.__r.__words[0];
    std::string::size_type v3 = a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type v3 = (std::string::size_type)a1 + HIBYTE(a1->__r_.__value_.__r.__words[2]);
    size_t v4 = a1;
  }
  std::string::erase(a1, v2, v3 - (void)v4 - v2);
  return a1;
}

unint64_t sub_10005587C(unsigned char *a1)
{
  uint64_t v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned char **)a1;
    unint64_t v2 = *((void *)v1 + 1);
  }
  else
  {
    unint64_t v2 = a1[23];
  }
  unint64_t v16 = 0;
  unint64_t v3 = sub_100056140(a1, v2, &v16);
  int v4 = (char)v1[23];
  if (v2 >= v16) {
    unint64_t v5 = v16;
  }
  else {
    unint64_t v5 = v2;
  }
  if (v4 >= 0) {
    stat v6 = v1;
  }
  else {
    stat v6 = *(unsigned char **)v1;
  }
  std::system_error v7 = v6 - 1;
  unint64_t v8 = v2;
  while (v8 > v16)
  {
    unint64_t v9 = v8 - 1;
    int v10 = v7[v8--];
    if (v10 == 47)
    {
      unint64_t v5 = v9 + 1;
      break;
    }
  }
  if (v5 >= v16) {
    unint64_t v11 = v16;
  }
  else {
    unint64_t v11 = v5;
  }
  if (v4 >= 0) {
    unint64_t v12 = v1;
  }
  else {
    unint64_t v12 = *(unsigned char **)v1;
  }
  int v13 = v12 - 1;
  unint64_t v14 = v5;
  while (v14 > v16)
  {
    if (v13[v14] != 47) {
      return v14;
    }
    if (v3 == --v14)
    {
      if (v2 == v5) {
        return v3;
      }
      else {
        return v3 + 1;
      }
    }
  }
  if (v2 == v5) {
    return 0;
  }
  else {
    return v11;
  }
}

off_t sub_100055960(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  if (stat((const char *)a1, &v6) < 0)
  {
    uint64_t v5 = *__error();
LABEL_11:
    sub_1000ADBDC(v5, v3, (uint64_t)a2, (uint64_t)"boost::filesystem::file_size");
    return -1;
  }
  if ((v6.st_mode & 0xF000) != 0x8000)
  {
    uint64_t v5 = 78;
    goto LABEL_11;
  }
  return v6.st_size;
}

void *sub_1000559FC(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_1000A6968();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    void v5[2] = v7 | 0x8000000000000000;
    *uint64_t v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_100055A9C(std::string *a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
  std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
  unint64_t v8 = *(char **)(a2 + 24);
  std::string::size_type v9 = *(void *)(a2 + 32);
  if (data == v8 && size == v9)
  {
LABEL_16:
    unint64_t v8 = data;
    std::string::size_type v9 = size;
  }
  else if (a3[1].__r_.__value_.__r.__words[0] != *(void *)(a4 + 24) {
         || a3[1].__r_.__value_.__l.__size_ != *(void *)(a4 + 32))
  }
  {
    while ((sub_100055BA0(a1, (void **)&a3->__r_.__value_.__l.__data_) & 0x80) == 0)
    {
      if ((sub_100055BA0(a3, (void **)&a1->__r_.__value_.__l.__data_) & 0x80) != 0) {
        return 1;
      }
      sub_100055C38(a1);
      sub_100055C38(a3);
      std::string::pointer data = a1[1].__r_.__value_.__l.__data_;
      std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
      unint64_t v8 = *(char **)(a2 + 24);
      std::string::size_type v9 = *(void *)(a2 + 32);
      if (data == v8 && size == v9) {
        goto LABEL_16;
      }
      if (a3[1].__r_.__value_.__r.__words[0] == *(void *)(a4 + 24)
        && a3[1].__r_.__value_.__l.__size_ == *(void *)(a4 + 32))
      {
        goto LABEL_17;
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_17:
  if (data != v8 || size != v9) {
    return 1;
  }
  if (a3[1].__r_.__value_.__r.__words[0] != *(void *)(a4 + 24)
    || a3[1].__r_.__value_.__l.__size_ != *(void *)(a4 + 32))
  {
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t sub_100055BA0(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return sub_100055BD8(a1, v2, v5, v6);
}

uint64_t sub_100055BD8(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

void sub_100055C38(std::string *this)
{
  uint64_t v1 = this;
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  if (data[23] < 0) {
    unint64_t v3 = *((void *)data + 1);
  }
  else {
    unint64_t v3 = data[23];
  }
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    p_std::string::size_type size = &v1[1].__r_.__value_.__l.__size_;
    std::string::size_type v5 = v1[1].__r_.__value_.__l.__size_ + v1->__r_.__value_.__l.__size_;
    v1[1].__r_.__value_.__l.__size_ = v5;
    if (v5 >= v3)
    {
      *v1->__r_.__value_.__l.__data_ = 0;
      v1->__r_.__value_.__l.__size_ = 0;
      return;
    }
  }
  else
  {
    p_std::string::size_type size = &v1[1].__r_.__value_.__l.__size_;
    std::string::size_type v5 = v1[1].__r_.__value_.__l.__size_ + HIBYTE(v1->__r_.__value_.__r.__words[2]);
    v1[1].__r_.__value_.__l.__size_ = v5;
    if (v5 >= v3)
    {
      v1->__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v1->__r_.__value_.__s + 23) = 0;
      return;
    }
  }
  std::string::pointer v6 = data;
  if (data[23] < 0) {
    std::string::pointer v6 = *(std::string::pointer *)data;
  }
  if (v6[v5] == 47)
  {
    unint64_t v18 = 0;
    if (data[23] < 0) {
      std::string::pointer data = *(std::string::pointer *)data;
    }
    unint64_t v7 = sub_100056140(data, v3, &v18);
    std::string::size_type v5 = *p_size;
    if (*p_size == v7)
    {
      if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v1->__r_.__value_.__l.__size_ == v18)
        {
          v1->__r_.__value_.__l.__size_ = 1;
          uint64_t v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
          goto LABEL_20;
        }
      }
      else if (v18 == HIBYTE(v1->__r_.__value_.__r.__words[2]))
      {
        *((unsigned char *)&v1->__r_.__value_.__s + 23) = 1;
LABEL_20:
        LOWORD(v1->__r_.__value_.__l.__data_) = 47;
        return;
      }
    }
    std::string::pointer data = v1[1].__r_.__value_.__l.__data_;
    if (v5 == v3)
    {
LABEL_26:
      if (v3 - 1 >= v7) {
        unint64_t v9 = v7;
      }
      else {
        unint64_t v9 = v3 - 1;
      }
      if (data[23] >= 0) {
        std::string::pointer v10 = data;
      }
      else {
        std::string::pointer v10 = *(std::string::pointer *)data;
      }
      std::string::pointer v11 = v10 - 2;
      unint64_t v12 = v3;
      while (1)
      {
        unint64_t v13 = v12 - 1;
        if (v12 - 1 <= v7) {
          break;
        }
        int v14 = v11[v12--];
        if (v14 != 47) {
          goto LABEL_37;
        }
      }
      unint64_t v13 = v9;
LABEL_37:
      std::string::size_type v5 = v3;
      if (v13 != v7)
      {
        v1[1].__r_.__value_.__l.__size_ = v3 - 1;
        std::string::operator=(v1, (const std::string *)&xmmword_10047D450);
        return;
      }
    }
    else
    {
      while (1)
      {
        std::string::pointer v8 = data;
        if (data[23] < 0) {
          std::string::pointer v8 = *(std::string::pointer *)data;
        }
        if (v8[v5] != 47) {
          break;
        }
        *p_std::string::size_type size = ++v5;
        if (v3 == v5) {
          goto LABEL_26;
        }
      }
    }
  }
  if (data[23] < 0)
  {
    std::string::pointer v15 = *(std::string::pointer *)data;
    std::string::size_type v16 = *((void *)data + 1);
  }
  else
  {
    std::string::pointer v15 = data;
    std::string::size_type v16 = data[23];
  }
  if (v16 <= v5) {
    goto LABEL_45;
  }
  unint64_t v17 = v5;
  while (v15[v17] != 47)
  {
    if (v16 == ++v17) {
      goto LABEL_45;
    }
  }
  if (v16 == v17 || v17 == -1) {
LABEL_45:
  }
    unint64_t v17 = v3;
  if (data[23] < 0) {
    std::string::pointer data = *(std::string::pointer *)data;
  }

  sub_100055EA4(v1, &data[v5], &data[v17], v17 - v5);
}

void sub_100055EA4(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string::pointer v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  std::string::pointer v8 = this;
  if ((v12 & 0x80) != 0) {
    std::string::pointer v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    std::string::pointer v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

void sub_100055F74(uint64_t a1, const std::string *a2)
{
  int v3 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v3 >= 0) {
    unint64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    unint64_t size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if ((const std::string *)a1 == a2)
    {
      if (v3 < 0)
      {
        sub_1000559FC(__n, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)__n = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        std::string::size_type v17 = a2->__r_.__value_.__r.__words[2];
      }
      sub_100055F74(a2, __n);
      if (SHIBYTE(v17) < 0) {
        operator delete((void *)__n[0]);
      }
    }
    else
    {
      if (v3 >= 0) {
        std::string::pointer v6 = (std::string *)a2;
      }
      else {
        std::string::pointer v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      __n[0] = 0;
      if (sub_100056140(v6, size, __n) < size)
      {
LABEL_25:
        std::string::operator=((std::string *)a1, a2);
        return;
      }
      unint64_t v18 = 0;
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::pointer v8 = *(unsigned char **)a1;
        unint64_t v7 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v7 = *(unsigned __int8 *)(a1 + 23);
        std::string::pointer v8 = (unsigned char *)a1;
      }
      sub_100056140(v8, v7, &v18);
      size_t v9 = __n[0];
      if (__n[0])
      {
        if (__n[0] != v18) {
          goto LABEL_25;
        }
        std::string::size_type v10 = (unsigned char *)a1;
        if (*(char *)(a1 + 23) < 0) {
          std::string::size_type v10 = *(unsigned char **)a1;
        }
        int v11 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
        unint64_t v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
        std::string::value_type v13 = v11 >= 0 ? (uint64_t *)a2 : (uint64_t *)a2->__r_.__value_.__r.__words[0];
        if (memcmp(v10, v13, __n[0])) {
          goto LABEL_25;
        }
      }
      else
      {
        LOBYTE(v11) = *((unsigned char *)&a2->__r_.__value_.__s + 23);
        unint64_t v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
      }
      if ((v11 & 0x80u) == 0) {
        int v14 = a2;
      }
      else {
        int v14 = (const std::string *)v12;
      }
      std::string::pointer v15 = (char *)v14 + v9;
      if (v14->__r_.__value_.__s.__data_[v9] != 47) {
        sub_1000561D8(a1);
      }
      std::string::append((std::string *)a1, v15, size - v9);
    }
  }
  else if (sub_10003FEAC((unsigned char *)a1))
  {
    std::string::push_back((std::string *)a1, 47);
  }
}

void sub_100056124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100056140(unsigned char *__s, unint64_t a2, unint64_t *a3)
{
  *a3 = 0;
  if (a2 && *__s == 47)
  {
    if (a2 < 2 || __s[1] != 47) {
      return 0;
    }
    size_t v4 = a2 - 2;
    if (a2 != 2)
    {
      std::string::size_type v5 = __s + 2;
      if (__s[2] == 47) {
        return 0;
      }
      unint64_t v7 = memchr(v5, 47, v4);
      size_t v8 = v7 - v5;
      if (!v7) {
        size_t v8 = v4;
      }
      a2 = v8 + 2;
    }
    *a3 = a2;
  }
  return a2;
}

uint64_t sub_1000561D8(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
    if (!*(unsigned char *)(a1 + 23)) {
      return 0;
    }
    uint64_t v2 = a1 + v1;
LABEL_6:
    if (*(unsigned char *)(v2 - 1) != 47)
    {
      std::string::push_back((std::string *)a1, 47);
      return v1;
    }
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)a1 + v1;
    goto LABEL_6;
  }
  return v1;
}

DIR *sub_10005623C@<X0>(DIR **a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  if (*a2)
  {
    free(*a2);
    *a2 = 0;
  }
  uint64_t result = *a1;
  if (*a1 && (*a1 = 0, uint64_t result = (DIR *)closedir(result), result))
  {
    uint64_t v7 = *__error();
    return (DIR *)sub_1000AE6F4(a3, v7, &boost::system::detail::system_cat_holder<void>::instance);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

uint64_t sub_1000562D0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047D440, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10047D440))
  {
    qword_10047D438 = sub_1000AFBD8();
    __cxa_guard_release(&qword_10047D440);
  }
  return qword_10047D438;
}

void sub_10005632C(_Unwind_Exception *a1)
{
}

void *sub_100056344@<X0>(atomic_uint **a1@<X0>, atomic_uint **a2@<X1>, void *a3@<X8>)
{
  std::string::size_type v5 = *a1;
  int v11 = v5;
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  std::string::pointer v6 = *a2;
  std::string::size_type v10 = v6;
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  uint64_t result = sub_100056460(a3, (uint64_t *)&v11, (uint64_t *)&v10);
  size_t v8 = v10;
  if (v10 && atomic_fetch_add(v10, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)v8 + 6, (void **)v8 + 7, v12);
    if (*((char *)v8 + 31) < 0) {
      operator delete(*((void **)v8 + 1));
    }
    operator delete();
  }
  size_t v9 = v11;
  if (v11 && atomic_fetch_add(v11, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)v9 + 6, (void **)v9 + 7, v12);
    if (*((char *)v9 + 31) < 0) {
      operator delete(*((void **)v9 + 1));
    }
    operator delete();
  }
  return result;
}

void sub_100056444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_1000E0A28((uint64_t *)va);
  sub_1000E0A28((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_100056460(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (*a2) {
    atomic_fetch_add((atomic_uint *volatile)v3, 1u);
  }
  uint64_t v4 = *a3;
  if (*a3) {
    atomic_fetch_add((atomic_uint *volatile)v4, 1u);
  }
  *uint64_t result = v3;
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)v3, 1u);
  }
  result[1] = v4;
  if (v4)
  {
    atomic_fetch_add((atomic_uint *volatile)v4, 1u);
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      sub_10005623C((DIR **)(v4 + 48), (void **)(v4 + 56), v5);
      if (*(char *)(v4 + 31) < 0) {
        operator delete(*(void **)(v4 + 8));
      }
      operator delete();
    }
  }
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)(v3 + 48), (void **)(v3 + 56), v5);
    if (*(char *)(v3 + 31) < 0) {
      operator delete(*(void **)(v3 + 8));
    }
    operator delete();
  }
  return result;
}

atomic_uint **sub_100056568(dirent **a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    if (a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      double v33 = 0;
      size_t v9 = operator new(0x40uLL, &std::nothrow);
      if (v9)
      {
        *(_DWORD *)size_t v9 = 0;
        v9[2] = 0;
        v9[3] = 0;
        v9[1] = 0;
        *((_DWORD *)v9 + 8) = 0;
        *(void *)((char *)v9 + 36) = 0xFFFFLL;
        *((_DWORD *)v9 + 11) = 0xFFFF;
        v9[6] = 0;
        v9[7] = 0;
        double v30 = (atomic_uint *)v9;
        atomic_fetch_add((atomic_uint *volatile)v9, 1u);
        std::string::size_type v10 = (atomic_uint *)v9;
        int v11 = v33;
      }
      else
      {
        int v11 = 0;
        std::string::size_type v10 = 0;
      }
      double v30 = v11;
      double v33 = v10;
      sub_100056A60(&v30);
      std::string::value_type v13 = v33;
      if (!v33)
      {
        if ((unint64_t)qword_10047BFC8 >> 1 == 0x595588BD12BF6FE8
          || ((unsigned int (*)(uint64_t (***)(), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 12))
        {
          uint64_t v27 = 3;
        }
        else
        {
          uint64_t v27 = 2;
        }
        *a4 = 12;
        a4[1] = &boost::system::detail::generic_cat_holder<void>::instance;
        a4[2] = v27;
        return sub_100056A60(&v33);
      }
    }
    else
    {
      double v33 = 0;
      unint64_t v12 = operator new(0x40uLL);
      *(_DWORD *)unint64_t v12 = 0;
      _DWORD v12[2] = 0;
      void v12[3] = 0;
      v12[1] = 0;
      *((_DWORD *)v12 + 8) = 0;
      *(void *)((char *)v12 + 36) = 0xFFFFLL;
      *((_DWORD *)v12 + 11) = 0xFFFF;
      v12[6] = 0;
      v12[7] = 0;
      double v30 = (atomic_uint *)v12;
      atomic_fetch_add((atomic_uint *volatile)v12, 1u);
      double v30 = v33;
      double v33 = (atomic_uint *)v12;
      sub_100056A60(&v30);
      std::string::value_type v13 = v33;
    }
    if (*(char *)(a2 + 23) >= 0) {
      int v14 = (const char *)a2;
    }
    else {
      int v14 = *(const char **)a2;
    }
    std::string::pointer v15 = opendir(v14);
    *((void *)v13 + 6) = v15;
    if (v15)
    {
      char v16 = 1;
      uint64_t v17 = 46;
    }
    else
    {
      uint64_t v18 = *__error();
      double v30 = 0;
      if ((unint64_t)qword_10047BF98 >> 1 == 0x595588BD12BF6FE8) {
        int v19 = v18 != 0;
      }
      else {
        int v19 = ((uint64_t (*)(uint64_t (***)(), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v18);
      }
      uint64_t v20 = 2;
      LODWORD(v30) = v18;
      if (v19) {
        uint64_t v20 = 3;
      }
      unint64_t v31 = (unint64_t)&boost::system::detail::system_cat_holder<void>::instance;
      uint64_t v32 = v20;
      if (v20)
      {
        __str.__r_.__value_.__r.__words[0] = 13;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)&boost::system::detail::generic_cat_holder<void>::instance;
        char v24 = sub_1000AF1E4((uint64_t *)&v30, (uint64_t)&__str);
        if ((a3 & 1) == 0 || (v24 & 1) == 0)
        {
          uint64_t v25 = v30;
          if (v32 == 1) {
            uint64_t v25 = v30 + 1000 * (v31 % 0x1FFFF7);
          }
          if (v25)
          {
            sub_1000ADBDC(v25, a2, (uint64_t)a4, (uint64_t)"boost::filesystem::directory_iterator::construct");
          }
          else if (a4)
          {
            *a4 = 0;
            a4[1] = 0;
            a4[2] = 0;
          }
        }
        return sub_100056A60(&v33);
      }
      uint64_t v17 = 0;
      char v16 = 0;
    }
    int v21 = v33;
    if (*((void *)v33 + 6))
    {
      uint64_t v22 = *a1;
      *a1 = (dirent *)v33;
      double v33 = (atomic_uint *)v22;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v17;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v16;
      if (*(char *)(a2 + 23) < 0) {
        sub_1000559FC(&__str, *(void **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __str = *(std::string *)a2;
      }
      sub_100055F74((uint64_t)&__str, &__p);
      std::string::operator=((std::string *)(v21 + 2), &__str);
      *(void *)&long long v23 = 0xFFFF00000000;
      *((void *)&v23 + 1) = 0xFFFF00000000;
      *((_OWORD *)v21 + 2) = v23;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v15) {
          return sub_100056A60(&v33);
        }
        goto LABEL_32;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v15) {
LABEL_32:
      }
        sub_1000551CC(a1, (uint64_t)a4);
    }
    return sub_100056A60(&v33);
  }

  return (atomic_uint **)sub_1000ADBDC(2, a2, (uint64_t)a4, (uint64_t)"boost::filesystem::directory_iterator::construct");
}

void sub_10005694C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (v23)
    {
      if ((unint64_t)qword_10047BFC8 >> 1 == 0x595588BD12BF6FE8
        || ((unsigned int (*)(uint64_t (***)(), uint64_t))boost::system::detail::generic_cat_holder<void>::instance[6])(&boost::system::detail::generic_cat_holder<void>::instance, 12))
      {
        uint64_t v28 = 3;
      }
      else
      {
        uint64_t v28 = 2;
      }
      *long long v23 = 12;
      v23[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      double v23[2] = v28;
      a23 = *v24;
      *char v24 = 0;
      sub_100056A60((atomic_uint **)&a23);
      __cxa_end_catch();
      JUMPOUT(0x100056860);
    }
    __cxa_rethrow();
  }
  sub_100056A60((atomic_uint **)(v25 - 72));
  _Unwind_Resume(a1);
}

void sub_100056A50()
{
}

atomic_uint **sub_100056A60(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (v2 && atomic_fetch_add(v2, 0xFFFFFFFF) == 1)
  {
    uint64_t v3 = (void *)sub_1000AFCA0((uint64_t)v2);
    operator delete(v3);
  }
  return a1;
}

double sub_100056AA4@<D0>(uint64_t a1@<X0>, void *a2@<X1>, double *a3@<X8>)
{
  if (*(_DWORD *)(a1 + 24)) {
    BOOL v5 = *(_DWORD *)(a1 + 28) == 0xFFFF;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    int v6 = *(_DWORD *)(a1 + 32);
    int v7 = *(_DWORD *)(a1 + 36);
    if ((v6 & 0xFFFFFFFB) == 0 || v7 == 0xFFFF)
    {
      sub_100056B28((const char *)a1, (uint64_t)a2, (int *)&v10);
      *(void *)(a1 + 24) = v10;
      goto LABEL_14;
    }
    *(_DWORD *)(a1 + 24) = v6;
    *(_DWORD *)(a1 + 28) = v7;
  }
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
LABEL_14:
  double result = *(double *)(a1 + 24);
  *a3 = result;
  return result;
}

int *sub_100056B28@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  uint64_t v4 = a1;
  if (a2)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  double result = (int *)stat(a1, &v17);
  if (result)
  {
    double result = __error();
    uint64_t v7 = *result;
    if (a2)
    {
      if ((unint64_t)qword_10047BF98 >> 1 == 0x595588BD12BF6FE8) {
        double result = (int *)(v7 != 0);
      }
      else {
        double result = (int *)((uint64_t (*)(uint64_t (***)(), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v7);
      }
      uint64_t v11 = 2;
      if (result) {
        uint64_t v11 = 3;
      }
      *(_DWORD *)a2 = v7;
      *(_DWORD *)(a2 + 4) = 0;
      *(void *)(a2 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
      *(void *)(a2 + 16) = v11;
      if (v7 == 20) {
        int v12 = 0;
      }
      else {
        int v12 = 0xFFFF;
      }
      int v9 = v7 == 2 || v7 == 20;
      if (v7 == 2) {
        int v8 = 0;
      }
      else {
        int v8 = v12;
      }
    }
    else
    {
      if (v7 != 2 && v7 != 20)
      {
        exception = __cxa_allocate_exception(0x30uLL);
        v16[0] = 0;
        if ((unint64_t)qword_10047BF98 >> 1 == 0x595588BD12BF6FE8) {
          int v14 = v7 != 0;
        }
        else {
          int v14 = ((uint64_t (*)(uint64_t (***)(), uint64_t))boost::system::detail::system_cat_holder<void>::instance[6])(&boost::system::detail::system_cat_holder<void>::instance, v7);
        }
        uint64_t v15 = 2;
        LODWORD(v16[0]) = v7;
        if (v14) {
          uint64_t v15 = 3;
        }
        v16[1] = &boost::system::detail::system_cat_holder<void>::instance;
        _DWORD v16[2] = v15;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::status", v4, v16);
      }
      int v8 = 0;
      int v9 = 1;
    }
  }
  else
  {
    int v8 = 0xFFFF;
    int v9 = 10;
    switch(((v17.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 7;
        break;
      case 1u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 6;
        break;
      case 3u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 3;
        break;
      case 5u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 5;
        break;
      case 7u:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 2;
        break;
      case 0xBu:
        int v8 = v17.st_mode & 0xFFF;
        int v9 = 8;
        break;
      default:
        break;
    }
  }
  *a3 = v9;
  a3[1] = v8;
  return result;
}

void sub_100056D80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000576EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_1000BA884(v14 - 176);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000577D8()
{
  std::__shared_weak_count::~__shared_weak_count(v0);
  JUMPOUT(0x1000577E8);
}

void sub_1000577FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100057810()
{
}

void sub_10005783C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100057850(_Unwind_Exception *a1)
{
}

void sub_10005794C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3) {
    sub_1003A3868(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100057964(uint64_t a1, std::string::size_type *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 24);
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  while (v2 != v3)
  {
    uint64_t v5 = *v2++;
    sub_1000579AC(v5, a2);
  }
}

void sub_1000579AC(uint64_t a1, std::string::size_type *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (!*a2)
  {
    sub_1000AE4B0(__p, "");
    sub_1001F1B10("Trying to add null observer", &buf);
    sub_10016A2C4((uint64_t)__p, (uint64_t)&buf, 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    sub_10014B3FC((uint64_t)&v11);
  }
  uint64_t v5 = sub_100057C24(a1 + 72, a2);
  if (*(void **)(a1 + 80) == v5)
  {
    std::string::size_type v8 = *a2;
    unint64_t size = (std::__shared_weak_count *)a2[1];
    buf.__r_.__value_.__r.__words[0] = *a2;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)size;
    if (size)
    {
      atomic_fetch_add_explicit(&size->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int v9 = *(std::string::size_type **)(a1 + 80);
      if ((unint64_t)v9 < *(void *)(a1 + 88))
      {
        std::string::size_type *v9 = v8;
        v9[1] = (std::string::size_type)size;
        uint64_t v10 = v9 + 2;
        atomic_fetch_add_explicit(&size->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_12;
      }
    }
    else if (*(void *)(a1 + 88) > (unint64_t)v5)
    {
      *uint64_t v5 = v8;
      v5[1] = 0;
      uint64_t v10 = v5 + 2;
      goto LABEL_12;
    }
    uint64_t v10 = sub_100057EB4(a1 + 72, (long long *)&buf);
    unint64_t size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
LABEL_12:
    *(void *)(a1 + 80) = v10;
    if (size) {
      std::__shared_weak_count::__release_weak(size);
    }
    goto LABEL_14;
  }
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_10046A580);
    int v6 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_14;
    }
    goto LABEL_5;
  }
  int v6 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR))
  {
LABEL_5:
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Attempt to add observer already present", (uint8_t *)&buf, 2u);
  }
LABEL_14:
  std::mutex::unlock(v4);
}

void sub_100057BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::mutex::unlock(v22);
    _Unwind_Resume(a1);
  }
  std::mutex::unlock(v22);
  _Unwind_Resume(a1);
}

void *sub_100057C24(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  if (*(void **)a1 == v3) {
    return v2;
  }
  while (1)
  {
    int v6 = (std::__shared_weak_count *)v2[1];
    if (!v6) {
      break;
    }
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *v2;
    if (*v2 == *a2) {
      goto LABEL_31;
    }
LABEL_10:
    if (!v8)
    {
      if (qword_10047BED8 == -1)
      {
        int v9 = qword_10047BEE0;
        if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
          goto LABEL_15;
        }
LABEL_18:
        uint64_t v11 = v2 + 2;
        int v12 = *(void **)(a1 + 8);
        if (v2 + 2 == v12) {
          goto LABEL_19;
        }
        do
        {
LABEL_21:
          long long v14 = *(_OWORD *)v11;
          *uint64_t v11 = 0;
          v11[1] = 0;
          uint64_t v15 = (std::__shared_weak_count *)*(v11 - 1);
          *((_OWORD *)v11 - 1) = v14;
          if (v15) {
            std::__shared_weak_count::__release_weak(v15);
          }
          v11 += 2;
        }
        while (v11 != v12);
        char v13 = v11 - 2;
        uint64_t v11 = *(void **)(a1 + 8);
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_10046A580);
        int v9 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
          goto LABEL_18;
        }
LABEL_15:
        uint64_t v10 = ((uint64_t)v2 - *(void *)a1) >> 4;
        *(_DWORD *)std::string buf = 134217984;
        uint64_t v19 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "WARNING: Invalid weak reference in collection @ [%ld]. Removing", buf, 0xCu);
        uint64_t v11 = v2 + 2;
        int v12 = *(void **)(a1 + 8);
        if (v2 + 2 != v12) {
          goto LABEL_21;
        }
LABEL_19:
        char v13 = v2;
      }
      while (v11 != v13)
      {
        char v16 = (std::__shared_weak_count *)*(v11 - 1);
        if (v16) {
          std::__shared_weak_count::__release_weak(v16);
        }
        v11 -= 2;
      }
      *(void *)(a1 + 8) = v13;
      v2 -= 2;
      if (!v7) {
        goto LABEL_3;
      }
LABEL_29:
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      goto LABEL_3;
    }
    if (v7) {
      goto LABEL_29;
    }
LABEL_3:
    v2 += 2;
    if (v2 == v3) {
      return *(void **)(a1 + 8);
    }
  }
  uint64_t v7 = 0;
LABEL_9:
  uint64_t v8 = 0;
  if (*a2) {
    goto LABEL_10;
  }
LABEL_31:
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v2;
}

_OWORD *sub_100057EB4(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = ((uint64_t)v4 - *(void *)a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_1000A9108();
  }
  uint64_t v7 = *(void *)(a1 + 16) - (void)v3;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_1000A6A10();
  }
  uint64_t v9 = 16 * v6;
  uint64_t v10 = (char *)operator new(16 * v6);
  uint64_t v11 = &v10[16 * v5];
  long long v12 = *a2;
  *(_OWORD *)uint64_t v11 = *a2;
  if (*((void *)&v12 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 16), 1uLL, memory_order_relaxed);
    uint64_t v3 = *(void **)a1;
    uint64_t v4 = *(void **)(a1 + 8);
  }
  char v13 = &v10[v9];
  long long v14 = v11 + 16;
  if (v4 == v3)
  {
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v13;
    if (!v3) {
      return v14;
    }
    goto LABEL_18;
  }
  do
  {
    long long v15 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v15;
    v11 -= 16;
    void *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  char v16 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v13;
  if (v3 != v16)
  {
    do
    {
      stat v17 = (std::__shared_weak_count *)*(v3 - 1);
      if (v17) {
        std::__shared_weak_count::__release_weak(v17);
      }
      v3 -= 2;
    }
    while (v3 != v16);
    uint64_t v3 = v16;
  }
  if (v3) {
LABEL_18:
  }
    operator delete(v3);
  return v14;
}

void sub_100058948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,id a25,char a26,char a27,__int16 a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,char a33,int a34)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x100058330);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100058BC0(uint64_t a1, unsigned int *a2)
{
  sub_1000776C8(*(void *)a1);
  if (v15[0] == v15[0] >> 31)
  {
    uint64_t v4 = *a2;
  }
  else
  {
    uint64_t v4 = sub_10015F388(v15, (uint64_t)__p);
    if (!*(unsigned char *)(a1 + 8))
    {
      if (qword_10047BED8 != -1) {
        dispatch_once(&qword_10047BED8, &stru_100459D18);
      }
      uint64_t v5 = (id)qword_10047BEE0;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)a1;
        sub_10015F190(v15, (uint64_t)__p);
        if (v10 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v12 = v6;
        __int16 v13 = 2080;
        long long v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "developer override of %s with %s", buf, 0x16u);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }

      *(unsigned char *)(a1 + 8) = 1;
    }
  }
  sub_100077BC8((uint64_t)v15);
  return v4;
}

void sub_100058D30(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::string __p = va_arg(va1, void *);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t buf = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  if (a2)
  {

    __cxa_begin_catch(a1);
    uint64_t v5 = sub_10015AD8C();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      sub_10015F190((int *)va1, (uint64_t)va);
      sub_10015F2D0();
    }

    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

const char *sub_100058E6C()
{
  return "SCAN_STRATEGY_DYNAMIC";
}

uint64_t sub_100058E7C()
{
  if (qword_10047E318 != -1) {
    dispatch_once(&qword_10047E318, &stru_100468670);
  }
  return qword_10047E310;
}

void sub_100058ECC(uint64_t a1)
{
  sub_1000590EC(a1, &v6);
  uint64_t v3 = v6;
  uint64_t v2 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047E328, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10047E328))
  {
    sub_1000099BC(&qword_10047E320, "com.apple.indoor.WifiSettingsSingleton.changeListeners");
    __cxa_atexit((void (*)(void *))sub_100359A24, &qword_10047E320, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10047E328);
  }
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x3802000000;
  v9[3] = sub_1000965A0;
  v9[4] = nullsub_28;
  v9[5] = a1;
  v9[6] = &v6;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_1000964D0;
  v8[3] = &unk_100468698;
  v8[4] = v9;
  sub_100045DE8(&qword_10047E320, v8);
  _Block_object_dispose(v9, 8);
  uint64_t v5 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t sub_1000590C8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1000590EC(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  switch(*(_DWORD *)a1)
  {
    case 0:
      float v6 = *(float *)(a1 + 16);
      sub_100059EF4((uint64_t **)(a1 + 152), (uint64_t)__p);
      sub_10033B558(110, (uint64_t)__p, 1, 0, 0, *(unsigned char *)(a1 + 20), &v54, v6);
      long long v7 = v54;
      long long v54 = 0uLL;
      *(_OWORD *)a2 = v7;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      return;
    case 1:
      float v30 = *(float *)(a1 + 16);
      sub_100059EF4((uint64_t **)(a1 + 152), (uint64_t)v53);
      sub_10033B558(110, (uint64_t)v53, 0, 0, 0, *(unsigned char *)(a1 + 20), &v54, v30);
      long long v31 = v54;
      long long v54 = 0uLL;
      *(_OWORD *)a2 = v31;
      if (v53[0])
      {
        v53[1] = v53[0];
        operator delete(v53[0]);
      }
      return;
    case 2:
      *(void *)&long long v54 = sub_10005B270();
      *((void *)&v54 + 1) = v12;
      BOOL v13 = sub_100059C20((uint64_t)&v54, (unsigned char *)&v54 + 9);
      if (v13)
      {
        *(void *)&long long v54 = 110;
        DWORD2(v54) = *(_DWORD *)(a1 + 16);
        sub_100059EF4((uint64_t **)(a1 + 152), (uint64_t)&v55);
        *(void *)&long long v49 = sub_10005B2A0();
        *((void *)&v49 + 1) = v14;
        LODWORD(v58[0]) = sub_100058BC0((uint64_t)&v49, (unsigned int *)&v49 + 3);
        uint64_t v47 = sub_10005B290();
        uint64_t v48 = v15;
        WORD2(v58[0]) = sub_100059C20((uint64_t)&v47, (unsigned char *)&v48 + 1);
        *(void *)&v70[7] = v54;
        *(_DWORD *)&v70[15] = DWORD2(v54);
        uint64_t v2 = v55;
        uint64_t v3 = v56;
        int v56 = 0;
        uint64_t v57 = 0;
        int v55 = 0;
        int v50 = (int)v58[0];
        __int16 v51 = WORD2(v58[0]);
      }
      *(void *)&long long v54 = 110;
      DWORD2(v54) = *(_DWORD *)(a1 + 16);
      *(void *)&long long v49 = sub_10005B250();
      *((void *)&v49 + 1) = v16;
      BYTE12(v54) = sub_100059C20((uint64_t)&v49, (unsigned char *)&v49 + 9);
      uint64_t v47 = sub_10005B260();
      uint64_t v48 = v17;
      BYTE13(v54) = sub_100059C20((uint64_t)&v47, (unsigned char *)&v48 + 1);
      int v56 = 0;
      uint64_t v57 = 0;
      int v55 = 0;
      sub_100059EF4((uint64_t **)(a1 + 152), (uint64_t)v58);
      v58[3] = *(void **)(a1 + 8);
      char v59 = *(unsigned char *)(a1 + 20);
      uint64_t v45 = sub_10005B280();
      uint64_t v46 = v18;
      uint64_t v60 = (int)(float)(sub_10005BF74((uint64_t)&v45, (float *)&v46 + 1) * (float)*(uint64_t *)(a1 + 8));
      char v61 = 0;
      if (v13)
      {
        uint64_t v62 = *(void *)&v70[7];
        int v63 = *(_DWORD *)&v70[15];
        unsigned __int8 v65 = 0;
        uint64_t v66 = 0;
        char v64 = 0;
        uint64_t v19 = v3 - v2;
        if (v3 != v2)
        {
          if (v19 < 0) {
            sub_1000A9108();
          }
          char v64 = operator new(v3 - v2);
          unsigned __int8 v65 = v64;
          uint64_t v20 = (char *)v64 + 4 * (v19 >> 2);
          uint64_t v66 = v20;
          memcpy(v64, v2, v3 - v2);
          unsigned __int8 v65 = v20;
        }
        int v67 = v50;
        __int16 v68 = v51;
        char v61 = 1;
      }
      uint64_t v69 = *(unsigned int *)(a1 + 108);
      sub_10005A7A8((uint64_t *)&v54, &v49);
      long long v21 = v49;
      long long v49 = 0uLL;
      uint64_t v22 = (std::__shared_weak_count *)a2[1];
      *(_OWORD *)a2 = v21;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      long long v23 = (std::__shared_weak_count *)*((void *)&v49 + 1);
      if (*((void *)&v49 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v49 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      if (v61)
      {
        if (v64)
        {
          unsigned __int8 v65 = v64;
          operator delete(v64);
        }
        char v61 = 0;
      }
      if (v58[0])
      {
        v58[1] = v58[0];
        operator delete(v58[0]);
      }
      if (v55)
      {
        int v56 = v55;
        operator delete(v55);
      }
      if (v2) {
        BOOL v24 = v13;
      }
      else {
        BOOL v24 = 0;
      }
      if (v24) {
        operator delete(v2);
      }
      return;
    case 3:
      *(void *)&long long v54 = 110;
      DWORD2(v54) = *(_DWORD *)(a1 + 16);
      sub_100059EF4((uint64_t **)(a1 + 152), (uint64_t)&v55);
      *(void *)uint64_t v70 = sub_10005B2A0();
      *(void *)&v70[8] = v25;
      LODWORD(v58[0]) = sub_100058BC0((uint64_t)v70, (unsigned int *)&v70[12]);
      *(void *)&long long v49 = sub_10005B290();
      *((void *)&v49 + 1) = v26;
      WORD2(v58[0]) = sub_100059C20((uint64_t)&v49, (unsigned char *)&v49 + 9);
      sub_10005B2B0((uint64_t *)&v54, v70);
      long long v27 = *(_OWORD *)v70;
      *(_OWORD *)uint64_t v70 = 0uLL;
      uint64_t v28 = (std::__shared_weak_count *)a2[1];
      *(_OWORD *)a2 = v27;
      if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      int v29 = *(std::__shared_weak_count **)&v70[8];
      if (*(void *)&v70[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v70[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      if (v55)
      {
        int v56 = v55;
        operator delete(v55);
      }
      return;
    case 4:
      uint64_t v8 = (void *)&v54 + 1;
      *((void *)&v54 + 1) = 0;
      int v55 = 0;
      *(void *)&long long v54 = (char *)&v54 + 8;
      float v9 = *(float *)(a1 + 16);
      sub_100059FAC((uint64_t **)(a1 + 152), 0, v44);
      sub_10033B558(110, (uint64_t)v44, 0, 0, 0, *(unsigned char *)(a1 + 20), v70, v9);
      char v10 = (char *)&v54 + 8;
      if (!*((void *)&v54 + 1)) {
        goto LABEL_46;
      }
      if (*(unsigned char *)(*((void *)&v54 + 1) + 32))
      {
        char v10 = (char *)*((void *)&v54 + 1);
        while (1)
        {
          uint64_t v11 = *(char **)v10;
          if (!*(void *)v10) {
            break;
          }
          char v10 = *(char **)v10;
          if (!v11[32]) {
            goto LABEL_49;
          }
        }
LABEL_46:
        uint64_t v32 = (char *)operator new(0x38uLL);
        v32[32] = 0;
        *(_OWORD *)(v32 + 40) = *(_OWORD *)v70;
        *(_OWORD *)uint64_t v70 = 0uLL;
        *(void *)uint64_t v32 = 0;
        *((void *)v32 + 1) = 0;
        *((void *)v32 + 2) = v10;
        *(void *)char v10 = v32;
        if (*(void *)v54)
        {
          *(void *)&long long v54 = *(void *)v54;
          uint64_t v32 = *(char **)v10;
        }
        sub_1000619B8(*((uint64_t **)&v54 + 1), (uint64_t *)v32);
        int v55 = (char *)v55 + 1;
      }
LABEL_49:
      double v33 = *(std::__shared_weak_count **)&v70[8];
      if (*(void *)&v70[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v70[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      if (v44[0])
      {
        v44[1] = v44[0];
        operator delete(v44[0]);
      }
      float v34 = *(float *)(a1 + 16);
      sub_100059FAC((uint64_t **)(a1 + 152), 1, v43);
      sub_10033B558(110, (uint64_t)v43, 0, 0, 0, *(unsigned char *)(a1 + 20), v70, v34);
      double v35 = (char *)*((void *)&v54 + 1);
      double v36 = (char *)&v54 + 8;
      if (!*((void *)&v54 + 1)) {
        goto LABEL_60;
      }
      if (!*(unsigned char *)(*((void *)&v54 + 1) + 32))
      {
        while (1)
        {
          uint64_t v37 = *((void *)v35 + 1);
          if (!v37) {
            break;
          }
          double v35 = (char *)*((void *)v35 + 1);
          if (*(unsigned char *)(v37 + 32)) {
            goto LABEL_63;
          }
        }
        uint64_t v8 = v35 + 8;
        double v36 = v35;
LABEL_60:
        double v38 = (char *)operator new(0x38uLL);
        v38[32] = 1;
        *(_OWORD *)(v38 + 40) = *(_OWORD *)v70;
        *(_OWORD *)uint64_t v70 = 0uLL;
        *(void *)double v38 = 0;
        *((void *)v38 + 1) = 0;
        *((void *)v38 + 2) = v36;
        void *v8 = v38;
        if (*(void *)v54) {
          *(void *)&long long v54 = *(void *)v54;
        }
        sub_1000619B8(*((uint64_t **)&v54 + 1), (uint64_t *)v38);
        int v55 = (char *)v55 + 1;
      }
LABEL_63:
      double v39 = *(std::__shared_weak_count **)&v70[8];
      if (*(void *)&v70[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v70[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
      if (v43[0])
      {
        v43[1] = v43[0];
        operator delete(v43[0]);
      }
      sub_100334A80(&v54, v70);
      long long v40 = *(_OWORD *)v70;
      *(_OWORD *)uint64_t v70 = 0uLL;
      uint64_t v41 = (std::__shared_weak_count *)a2[1];
      *(_OWORD *)a2 = v40;
      if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
      uint64_t v42 = *(std::__shared_weak_count **)&v70[8];
      if (*(void *)&v70[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v70[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
      sub_10033547C((uint64_t)&v54, *((void **)&v54 + 1));
      return;
    default:
      return;
  }
}

void sub_10005993C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, uint64_t a18, char a19, char a20,uint64_t a21,char a22,char a23,int a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,void *a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  sub_1000BA884(v49 - 128);
  if (__p) {
    operator delete(__p);
  }
  sub_10033547C((uint64_t)&a33, a34);
  sub_1000BA884(v48);
  _Unwind_Resume(a1);
}

void sub_100059C18()
{
}

BOOL sub_100059C20(uint64_t a1, unsigned char *a2)
{
  sub_1000776C8(*(void *)a1);
  if (v15[0] == v15[0] >> 31)
  {
    BOOL v4 = *a2 != 0;
  }
  else
  {
    BOOL v4 = sub_10022E1D4(v15, (uint64_t)__p);
    if (!*(unsigned char *)(a1 + 8))
    {
      if (qword_10047BED8 != -1) {
        dispatch_once(&qword_10047BED8, &stru_100461DA0);
      }
      uint64_t v5 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)a1;
        sub_10015F190(v15, (uint64_t)__p);
        if (v10 >= 0) {
          long long v7 = __p;
        }
        else {
          long long v7 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 136315394;
        uint64_t v12 = v6;
        __int16 v13 = 2080;
        uint64_t v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "developer override of %s with %s", buf, 0x16u);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      *(unsigned char *)(a1 + 8) = 1;
    }
  }
  sub_100077BC8((uint64_t)v15);
  return v4;
}

void sub_100059D90(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v3 = va_arg(va1, void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::string __p = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t buf = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  if (qword_10047BED8 == -1)
  {
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100461DA0);
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      sub_10015F190((int *)va1, (uint64_t)va);
      sub_10015F2D0();
    }
  }
  __cxa_rethrow();
}

void sub_100059EF4(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  sub_100059FAC(a1, 0, (void *)a2);
  sub_100059FAC(a1, 1, &__p);
  sub_10005A3FC((unint64_t *)a2, *(void **)(a2 + 8), (char *)__p, v5, (v5 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    uint64_t v5 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100059F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v13 = *(void **)v11;
    if (!*(void *)v11) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v13 = *(void **)v11;
    if (!*(void *)v11) {
      goto LABEL_3;
    }
  }
  *(void *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_100059FAC(uint64_t **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = (char *)a1[3];
  long long v7 = (char *)a1[4];
  if (v6 != v7)
  {
    if (v7 - v6 == 4)
    {
      int v8 = *(_DWORD *)v6;
      if (((((*(_DWORD *)v6 - 3) < 7) ^ a2) & 1) == 0)
      {
        uint64_t v10 = a1 + 1;
        uint64_t v9 = a1[1];
        if (v9)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v11 = (uint64_t **)v9;
              int v12 = *((_DWORD *)v9 + 8);
              if (v8 >= v12) {
                break;
              }
              uint64_t v9 = *v11;
              uint64_t v10 = v11;
              if (!*v11) {
                goto LABEL_11;
              }
            }
            if (v12 >= v8) {
              break;
            }
            uint64_t v9 = v11[1];
            if (!v9)
            {
              uint64_t v10 = v11 + 1;
              goto LABEL_11;
            }
          }
        }
        else
        {
          uint64_t v11 = a1 + 1;
LABEL_11:
          uint64_t v13 = (uint64_t *)v11;
          uint64_t v11 = (uint64_t **)operator new(0x40uLL);
          *((_DWORD *)v11 + 8) = v8;
          v11[6] = 0;
          v11[7] = 0;
          void v11[5] = 0;
          *uint64_t v11 = 0;
          v11[1] = 0;
          id v11[2] = v13;
          char *v10 = (uint64_t *)v11;
          uint64_t v14 = (uint64_t *)**a1;
          uint64_t v15 = (uint64_t *)v11;
          if (v14)
          {
            *a1 = v14;
            uint64_t v15 = *v10;
          }
          sub_1000619B8(a1[1], v15);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
        }
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        uint64_t v17 = v11[5];
        uint64_t v16 = v11[6];
        int64_t v18 = (char *)v16 - (char *)v17;
        if (v16 != v17)
        {
          if (v18 < 0) {
            sub_1000A9108();
          }
LABEL_58:
          uint64_t v43 = (char *)operator new((char *)v16 - (char *)v17);
          *a3 = v43;
          a3[1] = v43;
          uint64_t v44 = &v43[4 * (v18 >> 2)];
          a3[2] = v44;
          memcpy(v43, v17, v18);
          a3[1] = v44;
          return;
        }
        return;
      }
LABEL_18:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    v47[0] = 0;
    v47[1] = 0;
    uint64_t v46 = v47;
    uint64_t v19 = a1 + 1;
    while (1)
    {
      int v20 = *(_DWORD *)v6;
      if ((((*(_DWORD *)v6 - 3) < 7) ^ a2)) {
        goto LABEL_22;
      }
      long long v21 = *v19;
      uint64_t v22 = a1 + 1;
      long long v23 = a1 + 1;
      if (*v19)
      {
        BOOL v24 = *v19;
        while (1)
        {
          while (1)
          {
            long long v23 = (uint64_t **)v24;
            int v25 = *((_DWORD *)v24 + 8);
            if (v20 >= v25) {
              break;
            }
            BOOL v24 = *v23;
            uint64_t v22 = v23;
            if (!*v23) {
              goto LABEL_31;
            }
          }
          if (v25 >= v20) {
            break;
          }
          BOOL v24 = v23[1];
          if (!v24)
          {
            uint64_t v22 = v23 + 1;
            goto LABEL_31;
          }
        }
        int v29 = (int *)v23[5];
        float v30 = a1 + 1;
        long long v31 = a1 + 1;
        if (v21) {
          goto LABEL_38;
        }
      }
      else
      {
LABEL_31:
        uint64_t v26 = operator new(0x40uLL);
        *((_DWORD *)v26 + 8) = v20;
        *((void *)v26 + 6) = 0;
        *((void *)v26 + 7) = 0;
        *((void *)v26 + 5) = 0;
        *(void *)uint64_t v26 = 0;
        *((void *)v26 + 1) = 0;
        *((void *)v26 + 2) = v23;
        std::__shared_weak_count *v22 = (uint64_t *)v26;
        long long v27 = (uint64_t *)**a1;
        uint64_t v28 = (uint64_t *)v26;
        if (v27)
        {
          *a1 = v27;
          uint64_t v28 = *v22;
        }
        sub_1000619B8(a1[1], v28);
        long long v21 = a1[1];
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
        int v29 = (int *)*((void *)v26 + 5);
        float v30 = a1 + 1;
        long long v31 = a1 + 1;
        if (v21)
        {
          while (1)
          {
LABEL_38:
            while (1)
            {
              long long v31 = (uint64_t **)v21;
              int v32 = *((_DWORD *)v21 + 8);
              if (v20 >= v32) {
                break;
              }
              long long v21 = *v31;
              float v30 = v31;
              if (!*v31) {
                goto LABEL_42;
              }
            }
            if (v32 >= v20) {
              break;
            }
            long long v21 = v31[1];
            if (!v21)
            {
              float v30 = v31 + 1;
              goto LABEL_42;
            }
          }
          double v33 = v31;
          goto LABEL_21;
        }
      }
LABEL_42:
      double v33 = operator new(0x40uLL);
      *((_DWORD *)v33 + 8) = v20;
      *((void *)v33 + 6) = 0;
      *((void *)v33 + 7) = 0;
      *((void *)v33 + 5) = 0;
      *(void *)double v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v31;
      *float v30 = (uint64_t *)v33;
      float v34 = (uint64_t *)**a1;
      double v35 = (uint64_t *)v33;
      if (v34)
      {
        *a1 = v34;
        double v35 = *v30;
      }
      sub_1000619B8(a1[1], v35);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_21:
      sub_100341088(v29, *((int **)v33 + 6), (int *)&v46, (uint64_t *)v47, &v48);
LABEL_22:
      v6 += 4;
      if (v6 == v7)
      {
        sub_100341350(a3, v46, v47);
        sub_10006A9DC((uint64_t)&v46, v47[0]);
        return;
      }
    }
  }
  if (a2) {
    goto LABEL_18;
  }
  uint64_t v37 = a1 + 1;
  double v36 = (int *)a1[1];
  if (v36)
  {
    while (1)
    {
      while (1)
      {
        double v38 = v36;
        int v39 = v36[8];
        if (v39 < 1) {
          break;
        }
        double v36 = (int *)*v38;
        uint64_t v37 = (uint64_t **)v38;
        if (!*v38) {
          goto LABEL_53;
        }
      }
      if ((v39 & 0x80000000) == 0) {
        break;
      }
      double v36 = (int *)v38[1];
      if (!v36)
      {
        uint64_t v37 = (uint64_t **)(v38 + 1);
        goto LABEL_53;
      }
    }
  }
  else
  {
    double v38 = a1 + 1;
LABEL_53:
    long long v40 = v38;
    double v38 = operator new(0x40uLL);
    *((_DWORD *)v38 + 8) = 0;
    v38[6] = 0;
    v38[7] = 0;
    v38[5] = 0;
    void *v38 = 0;
    v38[1] = 0;
    _DWORD v38[2] = v40;
    unsigned __int8 *v37 = v38;
    uint64_t v41 = (uint64_t *)**a1;
    uint64_t v42 = v38;
    if (v41)
    {
      *a1 = v41;
      uint64_t v42 = *v37;
    }
    sub_1000619B8(a1[1], v42);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v17 = (uint64_t *)v38[5];
  uint64_t v16 = (uint64_t *)v38[6];
  int64_t v18 = (char *)v16 - (char *)v17;
  if (v16 != v17)
  {
    if (v18 < 0) {
      sub_1000A9108();
    }
    goto LABEL_58;
  }
}

void sub_10005A3AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005A3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void sub_10005A3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

char *sub_10005A3FC(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  int v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v9 = a5 - 1;
  if (a5 < 1) {
    return v8;
  }
  uint64_t v11 = __src;
  uint64_t v13 = v7 >> 2;
  unint64_t v15 = a1[1];
  unint64_t v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 2)
  {
    unint64_t v16 = a5 + ((uint64_t)(v15 - v6) >> 2);
    if (v16 >> 62) {
      sub_1000A9108();
    }
    uint64_t v17 = v14 - v6;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        sub_1000A6A10();
      }
      unint64_t v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      unint64_t v20 = v18;
      long long v21 = operator new(4 * v18);
      unint64_t v18 = v20;
      int v8 = (char *)v19;
      uint64_t v13 = v7 >> 2;
      uint64_t v11 = __src;
    }
    else
    {
      long long v21 = 0;
    }
    uint64_t v43 = &v21[4 * v13];
    uint64_t v44 = &v43[4 * a5];
    uint64_t v45 = v43;
    uint64_t v46 = v11;
    if ((v9 & 0x3FFFFFFFFFFFFFFFuLL) < 7) {
      goto LABEL_57;
    }
    uint64_t v45 = &v21[4 * v13];
    uint64_t v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] - v11) < 0x20) {
      goto LABEL_57;
    }
    uint64_t v47 = (v9 & 0x3FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v45 = &v43[v48];
    uint64_t v46 = &v11[v48];
    uint64_t v49 = (long long *)(v11 + 16);
    int v50 = &v21[4 * v13 + 16];
    uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *int v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 8;
    }
    while (v51);
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_57:
      do
      {
        int v53 = *(_DWORD *)v46;
        v46 += 4;
        *(_DWORD *)uint64_t v45 = v53;
        v45 += 4;
      }
      while (v45 != v44);
    }
    long long v54 = &v21[4 * v13];
    if ((void *)v6 != a2)
    {
      int v55 = v8;
      long long v54 = &v21[4 * v13];
      if ((unint64_t)(v7 - 4) < 0x3C) {
        goto LABEL_58;
      }
      int v55 = v8;
      long long v54 = &v21[4 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20) {
        goto LABEL_58;
      }
      unint64_t v56 = ((unint64_t)(v7 - 4) >> 2) + 1;
      uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
      int v55 = &v8[-v57];
      long long v54 = &v43[-v57];
      uint64_t v58 = 4 * v13 - 16;
      char v59 = &v21[v58];
      uint64_t v60 = (long long *)(v6 + v58);
      uint64_t v61 = v56 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        _OWORD *v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 8;
      }
      while (v61);
      if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_58:
        do
        {
          int v63 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v54 - 1) = v63;
          v54 -= 4;
        }
        while (v55 != (char *)v6);
      }
    }
    char v64 = &v21[4 * v18];
    size_t v65 = v15 - (void)v8;
    if (v65) {
      memmove(&v43[4 * a5], v8, v65);
    }
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6) {
      operator delete((void *)v6);
    }
    return v43;
  }
  uint64_t v22 = v15 - (void)v8;
  uint64_t v23 = (uint64_t)(v15 - (void)v8) >> 2;
  if (v23 >= a5)
  {
    BOOL v24 = &__src[4 * a5];
    unint64_t v26 = a1[1];
  }
  else
  {
    BOOL v24 = &__src[4 * v23];
    int64_t v25 = a4 - v24;
    if (a4 != v24)
    {
      unint64_t v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v23], a4 - v24);
      uint64_t v13 = v7 >> 2;
      int v8 = (char *)v70;
    }
    unint64_t v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1) {
      return v8;
    }
  }
  long long v27 = &v8[4 * a5];
  size_t v28 = v26 - (void)v27;
  uint64_t v29 = (uint64_t)(v26 - (void)v27) >> 2;
  float v30 = (int *)(v26 - 4 * a5);
  long long v31 = (_DWORD *)v26;
  if ((unint64_t)v30 < v15)
  {
    unint64_t v32 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v28;
    double v33 = (char *)(v32 + v6);
    unint64_t v34 = v32 + v6 + 4;
    if (v15 > v34) {
      unint64_t v34 = v15;
    }
    unint64_t v35 = v34 + ~v6 - v32;
    if (v35 < 0x2C)
    {
      long long v31 = (_DWORD *)v26;
    }
    else
    {
      unint64_t v36 = v26 - (void)v33;
      long long v31 = (_DWORD *)v26;
      if (v36 >= 0x20)
      {
        uint64_t v37 = (v35 >> 2) + 1;
        uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
        float v30 = (int *)((char *)v30 + v38);
        long long v31 = (_DWORD *)(v26 + v38);
        int v39 = (_OWORD *)(v26 + 16);
        long long v40 = (long long *)(4 * v29 + 4 * v13 + v6 + 16);
        uint64_t v41 = v37 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *int v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 8;
        }
        while (v41);
        if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_47;
        }
      }
    }
    do
    {
      int v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    int v67 = v8;
    memmove((void *)(v26 - 4 * v29), v8, v28);
    int v8 = v67;
  }
  if (v24 != v11)
  {
    uint64_t v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

void sub_10005A7A8(uint64_t *a1@<X0>, void *a2@<X8>)
{
  BOOL v4 = (char *)operator new(0xB8uLL);
  uint64_t v5 = v4;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)BOOL v4 = off_100468510;
  *((void *)v4 + 3) = off_100468560;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  uint64_t v6 = (uint64_t)(v4 + 40);
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  uint64_t v7 = *a1;
  *((void *)v4 + 10) = 0;
  *((void *)v4 + 11) = v7;
  *((_DWORD *)v4 + 24) = *((_DWORD *)a1 + 2);
  *((void *)v4 + 13) = 0;
  uint64_t v61 = v4 + 40;
  long long v62 = (void **)(v4 + 104);
  *((void *)v4 + 14) = 0;
  *((void *)v4 + 15) = 0;
  v4[128] = *((unsigned char *)a1 + 72);
  *((void *)v4 + 17) = 0;
  *((void *)v4 + 18) = 0;
  *((void *)v4 + 19) = a1[18];
  *((void *)v4 + 20) = v7;
  *((void *)v4 + 21) = a1[8];
  *((_WORD *)v4 + 88) = *((_WORD *)a1 + 6);
  char v59 = v4 + 24;
  uint64_t v60 = a2;
  if (*((unsigned char *)a1 + 88))
  {
    sub_10005B2B0(a1 + 12, &v63);
    long long v8 = v63;
    long long v63 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v5 + 18);
    *(_OWORD *)(v5 + 136) = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v63 + 1);
    if (*((void *)&v63 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v63 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    *((_DWORD *)v4 + 8) = 1;
  }
  uint64_t v12 = a1[5];
  uint64_t v11 = a1[6];
  while (v11 != v12)
  {
    int v14 = *(_DWORD *)(v11 - 4);
    v11 -= 4;
    int v13 = v14;
    unint64_t v16 = (int *)*((void *)v5 + 14);
    unint64_t v15 = *((void *)v5 + 15);
    if ((unint64_t)v16 < v15)
    {
      int *v16 = v13;
      uint64_t v17 = (uint64_t)(v16 + 1);
      goto LABEL_33;
    }
    unint64_t v18 = (int *)*v62;
    uint64_t v19 = (char *)v16 - (unsigned char *)*v62;
    uint64_t v20 = v19 >> 2;
    unint64_t v21 = (v19 >> 2) + 1;
    if (v21 >> 62) {
      sub_1000A9108();
    }
    uint64_t v22 = v15 - (void)v18;
    if (v22 >> 1 > v21) {
      unint64_t v21 = v22 >> 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 62) {
        sub_1000A6A10();
      }
      BOOL v24 = operator new(4 * v23);
      int64_t v25 = (int *)&v24[4 * v20];
      *int64_t v25 = v13;
      uint64_t v17 = (uint64_t)(v25 + 1);
      if (v16 == v18)
      {
LABEL_25:
        uint64_t v6 = (uint64_t)v61;
        goto LABEL_31;
      }
    }
    else
    {
      BOOL v24 = 0;
      int64_t v25 = (int *)(4 * v20);
      *(_DWORD *)(4 * v20) = v13;
      uint64_t v17 = 4 * v20 + 4;
      if (v16 == v18) {
        goto LABEL_25;
      }
    }
    unint64_t v26 = (char *)(v16 - 1) - (char *)v18;
    if (v26 >= 0x2C)
    {
      unint64_t v27 = (char *)v16 - &v24[v19];
      uint64_t v6 = (uint64_t)v61;
      if (v27 >= 0x20)
      {
        uint64_t v28 = (v26 >> 2) + 1;
        uint64_t v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
        float v30 = &v16[v29 / 0xFFFFFFFFFFFFFFFCLL];
        int64_t v25 = (int *)((char *)v25 - v29);
        long long v31 = &v24[4 * v20 - 16];
        unint64_t v32 = v16 - 4;
        uint64_t v33 = v28 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          _OWORD *v31 = v34;
          v31 -= 2;
          v32 -= 8;
          v33 -= 8;
        }
        while (v33);
        unint64_t v16 = v30;
        if (v28 == (v28 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      uint64_t v6 = (uint64_t)v61;
    }
    do
    {
      int v35 = *--v16;
      *--int64_t v25 = v35;
    }
    while (v16 != v18);
LABEL_31:
    *((void *)v5 + 13) = v25;
    *((void *)v5 + 14) = v17;
    *((void *)v5 + 15) = &v24[4 * v23];
    if (v18) {
      operator delete(v18);
    }
LABEL_33:
    *((void *)v5 + 14) = v17;
    LODWORD(v63) = sub_10005AFC4(v13);
    sub_10005AD4C(v6, (int *)&v63);
  }
  if (*((void *)v5 + 13) == *((void *)v5 + 14))
  {
    int v36 = 11;
    while (1)
    {
      uint64_t v38 = (int *)*((void *)v5 + 14);
      unint64_t v37 = *((void *)v5 + 15);
      if ((unint64_t)v38 >= v37) {
        break;
      }
      int *v38 = v36;
      uint64_t v39 = (uint64_t)(v38 + 1);
LABEL_58:
      *((void *)v5 + 14) = v39;
      LODWORD(v63) = sub_10005AFC4(v36);
      sub_10005AD4C(v6, (int *)&v63);
      BOOL v58 = v36-- != 0;
      if (v36 == 0 || !v58) {
        goto LABEL_59;
      }
    }
    long long v40 = (int *)*v62;
    uint64_t v41 = (char *)v38 - (unsigned char *)*v62;
    uint64_t v42 = v41 >> 2;
    unint64_t v43 = (v41 >> 2) + 1;
    if (v43 >> 62) {
      sub_1000A9108();
    }
    uint64_t v44 = v37 - (void)v40;
    if (v44 >> 1 > v43) {
      unint64_t v43 = v44 >> 1;
    }
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v45 = v43;
    }
    if (v45)
    {
      if (v45 >> 62) {
        sub_1000A6A10();
      }
      uint64_t v46 = operator new(4 * v45);
      uint64_t v47 = (int *)&v46[4 * v42];
      int *v47 = v36;
      uint64_t v39 = (uint64_t)(v47 + 1);
      if (v38 != v40)
      {
LABEL_47:
        unint64_t v48 = (char *)(v38 - 1) - (char *)v40;
        if (v48 >= 0x2C)
        {
          unint64_t v49 = (char *)v38 - &v46[v41];
          uint64_t v6 = (uint64_t)v61;
          if (v49 >= 0x20)
          {
            uint64_t v50 = (v48 >> 2) + 1;
            uint64_t v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
            long long v52 = &v38[v51 / 0xFFFFFFFFFFFFFFFCLL];
            uint64_t v47 = (int *)((char *)v47 - v51);
            int v53 = &v46[4 * v42 - 16];
            long long v54 = v38 - 4;
            uint64_t v55 = v50 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v56 = *(_OWORD *)v54;
              *(v53 - 1) = *((_OWORD *)v54 - 1);
              _OWORD *v53 = v56;
              v53 -= 2;
              v54 -= 8;
              v55 -= 8;
            }
            while (v55);
            uint64_t v38 = v52;
            if (v50 == (v50 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_56:
              *((void *)v5 + 13) = v47;
              *((void *)v5 + 14) = v39;
              *((void *)v5 + 15) = &v46[4 * v45];
              if (v40) {
                operator delete(v40);
              }
              goto LABEL_58;
            }
          }
        }
        else
        {
          uint64_t v6 = (uint64_t)v61;
        }
        do
        {
          int v57 = *--v38;
          *--uint64_t v47 = v57;
        }
        while (v38 != v40);
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v47 = (int *)(4 * v42);
      *(_DWORD *)(4 * v42) = v36;
      uint64_t v39 = 4 * v42 + 4;
      if (v38 != v40) {
        goto LABEL_47;
      }
    }
    uint64_t v6 = (uint64_t)v61;
    goto LABEL_56;
  }
LABEL_59:
  void *v60 = v59;
  v60[1] = v5;
}

void sub_10005AC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12)
{
  int v14 = *(std::__shared_weak_count **)(v12 + 144);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  unint64_t v15 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 112) = v15;
    operator delete(v15);
  }

  unint64_t v16 = *(void **)(v12 + 56);
  if (v16)
  {
    do
    {
      uint64_t v19 = (void *)*v16;
      uint64_t v20 = (void *)v16[4];
      if (v20)
      {
        v16[5] = v20;
        operator delete(v20);
      }
      operator delete(v16);
      unint64_t v16 = v19;
    }
    while (v19);
  }
  uint64_t v17 = *a11;
  *a11 = 0;
  if (v17) {
    operator delete(v17);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v12);
  operator delete(v18);
  _Unwind_Resume(a1);
}

void sub_10005AD4C(uint64_t a1, int *a2)
{
  int v4 = *a2;
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v2 = v4;
      if (v6 <= v4) {
        unint64_t v2 = v4 % v6;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & v4;
    }
    long long v8 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v11 = v9[1];
            if (v11 == v4)
            {
              if (*((_DWORD *)v9 + 4) == v4) {
                return;
              }
            }
            else if ((v11 & (v6 - 1)) != v2)
            {
              goto LABEL_22;
            }
            uint64_t v9 = (uint64_t *)*v9;
            if (!v9) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == v4)
          {
            if (*((_DWORD *)v9 + 4) == v4) {
              return;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v2) {
              break;
            }
          }
          uint64_t v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_22:
  uint64_t v12 = operator new(0x48uLL);
  *uint64_t v12 = 0;
  v12[1] = v4;
  *((_DWORD *)v12 + 4) = v4;
  v12[7] = 0;
  v12[8] = 0;
  void v12[3] = 10000000000;
  void v12[4] = 0;
  v12[5] = 0;
  v12[6] = 0;
  *((_DWORD *)v12 + 14) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (v6 && (float)(v14 * (float)v6) >= v13) {
    goto LABEL_34;
  }
  BOOL v15 = 1;
  if (v6 >= 3) {
    BOOL v15 = (v6 & (v6 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v6);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = v16;
  }
  sub_10005AFE0(a1, v18);
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v19 = v6 - 1;
  if ((v6 & (v6 - 1)) != 0)
  {
    if (v6 <= v5)
    {
      unint64_t v2 = v5 % v6;
      uint64_t v20 = *(void *)a1;
      unint64_t v21 = *(void **)(*(void *)a1 + 8 * (v5 % v6));
      if (!v21) {
        goto LABEL_37;
      }
LABEL_35:
      *uint64_t v12 = *v21;
LABEL_43:
      void *v21 = v12;
      goto LABEL_44;
    }
    unint64_t v2 = v5;
LABEL_34:
    uint64_t v20 = *(void *)a1;
    unint64_t v21 = *(void **)(*(void *)a1 + 8 * v2);
    if (!v21) {
      goto LABEL_37;
    }
    goto LABEL_35;
  }
  unint64_t v2 = v19 & v5;
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * (v19 & v5));
  if (v21) {
    goto LABEL_35;
  }
LABEL_37:
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v2) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v22 >= v6) {
        v22 %= v6;
      }
    }
    else
    {
      v22 &= v6 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_43;
  }
LABEL_44:
  ++*(void *)(a1 + 24);
}

void sub_10005AFA0(_Unwind_Exception *a1)
{
  int v4 = *v2;
  if (*v2)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10005AFC4(int a1)
{
  if (a1 >= 15) {
    int v1 = 5000;
  }
  else {
    int v1 = 2407;
  }
  return (v1 + 5 * a1);
}

void sub_10005AFE0(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    size_t v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v17 = (uint8x8_t)vcnt_s8(v4), v17.i16[0] = vaddlv_u8(v17), v17.u32[0] > 1uLL))
    {
      size_t v22 = std::__next_prime(v16);
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime >= *(void *)&v4) {
        return;
      }
    }
    else
    {
      uint64_t v18 = 1 << -(char)__clz(v16 - 1);
      if (v16 >= 2) {
        size_t v16 = v18;
      }
      if (prime <= v16) {
        size_t prime = v16;
      }
      if (prime >= *(void *)&v4) {
        return;
      }
    }
    if (!prime)
    {
      unint64_t v23 = *(void **)a1;
      *(void *)a1 = 0;
      if (v23) {
        operator delete(v23);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    sub_1000A6A10();
  }
  unint64_t v5 = operator new(8 * prime);
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v9 = a1 + 16;
  long long v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v10 = v8[1];
    size_t v11 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v12 = v10 & v11;
      *(void *)(*(void *)a1 + 8 * v12) = v9;
      while (1)
      {
        float v13 = (void *)*v8;
        if (!*v8) {
          break;
        }
        size_t v14 = v13[1] & v11;
        if (v14 == v12)
        {
          long long v8 = (void *)*v8;
        }
        else if (*(void *)(*(void *)a1 + 8 * v14))
        {
          void *v8 = *v13;
          uint64_t v15 = 8 * v14;
          void *v13 = **(void **)(*(void *)a1 + v15);
          **(void **)(*(void *)a1 + v15) = v13;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v14) = v8;
          long long v8 = v13;
          size_t v12 = v14;
        }
      }
      return;
    }
    if (v10 >= prime) {
      v10 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v10) = v9;
    unint64_t v19 = (void *)*v8;
    if (*v8)
    {
      while (1)
      {
        size_t v21 = v19[1];
        if (v21 >= prime) {
          v21 %= prime;
        }
        if (v21 == v10) {
          goto LABEL_34;
        }
        if (*(void *)(*(void *)a1 + 8 * v21))
        {
          void *v8 = *v19;
          uint64_t v20 = 8 * v21;
          *unint64_t v19 = **(void **)(*(void *)a1 + v20);
          **(void **)(*(void *)a1 + v20) = v19;
          unint64_t v19 = v8;
LABEL_34:
          long long v8 = v19;
          unint64_t v19 = (void *)*v19;
          if (!v19) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v21) = v8;
          long long v8 = v19;
          unint64_t v19 = (void *)*v19;
          size_t v10 = v21;
          if (!v19) {
            return;
          }
        }
      }
    }
  }
}

const char *sub_10005B250()
{
  return "DYNAMIC_SCAN_STRATEGY_BIAS_TOWARDS_RECENT_DENSE_CHANNELS";
}

const char *sub_10005B260()
{
  return "DYNAMIC_SCAN_STRATEGY_BIAS_TOWARDS_STRONG_CHANNELS";
}

const char *sub_10005B270()
{
  return "DYNAMIC_SCAN_STRATEGY_INITIALIZE_OPTIMIZED_TTFF";
}

const char *sub_10005B280()
{
  return "DYNAMIC_SCAN_STRATEGY_CHANNEL_HISTORY";
}

const char *sub_10005B290()
{
  return "SCAN_STRATEGY_OPTIMIZED_ALL_CHANNELS";
}

const char *sub_10005B2A0()
{
  return "SCAN_STRATEGY_OPTIMIZED";
}

void sub_10005B2B0(uint64_t *a1@<X0>, void *a2@<X8>)
{
  int8x8_t v4 = (char *)operator new(0x70uLL);
  unint64_t v5 = v4;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)int8x8_t v4 = off_1004680C8;
  int v71 = v4 + 24;
  uint8x8_t v72 = a2;
  uint64_t v6 = *a1;
  *((void *)v4 + 3) = off_100468118;
  *((void *)v4 + 4) = v6;
  int v7 = *((_DWORD *)a1 + 2);
  *((void *)v4 + 6) = 0;
  long long v8 = (_DWORD **)(v4 + 48);
  *((_DWORD *)v4 + 10) = v7;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  size_t v10 = (unsigned char *)a1[2];
  uint64_t v9 = (unsigned char *)a1[3];
  int64_t v11 = v9 - v10;
  unint64_t v73 = a1;
  if (v9 == v10)
  {
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    v4[104] = *((unsigned char *)a1 + 45);
    char v78 = 0;
    LOBYTE(__p) = 0;
    memset(&v79, 0, sizeof(v79));
    std::string::assign(&v79, "No channels available");
    sub_10016A2C4((uint64_t)&__p, (uint64_t)&v79, 1);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v79.__r_.__value_.__l.__data_);
      if ((v78 & 0x80000000) == 0) {
        goto LABEL_8;
      }
    }
    else if ((v78 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(__p);
LABEL_8:
    sub_10014B3FC((uint64_t)&v76);
  }
  if (v11 < 0) {
    sub_1000A9108();
  }
  size_t v12 = (char *)operator new(v9 - v10);
  *((void *)v5 + 6) = v12;
  *((void *)v5 + 7) = v12;
  float v13 = &v12[4 * (v11 >> 2)];
  *((void *)v5 + 8) = v13;
  memcpy(v12, v10, v11);
  *((void *)v5 + 7) = v13;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  size_t v14 = a1;
  double v75 = (void **)(v5 + 72);
  v5[104] = *((unsigned char *)a1 + 45);
  if (*((unsigned char *)a1 + 44))
  {
    unint64_t v70 = v8;
    if (*((int *)a1 + 10) < 1) {
      goto LABEL_85;
    }
    goto LABEL_21;
  }
  size_t v16 = (_DWORD *)*((void *)v5 + 6);
  uint64_t v15 = (_DWORD *)*((void *)v5 + 7);
  for (v79.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 72); v16 != v15; ++v16)
  {
    if (*v16 > 0xBu || ((1 << *v16) & 0x842) == 0) {
      sub_10005B970((uint64_t *)&v79, v16);
    }
  }
  size_t v14 = a1;
  unint64_t v70 = v8;
  if (*((int *)a1 + 10) >= 1)
  {
LABEL_21:
    int v18 = 0;
    while (1)
    {
      int v74 = v18;
      unint64_t v19 = (int *)*((void *)v5 + 6);
      uint64_t v20 = (int *)*((void *)v5 + 7);
      if (!*((unsigned char *)v14 + 44)) {
        goto LABEL_59;
      }
      if (v20 != v19) {
        break;
      }
LABEL_22:
      int v18 = v74 + 1;
      size_t v14 = v73;
      if (v74 + 1 >= *((_DWORD *)v73 + 10)) {
        goto LABEL_85;
      }
    }
    while (1)
    {
      unsigned int v23 = *--v20;
      unsigned int v22 = v23;
      int v24 = (1 << v23) & 0x842;
      if (v23 <= 0xB && v24 != 0) {
        goto LABEL_28;
      }
      unint64_t v27 = (char *)*((void *)v5 + 10);
      unint64_t v26 = *((void *)v5 + 11);
      if ((unint64_t)v27 >= v26) {
        break;
      }
      *(_DWORD *)unint64_t v27 = v22;
      uint64_t v21 = (uint64_t)(v27 + 4);
LABEL_27:
      *((void *)v5 + 10) = v21;
LABEL_28:
      if (v20 == v19)
      {
        unint64_t v19 = (int *)*((void *)v5 + 6);
        uint64_t v20 = (int *)*((void *)v5 + 7);
        while (1)
        {
LABEL_59:
          if (v19 == v20) {
            goto LABEL_22;
          }
          int v46 = *v19;
          if (*v19 <= 0xB && ((1 << *v19) & 0x842) != 0) {
            break;
          }
LABEL_58:
          ++v19;
        }
        unint64_t v49 = (char *)*((void *)v5 + 10);
        unint64_t v48 = *((void *)v5 + 11);
        if ((unint64_t)v49 >= v48)
        {
          uint64_t v50 = (char *)*v75;
          uint64_t v51 = v49 - (unsigned char *)*v75;
          uint64_t v52 = v51 >> 2;
          unint64_t v53 = (v51 >> 2) + 1;
          if (v53 >> 62) {
            goto LABEL_95;
          }
          uint64_t v54 = v48 - (void)v50;
          if (v54 >> 1 > v53) {
            unint64_t v53 = v54 >> 1;
          }
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v55 = v53;
          }
          if (v55)
          {
            if (v55 >> 62) {
              goto LABEL_96;
            }
            long long v56 = operator new(4 * v55);
            int v57 = (int *)&v56[4 * v52];
            *int v57 = *v19;
            uint64_t v45 = (uint64_t)(v57 + 1);
            if (v49 == v50)
            {
LABEL_82:
              *((void *)v5 + 9) = v57;
              *((void *)v5 + 10) = v45;
              *((void *)v5 + 11) = &v56[4 * v55];
              if (v50) {
                operator delete(v50);
              }
              goto LABEL_57;
            }
          }
          else
          {
            long long v56 = 0;
            int v57 = (int *)(4 * v52);
            *(_DWORD *)(4 * v52) = v46;
            uint64_t v45 = 4 * v52 + 4;
            if (v49 == v50) {
              goto LABEL_82;
            }
          }
          unint64_t v58 = v49 - 4 - v50;
          if (v58 < 0x2C) {
            goto LABEL_100;
          }
          if ((unint64_t)(v49 - &v56[v51]) < 0x20) {
            goto LABEL_100;
          }
          uint64_t v59 = (v58 >> 2) + 1;
          uint64_t v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v61 = &v49[-v60];
          int v57 = (int *)((char *)v57 - v60);
          long long v62 = &v56[4 * v52 - 16];
          long long v63 = v49 - 16;
          uint64_t v64 = v59 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v65 = *(_OWORD *)v63;
            *(v62 - 1) = *((_OWORD *)v63 - 1);
            *long long v62 = v65;
            v62 -= 2;
            v63 -= 32;
            v64 -= 8;
          }
          while (v64);
          unint64_t v49 = v61;
          if (v59 != (v59 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_100:
            do
            {
              int v66 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *--int v57 = v66;
            }
            while (v49 != v50);
          }
          goto LABEL_82;
        }
        *(_DWORD *)unint64_t v49 = v46;
        uint64_t v45 = (uint64_t)(v49 + 4);
LABEL_57:
        *((void *)v5 + 10) = v45;
        goto LABEL_58;
      }
    }
    uint64_t v28 = (char *)*v75;
    uint64_t v29 = v27 - (unsigned char *)*v75;
    uint64_t v30 = v29 >> 2;
    unint64_t v31 = (v29 >> 2) + 1;
    if (v31 >> 62) {
LABEL_95:
    }
      sub_1000A9108();
    uint64_t v32 = v26 - (void)v28;
    if (v32 >> 1 > v31) {
      unint64_t v31 = v32 >> 1;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v31;
    }
    if (v33)
    {
      if (v33 >> 62) {
LABEL_96:
      }
        sub_1000A6A10();
      long long v34 = operator new(4 * v33);
      int v35 = (int *)&v34[4 * v30];
      *int v35 = *v20;
      uint64_t v21 = (uint64_t)(v35 + 1);
      if (v27 == v28) {
        goto LABEL_52;
      }
    }
    else
    {
      long long v34 = 0;
      int v35 = (int *)(4 * v30);
      *(_DWORD *)(4 * v30) = v22;
      uint64_t v21 = 4 * v30 + 4;
      if (v27 == v28)
      {
LABEL_52:
        *((void *)v5 + 9) = v35;
        *((void *)v5 + 10) = v21;
        *((void *)v5 + 11) = &v34[4 * v33];
        if (v28) {
          operator delete(v28);
        }
        goto LABEL_27;
      }
    }
    unint64_t v36 = v27 - 4 - v28;
    if (v36 < 0x2C) {
      goto LABEL_101;
    }
    if ((unint64_t)(v27 - &v34[v29]) < 0x20) {
      goto LABEL_101;
    }
    uint64_t v37 = (v36 >> 2) + 1;
    uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v39 = &v27[-v38];
    int v35 = (int *)((char *)v35 - v38);
    long long v40 = &v34[4 * v30 - 16];
    uint64_t v41 = v27 - 16;
    uint64_t v42 = v37 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *long long v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 8;
    }
    while (v42);
    unint64_t v27 = v39;
    if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_101:
      do
      {
        int v44 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *--int v35 = v44;
      }
      while (v27 != v28);
    }
    goto LABEL_52;
  }
LABEL_85:
  __int16 v68 = (_DWORD *)*((void *)v5 + 6);
  int v67 = (_DWORD *)*((void *)v5 + 7);
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 72);
  if (v68 != v67)
  {
    do
    {
      if (*v68 <= 0xBu && ((1 << *v68) & 0x842) != 0) {
        sub_10005B970((uint64_t *)&v79, v68);
      }
      ++v68;
    }
    while (v68 != v67);
    __int16 v68 = *v70;
  }
  *((void *)v5 + 12) = v68;
  *uint8x8_t v72 = v71;
  v72[1] = v5;
}

void sub_10005B8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  int v35 = *a14;
  if (*a14)
  {
    v32[3].__shared_owners_ = (uint64_t)v35;
    operator delete(v35);
    unint64_t v36 = *v33;
    if (!*v33)
    {
LABEL_5:
      std::__shared_weak_count::~__shared_weak_count(v32);
      operator delete(v37);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v36 = *v33;
    if (!*v33) {
      goto LABEL_5;
    }
  }
  v32[2].__shared_owners_ = (uint64_t)v36;
  operator delete(v36);
  std::__shared_weak_count::~__shared_weak_count(v32);
  operator delete(v38);
  _Unwind_Resume(a1);
}

uint64_t *sub_10005B970(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *(char **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  int v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = *(char **)v4;
    uint64_t v10 = (uint64_t)&v6[-*(void *)v4];
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + 1;
    if (v12 >> 62) {
      sub_1000A9108();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        sub_1000A6A10();
      }
      uint64_t v15 = operator new(4 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    size_t v16 = &v15[4 * v11];
    _DWORD *v16 = *a2;
    long long v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 4;
      if (v17 < 0x2C) {
        goto LABEL_27;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v18 = (v17 >> 2) + 1;
      uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      int v7 = &v6[-v19];
      size_t v16 = (_DWORD *)((char *)v16 - v19);
      uint64_t v20 = &v15[4 * v11 - 16];
      uint64_t v21 = v6 - 16;
      uint64_t v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        _OWORD *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          int v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--size_t v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(void *)uint64_t v4 = v16;
    *(void *)(v4 + 8) = v8;
    *(void *)(v4 + 16) = &v15[4 * v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v6 = *a2;
    long long v8 = v6 + 4;
  }
  *(void *)(v4 + 8) = v8;
  return a1;
}

uint64_t sub_10005BAE4(uint64_t a1)
{
  *(void *)a1 = off_100468560;
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = *(void **)(a1 + 80);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
LABEL_4:
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
LABEL_5:

  uint64_t v4 = *(void **)(a1 + 32);
  if (v4)
  {
    do
    {
      int v7 = (void *)*v4;
      long long v8 = (void *)v4[4];
      if (v8)
      {
        v4[5] = v8;
        operator delete(v8);
      }
      operator delete(v4);
      uint64_t v4 = v7;
    }
    while (v7);
  }
  unint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_10005BBDC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10005BC00(void *a1)
{
  *a1 = off_100468118;
  unint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10005BEA4(void *a1)
{
}

void sub_10005BEB8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x10005BE50);
}

void sub_10005BF6C()
{
}

float sub_10005BF74(uint64_t a1, float *a2)
{
  sub_1000776C8(*(void *)a1);
  if (v15[0] == v15[0] >> 31)
  {
    float v4 = *a2;
  }
  else
  {
    float v4 = sub_10033C4C4(v15, (uint64_t)__p);
    if (!*(unsigned char *)(a1 + 8))
    {
      if (qword_10047BED8 != -1) {
        dispatch_once(&qword_10047BED8, &stru_1004686D8);
      }
      unint64_t v5 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)a1;
        sub_10015F190(v15, (uint64_t)__p);
        if (v10 >= 0) {
          int v7 = __p;
        }
        else {
          int v7 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 136315394;
        uint64_t v12 = v6;
        __int16 v13 = 2080;
        unint64_t v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "developer override of %s with %s", buf, 0x16u);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      *(unsigned char *)(a1 + 8) = 1;
    }
  }
  sub_100077BC8((uint64_t)v15);
  return v4;
}

void sub_10005C0E4(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v3 = va_arg(va1, void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::string __p = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t buf = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  if (qword_10047BED8 == -1)
  {
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_1004686D8);
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      sub_10015F190((int *)va1, (uint64_t)va);
      sub_10015F2D0();
    }
  }
  __cxa_rethrow();
}

uint64_t sub_10005C248(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t v6 = (unsigned int *)(a1 + 24);
  int v7 = (unsigned int *)(a1 + 28);
  uint64_t v8 = (unsigned int *)(a1 + 32);
  uint64_t v9 = (unsigned int *)(a1 + 36);
  uint64_t v10 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  while (2)
  {
    uint64_t v11 = (char *)*((void *)this + 1);
    if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v11;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v11 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v13 = TagFallback & 7;
        if (v13 != 2) {
          goto LABEL_43;
        }
        *(_DWORD *)(a1 + 80) |= 1u;
        uint64_t v14 = *(void *)(a1 + 16);
        if (!v14) {
          operator new();
        }
        unsigned int v72 = 0;
        uint64_t v15 = (char *)*((void *)this + 1);
        if ((unint64_t)v15 >= *((void *)this + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v72))return 0; {
        }
          }
        else
        {
          unsigned int v72 = *v15;
          *((void *)this + 1) = v15 + 1;
        }
        int v29 = *((_DWORD *)this + 14);
        int v30 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v29 + 1;
        if (v29 >= v30) {
          return 0;
        }
        int v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v72);
        if (!sub_10005D58C(v14, this, v32, v33) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v31);
        int v34 = *((_DWORD *)this + 14);
        BOOL v35 = __OFSUB__(v34, 1);
        int v36 = v34 - 1;
        if (v36 < 0 == v35) {
          *((_DWORD *)this + 14) = v36;
        }
        uint64_t v37 = (unsigned char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        if ((unint64_t)v37 >= v16 || *v37 != 16) {
          continue;
        }
        unint64_t v17 = v37 + 1;
        *((void *)this + 1) = v17;
        if ((unint64_t)v17 >= v16) {
          goto LABEL_59;
        }
LABEL_56:
        if ((*v17 & 0x80000000) == 0)
        {
          unsigned int *v6 = *v17;
          uint64_t v38 = v17 + 1;
          *((void *)this + 1) = v38;
          *(_DWORD *)(a1 + 80) |= 2u;
          if ((unint64_t)v38 < v16) {
            goto LABEL_61;
          }
          continue;
        }
LABEL_59:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
        if (!result) {
          return result;
        }
        uint64_t v38 = (unsigned char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        *(_DWORD *)(a1 + 80) |= 2u;
        if ((unint64_t)v38 >= v16) {
          continue;
        }
LABEL_61:
        if (*v38 != 24) {
          continue;
        }
        uint64_t v18 = v38 + 1;
        *((void *)this + 1) = v18;
        if ((unint64_t)v18 >= v16) {
          goto LABEL_66;
        }
LABEL_63:
        if ((*v18 & 0x80000000) == 0)
        {
          unsigned int *v7 = *v18;
          uint64_t v39 = v18 + 1;
          *((void *)this + 1) = v39;
          *(_DWORD *)(a1 + 80) |= 4u;
          if ((unint64_t)v39 < v16) {
            goto LABEL_68;
          }
          continue;
        }
LABEL_66:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
        if (!result) {
          return result;
        }
        uint64_t v39 = (unsigned char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        *(_DWORD *)(a1 + 80) |= 4u;
        if ((unint64_t)v39 >= v16) {
          continue;
        }
LABEL_68:
        if (*v39 != 32) {
          continue;
        }
        uint64_t v19 = v39 + 1;
        *((void *)this + 1) = v19;
        if ((unint64_t)v19 >= v16) {
          goto LABEL_73;
        }
LABEL_70:
        if ((*v19 & 0x80000000) == 0)
        {
          unsigned int *v8 = *v19;
          long long v40 = v19 + 1;
          *((void *)this + 1) = v40;
          *(_DWORD *)(a1 + 80) |= 8u;
          if ((unint64_t)v40 < v16) {
            goto LABEL_75;
          }
          continue;
        }
LABEL_73:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
        if (!result) {
          return result;
        }
        long long v40 = (unsigned char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        *(_DWORD *)(a1 + 80) |= 8u;
        if ((unint64_t)v40 >= v16) {
          continue;
        }
LABEL_75:
        if (*v40 != 40) {
          continue;
        }
        uint64_t v20 = v40 + 1;
        *((void *)this + 1) = v20;
        if ((unint64_t)v20 >= v16) {
          goto LABEL_80;
        }
LABEL_77:
        if ((*v20 & 0x80000000) == 0)
        {
          unsigned int *v9 = *v20;
          uint64_t v41 = v20 + 1;
          *((void *)this + 1) = v41;
          int v42 = *(_DWORD *)(a1 + 80) | 0x10;
          *(_DWORD *)(a1 + 80) = v42;
          if ((unint64_t)v41 < v16) {
            goto LABEL_82;
          }
          continue;
        }
LABEL_80:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
        if (!result) {
          return result;
        }
        uint64_t v41 = (unsigned char *)*((void *)this + 1);
        unint64_t v43 = *((void *)this + 2);
        int v42 = *(_DWORD *)(a1 + 80) | 0x10;
        *(_DWORD *)(a1 + 80) = v42;
        if ((unint64_t)v41 >= v43) {
          continue;
        }
LABEL_82:
        if (*v41 != 50) {
          continue;
        }
        *((void *)this + 1) = v41 + 1;
        *(_DWORD *)(a1 + 80) = v42 | 0x20;
        uint64_t v21 = *(void *)(a1 + 40);
        if (!v21) {
LABEL_84:
        }
          operator new();
LABEL_85:
        unsigned int v72 = 0;
        int v44 = (char *)*((void *)this + 1);
        if ((unint64_t)v44 >= *((void *)this + 2) || *v44 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v72))return 0; {
        }
          }
        else
        {
          unsigned int v72 = *v44;
          *((void *)this + 1) = v44 + 1;
        }
        int v45 = *((_DWORD *)this + 14);
        int v46 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v45 + 1;
        if (v45 >= v46) {
          return 0;
        }
        int v47 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v72);
        if (!sub_10005CC4C(v21, this, v48, v49) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v47);
        int v50 = *((_DWORD *)this + 14);
        BOOL v35 = __OFSUB__(v50, 1);
        int v51 = v50 - 1;
        if (v51 < 0 == v35) {
          *((_DWORD *)this + 14) = v51;
        }
        uint64_t v52 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v52 >= *((void *)this + 2) || *v52 != 58) {
          continue;
        }
        *((void *)this + 1) = v52 + 1;
        *(_DWORD *)(a1 + 80) |= 0x40u;
        uint64_t v22 = *(void *)(a1 + 48);
        if (!v22) {
LABEL_97:
        }
          operator new();
LABEL_32:
        unsigned int v72 = 0;
        long long v23 = (char *)*((void *)this + 1);
        if ((unint64_t)v23 >= *((void *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v72))return 0; {
        }
          }
        else
        {
          unsigned int v72 = *v23;
          *((void *)this + 1) = v23 + 1;
        }
        int v53 = *((_DWORD *)this + 14);
        int v54 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v53 + 1;
        if (v53 >= v54) {
          return 0;
        }
        int v55 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v72);
        if (!sub_10005CC4C(v22, this, v56, v57) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v55);
        int v58 = *((_DWORD *)this + 14);
        BOOL v35 = __OFSUB__(v58, 1);
        int v59 = v58 - 1;
        if (v59 < 0 == v35) {
          *((_DWORD *)this + 14) = v59;
        }
        uint64_t v60 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v60 >= *((void *)this + 2) || *v60 != 66) {
          continue;
        }
        *((void *)this + 1) = v60 + 1;
        *(_DWORD *)(a1 + 80) |= 0x80u;
        if (*(_UNKNOWN **)(a1 + 56) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
LABEL_109:
        }
          operator new();
LABEL_36:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
        if (!result) {
          return result;
        }
        uint64_t v61 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v61 >= *((void *)this + 2) || *v61 != 74) {
          continue;
        }
        *((void *)this + 1) = v61 + 1;
        *(_DWORD *)(a1 + 80) |= 0x100u;
        int64_t v25 = *(_DWORD **)(a1 + 64);
        if (!v25) {
LABEL_113:
        }
          operator new();
LABEL_40:
        unsigned int v72 = 0;
        unint64_t v26 = (char *)*((void *)this + 1);
        if ((unint64_t)v26 >= *((void *)this + 2) || *v26 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v72))return 0; {
        }
          }
        else
        {
          unsigned int v72 = *v26;
          *((void *)this + 1) = v26 + 1;
        }
        int v62 = *((_DWORD *)this + 14);
        int v63 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v62 + 1;
        if (v62 < v63)
        {
          int v64 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v72);
          if (sub_100329C60(v25, this, v65, v66))
          {
            if (*((unsigned char *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v64);
              int v67 = *((_DWORD *)this + 14);
              BOOL v35 = __OFSUB__(v67, 1);
              int v68 = v67 - 1;
              if (v68 < 0 == v35) {
                *((_DWORD *)this + 14) = v68;
              }
              uint64_t v69 = (unsigned char *)*((void *)this + 1);
              unint64_t v27 = *((void *)this + 2);
              if ((unint64_t)v69 < v27 && *v69 == 80)
              {
                uint64_t v28 = v69 + 1;
                *((void *)this + 1) = v28;
LABEL_125:
                unsigned int v72 = 0;
                if ((unint64_t)v28 >= v27 || (int v70 = *v28, v70 < 0))
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v72);
                  if (!result) {
                    return result;
                  }
                  signed int v71 = v72;
                  if (sub_10032E198(v72)) {
                    goto LABEL_128;
                  }
LABEL_132:
                  wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v10, 10, v71);
                  if (*((void *)this + 1) == *((void *)this + 2)) {
                    goto LABEL_133;
                  }
                }
                else
                {
                  signed int v71 = *v28;
                  *((void *)this + 1) = v28 + 1;
                  if (!sub_10032E198(v70)) {
                    goto LABEL_132;
                  }
LABEL_128:
                  *(_DWORD *)(a1 + 80) |= 0x200u;
                  *(_DWORD *)(a1 + 72) = v71;
                  if (*((void *)this + 1) == *((void *)this + 2))
                  {
LABEL_133:
                    if (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
                    {
                      *((_DWORD *)this + 8) = 0;
                      uint64_t result = 1;
                      *((unsigned char *)this + 36) = 1;
                      return result;
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 2u:
        int v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_43;
        }
        unint64_t v17 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        if ((unint64_t)v17 >= v16) {
          goto LABEL_59;
        }
        goto LABEL_56;
      case 3u:
        int v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_43;
        }
        uint64_t v18 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        if ((unint64_t)v18 >= v16) {
          goto LABEL_66;
        }
        goto LABEL_63;
      case 4u:
        int v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_43;
        }
        uint64_t v19 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        if ((unint64_t)v19 >= v16) {
          goto LABEL_73;
        }
        goto LABEL_70;
      case 5u:
        int v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_43;
        }
        uint64_t v20 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        if ((unint64_t)v20 >= v16) {
          goto LABEL_80;
        }
        goto LABEL_77;
      case 6u:
        int v13 = TagFallback & 7;
        if (v13 != 2) {
          goto LABEL_43;
        }
        *(_DWORD *)(a1 + 80) |= 0x20u;
        uint64_t v21 = *(void *)(a1 + 40);
        if (!v21) {
          goto LABEL_84;
        }
        goto LABEL_85;
      case 7u:
        int v13 = TagFallback & 7;
        if (v13 != 2) {
          goto LABEL_43;
        }
        *(_DWORD *)(a1 + 80) |= 0x40u;
        uint64_t v22 = *(void *)(a1 + 48);
        if (v22) {
          goto LABEL_32;
        }
        goto LABEL_97;
      case 8u:
        int v13 = TagFallback & 7;
        if (v13 != 2) {
          goto LABEL_43;
        }
        *(_DWORD *)(a1 + 80) |= 0x80u;
        if (*(_UNKNOWN **)(a1 + 56) != &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          goto LABEL_36;
        }
        goto LABEL_109;
      case 9u:
        int v13 = TagFallback & 7;
        if (v13 != 2) {
          goto LABEL_43;
        }
        *(_DWORD *)(a1 + 80) |= 0x100u;
        int64_t v25 = *(_DWORD **)(a1 + 64);
        if (v25) {
          goto LABEL_40;
        }
        goto LABEL_113;
      case 0xAu:
        int v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_43;
        }
        uint64_t v28 = (char *)*((void *)this + 1);
        unint64_t v27 = *((void *)this + 2);
        goto LABEL_125;
      default:
        int v13 = TagFallback & 7;
LABEL_43:
        if (v13 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v10, a4) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_10005CBD0()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10005CBF8()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_10005CC4C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t v6 = (unsigned int *)(a1 + 32);
  unsigned int v7 = a1 + 8;
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v8 = (char *)*((void *)this + 1);
          if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v8;
            *((_DWORD *)this + 8) = TagFallback;
            *((void *)this + 1) = v8 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v10 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v11 = TagFallback & 7;
          if (v11 != 1) {
            goto LABEL_27;
          }
          unint64_t v20 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v20) & 1) == 0) {
            return 0;
          }
          *(void *)(a1 + 16) = v20;
          *(_DWORD *)(a1 + 40) |= 1u;
          uint64_t v14 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v14 < *((void *)this + 2) && *v14 == 17)
          {
            *((void *)this + 1) = v14 + 1;
            goto LABEL_19;
          }
        }
        if (v10 != 2) {
          break;
        }
        int v11 = TagFallback & 7;
        if (v11 != 1) {
          goto LABEL_27;
        }
LABEL_19:
        unint64_t v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v20) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 24) = v20;
        *(_DWORD *)(a1 + 40) |= 2u;
        uint64_t v15 = (unsigned char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v15 < v12 && *v15 == 24)
        {
          int v13 = v15 + 1;
          *((void *)this + 1) = v13;
          if ((unint64_t)v13 < v12) {
            goto LABEL_23;
          }
LABEL_30:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!result) {
            return result;
          }
          uint64_t v19 = *((void *)this + 1);
          uint64_t v18 = *((void *)this + 2);
          *(_DWORD *)(a1 + 40) |= 4u;
          if (v19 == v18) {
            goto LABEL_32;
          }
        }
      }
      if (v10 != 3) {
        break;
      }
      int v11 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_27;
      }
      int v13 = (unsigned __int8 *)*((void *)this + 1);
      unint64_t v12 = *((void *)this + 2);
      if ((unint64_t)v13 >= v12) {
        goto LABEL_30;
      }
LABEL_23:
      if ((char)*v13 < 0) {
        goto LABEL_30;
      }
      unsigned int *v6 = *v13;
      unint64_t v16 = (char *)(v13 + 1);
      *((void *)this + 1) = v16;
      *(_DWORD *)(a1 + 40) |= 4u;
      if (v16 == (char *)v12)
      {
LABEL_32:
        if (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    int v11 = TagFallback & 7;
LABEL_27:
    if (v11 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v7, a4) & 1) != 0);
  return 0;
}

uint64_t sub_10005CE7C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16);
  unsigned int v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 40);
  unsigned int v8 = a1 + 8;
  __asm { FMOV            V9.2S, #1.0 }
  while (1)
  {
LABEL_2:
    uint64_t v14 = (char *)*((void *)this + 1);
    if ((unint64_t)v14 < *((void *)this + 2) && (*v14 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v14;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v14 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v16 = TagFallback & 7;
        if (v16 != 2) {
          goto LABEL_42;
        }
        int v17 = *(_DWORD *)(a1 + 28);
        uint64_t v18 = *(int *)(a1 + 24);
        if ((int)v18 >= v17) {
          goto LABEL_11;
        }
        break;
      case 2u:
        int v16 = TagFallback & 7;
        if (v16 != 2) {
          goto LABEL_42;
        }
        *(_DWORD *)(a1 + 92) |= 4u;
        uint64_t v31 = *(void *)(a1 + 64);
        if (!v31) {
          goto LABEL_29;
        }
        goto LABEL_30;
      case 3u:
        int v16 = TagFallback & 7;
        if (v16 != 2) {
          goto LABEL_42;
        }
        *(_DWORD *)(a1 + 92) |= 8u;
        if (*(_UNKNOWN **)(a1 + 72) != &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          goto LABEL_35;
        }
        goto LABEL_56;
      case 4u:
        int v16 = TagFallback & 7;
        if (v16 != 2) {
          goto LABEL_42;
        }
        int v34 = *(_DWORD *)(a1 + 52);
        uint64_t v35 = *(int *)(a1 + 48);
        if ((int)v35 < v34) {
          goto LABEL_39;
        }
        goto LABEL_64;
      case 0x10u:
        int v16 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_42;
        }
        uint64_t v39 = (char *)*((void *)this + 1);
        unint64_t v38 = *((void *)this + 2);
        *(void *)uint64_t v61 = 0;
        if ((unint64_t)v39 >= v38) {
          goto LABEL_85;
        }
        goto LABEL_82;
      default:
        int v16 = TagFallback & 7;
LABEL_42:
        if (v16 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v8, a4) & 1) == 0)return 0; {
        continue;
        }
    }
    while (1)
    {
      uint64_t v19 = *(void *)(a1 + 16);
      *(_DWORD *)(a1 + 24) = v18 + 1;
      uint64_t v20 = *(void *)(v19 + 8 * v18);
      v61[0] = 0;
      uint64_t v21 = (char *)*((void *)this + 1);
      if ((unint64_t)v21 >= *((void *)this + 2) || *v21 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v61))return 0; {
      }
        }
      else
      {
        v61[0] = *v21;
        *((void *)this + 1) = v21 + 1;
      }
      int v22 = *((_DWORD *)this + 14);
      int v23 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v22 + 1;
      if (v22 >= v23) {
        return 0;
      }
      int v24 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v61[0]);
      if (!sub_10005D58C(v20, this, v25, v26) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v24);
      int v27 = *((_DWORD *)this + 14);
      _VF = __OFSUB__(v27, 1);
      int v28 = v27 - 1;
      if (v28 < 0 == _VF) {
        *((_DWORD *)this + 14) = v28;
      }
      int v29 = (unsigned __int8 *)*((void *)this + 1);
      if ((unint64_t)v29 >= *((void *)this + 2)) {
        goto LABEL_2;
      }
      int v30 = *v29;
      if (v30 != 10) {
        break;
      }
      *((void *)this + 1) = v29 + 1;
      int v17 = *(_DWORD *)(a1 + 28);
      uint64_t v18 = *(int *)(a1 + 24);
      if ((int)v18 >= v17)
      {
LABEL_11:
        if (v17 == *(_DWORD *)(a1 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v17 + 1);
          int v17 = *(_DWORD *)(a1 + 28);
        }
        *(_DWORD *)(a1 + 28) = v17 + 1;
        operator new();
      }
    }
    if (v30 == 18)
    {
      *((void *)this + 1) = v29 + 1;
      *(_DWORD *)(a1 + 92) |= 4u;
      uint64_t v31 = *(void *)(a1 + 64);
      if (!v31) {
LABEL_29:
      }
        operator new();
LABEL_30:
      v61[0] = 0;
      uint64_t v32 = (char *)*((void *)this + 1);
      if ((unint64_t)v32 >= *((void *)this + 2) || *v32 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v61))return 0; {
      }
        }
      else
      {
        v61[0] = *v32;
        *((void *)this + 1) = v32 + 1;
      }
      int v40 = *((_DWORD *)this + 14);
      int v41 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v40 + 1;
      if (v40 >= v41) {
        return 0;
      }
      int v42 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v61[0]);
      if (!sub_10005DB0C(v31, this, v43, v44) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v42);
      int v45 = *((_DWORD *)this + 14);
      _VF = __OFSUB__(v45, 1);
      int v46 = v45 - 1;
      if (v46 < 0 == _VF) {
        *((_DWORD *)this + 14) = v46;
      }
      int v47 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v47 < *((void *)this + 2) && *v47 == 26)
      {
        *((void *)this + 1) = v47 + 1;
        *(_DWORD *)(a1 + 92) |= 8u;
        if (*(_UNKNOWN **)(a1 + 72) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
LABEL_56:
        }
          operator new();
LABEL_35:
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        uint64_t v48 = (unsigned __int8 *)*((void *)this + 1);
        if ((unint64_t)v48 < *((void *)this + 2) && *v48 == 34)
        {
          do
          {
            *((void *)this + 1) = v48 + 1;
            int v34 = *(_DWORD *)(a1 + 52);
            uint64_t v35 = *(int *)(a1 + 48);
            if ((int)v35 >= v34)
            {
LABEL_64:
              if (v34 == *(_DWORD *)(a1 + 56))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v34 + 1);
                int v34 = *(_DWORD *)(a1 + 52);
              }
              *(_DWORD *)(a1 + 52) = v34 + 1;
              operator new();
            }
LABEL_39:
            uint64_t v36 = *(void *)(a1 + 40);
            *(_DWORD *)(a1 + 48) = v35 + 1;
            uint64_t v37 = *(_DWORD **)(v36 + 8 * v35);
            v61[0] = 0;
            unint64_t v49 = (char *)*((void *)this + 1);
            if ((unint64_t)v49 >= *((void *)this + 2) || *v49 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v61))return 0; {
            }
              }
            else
            {
              v61[0] = *v49;
              *((void *)this + 1) = v49 + 1;
            }
            int v50 = *((_DWORD *)this + 14);
            int v51 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v50 + 1;
            if (v50 >= v51) {
              return 0;
            }
            int v52 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v61[0]);
            if (!sub_10005D7CC(v37, this, v53, v54) || !*((unsigned char *)this + 36)) {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v52);
            int v55 = *((_DWORD *)this + 14);
            _VF = __OFSUB__(v55, 1);
            int v56 = v55 - 1;
            if (v56 < 0 == _VF) {
              *((_DWORD *)this + 14) = v56;
            }
            uint64_t v48 = (unsigned __int8 *)*((void *)this + 1);
            unint64_t v38 = *((void *)this + 2);
          }
          while ((unint64_t)v48 < v38 && *v48 == 34);
          if ((int)v38 - (int)v48 < 2 || *v48 != 128 || v48[1] != 1) {
            continue;
          }
          uint64_t v39 = (char *)(v48 + 2);
          *((void *)this + 1) = v39;
          *(void *)uint64_t v61 = 0;
          if ((unint64_t)v39 < v38)
          {
LABEL_82:
            int v57 = *v39;
            if ((v57 & 0x80000000) == 0)
            {
              int v58 = v39 + 1;
              *((void *)this + 1) = v58;
              *(void *)(a1 + 80) = v57;
              *(_DWORD *)(a1 + 92) |= 0x10u;
              if (v58 != (char *)v38) {
                continue;
              }
LABEL_87:
              if (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1;
                *((unsigned char *)this + 36) = 1;
                return result;
              }
              continue;
            }
          }
LABEL_85:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, (unint64_t *)v61);
          if (!result) {
            return result;
          }
          uint64_t v60 = *((void *)this + 1);
          uint64_t v59 = *((void *)this + 2);
          *(void *)(a1 + 80) = *(void *)v61;
          *(_DWORD *)(a1 + 92) |= 0x10u;
          if (v60 != v59) {
            continue;
          }
          goto LABEL_87;
        }
      }
    }
  }
}

void sub_10005D518()
{
}

void sub_10005D53C()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10005D564()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_10005D58C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t v6 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      unsigned int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v7;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v7 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 == 1) {
        break;
      }
      if (TagFallback >> 3 == 2)
      {
        int v9 = TagFallback & 7;
        if (v9 == 2)
        {
          *(_DWORD *)(a1 + 32) |= 2u;
          if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            goto LABEL_11;
          }
          goto LABEL_12;
        }
      }
      else
      {
        int v9 = TagFallback & 7;
      }
LABEL_23:
      if (v9 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v6, a4) & 1) == 0)return 0; {
    }
      }
    int v9 = TagFallback & 7;
    if ((TagFallback & 7) != 0) {
      goto LABEL_23;
    }
    unsigned int v14 = 0;
    int v11 = (char *)*((void *)this + 1);
    if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
    {
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v14);
      if (!result) {
        return result;
      }
      signed int v12 = v14;
      if (v14 - 1 <= 1)
      {
LABEL_21:
        *(_DWORD *)(a1 + 32) |= 1u;
        *(_DWORD *)(a1 + 24) = v12;
        goto LABEL_29;
      }
    }
    else
    {
      signed int v12 = *v11;
      *((void *)this + 1) = v11 + 1;
      if ((v12 - 1) <= 1) {
        goto LABEL_21;
      }
    }
    wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v6, 1, v12);
LABEL_29:
    int v13 = (unsigned char *)*((void *)this + 1);
    if ((unint64_t)v13 < *((void *)this + 2) && *v13 == 18)
    {
      *((void *)this + 1) = v13 + 1;
      *(_DWORD *)(a1 + 32) |= 2u;
      if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
LABEL_11:
      }
        operator new();
LABEL_12:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
      if (!result) {
        return result;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_10005D7CC(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  while (2)
  {
    unsigned int v7 = (char *)*((void *)this + 1);
    if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if (v9 != 5) {
          goto LABEL_25;
        }
        unsigned int v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0) {
          return 0;
        }
        a1[4] = v20;
        a1[9] |= 1u;
        unsigned int v10 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 != 21) {
          continue;
        }
        *((void *)this + 1) = v10 + 1;
        goto LABEL_15;
      case 2u:
        int v9 = TagFallback & 7;
        if (v9 != 5) {
          goto LABEL_25;
        }
LABEL_15:
        unsigned int v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0) {
          return 0;
        }
        a1[5] = v20;
        a1[9] |= 2u;
        signed int v12 = (unsigned char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((unint64_t)v12 >= v11 || *v12 != 24) {
          continue;
        }
        int v13 = v12 + 1;
        *((void *)this + 1) = v13;
LABEL_21:
        unsigned int v20 = 0;
        if ((unint64_t)v13 >= v11 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
          if (!result) {
            return result;
          }
          unsigned int v14 = v20;
          uint64_t v15 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
        }
        else
        {
          unsigned int v14 = *v13;
          uint64_t v15 = v13 + 1;
          *((void *)this + 1) = v15;
        }
        a1[6] = -(v14 & 1) ^ (v14 >> 1);
        a1[9] |= 4u;
        if ((unint64_t)v15 >= v11 || *v15 != 32) {
          continue;
        }
        int v16 = v15 + 1;
        *((void *)this + 1) = v16;
        unsigned int v20 = 0;
        if ((unint64_t)v16 >= v11) {
          goto LABEL_37;
        }
LABEL_35:
        if (*v16 < 0)
        {
LABEL_37:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
          if (!result) {
            return result;
          }
          unsigned int v18 = v20;
          uint64_t v19 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
        }
        else
        {
          unsigned int v18 = *v16;
          uint64_t v19 = (unsigned __int8 *)(v16 + 1);
          *((void *)this + 1) = v19;
        }
        a1[7] = -(v18 & 1) ^ (v18 >> 1);
        a1[9] |= 8u;
        if (v19 != (unsigned __int8 *)v11 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        break;
      case 3u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_25;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_21;
      case 4u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_25;
        }
        int v16 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        unsigned int v20 = 0;
        if ((unint64_t)v16 >= v11) {
          goto LABEL_37;
        }
        goto LABEL_35;
      default:
        int v9 = TagFallback & 7;
LABEL_25:
        if (v9 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v6, a4))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_10005DA98(uint64_t a1)
{
  *(void *)a1 = off_100467BC8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_10005DAF8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10005DB0C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  do
  {
    do
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            unsigned int v7 = (char *)*((void *)this + 1);
            if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
            {
              unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
              *((_DWORD *)this + 8) = TagFallback;
              if (!TagFallback) {
                return 1;
              }
            }
            else
            {
              unint64_t TagFallback = *v7;
              *((_DWORD *)this + 8) = TagFallback;
              *((void *)this + 1) = v7 + 1;
              if (!TagFallback) {
                return 1;
              }
            }
            unsigned int v9 = TagFallback >> 3;
            if (TagFallback >> 3 != 1) {
              break;
            }
            int v10 = TagFallback & 7;
            if (v10 != 2) {
              goto LABEL_31;
            }
            *(_DWORD *)(a1 + 40) |= 1u;
            uint64_t v13 = *(void *)(a1 + 16);
            if (!v13) {
              operator new();
            }
            unsigned int v29 = 0;
            unsigned int v14 = (char *)*((void *)this + 1);
            if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29))return 0; {
            }
              }
            else
            {
              unsigned int v29 = *v14;
              *((void *)this + 1) = v14 + 1;
            }
            int v19 = *((_DWORD *)this + 14);
            int v20 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v19 + 1;
            if (v19 >= v20) {
              return 0;
            }
            int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29);
            if (!sub_10005F290(v13, this, v22, v23) || !*((unsigned char *)this + 36)) {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
            int v24 = *((_DWORD *)this + 14);
            BOOL v25 = __OFSUB__(v24, 1);
            int v26 = v24 - 1;
            if (v26 < 0 == v25) {
              *((_DWORD *)this + 14) = v26;
            }
            int v27 = (unsigned char *)*((void *)this + 1);
            if ((unint64_t)v27 < *((void *)this + 2) && *v27 == 18)
            {
              *((void *)this + 1) = v27 + 1;
              *(_DWORD *)(a1 + 40) |= 2u;
              if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
LABEL_21:
              }
                operator new();
              goto LABEL_22;
            }
          }
          if (v9 != 2) {
            break;
          }
          int v10 = TagFallback & 7;
          if (v10 != 2) {
            goto LABEL_31;
          }
          *(_DWORD *)(a1 + 40) |= 2u;
          if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            goto LABEL_21;
          }
LABEL_22:
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
          if (!result) {
            return result;
          }
          int v17 = (unsigned char *)*((void *)this + 1);
          unint64_t v16 = *((void *)this + 2);
          if ((unint64_t)v17 < v16 && *v17 == 24)
          {
            signed int v12 = v17 + 1;
            *((void *)this + 1) = v12;
            unsigned int v28 = 0;
            if ((unint64_t)v12 >= v16) {
              goto LABEL_34;
            }
LABEL_26:
            if ((char)*v12 < 0) {
              goto LABEL_34;
            }
            signed int v18 = *v12;
            *((void *)this + 1) = v12 + 1;
            if ((v18 - 1) > 1) {
              goto LABEL_36;
            }
LABEL_28:
            *(_DWORD *)(a1 + 40) |= 4u;
            *(_DWORD *)(a1 + 32) = v18;
            if (*((void *)this + 1) == *((void *)this + 2)) {
              goto LABEL_37;
            }
          }
        }
        if (v9 != 3)
        {
          int v10 = TagFallback & 7;
          goto LABEL_31;
        }
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) == 0) {
          break;
        }
LABEL_31:
        if (v10 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v6, a4) & 1) == 0)return 0; {
      }
        }
      signed int v12 = (unsigned __int8 *)*((void *)this + 1);
      unint64_t v11 = *((void *)this + 2);
      unsigned int v28 = 0;
      if ((unint64_t)v12 < v11) {
        goto LABEL_26;
      }
LABEL_34:
      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28);
      if (!result) {
        return result;
      }
      signed int v18 = v28;
      if (v28 - 1 <= 1) {
        goto LABEL_28;
      }
LABEL_36:
      wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v6, 3, v18);
    }
    while (*((void *)this + 1) != *((void *)this + 2));
LABEL_37:
    ;
  }
  while (!*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

void sub_10005DE60()
{
}

uint64_t sub_10005DE84(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 80);
  unsigned int v7 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  unsigned int v8 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 112);
  while (1)
  {
LABEL_2:
    unsigned int v9 = (char *)*((void *)this + 1);
    if ((unint64_t)v9 < *((void *)this + 2) && (*v9 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v9;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v9 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_86;
        }
        *(_DWORD *)(a1 + 200) |= 1u;
        if (*(_UNKNOWN **)(a1 + 16) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        unsigned int v14 = (unsigned char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        if ((unint64_t)v14 >= v13 || *v14 != 16) {
          continue;
        }
        uint64_t v15 = v14 + 1;
        *((void *)this + 1) = v15;
LABEL_24:
        v142[0] = 0;
        if ((unint64_t)v15 >= v13 || (int v20 = *v15, v20 < 0))
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v142);
          if (!result) {
            return result;
          }
          int v21 = (unsigned char *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
          *(_DWORD *)(a1 + 56) = v142[0];
          *(_DWORD *)(a1 + 200) |= 2u;
          if ((unint64_t)v21 >= v13) {
            continue;
          }
        }
        else
        {
          int v21 = v15 + 1;
          *((void *)this + 1) = v21;
          *(_DWORD *)(a1 + 56) = v20;
          *(_DWORD *)(a1 + 200) |= 2u;
          if ((unint64_t)v21 >= v13) {
            continue;
          }
        }
        if (*v21 != 24) {
          continue;
        }
        uint64_t v22 = v21 + 1;
        *((void *)this + 1) = v22;
        *(void *)BOOL v142 = 0;
        if ((unint64_t)v22 >= v13) {
          goto LABEL_96;
        }
LABEL_93:
        int v47 = *v22;
        if (v47 < 0)
        {
LABEL_96:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, (unint64_t *)v142);
          if (!result) {
            return result;
          }
          uint64_t v48 = (unsigned char *)*((void *)this + 1);
          unint64_t v50 = *((void *)this + 2);
          *(void *)(a1 + 24) = *(void *)v142;
          int v49 = *(_DWORD *)(a1 + 200) | 4;
          *(_DWORD *)(a1 + 200) = v49;
          if ((unint64_t)v48 >= v50) {
            continue;
          }
        }
        else
        {
          uint64_t v48 = v22 + 1;
          *((void *)this + 1) = v48;
          *(void *)(a1 + 24) = v47;
          int v49 = *(_DWORD *)(a1 + 200) | 4;
          *(_DWORD *)(a1 + 200) = v49;
          if ((unint64_t)v48 >= v13) {
            continue;
          }
        }
        if (*v48 != 34) {
          continue;
        }
        *((void *)this + 1) = v48 + 1;
        *(_DWORD *)(a1 + 200) = v49 | 8;
        uint64_t v23 = *(void *)(a1 + 32);
        if (!v23) {
LABEL_100:
        }
          operator new();
LABEL_101:
        v142[0] = 0;
        int v51 = (char *)*((void *)this + 1);
        if ((unint64_t)v51 >= *((void *)this + 2) || *v51 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v142))return 0; {
        }
          }
        else
        {
          v142[0] = *v51;
          *((void *)this + 1) = v51 + 1;
        }
        int v52 = *((_DWORD *)this + 14);
        int v53 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v52 + 1;
        if (v52 >= v53) {
          return 0;
        }
        int v54 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v142[0]);
        if (!sub_10006058C(v23, this, v55, v56) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v54);
        int v57 = *((_DWORD *)this + 14);
        BOOL v58 = __OFSUB__(v57, 1);
        int v59 = v57 - 1;
        if (v59 < 0 == v58) {
          *((_DWORD *)this + 14) = v59;
        }
        uint64_t v60 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v60 >= *((void *)this + 2) || *v60 != 42) {
          continue;
        }
        *((void *)this + 1) = v60 + 1;
        *(_DWORD *)(a1 + 200) |= 0x10u;
        uint64_t v24 = *(void *)(a1 + 40);
        if (!v24) {
LABEL_113:
        }
          operator new();
LABEL_36:
        v142[0] = 0;
        BOOL v25 = (char *)*((void *)this + 1);
        if ((unint64_t)v25 >= *((void *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v142))return 0; {
        }
          }
        else
        {
          v142[0] = *v25;
          *((void *)this + 1) = v25 + 1;
        }
        int v61 = *((_DWORD *)this + 14);
        int v62 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v61 + 1;
        if (v61 >= v62) {
          return 0;
        }
        int v63 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v142[0]);
        if (!sub_100060214(v24, this, v64, v65) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v63);
        int v66 = *((_DWORD *)this + 14);
        BOOL v58 = __OFSUB__(v66, 1);
        int v67 = v66 - 1;
        if (v67 < 0 == v58) {
          *((_DWORD *)this + 14) = v67;
        }
        int v68 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v68 >= *((void *)this + 2) || *v68 != 50) {
          continue;
        }
        *((void *)this + 1) = v68 + 1;
        *(_DWORD *)(a1 + 200) |= 0x20u;
        uint64_t v26 = *(void *)(a1 + 48);
        if (!v26) {
LABEL_125:
        }
          operator new();
LABEL_40:
        v142[0] = 0;
        int v27 = (char *)*((void *)this + 1);
        if ((unint64_t)v27 >= *((void *)this + 2) || *v27 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v142))return 0; {
        }
          }
        else
        {
          v142[0] = *v27;
          *((void *)this + 1) = v27 + 1;
        }
        int v69 = *((_DWORD *)this + 14);
        int v70 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v69 + 1;
        if (v69 >= v70) {
          return 0;
        }
        int v71 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v142[0]);
        if (!sub_10005F290(v26, this, v72, v73) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v71);
        int v74 = *((_DWORD *)this + 14);
        BOOL v58 = __OFSUB__(v74, 1);
        int v75 = v74 - 1;
        if (v75 < 0 == v58) {
          *((_DWORD *)this + 14) = v75;
        }
        unint64_t v76 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v76 >= *((void *)this + 2) || *v76 != 58) {
          continue;
        }
        *((void *)this + 1) = v76 + 1;
        *(_DWORD *)(a1 + 200) |= 0x40u;
        uint64_t v28 = *(void *)(a1 + 64);
        if (!v28) {
LABEL_137:
        }
          operator new();
LABEL_44:
        v142[0] = 0;
        unsigned int v29 = (char *)*((void *)this + 1);
        if ((unint64_t)v29 >= *((void *)this + 2) || *v29 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v142))return 0; {
        }
          }
        else
        {
          v142[0] = *v29;
          *((void *)this + 1) = v29 + 1;
        }
        int v77 = *((_DWORD *)this + 14);
        int v78 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v77 + 1;
        if (v77 >= v78) {
          return 0;
        }
        int v79 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v142[0]);
        if (!sub_10005FFA0(v28, this, v80, v81) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v79);
        int v82 = *((_DWORD *)this + 14);
        BOOL v58 = __OFSUB__(v82, 1);
        int v83 = v82 - 1;
        if (v83 < 0 == v58) {
          *((_DWORD *)this + 14) = v83;
        }
        uint64_t v84 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v84 >= *((void *)this + 2) || *v84 != 66) {
          continue;
        }
        do
        {
          *((void *)this + 1) = v84 + 1;
          int v30 = *(_DWORD *)(a1 + 92);
          uint64_t v31 = *(int *)(a1 + 88);
          if ((int)v31 >= v30)
          {
LABEL_154:
            if (v30 == *(_DWORD *)(a1 + 96))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v30 + 1);
              int v30 = *(_DWORD *)(a1 + 92);
            }
            *(_DWORD *)(a1 + 92) = v30 + 1;
            operator new();
          }
LABEL_48:
          uint64_t v32 = *(void *)(a1 + 80);
          *(_DWORD *)(a1 + 88) = v31 + 1;
          uint64_t v33 = *(void *)(v32 + 8 * v31);
          v142[0] = 0;
          double v87 = (char *)*((void *)this + 1);
          if ((unint64_t)v87 >= *((void *)this + 2) || *v87 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v142))return 0; {
          }
            }
          else
          {
            v142[0] = *v87;
            *((void *)this + 1) = v87 + 1;
          }
          int v88 = *((_DWORD *)this + 14);
          int v89 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v88 + 1;
          if (v88 >= v89) {
            return 0;
          }
          int v90 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v142[0]);
          if (!sub_10005FB50(v33, this, v91, v92) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v90);
          int v93 = *((_DWORD *)this + 14);
          BOOL v58 = __OFSUB__(v93, 1);
          int v94 = v93 - 1;
          if (v94 < 0 == v58) {
            *((_DWORD *)this + 14) = v94;
          }
          uint64_t v84 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v84 >= *((void *)this + 2)) {
            goto LABEL_2;
          }
          int v95 = *v84;
        }
        while (v95 == 66);
        if (v95 != 73) {
          continue;
        }
        *((void *)this + 1) = v84 + 1;
        *(void *)BOOL v142 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v142) & 1) == 0)return 0; {
LABEL_170:
        }
        *(void *)(a1 + 104) = *(void *)v142;
        int v96 = *(_DWORD *)(a1 + 200) | 0x200;
        *(_DWORD *)(a1 + 200) = v96;
        unint64_t v97 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v97 >= *((void *)this + 2) || *v97 != 82) {
          continue;
        }
        *((void *)this + 1) = v97 + 1;
        *(_DWORD *)(a1 + 200) = v96 | 0x80;
        uint64_t v34 = *(void *)(a1 + 72);
        if (!v34) {
LABEL_173:
        }
          operator new();
LABEL_174:
        v142[0] = 0;
        unint64_t v98 = (char *)*((void *)this + 1);
        if ((unint64_t)v98 >= *((void *)this + 2) || *v98 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v142))return 0; {
        }
          }
        else
        {
          v142[0] = *v98;
          *((void *)this + 1) = v98 + 1;
        }
        int v99 = *((_DWORD *)this + 14);
        int v100 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v99 + 1;
        if (v99 >= v100) {
          return 0;
        }
        int v101 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v142[0]);
        if (!sub_10005FFA0(v34, this, v102, v103) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v101);
        int v104 = *((_DWORD *)this + 14);
        BOOL v58 = __OFSUB__(v104, 1);
        int v105 = v104 - 1;
        if (v105 < 0 == v58) {
          *((_DWORD *)this + 14) = v105;
        }
        long long v106 = (unsigned char *)*((void *)this + 1);
        unint64_t v35 = *((void *)this + 2);
        if ((unint64_t)v106 >= v35 || *v106 != 88) {
          continue;
        }
        uint64_t v36 = v106 + 1;
        *((void *)this + 1) = v36;
LABEL_186:
        v142[0] = 0;
        if ((unint64_t)v36 >= v35 || *v36 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v142);
          if (!result) {
            return result;
          }
          signed int v107 = v142[0];
          if (v142[0] - 1 < 5)
          {
LABEL_193:
            *(_DWORD *)(a1 + 200) |= 0x400u;
            *(_DWORD *)(a1 + 60) = v107;
            int v108 = (unsigned char *)*((void *)this + 1);
            unint64_t v37 = *((void *)this + 2);
            if ((unint64_t)v108 >= v37) {
              continue;
            }
            goto LABEL_194;
          }
        }
        else
        {
          signed int v107 = *v36;
          *((void *)this + 1) = v36 + 1;
          if ((v107 - 1) < 5) {
            goto LABEL_193;
          }
        }
        if (v107 == 101) {
          goto LABEL_193;
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v7, 11, v107);
        int v108 = (unsigned char *)*((void *)this + 1);
        unint64_t v37 = *((void *)this + 2);
        if ((unint64_t)v108 >= v37) {
          continue;
        }
LABEL_194:
        if (*v108 != 96) {
          continue;
        }
        unint64_t v38 = v108 + 1;
        *((void *)this + 1) = v38;
LABEL_196:
        v142[0] = 0;
        if ((unint64_t)v38 >= v37 || *v38 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v142);
          if (!result) {
            return result;
          }
          signed int v109 = v142[0];
          if (v142[0] - 1 <= 1)
          {
LABEL_199:
            *(_DWORD *)(a1 + 200) |= 0x800u;
            *(_DWORD *)(a1 + 136) = v109;
            goto LABEL_203;
          }
        }
        else
        {
          signed int v109 = *v38;
          *((void *)this + 1) = v38 + 1;
          if ((v109 - 1) <= 1) {
            goto LABEL_199;
          }
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v7, 12, v109);
LABEL_203:
        unsigned int v110 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v110 >= *((void *)this + 2) || *v110 != 106) {
          continue;
        }
        do
        {
          *((void *)this + 1) = v110 + 1;
          int v39 = *(_DWORD *)(a1 + 124);
          uint64_t v40 = *(int *)(a1 + 120);
          if ((int)v40 >= v39)
          {
LABEL_209:
            if (v39 == *(_DWORD *)(a1 + 128))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v39 + 1);
              int v39 = *(_DWORD *)(a1 + 124);
            }
            *(_DWORD *)(a1 + 124) = v39 + 1;
            operator new();
          }
LABEL_61:
          uint64_t v41 = *(void *)(a1 + 112);
          *(_DWORD *)(a1 + 120) = v40 + 1;
          uint64_t v42 = *(void *)(v41 + 8 * v40);
          v142[0] = 0;
          double v111 = (char *)*((void *)this + 1);
          if ((unint64_t)v111 >= *((void *)this + 2) || *v111 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v142))return 0; {
          }
            }
          else
          {
            v142[0] = *v111;
            *((void *)this + 1) = v111 + 1;
          }
          int v112 = *((_DWORD *)this + 14);
          int v113 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v112 + 1;
          if (v112 >= v113) {
            return 0;
          }
          int v114 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v142[0]);
          if (!sub_100060738(v42, this, v115, v116) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v114);
          int v117 = *((_DWORD *)this + 14);
          BOOL v58 = __OFSUB__(v117, 1);
          int v118 = v117 - 1;
          if (v118 < 0 == v58) {
            *((_DWORD *)this + 14) = v118;
          }
          unsigned int v110 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v110 >= *((void *)this + 2)) {
            goto LABEL_2;
          }
          int v119 = *v110;
        }
        while (v119 == 106);
        if (v119 != 113) {
          continue;
        }
        *((void *)this + 1) = v110 + 1;
        *(void *)BOOL v142 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v142) & 1) == 0)return 0; {
LABEL_225:
        }
        *(void *)(a1 + 144) = *(void *)v142;
        *(_DWORD *)(a1 + 200) |= 0x2000u;
        int v120 = (unsigned char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        if ((unint64_t)v120 >= v16 || *v120 != 120) {
          continue;
        }
        int v17 = v120 + 1;
        *((void *)this + 1) = v17;
LABEL_228:
        v142[0] = 0;
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v142);
          if (!result) {
            return result;
          }
          signed int v121 = v142[0];
          if (v142[0] - 1 <= 1)
          {
LABEL_231:
            *(_DWORD *)(a1 + 200) |= 0x4000u;
            *(_DWORD *)(a1 + 140) = v121;
            goto LABEL_235;
          }
        }
        else
        {
          signed int v121 = *v17;
          *((void *)this + 1) = v17 + 1;
          if ((v121 - 1) <= 1) {
            goto LABEL_231;
          }
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v7, 15, v121);
LABEL_235:
        long long v122 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v122 < 2 || *v122 != 129 || v122[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v122 + 2;
        *(void *)BOOL v142 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v142) & 1) == 0)return 0; {
LABEL_239:
        }
        *(void *)(a1 + 152) = *(void *)v142;
        int v123 = *(_DWORD *)(a1 + 200) | 0x8000;
        *(_DWORD *)(a1 + 200) = v123;
        int v124 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v124 < 2 || *v124 != 138 || v124[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v124 + 2;
        *(_DWORD *)(a1 + 200) = v123 | 0x10000;
        uint64_t v18 = *(void *)(a1 + 160);
        if (!v18) {
LABEL_243:
        }
          operator new();
LABEL_19:
        v142[0] = 0;
        int v19 = (char *)*((void *)this + 1);
        if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v142))return 0; {
        }
          }
        else
        {
          v142[0] = *v19;
          *((void *)this + 1) = v19 + 1;
        }
        int v125 = *((_DWORD *)this + 14);
        int v126 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v125 + 1;
        if (v125 >= v126) {
          return 0;
        }
        int v127 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v142[0]);
        if (!sub_100320C84(v18, this, v128, v129) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v127);
        int v130 = *((_DWORD *)this + 14);
        BOOL v58 = __OFSUB__(v130, 1);
        int v131 = v130 - 1;
        if (v131 < 0 == v58) {
          *((_DWORD *)this + 14) = v131;
        }
        uint64_t v132 = (unsigned __int8 *)*((void *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v132 <= 1 || *v132 != 146 || v132[1] != 1) {
          continue;
        }
        *((void *)this + 1) = v132 + 2;
        *(_DWORD *)(a1 + 200) |= 0x20000u;
        uint64_t v43 = *(void *)(a1 + 168);
        if (!v43) {
LABEL_70:
        }
          operator new();
LABEL_255:
        v142[0] = 0;
        uint64_t v133 = (char *)*((void *)this + 1);
        if ((unint64_t)v133 >= *((void *)this + 2) || *v133 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v142))return 0; {
        }
          }
        else
        {
          v142[0] = *v133;
          *((void *)this + 1) = v133 + 1;
        }
        int v134 = *((_DWORD *)this + 14);
        int v135 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v134 + 1;
        if (v134 >= v135) {
          return 0;
        }
        int v136 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v142[0]);
        if (!sub_100320C84(v43, this, v137, v138) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v136);
        int v139 = *((_DWORD *)this + 14);
        BOOL v58 = __OFSUB__(v139, 1);
        int v140 = v139 - 1;
        if (v140 < 0 == v58) {
          *((_DWORD *)this + 14) = v140;
        }
        long double v141 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v44 = *((void *)this + 2);
        if ((int)v44 - (int)v141 <= 1 || *v141 != 152 || v141[1] != 1) {
          continue;
        }
        int v45 = v141 + 2;
        *((void *)this + 1) = v45;
        v142[0] = 0;
        if ((unint64_t)v45 >= v44) {
          goto LABEL_151;
        }
LABEL_268:
        if ((char)*v45 < 0)
        {
LABEL_151:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v142);
          if (!result) {
            return result;
          }
          unsigned int v85 = v142[0];
          uint64_t v86 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v44 = *((void *)this + 2);
        }
        else
        {
          unsigned int v85 = *v45;
          uint64_t v86 = v45 + 1;
          *((void *)this + 1) = v86;
        }
        *(unsigned char *)(a1 + 192) = v85 != 0;
        *(_DWORD *)(a1 + 200) |= 0x40000u;
        if ((int)v44 - (int)v86 >= 2 && *v86 == 161 && v86[1] == 1)
        {
          *((void *)this + 1) = v86 + 2;
          *(void *)BOOL v142 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v142) & 1) == 0)return 0; {
LABEL_76:
          }
          *(void *)(a1 + 176) = *(void *)v142;
          *(_DWORD *)(a1 + 200) |= 0x80000u;
          int v46 = (unsigned __int8 *)*((void *)this + 1);
          if (*((_DWORD *)this + 4) - (int)v46 >= 2 && *v46 == 169 && v46[1] == 1)
          {
            *((void *)this + 1) = v46 + 2;
LABEL_81:
            *(void *)BOOL v142 = 0;
            if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v142) & 1) == 0)return 0; {
            *(void *)(a1 + 184) = *(void *)v142;
            }
            *(_DWORD *)(a1 + 200) |= 0x100000u;
            if (*((void *)this + 1) == *((void *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)this + 36) = 1;
              return result;
            }
          }
        }
        break;
      case 2u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_86;
        }
        uint64_t v15 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_24;
      case 3u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_86;
        }
        uint64_t v22 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        *(void *)BOOL v142 = 0;
        if ((unint64_t)v22 >= v13) {
          goto LABEL_96;
        }
        goto LABEL_93;
      case 4u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_86;
        }
        *(_DWORD *)(a1 + 200) |= 8u;
        uint64_t v23 = *(void *)(a1 + 32);
        if (!v23) {
          goto LABEL_100;
        }
        goto LABEL_101;
      case 5u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_86;
        }
        *(_DWORD *)(a1 + 200) |= 0x10u;
        uint64_t v24 = *(void *)(a1 + 40);
        if (v24) {
          goto LABEL_36;
        }
        goto LABEL_113;
      case 6u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_86;
        }
        *(_DWORD *)(a1 + 200) |= 0x20u;
        uint64_t v26 = *(void *)(a1 + 48);
        if (v26) {
          goto LABEL_40;
        }
        goto LABEL_125;
      case 7u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_86;
        }
        *(_DWORD *)(a1 + 200) |= 0x40u;
        uint64_t v28 = *(void *)(a1 + 64);
        if (v28) {
          goto LABEL_44;
        }
        goto LABEL_137;
      case 8u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_86;
        }
        int v30 = *(_DWORD *)(a1 + 92);
        uint64_t v31 = *(int *)(a1 + 88);
        if ((int)v31 < v30) {
          goto LABEL_48;
        }
        goto LABEL_154;
      case 9u:
        int v11 = TagFallback & 7;
        if (v11 != 1) {
          goto LABEL_86;
        }
        *(void *)BOOL v142 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v142) & 1) == 0)return 0; {
        goto LABEL_170;
        }
      case 0xAu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_86;
        }
        *(_DWORD *)(a1 + 200) |= 0x80u;
        uint64_t v34 = *(void *)(a1 + 72);
        if (!v34) {
          goto LABEL_173;
        }
        goto LABEL_174;
      case 0xBu:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_86;
        }
        uint64_t v36 = (char *)*((void *)this + 1);
        unint64_t v35 = *((void *)this + 2);
        goto LABEL_186;
      case 0xCu:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_86;
        }
        unint64_t v38 = (char *)*((void *)this + 1);
        unint64_t v37 = *((void *)this + 2);
        goto LABEL_196;
      case 0xDu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_86;
        }
        int v39 = *(_DWORD *)(a1 + 124);
        uint64_t v40 = *(int *)(a1 + 120);
        if ((int)v40 < v39) {
          goto LABEL_61;
        }
        goto LABEL_209;
      case 0xEu:
        int v11 = TagFallback & 7;
        if (v11 != 1) {
          goto LABEL_86;
        }
        *(void *)BOOL v142 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v142) & 1) == 0)return 0; {
        goto LABEL_225;
        }
      case 0xFu:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_86;
        }
        int v17 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_228;
      case 0x10u:
        int v11 = TagFallback & 7;
        if (v11 != 1) {
          goto LABEL_86;
        }
        *(void *)BOOL v142 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v142) & 1) == 0)return 0; {
        goto LABEL_239;
        }
      case 0x11u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_86;
        }
        *(_DWORD *)(a1 + 200) |= 0x10000u;
        uint64_t v18 = *(void *)(a1 + 160);
        if (v18) {
          goto LABEL_19;
        }
        goto LABEL_243;
      case 0x12u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_86;
        }
        *(_DWORD *)(a1 + 200) |= 0x20000u;
        uint64_t v43 = *(void *)(a1 + 168);
        if (!v43) {
          goto LABEL_70;
        }
        goto LABEL_255;
      case 0x13u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_86;
        }
        int v45 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v44 = *((void *)this + 2);
        v142[0] = 0;
        if ((unint64_t)v45 >= v44) {
          goto LABEL_151;
        }
        goto LABEL_268;
      case 0x14u:
        int v11 = TagFallback & 7;
        if (v11 != 1) {
          goto LABEL_86;
        }
        *(void *)BOOL v142 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v142))goto LABEL_76; {
        return 0;
        }
      case 0x15u:
        int v11 = TagFallback & 7;
        if (v11 == 1) {
          goto LABEL_81;
        }
        goto LABEL_86;
      default:
        int v11 = TagFallback & 7;
LABEL_86:
        if (v11 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v7, a4) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_10005F120()
{
}

void sub_10005F148()
{
}

void sub_10005F16C()
{
}

void sub_10005F190()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10005F1BC()
{
}

void sub_10005F1E0()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10005F208()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void *sub_10005F230(void *a1)
{
  *a1 = off_100467F00;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_10005F27C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10005F290(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = (unsigned int *)(a1 + 16);
  unsigned int v7 = (unsigned int *)(a1 + 20);
  unsigned int v8 = a1 + 8;
  while (1)
  {
    do
    {
      do
      {
        while (1)
        {
          while (1)
          {
            unsigned int v9 = (char *)*((void *)this + 1);
            if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
            {
              unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
              *((_DWORD *)this + 8) = TagFallback;
              if (!TagFallback) {
                return 1;
              }
            }
            else
            {
              unint64_t TagFallback = *v9;
              *((_DWORD *)this + 8) = TagFallback;
              *((void *)this + 1) = v9 + 1;
              if (!TagFallback) {
                return 1;
              }
            }
            unsigned int v11 = TagFallback >> 3;
            if (TagFallback >> 3 != 1) {
              break;
            }
            int v12 = TagFallback & 7;
            if ((TagFallback & 7) != 0) {
              goto LABEL_23;
            }
            unint64_t v16 = (char *)*((void *)this + 1);
            unint64_t v15 = *((void *)this + 2);
            if ((unint64_t)v16 >= v15 || *v16 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
              if (!result) {
                return result;
              }
              int v17 = (unsigned char *)*((void *)this + 1);
              unint64_t v15 = *((void *)this + 2);
              *(_DWORD *)(a1 + 36) |= 1u;
              if ((unint64_t)v17 < v15) {
                goto LABEL_28;
              }
            }
            else
            {
              unsigned int *v6 = *v16;
              int v17 = v16 + 1;
              *((void *)this + 1) = v17;
              *(_DWORD *)(a1 + 36) |= 1u;
              if ((unint64_t)v17 < v15)
              {
LABEL_28:
                if (*v17 == 16)
                {
                  uint64_t v18 = v17 + 1;
                  *((void *)this + 1) = v18;
                  if ((unint64_t)v18 >= v15) {
                    goto LABEL_33;
                  }
LABEL_30:
                  if ((char)*v18 < 0) {
                    goto LABEL_33;
                  }
                  unsigned int *v7 = *v18;
                  int v20 = v18 + 1;
                  *((void *)this + 1) = v20;
                  int v21 = *(_DWORD *)(a1 + 36) | 2;
                  *(_DWORD *)(a1 + 36) = v21;
                  if ((unint64_t)v20 < v15) {
                    goto LABEL_35;
                  }
                }
              }
            }
          }
          if (v11 == 2) {
            break;
          }
          if (v11 == 3)
          {
            int v12 = TagFallback & 7;
            if (v12 == 2)
            {
              *(_DWORD *)(a1 + 36) |= 4u;
              uint64_t v13 = *(void *)(a1 + 24);
              if (!v13) {
                goto LABEL_37;
              }
              goto LABEL_12;
            }
          }
          else
          {
            int v12 = TagFallback & 7;
          }
LABEL_23:
          if (v12 == 4) {
            return 1;
          }
          if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v8, a4) & 1) == 0)return 0; {
        }
          }
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_23;
        }
        uint64_t v18 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        if ((unint64_t)v18 < v15) {
          goto LABEL_30;
        }
LABEL_33:
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
        if (!result) {
          return result;
        }
        int v20 = (unsigned char *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        int v21 = *(_DWORD *)(a1 + 36) | 2;
        *(_DWORD *)(a1 + 36) = v21;
      }
      while ((unint64_t)v20 >= v22);
LABEL_35:
      ;
    }
    while (*v20 != 26);
    *((void *)this + 1) = v20 + 1;
    *(_DWORD *)(a1 + 36) = v21 | 4;
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
LABEL_37:
    }
      operator new();
LABEL_12:
    unsigned int v31 = 0;
    unsigned int v14 = (char *)*((void *)this + 1);
    if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v31)) {
        return 0;
      }
    }
    else
    {
      unsigned int v31 = *v14;
      *((void *)this + 1) = v14 + 1;
    }
    int v23 = *((_DWORD *)this + 14);
    int v24 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v23 + 1;
    if (v23 >= v24) {
      return 0;
    }
    int v25 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v31);
    if (!sub_10005F5F8(v13, this, v26, v27) || !*((unsigned char *)this + 36)) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v25);
    int v28 = *((_DWORD *)this + 14);
    BOOL v29 = __OFSUB__(v28, 1);
    int v30 = v28 - 1;
    if (v30 < 0 == v29) {
      *((_DWORD *)this + 14) = v30;
    }
    if (*((void *)this + 1) == *((void *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)this + 36) = 1;
      return result;
    }
  }
}

void sub_10005F5D0()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_10005F5F8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  while (2)
  {
    unsigned int v7 = (char *)*((void *)this + 1);
    if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_22;
        }
        *(_DWORD *)(a1 + 48) |= 1u;
        uint64_t v10 = *(void *)(a1 + 16);
        if (!v10) {
          operator new();
        }
        v27[0] = 0;
        unsigned int v11 = (char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v27))return 0; {
        }
          }
        else
        {
          v27[0] = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        int v14 = *((_DWORD *)this + 14);
        int v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15) {
          return 0;
        }
        int v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27[0]);
        if (!sub_10005F9A4(v10, this, v17, v18) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        int v19 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v19, 1);
        int v21 = v19 - 1;
        if (v21 < 0 == v20) {
          *((_DWORD *)this + 14) = v21;
        }
        unint64_t v22 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v22 >= *((void *)this + 2) || *v22 != 17) {
          continue;
        }
        *((void *)this + 1) = v22 + 1;
        *(void *)int v27 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v27) & 1) == 0)return 0; {
        goto LABEL_34;
        }
      case 2u:
        int v9 = TagFallback & 7;
        if (v9 != 1) {
          goto LABEL_22;
        }
        *(void *)int v27 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v27) & 1) == 0)return 0; {
LABEL_34:
        }
        *(void *)(a1 + 24) = *(void *)v27;
        *(_DWORD *)(a1 + 48) |= 2u;
        int v23 = (unsigned char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v23 >= v12 || *v23 != 24) {
          continue;
        }
        uint64_t v13 = v23 + 1;
        *((void *)this + 1) = v13;
        v27[0] = 0;
        if ((unint64_t)v13 >= v12) {
          goto LABEL_39;
        }
LABEL_37:
        if (*v13 < 0)
        {
LABEL_39:
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v27);
          if (!result) {
            return result;
          }
          unsigned int v24 = v27[0];
          int v25 = (unsigned char *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }
        else
        {
          unsigned int v24 = *v13;
          int v25 = v13 + 1;
          *((void *)this + 1) = v25;
        }
        *(unsigned char *)(a1 + 40) = v24 != 0;
        *(_DWORD *)(a1 + 48) |= 4u;
        if ((unint64_t)v25 >= v12 || *v25 != 33) {
          continue;
        }
        *((void *)this + 1) = v25 + 1;
LABEL_44:
        *(void *)int v27 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v27) & 1) == 0)return 0; {
        *(void *)(a1 + 32) = *(void *)v27;
        }
        *(_DWORD *)(a1 + 48) |= 8u;
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        v27[0] = 0;
        if ((unint64_t)v13 >= v12) {
          goto LABEL_39;
        }
        goto LABEL_37;
      case 4u:
        int v9 = TagFallback & 7;
        if (v9 != 1) {
          goto LABEL_22;
        }
        goto LABEL_44;
      default:
        int v9 = TagFallback & 7;
LABEL_22:
        if (v9 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v6, a4) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

void sub_10005F97C()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_10005F9A4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      unsigned int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v7;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v7 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 == 1) {
        break;
      }
      if (TagFallback >> 3 == 2)
      {
        int v9 = TagFallback & 7;
        if (v9 == 1)
        {
          unint64_t v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
            return 0;
          }
          goto LABEL_17;
        }
      }
      else
      {
        int v9 = TagFallback & 7;
      }
LABEL_22:
      if (v9 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v6, a4) & 1) == 0)return 0; {
    }
      }
    int v9 = TagFallback & 7;
    if (v9 != 1) {
      goto LABEL_22;
    }
    unint64_t v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0;
    }
    *(void *)(a1 + 16) = v12;
    *(_DWORD *)(a1 + 36) |= 1u;
    uint64_t v10 = (unsigned char *)*((void *)this + 1);
    if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 17)
    {
      *((void *)this + 1) = v10 + 1;
      unint64_t v12 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
        return 0;
      }
LABEL_17:
      *(void *)(a1 + 24) = v12;
      *(_DWORD *)(a1 + 36) |= 2u;
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_10005FB50(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = (uint64_t *)(a1 + 40);
  unsigned int v7 = (uint64_t *)(a1 + 16);
  unsigned int v8 = a1 + 8;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v9;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v9 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v11 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v12 = TagFallback & 7;
        if (v12 == 1)
        {
          uint64_t result = sub_10012F0E0(1, 0xAu, this, v7);
          if (!result) {
            return result;
          }
          uint64_t v18 = (unsigned char *)*((void *)this + 1);
          unint64_t v19 = *((void *)this + 2);
          if ((unint64_t)v18 < v19)
          {
LABEL_45:
            if (*v18 == 18)
            {
              int v15 = v18 + 1;
              *((void *)this + 1) = v15;
              unsigned int v32 = 0;
              if ((unint64_t)v15 >= v19) {
                goto LABEL_49;
              }
              goto LABEL_47;
            }
          }
        }
        else
        {
          if (v12 != 2) {
            goto LABEL_23;
          }
          unsigned int v32 = 0;
          uint64_t v13 = (char *)*((void *)this + 1);
          if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0; {
            unsigned int v14 = v32;
            }
          }
          else
          {
            unsigned int v14 = *v13;
            unsigned int v32 = v14;
            *((void *)this + 1) = v13 + 1;
          }
          int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v14);
          while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
          {
            unint64_t v33 = 0;
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33))return 0; {
            unint64_t v22 = v33;
            }
            int v23 = *(_DWORD *)(a1 + 24);
            if (v23 == *(_DWORD *)(a1 + 28))
            {
              if (2 * v23 <= v23 + 1) {
                int v24 = v23 + 1;
              }
              else {
                int v24 = 2 * v23;
              }
              if (v24 <= 4) {
                int v24 = 4;
              }
              *(_DWORD *)(a1 + 28) = v24;
              operator new[]();
            }
            uint64_t v21 = *(void *)(a1 + 16);
            *(_DWORD *)(a1 + 24) = v23 + 1;
            *(void *)(v21 + 8 * v23) = v22;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
          uint64_t v18 = (unsigned char *)*((void *)this + 1);
          unint64_t v19 = *((void *)this + 2);
          if ((unint64_t)v18 < v19) {
            goto LABEL_45;
          }
        }
      }
      if (v11 != 2) {
        break;
      }
      int v12 = TagFallback & 7;
      if (v12 == 1)
      {
        uint64_t result = sub_10012F0E0(1, 0x12u, this, v6);
        if (!result) {
          return result;
        }
        goto LABEL_63;
      }
      if (v12 != 2) {
        goto LABEL_23;
      }
      int v15 = (unsigned __int8 *)*((void *)this + 1);
      unint64_t v16 = *((void *)this + 2);
      unsigned int v32 = 0;
      if ((unint64_t)v15 >= v16)
      {
LABEL_49:
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0; {
        unsigned int v25 = v32;
        }
        goto LABEL_51;
      }
LABEL_47:
      if ((char)*v15 < 0) {
        goto LABEL_49;
      }
      unsigned int v25 = *v15;
      unsigned int v32 = v25;
      *((void *)this + 1) = v15 + 1;
LABEL_51:
      int v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25);
      while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
      {
        unint64_t v33 = 0;
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33))return 0; {
        unint64_t v28 = v33;
        }
        int v29 = *(_DWORD *)(a1 + 48);
        if (v29 == *(_DWORD *)(a1 + 52))
        {
          if (2 * v29 <= v29 + 1) {
            int v30 = v29 + 1;
          }
          else {
            int v30 = 2 * v29;
          }
          if (v30 <= 4) {
            int v30 = 4;
          }
          *(_DWORD *)(a1 + 52) = v30;
          operator new[]();
        }
        uint64_t v27 = *(void *)(a1 + 40);
        *(_DWORD *)(a1 + 48) = v29 + 1;
        *(void *)(v27 + 8 * v29) = v28;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
LABEL_63:
      unsigned int v31 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v31 < *((void *)this + 2) && *v31 == 25)
      {
        *((void *)this + 1) = v31 + 1;
        unint64_t v33 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33) & 1) == 0) {
          return 0;
        }
LABEL_66:
        *(void *)(a1 + 64) = v33;
        *(_DWORD *)(a1 + 76) |= 4u;
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v11 == 3)
    {
      int v12 = TagFallback & 7;
      if (v12 == 1)
      {
        unint64_t v33 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33) & 1) == 0) {
          return 0;
        }
        goto LABEL_66;
      }
    }
    else
    {
      int v12 = TagFallback & 7;
    }
LABEL_23:
    if (v12 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v8, a4) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_10005FFA0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (char *)*((void *)this + 1);
        if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v7;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v7 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v9 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v10 = TagFallback & 7;
        if (v10 != 1) {
          goto LABEL_28;
        }
        unint64_t v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 16) = v14;
        *(_DWORD *)(a1 + 44) |= 1u;
        unsigned int v11 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 17)
        {
          *((void *)this + 1) = v11 + 1;
          goto LABEL_19;
        }
      }
      if (v9 == 2) {
        break;
      }
      if (v9 == 3)
      {
        int v10 = TagFallback & 7;
        if (v10 == 1)
        {
          unint64_t v14 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
            return 0;
          }
          goto LABEL_23;
        }
      }
      else
      {
        int v10 = TagFallback & 7;
      }
LABEL_28:
      if (v10 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v6, a4) & 1) == 0)return 0; {
    }
      }
    int v10 = TagFallback & 7;
    if (v10 != 1) {
      goto LABEL_28;
    }
LABEL_19:
    unint64_t v14 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
      return 0;
    }
    *(void *)(a1 + 24) = v14;
    *(_DWORD *)(a1 + 44) |= 2u;
    int v12 = (unsigned char *)*((void *)this + 1);
    if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 25)
    {
      *((void *)this + 1) = v12 + 1;
      unint64_t v14 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
        return 0;
      }
LABEL_23:
      *(void *)(a1 + 32) = v14;
      *(_DWORD *)(a1 + 44) |= 4u;
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_1000601AC(uint64_t a1)
{
  *(void *)a1 = off_100466EE0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return a1;
}

void sub_100060200(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100060214(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  while (2)
  {
    unsigned int v7 = (char *)*((void *)this + 1);
    if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if (v9 != 1) {
          goto LABEL_40;
        }
        unint64_t v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 16) = v16;
        *(_DWORD *)(a1 + 68) |= 1u;
        int v10 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 != 17) {
          continue;
        }
        *((void *)this + 1) = v10 + 1;
        goto LABEL_15;
      case 2u:
        int v9 = TagFallback & 7;
        if (v9 != 1) {
          goto LABEL_40;
        }
LABEL_15:
        unint64_t v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 24) = v16;
        *(_DWORD *)(a1 + 68) |= 2u;
        unsigned int v11 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 != 25) {
          continue;
        }
        *((void *)this + 1) = v11 + 1;
LABEL_20:
        unint64_t v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 32) = v16;
        *(_DWORD *)(a1 + 68) |= 4u;
        int v12 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 != 33) {
          continue;
        }
        *((void *)this + 1) = v12 + 1;
LABEL_25:
        unint64_t v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 40) = v16;
        *(_DWORD *)(a1 + 68) |= 8u;
        uint64_t v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 != 41) {
          continue;
        }
        *((void *)this + 1) = v13 + 1;
LABEL_30:
        unint64_t v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 48) = v16;
        *(_DWORD *)(a1 + 68) |= 0x10u;
        unint64_t v14 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v14 >= *((void *)this + 2) || *v14 != 49) {
          continue;
        }
        *((void *)this + 1) = v14 + 1;
LABEL_35:
        unint64_t v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 56) = v16;
        *(_DWORD *)(a1 + 68) |= 0x20u;
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        break;
      case 3u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_20;
        }
        goto LABEL_40;
      case 4u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_25;
        }
        goto LABEL_40;
      case 5u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_30;
        }
        goto LABEL_40;
      case 6u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_35;
        }
        goto LABEL_40;
      default:
        int v9 = TagFallback & 7;
LABEL_40:
        if (v9 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v6, a4) & 1) == 0)return 0; {
        continue;
        }
    }
    return result;
  }
}

void *sub_10006052C(void *a1)
{
  *a1 = off_100467CF0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_100060578(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006058C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      unsigned int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v7;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v7 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 == 1) {
        break;
      }
      if (TagFallback >> 3 == 2)
      {
        int v9 = TagFallback & 7;
        if (v9 == 1)
        {
          unint64_t v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
            return 0;
          }
          goto LABEL_17;
        }
      }
      else
      {
        int v9 = TagFallback & 7;
      }
LABEL_22:
      if (v9 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v6, a4) & 1) == 0)return 0; {
    }
      }
    int v9 = TagFallback & 7;
    if (v9 != 1) {
      goto LABEL_22;
    }
    unint64_t v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0;
    }
    *(void *)(a1 + 16) = v12;
    *(_DWORD *)(a1 + 36) |= 1u;
    int v10 = (unsigned char *)*((void *)this + 1);
    if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 17)
    {
      *((void *)this + 1) = v10 + 1;
      unint64_t v12 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
        return 0;
      }
LABEL_17:
      *(void *)(a1 + 24) = v12;
      *(_DWORD *)(a1 + 36) |= 2u;
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_100060738(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24);
  unsigned int v7 = a1 + 8;
  while (1)
  {
    while (1)
    {
      unsigned int v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v8;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v8 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v10 = TagFallback & 7;
      if (v10 != 2) {
        goto LABEL_19;
      }
      *(_DWORD *)(a1 + 52) |= 1u;
      uint64_t v15 = *(void *)(a1 + 16);
      if (!v15) {
        operator new();
      }
      unsigned int v36 = 0;
      unint64_t v16 = (char *)*((void *)this + 1);
      if ((unint64_t)v16 >= *((void *)this + 2) || *v16 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v36))return 0; {
      }
        }
      else
      {
        unsigned int v36 = *v16;
        *((void *)this + 1) = v16 + 1;
      }
      int v17 = *((_DWORD *)this + 14);
      int v18 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v17 + 1;
      if (v17 >= v18) {
        return 0;
      }
      int v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v36);
      if (!sub_10005FB50(v15, this, v20, v21) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
      int v22 = *((_DWORD *)this + 14);
      BOOL v23 = __OFSUB__(v22, 1);
      int v24 = v22 - 1;
      if (v24 < 0 == v23) {
        *((_DWORD *)this + 14) = v24;
      }
      unsigned int v25 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v25 < *((void *)this + 2) && *v25 == 18)
      {
        do
        {
          *((void *)this + 1) = v25 + 1;
          int v11 = *(_DWORD *)(a1 + 36);
          uint64_t v12 = *(int *)(a1 + 32);
          if ((int)v12 >= v11) {
            goto LABEL_31;
          }
LABEL_11:
          uint64_t v13 = *(void *)(a1 + 24);
          *(_DWORD *)(a1 + 32) = v12 + 1;
          uint64_t v14 = *(void *)(v13 + 8 * v12);
          unsigned int v37 = 0;
          int v26 = (char *)*((void *)this + 1);
          if ((unint64_t)v26 >= *((void *)this + 2) || *v26 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37))return 0; {
          }
            }
          else
          {
            unsigned int v37 = *v26;
            *((void *)this + 1) = v26 + 1;
          }
          int v27 = *((_DWORD *)this + 14);
          int v28 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v27 + 1;
          if (v27 >= v28) {
            return 0;
          }
          int v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v37);
          if (!sub_10005FB50(v14, this, v30, v31) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
          int v32 = *((_DWORD *)this + 14);
          BOOL v23 = __OFSUB__(v32, 1);
          int v33 = v32 - 1;
          if (v33 < 0 == v23) {
            *((_DWORD *)this + 14) = v33;
          }
          unsigned int v25 = (unsigned char *)*((void *)this + 1);
          uint64_t v34 = (unsigned char *)*((void *)this + 2);
        }
        while (v25 < v34 && *v25 == 18);
        if (v25 == v34 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v10 = TagFallback & 7;
      if (v10 == 2)
      {
        int v11 = *(_DWORD *)(a1 + 36);
        uint64_t v12 = *(int *)(a1 + 32);
        if ((int)v12 < v11) {
          goto LABEL_11;
        }
LABEL_31:
        if (v11 == *(_DWORD *)(a1 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v11 + 1);
          int v11 = *(_DWORD *)(a1 + 36);
        }
        *(_DWORD *)(a1 + 36) = v11 + 1;
        operator new();
      }
    }
    else
    {
      int v10 = TagFallback & 7;
    }
LABEL_19:
    if (v10 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v7, a4) & 1) == 0)return 0; {
  }
    }
}

void sub_100060AE0()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100060B0C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v6 = a1 + 40;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  int v53 = (std::string *)(a1 + 80);
  *(_OWORD *)(a1 + 136) = 0u;
  uint64_t v7 = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 176) = 0u;
  uint64_t v8 = a1 + 176;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(_OWORD *)(a1 + 216) = 0u;
  int v54 = (void *)(a1 + 216);
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  sub_10009916C(a1 + 256, a4);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((v10 - *a2) >> 7) != (a3[1] - *a3) >> 7)
  {
    sub_1000AE4B0(&v57, "");
    sub_1001F10BC("universe information should be the same length as tile header info", &__p);
    sub_10016A2C4((uint64_t)&v57, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59) < 0) {
      operator delete(v57);
    }
    sub_10014B3FC((uint64_t)v56);
  }
  uint64_t v51 = v8;
  uint64_t v52 = v7;
  BOOL v58 = 0;
  uint64_t v59 = 0;
  int v57 = &v58;
  if (v10 != v9)
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = v9 + 1920 * v11;
      uint64_t v13 = v12 + 8;
      sub_100085B24(&__p, v12 + 8);
      v56[0] = &__p;
      uint64_t v14 = sub_100061B6C(a1, (uint64_t ***)&__p, (uint64_t)&unk_1003FAE80, (_OWORD **)v56);
      sub_100063610((uint64_t)(v14 + 4), v12);
      unint64_t size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
      uint64_t v16 = *a3;
      BOOL v17 = sub_100070D00(v12);
      unint64_t v18 = v16 + (v11 << 7);
      int v19 = (int **)(v18 + 8);
      if (v17)
      {
        std::string __p = *(std::string *)(v18 + 8);
        *(void *)(v18 + 16) = 0;
        *(void *)(v18 + 24) = 0;
        *int v19 = 0;
        sub_1002A2064((uint64_t **)&v57, v12 + 8, (uint64_t)&__p);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        uint64_t v20 = a3;
        unint64_t v21 = v16 + (v11 << 7);
        unint64_t v22 = v21 + 80;
        if (!*(unsigned char *)v18) {
          int v19 = (int **)(v21 + 80);
        }
        BOOL v23 = *v19;
        int v24 = v19[1];
        if (*v19 != v24)
        {
          do
          {
            sub_1000611FC(v6, (uint64_t)v23, v23);
            v23 += 8;
          }
          while (v23 != v24);
        }
        std::string::size_type v27 = *(void *)(v21 + 56);
        unint64_t v26 = v21 + 56;
        std::string::size_type v25 = v27;
        std::string::size_type v28 = *(void *)(v26 - 16);
        std::string::size_type v29 = *(void *)(v26 - 8);
        *(void *)(v26 - 16) = 0;
        *(void *)(v26 - 8) = 0;
        __p.__r_.__value_.__r.__words[0] = v28;
        __p.__r_.__value_.__l.__size_ = v29;
        __p.__r_.__value_.__r.__words[2] = v27;
        int v61 = *(void **)(v26 + 8);
        *(_DWORD *)int v62 = *(_DWORD *)(v26 + 16);
        if (v61)
        {
          std::string::size_type v30 = *(void *)(v25 + 8);
          if ((v29 & (v29 - 1)) != 0)
          {
            if (v30 >= v29) {
              v30 %= v29;
            }
          }
          else
          {
            v30 &= v29 - 1;
          }
          *(void *)(v28 + 8 * v30) = (char *)&__p.__r_.__value_.__l + 16;
          *(void *)unint64_t v26 = 0;
          *(void *)(v26 + 8) = 0;
        }
        *(_OWORD *)&v62[8] = *(_OWORD *)v22;
        unint64_t v31 = v16 + (v11 << 7);
        uint64_t v63 = *(void *)(v31 + 96);
        *(void *)unint64_t v22 = 0;
        *(void *)(v22 + 8) = 0;
        *(void *)(v22 + 16) = 0;
        *(_OWORD *)uint64_t v64 = *(_OWORD *)(v31 + 104);
        uint64_t v65 = *(void *)(v31 + 120);
        *(void *)(v31 + 112) = 0;
        *(void *)(v31 + 120) = 0;
        *(void *)(v31 + 104) = 0;
        sub_100061F04(v54, v13, (uint64_t *)&__p);
        int v32 = (char *)v64[0];
        a3 = v20;
        if (v64[0])
        {
          int v33 = v64[0];
          if (v64[1] != v64[0])
          {
            uint64_t v34 = (char *)v64[1] - 40;
            unint64_t v35 = (char *)v64[1] - 40;
            unsigned int v36 = (void (***)(char *))((char *)v64[1] - 40);
            do
            {
              unsigned int v37 = *v36;
              v36 -= 5;
              (*v37)(v35);
              v34 -= 40;
              BOOL v38 = v35 == v32;
              unint64_t v35 = (char *)v36;
            }
            while (!v38);
            int v33 = v64[0];
          }
          v64[1] = v32;
          operator delete(v33);
        }
        if (*(void *)&v62[8])
        {
          *(void *)&v62[16] = *(void *)&v62[8];
          operator delete(*(void **)&v62[8]);
        }
        int v39 = (void *)__p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2])
        {
          do
          {
            uint64_t v40 = (void *)*v39;
            operator delete(v39);
            int v39 = v40;
          }
          while (v40);
        }
        uint64_t v41 = (void *)__p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v41) {
          operator delete(v41);
        }
        sub_100085B24(&__p, v13);
        uint64_t v42 = sub_100070270(v54, (uint64_t ***)&__p);
        if (!v42) {
          sub_10018E334("unordered_map::at: key not found");
        }
        sub_100061660((uint64_t **)&v57, v13, (uint64_t *)v42 + 9);
        uint64_t v43 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_
          && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      ++v11;
      uint64_t v9 = *a2;
    }
    while (v11 < 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 7));
  }
  uint64_t v44 = *a3;
  for (uint64_t i = a3[1]; i != v44; i -= 128)
  {
    if (*(unsigned char *)(i - 96)) {
      sub_10006353C(i - 96);
    }
    if (*(unsigned char *)(i - 128))
    {
      int v46 = *(void **)(i - 120);
      if (v46)
      {
        *(void *)(i - 112) = v46;
        operator delete(v46);
      }
      *(unsigned char *)(i - 128) = 0;
    }
  }
  a3[1] = v44;
  sub_100097FCC(a3);
  sub_1000A04A8((uint64_t)&__p, (uint64_t)&v57);
  uint64_t v47 = a1;
  if (&__p != v53)
  {
    *(void *)(a1 + 88) = 0;
    uint64_t v48 = *(void **)(a1 + 80);
    if (v48)
    {
      operator delete(v48);
      uint64_t v47 = a1;
    }
    *(std::string *)(v47 + 80) = __p;
    memset(&__p, 0, sizeof(__p));
    *(void *)(v47 + 112) = 0;
    int v49 = *(void **)(v47 + 104);
    if (v49)
    {
      operator delete(v49);
      uint64_t v47 = a1;
    }
    *(void *)(v47 + 104) = v61;
    *(_OWORD *)(v47 + 112) = *(_OWORD *)v62;
    *(void *)int v62 = 0;
    *(void *)&v62[8] = 0;
    int v61 = 0;
  }
  *(_DWORD *)(v47 + 128) = *(_DWORD *)&v62[16];
  sub_1000993FC(v52, &v63);
  sub_1000992B0(v51, v66);
  sub_1000A0968(&v62[16]);
  if (*(void *)&v62[8]) {
    operator delete(v61);
  }
  if (__p.__r_.__value_.__r.__words[2]) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_10001B8B8((uint64_t)&v57, v58);
  return a1;
}

void sub_10006111C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_1000D8B48(a9);
  sub_1002A11C4(a14);
  sub_1002A1178(a12);
  sub_100258574(v30);
  sub_1001F53E0(a15);
  _Unwind_Resume(a1);
}

void *sub_1000611FC(uint64_t a1, uint64_t a2, int *a3)
{
  int v46 = &v45;
  uint64_t v7 = a2 + 8;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    unint64_t v8 = *(void *)v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_58;
    }
  }
  else
  {
    unint64_t v8 = sub_100258DC8((uint64_t)&v46, (unsigned __int8 *)(a2 + 8));
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_58;
    }
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v3 = v8;
    if (v8 >= v9) {
      unint64_t v3 = v8 % v9;
    }
  }
  else
  {
    unint64_t v3 = (v9 - 1) & v8;
  }
  unint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
  if (v11)
  {
    uint64_t v12 = (void *)*v11;
    if (*v11)
    {
      int v13 = *(_DWORD *)a2;
      int v14 = (v13 >> 31) ^ v13;
      BOOL v15 = v13 >> 31 == v13;
      uint64_t v16 = *(void *)(a2 + 8);
      if (v10.u32[0] <= 1uLL)
      {
        unint64_t v17 = v9 - 1;
        if (v15)
        {
          while (1)
          {
            uint64_t v18 = v12[1];
            if (v18 == v8)
            {
              if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14 && v12[3] == v16) {
                return v12;
              }
            }
            else if ((v18 & v17) != v3)
            {
              goto LABEL_58;
            }
            uint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_58;
            }
          }
        }
        while (1)
        {
          uint64_t v19 = v12[1];
          if (v19 == v8)
          {
            if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14)
            {
              BOOL v20 = v12[3] == *(void *)v7 && v12[4] == *(void *)(v7 + 8);
              if (v20 && *((_DWORD *)v12 + 10) == (unint64_t)*(unsigned int *)(v7 + 16)) {
                return v12;
              }
            }
          }
          else if ((v19 & v17) != v3)
          {
            goto LABEL_58;
          }
          uint64_t v12 = (void *)*v12;
          if (!v12) {
            goto LABEL_58;
          }
        }
      }
      if (v15)
      {
        while (1)
        {
          unint64_t v22 = v12[1];
          if (v22 == v8)
          {
            if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14 && v12[3] == v16) {
              return v12;
            }
          }
          else
          {
            if (v22 >= v9) {
              v22 %= v9;
            }
            if (v22 != v3) {
              goto LABEL_58;
            }
          }
          uint64_t v12 = (void *)*v12;
          if (!v12) {
            goto LABEL_58;
          }
        }
      }
      do
      {
        unint64_t v23 = v12[1];
        if (v23 == v8)
        {
          if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14)
          {
            BOOL v24 = v12[3] == *(void *)v7 && v12[4] == *(void *)(v7 + 8);
            if (v24 && *((_DWORD *)v12 + 10) == (unint64_t)*(unsigned int *)(v7 + 16)) {
              return v12;
            }
          }
        }
        else
        {
          if (v23 >= v9) {
            v23 %= v9;
          }
          if (v23 != v3) {
            break;
          }
        }
        uint64_t v12 = (void *)*v12;
      }
      while (v12);
    }
  }
LABEL_58:
  unint64_t v26 = operator new(0x30uLL);
  uint64_t v12 = v26;
  *unint64_t v26 = 0;
  v26[1] = v8;
  std::string::size_type v27 = v26 + 3;
  int v30 = *a3;
  std::string::size_type v29 = a3 + 2;
  int v28 = v30;
  int v31 = v30 >> 31;
  if (v30 >> 31 == v30)
  {
    void *v27 = *(void *)v29;
    int v31 = v28;
  }
  else
  {
    *(_OWORD *)std::string::size_type v27 = *(_OWORD *)v29;
    *((_DWORD *)v26 + 10) = v29[4];
  }
  *((_DWORD *)v26 + 4) = v31 ^ v28;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (v9 && (float)(v33 * (float)v9) >= v32)
  {
    unint64_t v8 = v3;
  }
  else
  {
    BOOL v34 = 1;
    if (v9 >= 3) {
      BOOL v34 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v9);
    unint64_t v36 = vcvtps_u32_f32(v32 / v33);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_74;
    }
    if (prime < v9)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < v9) {
LABEL_74:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        v8 %= v9;
      }
    }
    else
    {
      v8 &= v9 - 1;
    }
  }
  uint64_t v41 = *(void *)a1;
  uint64_t v42 = *(void **)(*(void *)a1 + 8 * v8);
  if (v42)
  {
    *uint64_t v12 = *v42;
LABEL_97:
    void *v42 = v12;
    goto LABEL_98;
  }
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v41 + 8 * v8) = a1 + 16;
  if (*v12)
  {
    unint64_t v43 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v43 >= v9) {
        v43 %= v9;
      }
    }
    else
    {
      v43 &= v9 - 1;
    }
    uint64_t v42 = (void *)(*(void *)a1 + 8 * v43);
    goto LABEL_97;
  }
LABEL_98:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_10006164C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100061660(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  std::string __p = operator new(0x48uLL);
  sub_1000618A0(__p + 4, a2, a3);
  uint64_t v7 = __p;
  unint64_t v8 = *v6;
  if (!*v6)
  {
    uint8x8_t v10 = v6;
LABEL_19:
    uint64_t *v7 = 0;
    v7[1] = 0;
    int v7[2] = (uint64_t)v10;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6 = v7;
    BOOL v15 = (uint64_t *)**a1;
    if (v15)
    {
      *a1 = v15;
      uint64_t v7 = *v6;
    }
    sub_1000619B8(a1[1], v7);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return __p;
  }
  unint64_t v9 = (const void ***)(__p + 4);
  while (1)
  {
    while (1)
    {
      uint8x8_t v10 = (uint64_t **)v8;
      unint64_t v11 = (const void ***)(v8 + 4);
      if (!sub_10006182C(v9, (const void ***)v8 + 4)) {
        break;
      }
      unint64_t v8 = *v10;
      uint64_t v6 = v10;
      if (!*v10)
      {
        uint64_t v6 = v10;
        uint64_t v7 = __p;
        goto LABEL_19;
      }
    }
    if (!sub_10006182C(v11, v9)) {
      break;
    }
    uint64_t v6 = v10 + 1;
    unint64_t v8 = v10[1];
    if (!v8)
    {
      uint64_t v7 = __p;
      goto LABEL_19;
    }
  }
  uint64_t v12 = *v6;
  uint64_t v7 = __p;
  if (!*v6) {
    goto LABEL_19;
  }
  if (__p)
  {
    int v13 = (void *)__p[6];
    if (v13)
    {
      __p[7] = v13;
      operator delete(v13);
    }
    int v14 = (std::__shared_weak_count *)__p[5];
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    operator delete(__p);
  }
  return v12;
}

void sub_100061804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002A2248((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100061818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002A2248((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10006182C(const void ***a1, const void ***a2)
{
  int v2 = *((char *)*a2 + 23);
  int v3 = *((char *)*a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)*a1 + 23);
  }
  else {
    size_t v4 = (size_t)(*a1)[1];
  }
  if (v3 >= 0) {
    uint64_t v5 = *a1;
  }
  else {
    uint64_t v5 = **a1;
  }
  if (v2 >= 0) {
    size_t v6 = *((unsigned __int8 *)*a2 + 23);
  }
  else {
    size_t v6 = (size_t)(*a2)[1];
  }
  if (v2 >= 0) {
    uint64_t v7 = *a2;
  }
  else {
    uint64_t v7 = **a2;
  }
  if (v6 >= v4) {
    size_t v8 = v4;
  }
  else {
    size_t v8 = v6;
  }
  int v9 = memcmp(v5, v7, v8);
  if (v9) {
    return v9 < 0;
  }
  else {
    return v4 < v6;
  }
}

void *sub_1000618A0(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100085B24(a1, a2);
  void v5[2] = 0;
  void v5[3] = 0;
  v5[4] = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  int64_t v8 = v7 - *a3;
  if (v8)
  {
    if (v8 < 0) {
      sub_1000A9108();
    }
    int v9 = (char *)operator new(v8);
    uint64_t v10 = 0;
    a1[2] = v9;
    a1[3] = v9;
    a1[4] = &v9[32 * (v8 >> 5)];
    do
    {
      while (1)
      {
        uint64_t v12 = (int *)&v9[v10];
        int v13 = &v9[v10 + 8];
        BOOL v15 = (long long *)(v6 + v10 + 8);
        int v14 = *(_DWORD *)(v6 + v10);
        if (v14 >> 31 == v14) {
          break;
        }
        long long v11 = *v15;
        *(_DWORD *)&v9[v10 + 24] = *(_DWORD *)(v6 + v10 + 24);
        *(_OWORD *)int v13 = v11;
        *uint64_t v12 = (v14 >> 31) ^ v14;
        v10 += 32;
        if (v6 + v10 == v7) {
          goto LABEL_7;
        }
      }
      *(void *)int v13 = *(void *)v15;
      *uint64_t v12 = 0;
      v10 += 32;
    }
    while (v6 + v10 != v7);
LABEL_7:
    a1[3] = &v9[v10];
  }
  return a1;
}

void sub_100061994(_Unwind_Exception *a1)
{
  size_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  sub_100198250(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000619B8(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    int v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        int v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          int v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        uint64_t *v9 = v2;
        *(void *)(v2 + 16) = v9;
        int v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    *uint64_t v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    uint64_t v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      int v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    int v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  int v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  uint64_t *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

const void ***sub_100061B6C(uint64_t a1, uint64_t ***a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v8 = sub_100077F68((uint64_t)v33, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    uint64_t v12 = *(const void *****)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      int v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            BOOL v15 = v13[1];
            if (v15 == (const void **)v9)
            {
              if (sub_1000706F4(v13 + 2, (unsigned __int8 ***)a2)) {
                return v13;
              }
            }
            else if (((unint64_t)v15 & (v10 - 1)) != v4)
            {
              goto LABEL_23;
            }
            int v13 = (const void ***)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = (unint64_t)v13[1];
          if (v14 == v9)
          {
            if (sub_1000706F4(v13 + 2, (unsigned __int8 ***)a2)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          int v13 = (const void ***)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  uint64_t v16 = operator new(0x7A0uLL);
  v33[0] = v16;
  v33[1] = a1 + 16;
  char v34 = 0;
  void *v16 = 0;
  v16[1] = v9;
  unint64_t v17 = *a4;
  *((_OWORD *)v16 + 1) = **a4;
  *unint64_t v17 = 0;
  v17[1] = 0;
  sub_100076AC4((uint64_t)(v16 + 4));
  char v34 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v26) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v26)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v26 < 3uLL || (uint8x8_t v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < *(void *)&v26) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v30 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        BOOL v20 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        unint64_t v21 = (void *)v33[0];
        if (v20) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v9;
        BOOL v20 = *(void **)(*(void *)a1 + 8 * v9);
        unint64_t v21 = (void *)v33[0];
        if (v20) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v9;
      BOOL v20 = *(void **)(*(void *)a1 + 8 * (v30 & v9));
      unint64_t v21 = (void *)v33[0];
      if (v20) {
        goto LABEL_26;
      }
    }
LABEL_50:
    void *v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v33[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v33[0])
    {
      unint64_t v31 = *(void *)(*(void *)v33[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v31 >= v10) {
          v31 %= v10;
        }
      }
      else
      {
        v31 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v31) = v33[0];
    }
    goto LABEL_61;
  }
  BOOL v20 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v21 = (void *)v33[0];
  if (!v20) {
    goto LABEL_50;
  }
LABEL_26:
  void *v21 = *v20;
  void *v20 = v33[0];
LABEL_61:
  int v13 = (const void ***)v33[0];
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_100061ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F555C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100061EE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4) {
    sub_1003A37A8(v4);
  }
  sub_1001F555C((uint64_t)va);
  _Unwind_Resume(a1);
}

const void ***sub_100061F04(void *a1, uint64_t a2, uint64_t *a3)
{
  sub_100062310((uint64_t)a1, a2, a3, (uint64_t)&__p);
  unint64_t v4 = sub_100061FB0(a1, (uint64_t)__p);
  if ((v5 & 1) == 0)
  {
    int v6 = __p;
    std::string __p = 0;
    if (v6)
    {
      if (v9) {
        sub_1002539C8(v6 + 2);
      }
      operator delete(v6);
    }
  }
  return v4;
}

void sub_100061F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, char a12)
{
  if (__p)
  {
    if (a12) {
      sub_1002539C8(__p + 2);
    }
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void ***sub_100061FB0(void *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned __int8 ***)(a2 + 16);
  unint64_t v5 = sub_100077F68((uint64_t)&v12, (uint64_t ***)(a2 + 16));
  *(void *)(a2 + 8) = v5;
  uint64_t result = sub_1000620E0((uint64_t)a1, v5, v4);
  if (!result)
  {
    int8x8_t v7 = (int8x8_t)a1[1];
    unint64_t v8 = *(void *)(a2 + 8);
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v7) {
        v8 %= *(void *)&v7;
      }
    }
    else
    {
      v8 &= *(void *)&v7 - 1;
    }
    unint64_t v10 = *(void **)(*a1 + 8 * v8);
    if (v10)
    {
      *(void *)a2 = *v10;
    }
    else
    {
      *(void *)a2 = a1[2];
      a1[2] = a2;
      *(void *)(*a1 + 8 * v8) = a1 + 2;
      if (!*(void *)a2)
      {
LABEL_15:
        ++a1[3];
        return (const void ***)a2;
      }
      unint64_t v11 = *(void *)(*(void *)a2 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v7) {
          v11 %= *(void *)&v7;
        }
      }
      else
      {
        v11 &= *(void *)&v7 - 1;
      }
      unint64_t v10 = (void *)(*a1 + 8 * v11);
    }
    void *v10 = a2;
    goto LABEL_15;
  }
  return result;
}

const void ***sub_1000620E0(uint64_t a1, unint64_t a2, unsigned __int8 ***a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_23;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    if (v4 <= a2) {
      unint64_t v8 = a2 % v4;
    }
    else {
      unint64_t v8 = a2;
    }
    uint8x8_t v9 = *(const void *****)(*(void *)a1 + 8 * v8);
    if (!v9) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v8 = (v4 - 1) & a2;
    uint8x8_t v9 = *(const void *****)(*(void *)a1 + 8 * v8);
    if (!v9) {
      goto LABEL_23;
    }
  }
  unint64_t v10 = *v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      while (1)
      {
        char v12 = v10[1];
        if (v12 == (const void **)a2)
        {
          if (sub_1000706F4(v10 + 2, a3)) {
            return v10;
          }
        }
        else if (((unint64_t)v12 & (v4 - 1)) != v8)
        {
          goto LABEL_23;
        }
        unint64_t v10 = (const void ***)*v10;
        if (!v10) {
          goto LABEL_23;
        }
      }
    }
    do
    {
      unint64_t v11 = (unint64_t)v10[1];
      if (v11 == a2)
      {
        if (sub_1000706F4(v10 + 2, a3)) {
          return v10;
        }
      }
      else
      {
        if (v11 >= v4) {
          v11 %= v4;
        }
        if (v11 != v8) {
          break;
        }
      }
      unint64_t v10 = (const void ***)*v10;
    }
    while (v10);
  }
LABEL_23:
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (v4 && (float)(v14 * (float)v4) >= v13) {
    return 0;
  }
  BOOL v15 = 1;
  if (v4 >= 3) {
    BOOL v15 = (v4 & (v4 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v4);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    size_t prime = v17;
  }
  else {
    size_t prime = v16;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
  }
  int8x8_t v19 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v19) {
    goto LABEL_47;
  }
  if (prime < *(void *)&v19)
  {
    size_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      size_t v23 = std::__next_prime(v20);
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime >= *(void *)&v19) {
        return 0;
      }
    }
    else
    {
      uint64_t v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2) {
        size_t v20 = v22;
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime >= *(void *)&v19) {
        return 0;
      }
    }
LABEL_47:
    sub_10006338C(a1, prime);
  }
  return 0;
}

unint64_t sub_100062310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x78uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  sub_100085B24((void *)v8 + 2, a2);
  uint64_t v9 = *a3;
  unint64_t v10 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v11 = a3[2];
  *((void *)v8 + 6) = v11;
  *((void *)v8 + 4) = v9;
  *((void *)v8 + 5) = v10;
  uint64_t v12 = a3[3];
  *((void *)v8 + 7) = v12;
  *((_DWORD *)v8 + 16) = *((_DWORD *)a3 + 8);
  if (v12)
  {
    unint64_t v13 = *(void *)(v11 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v13 >= v10) {
        v13 %= v10;
      }
    }
    else
    {
      v13 &= v10 - 1;
    }
    *(void *)(v9 + 8 * v13) = v8 + 48;
    a3[2] = 0;
    a3[3] = 0;
  }
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a3 + 5);
  *((void *)v8 + 11) = a3[7];
  a3[5] = 0;
  a3[6] = 0;
  *((_OWORD *)v8 + 6) = *((_OWORD *)a3 + 4);
  *((void *)v8 + 14) = a3[10];
  a3[7] = 0;
  a3[8] = 0;
  a3[9] = 0;
  a3[10] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = sub_100077F68((uint64_t)&v15, (uint64_t ***)v8 + 2);
  *((void *)v8 + 1) = result;
  return result;
}

void sub_100062420(_Unwind_Exception *a1)
{
  sub_1002A22E8(v1);
  _Unwind_Resume(a1);
}

void sub_100062434(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  v39[1] = 0;
  unint64_t v40 = 0;
  v39[0] = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = *(int *)(*a1 + 24);
  if (v5)
  {
    int v6 = 0;
    uint64_t v7 = *(uint64_t **)(v4 + 16);
    uint64_t v8 = 8 * v5;
    do
    {
      while (1)
      {
        uint64_t v9 = *v7;
        if ((unint64_t)v6 < v40) {
          break;
        }
        int v6 = (void *)sub_100062C08((uint64_t *)v39, v9);
        v39[1] = v6;
        ++v7;
        v8 -= 8;
        if (!v8) {
          goto LABEL_6;
        }
      }
      int v6 = (void *)(sub_100063BA4((uint64_t)v6, v9) + 32);
      v39[1] = v6;
      ++v7;
      v8 -= 8;
    }
    while (v8);
LABEL_6:
    uint64_t v4 = *a1;
  }
  unint64_t v36 = 0;
  unsigned int v37 = 0;
  unint64_t v38 = 0;
  uint64_t v10 = *(int *)(v4 + 48);
  int v11 = *(_DWORD *)(v4 + 24);
  if (v10)
  {
    if (v10 != v11)
    {
      sub_1000AE4B0(v42, "");
      sub_10025351C("These should be parallel arrays", &v44);
      sub_10016A2C4((uint64_t)v42, (uint64_t)&v44, 1);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      sub_1000D11E0((uint64_t)&v41);
    }
    uint64_t v12 = *(uint64_t **)(v4 + 40);
    unint64_t v13 = &v12[v10];
    unint64_t v14 = (unint64_t)v37;
    do
    {
      uint64_t v15 = *v12;
      if (v14 >= v38)
      {
        unint64_t v14 = sub_100062810(&v36, v15);
      }
      else
      {
        sub_1000629E4(v14, v15);
        v14 += 40;
      }
      unsigned int v37 = (char *)v14;
      ++v12;
    }
    while (v12 != v13);
  }
  else if (v11 < 1)
  {
    unint64_t v14 = 0;
  }
  else
  {
    unint64_t v14 = 0;
    int v16 = 0;
    do
    {
      if (v14 >= v38)
      {
        unint64_t v14 = sub_10031E31C(&v36);
      }
      else
      {
        sub_10009DB90(v14);
        v14 += 40;
      }
      unsigned int v37 = (char *)v14;
      ++v16;
    }
    while (v16 < *(_DWORD *)(*a1 + 24));
  }
  *(_OWORD *)char v34 = *(_OWORD *)v39;
  unint64_t v17 = v40;
  v39[1] = 0;
  unint64_t v40 = 0;
  std::string __p = v36;
  float v32 = (char *)v14;
  unint64_t v33 = v38;
  unint64_t v38 = 0;
  v39[0] = 0;
  unint64_t v35 = v17;
  unint64_t v36 = 0;
  unsigned int v37 = 0;
  sub_100062D6C(a2, (uint64_t)v34, (uint64_t)&__p);
  float v18 = (char *)__p;
  if (__p)
  {
    int8x8_t v19 = __p;
    if (v32 != __p)
    {
      size_t v20 = v32 - 40;
      uint8x8_t v21 = v32 - 40;
      uint64_t v22 = (void (***)(char *))(v32 - 40);
      do
      {
        size_t v23 = *v22;
        v22 -= 5;
        (*v23)(v21);
        v20 -= 40;
        BOOL v24 = v21 == v18;
        uint8x8_t v21 = (char *)v22;
      }
      while (!v24);
      int8x8_t v19 = __p;
    }
    float v32 = v18;
    operator delete(v19);
  }
  if (v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }
  std::string::size_type v25 = (char *)v36;
  if (v36)
  {
    int8x8_t v26 = v36;
    if (v37 != v36)
    {
      unint64_t v27 = v37 - 40;
      uint8x8_t v28 = v37 - 40;
      uint64_t v29 = (void (***)(char *))(v37 - 40);
      do
      {
        unint64_t v30 = *v29;
        v29 -= 5;
        (*v30)(v28);
        v27 -= 40;
        BOOL v24 = v28 == v25;
        uint8x8_t v28 = (char *)v29;
      }
      while (!v24);
      int8x8_t v26 = v36;
    }
    unsigned int v37 = v25;
    operator delete(v26);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
}

void sub_10006277C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  sub_100319BA0(&a16);
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100062810(void *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    sub_1000A9108();
  }
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      sub_1000A6A10();
    }
    uint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v19 = (uint64_t)&v7[40 * v3];
  *((void *)&v20 + 1) = &v7[40 * v6];
  sub_1000629E4(v19, a2);
  uint64_t v8 = 0;
  uint64_t v10 = (char *)*a1;
  for (uint64_t i = a1[1]; (char *)(i + v8) != v10; sub_1000629E4(v8 + v19, v8 + i))
    v8 -= 40;
  uint64_t v12 = (char *)*a1;
  int v11 = (char *)a1[1];
  *a1 = v19 + v8;
  *(void *)&long long v20 = v19 + 40;
  *(_OWORD *)(a1 + 1) = v20;
  if (v11 != v12)
  {
    unint64_t v13 = v11 - 40;
    unint64_t v14 = v11 - 40;
    uint64_t v15 = v11 - 40;
    do
    {
      int v16 = *(void (***)(char *))v15;
      v15 -= 40;
      (*v16)(v14);
      v13 -= 40;
      BOOL v17 = v14 == v12;
      unint64_t v14 = v15;
    }
    while (!v17);
  }
  if (v12) {
    operator delete(v12);
  }
  return v19 + 40;
}

void sub_1000629A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10031E4E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000629E4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1004671D0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 16) = _D0;
  *(_OWORD *)(a1 + 24) = xmmword_1003FC910;
  sub_100062A8C((_DWORD *)a1, a2);
  return a1;
}

void sub_100062A5C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_100062A78(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100062A8C(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 36);
  if (!(_BYTE)v4) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if (*(unsigned char *)(a2 + 36))
  {
    int v7 = *(_DWORD *)(a2 + 16);
    a1[9] |= 1u;
    a1[4] = v7;
    int v4 = *(_DWORD *)(a2 + 36);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
LABEL_12:
      int v9 = *(_DWORD *)(a2 + 24);
      a1[9] |= 4u;
      a1[6] = v9;
      if ((*(_DWORD *)(a2 + 36) & 8) == 0) {
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
      }
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 2) == 0)
  {
    goto LABEL_6;
  }
  int v8 = *(_DWORD *)(a2 + 20);
  a1[9] |= 2u;
  a1[5] = v8;
  int v4 = *(_DWORD *)(a2 + 36);
  if ((v4 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_7:
  if ((v4 & 8) != 0)
  {
LABEL_8:
    int v5 = *(_DWORD *)(a2 + 28);
    a1[9] |= 8u;
    a1[7] = v5;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100062B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100062BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100062BB4(uint64_t a1)
{
  *(void *)a1 = off_1004671D0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t sub_100062C08(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_1000A9108();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 59) {
      sub_1000A6A10();
    }
    int v8 = (char *)operator new(32 * v7);
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v9 = sub_100063BA4((uint64_t)&v8[32 * v3], a2);
  uint64_t v10 = &v8[32 * v7];
  uint64_t v11 = v9 + 32;
  unint64_t v13 = (_DWORD *)*a1;
  uint64_t v12 = (_DWORD *)a1[1];
  if (v12 == (_DWORD *)*a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (uint64_t)v10;
    if (!v12) {
      return v11;
    }
    goto LABEL_18;
  }
  uint64_t v14 = a1[1];
  do
  {
    int v19 = *(_DWORD *)(v14 - 32);
    v14 -= 32;
    int v17 = v19;
    long long v20 = (void *)(v9 - 24);
    uint8x8_t v21 = (void *)(v14 + 8);
    if (v19 == v19 >> 31)
    {
      void *v20 = *v21;
      int v16 = v17;
    }
    else
    {
      long long v15 = *(_OWORD *)v21;
      *(_DWORD *)(v9 - 8) = *(_DWORD *)(v14 + 24);
      *(_OWORD *)long long v20 = v15;
      int v16 = *(v12 - 8);
      int v17 = v16 >> 31;
    }
    uint64_t v18 = v9 - 32;
    *(_DWORD *)(v9 - 32) = v16 ^ v17;
    uint64_t v12 = (_DWORD *)v14;
    v9 -= 32;
  }
  while ((_DWORD *)v14 != v13);
  uint64_t v12 = (_DWORD *)*a1;
  *a1 = v18;
  a1[1] = v11;
  a1[2] = (uint64_t)v10;
  if (v12) {
LABEL_18:
  }
    operator delete(v12);
  return v11;
}

void sub_100062D54(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100062D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a2;
  *(void *)(a1 + 56) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a3;
  *(void *)(a1 + 80) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 48) - *(void *)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = v4 >> 5;
    if (v7 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v7;
    }
    do
    {
      uint64_t v9 = *(void *)(a1 + 40);
      if (v6 >= (*(void *)(a1 + 48) - v9) >> 5) {
        sub_1001F352C();
      }
      uint64_t v10 = (int *)(v9 + v5);
      uint64_t v12 = v9 + v5 + 8;
      int v11 = *(_DWORD *)(v9 + v5);
      if (v11 == v11 >> 31)
      {
        *(void *)&long long v18 = *(void *)v12;
        int v13 = v11;
      }
      else
      {
        long long v14 = *(_OWORD *)v12;
        int v19 = *(_DWORD *)(v12 + 16);
        long long v18 = v14;
        int v13 = *v10;
        int v11 = v13 >> 31;
      }
      int v16 = v6;
      int v17 = v13 ^ v11;
      sub_100062F14(a1, (uint64_t)&v17, &v17, &v16);
      ++v6;
      v5 += 32;
    }
    while (v8 != v6);
  }
  return a1;
}

void sub_100062EE4(_Unwind_Exception *a1)
{
  sub_100319BA0(v3);
  uint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  sub_100258574(v1);
  _Unwind_Resume(a1);
}

void *sub_100062F14(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  uint64_t v48 = &v47;
  uint64_t v9 = a2 + 8;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    unint64_t v10 = *(void *)v9;
    unint64_t v11 = *(void *)(a1 + 8);
    if (!v11) {
      goto LABEL_58;
    }
  }
  else
  {
    unint64_t v10 = sub_100258DC8((uint64_t)&v48, (unsigned __int8 *)(a2 + 8));
    unint64_t v11 = *(void *)(a1 + 8);
    if (!v11) {
      goto LABEL_58;
    }
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v4 = v10;
    if (v10 >= v11) {
      unint64_t v4 = v10 % v11;
    }
  }
  else
  {
    unint64_t v4 = (v11 - 1) & v10;
  }
  int v13 = *(void **)(*(void *)a1 + 8 * v4);
  if (v13)
  {
    long long v14 = (void *)*v13;
    if (*v13)
    {
      int v15 = *(_DWORD *)a2;
      int v16 = (v15 >> 31) ^ v15;
      BOOL v17 = v15 >> 31 == v15;
      uint64_t v18 = *(void *)(a2 + 8);
      if (v12.u32[0] <= 1uLL)
      {
        unint64_t v19 = v11 - 1;
        if (v17)
        {
          while (1)
          {
            uint64_t v20 = v14[1];
            if (v20 == v10)
            {
              if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16 && v14[3] == v18) {
                return v14;
              }
            }
            else if ((v20 & v19) != v4)
            {
              goto LABEL_58;
            }
            long long v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_58;
            }
          }
        }
        while (1)
        {
          uint64_t v21 = v14[1];
          if (v21 == v10)
          {
            if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16)
            {
              BOOL v22 = v14[3] == *(void *)v9 && v14[4] == *(void *)(v9 + 8);
              if (v22 && *((_DWORD *)v14 + 10) == (unint64_t)*(unsigned int *)(v9 + 16)) {
                return v14;
              }
            }
          }
          else if ((v21 & v19) != v4)
          {
            goto LABEL_58;
          }
          long long v14 = (void *)*v14;
          if (!v14) {
            goto LABEL_58;
          }
        }
      }
      if (v17)
      {
        while (1)
        {
          unint64_t v24 = v14[1];
          if (v24 == v10)
          {
            if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16 && v14[3] == v18) {
              return v14;
            }
          }
          else
          {
            if (v24 >= v11) {
              v24 %= v11;
            }
            if (v24 != v4) {
              goto LABEL_58;
            }
          }
          long long v14 = (void *)*v14;
          if (!v14) {
            goto LABEL_58;
          }
        }
      }
      do
      {
        unint64_t v25 = v14[1];
        if (v25 == v10)
        {
          if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16)
          {
            BOOL v26 = v14[3] == *(void *)v9 && v14[4] == *(void *)(v9 + 8);
            if (v26 && *((_DWORD *)v14 + 10) == (unint64_t)*(unsigned int *)(v9 + 16)) {
              return v14;
            }
          }
        }
        else
        {
          if (v25 >= v11) {
            v25 %= v11;
          }
          if (v25 != v4) {
            break;
          }
        }
        long long v14 = (void *)*v14;
      }
      while (v14);
    }
  }
LABEL_58:
  uint8x8_t v28 = operator new(0x38uLL);
  long long v14 = v28;
  void *v28 = 0;
  v28[1] = v10;
  uint64_t v29 = v28 + 3;
  int v32 = *a3;
  unint64_t v31 = a3 + 2;
  int v30 = v32;
  int v33 = v32 >> 31;
  if (v32 >> 31 == v32)
  {
    void *v29 = *(void *)v31;
    int v33 = v30;
  }
  else
  {
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v31;
    *((_DWORD *)v28 + 10) = v31[4];
  }
  *((_DWORD *)v28 + 4) = v33 ^ v30;
  *((_DWORD *)v28 + 12) = *a4;
  float v34 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v35 = *(float *)(a1 + 32);
  if (v11 && (float)(v35 * (float)v11) >= v34)
  {
    unint64_t v10 = v4;
  }
  else
  {
    BOOL v36 = 1;
    if (v11 >= 3) {
      BOOL v36 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v11);
    unint64_t v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_74;
    }
    if (prime < v11)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime < v11) {
LABEL_74:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        v10 %= v11;
      }
    }
    else
    {
      v10 &= v11 - 1;
    }
  }
  uint64_t v43 = *(void *)a1;
  std::string v44 = *(void **)(*(void *)a1 + 8 * v10);
  if (v44)
  {
    void *v14 = *v44;
LABEL_97:
    void *v44 = v14;
    goto LABEL_98;
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v43 + 8 * v10) = a1 + 16;
  if (*v14)
  {
    unint64_t v45 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v45 >= v11) {
        v45 %= v11;
      }
    }
    else
    {
      v45 &= v11 - 1;
    }
    std::string v44 = (void *)(*(void *)a1 + 8 * v45);
    goto LABEL_97;
  }
LABEL_98:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_100063378(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10006338C(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    int v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    sub_1000A6A10();
  }
  unint64_t v4 = operator new(8 * a2);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        uint8x8_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          unint64_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          void *v7 = *v12;
          uint64_t v14 = 8 * v13;
          *uint8x8_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          unint64_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    int v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          void *v7 = *v16;
          uint64_t v17 = 8 * v18;
          void *v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          int v16 = v7;
LABEL_25:
          unint64_t v7 = v16;
          int v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          unint64_t v7 = v16;
          int v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

void sub_10006353C(uint64_t a1)
{
  uint64_t v2 = *(void (****)(void))(a1 + 72);
  if (v2)
  {
    uint64_t v3 = *(void (****)(void))(a1 + 80);
    unint64_t v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 5;
      uint64_t v6 = v3 - 5;
      unint64_t v7 = v3 - 5;
      do
      {
        uint64_t v8 = *v7;
        v7 -= 5;
        (*v8)(v6);
        v5 -= 5;
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }
      while (!v9);
      unint64_t v4 = *(void **)(a1 + 72);
    }
    *(void *)(a1 + 80) = v2;
    operator delete(v4);
  }
  unint64_t v10 = *(void **)(a1 + 48);
  if (v10)
  {
    *(void *)(a1 + 56) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 24);
  if (v11)
  {
    do
    {
      uint8x8_t v12 = (void *)*v11;
      operator delete(v11);
      uint64_t v11 = v12;
    }
    while (v12);
  }
  uint64_t v13 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v13) {
    operator delete(v13);
  }
  *(unsigned char *)a1 = 0;
}

uint64_t sub_100063610(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  sub_10007B004(a1 + 80, a2 + 80);
  std::string::operator=((std::string *)(a1 + 904), (const std::string *)(a2 + 904));
  *(unsigned char *)(a1 + 928) = *(unsigned char *)(a2 + 928);
  std::string::operator=((std::string *)(a1 + 936), (const std::string *)(a2 + 936));
  std::string::operator=((std::string *)(a1 + 960), (const std::string *)(a2 + 960));
  *(unsigned char *)(a1 + 984) = *(unsigned char *)(a2 + 984);
  if (a1 != a2)
  {
    sub_10007A09C((uint64_t *)(a1 + 1000), *(void **)(a2 + 1000), (void *)(a2 + 1008));
    sub_10007A09C((uint64_t *)(a1 + 1024), *(void **)(a2 + 1024), (void *)(a2 + 1032));
  }
  *(unsigned char *)(a1 + 1048) = *(unsigned char *)(a2 + 1048);
  sub_10007B4C8(a1 + 1056, a2 + 1056);
  sub_10007C530(a1 + 1440, a2 + 1440);
  *(void *)(a1 + 1600) = *(void *)(a2 + 1600);
  *(void *)(a1 + 1608) = *(void *)(a2 + 1608);
  *(_DWORD *)(a1 + 1616) = *(_DWORD *)(a2 + 1616);
  sub_10007B704(a1 + 1624, a2 + 1624);
  *(_OWORD *)(a1 + 1664) = *(_OWORD *)(a2 + 1664);
  *(_OWORD *)(a1 + 1680) = *(_OWORD *)(a2 + 1680);
  *(_OWORD *)(a1 + 1696) = *(_OWORD *)(a2 + 1696);
  *(void *)(a1 + 1712) = *(void *)(a2 + 1712);
  *(unsigned char *)(a1 + 1720) = *(unsigned char *)(a2 + 1720);
  *(void *)(a1 + 1736) = *(void *)(a2 + 1736);
  *(_OWORD *)(a1 + 1744) = *(_OWORD *)(a2 + 1744);
  *(_OWORD *)(a1 + 1760) = *(_OWORD *)(a2 + 1760);
  *(_OWORD *)(a1 + 1776) = *(_OWORD *)(a2 + 1776);
  *(unsigned char *)(a1 + 1792) = *(unsigned char *)(a2 + 1792);
  if (a1 == a2)
  {
    *(void *)(a1 + 1824) = *(void *)(a2 + 1824);
  }
  else
  {
    sub_10007A3F4((char **)(a1 + 1800), *(void *)(a2 + 1800), *(void *)(a2 + 1808), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 1808) - *(void *)(a2 + 1800)) >> 3));
    *(void *)(a1 + 1824) = *(void *)(a2 + 1824);
    sub_10007AD34((uint64_t *)(a1 + 1832), *(void *)(a2 + 1832), *(void *)(a2 + 1840), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 1840) - *(void *)(a2 + 1832)) >> 4));
  }
  *(_DWORD *)(a1 + 1856) = *(_DWORD *)(a2 + 1856);
  *(unsigned char *)(a1 + 1860) = *(unsigned char *)(a2 + 1860);
  std::string::operator=((std::string *)(a1 + 1864), (const std::string *)(a2 + 1864));
  if (a1 != a2) {
    sub_10007AA14((uint64_t *)(a1 + 1888), *(void *)(a2 + 1888), *(void *)(a2 + 1896), 0xDAB7EC1DD3431B57 * ((uint64_t)(*(void *)(a2 + 1896) - *(void *)(a2 + 1888)) >> 3));
  }
  *(_DWORD *)(a1 + 1912) = *(_DWORD *)(a2 + 1912);
  return a1;
}

void sub_100063824(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_100463190);
    uint64_t v6 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v6 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "building byte offset map for ApRadioMaps", buf, 2u);
  }
LABEL_4:
  *(_OWORD *)std::string __p = 0u;
  long long v27 = 0u;
  *(_OWORD *)uint64_t buf = 0u;
  unint64_t v7 = sub_100065654();
  uint64_t v8 = v7;
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)v7 + 20);
  if ((v9 & 1) == 0 && !*((unsigned char *)v7 + 16))
  {
    *((unsigned char *)v7 + 17) = sub_100059C20((uint64_t)v7, (unsigned char *)v7 + 9);
    *((unsigned char *)v8 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v8 + 20);
  }
  int v10 = *((unsigned __int8 *)v8 + 17);
  uint64_t v11 = sub_1000656E4();
  uint8x8_t v12 = v11;
  unsigned __int8 v13 = atomic_load((unsigned __int8 *)v11 + 20);
  if ((v13 & 1) == 0 && !*((unsigned char *)v11 + 16))
  {
    *((unsigned char *)v11 + 17) = sub_100059C20((uint64_t)v11, (unsigned char *)v11 + 9);
    *((unsigned char *)v12 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v12 + 20);
  }
  int v14 = *((unsigned __int8 *)v12 + 17);
  while ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) != a2)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    sub_100063F14(a1, &v23);
    uint64_t v16 = sub_100064294((uint64_t)&v23);
    sub_1000645D0((uint64_t)v21, v16);
    if (v14) {
      BOOL v17 = v22 == 2;
    }
    else {
      BOOL v17 = 0;
    }
    int v18 = v17;
    BOOL v19 = v22 != 1 || v10 == 0;
    if (!v19 || v18)
    {
      sub_1000647A4(v15);
      sub_100063BA4((uint64_t)v28, (uint64_t)v21);
      sub_10006483C((uint64_t)buf, (uint64_t)v28, v15);
    }
    sub_100064538(v21);
    uint64_t v20 = v24;
    if (v24)
    {
      if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  sub_100065774(a3, (uint64_t *)buf, (uint64_t *)&__p[1]);
  if (__p[1])
  {
    *(void **)&long long v27 = __p[1];
    operator delete(__p[1]);
  }
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_100063AF4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x10006392CLL);
  }
  _Unwind_Resume(a1);
}

void sub_100063B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_100276E08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100063B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_1000BA884((uint64_t)va);
  sub_100276E08((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100063BA4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(_DWORD *)a1 = 0;
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4 == 2)
  {
    sub_10036165C(*(const void ***)(a2 + 16), &v10);
    int v7 = *(_DWORD *)a1;
    if (v7 == v7 >> 31)
    {
      if (v7 == 1)
      {
        *(void *)uint64_t v3 = v10;
      }
      else
      {
        uint64_t v8 = *((void *)&v10 + 1);
        *(void *)(a1 + 8) = v10;
        *(void *)(a1 + 16) = v8;
        *(_DWORD *)(a1 + 24) = v11;
        *(_DWORD *)a1 = 1;
      }
    }
    else
    {
      *(_OWORD *)uint64_t v3 = v10;
      *(_DWORD *)(v3 + 16) = v11;
    }
  }
  else if (v4 == 1)
  {
    unint64_t v5 = sub_100063D00(*(const void ***)(a2 + 16));
    int v6 = *(_DWORD *)a1;
    if (v6 == v6 >> 31 || !v6)
    {
      *(void *)uint64_t v3 = v5;
    }
    else
    {
      *(void *)(a1 + 8) = v5;
      *(_DWORD *)a1 = 0;
    }
  }
  return a1;
}

unint64_t sub_100063D00(const void **a1)
{
  int v1 = *((char *)a1 + 23);
  if ((v1 & 0x80000000) == 0)
  {
    int v7 = (const void *)*((unsigned __int8 *)a1 + 23);
    if (v1 == 6)
    {
      LOBYTE(v1) = 6;
      goto LABEL_5;
    }
LABEL_12:
    sub_1000AE4B0(v9, "");
    sub_10024EC34("WiFi mac address was", &v11);
    sub_1001F3080(&v7, &v12);
    sub_1002700F4(" bytes, should have been 6", &v13);
    sub_10016A2C4((uint64_t)v9, (uint64_t)&v11, 3);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v13.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v12.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_16;
      }
LABEL_20:
      operator delete(v9[0]);
LABEL_16:
      sub_1000D11E0((uint64_t)&__p);
    }
LABEL_19:
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  int v7 = a1[1];
  if (v7 != (const void *)6) {
    goto LABEL_12;
  }
LABEL_5:
  unsigned __int16 v6 = 0;
  unsigned int v5 = 0;
  if ((v1 & 0x80u) == 0) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = *a1;
  }
  if ((v1 & 0x80u) == 0) {
    size_t v3 = v1;
  }
  else {
    size_t v3 = (size_t)a1[1];
  }
  memcpy(&v5, v2, v3);
  return bswap64(v5 | ((unint64_t)v6 << 32)) >> 16;
}

void sub_100063EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100063EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  while (1)
  {
    if (*((char *)v17 - 1) < 0) {
      operator delete(*(v17 - 3));
    }
    v17 -= 3;
    if (v17 == (void **)&a17) {
      JUMPOUT(0x100063EC4);
    }
  }
}

void sub_100063F14(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v14 = a1;
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  memset(v17, 0, 14);
  long long v18 = xmmword_1003E7100;
  int v19 = 0;
  int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::default_recursion_limit_;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  wireless_diagnostics::google::protobuf::io::CodedInputStream::Refresh((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14);
  unsigned int v13 = 0;
  if ((unint64_t)v15 >= v16 || *v15 < 0)
  {
    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14, &v13))
    {
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v12, "error deserialzing ap rssi map");
      v12.__vftable = (std::runtime_error_vtbl *)&off_1004649D0;
      sub_10018E868((uint64_t)v11);
      sub_10031AEF8(&v12, (uint64_t)"static ApRssiMap purpleslam::ApRssiMap::newFromZeroCopyInputStream(google::protobuf::io::ZeroCopyInputStream *)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/radiomap.cpp", 325, (uint64_t)v11);
    }
    unsigned int v3 = v13;
  }
  else
  {
    unsigned int v3 = *v15;
    unsigned int v13 = v3;
    ++v15;
  }
  int v4 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14, v3);
  unsigned int v5 = (std::runtime_error_vtbl *)operator new(0x70uLL);
  v5->~runtime_error_0 = 0;
  v5->what = 0;
  v5->~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))off_100466E18;
  sub_100064318((uint64_t)&v5[1]);
  v12.__vftable = v5 + 1;
  v12.__imp_.__imp_ = (const char *)v5;
  char v6 = wireless_diagnostics::google::protobuf::MessageLite::ParseFromCodedStream((wireless_diagnostics::google::protobuf::MessageLite *)&v5[1], (wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14);
  int v7 = BYTE4(v17[1]);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14, v4);
  if (v7) {
    char v8 = v6;
  }
  else {
    char v8 = 0;
  }
  if ((v8 & 1) == 0)
  {
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v10, "error deserialzing ap rssi map");
    v10.__vftable = (std::runtime_error_vtbl *)&off_1004649D0;
    sub_10018E868((uint64_t)v9);
    sub_10031AEF8(&v10, (uint64_t)"static ApRssiMap purpleslam::ApRssiMap::newFromZeroCopyInputStream(google::protobuf::io::ZeroCopyInputStream *)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/radiomap.cpp", 338, (uint64_t)v9);
  }
  *a2 = v5 + 1;
  a2[1] = v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14);
}

void sub_100064158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a18);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a20);
  _Unwind_Resume(a1);
}

void sub_100064184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, char a20)
{
  std::runtime_error::~runtime_error(&a18);
  __cxa_free_exception(v20);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a20);
  _Unwind_Resume(a1);
}

void sub_1000641B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, std::runtime_error a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a13);
  sub_1000BA884((uint64_t)&a17);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a20);
  _Unwind_Resume(a1);
}

void sub_100064224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a21);
  _Unwind_Resume(a1);
}

void sub_100064244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)va);
  _Unwind_Resume(a1);
}

void sub_100064258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100064270(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100064294(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)a1 + 16);
  if (!result) {
    return *(void *)(qword_100492A20 + 16);
  }
  return result;
}

void sub_1000642B8(void *a1)
{
  *a1 = off_1004675F0;
  uint64_t v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_100064398(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t sub_100064318(uint64_t a1)
{
  *(void *)a1 = off_1004675F0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_100064384(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void *sub_100064398(void *result)
{
  int v1 = result;
  uint64_t v2 = result[7];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  if ((void *)qword_100492A20 != result)
  {
    uint64_t v4 = result[2];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v1[5];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = v1[6];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t result = (void *)v1[8];
    if (result)
    {
      int v7 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v7();
    }
  }
  return result;
}

void sub_1000644D0(uint64_t a1)
{
  *(void *)a1 = off_100467120;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100064538(void *a1)
{
  *a1 = off_100467070;
  uint64_t v2 = a1[2];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t sub_1000645D0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100467070;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  sub_100064680(a1, a2);
  return a1;
}

void sub_100064650(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_10006466C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100064680(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 32);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      int v5 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v5;
      int v4 = *(_DWORD *)(a2 + 32);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 2u;
      int v7 = *(std::string **)(a1 + 16);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v7, v6);
    }
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10006477C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100064790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

int64_t sub_1000647A4(int64_t result)
{
  int v1 = 2 * (result > 0x7FFFFFFF);
  if (result <= (uint64_t)0xFFFFFFFF7FFFFFFFLL) {
    int v1 = 1;
  }
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    unsigned int v3 = sub_10015F6A0(exception);
  }
  if (v1 == 1)
  {
    int v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    int v5 = sub_10015F668(v4);
  }
  return result;
}

uint64_t sub_10006483C(uint64_t a1, uint64_t a2, int a3)
{
  int v10 = a3;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= *(void *)(a1 + 16))
    {
      uint64_t result = (uint64_t)sub_10006493C((char **)a1, (_DWORD *)a2, &v10);
      *(void *)(a1 + 8) = result;
    }
    else
    {
      uint64_t result = sub_10006F1A8((uint64_t)&v11, *(void *)(a2 + 8));
      int v6 = v10;
      int v7 = v11;
      *(_WORD *)(v4 + 4) = v12;
      *(_DWORD *)unint64_t v4 = v7;
      *(_DWORD *)(v4 + 6) = v6;
      *(void *)(a1 + 8) = v4 + 10;
      *(void *)(a1 + 8) = v4 + 10;
    }
  }
  else
  {
    unint64_t v8 = *(void *)(a1 + 32);
    if (v8 >= *(void *)(a1 + 40))
    {
      uint64_t result = (uint64_t)sub_10027D354((void **)(a1 + 24), (int *)a2, &v10);
      *(void *)(a1 + 32) = result;
    }
    else
    {
      long long v9 = *(_OWORD *)(a2 + 8);
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a2 + 24);
      *(_OWORD *)(v8 + 8) = v9;
      *(_DWORD *)unint64_t v8 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
      *(_DWORD *)(v8 + 32) = v10;
      uint64_t result = v8 + 40;
      *(void *)(a1 + 32) = v8 + 40;
    }
  }
  return result;
}

void sub_100064934(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_10006493C(char **a1, _DWORD *a2, int *a3)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 1);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1999999999999999) {
    sub_1000A9108();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 1) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 1);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 1) >= 0xCCCCCCCCCCCCCCCLL) {
    unint64_t v8 = 0x1999999999999999;
  }
  else {
    unint64_t v8 = v5;
  }
  if (!v8)
  {
    long long v9 = 0;
    unint64_t v24 = &v23;
    int v10 = (unint64_t *)(a2 + 2);
    if (*a2 == (int)*a2 >> 31) {
      goto LABEL_10;
    }
LABEL_12:
    sub_1001E7354();
  }
  if (v8 > 0x1999999999999999) {
    sub_1000A6A10();
  }
  long long v9 = (char *)operator new(10 * v8);
  unint64_t v24 = &v23;
  int v11 = *a2;
  int v10 = (unint64_t *)(a2 + 2);
  if (v11 != v11 >> 31) {
    goto LABEL_12;
  }
LABEL_10:
  sub_10006F1A8((uint64_t)&v21, *v10);
  __int16 v12 = &v9[10 * v4];
  int v13 = *a3;
  int v14 = v21;
  *((_WORD *)v12 + 2) = v22;
  *(_DWORD *)__int16 v12 = v14;
  *(_DWORD *)(v12 + 6) = v13;
  uint64_t v15 = v12 + 10;
  BOOL v17 = *a1;
  unint64_t v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      uint64_t v18 = *(void *)(v16 - 10);
      v16 -= 10;
      __int16 v19 = *((_WORD *)v16 + 4);
      *(void *)(v12 - 10) = v18;
      v12 -= 10;
      *((_WORD *)v12 + 4) = v19;
    }
    while (v16 != v17);
    unint64_t v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = &v9[10 * v8];
  if (v16) {
    operator delete(v16);
  }
  return v15;
}

void sub_100064AB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100064AC8(uint64_t a1)
{
  *(void *)a1 = off_1004676A0;
  uint64_t v2 = *(void *)(a1 + 72);
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  if (qword_100492A28 != a1)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  int v5 = *(_DWORD *)(a1 + 52);
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i < v5; ++i)
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8 * i);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        int v5 = *(_DWORD *)(a1 + 52);
      }
    }
  }
  if (*(void *)(a1 + 40)) {
    operator delete[]();
  }
  int v8 = *(_DWORD *)(a1 + 28);
  if (v8 >= 1)
  {
    for (uint64_t j = 0; j < v8; ++j)
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 16) + 8 * j);
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        int v8 = *(_DWORD *)(a1 + 28);
      }
    }
  }
  if (*(void *)(a1 + 16)) {
    operator delete[]();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100064C84(void *a1)
{
  *a1 = off_100467070;
  uint64_t v2 = a1[2];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100064D30(uint64_t a1)
{
  *(void *)a1 = off_1004671D0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100064D98(void *a1)
{
  *a1 = off_100467BC8;
  uint64_t v2 = a1[3];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  if ((void *)qword_100492A58 != a1)
  {
    uint64_t v4 = a1[2];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100064E80(uint64_t a1)
{
  *(void *)a1 = off_100467B18;
  sub_100065068((void *)a1);
  int v2 = *(_DWORD *)(a1 + 124);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 112) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *(_DWORD *)(a1 + 124);
      }
    }
  }
  if (*(void *)(a1 + 112)) {
    operator delete[]();
  }
  int v5 = *(_DWORD *)(a1 + 92);
  if (v5 >= 1)
  {
    for (uint64_t j = 0; j < v5; ++j)
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 80) + 8 * j);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        int v5 = *(_DWORD *)(a1 + 92);
      }
    }
  }
  if (*(void *)(a1 + 80)) {
    operator delete[]();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100064FC4(void *a1)
{
  *a1 = off_100467908;
  if (a1[5]) {
    operator delete[]();
  }
  if (a1[2]) {
    operator delete[]();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void *sub_100065068(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[2];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete();
  }
  if ((void *)qword_100492A50 != result)
  {
    uint64_t v4 = result[4];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v1[5];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = v1[6];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = v1[8];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = v1[9];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = v1[20];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t result = (void *)v1[21];
    if (result)
    {
      uint64_t v10 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v10();
    }
  }
  return result;
}

void sub_100065224(void *a1)
{
  *a1 = off_100467F00;
  if ((void *)qword_100492A78 != a1)
  {
    uint64_t v2 = a1[3];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_1000652CC(void *a1)
{
  *a1 = off_100467E50;
  if ((void *)qword_100492A70 != a1)
  {
    uint64_t v2 = a1[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100065374(uint64_t a1)
{
  *(void *)a1 = off_100467DA0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_1000653DC(uint64_t a1)
{
  *(void *)a1 = off_100467A68;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100065444(uint64_t a1)
{
  *(void *)a1 = off_100466EE0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_1000654AC(uint64_t a1)
{
  *(void *)a1 = off_100467CF0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100065514(uint64_t a1)
{
  sub_10006554C(a1);

  operator delete();
}

void sub_10006554C(uint64_t a1)
{
  *(void *)a1 = off_1004679B8;
  if (qword_100492A40 != a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  int v3 = *(_DWORD *)(a1 + 36);
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i < v3; ++i)
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        int v3 = *(_DWORD *)(a1 + 36);
      }
    }
  }
  if (*(void *)(a1 + 24)) {
    operator delete[]();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t *sub_100065654()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047E570, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_10047E570))
  {
    return &qword_10047E5F0;
  }
  qword_10047E5F0 = (uint64_t)sub_100163808();
  unk_10047E5F8 = v1;
  byte_10047E600 = 0;
  byte_10047E602 = 0;
  byte_10047E604 = 0;
  __cxa_guard_release(&qword_10047E570);
  return &qword_10047E5F0;
}

void sub_1000656CC(_Unwind_Exception *a1)
{
}

uint64_t *sub_1000656E4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047E568, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_10047E568))
  {
    return &qword_10047E5D8;
  }
  qword_10047E5D8 = (uint64_t)sub_1001637F8();
  unk_10047E5E0 = v1;
  byte_10047E5E8 = 0;
  byte_10047E5EA = 0;
  byte_10047E5EC = 0;
  __cxa_guard_release(&qword_10047E568);
  return &qword_10047E5D8;
}

void sub_10006575C(_Unwind_Exception *a1)
{
}

uint64_t sub_100065774(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = (uint8_t *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v7 = *a2;
  uint64_t v8 = (unsigned int *)a2[1];
  if ((unsigned int *)v7 != v8)
  {
    sub_100065B84(v7, v8, (uint64_t)buf, 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v8 - v7) >> 1)), 1);
    uint64_t v9 = (int *)*a2;
    uint64_t v10 = a2[1];
    memset(buf, 0, sizeof(buf));
    uint64_t v12 = v10 - (void)v9;
    BOOL v11 = v12 == 0;
    uint64_t v13 = v12 >> 1;
    if (v11) {
      *(void *)&uint8_t buf[8] = 0xCCCCCCCCCCCCCCCDLL * v13;
    }
    else {
      sub_10006661C((char **)buf, 0, 0xCCCCCCCCCCCCCCCDLL * v13, v9, &v31);
    }
    if (buf == (uint8_t *)a1)
    {
      if (*(void *)&buf[16]) {
        operator delete(*(void **)buf);
      }
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      if (*(void *)a1) {
        operator delete(*(void **)a1);
      }
      *(void *)a1 = *(void *)buf;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)&buf[8];
    }
    unint64_t v14 = *(void *)(a1 + 16);
    if (!v14)
    {
LABEL_19:
      if (qword_10047BED8 == -1)
      {
        int v20 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
        {
LABEL_22:
          a2[1] = *a2;
          goto LABEL_23;
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_100463190);
        int v20 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_22;
        }
      }
      uint64_t v21 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134217984;
      *(void *)&uint8_t buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "constructed in-memory map of wifi aprssimap byte offsets, number of entries, %zu", buf, 0xCu);
      goto LABEL_22;
    }
    unint64_t v15 = *(void *)(a1 + 8);
    if (v15)
    {
      if (v15 >= v14) {
        goto LABEL_19;
      }
      if (v15 >= 0xCCCCCCCCCCCCCCDLL) {
        sub_1002782B4((uint64_t)"get_next_capacity, allocator's max size reached");
      }
      unint64_t v16 = operator new(10 * v15);
      BOOL v17 = v16;
      uint64_t v18 = *(void **)a1;
      if (*(void *)a1 && (uint64_t v19 = *(void *)(a1 + 8)) != 0)
      {
        memmove(v16, *(const void **)a1, 10 * v19);
      }
      else if (!v18)
      {
        goto LABEL_18;
      }
    }
    else
    {
      BOOL v17 = 0;
      uint64_t v18 = *(void **)a1;
      if (!*(void *)a1)
      {
LABEL_18:
        *(void *)a1 = v17;
        *(void *)(a1 + 16) = v15;
        goto LABEL_19;
      }
    }
    operator delete(v18);
    goto LABEL_18;
  }
LABEL_23:
  __int16 v22 = (int *)a3[1];
  if ((int *)*a3 != v22)
  {
    sub_10027835C(*a3, v22, (uint64_t)buf, 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v22 - *a3) >> 3)), 1);
    char v23 = (_DWORD *)*a3;
    uint64_t v24 = a3[1];
    memset(buf, 0, sizeof(buf));
    uint64_t v25 = v24 - (void)v23;
    BOOL v11 = v25 == 0;
    uint64_t v26 = v25 >> 3;
    if (v11) {
      *(void *)&uint8_t buf[8] = 0xCCCCCCCCCCCCCCCDLL * v26;
    }
    else {
      sub_10027CDA4(buf, 0, 0xCCCCCCCCCCCCCCCDLL * v26, v23, &v31);
    }
    if (buf == v6)
    {
      if (*(void *)&buf[16]) {
        operator delete(*(void **)buf);
      }
    }
    else
    {
      *(void *)(a1 + 32) = 0;
      long long v27 = *(void **)(a1 + 24);
      if (v27) {
        operator delete(v27);
      }
      *(void *)(a1 + 24) = *(void *)buf;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)&buf[8];
    }
    sub_10027D040((char **)v6);
    if (qword_10047BED8 == -1)
    {
      uint8x8_t v28 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_34:
        a3[1] = *a3;
        return a1;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100463190);
      uint8x8_t v28 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_34;
      }
    }
    uint64_t v29 = *(void *)(a1 + 32);
    *(_DWORD *)uint64_t buf = 134217984;
    *(void *)&uint8_t buf[4] = v29;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "constructed in-memory map of iBeacon aprssimap byte offsets , number of entries, %zu", buf, 0xCu);
    goto LABEL_34;
  }
  return a1;
}

void sub_100065B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (a13)
  {
    operator delete(__p);
    if (!*(void *)(v13 + 40))
    {
LABEL_3:
      if (!*(void *)(v13 + 16)) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if (!*(void *)(v13 + 40))
  {
    goto LABEL_3;
  }
  operator delete(*v14);
  if (!*(void *)(v13 + 16)) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100065B84(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (unsigned int *)result;
LABEL_2:
  BOOL v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v11) >> 1);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint8x8_t v28 = (uint64_t *)((char *)a2 - 10);
          unint64_t v29 = *v11 | ((unint64_t)*((unsigned __int16 *)v11 + 2) << 32);
          unint64_t v30 = *(unsigned int *)((char *)a2 - 10) | ((unint64_t)*((unsigned __int16 *)a2 - 3) << 32);
          if (v29 > v30 || v30 <= v29 && (int)*(a2 - 1) < *(int *)((char *)v11 + 6))
          {
            __int16 v73 = *((_WORD *)v11 + 4);
            uint64_t v70 = *(void *)v11;
            uint64_t v31 = *v28;
            *((_WORD *)v11 + 4) = *((_WORD *)a2 - 1);
            *(void *)BOOL v11 = v31;
            uint64_t *v28 = v70;
            *((_WORD *)a2 - 1) = v73;
          }
          break;
        case 3uLL:
          uint64_t result = sub_100066268(v11, (unsigned int *)((char *)v11 + 10), (unsigned int *)((char *)a2 - 10));
          break;
        case 4uLL:
          int v32 = (uint64_t *)((char *)v11 + 10);
          int v33 = (uint64_t *)(v11 + 5);
          uint64_t result = sub_100066268(v11, (unsigned int *)((char *)v11 + 10), v11 + 5);
          float v34 = (uint64_t *)((char *)a2 - 10);
          unint64_t v35 = v11[5] | ((unint64_t)*((unsigned __int16 *)v11 + 12) << 32);
          unint64_t v36 = *(unsigned int *)((char *)a2 - 10) | ((unint64_t)*((unsigned __int16 *)a2 - 3) << 32);
          if (v35 > v36 || v36 <= v35 && (int)*(a2 - 1) < *(int *)((char *)v11 + 26))
          {
            __int16 v37 = *((_WORD *)v11 + 14);
            uint64_t v38 = *v33;
            __int16 v39 = *((_WORD *)a2 - 1);
            *int v33 = *v34;
            *((_WORD *)v11 + 14) = v39;
            uint64_t *v34 = v38;
            *((_WORD *)a2 - 1) = v37;
            unint64_t v40 = *(unsigned int *)((char *)v11 + 10) | ((unint64_t)*((unsigned __int16 *)v11 + 7) << 32);
            unint64_t v41 = v11[5] | ((unint64_t)*((unsigned __int16 *)v11 + 12) << 32);
            if (v40 > v41 || v41 <= v40 && *(int *)((char *)v11 + 26) < (int)v11[4])
            {
              __int16 v42 = *((_WORD *)v11 + 9);
              uint64_t v43 = *v32;
              uint64_t *v32 = *v33;
              *((_WORD *)v11 + 9) = *((_WORD *)v11 + 14);
              *int v33 = v43;
              *((_WORD *)v11 + 14) = v42;
              unint64_t v44 = *v11 | ((unint64_t)*((unsigned __int16 *)v11 + 2) << 32);
              unint64_t v45 = *(unsigned int *)((char *)v11 + 10) | ((unint64_t)*((unsigned __int16 *)v11 + 7) << 32);
              if (v44 > v45 || v45 <= v44 && (int)v11[4] < *(int *)((char *)v11 + 6))
              {
                __int16 v74 = *((_WORD *)v11 + 4);
                uint64_t v71 = *(void *)v11;
                *(void *)BOOL v11 = *v32;
                *((_WORD *)v11 + 4) = *((_WORD *)v11 + 9);
                uint64_t *v32 = v71;
                *((_WORD *)v11 + 9) = v74;
              }
            }
          }
          break;
        case 5uLL:
          uint64_t result = sub_1000667D0(v11, (unsigned int *)((char *)v11 + 10), v11 + 5, (unsigned int *)((char *)v11 + 30), (unsigned int *)((char *)a2 - 10));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 239)
    {
      int v46 = (char *)v11 + 10;
      BOOL v48 = v11 == a2 || v46 == (char *)a2;
      if (a5)
      {
        if (v48) {
          return result;
        }
        uint64_t v49 = 0;
        unint64_t v50 = v11;
        while (2)
        {
          uint64_t v51 = v50;
          unint64_t v50 = (unsigned int *)v46;
          unint64_t v52 = *v51 | ((unint64_t)*((unsigned __int16 *)v51 + 2) << 32);
          unint64_t v53 = *(unsigned int *)((char *)v51 + 10) | ((unint64_t)*((unsigned __int16 *)v51 + 7) << 32);
          if (v52 > v53)
          {
            signed int v54 = v51[4];
            goto LABEL_53;
          }
          if (v53 <= v52)
          {
            signed int v54 = v51[4];
            if (v54 < *(int *)((char *)v51 + 6))
            {
LABEL_53:
              *(void *)unint64_t v50 = *(void *)v51;
              *((_WORD *)v50 + 4) = *((_WORD *)v51 + 4);
              uint64_t v55 = v11;
              if (v51 != v11)
              {
                uint64_t v56 = v49;
                while (1)
                {
                  int v57 = (char *)v11 + v56;
                  unint64_t v58 = *(unsigned int *)((char *)v11 + v56 - 10) | ((unint64_t)*(unsigned __int16 *)((char *)v11 + v56 - 6) << 32);
                  if (v58 <= v53)
                  {
                    if (v53 > v58)
                    {
                      uint64_t v55 = (unsigned int *)((char *)v11 + v56);
                      goto LABEL_47;
                    }
                    if (v54 >= *(int *)((char *)v11 + v56 - 4)) {
                      break;
                    }
                  }
                  uint64_t v51 = (unsigned int *)((char *)v51 - 10);
                  *(void *)int v57 = *(void *)((char *)v11 + v56 - 10);
                  *((_WORD *)v57 + 4) = *(_WORD *)((char *)v11 + v56 - 2);
                  v56 -= 10;
                  if (!v56)
                  {
                    uint64_t v55 = v11;
                    goto LABEL_47;
                  }
                }
                uint64_t v55 = v51;
              }
LABEL_47:
              unsigned int *v55 = v53;
              *((_WORD *)v55 + 2) = WORD2(v53);
              *(unsigned int *)((char *)v55 + 6) = v54;
            }
          }
          int v46 = (char *)v50 + 10;
          v49 += 10;
          if ((unsigned int *)((char *)v50 + 10) == a2) {
            return result;
          }
          continue;
        }
      }
      if (v48) {
        return result;
      }
      while (2)
      {
        int v62 = v10;
        uint64_t v10 = (unsigned int *)v46;
        unint64_t v63 = *v62 | ((unint64_t)*((unsigned __int16 *)v62 + 2) << 32);
        unint64_t v64 = *(unsigned int *)((char *)v62 + 10) | ((unint64_t)*((unsigned __int16 *)v62 + 7) << 32);
        if (v63 <= v64)
        {
          if (v64 <= v63)
          {
            signed int v65 = v62[4];
            if (v65 < *(int *)((char *)v62 + 6)) {
              goto LABEL_82;
            }
          }
        }
        else
        {
          signed int v65 = v62[4];
          do
          {
            do
            {
LABEL_82:
              int v66 = v62;
              *(void *)((char *)v62 + 10) = *(void *)v62;
              *((_WORD *)v62 + 9) = *((_WORD *)v62 + 4);
              unsigned int v67 = *(unsigned int *)((char *)v62 - 10);
              int v62 = (unsigned int *)((char *)v62 - 10);
              unint64_t v68 = v67 | ((unint64_t)*((unsigned __int16 *)v66 - 3) << 32);
            }
            while (v68 > v64);
          }
          while (v64 <= v68 && v65 < (int)*(v66 - 1));
          unsigned int *v66 = v64;
          *((_WORD *)v66 + 2) = WORD2(v64);
          *(unsigned int *)((char *)v66 + 6) = v65;
        }
        int v46 = (char *)v10 + 10;
        if ((unsigned int *)((char *)v10 + 10) == a2) {
          return result;
        }
        continue;
      }
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    BOOL v17 = (unsigned int *)((char *)v11 + 10 * (v15 >> 1));
    if ((unint64_t)v14 < 0x501)
    {
      sub_100066268(v17, v11, (unsigned int *)((char *)a2 - 10));
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_100066268(v11, v17, (unsigned int *)((char *)a2 - 10));
      uint64_t v18 = 10 * v16;
      uint64_t v19 = (unsigned int *)((char *)v11 + 10 * v16 - 10);
      sub_100066268((unsigned int *)((char *)v11 + 10), v19, a2 - 5);
      int v20 = v11 + 5;
      uint64_t v21 = (unsigned int *)((char *)v11 + v18 + 10);
      sub_100066268(v20, v21, (unsigned int *)((char *)a2 - 30));
      sub_100066268(v19, v17, v21);
      __int16 v72 = *((_WORD *)v10 + 4);
      uint64_t v69 = *(void *)v10;
      uint64_t v22 = *(void *)v17;
      *((_WORD *)v10 + 4) = *((_WORD *)v17 + 4);
      *(void *)uint64_t v10 = v22;
      *((_WORD *)v17 + 4) = v72;
      *(void *)BOOL v17 = v69;
      if (a5) {
        goto LABEL_15;
      }
    }
    unint64_t v23 = *v10 | ((unint64_t)*((unsigned __int16 *)v10 + 2) << 32);
    unint64_t v24 = *(unsigned int *)((char *)v10 - 10) | ((unint64_t)*((unsigned __int16 *)v10 - 3) << 32);
    if (v23 <= v24 && (v24 > v23 || (int)*(v10 - 1) >= *(int *)((char *)v10 + 6)))
    {
      uint64_t result = (uint64_t)sub_100277D1C(v10, a2);
      BOOL v11 = (unsigned int *)result;
      goto LABEL_20;
    }
LABEL_15:
    uint64_t v25 = (unsigned int *)sub_100066478(v10, (unint64_t)a2);
    if ((v26 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v27 = sub_100066AB8(v10, v25);
    BOOL v11 = (unsigned int *)((char *)v25 + 10);
    uint64_t result = sub_100066AB8((unsigned int *)((char *)v25 + 10), a2);
    if (result)
    {
      a4 = -v13;
      a2 = v25;
      if (v27) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v27)
    {
LABEL_18:
      uint64_t result = sub_100065B84(v10, v25, a3, -v13, a5 & 1);
      BOOL v11 = (unsigned int *)((char *)v25 + 10);
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (v11 != a2)
  {
    unint64_t v59 = (v15 - 2) >> 1;
    unint64_t v60 = v59 + 1;
    int v61 = (unsigned int *)((char *)v11 + 10 * v59);
    do
    {
      sub_100277EDC((uint64_t)v11, a3, v15, v61);
      int v61 = (unsigned int *)((char *)v61 - 10);
      --v60;
    }
    while (v60);
    return (uint64_t)sub_100278098((char *)v11, (char *)a2);
  }
  return result;
}

uint64_t sub_100066268(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v3 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
  unint64_t v4 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
  if (v3 <= v4 && (v4 > v3 || *(int *)((char *)a2 + 6) >= *(int *)((char *)a1 + 6)))
  {
    unint64_t v10 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    if (v4 > v10) {
      goto LABEL_7;
    }
    if (v10 > v4) {
      return 0;
    }
    if (*(int *)((char *)a3 + 6) < *(int *)((char *)a2 + 6))
    {
LABEL_7:
      __int16 v11 = *((_WORD *)a2 + 4);
      uint64_t v12 = *(void *)a2;
      __int16 v13 = *((_WORD *)a3 + 4);
      *(void *)a2 = *(void *)a3;
      *((_WORD *)a2 + 4) = v13;
      *(void *)a3 = v12;
      *((_WORD *)a3 + 4) = v11;
      unint64_t v14 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
      unint64_t v15 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
      if (v14 > v15) {
        goto LABEL_8;
      }
      if (v15 > v14) {
        return 1;
      }
      if (*(int *)((char *)a2 + 6) < *(int *)((char *)a1 + 6))
      {
LABEL_8:
        __int16 v16 = *((_WORD *)a1 + 4);
        uint64_t v17 = *(void *)a1;
        __int16 v18 = *((_WORD *)a2 + 4);
        *(void *)a1 = *(void *)a2;
        *((_WORD *)a1 + 4) = v18;
        *(void *)a2 = v17;
        *((_WORD *)a2 + 4) = v16;
        return 2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unint64_t v5 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    if (v4 > v5 || v5 <= v4 && *(int *)((char *)a3 + 6) < *(int *)((char *)a2 + 6))
    {
      __int16 v6 = *((_WORD *)a1 + 4);
      uint64_t v7 = *(void *)a1;
      __int16 v8 = *((_WORD *)a3 + 4);
      *(void *)a1 = *(void *)a3;
      *((_WORD *)a1 + 4) = v8;
      *(void *)a3 = v7;
      *((_WORD *)a3 + 4) = v6;
      return 1;
    }
    __int16 v19 = *((_WORD *)a1 + 4);
    uint64_t v20 = *(void *)a1;
    __int16 v21 = *((_WORD *)a2 + 4);
    *(void *)a1 = *(void *)a2;
    *((_WORD *)a1 + 4) = v21;
    *(void *)a2 = v20;
    *((_WORD *)a2 + 4) = v19;
    unint64_t v22 = v20 | ((unint64_t)WORD2(v20) << 32);
    unint64_t v23 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    if (v22 > v23) {
      goto LABEL_12;
    }
    if (v23 <= v22)
    {
      if (*(int *)((char *)a3 + 6) < *(int *)((char *)a2 + 6))
      {
LABEL_12:
        __int16 v24 = *((_WORD *)a2 + 4);
        uint64_t v25 = *(void *)a2;
        __int16 v26 = *((_WORD *)a3 + 4);
        *(void *)a2 = *(void *)a3;
        *((_WORD *)a2 + 4) = v26;
        *(void *)a3 = v25;
        *((_WORD *)a3 + 4) = v24;
        return 2;
      }
      return 1;
    }
    else
    {
      return 1;
    }
  }
}

char *sub_100066478(unsigned int *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
  signed int v4 = *(unsigned int *)((char *)a1 + 6);
  while (1)
  {
    unint64_t v5 = *(unsigned int *)((char *)a1 + v2 + 10) | ((unint64_t)*(unsigned __int16 *)((char *)a1 + v2 + 14) << 32);
    if (v3 <= v5 && (v5 > v3 || *(int *)((char *)a1 + v2 + 16) >= v4)) {
      break;
    }
    v2 += 10;
  }
  unint64_t v6 = (unint64_t)a1 + v2 + 10;
  if (v2)
  {
    do
    {
      unsigned int v7 = *(_DWORD *)(a2 - 10);
      a2 -= 10;
      unint64_t v8 = v7 | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 32);
    }
    while (v3 <= v8 && (v8 > v3 || *(_DWORD *)(a2 + 6) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        unsigned int v9 = *(_DWORD *)(a2 - 10);
        a2 -= 10;
        unint64_t v10 = v9 | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 32);
        if (v3 > v10) {
          break;
        }
        if (v10 > v3) {
          goto LABEL_19;
        }
      }
      while (*(_DWORD *)(a2 + 6) >= v4 && v6 < a2);
    }
  }
  uint64_t v12 = (unsigned int *)v6;
  if (v6 < a2)
  {
    unint64_t v13 = a2;
    do
    {
      __int16 v21 = *((_WORD *)v12 + 4);
      uint64_t v20 = *(void *)v12;
      uint64_t v14 = *(void *)v13;
      *((_WORD *)v12 + 4) = *(_WORD *)(v13 + 8);
      *(void *)uint64_t v12 = v14;
      *(_WORD *)(v13 + 8) = v21;
      *(void *)unint64_t v13 = v20;
      do
      {
        do
        {
          uint64_t v12 = (unsigned int *)((char *)v12 + 10);
          unint64_t v15 = *v12 | ((unint64_t)*((unsigned __int16 *)v12 + 2) << 32);
        }
        while (v3 > v15);
      }
      while (v15 <= v3 && *(int *)((char *)v12 + 6) < v4);
      do
      {
        unsigned int v16 = *(_DWORD *)(v13 - 10);
        v13 -= 10;
        unint64_t v17 = v16 | ((unint64_t)*(unsigned __int16 *)(v13 + 4) << 32);
      }
      while (v3 <= v17 && (v17 > v3 || *(_DWORD *)(v13 + 6) >= v4));
    }
    while ((unint64_t)v12 < v13);
  }
  if ((unsigned int *)((char *)v12 - 10) != a1)
  {
    uint64_t v18 = *(void *)((char *)v12 - 10);
    *((_WORD *)a1 + 4) = *((_WORD *)v12 - 1);
    *(void *)a1 = v18;
  }
  *(unsigned int *)((char *)v12 - 10) = v3;
  *((_WORD *)v12 - 3) = WORD2(v3);
  *(v12 - 1) = v4;
  return (char *)v12 - 10;
}

void sub_10006661C(char **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, void *a5@<X8>)
{
  unint64_t v6 = a1[1];
  unint64_t v7 = (unint64_t)a1[2];
  if (0xCCCCCCCCCCCCCCCLL - v7 < (unint64_t)&v6[a3 - v7]) {
    goto LABEL_25;
  }
  unint64_t v9 = v7 >> 61;
  unint64_t v10 = 8 * v7;
  if (v9 > 4) {
    uint64_t v11 = -1;
  }
  else {
    uint64_t v11 = v10;
  }
  unint64_t v12 = v10 / 5;
  if (v9) {
    unint64_t v12 = v11;
  }
  unint64_t v13 = (unint64_t)&v6[a3];
  if (v12 >= 0xCCCCCCCCCCCCCCCLL) {
    unint64_t v12 = 0xCCCCCCCCCCCCCCCLL;
  }
  unint64_t v14 = v13 <= v12 ? v12 : v13;
  if (v14 > 0xCCCCCCCCCCCCCCCLL) {
LABEL_25:
  }
    sub_1002782B4((uint64_t)"get_next_capacity, allocator's max size reached");
  uint64_t v18 = *a1;
  __int16 v19 = (char *)operator new(10 * v14);
  uint64_t v20 = v19;
  unint64_t v22 = *a1;
  __int16 v21 = a1[1];
  unint64_t v23 = v19;
  if (*a1)
  {
    unint64_t v23 = v19;
    if (v22 != a2)
    {
      memmove(v19, v22, a2 - v22);
      unint64_t v23 = &v20[a2 - v22];
    }
  }
  if (a3)
  {
    uint64_t v24 = a3;
    uint64_t v25 = v23;
    do
    {
      int v26 = *a4;
      *((_WORD *)v25 + 2) = *((_WORD *)a4 + 2);
      *(_DWORD *)uint64_t v25 = v26;
      *(_DWORD *)(v25 + 6) = *(int *)((char *)a4 + 6);
      v25 += 10;
      a4 = (int *)((char *)a4 + 10);
      --v24;
    }
    while (v24);
  }
  if (a2)
  {
    BOOL v27 = &v22[10 * (void)v21];
    if (v27 != a2) {
      memmove(&v23[10 * a3], a2, v27 - a2);
    }
  }
  if (v22)
  {
    operator delete(v22);
    __int16 v21 = a1[1];
  }
  *a1 = v20;
  a1[1] = &v21[a3];
  a1[2] = (char *)v14;
  *a5 = &v20[a2 - v18];
}

uint64_t sub_1000667D0(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = sub_100066268(a1, a2, a3);
  unint64_t v11 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
  unint64_t v12 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
  if (v11 > v12 || v12 <= v11 && *(int *)((char *)a4 + 6) < *(int *)((char *)a3 + 6))
  {
    __int16 v13 = *((_WORD *)a3 + 4);
    uint64_t v14 = *(void *)a3;
    __int16 v15 = *((_WORD *)a4 + 4);
    *(void *)a3 = *(void *)a4;
    *((_WORD *)a3 + 4) = v15;
    *(void *)a4 = v14;
    *((_WORD *)a4 + 4) = v13;
    unint64_t v16 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
    unint64_t v17 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    if (v16 > v17 || v17 <= v16 && *(int *)((char *)a3 + 6) < *(int *)((char *)a2 + 6))
    {
      __int16 v18 = *((_WORD *)a2 + 4);
      uint64_t v19 = *(void *)a2;
      __int16 v20 = *((_WORD *)a3 + 4);
      *(void *)a2 = *(void *)a3;
      *((_WORD *)a2 + 4) = v20;
      *(void *)a3 = v19;
      *((_WORD *)a3 + 4) = v18;
      unint64_t v21 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
      unint64_t v22 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
      if (v21 > v22 || v22 <= v21 && *(int *)((char *)a2 + 6) < *(int *)((char *)a1 + 6))
      {
        __int16 v23 = *((_WORD *)a1 + 4);
        uint64_t v24 = *(void *)a1;
        __int16 v25 = *((_WORD *)a2 + 4);
        *(void *)a1 = *(void *)a2;
        *((_WORD *)a1 + 4) = v25;
        *(void *)a2 = v24;
        *((_WORD *)a2 + 4) = v23;
      }
    }
  }
  unint64_t v26 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
  unint64_t v27 = *a5 | ((unint64_t)*((unsigned __int16 *)a5 + 2) << 32);
  if (v26 > v27 || v27 <= v26 && *(int *)((char *)a5 + 6) < *(int *)((char *)a4 + 6))
  {
    __int16 v28 = *((_WORD *)a4 + 4);
    uint64_t v29 = *(void *)a4;
    __int16 v30 = *((_WORD *)a5 + 4);
    *(void *)a4 = *(void *)a5;
    *((_WORD *)a4 + 4) = v30;
    *(void *)a5 = v29;
    *((_WORD *)a5 + 4) = v28;
    unint64_t v31 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    unint64_t v32 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
    if (v31 > v32 || v32 <= v31 && *(int *)((char *)a4 + 6) < *(int *)((char *)a3 + 6))
    {
      __int16 v33 = *((_WORD *)a3 + 4);
      uint64_t v34 = *(void *)a3;
      __int16 v35 = *((_WORD *)a4 + 4);
      *(void *)a3 = *(void *)a4;
      *((_WORD *)a3 + 4) = v35;
      *(void *)a4 = v34;
      *((_WORD *)a4 + 4) = v33;
      unint64_t v36 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
      unint64_t v37 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
      if (v36 > v37 || v37 <= v36 && *(int *)((char *)a3 + 6) < *(int *)((char *)a2 + 6))
      {
        __int16 v38 = *((_WORD *)a2 + 4);
        uint64_t v39 = *(void *)a2;
        __int16 v40 = *((_WORD *)a3 + 4);
        *(void *)a2 = *(void *)a3;
        *((_WORD *)a2 + 4) = v40;
        *(void *)a3 = v39;
        *((_WORD *)a3 + 4) = v38;
        unint64_t v41 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
        unint64_t v42 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
        if (v41 > v42 || v42 <= v41 && *(int *)((char *)a2 + 6) < *(int *)((char *)a1 + 6))
        {
          __int16 v43 = *((_WORD *)a1 + 4);
          uint64_t v44 = *(void *)a1;
          __int16 v45 = *((_WORD *)a2 + 4);
          *(void *)a1 = *(void *)a2;
          *((_WORD *)a1 + 4) = v45;
          *(void *)a2 = v44;
          *((_WORD *)a2 + 4) = v43;
        }
      }
    }
  }
  return result;
}

BOOL sub_100066AB8(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 1;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v16 = (void *)((char *)a2 - 10);
      unint64_t v17 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
      unint64_t v18 = *(unsigned int *)((char *)a2 - 10) | ((unint64_t)*((unsigned __int16 *)a2 - 3) << 32);
      if (v17 > v18 || v18 <= v17 && (int)*(a2 - 1) < *(int *)((char *)a1 + 6))
      {
        __int16 v19 = *((_WORD *)a1 + 4);
        uint64_t v20 = *(void *)a1;
        __int16 v21 = *((_WORD *)a2 - 1);
        *(void *)a1 = *v16;
        *((_WORD *)a1 + 4) = v21;
        void *v16 = v20;
        *((_WORD *)a2 - 1) = v19;
      }
      return result;
    case 3uLL:
      sub_100066268(a1, (unsigned int *)((char *)a1 + 10), (unsigned int *)((char *)a2 - 10));
      return 1;
    case 4uLL:
      unint64_t v22 = (uint64_t *)((char *)a1 + 10);
      __int16 v23 = (uint64_t *)(a1 + 5);
      sub_100066268(a1, (unsigned int *)((char *)a1 + 10), a1 + 5);
      uint64_t v24 = (uint64_t *)((char *)a2 - 10);
      unint64_t v25 = a1[5] | ((unint64_t)*((unsigned __int16 *)a1 + 12) << 32);
      unint64_t v26 = *(unsigned int *)((char *)a2 - 10) | ((unint64_t)*((unsigned __int16 *)a2 - 3) << 32);
      if (v25 <= v26 && (v26 > v25 || (int)*(a2 - 1) >= *(int *)((char *)a1 + 26))) {
        return 1;
      }
      __int16 v27 = *((_WORD *)a1 + 14);
      uint64_t v28 = *v23;
      __int16 v29 = *((_WORD *)a2 - 1);
      *__int16 v23 = *v24;
      *((_WORD *)a1 + 14) = v29;
      *uint64_t v24 = v28;
      *((_WORD *)a2 - 1) = v27;
      unint64_t v30 = *(unsigned int *)((char *)a1 + 10) | ((unint64_t)*((unsigned __int16 *)a1 + 7) << 32);
      unint64_t v31 = a1[5] | ((unint64_t)*((unsigned __int16 *)a1 + 12) << 32);
      if (v30 <= v31 && (v31 > v30 || *(int *)((char *)a1 + 26) >= (int)a1[4])) {
        return 1;
      }
      __int16 v32 = *((_WORD *)a1 + 9);
      uint64_t v33 = *v22;
      uint64_t *v22 = *v23;
      *((_WORD *)a1 + 9) = *((_WORD *)a1 + 14);
      *__int16 v23 = v33;
      *((_WORD *)a1 + 14) = v32;
      unint64_t v34 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
      unint64_t v35 = *(unsigned int *)((char *)a1 + 10) | ((unint64_t)*((unsigned __int16 *)a1 + 7) << 32);
      if (v34 <= v35 && (v35 > v34 || (int)a1[4] >= *(int *)((char *)a1 + 6))) {
        return 1;
      }
      __int16 v36 = *((_WORD *)a1 + 4);
      uint64_t v37 = *(void *)a1;
      *(void *)a1 = *v22;
      *((_WORD *)a1 + 4) = *((_WORD *)a1 + 9);
      uint64_t *v22 = v37;
      *((_WORD *)a1 + 9) = v36;
      return 1;
    case 5uLL:
      sub_1000667D0(a1, (unsigned int *)((char *)a1 + 10), a1 + 5, (unsigned int *)((char *)a1 + 30), (unsigned int *)((char *)a2 - 10));
      return 1;
    default:
      unint64_t v6 = a1 + 5;
      sub_100066268(a1, (unsigned int *)((char *)a1 + 10), a1 + 5);
      unint64_t v7 = (unsigned int *)((char *)a1 + 30);
      if ((unsigned int *)((char *)a1 + 30) == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    unint64_t v11 = *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32);
    unint64_t v12 = *v7 | ((unint64_t)*((unsigned __int16 *)v7 + 2) << 32);
    if (v11 <= v12)
    {
      if (v12 > v11) {
        goto LABEL_7;
      }
      signed int v13 = *(unsigned int *)((char *)v7 + 6);
      if (v13 >= *(int *)((char *)v6 + 6)) {
        goto LABEL_7;
      }
    }
    else
    {
      signed int v13 = *(unsigned int *)((char *)v7 + 6);
    }
    *(void *)unint64_t v7 = *(void *)v6;
    *((_WORD *)v7 + 4) = *((_WORD *)v6 + 4);
    uint64_t v10 = (uint64_t)a1;
    if (v6 == a1) {
      goto LABEL_6;
    }
    uint64_t v14 = v8;
    while (1)
    {
      unint64_t v15 = *(unsigned int *)((char *)a1 + v14 + 10) | ((unint64_t)*(unsigned __int16 *)((char *)a1 + v14 + 14) << 32);
      if (v15 > v12) {
        goto LABEL_12;
      }
      if (v12 > v15) {
        break;
      }
      if (v13 >= *(int *)((char *)a1 + v14 + 16))
      {
        uint64_t v10 = (uint64_t)a1 + v14 + 20;
        goto LABEL_6;
      }
LABEL_12:
      unint64_t v6 = (unsigned int *)((char *)v6 - 10);
      *(void *)((char *)a1 + v14 + 20) = *(void *)((char *)a1 + v14 + 10);
      *(_WORD *)((char *)a1 + v14 + 28) = *(_WORD *)((char *)a1 + v14 + 18);
      v14 -= 10;
      if (v14 == -20)
      {
        uint64_t v10 = (uint64_t)a1;
        goto LABEL_6;
      }
    }
    uint64_t v10 = (uint64_t)v6;
LABEL_6:
    *(_DWORD *)uint64_t v10 = v12;
    *(_WORD *)(v10 + 4) = WORD2(v12);
    *(_DWORD *)(v10 + 6) = v13;
    if (++v9 == 8) {
      return (unsigned int *)((char *)v7 + 10) == a2;
    }
LABEL_7:
    unint64_t v6 = v7;
    v8 += 10;
    unint64_t v7 = (unsigned int *)((char *)v7 + 10);
    if (v7 != a2) {
      continue;
    }
    return 1;
  }
}

int *sub_100066E98@<X0>(const std::string *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = operator new(0x90uLL);
  v6[1] = 0;
  _DWORD v6[2] = 0;
  void *v6 = off_10045FEA0;
  *(void *)a3 = sub_10006D9A4((uint64_t)(v6 + 3));
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  off_t v7 = sub_100055960((uint64_t)a1, 0);
  std::string::operator=((std::string *)(a3 + 32), a1);
  *(void *)(a3 + 72) = v7;
  sub_10006DE54((uint64_t)a1, &v24);
  wireless_diagnostics::google::protobuf::io::FileInputStream::FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)v25, v24, -1);
  if (qword_10047BEE8 == -1)
  {
    uint64_t v8 = qword_10047BEF0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_10047BEE8, &stru_10045FE70);
  uint64_t v8 = qword_10047BEF0;
  if (os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    *(_WORD *)__int16 v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "@IndoorAvl, load, openAndReadAllExceptVenueBounds, starting incremental deserialization", v21, 2u);
  }
LABEL_4:
  while (1)
  {
    sub_1000678D0((uint64_t)v21);
    uint64_t v9 = sub_1000675A4(a3, (uint64_t)v25);
    int v10 = v9;
    if (v9 != 1) {
      break;
    }
    if ((sub_100067330(v9, (uint64_t)v25, (uint64_t)v21) & 1) == 0)
    {
      if (qword_10047BEE8 == -1)
      {
        unint64_t v12 = qword_10047BEF0;
        if (os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_9;
        }
      }
      else
      {
        dispatch_once(&qword_10047BEE8, &stru_10045FE70);
        unint64_t v12 = qword_10047BEF0;
        if (os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_ERROR))
        {
LABEL_9:
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "@IndoorAvl, load, openAndReadAllExceptVenueBounds, failed to read a VenueBounds object even though we expected we'd have one", buf, 2u);
        }
      }
      *a2 = 0;
      break;
    }
    int v11 = *(_DWORD *)(a3 + 60) + v22;
    ++*(_DWORD *)(a3 + 56);
    *(_DWORD *)(a3 + 60) = v11;
    sub_1000678CC(v21);
  }
  sub_1000678CC(v21);
  wireless_diagnostics::google::protobuf::io::FileInputStream::~FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)v25);
  BOOL result = sub_10006D968(&v24);
  if (v10 != 1)
  {
    sub_10006D9A4((uint64_t)v21);
    if (sub_10006DE6C(a3, (wireless_diagnostics::google::protobuf::MessageLite *)v21, v7))
    {
      sub_10003D640(a3, (uint64_t)v21);
      if (qword_10047BEE8 == -1)
      {
        uint64_t v14 = qword_10047BEF0;
        char v15 = 1;
        if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO))
        {
LABEL_16:
          *(unsigned char *)(a3 + 16) = 1;
LABEL_21:
          *a2 = v15;
          return (int *)sub_10006DC34(v21);
        }
      }
      else
      {
        dispatch_once(&qword_10047BEE8, &stru_10045FE70);
        uint64_t v14 = qword_10047BEF0;
        char v15 = 1;
        if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO)) {
          goto LABEL_16;
        }
      }
      int v16 = *(_DWORD *)(a3 + 56);
      int v17 = *(_DWORD *)(a3 + 60);
      uint64_t v18 = *(void *)(a3 + 64);
      uint64_t v19 = *(void *)(a3 + 72);
      *(_DWORD *)unint64_t v25 = 67240960;
      int v26 = v16;
      __int16 v27 = 1026;
      int v28 = v17;
      __int16 v29 = 2048;
      uint64_t v30 = v18;
      __int16 v31 = 2050;
      uint64_t v32 = v19;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "@IndoorAvl, load, openAndReadAllExceptVenueBounds, we expect that this availability tile will have %{public}d venues and %{public}d total exteriors; %lld bytes in the venuebounds section and %{public}lld bytes overall",
        v25,
        0x22u);
      goto LABEL_16;
    }
    if (qword_10047BEE8 == -1)
    {
      uint64_t v20 = qword_10047BEF0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_ERROR))
      {
LABEL_20:
        char v15 = 0;
        goto LABEL_21;
      }
    }
    else
    {
      dispatch_once(&qword_10047BEE8, &stru_10045FE70);
      uint64_t v20 = qword_10047BEF0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
    }
    *(_WORD *)unint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "@IndoorAvl, load, openAndReadAllExceptVenueBounds, failed to read a availability tile metadata even though we expected we'd have some", v25, 2u);
    goto LABEL_20;
  }
  return result;
}

void sub_100067270(_Unwind_Exception *a1)
{
  sub_1000BA900(v1);
  _Unwind_Resume(a1);
}

void sub_100067284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10006DC34(&a9);
  sub_1000BA900(v9);
  _Unwind_Resume(a1);
}

void sub_1000672A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27)
{
  sub_10006D968(&a27);
  sub_1000BA900(v27);
  _Unwind_Resume(a1);
}

void sub_1000672BC(_Unwind_Exception *a1)
{
  sub_1000BA900(v1);
  _Unwind_Resume(a1);
}

void sub_1000672D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1000672E8(_Unwind_Exception *a1)
{
  sub_1000BA900(v1);
  _Unwind_Resume(a1);
}

void sub_1000672FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,char a28)
{
  wireless_diagnostics::google::protobuf::io::FileInputStream::~FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)&a28);
  sub_10006D968(&a27);
  sub_1000BA900(v28);
  _Unwind_Resume(a1);
}

uint64_t sub_100067330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    sub_1003A4058();
    __break(1u);
  }
  uint64_t v14 = a2;
  char v15 = 0;
  unint64_t v16 = 0;
  memset(v17, 0, 14);
  long long v18 = xmmword_1003E7100;
  int v19 = 0;
  int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::default_recursion_limit_;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  wireless_diagnostics::google::protobuf::io::CodedInputStream::Refresh((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14);
  *(_DWORD *)uint64_t buf = 0;
  if ((unint64_t)v15 >= v16 || (char)*v15 < 0)
  {
    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14, (unsigned int *)buf))
    {
      int v10 = 1;
      if (qword_10047BEE8 == -1) {
        goto LABEL_17;
      }
      goto LABEL_22;
    }
  }
  else
  {
    *(_DWORD *)uint64_t buf = *v15++;
  }
  int v5 = v19++;
  if (v5 >= v20)
  {
    int v10 = 2;
    if (qword_10047BEE8 == -1) {
      goto LABEL_17;
    }
LABEL_22:
    dispatch_once(&qword_10047BEE8, &stru_10045FE70);
    goto LABEL_17;
  }
  int v6 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14, *(int *)buf);
  if (!sub_100069A44(a3, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14, v7, v8))
  {
    int v10 = 3;
    if (qword_10047BEE8 == -1) {
      goto LABEL_17;
    }
    goto LABEL_22;
  }
  if (BYTE4(v17[1]))
  {
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14, v6);
    if (v19 >= 1) {
      --v19;
    }
    uint64_t v9 = 1;
    goto LABEL_20;
  }
  int v10 = 4;
  if (qword_10047BEE8 != -1) {
    goto LABEL_22;
  }
LABEL_17:
  int v11 = (id)qword_10047BEF0;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
    *(_DWORD *)uint64_t buf = 134349312;
    uint64_t v24 = v12;
    __int16 v25 = 1026;
    int v26 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "@IndoorAvl, _readVenueBoundProtobufObjectFromZCIS, failed to read a venue bounds from the input stream, have read %{public}lld bytes, error %{public}d", buf, 0x12u);
  }

  uint64_t v9 = 0;
LABEL_20:
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14);
  return v9;
}

void sub_100067580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000675A4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 96) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  memset(v10, 0, 14);
  long long v11 = xmmword_1003E7100;
  int v12 = 0;
  int v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::default_recursion_limit_;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  wireless_diagnostics::google::protobuf::io::CodedInputStream::Refresh((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v7);
  if ((unint64_t)v8 >= v9 || *v8 < 0)
  {
    unsigned int TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v7);
    LODWORD(v10[1]) = TagFallback;
  }
  else
  {
    unsigned int TagFallback = *v8;
    LODWORD(v10[1]) = TagFallback;
    ++v8;
  }
  uint64_t v5 = TagFallback >> 3;
  *(_DWORD *)(a1 + 88) = v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v7);
  return v5;
}

void sub_100067678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10006768C(uint64_t a1)
{
  *(void *)a1 = off_10046A948;
  if (qword_100492AC8 != a1)
  {
    uint64_t v2 = *(void *)(a1 + 64);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *(void *)(a1 + 72);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  if (*(void *)(a1 + 80)) {
    operator delete[]();
  }
  int v4 = *(_DWORD *)(a1 + 52);
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i < v4; ++i)
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8 * i);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        int v4 = *(_DWORD *)(a1 + 52);
      }
    }
  }
  if (*(void *)(a1 + 40)) {
    operator delete[]();
  }
  if (*(int *)(a1 + 28) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::Delete();
      ++v7;
    }
    while (v7 < *(int *)(a1 + 28));
  }
  if (*(void *)(a1 + 16)) {
    operator delete[]();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100067828(void *a1)
{
  *a1 = off_10046A7E8;
  if (a1[5]) {
    operator delete[]();
  }
  if (a1[2]) {
    operator delete[]();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

uint64_t sub_1000678D0(uint64_t a1)
{
  *(void *)a1 = off_10046A948;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 1;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  return a1;
}

void sub_10006793C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_100067950(void *a1)
{
  *a1 = off_10046A898;
  if (a1[2]) {
    operator delete[]();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_100069714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,void *a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,void *a52)
{
  sub_1000678CC(v52 - 240);

  _Unwind_Resume(a1);
}

void sub_100069A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100069A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100069A44(uint64_t result, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5 = result;
  uint64_t v6 = (uint64_t *)(result + 80);
  uint64_t v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(result + 16);
  uint64_t v8 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(result + 40);
  unint64_t v9 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(result + 8);
LABEL_2:
  while (2)
  {
    int v10 = (char *)*((void *)this + 1);
    if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
    {
      BOOL result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      long long v11 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)result;
      *((_DWORD *)this + 8) = result;
      if (!result) {
        return 1;
      }
    }
    else
    {
      long long v11 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v10;
      *((_DWORD *)this + 8) = v11;
      *((void *)this + 1) = v10 + 1;
      if (!v11) {
        return 1;
      }
    }
    switch(v11 >> 3)
    {
      case 1u:
        int v12 = v11 & 7;
        if (v12 != 2) {
          goto LABEL_34;
        }
        int v13 = *(_DWORD *)(v5 + 28);
        int v14 = *(_DWORD *)(v5 + 24);
        if (v14 < v13) {
          goto LABEL_10;
        }
        while (2)
        {
          if (v13 == *(_DWORD *)(v5 + 32))
          {
            BOOL result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v13 + 1);
            int v13 = *(_DWORD *)(v5 + 28);
          }
          *(_DWORD *)(v5 + 28) = v13 + 1;
          uint64_t v15 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
          uint64_t v16 = *(void *)(v5 + 16);
          uint64_t v17 = *(int *)(v5 + 24);
          *(_DWORD *)(v5 + 24) = v17 + 1;
          *(void *)(v16 + 8 * v17) = v15;
          BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!result) {
            return result;
          }
LABEL_15:
          long long v18 = (unsigned __int8 *)*((void *)this + 1);
          if ((unint64_t)v18 < *((void *)this + 2))
          {
            int v19 = *v18;
            if (v19 == 10)
            {
              *((void *)this + 1) = v18 + 1;
              int v13 = *(_DWORD *)(v5 + 28);
              int v14 = *(_DWORD *)(v5 + 24);
              if (v14 >= v13) {
                continue;
              }
LABEL_10:
              *(_DWORD *)(v5 + 24) = v14 + 1;
              BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
              if (!result) {
                return result;
              }
              goto LABEL_15;
            }
            if (v19 == 18)
            {
              *((void *)this + 1) = v18 + 1;
              *(_DWORD *)(v5 + 104) |= 0x10u;
              uint64_t v20 = *(void *)(v5 + 72);
              if (!v20) {
LABEL_22:
              }
                operator new();
LABEL_42:
              unsigned int v70 = 0;
              __int16 v31 = (char *)*((void *)this + 1);
              if ((unint64_t)v31 >= *((void *)this + 2) || *v31 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v70))return 0; {
              }
                }
              else
              {
                unsigned int v70 = *v31;
                *((void *)this + 1) = v31 + 1;
              }
              int v32 = *((_DWORD *)this + 14);
              int v33 = *((_DWORD *)this + 15);
              *((_DWORD *)this + 14) = v32 + 1;
              if (v32 >= v33) {
                return 0;
              }
              int v34 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v70);
              if (!sub_10006A2CC(v20, this, v35, v36) || !*((unsigned char *)this + 36)) {
                return 0;
              }
              BOOL result = wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v34);
              int v37 = *((_DWORD *)this + 14);
              BOOL v38 = __OFSUB__(v37, 1);
              int v39 = v37 - 1;
              if (v39 < 0 == v38) {
                *((_DWORD *)this + 14) = v39;
              }
              __int16 v40 = (unsigned char *)*((void *)this + 1);
              if ((unint64_t)v40 < *((void *)this + 2) && *v40 == 26)
              {
                while (1)
                {
                  *((void *)this + 1) = v40 + 1;
                  int v21 = *(_DWORD *)(v5 + 52);
                  uint64_t v22 = *(int *)(v5 + 48);
                  if ((int)v22 >= v21)
                  {
LABEL_57:
                    if (v21 == *(_DWORD *)(v5 + 56))
                    {
                      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v21 + 1);
                      int v21 = *(_DWORD *)(v5 + 52);
                    }
                    *(_DWORD *)(v5 + 52) = v21 + 1;
                    operator new();
                  }
LABEL_25:
                  uint64_t v23 = *(void *)(v5 + 40);
                  *(_DWORD *)(v5 + 48) = v22 + 1;
                  uint64_t v24 = *(void *)(v23 + 8 * v22);
                  unsigned int v70 = 0;
                  unint64_t v41 = (char *)*((void *)this + 1);
                  if ((unint64_t)v41 >= *((void *)this + 2) || *v41 < 0)
                  {
                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v70))return 0; {
                  }
                    }
                  else
                  {
                    unsigned int v70 = *v41;
                    *((void *)this + 1) = v41 + 1;
                  }
                  int v42 = *((_DWORD *)this + 14);
                  int v43 = *((_DWORD *)this + 15);
                  *((_DWORD *)this + 14) = v42 + 1;
                  if (v42 >= v43) {
                    return 0;
                  }
                  int v44 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v70);
                  if (!sub_10006A2CC(v24, this, v45, v46) || !*((unsigned char *)this + 36)) {
                    return 0;
                  }
                  BOOL result = wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v44);
                  int v47 = *((_DWORD *)this + 14);
                  BOOL v38 = __OFSUB__(v47, 1);
                  int v48 = v47 - 1;
                  if (v48 < 0 == v38) {
                    *((_DWORD *)this + 14) = v48;
                  }
                  __int16 v40 = (unsigned char *)*((void *)this + 1);
                  unint64_t v25 = *((void *)this + 2);
                  if ((unint64_t)v40 >= v25) {
                    break;
                  }
                  int v49 = *v40;
                  if (v49 != 26) {
                    goto LABEL_71;
                  }
                }
              }
            }
          }
          goto LABEL_2;
        }
      case 2u:
        int v12 = v11 & 7;
        if (v12 != 2) {
          goto LABEL_34;
        }
        *(_DWORD *)(v5 + 104) |= 0x10u;
        uint64_t v20 = *(void *)(v5 + 72);
        if (!v20) {
          goto LABEL_22;
        }
        goto LABEL_42;
      case 3u:
        int v12 = v11 & 7;
        if (v12 != 2) {
          goto LABEL_34;
        }
        int v21 = *(_DWORD *)(v5 + 52);
        uint64_t v22 = *(int *)(v5 + 48);
        if ((int)v22 < v21) {
          goto LABEL_25;
        }
        goto LABEL_57;
      case 4u:
        int v12 = v11 & 7;
        if (v12 == 2)
        {
          BOOL result = sub_100375FE4(this, v6);
          if (!result) {
            return result;
          }
          while (1)
          {
LABEL_94:
            __int16 v40 = (unsigned char *)*((void *)this + 1);
            unint64_t v25 = *((void *)this + 2);
            if ((unint64_t)v40 >= v25) {
              goto LABEL_2;
            }
            int v49 = *v40;
            if (v49 == 42) {
              break;
            }
LABEL_71:
            if (v49 != 32) {
              goto LABEL_2;
            }
            int v26 = v40 + 1;
            *((void *)this + 1) = v26;
LABEL_73:
            unsigned int v70 = 0;
            if ((unint64_t)v26 >= v25 || *v26 < 0)
            {
              BOOL result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v70);
              if (!result) {
                return 0;
              }
            }
            else
            {
              unsigned int v70 = *v26;
              *((void *)this + 1) = v26 + 1;
            }
            int v50 = *(_DWORD *)(v5 + 88);
            uint64_t v51 = *(void *)(v5 + 80);
            if (v50 == *(_DWORD *)(v5 + 92))
            {
              if (2 * v50 <= v50 + 1) {
                int v52 = v50 + 1;
              }
              else {
                int v52 = 2 * v50;
              }
              if (v52 <= 4) {
                int v52 = 4;
              }
              *(_DWORD *)(v5 + 92) = v52;
              operator new[]();
            }
            unsigned int v53 = v70;
            *(_DWORD *)(v5 + 88) = v50 + 1;
            *(_DWORD *)(v51 + 4 * v50) = v53;
            int v54 = *(_DWORD *)(v5 + 92) - *(_DWORD *)(v5 + 88);
            if (v54 >= 1)
            {
              int v55 = v54 + 1;
              while (1)
              {
                unint64_t v58 = (unsigned char *)*((void *)this + 1);
                unint64_t v59 = *((void *)this + 2);
                if ((unint64_t)v58 >= v59 || *v58 != 32) {
                  break;
                }
                *((void *)this + 1) = v58 + 1;
                if ((unint64_t)(v58 + 1) >= v59 || (char)v58[1] < 0)
                {
                  BOOL result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v70);
                  if (!result) {
                    return 0;
                  }
                  unsigned int v56 = v70;
                  uint64_t v51 = *v6;
                }
                else
                {
                  unsigned int v56 = v58[1];
                  unsigned int v70 = v56;
                  *((void *)this + 1) = v58 + 2;
                }
                uint64_t v57 = *(int *)(v5 + 88);
                *(_DWORD *)(v5 + 88) = v57 + 1;
                *(_DWORD *)(v51 + 4 * v57) = v56;
                if (--v55 <= 1) {
                  goto LABEL_94;
                }
              }
            }
          }
          *((void *)this + 1) = v40 + 1;
          *(_DWORD *)(v5 + 104) |= 4u;
          uint64_t v27 = *(void *)(v5 + 64);
          if (!v27) {
LABEL_97:
          }
            operator new();
LABEL_31:
          unsigned int v70 = 0;
          uint64_t v28 = (char *)*((void *)this + 1);
          if ((unint64_t)v28 >= *((void *)this + 2) || *v28 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v70))return 0; {
          }
            }
          else
          {
            unsigned int v70 = *v28;
            *((void *)this + 1) = v28 + 1;
          }
          int v60 = *((_DWORD *)this + 14);
          int v61 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v60 + 1;
          if (v60 >= v61) {
            return 0;
          }
          int v62 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v70);
          if (!sub_10006A72C(v27, this, v63, v64) || !*((unsigned char *)this + 36)) {
            return 0;
          }
          BOOL result = wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v62);
          int v65 = *((_DWORD *)this + 14);
          BOOL v38 = __OFSUB__(v65, 1);
          int v66 = v65 - 1;
          if (v66 < 0 == v38) {
            *((_DWORD *)this + 14) = v66;
          }
          unsigned int v67 = (unsigned char *)*((void *)this + 1);
          unint64_t v29 = *((void *)this + 2);
          if ((unint64_t)v67 >= v29 || *v67 != 48) {
            continue;
          }
          uint64_t v30 = v67 + 1;
          *((void *)this + 1) = v30;
LABEL_108:
          unsigned int v70 = 0;
          if ((unint64_t)v30 >= v29 || (int v68 = *v30, v68 < 0))
          {
            BOOL result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v70);
            if (!result) {
              return result;
            }
            signed int v69 = v70;
            BOOL result = sub_10006A71C(v70);
            if (result)
            {
LABEL_111:
              *(_DWORD *)(v5 + 104) |= 8u;
              *(_DWORD *)(v5 + 96) = v69;
              if (*((void *)this + 1) != *((void *)this + 2)) {
                continue;
              }
LABEL_116:
              if (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
              {
                *((_DWORD *)this + 8) = 0;
                BOOL result = 1;
                *((unsigned char *)this + 36) = 1;
                return result;
              }
              continue;
            }
          }
          else
          {
            signed int v69 = *v30;
            *((void *)this + 1) = v30 + 1;
            BOOL result = sub_10006A71C(v68);
            if (result) {
              goto LABEL_111;
            }
          }
          BOOL result = wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v9, 6, v69);
          if (*((void *)this + 1) != *((void *)this + 2)) {
            continue;
          }
          goto LABEL_116;
        }
        if ((v11 & 7) == 0)
        {
          int v26 = (char *)*((void *)this + 1);
          unint64_t v25 = *((void *)this + 2);
          goto LABEL_73;
        }
LABEL_34:
        if (v12 != 4)
        {
          BOOL result = wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, v11, v9, a4);
          if ((result & 1) == 0) {
            return 0;
          }
          continue;
        }
        return 1;
      case 5u:
        int v12 = v11 & 7;
        if (v12 != 2) {
          goto LABEL_34;
        }
        *(_DWORD *)(v5 + 104) |= 4u;
        uint64_t v27 = *(void *)(v5 + 64);
        if (v27) {
          goto LABEL_31;
        }
        goto LABEL_97;
      case 6u:
        int v12 = v11 & 7;
        if ((v11 & 7) != 0) {
          goto LABEL_34;
        }
        uint64_t v30 = (char *)*((void *)this + 1);
        unint64_t v29 = *((void *)this + 2);
        goto LABEL_108;
      default:
        int v12 = v11 & 7;
        goto LABEL_34;
    }
  }
}

void sub_10006A278()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_10006A2CC(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t v6 = (uint64_t *)(a1 + 40);
  uint64_t v7 = (uint64_t *)(a1 + 16);
  unsigned int v8 = a1 + 8;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v9;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v9 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v11 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v12 = TagFallback & 7;
        if (v12 == 1)
        {
          uint64_t result = sub_10012F0E0(1, 0xAu, this, v7);
          if (!result) {
            return result;
          }
          long long v18 = (unsigned char *)*((void *)this + 1);
          unint64_t v19 = *((void *)this + 2);
          if ((unint64_t)v18 < v19)
          {
LABEL_45:
            if (*v18 == 18)
            {
              uint64_t v15 = v18 + 1;
              *((void *)this + 1) = v15;
              unsigned int v32 = 0;
              if ((unint64_t)v15 >= v19) {
                goto LABEL_49;
              }
              goto LABEL_47;
            }
          }
        }
        else
        {
          if (v12 != 2) {
            goto LABEL_23;
          }
          unsigned int v32 = 0;
          int v13 = (char *)*((void *)this + 1);
          if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0; {
            unsigned int v14 = v32;
            }
          }
          else
          {
            unsigned int v14 = *v13;
            unsigned int v32 = v14;
            *((void *)this + 1) = v13 + 1;
          }
          int v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v14);
          while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
          {
            unint64_t v33 = 0;
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33))return 0; {
            unint64_t v22 = v33;
            }
            int v23 = *(_DWORD *)(a1 + 24);
            if (v23 == *(_DWORD *)(a1 + 28))
            {
              if (2 * v23 <= v23 + 1) {
                int v24 = v23 + 1;
              }
              else {
                int v24 = 2 * v23;
              }
              if (v24 <= 4) {
                int v24 = 4;
              }
              *(_DWORD *)(a1 + 28) = v24;
              operator new[]();
            }
            uint64_t v21 = *(void *)(a1 + 16);
            *(_DWORD *)(a1 + 24) = v23 + 1;
            *(void *)(v21 + 8 * v23) = v22;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
          long long v18 = (unsigned char *)*((void *)this + 1);
          unint64_t v19 = *((void *)this + 2);
          if ((unint64_t)v18 < v19) {
            goto LABEL_45;
          }
        }
      }
      if (v11 != 2) {
        break;
      }
      int v12 = TagFallback & 7;
      if (v12 == 1)
      {
        uint64_t result = sub_10012F0E0(1, 0x12u, this, v6);
        if (!result) {
          return result;
        }
        goto LABEL_63;
      }
      if (v12 != 2) {
        goto LABEL_23;
      }
      uint64_t v15 = (unsigned __int8 *)*((void *)this + 1);
      unint64_t v16 = *((void *)this + 2);
      unsigned int v32 = 0;
      if ((unint64_t)v15 >= v16)
      {
LABEL_49:
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0; {
        unsigned int v25 = v32;
        }
        goto LABEL_51;
      }
LABEL_47:
      if ((char)*v15 < 0) {
        goto LABEL_49;
      }
      unsigned int v25 = *v15;
      unsigned int v32 = v25;
      *((void *)this + 1) = v15 + 1;
LABEL_51:
      int v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25);
      while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
      {
        unint64_t v33 = 0;
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33))return 0; {
        unint64_t v28 = v33;
        }
        int v29 = *(_DWORD *)(a1 + 48);
        if (v29 == *(_DWORD *)(a1 + 52))
        {
          if (2 * v29 <= v29 + 1) {
            int v30 = v29 + 1;
          }
          else {
            int v30 = 2 * v29;
          }
          if (v30 <= 4) {
            int v30 = 4;
          }
          *(_DWORD *)(a1 + 52) = v30;
          operator new[]();
        }
        uint64_t v27 = *(void *)(a1 + 40);
        *(_DWORD *)(a1 + 48) = v29 + 1;
        *(void *)(v27 + 8 * v29) = v28;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
LABEL_63:
      __int16 v31 = (unsigned char *)*((void *)this + 1);
      if ((unint64_t)v31 < *((void *)this + 2) && *v31 == 25)
      {
        *((void *)this + 1) = v31 + 1;
        unint64_t v33 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33) & 1) == 0) {
          return 0;
        }
LABEL_66:
        *(void *)(a1 + 64) = v33;
        *(_DWORD *)(a1 + 76) |= 4u;
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v11 == 3)
    {
      int v12 = TagFallback & 7;
      if (v12 == 1)
      {
        unint64_t v33 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33) & 1) == 0) {
          return 0;
        }
        goto LABEL_66;
      }
    }
    else
    {
      int v12 = TagFallback & 7;
    }
LABEL_23:
    if (v12 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v8, a4) & 1) == 0)return 0; {
  }
    }
}

BOOL sub_10006A71C(int a1)
{
  return (a1 - 1) < 2;
}

uint64_t sub_10006A72C(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t v6 = (uint64_t *)(a1 + 16);
  unsigned int v7 = a1 + 8;
  while (1)
  {
LABEL_2:
    unsigned int v8 = (char *)*((void *)this + 1);
    if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    int v10 = TagFallback & 7;
    if ((TagFallback & 0xFFFFFFF8) == 8)
    {
      if ((TagFallback & 7) == 0)
      {
        int v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        unsigned int v26 = 0;
        if ((unint64_t)v12 < v11)
        {
          while ((*v12 & 0x80000000) == 0)
          {
            unsigned int v26 = *v12;
            *((void *)this + 1) = v12 + 1;
LABEL_20:
            int v14 = *(_DWORD *)(a1 + 24);
            uint64_t v15 = *(void *)(a1 + 16);
            if (v14 == *(_DWORD *)(a1 + 28))
            {
              if (2 * v14 <= v14 + 1) {
                int v16 = v14 + 1;
              }
              else {
                int v16 = 2 * v14;
              }
              if (v16 <= 4) {
                int v16 = 4;
              }
              *(_DWORD *)(a1 + 28) = v16;
              operator new[]();
            }
            unsigned int v17 = v26;
            *(_DWORD *)(a1 + 24) = v14 + 1;
            *(_DWORD *)(v15 + 4 * v14) = v17;
            int v18 = *(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 24);
            if (v18 >= 1)
            {
              for (int i = v18 + 1; i > 1; --i)
              {
                unint64_t v22 = (unsigned char *)*((void *)this + 1);
                unint64_t v23 = *((void *)this + 2);
                if ((unint64_t)v22 >= v23 || *v22 != 8) {
                  break;
                }
                *((void *)this + 1) = v22 + 1;
                if ((unint64_t)(v22 + 1) >= v23 || (char)v22[1] < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26))return 0; {
                  unsigned int v20 = v26;
                  }
                  uint64_t v15 = *v6;
                }
                else
                {
                  unsigned int v20 = v22[1];
                  unsigned int v26 = v20;
                  *((void *)this + 1) = v22 + 2;
                }
                uint64_t v21 = *(int *)(a1 + 24);
                *(_DWORD *)(a1 + 24) = v21 + 1;
                *(_DWORD *)(v15 + 4 * v21) = v20;
              }
            }
LABEL_37:
            unsigned int v25 = (char *)*((void *)this + 1);
            int v24 = (char *)*((void *)this + 2);
            if (v25 >= v24 || *v25 != 8)
            {
              if (v25 == v24 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1;
                *((unsigned char *)this + 36) = 1;
                return result;
              }
              goto LABEL_2;
            }
            int v12 = v25 + 1;
            *((void *)this + 1) = v12;
            unsigned int v26 = 0;
            if (v12 >= v24) {
              break;
            }
          }
        }
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26))goto LABEL_20; {
        return 0;
        }
      }
      if (v10 == 2) {
        break;
      }
    }
    if (v10 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, v7, a4) & 1) == 0)return 0; {
  }
    }
  uint64_t result = sub_100375FE4(this, v6);
  if (result) {
    goto LABEL_37;
  }
  return result;
}

void sub_10006A9DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10006A9DC(a1, *a2);
    sub_10006A9DC(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_10006ABFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10006AC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10006ADB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006B2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006B428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10006B43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10006B450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10006B464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10006B478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

char *sub_10006B500@<X0>(char *result@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(unint64_t ***)result;
  uint64_t v6 = *((int *)result + 2);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v6)
  {
    int v7 = *((char *)*v5 + 23);
    if (v7 >= 0) {
      unint64_t v8 = (unint64_t)*v5;
    }
    else {
      unint64_t v8 = **v5;
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *((unsigned __int8 *)*v5 + 23);
    }
    else {
      std::string::size_type v9 = (*v5)[1];
    }
    uint64_t result = sub_10006B648((std::string *)a3, a3, v8, (std::string::value_type *)(v8 + v9), v9);
    int v10 = v5 + 1;
    unint64_t v11 = &v5[v6];
    if (v5 + 1 == v11) {
      return result;
    }
  }
  else
  {
    int v10 = v5;
    unint64_t v11 = &v5[v6];
    if (v5 == v11) {
      return result;
    }
  }
  do
  {
    uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = a3;
    }
    else {
      uint64_t v13 = *(void *)a3;
    }
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a3 + 8);
    }
    uint64_t v14 = v13 + v12;
    size_t v15 = strlen(a2);
    sub_10006BAEC((std::string *)a3, v14, (unint64_t)a2, (std::string::value_type *)&a2[v15], v15);
    uint64_t v16 = *(unsigned __int8 *)(a3 + 23);
    if ((v16 & 0x80u) == 0) {
      uint64_t v17 = a3;
    }
    else {
      uint64_t v17 = *(void *)a3;
    }
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = *(void *)(a3 + 8);
    }
    uint64_t v18 = v17 + v16;
    int v19 = *((char *)*v10 + 23);
    if (v19 >= 0) {
      unint64_t v20 = (unint64_t)*v10;
    }
    else {
      unint64_t v20 = **v10;
    }
    if (v19 >= 0) {
      std::string::size_type v21 = *((unsigned __int8 *)*v10 + 23);
    }
    else {
      std::string::size_type v21 = (*v10)[1];
    }
    uint64_t result = sub_10006B648((std::string *)a3, v18, v20, (std::string::value_type *)(v20 + v21), v21);
    ++v10;
  }
  while (v10 != v11);
  return result;
}

void sub_10006B624(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10006B648(std::string *this, uint64_t a2, unint64_t a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  int v7 = (std::string::value_type *)a3;
  unint64_t v8 = this;
  int v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v9 < 0)
  {
    uint64_t v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v10 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      if ((unint64_t)v13 > a3 || (unint64_t)v13->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        std::string::size_type v12 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v12 - size < __n_add)
        {
LABEL_6:
          std::string::__grow_by(this, v12, size + __n_add - v12, size, v10, 0, __n_add);
          v8->__r_.__value_.__l.__size_ = size + __n_add;
          uint64_t v13 = (std::string *)v8->__r_.__value_.__r.__words[0];
          std::string::size_type v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_39:
            v8->__r_.__value_.__l.__size_ = v14;
            v13->__r_.__value_.__s.__data_[v14] = 0;
            unint64_t v16 = a4 - v7;
            if (a4 == v7) {
              goto LABEL_71;
            }
            goto LABEL_40;
          }
LABEL_16:
          *((unsigned char *)&v8->__r_.__value_.__s + 23) = v14 & 0x7F;
          v13->__r_.__value_.__s.__data_[v14] = 0;
          unint64_t v16 = a4 - v7;
          if (a4 == v7) {
            goto LABEL_71;
          }
LABEL_40:
          uint64_t v27 = (char *)v13 + v10;
          if (v16 < 8)
          {
            unint64_t v28 = v7;
            goto LABEL_70;
          }
          unint64_t v28 = v7;
          if ((unint64_t)((char *)v13 + v10 - v7) >= 0x20)
          {
            if (v16 < 0x20)
            {
              unint64_t v29 = 0;
              goto LABEL_57;
            }
            unint64_t v29 = v16 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v33 = (long long *)(v7 + 16);
            int v34 = (_OWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + v10);
            unint64_t v35 = v16 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v36 = *v33;
              *(v34 - 1) = *(v33 - 1);
              _OWORD *v34 = v36;
              v33 += 2;
              v34 += 2;
              v35 -= 32;
            }
            while (v35);
            if (v16 == v29) {
              goto LABEL_71;
            }
            if ((v16 & 0x18) != 0)
            {
LABEL_57:
              v27 += v16 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v28 = &v7[v16 & 0xFFFFFFFFFFFFFFF8];
              int v37 = &v7[v29];
              BOOL v38 = (std::string::size_type *)((char *)v13->__r_.__value_.__r.__words + v10 + v29);
              unint64_t v39 = v29 - (v16 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v40 = *(void *)v37;
                v37 += 8;
                *v38++ = v40;
                v39 += 8;
              }
              while (v39);
              if (v16 != (v16 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_70;
              }
LABEL_71:
              if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
                unint64_t v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
              }
              return (char *)v8 + v10;
            }
            unint64_t v28 = &v7[v29];
            v27 += v29;
          }
          do
          {
LABEL_70:
            char v49 = *v28++;
            *v27++ = v49;
          }
          while (v28 != a4);
          goto LABEL_71;
        }
LABEL_14:
        if (size == v10)
        {
          std::string::size_type v14 = v10 + __n_add;
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_39;
          }
        }
        else
        {
          memmove((char *)v13 + v10 + __n_add, (char *)v13 + v10, size - v10);
          std::string::size_type v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_39;
          }
        }
        goto LABEL_16;
      }
LABEL_18:
      memset(&v53, 0, sizeof(v53));
      if ((std::string::value_type *)a3 == a4)
      {
        std::string::size_type v19 = 0;
        std::string::size_type v18 = 0;
        unsigned int v17 = 0;
      }
      else
      {
        do
          std::string::push_back(&v53, *v7++);
        while (v7 != a4);
        unsigned int v17 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        std::string::size_type v19 = v53.__r_.__value_.__l.__size_;
        std::string::size_type v18 = v53.__r_.__value_.__r.__words[0];
        LOBYTE(v9) = *((unsigned char *)&v8->__r_.__value_.__s + 23);
      }
      if ((v17 & 0x80u) == 0) {
        unint64_t v20 = &v53;
      }
      else {
        unint64_t v20 = (std::string *)v18;
      }
      if ((v17 & 0x80u) == 0) {
        unint64_t v21 = v17;
      }
      else {
        unint64_t v21 = v19;
      }
      if ((v9 & 0x80) != 0)
      {
        std::string::size_type v22 = v8->__r_.__value_.__l.__size_;
        std::string::size_type v23 = (v8->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v23 - v22 >= __n_add)
        {
          int v24 = (std::string *)v8->__r_.__value_.__r.__words[0];
          size_t v25 = v22 - v10;
          if (v22 == v10)
          {
LABEL_32:
            std::string::size_type v26 = v10 + __n_add;
            if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_47:
              v8->__r_.__value_.__l.__size_ = v26;
              v24->__r_.__value_.__s.__data_[v26] = 0;
              if (!v21) {
                goto LABEL_76;
              }
              goto LABEL_48;
            }
LABEL_36:
            *((unsigned char *)&v8->__r_.__value_.__s + 23) = v26 & 0x7F;
            v24->__r_.__value_.__s.__data_[v26] = 0;
            if (!v21) {
              goto LABEL_76;
            }
LABEL_48:
            int v30 = (char *)v24 + v10;
            if (v21 < 8)
            {
              __int16 v31 = v20;
              goto LABEL_75;
            }
            __int16 v31 = v20;
            if ((unint64_t)((char *)v24 + v10 - (char *)v20) >= 0x20)
            {
              if (v21 < 0x20)
              {
                unint64_t v32 = 0;
                goto LABEL_65;
              }
              unint64_t v32 = v21 & 0xFFFFFFFFFFFFFFE0;
              unint64_t v41 = &v20->__r_.__value_.__r.__words[2];
              int v42 = (_OWORD *)((char *)&v24->__r_.__value_.__r.__words[2] + v10);
              unint64_t v43 = v21 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v44 = *(_OWORD *)v41;
                *(v42 - 1) = *((_OWORD *)v41 - 1);
                _OWORD *v42 = v44;
                v41 += 4;
                v42 += 2;
                v43 -= 32;
              }
              while (v43);
              if (v21 == v32) {
                goto LABEL_76;
              }
              if ((v21 & 0x18) != 0)
              {
LABEL_65:
                v30 += v21 & 0xFFFFFFFFFFFFFFF8;
                __int16 v31 = (std::string *)((char *)v20 + (v21 & 0xFFFFFFFFFFFFFFF8));
                uint64_t v45 = (uint64_t *)((char *)v20 + v32);
                int v46 = (std::string::size_type *)((char *)v24->__r_.__value_.__r.__words + v32 + v10);
                unint64_t v47 = v32 - (v21 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v48 = *v45++;
                  *v46++ = v48;
                  v47 += 8;
                }
                while (v47);
                if (v21 != (v21 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_75;
                }
LABEL_76:
                if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
                {
                  int v50 = (char *)(v8->__r_.__value_.__r.__words[0] + v10);
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    return v50;
                  }
                }
                else
                {
                  int v50 = (char *)v8 + v10;
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    return v50;
                  }
                }
                operator delete(v53.__r_.__value_.__l.__data_);
                return v50;
              }
              __int16 v31 = (std::string *)((char *)v20 + v32);
              v30 += v32;
            }
            do
            {
LABEL_75:
              std::string::value_type v51 = v31->__r_.__value_.__s.__data_[0];
              __int16 v31 = (std::string *)((char *)v31 + 1);
              *v30++ = v51;
            }
            while (v31 != (std::string *)((char *)v20 + v21));
            goto LABEL_76;
          }
LABEL_46:
          memmove((char *)v24 + v10 + __n_add, (char *)v24 + v10, v25);
          std::string::size_type v26 = v22 + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_47;
          }
          goto LABEL_36;
        }
      }
      else
      {
        std::string::size_type v22 = v9;
        std::string::size_type v23 = 22;
        int v24 = v8;
        if (22 - (unint64_t)v9 >= __n_add)
        {
          size_t v25 = v9 - v10;
          if (v9 == v10) {
            goto LABEL_32;
          }
          goto LABEL_46;
        }
      }
      std::string::__grow_by(v8, v23, v22 + __n_add - v23, v22, v10, 0, __n_add);
      v8->__r_.__value_.__l.__size_ = v22 + __n_add;
      int v24 = (std::string *)v8->__r_.__value_.__r.__words[0];
      std::string::size_type v26 = v22 + __n_add;
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_47;
      }
      goto LABEL_36;
    }
    unint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type v10 = a2 - (void)this;
    if (__n_add)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if (a3 < (unint64_t)this || (unint64_t)this->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        std::string::size_type v12 = 22;
        uint64_t v13 = this;
        if (22 - size < __n_add) {
          goto LABEL_6;
        }
        goto LABEL_14;
      }
      goto LABEL_18;
    }
  }
  return (char *)v8 + v10;
}

void sub_10006BAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10006BAEC(std::string *this, uint64_t a2, unint64_t a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  int v7 = (std::string::value_type *)a3;
  unint64_t v8 = this;
  int v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v9 < 0)
  {
    uint64_t v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v10 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      if ((unint64_t)v13 > a3 || (unint64_t)v13->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        std::string::size_type v12 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v12 - size < __n_add)
        {
LABEL_6:
          std::string::__grow_by(this, v12, size + __n_add - v12, size, v10, 0, __n_add);
          v8->__r_.__value_.__l.__size_ = size + __n_add;
          uint64_t v13 = (std::string *)v8->__r_.__value_.__r.__words[0];
          std::string::size_type v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_39:
            v8->__r_.__value_.__l.__size_ = v14;
            v13->__r_.__value_.__s.__data_[v14] = 0;
            if (v7 == a4) {
              goto LABEL_72;
            }
            goto LABEL_40;
          }
LABEL_16:
          *((unsigned char *)&v8->__r_.__value_.__s + 23) = v14 & 0x7F;
          v13->__r_.__value_.__s.__data_[v14] = 0;
          if (v7 == a4) {
            goto LABEL_72;
          }
LABEL_40:
          std::string::size_type v26 = (char *)v13 + v10;
          unint64_t v27 = a4 - v7;
          if ((unint64_t)(a4 - v7) < 8)
          {
            unint64_t v28 = v7;
            goto LABEL_71;
          }
          if ((unint64_t)((char *)v13 + v10 - v7) < 0x20)
          {
            unint64_t v28 = v7;
            goto LABEL_71;
          }
          if (v27 >= 0x20)
          {
            unint64_t v32 = v27 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v33 = (_OWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + v10);
            int v34 = (long long *)(v7 + 16);
            unint64_t v35 = v27 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v36 = *v34;
              *(v33 - 1) = *(v34 - 1);
              *unint64_t v33 = v36;
              v33 += 2;
              v34 += 2;
              v35 -= 32;
            }
            while (v35);
            if (v27 == v32) {
              goto LABEL_72;
            }
            if ((v27 & 0x18) == 0)
            {
              v26 += v32;
              unint64_t v28 = &v7[v32];
              do
              {
LABEL_71:
                char v49 = *v28++;
                *v26++ = v49;
              }
              while (v28 != a4);
              goto LABEL_72;
            }
          }
          else
          {
            unint64_t v32 = 0;
          }
          unint64_t v28 = &v7[v27 & 0xFFFFFFFFFFFFFFF8];
          v26 += v27 & 0xFFFFFFFFFFFFFFF8;
          int v37 = (std::string::size_type *)((char *)v13->__r_.__value_.__r.__words + v10 + v32);
          BOOL v38 = &v7[v32];
          unint64_t v39 = v32 - (v27 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v40 = *(void *)v38;
            v38 += 8;
            *v37++ = v40;
            v39 += 8;
          }
          while (v39);
          if (v27 != (v27 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_71;
          }
LABEL_72:
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
            unint64_t v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
          }
          return (char *)v8 + v10;
        }
LABEL_14:
        if (size == v10)
        {
          std::string::size_type v14 = v10 + __n_add;
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_39;
          }
        }
        else
        {
          memmove((char *)v13 + v10 + __n_add, (char *)v13 + v10, size - v10);
          std::string::size_type v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_39;
          }
        }
        goto LABEL_16;
      }
LABEL_18:
      memset(&v53, 0, sizeof(v53));
      if ((std::string::value_type *)a3 == a4)
      {
        std::string::size_type v18 = 0;
        std::string::size_type v17 = 0;
        unsigned int v16 = 0;
      }
      else
      {
        do
          std::string::push_back(&v53, *v7++);
        while (v7 != a4);
        unsigned int v16 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        std::string::size_type v18 = v53.__r_.__value_.__l.__size_;
        std::string::size_type v17 = v53.__r_.__value_.__r.__words[0];
        LOBYTE(v9) = *((unsigned char *)&v8->__r_.__value_.__s + 23);
      }
      if ((v16 & 0x80u) == 0) {
        std::string::size_type v19 = &v53;
      }
      else {
        std::string::size_type v19 = (std::string *)v17;
      }
      if ((v16 & 0x80u) == 0) {
        unint64_t v20 = v16;
      }
      else {
        unint64_t v20 = v18;
      }
      if ((v9 & 0x80) != 0)
      {
        std::string::size_type v21 = v8->__r_.__value_.__l.__size_;
        std::string::size_type v22 = (v8->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v22 - v21 >= __n_add)
        {
          std::string::size_type v23 = (std::string *)v8->__r_.__value_.__r.__words[0];
          size_t v24 = v21 - v10;
          if (v21 == v10)
          {
LABEL_32:
            std::string::size_type v25 = v10 + __n_add;
            if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_46:
              v8->__r_.__value_.__l.__size_ = v25;
              v23->__r_.__value_.__s.__data_[v25] = 0;
              if (!v20) {
                goto LABEL_77;
              }
              goto LABEL_47;
            }
LABEL_36:
            *((unsigned char *)&v8->__r_.__value_.__s + 23) = v25 & 0x7F;
            v23->__r_.__value_.__s.__data_[v25] = 0;
            if (!v20) {
              goto LABEL_77;
            }
LABEL_47:
            unint64_t v29 = (char *)v23 + v10;
            if (v20 < 8)
            {
              int v30 = v19;
              goto LABEL_76;
            }
            int v30 = v19;
            if ((unint64_t)((char *)v23 + v10 - (char *)v19) >= 0x20)
            {
              if (v20 < 0x20)
              {
                unint64_t v31 = 0;
                goto LABEL_66;
              }
              unint64_t v31 = v20 & 0xFFFFFFFFFFFFFFE0;
              unint64_t v41 = &v19->__r_.__value_.__r.__words[2];
              int v42 = (_OWORD *)((char *)&v23->__r_.__value_.__r.__words[2] + v10);
              unint64_t v43 = v20 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v44 = *(_OWORD *)v41;
                *(v42 - 1) = *((_OWORD *)v41 - 1);
                _OWORD *v42 = v44;
                v41 += 4;
                v42 += 2;
                v43 -= 32;
              }
              while (v43);
              if (v20 == v31) {
                goto LABEL_77;
              }
              if ((v20 & 0x18) != 0)
              {
LABEL_66:
                v29 += v20 & 0xFFFFFFFFFFFFFFF8;
                int v30 = (std::string *)((char *)v19 + (v20 & 0xFFFFFFFFFFFFFFF8));
                uint64_t v45 = (uint64_t *)((char *)v19 + v31);
                int v46 = (std::string::size_type *)((char *)v23->__r_.__value_.__r.__words + v31 + v10);
                unint64_t v47 = v31 - (v20 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v48 = *v45++;
                  *v46++ = v48;
                  v47 += 8;
                }
                while (v47);
                if (v20 != (v20 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_76;
                }
LABEL_77:
                if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
                {
                  int v50 = (char *)(v8->__r_.__value_.__r.__words[0] + v10);
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    return v50;
                  }
                }
                else
                {
                  int v50 = (char *)v8 + v10;
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    return v50;
                  }
                }
                operator delete(v53.__r_.__value_.__l.__data_);
                return v50;
              }
              int v30 = (std::string *)((char *)v19 + v31);
              v29 += v31;
            }
            do
            {
LABEL_76:
              std::string::value_type v51 = v30->__r_.__value_.__s.__data_[0];
              int v30 = (std::string *)((char *)v30 + 1);
              *v29++ = v51;
            }
            while (v30 != (std::string *)((char *)v19 + v20));
            goto LABEL_77;
          }
LABEL_45:
          memmove((char *)v23 + v10 + __n_add, (char *)v23 + v10, v24);
          std::string::size_type v25 = v21 + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_46;
          }
          goto LABEL_36;
        }
      }
      else
      {
        std::string::size_type v21 = v9;
        std::string::size_type v22 = 22;
        std::string::size_type v23 = v8;
        if (22 - (unint64_t)v9 >= __n_add)
        {
          size_t v24 = v9 - v10;
          if (v9 == v10) {
            goto LABEL_32;
          }
          goto LABEL_45;
        }
      }
      std::string::__grow_by(v8, v22, v21 + __n_add - v22, v21, v10, 0, __n_add);
      v8->__r_.__value_.__l.__size_ = v21 + __n_add;
      std::string::size_type v23 = (std::string *)v8->__r_.__value_.__r.__words[0];
      std::string::size_type v25 = v21 + __n_add;
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_46;
      }
      goto LABEL_36;
    }
    unint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type v10 = a2 - (void)this;
    if (__n_add)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((unint64_t)this > a3 || (unint64_t)this->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        std::string::size_type v12 = 22;
        uint64_t v13 = this;
        if (22 - size < __n_add) {
          goto LABEL_6;
        }
        goto LABEL_14;
      }
      goto LABEL_18;
    }
  }
  return (char *)v8 + v10;
}

void sub_10006BF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006BF98(void *a1)
{
  *a1 = off_10046A898;
  if (a1[2]) {
    operator delete[]();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

int *sub_10006C00C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4)
  {
    if (qword_10047BEE8 == -1)
    {
      uint64_t v5 = qword_10047BEF0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO)) {
        goto LABEL_5;
      }
    }
    else
    {
      dispatch_once(&qword_10047BEE8, &stru_10045FE70);
      uint64_t v5 = qword_10047BEF0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO))
      {
LABEL_5:
        sub_10006DE54(a1 + 32, v18);
        operator new();
      }
    }
    LOWORD(v18[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@IndoorAvl, read, requested to getNextVenueBoundsIncrementally but have no file handle, opening now", (uint8_t *)v18, 2u);
    goto LABEL_5;
  }
  uint64_t v6 = sub_1000675A4(a1, v4);
  int v7 = v6;
  if (v6 != 1)
  {
    if (qword_10047BEE8 == -1)
    {
      uint64_t v9 = qword_10047BEF0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO)) {
        goto LABEL_16;
      }
    }
    else
    {
      dispatch_once(&qword_10047BEE8, &stru_10045FE70);
      uint64_t v9 = qword_10047BEF0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO)) {
        goto LABEL_16;
      }
    }
    v18[0] = 67240192;
    v18[1] = v7;
    std::string::size_type v10 = "@IndoorAvl, read, getNextVenueBoundsIncrementally, encountered field with number %{public}d, so there are no m"
          "ore venue bounds left, releasing file handle";
    unint64_t v11 = v9;
    os_log_type_t v12 = OS_LOG_TYPE_INFO;
    uint32_t v13 = 8;
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, (uint8_t *)v18, v13);
    goto LABEL_16;
  }
  if (sub_100067330(v6, v4, a2)) {
    return (int *)1;
  }
  if (qword_10047BEE8 != -1)
  {
    dispatch_once(&qword_10047BEE8, &stru_10045FE70);
    uint64_t v14 = qword_10047BEF0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v14 = qword_10047BEF0;
  if (os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_ERROR))
  {
LABEL_14:
    LOWORD(v18[0]) = 0;
    std::string::size_type v10 = "@IndoorAvl, read, getNextVenueBoundsIncrementally, expected that we should have another VenueBounds object, but we don't";
    unint64_t v11 = v14;
    os_log_type_t v12 = OS_LOG_TYPE_ERROR;
    uint32_t v13 = 2;
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  std::string::size_type v17 = *(int **)(a1 + 80);
  unsigned int v16 = (int **)(a1 + 80);
  sub_10006DA44(v17);
  uint64_t result = *v16;
  void *v16 = 0;
  if (result)
  {
    sub_10006D968(result);
    operator delete();
  }
  return result;
}

void sub_10006C350()
{
}

void sub_10006C374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

void sub_10006C48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006C49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10006C4AC(void *a1, uint64_t a2)
{
  *a1 = off_10046A898;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_10006C568((uint64_t)a1, a2);
  return a1;
}

void sub_10006C51C(_Unwind_Exception *a1)
{
  if (*v3) {
    operator delete[]();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_10006C554(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006C568(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    int v5 = *(_DWORD *)(a1 + 24);
    int v6 = *(_DWORD *)(a1 + 28);
    int v7 = v5 + v4;
    if (v6 < v7)
    {
      int v8 = 2 * v6;
      if (2 * v6 <= v7) {
        int v8 = v7;
      }
      if (v8 <= 4) {
        int v8 = 4;
      }
      *(_DWORD *)(a1 + 28) = v8;
      operator new[]();
    }
    memcpy((void *)(*(void *)(a1 + 16) + 4 * v5), *(const void **)(a2 + 16), 4 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10006C6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10006C6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10006C740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006C750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006C760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006C8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10006C958(double **a1)
{
  sub_10006CC20((uint64_t)a1);
  unint64_t v2 = (unint64_t)*a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = (char *)v3 - (char *)*a1;
  unint64_t v5 = (unint64_t)(*a1 + 2);
  if (v4 < 0x40 || v5 == (void)v3) {
    goto LABEL_16;
  }
  unint64_t v7 = v4 - 32;
  if (v7 < 0x30)
  {
    double v8 = 0.0;
    uint64_t v9 = *a1 + 2;
    std::string::size_type v10 = *a1;
    do
    {
LABEL_10:
      double v18 = *v9;
      v9 += 2;
      double v8 = v8 + (*v10 + v18) * (v10[1] - v10[3]);
      v10 += 2;
    }
    while (v9 != v3);
    goto LABEL_11;
  }
  uint64_t v11 = (v7 >> 4) + 1;
  uint64_t v12 = 16 * (v11 & 0x1FFFFFFFFFFFFFFCLL);
  uint64_t v9 = (double *)(v5 + v12);
  std::string::size_type v10 = (double *)(v2 + v12);
  uint32_t v13 = (const double *)(v2 + 32);
  double v8 = 0.0;
  uint64_t v14 = v11 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v15 = v13 - 4;
    float64x2x2_t v44 = vld2q_f64(v15);
    float64x2x2_t v46 = vld2q_f64(v13);
    unsigned int v16 = v13 - 2;
    std::string::size_type v17 = v13 + 2;
    float64x2x2_t v48 = vld2q_f64(v16);
    float64x2x2_t v50 = vld2q_f64(v17);
    v44.val[0] = vmulq_f64(vaddq_f64(v44.val[0], v48.val[0]), vsubq_f64(v44.val[1], v48.val[1]));
    v44.val[1] = vmulq_f64(vaddq_f64(v46.val[0], v50.val[0]), vsubq_f64(v46.val[1], v50.val[1]));
    double v8 = v8 + v44.val[0].f64[0] + v44.val[0].f64[1] + v44.val[1].f64[0] + v44.val[1].f64[1];
    v13 += 8;
    v14 -= 4;
  }
  while (v14);
  if (v11 != (v11 & 0x1FFFFFFFFFFFFFFCLL)) {
    goto LABEL_10;
  }
LABEL_11:
  if (v8 * 0.5 < 0.0 && (double *)v2 != v3)
  {
    std::string::size_type v19 = v3 - 2;
    if ((unint64_t)v19 > v2)
    {
      do
      {
        long long v20 = *(_OWORD *)(v5 - 16);
        *(_OWORD *)(v5 - 16) = *(_OWORD *)v19;
        *(_OWORD *)std::string::size_type v19 = v20;
        v19 -= 2;
        BOOL v21 = v5 >= (unint64_t)v19;
        v5 += 16;
      }
      while (!v21);
    }
  }
LABEL_16:
  size_t v24 = a1 + 3;
  std::string::size_type v22 = (double **)a1[3];
  std::string::size_type v23 = (double **)v24[1];
  if (v22 != v23)
  {
    while (1)
    {
      sub_10006CC20((uint64_t)v22);
      unint64_t v25 = (unint64_t)*v22;
      std::string::size_type v26 = v22[1];
      unint64_t v27 = (char *)v26 - (char *)*v22;
      unint64_t v28 = (unint64_t)(*v22 + 2);
      if (v27 < 0x40 || v28 == (void)v26) {
        goto LABEL_18;
      }
      unint64_t v30 = v27 - 32;
      if (v30 < 0x30) {
        break;
      }
      uint64_t v34 = (v30 >> 4) + 1;
      uint64_t v35 = 16 * (v34 & 0x1FFFFFFFFFFFFFFCLL);
      unint64_t v32 = (double *)(v28 + v35);
      unint64_t v33 = (double *)(v25 + v35);
      long long v36 = (const double *)(v25 + 32);
      double v31 = 0.0;
      uint64_t v37 = v34 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        BOOL v38 = v36 - 4;
        float64x2x2_t v45 = vld2q_f64(v38);
        float64x2x2_t v47 = vld2q_f64(v36);
        unint64_t v39 = v36 - 2;
        uint64_t v40 = v36 + 2;
        float64x2x2_t v49 = vld2q_f64(v39);
        float64x2x2_t v51 = vld2q_f64(v40);
        v45.val[0] = vmulq_f64(vaddq_f64(v45.val[0], v49.val[0]), vsubq_f64(v45.val[1], v49.val[1]));
        v45.val[1] = vmulq_f64(vaddq_f64(v47.val[0], v51.val[0]), vsubq_f64(v47.val[1], v51.val[1]));
        double v31 = v31 + v45.val[0].f64[0] + v45.val[0].f64[1] + v45.val[1].f64[0] + v45.val[1].f64[1];
        v36 += 8;
        v37 -= 4;
      }
      while (v37);
      if (v34 != (v34 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_28;
      }
LABEL_29:
      if (v31 * 0.5 > 0.0 && (double *)v25 != v26)
      {
        int v42 = v26 - 2;
        if ((unint64_t)v42 > v25)
        {
          do
          {
            long long v43 = *(_OWORD *)(v28 - 16);
            *(_OWORD *)(v28 - 16) = *(_OWORD *)v42;
            *(_OWORD *)int v42 = v43;
            v42 -= 2;
            BOOL v21 = v28 >= (unint64_t)v42;
            v28 += 16;
          }
          while (!v21);
        }
      }
LABEL_18:
      v22 += 3;
      if (v22 == v23) {
        return;
      }
    }
    double v31 = 0.0;
    unint64_t v32 = *v22 + 2;
    unint64_t v33 = *v22;
    do
    {
LABEL_28:
      double v41 = *v32;
      v32 += 2;
      double v31 = v31 + (*v33 + v41) * (v33[1] - v33[3]);
      v33 += 2;
    }
    while (v32 != v26);
    goto LABEL_29;
  }
}

void sub_10006CC20(uint64_t a1)
{
  uint64_t v1 = *(double **)a1;
  unint64_t v2 = *(double **)(a1 + 8);
  uint64_t v3 = (uint64_t)v2 - *(void *)a1;
  if ((unint64_t)v3 >= 0x30)
  {
    double v5 = *v1;
    double v6 = *(v2 - 2);
    if (*v1 != v6)
    {
      if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_21;
      }
      double v10 = vabdd_f64(v5, v6);
      double v11 = fabs(v5);
      double v12 = fabs(v6);
      if (v11 >= v12) {
        double v12 = v11;
      }
      double v13 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
      if (v10 > v13) {
        goto LABEL_21;
      }
    }
    double v7 = v1[1];
    double v8 = *(v2 - 1);
    if (v7 != v8)
    {
      if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_21;
      }
      double v25 = vabdd_f64(v7, v8);
      double v26 = fabs(v7);
      double v27 = fabs(v8);
      if (v26 < v27) {
        double v26 = v27;
      }
      double v28 = v26 >= 1.0 ? v26 * 2.22044605e-16 : 2.22044605e-16;
      if (v25 > v28)
      {
LABEL_21:
        uint64_t v15 = *((void *)v1 + 1);
        unint64_t v16 = *(void *)(a1 + 16);
        if ((unint64_t)v2 < v16)
        {
          *unint64_t v2 = v5;
          *((void *)v2 + 1) = v15;
          uint64_t v17 = (uint64_t)(v2 + 2);
LABEL_39:
          *(void *)(a1 + 8) = v17;
          return;
        }
        uint64_t v18 = v3 >> 4;
        unint64_t v19 = (v3 >> 4) + 1;
        if (v19 >> 60) {
          sub_1000A9108();
        }
        uint64_t v20 = v16 - (void)v1;
        if (v20 >> 3 > v19) {
          unint64_t v19 = v20 >> 3;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          if (v21 >> 60) {
            sub_1000A6A10();
          }
          std::string::size_type v22 = (char *)operator new(16 * v21);
          std::string::size_type v23 = &v22[16 * v18];
          size_t v24 = &v22[16 * v21];
          *(double *)std::string::size_type v23 = v5;
          *((void *)v23 + 1) = v15;
          uint64_t v17 = (uint64_t)(v23 + 16);
          if (v2 == v1) {
            goto LABEL_37;
          }
        }
        else
        {
          std::string::size_type v23 = (char *)(16 * v18);
          size_t v24 = 0;
          *(double *)std::string::size_type v23 = v5;
          *((void *)v23 + 1) = v15;
          uint64_t v17 = 16 * v18 + 16;
          if (v2 == v1)
          {
LABEL_37:
            *(void *)a1 = v23;
            *(void *)(a1 + 8) = v17;
            *(void *)(a1 + 16) = v24;
LABEL_38:
            operator delete(v1);
            goto LABEL_39;
          }
        }
        do
        {
          *((_OWORD *)v23 - 1) = *((_OWORD *)v2 - 1);
          v23 -= 16;
          v2 -= 2;
        }
        while (v2 != v1);
        uint64_t v1 = *(double **)a1;
        *(void *)a1 = v23;
        *(void *)(a1 + 8) = v17;
        *(void *)(a1 + 16) = v24;
        if (!v1) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
    }
  }
}

void sub_10006D0B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006D100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006D31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1000E0AA4(v9);
  _Unwind_Resume(a1);
}

void sub_10006D388(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1000A9108();
  }
  unint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 24 * a2;
  double v6 = (char *)operator new(24 * a2);
  double v7 = &v6[v5];
  double v8 = &v6[24 * (((char *)v4 - (char *)v2) / 24)];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v9 = &v6[24 * (((char *)v4 - (char *)v2) / 24)];
  do
  {
    long long v10 = *(_OWORD *)(v4 - 3);
    *((void *)v9 - 1) = *(v4 - 1);
    *(_OWORD *)(v9 - 24) = v10;
    v9 -= 24;
    *(v4 - 2) = 0;
    *(v4 - 1) = 0;
    *(v4 - 3) = 0;
    v4 -= 3;
  }
  while (v4 != v2);
  double v11 = *(void ***)a1;
  unint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v11)
  {
    do
    {
      if (*((char *)v2 - 1) < 0) {
        operator delete(*(v2 - 3));
      }
      v2 -= 3;
    }
    while (v2 != v11);
    unint64_t v2 = v11;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

void sub_10006D4D0(uint64_t **a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = (uint64_t)a1;
  if (a1[2])
  {
    double v6 = *a1;
    double v8 = a1 + 1;
    double v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    int v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    if (v6[1]) {
      uint64_t v9 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v9 = v6;
    }
    if (!v9)
    {
      size_t v24 = 0;
LABEL_47:
      sub_10006A9DC((uint64_t)a1, v24);
      goto LABEL_48;
    }
    long long v10 = (uint64_t *)v9[2];
    if (v10)
    {
      double v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        uint64_t *v10 = 0;
        while (1)
        {
          uint64_t v35 = (uint64_t *)v10[1];
          if (!v35) {
            break;
          }
          do
          {
            long long v10 = v35;
            uint64_t v35 = (uint64_t *)*v35;
          }
          while (v35);
        }
      }
      else
      {
        for (v10[1] = 0; v11; double v11 = (uint64_t *)v10[1])
        {
          do
          {
            long long v10 = v11;
            double v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    if (a2 != a3)
    {
      double v12 = v9;
      double v13 = v4;
      while (1)
      {
        uint64_t v9 = v10;
        unint64_t v14 = v13[4];
        void v12[4] = v14;
        uint64_t v15 = *v8;
        unint64_t v16 = (uint64_t **)(v5 + 8);
        uint64_t v17 = (uint64_t **)(v5 + 8);
        if (*v8) {
          break;
        }
LABEL_14:
        *double v12 = 0;
        v12[1] = 0;
        _DWORD v12[2] = (uint64_t)v16;
        *uint64_t v17 = v12;
        uint64_t v18 = **(void **)v5;
        if (v18) {
          goto LABEL_15;
        }
LABEL_16:
        sub_1000619B8(*(uint64_t **)(v5 + 8), v12);
        ++*(void *)(v5 + 16);
        if (v10)
        {
          long long v10 = (uint64_t *)v10[2];
          if (v10)
          {
            unint64_t v21 = (uint64_t *)*v10;
            if ((uint64_t *)*v10 == v9)
            {
              uint64_t *v10 = 0;
              while (1)
              {
                std::string::size_type v22 = (uint64_t *)v10[1];
                if (!v22) {
                  break;
                }
                do
                {
                  long long v10 = v22;
                  std::string::size_type v22 = (uint64_t *)*v22;
                }
                while (v22);
              }
            }
            else
            {
              for (v10[1] = 0; v21; unint64_t v21 = (uint64_t *)v10[1])
              {
                do
                {
                  long long v10 = v21;
                  unint64_t v21 = (uint64_t *)*v21;
                }
                while (v21);
              }
            }
          }
        }
        else
        {
          long long v10 = 0;
        }
        unint64_t v19 = (void *)v13[1];
        if (v19)
        {
          do
          {
            unint64_t v4 = v19;
            unint64_t v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            unint64_t v4 = (void *)v13[2];
            BOOL v20 = *v4 == (void)v13;
            double v13 = v4;
          }
          while (!v20);
        }
        if (v9)
        {
          double v12 = v9;
          double v13 = v4;
          if (v4 != a3) {
            continue;
          }
        }
        goto LABEL_42;
      }
      do
      {
        while (1)
        {
          unint64_t v16 = (uint64_t **)v15;
          if (v14 >= v15[4]) {
            break;
          }
          uint64_t v15 = (uint64_t *)*v15;
          uint64_t v17 = v16;
          if (!*v16) {
            goto LABEL_14;
          }
        }
        uint64_t v15 = (uint64_t *)v15[1];
      }
      while (v15);
      uint64_t v17 = v16 + 1;
      *double v12 = 0;
      v12[1] = 0;
      _DWORD v12[2] = (uint64_t)v16;
      v16[1] = v12;
      uint64_t v18 = **(void **)v5;
      if (!v18) {
        goto LABEL_16;
      }
LABEL_15:
      *(void *)uint64_t v5 = v18;
      double v12 = *v17;
      goto LABEL_16;
    }
LABEL_42:
    sub_10006A9DC(v5, v9);
    if (v10)
    {
      for (int i = (uint64_t *)v10[2]; i; int i = (uint64_t *)i[2])
        long long v10 = i;
      a1 = (uint64_t **)v5;
      size_t v24 = v10;
      goto LABEL_47;
    }
  }
LABEL_48:
  if (v4 != a3)
  {
    double v25 = (uint64_t **)(v5 + 8);
    while (1)
    {
      double v26 = (uint64_t *)operator new(0x28uLL);
      double v27 = v26;
      unint64_t v28 = v4[4];
      v26[4] = v28;
      unint64_t v29 = *v25;
      unint64_t v30 = (uint64_t **)(v5 + 8);
      double v31 = (uint64_t **)(v5 + 8);
      if (*v25) {
        break;
      }
LABEL_52:
      *double v26 = 0;
      v26[1] = 0;
      double v26[2] = (uint64_t)v30;
      std::string *v31 = v26;
      uint64_t v32 = **(void **)v5;
      if (v32) {
        goto LABEL_53;
      }
LABEL_54:
      sub_1000619B8(*(uint64_t **)(v5 + 8), v27);
      ++*(void *)(v5 + 16);
      unint64_t v33 = (void *)v4[1];
      if (v33)
      {
        do
        {
          uint64_t v34 = v33;
          unint64_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          uint64_t v34 = (void *)v4[2];
          BOOL v20 = *v34 == (void)v4;
          unint64_t v4 = v34;
        }
        while (!v20);
      }
      unint64_t v4 = v34;
      if (v34 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        unint64_t v30 = (uint64_t **)v29;
        if (v28 >= v29[4]) {
          break;
        }
        unint64_t v29 = (uint64_t *)*v29;
        double v31 = v30;
        if (!*v30) {
          goto LABEL_52;
        }
      }
      unint64_t v29 = (uint64_t *)v29[1];
    }
    while (v29);
    double v31 = v30 + 1;
    *double v26 = 0;
    v26[1] = 0;
    double v26[2] = (uint64_t)v30;
    v30[1] = v26;
    uint64_t v32 = **(void **)v5;
    if (!v32) {
      goto LABEL_54;
    }
LABEL_53:
    *(void *)uint64_t v5 = v32;
    double v27 = *v31;
    goto LABEL_54;
  }
}

void sub_10006D838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006D8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006D8C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006D944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int *sub_10006D968(int *a1)
{
  if (*a1 != -1) {
    sub_10006DA44(a1);
  }
  return a1;
}

uint64_t sub_10006D9A4(uint64_t a1)
{
  *(void *)a1 = &off_10046A9F8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0x3FFF5C28F5C28F5CLL;
  *(void *)&long long v2 = 0xC8000000C8;
  *((void *)&v2 + 1) = 0xC8000000C8;
  *(_OWORD *)(a1 + 56) = v2;
  *(_OWORD *)(a1 + 72) = xmmword_1003FE660;
  *(void *)(a1 + 88) = 0x40E0000000000001;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 104) = 1088421888;
  return a1;
}

void sub_10006DA30(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006DA44(int *a1)
{
  int v2 = *a1;
  if (v2 == -1) {
    sub_1003A42F4();
  }
  uint64_t result = close(v2);
  *a1 = -1;
  if (result == -1)
  {
    uint64_t v4 = sub_1003A4464();
    return sub_10006DA8C(v4);
  }
  return result;
}

void sub_10006DA8C(uint64_t a1)
{
  *(void *)a1 = &off_10046A9F8;
  if (qword_100492AD0 != a1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *(void *)(a1 + 96);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  int v4 = *(_DWORD *)(a1 + 28);
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i < v4; ++i)
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 16) + 8 * i);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        int v4 = *(_DWORD *)(a1 + 28);
      }
    }
  }
  if (*(void *)(a1 + 16)) {
    operator delete[]();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_10006DBC0(void *a1)
{
  *a1 = off_10045E7E0;
  uint64_t v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_10006E344(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

int *sub_10006DC38(int *a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v9 = (const char *)a2;
  }
  else {
    uint64_t v9 = *(const char **)a2;
  }
  size_t v10 = strlen(v9);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  double v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    double v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    int64_t v23 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_11;
  }
  HIBYTE(v23) = v10;
  double v12 = __dst;
  if (v10) {
LABEL_11:
  }
    memmove(v12, v9, (size_t)v11);
  *((unsigned char *)v11 + (void)v12) = 0;
  int v15 = a3 | 0x10;
  if (a4 != 1) {
    int v15 = a3;
  }
  if (a4 == 2) {
    int v16 = a3 | 0x20;
  }
  else {
    int v16 = v15;
  }
  if (v23 >= 0) {
    uint64_t v17 = (const char *)__dst;
  }
  else {
    uint64_t v17 = (const char *)__dst[0];
  }
  int v18 = open(v17, v16, a5);
  if (SHIBYTE(v23) < 0) {
    operator delete(__dst[0]);
  }
  *a1 = v18;
  if (v18 == -1)
  {
    if (qword_10047BEE8 == -1)
    {
      BOOL v20 = qword_10047BEF0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
    }
    else
    {
      dispatch_once(&qword_10047BEE8, &stru_10045FF00);
      BOOL v20 = qword_10047BEF0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_ERROR))
      {
LABEL_28:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "error while opening availability file");
      }
    }
    LOWORD(__dst[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "@IndoorAvl, error while opening file", (uint8_t *)__dst, 2u);
    goto LABEL_28;
  }
  return a1;
}

void sub_10006DE24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10006DE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10006DE54@<X0>(uint64_t a1@<X0>, int *a2@<X8>)
{
  return sub_10006DC38(a2, a1, 0, 0, 0);
}

uint64_t sub_10006DE6C(uint64_t a1, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (qword_10047BEE8 == -1)
  {
    uint64_t v6 = qword_10047BEF0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_10047BEE8, &stru_10045FE70);
  uint64_t v6 = qword_10047BEF0;
  if (os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    int v7 = *(_DWORD *)(a1 + 88);
    uint64_t v8 = *(void *)(a1 + 96);
    *(_DWORD *)uint64_t buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v7;
    __int16 v28 = 2050;
    uint64_t v29 = v8;
    __int16 v30 = 2050;
    uint64_t v31 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "@IndoorAvl, load, _readMetadataProtobufObjectsFromFile, got %d as field_number, so no more venue bounds; read %{pu"
      "blic}lld bytes of %{public}lld from zcis",
      buf,
      0x1Cu);
  }
LABEL_4:
  sub_10006DE54(a1 + 32, &v25);
  sub_10006E2D8(&v25, *(void *)(a1 + 96));
  wireless_diagnostics::google::protobuf::io::FileInputStream::FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)buf, v25, -1);
  *(void *)(a1 + 64) = *(void *)(a1 + 96);
  v19[0] = buf;
  memset(&v19[1], 0, 30);
  long long v20 = xmmword_1003E7100;
  int v21 = 0;
  int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::default_recursion_limit_;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  wireless_diagnostics::google::protobuf::io::CodedInputStream::Refresh((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v19);
  if (a2)
  {
    LODWORD(a1) = *(_DWORD *)(a1 + 96);
    if (qword_10047BEE8 == -1)
    {
      int v9 = a3 - a1;
      size_t v10 = qword_10047BEF0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else
  {
    sub_1003A419C((NSObject **)v26);

    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_10047BEE8, &stru_10045FE70);
  int v9 = a3 - a1;
  size_t v10 = qword_10047BEF0;
  if (os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_DEBUG))
  {
LABEL_7:
    *(_DWORD *)double v26 = 67240192;
    *(_DWORD *)&v26[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "@IndoorAvl, load, need to read %{public}d more", v26, 8u);
  }
LABEL_8:
  int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v19, v9);
  int v12 = wireless_diagnostics::google::protobuf::MessageLite::ParseFromCodedStream(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)v19);
  if ((v12 & 1) == 0)
  {
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v19, v11);
LABEL_12:
    if (qword_10047BEE8 == -1)
    {
      int v15 = qword_10047BEF0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_15;
      }
    }
    else
    {
      dispatch_once(&qword_10047BEE8, &stru_10045FE70);
      int v15 = qword_10047BEF0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEF0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_15;
      }
    }
    *(_DWORD *)double v26 = 67240192;
    *(_DWORD *)&v26[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "@IndoorAvl, load, Expected that we parsed and consumed the entire message, but we didn't, parsed = %{public}d", v26, 8u);
    if (qword_10047BEE8 != -1)
    {
      dispatch_once(&qword_10047BEE8, &stru_10045FE70);
      int v16 = (id)qword_10047BEF0;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
LABEL_15:
    int v16 = (id)qword_10047BEF0;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
LABEL_17:

      uint64_t v14 = 0;
      goto LABEL_18;
    }
LABEL_16:
    uint64_t v17 = (*(uint64_t (**)(uint8_t *))(*(void *)buf + 40))(buf);
    *(_DWORD *)double v26 = 134349056;
    *(void *)&v26[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "@IndoorAvl, _readMetadataProtobufObjectsFromFile, failed to read localizer params from the input stream, have read %{public}lld bytes from local stream", v26, 0xCu);
    goto LABEL_17;
  }
  int v13 = BYTE4(v19[4]);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v19, v11);
  if (!v13) {
    goto LABEL_12;
  }
  uint64_t v14 = 1;
LABEL_18:
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v19);
  wireless_diagnostics::google::protobuf::io::FileInputStream::~FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)buf);
  sub_10006D968(&v25);
  return v14;
}

void sub_10006E260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,uint64_t a24,uint64_t a25,char a26)
{
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a12);
  wireless_diagnostics::google::protobuf::io::FileInputStream::~FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)&a26);
  sub_10006D968(&a23);
  _Unwind_Resume(a1);
}

off_t sub_10006E2D8(int *a1, off_t a2)
{
  return lseek(*a1, a2, 0);
}

void sub_10006E2E4(void *a1)
{
  *a1 = off_10045E7E0;
  uint64_t v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_10006E344(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);

  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void *sub_10006E344(void *result)
{
  if ((void *)qword_10047F018 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[6];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[7];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = v1[8];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v1[9];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = v1[10];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = v1[11];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = v1[13];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = v1[18];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = v1[20];
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = v1[21];
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v12 = v1[22];
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t v13 = v1[25];
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t v14 = v1[26];
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    uint64_t v15 = v1[27];
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = v1[29];
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = v1[30];
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    uint64_t v18 = v1[32];
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    uint64_t v19 = v1[33];
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    uint64_t v20 = v1[34];
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    uint64_t v21 = v1[35];
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    uint64_t result = (void *)v1[36];
    if (result)
    {
      int v22 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v22();
    }
  }
  return result;
}

void sub_10006E728(uint64_t a1)
{
  *(void *)a1 = off_10045E470;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_10006E790(void *a1)
{
  *a1 = off_10045E310;
  if ((void *)qword_10047EFE0 != a1)
  {
    uint64_t v2 = a1[4];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

void sub_10006E838(uint64_t a1)
{
  *(void *)a1 = off_10045E3C0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);

  operator delete();
}

uint64_t sub_10006E8A0(uint64_t a1, uint64_t a2)
{
  unint64_t v64 = (uint8_t *)(a1 + 24);
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v2 = a1 + 48;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  uint64_t v71 = 0;
  __int16 v72 = 0;
  __int16 v73 = 0;
  uint64_t v3 = (uint64_t ***)(a2 + 8);
  uint64_t v4 = *(uint64_t ****)a2;
  uint64_t v67 = a1 + 48;
  if (*(void *)a2 == a2 + 8)
  {
    std::string __p = 0;
    signed int v69 = 0;
    goto LABEL_68;
  }
  unint64_t v5 = 0;
  uint64_t v6 = *(uint64_t ****)a2;
  do
  {
    uint64_t v7 = v6[1];
    uint64_t v8 = (uint64_t **)v6;
    if (v7)
    {
      do
      {
        uint64_t v9 = (uint64_t ***)v7;
        uint64_t v7 = (uint64_t **)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v9 = (uint64_t ***)v8[2];
        BOOL v10 = *v9 == v8;
        uint64_t v8 = (uint64_t **)v9;
      }
      while (!v10);
    }
    v5 += ((char *)v6[7] - (char *)v6[6]) >> 5;
    uint64_t v6 = v9;
  }
  while (v9 != v3);
  std::string __p = 0;
  signed int v69 = 0;
  unsigned int v70 = 0;
  if (v5)
  {
    if (v5 > 0x1999999999999999) {
      sub_1000A9108();
    }
    std::string __p = (int *)operator new(10 * v5);
    signed int v69 = __p;
    unsigned int v70 = (int *)((char *)__p + 10 * v5);
  }
  if (v4 != v3)
  {
    int v66 = v3;
LABEL_16:
    if (sub_10006F318(v2, v4 + 4)) {
      int v11 = sub_10028C9FC(v2, v4 + 4);
    }
    else {
      int v11 = sub_10006F33C(v2, (uint64_t)(v4 + 4));
    }
    int v12 = v11;
    uint64_t v14 = v4[6];
    uint64_t v13 = v4[7];
    while (1)
    {
      while (1)
      {
        if (v14 == v13)
        {
          float64x2x2_t v45 = v4[1];
          uint64_t v2 = v67;
          if (v45)
          {
            do
            {
              float64x2x2_t v46 = (uint64_t ***)v45;
              float64x2x2_t v45 = (uint64_t **)*v45;
            }
            while (v45);
          }
          else
          {
            do
            {
              float64x2x2_t v46 = (uint64_t ***)v4[2];
              BOOL v10 = *v46 == (uint64_t **)v4;
              uint64_t v4 = v46;
            }
            while (!v10);
          }
          uint64_t v4 = v46;
          uint64_t v3 = v66;
          if (v46 != v66) {
            goto LABEL_16;
          }
          goto LABEL_68;
        }
        int v16 = *(_DWORD *)v14;
        int v17 = *(int *)v14 >> 31;
        if (v16 >> 31 != v16) {
          break;
        }
        sub_10006F1A8((uint64_t)buf, (unint64_t)v14[1]);
        uint64_t v18 = v69;
        if (v69 < v70)
        {
          int v15 = *(_DWORD *)buf;
          *((_WORD *)v69 + 2) = *(_WORD *)&buf[4];
          int *v69 = v15;
          *(int *)((char *)v69 + 6) = v12;
          signed int v69 = (int *)((char *)v69 + 10);
          v14 += 4;
        }
        else
        {
          uint64_t v19 = __p;
          unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v69 - (char *)__p) >> 1) + 1;
          if (v20 > 0x1999999999999999) {
            sub_1000A9108();
          }
          if (0x999999999999999ALL * (((char *)v70 - (char *)__p) >> 1) > v20) {
            unint64_t v20 = 0x999999999999999ALL * (((char *)v70 - (char *)__p) >> 1);
          }
          if (0xCCCCCCCCCCCCCCCDLL * (((char *)v70 - (char *)__p) >> 1) >= 0xCCCCCCCCCCCCCCCLL) {
            unint64_t v21 = 0x1999999999999999;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21 > 0x1999999999999999) {
            sub_1000A6A10();
          }
          int v22 = (char *)operator new(10 * v21);
          int v23 = *(_DWORD *)buf;
          uint64_t v24 = &v22[2 * (((char *)v69 - (char *)__p) >> 1)];
          *((_WORD *)v24 + 2) = *(_WORD *)&buf[4];
          *(_DWORD *)uint64_t v24 = v23;
          *(_DWORD *)(v24 + 6) = v12;
          int v25 = v24;
          while (v18 != __p)
          {
            uint64_t v26 = *(void *)((char *)v18 - 10);
            uint64_t v18 = (int *)((char *)v18 - 10);
            __int16 v27 = *((_WORD *)v18 + 4);
            *(void *)(v25 - 10) = v26;
            v25 -= 10;
            *((_WORD *)v25 + 4) = v27;
          }
          __int16 v28 = (int *)(v24 + 10);
          std::string __p = (int *)v25;
          unsigned int v70 = (int *)&v22[10 * v21];
          if (v19) {
            operator delete(v19);
          }
          signed int v69 = v28;
          v14 += 4;
        }
      }
      uint64_t v29 = v72;
      if (v72 < (int *)v73)
      {
        long long v30 = *(_OWORD *)(v14 + 1);
        v72[6] = *((_DWORD *)v14 + 6);
        *(_OWORD *)(v72 + 2) = v30;
        *__int16 v72 = *(_DWORD *)v14 ^ (*(int *)v14 >> 31);
        v72[8] = v12;
        uint64_t v31 = v72 + 10;
        goto LABEL_60;
      }
      unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v72 - (char *)v71) >> 3) + 1;
      if (v32 > 0x666666666666666) {
        sub_1000A9108();
      }
      if (0x999999999999999ALL * ((v73 - (char *)v71) >> 3) > v32) {
        unint64_t v32 = 0x999999999999999ALL * ((v73 - (char *)v71) >> 3);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v73 - (char *)v71) >> 3) >= 0x333333333333333) {
        unint64_t v33 = 0x666666666666666;
      }
      else {
        unint64_t v33 = v32;
      }
      if (v33)
      {
        if (v33 > 0x666666666666666) {
          sub_1000A6A10();
        }
        uint64_t v34 = operator new(40 * v33);
        int v16 = *(_DWORD *)v14;
        int v17 = *(int *)v14 >> 31;
        uint64_t v35 = &v34[2 * (((char *)v72 - (char *)v71) >> 3)];
        long long v36 = v35 + 2;
        uint64_t v37 = (long long *)(v14 + 1);
        if (v16 >> 31 != v16)
        {
LABEL_50:
          long long v38 = *v37;
          v36[4] = *((_DWORD *)v37 + 4);
          *(_OWORD *)long long v36 = v38;
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = (int *)(8 * (((char *)v72 - (char *)v71) >> 3));
        long long v36 = v35 + 2;
        uint64_t v37 = (long long *)(v14 + 1);
        if (v17 != v16) {
          goto LABEL_50;
        }
      }
      *(void *)long long v36 = *(void *)v37;
      int v17 = v16;
LABEL_51:
      *uint64_t v35 = v17 ^ v16;
      uint64_t v31 = v35 + 10;
      v34[2 * (((char *)v72 - (char *)v71) >> 3) + 8] = v12;
      if (v72 != v71)
      {
        uint64_t v39 = 0;
        do
        {
          long long v43 = &v35[v39 - 8];
          int v42 = v72[v39 - 10];
          float64x2x2_t v44 = &v72[v39 - 8];
          if (v42 == v42 >> 31)
          {
            *(void *)long long v43 = *(void *)v44;
            int v41 = v42;
          }
          else
          {
            long long v40 = *(_OWORD *)v44;
            v35[v39 - 4] = v72[v39 - 4];
            *(_OWORD *)long long v43 = v40;
            int v41 = v72[v39 - 10];
            int v42 = v41 >> 31;
          }
          v35[v39 - 10] = v41 ^ v42;
          v35[v39 - 2] = v72[v39 - 2];
          v39 -= 10;
        }
        while (&v72[v39] != v71);
        uint64_t v29 = v71;
        uint64_t v35 = (int *)((char *)v35 + v39 * 4);
      }
      uint64_t v71 = v35;
      __int16 v73 = (char *)&v34[10 * v33];
      if (v29) {
        operator delete(v29);
      }
LABEL_60:
      __int16 v72 = v31;
      v14 += 4;
    }
  }
LABEL_68:
  sub_10001B8B8(a2, *(void **)(a2 + 8));
  unint64_t v47 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v69 - (char *)__p) >> 1));
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = v3;
  if (v69 == __p) {
    uint64_t v48 = 0;
  }
  else {
    uint64_t v48 = v47;
  }
  sub_100095138((uint64_t)__p, (unsigned int *)v69, (uint64_t)buf, v48, 1);
  memset(buf, 0, sizeof(buf));
  if (v69 == __p)
  {
    *(void *)&uint8_t buf[8] = 0xCCCCCCCCCCCCCCCDLL * (((char *)v69 - (char *)__p) >> 1);
    uint64_t v49 = a1;
  }
  else
  {
    uint64_t v49 = a1;
    sub_10006661C((char **)buf, 0, 0xCCCCCCCCCCCCCCCDLL * (((char *)v69 - (char *)__p) >> 1), __p, &v74);
  }
  if (buf == (uint8_t *)v49)
  {
    if (*(void *)&buf[16]) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    *(void *)(v49 + 8) = 0;
    if (*(void *)v49) {
      operator delete(*(void **)v49);
    }
    *(void *)uint64_t v49 = *(void *)buf;
    *(_OWORD *)(v49 + 8) = *(_OWORD *)&buf[8];
  }
  unint64_t v50 = *(void *)(v49 + 16);
  if (v50)
  {
    unint64_t v51 = *(void *)(v49 + 8);
    if (v51)
    {
      if (v51 >= v50) {
        goto LABEL_87;
      }
      if (v51 > 0xCCCCCCCCCCCCCCCLL) {
        sub_1002782B4((uint64_t)"get_next_capacity, allocator's max size reached");
      }
      int v52 = operator new(10 * v51);
      std::string v53 = v52;
      uint64_t v49 = a1;
      int v54 = *(void **)a1;
      if (*(void *)a1 && (uint64_t v55 = *(void *)(a1 + 8)) != 0)
      {
        memmove(v52, *(const void **)a1, 10 * v55);
      }
      else if (!v54)
      {
        goto LABEL_86;
      }
    }
    else
    {
      std::string v53 = 0;
      int v54 = *(void **)v49;
      if (!*(void *)v49)
      {
LABEL_86:
        *(void *)uint64_t v49 = v53;
        *(void *)(v49 + 16) = v51;
        goto LABEL_87;
      }
    }
    operator delete(v54);
    goto LABEL_86;
  }
LABEL_87:
  if (qword_10047BED8 == -1)
  {
    unsigned int v56 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  dispatch_once(&qword_10047BED8, &stru_100463620);
  unsigned int v56 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
  {
LABEL_89:
    uint64_t v57 = *(void *)(v49 + 8);
    *(_DWORD *)uint64_t buf = 134217984;
    *(void *)&uint8_t buf[4] = v57;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "mac to location_id lookup, bulk inserted wifi macs, total, %zu", buf, 0xCu);
  }
LABEL_90:
  if (v71 == v72) {
    goto LABEL_98;
  }
  unint64_t v58 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v72 - (char *)v71) >> 3);
  sub_100286960((uint64_t)v71, v72, (uint64_t)buf, 126 - 2 * __clz(v58), 1);
  memset(buf, 0, sizeof(buf));
  sub_10027CDA4(buf, 0, v58, v71, &v74);
  if (buf == v64)
  {
    if (*(void *)&buf[16]) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    unint64_t v59 = *(void **)(a1 + 24);
    if (v59) {
      operator delete(v59);
    }
    *(void *)(a1 + 24) = *(void *)buf;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&buf[8];
  }
  sub_10027D040((char **)v64);
  if (qword_10047BED8 == -1)
  {
    int v60 = qword_10047BEE0;
    uint64_t v49 = a1;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_98;
    }
    goto LABEL_97;
  }
  dispatch_once(&qword_10047BED8, &stru_100463620);
  int v60 = qword_10047BEE0;
  uint64_t v49 = a1;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
  {
LABEL_97:
    uint64_t v61 = *(void *)(v49 + 32);
    *(_DWORD *)uint64_t buf = 134217984;
    *(void *)&uint8_t buf[4] = v61;
    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "mac to location_id lookup, bulk inserted beacon macs, total, %zu", buf, 0xCu);
  }
LABEL_98:
  if (__p) {
    operator delete(__p);
  }
  if (v71) {
    operator delete(v71);
  }
  return v49;
}

void sub_10006F0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23)
{
  if (a23) {
    operator delete(__p);
  }
  if (a14)
  {
    operator delete(a14);
    uint64_t v24 = a17;
    if (!a17)
    {
LABEL_5:
      sub_1000A0968(a13);
      if (!*(void *)(a11 + 40)) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v24 = a17;
    if (!a17) {
      goto LABEL_5;
    }
  }
  operator delete(v24);
  sub_1000A0968(a13);
  if (!*(void *)(a11 + 40))
  {
LABEL_6:
    if (!*(void *)(a11 + 16)) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*a10);
  if (!*(void *)(a11 + 16)) {
LABEL_7:
  }
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(*(void **)a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F1A8(uint64_t result, unint64_t a2)
{
  unint64_t v2 = a2;
  *(_DWORD *)uint64_t result = a2;
  *(_WORD *)(result + 4) = WORD2(a2);
  if (HIWORD(a2))
  {
    sub_1000AE4B0(v4, "");
    sub_10026BE34("upper bits of mac are expected to be zero, integer mac=", &v6);
    sub_1001F115C(&v2, &v7);
    sub_10016A2C4((uint64_t)v4, (uint64_t)&v6, 2);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v7.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_4:
        if ((v5 & 0x80000000) == 0) {
          goto LABEL_5;
        }
LABEL_8:
        operator delete(v4[0]);
LABEL_5:
        sub_1000D11E0((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(v6.__r_.__value_.__l.__data_);
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  return result;
}

void sub_10006F2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10006F318(uint64_t a1, uint64_t ***a2)
{
  return sub_10006F50C((void *)(a1 + 8), a2) != 0;
}

uint64_t sub_10006F33C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  if (sub_10006F50C((void *)(a1 + 8), (uint64_t ***)a2))
  {
    sub_1000AE4B0(v12, "");
    sub_10014C790("Attempting to re-create a private location id", &__p);
    sub_10016A2C4((uint64_t)v12, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    sub_1000D11E0((uint64_t)&v11);
  }
  unsigned int v10 = *(_DWORD *)a1;
  *(_DWORD *)a1 = v10 + 1;
  sub_10006F9AC(v4, (uint64_t ***)a2, (const void **)a2, &v10);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  char v5 = sub_10006F630(a1 + 48, &v10, (uint64_t)&unk_1003FAE80, &__p);
  std::string v7 = *(uint64_t ***)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)v5[4];
  void v5[3] = v7;
  v5[4] = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v10;
}

void sub_10006F4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void ***sub_10006F50C(void *a1, uint64_t ***a2)
{
  unint64_t v4 = sub_100077F68((uint64_t)&v15, a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v9 = *(const void *****)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  unsigned int v10 = *v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v11 = *(void *)&v5 - 1;
      while (1)
      {
        char v13 = v10[1];
        if ((const void **)v6 == v13)
        {
          if (sub_1000706F4(v10 + 2, (unsigned __int8 ***)a2)) {
            return v10;
          }
        }
        else if (((unint64_t)v13 & v11) != v8)
        {
          return 0;
        }
        unsigned int v10 = (const void ***)*v10;
        if (!v10) {
          return v10;
        }
      }
    }
    do
    {
      unint64_t v12 = (unint64_t)v10[1];
      if (v6 == v12)
      {
        if (sub_1000706F4(v10 + 2, (unsigned __int8 ***)a2)) {
          return v10;
        }
      }
      else
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
        if (v12 != v8) {
          return 0;
        }
      }
      unsigned int v10 = (const void ***)*v10;
    }
    while (v10);
  }
  return v10;
}

void *sub_10006F630(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unsigned int v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t result = (void *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = result[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)result + 4) == v7) {
                return result;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t result = (void *)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)result + 4) == v7) {
              return result;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  __int16 v27 = operator new(0x28uLL);
  void *v27 = 0;
  v27[1] = v7;
  *((_DWORD *)v27 + 4) = **a4;
  sub_100085ADC(v27 + 3);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v22) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v22)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v22 < 3uLL || (uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < *(void *)&v22) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        unint64_t v4 = v7 % v8;
        int v16 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        int v17 = v27;
        if (v16) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        int v16 = *(void **)(*(void *)a1 + 8 * v7);
        int v17 = v27;
        if (v16) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
      int v16 = *(void **)(*(void *)a1 + 8 * v4);
      int v17 = v27;
      if (v16) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *int v17 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v27)
    {
      unint64_t v26 = *(void *)(*v27 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v26 >= v8) {
          v26 %= v8;
        }
      }
      else
      {
        v26 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v27;
    }
    goto LABEL_61;
  }
  int v16 = *(void **)(*(void *)a1 + 8 * v4);
  int v17 = v27;
  if (!v16) {
    goto LABEL_50;
  }
LABEL_26:
  *int v17 = *v16;
  void *v16 = v27;
LABEL_61:
  uint64_t result = v27;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_10006F984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10028CD64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10006F998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10028CD64((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **sub_10006F9AC(uint64_t a1, uint64_t ***a2, const void **a3, _DWORD *a4)
{
  unint64_t v9 = sub_100077F68((uint64_t)v35, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(const void ****)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      float v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v16 = (unint64_t)v14[1];
            if (v16 == v10)
            {
              if (sub_1000706F4((const void ***)v14 + 2, (unsigned __int8 ***)a2)) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            float v14 = (const void **)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = (unint64_t)v14[1];
          if (v15 == v10)
          {
            if (sub_1000706F4((const void ***)v14 + 2, (unsigned __int8 ***)a2)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          float v14 = (const void **)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  int v17 = (const void ***)(a1 + 16);
  BOOL v18 = (const void **)operator new(0x28uLL);
  float v14 = v18;
  v35[0] = v18;
  v35[1] = a1 + 16;
  int *v18 = 0;
  v18[1] = (const void *)v10;
  unint64_t v19 = (atomic_ullong *)a3[1];
  int v18[2] = *a3;
  v18[3] = v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v18 + 8) = *a4;
  char v36 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(const void ****)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_28:
      NSObject *v14 = *v23;
LABEL_63:
      *unint64_t v23 = v14;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v28) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v28)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < *(void *)&v28) {
LABEL_39:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(const void ****)(*(void *)a1 + 8 * (v10 % v11));
        if (v23) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(const void ****)(*(void *)a1 + 8 * v10);
        if (v23) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(const void ****)(*(void *)a1 + 8 * (v32 & v10));
      if (v23) {
        goto LABEL_28;
      }
    }
  }
  NSObject *v14 = *v17;
  *int v17 = v14;
  *(void *)(v22 + 8 * v4) = v17;
  if (*v14)
  {
    unint64_t v33 = *((void *)*v14 + 1);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    unint64_t v23 = (const void ***)(*(void *)a1 + 8 * v33);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_10006FCFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10022B004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10006FD10(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_100097908(a3, (a2[1] - *a2) >> 3);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      if (qword_10047BED8 == -1)
      {
        unint64_t v8 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_10;
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_10046A298);
        unint64_t v8 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_10;
        }
      }
      unint64_t v9 = (void *)(*(void *)v6 + 8);
      if (*(char *)(*(void *)v6 + 31) < 0) {
        unint64_t v9 = (void *)*v9;
      }
      *(_DWORD *)uint64_t buf = 136380675;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Requesting load for floor %{private}s", buf, 0xCu);
LABEL_10:
      sub_100085B24(&v21, *(void *)v6 + 8);
      sub_100070070(a1, &v21, (uint64_t)buf);
      unint64_t v10 = v22;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        unint64_t v11 = *(_OWORD **)(a3 + 8);
        if ((unint64_t)v11 >= *(void *)(a3 + 16))
        {
LABEL_13:
          uint8x8_t v12 = sub_10036B5E8((char **)a3, (uint64_t)&buf[8]);
          uint64_t v13 = *(std::__shared_weak_count **)&buf[16];
          *(void *)(a3 + 8) = v12;
          if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
          goto LABEL_4;
        }
      }
      else
      {
        unint64_t v11 = *(_OWORD **)(a3 + 8);
        if ((unint64_t)v11 >= *(void *)(a3 + 16)) {
          goto LABEL_13;
        }
      }
      *unint64_t v11 = *(_OWORD *)&buf[8];
      *(void *)(a3 + 8) = v11 + 1;
LABEL_4:
      v6 += 8;
    }
    while (v6 != v7);
  }
  float v14 = *(void **)(a1 + 56);
  if (v14)
  {
    unint64_t v15 = (void *)(a1 + 40);
    do
    {
      while (1)
      {
        uint64_t v16 = v14[5];
        if (!v16 || *(void *)(v16 + 8) == -1) {
          break;
        }
        float v14 = (void *)*v14;
        if (!v14) {
          return;
        }
      }
      int v17 = (void *)*v14;
      sub_1000A9E44(v15, v14, (uint64_t)buf);
      BOOL v18 = *(void **)buf;
      *(void *)uint64_t buf = 0;
      if (v18)
      {
        if (buf[16])
        {
          unint64_t v19 = (std::__shared_weak_count *)v18[5];
          if (v19) {
            std::__shared_weak_count::__release_weak(v19);
          }
          float v20 = (std::__shared_weak_count *)v18[3];
          if (v20)
          {
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
        }
        operator delete(v18);
      }
      float v14 = v17;
    }
    while (v17);
  }
}

void sub_100070010(_Unwind_Exception *a1)
{
  sub_1000D8DD8(v1);
  _Unwind_Resume(a1);
}

void sub_100070024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100281B2C((uint64_t)va);
  sub_1000D8DD8(v5);
  _Unwind_Resume(a1);
}

void sub_100070040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100198250((uint64_t)va);
  sub_1000D8DD8(v3);
  _Unwind_Resume(a1);
}

void sub_10007005C(_Unwind_Exception *a1)
{
  sub_1000D8DD8(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *sub_100070070@<X0>(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X8>)
{
  uint8x8_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v6 = sub_100070270((void *)(a1 + 40), a2);
  uint64_t v7 = v6;
  if (!v6) {
    sub_100070D20(a1, (char **)a2, &v11);
  }
  unint64_t v8 = (std::__shared_weak_count *)v6[5];
  if (!v8 || (uint64_t result = std::__shared_weak_count::lock(v8)) == 0)
  {
    uint8x8_t v12 = 0;
    uint64_t v13 = 0;
LABEL_7:
    sub_100070D20(a1, (char **)a2, &v11);
  }
  unint64_t v10 = v7[4];
  uint8x8_t v12 = v10;
  uint64_t v13 = result;
  if (!v10) {
    goto LABEL_7;
  }
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = v10;
  *(void *)(a3 + 16) = result;
  return result;
}

void sub_100070234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100070248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007025C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

const void ***sub_100070270(void *a1, uint64_t ***a2)
{
  unint64_t v4 = sub_100077F68((uint64_t)&v15, a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v9 = *(const void *****)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  unint64_t v10 = *v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v11 = *(void *)&v5 - 1;
      while (1)
      {
        uint64_t v13 = v10[1];
        if (v13 == (const void **)v6)
        {
          if (sub_1000706F4(v10 + 2, (unsigned __int8 ***)a2)) {
            return v10;
          }
        }
        else if (((unint64_t)v13 & v11) != v8)
        {
          return 0;
        }
        unint64_t v10 = (const void ***)*v10;
        if (!v10) {
          return v10;
        }
      }
    }
    do
    {
      unint64_t v12 = (unint64_t)v10[1];
      if (v12 == v6)
      {
        if (sub_1000706F4(v10 + 2, (unsigned __int8 ***)a2)) {
          return v10;
        }
      }
      else
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
        if (v12 != v8) {
          return 0;
        }
      }
      unint64_t v10 = (const void ***)*v10;
    }
    while (v10);
  }
  return v10;
}

const void **sub_100070394(uint64_t a1, uint64_t ***a2, uint64_t a3, const void ***a4)
{
  unint64_t v8 = sub_100077F68((uint64_t)v35, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    unint64_t v12 = *(const void ****)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v15 = (unint64_t)v13[1];
            if (v15 == v9)
            {
              if (sub_1000706F4((const void ***)v13 + 2, (unsigned __int8 ***)a2)) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v13 = (const void **)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = (unint64_t)v13[1];
          if (v14 == v9)
          {
            if (sub_1000706F4((const void ***)v13 + 2, (unsigned __int8 ***)a2)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t v13 = (const void **)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  uint64_t v16 = (const void ***)(a1 + 16);
  int v17 = (const void **)operator new(0x30uLL);
  uint64_t v13 = v17;
  v35[0] = v17;
  v35[1] = a1 + 16;
  *int v17 = 0;
  v17[1] = (const void *)v9;
  BOOL v18 = *a4;
  void v17[2] = **a4;
  unint64_t v19 = (atomic_ullong *)v18[1];
  v17[3] = v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  }
  v17[4] = 0;
  std::exception_ptr v17[5] = 0;
  char v36 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(const void ****)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_28:
      std::__shared_weak_count *v13 = *v23;
LABEL_63:
      *unint64_t v23 = v13;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v28) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v28)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < *(void *)&v28) {
LABEL_39:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v32 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(const void ****)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(const void ****)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v9;
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(const void ****)(*(void *)a1 + 8 * (v32 & v9));
      if (v23) {
        goto LABEL_28;
      }
    }
  }
  std::__shared_weak_count *v13 = *v16;
  void *v16 = v13;
  *(void *)(v22 + 8 * v4) = v16;
  if (*v13)
  {
    unint64_t v33 = *((void *)*v13 + 1);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v33 >= v10) {
        v33 %= v10;
      }
    }
    else
    {
      v33 &= v10 - 1;
    }
    unint64_t v23 = (const void ***)(*(void *)a1 + 8 * v33);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1000706E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10036B54C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000706F4(const void ***a1, unsigned __int8 ***a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *((unsigned __int8 *)*a1 + 23);
  if ((v4 & 0x80u) == 0) {
    int8x8_t v5 = (unsigned __int8 *)*((unsigned __int8 *)*a1 + 23);
  }
  else {
    int8x8_t v5 = (unsigned __int8 *)(*a1)[1];
  }
  unint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v7 = (char)v6;
  if ((char)v6 < 0) {
    unint64_t v6 = v3[1];
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 >= 0) {
    unint64_t v8 = *a2;
  }
  else {
    unint64_t v8 = (unsigned __int8 **)*v3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*v2, v8, (size_t)(*a1)[1]) == 0;
  }
  if (!*((unsigned char *)*a1 + 23)) {
    return 1;
  }
  uint64_t v9 = v4 - 1;
  do
  {
    int v11 = *(unsigned __int8 *)v2;
    unint64_t v2 = (const void **)((char *)v2 + 1);
    int v10 = v11;
    int v13 = *(unsigned __int8 *)v8;
    unint64_t v8 = (unsigned __int8 **)((char *)v8 + 1);
    int v12 = v13;
    BOOL v15 = v9-- != 0;
    uint64_t result = v10 == v12;
  }
  while (v10 == v12 && v15);
  return result;
}

void sub_1000707A8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int8x8_t v5 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_100097E8C((char **)a3, 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 7));
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    unint64_t v8 = &v60;
    uint64_t v9 = &v48;
    int v10 = &v50;
    do
    {
      sub_100085B24(&v54, v6 + 8);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)a2 + 128))(&v52, a2, &v54);
      int v11 = (std::__shared_weak_count *)v55[0];
      if (v55[0] && !atomic_fetch_add((atomic_ullong *volatile)v55[0] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      if (sub_100070D00(v6))
      {
        uint64_t v12 = sub_10031A90C(&v52);
        sub_1002A0DA4((uint64_t)&v54, v12);
      }
      else
      {
        sub_100062434(&v52, (uint64_t)&__p);
        LOBYTE(v54) = 0;
        int v13 = __p;
        unint64_t v14 = v44;
        std::string __p = 0;
        unint64_t v44 = 0;
        unint64_t v58 = v13;
        unint64_t v59 = v14;
        BOOL v15 = v45;
        int v60 = v45;
        uint64_t v61 = v46;
        int v62 = v47;
        if (v46)
        {
          unint64_t v16 = v45[1];
          if ((v14 & (v14 - 1)) != 0)
          {
            if (v16 >= v14) {
              v16 %= v14;
            }
          }
          else
          {
            v16 &= v14 - 1;
          }
          BOOL v15 = 0;
          *((void *)v13 + v16) = v8;
          float64x2x2_t v45 = 0;
          uint64_t v46 = 0;
        }
        long long v63 = v48;
        uint64_t v17 = v49;
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 2) = 0;
        *(void *)uint64_t v9 = 0;
        long long v65 = v50;
        uint64_t v64 = v17;
        uint64_t v66 = v51;
        *((void *)v10 + 1) = 0;
        *((void *)v10 + 2) = 0;
        *(void *)int v10 = 0;
        char v57 = 1;
        if (v15)
        {
          do
          {
            BOOL v18 = (void *)*v15;
            operator delete(v15);
            BOOL v15 = v18;
          }
          while (v18);
        }
        unint64_t v19 = __p;
        std::string __p = 0;
        if (v19) {
          operator delete(v19);
        }
      }
      unint64_t v20 = v5[1];
      if (v20 >= v5[2])
      {
        v5[1] = sub_1002A1A68(v5, (uint64_t)&v54);
        if (v57) {
          goto LABEL_34;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v20 = 0;
        if ((_BYTE)v54)
        {
          *(void *)(v20 + 8) = 0;
          *(void *)(v20 + 16) = 0;
          *(void *)(v20 + 24) = 0;
          *(_OWORD *)(v20 + 8) = *(_OWORD *)v55;
          *(void *)(v20 + 24) = v56;
          v55[0] = 0;
          v55[1] = 0;
          uint64_t v56 = 0;
          *(unsigned char *)unint64_t v20 = 1;
        }
        *(unsigned char *)(v20 + 32) = 0;
        if (v57)
        {
          float v21 = v58;
          unint64_t v58 = 0;
          *(void *)(v20 + 40) = v21;
          *(void *)(v20 + 48) = v59;
          unint64_t v59 = 0;
          uint64_t v22 = v60;
          *(void *)(v20 + 56) = v60;
          uint64_t v23 = v61;
          *(void *)(v20 + 64) = v61;
          *(_DWORD *)(v20 + 72) = v62;
          if (v23)
          {
            unint64_t v24 = v22[1];
            unint64_t v25 = *(void *)(v20 + 48);
            if ((v25 & (v25 - 1)) != 0)
            {
              if (v24 >= v25) {
                v24 %= v25;
              }
            }
            else
            {
              v24 &= v25 - 1;
            }
            v21[v24] = v20 + 56;
            std::__shared_weak_count *v8 = 0;
            v8[1] = 0;
          }
          *(void *)(v20 + 96) = 0;
          *(void *)(v20 + 104) = 0;
          *(void *)(v20 + 80) = 0;
          *(void *)(v20 + 88) = 0;
          *(_OWORD *)(v20 + 80) = v63;
          *(void *)(v20 + 96) = v64;
          long long v63 = 0uLL;
          uint64_t v64 = 0;
          *(void *)(v20 + 112) = 0;
          *(void *)(v20 + 120) = 0;
          *(_OWORD *)(v20 + 104) = v65;
          *(void *)(v20 + 120) = v66;
          long long v65 = 0uLL;
          uint64_t v66 = 0;
          *(unsigned char *)(v20 + 32) = 1;
        }
        v5[1] = v20 + 128;
        if (v57)
        {
LABEL_34:
          uint64_t v26 = v65;
          if ((void)v65)
          {
            __int16 v27 = (void *)v65;
            if (*((void *)&v65 + 1) != (void)v65)
            {
              uint64_t v28 = a2;
              unint64_t v29 = v10;
              uint8x8_t v30 = v9;
              uint64_t v31 = v7;
              unint64_t v32 = v8;
              uint64_t v33 = *((void *)&v65 + 1) - 40;
              uint64_t v34 = *((void *)&v65 + 1) - 40;
              uint64_t v35 = (void (***)(uint64_t))(*((void *)&v65 + 1) - 40);
              do
              {
                char v36 = *v35;
                v35 -= 5;
                (*v36)(v34);
                v33 -= 40;
                BOOL v37 = v34 == v26;
                uint64_t v34 = (uint64_t)v35;
              }
              while (!v37);
              __int16 v27 = (void *)v65;
              unint64_t v8 = v32;
              uint64_t v7 = v31;
              uint64_t v9 = v30;
              int v10 = v29;
              a2 = v28;
              int8x8_t v5 = a3;
            }
            *((void *)&v65 + 1) = v26;
            operator delete(v27);
          }
          if ((void)v63)
          {
            *((void *)&v63 + 1) = v63;
            operator delete((void *)v63);
          }
          long long v38 = v60;
          if (v60)
          {
            do
            {
              uint64_t v39 = (void *)*v38;
              operator delete(v38);
              long long v38 = v39;
            }
            while (v39);
          }
          long long v40 = v58;
          unint64_t v58 = 0;
          if (v40) {
            operator delete(v40);
          }
          char v57 = 0;
          if (!(_BYTE)v54) {
            goto LABEL_50;
          }
LABEL_48:
          if (v55[0])
          {
            v55[1] = v55[0];
            operator delete(v55[0]);
          }
          goto LABEL_50;
        }
      }
      if ((_BYTE)v54) {
        goto LABEL_48;
      }
LABEL_50:
      int v41 = v53;
      if (v53)
      {
        if (!atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v6 += 1920;
    }
    while (v6 != v7);
  }
}

void sub_100070C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_100070C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
}

void sub_100070CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_100070CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_100070CE4(_Unwind_Exception *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1000BA884((uint64_t)va);
  sub_1002A10E0(a2);
  _Unwind_Resume(a1);
}

BOOL sub_100070D00(uint64_t a1)
{
  return sub_100082814(a1) == 1;
}

void sub_100070D20(uint64_t a1@<X0>, char **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  if (qword_10047BED8 == -1)
  {
    int8x8_t v5 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_10046A298);
    int8x8_t v5 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_4:
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 120))(&v12);
      sub_100074A28(&v12, (uint64_t)buf);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 128))(&v11);
      uint64_t v10 = 0;
      if (sub_100071C84((uint64_t)&v11))
      {
        sub_100071C60((uint64_t)&v11);
        operator new();
      }
      int v9 = sub_100071C54((uint64_t)&v12);
      uint64_t v6 = sub_100071C30((uint64_t)&v12);
      sub_1000764C4(v6, (uint64_t)v7);
      sub_100073E84((uint64_t)v7, &v8);
      sub_100071AB0();
    }
  }
  *(_DWORD *)uint64_t buf = 136380675;
  unint64_t v14 = sub_1000900B8(a2);
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Setting up floor environment for %{private}s", buf, 0xCu);
  goto LABEL_4;
}

void sub_100071188()
{
}

uint64_t sub_1000712FC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100071320(uint64_t a1, uint64_t a2)
{
}

void sub_100071328(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  id v2 = *(id *)(a1 + 32);
  operator new();
}

void sub_1000714D0(_Unwind_Exception *a1)
{
  if (!atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  sub_10007154C((uint64_t *)(v4 - 56));

  _Unwind_Resume(a1);
}

void sub_100071538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_10007154C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2) {
    return a1;
  }
  if ((*(unsigned char *)(v2 + 136) & 1) == 0)
  {
    v8.__ptr_ = 0;
    uint64_t v3 = *(void *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v8);
    uint64_t v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v9.__cat_ = std::future_category();
      *(void *)&v9.__val_ = 4;
      std::future_error::future_error(&v7, v9);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      uint64_t v6 = std::logic_error::logic_error(exception, &v7);
      v6[1] = (std::logic_error)v7.__ec_;
    }
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  return a1;
}

void sub_1000716A8(uint64_t a1)
{
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  operator delete();
}

void sub_100071728(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  uint64_t v4 = *(void *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *a2 = *(_OWORD *)(a1 + 144);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
  }
}

void sub_1000717C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000717F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 152);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);

  return v3(a1);
}

void sub_10007189C(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t *a5)
{
  long long v9 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v5 = *a5;
  *a5 = 0;
  uint64_t v8 = v5;
  sub_100072228(a2, a3, &v9, &v8);
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::exception_ptr v7 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_100071978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_1003A7938();
  }
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007199C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  if (v5) {
    operator new();
  }
  uint64_t v6 = 0;
  *a4 = 0;
  sub_100072B8C(a2, a3, &v5);
  uint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100071A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1003A55F0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100071AB0()
{
}

void sub_100071BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_100071C30(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)a1 + 48);
  if (!result) {
    return *(void *)(qword_100492A50 + 48);
  }
  return result;
}

uint64_t sub_100071C54(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 60);
}

uint64_t sub_100071C60(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)a1 + 64);
  if (!result) {
    return *(void *)(qword_100492A28 + 64);
  }
  return result;
}

uint64_t sub_100071C84(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)a1 + 92) >> 2) & 1;
}

uint64_t sub_100071C94(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  *(void *)a1 = off_100469F88;
  uint64_t v8 = *a3;
  if (!*a3 || ((*(uint64_t (**)(void))(*(void *)v8 + 40))(*a3) & 1) != 0)
  {
    *(_OWORD *)(a1 + 8) = xmmword_1003FDF70;
    *(_OWORD *)(a1 + 24) = unk_1003FDF80;
    if ((*(unsigned char *)(a2 + 1914) & 8) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    double v11 = *(double *)(a2 + 1824);
    if (v11 > 0.0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  long long v9 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
  long long v10 = v9[1];
  *(_OWORD *)(a1 + 8) = *v9;
  *(_OWORD *)(a1 + 24) = v10;
  if ((*(unsigned char *)(a2 + 1914) & 8) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  double v11 = sub_10007318C((uint64_t *)(a2 + 1800));
LABEL_8:
  uint64_t v12 = a3[1];
  *(void *)(a1 + 48) = *a3;
  *(double *)(a1 + 40) = v11;
  *(void *)(a1 + 56) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100071EF8(a2, (void *)(a1 + 64));
  sub_1000776C4(a1 + 80, a2);
  uint64_t v13 = *a4;
  if (!*a4) {
    operator new();
  }
  *a4 = 0;
  *(void *)(a1 + 2000) = v13;
  sub_100085B24((void *)(a1 + 2008), a1 + 88);
  *(_DWORD *)(a1 + 2024) = sub_100072E94(a1 + 80);
  return a1;
}

void sub_100071E4C(_Unwind_Exception *a1)
{
  sub_100074A24(v3);
  sub_1000BA884(v2);
  sub_1000BA884(v1);
  _Unwind_Resume(a1);
}

void sub_100071EB8(_Unwind_Exception *a1)
{
  sub_1000BA884(v2);
  sub_1000BA884(v1);
  _Unwind_Resume(a1);
}

void sub_100071ED4(_Unwind_Exception *a1)
{
  sub_1000BA884(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100071EE8()
{
  return 0;
}

uint64_t sub_100071EF0(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_100071EF8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if ((*(unsigned char *)(result + 1913) & 4) != 0)
  {
    uint64_t v3 = result;
    int v4 = *(unsigned __int16 *)(result + 1432);
    if ((~v4 & 0x180) != 0)
    {
      *a2 = 0;
      a2[1] = 0;
    }
    else
    {
      if ((v4 & 1) == 0)
      {
        sub_1000AE4B0(v14, "");
        sub_10014B844("We need image dimensions to get the ENU for a floorlan. Your ImageMetadata isn't set!", &__p);
        sub_10016A2C4((uint64_t)v14, (uint64_t)&__p, 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        sub_10014B3FC((uint64_t)v13);
      }
      if ((*(unsigned char *)(result + 1104) & 1) == 0)
      {
        sub_1000AE4B0(v14, "");
        sub_10014B894("We need image width to get the ENU for a floorplan. Your ImageMetadata.width isn't set!", &__p);
        sub_10016A2C4((uint64_t)v14, (uint64_t)&__p, 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        sub_10014B3FC((uint64_t)v13);
      }
      if ((*(unsigned char *)(result + 1104) & 2) == 0)
      {
        sub_1000AE4B0(v14, "");
        sub_10014B8E4("We need image height to get the ENU for a floorplan. Your ImageMetadata.height isn't set!", &__p);
        sub_10016A2C4((uint64_t)v14, (uint64_t)&__p, 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        sub_10014B3FC((uint64_t)v13);
      }
      int v5 = *(_DWORD *)(result + 1076);
      double v6 = *(double *)(result + 1304) * 0.0174532925;
      double v7 = *(double *)(result + 1336) * 0.0174532925;
      __double2 v8 = __sincos_stret(*(double *)(result + 1344) * 0.0174532925 - *(double *)(result + 1312) * 0.0174532925);
      __double2 v9 = __sincos_stret(v7);
      __double2 v10 = __sincos_stret(v6);
      LODWORD(v7) = *(_DWORD *)(v3 + 1072);
      double v11 = atan2(v9.__cosval * v8.__sinval, -(v10.__sinval * v9.__cosval) * v8.__cosval + v10.__cosval * v9.__sinval);
      long double v12 = atan2((double)-v5, (double)SLODWORD(v7));
      return sub_10014FAC8(a2, v11 + v12);
    }
  }
  else
  {
    return sub_100072B90(a2);
  }
  return result;
}

void sub_1000721D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007222C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_1004646E8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v5 = sub_100072A7C(a2);
  sub_100072E90(a1 + 24, v5);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  *(double *)(a1 + 80) = sub_100072640(*(double **)(a1 + 64));
  *(void *)(a1 + 88) = v6;
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = v8;
  sub_100073188(a1 + 112, a1 + 64);
  *(_DWORD *)(a1 + 168) = sub_100072B50(a2);
  *(double *)(a1 + 176) = sub_100072AB8(a2);
  *(double *)(a1 + 184) = sub_100072AA0(a2);
  uint64_t v12 = sub_100072AF0(a2, v9, v10, v11);
  sub_100072438((void *)(a1 + 192), v12);
  uint64_t v16 = sub_100072B20(a2, v13, v14, v15);
  sub_100072438((void *)(a1 + 248), v16);
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = a1 + 336;
  *(void *)(a1 + 352) = sub_100072B6C(a2);
  *(void *)(a1 + 360) = v17;
  *(void *)(a1 + 368) = sub_100072AD0(a2);
  *(void *)(a1 + 376) = v18;
  return a1;
}

void sub_10007239C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000BA884(v10);
  sub_1000BA884(a10);
  _Unwind_Resume(a1);
}

void sub_1000723B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10006A9DC(v16, *v10);
  if (*v17) {
    operator delete(*v17);
  }
  sub_100320B04(v15);
  sub_100320B04(v14);
  sub_1001E28D0(v13);
  sub_1000BA884(v12);
  sub_1000BA884(v11);
  sub_1000BA884(a10);
  _Unwind_Resume(a1);
}

void *sub_100072438(void *a1, uint64_t a2)
{
  *a1 = off_100466F90;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[5] = 0;
  a1[6] = 0;
  a1[2] = 0x3FF0000000000000;
  a1[3] = 0;
  a1[4] = 0;
  sub_1000724DC((uint64_t)a1, a2);
  return a1;
}

void sub_1000724AC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_1000724C8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000724DC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 52);
  if (!(_BYTE)v4) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if (*(unsigned char *)(a2 + 52))
  {
    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 52) |= 1u;
    *(void *)(a1 + 16) = v7;
    int v4 = *(_DWORD *)(a2 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
LABEL_12:
      uint64_t v9 = *(void *)(a2 + 32);
      *(_DWORD *)(a1 + 52) |= 4u;
      *(void *)(a1 + 32) = v9;
      if ((*(_DWORD *)(a2 + 52) & 8) == 0) {
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
      }
      goto LABEL_8;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 2) == 0)
  {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 52) |= 2u;
  *(void *)(a1 + 24) = v8;
  int v4 = *(_DWORD *)(a2 + 52);
  if ((v4 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_7:
  if ((v4 & 8) != 0)
  {
LABEL_8:
    uint64_t v5 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 8u;
    *(void *)(a1 + 40) = v5;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1000725DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000725F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100072604(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1004929D8;
  if (!qword_1004929D8)
  {
    sub_10031FE14(0, a2, a3, a4);
    return qword_1004929D8;
  }
  return result;
}

double sub_100072640(double *a1)
{
  sub_1000728D4(a1, (uint64_t)&v8);
  sub_1000727B4(&v8, (uint64_t)v10);
  sub_10007299C(a1, (uint64_t)&v5);
  sub_1000727B4(&v5, (uint64_t)v7);
  sub_100072EC0((uint64_t)&v11, (uint64_t)v10, (uint64_t)v7);
  nullsub_17(v7);
  uint64_t v2 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  nullsub_17(v10);
  uint64_t v3 = v9;
  if (!v9 || atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v11;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return v11;
}

void sub_100072764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  nullsub_17(&a13);
  sub_1000BA884((uint64_t)&a9);
  nullsub_17(v17 - 80);
  sub_1000BA884((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1000727A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000727B4@<X0>(long double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  double v4 = *(double *)(*(void *)a1 + 80);
  long double v5 = a1[2];
  if (v4 == 0.0)
  {
    double v6 = *(double *)(v3 + 64);
    double v7 = v5 * v6;
    double v8 = v6 * (a1[3] * (double)*(int *)(v3 + 16));
  }
  else
  {
    long double v9 = a1[3];
    double v10 = hypot(a1[2], v9);
    long double v11 = atan2(v9, v5);
    double v12 = (double)*(int *)(v3 + 16);
    __double2 v13 = __sincos_stret(v11 + v12 * v4);
    double v14 = *(double *)(v3 + 64);
    double v7 = v14 * (v10 * v13.__cosval);
    double v8 = v14 * (v10 * v13.__sinval * v12);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = off_10045DA98;
  *(unsigned char *)(a2 + 24) &= 0xFCu;
  sub_100076484(a2, v7 + *(double *)(v3 + 40));
  uint64_t result = sub_10007647C(a2, v8 + *(double *)(v3 + 48));
  *(unsigned char *)(a2 + 24) |= 3u;
  return result;
}

void sub_1000728C0(_Unwind_Exception *a1)
{
  nullsub_17(v1);
  _Unwind_Resume(a1);
}

void sub_1000728D4(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v5 = *a1;
  double v4 = (std::__shared_weak_count *)*((void *)a1 + 1);
  double v7 = v5;
  if (!v4 || (double v8 = std::__shared_weak_count::lock(v4)) == 0) {
    sub_100150A28();
  }
  sub_10007314C(a2, (uint64_t)&v7, a1[12], a1[15]);
  double v6 = v8;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_100072988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10007299C(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v5 = *a1;
  double v4 = (std::__shared_weak_count *)*((void *)a1 + 1);
  double v7 = v5;
  if (!v4 || (double v8 = std::__shared_weak_count::lock(v4)) == 0) {
    sub_100150A28();
  }
  sub_10007314C(a2, (uint64_t)&v7, a1[13], a1[14]);
  double v6 = v8;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_100072A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100072A60@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 40);
  *a2 = *(void *)(result + 32);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100072A7C(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)a1 + 40);
  if (!result) {
    return *(void *)(qword_100492A50 + 40);
  }
  return result;
}

double sub_100072AA0(uint64_t a1)
{
  double result = 0.0;
  if ((*(unsigned char *)(*(void *)a1 + 201) & 0x80) != 0) {
    return *(double *)(*(void *)a1 + 152);
  }
  return result;
}

double sub_100072AB8(uint64_t a1)
{
  double result = 30.0;
  if ((*(unsigned char *)(*(void *)a1 + 201) & 0x20) != 0) {
    return *(double *)(*(void *)a1 + 144);
  }
  return result;
}

BOOL sub_100072AD0(uint64_t a1)
{
  return (*(unsigned char *)(*(void *)a1 + 202) & 0x10) != 0;
}

uint64_t sub_100072AF0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((*(unsigned char *)(*(void *)a1 + 202) & 1) == 0) {
    return sub_100072604(a1, a2, a3, a4);
  }
  uint64_t result = *(void *)(*(void *)a1 + 160);
  if (!result) {
    return *(void *)(qword_100492A50 + 160);
  }
  return result;
}

uint64_t sub_100072B20(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((*(unsigned char *)(*(void *)a1 + 202) & 2) == 0) {
    return sub_100072604(a1, a2, a3, a4);
  }
  uint64_t result = *(void *)(*(void *)a1 + 168);
  if (!result) {
    return *(void *)(qword_100492A50 + 168);
  }
  return result;
}

uint64_t sub_100072B50(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)a1 + 201) & 8) != 0) {
    return *(unsigned int *)(*(void *)a1 + 136);
  }
  else {
    return 1;
  }
}

BOOL sub_100072B6C(uint64_t a1)
{
  return (*(unsigned char *)(*(void *)a1 + 202) & 8) != 0;
}

uint64_t sub_100072B90@<X0>(void *a1@<X8>)
{
  double v4 = off_10045DAD8;
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  v5[1] = 0;
  void v5[2] = 0;
  v5[0] = off_10045DA98;
  char v6 = 0;
  char v10 = 4;
  sub_100076484((uint64_t)v5, 0.0);
  sub_10007647C((uint64_t)v5, 0.0);
  sub_10007648C((uint64_t)&v4, 1.0);
  char v8 = 1;
  sub_100072C74((uint64_t)&unk_1003ED7E5, (uint64_t)&v4, a1);
  return nullsub_16(&v4, v2);
}

void sub_100072C60(_Unwind_Exception *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_100072C74(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  char v6 = (std::__shared_weak_count *)operator new(0x98uLL);
  sub_100074070((uint64_t)v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  shared_owners = (std::__shared_weak_count *)v6[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&v6[1];
    v6[1].__shared_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_owners);
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&v6[1];
    v6[1].__shared_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_100072D7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100072D90(uint64_t a1, double *a2)
{
  uint64_t v9 = off_10045DA38;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  char v13 = 0;
  sub_100072EAC((uint64_t)&v9, a2[7]);
  sub_100072E98((uint64_t)&v9, a2[6]);
  sub_10007647C((uint64_t)&v9, a2[3]);
  sub_100076F14((uint64_t)&v9, a2[4]);
  sub_100076484((uint64_t)&v9, a2[2]);
  sub_100076F1C((uint64_t)&v9, a2[5]);
  double v4 = *((double *)&v10 + 1);
  uint64_t v5 = llround(*(double *)&v10);
  *(void *)a1 = v5;
  double v6 = v4 / (double)v5;
  double v7 = sqrt((*(double *)&v11 / (double)v5 - v6 * v6) * 3.0);
  *(double *)(a1 + 8) = v6 - v7;
  *(double *)(a1 + 16) = v6 + v7;
  nullsub_20(&v9);
  return a1;
}

void sub_100072E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100072E98(uint64_t result, double a2)
{
  *(double *)(result + 40) = a2;
  *(unsigned char *)(result + 56) |= 1u;
  return result;
}

uint64_t sub_100072EAC(uint64_t result, double a2)
{
  *(double *)(result + 48) = a2;
  *(unsigned char *)(result + 56) |= 2u;
  return result;
}

__n128 sub_100072EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)a1 = *(void *)(a2 + 8);
  __n128 result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a1 + 24) = v3;
  return result;
}

uint64_t sub_100072ED8(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t *a5)
{
  *(void *)a1 = off_100463468;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 8) = *a2;
  uint64_t v7 = a1 + 8;
  *(void *)(a1 + 16) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v8 = *a5;
  uint64_t v9 = a5[1];
  *(void *)(a1 + 48) = *a5;
  *(void *)(a1 + 56) = v9;
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v8 = *(void *)(a1 + 48);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, v7);
  return a1;
}

void sub_100072F8C(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[7];
  if (v3) {
    sub_1003A4A40(v3);
  }
  sub_1003A64B0(v1 + 5, v1 + 2);
  _Unwind_Resume(a1);
}

uint64_t sub_100072FB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t sub_100072FD8(uint64_t a1, uint64_t *a2)
{
  double v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = *a2;
  double v14 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v11 = -1;
  int v12 = -1;
  sub_100073160(a1, &v13, &v12, &v11);
  uint64_t v5 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  long long v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10007314C(a1 + 24, (uint64_t)&v9, NAN, NAN);
  uint64_t v7 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

void sub_10007311C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000BA884((uint64_t)va);
  sub_1000BA884(v2);
  _Unwind_Resume(a1);
}

void sub_100073138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007314C(uint64_t result, uint64_t a2, double a3, double a4)
{
  *(_OWORD *)__n128 result = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(double *)(result + 16) = a3;
  *(double *)(result + 24) = a4;
  return result;
}

uint64_t sub_100073160(uint64_t result, void *a2, _DWORD *a3, int *a4)
{
  uint64_t v4 = a2[1];
  *(void *)__n128 result = *a2;
  *(void *)(result + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  int v5 = *a4;
  *(_DWORD *)(result + 16) = *a3;
  *(_DWORD *)(result + 20) = v5;
  return result;
}

double sub_10007318C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2)
  {
LABEL_61:
    sub_1000AE4B0(v47, "");
    sub_10015E644("Polygon bounds must never be zero!", &v49);
    sub_10016A2C4((uint64_t)v47, (uint64_t)&v49, 1);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_63;
      }
    }
    else if ((v48 & 0x80000000) == 0)
    {
      goto LABEL_63;
    }
    operator delete(v47[0]);
LABEL_63:
    sub_1000D11E0((uint64_t)v46);
  }
  double v3 = 0.0;
  do
  {
    uint64_t v4 = *(double **)(v1 + 8);
    int v5 = *(double **)(v1 + 16);
    uint64_t v44 = (uint64_t)(*(void *)(v1 + 40) - *(void *)(v1 + 32)) >> 3;
    uint64_t v45 = v5 - v4;
    if (v45 != v44)
    {
      sub_1000AE4B0(v47, "");
      sub_100234F6C("PolygonBounds objects must have xs.size() == ys.size()! ", &v49);
      sub_1001F3080(&v45, &__p);
      sub_10026F658(" ", &v51);
      sub_1001F3080(&v44, &v52);
      sub_10016A2C4((uint64_t)v47, (uint64_t)&v49, 4);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v52.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_46:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_47;
          }
          goto LABEL_57;
        }
      }
      else if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_46;
      }
      operator delete(v51.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_47:
        if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_58;
      }
LABEL_57:
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_48:
        if ((v48 & 0x80000000) == 0) {
          goto LABEL_49;
        }
LABEL_59:
        operator delete(v47[0]);
LABEL_49:
        sub_1000D11E0((uint64_t)v46);
      }
LABEL_58:
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_49;
      }
      goto LABEL_59;
    }
    if (v5 == v4)
    {
      sub_1000AE4B0(v47, "");
      sub_10028CDF4("All PolygonBounds must be non-empty!", &v49);
      sub_10016A2C4((uint64_t)v47, (uint64_t)&v49, 1);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      if (v48 < 0) {
        operator delete(v47[0]);
      }
      sub_1000D11E0((uint64_t)v46);
    }
    uint64_t v6 = v5 - v4;
    if (v6 == 2)
    {
      double v3 = v3
         + hypot(*v4 - v4[1], **(double **)(v1 + 32) - *(double *)(*(void *)(v1 + 32) + 8))
         * (*(double *)(v1 + 56) + *(double *)(v1 + 56))
         + *(double *)(v1 + 56) * (*(double *)(v1 + 56) * 3.14159265);
      goto LABEL_4;
    }
    if (v6 == 1)
    {
      double v3 = v3 + *(double *)(v1 + 56) * 3.14159265 * *(double *)(v1 + 56);
      goto LABEL_4;
    }
    sub_1000737C4((void *)v1, (uint64_t)&v49);
    uint64_t v7 = (void *)v49.__r_.__value_.__r.__words[0];
    double v8 = 0.0;
    if (v49.__r_.__value_.__l.__size_ - v49.__r_.__value_.__r.__words[0] < 0x40) {
      goto LABEL_19;
    }
    uint64_t v9 = (double *)(v49.__r_.__value_.__r.__words[0] + 16);
    if (v49.__r_.__value_.__r.__words[0] + 16 == v49.__r_.__value_.__l.__size_) {
      goto LABEL_19;
    }
    std::string::size_type v10 = v49.__r_.__value_.__l.__size_ - v49.__r_.__value_.__r.__words[0] - 32;
    if (v10 >= 0x30)
    {
      uint64_t v12 = (v10 >> 4) + 1;
      uint64_t v13 = 16 * (v12 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v9 = (double *)((char *)v9 + v13);
      int v11 = (double *)(v49.__r_.__value_.__r.__words[0] + v13);
      double v14 = (const double *)(v49.__r_.__value_.__r.__words[0] + 32);
      uint64_t v15 = v12 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v16 = v14 - 4;
        float64x2x2_t v53 = vld2q_f64(v16);
        float64x2x2_t v54 = vld2q_f64(v14);
        uint64_t v17 = v14 - 2;
        uint64_t v18 = v14 + 2;
        float64x2x2_t v56 = vld2q_f64(v17);
        float64x2x2_t v58 = vld2q_f64(v18);
        v53.val[0] = vmulq_f64(vaddq_f64(v53.val[0], v56.val[0]), vsubq_f64(v53.val[1], v56.val[1]));
        v53.val[1] = vmulq_f64(vaddq_f64(v54.val[0], v58.val[0]), vsubq_f64(v54.val[1], v58.val[1]));
        double v8 = v8 + v53.val[0].f64[0] + v53.val[0].f64[1] + v53.val[1].f64[0] + v53.val[1].f64[1];
        v14 += 8;
        v15 -= 4;
      }
      while (v15);
      if (v12 == (v12 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
    else
    {
      int v11 = (double *)v49.__r_.__value_.__r.__words[0];
    }
    do
    {
      double v19 = *v9;
      v9 += 2;
      double v8 = v8 + (*v11 + v19) * (v11[1] - v11[3]);
      v11 += 2;
    }
    while (v9 != (double *)v49.__r_.__value_.__l.__size_);
LABEL_18:
    double v8 = v8 * 0.5;
LABEL_19:
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    std::string::size_type v21 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
    {
      double v3 = v3 + v8 + 0.0;
      int v42 = (void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_41;
      }
      goto LABEL_42;
    }
    double v22 = 0.0;
    uint64_t v23 = (double **)__p.__r_.__value_.__r.__words[0];
    do
    {
      uint64_t v26 = *v23;
      unint64_t v25 = v23[1];
      unint64_t v27 = (char *)v25 - (char *)*v23;
      uint64_t v28 = *v23 + 2;
      BOOL v29 = v27 < 0x40 || v28 == v25;
      double v24 = 0.0;
      if (!v29)
      {
        unint64_t v30 = v27 - 32;
        if (v30 >= 0x30)
        {
          uint64_t v32 = (v30 >> 4) + 1;
          uint64_t v33 = 2 * (v32 & 0x1FFFFFFFFFFFFFFCLL);
          uint64_t v28 = (double *)((char *)v28 + v33 * 8);
          uint64_t v31 = &v26[v33];
          uint64_t v34 = v26 + 4;
          uint64_t v35 = v32 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            char v36 = v34 - 4;
            float64x2x2_t v55 = vld2q_f64(v36);
            float64x2x2_t v57 = vld2q_f64(v34);
            BOOL v37 = v34 - 2;
            long long v38 = v34 + 2;
            float64x2x2_t v59 = vld2q_f64(v37);
            float64x2x2_t v60 = vld2q_f64(v38);
            v55.val[0] = vmulq_f64(vaddq_f64(v55.val[0], v59.val[0]), vsubq_f64(v55.val[1], v59.val[1]));
            v55.val[1] = vmulq_f64(vaddq_f64(v57.val[0], v60.val[0]), vsubq_f64(v57.val[1], v60.val[1]));
            double v24 = v24 + v55.val[0].f64[0] + v55.val[0].f64[1] + v55.val[1].f64[0] + v55.val[1].f64[1];
            v34 += 8;
            v35 -= 4;
          }
          while (v35);
          if (v32 == (v32 & 0x1FFFFFFFFFFFFFFCLL)) {
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v31 = *v23;
        }
        do
        {
          double v39 = *v28;
          v28 += 2;
          double v24 = v24 + (*v31 + v39) * (v31[1] - v31[3]);
          v31 += 2;
        }
        while (v28 != v25);
LABEL_21:
        double v24 = v24 * 0.5;
      }
      double v22 = v22 + v24;
      v23 += 3;
    }
    while (v23 != (double **)__p.__r_.__value_.__l.__size_);
    double v3 = v3 + v8 + v22;
    if (!__p.__r_.__value_.__r.__words[0]) {
      goto LABEL_42;
    }
    do
    {
      std::string::size_type v41 = size - 24;
      long long v40 = *(void **)(size - 24);
      if (v40)
      {
        *(void *)(size - 16) = v40;
        operator delete(v40);
      }
      std::string::size_type size = v41;
    }
    while (v41 != v21);
    int v42 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_41:
    __p.__r_.__value_.__l.__size_ = v21;
    operator delete(v42);
    uint64_t v7 = (void *)v49.__r_.__value_.__r.__words[0];
LABEL_42:
    if (v7)
    {
      v49.__r_.__value_.__l.__size_ = (std::string::size_type)v7;
      operator delete(v7);
    }
LABEL_4:
    v1 += 72;
  }
  while (v1 != v2);
  if (v3 <= 0.0) {
    goto LABEL_61;
  }
  return v3;
}

void sub_100073744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000737C4(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  sub_100073838((uint64_t *)a2, a1);
  sub_10006C958((double **)a2);
}

void sub_100073810(_Unwind_Exception *a1)
{
  double v3 = *(char **)(v1 + 24);
  if (v3) {
    sub_1003A799C(v1, v3, (void **)(v1 + 24));
  }
  sub_1003A7974(v1);
  _Unwind_Resume(a1);
}

void sub_100073838(uint64_t *a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (a2[2] != v2)
  {
    unint64_t v5 = 0;
    uint64_t v6 = (void *)a1[1];
    while (1)
    {
      uint64_t v8 = *(void *)(v2 + 8 * v5);
      uint64_t v9 = *(void *)(a2[4] + 8 * v5);
      unint64_t v10 = a1[2];
      if ((unint64_t)v6 >= v10) {
        break;
      }
      void *v6 = v8;
      v6[1] = v9;
      uint64_t v7 = v6 + 2;
LABEL_4:
      a1[1] = (uint64_t)v7;
      ++v5;
      uint64_t v2 = a2[1];
      uint64_t v6 = v7;
      if (v5 >= (a2[2] - v2) >> 3) {
        return;
      }
    }
    int v11 = (void *)*a1;
    uint64_t v12 = ((uint64_t)v6 - *a1) >> 4;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60) {
      sub_1000A9108();
    }
    uint64_t v14 = v10 - (void)v11;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 60) {
        sub_1000A6A10();
      }
      uint64_t v16 = (char *)operator new(16 * v15);
      uint64_t v17 = &v16[16 * v12];
      *(void *)uint64_t v17 = v8;
      *((void *)v17 + 1) = v9;
      uint64_t v18 = (uint64_t)v17;
      if (v6 == v11) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = (char *)(16 * v12);
      *(void *)uint64_t v17 = v8;
      *((void *)v17 + 1) = v9;
      uint64_t v18 = 16 * v12;
      if (v6 == v11)
      {
LABEL_19:
        uint64_t v7 = v17 + 16;
        *a1 = v18;
        a1[1] = (uint64_t)(v17 + 16);
        a1[2] = (uint64_t)&v16[16 * v15];
        if (v6) {
          operator delete(v6);
        }
        goto LABEL_4;
      }
    }
    do
    {
      *(_OWORD *)(v18 - 16) = *((_OWORD *)v6 - 1);
      v18 -= 16;
      v6 -= 2;
    }
    while (v6 != v11);
    uint64_t v6 = (void *)*a1;
    goto LABEL_19;
  }
}

uint64_t sub_1000739A4(uint64_t a1, uint64_t a2)
{
  v3[0] = off_100464A88;
  v3[1] = a1;
  v3[2] = a2;
  uint64_t v4 = v3;
  sub_100073A9C(a1, a2, (uint64_t)v3);
  uint64_t result = (uint64_t)v4;
  if (v4 == v3) {
    return (*(uint64_t (**)(void *))(v3[0] + 32))(v3);
  }
  if (v4) {
    return (*(uint64_t (**)(void))(*v4 + 40))();
  }
  return result;
}

void sub_100073A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F505C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100073A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  if (!v3) {
    sub_10008F39C();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
}

void sub_100073B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  int v11 = (const std::runtime_error *)__cxa_begin_catch(exception_object);
  if (qword_10047BF08 == -1)
  {
    uint64_t v12 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
  }
  else
  {
    dispatch_once(&qword_10047BF08, &stru_1004649A0);
    uint64_t v12 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
    {
LABEL_5:
      sub_1002B82D0(v10, (uint64_t)v9);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = std::runtime_error::runtime_error(exception, v11);
      v15->__vftable = (std::runtime_error_vtbl *)&off_1004649D0;
    }
  }
  unint64_t v13 = sub_1000900B8(v9);
  LODWORD(a9) = 136380675;
  *(void *)((char *)&a9 + 4) = v13;
  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Protobuf parsing error encountered, deleting tile, %{private}s", (uint8_t *)&a9, 0xCu);
  goto LABEL_5;
}

void sub_100073C38(_Unwind_Exception *a1)
{
}

void sub_100073C48(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x100073C50);
  }
  sub_1000A6954(a1);
}

void sub_100073C60(uint64_t a1)
{
}

void sub_100073C6C(uint64_t a1, uint64_t a2)
{
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v2 = *(id *)(a1 + 32);
  uint64_t v3 = std::promise<void>::promise(&v7);
  std::promise<void>::get_future(v3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000344C0;
  block[3] = &unk_100460678;
  void block[4] = v4;
  void block[5] = &v7;
  dispatch_sync(v2, block);
  std::future<void>::get(&v6);
  std::future<void>::~future(&v6);
  std::promise<void>::~promise(&v7);
}

void sub_100073D30(_Unwind_Exception *a1)
{
  std::future<void>::~future((std::future<void> *)(v2 - 32));
  std::promise<void>::~promise((std::promise<void> *)(v2 - 24));

  _Unwind_Resume(a1);
}

void sub_100073D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100073D70(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100466E68;
  uint64_t v4 = (void *)(a1 + 56);
  sub_1000741E0(a1 + 8, a2);
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_100492A58 + 16);
  }
  sub_1000764C4(v5, (uint64_t)v12);
  sub_100073E84((uint64_t)v12, v4);
  nullsub_19(v12, v6);
  uint64_t v7 = *(void *)(a2 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_100492A58 + 16);
  }
  int v8 = *(_DWORD *)(v7 + 16);
  int v10 = *(_DWORD *)(v7 + 20);
  int v11 = v8;
  sub_1000741D0((_DWORD *)(a1 + 72), &v11, &v10);
  return a1;
}

void sub_100073E38(_Unwind_Exception *a1)
{
  sub_1000BA884(v2);
  sub_1003319FC(v1);
  _Unwind_Resume(a1);
}

void sub_100073E54(_Unwind_Exception *a1, double a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nullsub_19(va, a2);
  sub_1003319FC(v4);
  _Unwind_Resume(a1);
}

void sub_100073E70(_Unwind_Exception *a1)
{
  sub_1003319FC(v1);
  _Unwind_Resume(a1);
}

void sub_100073E84(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_100073EB4(uint64_t a1@<X1>, int *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  int v8 = (std::__shared_weak_count *)operator new(0x98uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = &v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_100458808;
  v8[1].__vftable = 0;
  int v10 = *a2;
  int v11 = *a3;
  v8[1].__shared_owners_ = 0;
  sub_100074140((uint64_t)&v8[2], a1);
  v8[5].__vftable = (std::__shared_weak_count_vtbl *)0xBFE0000000000000;
  int v12 = LOBYTE(v8[4].__vftable);
  double v13 = (double)v11 + -0.5;
  if (LOBYTE(v8[4].__vftable)) {
    double v14 = (double)v11 + -0.5;
  }
  else {
    double v14 = -0.5;
  }
  *(double *)&v8[5].__shared_owners_ = (double)v10 + -0.5;
  *(double *)&v8[5].__shared_weak_owners_ = v14;
  if (v12) {
    double v13 = -0.5;
  }
  *(double *)&v8[6].__vftable = v13;
  if (v12) {
    int v15 = 1;
  }
  else {
    int v15 = -1;
  }
  LODWORD(v8[1].__shared_weak_owners_) = v15;
  *a4 = v8 + 1;
  a4[1] = v8;
  shared_owners = (std::__shared_weak_count *)v8[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
    v8[1].__shared_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
    v8[1].__shared_owners_ = (uint64_t)v8;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);

  std::__shared_weak_count::__release_weak(v8);
}

void sub_10007404C(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[1].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_100074070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_100458808;
  sub_100074140((uint64_t)v7, a3);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (v7[48]) {
    int v4 = 1;
  }
  else {
    int v4 = -1;
  }
  *(_DWORD *)(a1 + 40) = v4;
  sub_100074140(a1 + 48, (uint64_t)v7);
  int64x2_t v5 = vdupq_n_s64(0x7FF4000000000000uLL);
  *(int64x2_t *)(a1 + 120) = v5;
  *(int64x2_t *)(a1 + 136) = v5;
  nullsub_16(v7, *(double *)v5.i64);
  return a1;
}

void sub_100074104(_Unwind_Exception *a1, double a2, uint64_t a3, ...)
{
  va_start(va, a3);
  shared_owners = (std::__shared_weak_count *)v3[1].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  nullsub_16(va, a2);
  std::__shared_weak_count::~__shared_weak_count(v3);
  _Unwind_Resume(a1);
}

void sub_10007412C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

double sub_100074140(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10045DAD8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = off_10045DA98;
  *(unsigned char *)(a1 + 32) &= 0xFCu;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a1 + 64) & 0xF8 | 4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  double result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return result;
}

_DWORD *sub_1000741D0(_DWORD *result, _DWORD *a2, int *a3)
{
  int v3 = *a3;
  *double result = *a2;
  result[1] = v3;
  return result;
}

uint64_t sub_1000741E0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_100467BC8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 40) = 0;
  sub_100074290(a1, a2);
  return a1;
}

void sub_100074260(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_10007427C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100074290(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
    LOBYTE(v4) = *(unsigned char *)(a2 + 40);
    if (!(_BYTE)v4) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
  }
  else
  {
    LOBYTE(v4) = *(unsigned char *)(a2 + 40);
    if (!(_BYTE)v4) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 40) |= 1u;
    uint64_t v5 = *(void *)(a1 + 16);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = *(void *)(a2 + 16);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_100492A58 + 16);
    }
    sub_10007444C(v5, v6);
    int v4 = *(_DWORD *)(a2 + 40);
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v7 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 40) |= 2u;
    int v8 = *(std::string **)(a1 + 24);
    if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v8, v7);
    int v4 = *(_DWORD *)(a2 + 40);
  }
  if ((v4 & 4) != 0)
  {
    int v9 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 32) = v9;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100074400()
{
}

void sub_100074424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100074438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007444C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
    LOBYTE(v4) = *(unsigned char *)(a2 + 36);
    if (!(_BYTE)v4) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
  }
  else
  {
    LOBYTE(v4) = *(unsigned char *)(a2 + 36);
    if (!(_BYTE)v4) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
  }
  if ((v4 & 1) == 0)
  {
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
LABEL_10:
    int v6 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(_DWORD *)(a1 + 20) = v6;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
    goto LABEL_11;
  }
  int v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) |= 1u;
  *(_DWORD *)(a1 + 16) = v5;
  int v4 = *(_DWORD *)(a2 + 36);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_7:
  if ((v4 & 4) == 0) {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
LABEL_11:
  *(_DWORD *)(a1 + 36) |= 4u;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    operator new();
  }
  uint64_t v8 = *(void *)(a2 + 24);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_100492A78 + 24);
  }
  sub_100074608(v7, v8);
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1000745B8()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000745E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000745F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100074608(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
    LOBYTE(v4) = *(unsigned char *)(a2 + 48);
    if (!(_BYTE)v4) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
  }
  else
  {
    LOBYTE(v4) = *(unsigned char *)(a2 + 48);
    if (!(_BYTE)v4) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 48) |= 1u;
    uint64_t v5 = *(void *)(a1 + 16);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = *(void *)(a2 + 16);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_100492A70 + 16);
    }
    sub_1000747D8(v5, v6);
    int v4 = *(_DWORD *)(a2 + 48);
  }
  if ((v4 & 2) == 0)
  {
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
LABEL_16:
    char v10 = *(unsigned char *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(unsigned char *)(a1 + 40) = v10;
    if ((*(_DWORD *)(a2 + 48) & 8) == 0) {
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 48) |= 2u;
  *(void *)(a1 + 24) = v9;
  int v4 = *(_DWORD *)(a2 + 48);
  if ((v4 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_12:
  if ((v4 & 8) != 0)
  {
LABEL_13:
    uint64_t v7 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(void *)(a1 + 32) = v7;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100074788()
{
  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000747B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000747C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000747D8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      uint64_t v5 = *(void *)(a2 + 16);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(void *)(a1 + 16) = v5;
      int v4 = *(_DWORD *)(a2 + 36);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(_DWORD *)(a1 + 36) |= 2u;
      *(void *)(a1 + 24) = v6;
    }
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100074890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000748A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_1000748BC(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = (void *)a1[4];
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    int v3 = (void *)a1[4];
    if (!v3) {
      goto LABEL_10;
    }
  }
  do
  {
    int v4 = v3;
    int v3 = (void *)*v3;
    sub_100074A24(v4 + 4);
    uint64_t v5 = (std::__shared_weak_count *)v4[3];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(v4);
  }
  while (v3);
LABEL_10:
  uint64_t v6 = (void *)a1[2];
  a1[2] = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

void sub_100074A28(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  sub_100076AC4(a2);
  sub_100077094(a2, *(const std::string **)(v3 + 16));
  sub_100077140(a2, *(const std::string **)(v3 + 16));
  sub_100077124(a2, *(_DWORD *)(v3 + 56));
  *(_DWORD *)(a2 + 1912) |= 0x8000u;
  uint64_t v4 = *(void *)(v3 + 32);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_100492A50 + 32);
  }
  sub_100076484(a2 + 1624, *(double *)(v4 + 16));
  uint64_t v5 = *(void *)(v3 + 32);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_100492A50 + 32);
  }
  sub_10007647C(a2 + 1624, *(double *)(v5 + 24));
  uint64_t v77 = a2;
  *(_DWORD *)(a2 + 1912) |= 8u;
  v81[0] = (char *)off_10045DCE8;
  memset(&v81[1], 0, 56);
  int v82 = off_10045DA38;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  v86 &= 0xFCu;
  int v87 = 0;
  int v88 = off_10045DAF8;
  uint64_t v89 = 0;
  int v90 = off_10045DAD8;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v91 = off_10045DA98;
  v94 &= 0xFCu;
  uint64_t v95 = 0;
  char v96 = 0;
  uint64_t v97 = 0;
  char v98 = v98 & 0xF8 | 4;
  v99 &= 0xF8u;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = off_10045DA58;
  long long v103 = xmmword_1003F1C60;
  long long v104 = xmmword_1003F1C70;
  v105 |= 0xFu;
  long long v106 = off_10045DA58;
  long long v107 = xmmword_1003F1C60;
  long long v108 = xmmword_1003F1C70;
  v109 |= 0xFu;
  long long v110 = 0u;
  long long v111 = 0u;
  uint64_t v112 = 0;
  int v113 = off_10045DA98;
  uint64_t v115 = 0;
  uint64_t v114 = 0;
  v116 &= 0xFCu;
  uint64_t v119 = 0;
  int v117 = off_10045DA98;
  uint64_t v118 = 0;
  v120 &= 0xFCu;
  long long v122 = 0u;
  long long v123 = 0u;
  long long v121 = 0u;
  __int16 v124 = 0;
  unsigned __int8 v125 = ((v125 << 16) & 0xFE0000u) >> 16;
  uint64_t v6 = *(double **)(v3 + 40);
  if (!v6) {
    uint64_t v6 = *(double **)(qword_100492A50 + 40);
  }
  int v126 = off_10045DA38;
  long long v127 = 0uLL;
  long long v128 = 0uLL;
  long long v129 = 0uLL;
  LOBYTE(v130) = v130 & 0xFC;
  sub_100076484((uint64_t)&v126, v6[2]);
  sub_10007647C((uint64_t)&v126, v6[3]);
  sub_100076F14((uint64_t)&v126, v6[4]);
  sub_100076F1C((uint64_t)&v126, v6[5]);
  sub_100077154((uint64_t)v81, (uint64_t)&v126);
  nullsub_20(&v126);
  uint64_t v7 = *(void *)(v3 + 48);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_100492A50 + 48);
  }
  sub_1000764C4(v7, (uint64_t)&v126);
  double v8 = sub_10007714C((uint64_t)v81, (uint64_t)&v126);
  nullsub_19(&v126, v8);
  sub_100077138(v77 + 80, (uint64_t)v81);
  sub_1000760FC(v81);
  uint64_t v9 = *(void *)(v3 + 64);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_100492A50 + 64);
  }
  v81[0] = (char *)off_10045D668;
  memset(&v81[4], 0, 32);
  LOBYTE(v82) = v82 & 0x80;
  *(_OWORD *)&v81[1] = *(_OWORD *)(v9 + 16);
  v81[3] = *(char **)(v9 + 32);
  double v10 = sub_1000770F8(v77, (uint64_t)v81);
  nullsub_21(v81, v10);
  uint64_t v11 = *(void *)(v3 + 72);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_100492A50 + 72);
  }
  v81[0] = (char *)off_10045D668;
  memset(&v81[4], 0, 32);
  LOBYTE(v82) = v82 & 0x80;
  *(_OWORD *)&v81[1] = *(_OWORD *)(v11 + 16);
  v81[3] = *(char **)(v11 + 32);
  double v12 = sub_1000770C8(v77, (uint64_t)v81);
  nullsub_21(v81, v12);
  sub_100076654((char **)(v77 + 1800), *(int *)(v3 + 88));
  sub_100076F24((char **)(v77 + 1832), *(int *)(v3 + 120));
  *(_DWORD *)(v77 + 1912) &= ~0x200000u;
  int v13 = *(_DWORD *)(v3 + 200);
  if ((v13 & 0x4000) != 0)
  {
    int v14 = *(_DWORD *)(v3 + 140);
    if ((v14 - 1) >= 2)
    {
      __cxa_allocate_exception(0x40uLL);
      v81[0] = (char *)operator new(0x30uLL);
      *(_OWORD *)&v81[1] = xmmword_1003F5F30;
      strcpy(v81[0], "Unsupported proto::venue::LocationContext enum");
      std::runtime_error::runtime_error(&v132, (const std::string *)v81);
      v132.__vftable = (std::runtime_error_vtbl *)&off_100453630;
      sub_10018E868((uint64_t)&v126);
      sub_1000CC8F4(&v132, (uint64_t)"LocationContext convert(proto::venue::LocationContext)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/venue.cpp", 126, (uint64_t)&v126);
    }
    sub_10007715C(v77, v14);
    int v13 = *(_DWORD *)(v3 + 200);
  }
  if ((v13 & 0x200) != 0) {
    sub_10019A590(v77, *(double *)(v3 + 104));
  }
  uint64_t v15 = *(int *)(v3 + 88);
  if (v15)
  {
    uint64_t v16 = *(uint64_t **)(v3 + 80);
    uint64_t v17 = 8 * v15;
    do
    {
      while (1)
      {
        sub_1000767C4((uint64_t)v81, *v16);
        unint64_t v18 = *(void *)(v77 + 1808);
        if (v18 >= *(void *)(v77 + 1816)) {
          break;
        }
        sub_100077148(*(void *)(v77 + 1808), v81);
        *(void *)(v77 + 1808) = v18 + 72;
        *(void *)(v77 + 1808) = v18 + 72;
        sub_100075C7C(v81);
        ++v16;
        v17 -= 8;
        if (!v17) {
          goto LABEL_24;
        }
      }
      *(void *)(v77 + 1808) = sub_100316390((void *)(v77 + 1800), (uint64_t)v81);
      sub_100075C7C(v81);
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
LABEL_24:
  uint64_t v19 = *(int *)(v3 + 120);
  if (v19)
  {
    unint64_t v20 = *(void **)(v3 + 112);
    int v75 = &v20[v19];
    while (1)
    {
      unint64_t v76 = v20;
      uint64_t v22 = *v20;
      v81[0] = (char *)off_10045D6A8;
      v81[1] = (char *)off_10045D688;
      memset(&v81[2], 0, 48);
      int v82 = 0;
      LOBYTE(v83) = v83 & 0xF8;
      long long v84 = 0uLL;
      *((void *)&v83 + 1) = 0;
      LOBYTE(v85) = v85 & 0xFC;
      uint64_t v23 = *(void *)(v22 + 16);
      if (!v23) {
        uint64_t v23 = *(void *)(qword_100492A40 + 16);
      }
      sub_1000767C4((uint64_t)&v126, v23);
      sub_100077174((uint64_t)v81, (uint64_t)&v126);
      sub_100075C7C(&v126);
      sub_100076654((char **)&v83 + 1, *(int *)(v22 + 32));
      uint64_t v24 = *(int *)(v22 + 32);
      if (v24) {
        break;
      }
LABEL_106:
      unint64_t v74 = *(void *)(v77 + 1840);
      if (v74 >= *(void *)(v77 + 1848))
      {
        std::string::size_type v21 = sub_10031657C((void *)(v77 + 1832), (uint64_t)v81);
      }
      else
      {
        sub_100077170(*(void *)(v77 + 1840), v81);
        std::string::size_type v21 = (char *)(v74 + 112);
        *(void *)(v77 + 1840) = v74 + 112;
      }
      *(void *)(v77 + 1840) = v21;
      sub_100076224(v81);
      unint64_t v20 = v76 + 1;
      if (v76 + 1 == v75) {
        goto LABEL_108;
      }
    }
    unint64_t v25 = *(void **)(v22 + 24);
    int v78 = &v25[v24];
    while (1)
    {
      uint64_t v28 = *v25;
      int v126 = off_10045D688;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      uint64_t v130 = 0;
      v131 &= 0xF8u;
      int v79 = v25;
      uint64_t v80 = v28;
      uint64_t v29 = *(int *)(v28 + 24);
      if (v29)
      {
        if ((v29 & 0x80000000) != 0) {
          goto LABEL_115;
        }
        unint64_t v30 = (char *)operator new(8 * v29);
        *(void *)&long long v127 = v30;
        *((void *)&v127 + 1) = v30;
        *(void *)&long long v128 = &v30[8 * v29];
        int v31 = *(_DWORD *)(v80 + 48);
        uint64_t v32 = v31;
        if (v31)
        {
LABEL_37:
          if (v31 < 0) {
LABEL_115:
          }
            sub_1000A9108();
          *((void *)&v128 + 1) = operator new(8 * v32);
          *(void *)&long long v129 = *((void *)&v128 + 1);
          *((void *)&v129 + 1) = *((void *)&v128 + 1) + 8 * v32;
          if (!v29)
          {
LABEL_39:
            if (v31) {
              goto LABEL_74;
            }
            goto LABEL_104;
          }
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v30 = 0;
        int v31 = *(_DWORD *)(v28 + 48);
        uint64_t v32 = v31;
        if (v31) {
          goto LABEL_37;
        }
      }
      if (!v29) {
        goto LABEL_39;
      }
LABEL_43:
      uint64_t v33 = *(void **)(v80 + 16);
      uint64_t v34 = &v33[v29];
      do
      {
        if ((unint64_t)v30 < (unint64_t)v128)
        {
          *(void *)unint64_t v30 = *v33;
          uint64_t v35 = (uint64_t)(v30 + 8);
          goto LABEL_45;
        }
        char v36 = (char *)v127;
        uint64_t v37 = (uint64_t)&v30[-v127] >> 3;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61) {
          sub_1000A9108();
        }
        uint64_t v39 = v128 - v127;
        if ((uint64_t)(v128 - v127) >> 2 > v38) {
          unint64_t v38 = v39 >> 2;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          if (v40 >> 61) {
            sub_1000A6A10();
          }
          std::string::size_type v41 = operator new(8 * v40);
          int v42 = &v41[8 * v37];
          void *v42 = *v33;
          uint64_t v35 = (uint64_t)(v42 + 1);
          if (v30 == v36) {
            goto LABEL_61;
          }
        }
        else
        {
          std::string::size_type v41 = 0;
          int v42 = (void *)(8 * v37);
          *(void *)(8 * v37) = *v33;
          uint64_t v35 = 8 * v37 + 8;
          if (v30 == v36) {
            goto LABEL_61;
          }
        }
        unint64_t v43 = v30 - 8 - v36;
        if (v43 < 0x168)
        {
          uint64_t v44 = v30;
          goto LABEL_60;
        }
        if (&v41[v30 - v36 - 8 - (v43 & 0xFFFFFFFFFFFFFFF8)] > &v41[v30 - v36 - 8])
        {
          uint64_t v44 = v30;
          do
          {
LABEL_60:
            uint64_t v45 = *((void *)v44 - 1);
            v44 -= 8;
            *--int v42 = v45;
          }
          while (v44 != v36);
          goto LABEL_61;
        }
        if (&v30[-(v43 & 0xFFFFFFFFFFFFFFF8) - 8] > v30 - 8)
        {
          uint64_t v44 = v30;
          goto LABEL_60;
        }
        if ((unint64_t)(v36 - v41) < 0x20)
        {
          uint64_t v44 = v30;
          goto LABEL_60;
        }
        uint64_t v46 = (v43 >> 3) + 1;
        uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v44 = &v30[-v47];
        int v42 = (void *)((char *)v42 - v47);
        char v48 = &v41[8 * v37 - 16];
        std::string v49 = v30 - 16;
        uint64_t v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v51 = *(_OWORD *)v49;
          *(v48 - 1) = *((_OWORD *)v49 - 1);
          _OWORD *v48 = v51;
          v48 -= 2;
          v49 -= 32;
          v50 -= 4;
        }
        while (v50);
        if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_60;
        }
LABEL_61:
        *(void *)&long long v127 = v42;
        *((void *)&v127 + 1) = v35;
        *(void *)&long long v128 = &v41[8 * v40];
        if (v36) {
          operator delete(v36);
        }
LABEL_45:
        *((void *)&v127 + 1) = v35;
        ++v33;
        unint64_t v30 = (char *)v35;
      }
      while (v33 != v34);
      int v52 = *(_DWORD *)(v80 + 48);
      uint64_t v32 = v52;
      if (v52)
      {
LABEL_74:
        float64x2x2_t v53 = *(void **)(v80 + 40);
        float64x2x2_t v54 = &v53[v32];
        float64x2x2_t v55 = (char *)v129;
        while ((unint64_t)v55 < *((void *)&v129 + 1))
        {
          *(void *)float64x2x2_t v55 = *v53;
          uint64_t v56 = (uint64_t)(v55 + 8);
LABEL_76:
          *(void *)&long long v129 = v56;
          ++v53;
          float64x2x2_t v55 = (char *)v56;
          if (v53 == v54) {
            goto LABEL_104;
          }
        }
        float64x2x2_t v57 = (char *)*((void *)&v128 + 1);
        uint64_t v58 = (uint64_t)&v55[-*((void *)&v128 + 1)] >> 3;
        unint64_t v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 61) {
          sub_1000A9108();
        }
        uint64_t v60 = *((void *)&v129 + 1) - *((void *)&v128 + 1);
        if ((uint64_t)(*((void *)&v129 + 1) - *((void *)&v128 + 1)) >> 2 > v59) {
          unint64_t v59 = v60 >> 2;
        }
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v59;
        }
        if (v61)
        {
          if (v61 >> 61) {
            sub_1000A6A10();
          }
          int v62 = operator new(8 * v61);
          long long v63 = &v62[8 * v58];
          *long long v63 = *v53;
          uint64_t v56 = (uint64_t)(v63 + 1);
          if (v55 == v57) {
            goto LABEL_92;
          }
LABEL_89:
          unint64_t v64 = v55 - 8 - v57;
          if (v64 < 0x168)
          {
            long long v65 = v55;
            goto LABEL_91;
          }
          if (&v62[v55 - v57 - 8 - (v64 & 0xFFFFFFFFFFFFFFF8)] > &v62[v55 - v57 - 8])
          {
            long long v65 = v55;
            goto LABEL_91;
          }
          if (&v55[-(v64 & 0xFFFFFFFFFFFFFFF8) - 8] > v55 - 8)
          {
            long long v65 = v55;
            goto LABEL_91;
          }
          if ((unint64_t)(v57 - v62) < 0x20)
          {
            long long v65 = v55;
            goto LABEL_91;
          }
          uint64_t v67 = (v64 >> 3) + 1;
          uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
          long long v65 = &v55[-v68];
          long long v63 = (void *)((char *)v63 - v68);
          signed int v69 = &v62[8 * v58 - 16];
          unsigned int v70 = v55 - 16;
          uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v72 = *(_OWORD *)v70;
            *(v69 - 1) = *((_OWORD *)v70 - 1);
            _OWORD *v69 = v72;
            v69 -= 2;
            v70 -= 32;
            v71 -= 4;
          }
          while (v71);
          if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_91:
              uint64_t v66 = *((void *)v65 - 1);
              v65 -= 8;
              *--long long v63 = v66;
            }
            while (v65 != v57);
          }
        }
        else
        {
          int v62 = 0;
          long long v63 = (void *)(8 * v58);
          *(void *)(8 * v58) = *v53;
          uint64_t v56 = 8 * v58 + 8;
          if (v55 != v57) {
            goto LABEL_89;
          }
        }
LABEL_92:
        *((void *)&v128 + 1) = v63;
        *(void *)&long long v129 = v56;
        *((void *)&v129 + 1) = &v62[8 * v61];
        if (v57) {
          operator delete(v57);
        }
        goto LABEL_76;
      }
LABEL_104:
      sub_100076ABC((uint64_t)&v126, *(double *)(v80 + 64));
      uint64_t v73 = v84;
      if ((unint64_t)v84 >= *((void *)&v84 + 1))
      {
        uint64_t v26 = sub_100316390((void *)&v83 + 1, (uint64_t)&v126);
        unint64_t v27 = v79;
      }
      else
      {
        sub_100077148(v84, &v126);
        unint64_t v27 = v79;
        uint64_t v26 = (char *)(v73 + 72);
      }
      *(void *)&long long v84 = v26;
      sub_100075C7C(&v126);
      unint64_t v25 = v27 + 1;
      if (v25 == v78) {
        goto LABEL_106;
      }
    }
  }
LABEL_108:
  if ((*(unsigned char *)(v3 + 202) & 4) != 0) {
    sub_10019A5A4(v77, *(unsigned char *)(v3 + 192));
  }
}

void sub_1000756AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v32 = *(void **)(v30 - 200);
  if (v32)
  {
    *(void *)(v30 - 192) = v32;
    operator delete(v32);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v30 - 104));
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_100074A24(a18);
  _Unwind_Resume(a1);
}

void sub_1000756EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::runtime_error::~runtime_error((std::runtime_error *)(v31 - 104));
  if (a30 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v30);
  sub_100074A24(a18);
  _Unwind_Resume(a1);
}

void sub_100075734(_Unwind_Exception *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  va_start(va, a18);
  nullsub_21(va, a2);
  sub_100074A24(v18);
  _Unwind_Resume(a1);
}

void sub_100075750(_Unwind_Exception *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  va_start(va, a18);
  nullsub_21(va, a2);
  sub_100074A24(a12);
  _Unwind_Resume(a1);
}

void sub_100075770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1000760FC(va);
  sub_100074A24(a11);
  _Unwind_Resume(a1);
}

void sub_1000757B8(_Unwind_Exception *a1)
{
  sub_100074A24(v1);
  _Unwind_Resume(a1);
}

void sub_1000757CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_100076224((uint64_t *)va);
  sub_100074A24(v17);
  _Unwind_Resume(a1);
}

void sub_1000757E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  *(void *)(v17 + 1840) = v18;
  sub_100076224((uint64_t *)va);
  sub_100074A24(v17);
  _Unwind_Resume(a1);
}

void sub_100075808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_100075C7C((uint64_t *)va);
  sub_100074A24(a11);
  _Unwind_Resume(a1);
}

void sub_100075838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_100076224((uint64_t *)va);
  sub_100074A24(a11);
  _Unwind_Resume(a1);
}

void sub_10007586C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void sub_100075884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_100075C7C((void *)(v17 - 200));
  sub_100076224(va);
  sub_100074A24(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1000758D4(uint64_t a1, double a2)
{
  *(void *)a1 = off_10045DE38;
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  nullsub_16(a1 + 56, a2);
  sub_100075D60(a1 + 8);
  return a1;
}

uint64_t sub_100075934(uint64_t a1)
{
  *(void *)a1 = off_10045D6C8;
  uint64_t v2 = *(void (****)(void))(a1 + 1888);
  if (v2)
  {
    uint64_t v3 = *(void (****)(void))(a1 + 1896);
    uint64_t v4 = *(void **)(a1 + 1888);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 103;
      uint64_t v6 = v3 - 103;
      do
      {
        (**v6)(v6);
        v5 -= 103;
        BOOL v7 = v6 == v2;
        v6 -= 103;
      }
      while (!v7);
      uint64_t v4 = *(void **)(a1 + 1888);
    }
    *(void *)(a1 + 1896) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 1887) < 0)
  {
    operator delete(*(void **)(a1 + 1864));
    double v8 = *(char **)(a1 + 1832);
    if (!v8)
    {
LABEL_10:
      uint64_t v9 = *(char **)(a1 + 1800);
      if (!v9) {
        goto LABEL_25;
      }
      goto LABEL_19;
    }
  }
  else
  {
    double v8 = *(char **)(a1 + 1832);
    if (!v8) {
      goto LABEL_10;
    }
  }
  double v10 = *(char **)(a1 + 1840);
  uint64_t v11 = v8;
  if (v10 != v8)
  {
    double v12 = v10 - 112;
    int v13 = v10 - 112;
    int v14 = v10 - 112;
    do
    {
      uint64_t v15 = *(void (***)(char *))v14;
      v14 -= 112;
      (*v15)(v13);
      v12 -= 112;
      BOOL v7 = v13 == v8;
      int v13 = v14;
    }
    while (!v7);
    uint64_t v11 = *(char **)(a1 + 1832);
  }
  *(void *)(a1 + 1840) = v8;
  operator delete(v11);
  uint64_t v9 = *(char **)(a1 + 1800);
  if (v9)
  {
LABEL_19:
    uint64_t v16 = *(char **)(a1 + 1808);
    uint64_t v17 = v9;
    if (v16 != v9)
    {
      uint64_t v18 = v16 - 72;
      uint64_t v19 = v16 - 72;
      unint64_t v20 = v16 - 72;
      do
      {
        std::string::size_type v21 = *(void (***)(char *))v20;
        v20 -= 72;
        (*v21)(v19);
        v18 -= 72;
        BOOL v7 = v19 == v9;
        uint64_t v19 = v20;
      }
      while (!v7);
      uint64_t v17 = *(char **)(a1 + 1800);
    }
    *(void *)(a1 + 1808) = v9;
    operator delete(v17);
  }
LABEL_25:
  nullsub_15(a1 + 1624);
  sub_1000758D4(a1 + 1440, v22);
  sub_100075CDC(a1 + 1056);
  *(void *)(a1 + 992) = off_10045D628;
  sub_100075BE0(a1 + 1024, *(void *)(a1 + 1032));
  sub_100075BE0(a1 + 1000, *(void *)(a1 + 1008));
  if (*(char *)(a1 + 983) < 0)
  {
    operator delete(*(void **)(a1 + 960));
    if ((*(char *)(a1 + 959) & 0x80000000) == 0)
    {
LABEL_27:
      if ((*(char *)(a1 + 927) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_34;
    }
  }
  else if ((*(char *)(a1 + 959) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(*(void **)(a1 + 936));
  if ((*(char *)(a1 + 927) & 0x80000000) == 0)
  {
LABEL_28:
    sub_100075DC4(a1 + 80);
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(*(void **)(a1 + 904));
  sub_100075DC4(a1 + 80);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
LABEL_29:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_36:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_37;
  }
LABEL_35:
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_36;
  }
LABEL_30:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_37:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100075BE0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100075BE0(a1, *(void *)a2);
    sub_100075BE0(a1, *(void *)(a2 + 8));
    if (*(char *)(a2 + 79) < 0)
    {
      operator delete(*(void **)(a2 + 56));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      {
LABEL_4:
        uint64_t v4 = (void *)a2;
LABEL_6:
        operator delete(v4);
        return;
      }
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a2 + 32));
    uint64_t v4 = (void *)a2;
    goto LABEL_6;
  }
}

void *sub_100075C7C(void *a1)
{
  *a1 = off_10045D688;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_100075CDC(uint64_t a1)
{
  *(void *)a1 = off_10045DE18;
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  sub_100075D60(a1 + 304);
  nullsub_15(a1 + 272);
  nullsub_15(a1 + 240);
  sub_1000761B8(a1 + 128);
  nullsub_16(a1 + 56, v2);
  sub_100075D60(a1 + 8);
  return a1;
}

uint64_t sub_100075D60(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)double result = off_10045DDB8;
  if (*(char *)(result + 39) < 0)
  {
    operator delete(*(void **)(result + 16));
    return v1;
  }
  return result;
}

uint64_t sub_100075DC4(uint64_t a1)
{
  *(void *)a1 = off_10045D648;
  if (*(char *)(a1 + 815) < 0)
  {
    operator delete(*(void **)(a1 + 792));
    if ((*(char *)(a1 + 791) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 767) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(a1 + 791) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 768));
  if ((*(char *)(a1 + 767) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 743) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 744));
  if ((*(char *)(a1 + 743) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 719) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(a1 + 720));
  if ((*(char *)(a1 + 719) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 695) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 696));
  if ((*(char *)(a1 + 695) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 671) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 672));
  if ((*(char *)(a1 + 671) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 647) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 648));
  if ((*(char *)(a1 + 647) & 0x80000000) == 0)
  {
LABEL_9:
    sub_100076100((void *)(a1 + 584));
    sub_1000760FC(a1 + 80);
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 624));
  sub_100076100((void *)(a1 + 584));
  sub_1000760FC(a1 + 80);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_23;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_23:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void *sub_100075F34(void *a1)
{
  *a1 = off_10045DCE8;
  double v2 = (void *)a1[59];
  if (v2)
  {
    a1[60] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[56];
  if (v3)
  {
    a1[57] = v3;
    operator delete(v3);
  }
  nullsub_17(a1 + 52);
  nullsub_17(a1 + 48);
  uint64_t v4 = a1[43];
  if (v4)
  {
    uint64_t v5 = a1[44];
    uint64_t v6 = (void *)a1[43];
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0) {
          operator delete(*(void **)(v5 - 24));
        }
        v5 -= 24;
      }
      while (v5 != v4);
      uint64_t v6 = (void *)a1[43];
    }
    a1[44] = v4;
    operator delete(v6);
  }
  nullsub_18(a1 + 37);
  double v7 = nullsub_18(a1 + 31);
  nullsub_19(a1 + 17, v7);
  nullsub_20(a1 + 8);
  double v8 = (void (***)(void))a1[4];
  if (v8)
  {
    uint64_t v9 = (void (***)(void))a1[5];
    double v10 = (void *)a1[4];
    if (v9 != v8)
    {
      uint64_t v11 = v9 - 5;
      double v12 = v9 - 5;
      int v13 = v9 - 5;
      do
      {
        int v14 = *v13;
        v13 -= 5;
        (*v14)(v12);
        v11 -= 5;
        BOOL v15 = v12 == v8;
        double v12 = v13;
      }
      while (!v15);
      double v10 = (void *)a1[4];
    }
    a1[5] = v8;
    operator delete(v10);
  }
  uint64_t v16 = (void (***)(void))a1[1];
  if (v16)
  {
    uint64_t v17 = (void (***)(void))a1[2];
    uint64_t v18 = (void *)a1[1];
    if (v17 != v16)
    {
      uint64_t v19 = v17 - 5;
      unint64_t v20 = v17 - 5;
      std::string::size_type v21 = v17 - 5;
      do
      {
        double v22 = *v21;
        v21 -= 5;
        (*v22)(v20);
        v19 -= 5;
        BOOL v15 = v20 == v16;
        unint64_t v20 = v21;
      }
      while (!v15);
      uint64_t v18 = (void *)a1[1];
    }
    a1[2] = v16;
    operator delete(v18);
  }
  return a1;
}

void *sub_100076100(void *a1)
{
  *a1 = off_10045D7A8;
  double v2 = (void (***)(void))a1[1];
  if (v2)
  {
    uint64_t v3 = (void (***)(void))a1[2];
    uint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 7;
      uint64_t v6 = v3 - 7;
      double v7 = v3 - 7;
      do
      {
        double v8 = *v7;
        v7 -= 7;
        (*v8)(v6);
        v5 -= 7;
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1000761B8(uint64_t a1)
{
  *(void *)a1 = off_10045DDD8;
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    double v2 = *(void **)(a1 + 8);
    if (!v2) {
      return a1;
    }
    goto LABEL_3;
  }
  double v2 = *(void **)(a1 + 8);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void *sub_100076224(void *a1)
{
  *a1 = off_10045D6A8;
  double v2 = (void (***)(void))a1[10];
  if (v2)
  {
    uint64_t v3 = (void (***)(void))a1[11];
    uint64_t v4 = (void *)a1[10];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      double v7 = v3 - 9;
      do
      {
        double v8 = *v7;
        v7 -= 9;
        (*v8)(v6);
        v5 -= 9;
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  a1[1] = off_10045D688;
  double v10 = (void *)a1[5];
  if (v10)
  {
    a1[6] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)a1[2];
  if (v11)
  {
    a1[3] = v11;
    operator delete(v11);
  }
  return a1;
}

uint64_t sub_100076320@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  a2->n128_u64[0] = (unint64_t)off_10045DAD8;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2->n128_u64[1] = (unint64_t)off_10045DA98;
  a2[2].n128_u8[0] &= 0xFCu;
  a2[2].n128_u64[1] = 0;
  a2[3].n128_u8[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u8[0] = a2[4].n128_u8[0] & 0xF8 | 4;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_100492A70 + 16);
  }
  v6[1] = 0;
  _DWORD v6[2] = 0;
  char v7 = 0;
  v6[0] = off_10045DA98;
  sub_100076484((uint64_t)v6, *(double *)(v4 + 16));
  sub_10007647C((uint64_t)v6, *(double *)(v4 + 24));
  sub_100076494(a2, (uint64_t)v6);
  nullsub_17(v6);
  sub_10007648C((uint64_t)a2, *(double *)(a1 + 24));
  sub_1000764BC((uint64_t)a2, *(unsigned char *)(a1 + 40));
  return sub_1000764A8((uint64_t)a2, *(double *)(a1 + 32));
}

void sub_100076448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_17(&a9);
  nullsub_16(v9, v11);
  _Unwind_Resume(a1);
}

void sub_100076468(_Unwind_Exception *a1, double a2)
{
  nullsub_16(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_10007647C(uint64_t result, double a2)
{
  *(double *)(result + 16) = a2;
  return result;
}

uint64_t sub_100076484(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_10007648C(uint64_t result, double a2)
{
  *(double *)(result + 40) = a2;
  return result;
}

__n128 sub_100076494(__n128 *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[2].n128_u8[0] = *(unsigned char *)(a2 + 24);
  return result;
}

uint64_t sub_1000764A8(uint64_t result, double a2)
{
  *(double *)(result + 56) = a2;
  *(unsigned char *)(result + 64) |= 4u;
  return result;
}

uint64_t sub_1000764BC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 48) = a2;
  return result;
}

uint64_t sub_1000764C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = off_10045DAF8;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = off_10045DAD8;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = off_10045DA98;
  *(unsigned char *)(a2 + 48) &= 0xFCu;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = *(unsigned char *)(a2 + 80) & 0xF8 | 4;
  *(unsigned char *)(a2 + 88) &= 0xF8u;
  sub_100076644(a2, *(_DWORD *)(a1 + 16));
  sub_10007664C(a2, *(_DWORD *)(a1 + 20));
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_100492A78 + 24);
  }
  sub_100076320(v4, v7);
  double v5 = sub_100076610(a2, (uint64_t)v7);
  return nullsub_16(v7, v5);
}

void sub_1000765CC(_Unwind_Exception *a1, double a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nullsub_16(va, a2);
  nullsub_19(v3, v5);
  _Unwind_Resume(a1);
}

void sub_1000765E8(_Unwind_Exception *a1, double a2)
{
  nullsub_19(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1000765FC(_Unwind_Exception *a1, double a2)
{
  nullsub_19(v2, a2);
  _Unwind_Resume(a1);
}

double sub_100076610(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 48);
  double result = *(double *)(a2 + 56);
  *(double *)(a1 + 72) = result;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 64);
  return result;
}

uint64_t sub_100076644(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_10007664C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = a2;
  return result;
}

void sub_100076654(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      sub_1000A9108();
    }
    uint64_t v4 = a1[1];
    uint64_t v5 = 72 * a2;
    uint64_t v6 = (char *)operator new(72 * a2);
    uint64_t v7 = 0;
    double v8 = &v6[v4 - v2];
    *(void *)&long long v17 = v8;
    *((void *)&v17 + 1) = &v6[v5];
    while (&v4[v7] != v2)
    {
      v7 -= 72;
      sub_100077148(&v8[v7], &v4[v7]);
    }
    uint64_t v9 = &v8[v7];
    double v11 = *a1;
    double v10 = a1[1];
    *a1 = v9;
    *(_OWORD *)(a1 + 1) = v17;
    if (v10 != v11)
    {
      double v12 = v10 - 72;
      int v13 = v10 - 72;
      int v14 = v10 - 72;
      do
      {
        BOOL v15 = *(void (***)(char *))v14;
        v14 -= 72;
        (*v15)(v13);
        v12 -= 72;
        BOOL v16 = v13 == v11;
        int v13 = v14;
      }
      while (!v16);
    }
    if (v11) {
      operator delete(v11);
    }
  }
}

uint64_t sub_1000767C4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10045D688;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) &= 0xF8u;
  uint64_t v5 = *(int *)(a2 + 24);
  uint64_t v6 = 8 * v5;
  if (v5)
  {
    if ((v5 & 0x80000000) != 0) {
      goto LABEL_14;
    }
    uint64_t v7 = (char *)operator new(8 * v5);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = &v7[8 * v5];
  }
  int v8 = *(_DWORD *)(a2 + 48);
  uint64_t v9 = v8;
  if (!v8) {
    goto LABEL_7;
  }
  if (v8 < 0) {
LABEL_14:
  }
    sub_1000A9108();
  double v10 = (char *)operator new(8 * v8);
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = &v10[8 * v8];
LABEL_7:
  double v11 = *(void **)(a2 + 16);
  uint64_t v15 = v4;
  if (v5)
  {
    do
    {
      sub_100076948(&v15, v11++);
      v6 -= 8;
    }
    while (v6);
    int v8 = *(_DWORD *)(a2 + 48);
    uint64_t v9 = v8;
  }
  double v12 = *(void **)(a2 + 40);
  uint64_t v15 = a1 + 32;
  if (v8)
  {
    uint64_t v13 = 8 * v9;
    do
    {
      sub_100076948(&v15, v12++);
      v13 -= 8;
    }
    while (v13);
  }
  return sub_100076ABC(a1, *(double *)(a2 + 64));
}

void sub_10007690C(_Unwind_Exception *a1)
{
  sub_100075C7C(v1);
  _Unwind_Resume(a1);
}

void sub_100076920(_Unwind_Exception *a1)
{
  sub_100075C7C(v1);
  _Unwind_Resume(a1);
}

void sub_100076934(_Unwind_Exception *a1)
{
  sub_100075C7C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100076948(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *(char **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  uint64_t v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = *(char **)v4;
    uint64_t v10 = (uint64_t)&v6[-*(void *)v4];
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + 1;
    if (v12 >> 61) {
      sub_1000A9108();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_1000A6A10();
      }
      uint64_t v15 = operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    BOOL v16 = &v15[8 * v11];
    void *v16 = *a2;
    int v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 8;
      if (v17 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v7 = &v6[-v19];
      BOOL v16 = (void *)((char *)v16 - v19);
      unint64_t v20 = &v15[8 * v11 - 16];
      std::string::size_type v21 = v6 - 16;
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        _OWORD *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v24 = *((void *)v7 - 1);
          v7 -= 8;
          *--BOOL v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(void *)uint64_t v4 = v16;
    *(void *)(v4 + 8) = v8;
    *(void *)(v4 + 16) = &v15[8 * v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)uint64_t v6 = *a2;
    int v8 = v6 + 8;
  }
  *(void *)(v4 + 8) = v8;
  return a1;
}

uint64_t sub_100076ABC(uint64_t result, double a2)
{
  *(double *)(result + 56) = a2;
  return result;
}

uint64_t sub_100076AC4(uint64_t a1)
{
  *(void *)a1 = off_10045D6C8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  sub_10007A790(a1 + 80);
  *(unsigned char *)(a1 + 928) = 0;
  *(void *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(unsigned char *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(void *)(a1 + 992) = off_10045D628;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(void *)(a1 + 1000) = a1 + 1008;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(void *)(a1 + 1024) = a1 + 1032;
  *(unsigned char *)(a1 + 1048) &= 0xFCu;
  *(void *)(a1 + 1056) = off_10045DE18;
  *(void *)(a1 + 1064) = off_10045DDB8;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(unsigned char *)(a1 + 1104) &= 0xF8u;
  *(void *)(a1 + 1112) = off_10045DAD8;
  *(void *)(a1 + 1120) = off_10045DA98;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(unsigned char *)(a1 + 1144) &= 0xFCu;
  *(void *)(a1 + 1152) = 0;
  *(unsigned char *)(a1 + 1160) = 0;
  *(void *)(a1 + 1168) = 0;
  *(unsigned char *)(a1 + 1176) = *(unsigned char *)(a1 + 1176) & 0xF8 | 4;
  *(void *)(a1 + 1184) = off_10045DDD8;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(unsigned char *)(a1 + 1256) &= 0xC0u;
  *(unsigned char *)(a1 + 1288) = 0;
  *(void *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(void *)(a1 + 1296) = off_10045DAB8;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(unsigned char *)(a1 + 1320) &= 0xFCu;
  *(void *)(a1 + 1328) = off_10045DAB8;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(unsigned char *)(a1 + 1352) &= 0xFCu;
  *(void *)(a1 + 1360) = off_10045DDB8;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(unsigned char *)(a1 + 1400) &= 0xF8u;
  *(void *)(a1 + 1424) = 0;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_WORD *)(a1 + 1432) &= 0xF800u;
  *(void *)(a1 + 1440) = off_10045DE38;
  *(void *)(a1 + 1448) = off_10045DDB8;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(unsigned char *)(a1 + 1488) &= 0xF8u;
  *(void *)(a1 + 1496) = off_10045DAD8;
  *(void *)(a1 + 1504) = off_10045DA98;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(unsigned char *)(a1 + 1528) &= 0xFCu;
  *(void *)(a1 + 1536) = 0;
  *(unsigned char *)(a1 + 1544) = 0;
  *(void *)(a1 + 1552) = 0;
  *(unsigned char *)(a1 + 1560) = *(unsigned char *)(a1 + 1560) & 0xF8 | 4;
  *(void *)(a1 + 1584) = 0;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(unsigned char *)(a1 + 1592) &= 0xF8u;
  *(_DWORD *)(a1 + 1616) = 0;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(void *)(a1 + 1624) = off_10045DAB8;
  *(void *)(a1 + 1640) = 0;
  *(void *)(a1 + 1632) = 0;
  *(unsigned char *)(a1 + 1648) &= 0xFCu;
  *(void *)(a1 + 1656) = off_10045D668;
  *(void *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(unsigned char *)(a1 + 1720) &= 0x80u;
  *(void *)(a1 + 1728) = off_10045D668;
  *(void *)(a1 + 1784) = 0;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(unsigned char *)(a1 + 1792) &= 0x80u;
  *(_OWORD *)(a1 + 1845) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_DWORD *)(a1 + 1912) &= 0xFE000000;
  return a1;
}

void sub_100076EE8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }
  sub_1003A3DE4(v1, (void **)(v1 + 32), (void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100076F14(uint64_t result, double a2)
{
  *(double *)(result + 24) = a2;
  return result;
}

uint64_t sub_100076F1C(uint64_t result, double a2)
{
  *(double *)(result + 32) = a2;
  return result;
}

void sub_100076F24(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL) {
      sub_1000A9108();
    }
    uint64_t v4 = a1[1];
    uint64_t v5 = 112 * a2;
    uint64_t v6 = (char *)operator new(112 * a2);
    uint64_t v7 = 0;
    int v8 = &v6[v4 - v2];
    *(void *)&long long v17 = v8;
    *((void *)&v17 + 1) = &v6[v5];
    while (&v4[v7] != v2)
    {
      v7 -= 112;
      sub_100077170(&v8[v7], &v4[v7]);
    }
    uint64_t v9 = &v8[v7];
    uint64_t v11 = *a1;
    uint64_t v10 = a1[1];
    *a1 = v9;
    *(_OWORD *)(a1 + 1) = v17;
    if (v10 != v11)
    {
      unint64_t v12 = v10 - 112;
      uint64_t v13 = v10 - 112;
      unint64_t v14 = v10 - 112;
      do
      {
        uint64_t v15 = *(void (***)(char *))v14;
        v14 -= 112;
        (*v15)(v13);
        v12 -= 112;
        BOOL v16 = v13 == v11;
        uint64_t v13 = v14;
      }
      while (!v16);
    }
    if (v11) {
      operator delete(v11);
    }
  }
}

std::string *sub_100077094(uint64_t a1, const std::string *a2)
{
  double result = std::string::operator=((std::string *)(a1 + 32), a2);
  *(_DWORD *)(a1 + 1912) |= 2u;
  return result;
}

double sub_1000770C8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 1736) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 1752) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 1768) = *(_OWORD *)(a2 + 40);
  double result = *(double *)(a2 + 56);
  *(double *)(a1 + 1784) = result;
  *(unsigned char *)(a1 + 1792) = *(unsigned char *)(a2 + 64);
  return result;
}

double sub_1000770F8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 1664) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 1680) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 1696) = *(_OWORD *)(a2 + 40);
  double result = *(double *)(a2 + 56);
  *(double *)(a1 + 1712) = result;
  *(unsigned char *)(a1 + 1720) = *(unsigned char *)(a2 + 64);
  return result;
}

uint64_t sub_100077124(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1616) = a2;
  *(_DWORD *)(result + 1912) |= 0x4000u;
  return result;
}

uint64_t sub_100077138(uint64_t a1, uint64_t a2)
{
  return sub_10007B5A8(a1 + 80, a2);
}

std::string *sub_100077140(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

double sub_10007714C(uint64_t a1, uint64_t a2)
{
  return sub_10007B734(a1 + 136, a2);
}

double sub_100077154(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_10007B778(a1 + 64, a2).n128_u64[0];
  return result;
}

uint64_t sub_10007715C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1856) = a2;
  *(_DWORD *)(result + 1912) |= 0x200000u;
  return result;
}

double sub_100077174(uint64_t a1, uint64_t a2)
{
  if (a1 + 8 != a2)
  {
    sub_10007C388((void *)(a1 + 16), *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_10007C388((void *)(a1 + 40), *(char **)(a2 + 32), *(char **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  }
  double result = *(double *)(a2 + 56);
  *(double *)(a1 + 64) = result;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 64);
  return result;
}

uint64_t sub_1000771DC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_10006338C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(uint64_t ****)(a2 + 16); i; uint64_t i = (uint64_t ***)*i)
    sub_100077320(a1, i + 2, i + 2);
  return a1;
}

void sub_1000772F8(_Unwind_Exception *a1)
{
  sub_1001F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_10007730C(_Unwind_Exception *a1)
{
  sub_1001F53E0(v1);
  _Unwind_Resume(a1);
}

const void ***sub_100077320(uint64_t a1, uint64_t ***a2, void *a3)
{
  unint64_t v7 = sub_100077F68((uint64_t)v32, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v11 = *(const void *****)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v14 = v12[1];
            if (v14 == (const void **)v8)
            {
              if (sub_1000706F4(v12 + 2, (unsigned __int8 ***)a2)) {
                return v12;
              }
            }
            else if (((unint64_t)v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v12 = (const void ***)*v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = (unint64_t)v12[1];
          if (v13 == v8)
          {
            if (sub_1000706F4(v12 + 2, (unsigned __int8 ***)a2)) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          unint64_t v12 = (const void ***)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  uint64_t v15 = operator new(0x7A0uLL);
  v32[0] = v15;
  v32[1] = a1 + 16;
  char v33 = 0;
  *uint64_t v15 = 0;
  v15[1] = v8;
  uint64_t v16 = a3[1];
  void v15[2] = *a3;
  v15[3] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000776C4(v15 + 4, a3 + 2);
  char v33 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v25) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_39:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v29 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        unint64_t v20 = (void *)v32[0];
        if (v19) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * v8);
        unint64_t v20 = (void *)v32[0];
        if (v19) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v8;
      uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v29 & v8));
      unint64_t v20 = (void *)v32[0];
      if (v19) {
        goto LABEL_28;
      }
    }
LABEL_52:
    void *v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v32[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v32[0])
    {
      unint64_t v30 = *(void *)(*(void *)v32[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v30 >= v9) {
          v30 %= v9;
        }
      }
      else
      {
        v30 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v30) = v32[0];
    }
    goto LABEL_63;
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  unint64_t v20 = (void *)v32[0];
  if (!v19) {
    goto LABEL_52;
  }
LABEL_28:
  void *v20 = *v19;
  *uint64_t v19 = v32[0];
LABEL_63:
  unint64_t v12 = (const void ***)v32[0];
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_100077690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F555C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000776A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4) {
    sub_1003A37A8(v4);
  }
  sub_1001F555C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000776C8(uint64_t a1)
{
  uint64_t v2 = sub_100078A58();
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Runtime configuration is null");
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, a1);
}

void sub_1000777B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v3);
  __cxa_begin_catch(a1);
  if (qword_10047BED8 == -1)
  {
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_10045A498);
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
LABEL_4:
    }
      sub_10015F2D0();
  }
  *uint64_t v2 = 0;
  __cxa_end_catch();
  JUMPOUT(0x10007772CLL);
}

void sub_1000778D4(char *__s@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    size_t v17 = v7;
    int64_t v18 = v10 | 0x8000000000000000;
    std::string __dst = (char *)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v18) = v6;
  p_dst = (void **)&__dst;
  if (v6) {
LABEL_8:
  }
    memcpy(p_dst, __s, v7);
  *((unsigned char *)p_dst + v7) = 0;
  std::locale::locale(&v14);
  if (v18 >= 0) {
    uint64_t v11 = (char *)&__dst;
  }
  else {
    uint64_t v11 = __dst;
  }
  size_t v12 = HIBYTE(v18);
  if (v18 < 0) {
    size_t v12 = v17;
  }
  sub_100077AF4(&__p, v11, &v14, &v11[v12]);
  std::locale::~locale(&v14);
  if (SHIBYTE(v18) < 0) {
    operator delete(__dst);
  }
  unint64_t v13 = sub_100077D38((void *)(a2 + 8), (uint64_t)&__p);
  if (v13)
  {
    sub_1000A8E40(a3, (uint64_t)(v13 + 5));
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_23:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  sub_100078678(__s, (uint64_t)&__dst);
  if (__dst == (int)__dst >> 31) {
    sub_1000783F8(__s, (void *)(a2 + 72), a3);
  }
  else {
    sub_1000A8CB8(a3, (uint64_t)&__dst);
  }
  sub_100077BC8((uint64_t)&__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_23;
  }
}

void sub_100077AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100077AF4(std::string *a1, char *a2, std::locale *this, char *a4)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a4)
  {
    size_t v6 = a2;
    do
    {
      char v8 = *v6;
      uint64_t v9 = std::locale::use_facet(this, &std::ctype<char>::id);
      std::string::value_type v10 = ((uint64_t (*)(const std::locale::facet *, void))v9->__vftable[1].__on_zero_shared)(v9, v8);
      std::string::push_back(a1, v10);
      ++v6;
    }
    while (v6 != a4);
  }
}

void sub_100077B98(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_100077BB4(_Unwind_Exception *a1)
{
}

void sub_100077BC8(uint64_t a1)
{
  switch(*(_DWORD *)a1 ^ (*(int *)a1 >> 31))
  {
    case 3:
      if (*(char *)(a1 + 31) < 0)
      {
        uint64_t v1 = *(void **)(a1 + 8);
        operator delete(v1);
      }
      return;
    case 5:
      uint64_t v2 = *(void ***)(a1 + 8);
      if (!v2) {
        return;
      }
      unint64_t v3 = (char *)*v2;
      if (*v2)
      {
        uint64_t v4 = (char *)v2[1];
        int8x8_t v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v4 -= 32;
            sub_100077BC8(v4);
          }
          while (v4 != v3);
          int8x8_t v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
      break;
    case 6:
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        return;
      }
      size_t v7 = *(void ***)(v6 + 16);
      if (v7)
      {
        do
        {
          uint64_t v9 = (void **)*v7;
          sub_100077BC8(v7 + 5);
          if (*((char *)v7 + 39) < 0) {
            operator delete(v7[2]);
          }
          operator delete(v7);
          size_t v7 = v9;
        }
        while (v9);
      }
      char v8 = *(void **)v6;
      *(void *)uint64_t v6 = 0;
      if (v8) {
        operator delete(v8);
      }
      break;
    default:
      return;
  }
  operator delete();
}

uint64_t *sub_100077D38(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_100077FAC((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  size_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          double result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        double result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

unint64_t sub_100077F68(uint64_t a1, uint64_t ***a2)
{
  unint64_t v2 = *((unsigned __int8 *)*a2 + 23);
  unint64_t v3 = (*a2)[1];
  if ((v2 & 0x80u) == 0) {
    unint64_t v4 = (uint64_t *)*a2;
  }
  else {
    unint64_t v4 = **a2;
  }
  if ((v2 & 0x80u) == 0) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = (unint64_t)v3;
  }
  return sub_100077FAC((uint64_t)&v7, v4, v5);
}

unint64_t sub_100077FAC(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v30 = v26 + v28;
      unint64_t v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      unint64_t v33 = v27 + a3 + v26 + v23;
      uint64_t v34 = v33 + v24;
      unint64_t v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      uint64_t v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v37 = v36 + v25 + v28;
      uint64_t v38 = __ROR8__(v37, 44);
      uint64_t v39 = v37 + v29;
      uint64_t v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      uint64_t v42 = *a2;
      std::string::size_type v41 = a2 + 4;
      unint64_t v43 = v42 - 0x4B6D499041670D8DLL * v24;
      uint64_t v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v45 = *(v41 - 3);
        uint64_t v46 = v43 + v34 + v30 + v45;
        uint64_t v47 = v41[2];
        uint64_t v48 = v41[3];
        uint64_t v49 = v41[1];
        unint64_t v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        uint64_t v50 = v32 + v39;
        uint64_t v51 = *(v41 - 2);
        uint64_t v52 = *(v41 - 1);
        uint64_t v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        uint64_t v54 = v53 + v39 + v52;
        uint64_t v55 = v53 + v45 + v51;
        uint64_t v34 = v55 + v52;
        uint64_t v56 = __ROR8__(v55, 44) + v53;
        unint64_t v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        unint64_t v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        unint64_t v35 = v56 + __ROR8__(v54 + v57, 21);
        unint64_t v58 = v43 + v40 + *v41;
        uint64_t v39 = v58 + v49 + v47 + v48;
        uint64_t v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        unint64_t v32 = v57;
        v44 += 64;
      }
      while (v44);
      unint64_t v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      unint64_t v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      unint64_t v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    uint64_t v18 = a2[1];
    unint64_t v19 = 0xB492B66FBE98F273 * *a2;
    uint64_t v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    unint64_t v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        unint64_t v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      uint64_t v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    uint64_t v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void sub_1000783F8(char *__s@<X1>, void *a2@<X0>, uint64_t a3@<X8>)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    size_t v15 = v7;
    int64_t v16 = v10 | 0x8000000000000000;
    std::string __dst = (char *)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = v6;
  p_dst = (void **)&__dst;
  if (v6) {
LABEL_8:
  }
    memcpy(p_dst, __s, v7);
  *((unsigned char *)p_dst + v7) = 0;
  std::locale::locale(&v13);
  if (v16 >= 0) {
    uint64_t v11 = (char *)&__dst;
  }
  else {
    uint64_t v11 = __dst;
  }
  size_t v12 = HIBYTE(v16);
  if (v16 < 0) {
    size_t v12 = v15;
  }
  sub_100077AF4(&__p, v11, &v13, &v11[v12]);
  std::locale::~locale(&v13);
  if (SHIBYTE(v16) < 0) {
    operator delete(__dst);
  }
  sub_100078574(a2, (uint64_t *)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10007853C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100078574(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = (uint64_t *)*a2;
  }
  CFStringRef v8 = +[NSString stringWithFormat:@"%@%s", a1[3], v7];
  uint64_t v9 = (__CFString *)v8;
  CFStringRef v10 = (const __CFString *)a1[1];
  CFStringRef v11 = (const __CFString *)a1[2];
  if (v11 == kCFPreferencesCurrentUser) {
    size_t v12 = (void *)CFPreferencesCopyAppValue(v8, v10);
  }
  else {
    size_t v12 = (void *)CFPreferencesCopyValue(v8, v10, v11, kCFPreferencesCurrentHost);
  }
  std::locale v13 = v12;
  sub_100078A64(a3, v12);
  if (v13) {
    CFRelease(v13);
  }
}

void sub_100078660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100362704((const void **)va);

  _Unwind_Resume(a1);
}

void sub_100078678(char *__s@<X1>, uint64_t a2@<X8>)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    size_t v13 = v5;
    int64_t v14 = v8 | 0x8000000000000000;
    std::string __dst = (char *)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v14) = v4;
  p_dst = (void **)&__dst;
  if (v4) {
LABEL_8:
  }
    memcpy(p_dst, __s, v5);
  *((unsigned char *)p_dst + v5) = 0;
  std::locale::locale(&v11);
  if (v14 >= 0) {
    uint64_t v9 = (char *)&__dst;
  }
  else {
    uint64_t v9 = __dst;
  }
  size_t v10 = HIBYTE(v14);
  if (v14 < 0) {
    size_t v10 = v13;
  }
  sub_100077AF4(&__p, v9, &v11, &v9[v10]);
  std::locale::~locale(&v11);
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst);
  }
  sub_1000787F4((uint64_t)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1000787BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000787F4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::locale::locale((std::locale *)&v17);
  int v4 = *(char *)(a1 + 23);
  BOOL v5 = v4 < 0;
  if (v4 >= 0) {
    size_t v6 = (char *)a1;
  }
  else {
    size_t v6 = *(char **)a1;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  if (v5) {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  sub_100078984(&__p, v6, (std::locale *)&v17, &v6[v7]);
  std::locale::~locale((std::locale *)&v17);
  char v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  size_t v10 = getenv((const char *)p_p);
  if (!v10)
  {
    *(_DWORD *)a2 = 0;
    if ((v8 & 0x80) == 0) {
      return;
    }
LABEL_22:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  std::locale v11 = v10;
  size_t v12 = strlen(v10);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    int64_t v14 = (long long *)operator new(v15 + 1);
    *((void *)&v17 + 1) = v13;
    unint64_t v18 = v16 | 0x8000000000000000;
    *(void *)&long long v17 = v14;
    goto LABEL_19;
  }
  HIBYTE(v18) = v12;
  int64_t v14 = &v17;
  if (v12) {
LABEL_19:
  }
    memmove(v14, v11, v13);
  *((unsigned char *)v14 + v13) = 0;
  *(_OWORD *)(a2 + 8) = v17;
  *(void *)(a2 + 24) = v18;
  *(_DWORD *)a2 = 3;
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_22;
  }
}

void sub_100078954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100078970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_100078984(std::string *a1, char *a2, std::locale *this, char *a4)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a4)
  {
    size_t v6 = a2;
    do
    {
      char v8 = *v6;
      uint64_t v9 = std::locale::use_facet(this, &std::ctype<char>::id);
      std::string::value_type v10 = ((uint64_t (*)(const std::locale::facet *, void))v9->__vftable[1].~facet)(v9, v8);
      std::string::push_back(a1, v10);
      ++v6;
    }
    while (v6 != a4);
  }
}

void sub_100078A28(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_100078A44(_Unwind_Exception *a1)
{
}

uint64_t sub_100078A58()
{
  return qword_10047DBE8;
}

void sub_100078A64(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v3 ps_STLString];
      *(std::string *)(a1 + 8) = v52;
      *(_DWORD *)a1 = 3;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v8 = v3;
          v40.__vftable = 0;
          v40.__imp_.__imp_ = 0;
          *(void *)&long long v41 = 0;
          sub_100362A04((char **)&v40, (unint64_t)[v8 count]);
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          id v9 = v8;
          id v10 = [v9 countByEnumeratingWithState:&v43 objects:v51 count:16];
          if (v10)
          {
            uint64_t v11 = *(void *)v44;
            do
            {
              for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
              {
                while (1)
                {
                  if (*(void *)v44 != v11) {
                    objc_enumerationMutation(v9);
                  }
                  sub_100078A64(&v52, *(void *)(*((void *)&v43 + 1) + 8 * i));
                  imp = (char *)v40.__imp_.__imp_;
                  if (v40.__imp_.__imp_ < (const char *)v41) {
                    break;
                  }
                  v40.__imp_.__imp_ = (const char *)sub_100362BD4(&v40, (uint64_t)&v52);
                  sub_100077BC8((uint64_t)&v52);
                  uint64_t i = (char *)i + 1;
                  if (v10 == i) {
                    goto LABEL_25;
                  }
                }
                int64_t v14 = (char *)(v40.__imp_.__imp_ + 8);
                switch(LODWORD(v52.__r_.__value_.__l.__data_) ^ (SLODWORD(v52.__r_.__value_.__l.__data_) >> 31))
                {
                  case 1:
                    *(_DWORD *)int64_t v14 = v52.__r_.__value_.__r.__words[1];
                    break;
                  case 2:
                    *(void *)int64_t v14 = v52.__r_.__value_.__l.__size_;
                    break;
                  case 3:
                    long long v15 = *(_OWORD *)&v52.__r_.__value_.__r.__words[1];
                    *((void *)v40.__imp_.__imp_ + 3) = v53;
                    *(_OWORD *)int64_t v14 = v15;
                    *(void *)&long long v53 = 0;
                    *(_OWORD *)&v52.__r_.__value_.__r.__words[1] = 0uLL;
                    break;
                  case 4:
                    *(void *)int64_t v14 = v52.__r_.__value_.__l.__size_;
                    break;
                  case 5:
                    operator new();
                  case 6:
                    operator new();
                  default:
                    break;
                }
                *(_DWORD *)imp = LODWORD(v52.__r_.__value_.__l.__data_) ^ (SLODWORD(v52.__r_.__value_.__l.__data_) >> 31);
                v40.__imp_.__imp_ = imp + 32;
                sub_100077BC8((uint64_t)&v52);
              }
LABEL_25:
              id v10 = [v9 countByEnumeratingWithState:&v43 objects:v51 count:16];
            }
            while (v10);
          }

          operator new();
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          unint64_t v31 = (objc_class *)objc_opt_class();
          NSStringFromClass(v31);
          unint64_t v32 = +[NSString stringWithFormat:@"Unsupported type %@ with value %@", objc_claimAutoreleasedReturnValue(), v3];
          __cxa_allocate_exception(0x40uLL);
          if (v32) {
            [v32 ps_STLString];
          }
          else {
            memset(&v52, 0, sizeof(v52));
          }
          std::runtime_error::runtime_error(&v40, &v52);
          v40.__vftable = (std::runtime_error_vtbl *)&off_100453860;
          sub_10018E868((uint64_t)v33);
          sub_1000D1698(&v40, (uint64_t)"RuntimeConfiguration::Value decode(NSObject *__strong)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/darwin_preferences_runtime_configuration.mm", 107, (uint64_t)v33);
        }
        id v16 = v3;
        std::runtime_error v40 = (std::runtime_error)0;
        long long v41 = 0u;
        float v42 = 1.0;
        unint64_t prime = vcvtps_u32_f32((float)(unint64_t)[v16 count] / 1.0);
        if (prime == 1)
        {
          unint64_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          unint64_t prime = std::__next_prime(prime);
        }
        if ((const char *)prime > v40.__imp_.__imp_) {
          goto LABEL_37;
        }
        if ((const char *)prime < v40.__imp_.__imp_)
        {
          unint64_t v18 = vcvtps_u32_f32((float)*((unint64_t *)&v41 + 1) / v42);
          if (v40.__imp_.__imp_ < (const char *)3
            || (uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v40.__imp_.__imp_), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
          {
            unint64_t v18 = std::__next_prime(v18);
          }
          else
          {
            uint64_t v20 = 1 << -(char)__clz(v18 - 1);
            if (v18 >= 2) {
              unint64_t v18 = v20;
            }
          }
          if (prime <= v18) {
            unint64_t prime = v18;
          }
          if ((const char *)prime < v40.__imp_.__imp_) {
LABEL_37:
          }
            sub_10006338C((uint64_t)&v40, prime);
        }
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        id v21 = v16;
        id v22 = [v21 countByEnumeratingWithState:&v36 objects:v50 count:16];
        if (!v22)
        {
LABEL_79:

          operator new();
        }
        uint64_t v23 = *(void *)v37;
LABEL_50:
        uint64_t v24 = 0;
        while (1)
        {
          if (*(void *)v37 != v23) {
            objc_enumerationMutation(v21);
          }
          uint64_t v25 = *(void **)(*((void *)&v36 + 1) + 8 * v24);
          if (v25)
          {
            objc_opt_class();
            char isKindOfClass = objc_opt_isKindOfClass();
          }
          else
          {
            char isKindOfClass = 0;
          }
          uint64_t v27 = (objc_class *)objc_opt_class();
          uint64_t v28 = NSStringFromClass(v27);
          uint64_t v29 = v28;
          if (v28)
          {
            [v28 ps_STLStringOnNil:@"nil"];
            if ((isKindOfClass & 1) == 0) {
              goto LABEL_68;
            }
          }
          else
          {
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v35 = 0;
            if ((isKindOfClass & 1) == 0)
            {
LABEL_68:
              sub_1000AE4B0(v48, "");
              sub_1001F110C("Unsupported key type ", &v52);
              if (SHIBYTE(v35) < 0)
              {
                sub_1000559FC(&v53, __p[0], (unint64_t)__p[1]);
              }
              else
              {
                long long v53 = *(_OWORD *)__p;
                uint64_t v54 = v35;
              }
              sub_10016A2C4((uint64_t)v48, (uint64_t)&v52, 2);
              if (SHIBYTE(v54) < 0)
              {
                operator delete((void *)v53);
                if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_76;
                }
LABEL_73:
                if (SHIBYTE(v49) < 0) {
LABEL_77:
                }
                  operator delete(v48[0]);
              }
              else
              {
                if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_73;
                }
LABEL_76:
                operator delete(v52.__r_.__value_.__l.__data_);
                if (SHIBYTE(v49) < 0) {
                  goto LABEL_77;
                }
              }
              sub_1000D11E0((uint64_t)&v47);
            }
          }
          if (SHIBYTE(v35) < 0) {
            operator delete(__p[0]);
          }

          if (v25)
          {
            [v25 ps_STLString];
          }
          else
          {
            v48[0] = 0;
            v48[1] = 0;
            uint64_t v49 = 0;
          }
          unint64_t v30 = [v21 objectForKeyedSubscript:v25];
          sub_100078A64(&v52, v30);
          sub_100362D58((uint64_t)&v40, (uint64_t)v48, (uint64_t)v48, (uint64_t)&v52);
          sub_100077BC8((uint64_t)&v52);

          if (SHIBYTE(v49) < 0) {
            operator delete(v48[0]);
          }
          if (v22 == (id)++v24)
          {
            id v22 = [v21 countByEnumeratingWithState:&v36 objects:v50 count:16];
            if (!v22) {
              goto LABEL_79;
            }
            goto LABEL_50;
          }
        }
      }
      id v4 = v3;
      int v5 = *(unsigned __int8 *)[v4 objCType];
      if ((v5 & 0xFFFFFFFD) == 0x64)
      {
        [v4 doubleValue];
        *(void *)(a1 + 8) = v6;
        int v7 = 4;
      }
      else if ((v5 & 0xFFFFFFDF) == 0x51)
      {
        *(void *)(a1 + 8) = [v4 longLongValue];
        int v7 = 2;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = [v4 intValue];
        int v7 = 1;
      }
      *(_DWORD *)a1 = v7;
    }
  }
  else
  {
    *(_DWORD *)a1 = 0;
  }
}

void sub_100079348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__pa, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,std::runtime_error a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::string *a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
}

void sub_1000796E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v61 - 192));
  if (a55 < 0) {
    operator delete(a50);
  }
  __cxa_end_catch();
  JUMPOUT(0x1000797CCLL);
}

void sub_10007979C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000A6954(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000797C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_1000A8B58(&a33);
  JUMPOUT(0x1000797F0);
}

uint64_t sub_1000797F8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10045D6A8;
  *(void *)(a1 + 8) = off_10045D688;
  *(_OWORD *)(a1 + 16) = 0u;
  id v4 = (void *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) &= 0xF8u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) &= 0xFCu;
  if (a1 == a2)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  }
  else
  {
    sub_10007C388(v4, *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
    sub_10007C388((void *)(a1 + 40), *(char **)(a2 + 40), *(char **)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    sub_10007A3F4((char **)(a1 + 80), *(void *)(a2 + 80), *(void *)(a2 + 88), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
  }
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

void sub_100079918(_Unwind_Exception *a1)
{
  sub_100199ED8(v2);
  sub_100075C7C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100079934(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  id v4 = (std::string *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v6 = (std::string *)(a1 + 56);
  *(void *)a1 = off_10045D6C8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  int v7 = (std::string *)(a1 + 32);
  uint64_t v8 = a1 + 80;
  sub_10007A790(a1 + 80);
  *(void *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(void *)(a1 + 992) = off_10045D628;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(void *)(a1 + 1000) = a1 + 1008;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(void *)(a1 + 1024) = a1 + 1032;
  *(unsigned char *)(a1 + 1048) &= 0xFCu;
  *(void *)(a1 + 1056) = off_10045DE18;
  *(void *)(a1 + 1064) = off_10045DDB8;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(unsigned char *)(a1 + 1104) &= 0xF8u;
  *(void *)(a1 + 1112) = off_10045DAD8;
  *(void *)(a1 + 1120) = off_10045DA98;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(unsigned char *)(a1 + 1144) &= 0xFCu;
  *(void *)(a1 + 1152) = 0;
  *(unsigned char *)(a1 + 1160) = 0;
  *(void *)(a1 + 1168) = 0;
  *(unsigned char *)(a1 + 1176) = *(unsigned char *)(a1 + 1176) & 0xF8 | 4;
  *(void *)(a1 + 1184) = off_10045DDD8;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(unsigned char *)(a1 + 1256) &= 0xC0u;
  *(void *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(unsigned char *)(a1 + 1288) = 0;
  *(void *)(a1 + 1296) = off_10045DAB8;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(unsigned char *)(a1 + 1320) &= 0xFCu;
  *(void *)(a1 + 1328) = off_10045DAB8;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(unsigned char *)(a1 + 1352) &= 0xFCu;
  *(void *)(a1 + 1360) = off_10045DDB8;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(unsigned char *)(a1 + 1400) &= 0xF8u;
  *(void *)(a1 + 1424) = 0;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_WORD *)(a1 + 1432) &= 0xF800u;
  *(void *)(a1 + 1440) = off_10045DE38;
  *(void *)(a1 + 1448) = off_10045DDB8;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(unsigned char *)(a1 + 1488) &= 0xF8u;
  *(void *)(a1 + 1496) = off_10045DAD8;
  *(void *)(a1 + 1504) = off_10045DA98;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(unsigned char *)(a1 + 1528) &= 0xFCu;
  *(void *)(a1 + 1536) = 0;
  *(unsigned char *)(a1 + 1544) = 0;
  *(void *)(a1 + 1552) = 0;
  *(unsigned char *)(a1 + 1560) = *(unsigned char *)(a1 + 1560) & 0xF8 | 4;
  *(void *)(a1 + 1584) = 0;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(unsigned char *)(a1 + 1592) &= 0xF8u;
  *(void *)(a1 + 1624) = off_10045DAB8;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(unsigned char *)(a1 + 1648) &= 0xFCu;
  *(void *)(a1 + 1656) = off_10045D668;
  *(void *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(unsigned char *)(a1 + 1720) &= 0x80u;
  *(void *)(a1 + 1728) = off_10045D668;
  *(void *)(a1 + 1784) = 0;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(unsigned char *)(a1 + 1792) &= 0x80u;
  *(void *)(a1 + 1816) = 0;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(void *)(a1 + 1848) = 0;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_DWORD *)(a1 + 1912) &= 0xFE000000;
  std::string::operator=(v4, (const std::string *)(a2 + 8));
  std::string::operator=(v7, (const std::string *)(a2 + 32));
  std::string::operator=(v6, (const std::string *)(a2 + 56));
  sub_10007B004(v8, a2 + 80);
  std::string::operator=((std::string *)(a1 + 904), (const std::string *)(a2 + 904));
  *(unsigned char *)(a1 + 928) = *(unsigned char *)(a2 + 928);
  std::string::operator=((std::string *)(a1 + 936), (const std::string *)(a2 + 936));
  std::string::operator=((std::string *)(a1 + 960), (const std::string *)(a2 + 960));
  *(unsigned char *)(a1 + 984) = *(unsigned char *)(a2 + 984);
  if (a1 != a2)
  {
    sub_10007A09C((uint64_t *)(a1 + 1000), *(void **)(a2 + 1000), (void *)(a2 + 1008));
    sub_10007A09C((uint64_t *)(a1 + 1024), *(void **)(a2 + 1024), (void *)(a2 + 1032));
  }
  *(unsigned char *)(a1 + 1048) = *(unsigned char *)(a2 + 1048);
  sub_10007B4C8(a1 + 1056, a2 + 1056);
  sub_10007C530(a1 + 1440, a2 + 1440);
  *(void *)(a1 + 1600) = *(void *)(a2 + 1600);
  *(void *)(a1 + 1608) = *(void *)(a2 + 1608);
  *(_DWORD *)(a1 + 1616) = *(_DWORD *)(a2 + 1616);
  sub_10007B704(a1 + 1624, a2 + 1624);
  *(_OWORD *)(a1 + 1664) = *(_OWORD *)(a2 + 1664);
  *(_OWORD *)(a1 + 1680) = *(_OWORD *)(a2 + 1680);
  *(_OWORD *)(a1 + 1696) = *(_OWORD *)(a2 + 1696);
  *(void *)(a1 + 1712) = *(void *)(a2 + 1712);
  *(unsigned char *)(a1 + 1720) = *(unsigned char *)(a2 + 1720);
  *(void *)(a1 + 1736) = *(void *)(a2 + 1736);
  *(_OWORD *)(a1 + 1744) = *(_OWORD *)(a2 + 1744);
  *(_OWORD *)(a1 + 1760) = *(_OWORD *)(a2 + 1760);
  *(_OWORD *)(a1 + 1776) = *(_OWORD *)(a2 + 1776);
  *(unsigned char *)(a1 + 1792) = *(unsigned char *)(a2 + 1792);
  if (a1 == a2)
  {
    *(void *)(a1 + 1824) = *(void *)(a2 + 1824);
  }
  else
  {
    sub_10007A3F4((char **)(a1 + 1800), *(void *)(a2 + 1800), *(void *)(a2 + 1808), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 1808) - *(void *)(a2 + 1800)) >> 3));
    *(void *)(a1 + 1824) = *(void *)(a2 + 1824);
    sub_10007AD34((uint64_t *)(a1 + 1832), *(void *)(a2 + 1832), *(void *)(a2 + 1840), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 1840) - *(void *)(a2 + 1832)) >> 4));
  }
  *(_DWORD *)(a1 + 1856) = *(_DWORD *)(a2 + 1856);
  *(unsigned char *)(a1 + 1860) = *(unsigned char *)(a2 + 1860);
  std::string::operator=((std::string *)(a1 + 1864), (const std::string *)(a2 + 1864));
  if (a1 != a2) {
    sub_10007AA14((uint64_t *)(a1 + 1888), *(void *)(a2 + 1888), *(void *)(a2 + 1896), 0xDAB7EC1DD3431B57 * ((uint64_t)(*(void *)(a2 + 1896) - *(void *)(a2 + 1888)) >> 3));
  }
  *(_DWORD *)(a1 + 1912) = *(_DWORD *)(a2 + 1912);
  return a1;
}

void sub_100079F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t a16)
{
  if (v16[79] < 0)
  {
    operator delete(*a14);
    if ((v16[55] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v16[31] & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((v16[55] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*a15);
  if ((v16[31] & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*a9);
  _Unwind_Resume(exception_object);
}

void sub_10007A09C(uint64_t *a1, void *a2, void *a3)
{
  id v4 = a2;
  uint64_t v5 = (uint64_t)a1;
  if (a1[2])
  {
    uint64_t v6 = *a1;
    uint64_t v8 = (uint64_t **)(a1 + 1);
    uint64_t v7 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(void *)(v7 + 16) = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (*(void *)(v6 + 8)) {
      uint64_t v9 = *(void *)(v6 + 8);
    }
    else {
      uint64_t v9 = v6;
    }
    uint64_t v40 = (uint64_t)a1;
    uint64_t v42 = v9;
    if (!v9)
    {
      uint64_t v35 = 0;
      goto LABEL_65;
    }
    id v10 = *(void **)(v9 + 16);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10 == v9)
      {
        void *v10 = 0;
        while (1)
        {
          long long v39 = (void *)v10[1];
          if (!v39) {
            break;
          }
          do
          {
            id v10 = v39;
            long long v39 = (void *)*v39;
          }
          while (v39);
        }
      }
      else
      {
        for (v10[1] = 0; v11; uint64_t v11 = (void *)v10[1])
        {
          do
          {
            id v10 = v11;
            uint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
      }
    }
    uint64_t v41 = (uint64_t)v10;
    if (a2 == a3)
    {
      uint64_t v34 = a1;
      sub_100075BE0((uint64_t)a1, v9);
      if (!v10) {
        goto LABEL_66;
      }
      goto LABEL_62;
    }
    size_t v12 = a2;
    while (1)
    {
      std::string::operator=((std::string *)(v9 + 32), (const std::string *)(v12 + 4));
      std::string::operator=((std::string *)(v9 + 56), (const std::string *)(v12 + 7));
      size_t v13 = (uint64_t *)v42;
      int64_t v14 = *v8;
      long long v15 = (uint64_t **)(v5 + 8);
      id v16 = (uint64_t **)(v5 + 8);
      if (!*v8) {
        break;
      }
      int v17 = *(char *)(v42 + 55);
      if (v17 >= 0) {
        size_t v18 = *(unsigned __int8 *)(v42 + 55);
      }
      else {
        size_t v18 = *(void *)(v42 + 40);
      }
      if (v17 >= 0) {
        uint8x8_t v19 = (const void *)(v42 + 32);
      }
      else {
        uint8x8_t v19 = *(const void **)(v42 + 32);
      }
      do
      {
        while (1)
        {
          long long v15 = (uint64_t **)v14;
          id v22 = (const void *)v14[4];
          uint64_t v20 = v14 + 4;
          id v21 = v22;
          int v23 = *((char *)v20 + 23);
          if (v23 >= 0) {
            size_t v24 = *((unsigned __int8 *)v20 + 23);
          }
          else {
            size_t v24 = v20[1];
          }
          if (v23 >= 0) {
            uint64_t v25 = v20;
          }
          else {
            uint64_t v25 = v21;
          }
          if (v24 >= v18) {
            size_t v26 = v18;
          }
          else {
            size_t v26 = v24;
          }
          int v27 = memcmp(v19, v25, v26);
          BOOL v28 = v18 < v24;
          if (v27) {
            BOOL v28 = v27 < 0;
          }
          if (!v28) {
            break;
          }
          int64_t v14 = *v15;
          id v16 = v15;
          if (!*v15) {
            goto LABEL_34;
          }
        }
        int64_t v14 = v15[1];
      }
      while (v14);
      id v16 = v15 + 1;
      *(void *)uint64_t v42 = 0;
      *(void *)(v42 + 8) = 0;
      *(void *)(v42 + 16) = v15;
      v15[1] = (uint64_t *)v42;
      uint64_t v29 = **(void **)v5;
      if (v29) {
        goto LABEL_35;
      }
LABEL_36:
      sub_1000619B8(*(uint64_t **)(v5 + 8), v13);
      ++*(void *)(v5 + 16);
      uint64_t v9 = v41;
      uint64_t v42 = v41;
      if (v41)
      {
        id v10 = *(void **)(v41 + 16);
        if (v10)
        {
          unint64_t v30 = (void *)*v10;
          if (*v10 == v41)
          {
            void *v10 = 0;
            while (1)
            {
              unint64_t v33 = (void *)v10[1];
              if (!v33) {
                break;
              }
              do
              {
                id v10 = v33;
                unint64_t v33 = (void *)*v33;
              }
              while (v33);
            }
          }
          else
          {
            for (v10[1] = 0; v30; unint64_t v30 = (void *)v10[1])
            {
              do
              {
                id v10 = v30;
                unint64_t v30 = (void *)*v30;
              }
              while (v30);
            }
          }
        }
        uint64_t v41 = (uint64_t)v10;
        unint64_t v31 = (void *)v12[1];
        if (v31)
        {
          do
          {
LABEL_45:
            id v4 = v31;
            unint64_t v31 = (void *)*v31;
          }
          while (v31);
          goto LABEL_49;
        }
      }
      else
      {
        id v10 = 0;
        unint64_t v31 = (void *)v12[1];
        if (v31) {
          goto LABEL_45;
        }
      }
      do
      {
        id v4 = (void *)v12[2];
        BOOL v32 = *v4 == (void)v12;
        size_t v12 = v4;
      }
      while (!v32);
LABEL_49:
      if (v9)
      {
        size_t v12 = v4;
        if (v4 != a3) {
          continue;
        }
      }
      uint64_t v34 = (uint64_t *)v40;
      sub_100075BE0(v40, v9);
      if (!v10) {
        goto LABEL_66;
      }
LABEL_62:
      for (uint64_t i = (void *)v10[2]; i; uint64_t i = (void *)i[2])
        id v10 = i;
      a1 = v34;
      uint64_t v35 = (uint64_t)v10;
LABEL_65:
      sub_100075BE0((uint64_t)a1, v35);
      goto LABEL_66;
    }
LABEL_34:
    *(void *)uint64_t v42 = 0;
    *(void *)(v42 + 8) = 0;
    *(void *)(v42 + 16) = v15;
    char *v16 = (uint64_t *)v42;
    uint64_t v29 = **(void **)v5;
    if (!v29) {
      goto LABEL_36;
    }
LABEL_35:
    *(void *)uint64_t v5 = v29;
    size_t v13 = *v16;
    goto LABEL_36;
  }
LABEL_66:
  if (v4 != a3)
  {
    do
    {
      sub_100169170(v5, (uint64_t)(v4 + 4));
      long long v37 = (void *)v4[1];
      if (v37)
      {
        do
        {
          long long v38 = v37;
          long long v37 = (void *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          long long v38 = (void *)v4[2];
          BOOL v32 = *v38 == (void)v4;
          id v4 = v38;
        }
        while (!v32);
      }
      id v4 = v38;
    }
    while (v38 != a3);
  }
}

void sub_10007A3E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100169118((uint64_t *)va);
  _Unwind_Resume(a1);
}

char **sub_10007A3F4(char **result, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v7 = (uint64_t)result;
  uint64_t v8 = (uint64_t)result[2];
  uint64_t v9 = *result;
  if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)*result) >> 3) >= __sz)
  {
    int v23 = result[1];
    if (0x8E38E38E38E38E39 * ((v23 - v9) >> 3) < __sz)
    {
      uint64_t v24 = a2 + 8 * ((v23 - v9) >> 3);
      if (v23 == v9)
      {
        uint64_t v25 = *result;
        if (v24 == a3)
        {
LABEL_37:
          *(void *)(v7 + 8) = v25;
          return result;
        }
      }
      else
      {
        do
        {
          if ((char *)v6 != v9)
          {
            sub_10007C388((void *)v9 + 1, *(char **)(v6 + 8), *(char **)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
            unint64_t result = (char **)sub_10007C388((void *)v9 + 4, *(char **)(v6 + 32), *(char **)(v6 + 40), (uint64_t)(*(void *)(v6 + 40) - *(void *)(v6 + 32)) >> 3);
          }
          *((void *)v9 + 7) = *(void *)(v6 + 56);
          v9[64] = *(unsigned char *)(v6 + 64);
          v6 += 72;
          v9 += 72;
        }
        while (v6 != v24);
        uint64_t v9 = *(char **)(v7 + 8);
        uint64_t v25 = v9;
        if (v24 == a3) {
          goto LABEL_37;
        }
      }
      uint64_t v27 = 0;
      do
      {
        unint64_t result = (char **)sub_10007C29C((uint64_t)&v9[v27], v24 + v27);
        v27 += 72;
      }
      while (v24 + v27 != a3);
      uint64_t v25 = &v9[v27];
      goto LABEL_37;
    }
    if (a2 == a3)
    {
      size_t v26 = *result;
      if (v23 == v9)
      {
LABEL_44:
        *(void *)(v7 + 8) = v26;
        return result;
      }
    }
    else
    {
      size_t v26 = *result;
      do
      {
        if ((char *)v6 != v9)
        {
          sub_10007C388((void *)v9 + 1, *(char **)(v6 + 8), *(char **)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
          unint64_t result = (char **)sub_10007C388((void *)v9 + 4, *(char **)(v6 + 32), *(char **)(v6 + 40), (uint64_t)(*(void *)(v6 + 40) - *(void *)(v6 + 32)) >> 3);
        }
        *((void *)v9 + 7) = *(void *)(v6 + 56);
        v9[64] = *(unsigned char *)(v6 + 64);
        v26 += 72;
        v6 += 72;
        v9 += 72;
      }
      while (v6 != a3);
      int v23 = *(char **)(v7 + 8);
      if (v23 == v26) {
        goto LABEL_44;
      }
    }
    BOOL v28 = v23 - 72;
    uint64_t v29 = v23 - 72;
    unint64_t v30 = v23 - 72;
    do
    {
      unint64_t v31 = *(uint64_t (***)(char *))v30;
      v30 -= 72;
      unint64_t result = (char **)(*v31)(v29);
      v28 -= 72;
      BOOL v16 = v29 == v26;
      uint64_t v29 = v30;
    }
    while (!v16);
    goto LABEL_44;
  }
  if (v9)
  {
    id v10 = result[1];
    uint64_t v11 = *result;
    if (v10 != v9)
    {
      size_t v12 = v10 - 72;
      size_t v13 = v10 - 72;
      int64_t v14 = v10 - 72;
      do
      {
        long long v15 = *(void (***)(char *))v14;
        v14 -= 72;
        (*v15)(v13);
        v12 -= 72;
        BOOL v16 = v13 == v9;
        size_t v13 = v14;
      }
      while (!v16);
      uint64_t v11 = *(char **)v7;
    }
    *(void *)(v7 + 8) = v9;
    operator delete(v11);
    uint64_t v8 = 0;
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
  }
  if (__sz > 0x38E38E38E38E38ELL) {
    goto LABEL_45;
  }
  unint64_t v17 = 0x8E38E38E38E38E39 * (v8 >> 3);
  uint64_t v18 = 2 * v17;
  if (2 * v17 <= __sz) {
    uint64_t v18 = __sz;
  }
  unint64_t v19 = v17 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v18;
  if (v19 > 0x38E38E38E38E38ELL) {
LABEL_45:
  }
    sub_1000A9108();
  uint64_t v20 = 9 * v19;
  unint64_t result = (char **)operator new(72 * v19);
  id v21 = result;
  *(void *)uint64_t v7 = result;
  *(void *)(v7 + 8) = result;
  *(void *)(v7 + 16) = &result[v20];
  if (v6 != a3)
  {
    unint64_t v22 = 0;
    do
    {
      unint64_t result = (char **)sub_10007C29C((uint64_t)&v21[v22 / 8], v6 + v22);
      v22 += 72;
    }
    while (v6 + v22 != a3);
    id v21 = (char **)((char *)v21 + v22);
  }
  *(void *)(v7 + 8) = v21;
  return result;
}

void sub_10007A750(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    sub_1003A3E40((uint64_t)v3 + v2, v3);
    *(void *)(v1 + 8) = v3;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

double sub_10007A790(uint64_t a1)
{
  *(void *)a1 = off_10045D648;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = off_10045DCE8;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = off_10045DA38;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(unsigned char *)(a1 + 200) &= 0xFCu;
  *(_DWORD *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = off_10045DAF8;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = off_10045DAD8;
  *(void *)(a1 + 240) = off_10045DA98;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 264) &= 0xFCu;
  *(void *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a1 + 296) & 0xF8 | 4;
  *(unsigned char *)(a1 + 304) &= 0xF8u;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = off_10045DA58;
  *(_OWORD *)(a1 + 336) = xmmword_1003F1C60;
  *(_OWORD *)(a1 + 352) = xmmword_1003F1C70;
  *(unsigned char *)(a1 + 368) |= 0xFu;
  *(void *)(a1 + 376) = off_10045DA58;
  *(_OWORD *)(a1 + 384) = xmmword_1003F1C60;
  *(_OWORD *)(a1 + 400) = xmmword_1003F1C70;
  *(unsigned char *)(a1 + 416) |= 0xFu;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = off_10045DA98;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(unsigned char *)(a1 + 488) &= 0xFCu;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 496) = off_10045DA98;
  *(unsigned char *)(a1 + 520) &= 0xFCu;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  char v2 = *(unsigned char *)(a1 + 578);
  *(_WORD *)(a1 + 576) = 0;
  *(unsigned char *)(a1 + 578) = v2 & 0xFE;
  *(void *)(a1 + 584) = off_10045D7A8;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 616) &= ~1u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_WORD *)(a1 + 816) &= 0xE000u;
  return result;
}

uint64_t *sub_10007AA14(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = *result;
  if (0xDAB7EC1DD3431B57 * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      uint64_t v10 = result[1];
      uint64_t v11 = (void *)*result;
      if (v10 != v9)
      {
        uint64_t v12 = v10 - 824;
        size_t v13 = (void (***)(void))(v10 - 824);
        do
        {
          (**v13)(v13);
          v12 -= 824;
          BOOL v14 = v13 == (void (***)(void))v9;
          v13 -= 103;
        }
        while (!v14);
        uint64_t v11 = (void *)*v7;
      }
      v7[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      uint64_t *v7 = 0;
      v7[1] = 0;
      int v7[2] = 0;
    }
    if (a4 > 0x4F88B2F392A409) {
      goto LABEL_41;
    }
    unint64_t v15 = 0xDAB7EC1DD3431B57 * (v8 >> 3);
    uint64_t v16 = 2 * v15;
    if (2 * v15 <= a4) {
      uint64_t v16 = a4;
    }
    unint64_t v17 = v15 >= 0x27C45979C95204 ? 0x4F88B2F392A409 : v16;
    if (v17 > 0x4F88B2F392A409) {
LABEL_41:
    }
      sub_1000A9108();
    uint64_t v18 = 103 * v17;
    double result = (uint64_t *)operator new(824 * v17);
    unint64_t v19 = result;
    uint64_t *v7 = (uint64_t)result;
    v7[1] = (uint64_t)result;
    int v7[2] = (uint64_t)&result[v18];
    if (v6 != a3)
    {
      unint64_t v20 = 0;
      do
      {
        double result = (uint64_t *)sub_1001986D0((uint64_t)&v19[v20 / 8], v6 + v20);
        v20 += 824;
      }
      while (v6 + v20 != a3);
      unint64_t v19 = (uint64_t *)((char *)v19 + v20);
    }
    v7[1] = (uint64_t)v19;
    return result;
  }
  uint64_t v21 = result[1];
  if (0xDAB7EC1DD3431B57 * ((v21 - v9) >> 3) >= a4)
  {
    if (a2 == a3)
    {
      size_t v26 = (uint64_t (***)(void))*result;
      if (v21 == v9)
      {
LABEL_40:
        v7[1] = (uint64_t)v26;
        return result;
      }
    }
    else
    {
      size_t v26 = (uint64_t (***)(void))*result;
      do
      {
        double result = (uint64_t *)sub_10007B004(v9, v6);
        v6 += 824;
        v9 += 824;
        v26 += 103;
      }
      while (v6 != a3);
      uint64_t v21 = v7[1];
      if ((uint64_t (***)(void))v21 == v26) {
        goto LABEL_40;
      }
    }
    uint64_t v27 = v21 - 824;
    BOOL v28 = (uint64_t (***)(void))(v21 - 824);
    do
    {
      double result = (uint64_t *)(**v28)(v28);
      v27 -= 824;
      BOOL v14 = v28 == v26;
      v28 -= 103;
    }
    while (!v14);
    goto LABEL_40;
  }
  uint64_t v22 = a2 + 8 * ((v21 - v9) >> 3);
  if (v21 != v9)
  {
    uint64_t v23 = 8 * ((v21 - v9) >> 3);
    do
    {
      double result = (uint64_t *)sub_10007B004(v9, v6);
      v6 += 824;
      v9 += 824;
      v23 -= 824;
    }
    while (v23);
    uint64_t v9 = v7[1];
  }
  uint64_t v24 = v9;
  if (v22 != a3)
  {
    uint64_t v25 = 0;
    do
    {
      double result = (uint64_t *)sub_1001986D0(v9 + v25, v22 + v25);
      v25 += 824;
    }
    while (v22 + v25 != a3);
    uint64_t v24 = v9 + v25;
  }
  v7[1] = v24;
  return result;
}

void sub_10007ACF4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    sub_1003A3F10(v3 + v2, v3);
    *(void *)(v1 + 8) = v3;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007AD34(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *a1) >> 4) >= a4)
  {
    if (0x6DB6DB6DB6DB6DB7 * ((a1[1] - v9) >> 4) >= a4)
    {
      uint64_t result = sub_10007C5B8(a2, a3, v9);
      uint64_t v28 = v27;
      uint64_t v29 = a1[1];
      if (v29 != v27)
      {
        uint64_t v30 = v29 - 112;
        unint64_t v31 = (uint64_t (***)(void))(v29 - 112);
        BOOL v32 = (uint64_t (***)(void))(v29 - 112);
        do
        {
          unint64_t v33 = *v32;
          v32 -= 14;
          uint64_t result = (*v33)(v31);
          v30 -= 112;
          BOOL v16 = v31 == (uint64_t (***)(void))v28;
          unint64_t v31 = v32;
        }
        while (!v16);
      }
      a1[1] = v28;
    }
    else
    {
      uint64_t v24 = a2 + 16 * ((a1[1] - v9) >> 4);
      uint64_t result = sub_10007C5B8(a2, v24, v9);
      uint64_t v25 = a1[1];
      if (v24 != a3)
      {
        uint64_t v26 = 0;
        do
        {
          uint64_t result = sub_1000797F8(v25 + v26, v24 + v26);
          v26 += 112;
        }
        while (v24 + v26 != a3);
        v25 += v26;
      }
      a1[1] = v25;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)*a1;
      if (v10 != v9)
      {
        uint64_t v12 = v10 - 112;
        size_t v13 = (void (***)(void))(v10 - 112);
        BOOL v14 = (void (***)(void))(v10 - 112);
        do
        {
          unint64_t v15 = *v14;
          v14 -= 14;
          (*v15)(v13);
          v12 -= 112;
          BOOL v16 = v13 == (void (***)(void))v9;
          size_t v13 = v14;
        }
        while (!v16);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x249249249249249) {
      goto LABEL_32;
    }
    unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 4);
    uint64_t v18 = 2 * v17;
    if (2 * v17 <= a4) {
      uint64_t v18 = a4;
    }
    unint64_t v19 = v17 >= 0x124924924924924 ? 0x249249249249249 : v18;
    if (v19 > 0x249249249249249) {
LABEL_32:
    }
      sub_1000A9108();
    uint64_t v20 = 112 * v19;
    uint64_t result = (uint64_t)operator new(112 * v19);
    uint64_t v22 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v20;
    if (a2 != a3)
    {
      uint64_t v23 = 0;
      do
      {
        uint64_t result = sub_1000797F8(v22 + v23, a2 + v23);
        v23 += 112;
      }
      while (a2 + v23 != a3);
      v22 += v23;
    }
    a1[1] = v22;
  }
  return result;
}

void sub_10007AFC4(_Unwind_Exception *exception_object)
{
  if (v3) {
    sub_1003A3EA8((uint64_t)v2 + v3, v2);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_10007AFE4(_Unwind_Exception *exception_object)
{
  if (v3) {
    sub_1003A3EA8((uint64_t)v2 + v3, v2);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007B004(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  sub_10007B5A8(a1 + 80, a2 + 80);
  sub_10007B0D0(a1 + 584, a2 + 584);
  std::string::operator=((std::string *)(a1 + 624), (const std::string *)(a2 + 624));
  std::string::operator=((std::string *)(a1 + 648), (const std::string *)(a2 + 648));
  std::string::operator=((std::string *)(a1 + 672), (const std::string *)(a2 + 672));
  std::string::operator=((std::string *)(a1 + 696), (const std::string *)(a2 + 696));
  std::string::operator=((std::string *)(a1 + 720), (const std::string *)(a2 + 720));
  std::string::operator=((std::string *)(a1 + 744), (const std::string *)(a2 + 744));
  std::string::operator=((std::string *)(a1 + 768), (const std::string *)(a2 + 768));
  std::string::operator=((std::string *)(a1 + 792), (const std::string *)(a2 + 792));
  *(_WORD *)(a1 + 816) = *(_WORD *)(a2 + 816);
  return a1;
}

uint64_t sub_10007B0D0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    sub_10007B130((void **)(a1 + 8), *(void *)(a2 + 8), *(void *)(a2 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

void **sub_10007B130(void **result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = (uint64_t)result[2];
  uint64_t v9 = (char *)*result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)*result) >> 3) >= a4)
  {
    uint64_t v24 = result[1];
    unint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((v24 - v9) >> 3);
    if (v25 >= a4)
    {
      if (a2 != a3)
      {
        uint64_t v34 = 0;
        do
        {
          uint64_t v35 = &v9[v34];
          *((void *)v35 + 1) = *(void *)(a2 + v34 + 8);
          *((_OWORD *)v35 + 1) = *(_OWORD *)(a2 + v34 + 16);
          *((void *)v35 + 4) = *(void *)(a2 + v34 + 32);
          *((void *)v35 + 5) = *(void *)(a2 + v34 + 40);
          v35[48] = *(unsigned char *)(a2 + v34 + 48);
          v34 += 56;
        }
        while (a2 + v34 != a3);
        uint64_t v24 = result[1];
        v9 += v34;
      }
      if (v24 != v9)
      {
        long long v36 = v24 - 56;
        long long v37 = v24 - 56;
        long long v38 = v24 - 56;
        do
        {
          long long v39 = *(uint64_t (***)(char *))v38;
          v38 -= 56;
          uint64_t result = (void **)(*v39)(v37);
          v36 -= 56;
          BOOL v16 = v37 == v9;
          long long v37 = v38;
        }
        while (!v16);
      }
      v7[1] = v9;
    }
    else
    {
      uint64_t v26 = a2 + 8 * ((v24 - v9) >> 3);
      if (v24 != v9)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 56 * v25;
        do
        {
          uint64_t v29 = &v9[v27];
          *((void *)v29 + 1) = *(void *)(a2 + v27 + 8);
          *((_OWORD *)v29 + 1) = *(_OWORD *)(a2 + v27 + 16);
          *((void *)v29 + 4) = *(void *)(a2 + v27 + 32);
          *((void *)v29 + 5) = *(void *)(a2 + v27 + 40);
          v29[48] = *(unsigned char *)(a2 + v27 + 48);
          v27 += 56;
        }
        while (v28 != v27);
        uint64_t v9 = (char *)result[1];
      }
      uint64_t v30 = v9;
      if (v26 != a3)
      {
        uint64_t v31 = 0;
        do
        {
          BOOL v32 = &v9[v31];
          v32[48] = v9[v31 + 48] & 0xE0;
          uint64_t v33 = *(void *)(v26 + v31 + 8);
          *(void *)BOOL v32 = off_10045D788;
          *((void *)v32 + 1) = v33;
          *((_OWORD *)v32 + 1) = *(_OWORD *)(v26 + v31 + 16);
          *((void *)v32 + 4) = *(void *)(v26 + v31 + 32);
          *((void *)v32 + 5) = *(void *)(v26 + v31 + 40);
          v32[48] = *(unsigned char *)(v26 + v31 + 48);
          v31 += 56;
        }
        while (v26 + v31 != a3);
        uint64_t v30 = &v9[v31];
      }
      result[1] = v30;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (char *)result[1];
      uint64_t v11 = *result;
      if (v10 != v9)
      {
        uint64_t v12 = v10 - 56;
        size_t v13 = v10 - 56;
        BOOL v14 = v10 - 56;
        do
        {
          unint64_t v15 = *(void (***)(char *))v14;
          v14 -= 56;
          (*v15)(v13);
          v12 -= 56;
          BOOL v16 = v13 == v9;
          size_t v13 = v14;
        }
        while (!v16);
        uint64_t v11 = *v7;
      }
      v7[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      uint64_t *v7 = 0;
      v7[1] = 0;
      int v7[2] = 0;
    }
    if (a4 > 0x492492492492492) {
      goto LABEL_40;
    }
    unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v18 = 2 * v17;
    if (2 * v17 <= a4) {
      uint64_t v18 = a4;
    }
    unint64_t v19 = v17 >= 0x249249249249249 ? 0x492492492492492 : v18;
    if (v19 > 0x492492492492492) {
LABEL_40:
    }
      sub_1000A9108();
    uint64_t v20 = 7 * v19;
    uint64_t result = (void **)operator new(56 * v19);
    uint64_t *v7 = result;
    v7[1] = result;
    int v7[2] = &result[v20];
    if (a2 != a3)
    {
      unint64_t v21 = 0;
      do
      {
        uint64_t v22 = &result[v21 / 8];
        uint64_t v23 = *(void **)(a2 + v21 + 8);
        const void *v22 = off_10045D788;
        v22[1] = v23;
        *((_OWORD *)v22 + 1) = *(_OWORD *)(a2 + v21 + 16);
        v22[4] = *(void **)(a2 + v21 + 32);
        v22[5] = *(void **)(a2 + v21 + 40);
        *((unsigned char *)v22 + 48) = *(unsigned char *)(a2 + v21 + 48);
        v21 += 56;
      }
      while (a2 + v21 != a3);
      uint64_t result = (void **)((char *)result + v21);
    }
    v7[1] = result;
  }
  return result;
}

uint64_t sub_10007B4C8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  sub_10007B704(a1 + 240, a2 + 240);
  sub_10007B704(a1 + 272, a2 + 272);
  sub_10007B564(a1 + 304, a2 + 304);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  *(_WORD *)(a1 + 376) = *(_WORD *)(a2 + 376);
  return a1;
}

uint64_t sub_10007B564(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t sub_10007B5A8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10007BF24((void *)(a1 + 8), *(void *)(a2 + 8), *(const std::string **)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
    sub_10007BBEC((char *)(a1 + 32), *(void *)(a2 + 32), *(void *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_10007B778(a1 + 64, a2 + 64);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  sub_10007B734(a1 + 136, a2 + 136);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  sub_10007B718(a1 + 248, a2 + 248);
  sub_10007B718(a1 + 296, a2 + 296);
  if (a1 == a2)
  {
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    sub_10007B704(a1 + 384, a2 + 384);
    sub_10007B704(a1 + 416, a2 + 416);
  }
  else
  {
    sub_10007B8E4(a1 + 344, *(std::string **)(a2 + 344), *(std::string **)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 3));
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    sub_10007B704(a1 + 384, a2 + 384);
    sub_10007B704(a1 + 416, a2 + 416);
    sub_10007C388((void *)(a1 + 448), *(char **)(a2 + 448), *(char **)(a2 + 456), (uint64_t)(*(void *)(a2 + 456) - *(void *)(a2 + 448)) >> 3);
    sub_10007B79C((void *)(a1 + 472), *(char **)(a2 + 472), *(char **)(a2 + 480), (uint64_t)(*(void *)(a2 + 480) - *(void *)(a2 + 472)) >> 2);
  }
  __int16 v4 = *(_WORD *)(a2 + 496);
  *(unsigned char *)(a1 + 498) = *(unsigned char *)(a2 + 498);
  *(_WORD *)(a1 + 496) = v4;
  return a1;
}

__n128 sub_10007B704(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return result;
}

__n128 sub_10007B718(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return result;
}

double sub_10007B734(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  double result = *(double *)(a2 + 72);
  *(double *)(a1 + 72) = result;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return result;
}

__n128 sub_10007B778(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return result;
}

void *sub_10007B79C(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      int v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      sub_1000A9108();
    uint64_t v13 = 4 * v12;
    __n128 result = operator new(4 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    int v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  unint64_t v15 = (void **)(result + 1);
  BOOL v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    unint64_t v19 = (void *)*result;
LABEL_20:
    __n128 result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    unint64_t v19 = v9;
    std::string __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *unint64_t v15 = &v9[v14];
  return result;
}

void sub_10007B8E4(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  uint64_t v6 = __str;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) >= __sz)
  {
    unint64_t v12 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (__str == a3)
      {
        uint64_t v20 = *(std::string **)a1;
      }
      else
      {
        uint64_t v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9++, v6++);
          ++v20;
        }
        while (v6 != a3);
        unint64_t v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12[-1].__r_.__value_.__l.__data_);
        }
        --v12;
      }
      *(void *)(a1 + 8) = v20;
    }
    else
    {
      uint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 != v9)
      {
        uint64_t v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
        do
        {
          std::string::operator=(v9++, v6++);
          v14 -= 24;
        }
        while (v14);
        uint64_t v9 = *(std::string **)(a1 + 8);
      }
      unint64_t v15 = v9;
      if (v13 != a3)
      {
        uint64_t v16 = 0;
        do
        {
          uint64_t v18 = &v9[v16];
          unint64_t v19 = (char *)&v13[v16];
          if (SHIBYTE(v13[v16].__r_.__value_.__r.__words[2]) < 0)
          {
            sub_1000559FC(v18, *(void **)v19, *((void *)v19 + 1));
          }
          else
          {
            long long v17 = *(_OWORD *)v19;
            v18->__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v17;
          }
          ++v16;
        }
        while (&v13[v16] != a3);
        unint64_t v15 = &v9[v16];
      }
      *(void *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = *(std::string **)(a1 + 8);
      BOOL v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          }
          --v10;
        }
        while (v10 != v9);
        BOOL v11 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_48;
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= __sz) {
      uint64_t v22 = __sz;
    }
    unint64_t v23 = v21 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v22;
    if (v23 > 0xAAAAAAAAAAAAAAALL) {
LABEL_48:
    }
      sub_1000A9108();
    uint64_t v24 = 24 * v23;
    unint64_t v25 = (char *)operator new(24 * v23);
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v25;
    *(void *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      uint64_t v26 = 0;
      do
      {
        uint64_t v27 = &v25[v26 * 24];
        uint64_t v28 = &v6[v26];
        if (SHIBYTE(v6[v26].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_1000559FC(v27, v28->__r_.__value_.__l.__data_, v28->__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)uint64_t v27 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          *((void *)v27 + 2) = *((void *)&v28->__r_.__value_.__l + 2);
        }
        ++v26;
      }
      while (&v6[v26] != a3);
      v25 += v26 * 24;
    }
    *(void *)(a1 + 8) = v25;
  }
}

char *sub_10007BBEC(char *result, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v7 = (uint64_t)result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(uint64_t (****)(void))result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(void *)result) >> 3) >= __sz)
  {
    uint64_t v22 = (uint64_t (***)(void))*((void *)result + 1);
    unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * (v22 - v9);
    if (v23 >= __sz)
    {
      if (a2 != a3)
      {
        unint64_t v31 = 0;
        do
        {
          BOOL v32 = &v9[v31 / 8];
          *(_OWORD *)(v32 + 1) = *(_OWORD *)(a2 + v31 + 8);
          v32[3] = *(uint64_t (***)(void))(a2 + v31 + 24);
          *((unsigned char *)v32 + 32) = *(unsigned char *)(a2 + v31 + 32);
          v31 += 40;
        }
        while (a2 + v31 != a3);
        uint64_t v22 = (uint64_t (***)(void))*((void *)result + 1);
        uint64_t v9 = (uint64_t (***)(void))((char *)v9 + v31);
      }
      if (v22 != v9)
      {
        uint64_t v33 = v22 - 5;
        uint64_t v34 = v22 - 5;
        uint64_t v35 = v22 - 5;
        do
        {
          long long v36 = *v35;
          v35 -= 5;
          __n128 result = (char *)(*v36)(v34);
          v33 -= 5;
          BOOL v16 = v34 == v9;
          uint64_t v34 = v35;
        }
        while (!v16);
      }
      *(void *)(v7 + 8) = v9;
    }
    else
    {
      uint64_t v24 = a2 + 8 * (v22 - v9);
      if (v22 != v9)
      {
        unint64_t v25 = 0;
        uint64_t v26 = 40 * v23;
        do
        {
          uint64_t v27 = &v9[v25 / 8];
          *(_OWORD *)(v27 + 1) = *(_OWORD *)(a2 + v25 + 8);
          v27[3] = *(uint64_t (***)(void))(a2 + v25 + 24);
          *((unsigned char *)v27 + 32) = *(unsigned char *)(a2 + v25 + 32);
          v25 += 40;
        }
        while (v26 != v25);
        uint64_t v9 = (uint64_t (***)(void))*((void *)result + 1);
      }
      uint64_t v28 = v9;
      if (v24 != a3)
      {
        uint64_t v29 = 0;
        do
        {
          uint64_t v30 = &v9[v29];
          *uint64_t v30 = (uint64_t (**)(void))off_10045DCC8;
          *((unsigned char *)v30 + 32) = LOBYTE(v9[v29 + 4]) | 0xF;
          *(_OWORD *)(v30 + 1) = *(_OWORD *)(v24 + v29 * 8 + 8);
          v30[3] = *(uint64_t (***)(void))(v24 + v29 * 8 + 24);
          *((unsigned char *)v30 + 32) = *(unsigned char *)(v24 + v29 * 8 + 32);
          v29 += 5;
        }
        while (v24 + v29 * 8 != a3);
        uint64_t v28 = &v9[v29];
      }
      *((void *)result + 1) = v28;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (uint64_t (***)(void))*((void *)result + 1);
      BOOL v11 = *(void **)result;
      if (v10 != v9)
      {
        unint64_t v12 = v10 - 5;
        uint64_t v13 = (void (***)(void))(v10 - 5);
        uint64_t v14 = (void (***)(void))(v10 - 5);
        do
        {
          unint64_t v15 = *v14;
          v14 -= 5;
          (*v15)(v13);
          v12 -= 5;
          BOOL v16 = v13 == (void (***)(void))v9;
          uint64_t v13 = v14;
        }
        while (!v16);
        BOOL v11 = *(void **)v7;
      }
      *(void *)(v7 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    if (__sz > 0x666666666666666) {
      goto LABEL_39;
    }
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v18 = 2 * v17;
    if (2 * v17 <= __sz) {
      uint64_t v18 = __sz;
    }
    unint64_t v19 = v17 >= 0x333333333333333 ? 0x666666666666666 : v18;
    if (v19 > 0x666666666666666) {
LABEL_39:
    }
      sub_1000A9108();
    uint64_t v20 = 40 * v19;
    __n128 result = (char *)operator new(40 * v19);
    *(void *)uint64_t v7 = result;
    *(void *)(v7 + 8) = result;
    *(void *)(v7 + 16) = &result[v20];
    if (v6 != a3)
    {
      unint64_t v21 = result;
      do
      {
        *(void *)__n128 result = off_10045DCC8;
        *(_OWORD *)(result + 8) = *(_OWORD *)(v6 + 8);
        *((void *)result + 3) = *(void *)(v6 + 24);
        result[32] = *(unsigned char *)(v6 + 32);
        v6 += 40;
        result += 40;
        v21 += 40;
      }
      while (v6 != a3);
    }
    *(void *)(v7 + 8) = result;
  }
  return result;
}

void *sub_10007BF24(void *result, uint64_t a2, const std::string *a3, size_t __sz)
{
  uint64_t v7 = (uint64_t)result;
  uint64_t v8 = result[2];
  uint64_t v9 = (void *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      uint64_t v10 = (void *)result[1];
      BOOL v11 = (void *)*result;
      if (v10 != v9)
      {
        unint64_t v12 = v10 - 5;
        uint64_t v13 = v10 - 5;
        uint64_t v14 = (void (***)(void))(v10 - 5);
        do
        {
          unint64_t v15 = (void (**)(void *))*v14;
          v14 -= 5;
          (*v15)(v13);
          v12 -= 5;
          BOOL v16 = v13 == v9;
          uint64_t v13 = v14;
        }
        while (!v16);
        BOOL v11 = *(void **)v7;
      }
      *(void *)(v7 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    if (__sz > 0x666666666666666) {
      goto LABEL_39;
    }
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v18 = 2 * v17;
    if (2 * v17 <= __sz) {
      uint64_t v18 = __sz;
    }
    unint64_t v19 = v17 >= 0x333333333333333 ? 0x666666666666666 : v18;
    if (v19 > 0x666666666666666) {
LABEL_39:
    }
      sub_1000A9108();
    uint64_t v20 = 5 * v19;
    __n128 result = operator new(40 * v19);
    uint64_t v9 = result;
    *(void *)uint64_t v7 = result;
    *(void *)(v7 + 8) = result;
    *(void *)(v7 + 16) = &result[v20];
    if ((const std::string *)a2 != a3)
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = &v9[v21];
        void *v22 = off_10045DCA8;
        v22[3] = 0;
        v22[4] = 0;
        v9[v21 + 2] = 0;
        *((_DWORD *)v22 + 2) = *(_DWORD *)(a2 + v21 * 8 + 8);
        __n128 result = std::string::operator=((std::string *)&v9[v21 + 2], (const std::string *)(a2 + v21 * 8 + 16));
        v21 += 5;
      }
      while ((const std::string *)(a2 + v21 * 8) != a3);
      uint64_t v9 = (void *)((char *)v9 + v21 * 8);
    }
LABEL_38:
    *(void *)(v7 + 8) = v9;
    return result;
  }
  unint64_t v23 = (void *)result[1];
  unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * (v23 - v9);
  if (v24 >= __sz)
  {
    if ((const std::string *)a2 != a3)
    {
      BOOL v32 = (std::string *)(v9 + 2);
      uint64_t v33 = (const std::string *)(a2 + 16);
      do
      {
        LODWORD(v32[-1].__r_.__value_.__r.__words[2]) = v33[-1].__r_.__value_.__r.__words[2];
        __n128 result = std::string::operator=(v32, v33);
        v9 += 5;
        BOOL v32 = (std::string *)((char *)v32 + 40);
        uint64_t v34 = v33 + 1;
        uint64_t v33 = (const std::string *)((char *)v33 + 40);
      }
      while (v34 != a3);
      unint64_t v23 = *(void **)(v7 + 8);
    }
    if (v23 != v9)
    {
      uint64_t v35 = v23 - 5;
      long long v36 = v23 - 5;
      long long v37 = (uint64_t (***)(void))(v23 - 5);
      do
      {
        long long v38 = (uint64_t (**)(void *))*v37;
        v37 -= 5;
        __n128 result = (void *)(*v38)(v36);
        v35 -= 5;
        BOOL v16 = v36 == v9;
        long long v36 = v37;
      }
      while (!v16);
    }
    goto LABEL_38;
  }
  unint64_t v25 = (const std::string *)(a2 + 8 * (v23 - v9));
  if (v23 != v9)
  {
    uint64_t v26 = (std::string *)(v9 + 2);
    uint64_t v27 = 40 * v24;
    uint64_t v28 = (const std::string *)(a2 + 16);
    do
    {
      LODWORD(v26[-1].__r_.__value_.__r.__words[2]) = v28[-1].__r_.__value_.__r.__words[2];
      __n128 result = std::string::operator=(v26, v28);
      uint64_t v26 = (std::string *)((char *)v26 + 40);
      uint64_t v28 = (const std::string *)((char *)v28 + 40);
      v27 -= 40;
    }
    while (v27);
    uint64_t v9 = *(void **)(v7 + 8);
  }
  uint64_t v29 = v9;
  if (v25 != a3)
  {
    uint64_t v30 = 0;
    do
    {
      unint64_t v31 = &v9[v30];
      void *v31 = off_10045DCA8;
      v31[3] = 0;
      v31[4] = 0;
      v9[v30 + 2] = 0;
      *((_DWORD *)v31 + 2) = v25->__r_.__value_.__r.__words[v30 + 1];
      __n128 result = std::string::operator=((std::string *)&v9[v30 + 2], (const std::string *)&v25->__r_.__value_.__r.__words[v30 + 2]);
      v30 += 5;
    }
    while ((const std::string *)((char *)v25 + v30 * 8) != a3);
    uint64_t v29 = &v9[v30];
  }
  *(void *)(v7 + 8) = v29;
  return result;
}

void sub_10007C244(_Unwind_Exception *a1)
{
  if (*(char *)(v3 + 39) < 0) {
    operator delete(*(void **)(v3 + 16));
  }
  sub_1003A3FD4(v3, v2, (void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_10007C270(_Unwind_Exception *a1)
{
  if (*(char *)(v3 + 39) < 0) {
    operator delete(*(void **)(v3 + 16));
  }
  sub_1003A3FD4(v3, v2, (void *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_10007C29C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10045D688;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(unsigned char *)(a1 + 64) &= 0xF8u;
  if (a1 != a2)
  {
    sub_10007C388((void *)(a1 + 8), *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_10007C388((void *)(a1 + 32), *(char **)(a2 + 32), *(char **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

void sub_10007C34C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
    uint64_t v6 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 16) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void *sub_10007C388(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      int v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      sub_1000A9108();
    uint64_t v13 = v12;
    __n128 result = operator new(8 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    int v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  unint64_t v15 = (void **)(result + 1);
  BOOL v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    unint64_t v19 = (void *)*result;
LABEL_20:
    __n128 result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    unint64_t v19 = v9;
    std::string __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *unint64_t v15 = &v9[v14];
  return result;
}

uint64_t sub_10007C4D0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    sub_10007C388((void *)(a1 + 8), *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t sub_10007C530(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

double sub_10007C584(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  double result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return result;
}

uint64_t sub_10007C5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = a3 + v6;
    uint64_t v8 = a1 + v6;
    if (a1 != a3)
    {
      sub_10007C388((void *)(v7 + 16), *(char **)(v8 + 16), *(char **)(v8 + 24), (uint64_t)(*(void *)(v8 + 24) - *(void *)(v8 + 16)) >> 3);
      sub_10007C388((void *)(v7 + 40), *(char **)(v8 + 40), *(char **)(v8 + 48), (uint64_t)(*(void *)(v8 + 48) - *(void *)(v8 + 40)) >> 3);
      *(void *)(v7 + 64) = *(void *)(v8 + 64);
      *(unsigned char *)(v7 + 72) = *(unsigned char *)(v8 + 72);
      sub_10007A3F4((char **)(v7 + 80), *(void *)(v8 + 80), *(void *)(v8 + 88), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v8 + 88) - *(void *)(v8 + 80)) >> 3));
    }
    *(unsigned char *)(v7 + 104) = *(unsigned char *)(v8 + 104);
    v6 += 112;
  }
  while (v8 + 112 != v5);
  return v5;
}

uint64_t sub_10007C6A8(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*a3 != a3[1])
  {
    uint64_t v5 = result;
    if (qword_10047BF08 == -1)
    {
      uint64_t v6 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
        goto LABEL_11;
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_1004649A0);
      uint64_t v6 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
        goto LABEL_11;
      }
    }
    uint64_t v7 = sub_10008807C(v3);
    if (*(char *)(v7 + 23) >= 0) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = *(void *)v7;
    }
    uint64_t v9 = nullsub_22(v3);
    if (*(char *)(v9 + 23) >= 0) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = *(void *)v9;
    }
    buf[0] = 136381187;
    *(void *)&buf[1] = v8;
    __int16 v27 = 2081;
    uint64_t v28 = v10;
    char v29 = 1;
    char v30 = 8;
    uint64_t v31 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Setting the last_visitied for %{private}s %{private}s to %{private}lld", (uint8_t *)buf, 0x20u);
LABEL_11:
    uint64_t v11 = sub_10008807C(v3);
    if (*(char *)(v11 + 23) < 0)
    {
      sub_1000559FC(__p, *(void **)v11, *(void *)(v11 + 8));
    }
    else
    {
      long long v12 = *(_OWORD *)v11;
      uint64_t v19 = *(void *)(v11 + 16);
      *(_OWORD *)std::string __p = v12;
    }
    uint64_t v13 = nullsub_22(v3);
    sub_100085B24(&v16, v13);
    int v14 = sub_10007CA84(v3);
    v25[0] = 0;
    v24[0] = 0;
    uint64_t v23 = a2;
    v22[0] = 1;
    uint64_t v21 = a2;
    v20[0] = 1;
    sub_10007CA8C((uint64_t *)__p, &v16, v14, v25, v24, v22, v20, (uint64_t)buf);
    if (v20[0]) {
      v20[0] = 0;
    }
    if (v22[0]) {
      v22[0] = 0;
    }
    if (v24[0]) {
      v24[0] = 0;
    }
    if (v25[0]) {
      v25[0] = 0;
    }
    unint64_t v15 = v17;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((SHIBYTE(v19) & 0x80000000) == 0) {
LABEL_26:
      }
        sub_10007CBC0(*(void *)(v5 + 8), (uint64_t)buf);
    }
    else if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
      goto LABEL_26;
    }
    operator delete(__p[0]);
    goto LABEL_26;
  }
  return result;
}

void sub_10007C9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10007C9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a20)
  {
    a20 = 0;
    if (!a22)
    {
LABEL_3:
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!a22)
  {
    goto LABEL_3;
  }
  a22 = 0;
  if (!a24)
  {
LABEL_4:
    if (!a27)
    {
LABEL_10:
      sub_100198250((uint64_t)&a11);
      if (a18 < 0)
      {
        operator delete(__p);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
LABEL_9:
    a27 = 0;
    goto LABEL_10;
  }
LABEL_8:
  a24 = 0;
  if (!a27) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t sub_10007CA84(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t *sub_10007CA8C@<X0>(uint64_t *result@<X0>, void *a2@<X1>, int a3@<W2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, unsigned __int8 *a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v10 = *result;
  *(void *)uint64_t v19 = result[1];
  *(void *)&std::exception_ptr v19[7] = *(uint64_t *)((char *)result + 15);
  char v11 = *((unsigned char *)result + 23);
  result[1] = 0;
  result[2] = 0;
  *double result = 0;
  int v12 = *a4;
  if (*a4) {
    long long v18 = *(_OWORD *)(a4 + 8);
  }
  int v13 = *a5;
  if (*a5) {
    long long v17 = *(_OWORD *)(a5 + 8);
  }
  int v14 = *a6;
  if (*a6)
  {
    uint64_t v8 = *((void *)a6 + 1);
    int v15 = *a7;
    if (!*a7) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  int v15 = *a7;
  if (*a7) {
LABEL_7:
  }
    uint64_t v9 = *((void *)a7 + 1);
LABEL_9:
  *(void *)a8 = v10;
  *(void *)(a8 + 8) = *(void *)v19;
  *(void *)(a8 + 15) = *(void *)&v19[7];
  *(unsigned char *)(a8 + 23) = v11;
  uint64_t v16 = a2[1];
  *(void *)(a8 + 24) = *a2;
  *(void *)(a8 + 32) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a8 + 40) = 0;
  *(_DWORD *)(a8 + 56) = a3;
  *(unsigned char *)(a8 + 64) = 0;
  if (v12)
  {
    *(_OWORD *)(a8 + 72) = v18;
    *(unsigned char *)(a8 + 64) = 1;
  }
  *(unsigned char *)(a8 + 88) = 0;
  if (v13)
  {
    *(_OWORD *)(a8 + 96) = v17;
    *(unsigned char *)(a8 + 88) = 1;
  }
  *(unsigned char *)(a8 + 112) = 0;
  if (v14)
  {
    *(void *)(a8 + 120) = v8;
    *(unsigned char *)(a8 + 112) = 1;
  }
  *(unsigned char *)(a8 + 128) = 0;
  if (v15)
  {
    *(void *)(a8 + 136) = v9;
    *(unsigned char *)(a8 + 128) = 1;
  }
  return result;
}

void sub_10007CBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10008807C(a2);
  uint64_t v5 = sub_100085D38(v4);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)v5;
  }
  else {
    uint64_t v7 = *(uint64_t **)v5;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    unint64_t v8 = *(void *)(v5 + 8);
  }
  unint64_t v9 = sub_100077FAC((uint64_t)buf, v7, v8);
  if (qword_10047BF08 != -1) {
    dispatch_once(&qword_10047BF08, &stru_100460658);
  }
  uint64_t v10 = (id)qword_10047BF10;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    char v11 = (char **)sub_10008807C(a2);
    int v12 = sub_1000900B8(v11);
    buf[0] = 136380931;
    *(void *)&buf[1] = v12;
    __int16 v17 = 2048;
    unint64_t v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Insert or update resource %{private}s (%lu)", (uint8_t *)buf, 0x16u);
  }

  uint64_t v14 = a1;
  uint64_t v15 = a2;
  id v13 = *(id *)(a1 + 32);
  operator new();
}

void sub_10007CF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (!atomic_fetch_add(v6, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  sub_10007CF9C((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t *sub_10007CF9C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2) {
    return a1;
  }
  if ((*(unsigned char *)(v2 + 136) & 1) == 0)
  {
    v8.__ptr_ = 0;
    uint64_t v3 = *(void *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v8);
    uint64_t v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v9.__cat_ = std::future_category();
      *(void *)&v9.__val_ = 4;
      std::future_error::future_error(&v7, v9);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      int v6 = std::logic_error::logic_error(exception, &v7);
      v6[1] = (std::logic_error)v7.__ec_;
    }
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  return a1;
}

void sub_10007D0F8(uint64_t a1)
{
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  operator delete();
}

void sub_10007D178(std::__assoc_sub_state *a1)
{
  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_10007D214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10007D240(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_10007D264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10047BF08 == -1)
  {
    int v6 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
  }
  else
  {
    dispatch_once(&qword_10047BF08, &stru_1004649A0);
    int v6 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
  }
  uint64_t v7 = sub_10008807C(a3);
  if (*(char *)(v7 + 23) >= 0) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = *(void *)v7;
  }
  uint64_t v9 = nullsub_22(a3);
  if (*(char *)(v9 + 23) >= 0) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = *(void *)v9;
  }
  buf[0] = 136381187;
  *(void *)&buf[1] = v8;
  __int16 v26 = 2081;
  uint64_t v27 = v10;
  char v28 = 0;
  char v29 = 8;
  uint64_t v30 = a2;
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Setting the relevancy for %{private}s %{private}s to %lld", (uint8_t *)buf, 0x20u);
LABEL_10:
  uint64_t v11 = sub_10008807C(a3);
  if (*(char *)(v11 + 23) < 0)
  {
    sub_1000559FC(__p, *(void **)v11, *(void *)(v11 + 8));
  }
  else
  {
    long long v12 = *(_OWORD *)v11;
    uint64_t v19 = *(void *)(v11 + 16);
    *(_OWORD *)std::string __p = v12;
  }
  uint64_t v13 = nullsub_22(a3);
  sub_100085B24(&v16, v13);
  int v14 = sub_10007CA84(a3);
  v24[0] = 0;
  v23[0] = 0;
  uint64_t v22 = a2;
  v21[0] = 1;
  v20[0] = 0;
  sub_10007CA8C((uint64_t *)__p, &v16, v14, v24, v23, v21, v20, (uint64_t)buf);
  if (v20[0]) {
    v20[0] = 0;
  }
  if (v21[0]) {
    v21[0] = 0;
  }
  if (v23[0]) {
    v23[0] = 0;
  }
  if (v24[0]) {
    v24[0] = 0;
  }
  uint64_t v15 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
LABEL_25:
    }
      sub_10007CBC0(*(void *)(a1 + 8), (uint64_t)buf);
  }
  else if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(__p[0]);
  goto LABEL_25;
}

void sub_10007D570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1002B743C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007D584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a18)
  {
    a18 = 0;
    if (!a20)
    {
LABEL_3:
      if (!a22) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!a20)
  {
    goto LABEL_3;
  }
  a20 = 0;
  if (!a22)
  {
LABEL_4:
    if (!a25)
    {
LABEL_10:
      sub_100198250((uint64_t)&a9);
      if (a16 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
LABEL_9:
    a25 = 0;
    goto LABEL_10;
  }
LABEL_8:
  a22 = 0;
  if (!a25) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_10007D608(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v3 = *v1;
  std::exception_ptr v4 = sub_10007FC9C(*v1, v1[1]);
  sub_10007DE30(*(sqlite3 ***)(v3 + 40), "tile_data", "headers", (sqlite3_int64)v4, 1, &v12);
  sub_10007E298((uint64_t)v11, v12);
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)&buf, (wireless_diagnostics::google::protobuf::io::CopyingInputStream *)v11, -1);
  sub_10008E01C(&v10, &buf);
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)&buf);
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)v11);
  int v5 = sqlite3_blob_close(v12);
  if (v5)
  {
    if (qword_10047BF08 == -1)
    {
      int v6 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    dispatch_once(&qword_10047BF08, &stru_100460658);
    int v6 = qword_10047BF10;
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      LODWORD(buf.__ptr_) = 67240192;
      HIDWORD(buf.__ptr_) = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", (uint8_t *)&buf, 8u);
    }
  }
LABEL_5:
  uint64_t v7 = *v2;
  if (!*v2) {
    sub_1000AD034(3u);
  }
  std::mutex::lock((std::mutex *)(v7 + 24));
  if ((*(unsigned char *)(v7 + 136) & 1) != 0
    || (buf.__ptr_ = 0, uint64_t v8 = *(void *)(v7 + 16), std::exception_ptr::~exception_ptr(&buf), v8))
  {
    sub_1000AD034(2u);
  }
  *(_OWORD *)(v7 + 144) = v10;
  long long v10 = 0uLL;
  *(_DWORD *)(v7 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v7 + 88));
  std::mutex::unlock((std::mutex *)(v7 + 24));
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_10007D834(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000A6954(exception_object);
}

void sub_10007D84C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, sqlite3_blob *a16, std::exception_ptr buf)
{
  if (!a2) {
    JUMPOUT(0x10007D83CLL);
  }
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)&buf);
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)&a13);
  int v19 = sqlite3_blob_close(a16);
  if (v19)
  {
    if (qword_10047BF08 == -1)
    {
      uint64_t v20 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_7;
      }
      goto LABEL_5;
    }
    dispatch_once(&qword_10047BF08, &stru_100460658);
    uint64_t v20 = qword_10047BF10;
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
    {
LABEL_5:
      LODWORD(buf.__ptr_) = 67240192;
      HIDWORD(buf.__ptr_) = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", (uint8_t *)&buf, 8u);
    }
  }
LABEL_7:
  __cxa_begin_catch(a1);
  uint64_t v21 = *(std::__assoc_sub_state ***)(v17 + 32);
  std::current_exception();
  uint64_t v22 = *v21;
  if (v22)
  {
    std::exception_ptr::exception_ptr(&buf, &a10);
    v23.__ptr_ = &buf;
    std::__assoc_sub_state::set_exception(v22, v23);
    std::exception_ptr::~exception_ptr(&buf);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x10007D7B8);
  }
  sub_1000AD034(3u);
}

void sub_10007D9E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception_ptr a17)
{
}

void sub_10007DA14(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v3 = *v1;
  sqlite3_int64 v4 = sub_10007E2F8(*v1, v1[1]);
  if (byte_10047E057 >= 0) {
    int v5 = (const char *)&qword_10047E040;
  }
  else {
    int v5 = (const char *)qword_10047E040;
  }
  sub_10007DE30(*(sqlite3 ***)(v3 + 40), "venues", v5, v4, 1, &v13);
  sub_10007E298((uint64_t)v12, v13);
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)&buf, (wireless_diagnostics::google::protobuf::io::CopyingInputStream *)v12, -1);
  sub_10007FC98((uint64_t *)&v11);
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)&buf);
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)v12);
  int v6 = sqlite3_blob_close(v13);
  if (v6)
  {
    if (qword_10047BF08 == -1)
    {
      uint64_t v7 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    dispatch_once(&qword_10047BF08, &stru_100460658);
    uint64_t v7 = qword_10047BF10;
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
    {
LABEL_7:
      LODWORD(buf.__ptr_) = 67240192;
      HIDWORD(buf.__ptr_) = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", (uint8_t *)&buf, 8u);
    }
  }
LABEL_8:
  uint64_t v8 = *v2;
  if (!*v2) {
    sub_1000AD034(3u);
  }
  std::mutex::lock((std::mutex *)(v8 + 24));
  if ((*(unsigned char *)(v8 + 136) & 1) != 0
    || (buf.__ptr_ = 0, uint64_t v9 = *(void *)(v8 + 16), std::exception_ptr::~exception_ptr(&buf), v9))
  {
    sub_1000AD034(2u);
  }
  *(_OWORD *)(v8 + 144) = v11;
  long long v11 = 0uLL;
  *(_DWORD *)(v8 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v8 + 88));
  std::mutex::unlock((std::mutex *)(v8 + 24));
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_10007DC50(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000A6954(exception_object);
}

void sub_10007DC68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, sqlite3_blob *a16, std::exception_ptr buf)
{
  if (!a2) {
    JUMPOUT(0x10007DC58);
  }
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)&buf);
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)&a13);
  int v19 = sqlite3_blob_close(a16);
  if (v19)
  {
    if (qword_10047BF08 == -1)
    {
      uint64_t v20 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_7;
      }
      goto LABEL_5;
    }
    dispatch_once(&qword_10047BF08, &stru_100460658);
    uint64_t v20 = qword_10047BF10;
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
    {
LABEL_5:
      LODWORD(buf.__ptr_) = 67240192;
      HIDWORD(buf.__ptr_) = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", (uint8_t *)&buf, 8u);
    }
  }
LABEL_7:
  __cxa_begin_catch(a1);
  uint64_t v21 = *(std::__assoc_sub_state ***)(v17 + 32);
  std::current_exception();
  uint64_t v22 = *v21;
  if (v22)
  {
    std::exception_ptr::exception_ptr(&buf, &a10);
    v23.__ptr_ = &buf;
    std::__assoc_sub_state::set_exception(v22, v23);
    std::exception_ptr::~exception_ptr(&buf);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x10007DBD4);
  }
  sub_1000AD034(3u);
}

void sub_10007DE04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception_ptr a17)
{
}

void sub_10007DE30(sqlite3 **a1@<X0>, const char *a2@<X2>, const char *a3@<X3>, sqlite3_int64 a4@<X4>, int a5@<W5>, sqlite3_blob **a6@<X8>)
{
  ppBlob = 0;
  int v9 = sqlite3_blob_open(*a1, "main", a2, a3, a4, a5, &ppBlob);
  sub_100088644(v9, *a1);
  if (v9)
  {
    long long v10 = __error();
    sub_100295674(*v10, &v30);
    __cxa_allocate_exception(0x40uLL);
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v25.__r_.__value_.__r.__words[1] = xmmword_1003E6DB0;
    strcpy(v25.__r_.__value_.__l.__data_, "Failed to open blob in ");
    long long v11 = std::string::append(&v25, a3);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    sub_1000AE4B0(v23, " w/ ");
    if ((v24 & 0x80u) == 0) {
      uint64_t v13 = (const std::string::value_type *)v23;
    }
    else {
      uint64_t v13 = (const std::string::value_type *)v23[0];
    }
    if ((v24 & 0x80u) == 0) {
      std::string::size_type v14 = v24;
    }
    else {
      std::string::size_type v14 = v23[1];
    }
    uint64_t v15 = std::string::append(&v26, v13, v14);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v30;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    int v19 = std::string::append(&v27, (const std::string::value_type *)p_dst, size);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v29, &v28);
    v29.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v21);
    sub_100204FC4(&v29, (uint64_t)"blob db::resources::handle::openBlob(const char *, const char *, const char *, int64_t, int) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.cpp", 310, (uint64_t)v21);
  }
  *a6 = ppBlob;
}

void sub_10007E124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  sub_100205504((std::runtime_error *)(v54 - 160));
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v54 - 176));
  if (*(char *)(v54 - 185) < 0)
  {
    operator delete(*(void **)(v54 - 208));
    if ((a26 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a52 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a21);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a47);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a45 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a28);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_8:
    if (a39 < 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a40);
  if (a39 < 0)
  {
LABEL_9:
    operator delete(a34);
    if ((v52 & 1) == 0)
    {
LABEL_18:
      if (*(char *)(v54 - 73) < 0) {
        operator delete(*(void **)(v54 - 96));
      }
      _Unwind_Resume(a1);
    }
LABEL_17:
    __cxa_free_exception(v53);
    goto LABEL_18;
  }
LABEL_16:
  if (!v52) {
    goto LABEL_18;
  }
  goto LABEL_17;
}

uint64_t sub_10007E298(uint64_t a1, sqlite3_blob *a2)
{
  *(void *)a1 = &off_100463F58;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = sqlite3_blob_bytes(a2);
  *(_DWORD *)(a1 + 20) = 0;
  return a1;
}

void sub_10007E2E4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream(v1);
  _Unwind_Resume(a1);
}

sqlite3_int64 sub_10007E2F8(uint64_t a1, uint64_t a2)
{
  sqlite3_int64 v3 = (sqlite3_int64)&v44;
  sqlite3_int64 v4 = *(sqlite3 ***)(a1 + 40);
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&__dst, "SELECT rowid FROM ");
  int v5 = std::string::append(&__dst, "venues");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = std::string::append(&v43, " WHERE ");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DF67 >= 0) {
    int v9 = (const std::string::value_type *)&qword_10047DF50;
  }
  else {
    int v9 = (const std::string::value_type *)qword_10047DF50;
  }
  if (byte_10047DF67 >= 0) {
    std::string::size_type v10 = byte_10047DF67;
  }
  else {
    std::string::size_type v10 = *(void *)&byte_10047DF58;
  }
  long long v11 = std::string::append(&v44, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v52, " = ?;");
  std::runtime_error v14 = *(std::runtime_error *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v54 = v13->__r_.__value_.__r.__words[2];
  std::runtime_error buf = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  sub_100082248(v4, (uint64_t)&buf, 0, (uint64_t)&pStmt);
  if (SHIBYTE(v54) < 0)
  {
    operator delete(buf.__vftable);
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_27;
    }
  }
  else if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v52.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_28:
    operator delete(v43.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_29:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_12;
  }
LABEL_27:
  operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_28;
  }
LABEL_11:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_29;
  }
LABEL_12:
  uint64_t v15 = (uint64_t *)sub_100085D38(a2);
  sub_100081BC0(&pStmt, 1, v15);
  int v16 = 0;
  uint64_t v17 = pStmt;
  for (uint64_t i = pStmt; ; uint64_t i = pStmt)
  {
    while (1)
    {
      int v19 = sqlite3_step(i);
      int v20 = v19;
      if (v19 != 100) {
        break;
      }
      if (sqlite3_column_type(v17, 0) == 5)
      {
        int v16 = 1;
        goto LABEL_14;
      }
      sqlite3_int64 v3 = sqlite3_column_int64(v17, 0);
      int v16 = 1;
      uint64_t i = pStmt;
    }
    if (v19 == 101) {
      break;
    }
    if (v19 == 19)
    {
      if (qword_10047BF08 == -1)
      {
        std::exception_ptr v23 = qword_10047BF10;
        if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
          goto LABEL_32;
        }
      }
      else
      {
        dispatch_once(&qword_10047BF08, &stru_100460658);
        std::exception_ptr v23 = qword_10047BF10;
        if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO))
        {
LABEL_32:
          LOWORD(buf.__vftable) = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Query constraint violation", (uint8_t *)&buf, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v44.__r_.__value_.__r.__words[1] = xmmword_1003F6340;
      strcpy(v44.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v49, &v44);
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100460ED8;
      sub_10018E868((uint64_t)&v43);
      sub_10020E390((std::runtime_error *)&v49, (uint64_t)"auto db::resources::statement<1, 1>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1346:14) &&)::(anonymous class)::operator()() const [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v43);
    }
    sub_100088644(v19, db);
    if (v20)
    {
      unsigned __int8 v24 = __error();
      sub_100295674(*v24, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((unsigned char *)&v47.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v47, " w/ ");
      std::string v25 = std::string::insert(&v47, 0, "Failed sqlite3_step");
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        sub_1000559FC(&v46, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v46 = __dst;
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v27 = &v46;
      }
      else {
        std::string v27 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v46.__r_.__value_.__l.__size_;
      }
      std::runtime_error v29 = std::string::append(&v48, (const std::string::value_type *)v27, size);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v50, &v49);
      v50.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
      sub_10018E868((uint64_t)v45);
      sub_100204FC4(&v50, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1346:14), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v45);
    }
LABEL_14:
    ;
  }
  int v21 = sqlite3_reset(pStmt);
  sub_100088644(v21, db);
  if (v21)
  {
    uint64_t v31 = __error();
    sub_100295674(*v31, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((unsigned char *)&v47.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v47, " w/ ");
    BOOL v32 = std::string::insert(&v47, 0, "Failed to execute query");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&v46, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else {
      std::string v46 = __dst;
    }
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v35 = &v46;
    }
    else {
      uint64_t v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = v46.__r_.__value_.__l.__size_;
    }
    long long v37 = std::string::append(&v48, (const std::string::value_type *)v35, v36);
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v50, &v49);
    v50.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v45);
    sub_100204FC4(&v50, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1346:14), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v45);
  }
  if (!v16)
  {
    __cxa_allocate_exception(0x40uLL);
    uint64_t v34 = (const std::string *)sub_100085D38(a2);
    std::runtime_error::runtime_error(&buf, v34);
    buf.__vftable = (std::runtime_error_vtbl *)&off_1004612B8;
    sub_10018E868((uint64_t)v39);
    sub_100204A54(&buf, (uint64_t)"int64_t SqlPrivacyDb::onQueueRowIdForVenueData(const LocationId &) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm", 1351, (uint64_t)v39);
  }
  sub_1000819D8((uint64_t)&pStmt);

  return v3;
}

void sub_10007F35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  std::runtime_error::~runtime_error(v72);
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    if (a42 < 0) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  operator delete(a16);
  if (a42 < 0)
  {
LABEL_4:
    operator delete(a37);
    if ((a35 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  if ((a35 & 0x80000000) == 0)
  {
LABEL_5:
    *(void *)(v74 - 176) = v73;
    if (*(char *)(v74 - 145) < 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a30);
  *(void *)(v74 - 176) = v73;
  if (*(char *)(v74 - 145) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v74 - 168));
    if ((a48 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  if ((a48 & 0x80000000) == 0)
  {
LABEL_7:
    *(void *)(v74 - 128) = &off_100451DC0;
    uint64_t v76 = *(void *)(v74 - 120);
    if (!v76) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a43);
  *(void *)(v74 - 128) = &off_100451DC0;
  uint64_t v76 = *(void *)(v74 - 120);
  if (!v76) {
    goto LABEL_17;
  }
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(void *)v76 + 32))(v76)) {
    *(void *)(v74 - 120) = 0;
  }
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v74 - 144));
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v74 - 224));
  if (*(char *)(v74 - 233) < 0)
  {
    operator delete(*(void **)(v74 - 256));
    if (a61 < 0)
    {
LABEL_21:
      operator delete(a56);
      if ((a72 & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_26;
    }
  }
  else if (a61 < 0)
  {
    goto LABEL_21;
  }
  if ((a72 & 0x80000000) == 0)
  {
LABEL_22:
    if ((a67 & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
LABEL_26:
  operator delete(a68);
  if ((a67 & 0x80000000) == 0)
  {
LABEL_27:
    __cxa_free_exception(v72);
    if (*(char *)(v74 - 185) < 0) {
      operator delete(*(void **)(v74 - 208));
    }
    sub_1001F702C((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a62);
  goto LABEL_27;
}

uint64_t *sub_10007FA64(uint64_t *a1)
{
  uint64_t v2 = operator new(0xE8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = off_100466878;
  *a1 = sub_10007FBEC((uint64_t)(v2 + 3));
  a1[1] = (uint64_t)v2;
  if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromZeroCopyStream() & 1) == 0)
  {
    sub_1000AE4B0(v5, "");
    sub_10024A41C("Failed to parse input stream", &__p);
    sub_10016A2C4((uint64_t)v5, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    sub_1000D11E0((uint64_t)&v4);
  }
  return a1;
}

void sub_10007FB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1000BA884(v20);
    _Unwind_Resume(a1);
  }
  sub_1000BA884(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_10007FBEC(uint64_t a1)
{
  *(void *)a1 = off_100467B18;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 56) = 0x200000000;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0x100000001;
  *(_DWORD *)(a1 + 196) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 177) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return a1;
}

void sub_10007FC84(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

sqlite3 **sub_10007FC9C(uint64_t a1, uint64_t a2)
{
  sqlite3_int64 v3 = *(sqlite3 ***)(a1 + 40);
  *((unsigned char *)&v71.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v71, "SELECT ");
  sqlite3_int64 v4 = std::string::append(&v71, "tile_data");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  char v6 = std::string::append(&v72, ".rowid FROM ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v73.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  long long v8 = std::string::append(&v73, "tile_data");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v74, " JOIN ");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  long long v12 = std::string::append(&v75, "venues");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error v14 = std::string::append(&v76, " ON ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v80.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = std::string::append(&v80, "tile_data");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v82.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  unint64_t v18 = std::string::append(&v82, ".");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v84.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DF97 >= 0) {
    uint64_t v20 = (const std::string::value_type *)&qword_10047DF80;
  }
  else {
    uint64_t v20 = (const std::string::value_type *)qword_10047DF80;
  }
  if (byte_10047DF97 >= 0) {
    std::string::size_type v21 = byte_10047DF97;
  }
  else {
    std::string::size_type v21 = *(void *)&byte_10047DF88;
  }
  uint64_t v22 = std::string::append(&v84, v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v85.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v24 = std::string::append(&v85, " = ");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v86.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  long long v26 = std::string::append(&v86, "venues");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v87.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  std::string v28 = std::string::append(&v87, ".");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DF97 >= 0) {
    long long v30 = (const std::string::value_type *)&qword_10047DF80;
  }
  else {
    long long v30 = (const std::string::value_type *)qword_10047DF80;
  }
  if (byte_10047DF97 >= 0) {
    std::string::size_type v31 = byte_10047DF97;
  }
  else {
    std::string::size_type v31 = *(void *)&byte_10047DF88;
  }
  BOOL v32 = std::string::append(&v88, v30, v31);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v89.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  uint64_t v34 = std::string::append(&v89, " WHERE ");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v36 = std::string::append(&__dst, "venues");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v81.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  long long v38 = std::string::append(&v81, ".");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v83.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DF67 >= 0) {
    uint64_t v40 = (const std::string::value_type *)&qword_10047DF50;
  }
  else {
    uint64_t v40 = (const std::string::value_type *)qword_10047DF50;
  }
  if (byte_10047DF67 >= 0) {
    std::string::size_type v41 = byte_10047DF67;
  }
  else {
    std::string::size_type v41 = *(void *)&byte_10047DF58;
  }
  id v42 = std::string::append(&v83, v40, v41);
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v91.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  std::string v44 = std::string::append(&v91, " = ?");
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  std::string::size_type v93 = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::runtime_error buf = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  sub_100082248(v3, (uint64_t)buf, 0, (uint64_t)&pStmt);
  if (SHIBYTE(v93) < 0)
  {
    operator delete(*(void **)buf);
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_53;
    }
  }
  else if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v91.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
LABEL_53:
  operator delete(v83.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }
LABEL_54:
  operator delete(v81.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
LABEL_56:
  operator delete(v89.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_58;
  }
LABEL_57:
  operator delete(v88.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete(v87.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v86.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_61;
  }
LABEL_60:
  operator delete(v85.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_62;
  }
LABEL_61:
  operator delete(v84.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_63;
  }
LABEL_62:
  operator delete(v82.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_64;
  }
LABEL_63:
  operator delete(v80.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_65;
  }
LABEL_64:
  operator delete(v76.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_66;
  }
LABEL_65:
  operator delete(v75.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_35:
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_67;
  }
LABEL_66:
  operator delete(v74.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
LABEL_68:
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_69:
    operator delete(v71.__r_.__value_.__l.__data_);
    goto LABEL_38;
  }
LABEL_67:
  operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_68;
  }
LABEL_37:
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_69;
  }
LABEL_38:
  std::string v46 = (uint64_t *)sub_100085D38(a2);
  sub_100081BC0(&pStmt, 1, v46);
  int v47 = 0;
  std::string v48 = pStmt;
  for (uint64_t i = pStmt; ; uint64_t i = pStmt)
  {
    while (1)
    {
      int v50 = sqlite3_step(i);
      int v51 = v50;
      if (v50 != 100) {
        break;
      }
      if (sqlite3_column_type(v48, 0) == 5)
      {
        int v47 = 1;
        goto LABEL_40;
      }
      sqlite3_int64 v3 = (sqlite3 **)sqlite3_column_int64(v48, 0);
      int v47 = 1;
      uint64_t i = pStmt;
    }
    if (v50 == 101) {
      break;
    }
    if (v50 == 19)
    {
      if (qword_10047BF08 == -1)
      {
        std::string::size_type v54 = qword_10047BF10;
        if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
          goto LABEL_72;
        }
      }
      else
      {
        dispatch_once(&qword_10047BF08, &stru_100460658);
        std::string::size_type v54 = qword_10047BF10;
        if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO))
        {
LABEL_72:
          *(_WORD *)std::runtime_error buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "Query constraint violation", buf, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = xmmword_1003F6340;
      strcpy(v83.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v89, &v83);
      v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100460ED8;
      sub_10018E868((uint64_t)&v81);
      sub_10020E390((std::runtime_error *)&v89, (uint64_t)"auto db::resources::statement<1, 1>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1329:14) &&)::(anonymous class)::operator()() const [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v81);
    }
    sub_100088644(v50, db);
    if (v51)
    {
      uint64_t v55 = __error();
      sub_100295674(*v55, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((unsigned char *)&v87.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v87, " w/ ");
      uint64_t v56 = std::string::insert(&v87, 0, "Failed sqlite3_step");
      long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        sub_1000559FC(&v86, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v86 = __dst;
      }
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v58 = &v86;
      }
      else {
        unint64_t v58 = (std::string *)v86.__r_.__value_.__r.__words[0];
      }
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v86.__r_.__value_.__l.__size_;
      }
      unint64_t v60 = std::string::append(&v88, (const std::string::value_type *)v58, size);
      long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error((std::runtime_error *)&v76, &v89);
      v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100460B68;
      sub_10018E868((uint64_t)&v85);
      sub_100204FC4((std::runtime_error *)&v76, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1329:14), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)&v85);
    }
LABEL_40:
    ;
  }
  int v52 = sqlite3_reset(pStmt);
  sub_100088644(v52, db);
  if (v52)
  {
    unint64_t v62 = __error();
    sub_100295674(*v62, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((unsigned char *)&v87.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v87, " w/ ");
    unint64_t v63 = std::string::insert(&v87, 0, "Failed to execute query");
    long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&v86, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else {
      std::string v86 = __dst;
    }
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v66 = &v86;
    }
    else {
      uint64_t v66 = (std::string *)v86.__r_.__value_.__r.__words[0];
    }
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v67 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v67 = v86.__r_.__value_.__l.__size_;
    }
    uint64_t v68 = std::string::append(&v88, (const std::string::value_type *)v66, v67);
    long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error((std::runtime_error *)&v76, &v89);
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100460B68;
    sub_10018E868((uint64_t)&v85);
    sub_100204FC4((std::runtime_error *)&v76, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1329:14), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)&v85);
  }
  if (!v47)
  {
    __cxa_allocate_exception(0x40uLL);
    long long v65 = (const std::string *)sub_100085D38(a2);
    std::runtime_error::runtime_error((std::runtime_error *)buf, v65);
    *(void *)std::runtime_error buf = &off_1004611A0;
    sub_10018E868((uint64_t)v70);
    sub_10020467C((std::runtime_error *)buf, (uint64_t)"int64_t SqlPrivacyDb::onQueueRowIdForTileData(const LocationId &) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm", 1334, (uint64_t)v70);
  }
  sub_1000819D8((uint64_t)&pStmt);

  return v3;
}

void sub_1000810AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,std::runtime_error a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  std::runtime_error::~runtime_error(v78);
  if (a49 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
LABEL_3:
    if (a63 < 0) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  operator delete(a36);
  if (a63 < 0)
  {
LABEL_4:
    operator delete(a58);
    if ((a55 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  if ((a55 & 0x80000000) == 0)
  {
LABEL_5:
    *(void *)(v80 - 176) = v79;
    if (*(char *)(v80 - 145) < 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a50);
  *(void *)(v80 - 176) = v79;
  if (*(char *)(v80 - 145) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v80 - 168));
    if ((a69 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  if ((a69 & 0x80000000) == 0)
  {
LABEL_7:
    *(void *)(v80 - 128) = &off_100451DC0;
    uint64_t v82 = *(void *)(v80 - 120);
    if (!v82) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a64);
  *(void *)(v80 - 128) = &off_100451DC0;
  uint64_t v82 = *(void *)(v80 - 120);
  if (!v82) {
    goto LABEL_17;
  }
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(void *)v82 + 32))(v82)) {
    *(void *)(v80 - 120) = 0;
  }
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v80 - 144));
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  std::runtime_error::~runtime_error(&a31);
  if (*(char *)(v80 - 217) < 0)
  {
    operator delete(*(void **)(v80 - 240));
    if (a74 < 0)
    {
LABEL_21:
      operator delete(a73);
      if ((a78 & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_26;
    }
  }
  else if (a74 < 0)
  {
    goto LABEL_21;
  }
  if ((a78 & 0x80000000) == 0)
  {
LABEL_22:
    if ((a76 & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
LABEL_26:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_27:
    __cxa_free_exception(v78);
    if (*(char *)(v80 - 185) < 0) {
      operator delete(*(void **)(v80 - 208));
    }
    sub_1001F702C((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a75);
  goto LABEL_27;
}

void sub_1000819D8(uint64_t a1)
{
  uint64_t v2 = *(sqlite3_stmt **)a1;
  if (!v2) {
    return;
  }
  sqlite3_int64 v3 = sqlite3_sql(v2);
  if (v3) {
    sqlite3_int64 v4 = v3;
  }
  else {
    sqlite3_int64 v4 = "<unknown query>";
  }
  size_t v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    std::string __dst = p_dst;
    unint64_t v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5) {
LABEL_12:
  }
    memmove(p_dst, v4, v6);
  *((unsigned char *)p_dst + v6) = 0;
  int v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_10047BF08 != -1)
    {
      dispatch_once(&qword_10047BF08, &stru_100460658);
      long long v11 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    long long v11 = qword_10047BF10;
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)std::runtime_error buf = 67240192;
      int v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(void *)a1 = 0;
  long long v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(void *)(a1 + 16) = 0;
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst);
  }
}

void sub_100081B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100081BC0(sqlite3_stmt **a1, int a2, uint64_t *a3)
{
  size_t v5 = *a1;
  int v6 = *((char *)a3 + 23);
  int v7 = *((_DWORD *)a3 + 2);
  if (v6 >= 0)
  {
    int v8 = v6;
  }
  else
  {
    a3 = (uint64_t *)*a3;
    int v8 = v7;
  }
  int v9 = sqlite3_bind_text(v5, a2, (const char *)a3, v8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sub_100088644(v9, a1[1]);
  if (v9)
  {
    int v10 = __error();
    sub_100295674(*v10, &v36);
    __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    long long v11 = std::string::append(&v30, " to ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v29, a2);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v13 = &v29;
    }
    else {
      long long v13 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v29.__r_.__value_.__l.__size_;
    }
    long long v15 = std::string::append(&v31, (const std::string::value_type *)v13, size);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    sub_1000AE4B0(v27, " w/ ");
    if ((v28 & 0x80u) == 0) {
      long long v17 = (const std::string::value_type *)v27;
    }
    else {
      long long v17 = (const std::string::value_type *)v27[0];
    }
    if ((v28 & 0x80u) == 0) {
      std::string::size_type v18 = v28;
    }
    else {
      std::string::size_type v18 = v27[1];
    }
    long long v19 = std::string::append(&v32, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v36;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v22 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v22 = __dst.__r_.__value_.__l.__size_;
    }
    long long v23 = std::string::append(&v33, (const std::string::value_type *)p_dst, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v35, &v34);
    v35.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v25);
    sub_100204FC4(&v35, (uint64_t)"void db::resources::statement<1, 1>::bind(int, const std::string &) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 448, (uint64_t)v25);
  }
}

void sub_100081F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_100205504((std::runtime_error *)(v78 - 152));
    uint64_t v80 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v78 - 168));
      if (*(char *)(v78 - 169) < 0)
      {
        operator delete(*(void **)(v78 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v78 - 201) & 0x80000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_28;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v78 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_29;
      }
LABEL_28:
      operator delete(*(void **)(v78 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v78 - 233) & 0x80000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_30;
      }
LABEL_29:
      operator delete(a61);
      if ((*(char *)(v78 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_31;
      }
LABEL_30:
      operator delete(*(void **)(v78 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a76 & 0x80000000) == 0) {
          goto LABEL_23;
        }
        goto LABEL_32;
      }
LABEL_31:
      operator delete(a67);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_23:
        if (a74 < 0) {
          goto LABEL_24;
        }
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_24:
        operator delete(a73);
        if ((v77 & 1) == 0)
        {
LABEL_35:
          if (*(char *)(v78 - 65) < 0) {
            operator delete(*(void **)(v78 - 88));
          }
          _Unwind_Resume(a1);
        }
LABEL_34:
        __cxa_free_exception(v76);
        goto LABEL_35;
      }
LABEL_33:
      if (!v77) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
LABEL_15:
    operator delete(v80);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_100205504((std::runtime_error *)(v78 - 152));
  uint64_t v80 = a52;
  if (!a52) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

void sub_100082248(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  int v8 = a3;
  int v9 = v8;
  if (v8) {
    os_activity_scope_enter(v8, &state);
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    long long v11 = (const char *)a2;
  }
  else {
    long long v11 = *(const char **)a2;
  }
  if (v10 >= 0) {
    int v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v12 = *(_DWORD *)(a2 + 8);
  }
  int v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_100088644(v13, *a1);
  if (v13)
  {
    unint64_t v14 = __error();
    sub_100295674(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v23, " w/ ");
    long long v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v27;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    long long v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v21);
    sub_100204FC4(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 1UL, nQueries = 1UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(void *)(a4 + 8) = *a1;
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_100082598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_100205504((std::runtime_error *)(v71 - 184));
    std::string v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1001F702C(v68);

            _Unwind_Resume(a1);
          }
          sub_1001F702C(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_100205504((std::runtime_error *)(v71 - 184));
  std::string v73 = a47;
  if (!a47) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_100082814(uint64_t a1)
{
  if (!a1)
  {
    if (qword_10047BED8 == -1)
    {
      int v6 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        return 0;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100463660);
      int v6 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        return 0;
      }
    }
    *(_WORD *)std::runtime_error buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Trying to get context of nullptr, using indoor", buf, 2u);
    return 0;
  }
  if ((*(unsigned char *)(a1 + 1914) & 0x20) != 0)
  {
    int v7 = *(_DWORD *)(a1 + 1856);
    if (v7 != 1)
    {
      if (v7 == 2) {
        return 1;
      }
      sub_10000C898((uint64_t)buf);
      sub_10019A5B8(&v27, a1);
      int v8 = *(_DWORD *)(a1 + 1856);
      std::stringbuf::str();
      char v30 = 0;
      LOBYTE(v29) = 0;
      memset(&v35, 0, sizeof(v35));
      std::string::assign(&v35, "We got something other than Indoor/Regional in LocationContext field (");
      int v9 = &v36;
      memset(&v36, 0, sizeof(v36));
      std::string v46 = v44;
      int v47 = &v45;
      if (v8 >= 0) {
        int v10 = v8;
      }
      else {
        int v10 = -v8;
      }
      int v31 = v10;
      std::string v32 = &v45;
      char v33 = 48;
      int v34 = 48;
      uint64_t v11 = sub_10000D008((uint64_t)&v31);
      int v12 = (char *)v11;
      if (v8 < 0)
      {
        *(unsigned char *)(v11 - 1) = 45;
        int v12 = (char *)(v11 - 1);
        std::string v46 = (unsigned char *)(v11 - 1);
        int v47 = &v45;
        std::string::size_type v13 = (std::string::size_type)(&v45 - v11 + 1);
        if (v13 >= 0x17)
        {
LABEL_20:
          std::string::__grow_by(&v36, 0x16uLL, v13 - 22, 0, 0, 0, 0);
          v36.__r_.__value_.__l.__size_ = 0;
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v9 = (std::string *)v36.__r_.__value_.__r.__words[0];
          }
          if (v12 == &v45) {
            goto LABEL_23;
          }
          goto LABEL_26;
        }
      }
      else
      {
        std::string v46 = (unsigned char *)v11;
        int v47 = &v45;
        std::string::size_type v13 = (std::string::size_type)(&v45 - v11);
        if ((unint64_t)(&v45 - v11) >= 0x17) {
          goto LABEL_20;
        }
      }
      if (v12 == &v45)
      {
LABEL_23:
        unint64_t v14 = v9;
        goto LABEL_34;
      }
LABEL_26:
      unint64_t v15 = &v43 - v12 + 23;
      if (v15 < 0x20 || (unint64_t)((char *)v9 - v12) < 0x20)
      {
        unint64_t v14 = v9;
        long long v16 = v12;
      }
      else
      {
        unint64_t v14 = (std::string *)((char *)v9 + (v15 & 0xFFFFFFFFFFFFFFE0));
        long long v16 = &v12[v15 & 0xFFFFFFFFFFFFFFE0];
        long long v17 = (long long *)(v12 + 16);
        std::string::size_type v18 = &v9->__r_.__value_.__r.__words[2];
        unint64_t v19 = v15 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v20 = *v17;
          *((_OWORD *)v18 - 1) = *(v17 - 1);
          *(_OWORD *)std::string::size_type v18 = v20;
          v17 += 2;
          v18 += 4;
          v19 -= 32;
        }
        while (v19);
        if (v15 == (v15 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_34;
        }
      }
      do
      {
        std::string::value_type v21 = *v16++;
        v14->__r_.__value_.__s.__data_[0] = v21;
        unint64_t v14 = (std::string *)((char *)v14 + 1);
      }
      while (v16 != &v45);
LABEL_34:
      v14->__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        v36.__r_.__value_.__l.__size_ = v13;
      }
      else {
        *((unsigned char *)&v36.__r_.__value_.__s + 23) = v13 & 0x7F;
      }
      memset(&v37, 0, sizeof(v37));
      std::string::assign(&v37, ") for this locationId: ");
      if (*(char *)(a1 + 31) < 0)
      {
        sub_1000559FC(&v38, *(void **)(a1 + 8), *(void *)(a1 + 16));
      }
      else
      {
        long long v38 = *(_OWORD *)(a1 + 8);
        uint64_t v39 = *(void *)(a1 + 24);
      }
      memset(&v40, 0, sizeof(v40));
      std::string::assign(&v40, ". Memory corruption?\n");
      if (SHIBYTE(v24) < 0)
      {
        sub_1000559FC(&v41, v23[0], (unint64_t)v23[1]);
      }
      else
      {
        long long v41 = *(_OWORD *)v23;
        uint64_t v42 = v24;
      }
      sub_10016A2C4((uint64_t)&v29, (uint64_t)&v35, 6);
      if (SHIBYTE(v42) < 0)
      {
        operator delete((void *)v41);
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_45:
          if ((SHIBYTE(v39) & 0x80000000) == 0) {
            goto LABEL_46;
          }
          goto LABEL_53;
        }
      }
      else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_45;
      }
      operator delete(v40.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v39) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_47;
        }
        goto LABEL_54;
      }
LABEL_53:
      operator delete((void *)v38);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_47:
        if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_55;
      }
LABEL_54:
      operator delete(v37.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_48:
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_49;
        }
        goto LABEL_56;
      }
LABEL_55:
      operator delete(v36.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_49:
        if ((v30 & 0x80000000) == 0) {
          goto LABEL_50;
        }
LABEL_57:
        operator delete(v29);
LABEL_50:
        sub_1000D11E0((uint64_t)&__p);
      }
LABEL_56:
      operator delete(v35.__r_.__value_.__l.__data_);
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_50;
      }
      goto LABEL_57;
    }
    return 0;
  }
  sub_100085B24(buf, a1 + 8);
  uint64_t v2 = sub_100085D38((uint64_t)buf);
  if (*(char *)(v2 + 23) >= 0) {
    sqlite3_int64 v3 = (unsigned __int8 *)v2;
  }
  else {
    sqlite3_int64 v3 = *(unsigned __int8 **)v2;
  }
  BOOL v4 = *v3 == 82;
  size_t v5 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v4;
}

void sub_100082DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  while (1)
  {
    if (*(char *)(v62 - 1) < 0) {
      operator delete(*(void **)(v62 - 24));
    }
    v62 -= 24;
    if (v62 == v63 - 256)
    {
      if (a62 < 0) {
        operator delete(__p);
      }
      if (a15 < 0) {
        operator delete(a10);
      }
      sub_1000DEA14((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
}

void sub_100082EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100198250((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100082EDC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  memset(&v127, 0, sizeof(v127));
  memset(&v126, 0, sizeof(v126));
  if (a2 == 1)
  {
    int v10 = (const std::string *)&qword_10047DF50;
    std::string::operator=(&v127, (const std::string *)&qword_10047DF80);
  }
  else
  {
    if (a2) {
      goto LABEL_6;
    }
    std::string::operator=(&v127, (const std::string *)&qword_10047DF50);
    int v10 = (const std::string *)&qword_10047DF80;
  }
  std::string::operator=(&v126, v10);
LABEL_6:
  std::operator+<char>();
  uint64_t v11 = std::string::append(&v118, ", ");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v119.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DF7F >= 0) {
    std::string::size_type v13 = (const std::string::value_type *)&qword_10047DF68;
  }
  else {
    std::string::size_type v13 = (const std::string::value_type *)qword_10047DF68;
  }
  if (byte_10047DF7F >= 0) {
    std::string::size_type v14 = byte_10047DF7F;
  }
  else {
    std::string::size_type v14 = *(void *)&byte_10047DF70;
  }
  unint64_t v15 = std::string::append(&v119, v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v120.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  long long v17 = std::string::append(&v120, ", ");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v121.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047E00F >= 0) {
    unint64_t v19 = (const std::string::value_type *)&qword_10047DFF8;
  }
  else {
    unint64_t v19 = (const std::string::value_type *)qword_10047DFF8;
  }
  if (byte_10047E00F >= 0) {
    std::string::size_type v20 = byte_10047E00F;
  }
  else {
    std::string::size_type v20 = unk_10047E000;
  }
  std::string::value_type v21 = std::string::append(&v121, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v122.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  std::string v23 = std::string::append(&v122, ", ");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v123.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DFC7 >= 0) {
    std::string v25 = (const std::string::value_type *)&xmmword_10047DFB0;
  }
  else {
    std::string v25 = (const std::string::value_type *)xmmword_10047DFB0;
  }
  if (byte_10047DFC7 >= 0) {
    std::string::size_type v26 = byte_10047DFC7;
  }
  else {
    std::string::size_type v26 = *((void *)&xmmword_10047DFB0 + 1);
  }
  uint64_t v27 = std::string::append(&v123, v25, v26);
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  std::string v29 = std::string::append(&v128, ", ");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v129.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047E027 >= 0) {
    int v31 = (const std::string::value_type *)&xmmword_10047E010;
  }
  else {
    int v31 = (const std::string::value_type *)xmmword_10047E010;
  }
  if (byte_10047E027 >= 0) {
    std::string::size_type v32 = byte_10047E027;
  }
  else {
    std::string::size_type v32 = *((void *)&xmmword_10047E010 + 1);
  }
  char v33 = std::string::append(&v129, v31, v32);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v130.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::string v35 = std::string::append(&v130, ", ");
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v131.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DFDF >= 0) {
    std::string v37 = (const std::string::value_type *)&qword_10047DFC8;
  }
  else {
    std::string v37 = (const std::string::value_type *)qword_10047DFC8;
  }
  if (byte_10047DFDF >= 0) {
    std::string::size_type v38 = byte_10047DFDF;
  }
  else {
    std::string::size_type v38 = *(void *)&dword_10047DFD0;
  }
  uint64_t v39 = std::string::append(&v131, v37, v38);
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v136.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  long long v41 = std::string::append(&v136, ", ");
  long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v137.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DFF7 >= 0) {
    char v43 = (const std::string::value_type *)&qword_10047DFE0;
  }
  else {
    char v43 = (const std::string::value_type *)qword_10047DFE0;
  }
  if (byte_10047DFF7 >= 0) {
    std::string::size_type v44 = byte_10047DFF7;
  }
  else {
    std::string::size_type v44 = qword_10047DFE8;
  }
  char v45 = std::string::append(&v137, v43, v44);
  long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v132.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  int v47 = std::string::append(&v132, ", ");
  long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DFAF >= 0) {
    std::string v49 = (const std::string::value_type *)&qword_10047DF98;
  }
  else {
    std::string v49 = (const std::string::value_type *)qword_10047DF98;
  }
  if (byte_10047DFAF >= 0) {
    std::string::size_type v50 = byte_10047DFAF;
  }
  else {
    std::string::size_type v50 = unk_10047DFA0;
  }
  int v51 = std::string::append(&v138, v49, v50);
  long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  long long v53 = std::string::append(&__dst, " FROM ");
  long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v134.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  uint64_t v55 = std::string::append(&v134, "venues");
  long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v135.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  long long v57 = std::string::append(&v135, " WHERE ");
  long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v133.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v59 = &v126;
  }
  else {
    unint64_t v59 = (std::string *)v126.__r_.__value_.__r.__words[0];
  }
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v126.__r_.__value_.__l.__size_;
  }
  long long v61 = std::string::append(&v133, (const std::string::value_type *)v59, size);
  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  *(void *)&v139[16] = *((void *)&v61->__r_.__value_.__l + 2);
  *(_OWORD *)int v139 = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  uint64_t v63 = std::string::append((std::string *)v139, " = ?;");
  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  std::string::size_type v125 = v63->__r_.__value_.__r.__words[2];
  long long __p = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  if ((v139[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v139);
    if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_56:
      if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_57;
      }
      goto LABEL_172;
    }
  }
  else if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(v133.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_57:
    if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_173;
  }
LABEL_172:
  operator delete(v135.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_58:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_174;
  }
LABEL_173:
  operator delete(v134.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_59:
    if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_175;
  }
LABEL_174:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_60:
    if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_176;
  }
LABEL_175:
  operator delete(v138.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_61:
    if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_177;
  }
LABEL_176:
  operator delete(v132.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_62:
    if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_178;
  }
LABEL_177:
  operator delete(v137.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_63:
    if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_179;
  }
LABEL_178:
  operator delete(v136.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_64:
    if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_180;
  }
LABEL_179:
  operator delete(v131.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_65:
    if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_181;
  }
LABEL_180:
  operator delete(v130.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_66:
    if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_182;
  }
LABEL_181:
  operator delete(v129.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_183;
  }
LABEL_182:
  operator delete(v128.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_184;
  }
LABEL_183:
  operator delete(v123.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_69:
    if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_185;
  }
LABEL_184:
  operator delete(v122.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_70:
    if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_186;
  }
LABEL_185:
  operator delete(v121.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_71:
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_72;
    }
LABEL_187:
    operator delete(v119.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_73;
    }
LABEL_188:
    operator delete(v118.__r_.__value_.__l.__data_);
    goto LABEL_73;
  }
LABEL_186:
  operator delete(v120.__r_.__value_.__l.__data_);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_187;
  }
LABEL_72:
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_188;
  }
LABEL_73:
  *a5 = 0;
  sub_100085D40(*(sqlite3 ***)(a1 + 40), (uint64_t)&__p, 0, (uint64_t)&v123);
  uint64_t v65 = *(void *)(a3 + 24);
  if (!v65) {
    sub_10008F39C();
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v65 + 48))(v65, &v123);
  uint64_t v66 = (sqlite3_stmt *)v123.__r_.__value_.__r.__words[0];
  v119.__r_.__value_.__r.__words[0] = v123.__r_.__value_.__r.__words[0];
  uint64_t v115 = (uint64_t)(a5 + 8);
  uint64_t v114 = a5 + 48;
  uint64_t v112 = a5 + 104;
  int v113 = a5 + 80;
  int v117 = a5;
  while (1)
  {
    int v67 = sqlite3_step(v66);
    int v68 = v67;
    if (v67 != 100)
    {
      if (v67 != 101)
      {
        if (v67 != 19)
        {
          sub_100088644(v67, (sqlite3 *)v123.__r_.__value_.__l.__size_);
          if (v68)
          {
            uint64_t v97 = __error();
            sub_100295674(*v97, &__dst);
            __cxa_allocate_exception(0x40uLL);
            *((unsigned char *)&v137.__r_.__value_.__s + 23) = 4;
            strcpy((char *)&v137, " w/ ");
            char v98 = std::string::insert(&v137, 0, "Failed sqlite3_step");
            long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
            v132.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v99;
            v98->__r_.__value_.__l.__size_ = 0;
            v98->__r_.__value_.__r.__words[2] = 0;
            v98->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              sub_1000559FC(&v136, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            }
            else {
              std::string v136 = __dst;
            }
            if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v101 = &v136;
            }
            else {
              uint64_t v101 = (std::string *)v136.__r_.__value_.__r.__words[0];
            }
            if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v102 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v102 = v136.__r_.__value_.__l.__size_;
            }
            long long v103 = std::string::append(&v132, (const std::string::value_type *)v101, v102);
            long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
            v138.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v104;
            v103->__r_.__value_.__l.__size_ = 0;
            v103->__r_.__value_.__r.__words[2] = 0;
            v103->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error((std::runtime_error *)&v122, &v138);
            v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100460B68;
            sub_10018E868((uint64_t)&v131);
            sub_100204FC4((std::runtime_error *)&v122, (uint64_t)"void db::resources::statement<8, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 8, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:597:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)&v131);
          }
          goto LABEL_75;
        }
        if (qword_10047BF08 == -1)
        {
          uint64_t v100 = qword_10047BF10;
          if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
            goto LABEL_215;
          }
        }
        else
        {
          dispatch_once(&qword_10047BF08, &stru_100460658);
          uint64_t v100 = qword_10047BF10;
          if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO))
          {
LABEL_215:
            __cxa_allocate_exception(0x40uLL);
            v135.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
            *(_OWORD *)&v135.__r_.__value_.__r.__words[1] = xmmword_1003F6340;
            strcpy(v135.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
            std::runtime_error::runtime_error((std::runtime_error *)&v138, &v135);
            v138.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100460ED8;
            sub_10018E868((uint64_t)&v134);
            sub_10020E390((std::runtime_error *)&v138, (uint64_t)"auto db::resources::statement<8, 1>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:597:19) &&)::(anonymous class)::operator()() const [nCols = 8, nQueries = 1, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v134);
          }
        }
        *(_WORD *)int v139 = 0;
        _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_INFO, "Query constraint violation", v139, 2u);
        goto LABEL_215;
      }
      int v91 = sqlite3_reset((sqlite3_stmt *)v123.__r_.__value_.__l.__data_);
      sub_100088644(v91, (sqlite3 *)v123.__r_.__value_.__l.__size_);
      if (v91)
      {
        char v105 = __error();
        sub_100295674(*v105, &__dst);
        __cxa_allocate_exception(0x40uLL);
        *((unsigned char *)&v137.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v137, " w/ ");
        long long v106 = std::string::insert(&v137, 0, "Failed to execute query");
        long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
        v132.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v107;
        v106->__r_.__value_.__l.__size_ = 0;
        v106->__r_.__value_.__r.__words[2] = 0;
        v106->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_1000559FC(&v136, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string v136 = __dst;
        }
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v108 = &v136;
        }
        else {
          long long v108 = (std::string *)v136.__r_.__value_.__r.__words[0];
        }
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v109 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v109 = v136.__r_.__value_.__l.__size_;
        }
        long long v110 = std::string::append(&v132, (const std::string::value_type *)v108, v109);
        long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
        v138.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v111;
        v110->__r_.__value_.__l.__size_ = 0;
        v110->__r_.__value_.__r.__words[2] = 0;
        v110->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error((std::runtime_error *)&v122, &v138);
        v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100460B68;
        sub_10018E868((uint64_t)&v131);
        sub_100204FC4((std::runtime_error *)&v122, (uint64_t)"void db::resources::statement<8, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 8, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:597:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)&v131);
      }
      sub_100086418((uint64_t)&v123);

      if (SHIBYTE(v125) < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_168:
          if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return;
          }
          goto LABEL_191;
        }
      }
      else if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_168;
      }
      operator delete(v126.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_191:
      operator delete(v127.__r_.__value_.__l.__data_);
      return;
    }
    sub_10008630C((sqlite3_stmt **)&v119, (uint64_t)v139);
    v136.__r_.__value_.__r.__words[0] = *(void *)&v139[16];
    std::string::size_type v69 = *(void *)&v139[8];
    *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = *(void *)&v139[23];
    char v70 = v139[31];
    if (sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 2) == 5
      || sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 3) == 5)
    {
      break;
    }
    if (sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 2) != 5)
    {
      sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 2);
      time_t v72 = sqlite3_column_int64((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 2);
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::from_time_t(v72).__d_.__rep_;
    }
    sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 3);
    sqlite3_int64 v73 = sqlite3_column_int64((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 3);
    sub_100085AD4(v139, v73, rep);
    char v71 = 0;
    *(_OWORD *)((char *)__dst.__r_.__value_.__r.__words + 7) = *(_OWORD *)v139;
LABEL_91:
    if (sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 4) == 5
      || sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 5) == 5)
    {
      if (sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 4) != 5
        && sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 5) != 5
        || sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 4) == 5
        && sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 5) == 5)
      {
        char v74 = 1;
        goto LABEL_101;
      }
      if (qword_10047BF08 == -1)
      {
        uint64_t v95 = qword_10047BF10;
        if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_FAULT)) {
          goto LABEL_204;
        }
      }
      else
      {
        dispatch_once(&qword_10047BF08, &stru_100460658);
        uint64_t v95 = qword_10047BF10;
        if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_FAULT)) {
          goto LABEL_204;
        }
      }
      *(void *)int v139 = 68289539;
      *(_WORD *)&v139[8] = 2082;
      *(void *)&v139[10] = "";
      *(_WORD *)&v139[18] = 2082;
      *(void *)&v139[20] = "assert";
      *(_WORD *)&v139[28] = 2081;
      *(void *)&v139[30] = "results.isNull<4>() && results.isNull<5>()";
      _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Tile version/refresh timestamp is missing\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v139, 0x26u);
      if (qword_10047BF08 != -1)
      {
        dispatch_once(&qword_10047BF08, &stru_100460658);
        char v96 = qword_10047BF10;
        if (os_signpost_enabled((os_log_t)qword_10047BF10))
        {
LABEL_205:
          *(void *)int v139 = 68289539;
          *(_WORD *)&v139[8] = 2082;
          *(void *)&v139[10] = "";
          *(_WORD *)&v139[18] = 2082;
          *(void *)&v139[20] = "assert";
          *(_WORD *)&v139[28] = 2081;
          *(void *)&v139[30] = "results.isNull<4>() && results.isNull<5>()";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v96, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Tile version/refresh timestamp is missing", "{\"msg%{public}.0s\":\"Tile version/refresh timestamp is missing\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v139, 0x26u);
          if (qword_10047BF08 != -1) {
            dispatch_once(&qword_10047BF08, &stru_100460658);
          }
        }
LABEL_207:
        char v94 = (id)qword_10047BF10;
        if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
        {
          *(void *)int v139 = 68289539;
          *(_WORD *)&v139[8] = 2082;
          *(void *)&v139[10] = "";
          *(_WORD *)&v139[18] = 2082;
          *(void *)&v139[20] = "assert";
          *(_WORD *)&v139[28] = 2081;
          *(void *)&v139[30] = "results.isNull<4>() && results.isNull<5>()";
          _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Tile version/refresh timestamp is missing\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v139, 0x26u);
        }
        goto LABEL_209;
      }
LABEL_204:
      char v96 = qword_10047BF10;
      if (os_signpost_enabled((os_log_t)qword_10047BF10)) {
        goto LABEL_205;
      }
      goto LABEL_207;
    }
    if (sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 4) != 5)
    {
      sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 4);
      time_t v75 = sqlite3_column_int64((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 4);
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::from_time_t(v75).__d_.__rep_;
    }
    sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 5);
    sqlite3_int64 v76 = sqlite3_column_int64((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 5);
    sub_100085AD4(v139, v76, rep);
    char v74 = 0;
    *(_OWORD *)((char *)v138.__r_.__value_.__r.__words + 7) = *(_OWORD *)v139;
LABEL_101:
    int v77 = sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 6);
    if (v77 != 5)
    {
      sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 6);
      time_t v78 = sqlite3_column_int64((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 6);
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = std::chrono::system_clock::from_time_t(v78).__d_.__rep_;
    }
    sub_100085ADC(&v132);
    uint64_t v79 = *(void *)(a4 + 24);
    if (!v79) {
      sub_10008F39C();
    }
    (*(void (**)(unsigned char *__return_ptr))(*(void *)v79 + 48))(v139);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = *(void *)v139;
    long long v80 = *(_OWORD *)&v139[8];
    *(_OWORD *)&v139[8] = 0uLL;
    std::string v81 = (std::__shared_weak_count *)v132.__r_.__value_.__l.__size_;
    *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v80;
    if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
      uint64_t v82 = *(std::__shared_weak_count **)&v139[16];
      if (!*(void *)&v139[16]) {
        goto LABEL_110;
      }
    }
    else
    {
      uint64_t v82 = *(std::__shared_weak_count **)&v139[16];
      if (!*(void *)&v139[16]) {
        goto LABEL_110;
      }
    }
    if (!atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
LABEL_110:
    if (sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 7) == 5)
    {
      int v83 = 0;
      v133.__r_.__value_.__r.__words[0] = v69;
      v133.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v133.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
      *((unsigned char *)&v133.__r_.__value_.__s + 23) = v70;
      v136.__r_.__value_.__r.__words[0] = 0;
      *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = 0;
      goto LABEL_114;
    }
    int v84 = sqlite3_column_int((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 7);
    int v83 = v84;
    v133.__r_.__value_.__r.__words[0] = v69;
    v133.__r_.__value_.__l.__size_ = v136.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v133.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&v133.__r_.__value_.__s + 23) = v70;
    v136.__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)v136.__r_.__value_.__r.__words + 7) = 0;
    if (v84 != 1)
    {
      if (v84 == 2) {
        goto LABEL_117;
      }
LABEL_114:
      if (qword_10047BF08 == -1)
      {
        std::string v85 = qword_10047BF10;
        if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
          goto LABEL_117;
        }
      }
      else
      {
        dispatch_once(&qword_10047BF08, &stru_100460658);
        std::string v85 = qword_10047BF10;
        if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
        {
LABEL_117:
          int v86 = 1;
          v135.__r_.__value_.__s.__data_[0] = 0;
          std::string v87 = v117;
          if (v71) {
            goto LABEL_119;
          }
LABEL_118:
          *(_OWORD *)&v135.__r_.__value_.__r.__words[1] = *(_OWORD *)((char *)__dst.__r_.__value_.__r.__words + 7);
          v135.__r_.__value_.__s.__data_[0] = 1;
          goto LABEL_119;
        }
      }
      LODWORD(v137.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(v137.__r_.__value_.__r.__words[0]) = v83;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "location context is an unknown value, %d, will gracefully fail by assuming this is a regional tile. please file a radar", (uint8_t *)&v137, 8u);
      goto LABEL_117;
    }
    int v86 = 0;
    v135.__r_.__value_.__s.__data_[0] = 0;
    std::string v87 = v117;
    if ((v71 & 1) == 0) {
      goto LABEL_118;
    }
LABEL_119:
    v134.__r_.__value_.__s.__data_[0] = 0;
    if (v74)
    {
      v137.__r_.__value_.__s.__data_[0] = 0;
      if (v77 == 5) {
        goto LABEL_122;
      }
LABEL_121:
      v137.__r_.__value_.__l.__size_ = v6;
      v137.__r_.__value_.__s.__data_[0] = 1;
      goto LABEL_122;
    }
    *(_OWORD *)&v134.__r_.__value_.__r.__words[1] = *(_OWORD *)((char *)v138.__r_.__value_.__r.__words + 7);
    v134.__r_.__value_.__s.__data_[0] = 1;
    v137.__r_.__value_.__s.__data_[0] = 0;
    if (v77 != 5) {
      goto LABEL_121;
    }
LABEL_122:
    sub_100086C88((uint64_t)v139, rep, (uint64_t *)&v133, &v132, v86, (unsigned __int8 *)&v135, (unsigned __int8 *)&v134, (unsigned __int8 *)&v137);
    if (*v87)
    {
      sub_10021BA44(v115, (long long *)v139);
      if (!v148) {
        goto LABEL_125;
      }
LABEL_124:
      unsigned __int8 v148 = 0;
      goto LABEL_125;
    }
    *(_OWORD *)uint64_t v115 = *(_OWORD *)v139;
    *(void *)(v115 + 16) = *(void *)&v139[16];
    memset(v139, 0, 24);
    *((_OWORD *)v87 + 2) = *(_OWORD *)&v139[24];
    *(void *)&v139[24] = 0;
    *(void *)&v139[32] = 0;
    *(_OWORD *)uint64_t v114 = v140;
    *((_DWORD *)v114 + 4) = v141;
    v87[72] = 0;
    if (v142)
    {
      *int v113 = v143;
      v87[72] = 1;
    }
    v87[96] = 0;
    if (v144)
    {
      *uint64_t v112 = v145;
      v87[96] = 1;
    }
    v87[120] = 0;
    if (v146)
    {
      *((void *)v87 + 16) = v147;
      v87[120] = 1;
    }
    v87[136] = 0;
    int v90 = v148;
    if (v148)
    {
      *((void *)v87 + 18) = v149;
      v87[136] = 1;
    }
    unsigned char *v87 = 1;
    if (v90) {
      goto LABEL_124;
    }
LABEL_125:
    if (v146) {
      char v146 = 0;
    }
    if (v144) {
      char v144 = 0;
    }
    if (v142) {
      char v142 = 0;
    }
    std::string v88 = *(std::__shared_weak_count **)&v139[32];
    if (*(void *)&v139[32]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v139[32] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
      if ((v139[23] & 0x80000000) != 0)
      {
LABEL_159:
        operator delete(*(void **)v139);
        if (!v137.__r_.__value_.__s.__data_[0]) {
          goto LABEL_136;
        }
LABEL_135:
        v137.__r_.__value_.__s.__data_[0] = 0;
        goto LABEL_136;
      }
    }
    else if ((v139[23] & 0x80000000) != 0)
    {
      goto LABEL_159;
    }
    if (v137.__r_.__value_.__s.__data_[0]) {
      goto LABEL_135;
    }
LABEL_136:
    if (v134.__r_.__value_.__s.__data_[0]) {
      v134.__r_.__value_.__s.__data_[0] = 0;
    }
    if (v135.__r_.__value_.__s.__data_[0]) {
      v135.__r_.__value_.__s.__data_[0] = 0;
    }
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v133.__r_.__value_.__l.__data_);
      std::string v89 = (std::__shared_weak_count *)v132.__r_.__value_.__l.__size_;
      if (!v132.__r_.__value_.__l.__size_) {
        goto LABEL_75;
      }
    }
    else
    {
      std::string v89 = (std::__shared_weak_count *)v132.__r_.__value_.__l.__size_;
      if (!v132.__r_.__value_.__l.__size_) {
        goto LABEL_75;
      }
    }
    if (!atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
LABEL_75:
    uint64_t v66 = (sqlite3_stmt *)v123.__r_.__value_.__r.__words[0];
  }
  if (sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 2) != 5
    && sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 3) != 5
    || sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 2) == 5
    && sqlite3_column_type((sqlite3_stmt *)v119.__r_.__value_.__l.__data_, 3) == 5)
  {
    char v71 = 1;
    goto LABEL_91;
  }
  if (qword_10047BF08 == -1)
  {
    uint64_t v92 = qword_10047BF10;
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_FAULT)) {
      goto LABEL_194;
    }
LABEL_195:
    std::string::size_type v93 = qword_10047BF10;
    if (os_signpost_enabled((os_log_t)qword_10047BF10)) {
      goto LABEL_196;
    }
  }
  else
  {
    dispatch_once(&qword_10047BF08, &stru_100460658);
    uint64_t v92 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_FAULT)) {
      goto LABEL_195;
    }
LABEL_194:
    *(void *)int v139 = 68289539;
    *(_WORD *)&v139[8] = 2082;
    *(void *)&v139[10] = "";
    *(_WORD *)&v139[18] = 2082;
    *(void *)&v139[20] = "assert";
    *(_WORD *)&v139[28] = 2081;
    *(void *)&v139[30] = "results.isNull<2>() && results.isNull<3>()";
    _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Metadata version/refresh timestamp is missing\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v139, 0x26u);
    if (qword_10047BF08 == -1) {
      goto LABEL_195;
    }
    dispatch_once(&qword_10047BF08, &stru_100460658);
    std::string::size_type v93 = qword_10047BF10;
    if (os_signpost_enabled((os_log_t)qword_10047BF10))
    {
LABEL_196:
      *(void *)int v139 = 68289539;
      *(_WORD *)&v139[8] = 2082;
      *(void *)&v139[10] = "";
      *(_WORD *)&v139[18] = 2082;
      *(void *)&v139[20] = "assert";
      *(_WORD *)&v139[28] = 2081;
      *(void *)&v139[30] = "results.isNull<2>() && results.isNull<3>()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v93, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Metadata version/refresh timestamp is missing", "{\"msg%{public}.0s\":\"Metadata version/refresh timestamp is missing\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v139, 0x26u);
      if (qword_10047BF08 != -1) {
        dispatch_once(&qword_10047BF08, &stru_100460658);
      }
    }
  }
  char v94 = (id)qword_10047BF10;
  if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
  {
    *(void *)int v139 = 68289539;
    *(_WORD *)&v139[8] = 2082;
    *(void *)&v139[10] = "";
    *(_WORD *)&v139[18] = 2082;
    *(void *)&v139[20] = "assert";
    *(_WORD *)&v139[28] = 2081;
    *(void *)&v139[30] = "results.isNull<2>() && results.isNull<3>()";
    _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Metadata version/refresh timestamp is missing\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v139, 0x26u);
  }
LABEL_209:

  abort_report_np();
  __break(1u);
}

void sub_100085054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,std::runtime_error a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  std::runtime_error::~runtime_error(v75);
  STACK[0x270] = v78;
  if (SLOBYTE(STACK[0x28F]) < 0)
  {
    operator delete((void *)STACK[0x278]);
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a72 & 0x80000000) == 0)
  {
LABEL_3:
    STACK[0x290] = v77;
    if (SLOBYTE(STACK[0x2AF]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  operator delete(a71);
  STACK[0x290] = v77;
  if (SLOBYTE(STACK[0x2AF]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x298]);
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  if ((a74 & 0x80000000) == 0)
  {
LABEL_5:
    STACK[0x250] = v76;
    if (SLOBYTE(STACK[0x26F]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a73);
  STACK[0x250] = v76;
  if (SLOBYTE(STACK[0x26F]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x258]);
    if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
  {
LABEL_7:
    STACK[0x320] = (unint64_t)&off_100451DC0;
    unint64_t v81 = STACK[0x328];
    if (!STACK[0x328]) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a75);
  STACK[0x320] = (unint64_t)&off_100451DC0;
  unint64_t v81 = STACK[0x328];
  if (!STACK[0x328]) {
    goto LABEL_17;
  }
LABEL_15:
  if ((*(unsigned int (**)(unint64_t))(*(void *)v81 + 32))(v81)) {
    STACK[0x328] = 0;
  }
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)&STACK[0x310]);
  uint64_t v82 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v82;
    operator delete(v82);
  }
  std::runtime_error::~runtime_error(&a45);
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  __cxa_free_exception(v75);
  if (*(char *)(v79 - 105) < 0) {
    operator delete(*(void **)(v79 - 128));
  }
  sub_1001F7950((uint64_t)&a48);
  sub_1001F7984(a28);
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a70 < 0)
  {
    operator delete(a65);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100085AC0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void *sub_100085AD4(void *result, uint64_t a2, uint64_t a3)
{
  *double result = a2;
  result[1] = a3;
  return result;
}

void *sub_100085ADC(void *a1)
{
  sqlite3_int64 v3 = "";
  sub_100085B74(&v3, a1);
  return a1;
}

void *sub_100085B24(void *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    sqlite3_int64 v3 = (const char *)a2;
  }
  else {
    sqlite3_int64 v3 = *(const char **)a2;
  }
  size_t v5 = v3;
  sub_100085B74(&v5, a1);
  return a1;
}

size_t sub_100085B74@<X0>(const char **a1@<X1>, void *a2@<X8>)
{
  BOOL v4 = operator new(0x30uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = off_10045D5D8;
  size_t v5 = *a1;
  size_t result = strlen(*a1);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v7 = result;
  if (result >= 0x17)
  {
    uint64_t v9 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v9 = result | 7;
    }
    uint64_t v10 = v9 + 1;
    int v8 = operator new(v9 + 1);
    v4[4] = v7;
    v4[5] = v10 | 0x8000000000000000;
    v4[3] = v8;
  }
  else
  {
    *((unsigned char *)v4 + 47) = result;
    int v8 = v4 + 3;
    if (!result) {
      goto LABEL_9;
    }
  }
  size_t result = (size_t)memmove(v8, v5, v7);
LABEL_9:
  *((unsigned char *)v8 + v7) = 0;
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100085C68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

sqlite3_int64 sub_100085C80@<X0>(uint64_t a1@<X0>, sqlite3_stmt **a2@<X1>, sqlite3_int64 *a3@<X8>)
{
  sqlite3_int64 result = sqlite3_column_type(*a2, 0);
  if (result != 5) {
    sqlite3_int64 result = sqlite3_column_int64(*a2, 0);
  }
  size_t v7 = *(sqlite3_int64 **)(a1 + 8);
  sqlite3_int64 v9 = *v7;
  sqlite3_int64 v8 = v7[1];
  *a3 = result;
  a3[1] = v9;
  a3[2] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100085CF4(uint64_t a1, sqlite3_stmt **a2)
{
  sqlite3_int64 v3 = (uint64_t *)sub_100085D38(*(void *)(a1 + 8));

  sub_100086600(a2, 1, v3);
}

uint64_t sub_100085D38(uint64_t a1)
{
  return *(void *)a1;
}

void sub_100085D40(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  sqlite3_int64 v8 = a3;
  sqlite3_int64 v9 = v8;
  if (v8) {
    os_activity_scope_enter(v8, &state);
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (const char *)a2;
  }
  else {
    uint64_t v11 = *(const char **)a2;
  }
  if (v10 >= 0) {
    int v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v12 = *(_DWORD *)(a2 + 8);
  }
  int v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_100088644(v13, *a1);
  if (v13)
  {
    std::string::size_type v14 = __error();
    sub_100295674(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v23, " w/ ");
    unint64_t v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v27;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    unint64_t v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v21);
    sub_100204FC4(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 8UL, nQueries = 1UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(void *)(a4 + 8) = *a1;
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_100086090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_100205504((std::runtime_error *)(v71 - 184));
    sqlite3_int64 v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1001F7950(v68);

            _Unwind_Resume(a1);
          }
          sub_1001F7950(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_100205504((std::runtime_error *)(v71 - 184));
  sqlite3_int64 v73 = a47;
  if (!a47) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

double sub_10008630C@<D0>(sqlite3_stmt **a1@<X0>, uint64_t a2@<X8>)
{
  if (sqlite3_column_type(*a1, 1) == 5)
  {
    *(unsigned char *)a2 = 0;
    return result;
  }
  size_t v5 = sqlite3_column_text(*a1, 1);
  size_t v6 = strlen((const char *)v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v7;
    unint64_t v12 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v12) = v6;
    p_dst = &__dst;
    if (!v6) {
      goto LABEL_11;
    }
  }
  memmove(p_dst, v5, v7);
LABEL_11:
  *((unsigned char *)p_dst + v7) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)(a2 + 8) = __dst;
  *(void *)(a2 + 24) = v12;
  *(unsigned char *)a2 = 1;
  return result;
}

void sub_100086418(uint64_t a1)
{
  uint64_t v2 = *(sqlite3_stmt **)a1;
  if (!v2) {
    return;
  }
  sqlite3_int64 v3 = sqlite3_sql(v2);
  if (v3) {
    BOOL v4 = v3;
  }
  else {
    BOOL v4 = "<unknown query>";
  }
  size_t v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    long long __dst = p_dst;
    unint64_t v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5) {
LABEL_12:
  }
    memmove(p_dst, v4, v6);
  *((unsigned char *)p_dst + v6) = 0;
  int v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_10047BF08 != -1)
    {
      dispatch_once(&qword_10047BF08, &stru_100460658);
      uint64_t v11 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    uint64_t v11 = qword_10047BF10;
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)std::runtime_error buf = 67240192;
      int v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(void *)a1 = 0;
  unint64_t v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(void *)(a1 + 16) = 0;
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst);
  }
}

void sub_1000865D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100086600(sqlite3_stmt **a1, int a2, uint64_t *a3)
{
  size_t v5 = *a1;
  int v6 = *((char *)a3 + 23);
  int v7 = *((_DWORD *)a3 + 2);
  if (v6 >= 0)
  {
    int v8 = v6;
  }
  else
  {
    a3 = (uint64_t *)*a3;
    int v8 = v7;
  }
  int v9 = sqlite3_bind_text(v5, a2, (const char *)a3, v8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sub_100088644(v9, a1[1]);
  if (v9)
  {
    int v10 = __error();
    sub_100295674(*v10, &v36);
    __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v11 = std::string::append(&v30, " to ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v29, a2);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v13 = &v29;
    }
    else {
      int v13 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v29.__r_.__value_.__l.__size_;
    }
    unint64_t v15 = std::string::append(&v31, (const std::string::value_type *)v13, size);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    sub_1000AE4B0(v27, " w/ ");
    if ((v28 & 0x80u) == 0) {
      long long v17 = (const std::string::value_type *)v27;
    }
    else {
      long long v17 = (const std::string::value_type *)v27[0];
    }
    if ((v28 & 0x80u) == 0) {
      std::string::size_type v18 = v28;
    }
    else {
      std::string::size_type v18 = v27[1];
    }
    unint64_t v19 = std::string::append(&v32, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v36;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v22 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v22 = __dst.__r_.__value_.__l.__size_;
    }
    std::string v23 = std::string::append(&v33, (const std::string::value_type *)p_dst, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v35, &v34);
    v35.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v25);
    sub_100204FC4(&v35, (uint64_t)"void db::resources::statement<8, 1>::bind(int, const std::string &) [nCols = 8, nQueries = 1, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 448, (uint64_t)v25);
  }
}

void sub_1000869C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_100205504((std::runtime_error *)(v78 - 152));
    long long v80 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v78 - 168));
      if (*(char *)(v78 - 169) < 0)
      {
        operator delete(*(void **)(v78 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v78 - 201) & 0x80000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_28;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v78 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_29;
      }
LABEL_28:
      operator delete(*(void **)(v78 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v78 - 233) & 0x80000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_30;
      }
LABEL_29:
      operator delete(a61);
      if ((*(char *)(v78 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_31;
      }
LABEL_30:
      operator delete(*(void **)(v78 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a76 & 0x80000000) == 0) {
          goto LABEL_23;
        }
        goto LABEL_32;
      }
LABEL_31:
      operator delete(a67);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_23:
        if (a74 < 0) {
          goto LABEL_24;
        }
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_24:
        operator delete(a73);
        if ((v77 & 1) == 0)
        {
LABEL_35:
          if (*(char *)(v78 - 65) < 0) {
            operator delete(*(void **)(v78 - 88));
          }
          _Unwind_Resume(a1);
        }
LABEL_34:
        __cxa_free_exception(v76);
        goto LABEL_35;
      }
LABEL_33:
      if (!v77) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
LABEL_15:
    operator delete(v80);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_100205504((std::runtime_error *)(v78 - 152));
  long long v80 = a52;
  if (!a52) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

uint64_t sub_100086C88(uint64_t result, uint64_t a2, uint64_t *a3, void *a4, int a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  uint64_t v9 = *a3;
  *(void *)long long v17 = a3[1];
  *(void *)&v17[7] = *(uint64_t *)((char *)a3 + 15);
  char v10 = *((unsigned char *)a3 + 23);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  int v11 = *a6;
  if (*a6) {
    long long v16 = *(_OWORD *)(a6 + 8);
  }
  int v12 = *a7;
  if (*a7) {
    long long v15 = *(_OWORD *)(a7 + 8);
  }
  int v13 = *a8;
  if (*a8) {
    uint64_t v8 = *((void *)a8 + 1);
  }
  *(void *)double result = v9;
  *(void *)(result + 8) = *(void *)v17;
  *(void *)(result + 15) = *(void *)&v17[7];
  *(unsigned char *)(result + 23) = v10;
  uint64_t v14 = a4[1];
  *(void *)(result + 24) = *a4;
  *(void *)(result + 32) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 40) = 1;
  *(void *)(result + 48) = a2;
  *(_DWORD *)(result + 56) = a5;
  *(unsigned char *)(result + 64) = 0;
  if (v11)
  {
    *(_OWORD *)(result + 72) = v16;
    *(unsigned char *)(result + 64) = 1;
  }
  *(unsigned char *)(result + 88) = 0;
  if (v12)
  {
    *(_OWORD *)(result + 96) = v15;
    *(unsigned char *)(result + 88) = 1;
  }
  *(unsigned char *)(result + 112) = 0;
  if (v13)
  {
    *(void *)(result + 120) = v8;
    *(unsigned char *)(result + 112) = 1;
  }
  *(unsigned char *)(result + 128) = 0;
  return result;
}

uint64_t sub_100086D98(uint64_t a1, uint64_t a2)
{
  *((unsigned char *)&v80.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&v80, "INSERT OR ABORT INTO ");
  BOOL v4 = std::string::append(&v80, "venues");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v82.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = std::string::append(&v82, " VALUES (?, ?, (SELECT IFNULL(MAX(");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v73.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DF97 >= 0) {
    uint64_t v8 = (const std::string::value_type *)&qword_10047DF80;
  }
  else {
    uint64_t v8 = (const std::string::value_type *)qword_10047DF80;
  }
  if (byte_10047DF97 >= 0) {
    std::string::size_type v9 = byte_10047DF97;
  }
  else {
    std::string::size_type v9 = *(void *)&byte_10047DF88;
  }
  char v10 = std::string::append(&v73, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  int v12 = std::string::append(&v74, "), 0) + 1 FROM ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v75, "venues");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v83.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  long long v16 = std::string::append(&v83, "), ?, ?, ?, ?, ?, ?, ?, NULL);");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  std::string::size_type v72 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v83.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v75.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v74.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_22:
    operator delete(v82.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
LABEL_23:
    operator delete(v80.__r_.__value_.__l.__data_);
    goto LABEL_13;
  }
LABEL_21:
  operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_22;
  }
LABEL_12:
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_23;
  }
LABEL_13:
  sub_10008E020(*(sqlite3 ***)(a1 + 40), (uint64_t)__p, 0, (uint64_t)&pStmt);
  uint64_t v18 = sub_10008807C(a2);
  unint64_t v19 = (uint64_t *)sub_100085D38(v18);
  sub_100089014(&pStmt, 1, v19);
  long long v20 = (uint64_t *)nullsub_22(a2);
  sub_100089014(&pStmt, 2, v20);
  int v21 = sub_100089D70(a2);
  if (v21) {
    int v22 = 2 * (v21 == 1);
  }
  else {
    int v22 = 1;
  }
  sub_10008B8EC(&pStmt, 3, v22);
  sub_100089D54(a2, (uint64_t)&v83);
  if (v83.__r_.__value_.__s.__data_[0])
  {
    v75.__r_.__value_.__r.__words[0] = v83.__r_.__value_.__l.__size_;
    time_t v23 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&v75);
    sub_10008969C(&pStmt, 4, v23);
  }
  else
  {
    sub_100088084(&pStmt, 4);
  }
  if (sub_10008ECA0(a2)) {
    sub_10008969C(&pStmt, 5, v24);
  }
  else {
    sub_100088084(&pStmt, 5);
  }
  sub_100089D78(a2, (uint64_t)&v83);
  if (v83.__r_.__value_.__s.__data_[0])
  {
    v75.__r_.__value_.__r.__words[0] = v83.__r_.__value_.__l.__size_;
    time_t v25 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&v75);
    sub_10008969C(&pStmt, 6, v25);
  }
  else
  {
    sub_100088084(&pStmt, 6);
  }
  if (sub_10008ECBC(a2)) {
    sub_10008969C(&pStmt, 7, v26);
  }
  else {
    sub_100088084(&pStmt, 7);
  }
  uint64_t v27 = sub_10008CB4C(a2);
  if (*(unsigned char *)v27)
  {
    v83.__r_.__value_.__r.__words[0] = *(void *)(v27 + 8);
    time_t v28 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&v83);
    sub_10008969C(&pStmt, 8, v28);
  }
  else
  {
    sub_100088084(&pStmt, 8);
  }
  sub_10008CB5C(a2, (uint64_t)&v83);
  if (v83.__r_.__value_.__s.__data_[0])
  {
    v75.__r_.__value_.__r.__words[0] = v83.__r_.__value_.__l.__size_;
    time_t v29 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&v75);
    sub_10008969C(&pStmt, 9, v29);
  }
  else
  {
    sub_100088084(&pStmt, 9);
  }
  while (1)
  {
    while (1)
    {
      do
      {
        int v30 = sqlite3_step(pStmt);
        int v31 = v30;
      }
      while (v30 == 100);
      if (v30 == 101) {
        break;
      }
      if (v30 == 19)
      {
        if (qword_10047BF08 == -1)
        {
          std::string v33 = qword_10047BF10;
          if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
            goto LABEL_51;
          }
        }
        else
        {
          dispatch_once(&qword_10047BF08, &stru_100460658);
          std::string v33 = qword_10047BF10;
          if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO))
          {
LABEL_51:
            if (sqlite3_reset(pStmt) != 19)
            {
              sub_100088644(v31, db);
              long long v53 = __error();
              sub_100295674(*v53, &v82);
              __cxa_allocate_exception(0x40uLL);
              sub_1000AE4B0(&v78, " w/ ");
              long long v54 = std::string::insert(&v78, 0, "Failed sqlite3_step");
              long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
              v79.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v55;
              v54->__r_.__value_.__l.__size_ = 0;
              v54->__r_.__value_.__r.__words[2] = 0;
              v54->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                sub_1000559FC(&__dst, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
              }
              else {
                std::string __dst = v82;
              }
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_dst = &__dst;
              }
              else {
                p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
              }
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = __dst.__r_.__value_.__l.__size_;
              }
              uint64_t v66 = std::string::append(&v79, (const std::string::value_type *)p_dst, size);
              long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
              v80.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v67;
              v66->__r_.__value_.__l.__size_ = 0;
              v66->__r_.__value_.__r.__words[2] = 0;
              v66->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(&v81, &v80);
              v81.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
              sub_10018E868((uint64_t)v76);
              sub_100204FC4(&v81, (uint64_t)"void db::resources::statement<0, 9>::run(Cb &&, ConstraintHandler &&) [nCols = 0, nQueries = 9, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:704:23), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:704:29)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 508, (uint64_t)v76);
            }
            goto LABEL_52;
          }
        }
        LOWORD(v83.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Query constraint violation", (uint8_t *)&v83, 2u);
        goto LABEL_51;
      }
      sub_100088644(v30, db);
      if (v31)
      {
        int v47 = __error();
        sub_100295674(*v47, &v82);
        __cxa_allocate_exception(0x40uLL);
        sub_1000AE4B0(&v78, " w/ ");
        long long v48 = std::string::insert(&v78, 0, "Failed sqlite3_step");
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v79.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          sub_1000559FC(&__dst, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
        }
        else {
          std::string __dst = v82;
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v56 = &__dst;
        }
        else {
          long long v56 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v57 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v57 = __dst.__r_.__value_.__l.__size_;
        }
        long long v58 = std::string::append(&v79, (const std::string::value_type *)v56, v57);
        long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v80.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(&v81, &v80);
        v81.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
        sub_10018E868((uint64_t)v76);
        sub_100204FC4(&v81, (uint64_t)"void db::resources::statement<0, 9>::run(Cb &&, ConstraintHandler &&) [nCols = 0, nQueries = 9, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:704:23), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:704:29)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v76);
      }
    }
    int v32 = sqlite3_reset(pStmt);
    sub_100088644(v32, db);
    if (v32)
    {
      std::string::size_type v50 = __error();
      sub_100295674(*v50, &v82);
      __cxa_allocate_exception(0x40uLL);
      sub_1000AE4B0(&v78, " w/ ");
      int v51 = std::string::insert(&v78, 0, "Failed to execute query");
      long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        sub_1000559FC(&__dst, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
      }
      else {
        std::string __dst = v82;
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v60 = &__dst;
      }
      else {
        unint64_t v60 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v61 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v61 = __dst.__r_.__value_.__l.__size_;
      }
      long long v62 = std::string::append(&v79, (const std::string::value_type *)v60, v61);
      long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v81, &v80);
      v81.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
      sub_10018E868((uint64_t)v76);
      sub_100204FC4(&v81, (uint64_t)"void db::resources::statement<0, 9>::run(Cb &&, ConstraintHandler &&) [nCols = 0, nQueries = 9, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:704:23), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:704:29)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v76);
    }
LABEL_52:
    std::string v34 = (char **)sub_10008807C(a2);
    if (sub_100089D94(a1, v34)) {
      break;
    }
    if (qword_10047BF08 == -1)
    {
      std::string v36 = (id)qword_10047BF10;
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
        goto LABEL_40;
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_100460658);
      std::string v36 = (id)qword_10047BF10;
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO)) {
        goto LABEL_40;
      }
    }
    std::string v37 = (char **)sub_10008807C(a2);
    std::string::size_type v38 = sub_1000900B8(v37);
    uint64_t v39 = sub_10008807C(a2);
    uint64_t v40 = sub_100085D38(v39);
    int v41 = *(char *)(v40 + 23);
    if (v41 >= 0) {
      long long v42 = (uint64_t *)v40;
    }
    else {
      long long v42 = *(uint64_t **)v40;
    }
    if (v41 >= 0) {
      unint64_t v43 = *(unsigned __int8 *)(v40 + 23);
    }
    else {
      unint64_t v43 = *(void *)(v40 + 8);
    }
    unint64_t v44 = sub_100077FAC((uint64_t)&v75, v42, v43);
    LODWORD(v83.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)v83.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
    WORD2(v83.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v83.__r_.__value_.__r.__words[1] + 6) = v44;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Failed to insert resource %{private}s (%lu). Retrying", (uint8_t *)&v83, 0x16u);
LABEL_40:
  }
  uint64_t v45 = v35;
  sub_10008B704((uint64_t)&pStmt);

  if (SHIBYTE(v72) < 0) {
    operator delete(__p[0]);
  }
  return v45;
}

void sub_100087C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  if (a33 < 0)
  {
    operator delete(a28);
    if (a26 < 0)
    {
LABEL_3:
      operator delete(__p);
      if (a47 < 0)
      {
LABEL_7:
        operator delete(a42);
        if ((a40 & 0x80000000) == 0) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
LABEL_12:
      if ((a40 & 0x80000000) == 0)
      {
LABEL_8:
        if (a61 < 0) {
          goto LABEL_9;
        }
        goto LABEL_14;
      }
LABEL_13:
      operator delete(a35);
      if (a61 < 0)
      {
LABEL_9:
        operator delete(a56);
        if ((a54 & 0x80000000) == 0) {
          goto LABEL_10;
        }
        goto LABEL_15;
      }
LABEL_14:
      if ((a54 & 0x80000000) == 0)
      {
LABEL_10:
        sub_100205504((std::runtime_error *)(v78 - 176));
        std::string v80 = a67;
        if (!a67)
        {
LABEL_17:
          std::runtime_error::~runtime_error((std::runtime_error *)(v78 - 224));
          if (*(char *)(v78 - 233) < 0)
          {
            operator delete(*(void **)(v78 - 256));
            if (a72 < 0)
            {
LABEL_21:
              operator delete(a70);
              if ((a76 & 0x80000000) == 0) {
                goto LABEL_22;
              }
              goto LABEL_26;
            }
          }
          else if (a72 < 0)
          {
            goto LABEL_21;
          }
          if ((a76 & 0x80000000) == 0)
          {
LABEL_22:
            if (a74 < 0) {
              goto LABEL_23;
            }
            goto LABEL_27;
          }
LABEL_26:
          operator delete(a75);
          if (a74 < 0)
          {
LABEL_23:
            operator delete(a73);
            if ((v77 & 1) == 0)
            {
LABEL_29:
              if (*(char *)(v78 - 185) < 0) {
                operator delete(*(void **)(v78 - 208));
              }
              sub_1001F7A48((uint64_t)&a12);
              if (a20 < 0) {
                operator delete(a15);
              }
              _Unwind_Resume(a1);
            }
LABEL_28:
            __cxa_free_exception(v76);
            goto LABEL_29;
          }
LABEL_27:
          if (!v77) {
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_16:
        a68 = (uint64_t)v80;
        operator delete(v80);
        goto LABEL_17;
      }
LABEL_15:
      operator delete(a49);
      sub_100205504((std::runtime_error *)(v78 - 176));
      std::string v80 = a67;
      if (!a67) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else if (a26 < 0)
  {
    goto LABEL_3;
  }
  if (a47 < 0) {
    goto LABEL_7;
  }
  goto LABEL_12;
}

uint64_t sub_10008807C(uint64_t a1)
{
  return a1 + 24;
}

void sub_100088084(sqlite3_stmt **a1, int a2)
{
  int v4 = sqlite3_bind_null(*a1, a2);
  sub_100088644(v4, a1[1]);
  if (v4)
  {
    long long v5 = __error();
    sub_100295674(*v5, &v25);
    __cxa_allocate_exception(0x40uLL);
    std::to_string(&v20, a2);
    int v6 = std::string::insert(&v20, 0, "Failed to bind null to ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_1000AE4B0(v18, " w/ ");
    if ((v19 & 0x80u) == 0) {
      uint64_t v8 = (const std::string::value_type *)v18;
    }
    else {
      uint64_t v8 = (const std::string::value_type *)v18[0];
    }
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v9 = v19;
    }
    else {
      std::string::size_type v9 = v18[1];
    }
    char v10 = std::string::append(&v21, v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v25;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = std::string::append(&v22, (const std::string::value_type *)p_dst, size);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v24, &v23);
    v24.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v16);
    sub_100204FC4(&v24, (uint64_t)"void db::resources::statement<0, 9>::bind(int, std::nullptr_t) [nCols = 0, nQueries = 9, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 433, (uint64_t)v16);
  }
}

void sub_1000883D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_100205504((std::runtime_error *)(v74 - 152));
    unint64_t v76 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v74 - 168));
      if (*(char *)(v74 - 169) < 0)
      {
        operator delete(*(void **)(v74 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v74 - 201) & 0x80000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_26;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v74 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a67 & 0x80000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_27;
      }
LABEL_26:
      operator delete(*(void **)(v74 - 224));
      if ((a67 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v74 - 233) & 0x80000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_28;
      }
LABEL_27:
      operator delete(a62);
      if ((*(char *)(v74 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if (a72 < 0) {
          goto LABEL_22;
        }
        goto LABEL_29;
      }
LABEL_28:
      operator delete(*(void **)(v74 - 256));
      if (a72 < 0)
      {
LABEL_22:
        operator delete(a68);
        if ((v73 & 1) == 0)
        {
LABEL_31:
          if (*(char *)(v74 - 65) < 0) {
            operator delete(*(void **)(v74 - 88));
          }
          _Unwind_Resume(a1);
        }
LABEL_30:
        __cxa_free_exception(v72);
        goto LABEL_31;
      }
LABEL_29:
      if (!v73) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
LABEL_15:
    operator delete(v76);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_100205504((std::runtime_error *)(v74 - 152));
  unint64_t v76 = a52;
  if (!a52) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

void sub_100088644(char a1, sqlite3 *db)
{
  if (a1 == 11)
  {
    if (!db)
    {
      if (qword_10047BF08 == -1)
      {
        int v12 = qword_10047BF10;
        if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_FAULT)) {
          return;
        }
      }
      else
      {
        dispatch_once(&qword_10047BF08, &stru_100463950);
        int v12 = qword_10047BF10;
        if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_FAULT)) {
          return;
        }
      }
      *(_WORD *)std::runtime_error buf = 0;
      long long v13 = "null sqlite3 handle for corrupt database, we can't take any action";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, v13, buf, 2u);
      return;
    }
    sqlite3_int64 v3 = sqlite3_db_filename(db, "main");
    if (v3)
    {
      int v4 = v3;
      int v5 = sqlite3_close(db);
      if (!v5) {
        goto LABEL_8;
      }
      int v6 = v5;
      if (qword_10047BF08 == -1)
      {
        long long v7 = qword_10047BF10;
        if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
          goto LABEL_8;
        }
      }
      else
      {
        dispatch_once(&qword_10047BF08, &stru_100463950);
        long long v7 = qword_10047BF10;
        if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
        {
LABEL_8:
          size_t v9 = strlen(v4);
          if (v9 > 0x7FFFFFFFFFFFFFF7) {
            sub_1000A6968();
          }
          size_t v10 = v9;
          if (v9 >= 0x17)
          {
            uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v9 | 7) != 0x17) {
              uint64_t v14 = v9 | 7;
            }
            uint64_t v15 = v14 + 1;
            long long v11 = operator new(v14 + 1);
            size_t v68 = v10;
            int64_t v69 = v15 | 0x8000000000000000;
            long long v67 = v11;
          }
          else
          {
            HIBYTE(v69) = v9;
            long long v11 = &v67;
            if (!v9)
            {
LABEL_23:
              *((unsigned char *)v11 + v10) = 0;
              if (qword_10047BF08 == -1)
              {
                long long v16 = qword_10047BF10;
                if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_28;
                }
              }
              else
              {
                dispatch_once(&qword_10047BF08, &stru_100463950);
                long long v16 = qword_10047BF10;
                if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_28;
                }
              }
              uint64_t v18 = &v67;
              if (v69 < 0) {
                uint64_t v18 = v67;
              }
              *(_DWORD *)std::runtime_error buf = 136446210;
              *(void *)std::string v80 = v18;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Deleting database and ancillary files at path, %{public}s", buf, 0xCu);
LABEL_28:
              if (v69 >= 0) {
                unsigned __int8 v19 = (const std::__fs::filesystem::path *)&v67;
              }
              else {
                unsigned __int8 v19 = (const std::__fs::filesystem::path *)v67;
              }
              if (remove(v19, v17))
              {
                if (qword_10047BF08 == -1)
                {
                  std::string v21 = qword_10047BF10;
                  if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_38;
                  }
                }
                else
                {
                  dispatch_once(&qword_10047BF08, &stru_100463950);
                  std::string v21 = qword_10047BF10;
                  if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_38;
                  }
                }
                if (v69 >= 0) {
                  std::string v22 = &v67;
                }
                else {
                  std::string v22 = v67;
                }
                int v23 = *__error();
                std::runtime_error v24 = __error();
                std::string v25 = strerror(*v24);
                *(_DWORD *)std::runtime_error buf = 136446722;
                *(void *)std::string v80 = v22;
                *(_WORD *)&v80[8] = 1026;
                int v81 = v23;
                __int16 v82 = 2082;
                std::string v83 = v25;
                _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "could not remove file, path, %{public}s, errno, %{public}d, error, %{public}s", buf, 0x1Cu);
              }
LABEL_38:
              int v26 = SHIBYTE(v69);
              if (v69 >= 0) {
                size_t v27 = HIBYTE(v69);
              }
              else {
                size_t v27 = v68;
              }
              unint64_t v28 = v27 + 8;
              if (v27 + 8 > 0x7FFFFFFFFFFFFFF7) {
                sub_1000A6968();
              }
              if (v28 >= 0x17)
              {
                uint64_t v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v28 | 7) != 0x17) {
                  uint64_t v30 = v28 | 7;
                }
                uint64_t v31 = v30 + 1;
                p_dst = (void **)operator new(v30 + 1);
                size_t v77 = v27 + 8;
                int64_t v78 = v31 | 0x8000000000000000;
                std::string __dst = (std::__fs::filesystem::path *)p_dst;
              }
              else
              {
                size_t v77 = 0;
                int64_t v78 = 0;
                std::string __dst = 0;
                p_dst = (void **)&__dst;
                HIBYTE(v78) = v27 + 8;
                if (!v27) {
                  goto LABEL_52;
                }
              }
              if (v26 >= 0) {
                int v32 = &v67;
              }
              else {
                int v32 = v67;
              }
              memmove(p_dst, v32, v27);
LABEL_52:
              strcpy((char *)p_dst + v27, "-journal");
              if (v78 >= 0) {
                std::string v33 = (const std::__fs::filesystem::path *)&__dst;
              }
              else {
                std::string v33 = __dst;
              }
              if (remove(v33, v20))
              {
                if (qword_10047BF08 == -1)
                {
                  uint64_t v35 = qword_10047BF10;
                  if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_62;
                  }
                }
                else
                {
                  dispatch_once(&qword_10047BF08, &stru_100463950);
                  uint64_t v35 = qword_10047BF10;
                  if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_62;
                  }
                }
                if (v78 >= 0) {
                  p_std::string::pointer data = (void **)&__dst;
                }
                else {
                  p_std::string::pointer data = (void **)&__dst->__pn_.__r_.__value_.__l.__data_;
                }
                int v37 = *__error();
                std::string::size_type v38 = __error();
                uint64_t v39 = strerror(*v38);
                *(_DWORD *)std::runtime_error buf = 136446722;
                *(void *)std::string v80 = p_data;
                *(_WORD *)&v80[8] = 1026;
                int v81 = v37;
                __int16 v82 = 2082;
                std::string v83 = v39;
                _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#warning, could not unlink file, path, %{public}s, errno, %{public}d, error, %{public}s", buf, 0x1Cu);
              }
LABEL_62:
              int v40 = SHIBYTE(v69);
              if (v69 >= 0) {
                size_t v41 = HIBYTE(v69);
              }
              else {
                size_t v41 = v68;
              }
              unint64_t v42 = v41 + 4;
              if (v41 + 4 > 0x7FFFFFFFFFFFFFF7) {
                sub_1000A6968();
              }
              if (v42 >= 0x17)
              {
                uint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v42 | 7) != 0x17) {
                  uint64_t v44 = v42 | 7;
                }
                uint64_t v45 = v44 + 1;
                unint64_t v43 = operator new(v44 + 1);
                size_t v74 = v41 + 4;
                int64_t v75 = v45 | 0x8000000000000000;
                int v73 = v43;
              }
              else
              {
                size_t v74 = 0;
                int64_t v75 = 0;
                int v73 = 0;
                unint64_t v43 = &v73;
                HIBYTE(v75) = v41 + 4;
                if (!v41) {
                  goto LABEL_76;
                }
              }
              if (v40 >= 0) {
                long long v46 = &v67;
              }
              else {
                long long v46 = v67;
              }
              memmove(v43, v46, v41);
LABEL_76:
              strcpy((char *)v43 + v41, "-wal");
              if (v75 >= 0) {
                int v47 = (const std::__fs::filesystem::path *)&v73;
              }
              else {
                int v47 = (const std::__fs::filesystem::path *)v73;
              }
              if (remove(v47, v34))
              {
                if (qword_10047BF08 == -1)
                {
                  long long v49 = qword_10047BF10;
                  if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_86;
                  }
                }
                else
                {
                  dispatch_once(&qword_10047BF08, &stru_100463950);
                  long long v49 = qword_10047BF10;
                  if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_86;
                  }
                }
                if (v75 >= 0) {
                  std::string::size_type v50 = &v73;
                }
                else {
                  std::string::size_type v50 = v73;
                }
                int v51 = *__error();
                long long v52 = __error();
                long long v53 = strerror(*v52);
                *(_DWORD *)std::runtime_error buf = 136446722;
                *(void *)std::string v80 = v50;
                *(_WORD *)&v80[8] = 1026;
                int v81 = v51;
                __int16 v82 = 2082;
                std::string v83 = v53;
                _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#warning, could not unlink file, path, %{public}s, errno, %{public}d, error, %{public}s", buf, 0x1Cu);
              }
LABEL_86:
              int v54 = SHIBYTE(v69);
              if (v69 >= 0) {
                size_t v55 = HIBYTE(v69);
              }
              else {
                size_t v55 = v68;
              }
              unint64_t v56 = v55 + 4;
              if (v55 + 4 > 0x7FFFFFFFFFFFFFF7) {
                sub_1000A6968();
              }
              if (v56 >= 0x17)
              {
                uint64_t v58 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v56 | 7) != 0x17) {
                  uint64_t v58 = v56 | 7;
                }
                uint64_t v59 = v58 + 1;
                p_p = operator new(v58 + 1);
                size_t v71 = v55 + 4;
                int64_t v72 = v59 | 0x8000000000000000;
                long long __p = p_p;
              }
              else
              {
                size_t v71 = 0;
                int64_t v72 = 0;
                long long __p = 0;
                p_p = &__p;
                HIBYTE(v72) = v55 + 4;
                if (!v55) {
                  goto LABEL_100;
                }
              }
              if (v54 >= 0) {
                unint64_t v60 = &v67;
              }
              else {
                unint64_t v60 = v67;
              }
              memmove(p_p, v60, v55);
LABEL_100:
              strcpy((char *)p_p + v55, "-shm");
              if (v72 >= 0) {
                std::string::size_type v61 = (const std::__fs::filesystem::path *)&__p;
              }
              else {
                std::string::size_type v61 = (const std::__fs::filesystem::path *)__p;
              }
              if (remove(v61, v48))
              {
                if (qword_10047BF08 == -1)
                {
                  long long v62 = qword_10047BF10;
                  if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_110;
                  }
                }
                else
                {
                  dispatch_once(&qword_10047BF08, &stru_100463950);
                  long long v62 = qword_10047BF10;
                  if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_110;
                  }
                }
                if (v72 >= 0) {
                  long long v63 = &__p;
                }
                else {
                  long long v63 = __p;
                }
                int v64 = *__error();
                uint64_t v65 = __error();
                uint64_t v66 = strerror(*v65);
                *(_DWORD *)std::runtime_error buf = 136446722;
                *(void *)std::string v80 = v63;
                *(_WORD *)&v80[8] = 1026;
                int v81 = v64;
                __int16 v82 = 2082;
                std::string v83 = v66;
                _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#warning, could not unlink file, path, %{public}s, errno, %{public}d, error, %{public}s", buf, 0x1Cu);
              }
LABEL_110:
              if (SHIBYTE(v72) < 0)
              {
                operator delete(__p);
                if ((SHIBYTE(v75) & 0x80000000) == 0)
                {
LABEL_112:
                  if ((SHIBYTE(v78) & 0x80000000) == 0) {
                    goto LABEL_113;
                  }
                  goto LABEL_118;
                }
              }
              else if ((SHIBYTE(v75) & 0x80000000) == 0)
              {
                goto LABEL_112;
              }
              operator delete(v73);
              if ((SHIBYTE(v78) & 0x80000000) == 0)
              {
LABEL_113:
                if ((SHIBYTE(v69) & 0x80000000) == 0) {
                  goto LABEL_114;
                }
LABEL_119:
                operator delete(v67);
LABEL_114:
                off_10047CBE0();
              }
LABEL_118:
              operator delete(__dst);
              if ((SHIBYTE(v69) & 0x80000000) == 0) {
                goto LABEL_114;
              }
              goto LABEL_119;
            }
          }
          memmove(v11, v4, v10);
          goto LABEL_23;
        }
      }
      int v8 = *__error();
      *(_DWORD *)std::runtime_error buf = 67240448;
      *(_DWORD *)std::string v80 = v6;
      *(_WORD *)&v80[4] = 1026;
      *(_DWORD *)&v80[6] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "failed to successfully close db handle, rc, %{public}d, errno, %{public}d", buf, 0xEu);
      goto LABEL_8;
    }
    if (qword_10047BF08 == -1)
    {
      int v12 = qword_10047BF10;
      if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_FAULT))
      {
LABEL_17:
        *(_WORD *)std::runtime_error buf = 0;
        long long v13 = "null filepath for corrupt databse, we can't take any action";
        goto LABEL_18;
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_100463950);
      int v12 = qword_10047BF10;
      if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_FAULT)) {
        goto LABEL_17;
      }
    }
  }
}

void sub_100088F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a14 & 0x80000000) == 0) {
LABEL_10:
    }
      _Unwind_Resume(exception_object);
LABEL_9:
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  operator delete(a27);
  if ((a14 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_100089014(sqlite3_stmt **a1, int a2, uint64_t *a3)
{
  int v5 = *a1;
  int v6 = *((char *)a3 + 23);
  int v7 = *((_DWORD *)a3 + 2);
  if (v6 >= 0)
  {
    int v8 = v6;
  }
  else
  {
    a3 = (uint64_t *)*a3;
    int v8 = v7;
  }
  int v9 = sqlite3_bind_text(v5, a2, (const char *)a3, v8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sub_100088644(v9, a1[1]);
  if (v9)
  {
    size_t v10 = __error();
    sub_100295674(*v10, &v36);
    __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    long long v11 = std::string::append(&v30, " to ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v29, a2);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v13 = &v29;
    }
    else {
      long long v13 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v29.__r_.__value_.__l.__size_;
    }
    uint64_t v15 = std::string::append(&v31, (const std::string::value_type *)v13, size);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    sub_1000AE4B0(v27, " w/ ");
    if ((v28 & 0x80u) == 0) {
      long long v17 = (const std::string::value_type *)v27;
    }
    else {
      long long v17 = (const std::string::value_type *)v27[0];
    }
    if ((v28 & 0x80u) == 0) {
      std::string::size_type v18 = v28;
    }
    else {
      std::string::size_type v18 = v27[1];
    }
    unsigned __int8 v19 = std::string::append(&v32, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v36;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v22 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v22 = __dst.__r_.__value_.__l.__size_;
    }
    int v23 = std::string::append(&v33, (const std::string::value_type *)p_dst, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v35, &v34);
    v35.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v25);
    sub_100204FC4(&v35, (uint64_t)"void db::resources::statement<0, 9>::bind(int, const std::string &) [nCols = 0, nQueries = 9, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 448, (uint64_t)v25);
  }
}

void sub_1000893D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_100205504((std::runtime_error *)(v78 - 152));
    std::string v80 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v78 - 168));
      if (*(char *)(v78 - 169) < 0)
      {
        operator delete(*(void **)(v78 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v78 - 201) & 0x80000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_28;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v78 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_29;
      }
LABEL_28:
      operator delete(*(void **)(v78 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v78 - 233) & 0x80000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_30;
      }
LABEL_29:
      operator delete(a61);
      if ((*(char *)(v78 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_31;
      }
LABEL_30:
      operator delete(*(void **)(v78 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a76 & 0x80000000) == 0) {
          goto LABEL_23;
        }
        goto LABEL_32;
      }
LABEL_31:
      operator delete(a67);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_23:
        if (a74 < 0) {
          goto LABEL_24;
        }
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_24:
        operator delete(a73);
        if ((v77 & 1) == 0)
        {
LABEL_35:
          if (*(char *)(v78 - 65) < 0) {
            operator delete(*(void **)(v78 - 88));
          }
          _Unwind_Resume(a1);
        }
LABEL_34:
        __cxa_free_exception(v76);
        goto LABEL_35;
      }
LABEL_33:
      if (!v77) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
LABEL_15:
    operator delete(v80);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_100205504((std::runtime_error *)(v78 - 152));
  std::string v80 = a52;
  if (!a52) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

void sub_10008969C(sqlite3_stmt **a1, int a2, sqlite3_int64 a3)
{
  int v6 = sqlite3_bind_int64(*a1, a2, a3);
  sub_100088644(v6, a1[1]);
  if (v6)
  {
    int v7 = __error();
    sub_100295674(*v7, &v36);
    __cxa_allocate_exception(0x40uLL);
    std::to_string(&v29, a3);
    int v8 = std::string::insert(&v29, 0, "Failed to bind ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    size_t v10 = std::string::append(&v30, " to ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v28, a2);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v12 = &v28;
    }
    else {
      long long v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v28.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = std::string::append(&v31, (const std::string::value_type *)v12, size);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_1000AE4B0(v26, " w/ ");
    if ((v27 & 0x80u) == 0) {
      long long v16 = (const std::string::value_type *)v26;
    }
    else {
      long long v16 = (const std::string::value_type *)v26[0];
    }
    if ((v27 & 0x80u) == 0) {
      std::string::size_type v17 = v27;
    }
    else {
      std::string::size_type v17 = v26[1];
    }
    std::string::size_type v18 = std::string::append(&v32, v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v36;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = __dst.__r_.__value_.__l.__size_;
    }
    std::string::size_type v22 = std::string::append(&v33, (const std::string::value_type *)p_dst, v21);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v35, &v34);
    v35.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v24);
    sub_100204FC4(&v35, (uint64_t)"void db::resources::statement<0, 9>::bind(int, int64_t) [nCols = 0, nQueries = 9, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 417, (uint64_t)v24);
  }
}

void sub_100089A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_100205504((std::runtime_error *)(v80 - 152));
    __int16 v82 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v80 - 168));
      if (*(char *)(v80 - 169) < 0)
      {
        operator delete(*(void **)(v80 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v80 - 201) & 0x80000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_29;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v80 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_30;
      }
LABEL_29:
      operator delete(*(void **)(v80 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v80 - 233) & 0x80000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_31;
      }
LABEL_30:
      operator delete(a61);
      if ((*(char *)(v80 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_32;
      }
LABEL_31:
      operator delete(*(void **)(v80 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a78 & 0x80000000) == 0) {
          goto LABEL_23;
        }
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a67);
      if ((a78 & 0x80000000) == 0)
      {
LABEL_23:
        if ((a76 & 0x80000000) == 0) {
          goto LABEL_24;
        }
        goto LABEL_34;
      }
LABEL_33:
      operator delete(a77);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_24:
        if (a74 < 0) {
          goto LABEL_25;
        }
        goto LABEL_35;
      }
LABEL_34:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_25:
        operator delete(a73);
        if ((v79 & 1) == 0)
        {
LABEL_37:
          if (*(char *)(v80 - 65) < 0) {
            operator delete(*(void **)(v80 - 88));
          }
          _Unwind_Resume(a1);
        }
LABEL_36:
        __cxa_free_exception(v78);
        goto LABEL_37;
      }
LABEL_35:
      if (!v79) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
LABEL_15:
    operator delete(v82);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_100205504((std::runtime_error *)(v80 - 152));
  __int16 v82 = a52;
  if (!a52) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

uint64_t sub_100089D54@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 64);
  if (v2)
  {
    *(void *)(a2 + 8) = *(void *)(result + 80);
    char v2 = 1;
  }
  *(unsigned char *)a2 = v2;
  return result;
}

uint64_t sub_100089D70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_100089D78@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 88);
  if (v2)
  {
    *(void *)(a2 + 8) = *(void *)(result + 104);
    char v2 = 1;
  }
  *(unsigned char *)a2 = v2;
  return result;
}

uint64_t sub_100089D94(uint64_t a1, char **a2)
{
  std::operator+<char>();
  int v4 = std::string::append(&__dst, " FROM ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = std::string::append(&v50, "venues");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v51, " WHERE ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (byte_10047DF67 >= 0) {
    size_t v10 = (const std::string::value_type *)&qword_10047DF50;
  }
  else {
    size_t v10 = (const std::string::value_type *)qword_10047DF50;
  }
  if (byte_10047DF67 >= 0) {
    std::string::size_type v11 = byte_10047DF67;
  }
  else {
    std::string::size_type v11 = *(void *)&byte_10047DF58;
  }
  long long v12 = std::string::append(&v59, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(void *)&v60[16] = *((void *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)unint64_t v60 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append((std::string *)v60, " = ?;");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v49 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((v60[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v60);
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_30:
    operator delete(v50.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_31:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_12;
  }
LABEL_29:
  operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_11:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_31;
  }
LABEL_12:
  sub_100082248(*(sqlite3 ***)(a1 + 40), (uint64_t)__p, 0, (uint64_t)&pStmt);
  long long v16 = (uint64_t *)sub_100085D38((uint64_t)a2);
  sub_100081BC0(&pStmt, 1, v16);
  unsigned int v17 = 0;
  std::string::size_type v18 = pStmt;
  for (uint64_t i = pStmt; ; uint64_t i = pStmt)
  {
    while (1)
    {
      int v20 = sqlite3_step(i);
      int v21 = v20;
      if (v20 == 100) {
        break;
      }
      if (v20 == 101)
      {
        int v22 = sqlite3_reset(pStmt);
        sub_100088644(v22, db);
        if (v22)
        {
          std::string::size_type v38 = __error();
          sub_100295674(*v38, &__dst);
          __cxa_allocate_exception(0x40uLL);
          *((unsigned char *)&v54.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&v54, " w/ ");
          uint64_t v39 = std::string::insert(&v54, 0, "Failed to execute query");
          long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v55.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            sub_1000559FC(&v53, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          }
          else {
            std::string v53 = __dst;
          }
          if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v41 = &v53;
          }
          else {
            size_t v41 = (std::string *)v53.__r_.__value_.__r.__words[0];
          }
          if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v53.__r_.__value_.__l.__size_;
          }
          unint64_t v43 = std::string::append(&v55, (const std::string::value_type *)v41, size);
          long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v56.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(&v57, &v56);
          v57.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
          sub_10018E868((uint64_t)v52);
          sub_100204FC4(&v57, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:523:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v52);
        }
        sub_1000819D8((uint64_t)&pStmt);

        if (SHIBYTE(v49) < 0) {
          operator delete(__p[0]);
        }
        return v17;
      }
      if (v20 == 19)
      {
        if (qword_10047BF08 == -1)
        {
          std::string v30 = qword_10047BF10;
          if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
            goto LABEL_45;
          }
        }
        else
        {
          dispatch_once(&qword_10047BF08, &stru_100460658);
          std::string v30 = qword_10047BF10;
          if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO))
          {
LABEL_45:
            *(_WORD *)unint64_t v60 = 0;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Query constraint violation", v60, 2u);
          }
        }
        __cxa_allocate_exception(0x40uLL);
        v51.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        *(_OWORD *)&v51.__r_.__value_.__r.__words[1] = xmmword_1003F6340;
        strcpy(v51.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
        std::runtime_error::runtime_error((std::runtime_error *)&v56, &v51);
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100460ED8;
        sub_10018E868((uint64_t)&v50);
        sub_10020E390((std::runtime_error *)&v56, (uint64_t)"auto db::resources::statement<1, 1>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:523:19) &&)::(anonymous class)::operator()() const [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v50);
      }
      sub_100088644(v20, db);
      if (v21)
      {
        std::string v31 = __error();
        sub_100295674(*v31, &__dst);
        __cxa_allocate_exception(0x40uLL);
        *((unsigned char *)&v54.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v54, " w/ ");
        std::string v32 = std::string::insert(&v54, 0, "Failed sqlite3_step");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v55.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_1000559FC(&v53, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string v53 = __dst;
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v34 = &v53;
        }
        else {
          std::string v34 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v35 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v35 = v53.__r_.__value_.__l.__size_;
        }
        std::string v36 = std::string::append(&v55, (const std::string::value_type *)v34, v35);
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(&v57, &v56);
        v57.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
        sub_10018E868((uint64_t)v52);
        sub_100204FC4(&v57, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:523:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v52);
      }
LABEL_14:
      uint64_t i = pStmt;
    }
    if (v17) {
      break;
    }
    if (sqlite3_column_type(v18, 0) == 5)
    {
      unsigned int v17 = 1;
      goto LABEL_14;
    }
    sqlite3_column_int64(v18, 0);
    unsigned int v17 = 1;
  }
  if (qword_10047BF08 != -1) {
    dispatch_once(&qword_10047BF08, &stru_100460658);
  }
  long long v24 = (id)qword_10047BF10;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
  {
    std::string v25 = sub_1000900B8(a2);
    *(void *)unint64_t v60 = 68289795;
    *(_WORD *)&v60[8] = 2082;
    *(void *)&v60[10] = "";
    *(_WORD *)&v60[18] = 2081;
    *(void *)&v60[20] = v25;
    __int16 v61 = 2082;
    long long v62 = "assert";
    __int16 v63 = 2081;
    int v64 = "!result";
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Multiple matches for resource\", \"resource\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v60, 0x30u);
  }

  if (qword_10047BF08 == -1)
  {
    int v26 = (id)qword_10047BF10;
    if (os_signpost_enabled(v26)) {
      goto LABEL_38;
    }
  }
  else
  {
    dispatch_once(&qword_10047BF08, &stru_100460658);
    int v26 = (id)qword_10047BF10;
    if (os_signpost_enabled(v26))
    {
LABEL_38:
      unsigned __int8 v27 = sub_1000900B8(a2);
      *(void *)unint64_t v60 = 68289795;
      *(_WORD *)&v60[8] = 2082;
      *(void *)&v60[10] = "";
      *(_WORD *)&v60[18] = 2081;
      *(void *)&v60[20] = v27;
      __int16 v61 = 2082;
      long long v62 = "assert";
      __int16 v63 = 2081;
      int v64 = "!result";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Multiple matches for resource", "{\"msg%{public}.0s\":\"Multiple matches for resource\", \"resource\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v60, 0x30u);
    }
  }

  if (qword_10047BF08 == -1)
  {
    std::string v28 = (id)qword_10047BF10;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO)) {
      goto LABEL_41;
    }
  }
  else
  {
    dispatch_once(&qword_10047BF08, &stru_100460658);
    std::string v28 = (id)qword_10047BF10;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
LABEL_41:
      std::string v29 = sub_1000900B8(a2);
      sub_1003A4CB8((uint64_t)v29, (uint64_t)v60);
    }
  }

  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void sub_10008AFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  std::runtime_error::~runtime_error(v74);
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
LABEL_3:
    if (a47 < 0) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  operator delete(a21);
  if (a47 < 0)
  {
LABEL_4:
    operator delete(a42);
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  if ((a40 & 0x80000000) == 0)
  {
LABEL_5:
    *(void *)(v76 - 192) = v75;
    if (*(char *)(v76 - 161) < 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a35);
  *(void *)(v76 - 192) = v75;
  if (*(char *)(v76 - 161) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v76 - 184));
    if ((a53 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  if ((a53 & 0x80000000) == 0)
  {
LABEL_7:
    *(void *)(v76 - 144) = &off_100451DC0;
    uint64_t v78 = *(void *)(v76 - 136);
    if (!v78) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a48);
  *(void *)(v76 - 144) = &off_100451DC0;
  uint64_t v78 = *(void *)(v76 - 136);
  if (!v78) {
    goto LABEL_17;
  }
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(void *)v78 + 32))(v78)) {
    *(void *)(v76 - 136) = 0;
  }
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v76 - 160));
  if (a58)
  {
    a59 = (uint64_t)a58;
    operator delete(a58);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v76 - 232));
  if (*(char *)(v76 - 233) < 0) {
    operator delete(*(void **)(v76 - 256));
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  __cxa_free_exception(v74);
  if (*(char *)(v76 - 193) < 0) {
    operator delete(*(void **)(v76 - 216));
  }
  sub_1001F702C((uint64_t)&a12);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10008B704(uint64_t a1)
{
  char v2 = *(sqlite3_stmt **)a1;
  if (!v2) {
    return;
  }
  sqlite3_int64 v3 = sqlite3_sql(v2);
  if (v3) {
    int v4 = v3;
  }
  else {
    int v4 = "<unknown query>";
  }
  size_t v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    std::string __dst = p_dst;
    unint64_t v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5) {
LABEL_12:
  }
    memmove(p_dst, v4, v6);
  *((unsigned char *)p_dst + v6) = 0;
  int v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_10047BF08 != -1)
    {
      dispatch_once(&qword_10047BF08, &stru_100460658);
      std::string::size_type v11 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    std::string::size_type v11 = qword_10047BF10;
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)std::runtime_error buf = 67240192;
      int v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(void *)a1 = 0;
  long long v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(void *)(a1 + 16) = 0;
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst);
  }
}

void sub_10008B8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008B8EC(sqlite3_stmt **a1, int a2, int a3)
{
  int v5 = sqlite3_bind_int(*a1, a2, a3);
  sub_100088644(v5, a1[1]);
  if (v5)
  {
    size_t v6 = __error();
    sub_100295674(*v6, &v26);
    __cxa_allocate_exception(0x40uLL);
    std::to_string(&v21, a2);
    long long v7 = std::string::insert(&v21, 0, "Failed to bind parameter ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_1000AE4B0(v19, " w/ ");
    if ((v20 & 0x80u) == 0) {
      uint64_t v9 = (const std::string::value_type *)v19;
    }
    else {
      uint64_t v9 = (const std::string::value_type *)v19[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v10 = v20;
    }
    else {
      std::string::size_type v10 = v19[1];
    }
    std::string::size_type v11 = std::string::append(&v22, v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v26;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    long long v15 = std::string::append(&v23, (const std::string::value_type *)p_dst, size);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v25, &v24);
    v25.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v17);
    sub_100204FC4(&v25, (uint64_t)"void db::resources::statement<0, 9>::bind(int, int) [nCols = 0, nQueries = 9, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 409, (uint64_t)v17);
  }
}

void sub_10008BC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_100205504((std::runtime_error *)(v74 - 152));
    uint64_t v76 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v74 - 168));
      if (*(char *)(v74 - 169) < 0)
      {
        operator delete(*(void **)(v74 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v74 - 201) & 0x80000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_26;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v74 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a67 & 0x80000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_27;
      }
LABEL_26:
      operator delete(*(void **)(v74 - 224));
      if ((a67 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v74 - 233) & 0x80000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_28;
      }
LABEL_27:
      operator delete(a62);
      if ((*(char *)(v74 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if (a72 < 0) {
          goto LABEL_22;
        }
        goto LABEL_29;
      }
LABEL_28:
      operator delete(*(void **)(v74 - 256));
      if (a72 < 0)
      {
LABEL_22:
        operator delete(a68);
        if ((v73 & 1) == 0)
        {
LABEL_31:
          if (*(char *)(v74 - 65) < 0) {
            operator delete(*(void **)(v74 - 88));
          }
          _Unwind_Resume(a1);
        }
LABEL_30:
        __cxa_free_exception(v72);
        goto LABEL_31;
      }
LABEL_29:
      if (!v73) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
LABEL_15:
    operator delete(v76);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_100205504((std::runtime_error *)(v74 - 152));
  uint64_t v76 = a52;
  if (!a52) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

void sub_10008BEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10008807C(a2);
  sub_10008D654(a1, v4, v94);
  if (!v94[0])
  {
    long long v67 = sub_1001F5714();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_FAULT))
    {
      size_t v68 = (char **)sub_10008807C(a2);
      *(_DWORD *)std::runtime_error buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)std::string v89 = 2082;
      *(void *)&v89[2] = "";
      *(_WORD *)&v89[10] = 2081;
      *(void *)&v89[12] = sub_1000900B8(v68);
      __int16 v90 = 2082;
      int v91 = "assert";
      __int16 v92 = 2081;
      std::string::size_type v93 = "current.is_initialized()";
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"couldn't find resource in db\", \"locationId\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }

    int64_t v69 = sub_1001F5714();
    if (os_signpost_enabled(v69))
    {
      id v70 = (char **)sub_10008807C(a2);
      size_t v71 = sub_1000900B8(v70);
      *(_DWORD *)std::runtime_error buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)std::string v89 = 2082;
      *(void *)&v89[2] = "";
      *(_WORD *)&v89[10] = 2081;
      *(void *)&v89[12] = v71;
      __int16 v90 = 2082;
      int v91 = "assert";
      __int16 v92 = 2081;
      std::string::size_type v93 = "current.is_initialized()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v69, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "couldn't find resource in db", "{\"msg%{public}.0s\":\"couldn't find resource in db\", \"locationId\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }

    int64_t v72 = sub_1001F5714();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
    {
      int v73 = (char **)sub_10008807C(a2);
      uint64_t v74 = sub_1000900B8(v73);
      sub_1003A4D1C((uint64_t)v74, (uint64_t)buf);
    }

    abort_report_np();
    __break(1u);
    return;
  }
  *(void *)std::runtime_error buf = 0;
  *(void *)std::string v89 = 0;
  *(void *)&v89[8] = 0;
  long long __p = 0;
  int v84 = 0;
  unint64_t v85 = 0;
  p_p = &__p;
  int v5 = (unsigned char *)sub_10008CB54(a2);
  size_t v6 = (unsigned char *)sub_10008CB54((uint64_t)v95);
  sub_10008CB84((uint64_t *)&p_p, (const void **)&xmmword_10047DFB0, (const void **)&qword_10047DFF8, v5, v6);
  long long v7 = (unsigned char *)sub_10008CB7C(a2);
  long long v8 = (unsigned char *)sub_10008CB7C((uint64_t)v95);
  sub_10008CB84((uint64_t *)&p_p, (const void **)&qword_10047DFC8, (const void **)&xmmword_10047E010, v7, v8);
  if (*(unsigned char *)sub_10008CB4C(a2))
  {
    uint64_t v9 = sub_10008CB4C(a2);
    uint64_t v10 = sub_10008CB4C((uint64_t)v95);
    if (*(unsigned char *)v9 && *(unsigned char *)v10)
    {
      if (*(void *)(v9 + 8) == *(void *)(v10 + 8)) {
        goto LABEL_35;
      }
    }
    else if ((*(unsigned char *)v9 != 0) != (*(unsigned char *)v10 == 0))
    {
      goto LABEL_35;
    }
    std::string::size_type v11 = (const std::chrono::system_clock::time_point *)sub_10008CB4C(a2);
    time_t v12 = std::chrono::system_clock::to_time_t(v11 + 1);
    int v13 = byte_10047DFF7;
    if (byte_10047DFF7 >= 0) {
      size_t v14 = byte_10047DFF7;
    }
    else {
      size_t v14 = qword_10047DFE8;
    }
    unint64_t v15 = v14 + 1;
    if (v14 + 1 > 0x7FFFFFFFFFFFFFF7) {
      sub_1000A6968();
    }
    uint64_t v16 = v12;
    if (v15 >= 0x17)
    {
      uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v18 = v15 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_dst = (std::string *)operator new(v18 + 1);
      __dst.__r_.__value_.__l.__size_ = v14 + 1;
      __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14 + 1;
      if (!v14) {
        goto LABEL_22;
      }
    }
    if (v13 >= 0) {
      unsigned __int8 v20 = &qword_10047DFE0;
    }
    else {
      unsigned __int8 v20 = (uint64_t *)qword_10047DFE0;
    }
    memmove(p_dst, v20, v14);
LABEL_22:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v14) = 61;
    std::to_string(&v80, v16);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v21 = &v80;
    }
    else {
      std::string v21 = (std::string *)v80.__r_.__value_.__r.__words[0];
    }
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v80.__r_.__value_.__l.__size_;
    }
    std::string v23 = std::string::append(&__dst, (const std::string::value_type *)v21, size);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    int64_t v87 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)int v86 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error v25 = v84;
    if ((unint64_t)v84 < v85)
    {
      long long v26 = *(_OWORD *)v86;
      *((void *)v84 + 2) = v87;
      *std::runtime_error v25 = v26;
      v86[1] = 0;
      int64_t v87 = 0;
      v86[0] = 0;
      int v84 = (char *)v25 + 24;
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_30;
      }
LABEL_34:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_35;
      }
LABEL_31:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_35;
    }
    int v84 = sub_10008CF94(&__p, (uint64_t)v86);
    if (SHIBYTE(v87) < 0)
    {
      operator delete(v86[0]);
      if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_34;
      }
    }
    else if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_34;
    }
LABEL_30:
    operator delete(v80.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_31;
  }
LABEL_35:
  sub_10008CB5C(a2, (uint64_t)v86);
  if (!LOBYTE(v86[0])) {
    goto LABEL_64;
  }
  sub_10008CB5C(a2, (uint64_t)v86);
  time_t v27 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&v86[1]);
  int v28 = byte_10047E03F;
  if (byte_10047E03F >= 0) {
    size_t v29 = byte_10047E03F;
  }
  else {
    size_t v29 = qword_10047E030;
  }
  unint64_t v30 = v29 + 1;
  if (v29 + 1 > 0x7FFFFFFFFFFFFFF7) {
    sub_1000A6968();
  }
  uint64_t v31 = v27;
  if (v30 >= 0x17)
  {
    uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v33 = v30 | 7;
    }
    uint64_t v34 = v33 + 1;
    std::string v32 = (std::string *)operator new(v33 + 1);
    __dst.__r_.__value_.__l.__size_ = v29 + 1;
    __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    std::string v32 = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v29 + 1;
    if (!v29) {
      goto LABEL_50;
    }
  }
  if (v28 >= 0) {
    std::string::size_type v35 = &qword_10047E028;
  }
  else {
    std::string::size_type v35 = (uint64_t *)qword_10047E028;
  }
  memmove(v32, v35, v29);
LABEL_50:
  *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v29) = 61;
  std::to_string(&v80, v31);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v36 = &v80;
  }
  else {
    std::string v36 = (std::string *)v80.__r_.__value_.__r.__words[0];
  }
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v37 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v37 = v80.__r_.__value_.__l.__size_;
  }
  std::string::size_type v38 = std::string::append(&__dst, (const std::string::value_type *)v36, v37);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  int64_t v87 = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v86 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  long long v40 = v84;
  if ((unint64_t)v84 >= v85)
  {
    int v84 = sub_10008CF94(&__p, (uint64_t)v86);
    if (SHIBYTE(v87) < 0)
    {
      operator delete(v86[0]);
      if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
    }
    else if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_63;
    }
LABEL_58:
    operator delete(v80.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_59;
    }
LABEL_64:
    unint64_t v42 = (char *)__p;
    if (__p == v84) {
      goto LABEL_97;
    }
LABEL_65:
    std::operator+<char>();
    unint64_t v43 = std::string::append(&v80, "=");
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    unint64_t v45 = sub_10008D64C((uint64_t)v95);
    std::to_string(&v79, v45);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v46 = &v79;
    }
    else {
      long long v46 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v47 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v47 = v79.__r_.__value_.__l.__size_;
    }
    long long v48 = std::string::append(&__dst, (const std::string::value_type *)v46, v47);
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    int64_t v87 = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)int v86 = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v79.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_73:
        if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_74;
        }
LABEL_127:
        operator delete(v80.__r_.__value_.__l.__data_);
LABEL_74:
        *((unsigned char *)&v77.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v77, "UPDATE ");
        std::string v50 = std::string::append(&v77, "venues");
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v78.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        long long v52 = std::string::append(&v78, " SET ");
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        v79.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        sub_10008DCF8(", ", (char *)&__p, (uint64_t)v75);
        if ((v76 & 0x80u) == 0) {
          std::string v54 = v75;
        }
        else {
          std::string v54 = (void **)v75[0];
        }
        if ((v76 & 0x80u) == 0) {
          std::string::size_type v55 = v76;
        }
        else {
          std::string::size_type v55 = (std::string::size_type)v75[1];
        }
        std::string v56 = std::string::append(&v79, (const std::string::value_type *)v54, v55);
        long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v80.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0) {
          uint64_t v58 = v86;
        }
        else {
          uint64_t v58 = (void **)v86[0];
        }
        if (v87 >= 0) {
          std::string::size_type v59 = HIBYTE(v87);
        }
        else {
          std::string::size_type v59 = (std::string::size_type)v86[1];
        }
        unint64_t v60 = std::string::append(&v80, (const std::string::value_type *)v58, v59);
        long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v80.__r_.__value_.__l.__data_);
          if (((char)v76 & 0x80000000) == 0)
          {
LABEL_88:
            if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_89;
            }
            goto LABEL_130;
          }
        }
        else if (((char)v76 & 0x80000000) == 0)
        {
          goto LABEL_88;
        }
        operator delete(v75[0]);
        if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_89:
          if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_90;
          }
          goto LABEL_131;
        }
LABEL_130:
        operator delete(v79.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_90:
          if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_91;
          }
LABEL_132:
          operator delete(v77.__r_.__value_.__l.__data_);
LABEL_91:
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v62 = &__dst;
          }
          else {
            long long v62 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          sub_10008D100(*(sqlite3 ***)(a1 + 40), (const char *)v62, "Failed to update location");
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v87) & 0x80000000) == 0) {
              goto LABEL_96;
            }
          }
          else if ((SHIBYTE(v87) & 0x80000000) == 0)
          {
LABEL_96:
            unint64_t v42 = (char *)__p;
            goto LABEL_97;
          }
          operator delete(v86[0]);
          goto LABEL_96;
        }
LABEL_131:
        operator delete(v78.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_91;
        }
        goto LABEL_132;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_73;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_127;
  }
  long long v41 = *(_OWORD *)v86;
  *((void *)v84 + 2) = v87;
  *long long v40 = v41;
  v86[1] = 0;
  int64_t v87 = 0;
  v86[0] = 0;
  int v84 = (char *)v40 + 24;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_58;
  }
LABEL_63:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_64;
  }
LABEL_59:
  operator delete(__dst.__r_.__value_.__l.__data_);
  unint64_t v42 = (char *)__p;
  if (__p != v84) {
    goto LABEL_65;
  }
LABEL_97:
  if (v42)
  {
    __int16 v63 = v84;
    if (v84 == v42)
    {
      int v84 = v42;
      operator delete(v42);
      int v64 = *(void ***)buf;
      if (!*(void *)buf) {
        goto LABEL_111;
      }
    }
    else
    {
      do
      {
        if (*(v63 - 1) < 0) {
          operator delete(*((void **)v63 - 3));
        }
        v63 -= 24;
      }
      while (v63 != v42);
      int v84 = v42;
      operator delete(__p);
      int v64 = *(void ***)buf;
      if (!*(void *)buf) {
        goto LABEL_111;
      }
    }
    for (uint64_t i = *(void ***)v89; i != v64; i -= 3)
    {
      if (*((char *)i - 1) < 0) {
        operator delete(*(i - 3));
      }
    }
    operator delete(v64);
  }
LABEL_111:
  if (!v94[0]) {
    return;
  }
  if (v101) {
    char v101 = 0;
  }
  if (v100) {
    char v100 = 0;
  }
  if (v99) {
    char v99 = 0;
  }
  if (v98) {
    char v98 = 0;
  }
  uint64_t v66 = v97;
  if (!v97 || atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((v96 & 0x80000000) == 0) {
      return;
    }
    goto LABEL_123;
  }
  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
  std::__shared_weak_count::__release_weak(v66);
  if (v96 < 0) {
LABEL_123:
  }
    operator delete(v95[0]);
}

void sub_10008C8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52)
{
  if (a50 < 0)
  {
    operator delete(__p);
    if (a32 < 0)
    {
LABEL_5:
      operator delete(a27);
      if ((a39 & 0x80000000) == 0)
      {
LABEL_9:
        sub_1000E0AA4(&a42);
        sub_1000E0AA4(&a52);
        sub_1001F7984(v52 - 240);
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(a34);
      goto LABEL_9;
    }
  }
  else if (a32 < 0)
  {
    goto LABEL_5;
  }
  if ((a39 & 0x80000000) == 0) {
    goto LABEL_9;
  }
  goto LABEL_8;
}

void sub_10008CB04(_Unwind_Exception *a1)
{
  sub_1001F7984(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_10008CB18(_Unwind_Exception *a1)
{
  sub_1001F7984(v2 - 240);
  _Unwind_Resume(a1);
}

uint64_t sub_10008CB4C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_10008CB54(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_10008CB5C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  if (*(unsigned char *)(result + 128))
  {
    *(void *)(a2 + 8) = *(void *)(result + 136);
    *(unsigned char *)a2 = 1;
  }
  return result;
}

uint64_t sub_10008CB7C(uint64_t a1)
{
  return a1 + 88;
}

void sub_10008CB84(uint64_t *a1, const void **a2, const void **a3, unsigned char *a4, unsigned char *a5)
{
  if (!*a4) {
    return;
  }
  if (!*a5 || (uint64_t v10 = sub_100085D38((uint64_t)(a4 + 8)), v10 != sub_100085D38((uint64_t)(a5 + 8))))
  {
    int v11 = *((char *)a2 + 23);
    if (v11 >= 0) {
      size_t v12 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v12 = (size_t)a2[1];
    }
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x7FFFFFFFFFFFFFF7) {
LABEL_63:
    }
      sub_1000A6968();
    uint64_t v14 = *a1;
    if (v13 >= 0x17)
    {
      uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v16 = v13 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v12 + 1;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12 + 1;
      if (!v12) {
        goto LABEL_18;
      }
    }
    if (v11 >= 0) {
      uint64_t v18 = a2;
    }
    else {
      uint64_t v18 = *a2;
    }
    memmove(p_dst, v18, v12);
LABEL_18:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v12) = 61;
    uint64_t v19 = sub_100085D38((uint64_t)(a4 + 8));
    std::to_string(&__p, v19);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string v22 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    std::string::size_type v48 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__t[0].__d_.__rep_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    unint64_t v24 = *(void *)(v14 + 8);
    if (v24 >= *(void *)(v14 + 16))
    {
      long long v26 = sub_10008CF94((void **)v14, (uint64_t)__t);
    }
    else
    {
      long long v25 = *(_OWORD *)&__t[0].__d_.__rep_;
      *(void *)(v24 + 16) = v48;
      *(_OWORD *)unint64_t v24 = v25;
      __t[1].__d_.__rep_ = 0;
      std::string::size_type v48 = 0;
      __t[0].__d_.__rep_ = 0;
      long long v26 = (char *)(v24 + 24);
    }
    *(void *)(v14 + 8) = v26;
    if (SHIBYTE(v48) < 0)
    {
      operator delete((void *)__t[0].__d_.__rep_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_29:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_30;
        }
LABEL_59:
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_29;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_59;
  }
LABEL_30:
  __t[0].__d_.__rep_ = sub_1002C0BA0((uint64_t)(a4 + 8));
  time_t v27 = std::chrono::system_clock::to_time_t(__t);
  int v28 = *((char *)a3 + 23);
  if (v28 >= 0) {
    size_t v29 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v29 = (size_t)a3[1];
  }
  unint64_t v30 = v29 + 1;
  if (v29 + 1 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_63;
  }
  uint64_t v31 = v27;
  uint64_t v32 = *a1;
  if (v30 >= 0x17)
  {
    uint64_t v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v34 = v30 | 7;
    }
    uint64_t v35 = v34 + 1;
    uint64_t v33 = (std::string *)operator new(v34 + 1);
    __dst.__r_.__value_.__l.__size_ = v29 + 1;
    __dst.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v33 = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v29 + 1;
    if (!v29) {
      goto LABEL_44;
    }
  }
  if (v28 >= 0) {
    std::string v36 = a3;
  }
  else {
    std::string v36 = *a3;
  }
  memmove(v33, v36, v29);
LABEL_44:
  *(_WORD *)((char *)&v33->__r_.__value_.__l.__data_ + v29) = 61;
  std::to_string(&__p, v31);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v37 = &__p;
  }
  else {
    std::string::size_type v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v38 = __p.__r_.__value_.__l.__size_;
  }
  long long v39 = std::string::append(&__dst, (const std::string::value_type *)v37, v38);
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  std::string::size_type v48 = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__t[0].__d_.__rep_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  unint64_t v41 = *(void *)(v32 + 8);
  if (v41 >= *(void *)(v32 + 16))
  {
    unint64_t v43 = sub_10008CF94((void **)v32, (uint64_t)__t);
    int v44 = SHIBYTE(v48);
    *(void *)(v32 + 8) = v43;
    if (v44 < 0)
    {
      operator delete((void *)__t[0].__d_.__rep_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_61;
      }
    }
    else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_61;
    }
  }
  else
  {
    long long v42 = *(_OWORD *)&__t[0].__d_.__rep_;
    *(void *)(v41 + 16) = v48;
    *(_OWORD *)unint64_t v41 = v42;
    __t[1].__d_.__rep_ = 0;
    std::string::size_type v48 = 0;
    __t[0].__d_.__rep_ = 0;
    *(void *)(v32 + 8) = v41 + 24;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_61:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_62;
      }
      return;
    }
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_62:
  }
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_10008CEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *sub_10008CF94(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1000A9108();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_1000A6A10();
    }
    long long v7 = (char *)operator new(24 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  long long v8 = &v7[24 * v3];
  uint64_t v9 = &v7[24 * v6];
  *(_OWORD *)long long v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v10 = v8 + 24;
  int v11 = (char *)*a1;
  size_t v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    long long v13 = *(_OWORD *)(v12 - 24);
    *((void *)v8 - 1) = *((void *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    *((void *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  uint64_t v14 = (char *)*a1;
  size_t v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0) {
        operator delete(*((void **)v12 - 3));
      }
      v12 -= 24;
    }
    while (v12 != v14);
    size_t v12 = v14;
  }
  if (v12) {
LABEL_20:
  }
    operator delete(v12);
  return v10;
}

void sub_10008D100(sqlite3 **a1, const char *a2, const std::string::value_type *a3)
{
  errmsg = 0;
  int v5 = sqlite3_exec(*a1, a2, 0, 0, &errmsg);
  sub_100088644(v5, *a1);
  if (v5)
  {
    unint64_t v6 = __error();
    sub_100295674(*v6, &v19);
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v15, " w/ ");
    long long v7 = std::string::insert(&v15, 0, a3);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v19;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    int v11 = std::string::append(&v16, (const std::string::value_type *)p_dst, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v18, &v17);
    v18.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v13);
    sub_100204FC4(&v18, (uint64_t)"void db::resources::handle::exec(const char *, const char *) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 609, (uint64_t)v13);
  }
  sqlite3_free(errmsg);
}

void sub_10008D418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_100205504((std::runtime_error *)(v68 - 160));
    id v70 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v68 - 176));
      if (*(char *)(v68 - 185) < 0)
      {
        operator delete(*(void **)(v68 - 208));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v68 - 217) & 0x80000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_24;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v68 - 217) & 0x80000000) == 0)
      {
LABEL_19:
        if (a66 < 0) {
          goto LABEL_20;
        }
        goto LABEL_25;
      }
LABEL_24:
      operator delete(*(void **)(v68 - 240));
      if (a66 < 0)
      {
LABEL_20:
        operator delete(a61);
        if ((v67 & 1) == 0)
        {
LABEL_27:
          if (*(char *)(v68 - 73) < 0) {
            operator delete(*(void **)(v68 - 96));
          }
          sqlite3_free(*(void **)(v68 - 72));
          _Unwind_Resume(a1);
        }
LABEL_26:
        __cxa_free_exception(v66);
        goto LABEL_27;
      }
LABEL_25:
      if (!v67) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
LABEL_15:
    operator delete(v70);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_100205504((std::runtime_error *)(v68 - 160));
  id v70 = a52;
  if (!a52) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

uint64_t sub_10008D64C(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t sub_10008D654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  v6[0] = off_100461330;
  v6[1] = a2;
  long long v7 = v6;
  v4[0] = off_1004613C0;
  v4[1] = a2;
  int v5 = v4;
  sub_100082EDC(a1, 1, (uint64_t)v6, (uint64_t)v4, a3);
  if (v5 != v4)
  {
    if (v5) {
      (*(void (**)(void))(*v5 + 40))();
    }
    uint64_t result = (uint64_t)v7;
    if (v7 != v6) {
      goto LABEL_5;
    }
    return (*(uint64_t (**)(void *))(v6[0] + 32))(v6);
  }
  (*(void (**)(void *))(v4[0] + 32))(v4);
  uint64_t result = (uint64_t)v7;
  if (v7 == v6) {
    return (*(uint64_t (**)(void *))(v6[0] + 32))(v6);
  }
LABEL_5:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_10008D7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1001F7604((uint64_t *)va);
  sub_1001F7694((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_10008D7EC(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  v27.__ptr_ = off_100461330;
  uint64_t v28 = v4;
  size_t v29 = &v27;
  v25[0] = off_1004613C0;
  v25[1] = v4;
  long long v26 = v25;
  sub_100082EDC(v3, 1, (uint64_t)&v27, (uint64_t)v25, v11);
  if (v26 != v25)
  {
    if (v26) {
      (*(void (**)(void *))(*v26 + 40))(v26);
    }
    uint64_t v5 = v29;
    if (v29 != &v27) {
      goto LABEL_5;
    }
LABEL_8:
    (*((void (**)(std::exception_ptr *))v27.__ptr_ + 4))(&v27);
    goto LABEL_9;
  }
  (*(void (**)(void *))(v25[0] + 32))(v25);
  uint64_t v5 = v29;
  if (v29 == &v27) {
    goto LABEL_8;
  }
LABEL_5:
  if (v5) {
    (*((void (**)(std::exception_ptr *))v5->__ptr_ + 5))(v5);
  }
LABEL_9:
  uint64_t v6 = *v2;
  if (!*v2) {
    sub_1000AD034(3u);
  }
  std::mutex::lock((std::mutex *)(v6 + 24));
  if ((*(unsigned char *)(v6 + 136) & 1) != 0
    || (v27.__ptr_ = 0, uint64_t v7 = *(void *)(v6 + 16), std::exception_ptr::~exception_ptr(&v27), v7))
  {
    sub_1000AD034(2u);
  }
  *(unsigned char *)(v6 + 144) = 0;
  if (v11[0])
  {
    *(_OWORD *)(v6 + 152) = *(_OWORD *)__p;
    *(void *)(v6 + 168) = v13;
    __p[0] = 0;
    __p[1] = 0;
    long long v8 = v14;
    long long v9 = v15;
    uint64_t v13 = 0;
    long long v14 = 0uLL;
    *(_OWORD *)(v6 + 176) = v8;
    *(_OWORD *)(v6 + 192) = v9;
    *(_DWORD *)(v6 + 208) = v16;
    *(unsigned char *)(v6 + 216) = 0;
    if (v17)
    {
      *(_OWORD *)(v6 + 224) = v18;
      *(unsigned char *)(v6 + 216) = 1;
    }
    *(unsigned char *)(v6 + 240) = 0;
    if (v19)
    {
      *(_OWORD *)(v6 + 248) = v20;
      *(unsigned char *)(v6 + 240) = 1;
    }
    *(unsigned char *)(v6 + 264) = 0;
    if (v21)
    {
      *(void *)(v6 + 272) = v22;
      *(unsigned char *)(v6 + 264) = 1;
    }
    *(unsigned char *)(v6 + 280) = 0;
    if (v23)
    {
      *(void *)(v6 + 288) = v24;
      *(unsigned char *)(v6 + 280) = 1;
    }
    *(unsigned char *)(v6 + 144) = 1;
  }
  *(_DWORD *)(v6 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v6 + 88));
  std::mutex::unlock((std::mutex *)(v6 + 24));
  if (v11[0])
  {
    if (v23) {
      char v23 = 0;
    }
    if (v21) {
      char v21 = 0;
    }
    if (v19) {
      char v19 = 0;
    }
    if (v17) {
      char v17 = 0;
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v14 + 1);
    if (*((void *)&v14 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (SHIBYTE(v13) < 0) {
        goto LABEL_34;
      }
    }
    else if (SHIBYTE(v13) < 0)
    {
LABEL_34:
      operator delete(__p[0]);
    }
  }
}

void sub_10008DB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  if (a2)
  {
    uint64_t v34 = *(void *)(v32 - 96);
    if (v34 == v32 - 120) {
      (*(void (**)(uint64_t))(*(void *)(v32 - 120) + 32))(v32 - 120);
    }
    else {
      sub_1003A4DEC(v34);
    }
    sub_1003A4D80(v32 - 120, (uint64_t *)(v32 - 64), v32 - 88);
    __cxa_begin_catch(exception_object);
    uint64_t v35 = *(std::__assoc_sub_state ***)(v31 + 32);
    std::current_exception();
    std::string v36 = *v35;
    if (v36)
    {
      std::exception_ptr::exception_ptr(&a11, &a10);
      v37.__ptr_ = &a11;
      std::__assoc_sub_state::set_exception(v36, v37);
      std::exception_ptr::~exception_ptr(&a11);
      std::exception_ptr::~exception_ptr(&a10);
      __cxa_end_catch();
      JUMPOUT(0x10008DAF8);
    }
    sub_1000AD034(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008DCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11)
{
}

void sub_10008DCD4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000A6954(a1);
  }
  _Unwind_Resume(a1);
}

char *sub_10008DCF8@<X0>(char *__s@<X1>, char *result@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void *)result;
  uint64_t v6 = *((void *)result + 1);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v5 == v6) {
    goto LABEL_10;
  }
  int v7 = *(char *)(v5 + 23);
  if (v7 >= 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = *(void *)v5;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(v5 + 8);
  }
  for (uint64_t result = sub_10006B648((std::string *)a3, a3, v8, (std::string::value_type *)(v8 + v9), v9);
        ;
        uint64_t result = sub_10006B648((std::string *)a3, v16, v18, (std::string::value_type *)(v18 + v19), v19))
  {
    v5 += 24;
LABEL_10:
    if (v5 == v6) {
      break;
    }
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = *(void *)a3;
    }
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a3 + 8);
    }
    uint64_t v12 = v11 + v10;
    size_t v13 = strlen(__s);
    sub_10006BAEC((std::string *)a3, v12, (unint64_t)__s, &__s[v13], v13);
    uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
    if ((v14 & 0x80u) == 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = *(void *)a3;
    }
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(a3 + 8);
    }
    uint64_t v16 = v15 + v14;
    int v17 = *(char *)(v5 + 23);
    if (v17 >= 0) {
      unint64_t v18 = v5;
    }
    else {
      unint64_t v18 = *(void *)v5;
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      std::string::size_type v19 = *(void *)(v5 + 8);
    }
  }
  return result;
}

void sub_10008DDFC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10008DE1C(uint64_t *a1)
{
  uint64_t v2 = operator new(0x78uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = off_100466DC8;
  *a1 = sub_10008DFA4((uint64_t)(v2 + 3));
  a1[1] = (uint64_t)v2;
  if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromZeroCopyStream() & 1) == 0)
  {
    sub_1000AE4B0(v5, "");
    sub_1002700F4("Failed to parse TileHeader", &__p);
    sub_10016A2C4((uint64_t)v5, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    sub_1000D11E0((uint64_t)&v4);
  }
  return a1;
}

void sub_10008DF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1000BA884(v20);
    _Unwind_Resume(a1);
  }
  sub_1000BA884(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_10008DFA4(uint64_t a1)
{
  *(void *)a1 = off_1004676A0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  return a1;
}

void sub_10008E008(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_10008E020(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = a3;
  std::string::size_type v9 = v8;
  if (v8) {
    os_activity_scope_enter(v8, &state);
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (const char *)a2;
  }
  else {
    uint64_t v11 = *(const char **)a2;
  }
  if (v10 >= 0) {
    int v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v12 = *(_DWORD *)(a2 + 8);
  }
  int v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_100088644(v13, *a1);
  if (v13)
  {
    uint64_t v14 = __error();
    sub_100295674(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v23, " w/ ");
    uint64_t v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v27;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    std::string::size_type v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v21);
    sub_100204FC4(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 0UL, nQueries = 9UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(void *)(a4 + 8) = *a1;
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_10008E370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_100205504((std::runtime_error *)(v71 - 184));
    int v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1001F7A48(v68);

            _Unwind_Resume(a1);
          }
          sub_1001F7A48(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_100205504((std::runtime_error *)(v71 - 184));
  int v73 = a47;
  if (!a47) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_10008E5EC(uint64_t a1, uint64_t a2, char **a3, double a4)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 48))(&v26);
  if (!(_BYTE)v26)
  {
    if (qword_10047BF08 == -1)
    {
      int v12 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_44;
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_1004649A0);
      int v12 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_44;
      }
    }
    int v24 = 136380675;
    *(void *)std::string v25 = sub_1000900B8(a3);
    int v13 = "#shouldPrefetchMetadata, true, data for locationId unavailable, %{private}s";
    goto LABEL_14;
  }
  if (!sub_10008ECA0((uint64_t)__p))
  {
    if (qword_10047BF08 == -1)
    {
      int v12 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_44;
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_1004649A0);
      int v12 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_44;
      }
    }
    int v24 = 136380675;
    *(void *)std::string v25 = sub_1000900B8(a3);
    int v13 = "#shouldPrefetchMetadata, true, metadata for %{private}s is missing";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, v13, (uint8_t *)&v24, 0xCu);
    uint64_t v14 = 1;
    if (!(_BYTE)v26) {
      return v14;
    }
    goto LABEL_45;
  }
  if (!sub_10008ECBC((uint64_t)__p)) {
    goto LABEL_24;
  }
  BOOL v7 = sub_10008ECBC((uint64_t)__p);
  uint64_t v9 = v8;
  BOOL v11 = sub_10008ECA0((uint64_t)__p);
  if (v7 && v11)
  {
    if (v9 == v10) {
      goto LABEL_24;
    }
  }
  else if (v7 != !v11)
  {
    goto LABEL_24;
  }
  sub_100089D54((uint64_t)__p, (uint64_t)&v24);
  uint64_t v15 = *(void *)&v25[4];
  sub_100089D78((uint64_t)__p, (uint64_t)&v24);
  uint64_t v16 = *(void *)&v25[4];
  if (v15 < *(uint64_t *)&v25[4])
  {
    if (qword_10047BF08 == -1)
    {
      int v17 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_44;
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_1004649A0);
      int v17 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_44;
      }
    }
    int v24 = 134218240;
    *(void *)std::string v25 = v15;
    *(_WORD *)&v25[8] = 2048;
    *(void *)&v25[10] = v16;
    unint64_t v18 = "#shouldPrefetchMetadata, true, metadata modification earlier than tile, %lld < %lld";
    goto LABEL_28;
  }
  if (qword_10047BF08 == -1)
  {
    std::string::size_type v19 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  dispatch_once(&qword_10047BF08, &stru_1004649A0);
  std::string::size_type v19 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG))
  {
LABEL_23:
    int v24 = 134218240;
    *(void *)std::string v25 = v15;
    *(_WORD *)&v25[8] = 2048;
    *(void *)&v25[10] = v16;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#shouldPrefetchMetadata, no decision, tiles modifications earlier than metadata, %lld >= %lld", (uint8_t *)&v24, 0x16u);
  }
LABEL_24:
  sub_10008F34C((uint64_t)__p, (uint64_t)&v24);
  uint64_t v20 = a2 - *(void *)&v25[4];
  if (a4 * 8.64e10 < (double)(a2 - *(void *)&v25[4]))
  {
    if (qword_10047BF08 == -1)
    {
      int v17 = qword_10047BF10;
      if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG))
      {
LABEL_27:
        int v24 = 134218240;
        *(void *)std::string v25 = v20 / 1000000;
        *(_WORD *)&v25[8] = 2048;
        *(void *)&v25[10] = (uint64_t)(a4 * 86400.0);
        unint64_t v18 = "#shouldPrefetchMetadata, true, metadata older than limit, %lld > %lld";
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, v18, (uint8_t *)&v24, 0x16u);
        uint64_t v14 = 1;
        if (!(_BYTE)v26) {
          return v14;
        }
        goto LABEL_45;
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_1004649A0);
      int v17 = qword_10047BF10;
      if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_27;
      }
    }
LABEL_44:
    uint64_t v14 = 1;
    if (!(_BYTE)v26) {
      return v14;
    }
    goto LABEL_45;
  }
  if (qword_10047BF08 == -1)
  {
    char v21 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  dispatch_once(&qword_10047BF08, &stru_1004649A0);
  char v21 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG))
  {
LABEL_32:
    int v24 = 134218240;
    *(void *)std::string v25 = v20 / 1000000;
    *(_WORD *)&v25[8] = 2048;
    *(void *)&v25[10] = (uint64_t)(a4 * 86400.0);
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#shouldPrefetchMetadata, false, metadata age less than limit, %lld <= %lld", (uint8_t *)&v24, 0x16u);
  }
LABEL_33:
  uint64_t v14 = 0;
  if (!(_BYTE)v26) {
    return v14;
  }
LABEL_45:
  if (v33) {
    char v33 = 0;
  }
  if (v32) {
    char v32 = 0;
  }
  if (v31) {
    char v31 = 0;
  }
  if (v30) {
    char v30 = 0;
  }
  uint64_t v22 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if ((v28 & 0x80000000) == 0) {
      return v14;
    }
    goto LABEL_56;
  }
  if (v28 < 0) {
LABEL_56:
  }
    operator delete(__p[0]);
  return v14;
}

void sub_10008EBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10008EBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10008EC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10008EC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10008EC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10008EC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10008EC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10008EC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10008EC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10008ECA0(uint64_t a1)
{
  return *(unsigned char *)(a1 + 64) != 0;
}

BOOL sub_10008ECBC(uint64_t a1)
{
  return *(unsigned char *)(a1 + 88) != 0;
}

void sub_10008ECD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  id v2 = *(id *)(a1 + 32);
  operator new();
}

void sub_10008EE80(_Unwind_Exception *a1)
{
  if (!atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  sub_10008EEFC((uint64_t *)(v4 - 56));

  _Unwind_Resume(a1);
}

void sub_10008EEE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_10008EEFC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2) {
    return a1;
  }
  if ((*(unsigned char *)(v2 + 136) & 1) == 0)
  {
    v8.__ptr_ = 0;
    uint64_t v3 = *(void *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v8);
    uint64_t v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v9.__cat_ = std::future_category();
      *(void *)&v9.__val_ = 4;
      std::future_error::future_error(&v7, v9);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      char v6 = std::logic_error::logic_error(exception, &v7);
      v6[1] = (std::logic_error)v7.__ec_;
    }
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  return a1;
}

void sub_10008F058(uint64_t a1)
{
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  operator delete();
}

void sub_10008F0D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  uint64_t v4 = *(void *)(a1 + 16);
  v9.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v9);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v8, (const std::exception_ptr *)(a1 + 16));
    v7.__ptr_ = &v8;
    std::rethrow_exception(v7);
    __break(1u);
  }
  else
  {
    *(unsigned char *)a2 = 0;
    if (*(unsigned char *)(a1 + 144))
    {
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 152);
      *(void *)(a2 + 24) = *(void *)(a1 + 168);
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 160) = 0;
      long long v5 = *(_OWORD *)(a1 + 176);
      long long v6 = *(_OWORD *)(a1 + 192);
      *(void *)(a1 + 168) = 0;
      *(void *)(a1 + 176) = 0;
      *(void *)(a1 + 184) = 0;
      *(_OWORD *)(a2 + 32) = v5;
      *(_OWORD *)(a2 + 48) = v6;
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 208);
      *(unsigned char *)(a2 + 72) = 0;
      if (*(unsigned char *)(a1 + 216))
      {
        *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 224);
        *(unsigned char *)(a2 + 72) = 1;
      }
      *(unsigned char *)(a2 + 96) = 0;
      if (*(unsigned char *)(a1 + 240))
      {
        *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 248);
        *(unsigned char *)(a2 + 96) = 1;
      }
      *(unsigned char *)(a2 + 120) = 0;
      if (*(unsigned char *)(a1 + 264))
      {
        *(void *)(a2 + 128) = *(void *)(a1 + 272);
        *(unsigned char *)(a2 + 120) = 1;
      }
      *(unsigned char *)(a2 + 136) = 0;
      if (*(unsigned char *)(a1 + 280))
      {
        *(void *)(a2 + 144) = *(void *)(a1 + 288);
        *(unsigned char *)(a2 + 136) = 1;
      }
      *(unsigned char *)a2 = 1;
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
  }
}

void sub_10008F21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10008F248(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 136) & 1) != 0 && *(unsigned char *)(a1 + 144))
  {
    if (*(unsigned char *)(a1 + 280)) {
      *(unsigned char *)(a1 + 280) = 0;
    }
    if (*(unsigned char *)(a1 + 264)) {
      *(unsigned char *)(a1 + 264) = 0;
    }
    if (*(unsigned char *)(a1 + 240)) {
      *(unsigned char *)(a1 + 240) = 0;
    }
    if (*(unsigned char *)(a1 + 216)) {
      *(unsigned char *)(a1 + 216) = 0;
    }
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 184);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 175) & 0x80000000) == 0) {
        goto LABEL_15;
      }
    }
    else if ((*(char *)(a1 + 175) & 0x80000000) == 0)
    {
LABEL_15:
      *(unsigned char *)(a1 + 144) = 0;
      goto LABEL_16;
    }
    operator delete(*(void **)(a1 + 152));
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);

  return v3(a1);
}

void sub_10008F344(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10008F34C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(result + 64))
  {
    uint64_t v2 = *(void *)(result + 80);
    if (*(unsigned char *)(result + 88))
    {
      if (v2 <= *(void *)(result + 104)) {
        uint64_t v2 = *(void *)(result + 104);
      }
    }
    *(void *)(a2 + 8) = v2;
    *(unsigned char *)a2 = 1;
  }
  else if (*(unsigned char *)(result + 88))
  {
    *(void *)(a2 + 8) = *(void *)(result + 104);
    *(unsigned char *)a2 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  return result;
}

void sub_10008F39C()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &off_10045A120;
}

void sub_10008FBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

const void ***sub_10008FD08(uint64_t a1, uint64_t ***a2, void *a3, uint64_t a4)
{
  unint64_t v9 = sub_100077F68((uint64_t)v34, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int v13 = *(const void *****)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == (const void **)v10)
            {
              if (sub_1000706F4(v14 + 2, (unsigned __int8 ***)a2)) {
                return v14;
              }
            }
            else if (((unint64_t)v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v14 = (const void ***)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = (unint64_t)v14[1];
          if (v15 == v10)
          {
            if (sub_1000706F4(v14 + 2, (unsigned __int8 ***)a2)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (const void ***)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  int v17 = operator new(0x7A0uLL);
  v34[0] = v17;
  v34[1] = a1 + 16;
  char v35 = 0;
  *int v17 = 0;
  v17[1] = v10;
  uint64_t v18 = a3[1];
  void v17[2] = *a3;
  v17[3] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000776C4(v17 + 4, a4);
  char v35 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v27) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v27)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v27 < 3uLL || (uint8x8_t v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < *(void *)&v27) {
LABEL_39:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v31 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        char v21 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v22 = (void *)v34[0];
        if (v21) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v4 = v10;
        char v21 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v22 = (void *)v34[0];
        if (v21) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v10;
      char v21 = *(void **)(*(void *)a1 + 8 * (v31 & v10));
      uint64_t v22 = (void *)v34[0];
      if (v21) {
        goto LABEL_28;
      }
    }
LABEL_52:
    void *v22 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v34[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v34[0])
    {
      unint64_t v32 = *(void *)(*(void *)v34[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v32 >= v11) {
          v32 %= v11;
        }
      }
      else
      {
        v32 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v32) = v34[0];
    }
    goto LABEL_63;
  }
  char v21 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v22 = (void *)v34[0];
  if (!v21) {
    goto LABEL_52;
  }
LABEL_28:
  void *v22 = *v21;
  void *v21 = v34[0];
LABEL_63:
  uint64_t v14 = (const void ***)v34[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_100090084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F555C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100090098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void *)(v2 + 24);
  if (v4) {
    sub_1003A381C(v4);
  }
  sub_1001F555C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1000900B8(char **a1)
{
  uint64_t result = *a1;
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

void *sub_1000900D0(void *a1, const char *a2)
{
  uint64_t v4 = a2;
  sub_100085B74(&v4, a1);
  return a1;
}

void sub_100090110(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      sub_100085B24(v9, v4 + 8);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _OWORD *))(*(void *)a2 + 120))(&v11, a2, v9);
      std::exception_ptr v7 = (std::__shared_weak_count *)*((void *)&v9[0] + 1);
      if (*((void *)&v9[0] + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      sub_100090864(&v11, (uint64_t)v9);
      if (v10) {
        sub_1002A1BD4((void *)a3, v4 + 8, v9);
      }
      std::exception_ptr v8 = v12;
      if (v12)
      {
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v4 += 1920;
    }
    while (v4 != v5);
  }
}

void sub_100090274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100198250((uint64_t)va);
  sub_1000D8B48(v2);
  _Unwind_Resume(a1);
}

void sub_100090290(_Unwind_Exception *a1)
{
  sub_1000D8B48(v1);
  _Unwind_Resume(a1);
}

void sub_1000902A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000BA884((uint64_t)va);
  sub_1000D8B48(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_1000902C4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1000902E8(uint64_t a1, uint64_t a2)
{
}

void sub_1000902F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  id v2 = *(id *)(a1 + 32);
  operator new();
}

void sub_100090498(_Unwind_Exception *a1)
{
  if (!atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  sub_100090514((uint64_t *)(v4 - 56));

  _Unwind_Resume(a1);
}

void sub_100090500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_100090514(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2) {
    return a1;
  }
  if ((*(unsigned char *)(v2 + 136) & 1) == 0)
  {
    v8.__ptr_ = 0;
    uint64_t v3 = *(void *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v8);
    uint64_t v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v9.__cat_ = std::future_category();
      *(void *)&v9.__val_ = 4;
      std::future_error::future_error(&v7, v9);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      long long v6 = std::logic_error::logic_error(exception, &v7);
      v6[1] = (std::logic_error)v7.__ec_;
    }
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  return a1;
}

void sub_100090670(uint64_t a1)
{
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  operator delete();
}

void sub_1000906F0(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  uint64_t v4 = *(void *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *a2 = *(_OWORD *)(a1 + 144);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
  }
}

void sub_100090790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000907BC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 152);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);

  return v3(a1);
}

void sub_100090864(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  if ((~*(_DWORD *)(*a1 + 200) & 0x180000) != 0)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
  }
  else
  {
    sub_100316294((uint64_t)v4, a1);
    long long v3 = v4[1];
    *(_OWORD *)a2 = v4[0];
    *(_OWORD *)(a2 + 16) = v3;
    *(unsigned char *)(a2 + 32) = 1;
  }
}

void sub_100090ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100090B5C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v2 = [WeakRetained currentForegroundFetchRequest];
    [(id)v2 requestDidComplete:*(void *)(a1 + 32)];

    long long v3 = [WeakRetained currentForegroundFetchRequest];
    LOBYTE(v2) = [v3 allFloorsDownloaded];

    if (v2) {
      [WeakRetained foregroundTileDownloadComplete];
    }
  }
}

void sub_100090BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_100090C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100090C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100090E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100090E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100090E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100090E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100090E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009153C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Unwind_Resume(a1);
}

__n128 sub_100091630(uint64_t a1, long long *a2, __n128 *a3, int a4)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  __n128 result = *a3;
  *(void *)(a1 + 40) = a3[1].n128_u64[0];
  *(__n128 *)(a1 + 24) = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  *(_DWORD *)(a1 + 48) = a4;
  return result;
}

void sub_100091DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_100091F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100091F70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100091F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100091F70(uint64_t a1)
{
  if (*(void *)a1)
  {
    if (qword_10047BED8 == -1)
    {
      uint64_t v2 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        goto LABEL_7;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_10046B3D8);
      uint64_t v2 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        goto LABEL_7;
      }
    }
    long long v3 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v3 = (void *)*v3;
    }
    int v5 = 136315138;
    std::exception_ptr v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Ending OSTransaction for %s", (uint8_t *)&v5, 0xCu);
  }
LABEL_7:
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  return a1;
}

uint64_t sub_100092088(uint64_t a1, const char *a2)
{
  *(void *)a1 = os_transaction_create();
  long long v4 = (void *)(a1 + 8);
  size_t v5 = strlen(a2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    long long v4 = operator new(v7 + 1);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v8 | 0x8000000000000000;
    *(void *)(a1 + 8) = v4;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 31) = v5;
  if (v5) {
LABEL_8:
  }
    memmove(v4, a2, v6);
  *((unsigned char *)v4 + v6) = 0;
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_10046B3D8);
    std::error_code v9 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      return a1;
    }
    goto LABEL_11;
  }
  std::error_code v9 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
  {
LABEL_11:
    int v11 = 136315138;
    uint8x8_t v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Starting OSTransaction for %s", (uint8_t *)&v11, 0xCu);
  }
  return a1;
}

void sub_10009220C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1000A6954(a1);
}

void sub_100092688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  sub_1000D8BF8((uint64_t)&a28);

  if (*(char *)(v31 - 89) < 0) {
    operator delete(*(void **)(v31 - 112));
  }

  _Unwind_Resume(a1);
}

void sub_100092978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100092A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100092D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100092D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100092D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100092D44(uint64_t a1, uint64_t a2, char **a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 48))(&v24);
  if (!(_BYTE)v24)
  {
    if (qword_10047BF08 == -1)
    {
      char v10 = qword_10047BF10;
      if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG))
      {
LABEL_20:
        int v16 = 136380675;
        *(void *)int v17 = sub_1000900B8(a3);
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#prefetchDbShouldPrefetchTile, true, no resource info, %{private}s", (uint8_t *)&v16, 0xCu);
        BOOL v7 = 1;
        goto LABEL_28;
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_1004649A0);
      char v10 = qword_10047BF10;
      if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_20;
      }
    }
    BOOL v7 = 1;
    goto LABEL_28;
  }
  uint64_t v4 = sub_10008CB54((uint64_t)__p);
  char v22 = 0;
  if (*(unsigned char *)v4)
  {
    long long v23 = *(_OWORD *)(v4 + 8);
    char v22 = 1;
  }
  uint64_t v5 = sub_10008CB7C((uint64_t)__p);
  char v20 = 0;
  if (!*(unsigned char *)v5 || (v21 = *(_OWORD *)(v5 + 8), char v20 = 1, !v22))
  {
    if (qword_10047BF08 == -1)
    {
      uint64_t v8 = qword_10047BF10;
      if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG))
      {
LABEL_13:
        if (v22) {
          std::error_code v9 = "true";
        }
        else {
          std::error_code v9 = "false";
        }
        int v16 = 136315138;
        *(void *)int v17 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#shouldPrefetchMetadata, %s, based on cfgVersionInfo availability", (uint8_t *)&v16, 0xCu);
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_1004649A0);
      uint64_t v8 = qword_10047BF10;
      if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_13;
      }
    }
    BOOL v7 = v22 != 0;
    goto LABEL_28;
  }
  if (sub_100093240(&v23, &v21))
  {
    if (qword_10047BF08 == -1)
    {
      size_t v6 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG))
      {
LABEL_10:
        BOOL v7 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      dispatch_once(&qword_10047BF08, &stru_1004649A0);
      size_t v6 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_10;
      }
    }
    int v16 = 136380675;
    *(void *)int v17 = sub_1000900B8(a3);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#prefetchDbShouldPrefetchTile, false, metadata version matches tile version, %{private}s", (uint8_t *)&v16, 0xCu);
    goto LABEL_10;
  }
  uint64_t v11 = sub_1002C0BA0((uint64_t)&v23);
  uint64_t v12 = sub_1002C0BA0((uint64_t)&v21);
  BOOL v7 = v12 < v11;
  if (qword_10047BF08 == -1)
  {
    int v13 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_28;
    }
    goto LABEL_23;
  }
  dispatch_once(&qword_10047BF08, &stru_1004649A0);
  int v13 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG))
  {
LABEL_23:
    int v16 = 67109632;
    *(_DWORD *)int v17 = v12 < v11;
    *(_WORD *)&v17[4] = 2048;
    *(void *)&v17[6] = v11;
    __int16 v18 = 2048;
    uint64_t v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#shouldPrefetchMetadata, %d, comparing metadata timestamp, %lld, tile timestamp, %lld", (uint8_t *)&v16, 0x1Cu);
  }
LABEL_28:
  if ((_BYTE)v24)
  {
    if (v31) {
      char v31 = 0;
    }
    if (v30) {
      char v30 = 0;
    }
    if (v29) {
      char v29 = 0;
    }
    if (v28) {
      char v28 = 0;
    }
    uint64_t v14 = v27;
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if ((v26 & 0x80000000) == 0) {
        return v7;
      }
      goto LABEL_40;
    }
    if (v26 < 0) {
LABEL_40:
    }
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1000931B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000931C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000931D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000931EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100093200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100093214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100093228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1001F7984((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100093240(void *a1, void *a2)
{
  return *a1 == *a2;
}

void sub_1000935B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000935C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000935D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009372C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100093C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_100093D50(uint64_t a1)
{
  float v1 = *(float *)(a1 + 16);
  if (v1 == -1.0)
  {
    sub_1000AE4B0(v4, "");
    sub_1001F1308("numOfDaysBeforeIndoorTileRedownload is uninitilized", &__p);
    sub_10016A2C4((uint64_t)v4, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v5 < 0) {
      operator delete(v4[0]);
    }
    sub_1000D11E0((uint64_t)&v3);
  }
  return v1;
}

void sub_100093E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100094098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000940A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000940BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000940D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000940E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009416C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_100094188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000941A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100094484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10009473C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1000947E0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 80);
  if ((~v1 & 0x9F) != 0) {
    return 0;
  }
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (!v3) {
      uint64_t v3 = *(void *)(qword_100492A20 + 16);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
    if (!result) {
      return result;
    }
    int v1 = *(_DWORD *)(a1 + 80);
  }
  if ((v1 & 0x20) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_100492A20 + 40);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    if (!result) {
      return result;
    }
    int v1 = *(_DWORD *)(a1 + 80);
  }
  if ((v1 & 0x40) == 0)
  {
LABEL_17:
    if ((v1 & 0x100) == 0) {
      return 1;
    }
    uint64_t v7 = *(void *)(a1 + 64);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_100492A20 + 64);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
    if (result) {
      return 1;
    }
    return result;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_100492A20 + 48);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
  if (result)
  {
    int v1 = *(_DWORD *)(a1 + 80);
    goto LABEL_17;
  }
  return result;
}

BOOL sub_100094930(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 40) & 7) == 0;
}

uint64_t sub_100094944(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 92);
  if ((v1 & 8) == 0) {
    return 0;
  }
  if (*(int *)(a1 + 24) < 1)
  {
LABEL_9:
    if ((v1 & 4) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 64);
      if (v6)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
        if (!result) {
          return result;
        }
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(qword_100492A28 + 64) + 40))(*(void *)(qword_100492A28 + 64));
        if (!result) {
          return result;
        }
      }
    }
    return 1;
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8 * v4);
    if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5) & 1) == 0) {
      return 0;
    }
    if (++v4 >= *(int *)(a1 + 24))
    {
      int v1 = *(_DWORD *)(a1 + 92);
      goto LABEL_9;
    }
  }
}

BOOL sub_100094A50(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 32) & 3) == 0;
}

uint64_t sub_100094A64(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if ((~v1 & 3) != 0) {
    return 0;
  }
  if ((v1 & 1) == 0) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
    if (!result) {
      return result;
    }
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(qword_100492A58 + 16) + 40))(*(void *)(qword_100492A58 + 16));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_100094B08(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 200);
  if ((~v1 & 0x7D) != 0) {
    return 0;
  }
  if ((v1 & 8) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (!v3) {
      uint64_t v3 = *(void *)(qword_100492A50 + 32);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
    if (!result) {
      return result;
    }
    int v1 = *(_DWORD *)(a1 + 200);
  }
  if ((v1 & 0x10) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_100492A50 + 40);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    if (!result) {
      return result;
    }
    int v1 = *(_DWORD *)(a1 + 200);
  }
  if ((v1 & 0x20) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_100492A50 + 48);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    if (!result) {
      return result;
    }
    int v1 = *(_DWORD *)(a1 + 200);
  }
  if ((v1 & 0x40) == 0)
  {
LABEL_22:
    if ((v1 & 0x80) == 0) {
      return 1;
    }
    uint64_t v8 = *(void *)(a1 + 72);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_100492A50 + 72);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
    if (result) {
      return 1;
    }
    return result;
  }
  uint64_t v7 = *(void *)(a1 + 64);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_100492A50 + 64);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  if (result)
  {
    int v1 = *(_DWORD *)(a1 + 200);
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_100094C9C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36);
  if ((~v1 & 7) != 0) {
    return 0;
  }
  if ((v1 & 4) == 0) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
    if (!result) {
      return result;
    }
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(qword_100492A78 + 24) + 40))(*(void *)(qword_100492A78 + 24));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_100094D40(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  if ((~v1 & 0xF) != 0) {
    return 0;
  }
  if ((v1 & 1) == 0) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
    if (!result) {
      return result;
    }
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(qword_100492A70 + 16) + 40))(*(void *)(qword_100492A70 + 16));
  if (result) {
    return 1;
  }
  return result;
}

BOOL sub_100094DE4(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 36) & 3) == 0;
}

BOOL sub_100094DF8(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 44) & 7) == 0;
}

BOOL sub_100094E0C(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 68) & 0xF) == 0;
}

BOOL sub_100094E20(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 36) & 3) == 0;
}

uint64_t sub_100094E34(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 80))
  {
    if (*(unsigned char *)(this + 80))
    {
      this = *(void *)(this + 16);
      if (this)
      {
        char v2 = *(unsigned char *)(this + 32);
        if (v2)
        {
          *(_DWORD *)(this + 24) = 1;
          if ((v2 & 2) != 0)
          {
            uint64_t v3 = *(void *)(this + 16);
            if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
            {
              if (*(char *)(v3 + 23) < 0)
              {
                **(unsigned char **)uint64_t v3 = 0;
                *(void *)(v3 + 8) = 0;
              }
              else
              {
                *(unsigned char *)uint64_t v3 = 0;
                *(unsigned char *)(v3 + 23) = 0;
              }
            }
          }
        }
        uint64_t v4 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 24) = 0;
        if (v4) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    *(void *)(v1 + 24) = 0;
    *(void *)(v1 + 32) = 0;
    if ((*(unsigned char *)(v1 + 80) & 0x20) != 0)
    {
      this = *(void *)(v1 + 40);
      if (this)
      {
        if (*(unsigned char *)(this + 40))
        {
          *(void *)(this + 16) = 0;
          *(void *)(this + 24) = 0;
          *(_DWORD *)(this + 32) = 0;
        }
        uint64_t v5 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 32) = 0;
        if (v5) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    if ((*(unsigned char *)(v1 + 80) & 0x40) != 0)
    {
      this = *(void *)(v1 + 48);
      if (this)
      {
        if (*(unsigned char *)(this + 40))
        {
          *(void *)(this + 16) = 0;
          *(void *)(this + 24) = 0;
          *(_DWORD *)(this + 32) = 0;
        }
        uint64_t v6 = *(void *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 32) = 0;
        if (v6) {
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
        }
      }
    }
    if ((*(unsigned char *)(v1 + 80) & 0x80) != 0)
    {
      uint64_t v7 = *(void *)(v1 + 56);
      if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(unsigned char **)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0;
          int v8 = *(_DWORD *)(v1 + 80);
          if ((v8 & 0xFF00) == 0) {
            goto LABEL_36;
          }
          goto LABEL_29;
        }
        *(unsigned char *)uint64_t v7 = 0;
        *(unsigned char *)(v7 + 23) = 0;
      }
    }
  }
  int v8 = *(_DWORD *)(v1 + 80);
  if ((v8 & 0xFF00) == 0) {
    goto LABEL_36;
  }
LABEL_29:
  if ((v8 & 0x100) != 0)
  {
    this = *(void *)(v1 + 64);
    if (this)
    {
      if (*(unsigned char *)(this + 36))
      {
        *(void *)(this + 16) = 0;
        *(void *)(this + 24) = 0;
      }
      uint64_t v9 = *(void *)(this + 8);
      this += 8;
      *(_DWORD *)(this + 28) = 0;
      if (v9) {
        this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
  }
  *(_DWORD *)(v1 + 72) = 1;
LABEL_36:
  uint64_t v11 = *(void *)(v1 + 8);
  char v10 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v10 + 18) = 0;
  if (v11)
  {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v10);
  }
  return this;
}

uint64_t sub_100094FD4(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result = sub_100095788(a1, a2, a3);
  unint64_t v9 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
  unint64_t v10 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
  if (v9 > v10
    || v10 <= v9
    && (uint64_t result = sub_100095774((unsigned int *)((char *)a4 + 6), (unsigned int *)((char *)a3 + 6)), result))
  {
    __int16 v11 = *((_WORD *)a3 + 4);
    uint64_t v12 = *(void *)a3;
    __int16 v13 = *((_WORD *)a4 + 4);
    *(void *)a3 = *(void *)a4;
    *((_WORD *)a3 + 4) = v13;
    *(void *)a4 = v12;
    *((_WORD *)a4 + 4) = v11;
    unint64_t v14 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
    unint64_t v15 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    if (v14 > v15
      || v15 <= v14
      && (uint64_t result = sub_100095774((unsigned int *)((char *)a3 + 6), (unsigned int *)((char *)a2 + 6)), result))
    {
      __int16 v16 = *((_WORD *)a2 + 4);
      uint64_t v17 = *(void *)a2;
      __int16 v18 = *((_WORD *)a3 + 4);
      *(void *)a2 = *(void *)a3;
      *((_WORD *)a2 + 4) = v18;
      *(void *)a3 = v17;
      *((_WORD *)a3 + 4) = v16;
      unint64_t v19 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
      unint64_t v20 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
      if (v19 > v20
        || v20 <= v19
        && (uint64_t result = sub_100095774((unsigned int *)((char *)a2 + 6), (unsigned int *)((char *)a1 + 6)), result))
      {
        __int16 v21 = *((_WORD *)a1 + 4);
        uint64_t v22 = *(void *)a1;
        __int16 v23 = *((_WORD *)a2 + 4);
        *(void *)a1 = *(void *)a2;
        *((_WORD *)a1 + 4) = v23;
        *(void *)a2 = v22;
        *((_WORD *)a2 + 4) = v21;
      }
    }
  }
  return result;
}

uint64_t sub_100095138(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (unsigned int *)result;
LABEL_2:
  __int16 v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * (v14 >> 1);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          char v29 = (uint64_t *)((char *)a2 - 10);
          unint64_t v30 = *v10 | ((unint64_t)*((unsigned __int16 *)v10 + 2) << 32);
          unint64_t v31 = *(unsigned int *)((char *)a2 - 10) | ((unint64_t)*((unsigned __int16 *)a2 - 3) << 32);
          if (v30 > v31
            || v31 <= v30 && (uint64_t result = sub_100095774(a2 - 1, (unsigned int *)((char *)v10 + 6)), result))
          {
            uint64_t v32 = *(void *)v10;
            __int16 v63 = *((_WORD *)v10 + 4);
            uint64_t v62 = v32;
            uint64_t v33 = *v29;
            *((_WORD *)v10 + 4) = *((_WORD *)a2 - 1);
            *(void *)unint64_t v10 = v33;
            uint64_t *v29 = v62;
            *((_WORD *)a2 - 1) = v63;
          }
          break;
        case 3uLL:
          uint64_t result = sub_100095788(v10, (unsigned int *)((char *)v10 + 10), (unsigned int *)((char *)a2 - 10));
          break;
        case 4uLL:
          uint64_t result = sub_100094FD4(v10, (unsigned int *)((char *)v10 + 10), v10 + 5, (unsigned int *)((char *)a2 - 10));
          break;
        case 5uLL:
          uint64_t result = sub_100095C18(v10, (unsigned int *)((char *)v10 + 10), v10 + 5, (unsigned int *)((char *)v10 + 30), (unsigned int *)((char *)a2 - 10));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 239) {
      break;
    }
    if (v12 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v47 = (v15 - 2) >> 1;
        unint64_t v48 = v47 + 1;
        long long v49 = (unsigned int *)((char *)v10 + 10 * v47);
        do
        {
          sub_1002864C8((BOOL)v10, a3, 0xCCCCCCCCCCCCCCCDLL * (v14 >> 1), v49);
          long long v49 = (unsigned int *)((char *)v49 - 10);
          --v48;
        }
        while (v48);
        unint64_t v50 = v14 / 0xAuLL;
        do
        {
          uint64_t result = (uint64_t)sub_1002866F4((char *)v10, (uint64_t)a2, a3, v50);
          a2 = (unsigned int *)((char *)a2 - 10);
        }
        while (v50-- > 2);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = (unsigned int *)((char *)v10 + 10 * (v15 >> 1));
    if ((unint64_t)v14 < 0x501)
    {
      sub_100095788(v17, v10, (unsigned int *)((char *)a2 - 10));
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_100095788(v10, v17, (unsigned int *)((char *)a2 - 10));
      uint64_t v18 = 10 * v16;
      unint64_t v19 = (unsigned int *)((char *)v10 + 10 * v16 - 10);
      sub_100095788((unsigned int *)((char *)v10 + 10), v19, a2 - 5);
      unint64_t v20 = (unsigned int *)((char *)v10 + v18 + 10);
      sub_100095788(v10 + 5, v20, (unsigned int *)((char *)a2 - 30));
      sub_100095788(v19, v17, v20);
      uint64_t v21 = *(void *)v10;
      __int16 v63 = *((_WORD *)v10 + 4);
      uint64_t v62 = v21;
      uint64_t v22 = *(void *)v17;
      *((_WORD *)v10 + 4) = *((_WORD *)v17 + 4);
      *(void *)unint64_t v10 = v22;
      uint64_t v23 = v62;
      *((_WORD *)v17 + 4) = v63;
      *(void *)uint64_t v17 = v23;
      if (a5) {
        goto LABEL_15;
      }
    }
    unint64_t v24 = *v10 | ((unint64_t)*((unsigned __int16 *)v10 + 2) << 32);
    unint64_t v25 = *(unsigned int *)((char *)v10 - 10) | ((unint64_t)*((unsigned __int16 *)v10 - 3) << 32);
    if (v24 <= v25 && (v25 > v24 || !sub_100095774(v10 - 1, (unsigned int *)((char *)v10 + 6))))
    {
      uint64_t result = (uint64_t)sub_100285F70((uint64_t *)v10, a2);
      __int16 v11 = (unsigned int *)result;
      goto LABEL_20;
    }
LABEL_15:
    char v26 = (unsigned int *)sub_1000959D4((char *)v10, (unint64_t)a2);
    if ((v27 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v28 = sub_100286210(v10, v26);
    __int16 v11 = (unsigned int *)((char *)v26 + 10);
    uint64_t result = sub_100286210((unsigned int *)((char *)v26 + 10), a2);
    if (result)
    {
      a4 = -v13;
      a2 = v26;
      if (v28) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v28)
    {
LABEL_18:
      uint64_t result = sub_100095138(v10, v26, a3, -v13, a5 & 1);
      __int16 v11 = (unsigned int *)((char *)v26 + 10);
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if ((a5 & 1) == 0)
  {
    if (v10 != a2)
    {
      for (uint64_t i = (unsigned int *)((char *)v10 + 10);
            (unsigned int *)((char *)v10 + 10) != a2;
            uint64_t i = (unsigned int *)((char *)v10 + 10))
      {
        std::string v54 = v10;
        unint64_t v10 = i;
        unint64_t v55 = *v54 | ((unint64_t)*((unsigned __int16 *)v54 + 2) << 32);
        unint64_t v56 = *(unsigned int *)((char *)v54 + 10) | ((unint64_t)*((unsigned __int16 *)v54 + 7) << 32);
        if (v55 <= v56)
        {
          if (v56 > v55) {
            continue;
          }
          uint64_t result = sub_100095774(v54 + 4, (unsigned int *)((char *)v54 + 6));
          if (!result) {
            continue;
          }
        }
        uint64_t v57 = *(void *)v10;
        __int16 v63 = *((_WORD *)v10 + 4);
        uint64_t v62 = v57;
        do
        {
          do
          {
            uint64_t v58 = v54;
            *(void *)((char *)v54 + 10) = *(void *)v54;
            *((_WORD *)v54 + 9) = *((_WORD *)v54 + 4);
            unsigned int v59 = *(unsigned int *)((char *)v54 - 10);
            std::string v54 = (unsigned int *)((char *)v54 - 10);
            unint64_t v60 = v59 | ((unint64_t)*((unsigned __int16 *)v58 - 3) << 32);
            unint64_t v61 = v62 | ((unint64_t)WORD2(v62) << 32);
          }
          while (v60 > v61);
          if (v61 > v60) {
            break;
          }
          uint64_t result = sub_100095774((uint64_t *)((char *)&v62 + 6), v58 - 1);
        }
        while ((result & 1) != 0);
        uint64_t v53 = v62;
        *((_WORD *)v58 + 4) = v63;
        *(void *)uint64_t v58 = v53;
      }
    }
    return result;
  }
  if (v10 == a2) {
    return result;
  }
  uint64_t v34 = (char *)v10 + 10;
  if ((unsigned int *)((char *)v10 + 10) == a2) {
    return result;
  }
  uint64_t v35 = 0;
  std::string v36 = v10;
  while (2)
  {
    long long v39 = v36;
    std::string v36 = (unsigned int *)v34;
    unint64_t v40 = *v39 | ((unint64_t)*((unsigned __int16 *)v39 + 2) << 32);
    unint64_t v41 = *(unsigned int *)((char *)v39 + 10) | ((unint64_t)*((unsigned __int16 *)v39 + 7) << 32);
    if (v40 <= v41)
    {
      if (v41 > v40) {
        goto LABEL_41;
      }
      uint64_t result = sub_100095774(v39 + 4, (unsigned int *)((char *)v39 + 6));
      if (!result) {
        goto LABEL_41;
      }
    }
    uint64_t v42 = *(void *)v36;
    __int16 v63 = *((_WORD *)v36 + 4);
    uint64_t v62 = v42;
    *(void *)std::string v36 = *(void *)v39;
    *((_WORD *)v36 + 4) = *((_WORD *)v39 + 4);
    std::exception_ptr v37 = v10;
    if (v39 == v10) {
      goto LABEL_40;
    }
    uint64_t v43 = v35;
    while (2)
    {
      int v44 = (char *)v10 + v43;
      unint64_t v45 = *(unsigned int *)((char *)v10 + v43 - 10) | ((unint64_t)*(unsigned __int16 *)((char *)v10 + v43 - 6) << 32);
      unint64_t v46 = v62 | ((unint64_t)WORD2(v62) << 32);
      if (v45 > v46)
      {
LABEL_45:
        long long v39 = (unsigned int *)((char *)v39 - 10);
        *(void *)int v44 = *(void *)((char *)v10 + v43 - 10);
        *((_WORD *)v44 + 4) = *(_WORD *)((char *)v10 + v43 - 2);
        v43 -= 10;
        if (!v43)
        {
          std::exception_ptr v37 = v10;
          goto LABEL_40;
        }
        continue;
      }
      break;
    }
    if (v46 <= v45)
    {
      uint64_t result = sub_100095774((uint64_t *)((char *)&v62 + 6), (unsigned int *)((char *)v10 + v43 - 4));
      if (!result)
      {
        std::exception_ptr v37 = v39;
        goto LABEL_40;
      }
      goto LABEL_45;
    }
    std::exception_ptr v37 = (unsigned int *)((char *)v10 + v43);
LABEL_40:
    uint64_t v38 = v62;
    *((_WORD *)v37 + 4) = v63;
    *(void *)std::exception_ptr v37 = v38;
LABEL_41:
    uint64_t v34 = (char *)v36 + 10;
    v35 += 10;
    if ((unsigned int *)((char *)v36 + 10) != a2) {
      continue;
    }
    return result;
  }
}

BOOL sub_100095774(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

uint64_t sub_100095788(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v6 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
  unint64_t v7 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
  if (v6 > v7
    || v7 <= v6
    && (BOOL v8 = sub_100095774((unsigned int *)((char *)a2 + 6), (unsigned int *)((char *)a1 + 6)),
        unint64_t v7 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32),
        v8))
  {
    unint64_t v9 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    if (v7 <= v9 && (v9 > v7 || !sub_100095774((unsigned int *)((char *)a3 + 6), (unsigned int *)((char *)a2 + 6))))
    {
      __int16 v23 = *((_WORD *)a1 + 4);
      uint64_t v24 = *(void *)a1;
      __int16 v25 = *((_WORD *)a2 + 4);
      *(void *)a1 = *(void *)a2;
      *((_WORD *)a1 + 4) = v25;
      *(void *)a2 = v24;
      *((_WORD *)a2 + 4) = v23;
      unint64_t v26 = v24 | ((unint64_t)WORD2(v24) << 32);
      unint64_t v27 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
      if (v26 > v27 || v27 <= v26 && sub_100095774((unsigned int *)((char *)a3 + 6), (unsigned int *)((char *)a2 + 6)))
      {
        __int16 v28 = *((_WORD *)a2 + 4);
        uint64_t v29 = *(void *)a2;
        __int16 v30 = *((_WORD *)a3 + 4);
        *(void *)a2 = *(void *)a3;
        *((_WORD *)a2 + 4) = v30;
        *(void *)a3 = v29;
        *((_WORD *)a3 + 4) = v28;
        return 2;
      }
      return 1;
    }
    __int16 v10 = *((_WORD *)a1 + 4);
    uint64_t v11 = *(void *)a1;
    __int16 v12 = *((_WORD *)a3 + 4);
    *(void *)a1 = *(void *)a3;
    *((_WORD *)a1 + 4) = v12;
    *(void *)a3 = v11;
    *((_WORD *)a3 + 4) = v10;
    return 1;
  }
  else
  {
    unint64_t v14 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    if (v7 > v14) {
      goto LABEL_8;
    }
    if (v14 > v7) {
      return 0;
    }
    uint64_t result = sub_100095774((unsigned int *)((char *)a3 + 6), (unsigned int *)((char *)a2 + 6));
    if (result)
    {
LABEL_8:
      __int16 v15 = *((_WORD *)a2 + 4);
      uint64_t v16 = *(void *)a2;
      __int16 v17 = *((_WORD *)a3 + 4);
      *(void *)a2 = *(void *)a3;
      *((_WORD *)a2 + 4) = v17;
      *(void *)a3 = v16;
      *((_WORD *)a3 + 4) = v15;
      unint64_t v18 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
      unint64_t v19 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
      if (v18 > v19 || v19 <= v18 && sub_100095774((unsigned int *)((char *)a2 + 6), (unsigned int *)((char *)a1 + 6)))
      {
        __int16 v20 = *((_WORD *)a1 + 4);
        uint64_t v21 = *(void *)a1;
        __int16 v22 = *((_WORD *)a2 + 4);
        *(void *)a1 = *(void *)a2;
        *((_WORD *)a1 + 4) = v22;
        *(void *)a2 = v21;
        *((_WORD *)a2 + 4) = v20;
        return 2;
      }
      return 1;
    }
  }
  return result;
}

char *sub_1000959D4(char *a1, unint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v30 = *(void *)a1;
  __int16 v31 = *((_WORD *)a1 + 4);
  while (1)
  {
    unint64_t v5 = v30 | ((unint64_t)WORD2(v30) << 32);
    unint64_t v6 = *(unsigned int *)&a1[v4 + 10] | ((unint64_t)*(unsigned __int16 *)&a1[v4 + 14] << 32);
    if (v5 <= v6 && (v6 > v5 || !sub_100095774(&a1[v4 + 16], (uint64_t *)((char *)&v30 + 6)))) {
      break;
    }
    v4 += 10;
  }
  unint64_t v7 = &a1[v4];
  unint64_t v8 = (unint64_t)&a1[v4 + 10];
  if (v4)
  {
    unsigned int v10 = *(_DWORD *)(a2 - 10);
    a2 -= 10;
    uint64_t v9 = v10;
    unint64_t v11 = v30 | ((unint64_t)WORD2(v30) << 32);
    while (1)
    {
      unint64_t v13 = v9 | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 32);
      if (v11 > v13) {
        break;
      }
      if (v13 <= v11)
      {
        if (sub_100095774((_DWORD *)(a2 + 6), (uint64_t *)((char *)&v30 + 6))) {
          break;
        }
        unint64_t v11 = v30 | ((unint64_t)WORD2(v30) << 32);
      }
      unsigned int v12 = *(_DWORD *)(a2 - 10);
      a2 -= 10;
      uint64_t v9 = v12;
    }
  }
  else
  {
LABEL_19:
    if (v8 < a2)
    {
      do
      {
        unsigned int v14 = *(_DWORD *)(a2 - 10);
        a2 -= 10;
        unint64_t v15 = v30 | ((unint64_t)WORD2(v30) << 32);
        unint64_t v16 = v14 | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 32);
        if (v15 > v16) {
          break;
        }
        if (v16 > v15) {
          goto LABEL_19;
        }
        BOOL v17 = sub_100095774((_DWORD *)(a2 + 6), (uint64_t *)((char *)&v30 + 6));
        if (v8 >= a2) {
          break;
        }
      }
      while (!v17);
    }
  }
  if (v8 < a2)
  {
    unint64_t v18 = &a1[v4 + 10];
    unint64_t v19 = a2;
    do
    {
      uint64_t v20 = *(void *)v18;
      __int16 v33 = *((_WORD *)v18 + 4);
      uint64_t v32 = v20;
      uint64_t v21 = *(void *)v19;
      *((_WORD *)v18 + 4) = *(_WORD *)(v19 + 8);
      *(void *)unint64_t v18 = v21;
      uint64_t v22 = v32;
      *(_WORD *)(v19 + 8) = v33;
      *(void *)unint64_t v19 = v22;
      while (1)
      {
        do
        {
          v18 += 10;
          unint64_t v23 = v30 | ((unint64_t)WORD2(v30) << 32);
          unint64_t v24 = *(unsigned int *)v18 | ((unint64_t)*((unsigned __int16 *)v18 + 2) << 32);
        }
        while (v23 > v24);
        if (v24 > v23) {
          break;
        }
        if (!sub_100095774(v18 + 6, (uint64_t *)((char *)&v30 + 6))) {
          goto LABEL_27;
        }
      }
      do
      {
LABEL_28:
        unsigned int v25 = *(_DWORD *)(v19 - 10);
        v19 -= 10;
        unint64_t v26 = v25 | ((unint64_t)*(unsigned __int16 *)(v19 + 4) << 32);
        if (v23 > v26) {
          goto LABEL_22;
        }
      }
      while (v26 > v23);
      if (!sub_100095774((_DWORD *)(v19 + 6), (uint64_t *)((char *)&v30 + 6)))
      {
LABEL_27:
        unint64_t v23 = v30 | ((unint64_t)WORD2(v30) << 32);
        goto LABEL_28;
      }
LABEL_22:
      ;
    }
    while ((unint64_t)v18 < v19);
    unint64_t v7 = v18 - 10;
  }
  if (v7 != a1)
  {
    uint64_t v27 = *(void *)v7;
    *((_WORD *)a1 + 4) = *((_WORD *)v7 + 4);
    *(void *)a1 = v27;
  }
  uint64_t v28 = v30;
  *((_WORD *)v7 + 4) = v31;
  *(void *)unint64_t v7 = v28;
  return v7;
}

uint64_t sub_100095C18(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = sub_100094FD4(a1, a2, a3, a4);
  unint64_t v11 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
  unint64_t v12 = *a5 | ((unint64_t)*((unsigned __int16 *)a5 + 2) << 32);
  if (v11 > v12
    || v12 <= v11
    && (uint64_t result = sub_100095774((unsigned int *)((char *)a5 + 6), (unsigned int *)((char *)a4 + 6)), result))
  {
    __int16 v13 = *((_WORD *)a4 + 4);
    uint64_t v14 = *(void *)a4;
    __int16 v15 = *((_WORD *)a5 + 4);
    *(void *)a4 = *(void *)a5;
    *((_WORD *)a4 + 4) = v15;
    *(void *)a5 = v14;
    *((_WORD *)a5 + 4) = v13;
    unint64_t v16 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    unint64_t v17 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
    if (v16 > v17
      || v17 <= v16
      && (uint64_t result = sub_100095774((unsigned int *)((char *)a4 + 6), (unsigned int *)((char *)a3 + 6)), result))
    {
      __int16 v18 = *((_WORD *)a3 + 4);
      uint64_t v19 = *(void *)a3;
      __int16 v20 = *((_WORD *)a4 + 4);
      *(void *)a3 = *(void *)a4;
      *((_WORD *)a3 + 4) = v20;
      *(void *)a4 = v19;
      *((_WORD *)a4 + 4) = v18;
      unint64_t v21 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
      unint64_t v22 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
      if (v21 > v22
        || v22 <= v21
        && (uint64_t result = sub_100095774((unsigned int *)((char *)a3 + 6), (unsigned int *)((char *)a2 + 6)), result))
      {
        __int16 v23 = *((_WORD *)a2 + 4);
        uint64_t v24 = *(void *)a2;
        __int16 v25 = *((_WORD *)a3 + 4);
        *(void *)a2 = *(void *)a3;
        *((_WORD *)a2 + 4) = v25;
        *(void *)a3 = v24;
        *((_WORD *)a3 + 4) = v23;
        unint64_t v26 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
        unint64_t v27 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
        if (v26 > v27
          || v27 <= v26
          && (uint64_t result = sub_100095774((unsigned int *)((char *)a2 + 6), (unsigned int *)((char *)a1 + 6)), result))
        {
          __int16 v28 = *((_WORD *)a1 + 4);
          uint64_t v29 = *(void *)a1;
          __int16 v30 = *((_WORD *)a2 + 4);
          *(void *)a1 = *(void *)a2;
          *((_WORD *)a1 + 4) = v30;
          *(void *)a2 = v29;
          *((_WORD *)a2 + 4) = v28;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100095E08(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(unsigned char *)(this + 200)) {
    goto LABEL_27;
  }
  if ((*(unsigned char *)(this + 200) & 1) == 0
    || (uint64_t v2 = *(void *)(this + 16), (_UNKNOWN *)v2 == &wireless_diagnostics::google::protobuf::internal::kEmptyString))
  {
LABEL_6:
    *(_DWORD *)(this + 56) = 0;
    *(void *)(this + 24) = 0;
    int v3 = *(_DWORD *)(this + 200);
    if ((v3 & 8) != 0) {
      goto LABEL_7;
    }
    goto LABEL_9;
  }
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_6;
  }
  **(unsigned char **)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(void *)(this + 24) = 0;
  int v3 = *(_DWORD *)(this + 200);
  if ((v3 & 8) != 0)
  {
LABEL_7:
    this = *(void *)(this + 32);
    if (this)
    {
      this = (uint64_t)sub_100333070(this);
      int v3 = *(_DWORD *)(v1 + 200);
    }
  }
LABEL_9:
  if ((v3 & 0x10) != 0)
  {
    this = *(void *)(v1 + 40);
    if (this)
    {
      this = (uint64_t)sub_10032048C(this);
      int v3 = *(_DWORD *)(v1 + 200);
    }
  }
  if ((v3 & 0x20) != 0)
  {
    this = *(void *)(v1 + 48);
    if (this)
    {
      this = sub_1003343E0(this);
      int v3 = *(_DWORD *)(v1 + 200);
    }
  }
  if ((v3 & 0x40) != 0)
  {
    this = *(void *)(v1 + 64);
    if (this)
    {
      if (*(unsigned char *)(this + 44))
      {
        *(void *)(this + 16) = 0;
        *(void *)(this + 24) = 0;
        *(void *)(this + 32) = 0;
      }
      uint64_t v4 = *(void *)(this + 8);
      this += 8;
      *(_DWORD *)(this + 36) = 0;
      if (v4) {
        this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
  }
  if ((*(unsigned char *)(v1 + 200) & 0x80) != 0)
  {
    this = *(void *)(v1 + 72);
    if (this)
    {
      if (*(unsigned char *)(this + 44))
      {
        *(void *)(this + 16) = 0;
        *(void *)(this + 24) = 0;
        *(void *)(this + 32) = 0;
      }
      uint64_t v5 = *(void *)(this + 8);
      this += 8;
      *(_DWORD *)(this + 36) = 0;
      if (v5) {
        this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
  }
LABEL_27:
  int v6 = *(_DWORD *)(v1 + 200);
  if ((v6 & 0x1FE00) != 0)
  {
    *(void *)(v1 + 104) = 0;
    *(_DWORD *)(v1 + 60) = 2;
    *(void *)(v1 + 136) = 0x100000001;
    *(void *)(v1 + 144) = 0;
    *(void *)(v1 + 152) = 0;
  }
  if ((v6 & 0xFF0000) != 0)
  {
    if ((v6 & 0x10000) != 0)
    {
      this = *(void *)(v1 + 160);
      if (this)
      {
        this = (uint64_t)sub_100320C5C(this);
        int v6 = *(_DWORD *)(v1 + 200);
      }
    }
    if ((v6 & 0x20000) != 0)
    {
      this = *(void *)(v1 + 168);
      if (this) {
        this = (uint64_t)sub_100320C5C(this);
      }
    }
    *(void *)(v1 + 176) = 0;
    *(void *)(v1 + 184) = 0;
    *(unsigned char *)(v1 + 192) = 0;
  }
  if (*(int *)(v1 + 88) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(v1 + 80) + 8 * v7);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
      ++v7;
    }
    while (v7 < *(int *)(v1 + 88));
  }
  *(_DWORD *)(v1 + 88) = 0;
  if (*(int *)(v1 + 120) >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(v1 + 112) + 8 * v9);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10);
      ++v9;
    }
    while (v9 < *(int *)(v1 + 120));
  }
  uint64_t v12 = *(void *)(v1 + 8);
  unint64_t v11 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v11 + 28) = 0;
  *((_DWORD *)v11 + 48) = 0;
  if (v12)
  {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v11);
  }
  return this;
}

void sub_100096040(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = (id *)(a1 + 32);
  }
  else
  {
    int v3 = (id *)(a1 + 32);
  }
  objc_destroyWeak(v3);
}

uint64_t sub_1000960DC(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 92);
  if ((v2 & 0x3FC) != 0)
  {
    if ((v2 & 4) != 0)
    {
      this = *(void *)(this + 64);
      if (this)
      {
        this = sub_100331BB4(this);
        int v2 = *(_DWORD *)(v1 + 92);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 72);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    *(void *)(v1 + 80) = 0;
  }
  if (*(int *)(v1 + 24) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 16) + 8 * v4);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  if (*(int *)(v1 + 48) >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(v1 + 40) + 8 * v6);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *(int *)(v1 + 48));
  }
  uint64_t v9 = *(void *)(v1 + 8);
  uint64_t v8 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v8 + 10) = 0;
  *((_DWORD *)v8 + 21) = 0;
  if (v9)
  {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v8);
  }
  return this;
}

uint64_t sub_100096224(uint64_t a1)
{
  return sub_10004813C(*(void *)(a1 + 32) + 3736, a1 + 48);
}

uint64_t sub_100096240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 272);
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 16);
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(qword_10047F018 + 272);
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
LABEL_3:
      uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 272);
      if (v4) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  uint64_t v6 = *(void *)(qword_10047F0E0 + 16);
  uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 272);
  if (v4)
  {
LABEL_4:
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v8 = *(void *)(*(void *)(qword_10047F018 + 272) + 16);
  if (v8)
  {
LABEL_5:
    uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 272);
    if (v4) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v8 = *(void *)(qword_10047F0E0 + 16);
  uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 272);
  if (v4)
  {
LABEL_6:
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v10 = *(void *)(*(void *)(qword_10047F018 + 272) + 16);
  if (v10)
  {
LABEL_7:
    uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 272);
    if (v4) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v10 = *(void *)(qword_10047F0E0 + 16);
  uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 272);
  if (v4)
  {
LABEL_8:
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v12 = *(void *)(*(void *)(qword_10047F018 + 272) + 16);
  if (v12)
  {
LABEL_9:
    uint64_t v13 = *(void *)(*(void *)(a1 + 8) + 272);
    if (v4) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v12 = *(void *)(qword_10047F0E0 + 16);
  uint64_t v13 = *(void *)(*(void *)(a1 + 8) + 272);
  if (v4)
  {
LABEL_10:
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_26:
    uint64_t v14 = *(void *)(qword_10047F0E0 + 16);
    if (v4) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t v14 = *(void *)(*(void *)(qword_10047F018 + 272) + 16);
  if (!v14) {
    goto LABEL_26;
  }
LABEL_11:
  if (v4) {
    goto LABEL_12;
  }
LABEL_27:
  uint64_t v4 = *(void *)(qword_10047F018 + 272);
LABEL_12:
  uint64_t v15 = *(void *)(v4 + 16);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_10047F0E0 + 16);
  }
  int v16 = *(unsigned __int8 *)(v5 + 24);
  int v17 = *(unsigned __int8 *)(v5 + 25);
  sub_1000964B4((uint64_t)&v20, *(unsigned char *)(v8 + 24) != 0, *(unsigned char *)(v10 + 25) != 0, *(unsigned char *)(v12 + 26) != 0, *(unsigned char *)(v14 + 27) != 0, *(double *)(v6 + 16), *(float *)(v15 + 28));
  uint64_t v18 = *(void *)(*(void *)(a1 + 8) + 272);
  if (!v18) {
    uint64_t v18 = *(void *)(qword_10047F018 + 272);
  }
  return sub_100096484(a2, v16 != 0, v17 != 0, &v20, *(unsigned char *)(v18 + 26), *(unsigned char *)(v18 + 27), *(unsigned char *)(v18 + 33), *(unsigned char *)(v18 + 34), *(float *)(v18 + 36));
}

uint64_t sub_100096484(uint64_t result, char a2, char a3, long long *a4, char a5, char a6, char a7, char a8, double a9)
{
  *(unsigned char *)uint64_t result = a2;
  *(unsigned char *)(result + 1) = a3;
  long long v9 = *a4;
  *(void *)(result + 24) = *((void *)a4 + 2);
  *(_OWORD *)(result + 8) = v9;
  *(unsigned char *)(result + 32) = a5;
  *(unsigned char *)(result + 33) = a6;
  *(unsigned char *)(result + 34) = a7;
  *(double *)(result + 40) = a9;
  *(unsigned char *)(result + 48) = a8;
  return result;
}

uint64_t sub_1000964B4(uint64_t result, char a2, char a3, char a4, char a5, double a6, double a7)
{
  *(double *)uint64_t result = a6;
  *(unsigned char *)(result + 8) = a2;
  *(unsigned char *)(result + 9) = a3;
  *(unsigned char *)(result + 10) = a4;
  *(unsigned char *)(result + 11) = a5;
  *(double *)(result + 16) = a7;
  return result;
}

uint64_t sub_1000964D0(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 8);
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(uint64_t **)(v2 + 128);
  for (uint64_t i = *(uint64_t **)(v2 + 136);
        v3 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v5 + 16))(v5, *(void *)(v1 + 48)))
  {
    uint64_t v5 = *v3++;
  }
  return result;
}

uint64_t *sub_100096540(uint64_t a1)
{
  return sub_1000ACDC8((uint64_t *)(a1 + 48));
}

void sub_100096558(uint64_t a1)
{
}

void sub_100096564(uint64_t a1)
{
}

uint64_t sub_10009656C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  return result;
}

__n128 sub_10009657C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 sub_10009658C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 sub_1000965A0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t sub_1000965AC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  return result;
}

__n128 sub_1000965C4(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t sub_1000965D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

id sub_1000965E0(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 8) = *(void *)(a1 + 40);
  return [*(id *)(a1 + 32) implOnQueueUpdateTimer];
}

uint64_t sub_1000965F4(uint64_t a1)
{
  if (*(int *)(a1 + 24) < 1) {
    return 1;
  }
  uint64_t v2 = 0;
  do
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8 * v2);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
    if ((result & 1) == 0) {
      break;
    }
    ++v2;
  }
  while (v2 < *(int *)(a1 + 24));
  return result;
}

uint64_t sub_100096674(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 112);
  if ((v2 & 0x1FE) != 0)
  {
    if ((v2 & 2) != 0)
    {
      this = *(void *)(this + 40);
      if (this)
      {
        this = sub_10003DA94(this);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    *(void *)(v1 + 48) = 0x3FFF5C28F5C28F5CLL;
    *(void *)&long long v3 = 0xC8000000C8;
    *((void *)&v3 + 1) = 0xC8000000C8;
    *(_OWORD *)(v1 + 56) = v3;
    *(_DWORD *)(v1 + 72) = 200000000;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *(_OWORD *)(v1 + 76) = xmmword_1003FE670;
    *(_DWORD *)(v1 + 92) = 1088421888;
    *(_DWORD *)(v1 + 104) = 1088421888;
    if ((v2 & 0x4000) != 0)
    {
      this = *(void *)(v1 + 96);
      if (this) {
        this = (uint64_t)sub_1001B8BE0(this);
      }
    }
  }
  if (*(int *)(v1 + 24) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 16) + 8 * v4);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 24));
  }
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v6 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v6 + 4) = 0;
  *((_DWORD *)v6 + 26) = 0;
  if (v7)
  {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v6);
  }
  return this;
}

uint64_t sub_100096788@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = *a1;
  if (v4 == 0 || v4 >= 0xFFFFFFFE)
  {
    sub_1000AE4B0(&v13, "tm unable to handle ");
    unsigned int v10 = *a1 + 2;
    if (v10 >= 3) {
      uint64_t v11 = "a special date value";
    }
    else {
      uint64_t v11 = off_10045D5B0[v10];
    }
    std::string::append(&v13, v11);
    std::logic_error::logic_error(&v12, &v13);
    sub_1001963EC(&v12);
  }
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  unint64_t v5 = sub_10009698C(v4);
  *(_DWORD *)(a2 + 16) = WORD1(v5) - 1;
  *(_DWORD *)(a2 + 20) = (unsigned __int16)v5 - 1900;
  *(_DWORD *)(a2 + 12) = WORD2(v5);
  unint64_t v6 = sub_10009698C(*a1);
  int v7 = (14 - WORD1(v6)) / 12;
  int v8 = (int)((unsigned __int16)(v6 - v7)
           + WORD2(v6)
           + ((unsigned __int16)(v6 - v7) >> 2)
           - (unsigned __int16)(v6 - v7) / 0x64u
           + (unsigned __int16)(v6 - v7) / 0x190u
           + ((357913942 * (unint64_t)(31 * (unsigned __int16)(WORD1(v6) + 12 * v7 - 2))) >> 32))
     % 7;
  if ((unsigned __int16)v8 >= 7u) {
    sub_100196BC0();
  }
  *(_DWORD *)(a2 + 24) = (unsigned __int16)v8;
  uint64_t result = sub_10009B9C8(a1);
  *(_DWORD *)(a2 + 28) = (unsigned __int16)result - 1;
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

void sub_10009695C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::out_of_range a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_10009698C(int a1)
{
  unsigned int v1 = ((4 * (a1 + 32044)) | 3u) / 0x23AB1;
  unsigned int v2 = a1 + 32044 - ((146097 * v1) >> 2);
  unsigned int v3 = ((4 * v2) | 3) / 0x5B5;
  unsigned int v4 = v2 - ((1461 * v3) >> 2);
  unsigned int v5 = 5 * v4 + 2;
  unsigned __int16 v6 = v3 + 100 * v1 - 4800 + v5 / 0x5FA;
  if (v6 < 0x578u || (unsigned __int16)(v6 >> 4) >= 0x271u) {
    sub_100190634();
  }
  if ((unsigned __int16)(v5 / 0x99) - 12 * (unsigned __int16)(v5 / 0x5FA) == 0xFFFD
    || (unsigned __int16)(v5 / 0x99 - 12 * (v5 / 0x5FA) + 3) >= 0xDu)
  {
    sub_100190F24();
  }
  if ((_WORD)v4 - (unsigned __int16)((153 * (v5 / 0x99) + 2) / 5) == 0xFFFF
    || (unsigned __int16)(v4 - (153 * (v5 / 0x99) + 2) / 5 + 1) >= 0x20u)
  {
    sub_100191814();
  }
  return ((unint64_t)(unsigned __int16)(v5 / 0x99 - 12 * (v5 / 0x5FA) + 3) << 16) | ((unint64_t)(v4 - (153 * (v5 / 0x99) + 2) / 5 + 1) << 32) | (unsigned __int16)(v3 + 100 * v1 - 4800 + v5 / 0x5FA);
}

void sub_100096B1C(void *a1)
{
  *a1 = off_10046BEB8;
  sub_1000A15B4();
}

void sub_100096BBC(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  sub_1003A1EA8(v5);
  if (*(unsigned char *)(v2 + 376)) {
    *(unsigned char *)(v2 + 376) = 0;
  }
  sub_1003A1EA8(v3);
  sub_1000D794C(v1);
  _Unwind_Resume(a1);
}

void sub_100096BF8(_Unwind_Exception *a1)
{
  sub_1000D794C(v1);
  _Unwind_Resume(a1);
}

double sub_100096C0C(uint64_t a1)
{
  *(void *)a1 = 892857142;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = off_10045D918;
  *(void *)(a1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 128) &= 0xFC00u;
  *(void *)(a1 + 136) = 0x7FF8000000000000;
  *(void *)(a1 + 144) = off_10045D918;
  *(void *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(void *)(a1 + 192) = 0;
  *(_WORD *)(a1 + 232) &= 0xFC00u;
  *(void *)(a1 + 240) = 0x7FF8000000000000;
  return result;
}

double *sub_100096CBC(double *a1)
{
  uint64_t v2 = sub_100096D24(a1, 0.0, 0.0, -1.0);
  sub_100096D24(v2 + 3, 0.0, 0.0, -9.81);
  sub_100096D24(a1 + 6, 0.0, 0.0, 0.0);
  return a1;
}

double *sub_100096D24(double *result, double a2, double a3, double a4)
{
  *double result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void sub_100096D38(uint64_t a1)
{
}

void sub_100096D40(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
}

id sub_100096D80(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  return result;
}

void sub_100096DAC(uint64_t a1, uint64_t a2)
{
}

id sub_100096DB8(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  return result;
}

uint64_t sub_100096DE4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void *sub_100096DF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = *(void **)(v1 + 40);
  uint64_t v2 = *(uint64_t **)(v1 + 48);
  uint64_t v4 = (uint64_t *)v3[17];
  if ((unint64_t)v4 >= v3[18])
  {
    id result = sub_10033D1A4(v3 + 16, v2);
  }
  else
  {
    uint64_t v5 = *v2;
    *uint64_t v2 = 0;
    uint64_t *v4 = v5;
    id result = v4 + 1;
  }
  v3[17] = result;
  return result;
}

void sub_100096E4C(uint64_t a1)
{
}

void sub_100096E88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __cxa_begin_catch(a1);
  uint64_t v15 = *(std::promise<void> **)(v14 + 40);
  std::current_exception();
  v16.__ptr_ = v17;
  std::promise<void>::set_exception(v15, v16);
  std::exception_ptr::~exception_ptr(v17);
  __cxa_end_catch();
}

void sub_100096EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_100096EDC(std::promise<void> *a1)
{
}

uint64_t sub_100096EE4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  return result;
}

id sub_100096EF4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_100096EFC(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), *(id *)(a1 + 40));
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100096F4C(uint64_t a1)
{
  unint64_t v1 = atomic_load((unint64_t *)(*(void *)(a1 + 32) + 112));
  if (v1)
  {
    char v16 = 0;
    LOBYTE(v15) = 0;
    memset(&v20, 0, sizeof(v20));
    std::string::assign(&v20, "Only 1 scan allowed at a time: ");
    memset(&v21, 0, sizeof(v21));
    __int16 v25 = v23;
    unint64_t v26 = v24;
    v17[0] = v1;
    v17[1] = v24;
    char v18 = 48;
    int v19 = 48;
    uint64_t v3 = sub_1001F322C((uint64_t)v17);
    uint64_t v4 = &v21;
    __int16 v25 = (unsigned char *)v3;
    unint64_t v26 = v24;
    uint64_t v5 = &v24[-v3];
    if ((unint64_t)&v24[-v3] >= 0x17)
    {
      std::string::__grow_by(&v21, 0x16uLL, (std::string::size_type)(v5 - 22), 0, 0, 0, 0);
      v21.__r_.__value_.__l.__size_ = 0;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v4 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
    }
    if ((unsigned char *)v3 == v24)
    {
      int v7 = v4;
    }
    else
    {
      unint64_t v6 = (unint64_t)&v23[-v3 + 42];
      if (v6 < 0x20 || (unint64_t)v4 - v3 < 0x20)
      {
        int v7 = v4;
        int v8 = (std::string::value_type *)v3;
      }
      else
      {
        int v7 = (std::string *)((char *)v4 + (v6 & 0xFFFFFFFFFFFFFFE0));
        int v8 = (std::string::value_type *)(v3 + (v6 & 0xFFFFFFFFFFFFFFE0));
        long long v9 = (long long *)(v3 + 16);
        unsigned int v10 = &v4->__r_.__value_.__r.__words[2];
        unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v12 = *v9;
          *((_OWORD *)v10 - 1) = *(v9 - 1);
          *(_OWORD *)unsigned int v10 = v12;
          v9 += 2;
          v10 += 4;
          v11 -= 32;
        }
        while (v11);
        if (v6 == (v6 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_16;
        }
      }
      do
      {
        std::string::value_type v13 = *v8++;
        v7->__r_.__value_.__s.__data_[0] = v13;
        int v7 = (std::string *)((char *)v7 + 1);
      }
      while (v8 != v24);
    }
LABEL_16:
    v7->__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      v21.__r_.__value_.__l.__size_ = (std::string::size_type)&v24[-v3];
    }
    else {
      *((unsigned char *)&v21.__r_.__value_.__s + 23) = v5 & 0x7F;
    }
    sub_10016A2C4((uint64_t)&v15, (uint64_t)&v20, 2);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_21:
        if ((v16 & 0x80000000) == 0) {
          goto LABEL_22;
        }
LABEL_25:
        operator delete(v15);
LABEL_22:
        sub_1000D11E0((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_25;
  }
  return [*(id *)(a1 + 32) onQueueInitiateScan:*(void *)(a1 + 40) initiated:*(void *)(a1 + 48)];
}

void sub_100097188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

id sub_1000971E4(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16) = *(void *)(a1 + 40);
  return [*(id *)(a1 + 32) implOnQueueUpdateTimer];
}

id sub_1000971F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) implOnQueueResume];
}

void sub_1000971FC(uint64_t a1)
{
  [*(id *)(a1 + 32) onQueueStartScanning];
}

id sub_100097240(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 8) sensorPresent];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_100097278(uint64_t a1)
{
  return [*(id *)(a1 + 32) implOnQueuePause];
}

void sub_100097280(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 - 24);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 - 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1000A4744(v4 + 208, a2);
  sub_100041808(a1 - 32, 14, *(void *)(a2 + 16));
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_10009733C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1003A3868(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100097354(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  sub_100097A34(&__p, a3);
  unint64_t v6 = (std::__shared_weak_count *)a4[1];
  uint64_t v13 = *a4;
  uint64_t v14 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v7.n128_f64[0] = sub_10009DAC4(a2, (uint64_t)&__p, (uint64_t)&v13);
  int v8 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, double))v8->__on_zero_shared)(v8, v7.n128_f64[0]);
    std::__shared_weak_count::__release_weak(v8);
  }
  long long v9 = (char *)__p;
  if (__p)
  {
    unsigned int v10 = v16;
    unint64_t v11 = __p;
    if (v16 != __p)
    {
      do
      {
        long long v12 = (std::__shared_weak_count *)*((void *)v10 - 1);
        if (v12)
        {
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v7);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v10 -= 16;
      }
      while (v10 != v9);
      unint64_t v11 = __p;
    }
    char v16 = v9;
    operator delete(v11);
  }
}

void sub_100097484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_1000BA884((uint64_t)va);
  sub_1000D8DD8((void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000974A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, unsigned int *a6, void *a7)
{
  uint64_t v9 = *a4;
  uint64_t v10 = *a5;
  uint64_t v11 = *a6;
  long long v12 = (void *)a7[3];
  if (v12)
  {
    if (v12 == a7)
    {
      uint64_t v15 = v14;
      (*(void (**)(void *, void *))(*a7 + 24))(a7, v14);
    }
    else
    {
      uint64_t v15 = (void *)(*(uint64_t (**)(void *))(*v12 + 16))(v12);
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  sub_1000A1820(a2, a3, v9, v10, v11, v14);
  uint64_t result = (uint64_t)v15;
  if (v15 == v14) {
    return (*(uint64_t (**)(void *))(v14[0] + 32))(v14);
  }
  if (v15) {
    return (*(uint64_t (**)(void))(*v15 + 40))();
  }
  return result;
}

void sub_100097614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003553C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100097628(void *a1, unint64_t a2, int a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a2;
  a1[1] = v4 + a2;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  if (a2)
  {
    __n128 v7 = (void *)(*a1 + 8 * (v4 >> 6));
    int v8 = v4 & 0x3F;
    if (a3)
    {
      if ((v4 & 0x3F) != 0)
      {
        unint64_t v9 = (64 - v8);
        if (v9 >= a2) {
          unint64_t v10 = a2;
        }
        else {
          unint64_t v10 = v9;
        }
        *v7++ |= (0xFFFFFFFFFFFFFFFFLL >> (v9 - v10)) & (-1 << v4);
        unint64_t v3 = a2 - v10;
      }
      uint64_t v11 = v3 >> 6;
      if (v3 >= 0x40) {
        memset(v7, 255, 8 * (v3 >> 6));
      }
      if ((v3 & 0x3F) != 0)
      {
        unint64_t v12 = v7[v11] | (0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
LABEL_27:
        v7[v11] = v12;
      }
    }
    else
    {
      if ((v4 & 0x3F) != 0)
      {
        unint64_t v13 = (64 - v8);
        if (v13 >= a2) {
          unint64_t v14 = a2;
        }
        else {
          unint64_t v14 = v13;
        }
        *v7++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v13 - v14)) & (-1 << v4));
        unint64_t v3 = a2 - v14;
      }
      uint64_t v11 = v3 >> 6;
      if (v3 >= 0x40) {
        bzero(v7, 8 * (v3 >> 6));
      }
      if ((v3 & 0x3F) != 0)
      {
        unint64_t v12 = v7[v11] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
        goto LABEL_27;
      }
    }
  }
}

void sub_100097790(uint64_t a1, unint64_t a2)
{
  id v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) {
    return;
  }
  if (a2 >> 61) {
    sub_1000A9108();
  }
  unint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 8 * a2;
  unint64_t v6 = (char *)operator new(8 * a2);
  __n128 v7 = &v6[v5];
  uint64_t v8 = v4 - v2;
  unint64_t v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (v4 != v2)
  {
    unint64_t v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) >= 0x78)
    {
      BOOL v12 = (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9
         || &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4;
      uint64_t v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      if (v12)
      {
        uint64_t v13 = v8 >> 3;
        uint64_t v14 = (v10 >> 3) + 1;
        uint64_t v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v11 = (char *)(v9 - v15);
        char v16 = &v4[-v15];
        int v17 = v4 - 16;
        char v18 = &v6[8 * v13 - 16];
        uint64_t v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v21 = *((_OWORD *)v17 - 1);
          long long v20 = *(_OWORD *)v17;
          *((_OWORD *)v17 - 1) = 0uLL;
          *(_OWORD *)int v17 = 0uLL;
          *((_OWORD *)v18 - 1) = v21;
          *(_OWORD *)char v18 = v20;
          v17 -= 32;
          v18 -= 32;
          v19 -= 4;
        }
        while (v19);
        unint64_t v4 = v16;
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_16:
          __int16 v23 = *(char **)a1;
          id v2 = *(char **)(a1 + 8);
          *(void *)a1 = v11;
          *(void *)(a1 + 8) = v9;
          *(void *)(a1 + 16) = v7;
          if (v2 != v23)
          {
            do
            {
              uint64_t v24 = (void *)*((void *)v2 - 1);
              v2 -= 8;
            }
            while (v2 != v23);
            id v2 = v23;
          }
          goto LABEL_19;
        }
      }
    }
    else
    {
      uint64_t v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v22 = *((void *)v4 - 1);
      v4 -= 8;
      *(void *)unint64_t v4 = 0;
      *((void *)v11 - 1) = v22;
      v11 -= 8;
    }
    while (v4 != v2);
    goto LABEL_16;
  }
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v7;
LABEL_19:
  if (v2)
  {
    operator delete(v2);
  }
}

void sub_100097908(uint64_t a1, unint64_t a2)
{
  id v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) {
    return;
  }
  if (a2 >> 60) {
    sub_1000A9108();
  }
  unint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 16 * a2;
  unint64_t v6 = (char *)operator new(16 * a2);
  __n128 v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_14;
  }
  unint64_t v9 = &v6[v4 - v2];
  do
  {
    long long v10 = *((_OWORD *)v4 - 1);
    v4 -= 16;
    *((_OWORD *)v9 - 1) = v10;
    v9 -= 16;
    *(void *)unint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
  }
  while (v4 != v2);
  uint64_t v11 = *(char **)a1;
  id v2 = *(char **)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v11)
  {
    do
    {
      BOOL v12 = (std::__shared_weak_count *)*((void *)v2 - 1);
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      v2 -= 16;
    }
    while (v2 != v11);
    id v2 = v11;
  }
  if (v2)
  {
LABEL_14:
    operator delete(v2);
  }
}

void *sub_100097A34(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0) {
      sub_1000A9108();
    }
    unint64_t v6 = (char *)operator new(v4 - *a2);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[16 * (v5 >> 4)];
    do
    {
      uint64_t v8 = v3 + v7;
      unint64_t v9 = &v6[v7];
      uint64_t v10 = *(void *)(v3 + v7 + 8);
      *(void *)unint64_t v9 = *(void *)(v3 + v7);
      *((void *)v9 + 1) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      v7 += 16;
    }
    while (v8 + 16 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_100097AE0(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_1003A623C((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100097B00(uint64_t a1, void *a2, void *a3, size_t __sz)
{
  unint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(char **)a1;
  if (__sz > (v8 - *(void *)a1) >> 4)
  {
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 8);
      uint64_t v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          BOOL v12 = (std::__shared_weak_count *)*((void *)v10 - 1);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          v10 -= 16;
        }
        while (v10 != v9);
        uint64_t v11 = *(char **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_56;
    }
    uint64_t v23 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v23 = __sz;
    }
    BOOL v24 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
    if (!v24) {
      unint64_t v25 = v23;
    }
    if (v25 >> 60) {
LABEL_56:
    }
      sub_1000A9108();
    uint64_t v26 = 2 * v25;
    unint64_t v27 = operator new(16 * v25);
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = v27;
    for (*(void *)(a1 + 16) = &v27[v26]; v6 != a3; v6 += 2)
    {
      uint64_t v28 = v6[1];
      void *v27 = *v6;
      v27[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      v27 += 2;
    }
    *(void *)(a1 + 8) = v27;
    return;
  }
  uint64_t v13 = *(char **)(a1 + 8);
  unint64_t v14 = (v13 - v9) >> 4;
  if (v14 >= __sz)
  {
    if (a2 == a3)
    {
      uint64_t v19 = *(char **)a1;
      if (v13 == v9)
      {
LABEL_55:
        *(void *)(a1 + 8) = v19;
        return;
      }
    }
    else
    {
      uint64_t v19 = *(char **)a1;
      do
      {
        uint64_t v21 = *v6;
        uint64_t v20 = v6[1];
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v22 = (std::__shared_weak_count *)*((void *)v9 + 1);
        *(void *)unint64_t v9 = v21;
        *((void *)v9 + 1) = v20;
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        v19 += 16;
        v6 += 2;
        v9 += 16;
      }
      while (v6 != a3);
      uint64_t v13 = *(char **)(a1 + 8);
      if (v13 == v19) {
        goto LABEL_55;
      }
    }
    do
    {
      uint64_t v32 = (std::__shared_weak_count *)*((void *)v13 - 1);
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      v13 -= 16;
    }
    while (v13 != v19);
    goto LABEL_55;
  }
  uint64_t v15 = &a2[2 * v14];
  if (v13 != v9)
  {
    do
    {
      uint64_t v17 = *v6;
      uint64_t v16 = v6[1];
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      char v18 = (std::__shared_weak_count *)*((void *)v9 + 1);
      *(void *)unint64_t v9 = v17;
      *((void *)v9 + 1) = v16;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      v6 += 2;
      v9 += 16;
    }
    while (v6 != v15);
    unint64_t v9 = *(char **)(a1 + 8);
  }
  uint64_t v29 = v9;
  if (v15 != a3)
  {
    uint64_t v29 = v9;
    __int16 v30 = v9;
    do
    {
      uint64_t v31 = v15[1];
      *(void *)__int16 v30 = *v15;
      *((void *)v30 + 1) = v31;
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      v29 += 16;
      v15 += 2;
      v30 += 16;
    }
    while (v15 != a3);
  }
  *(void *)(a1 + 8) = v29;
}

void sub_100097E8C(char **a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = *a1;
  if (a2 <= (a1[2] - *a1) >> 7) {
    return;
  }
  if (a2 >> 57) {
    sub_1000A9108();
  }
  uint64_t v5 = (uint64_t)a1[1];
  unint64_t v6 = a2 << 7;
  uint64_t v7 = (char *)operator new(a2 << 7);
  uint64_t v8 = &v7[v6];
  unint64_t v9 = &v7[v5 - (void)v3];
  if ((char *)v5 == v3)
  {
    *a1 = v9;
    a1[1] = v9;
    a1[2] = v8;
    if (!v3) {
      return;
    }
    goto LABEL_17;
  }
  uint64_t v10 = (uint64_t)&v7[v5 - (void)v3];
  do
  {
    v10 -= 128;
    v5 -= 128;
    sub_1002A196C(v2, v10, v5);
  }
  while ((char *)v5 != v3);
  uint64_t v11 = *a1;
  uint64_t v3 = a1[1];
  *a1 = (char *)v10;
  a1[1] = v9;
  a1[2] = v8;
  if (v3 != v11)
  {
    do
    {
      BOOL v12 = v3 - 96;
      if (*(v3 - 96)) {
        sub_10006353C((uint64_t)(v3 - 96));
      }
      if (*(v3 - 128))
      {
        uint64_t v13 = (void *)*((void *)v3 - 15);
        if (v13)
        {
          *((void *)v3 - 14) = v13;
          operator delete(v13);
        }
        *(v3 - 128) = 0;
      }
      v3 -= 128;
    }
    while (v12 - 32 != v11);
    uint64_t v3 = v11;
  }
  if (v3)
  {
LABEL_17:
    operator delete(v3);
  }
}

void sub_100097FCC(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = (char *)*a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2] - *a1;
  int64_t v6 = v4 - *a1;
  uint64_t v7 = v6 >> 7;
  if (v6 >> 7 >= (unint64_t)(v5 >> 7)) {
    return;
  }
  if ((char *)v4 == v3)
  {
    *a1 = v7 << 7;
    a1[1] = v7 << 7;
    a1[2] = v7 << 7;
    if (!v3) {
      return;
    }
    goto LABEL_19;
  }
  if (v6 < 0) {
    sub_1000A6A10();
  }
  uint64_t v8 = (char *)operator new(v6) + 128 * v7;
  uint64_t v9 = (uint64_t)v8;
  do
  {
    v9 -= 128;
    v4 -= 128;
    sub_1002A196C(v2, v9, v4);
  }
  while ((char *)v4 != v3);
  uint64_t v10 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  *a1 = v9;
  a1[1] = (uint64_t)v8;
  a1[2] = (uint64_t)v8;
  if (v3 != v10)
  {
    do
    {
      uint64_t v11 = v3 - 96;
      if (*(v3 - 96)) {
        sub_10006353C((uint64_t)(v3 - 96));
      }
      if (*(v3 - 128))
      {
        BOOL v12 = (void *)*((void *)v3 - 15);
        if (v12)
        {
          *((void *)v3 - 14) = v12;
          operator delete(v12);
        }
        *(v3 - 128) = 0;
      }
      v3 -= 128;
    }
    while (v11 - 32 != v10);
    uint64_t v3 = v10;
  }
  if (v3)
  {
LABEL_19:
    operator delete(v3);
  }
}

void sub_100098108(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 7) < a2)
  {
    if (a2 >= 0x22222222222223) {
      sub_1000A9108();
    }
    uint64_t v4 = a1[1];
    uint64_t v5 = 1920 * a2;
    int64_t v6 = (char *)operator new(1920 * a2);
    uint64_t v7 = 0;
    uint64_t v8 = &v6[v4 - v2];
    *(void *)&long long v15 = v8;
    *((void *)&v15 + 1) = &v6[v5];
    while (&v4[v7] != v2)
    {
      v7 -= 1920;
      sub_1000776C4(&v8[v7], &v4[v7]);
    }
    uint64_t v9 = &v8[v7];
    uint64_t v11 = *a1;
    uint64_t v10 = a1[1];
    *a1 = v9;
    *(_OWORD *)(a1 + 1) = v15;
    if (v10 != v11)
    {
      BOOL v12 = v10 - 1920;
      uint64_t v13 = v10 - 1920;
      do
      {
        (**(void (***)(char *))v13)(v13);
        v12 -= 1920;
        BOOL v14 = v13 == v11;
        v13 -= 1920;
      }
      while (!v14);
    }
    if (v11) {
      operator delete(v11);
    }
  }
}

void sub_10009826C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x492492492492493) {
    sub_1000A9108();
  }
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 56 * a2;
  int64_t v6 = (char *)operator new(56 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v9 = &v6[(char *)v4 - (char *)v2];
  do
  {
    long long v10 = *(_OWORD *)(v4 - 7);
    *((void *)v9 - 5) = *(v4 - 5);
    *(_OWORD *)(v9 - 56) = v10;
    *(v4 - 6) = 0;
    *(v4 - 5) = 0;
    *(v4 - 7) = 0;
    long long v11 = *((_OWORD *)v4 - 2);
    *((void *)v9 - 2) = *(v4 - 2);
    *((_OWORD *)v9 - 2) = v11;
    *(v4 - 3) = 0;
    *(v4 - 2) = 0;
    *(v4 - 4) = 0;
    *((_DWORD *)v9 - 2) = *((_DWORD *)v4 - 2);
    v9 -= 56;
    v4 -= 7;
  }
  while (v4 != v2);
  BOOL v12 = *(void ***)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v12)
  {
    while (1)
    {
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*(v2 - 4));
        if (*((char *)v2 - 33) < 0) {
LABEL_13:
        }
          operator delete(*(v2 - 7));
      }
      else if (*((char *)v2 - 33) < 0)
      {
        goto LABEL_13;
      }
      v2 -= 7;
      if (v2 == v12)
      {
        uint64_t v2 = v12;
        break;
      }
    }
  }
  if (!v2) {
    return;
  }
LABEL_16:

  operator delete(v2);
}

void sub_1000983E0(atomic_uint **a1@<X0>, atomic_uint **a2@<X1>, uint64_t a3@<X2>, dirent **a4@<X8>)
{
  uint64_t v4 = *a1;
  *a1 = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = v4;
  *a2 = 0;
  sub_100098748(&v8, &v7, a3, a4);
  uint64_t v5 = v7;
  if (v7 && atomic_fetch_add(v7, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)v5 + 6, (void **)v5 + 7, v9);
    if (*((char *)v5 + 31) < 0) {
      operator delete(*((void **)v5 + 1));
    }
    operator delete();
  }
  int64_t v6 = v8;
  if (v8 && atomic_fetch_add(v8, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)v6 + 6, (void **)v6 + 7, v9);
    if (*((char *)v6 + 31) < 0) {
      operator delete(*((void **)v6 + 1));
    }
    operator delete();
  }
}

void sub_1000984C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_1000E0A28((uint64_t *)va);
  sub_1000E0A28((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000984E0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x18uLL);
    uint64_t v9 = v8;
    void *v8 = 0;
    v8[1] = 0;
    uint64_t v10 = *a3;
    *a3 = 0;
    long long v11 = a3 + 1;
    v8[2] = v10;
    uint64_t v12 = 1;
    if (v11 != a4)
    {
      uint64_t v13 = v8;
      do
      {
        uint64_t v8 = operator new(0x18uLL);
        void *v8 = v13;
        v8[1] = 0;
        uint64_t v14 = *v11;
        *v11++ = 0;
        v8[2] = v14;
        v13[1] = v8;
        ++v12;
        uint64_t v13 = v8;
      }
      while (v11 != a4);
    }
    uint64_t v15 = *a2;
    *(void *)(v15 + 8) = v9;
    void *v9 = v15;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v12;
    return v9;
  }
  return a2;
}

void sub_1000985B4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_1003A74C0(v1);
  __cxa_rethrow();
}

void sub_1000985C8(_Unwind_Exception *a1)
{
}

dirent *sub_1000985DC(atomic_uint **a1, atomic_uint **a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  long long v11 = v3;
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  uint64_t v4 = *a2;
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  sub_1000983E0(&v11, &v10, a3, v12);
  int64_t v6 = v12[0];
  uint64_t v5 = v12[1];
  if (v12[0] && atomic_fetch_add((atomic_uint *volatile)v12[0], 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)&v6->d_name[27], (void **)&v6->d_name[35], v13);
    if (v6->d_name[10] < 0) {
      operator delete((void *)v6->d_seekoff);
    }
    operator delete();
  }
  uint64_t v7 = v10;
  if (v10 && atomic_fetch_add(v10, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)v7 + 6, (void **)v7 + 7, v13);
    if (*((char *)v7 + 31) < 0) {
      operator delete(*((void **)v7 + 1));
    }
    operator delete();
  }
  uint64_t v8 = v11;
  if (v11 && atomic_fetch_add(v11, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)v8 + 6, (void **)v8 + 7, v13);
    if (*((char *)v8 + 31) < 0) {
      operator delete(*((void **)v8 + 1));
    }
    operator delete();
  }
  return v5;
}

void sub_10009872C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_1000E0A28((uint64_t *)va);
  sub_1000E0A28((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100098748(atomic_uint **a1@<X0>, atomic_uint **a2@<X1>, uint64_t a3@<X2>, dirent **a4@<X8>)
{
  uint64_t v4 = *a1;
  *a1 = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = v4;
  *a2 = 0;
  sub_100098848(&v8, &v7, a3, a4);
  uint64_t v5 = v7;
  if (v7 && atomic_fetch_add(v7, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)v5 + 6, (void **)v5 + 7, v9);
    if (*((char *)v5 + 31) < 0) {
      operator delete(*((void **)v5 + 1));
    }
    operator delete();
  }
  int64_t v6 = v8;
  if (v8 && atomic_fetch_add(v8, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)v6 + 6, (void **)v6 + 7, v9);
    if (*((char *)v6 + 31) < 0) {
      operator delete(*((void **)v6 + 1));
    }
    operator delete();
  }
}

void sub_10009882C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_1000E0A28((uint64_t *)va);
  sub_1000E0A28((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100098848(atomic_uint **a1@<X0>, atomic_uint **a2@<X1>, uint64_t a3@<X2>, dirent **a4@<X8>)
{
  uint64_t v7 = *a1;
  BOOL v24 = v7;
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  uint64_t v23 = *a2;
  *a2 = 0;
  sub_100099070((uint64_t *)&v24, (uint64_t *)&v23, &v25);
  uint64_t v8 = v23;
  if (v23 && atomic_fetch_add(v23, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)v8 + 6, (void **)v8 + 7, v27);
    if (*((char *)v8 + 31) < 0) {
      operator delete(*((void **)v8 + 1));
    }
    operator delete();
  }
  uint64_t v9 = v24;
  if (v24 && atomic_fetch_add(v24, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)v9 + 6, (void **)v9 + 7, v27);
    if (*((char *)v9 + 31) < 0) {
      operator delete(*((void **)v9 + 1));
    }
    operator delete();
  }
  uint64_t v19 = v26;
  uint64_t v20 = v25;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  sub_100026C7C(&v20, &v19, a3, &v21);
  uint64_t v10 = v19;
  if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)&v10->d_name[27], (void **)&v10->d_name[35], v27);
    if (v10->d_name[10] < 0) {
      operator delete((void *)v10->d_seekoff);
    }
    operator delete();
  }
  long long v11 = v20;
  if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)&v11->d_name[27], (void **)&v11->d_name[35], v27);
    if (v11->d_name[10] < 0) {
      operator delete((void *)v11->d_seekoff);
    }
    operator delete();
  }
  uint64_t v12 = *a1;
  *a1 = 0;
  uint64_t v13 = v21;
  uint64_t v21 = 0;
  if (v12)
  {
    if (atomic_fetch_add(v12, 0xFFFFFFFF) == 1)
    {
      sub_10005623C((DIR **)v12 + 6, (void **)v12 + 7, v27);
      if (*((char *)v12 + 31) < 0) {
        operator delete(*((void **)v12 + 1));
      }
      operator delete();
    }
    uint64_t v15 = v21;
    uint64_t v14 = v22;
    *a4 = v13;
    a4[1] = v14;
    if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
    {
      sub_10005623C((DIR **)&v15->d_name[27], (void **)&v15->d_name[35], v27);
      if (v15->d_name[10] < 0) {
        operator delete((void *)v15->d_seekoff);
      }
      operator delete();
    }
  }
  else
  {
    uint64_t v16 = v22;
    *a4 = v13;
    a4[1] = v16;
  }
  uint64_t v17 = v26;
  if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)&v17->d_name[27], (void **)&v17->d_name[35], v27);
    if (v17->d_name[10] < 0) {
      operator delete((void *)v17->d_seekoff);
    }
    operator delete();
  }
  char v18 = v25;
  if (v25 && atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)&v18->d_name[27], (void **)&v18->d_name[35], v27);
    if (v18->d_name[10] < 0) {
      operator delete((void *)v18->d_seekoff);
    }
    operator delete();
  }
}

void sub_100098B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  sub_1000E0A28((uint64_t *)va);
  sub_1000E0A28((uint64_t *)va1);
  sub_1000E0B18((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_100098B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  sub_1000E0A28((uint64_t *)va);
  sub_1000E0A28((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100098BB0(uint64_t a1, int *a2, uint64_t a3, char *a4)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_100469D00;
  int v5 = *a2;
  long long v8 = 0u;
  sub_10009D6D8(a1 + 24, v5, (uint64_t *)&v8, *a4);
  int64_t v6 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  if (!*((void *)&v8 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_100098C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1003A381C(a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_100098C90(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_100459D58;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 24) = off_100459DA8;
  sub_100042C0C(a1 + 64);
  sub_100042A1C(a1 + 4600);
  *(void *)(a1 + 6760) = 0;
  *(unsigned char *)(a1 + 6768) = 0;
  *(unsigned char *)(a1 + 6800) = 0;
  *(unsigned char *)(a1 + 6832) = 0;
  *(_DWORD *)(a1 + 6864) = 0;
  return a1;
}

void sub_100098D60(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  sub_100012B94(v5);
  *(void *)(v1 + 24) = v2;
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v4);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100098DA0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100098DC8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100098DF0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100098E18(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100098E54(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100098E7C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100098EA0(void *a1, long long *a2, long long *a3, void *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10046BC30;
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v5 = a4[1];
  v6[0] = *a4;
  v6[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000A3E3C(v4, a2, a3, v6);
}

void sub_100098F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1003A37A8(a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_100098F88@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  int64_t v6 = operator new(0x30uLL);
  v6[1] = 0;
  void v6[2] = 0;
  void *v6 = off_10046A3B8;
  uint64_t v7 = *a1;
  uint64_t v8 = *a2;
  *a2 = 0;
  uint64_t v10 = v8;
  sub_1000A0A94(v6 + 3, v7, &v10);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100099048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1003A7904();
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t *sub_100099070@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *result;
  *uint64_t result = 0;
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)v3, 1u);
  }
  uint64_t v4 = *a2;
  *a2 = 0;
  if (!v4)
  {
    *a3 = v3;
    a3[1] = 0;
    if (!v3) {
      return result;
    }
    goto LABEL_11;
  }
  atomic_fetch_add((atomic_uint *volatile)v4, 1u);
  *a3 = v3;
  a3[1] = v4;
  if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    sub_10005623C((DIR **)(v4 + 48), (void **)(v4 + 56), v5);
    if (*(char *)(v4 + 31) < 0) {
      operator delete(*(void **)(v4 + 8));
    }
    operator delete();
  }
  if (v3)
  {
LABEL_11:
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      sub_10005623C((DIR **)(v3 + 48), (void **)(v3 + 56), v5);
      if (*(char *)(v3 + 31) < 0) {
        operator delete(*(void **)(v3 + 8));
      }
      operator delete();
    }
  }
  return result;
}

uint64_t sub_10009916C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_10006338C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(uint64_t ****)(a2 + 16); i; uint64_t i = (uint64_t ***)*i)
    sub_1002A1D0C(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_100099288(_Unwind_Exception *a1)
{
  sub_1000D8B48(v1);
  _Unwind_Resume(a1);
}

void sub_10009929C(_Unwind_Exception *a1)
{
  sub_1000D8B48(v1);
  _Unwind_Resume(a1);
}

void sub_1000992B0(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void **)(a1 + 16);
    while (v4)
    {
      int8x8_t v5 = v4;
      uint64_t v4 = (void *)*v4;
      BOOL v6 = (std::__shared_weak_count *)v5[4];
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      operator delete(v5);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v9 = *a2;
  *a2 = 0;
  uint64_t v10 = *(void **)a1;
  *(void *)a1 = v9;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v13 = a2[2];
  uint64_t v12 = a2 + 2;
  uint64_t v11 = v13;
  uint64_t v14 = *(v12 - 1);
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + 8) = v14;
  *(v12 - 1) = 0;
  uint64_t v15 = v12[1];
  *(void *)(a1 + 24) = v15;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v12 + 4);
  if (v15)
  {
    unint64_t v16 = *(void *)(v11 + 8);
    unint64_t v17 = *(void *)(a1 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v16 >= v17) {
        v16 %= v17;
      }
    }
    else
    {
      v16 &= v17 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
    *uint64_t v12 = 0;
    v12[1] = 0;
  }
}

void sub_1000993FC(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void **)(a1 + 16);
    while (v4)
    {
      int8x8_t v5 = v4;
      uint64_t v4 = (void *)*v4;
      BOOL v6 = (std::__shared_weak_count *)v5[3];
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      operator delete(v5);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v9 = *a2;
  *a2 = 0;
  uint64_t v10 = *(void **)a1;
  *(void *)a1 = v9;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v13 = a2[2];
  uint64_t v12 = a2 + 2;
  uint64_t v11 = v13;
  uint64_t v14 = *(v12 - 1);
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + 8) = v14;
  *(v12 - 1) = 0;
  uint64_t v15 = v12[1];
  *(void *)(a1 + 24) = v15;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v12 + 4);
  if (v15)
  {
    unint64_t v16 = *(void *)(v11 + 8);
    unint64_t v17 = *(void *)(a1 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v16 >= v17) {
        v16 %= v17;
      }
    }
    else
    {
      v16 &= v17 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
    *uint64_t v12 = 0;
    v12[1] = 0;
  }
}

void sub_100099548()
{
}

void sub_1000996AC(uint64_t a1, ...)
{
  va_start(va1, a1);
  va_start(va, a1);
  uint64_t v1 = va_arg(va1, void);
  if (a1) {
    sub_1003A45E4();
  }
  sub_1003A46E4((uint64_t *)va, (uint64_t *)va1);
  operator delete();
}

void sub_1000996F0()
{
}

void sub_100099814(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (a2) {
    sub_1003A45E4();
  }
  sub_1003A4674((uint64_t *)va);
  operator delete();
}

void sub_100099854()
{
}

void sub_10009998C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1000999C0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v10 = a2 - 40;
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * (v14 >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((sub_10004008C(a1, v10) & 0x80000000) != 0)
          {
            uint64_t v27 = *(void *)a1;
            *(void *)long long v39 = *(void *)(a1 + 8);
            *(void *)&v39[7] = *(void *)(a1 + 15);
            char v28 = *(unsigned char *)(a1 + 23);
            *(void *)(a1 + 8) = 0;
            *(void *)(a1 + 16) = 0;
            *(void *)a1 = 0;
            long long v29 = *(_OWORD *)(a1 + 24);
            uint64_t v30 = *(void *)(v10 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v10;
            *(void *)(a1 + 16) = v30;
            *(unsigned char *)(a2 - 17) = 0;
            *(unsigned char *)(a2 - 40) = 0;
            *(void *)(a1 + 24) = *(void *)(a2 - 16);
            *(void *)(a1 + 32) = *(void *)(a2 - 8);
            if (*(char *)(a2 - 17) < 0)
            {
              long long v37 = v29;
              operator delete(*(void **)v10);
              long long v29 = v37;
            }
            *(void *)(a2 - 40) = v27;
            *(void *)(a2 - 32) = *(void *)v39;
            *(void *)(a2 - 25) = *(void *)&v39[7];
            *(unsigned char *)(a2 - 17) = v28;
            *(_OWORD *)(a2 - 16) = v29;
          }
          break;
        case 3uLL:
          sub_10038BD00(a1, a1 + 40, v10);
          break;
        case 4uLL:
          sub_10038C7BC(a1, a1 + 40, a1 + 80, v10);
          break;
        case 5uLL:
          sub_10038C9F4(a1, a1 + 40, a1 + 80, a1 + 120, v10);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 959) {
      break;
    }
    if (v12 == 1)
    {
      if (a1 != a2)
      {
        unint64_t v31 = (v15 - 2) >> 1;
        unint64_t v32 = v31 + 1;
        unint64_t v33 = a1 + 40 * v31;
        do
        {
          sub_10038CCC8(a1, a3, v15, v33);
          v33 -= 40;
          --v32;
        }
        while (v32);
        unint64_t v34 = v14 / 0x28uLL;
        do
        {
          sub_10038CE80(a1, a2, a3, v34);
          a2 -= 40;
        }
        while (v34-- > 2);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = a1 + 40 * (v15 >> 1);
    if ((unint64_t)v14 < 0x1401)
    {
      sub_10038BD00(v17, a1, v10);
      if (a5) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_10038BD00(a1, v17, v10);
      unint64_t v18 = v10;
      unint64_t v19 = a1 + 40 * v16;
      sub_10038BD00(a1 + 40, v19 - 40, a2 - 80);
      sub_10038BD00(a1 + 80, a1 + 40 + 40 * v16, a2 - 120);
      sub_10038BD00(v19 - 40, v17, a1 + 40 + 40 * v16);
      uint64_t v20 = *(void *)a1;
      *(void *)&long long v38 = *(void *)(a1 + 8);
      *(void *)((char *)&v38 + 7) = *(void *)(a1 + 15);
      char v21 = *(unsigned char *)(a1 + 23);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      long long v22 = *(_OWORD *)v17;
      *(void *)(a1 + 16) = *(void *)(v17 + 16);
      *(_OWORD *)a1 = v22;
      *(unsigned char *)(v17 + 23) = 0;
      *(void *)unint64_t v17 = v20;
      *(void *)(v17 + 15) = *(void *)((char *)&v38 + 7);
      *(void *)(v17 + 8) = v38;
      *(unsigned char *)(v17 + 23) = v21;
      long long v23 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v19 + 24);
      *(_OWORD *)(v19 + 24) = v23;
      unint64_t v10 = v18;
      if (a5) {
        goto LABEL_12;
      }
    }
    if ((sub_10004008C(a1, a1 - 40) & 0x80000000) == 0)
    {
      unint64_t v11 = sub_10038C04C(a1, a2);
      goto LABEL_17;
    }
LABEL_12:
    unint64_t v24 = sub_10038C280(a1, a2);
    if ((v25 & 1) == 0) {
      goto LABEL_15;
    }
    BOOL v26 = sub_10038C4BC(a1, v24);
    unint64_t v11 = v24 + 40;
    if (sub_10038C4BC(v24 + 40, a2))
    {
      a4 = -v13;
      a2 = v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v26)
    {
LABEL_15:
      sub_1000999C0(a1, v24, a3, -v13, a5 & 1);
      unint64_t v11 = v24 + 40;
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_10003FF44(a1, a2);
  }
  else
  {
    sub_10038BBCC(a1, a2);
  }
}

  uint64_t v9 = a1;
  std::string v134 = a1 + 4;
  std::string v135 = a1 + 2;
  char v144 = a1;
  while (1)
  {
    unint64_t v10 = (char *)a2 - (char *)v9;
    unint64_t v11 = ((char *)a2 - (char *)v9) >> 4;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          unsigned int v59 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*(a2 - 2) + 56))(*(a2 - 2)) + 1616);
          if (v59 < *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*v9 + 56))() + 1616))
          {
            unint64_t v60 = *v9;
            atomic_uint *v9 = *(a2 - 2);
            *(a2 - 2) = v60;
            unint64_t v61 = v9[1];
            v9[1] = *(a2 - 1);
            *(a2 - 1) = v61;
          }
          break;
        case 3:
          sub_1002B2310(v9, v9 + 2, a2 - 2);
          break;
        case 4:
          sub_1002B2948(v9, v9 + 2, v9 + 4, a2 - 2);
          break;
        case 5:
          sub_1002B20CC(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v9 == a2) {
        return;
      }
      std::string v136 = a2;
      std::string v80 = (unint64_t)(v11 - 2) >> 1;
      int v141 = v80;
      do
      {
        int v81 = v80;
        if (v141 >= v80)
        {
          __int16 v82 = (2 * v80) | 1;
          std::string v83 = &v144[2 * v82];
          if (2 * v80 + 2 < v11)
          {
            int v84 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*v83 + 56))() + 1616);
            if (v84 < *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v83[2] + 56))(v83[2]) + 1616))
            {
              v83 += 2;
              __int16 v82 = 2 * v81 + 2;
            }
          }
          unint64_t v85 = &v144[2 * v81];
          int v86 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*v83 + 56))() + 1616);
          if (v86 >= *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*v85 + 56))() + 1616))
          {
            int64_t v87 = *(_OWORD *)v85;
            NSObject *v85 = 0;
            v85[1] = 0;
            std::string v138 = v87;
            std::string v88 = v87;
            do
            {
              std::string v89 = v83;
              __int16 v90 = *(_OWORD *)v83;
              char *v83 = 0;
              v83[1] = 0;
              int v91 = (std::__shared_weak_count *)v85[1];
              *(_OWORD *)unint64_t v85 = v90;
              if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
              if (v141 < v82) {
                break;
              }
              __int16 v92 = (2 * v82) | 1;
              std::string v83 = &v144[2 * v92];
              __int16 v82 = 2 * v82 + 2;
              if (v82 < v11)
              {
                std::string::size_type v93 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*v83 + 56))() + 1616);
                if (v93 >= *(_DWORD *)((*(uint64_t (**)(void))(*(void *)v83[2] + 56))() + 1616)) {
                  __int16 v82 = v92;
                }
                else {
                  v83 += 2;
                }
              }
              else
              {
                __int16 v82 = v92;
              }
              char v94 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*v83 + 56))() + 1616);
              unint64_t v85 = v89;
            }
            while (v94 >= *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v88 + 56))(v88) + 1616));
            uint64_t v95 = (std::__shared_weak_count *)v89[1];
            *(_OWORD *)std::string v89 = v138;
            if (v95 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
        }
        std::string v80 = v81 - 1;
      }
      while (v81);
      char v96 = (unint64_t)v10 >> 4;
      uint64_t v97 = v144;
      char v98 = v136;
      while (2)
      {
        char v100 = 0;
        char v101 = v98;
        int v139 = *v97;
        char v142 = v97[1];
        std::__shared_weak_count *v97 = 0;
        v97[1] = 0;
        std::string::size_type v102 = (char *)v97;
        do
        {
          long long v103 = v102;
          v102 += 16 * v100 + 16;
          long long v104 = 2 * v100;
          char v100 = (2 * v100) | 1;
          char v105 = v104 + 2;
          if (v104 + 2 < v96)
          {
            long long v106 = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)v102 + 56))() + 1616);
            if (v106 < *(_DWORD *)((*(uint64_t (**)(void))(**((void **)v102 + 2) + 56))() + 1616))
            {
              v102 += 16;
              char v100 = v105;
            }
          }
          long long v107 = *(_OWORD *)v102;
          *(void *)std::string::size_type v102 = 0;
          *((void *)v102 + 1) = 0;
          long long v108 = (std::__shared_weak_count *)*((void *)v103 + 1);
          *(_OWORD *)long long v103 = v107;
          if (v108 && !atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        while (v100 <= (uint64_t)((unint64_t)(v96 - 2) >> 1));
        char v98 = v101 - 2;
        if (v102 == (char *)(v101 - 2))
        {
          std::string v122 = (std::__shared_weak_count *)*((void *)v102 + 1);
          uint64_t v97 = v144;
          *(void *)std::string::size_type v102 = v139;
          *((void *)v102 + 1) = v142;
          if (!v122) {
            goto LABEL_117;
          }
        }
        else
        {
          std::string::size_type v109 = *((_OWORD *)v101 - 1);
          *char v98 = 0;
          *(v101 - 1) = 0;
          long long v110 = (std::__shared_weak_count *)*((void *)v102 + 1);
          *(_OWORD *)std::string::size_type v102 = v109;
          uint64_t v97 = v144;
          if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
          long long v111 = (std::__shared_weak_count *)*(v101 - 1);
          *(v101 - 2) = v139;
          *(v101 - 1) = v142;
          if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
            uint64_t v112 = v102 + 16 - (char *)v144;
            if (v112 >= 17) {
              goto LABEL_133;
            }
            goto LABEL_117;
          }
          uint64_t v112 = v102 + 16 - (char *)v144;
          if (v112 < 17) {
            goto LABEL_117;
          }
LABEL_133:
          int v113 = (((unint64_t)v112 >> 4) - 2) >> 1;
          uint64_t v114 = &v144[2 * v113];
          uint64_t v115 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*v114 + 56))() + 1616);
          if (v115 >= *(_DWORD *)((*(uint64_t (**)(void))(**(void **)v102 + 56))() + 1616)) {
            goto LABEL_117;
          }
          char v116 = v98;
          int v117 = *(void *)v102;
          long long v143 = *((void *)v102 + 1);
          *(void *)std::string::size_type v102 = 0;
          *((void *)v102 + 1) = 0;
          do
          {
            std::string v118 = v114;
            std::string v119 = *(_OWORD *)v114;
            unsigned char *v114 = 0;
            v114[1] = 0;
            std::string v120 = (std::__shared_weak_count *)*((void *)v102 + 1);
            *(_OWORD *)std::string::size_type v102 = v119;
            if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
            if (!v113) {
              break;
            }
            int v113 = (v113 - 1) >> 1;
            uint64_t v114 = &v144[2 * v113];
            std::string v121 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*v114 + 56))() + 1616);
            std::string::size_type v102 = (char *)v118;
          }
          while (v121 < *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v117 + 56))(v117) + 1616));
          std::string v122 = (std::__shared_weak_count *)v118[1];
          *std::string v118 = v117;
          v118[1] = v143;
          char v98 = v116;
          if (!v122)
          {
LABEL_117:
            if (v96-- <= 2) {
              return;
            }
            continue;
          }
        }
        break;
      }
      if (!atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
      goto LABEL_117;
    }
    uint64_t v12 = &v9[2 * ((unint64_t)v11 >> 1)];
    if ((unint64_t)v10 < 0x801)
    {
      sub_1002B2310(v12, v9, a2 - 2);
      --a3;
      if (a4) {
        goto LABEL_11;
      }
    }
    else
    {
      sub_1002B2310(v9, v12, a2 - 2);
      sub_1002B2310(v135, v12 - 2, a2 - 4);
      sub_1002B2310(v134, v12 + 2, a2 - 6);
      sub_1002B2310(v12 - 2, v12, v12 + 2);
      uint64_t v13 = *(_OWORD *)v9;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v12;
      *(_OWORD *)uint64_t v12 = v13;
      --a3;
      if (a4) {
        goto LABEL_11;
      }
    }
    uint64_t v14 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*(v9 - 2) + 56))(*(v9 - 2)) + 1616);
    if (v14 >= *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*v9 + 56))() + 1616))
    {
      long long v39 = *v9;
      long long v38 = v9[1];
      atomic_uint *v9 = 0;
      v9[1] = 0;
      unint64_t v40 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v39 + 56))(v39) + 1616);
      if (v40 >= *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*(a2 - 2) + 56))() + 1616))
      {
        uint64_t v43 = v9 + 2;
        do
        {
          a1 = v43;
          if (v43 >= a2) {
            break;
          }
          int v44 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v39 + 56))(v39) + 1616);
          unint64_t v45 = (*(uint64_t (**)(void))(*(void *)*a1 + 56))();
          uint64_t v43 = a1 + 2;
        }
        while (v44 >= *(_DWORD *)(v45 + 1616));
      }
      else
      {
        a1 = v9;
        do
        {
          unint64_t v41 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v39 + 56))(v39) + 1616);
          uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)a1[2] + 56))(a1[2]);
          a1 += 2;
        }
        while (v41 >= *(_DWORD *)(v42 + 1616));
      }
      unint64_t v46 = a2;
      if (a1 < a2)
      {
        unint64_t v46 = a2;
        do
        {
          unint64_t v47 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v39 + 56))(v39) + 1616);
          unint64_t v48 = (*(uint64_t (**)(void))(*(void *)*(v46 - 2) + 56))(*(v46 - 2));
          v46 -= 2;
        }
        while (v47 < *(_DWORD *)(v48 + 1616));
      }
      while (a1 < v46)
      {
        long long v49 = *a1;
        *a1 = *v46;
        std::string *v46 = v49;
        unint64_t v50 = a1[1];
        a1[1] = v46[1];
        v46[1] = v50;
        do
        {
          long long v51 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v39 + 56))(v39) + 1616);
          uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)a1[2] + 56))(a1[2]);
          a1 += 2;
        }
        while (v51 >= *(_DWORD *)(v52 + 1616));
        do
        {
          uint64_t v53 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v39 + 56))(v39) + 1616);
          std::string v54 = (*(uint64_t (**)(void))(*(void *)*(v46 - 2) + 56))(*(v46 - 2));
          v46 -= 2;
        }
        while (v53 < *(_DWORD *)(v54 + 1616));
      }
      unint64_t v55 = a1 - 2;
      uint64_t v4 = a1 - 2 >= v9;
      char v5 = a1 - 2 == v9;
      if (a1 - 2 != v9)
      {
        unint64_t v56 = *(_OWORD *)v55;
        std::string *v55 = 0;
        *(a1 - 1) = 0;
        uint64_t v57 = (std::__shared_weak_count *)v9[1];
        *(_OWORD *)uint64_t v9 = v56;
        if (v57)
        {
          if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
      }
      a4 = 0;
      uint64_t v58 = (std::__shared_weak_count *)*(a1 - 1);
      *(a1 - 2) = v39;
      *(a1 - 1) = v38;
      if (v58)
      {
        a4 = 0;
        if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
          a4 = 0;
        }
      }
      goto LABEL_1;
    }
LABEL_11:
    unint64_t v15 = 0;
    unint64_t v16 = *v9;
    long long v140 = v9[1];
    atomic_uint *v9 = 0;
    v9[1] = 0;
    do
    {
      unint64_t v17 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v9[v15 + 2] + 56))(v9[v15 + 2]) + 1616);
      v15 += 2;
    }
    while (v17 < *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v16 + 56))(v16) + 1616));
    unint64_t v18 = a2;
    unint64_t v19 = &v9[v15];
    uint64_t v20 = v18;
    if (v15 == 2)
    {
      do
      {
        if (v19 >= v18) {
          break;
        }
        long long v23 = *(v18 - 2);
        v18 -= 2;
        unint64_t v24 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v23 + 56))(v23) + 1616);
      }
      while (v24 >= *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v16 + 56))(v16) + 1616));
    }
    else
    {
      do
      {
        char v21 = *(v18 - 2);
        v18 -= 2;
        long long v22 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v21 + 56))(v21) + 1616);
      }
      while (v22 >= *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v16 + 56))(v16) + 1616));
    }
    a1 = &v9[v15];
    if (v19 < v18)
    {
      char v25 = v18;
      do
      {
        BOOL v26 = *a1;
        *a1 = *v25;
        *char v25 = v26;
        uint64_t v27 = a1[1];
        a1[1] = v25[1];
        v25[1] = v27;
        do
        {
          char v28 = a1[2];
          a1 += 2;
          long long v29 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v28 + 56))(v28) + 1616);
        }
        while (v29 < *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v16 + 56))(v16) + 1616));
        do
        {
          uint64_t v30 = *(v25 - 2);
          v25 -= 2;
          unint64_t v31 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v30 + 56))(v30) + 1616);
        }
        while (v31 >= *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v16 + 56))(v16) + 1616));
      }
      while (a1 < v25);
    }
    unint64_t v32 = v9;
    unint64_t v33 = a1 - 2;
    if (a1 - 2 != v32)
    {
      unint64_t v34 = *(_OWORD *)v33;
      *unint64_t v33 = 0;
      *(a1 - 1) = 0;
      uint64_t v35 = (std::__shared_weak_count *)v144[1];
      *(_OWORD *)char v144 = v34;
      if (v35)
      {
        if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    std::string v36 = (std::__shared_weak_count *)*(a1 - 1);
    *(a1 - 2) = v16;
    *(a1 - 1) = v140;
    if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    uint64_t v4 = v19 >= v18;
    a2 = v20;
    if (!v4) {
      goto LABEL_37;
    }
    long long v37 = sub_1002B256C(v144, a1 - 2);
    if (!sub_1002B256C(a1, v20))
    {
      if (!v37)
      {
LABEL_37:
        sub_1002B0BFC(v144, a1 - 2, a3, a4 & 1);
        a4 = 0;
      }
      goto LABEL_1;
    }
    a2 = a1 - 2;
    uint64_t v9 = v144;
    if (v37) {
      return;
    }
  }
  uint64_t v62 = v9 + 2;
  int v64 = v9 == a2 || v62 == a2;
  if (a4)
  {
    if (!v64)
    {
      uint64_t v65 = 0;
      uint64_t v66 = v9;
      do
      {
        int v67 = v66;
        uint64_t v66 = v62;
        uint64_t v68 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v67[2] + 56))(v67[2]) + 1616);
        if (v68 < *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*v67 + 56))() + 1616))
        {
          int64_t v69 = a2;
          int v70 = *v66;
          uint64_t v71 = v67[3];
          int64_t v72 = v65;
          void *v66 = 0;
          v66[1] = 0;
          while (1)
          {
            int v73 = (char *)v9 + v72;
            uint64_t v74 = *(_OWORD *)((char *)v9 + v72);
            *(void *)int v73 = 0;
            *((void *)v73 + 1) = 0;
            uint64_t v75 = *(std::__shared_weak_count **)((char *)v9 + v72 + 24);
            *((_OWORD *)v73 + 1) = v74;
            if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
            if (!v72) {
              break;
            }
            unsigned __int8 v76 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v70 + 56))(v70) + 1616);
            std::string v77 = (*(uint64_t (**)(void))(**(void **)((char *)v9 + v72 - 16) + 56))(*(uint64_t *)((char *)v9 + v72 - 16));
            v72 -= 16;
            if (v76 >= *(_DWORD *)(v77 + 1616))
            {
              std::string v78 = (uint64_t *)((char *)v9 + v72 + 16);
              std::string v79 = *(std::__shared_weak_count **)((char *)v9 + v72 + 24);
              *std::string v78 = v70;
              v78[1] = v71;
              a2 = v69;
              if (!v79) {
                goto LABEL_81;
              }
              goto LABEL_92;
            }
          }
          std::string v79 = (std::__shared_weak_count *)v9[1];
          atomic_uint *v9 = v70;
          v9[1] = v71;
          a2 = v69;
          if (!v79) {
            goto LABEL_81;
          }
LABEL_92:
          if (!atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
LABEL_81:
        uint64_t v62 = v66 + 2;
        v65 += 16;
      }
      while (v66 + 2 != a2);
    }
  }
  else if (!v64)
  {
    std::string v123 = (std::__shared_weak_count **)(v9 + 3);
    do
    {
      __int16 v124 = v9;
      uint64_t v9 = v62;
      std::string::size_type v125 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v124[2] + 56))(v124[2]) + 1616);
      if (v125 < *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*v124 + 56))() + 1616))
      {
        std::string v126 = *v9;
        std::string v127 = (std::__shared_weak_count *)v124[3];
        std::string v128 = v123;
        atomic_uint *v9 = 0;
        v9[1] = 0;
        do
        {
          std::string v129 = *(_OWORD *)(v128 - 3);
          *(v128 - 3) = 0;
          *(v128 - 2) = 0;
          std::string v130 = *v128;
          *(_OWORD *)(v128 - 1) = v129;
          if (v130 && !atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
          std::string v131 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v126 + 56))(v126) + 1616);
          std::string v132 = ((uint64_t (*)(void))(*(v128 - 5))->__vftable[1].__on_zero_shared)(*(v128 - 5));
          v128 -= 2;
        }
        while (v131 < *(_DWORD *)(v132 + 1616));
        *(v128 - 1) = (std::__shared_weak_count *)v126;
        std::string v133 = *v128;
        *std::string v128 = v127;
        if (v133 && !atomic_fetch_add(&v133->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      uint64_t v62 = v9 + 2;
      v123 += 2;
    }
    while (v9 + 2 != a2);
  }
}

  unint64_t v11 = (char *)a2 - 40;
  uint64_t v12 = (long long *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (sub_1002DDF0C(a3, (void *)a2 - 5, v12))
          {
            unint64_t v32 = *v12;
            unint64_t v33 = v12[1];
            unsigned __int8 v76 = *((void *)v12 + 4);
            uint64_t v74 = v32;
            uint64_t v75 = v33;
            unint64_t v34 = *(_OWORD *)v11;
            uint64_t v35 = *(long long *)((char *)a2 - 24);
            *((void *)v12 + 4) = *((void *)a2 - 1);
            *uint64_t v12 = v34;
            v12[1] = v35;
            *(_OWORD *)unint64_t v11 = v74;
            *(long long *)((char *)a2 - 24) = v75;
            *((void *)a2 - 1) = v76;
          }
          break;
        case 3uLL:
          sub_1002DE1E0(v12, (long long *)((char *)v12 + 40), (long long *)((char *)a2 - 40), a3);
          break;
        case 4uLL:
          std::string v36 = (long long *)((char *)v12 + 40);
          long long v37 = v12 + 5;
          sub_1002DE1E0(v12, (long long *)((char *)v12 + 40), v12 + 5, a3);
          if (sub_1002DDF0C(a3, v11, (void *)v12 + 10))
          {
            long long v38 = *v37;
            long long v39 = v12[6];
            unint64_t v40 = *((void *)v12 + 14);
            unint64_t v41 = *((void *)v11 + 4);
            uint64_t v42 = *((_OWORD *)v11 + 1);
            unsigned int *v37 = *(_OWORD *)v11;
            v12[6] = v42;
            *((void *)v12 + 14) = v41;
            *((void *)v11 + 4) = v40;
            *(_OWORD *)unint64_t v11 = v38;
            *((_OWORD *)v11 + 1) = v39;
            if (sub_1002DDF0C(a3, (void *)v12 + 10, (void *)v12 + 5))
            {
              uint64_t v43 = *((void *)v12 + 9);
              unint64_t v45 = *v36;
              int v44 = *(long long *)((char *)v12 + 56);
              unint64_t v46 = v12[6];
              *std::string v36 = *v37;
              *(long long *)((char *)v12 + 56) = v46;
              *((void *)v12 + 9) = *((void *)v12 + 14);
              unsigned int *v37 = v45;
              v12[6] = v44;
              *((void *)v12 + 14) = v43;
              if (sub_1002DDF0C(a3, (void *)v12 + 5, v12))
              {
                unint64_t v47 = *v12;
                unint64_t v48 = v12[1];
                unsigned __int8 v76 = *((void *)v12 + 4);
                uint64_t v74 = v47;
                uint64_t v75 = v48;
                long long v49 = *(long long *)((char *)v12 + 56);
                *uint64_t v12 = *v36;
                v12[1] = v49;
                *((void *)v12 + 4) = *((void *)v12 + 9);
                unint64_t v50 = v75;
                *std::string v36 = v74;
                *(long long *)((char *)v12 + 56) = v50;
                *((void *)v12 + 9) = v76;
              }
            }
          }
          break;
        case 5uLL:
          sub_1002DF0CC((uint64_t)v12, (uint64_t)v12 + 40, (uint64_t)(v12 + 5), (long long *)((char *)v12 + 120), (long long *)((char *)a2 - 40), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 959) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        sub_1002DF294((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = (long long *)((char *)v12 + 40 * (v16 >> 1));
    if ((unint64_t)v15 >= 0x1401)
    {
      sub_1002DE1E0(v12, (long long *)((char *)v12 + 40 * (v16 >> 1)), (long long *)((char *)a2 - 40), a3);
      unint64_t v19 = 40 * v17;
      uint64_t v20 = (long long *)((char *)v12 + 40 * v17 - 40);
      sub_1002DE1E0((long long *)((char *)v12 + 40), v20, a2 - 5, a3);
      char v21 = v12 + 5;
      long long v22 = (long long *)((char *)v12 + v19 + 40);
      sub_1002DE1E0(v21, v22, (long long *)((char *)a2 - 120), a3);
      sub_1002DE1E0(v20, v18, v22, a3);
      long long v23 = *(_OWORD *)a1;
      unint64_t v24 = *(_OWORD *)(a1 + 16);
      unsigned __int8 v76 = *(void *)(a1 + 32);
      uint64_t v74 = v23;
      uint64_t v75 = v24;
      char v25 = *v18;
      BOOL v26 = v18[1];
      *(void *)(a1 + 32) = *((void *)v18 + 4);
      *(_OWORD *)a1 = v25;
      *(_OWORD *)(a1 + 16) = v26;
      uint64_t v27 = v74;
      char v28 = v75;
      *((void *)v18 + 4) = v76;
      dirent *v18 = v27;
      v18[1] = v28;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1002DE1E0((long long *)((char *)v12 + 40 * (v16 >> 1)), v12, (long long *)((char *)a2 - 40), a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((sub_1002DDF0C(a3, (void *)(a1 - 40), (void *)a1) & 1) == 0)
    {
      uint64_t v12 = (long long *)sub_1002DE358((long long *)a1, (unint64_t)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    long long v29 = sub_1002DE4B8((long long *)a1, a2, a3);
    if ((v30 & 1) == 0) {
      goto LABEL_16;
    }
    unint64_t v31 = sub_1002DE618(a1, v29, a3);
    uint64_t v12 = (long long *)(v29 + 40);
    if (sub_1002DE618(v29 + 40, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (long long *)v29;
      if (v31) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v31)
    {
LABEL_16:
      sub_1002DD980(a1, v29, a3, -v14, a5 & 1);
      uint64_t v12 = (long long *)(v29 + 40);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  long long v51 = (long long *)((char *)v12 + 40);
  uint64_t v53 = v12 == a2 || v51 == a2;
  if (a5)
  {
    if (!v53)
    {
      std::string v54 = 0;
      unint64_t v55 = v12;
      do
      {
        unsigned int v59 = v55;
        unint64_t v55 = v51;
        if (sub_1002DDF0C(a3, v51, v59))
        {
          unint64_t v60 = *v55;
          unint64_t v61 = v55[1];
          unsigned __int8 v76 = *((void *)v55 + 4);
          uint64_t v74 = v60;
          uint64_t v75 = v61;
          uint64_t v62 = v54;
          do
          {
            __int16 v63 = (char *)v12 + v62;
            int v64 = *(long long *)((char *)v12 + v62 + 16);
            *(_OWORD *)(v63 + 40) = *(long long *)((char *)v12 + v62);
            *(_OWORD *)(v63 + 56) = v64;
            *((void *)v63 + 9) = *(void *)((char *)v12 + v62 + 32);
            if (!v62)
            {
              unint64_t v56 = (uint64_t)v12;
              goto LABEL_44;
            }
            v62 -= 40;
          }
          while ((sub_1002DDF0C(a3, &v74, (long long *)((char *)v12 + v62)) & 1) != 0);
          unint64_t v56 = (uint64_t)v12 + v62 + 40;
LABEL_44:
          uint64_t v57 = v74;
          uint64_t v58 = v75;
          *(void *)(v56 + 32) = v76;
          *(_OWORD *)unint64_t v56 = v57;
          *(_OWORD *)(v56 + 16) = v58;
        }
        long long v51 = (long long *)((char *)v55 + 40);
        v54 += 40;
      }
      while ((long long *)((char *)v55 + 40) != a2);
    }
  }
  else if (!v53)
  {
    uint64_t v65 = (void *)v12 - 5;
    do
    {
      uint64_t v66 = (void *)a1;
      a1 = (uint64_t)v51;
      if (sub_1002DDF0C(a3, v51, v66))
      {
        int v67 = *(_OWORD *)a1;
        uint64_t v68 = *(_OWORD *)(a1 + 16);
        unsigned __int8 v76 = *(void *)(a1 + 32);
        uint64_t v74 = v67;
        uint64_t v75 = v68;
        int64_t v69 = v65;
        do
        {
          int v70 = *(_OWORD *)(v69 + 7);
          *((_OWORD *)v69 + 5) = *(_OWORD *)(v69 + 5);
          *((_OWORD *)v69 + 6) = v70;
          v69[14] = v69[9];
          uint64_t v71 = sub_1002DDF0C(a3, &v74, v69);
          v69 -= 5;
        }
        while ((v71 & 1) != 0);
        int64_t v72 = v74;
        int v73 = v75;
        v69[14] = v76;
        *((_OWORD *)v69 + 5) = v72;
        *((_OWORD *)v69 + 6) = v73;
      }
      long long v51 = (long long *)(a1 + 40);
      v65 += 5;
    }
    while ((long long *)(a1 + 40) != a2);
  }
}

  unint64_t v11 = a2 - 7;
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * (((char *)a2 - (char *)v12) >> 4);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (sub_1002E0D14(a3, (uint64_t)&a2[-7], (uint64_t)v12))
          {
            unint64_t v41 = *v12;
            uint64_t v42 = v12[2];
            std::string v126 = v12[1];
            std::string v127 = v42;
            std::string::size_type v125 = v41;
            uint64_t v43 = v12[3];
            int v44 = v12[4];
            unint64_t v45 = v12[6];
            std::string v130 = v12[5];
            std::string v131 = v45;
            std::string v128 = (__n128)v43;
            std::string v129 = v44;
            unint64_t v46 = (__int128)a2[-1];
            unint64_t v48 = (__int128)a2[-4];
            unint64_t v47 = (__int128)a2[-3];
            v12[5] = (__int128)a2[-2];
            v12[6] = v46;
            void v12[3] = v48;
            void v12[4] = v47;
            long long v49 = (__int128)*v11;
            unint64_t v50 = (__int128)a2[-5];
            v12[1] = (__int128)a2[-6];
            _DWORD v12[2] = v50;
            *uint64_t v12 = v49;
            a2[-5] = (__n128)v127;
            a2[-6] = (__n128)v126;
            *unint64_t v11 = (__n128)v125;
            a2[-1] = (__n128)v131;
            a2[-2] = (__n128)v130;
            a2[-3] = (__n128)v129;
            a2[-4] = v128;
          }
          break;
        case 3uLL:
          sub_1002E12F8(v12, v12 + 7, (long long *)&a2[-7], a3);
          break;
        case 4uLL:
          long long v51 = v12 + 7;
          uint64_t v52 = v12 + 14;
          sub_1002E12F8(v12, v12 + 7, v12 + 14, a3);
          if (sub_1002E0D14(a3, (uint64_t)v11, (uint64_t)(v12 + 14)))
          {
            uint64_t v53 = v12[19];
            std::string v129 = v12[18];
            std::string v130 = v53;
            std::string v131 = v12[20];
            std::string v54 = v12[15];
            std::string::size_type v125 = *v52;
            std::string v126 = v54;
            unint64_t v55 = v12[17];
            std::string v127 = v12[16];
            std::string v128 = (__n128)v55;
            uint64_t v57 = (__int128)v11[1];
            unint64_t v56 = (__int128)v11[2];
            std::string *v52 = (__int128)*v11;
            v12[15] = v57;
            v12[16] = v56;
            uint64_t v58 = (__int128)v11[6];
            unint64_t v60 = (__int128)v11[3];
            unsigned int v59 = (__int128)v11[4];
            v12[19] = (__int128)v11[5];
            v12[20] = v58;
            v12[17] = v60;
            v12[18] = v59;
            id v11[2] = (__n128)v127;
            v11[1] = (__n128)v126;
            *unint64_t v11 = (__n128)v125;
            v11[6] = (__n128)v131;
            void v11[5] = (__n128)v130;
            v11[4] = (__n128)v129;
            v11[3] = v128;
            if (sub_1002E0D14(a3, (uint64_t)(v12 + 14), (uint64_t)(v12 + 7)))
            {
              unint64_t v61 = v12[12];
              std::string v129 = v12[11];
              std::string v130 = v61;
              std::string v131 = v12[13];
              uint64_t v62 = v12[8];
              std::string::size_type v125 = *v51;
              std::string v126 = v62;
              __int16 v63 = v12[10];
              std::string v127 = v12[9];
              std::string v128 = (__n128)v63;
              int v64 = v12[15];
              std::string *v51 = *v52;
              v12[8] = v64;
              uint64_t v65 = v12[20];
              uint64_t v66 = v12[18];
              v12[12] = v12[19];
              v12[13] = v65;
              int v67 = v12[17];
              v12[9] = v12[16];
              v12[10] = v67;
              v12[11] = v66;
              uint64_t v68 = v126;
              std::string *v52 = v125;
              v12[15] = v68;
              int64_t v69 = v127;
              int v70 = (__int128)v128;
              uint64_t v71 = v131;
              v12[19] = v130;
              v12[20] = v71;
              int64_t v72 = v129;
              v12[17] = v70;
              v12[18] = v72;
              v12[16] = v69;
              if (sub_1002E0D14(a3, (uint64_t)(v12 + 7), (uint64_t)v12))
              {
                int v73 = *v12;
                uint64_t v74 = v12[2];
                std::string v126 = v12[1];
                std::string v127 = v74;
                std::string::size_type v125 = v73;
                uint64_t v75 = v12[3];
                unsigned __int8 v76 = v12[4];
                std::string v77 = v12[6];
                std::string v130 = v12[5];
                std::string v131 = v77;
                std::string v128 = (__n128)v75;
                std::string v129 = v76;
                std::string v78 = v12[12];
                void v12[4] = v12[11];
                v12[5] = v78;
                v12[6] = v12[13];
                std::string v79 = v12[8];
                *uint64_t v12 = *v51;
                v12[1] = v79;
                std::string v80 = v12[10];
                _DWORD v12[2] = v12[9];
                void v12[3] = v80;
                int v81 = v126;
                std::string *v51 = v125;
                v12[8] = v81;
                __int16 v82 = v127;
                std::string v83 = (__int128)v128;
                int v84 = v131;
                v12[12] = v130;
                v12[13] = v84;
                unint64_t v85 = v129;
                v12[10] = v83;
                v12[11] = v85;
                v12[9] = v82;
              }
            }
          }
          break;
        case 5uLL:
          sub_1002E1D38(v12, v12 + 7, v12 + 14, v12 + 21, (long long *)&a2[-7], a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 2687) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (long long *)a2)
      {
        sub_1002E20B8((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = &v12[7 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0x3801)
    {
      sub_1002E12F8(v12, &v12[7 * (v16 >> 1)], (long long *)&a2[-7], a3);
      unint64_t v19 = 7 * v17;
      uint64_t v20 = &v12[7 * v17 - 7];
      sub_1002E12F8(v12 + 7, v20, (long long *)&a2[-14], a3);
      char v21 = v12 + 14;
      long long v22 = &v12[v19 + 7];
      sub_1002E12F8(v21, v22, (long long *)&a2[-21], a3);
      sub_1002E12F8(v20, v18, v22, a3);
      long long v23 = *a1;
      unint64_t v24 = a1[2];
      std::string v126 = a1[1];
      std::string v127 = v24;
      std::string::size_type v125 = v23;
      char v25 = a1[3];
      BOOL v26 = a1[4];
      uint64_t v27 = a1[6];
      std::string v130 = a1[5];
      std::string v131 = v27;
      std::string v128 = (__n128)v25;
      std::string v129 = v26;
      char v28 = v18[6];
      uint64_t v30 = v18[3];
      long long v29 = v18[4];
      a1[5] = v18[5];
      a1[6] = v28;
      a1[3] = v30;
      a1[4] = v29;
      unint64_t v31 = *v18;
      unint64_t v32 = v18[2];
      a1[1] = v18[1];
      a1[2] = v32;
      *a1 = v31;
      unint64_t v33 = v125;
      unint64_t v34 = v127;
      v18[1] = v126;
      void v18[2] = v34;
      dirent *v18 = v33;
      uint64_t v35 = (__int128)v128;
      std::string v36 = v129;
      long long v37 = v131;
      v18[5] = v130;
      v18[6] = v37;
      v18[3] = v35;
      v18[4] = v36;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1002E12F8(&v12[7 * (v16 >> 1)], v12, (long long *)&a2[-7], a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((sub_1002E0D14(a3, (uint64_t)(a1 - 7), (uint64_t)a1) & 1) == 0)
    {
      uint64_t v12 = sub_1002E15B0(a1, (long long *)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    long long v38 = sub_1002E1778(a1, (unint64_t)a2, a3);
    if ((v39 & 1) == 0) {
      goto LABEL_16;
    }
    unint64_t v40 = sub_1002E1948(a1, v38, a3);
    uint64_t v12 = v38 + 7;
    if (sub_1002E1948(v38 + 7, (long long *)a2, a3))
    {
      a4 = -v14;
      a2 = (__n128 *)v38;
      if (v40) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v40)
    {
LABEL_16:
      sub_1002E05E8(a1, v38, a3, -v14, a5 & 1);
      uint64_t v12 = v38 + 7;
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  int v86 = (uint64_t)(v12 + 7);
  std::string v88 = v12 == (long long *)a2 || v86 == (void)a2;
  if (a5)
  {
    if (!v88)
    {
      std::string v89 = 0;
      __int16 v90 = v12;
      do
      {
        uint64_t v97 = (uint64_t)v90;
        __int16 v90 = (long long *)v86;
        if (sub_1002E0D14(a3, v86, v97))
        {
          char v98 = *v90;
          char v99 = v90[2];
          std::string v126 = v90[1];
          std::string v127 = v99;
          std::string::size_type v125 = v98;
          char v100 = (__n128)v90[3];
          char v101 = v90[4];
          std::string::size_type v102 = v90[6];
          std::string v130 = v90[5];
          std::string v131 = v102;
          std::string v128 = v100;
          std::string v129 = v101;
          long long v103 = v89;
          do
          {
            long long v104 = (long long *)((char *)v12 + v103);
            char v105 = *(long long *)((char *)v12 + v103 + 80);
            v104[11] = *(long long *)((char *)v12 + v103 + 64);
            v104[12] = v105;
            v104[13] = *(long long *)((char *)v12 + v103 + 96);
            long long v106 = *(long long *)((char *)v12 + v103 + 16);
            v104[7] = *(long long *)((char *)v12 + v103);
            v104[8] = v106;
            long long v107 = *(long long *)((char *)v12 + v103 + 48);
            v104[9] = *(long long *)((char *)v12 + v103 + 32);
            v104[10] = v107;
            if (!v103)
            {
              int v91 = v12;
              goto LABEL_44;
            }
            v103 -= 112;
          }
          while ((sub_1002E0D14(a3, (uint64_t)&v125, (uint64_t)v12 + v103) & 1) != 0);
          int v91 = (long long *)((char *)v12 + v103 + 112);
LABEL_44:
          __int16 v92 = v125;
          std::string::size_type v93 = v127;
          v91[1] = v126;
          v91[2] = v93;
          const char *v91 = v92;
          char v94 = v128;
          uint64_t v95 = v129;
          char v96 = v131;
          v91[5] = v130;
          v91[6] = v96;
          v91[3] = (__int128)v94;
          v91[4] = v95;
        }
        int v86 = (uint64_t)(v90 + 7);
        v89 += 112;
      }
      while (v90 + 7 != (long long *)a2);
    }
  }
  else if (!v88)
  {
    long long v108 = v12 - 7;
    do
    {
      std::string::size_type v109 = (uint64_t)a1;
      a1 = (long long *)v86;
      if (sub_1002E0D14(a3, v86, v109))
      {
        long long v110 = *a1;
        long long v111 = a1[2];
        std::string v126 = a1[1];
        std::string v127 = v111;
        std::string::size_type v125 = v110;
        uint64_t v112 = a1[3];
        int v113 = a1[4];
        uint64_t v114 = a1[6];
        std::string v130 = a1[5];
        std::string v131 = v114;
        std::string v128 = (__n128)v112;
        std::string v129 = v113;
        uint64_t v115 = v108;
        do
        {
          char v116 = v115[12];
          v115[18] = v115[11];
          v115[19] = v116;
          v115[20] = v115[13];
          int v117 = v115[8];
          v115[14] = v115[7];
          v115[15] = v117;
          std::string v118 = v115[10];
          v115[16] = v115[9];
          v115[17] = v118;
          std::string v119 = sub_1002E0D14(a3, (uint64_t)&v125, (uint64_t)v115);
          v115 -= 7;
        }
        while ((v119 & 1) != 0);
        std::string v120 = v125;
        std::string v121 = v127;
        v115[15] = v126;
        v115[16] = v121;
        v115[14] = v120;
        std::string v122 = v128;
        std::string v123 = v129;
        __int16 v124 = v131;
        v115[19] = v130;
        v115[20] = v124;
        v115[17] = (__int128)v122;
        v115[18] = v123;
      }
      int v86 = (uint64_t)(a1 + 7);
      v108 += 7;
    }
    while (a1 + 7 != (long long *)a2);
  }
}

  unint64_t v11 = a2 - 7;
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * (((char *)a2 - (char *)v12) >> 4);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (sub_1002E84A4(a3, (uint64_t)&a2[-7], (uint64_t)v12))
          {
            unint64_t v41 = *v12;
            uint64_t v42 = v12[2];
            std::string v126 = v12[1];
            std::string v127 = v42;
            std::string::size_type v125 = v41;
            uint64_t v43 = v12[3];
            int v44 = v12[4];
            unint64_t v45 = v12[6];
            std::string v130 = v12[5];
            std::string v131 = v45;
            std::string v128 = (__n128)v43;
            std::string v129 = v44;
            unint64_t v46 = (__int128)a2[-1];
            unint64_t v48 = (__int128)a2[-4];
            unint64_t v47 = (__int128)a2[-3];
            v12[5] = (__int128)a2[-2];
            v12[6] = v46;
            void v12[3] = v48;
            void v12[4] = v47;
            long long v49 = (__int128)*v11;
            unint64_t v50 = (__int128)a2[-5];
            v12[1] = (__int128)a2[-6];
            _DWORD v12[2] = v50;
            *uint64_t v12 = v49;
            a2[-5] = (__n128)v127;
            a2[-6] = (__n128)v126;
            *unint64_t v11 = (__n128)v125;
            a2[-1] = (__n128)v131;
            a2[-2] = (__n128)v130;
            a2[-3] = (__n128)v129;
            a2[-4] = v128;
          }
          break;
        case 3uLL:
          sub_1002E8A84(v12, v12 + 7, (long long *)&a2[-7], a3);
          break;
        case 4uLL:
          long long v51 = v12 + 7;
          uint64_t v52 = v12 + 14;
          sub_1002E8A84(v12, v12 + 7, v12 + 14, a3);
          if (sub_1002E84A4(a3, (uint64_t)v11, (uint64_t)(v12 + 14)))
          {
            uint64_t v53 = v12[19];
            std::string v129 = v12[18];
            std::string v130 = v53;
            std::string v131 = v12[20];
            std::string v54 = v12[15];
            std::string::size_type v125 = *v52;
            std::string v126 = v54;
            unint64_t v55 = v12[17];
            std::string v127 = v12[16];
            std::string v128 = (__n128)v55;
            uint64_t v57 = (__int128)v11[1];
            unint64_t v56 = (__int128)v11[2];
            std::string *v52 = (__int128)*v11;
            v12[15] = v57;
            v12[16] = v56;
            uint64_t v58 = (__int128)v11[6];
            unint64_t v60 = (__int128)v11[3];
            unsigned int v59 = (__int128)v11[4];
            v12[19] = (__int128)v11[5];
            v12[20] = v58;
            v12[17] = v60;
            v12[18] = v59;
            id v11[2] = (__n128)v127;
            v11[1] = (__n128)v126;
            *unint64_t v11 = (__n128)v125;
            v11[6] = (__n128)v131;
            void v11[5] = (__n128)v130;
            v11[4] = (__n128)v129;
            v11[3] = v128;
            if (sub_1002E84A4(a3, (uint64_t)(v12 + 14), (uint64_t)(v12 + 7)))
            {
              unint64_t v61 = v12[12];
              std::string v129 = v12[11];
              std::string v130 = v61;
              std::string v131 = v12[13];
              uint64_t v62 = v12[8];
              std::string::size_type v125 = *v51;
              std::string v126 = v62;
              __int16 v63 = v12[10];
              std::string v127 = v12[9];
              std::string v128 = (__n128)v63;
              int v64 = v12[15];
              std::string *v51 = *v52;
              v12[8] = v64;
              uint64_t v65 = v12[20];
              uint64_t v66 = v12[18];
              v12[12] = v12[19];
              v12[13] = v65;
              int v67 = v12[17];
              v12[9] = v12[16];
              v12[10] = v67;
              v12[11] = v66;
              uint64_t v68 = v126;
              std::string *v52 = v125;
              v12[15] = v68;
              int64_t v69 = v127;
              int v70 = (__int128)v128;
              uint64_t v71 = v131;
              v12[19] = v130;
              v12[20] = v71;
              int64_t v72 = v129;
              v12[17] = v70;
              v12[18] = v72;
              v12[16] = v69;
              if (sub_1002E84A4(a3, (uint64_t)(v12 + 7), (uint64_t)v12))
              {
                int v73 = *v12;
                uint64_t v74 = v12[2];
                std::string v126 = v12[1];
                std::string v127 = v74;
                std::string::size_type v125 = v73;
                uint64_t v75 = v12[3];
                unsigned __int8 v76 = v12[4];
                std::string v77 = v12[6];
                std::string v130 = v12[5];
                std::string v131 = v77;
                std::string v128 = (__n128)v75;
                std::string v129 = v76;
                std::string v78 = v12[12];
                void v12[4] = v12[11];
                v12[5] = v78;
                v12[6] = v12[13];
                std::string v79 = v12[8];
                *uint64_t v12 = *v51;
                v12[1] = v79;
                std::string v80 = v12[10];
                _DWORD v12[2] = v12[9];
                void v12[3] = v80;
                int v81 = v126;
                std::string *v51 = v125;
                v12[8] = v81;
                __int16 v82 = v127;
                std::string v83 = (__int128)v128;
                int v84 = v131;
                v12[12] = v130;
                v12[13] = v84;
                unint64_t v85 = v129;
                v12[10] = v83;
                v12[11] = v85;
                v12[9] = v82;
              }
            }
          }
          break;
        case 5uLL:
          sub_1002E94C4(v12, v12 + 7, v12 + 14, v12 + 21, (long long *)&a2[-7], a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 2687) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (long long *)a2)
      {
        sub_1002E9844((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = &v12[7 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0x3801)
    {
      sub_1002E8A84(v12, &v12[7 * (v16 >> 1)], (long long *)&a2[-7], a3);
      unint64_t v19 = 7 * v17;
      uint64_t v20 = &v12[7 * v17 - 7];
      sub_1002E8A84(v12 + 7, v20, (long long *)&a2[-14], a3);
      char v21 = v12 + 14;
      long long v22 = &v12[v19 + 7];
      sub_1002E8A84(v21, v22, (long long *)&a2[-21], a3);
      sub_1002E8A84(v20, v18, v22, a3);
      long long v23 = *a1;
      unint64_t v24 = a1[2];
      std::string v126 = a1[1];
      std::string v127 = v24;
      std::string::size_type v125 = v23;
      char v25 = a1[3];
      BOOL v26 = a1[4];
      uint64_t v27 = a1[6];
      std::string v130 = a1[5];
      std::string v131 = v27;
      std::string v128 = (__n128)v25;
      std::string v129 = v26;
      char v28 = v18[6];
      uint64_t v30 = v18[3];
      long long v29 = v18[4];
      a1[5] = v18[5];
      a1[6] = v28;
      a1[3] = v30;
      a1[4] = v29;
      unint64_t v31 = *v18;
      unint64_t v32 = v18[2];
      a1[1] = v18[1];
      a1[2] = v32;
      *a1 = v31;
      unint64_t v33 = v125;
      unint64_t v34 = v127;
      v18[1] = v126;
      void v18[2] = v34;
      dirent *v18 = v33;
      uint64_t v35 = (__int128)v128;
      std::string v36 = v129;
      long long v37 = v131;
      v18[5] = v130;
      v18[6] = v37;
      v18[3] = v35;
      v18[4] = v36;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1002E8A84(&v12[7 * (v16 >> 1)], v12, (long long *)&a2[-7], a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((sub_1002E84A4(a3, (uint64_t)(a1 - 7), (uint64_t)a1) & 1) == 0)
    {
      uint64_t v12 = sub_1002E8D3C(a1, (long long *)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    long long v38 = sub_1002E8F04(a1, (unint64_t)a2, a3);
    if ((v39 & 1) == 0) {
      goto LABEL_16;
    }
    unint64_t v40 = sub_1002E90D4(a1, v38, a3);
    uint64_t v12 = v38 + 7;
    if (sub_1002E90D4(v38 + 7, (long long *)a2, a3))
    {
      a4 = -v14;
      a2 = (__n128 *)v38;
      if (v40) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v40)
    {
LABEL_16:
      sub_1002E7D78(a1, v38, a3, -v14, a5 & 1);
      uint64_t v12 = v38 + 7;
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  int v86 = (uint64_t)(v12 + 7);
  std::string v88 = v12 == (long long *)a2 || v86 == (void)a2;
  if (a5)
  {
    if (!v88)
    {
      std::string v89 = 0;
      __int16 v90 = v12;
      do
      {
        uint64_t v97 = (uint64_t)v90;
        __int16 v90 = (long long *)v86;
        if (sub_1002E84A4(a3, v86, v97))
        {
          char v98 = *v90;
          char v99 = v90[2];
          std::string v126 = v90[1];
          std::string v127 = v99;
          std::string::size_type v125 = v98;
          char v100 = (__n128)v90[3];
          char v101 = v90[4];
          std::string::size_type v102 = v90[6];
          std::string v130 = v90[5];
          std::string v131 = v102;
          std::string v128 = v100;
          std::string v129 = v101;
          long long v103 = v89;
          do
          {
            long long v104 = (long long *)((char *)v12 + v103);
            char v105 = *(long long *)((char *)v12 + v103 + 80);
            v104[11] = *(long long *)((char *)v12 + v103 + 64);
            v104[12] = v105;
            v104[13] = *(long long *)((char *)v12 + v103 + 96);
            long long v106 = *(long long *)((char *)v12 + v103 + 16);
            v104[7] = *(long long *)((char *)v12 + v103);
            v104[8] = v106;
            long long v107 = *(long long *)((char *)v12 + v103 + 48);
            v104[9] = *(long long *)((char *)v12 + v103 + 32);
            v104[10] = v107;
            if (!v103)
            {
              int v91 = v12;
              goto LABEL_44;
            }
            v103 -= 112;
          }
          while ((sub_1002E84A4(a3, (uint64_t)&v125, (uint64_t)v12 + v103) & 1) != 0);
          int v91 = (long long *)((char *)v12 + v103 + 112);
LABEL_44:
          __int16 v92 = v125;
          std::string::size_type v93 = v127;
          v91[1] = v126;
          v91[2] = v93;
          const char *v91 = v92;
          char v94 = v128;
          uint64_t v95 = v129;
          char v96 = v131;
          v91[5] = v130;
          v91[6] = v96;
          v91[3] = (__int128)v94;
          v91[4] = v95;
        }
        int v86 = (uint64_t)(v90 + 7);
        v89 += 112;
      }
      while (v90 + 7 != (long long *)a2);
    }
  }
  else if (!v88)
  {
    long long v108 = v12 - 7;
    do
    {
      std::string::size_type v109 = (uint64_t)a1;
      a1 = (long long *)v86;
      if (sub_1002E84A4(a3, v86, v109))
      {
        long long v110 = *a1;
        long long v111 = a1[2];
        std::string v126 = a1[1];
        std::string v127 = v111;
        std::string::size_type v125 = v110;
        uint64_t v112 = a1[3];
        int v113 = a1[4];
        uint64_t v114 = a1[6];
        std::string v130 = a1[5];
        std::string v131 = v114;
        std::string v128 = (__n128)v112;
        std::string v129 = v113;
        uint64_t v115 = v108;
        do
        {
          char v116 = v115[12];
          v115[18] = v115[11];
          v115[19] = v116;
          v115[20] = v115[13];
          int v117 = v115[8];
          v115[14] = v115[7];
          v115[15] = v117;
          std::string v118 = v115[10];
          v115[16] = v115[9];
          v115[17] = v118;
          std::string v119 = sub_1002E84A4(a3, (uint64_t)&v125, (uint64_t)v115);
          v115 -= 7;
        }
        while ((v119 & 1) != 0);
        std::string v120 = v125;
        std::string v121 = v127;
        v115[15] = v126;
        v115[16] = v121;
        v115[14] = v120;
        std::string v122 = v128;
        std::string v123 = v129;
        __int16 v124 = v131;
        v115[19] = v130;
        v115[20] = v124;
        v115[17] = (__int128)v122;
        v115[18] = v123;
      }
      int v86 = (uint64_t)(a1 + 7);
      v108 += 7;
    }
    while (a1 + 7 != (long long *)a2);
  }
}

float sub_100099F40(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 80);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 80);
  }
  return *(float *)(v1 + 16);
}

float sub_100099F6C@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 104);
  if (!v2) {
    uint64_t v2 = *(void *)(qword_10047F018 + 104);
  }
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 16);
  float result = *(float *)(v2 + 32);
  *(float *)(a2 + 16) = result;
  return result;
}

uint64_t sub_100099FB4(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 288);
  if (!result) {
    return *(void *)(qword_10047F018 + 288);
  }
  return result;
}

double sub_100099FD8(uint64_t a1)
{
  return *(double *)(*(void *)(a1 + 8) + 152);
}

uint64_t sub_100099FE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 208);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 208);
  }
  return *(unsigned __int8 *)(v1 + 32);
}

uint64_t sub_10009A010()
{
  return 0;
}

uint64_t sub_10009A018(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 140);
}

float sub_10009A024(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 8) + 96);
}

int32x2_t sub_10009A030@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (int32x2_t *)sub_10009DB90(a2);
  uint64_t v4 = *(int32x2_t **)(*(void *)(a1 + 8) + 216);
  if (!v4) {
    uint64_t v4 = *(int32x2_t **)(qword_10047F018 + 216);
  }
  __int32 v5 = v3[4].i32[1];
  v3[4].i32[1] = v5 | 3;
  int32x2_t result = vrev64_s32(v4[2]);
  v3[2] = result;
  __int32 v7 = v4[3].i32[1];
  v5 |= 7u;
  v3[4].i32[1] = v5;
  v3[3].i32[0] = v7;
  __int32 v8 = v4[3].i32[0];
  v3[4].i32[1] = v5 | 8;
  v3[3].i32[1] = v8;
  return result;
}

uint64_t sub_10009A0AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 144);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 144);
  }
  return (uint64_t)(*(float *)(v1 + 16) * 1000000000.0);
}

uint64_t sub_10009A0E8(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 280);
  if (!result) {
    return *(void *)(qword_10047F018 + 280);
  }
  return result;
}

uint64_t sub_10009A10C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 88);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 88);
  }
  return *(unsigned int *)(v1 + 24);
}

void sub_10009A138(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = __exp10(-6.0);
  *(unsigned char *)a2 = *(unsigned char *)(*(void *)(a1 + 8) + 194);
  sub_1000A337C(a2, v4);
  *(void *)(a2 + 24) = 0x401A666660000000;
  *(void *)(a2 + 8) = 0x3FF0000000000000;
}

uint64_t sub_10009A190(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 208);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 208);
  }
  return (uint64_t)(*(float *)(v1 + 44) * 1000000000.0);
}

float sub_10009A1CC(uint64_t a1)
{
  float v1 = *(float *)(*(void *)(a1 + 8) + 40);
  if (v1 < 0.0)
  {
    sub_1000AE4B0(v4, "");
    sub_10029A2BC("confidenceFactor must be non-negative.", &__p);
    sub_10016A2C4((uint64_t)v4, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v5 < 0) {
      operator delete(v4[0]);
    }
    sub_1000D11E0((uint64_t)v3);
  }
  if (v1 > 1.0)
  {
    sub_1000AE4B0(v4, "");
    sub_100234F6C("confidenceFactor must be between 0.0f and 1.0f inclusive", &__p);
    sub_10016A2C4((uint64_t)v4, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v5 < 0) {
      operator delete(v4[0]);
    }
    sub_1000D11E0((uint64_t)v3);
  }
  return 1.0 - v1;
}

void sub_10009A354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009A3A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 168);
  uint64_t v4 = v3;
  if (!v3) {
    uint64_t v4 = *(void *)(qword_10047F018 + 168);
  }
  if (*(double *)(v4 + 16) * 0.5 + 0.001 < *(double *)(v4 + 24))
  {
    sub_1000AE4B0(v7, "");
    sub_10029A44C("0.5 * dynamicuniverseparameters().venuegroupdistance() must be >= dynamicuniverseparameters().debouncedistance()", &__p);
    sub_10016A2C4((uint64_t)v7, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    sub_1000D11E0((uint64_t)&v6);
  }
  if (!v3) {
    uint64_t v3 = *(void *)(qword_10047F018 + 168);
  }
  return sub_10009E028(a2, v3);
}

void sub_10009A4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009A510(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char v6 = sub_10009C798();
  uint64_t v7 = v4;
  if (sub_100059C20((uint64_t)&v6, (unsigned char *)&v7 + 1)) {
    int v5 = 8;
  }
  else {
    int v5 = *(_DWORD *)(*(void *)(a1 + 8) + 28);
  }
  sub_100008470(v5, a2);
}

uint64_t sub_10009A588(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 88);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 88);
  }
  return (uint64_t)(*(float *)(v1 + 16) * 1000000000.0);
}

float sub_10009A5C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 88);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 88);
  }
  return *(float *)(v1 + 28);
}

double sub_10009A5F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 64);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 32);
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)(*(void *)(qword_10047F018 + 64) + 32);
    if (v2)
    {
LABEL_3:
      if (v1) {
        goto LABEL_4;
      }
LABEL_8:
      float v3 = *(float *)(v2 + 16);
      if (*(void *)(*(void *)(qword_10047F018 + 64) + 32)) {
        return v3;
      }
      return v3;
    }
  }
  uint64_t v2 = *(void *)(qword_10047EFE0 + 32);
  if (!v1) {
    goto LABEL_8;
  }
LABEL_4:
  float v3 = *(float *)(v2 + 16);
  if (*(void *)(v1 + 32)) {
    return v3;
  }
  return v3;
}

uint64_t sub_10009A690(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 16);
}

uint64_t sub_10009A69C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 176);
  if (!v2) {
    uint64_t v2 = *(void *)(qword_10047F018 + 176);
  }
  return sub_10009E268(a2, v2);
}

uint64_t sub_10009A6C8(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 36);
}

uint64_t sub_10009A6D4(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 88);
  if (!result) {
    return *(void *)(qword_10047F018 + 88);
  }
  return result;
}

uint64_t sub_10009A6F8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_10009A700()
{
  return 0;
}

void sub_10009A708()
{
}

void sub_10009A758()
{
}

void sub_10009A838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1003A37A8(a10);
  }
  operator delete();
}

uint64_t sub_10009A868()
{
  return 3;
}

uint64_t sub_10009A870()
{
  return 2;
}

uint64_t sub_10009A878(uint64_t a1)
{
  return a1 + 16;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_10009A880(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v4 = a2;
  if (*((unsigned char *)this + 48))
  {
    unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 10);
    *(unsigned char *)a2 = 8;
    unint64_t v11 = (char *)a2 + 1;
    if ((v10 & 0x80000000) != 0)
    {
      uint64_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v10, (unint64_t)v11, a3);
      int v6 = *((_DWORD *)this + 12);
      if ((v6 & 2) != 0) {
        goto LABEL_14;
      }
    }
    else if (v10 > 0x7F)
    {
      uint64_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v10, v11, a3);
      int v6 = *((_DWORD *)this + 12);
      if ((v6 & 2) != 0) {
        goto LABEL_14;
      }
    }
    else
    {
      *((unsigned char *)v4 + 1) = (_BYTE)v10;
      uint64_t v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
      int v6 = *((_DWORD *)this + 12);
      if ((v6 & 2) != 0) {
        goto LABEL_14;
      }
    }
LABEL_3:
    if ((v6 & 4) == 0) {
      goto LABEL_4;
    }
LABEL_20:
    unint64_t v18 = (unsigned int *)*((void *)this + 3);
    if (v18)
    {
      *(unsigned char *)uint64_t v4 = 26;
      unsigned int v19 = v4 + 1;
      uint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18[12];
      if (v20 <= 0x7F) {
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v18 = *(unsigned int **)(qword_10047EA40 + 24);
      *(unsigned char *)uint64_t v4 = 26;
      unsigned int v19 = v4 + 1;
      uint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18[12];
      if (v20 <= 0x7F)
      {
LABEL_22:
        *((unsigned char *)v4 + 1) = (_BYTE)v20;
        uint64_t v4 = sub_1000F76E8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v18, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3);
        if ((*((_DWORD *)this + 12) & 8) != 0) {
          goto LABEL_26;
        }
LABEL_5:
        uint64_t v9 = (void *)*((void *)this + 1);
        char v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
        uint64_t v7 = v9;
        if (!v9) {
          return v4;
        }
        goto LABEL_32;
      }
    }
    char v21 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v20, v19, a3);
    uint64_t v4 = sub_1000F76E8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v18, v21, v22);
    if ((*((_DWORD *)this + 12) & 8) != 0) {
      goto LABEL_26;
    }
    goto LABEL_5;
  }
  int v6 = *((_DWORD *)this + 12);
  if ((v6 & 2) == 0) {
    goto LABEL_3;
  }
LABEL_14:
  uint64_t v12 = (unsigned int *)*((void *)this + 2);
  if (v12)
  {
    *(unsigned char *)uint64_t v4 = 18;
    unsigned int v13 = v4 + 1;
    uint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12[23];
    if (v14 <= 0x7F) {
      goto LABEL_16;
    }
LABEL_19:
    unint64_t v15 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v14, v13, a3);
    uint64_t v4 = sub_1000F0B44((wireless_diagnostics::google::protobuf::internal::WireFormat *)v12, v15, v16, v17);
    int v6 = *((_DWORD *)this + 12);
    if ((v6 & 4) != 0) {
      goto LABEL_20;
    }
    goto LABEL_4;
  }
  uint64_t v12 = *(unsigned int **)(qword_10047EA40 + 16);
  *(unsigned char *)uint64_t v4 = 18;
  unsigned int v13 = v4 + 1;
  uint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12[23];
  if (v14 > 0x7F) {
    goto LABEL_19;
  }
LABEL_16:
  *((unsigned char *)v4 + 1) = (_BYTE)v14;
  uint64_t v4 = sub_1000F0B44((wireless_diagnostics::google::protobuf::internal::WireFormat *)v12, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3, a4);
  int v6 = *((_DWORD *)this + 12);
  if ((v6 & 4) != 0) {
    goto LABEL_20;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    goto LABEL_5;
  }
LABEL_26:
  long long v23 = (unsigned int *)*((void *)this + 4);
  if (v23)
  {
    *(unsigned char *)uint64_t v4 = 34;
    unsigned int v24 = v4 + 1;
    char v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23[15];
    if (v25 <= 0x7F) {
      goto LABEL_28;
    }
  }
  else
  {
    long long v23 = *(unsigned int **)(qword_10047EA40 + 32);
    *(unsigned char *)uint64_t v4 = 34;
    unsigned int v24 = v4 + 1;
    char v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23[15];
    if (v25 <= 0x7F)
    {
LABEL_28:
      *((unsigned char *)v4 + 1) = (_BYTE)v25;
      uint64_t v4 = sub_1000FB660((wireless_diagnostics::google::protobuf::internal::WireFormat *)v23, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3);
      BOOL v26 = (void *)*((void *)this + 1);
      char v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
      uint64_t v7 = v26;
      if (!v26) {
        return v4;
      }
      goto LABEL_32;
    }
  }
  uint64_t v27 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v25, v24, a3);
  uint64_t v4 = sub_1000FB660((wireless_diagnostics::google::protobuf::internal::WireFormat *)v23, v27, v28);
  long long v29 = (void *)*((void *)this + 1);
  char v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  uint64_t v7 = v29;
  if (!v29) {
    return v4;
  }
LABEL_32:
  if (*v7 == v7[1]) {
    return v4;
  }

  return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v8, v4, a3);
}

uint64_t sub_10009AAD0(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 76);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
    int v6 = *(void **)(a1 + 8);
    if (!v6) {
      goto LABEL_39;
    }
    goto LABEL_100;
  }
  if ((*(unsigned char *)(a1 + 76) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 76) & 2) == 0) {
      goto LABEL_32;
    }
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    int v8 = *(unsigned __int8 *)(v7 + 52);
    if (*(unsigned char *)(v7 + 52)) {
      goto LABEL_9;
    }
LABEL_19:
    unint64_t v10 = 0;
    unint64_t v11 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v7 + 8);
    uint64_t v12 = *(void **)(v7 + 8);
    if (!v12) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  uint64_t v7 = *(void *)(qword_10047EB20 + 16);
  int v8 = *(unsigned __int8 *)(v7 + 52);
  if (!*(unsigned char *)(v7 + 52)) {
    goto LABEL_19;
  }
LABEL_9:
  unsigned int v9 = (v8 << 31 >> 31) & 9;
  if ((v8 & 2) != 0) {
    v9 += 9;
  }
  if ((v8 & 4) != 0) {
    unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v9 + 9);
  }
  else {
    unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9;
  }
  if ((v8 & 8) != 0) {
    unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v10
  }
                                                                          + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v7 + 40), (unint64_t)a2)+ 1);
  unint64_t v11 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v7 + 8);
  uint64_t v12 = *(void **)(v7 + 8);
  if (v12)
  {
LABEL_20:
    if (*v12 != v12[1]) {
      unint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v11, a2)+ v10);
    }
  }
LABEL_22:
  *(_DWORD *)(v7 + 48) = v10;
  if (v10 >= 0x80)
  {
    uint64_t v4 = v10
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2)+ 1;
    int v3 = *(_DWORD *)(a1 + 76);
    if ((v3 & 2) == 0) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v4 = (v10 + 2);
    int v3 = *(_DWORD *)(a1 + 76);
    if ((v3 & 2) == 0) {
      goto LABEL_32;
    }
  }
LABEL_26:
  unsigned int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if ((v13 & 0x80000000) != 0)
  {
    int v14 = 10;
  }
  else if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
    int v3 = *(_DWORD *)(a1 + 76);
  }
  else
  {
    int v14 = 1;
  }
  uint64_t v4 = (v4 + v14 + 1);
LABEL_32:
  if ((v3 & 4) != 0)
  {
    uint64_t v16 = *(void *)(a1 + 24);
    int v17 = *(unsigned __int8 *)(v16 + 23);
    char v18 = v17;
    uint64_t v19 = *(void *)(v16 + 8);
    if ((v17 & 0x80u) == 0) {
      unint64_t v20 = *(unsigned __int8 *)(v16 + 23);
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20 >= 0x80)
    {
      int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20, a2);
      int v17 = *(unsigned __int8 *)(v16 + 23);
      uint64_t v19 = *(void *)(v16 + 8);
      int v3 = *(_DWORD *)(a1 + 76);
      char v18 = *(unsigned char *)(v16 + 23);
    }
    else
    {
      int v21 = 1;
    }
    if (v18 < 0) {
      int v17 = v19;
    }
    uint64_t v4 = (v4 + v21 + v17 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_34:
      if ((v3 & 0x10) == 0) {
        goto LABEL_35;
      }
      goto LABEL_58;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_34;
  }
  uint64_t v22 = *(void *)(a1 + 32);
  int v23 = *(unsigned __int8 *)(v22 + 23);
  char v24 = v23;
  uint64_t v25 = *(void *)(v22 + 8);
  if ((v23 & 0x80u) == 0) {
    unint64_t v26 = *(unsigned __int8 *)(v22 + 23);
  }
  else {
    unint64_t v26 = v25;
  }
  if (v26 >= 0x80)
  {
    int v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26, a2);
    int v23 = *(unsigned __int8 *)(v22 + 23);
    uint64_t v25 = *(void *)(v22 + 8);
    int v3 = *(_DWORD *)(a1 + 76);
    char v24 = *(unsigned char *)(v22 + 23);
  }
  else
  {
    int v27 = 1;
  }
  if (v24 < 0) {
    int v23 = v25;
  }
  uint64_t v4 = (v4 + v27 + v23 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_35:
    if ((v3 & 0x20) == 0) {
      goto LABEL_36;
    }
    goto LABEL_67;
  }
LABEL_58:
  uint64_t v28 = *(void *)(a1 + 40);
  int v29 = *(unsigned __int8 *)(v28 + 23);
  char v30 = v29;
  uint64_t v31 = *(void *)(v28 + 8);
  if ((v29 & 0x80u) == 0) {
    unint64_t v32 = *(unsigned __int8 *)(v28 + 23);
  }
  else {
    unint64_t v32 = v31;
  }
  if (v32 >= 0x80)
  {
    int v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32, a2);
    int v29 = *(unsigned __int8 *)(v28 + 23);
    uint64_t v31 = *(void *)(v28 + 8);
    int v3 = *(_DWORD *)(a1 + 76);
    char v30 = *(unsigned char *)(v28 + 23);
  }
  else
  {
    int v33 = 1;
  }
  if (v30 < 0) {
    int v29 = v31;
  }
  uint64_t v4 = (v4 + v33 + v29 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_36:
    if ((v3 & 0x40) == 0) {
      goto LABEL_37;
    }
    goto LABEL_76;
  }
LABEL_67:
  uint64_t v34 = *(void *)(a1 + 56);
  int v35 = *(unsigned __int8 *)(v34 + 23);
  char v36 = v35;
  uint64_t v37 = *(void *)(v34 + 8);
  if ((v35 & 0x80u) == 0) {
    unint64_t v38 = *(unsigned __int8 *)(v34 + 23);
  }
  else {
    unint64_t v38 = v37;
  }
  if (v38 >= 0x80)
  {
    int v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v38, a2);
    int v35 = *(unsigned __int8 *)(v34 + 23);
    uint64_t v37 = *(void *)(v34 + 8);
    int v3 = *(_DWORD *)(a1 + 76);
    char v36 = *(unsigned char *)(v34 + 23);
  }
  else
  {
    int v39 = 1;
  }
  if (v36 < 0) {
    int v35 = v37;
  }
  uint64_t v4 = (v4 + v39 + v35 + 1);
  if ((v3 & 0x40) == 0)
  {
LABEL_37:
    if ((v3 & 0x80) == 0) {
      goto LABEL_38;
    }
LABEL_93:
    unint64_t v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if ((v46 & 0x80000000) != 0)
    {
      uint64_t v4 = (v4 + 11);
      int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
      int v6 = *(void **)(a1 + 8);
      if (!v6) {
        goto LABEL_39;
      }
    }
    else if (v46 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v46, a2)+ 1+ v4;
      int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
      int v6 = *(void **)(a1 + 8);
      if (!v6) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v4 = (v4 + 2);
      int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
      int v6 = *(void **)(a1 + 8);
      if (!v6) {
        goto LABEL_39;
      }
    }
    goto LABEL_100;
  }
LABEL_76:
  uint64_t v40 = *(void *)(a1 + 64);
  if (v40)
  {
    if ((*(unsigned char *)(v40 + 28) & 1) == 0) {
      goto LABEL_78;
    }
  }
  else
  {
    uint64_t v40 = *(void *)(qword_10047EB20 + 64);
    if ((*(unsigned char *)(v40 + 28) & 1) == 0)
    {
LABEL_78:
      unint64_t v41 = 0;
      uint64_t v42 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v40 + 8);
      uint64_t v43 = *(void **)(v40 + 8);
      if (!v43) {
        goto LABEL_89;
      }
      goto LABEL_87;
    }
  }
  uint64_t v44 = *(void *)(v40 + 16);
  if (v44)
  {
    unint64_t v45 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10009B6C8(v44, a2);
    if (v45 < 0x80) {
      goto LABEL_83;
    }
  }
  else
  {
    unint64_t v45 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10009B6C8(*(void *)(qword_10047EB18 + 16), a2);
    if (v45 < 0x80)
    {
LABEL_83:
      unint64_t v41 = (v45 + 2);
      uint64_t v42 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v40 + 8);
      uint64_t v43 = *(void **)(v40 + 8);
      if (!v43) {
        goto LABEL_89;
      }
      goto LABEL_87;
    }
  }
  unint64_t v41 = v45
      + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v45, a2)+ 1;
  uint64_t v42 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v40 + 8);
  uint64_t v43 = *(void **)(v40 + 8);
  if (!v43) {
    goto LABEL_89;
  }
LABEL_87:
  if (*v43 != v43[1]) {
    unint64_t v41 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v42, a2)
  }
        + v41;
LABEL_89:
  *(_DWORD *)(v40 + 24) = v41;
  if (v41 >= 0x80)
  {
    uint64_t v4 = v4
       + v41
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v41, a2)+ 1;
    if ((*(_DWORD *)(a1 + 76) & 0x80) != 0) {
      goto LABEL_93;
    }
  }
  else
  {
    uint64_t v4 = (v4 + v41 + 2);
    if ((*(_DWORD *)(a1 + 76) & 0x80) != 0) {
      goto LABEL_93;
    }
  }
LABEL_38:
  int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  int v6 = *(void **)(a1 + 8);
  if (!v6)
  {
LABEL_39:
    *(_DWORD *)(a1 + 72) = v4;
    return v4;
  }
LABEL_100:
  if (*v6 == v6[1]) {
    goto LABEL_39;
  }
  uint64_t v47 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v5, a2)
      + v4;
  *(_DWORD *)(a1 + 72) = v47;
  return v47;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_10009AF2C(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  int v3 = a2;
  int v5 = *((_DWORD *)this + 39);
  if (v5)
  {
    unsigned int v9 = (unsigned int *)*((void *)this + 2);
    if (v9)
    {
      *(unsigned char *)a2 = 10;
      unsigned int v10 = a2 + 1;
      unint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9[12];
      if (v11 <= 0x7F) {
        goto LABEL_23;
      }
    }
    else
    {
      unsigned int v9 = *(unsigned int **)(qword_10047EB60 + 16);
      *(unsigned char *)a2 = 10;
      unsigned int v10 = a2 + 1;
      unint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9[12];
      if (v11 <= 0x7F)
      {
LABEL_23:
        *((unsigned char *)v3 + 1) = (_BYTE)v11;
        int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_1000035A8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v9, (uint64_t)v3 + 2, a3);
        int v5 = *((_DWORD *)this + 39);
        if ((v5 & 2) != 0) {
          goto LABEL_27;
        }
LABEL_3:
        if ((v5 & 4) == 0) {
          goto LABEL_4;
        }
        goto LABEL_28;
      }
    }
    uint64_t v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v11, v10, a3);
    int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_1000035A8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v9, v12, v13);
    int v5 = *((_DWORD *)this + 39);
    if ((v5 & 2) != 0) {
      goto LABEL_27;
    }
    goto LABEL_3;
  }
  if ((v5 & 2) == 0) {
    goto LABEL_3;
  }
LABEL_27:
  uint64_t v14 = *((void *)this + 3);
  *(unsigned char *)int v3 = 17;
  *(void *)((char *)v3 + 1) = v14;
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
  int v5 = *((_DWORD *)this + 39);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_29:
    uint64_t v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 12);
    *(unsigned char *)int v3 = 32;
    unint64_t v17 = (unint64_t)v3 + 1;
    if ((v16 & 0x80000000) != 0)
    {
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v16, v17, a3);
      int v6 = *((_DWORD *)this + 39);
      if ((v6 & 0x10) != 0) {
        goto LABEL_36;
      }
    }
    else if (v16 > 0x7F)
    {
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v16, v17, a3);
      int v6 = *((_DWORD *)this + 39);
      if ((v6 & 0x10) != 0) {
        goto LABEL_36;
      }
    }
    else
    {
      *((unsigned char *)v3 + 1) = (_BYTE)v16;
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
      int v6 = *((_DWORD *)this + 39);
      if ((v6 & 0x10) != 0) {
        goto LABEL_36;
      }
    }
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }
LABEL_28:
  uint64_t v15 = *((void *)this + 4);
  *(unsigned char *)int v3 = 25;
  *(void *)((char *)v3 + 1) = v15;
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
  if ((*((_DWORD *)this + 39) & 8) != 0) {
    goto LABEL_29;
  }
LABEL_5:
  int v6 = *((_DWORD *)this + 39);
  if ((v6 & 0x10) == 0) {
    goto LABEL_6;
  }
LABEL_36:
  uint64_t v18 = *((void *)this + 5);
  *(unsigned char *)int v3 = 41;
  *(void *)((char *)v3 + 1) = v18;
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
  int v6 = *((_DWORD *)this + 39);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_38:
    unint64_t v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 13);
    *(unsigned char *)int v3 = 56;
    unint64_t v21 = (unint64_t)v3 + 1;
    if ((v20 & 0x80000000) != 0)
    {
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v20, v21, a3);
      int v7 = *((_DWORD *)this + 39);
      if ((v7 & 0x80) != 0) {
        goto LABEL_45;
      }
    }
    else if (v20 > 0x7F)
    {
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v20, v21, a3);
      int v7 = *((_DWORD *)this + 39);
      if ((v7 & 0x80) != 0) {
        goto LABEL_45;
      }
    }
    else
    {
      *((unsigned char *)v3 + 1) = (_BYTE)v20;
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
      int v7 = *((_DWORD *)this + 39);
      if ((v7 & 0x80) != 0) {
        goto LABEL_45;
      }
    }
LABEL_9:
    if ((v7 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_46;
  }
LABEL_37:
  uint64_t v19 = *((void *)this + 7);
  *(unsigned char *)int v3 = 49;
  *(void *)((char *)v3 + 1) = v19;
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
  if ((*((_DWORD *)this + 39) & 0x40) != 0) {
    goto LABEL_38;
  }
LABEL_8:
  int v7 = *((_DWORD *)this + 39);
  if ((v7 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_45:
  uint64_t v22 = *((void *)this + 8);
  *(unsigned char *)int v3 = 65;
  *(void *)((char *)v3 + 1) = v22;
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
  int v7 = *((_DWORD *)this + 39);
  if ((v7 & 0x100) == 0)
  {
LABEL_10:
    if ((v7 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v23 = *((void *)this + 9);
  *(unsigned char *)int v3 = 73;
  *(void *)((char *)v3 + 1) = v23;
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
  int v7 = *((_DWORD *)this + 39);
  if ((v7 & 0x200) == 0)
  {
LABEL_11:
    if ((v7 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v24 = *((void *)this + 10);
  *(unsigned char *)int v3 = 81;
  *(void *)((char *)v3 + 1) = v24;
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
  int v7 = *((_DWORD *)this + 39);
  if ((v7 & 0x400) == 0)
  {
LABEL_12:
    if ((v7 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v25 = *((void *)this + 11);
  *(unsigned char *)int v3 = 89;
  *(void *)((char *)v3 + 1) = v25;
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
  int v7 = *((_DWORD *)this + 39);
  if ((v7 & 0x800) == 0)
  {
LABEL_13:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v26 = *((void *)this + 12);
  *(unsigned char *)int v3 = 97;
  *(void *)((char *)v3 + 1) = v26;
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
  int v7 = *((_DWORD *)this + 39);
  if ((v7 & 0x1000) == 0)
  {
LABEL_14:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v27 = *((void *)this + 13);
  *(unsigned char *)int v3 = 105;
  *(void *)((char *)v3 + 1) = v27;
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
  if ((*((_DWORD *)this + 39) & 0x2000) == 0)
  {
LABEL_15:
    if ((*((unsigned char *)this + 157) & 0x40) == 0) {
      goto LABEL_16;
    }
LABEL_58:
    char v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 29);
    *(unsigned char *)int v3 = 120;
    unint64_t v31 = (unint64_t)v3 + 1;
    if ((v30 & 0x80000000) != 0)
    {
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v30, v31, a3);
      int v8 = *((_DWORD *)this + 39);
      if ((v8 & 0x8000) != 0) {
        goto LABEL_65;
      }
    }
    else if (v30 > 0x7F)
    {
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v30, v31, a3);
      int v8 = *((_DWORD *)this + 39);
      if ((v8 & 0x8000) != 0) {
        goto LABEL_65;
      }
    }
    else
    {
      *((unsigned char *)v3 + 1) = (_BYTE)v30;
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
      int v8 = *((_DWORD *)this + 39);
      if ((v8 & 0x8000) != 0) {
        goto LABEL_65;
      }
    }
LABEL_17:
    if ((v8 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_66;
  }
LABEL_51:
  uint64_t v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 28);
  *(unsigned char *)int v3 = 112;
  unint64_t v29 = (unint64_t)v3 + 1;
  if ((v28 & 0x80000000) != 0)
  {
    int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v28, v29, a3);
    if ((*((unsigned char *)this + 157) & 0x40) != 0) {
      goto LABEL_58;
    }
  }
  else if (v28 > 0x7F)
  {
    int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v28, v29, a3);
    if ((*((unsigned char *)this + 157) & 0x40) != 0) {
      goto LABEL_58;
    }
  }
  else
  {
    *((unsigned char *)v3 + 1) = (_BYTE)v28;
    int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((unsigned char *)this + 157) & 0x40) != 0) {
      goto LABEL_58;
    }
  }
LABEL_16:
  int v8 = *((_DWORD *)this + 39);
  if ((v8 & 0x8000) == 0) {
    goto LABEL_17;
  }
LABEL_65:
  uint64_t v32 = *((void *)this + 15);
  *(_WORD *)int v3 = 385;
  *(void *)((char *)v3 + 2) = v32;
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 10);
  int v8 = *((_DWORD *)this + 39);
  if ((v8 & 0x10000) == 0)
  {
LABEL_18:
    if ((v8 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v33 = *((void *)this + 16);
  *(_WORD *)int v3 = 393;
  *(void *)((char *)v3 + 2) = v33;
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 10);
  int v8 = *((_DWORD *)this + 39);
  if ((v8 & 0x20000) == 0)
  {
LABEL_19:
    if ((v8 & 0x40000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v34 = *((void *)this + 17);
  *(_WORD *)int v3 = 401;
  *(void *)((char *)v3 + 2) = v34;
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 10);
  if ((*((_DWORD *)this + 39) & 0x40000) == 0) {
    goto LABEL_83;
  }
LABEL_68:
  uint64_t v35 = *((void *)this + 18);
  if (v35)
  {
    *(_WORD *)int v3 = 410;
    unsigned int v36 = v3 + 2;
    uint64_t v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v35 + 20);
    if (v37 <= 0x7F) {
      goto LABEL_70;
    }
  }
  else
  {
    uint64_t v35 = *(void *)(qword_10047EB60 + 144);
    *(_WORD *)int v3 = 410;
    unsigned int v36 = v3 + 2;
    uint64_t v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v35 + 20);
    if (v37 <= 0x7F)
    {
LABEL_70:
      *((unsigned char *)v3 + 2) = (_BYTE)v37;
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 3);
      if ((*(unsigned char *)(v35 + 24) & 1) == 0) {
        goto LABEL_80;
      }
LABEL_74:
      unint64_t v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(int *)(v35 + 16);
      *(unsigned char *)int v3 = 8;
      unint64_t v39 = (unint64_t)v3 + 1;
      if ((v38 & 0x80000000) != 0)
      {
        uint64_t v40 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v38, v39, a3);
      }
      else
      {
        if (v38 <= 0x7F)
        {
          *((unsigned char *)v3 + 1) = (_BYTE)v38;
          int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
          goto LABEL_80;
        }
        uint64_t v40 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v38, v39, a3);
      }
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)v40;
      goto LABEL_80;
    }
  }
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v37, v36, a3);
  if (*(unsigned char *)(v35 + 24)) {
    goto LABEL_74;
  }
LABEL_80:
  uint64_t v43 = *(void **)(v35 + 8);
  uint64_t v42 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v35 + 8);
  unint64_t v41 = v43;
  if (v43 && *v41 != v41[1]) {
    int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v42, v3, a3);
  }
LABEL_83:
  unint64_t v46 = (void *)*((void *)this + 1);
  unint64_t v45 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  uint64_t v44 = v46;
  if (!v46 || *v44 == v44[1]) {
    return v3;
  }

  return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v45, v3, a3);
}

uint64_t sub_10009B6C8(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 40);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v8 & 0x80000000) != 0)
      {
        LODWORD(v4) = 11;
        if ((v3 & 2) == 0) {
          goto LABEL_20;
        }
      }
      else if (v8 >= 0x80)
      {
        LODWORD(v4) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2)+ 1;
        int v3 = *(_DWORD *)(a1 + 40);
        if ((v3 & 2) == 0) {
          goto LABEL_20;
        }
      }
      else
      {
        LODWORD(v4) = 2;
        if ((v3 & 2) == 0) {
          goto LABEL_20;
        }
      }
    }
    else
    {
      LODWORD(v4) = 0;
      if ((*(unsigned char *)(a1 + 40) & 2) == 0) {
        goto LABEL_20;
      }
    }
    unsigned int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v9 & 0x80000000) != 0)
    {
      int v10 = 11;
    }
    else if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2)
          + 1;
      int v3 = *(_DWORD *)(a1 + 40);
    }
    else
    {
      int v10 = 2;
    }
    LODWORD(v4) = v10 + v4;
LABEL_20:
    if ((v3 & 4) != 0)
    {
      unint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if ((v11 & 0x80000000) != 0)
      {
        int v12 = 11;
      }
      else if (v11 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2)
            + 1;
        int v3 = *(_DWORD *)(a1 + 40);
      }
      else
      {
        int v12 = 2;
      }
      LODWORD(v4) = v12 + v4;
    }
    if ((v3 & 8) != 0) {
      uint64_t v4 = (v4 + 9);
    }
    else {
      uint64_t v4 = v4;
    }
    int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
    int v6 = *(void **)(a1 + 8);
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
  uint64_t v4 = 0;
  int v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  int v6 = *(void **)(a1 + 8);
  if (!v6)
  {
LABEL_6:
    *(_DWORD *)(a1 + 36) = v4;
    return v4;
  }
LABEL_31:
  if (*v6 == v6[1]) {
    goto LABEL_6;
  }
  uint64_t v13 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v5, a2)
      + v4;
  *(_DWORD *)(a1 + 36) = v13;
  return v13;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_10009B7F4(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  int v3 = a2;
  if (*((unsigned char *)this + 40))
  {
    int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 4);
    *(unsigned char *)a2 = 8;
    unsigned int v9 = (char *)a2 + 1;
    if ((v8 & 0x80000000) != 0)
    {
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v8, (unint64_t)v9, a3);
      if ((*((unsigned char *)this + 40) & 2) != 0) {
        goto LABEL_14;
      }
    }
    else if (v8 > 0x7F)
    {
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v8, v9, a3);
      if ((*((unsigned char *)this + 40) & 2) != 0) {
        goto LABEL_14;
      }
    }
    else
    {
      *((unsigned char *)v3 + 1) = (_BYTE)v8;
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
      if ((*((unsigned char *)this + 40) & 2) != 0) {
        goto LABEL_14;
      }
    }
LABEL_3:
    if ((*((unsigned char *)this + 40) & 4) == 0) {
      goto LABEL_4;
    }
LABEL_21:
    int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 8);
    *(unsigned char *)int v3 = 24;
    unint64_t v13 = (unint64_t)v3 + 1;
    if ((v12 & 0x80000000) != 0)
    {
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v12, v13, a3);
      if ((*((unsigned char *)this + 40) & 8) != 0) {
        goto LABEL_28;
      }
    }
    else if (v12 > 0x7F)
    {
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v12, v13, a3);
      if ((*((unsigned char *)this + 40) & 8) != 0) {
        goto LABEL_28;
      }
    }
    else
    {
      *((unsigned char *)v3 + 1) = (_BYTE)v12;
      int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
      if ((*((unsigned char *)this + 40) & 8) != 0) {
        goto LABEL_28;
      }
    }
LABEL_5:
    int v7 = (void *)*((void *)this + 1);
    int v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    int v5 = v7;
    if (!v7) {
      return v3;
    }
    goto LABEL_29;
  }
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_3;
  }
LABEL_14:
  int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 5);
  *(unsigned char *)int v3 = 16;
  unint64_t v11 = (unint64_t)v3 + 1;
  if ((v10 & 0x80000000) != 0)
  {
    int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v10, v11, a3);
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_21;
    }
  }
  else if (v10 > 0x7F)
  {
    int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v10, v11, a3);
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_21;
    }
  }
  else
  {
    *((unsigned char *)v3 + 1) = (_BYTE)v10;
    int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_21;
    }
  }
LABEL_4:
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_5;
  }
LABEL_28:
  uint64_t v14 = *((void *)this + 3);
  *(unsigned char *)int v3 = 33;
  *(void *)((char *)v3 + 1) = v14;
  int v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
  uint64_t v15 = (void *)*((void *)this + 1);
  int v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  int v5 = v15;
  if (!v15) {
    return v3;
  }
LABEL_29:
  if (*v5 == v5[1]) {
    return v3;
  }

  return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v6, v3, a3);
}

uint64_t sub_10009B9C8(int *a1)
{
  unsigned __int16 v2 = sub_10009698C(*a1);
  sub_10009E7B0(&v10, v2, 1u, 1u);
  int v3 = *a1;
  if ((*a1 + 2) < 3)
  {
    if (v3 == -2 || v10 == -2) {
LABEL_18:
    }
      sub_1001974B0();
LABEL_10:
    if (v3)
    {
      if (v3 == -1)
      {
        if (v10 == -1) {
          goto LABEL_18;
        }
LABEL_28:
        sub_1001974B0();
      }
      if (v10 != -1)
      {
        if (!v10) {
          goto LABEL_28;
        }
        int v7 = v3 - v10;
        __int16 v8 = v3 == v10 ? 0 : -2;
        unsigned __int16 v9 = v7 == -1 ? -1 : v8;
        uint64_t v5 = v9 + 1;
        if ((v5 & 0x10000) != 0) {
          goto LABEL_28;
        }
        goto LABEL_15;
      }
    }
    else if (!v10)
    {
      goto LABEL_18;
    }
    return 1;
  }
  if ((v10 + 2) < 3)
  {
    if (v10 == -2) {
      goto LABEL_18;
    }
    goto LABEL_10;
  }
  uint64_t v5 = (unsigned __int16)(v3 - v10) + 1;
  if ((v5 & 0x10000) != 0) {
    goto LABEL_28;
  }
LABEL_15:
  if ((unsigned __int16)v5 >= 0x16Fu) {
    goto LABEL_18;
  }
  return v5;
}

uint64_t sub_10009BB18@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = result;
  if (*(char *)(result + 23) < 0) {
    uint64_t v2 = *(void *)(result + 8);
  }
  else {
    uint64_t v2 = *(unsigned __int8 *)(result + 23);
  }
  a2[4] = v2;
  return result;
}

char *sub_10009BB3C@<X0>(unsigned char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned char **)a1;
    unint64_t v4 = *((void *)v2 + 1);
  }
  else
  {
    unint64_t v4 = a1[23];
  }
  unint64_t v27 = 0;
  uint64_t result = (char *)sub_100056140(a1, v4, &v27);
  if ((unint64_t)result >= v4)
  {
    LOBYTE(v7) = v2[23];
  }
  else
  {
    int v6 = (char *)(v4 - 1);
    int v7 = (char)v2[23];
    __int16 v8 = v2;
    if (v7 < 0) {
      __int16 v8 = *(unsigned char **)v2;
    }
    if (v6[(void)v8] == 47)
    {
      unsigned __int16 v9 = *(unsigned char **)v2;
      if (v6 >= result) {
        int v6 = result;
      }
      if (v7 >= 0) {
        unsigned __int16 v9 = v2;
      }
      int v10 = v9 - 2;
      unint64_t v11 = v4;
      while (1)
      {
        int v12 = (char *)(v11 - 1);
        if (v11 - 1 <= (unint64_t)result) {
          break;
        }
        int v13 = v10[v11--];
        if (v13 != 47) {
          goto LABEL_42;
        }
      }
      int v12 = v6;
LABEL_42:
      if (v12 == result)
      {
        unint64_t v4 = 1;
        goto LABEL_48;
      }
    }
  }
  if (v27 == v4)
  {
    uint64_t result = 0;
LABEL_48:
    if ((v7 & 0x80) != 0) {
      uint64_t v2 = *(unsigned char **)v2;
    }
    return (char *)sub_10003FCE8(a2, &result[(void)v2], &result[(void)v2 + v4], v4);
  }
  if (v4 >= v27) {
    unint64_t v14 = v27;
  }
  else {
    unint64_t v14 = v4;
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v15 = v2;
  }
  else {
    uint64_t v15 = *(unsigned char **)v2;
  }
  uint64_t v16 = v15 - 1;
  unint64_t v17 = v4;
  while (v17 > v27)
  {
    unint64_t v18 = v17 - 1;
    int v19 = v16[v17--];
    if (v19 == 47)
    {
      unint64_t v14 = v18 + 1;
      break;
    }
  }
  v4 -= v14;
  if (v4)
  {
LABEL_47:
    uint64_t result = (char *)v14;
    goto LABEL_48;
  }
  if (v14 <= v27) {
    goto LABEL_46;
  }
  unint64_t v20 = (char *)(v14 - 1);
  unint64_t v21 = (v7 & 0x80u) == 0 ? v2 : *(unsigned char **)v2;
  if (v20[(void)v21] != 47) {
    goto LABEL_46;
  }
  if (v20 >= result) {
    unint64_t v20 = result;
  }
  uint64_t v22 = v21 - 2;
  unint64_t v23 = v14;
  while (1)
  {
    uint64_t v24 = (char *)(v23 - 1);
    if (v23 - 1 <= (unint64_t)result) {
      break;
    }
    int v25 = v22[v23--];
    if (v25 != 47) {
      goto LABEL_45;
    }
  }
  uint64_t v24 = v20;
LABEL_45:
  if (v24 == result)
  {
LABEL_46:
    unint64_t v4 = 0;
    goto LABEL_47;
  }
  if (byte_10047D467 < 0)
  {
    long long v26 = xmmword_10047D450;
    return (char *)sub_1000559FC(a2, (void *)v26, *((unint64_t *)&v26 + 1));
  }
  else
  {
    *(_OWORD *)a2 = xmmword_10047D450;
    a2[2] = unk_10047D460;
  }
  return result;
}

uint64_t sub_10009BD68(uint64_t a1)
{
  return *(void *)(a1 + 360);
}

uint64_t sub_10009BD70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t sub_10009BD78(uint64_t a1)
{
  return *(unsigned int *)(sub_10009BD68(*(void *)(a1 + 176)) + 8);
}

void *sub_10009BD98@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = off_100469970;
  result[3] = off_100469A60;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

uint64_t sub_10009BE04(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 12);
  if (result == -1)
  {
    sub_1000AE4B0(v3, "");
    sub_1002768DC("maxRegionalByteSize is uninitilized", &__p);
    sub_10016A2C4((uint64_t)v3, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v4 < 0) {
      operator delete(v3[0]);
    }
    sub_1000D11E0((uint64_t)&v2);
  }
  return result;
}

void sub_10009BEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009BF30(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 4);
  if (result == -1)
  {
    sub_1000AE4B0(v3, "");
    sub_10015F140("maxIndoorByteSize is uninitilized", &__p);
    sub_10016A2C4((uint64_t)v3, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v4 < 0) {
      operator delete(v3[0]);
    }
    sub_1000D11E0((uint64_t)&v2);
  }
  return result;
}

void sub_10009C018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009C05C(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 8);
  if (result == -1)
  {
    sub_1000AE4B0(v3, "");
    sub_1000E1BEC("maxRegionalCount is uninitilized", &__p);
    sub_10016A2C4((uint64_t)v3, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v4 < 0) {
      operator delete(v3[0]);
    }
    sub_1000D11E0((uint64_t)&v2);
  }
  return result;
}

void sub_10009C144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009C188(unsigned int *a1)
{
  uint64_t result = *a1;
  if (result == -1)
  {
    sub_1000AE4B0(v3, "");
    sub_100270144("maxIndoorCount is uninitilized", &__p);
    sub_10016A2C4((uint64_t)v3, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v4 < 0) {
      operator delete(v3[0]);
    }
    sub_1000D11E0((uint64_t)&v2);
  }
  return result;
}

void sub_10009C270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009C2B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

void sub_10009C2BC(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  if (*a1)
  {
    uint64_t v6 = a1[1];
    *a4 = *a1;
    a4[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unsigned __int16 v9 = operator new(0x108uLL);
    int v10 = v9;
    v9[1] = 0;
    _OWORD v9[2] = 0;
    void *v9 = off_100462B38;
    unint64_t v11 = v9 + 3;
    int v12 = (std::__shared_weak_count *)a1[8];
    uint64_t v14 = a1[7];
    uint64_t v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_10009FF18((uint64_t)(v9 + 3), (uint64_t)&v14, a3, a2);
    int v13 = v15;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    *a4 = v11;
    a4[1] = v10;
  }
}

void sub_10009C3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1003A60B0(a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_10009C404(uint64_t a1)
{
  return a1 + 40;
}

float sub_10009C40C(uint64_t a1)
{
  return *(float *)(*(void *)a1 + 104);
}

float sub_10009C418(uint64_t a1)
{
  return *(float *)(*(void *)a1 + 92);
}

uint64_t sub_10009C424(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 88);
}

uint64_t sub_10009C430(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 80);
}

uint64_t sub_10009C43C(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)a1 + 113) >> 6) & 1;
}

double sub_10009C44C(uint64_t a1)
{
  return *(double *)(*(void *)a1 + 48);
}

uint64_t sub_10009C458(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return *(unsigned int *)(a1 + 60);
  }
  uint64_t v2 = *(int *)(*(void *)a1 + 24);
  if (!v2) {
    return 0;
  }
  int v3 = *(uint64_t **)(*(void *)a1 + 16);
  uint64_t v4 = (v2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (!v4)
  {
    LODWORD(result) = 0;
    unsigned __int16 v9 = v3;
LABEL_11:
    int v12 = &v3[v2];
    do
    {
      uint64_t v13 = *v9++;
      uint64_t result = (*(_DWORD *)(v13 + 48) + result);
    }
    while (v9 != v12);
    return result;
  }
  int v5 = 0;
  int v6 = 0;
  uint64_t v7 = v4 + 1;
  uint64_t v8 = (v4 + 1) & 0x3FFFFFFFFFFFFFFELL;
  unsigned __int16 v9 = &v3[v8];
  int v10 = v3 + 1;
  uint64_t v11 = v8;
  do
  {
    v5 += *(_DWORD *)(*(v10 - 1) + 48);
    v6 += *(_DWORD *)(*v10 + 48);
    v10 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t result = (v6 + v5);
  if (v7 != v8) {
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_10009C4FC(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)a1 + 112) >> 6) & 1;
}

uint64_t sub_10009C50C(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 64);
}

uint64_t sub_10009C518(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 56);
}

char *sub_10009C524@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[31] < 0) {
    return (char *)sub_1000559FC((unsigned char *)a2, *((void **)result + 1), *((void *)result + 2));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 16) = *((void *)result + 3);
  return result;
}

uint64_t sub_10009C550(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = a2[7];
  unsigned int v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    void *exception = off_100454818;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  int v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(void *)a2 + 32))(a2, "WifiZaxisData");
  if (*(unsigned char *)(a1 + 12))
  {
    int v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, "numberOfZaxisSlamApsUsed", 8, 1)+ v6;
    int v8 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 144))(a2, *(unsigned int *)(a1 + 8));
    int v6 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 56))(a2);
  }
  int v9 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 64))(a2) + v6;
  uint64_t result = v9 + (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_10009C718(uint64_t a1)
{
  return a1 + 40;
}

uint64_t sub_10009C720(uint64_t a1)
{
  return a1 + 16;
}

uint64_t *sub_10009C728(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *uint64_t result = *a2;
  *a2 = v2;
  return result;
}

uint64_t *sub_10009C73C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(v2 + 40)) {
      *(unsigned char *)(v2 + 40) = 0;
    }
    if (*(unsigned char *)(v2 + 8)) {
      *(unsigned char *)(v2 + 8) = 0;
    }
    operator delete();
  }
  return a1;
}

const char *sub_10009C798()
{
  return "FORCE_PDR";
}

const char *sub_10009C7A8()
{
  return "DATA_HOST";
}

uint64_t *sub_10009C7B8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047E598, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_10047E598))
  {
    return &qword_10047E650;
  }
  qword_10047E650 = (uint64_t)sub_100163878();
  unk_10047E658 = v1;
  byte_10047E660 = 0;
  byte_10047E662 = 0;
  byte_10047E664 = 0;
  __cxa_guard_release(&qword_10047E598);
  return &qword_10047E650;
}

void sub_10009C830(_Unwind_Exception *a1)
{
}

uint64_t *sub_10009C848()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047E5A8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_10047E5A8))
  {
    return &qword_10047E720;
  }
  qword_10047E720 = (uint64_t)sub_1001638F0();
  unk_10047E728 = v1;
  byte_10047E730 = 0;
  byte_10047E738 = 0;
  byte_10047E73A = 0;
  __cxa_guard_release(&qword_10047E5A8);
  return &qword_10047E720;
}

void sub_10009C8C0(_Unwind_Exception *a1)
{
}

uint64_t *sub_10009C8D8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047E540, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_10047E540))
  {
    return &qword_10047E680;
  }
  qword_10047E680 = (uint64_t)sub_100163784();
  unk_10047E688 = v1;
  byte_10047E690 = 0;
  byte_10047E698 = 0;
  byte_10047E69A = 0;
  __cxa_guard_release(&qword_10047E540);
  return &qword_10047E680;
}

void sub_10009C950(_Unwind_Exception *a1)
{
}

uint64_t *sub_10009C968()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047E560, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_10047E560))
  {
    return &qword_10047E6E0;
  }
  qword_10047E6E0 = (uint64_t)sub_1001637E8();
  unk_10047E6E8 = v1;
  byte_10047E6F0 = 0;
  byte_10047E6F8 = 0;
  byte_10047E6FA = 0;
  __cxa_guard_release(&qword_10047E560);
  return &qword_10047E6E0;
}

void sub_10009C9E0(_Unwind_Exception *a1)
{
}

uint64_t *sub_10009C9F8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047E5B8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_10047E5B8))
  {
    return &qword_10047E760;
  }
  qword_10047E760 = (uint64_t)sub_100163920();
  unk_10047E768 = v1;
  byte_10047E770 = 0;
  byte_10047E778 = 0;
  byte_10047E77A = 0;
  __cxa_guard_release(&qword_10047E5B8);
  return &qword_10047E760;
}

void sub_10009CA70(_Unwind_Exception *a1)
{
}

uint64_t sub_10009CA88(uint64_t a1, uint64_t *a2)
{
  sub_1000776C8(*(void *)a1);
  if (v15[0] == v15[0] >> 31)
  {
    uint64_t v4 = *a2;
  }
  else
  {
    uint64_t v4 = sub_1002A4C14(v15, (uint64_t)__p);
    if (!*(unsigned char *)(a1 + 8))
    {
      if (qword_10047BED8 != -1) {
        dispatch_once(&qword_10047BED8, &stru_1004641B8);
      }
      int v5 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)a1;
        sub_10015F190(v15, (uint64_t)__p);
        if (v10 >= 0) {
          int v7 = __p;
        }
        else {
          int v7 = (void **)__p[0];
        }
        *(_DWORD *)std::runtime_error buf = 136315394;
        uint64_t v12 = v6;
        __int16 v13 = 2080;
        uint64_t v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "developer override of %s with %s", buf, 0x16u);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      *(unsigned char *)(a1 + 8) = 1;
    }
  }
  sub_100077BC8((uint64_t)v15);
  return v4;
}

void sub_10009CBF0(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unsigned int v3 = va_arg(va1, void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::string __p = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t buf = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  if (qword_10047BED8 == -1)
  {
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_1004641B8);
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      sub_10015F190((int *)va1, (uint64_t)va);
      sub_10015F2D0();
    }
  }
  __cxa_rethrow();
}

uint64_t sub_10009CD54(uint64_t a1, unsigned int *a2)
{
  sub_1000776C8(*(void *)a1);
  if (v15[0] == v15[0] >> 31)
  {
    uint64_t v4 = *a2;
  }
  else
  {
    uint64_t v4 = sub_1002A423C(v15, (uint64_t)__p);
    if (!*(unsigned char *)(a1 + 8))
    {
      if (qword_10047BED8 != -1) {
        dispatch_once(&qword_10047BED8, &stru_1004641B8);
      }
      uint64_t v5 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)a1;
        sub_10015F190(v15, (uint64_t)__p);
        if (v10 >= 0) {
          int v7 = __p;
        }
        else {
          int v7 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 136315394;
        uint64_t v12 = v6;
        __int16 v13 = 2080;
        uint64_t v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "developer override of %s with %s", buf, 0x16u);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      *(unsigned char *)(a1 + 8) = 1;
    }
  }
  sub_100077BC8((uint64_t)v15);
  return v4;
}

void sub_10009CEBC(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unsigned int v3 = va_arg(va1, void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::string __p = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t buf = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  if (qword_10047BED8 == -1)
  {
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_1004641B8);
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      sub_10015F190((int *)va1, (uint64_t)va);
      sub_10015F2D0();
    }
  }
  __cxa_rethrow();
}

const char *sub_10009D020()
{
  return "DYNAMIC_SCAN_STRATEGY_TARGET_CHANNEL_REFRESH_PERIOD_MILLIS";
}

const char *sub_10009D030()
{
  return "FIX_CROSS_CHECK_CA_EVENT_SAMPLING_FACTOR";
}

const char *sub_10009D040()
{
  return "DAYS_BEFORE_REGIONAL_TILE_REDOWNLOAD";
}

const char *sub_10009D050()
{
  return "PREFETCH_REGIONAL_DB_BYTE_SIZE_CAP";
}

const char *sub_10009D064()
{
  return "DAYS_BEFORE_INDOOR_TILE_REDOWNLOAD";
}

void sub_10009D074(uint64_t a1@<X8>)
{
  *(void *)a1 = "MINIMUM_DISK_SPACE_REQUIRED_BYTES";
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 157286400;
}

const char *sub_10009D090()
{
  return "PREFETCH_INDOOR_DB_BYTE_SIZE_CAP";
}

const char *sub_10009D0A4()
{
  return "DYNAMIC_UNIVERSE_DISABLED_VENUES";
}

const char *sub_10009D0B4()
{
  return "DYNAMIC_UNIVERSE_FORCED_VENUES";
}

const char *sub_10009D0C4()
{
  return "DYNAMIC_UNIVERSE_FAKE_LAST_FIX";
}

const char *sub_10009D0D4()
{
  return "PREFETCH_REGIONAL_DB_SIZE_CAP";
}

const char *sub_10009D0E4()
{
  return "LOG_MAX_DIRECTORY_SIZE_BYTES";
}

const char *sub_10009D0F4()
{
  return "PREFETCH_INDOOR_DB_SIZE_CAP";
}

const char *sub_10009D104()
{
  return "LOG_MAX_NUMBER_OF_TRACES";
}

const char *sub_10009D114()
{
  return "LOG_MAX_TRACE_AGE_DAYS";
}

const char *sub_10009D124()
{
  return "DATA_HOST_PROTOCOL";
}

const char *sub_10009D134()
{
  return "USE_STRIDELEN_EST";
}

const char *sub_10009D144()
{
  return "LOG_PRUNE_TRACES";
}

const char *sub_10009D154()
{
  return "SCAN_BLUETOOTH";
}

const char *sub_10009D164()
{
  return "DATA_HOST_PORT";
}

const char *sub_10009D174()
{
  return "WIFI2_ENABLED";
}

char *sub_10009D184@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = "LOG_DIRECTORY";
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 24) = xmmword_1003E7200;
  strcpy(result, "/var/mobile/Library/Logs/pipelined");
  return result;
}

const char *sub_10009D1E8()
{
  return "DATA_PREFIX";
}

const char *sub_10009D1F8()
{
  return "LOG_TRACES";
}

double sub_10009D208()
{
  return 0.0;
}

void sub_10009D218(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a1)
{
  __ns.__rep_ = a1;
  std::this_thread::sleep_for (&__ns);
}

void sub_10009D240(const void **a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int *a5@<X8>)
{
  size_t v6 = *((unsigned __int8 *)a1 + 23);
  int v7 = (const void **)*a1;
  size_t v8 = (size_t)a1[1];
  v10[0] = 0;
  if (*(unsigned char *)a3)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    v10[0] = 1;
  }
  if ((v6 & 0x80u) == 0) {
    size_t v9 = v6;
  }
  else {
    size_t v9 = v8;
  }
  if ((v6 & 0x80u) != 0) {
    a1 = v7;
  }
  sub_100017EF8(a1, v9, a2, (uint64_t)v10, a4, a5);
}

ssize_t sub_10009D2D4(int *a1, const void *a2, size_t a3)
{
  ssize_t result = write(*a1, a2, a3);
  if (result == -1)
  {
    __cxa_allocate_exception(0x50uLL);
    int v4 = *__error();
    uint64_t v5 = std::system_category();
    std::system_error::system_error(&v7, v4, v5);
    sub_10018E868((uint64_t)v6);
    sub_100170764(&v7, (uint64_t)"size_t FileUtil::PosixHandle::write(const void *, size_t)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/file_util.cpp", 174, (uint64_t)v6);
  }
  return result;
}

void sub_10009D380(_Unwind_Exception *a1, void *__p, uint64_t a3, uint64_t a4, std::system_error *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__pa, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__pa) {
    operator delete(__pa);
  }
  std::system_error::~system_error((std::system_error *)&a13);
  _Unwind_Resume(a1);
}

void sub_10009D3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::system_error *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::system_error::~system_error((std::system_error *)&a13);
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void sub_10009D3C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009D3D4(int *a1)
{
  uint64_t result = fsync(*a1);
  if (result == -1)
  {
    __cxa_allocate_exception(0x50uLL);
    int v2 = *__error();
    unsigned int v3 = std::system_category();
    std::system_error::system_error(&v5, v2, v3);
    sub_10018E868((uint64_t)v4);
    sub_100170764(&v5, (uint64_t)"void FileUtil::PosixHandle::flush()", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/file_util.cpp", 156, (uint64_t)v4);
  }
  return result;
}